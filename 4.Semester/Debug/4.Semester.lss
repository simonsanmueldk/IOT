
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000646  00800200  00006abe  00006b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001069  00800846  00800846  00007198  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000071f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  00007234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eb43  00000000  00000000  00007e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bb4  00000000  00000000  000169af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073ac  00000000  00000000  0001a563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a1c  00000000  00000000  00021910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004625  00000000  00000000  0002432c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c88a  00000000  00000000  00028951  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  000351db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c7       	rjmp	.+3952   	; 0xfa2 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__vector_25>
      68:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b4 29 	jmp	0x5368	; 0x5368 <__vector_36>
      94:	0c 94 06 2a 	jmp	0x540c	; 0x540c <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 51 2e 	jmp	0x5ca2	; 0x5ca2 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <__vector_51>
      d0:	0c 94 9c 2a 	jmp	0x5538	; 0x5538 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__vector_54>
      dc:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ab 1d       	adc	r26, r11
      e6:	ab 1d       	adc	r26, r11
      e8:	ab 1d       	adc	r26, r11
      ea:	e2 1d       	adc	r30, r2
      ec:	ea 1d       	adc	r30, r10
      ee:	ff 1d       	adc	r31, r15
      f0:	ab 1d       	adc	r26, r11
      f2:	ab 1d       	adc	r26, r11
      f4:	e2 1d       	adc	r30, r2
      f6:	ea 1d       	adc	r30, r10
      f8:	73 2e       	mov	r7, r19
      fa:	e3 2e       	mov	r14, r19
      fc:	e3 2e       	mov	r14, r19
      fe:	e3 2e       	mov	r14, r19
     100:	e3 2e       	mov	r14, r19
     102:	e3 2e       	mov	r14, r19
     104:	e3 2e       	mov	r14, r19
     106:	e3 2e       	mov	r14, r19
     108:	73 2e       	mov	r7, r19
     10a:	e3 2e       	mov	r14, r19
     10c:	e3 2e       	mov	r14, r19
     10e:	e3 2e       	mov	r14, r19
     110:	e3 2e       	mov	r14, r19
     112:	e3 2e       	mov	r14, r19
     114:	e3 2e       	mov	r14, r19
     116:	e3 2e       	mov	r14, r19
     118:	75 2e       	mov	r7, r21
     11a:	e3 2e       	mov	r14, r19
     11c:	e3 2e       	mov	r14, r19
     11e:	e3 2e       	mov	r14, r19
     120:	e3 2e       	mov	r14, r19
     122:	e3 2e       	mov	r14, r19
     124:	e3 2e       	mov	r14, r19
     126:	e3 2e       	mov	r14, r19
     128:	e3 2e       	mov	r14, r19
     12a:	e3 2e       	mov	r14, r19
     12c:	e3 2e       	mov	r14, r19
     12e:	e3 2e       	mov	r14, r19
     130:	e3 2e       	mov	r14, r19
     132:	e3 2e       	mov	r14, r19
     134:	e3 2e       	mov	r14, r19
     136:	e3 2e       	mov	r14, r19
     138:	75 2e       	mov	r7, r21
     13a:	e3 2e       	mov	r14, r19
     13c:	e3 2e       	mov	r14, r19
     13e:	e3 2e       	mov	r14, r19
     140:	e3 2e       	mov	r14, r19
     142:	e3 2e       	mov	r14, r19
     144:	e3 2e       	mov	r14, r19
     146:	e3 2e       	mov	r14, r19
     148:	e3 2e       	mov	r14, r19
     14a:	e3 2e       	mov	r14, r19
     14c:	e3 2e       	mov	r14, r19
     14e:	e3 2e       	mov	r14, r19
     150:	e3 2e       	mov	r14, r19
     152:	e3 2e       	mov	r14, r19
     154:	e3 2e       	mov	r14, r19
     156:	e3 2e       	mov	r14, r19
     158:	df 2e       	mov	r13, r31
     15a:	e3 2e       	mov	r14, r19
     15c:	e3 2e       	mov	r14, r19
     15e:	e3 2e       	mov	r14, r19
     160:	e3 2e       	mov	r14, r19
     162:	e3 2e       	mov	r14, r19
     164:	e3 2e       	mov	r14, r19
     166:	e3 2e       	mov	r14, r19
     168:	aa 2e       	mov	r10, r26
     16a:	e3 2e       	mov	r14, r19
     16c:	e3 2e       	mov	r14, r19
     16e:	e3 2e       	mov	r14, r19
     170:	e3 2e       	mov	r14, r19
     172:	e3 2e       	mov	r14, r19
     174:	e3 2e       	mov	r14, r19
     176:	e3 2e       	mov	r14, r19
     178:	e3 2e       	mov	r14, r19
     17a:	e3 2e       	mov	r14, r19
     17c:	e3 2e       	mov	r14, r19
     17e:	e3 2e       	mov	r14, r19
     180:	e3 2e       	mov	r14, r19
     182:	e3 2e       	mov	r14, r19
     184:	e3 2e       	mov	r14, r19
     186:	e3 2e       	mov	r14, r19
     188:	9e 2e       	mov	r9, r30
     18a:	e3 2e       	mov	r14, r19
     18c:	e3 2e       	mov	r14, r19
     18e:	e3 2e       	mov	r14, r19
     190:	e3 2e       	mov	r14, r19
     192:	e3 2e       	mov	r14, r19
     194:	e3 2e       	mov	r14, r19
     196:	e3 2e       	mov	r14, r19
     198:	c2 2e       	mov	r12, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvCheckTasksWaitingTermination>
     19e:	80 91 69 16 	lds	r24, 0x1669	; 0x801669 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	37 d6       	rcall	.+3182   	; 0xe16 <vPortYield>
     1a8:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 28 1b 	call	0x3650	; 0x3650 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee eb       	ldi	r30, 0xBE	; 190
     1e4:	fa e6       	ldi	r31, 0x6A	; 106
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 34       	cpi	r26, 0x46	; 70
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a6 e4       	ldi	r26, 0x46	; 70
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 3a       	cpi	r26, 0xAF	; 175
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 40 21 	call	0x4280	; 0x4280 <main>
     20a:	0c 94 5d 35 	jmp	0x6aba	; 0x6aba <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <application_task_create>:
	{
		application_run(&xLastWakeTime,xFrequency);
	}
}
void application_task_create(UBaseType_t task_priority)
{
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
	xTaskCreate(
     216:	e1 2c       	mov	r14, r1
     218:	f1 2c       	mov	r15, r1
     21a:	08 2f       	mov	r16, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 ec       	ldi	r20, 0xC0	; 192
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6f e6       	ldi	r22, 0x6F	; 111
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	88 ec       	ldi	r24, 0xC8	; 200
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  task_priority  // Priority.
	,  NULL );
	
}
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <application_run>:
void application_run(TickType_t* xLastWakeTime,TickType_t xFrequency)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	66 97       	sbiw	r28, 0x16	; 22
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	5c 01       	movw	r10, r24
     266:	2a 01       	movw	r4, r20
     268:	3b 01       	movw	r6, r22
	xEventGroupSetBits(_meassureEventGroup, CO2_BIT | TEMPERATURE_HUMIDITY_BIT);
     26a:	43 e0       	ldi	r20, 0x03	; 3
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_meassureEventGroup>
     276:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_meassureEventGroup+0x1>
     27a:	18 d3       	rcall	.+1584   	; 0x8ac <xEventGroupSetBits>
	dataReadyEventBits=xEventGroupWaitBits(_dataReadyEventGroup,CO2_BIT | TEMPERATURE_HUMIDITY_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     27c:	cc 24       	eor	r12, r12
     27e:	ca 94       	dec	r12
     280:	dc 2c       	mov	r13, r12
     282:	76 01       	movw	r14, r12
     284:	01 e0       	ldi	r16, 0x01	; 1
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	43 e0       	ldi	r20, 0x03	; 3
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <_dataReadyEventGroup>
     294:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <_dataReadyEventGroup+0x1>
     298:	69 d2       	rcall	.+1234   	; 0x76c <xEventGroupWaitBits>
     29a:	60 93 64 18 	sts	0x1864, r22	; 0x801864 <dataReadyEventBits>
     29e:	70 93 65 18 	sts	0x1865, r23	; 0x801865 <dataReadyEventBits+0x1>
     2a2:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <dataReadyEventBits+0x2>
     2a6:	90 93 67 18 	sts	0x1867, r25	; 0x801867 <dataReadyEventBits+0x3>
	if ((dataReadyEventBits & (CO2_BIT | TEMPERATURE_HUMIDITY_BIT) ) == (CO2_BIT | TEMPERATURE_HUMIDITY_BIT))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <application_run+0x88>
     2be:	53 c0       	rjmp	.+166    	; 0x366 <application_run+0x12e>
	{
		setTemperatureData(get_temperature_data());
     2c0:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <get_temperature_data>
     2c4:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <setTemperatureData>
		printf("Temperature data ---> %d ",get_temperature_data());
     2c8:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <get_temperature_data>
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	8b e7       	ldi	r24, 0x7B	; 123
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
		setHumidityData(get_humidity_data());
     2dc:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <get_humidity_data>
     2e0:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <setHumidityData>
		printf(" Humidity data ---> %d ",get_humidity_data());
     2e4:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <get_humidity_data>
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	85 e9       	ldi	r24, 0x95	; 149
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
		setCO2Ppm(get_CO2_data());
     2f8:	81 d0       	rcall	.+258    	; 0x3fc <get_CO2_data>
     2fa:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <setCO2Ppm>
		printf("CO2 data ---> %i ",get_CO2_data());
     2fe:	7e d0       	rcall	.+252    	; 0x3fc <get_CO2_data>
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	8d ea       	ldi	r24, 0xAD	; 173
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
		
		payload=getLoRaPayload((uint8_t)2);
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <getLoRaPayload>
     31a:	86 e1       	ldi	r24, 0x16	; 22
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	a8 e6       	ldi	r26, 0x68	; 104
     322:	b8 e1       	ldi	r27, 0x18	; 24
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <application_run+0xec>
		vTaskDelay(pdMS_TO_TICKS(50UL));
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
     338:	0f ef       	ldi	r16, 0xFF	; 255
     33a:	1f ef       	ldi	r17, 0xFF	; 255
     33c:	98 01       	movw	r18, r16
     33e:	46 e1       	ldi	r20, 0x16	; 22
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	68 e6       	ldi	r22, 0x68	; 104
     344:	78 e1       	ldi	r23, 0x18	; 24
     346:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <xMessageBuffer>
     34a:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <xMessageBuffer+0x1>
     34e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xStreamBufferSend>
		xTaskDelayUntil(xLastWakeTime, xFrequency );
     352:	b3 01       	movw	r22, r6
     354:	a2 01       	movw	r20, r4
     356:	c5 01       	movw	r24, r10
     358:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskDelayUntil>
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	}
	
     366:	66 96       	adiw	r28, 0x16	; 22
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	7f 90       	pop	r7
     388:	6f 90       	pop	r6
     38a:	5f 90       	pop	r5
     38c:	4f 90       	pop	r4
     38e:	08 95       	ret

00000390 <Application_Task>:
extern EventGroupHandle_t _meassureEventGroup ;
extern EventGroupHandle_t _dataReadyEventGroup;


void Application_Task(void* pvParameters)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <Application_Task+0x6>
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     39c:	0e 94 3d 11 	call	0x227a	; 0x227a <xTaskGetTickCount>
     3a0:	69 83       	std	Y+1, r22	; 0x01
     3a2:	7a 83       	std	Y+2, r23	; 0x02
     3a4:	8b 83       	std	Y+3, r24	; 0x03
     3a6:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		application_run(&xLastWakeTime,xFrequency);
     3a8:	48 ea       	ldi	r20, 0xA8	; 168
     3aa:	58 e4       	ldi	r21, 0x48	; 72
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	41 df       	rcall	.-382    	; 0x238 <application_run>
     3b6:	f8 cf       	rjmp	.-16     	; 0x3a8 <Application_Task+0x18>

000003b8 <myCo2CallBack>:
	co2_sensor_t new_co2_data = pvPortMalloc(sizeof(CO2_Sensor));
	if(NULL == new_co2_data)
	{
		return NULL;
	}
	new_co2_data->co2_Data=co2_data;
     3b8:	90 93 82 18 	sts	0x1882, r25	; 0x801882 <co2_data+0x1>
     3bc:	80 93 81 18 	sts	0x1881, r24	; 0x801881 <co2_data>
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <_dataReadyEventGroup>
     3cc:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <_dataReadyEventGroup+0x1>
     3d0:	6d c2       	rjmp	.+1242   	; 0x8ac <xEventGroupSetBits>
     3d2:	08 95       	ret

000003d4 <co2_task_create>:

}
void co2_task_create(UBaseType_t task_priority)
{
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
	
	xTaskCreate(
     3da:	e1 2c       	mov	r14, r1
     3dc:	f1 2c       	mov	r15, r1
     3de:	08 2f       	mov	r16, r24
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 ec       	ldi	r20, 0xC0	; 192
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	6f eb       	ldi	r22, 0xBF	; 191
     3ea:	72 e0       	ldi	r23, 0x02	; 2
     3ec:	83 e3       	ldi	r24, 0x33	; 51
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
	,  "CO2 Task" 
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  task_priority 
	,  NULL );
}
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <get_CO2_data>:


uint16_t get_CO2_data(){
	
	return (uint16_t)co2_data;
}
     3fc:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <co2_data>
     400:	90 91 82 18 	lds	r25, 0x1882	; 0x801882 <co2_data+0x1>
     404:	08 95       	ret

00000406 <CO2_taskRun>:


void CO2_taskRun() {
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     410:	cc 24       	eor	r12, r12
     412:	ca 94       	dec	r12
     414:	dc 2c       	mov	r13, r12
     416:	76 01       	movw	r14, r12
     418:	01 e0       	ldi	r16, 0x01	; 1
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	42 e0       	ldi	r20, 0x02	; 2
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_meassureEventGroup>
     428:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_meassureEventGroup+0x1>
     42c:	9f d1       	rcall	.+830    	; 0x76c <xEventGroupWaitBits>
	_meassureEventGroup,
	CO2_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	if ((event_measure & CO2_BIT)==CO2_BIT)
     42e:	61 ff       	sbrs	r22, 1
     430:	14 c0       	rjmp	.+40     	; 0x45a <CO2_taskRun+0x54>
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
     432:	66 e0       	ldi	r22, 0x06	; 6
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
		rc = mh_z19_takeMeassuring();
     43e:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <mh_z19_takeMeassuring>
     442:	80 93 80 18 	sts	0x1880, r24	; 0x801880 <rc>
		if (rc != MHZ19_OK)
     446:	88 23       	and	r24, r24
     448:	41 f0       	breq	.+16     	; 0x45a <CO2_taskRun+0x54>
		{
			printf("CO2 task got wrong");
     44a:	88 ec       	ldi	r24, 0xC8	; 200
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
		}
	}		
}
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	mh_z19_injectCallBack(myCo2CallBack);
     466:	8c ed       	ldi	r24, 0xDC	; 220
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 75 27 	call	0x4eea	; 0x4eea <mh_z19_injectCallBack>
	for(;;)
	{
		CO2_taskRun();
     46e:	cb df       	rcall	.-106    	; 0x406 <CO2_taskRun>
     470:	fe cf       	rjmp	.-4      	; 0x46e <CO2_Sensor_Task+0x8>

00000472 <Configuration_SetMinTemperature>:

//-----------------------------Methods--------------------------//


void Configuration_SetMinTemperature(int16_t temperature_data)
{
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     47a:	4c e0       	ldi	r20, 0x0C	; 12
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     486:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     48a:	0e 94 9d 0a 	call	0x153a	; 0x153a <xQueueSemaphoreTake>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	79 f4       	brne	.+30     	; 0x4b0 <Configuration_SetMinTemperature+0x3e>
	{
		min_temperature_data=temperature_data;
     492:	d0 93 8c 18 	sts	0x188C, r29	; 0x80188c <min_temperature_data+0x1>
     496:	c0 93 8b 18 	sts	0x188B, r28	; 0x80188b <min_temperature_data>
		xSemaphoreGive(mutex);
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	a9 01       	movw	r20, r18
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     4aa:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     4ae:	cb d6       	rcall	.+3478   	; 0x1246 <xQueueGenericSend>
	}
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <Configuration_SetMaxTemperature>:
void Configuration_SetMaxTemperature(int16_t temperature_data)
{
     4b8:	0f 93       	push	r16
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     4c0:	4f ef       	ldi	r20, 0xFF	; 255
     4c2:	5f ef       	ldi	r21, 0xFF	; 255
     4c4:	ba 01       	movw	r22, r20
     4c6:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     4ca:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     4ce:	0e 94 9d 0a 	call	0x153a	; 0x153a <xQueueSemaphoreTake>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	79 f4       	brne	.+30     	; 0x4f4 <Configuration_SetMaxTemperature+0x3c>
	{
		max_temperature_data=temperature_data;
     4d6:	d0 93 92 18 	sts	0x1892, r29	; 0x801892 <max_temperature_data+0x1>
     4da:	c0 93 91 18 	sts	0x1891, r28	; 0x801891 <max_temperature_data>
		xSemaphoreGive(mutex);
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     4ee:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     4f2:	a9 d6       	rcall	.+3410   	; 0x1246 <xQueueGenericSend>
	}
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <Configuration_SetMinHumidity>:
void Configuration_SetMinHumidity(uint16_t humidity_data)
{
     4fc:	0f 93       	push	r16
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     504:	4f ef       	ldi	r20, 0xFF	; 255
     506:	5f ef       	ldi	r21, 0xFF	; 255
     508:	ba 01       	movw	r22, r20
     50a:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     50e:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     512:	0e 94 9d 0a 	call	0x153a	; 0x153a <xQueueSemaphoreTake>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	79 f4       	brne	.+30     	; 0x538 <Configuration_SetMinHumidity+0x3c>
	{
	min_humidity_data=humidity_data;
     51a:	d0 93 8e 18 	sts	0x188E, r29	; 0x80188e <min_humidity_data+0x1>
     51e:	c0 93 8d 18 	sts	0x188D, r28	; 0x80188d <min_humidity_data>
	xSemaphoreGive(mutex);	
     522:	00 e0       	ldi	r16, 0x00	; 0
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     532:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     536:	87 d6       	rcall	.+3342   	; 0x1246 <xQueueGenericSend>
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <Configuration_SetMaxHumidity>:


void Configuration_SetMaxHumidity(uint16_t humidity_data)
{
     540:	0f 93       	push	r16
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     548:	4f ef       	ldi	r20, 0xFF	; 255
     54a:	5f ef       	ldi	r21, 0xFF	; 255
     54c:	ba 01       	movw	r22, r20
     54e:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     552:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     556:	f1 d7       	rcall	.+4066   	; 0x153a <xQueueSemaphoreTake>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	79 f4       	brne	.+30     	; 0x57a <Configuration_SetMaxHumidity+0x3a>
	{
	max_humidity_data=humidity_data;
     55c:	d0 93 90 18 	sts	0x1890, r29	; 0x801890 <max_humidity_data+0x1>
     560:	c0 93 8f 18 	sts	0x188F, r28	; 0x80188f <max_humidity_data>
	xSemaphoreGive(mutex);
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <mutex>
     574:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <mutex+0x1>
     578:	66 d6       	rcall	.+3276   	; 0x1246 <xQueueGenericSend>
	}
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <Configuration_GetMaxTemperature>:

int16_t Configuration_GetMaxTemperature()
{
	return max_temperature_data;	
}
     582:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <max_temperature_data>
     586:	90 91 92 18 	lds	r25, 0x1892	; 0x801892 <max_temperature_data+0x1>
     58a:	08 95       	ret

0000058c <Configuration_GetMinTemperature>:
int16_t Configuration_GetMinTemperature()
{
	return min_temperature_data;
}
     58c:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <min_temperature_data>
     590:	90 91 8c 18 	lds	r25, 0x188C	; 0x80188c <min_temperature_data+0x1>
     594:	08 95       	ret

00000596 <Configuration_GetMaxHumidity>:
uint16_t Configuration_GetMaxHumidity()
{
	return max_humidity_data;
}
     596:	80 91 8f 18 	lds	r24, 0x188F	; 0x80188f <max_humidity_data>
     59a:	90 91 90 18 	lds	r25, 0x1890	; 0x801890 <max_humidity_data+0x1>
     59e:	08 95       	ret

000005a0 <Configuration_GetMinHumidity>:

uint16_t Configuration_GetMinHumidity()
{	
	return min_humidity_data;
}
     5a0:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <min_humidity_data>
     5a4:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <min_humidity_data+0x1>
     5a8:	08 95       	ret

000005aa <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task();
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority)
{
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
	xTaskCreate(
     5b0:	20 91 60 18 	lds	r18, 0x1860	; 0x801860 <downlinkMessageBuffer>
     5b4:	30 91 61 18 	lds	r19, 0x1861	; 0x801861 <downlinkMessageBuffer+0x1>
     5b8:	e1 2c       	mov	r14, r1
     5ba:	f1 2c       	mov	r15, r1
     5bc:	08 2f       	mov	r16, r24
     5be:	48 e8       	ldi	r20, 0x88	; 136
     5c0:	51 e0       	ldi	r21, 0x01	; 1
     5c2:	6b ed       	ldi	r22, 0xDB	; 219
     5c4:	72 e0       	ldi	r23, 0x02	; 2
     5c6:	80 e8       	ldi	r24, 0x80	; 128
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
	"LoraWanDownlink",
	configMINIMAL_STACK_SIZE+200,
	(void*)downlinkMessageBuffer,
	priority,
	NULL );
}
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <lora_DownLinkHandler_task>:

void lora_DownLinkHandler_task()
{     
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
	size_t xReceivedBytes;
	
	xReceivedBytes=xMessageBufferReceive(
     5ea:	0f ef       	ldi	r16, 0xFF	; 255
     5ec:	1f ef       	ldi	r17, 0xFF	; 255
     5ee:	98 01       	movw	r18, r16
     5f0:	46 e1       	ldi	r20, 0x16	; 22
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	66 e4       	ldi	r22, 0x46	; 70
     5f6:	78 e0       	ldi	r23, 0x08	; 8
     5f8:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <downlinkMessageBuffer>
     5fc:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <downlinkMessageBuffer+0x1>
     600:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <xStreamBufferReceive>
	(void*)&_downlink_payload,
	sizeof(lora_driver_payload_t),
	portMAX_DELAY);
	
	
	if (xReceivedBytes>0)
     604:	89 2b       	or	r24, r25
     606:	09 f4       	brne	.+2      	; 0x60a <lora_DownLinkHandler_task+0x34>
     608:	70 c0       	rjmp	.+224    	; 0x6ea <lora_DownLinkHandler_task+0x114>
	{	
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len);
     60a:	c6 e4       	ldi	r28, 0x46	; 70
     60c:	d8 e0       	ldi	r29, 0x08	; 8
     60e:	99 81       	ldd	r25, Y+1	; 0x01
     610:	88 81       	ld	r24, Y
     612:	1f 92       	push	r1
     614:	9f 93       	push	r25
     616:	1f 92       	push	r1
     618:	8f 93       	push	r24
     61a:	8b ee       	ldi	r24, 0xEB	; 235
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
		
			if (8==_downlink_payload.len )
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	88 30       	cpi	r24, 0x08	; 8
     636:	09 f0       	breq	.+2      	; 0x63a <lora_DownLinkHandler_task+0x64>
     638:	52 c0       	rjmp	.+164    	; 0x6de <lora_DownLinkHandler_task+0x108>
			{
				
				uint16_t maxTemperature = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     63a:	5e 01       	movw	r10, r28
     63c:	ea 80       	ldd	r14, Y+2	; 0x02
     63e:	f1 2c       	mov	r15, r1
     640:	fe 2c       	mov	r15, r14
     642:	ee 24       	eor	r14, r14
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	e8 0e       	add	r14, r24
     648:	f1 1c       	adc	r15, r1
				printf("MAXTemperature %d", maxTemperature);
     64a:	ff 92       	push	r15
     64c:	ef 92       	push	r14
     64e:	8d e1       	ldi	r24, 0x1D	; 29
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
				
				uint16_t minTemperature = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     65a:	cc 80       	ldd	r12, Y+4	; 0x04
     65c:	d1 2c       	mov	r13, r1
     65e:	dc 2c       	mov	r13, r12
     660:	cc 24       	eor	r12, r12
     662:	8d 81       	ldd	r24, Y+5	; 0x05
     664:	c8 0e       	add	r12, r24
     666:	d1 1c       	adc	r13, r1
				printf("MINTemperature %d", minTemperature);
     668:	df 92       	push	r13
     66a:	cf 92       	push	r12
     66c:	8f e2       	ldi	r24, 0x2F	; 47
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
				
				uint16_t maxHumidity = (_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
     678:	fe 01       	movw	r30, r28
     67a:	ce 81       	ldd	r28, Y+6	; 0x06
     67c:	d0 e0       	ldi	r29, 0x00	; 0
     67e:	dc 2f       	mov	r29, r28
     680:	cc 27       	eor	r28, r28
     682:	87 81       	ldd	r24, Z+7	; 0x07
     684:	c8 0f       	add	r28, r24
     686:	d1 1d       	adc	r29, r1
				printf("MAXHumidity %d", maxHumidity);
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	81 e4       	ldi	r24, 0x41	; 65
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
				
				uint16_t minHumidity = (_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
     698:	f5 01       	movw	r30, r10
     69a:	00 85       	ldd	r16, Z+8	; 0x08
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	10 2f       	mov	r17, r16
     6a0:	00 27       	eor	r16, r16
     6a2:	81 85       	ldd	r24, Z+9	; 0x09
     6a4:	08 0f       	add	r16, r24
     6a6:	11 1d       	adc	r17, r1
				printf("MINHumidity %d", minHumidity);
     6a8:	1f 93       	push	r17
     6aa:	0f 93       	push	r16
     6ac:	80 e5       	ldi	r24, 0x50	; 80
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
				Configuration_SetMinTemperature(minTemperature);
     6b8:	c6 01       	movw	r24, r12
     6ba:	db de       	rcall	.-586    	; 0x472 <Configuration_SetMinTemperature>
				Configuration_SetMinHumidity(minHumidity);
     6bc:	80 2f       	mov	r24, r16
     6be:	91 2f       	mov	r25, r17
     6c0:	1d df       	rcall	.-454    	; 0x4fc <Configuration_SetMinHumidity>
				Configuration_SetMaxTemperature(maxTemperature);
     6c2:	c7 01       	movw	r24, r14
     6c4:	f9 de       	rcall	.-526    	; 0x4b8 <Configuration_SetMaxTemperature>
				Configuration_SetMaxHumidity(maxHumidity);
     6c6:	8c 2f       	mov	r24, r28
     6c8:	9d 2f       	mov	r25, r29
     6ca:	3a df       	rcall	.-396    	; 0x540 <Configuration_SetMaxHumidity>
     6cc:	8d b7       	in	r24, 0x3d	; 61
     6ce:	9e b7       	in	r25, 0x3e	; 62
     6d0:	40 96       	adiw	r24, 0x10	; 16
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	9e bf       	out	0x3e, r25	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	8d bf       	out	0x3d, r24	; 61
     6dc:	06 c0       	rjmp	.+12     	; 0x6ea <lora_DownLinkHandler_task+0x114>
     6de:	64 e5       	ldi	r22, 0x54	; 84
			}
			else
			{
				// Retry in 2.5 minutes
				vTaskDelay(pdMS_TO_TICKS(150000)); 			}
     6e0:	74 e2       	ldi	r23, 0x24	; 36
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
     6ea:	df 91       	pop	r29
	}
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	08 95       	ret

00000700 <lora_DownLinkHandler_startTask>:
     700:	6a df       	rcall	.-300    	; 0x5d6 <lora_DownLinkHandler_task>

void lora_DownLinkHandler_startTask(){
	
	for(;;)
	{
		lora_DownLinkHandler_task();
     702:	fe cf       	rjmp	.-4      	; 0x700 <lora_DownLinkHandler_startTask>

00000704 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     704:	0f 93       	push	r16
     706:	01 11       	cpse	r16, r1
     708:	0c c0       	rjmp	.+24     	; 0x722 <prvTestWaitCondition+0x1e>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	82 23       	and	r24, r18
     710:	93 23       	and	r25, r19
     712:	a4 23       	and	r26, r20
     714:	b5 23       	and	r27, r21
     716:	89 2b       	or	r24, r25
     718:	8a 2b       	or	r24, r26
     71a:	8b 2b       	or	r24, r27
     71c:	79 f4       	brne	.+30     	; 0x73c <prvTestWaitCondition+0x38>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	10 c0       	rjmp	.+32     	; 0x742 <prvTestWaitCondition+0x3e>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	82 23       	and	r24, r18
     728:	93 23       	and	r25, r19
     72a:	a4 23       	and	r26, r20
     72c:	b5 23       	and	r27, r21
     72e:	28 17       	cp	r18, r24
     730:	39 07       	cpc	r19, r25
     732:	4a 07       	cpc	r20, r26
     734:	5b 07       	cpc	r21, r27
     736:	21 f0       	breq	.+8      	; 0x740 <prvTestWaitCondition+0x3c>
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	03 c0       	rjmp	.+6      	; 0x742 <prvTestWaitCondition+0x3e>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	01 c0       	rjmp	.+2      	; 0x742 <prvTestWaitCondition+0x3e>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <xEventGroupCreate>:
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	8f e0       	ldi	r24, 0x0F	; 15
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	af d1       	rcall	.+862    	; 0xaae <pvPortMalloc>
     750:	ec 01       	movw	r28, r24
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	39 f0       	breq	.+14     	; 0x764 <xEventGroupCreate+0x1e>
     756:	fc 01       	movw	r30, r24
     758:	11 92       	st	Z+, r1
     75a:	11 92       	st	Z+, r1
     75c:	11 92       	st	Z+, r1
     75e:	11 92       	st	Z+, r1
     760:	cf 01       	movw	r24, r30
     762:	8b d2       	rcall	.+1302   	; 0xc7a <vListInitialise>
     764:	ce 01       	movw	r24, r28
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <xEventGroupWaitBits>:
     76c:	2f 92       	push	r2
     76e:	3f 92       	push	r3
     770:	4f 92       	push	r4
     772:	5f 92       	push	r5
     774:	6f 92       	push	r6
     776:	7f 92       	push	r7
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ec 01       	movw	r28, r24
     792:	4a 01       	movw	r8, r20
     794:	5b 01       	movw	r10, r22
     796:	62 2e       	mov	r6, r18
     798:	70 2e       	mov	r7, r16
     79a:	0e 94 37 11 	call	0x226e	; 0x226e <vTaskSuspendAll>
     79e:	28 80       	ld	r2, Y
     7a0:	39 80       	ldd	r3, Y+1	; 0x01
     7a2:	4a 80       	ldd	r4, Y+2	; 0x02
     7a4:	5b 80       	ldd	r5, Y+3	; 0x03
     7a6:	a5 01       	movw	r20, r10
     7a8:	94 01       	movw	r18, r8
     7aa:	c2 01       	movw	r24, r4
     7ac:	b1 01       	movw	r22, r2
     7ae:	aa df       	rcall	.-172    	; 0x704 <prvTestWaitCondition>
     7b0:	88 23       	and	r24, r24
     7b2:	a1 f0       	breq	.+40     	; 0x7dc <xEventGroupWaitBits+0x70>
     7b4:	66 20       	and	r6, r6
     7b6:	89 f1       	breq	.+98     	; 0x81a <xEventGroupWaitBits+0xae>
     7b8:	d5 01       	movw	r26, r10
     7ba:	c4 01       	movw	r24, r8
     7bc:	80 95       	com	r24
     7be:	90 95       	com	r25
     7c0:	a0 95       	com	r26
     7c2:	b0 95       	com	r27
     7c4:	82 21       	and	r24, r2
     7c6:	93 21       	and	r25, r3
     7c8:	a4 21       	and	r26, r4
     7ca:	b5 21       	and	r27, r5
     7cc:	88 83       	st	Y, r24
     7ce:	99 83       	std	Y+1, r25	; 0x01
     7d0:	aa 83       	std	Y+2, r26	; 0x02
     7d2:	bb 83       	std	Y+3, r27	; 0x03
     7d4:	c1 2c       	mov	r12, r1
     7d6:	d1 2c       	mov	r13, r1
     7d8:	76 01       	movw	r14, r12
     7da:	22 c0       	rjmp	.+68     	; 0x820 <xEventGroupWaitBits+0xb4>
     7dc:	c1 14       	cp	r12, r1
     7de:	d1 04       	cpc	r13, r1
     7e0:	e1 04       	cpc	r14, r1
     7e2:	f1 04       	cpc	r15, r1
     7e4:	e9 f0       	breq	.+58     	; 0x820 <xEventGroupWaitBits+0xb4>
     7e6:	61 10       	cpse	r6, r1
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <xEventGroupWaitBits+0x86>
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	ba 01       	movw	r22, r20
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <xEventGroupWaitBits+0x8e>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	71 10       	cpse	r7, r1
     7fc:	74 60       	ori	r23, 0x04	; 4
     7fe:	48 29       	or	r20, r8
     800:	59 29       	or	r21, r9
     802:	6a 29       	or	r22, r10
     804:	7b 29       	or	r23, r11
     806:	97 01       	movw	r18, r14
     808:	86 01       	movw	r16, r12
     80a:	ce 01       	movw	r24, r28
     80c:	04 96       	adiw	r24, 0x04	; 4
     80e:	0e 94 4f 14 	call	0x289e	; 0x289e <vTaskPlaceOnUnorderedEventList>
     812:	21 2c       	mov	r2, r1
     814:	31 2c       	mov	r3, r1
     816:	21 01       	movw	r4, r2
     818:	03 c0       	rjmp	.+6      	; 0x820 <xEventGroupWaitBits+0xb4>
     81a:	c1 2c       	mov	r12, r1
     81c:	d1 2c       	mov	r13, r1
     81e:	76 01       	movw	r14, r12
     820:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
     824:	cd 28       	or	r12, r13
     826:	ce 28       	or	r12, r14
     828:	cf 28       	or	r12, r15
     82a:	59 f1       	breq	.+86     	; 0x882 <xEventGroupWaitBits+0x116>
     82c:	81 11       	cpse	r24, r1
     82e:	01 c0       	rjmp	.+2      	; 0x832 <xEventGroupWaitBits+0xc6>
     830:	f2 d2       	rcall	.+1508   	; 0xe16 <vPortYield>
     832:	0e 94 11 18 	call	0x3022	; 0x3022 <uxTaskResetEventItemValue>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
     83a:	91 fd       	sbrc	r25, 1
     83c:	1f c0       	rjmp	.+62     	; 0x87c <xEventGroupWaitBits+0x110>
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	0f 92       	push	r0
     844:	c8 80       	ld	r12, Y
     846:	d9 80       	ldd	r13, Y+1	; 0x01
     848:	ea 80       	ldd	r14, Y+2	; 0x02
     84a:	fb 80       	ldd	r15, Y+3	; 0x03
     84c:	07 2d       	mov	r16, r7
     84e:	a5 01       	movw	r20, r10
     850:	94 01       	movw	r18, r8
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	56 df       	rcall	.-340    	; 0x704 <prvTestWaitCondition>
     858:	88 23       	and	r24, r24
     85a:	71 f0       	breq	.+28     	; 0x878 <xEventGroupWaitBits+0x10c>
     85c:	66 20       	and	r6, r6
     85e:	61 f0       	breq	.+24     	; 0x878 <xEventGroupWaitBits+0x10c>
     860:	80 94       	com	r8
     862:	90 94       	com	r9
     864:	a0 94       	com	r10
     866:	b0 94       	com	r11
     868:	8c 20       	and	r8, r12
     86a:	9d 20       	and	r9, r13
     86c:	ae 20       	and	r10, r14
     86e:	bf 20       	and	r11, r15
     870:	88 82       	st	Y, r8
     872:	99 82       	std	Y+1, r9	; 0x01
     874:	aa 82       	std	Y+2, r10	; 0x02
     876:	bb 82       	std	Y+3, r11	; 0x03
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	16 01       	movw	r2, r12
     87e:	27 01       	movw	r4, r14
     880:	55 24       	eor	r5, r5
     882:	c2 01       	movw	r24, r4
     884:	b1 01       	movw	r22, r2
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	6f 90       	pop	r6
     8a2:	5f 90       	pop	r5
     8a4:	4f 90       	pop	r4
     8a6:	3f 90       	pop	r3
     8a8:	2f 90       	pop	r2
     8aa:	08 95       	ret

000008ac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     8ac:	4f 92       	push	r4
     8ae:	5f 92       	push	r5
     8b0:	6f 92       	push	r6
     8b2:	7f 92       	push	r7
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	ec 01       	movw	r28, r24
     8ca:	6a 01       	movw	r12, r20
     8cc:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8ce:	8c 01       	movw	r16, r24
     8d0:	09 5f       	subi	r16, 0xF9	; 249
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     8d4:	0e 94 37 11 	call	0x226e	; 0x226e <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     8d8:	eb 85       	ldd	r30, Y+11	; 0x0b
     8da:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     8dc:	88 81       	ld	r24, Y
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	aa 81       	ldd	r26, Y+2	; 0x02
     8e2:	bb 81       	ldd	r27, Y+3	; 0x03
     8e4:	c8 2a       	or	r12, r24
     8e6:	d9 2a       	or	r13, r25
     8e8:	ea 2a       	or	r14, r26
     8ea:	fb 2a       	or	r15, r27
     8ec:	c8 82       	st	Y, r12
     8ee:	d9 82       	std	Y+1, r13	; 0x01
     8f0:	ea 82       	std	Y+2, r14	; 0x02
     8f2:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     8f4:	c1 2c       	mov	r12, r1
     8f6:	d1 2c       	mov	r13, r1
     8f8:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8fa:	3d c0       	rjmp	.+122    	; 0x976 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     8fc:	a4 80       	ldd	r10, Z+4	; 0x04
     8fe:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	a2 81       	ldd	r26, Z+2	; 0x02
     906:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     908:	ac 01       	movw	r20, r24
     90a:	bd 01       	movw	r22, r26
     90c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     90e:	b2 fd       	sbrc	r27, 2
     910:	0e c0       	rjmp	.+28     	; 0x92e <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     912:	48 80       	ld	r4, Y
     914:	59 80       	ldd	r5, Y+1	; 0x01
     916:	6a 80       	ldd	r6, Y+2	; 0x02
     918:	7b 80       	ldd	r7, Y+3	; 0x03
     91a:	44 22       	and	r4, r20
     91c:	55 22       	and	r5, r21
     91e:	66 22       	and	r6, r22
     920:	77 22       	and	r7, r23
     922:	45 28       	or	r4, r5
     924:	46 28       	or	r4, r6
     926:	47 28       	or	r4, r7
     928:	89 f4       	brne	.+34     	; 0x94c <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	12 c0       	rjmp	.+36     	; 0x952 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     92e:	48 80       	ld	r4, Y
     930:	59 80       	ldd	r5, Y+1	; 0x01
     932:	6a 80       	ldd	r6, Y+2	; 0x02
     934:	7b 80       	ldd	r7, Y+3	; 0x03
     936:	44 22       	and	r4, r20
     938:	55 22       	and	r5, r21
     93a:	66 22       	and	r6, r22
     93c:	77 22       	and	r7, r23
     93e:	44 15       	cp	r20, r4
     940:	55 05       	cpc	r21, r5
     942:	66 05       	cpc	r22, r6
     944:	77 05       	cpc	r23, r7
     946:	21 f0       	breq	.+8      	; 0x950 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	03 c0       	rjmp	.+6      	; 0x952 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     94c:	21 e0       	ldi	r18, 0x01	; 1
     94e:	01 c0       	rjmp	.+2      	; 0x952 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     950:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     952:	22 23       	and	r18, r18
     954:	71 f0       	breq	.+28     	; 0x972 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     956:	b0 ff       	sbrs	r27, 0
     958:	04 c0       	rjmp	.+8      	; 0x962 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     95a:	c4 2a       	or	r12, r20
     95c:	d5 2a       	or	r13, r21
     95e:	e6 2a       	or	r14, r22
     960:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     962:	48 81       	ld	r20, Y
     964:	59 81       	ldd	r21, Y+1	; 0x01
     966:	6a 81       	ldd	r22, Y+2	; 0x02
     968:	7b 81       	ldd	r23, Y+3	; 0x03
     96a:	72 60       	ori	r23, 0x02	; 2
     96c:	cf 01       	movw	r24, r30
     96e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     972:	ea 2d       	mov	r30, r10
     974:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     976:	e0 17       	cp	r30, r16
     978:	f1 07       	cpc	r31, r17
     97a:	09 f0       	breq	.+2      	; 0x97e <xEventGroupSetBits+0xd2>
     97c:	bf cf       	rjmp	.-130    	; 0x8fc <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     97e:	c0 94       	com	r12
     980:	d0 94       	com	r13
     982:	e0 94       	com	r14
     984:	f0 94       	com	r15
     986:	88 81       	ld	r24, Y
     988:	99 81       	ldd	r25, Y+1	; 0x01
     98a:	aa 81       	ldd	r26, Y+2	; 0x02
     98c:	bb 81       	ldd	r27, Y+3	; 0x03
     98e:	c8 22       	and	r12, r24
     990:	d9 22       	and	r13, r25
     992:	ea 22       	and	r14, r26
     994:	fb 22       	and	r15, r27
     996:	c8 82       	st	Y, r12
     998:	d9 82       	std	Y+1, r13	; 0x01
     99a:	ea 82       	std	Y+2, r14	; 0x02
     99c:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     99e:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     9a2:	68 81       	ld	r22, Y
     9a4:	79 81       	ldd	r23, Y+1	; 0x01
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	9b 81       	ldd	r25, Y+3	; 0x03
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	7f 90       	pop	r7
     9c0:	6f 90       	pop	r6
     9c2:	5f 90       	pop	r5
     9c4:	4f 90       	pop	r4
     9c6:	08 95       	ret

000009c8 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     9c8:	e8 e6       	ldi	r30, 0x68	; 104
     9ca:	f8 e0       	ldi	r31, 0x08	; 8
     9cc:	ac e6       	ldi	r26, 0x6C	; 108
     9ce:	b8 e0       	ldi	r27, 0x08	; 8
     9d0:	b1 83       	std	Z+1, r27	; 0x01
     9d2:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     9d4:	13 82       	std	Z+3, r1	; 0x03
     9d6:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     9d8:	e4 e1       	ldi	r30, 0x14	; 20
     9da:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     9dc:	f0 93 67 08 	sts	0x0867, r31	; 0x800867 <pxEnd+0x1>
     9e0:	e0 93 66 08 	sts	0x0866, r30	; 0x800866 <pxEnd>
    pxEnd->xBlockSize = 0;
     9e4:	13 82       	std	Z+3, r1	; 0x03
     9e6:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     9e8:	11 82       	std	Z+1, r1	; 0x01
     9ea:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     9ec:	88 ea       	ldi	r24, 0xA8	; 168
     9ee:	9d e0       	ldi	r25, 0x0D	; 13
     9f0:	13 96       	adiw	r26, 0x03	; 3
     9f2:	9c 93       	st	X, r25
     9f4:	8e 93       	st	-X, r24
     9f6:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     9f8:	ed 93       	st	X+, r30
     9fa:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9fc:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <xMinimumEverFreeBytesRemaining+0x1>
     a00:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a04:	90 93 65 08 	sts	0x0865, r25	; 0x800865 <xFreeBytesRemaining+0x1>
     a08:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e8       	ldi	r25, 0x80	; 128
     a10:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <xBlockAllocatedBit+0x1>
     a14:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <xBlockAllocatedBit>
     a18:	08 95       	ret

00000a1a <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     a20:	a8 e6       	ldi	r26, 0x68	; 104
     a22:	b8 e0       	ldi	r27, 0x08	; 8
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <prvInsertBlockIntoFreeList+0xe>
     a26:	df 01       	movw	r26, r30
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	ec 17       	cp	r30, r28
     a30:	fd 07       	cpc	r31, r29
     a32:	c8 f3       	brcs	.-14     	; 0xa26 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	8d 91       	ld	r24, X+
     a38:	9c 91       	ld	r25, X
     a3a:	13 97       	sbiw	r26, 0x03	; 3
     a3c:	9d 01       	movw	r18, r26
     a3e:	28 0f       	add	r18, r24
     a40:	39 1f       	adc	r19, r25
     a42:	c2 17       	cp	r28, r18
     a44:	d3 07       	cpc	r29, r19
     a46:	49 f4       	brne	.+18     	; 0xa5a <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     a48:	2a 81       	ldd	r18, Y+2	; 0x02
     a4a:	3b 81       	ldd	r19, Y+3	; 0x03
     a4c:	82 0f       	add	r24, r18
     a4e:	93 1f       	adc	r25, r19
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     a58:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	9b 81       	ldd	r25, Y+3	; 0x03
     a5e:	9e 01       	movw	r18, r28
     a60:	28 0f       	add	r18, r24
     a62:	39 1f       	adc	r19, r25
     a64:	e2 17       	cp	r30, r18
     a66:	f3 07       	cpc	r31, r19
     a68:	c1 f4       	brne	.+48     	; 0xa9a <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a6a:	20 91 66 08 	lds	r18, 0x0866	; 0x800866 <pxEnd>
     a6e:	30 91 67 08 	lds	r19, 0x0867	; 0x800867 <pxEnd+0x1>
     a72:	e2 17       	cp	r30, r18
     a74:	f3 07       	cpc	r31, r19
     a76:	71 f0       	breq	.+28     	; 0xa94 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a78:	22 81       	ldd	r18, Z+2	; 0x02
     a7a:	33 81       	ldd	r19, Z+3	; 0x03
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	9b 83       	std	Y+3, r25	; 0x03
     a82:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a84:	ed 91       	ld	r30, X+
     a86:	fc 91       	ld	r31, X
     a88:	11 97       	sbiw	r26, 0x01	; 1
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	99 83       	std	Y+1, r25	; 0x01
     a90:	88 83       	st	Y, r24
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a94:	39 83       	std	Y+1, r19	; 0x01
     a96:	28 83       	st	Y, r18
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a9a:	f9 83       	std	Y+1, r31	; 0x01
     a9c:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a9e:	ca 17       	cp	r28, r26
     aa0:	db 07       	cpc	r29, r27
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     aa4:	cd 93       	st	X+, r28
     aa6:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     abc:	0e 94 37 11 	call	0x226e	; 0x226e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     ac0:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <pxEnd>
     ac4:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <pxEnd+0x1>
     ac8:	89 2b       	or	r24, r25
     aca:	09 f4       	brne	.+2      	; 0xace <pvPortMalloc+0x20>
        {
            prvHeapInit();
     acc:	7d df       	rcall	.-262    	; 0x9c8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ace:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <xBlockAllocatedBit>
     ad2:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <xBlockAllocatedBit+0x1>
     ad6:	80 23       	and	r24, r16
     ad8:	91 23       	and	r25, r17
     ada:	89 2b       	or	r24, r25
     adc:	09 f0       	breq	.+2      	; 0xae0 <pvPortMalloc+0x32>
     ade:	76 c0       	rjmp	.+236    	; 0xbcc <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     ae0:	01 15       	cp	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	49 f0       	breq	.+18     	; 0xaf8 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     ae6:	c8 01       	movw	r24, r16
     ae8:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     aea:	08 17       	cp	r16, r24
     aec:	19 07       	cpc	r17, r25
     aee:	18 f0       	brcs	.+6      	; 0xaf6 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     af0:	00 e0       	ldi	r16, 0x00	; 0
     af2:	10 e0       	ldi	r17, 0x00	; 0
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     af6:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     af8:	01 15       	cp	r16, r1
     afa:	11 05       	cpc	r17, r1
     afc:	09 f4       	brne	.+2      	; 0xb00 <pvPortMalloc+0x52>
     afe:	69 c0       	rjmp	.+210    	; 0xbd2 <pvPortMalloc+0x124>
     b00:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <xFreeBytesRemaining>
     b04:	90 91 65 08 	lds	r25, 0x0865	; 0x800865 <xFreeBytesRemaining+0x1>
     b08:	80 17       	cp	r24, r16
     b0a:	91 07       	cpc	r25, r17
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <pvPortMalloc+0x62>
     b0e:	64 c0       	rjmp	.+200    	; 0xbd8 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     b10:	c0 91 68 08 	lds	r28, 0x0868	; 0x800868 <xStart>
     b14:	d0 91 69 08 	lds	r29, 0x0869	; 0x800869 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     b18:	e8 e6       	ldi	r30, 0x68	; 104
     b1a:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     b1e:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     b20:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	9b 81       	ldd	r25, Y+3	; 0x03
     b26:	80 17       	cp	r24, r16
     b28:	91 07       	cpc	r25, r17
     b2a:	20 f4       	brcc	.+8      	; 0xb34 <pvPortMalloc+0x86>
     b2c:	88 81       	ld	r24, Y
     b2e:	99 81       	ldd	r25, Y+1	; 0x01
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a9 f7       	brne	.-22     	; 0xb1e <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     b34:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <pxEnd>
     b38:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <pxEnd+0x1>
     b3c:	c8 17       	cp	r28, r24
     b3e:	d9 07       	cpc	r29, r25
     b40:	09 f4       	brne	.+2      	; 0xb44 <pvPortMalloc+0x96>
     b42:	4d c0       	rjmp	.+154    	; 0xbde <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     b44:	e0 80       	ld	r14, Z
     b46:	f1 80       	ldd	r15, Z+1	; 0x01
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	e8 0e       	add	r14, r24
     b4c:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b4e:	88 81       	ld	r24, Y
     b50:	99 81       	ldd	r25, Y+1	; 0x01
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b56:	2a 81       	ldd	r18, Y+2	; 0x02
     b58:	3b 81       	ldd	r19, Y+3	; 0x03
     b5a:	20 1b       	sub	r18, r16
     b5c:	31 0b       	sbc	r19, r17
     b5e:	29 30       	cpi	r18, 0x09	; 9
     b60:	31 05       	cpc	r19, r1
     b62:	48 f0       	brcs	.+18     	; 0xb76 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b64:	ce 01       	movw	r24, r28
     b66:	80 0f       	add	r24, r16
     b68:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b6a:	fc 01       	movw	r30, r24
     b6c:	33 83       	std	Z+3, r19	; 0x03
     b6e:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b70:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b72:	0a 83       	std	Y+2, r16	; 0x02
     b74:	52 df       	rcall	.-348    	; 0xa1a <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b76:	2a 81       	ldd	r18, Y+2	; 0x02
     b78:	3b 81       	ldd	r19, Y+3	; 0x03
     b7a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <xFreeBytesRemaining>
     b7e:	90 91 65 08 	lds	r25, 0x0865	; 0x800865 <xFreeBytesRemaining+0x1>
     b82:	82 1b       	sub	r24, r18
     b84:	93 0b       	sbc	r25, r19
     b86:	90 93 65 08 	sts	0x0865, r25	; 0x800865 <xFreeBytesRemaining+0x1>
     b8a:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b8e:	40 91 62 08 	lds	r20, 0x0862	; 0x800862 <xMinimumEverFreeBytesRemaining>
     b92:	50 91 63 08 	lds	r21, 0x0863	; 0x800863 <xMinimumEverFreeBytesRemaining+0x1>
     b96:	84 17       	cp	r24, r20
     b98:	95 07       	cpc	r25, r21
     b9a:	20 f4       	brcc	.+8      	; 0xba4 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b9c:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <xMinimumEverFreeBytesRemaining+0x1>
     ba0:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     ba4:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <xBlockAllocatedBit>
     ba8:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <xBlockAllocatedBit+0x1>
     bac:	28 2b       	or	r18, r24
     bae:	39 2b       	or	r19, r25
     bb0:	3b 83       	std	Y+3, r19	; 0x03
     bb2:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     bb8:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <xNumberOfSuccessfulAllocations>
     bbc:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <xNumberOfSuccessfulAllocations+0x1>
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <xNumberOfSuccessfulAllocations+0x1>
     bc6:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <xNumberOfSuccessfulAllocations>
     bca:	0b c0       	rjmp	.+22     	; 0xbe2 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     bcc:	e1 2c       	mov	r14, r1
     bce:	f1 2c       	mov	r15, r1
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <pvPortMalloc+0x134>
     bd2:	e1 2c       	mov	r14, r1
     bd4:	f1 2c       	mov	r15, r1
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <pvPortMalloc+0x134>
     bd8:	e1 2c       	mov	r14, r1
     bda:	f1 2c       	mov	r15, r1
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <pvPortMalloc+0x134>
     bde:	e1 2c       	mov	r14, r1
     be0:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     be2:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     be6:	e1 14       	cp	r14, r1
     be8:	f1 04       	cpc	r15, r1
     bea:	11 f4       	brne	.+4      	; 0xbf0 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     bec:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     bf0:	c7 01       	movw	r24, r14
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	08 95       	ret

00000c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	91 f1       	breq	.+100    	; 0xc70 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     c0c:	ec 01       	movw	r28, r24
     c0e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     c10:	4a 81       	ldd	r20, Y+2	; 0x02
     c12:	5b 81       	ldd	r21, Y+3	; 0x03
     c14:	20 91 5c 08 	lds	r18, 0x085C	; 0x80085c <xBlockAllocatedBit>
     c18:	30 91 5d 08 	lds	r19, 0x085D	; 0x80085d <xBlockAllocatedBit+0x1>
     c1c:	ba 01       	movw	r22, r20
     c1e:	62 23       	and	r22, r18
     c20:	73 23       	and	r23, r19
     c22:	67 2b       	or	r22, r23
     c24:	29 f1       	breq	.+74     	; 0xc70 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     c26:	68 81       	ld	r22, Y
     c28:	79 81       	ldd	r23, Y+1	; 0x01
     c2a:	67 2b       	or	r22, r23
     c2c:	09 f5       	brne	.+66     	; 0xc70 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     c2e:	20 95       	com	r18
     c30:	30 95       	com	r19
     c32:	24 23       	and	r18, r20
     c34:	35 23       	and	r19, r21
     c36:	3b 83       	std	Y+3, r19	; 0x03
     c38:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     c3a:	0e 94 37 11 	call	0x226e	; 0x226e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	20 91 64 08 	lds	r18, 0x0864	; 0x800864 <xFreeBytesRemaining>
     c46:	30 91 65 08 	lds	r19, 0x0865	; 0x800865 <xFreeBytesRemaining+0x1>
     c4a:	82 0f       	add	r24, r18
     c4c:	93 1f       	adc	r25, r19
     c4e:	90 93 65 08 	sts	0x0865, r25	; 0x800865 <xFreeBytesRemaining+0x1>
     c52:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     c56:	ce 01       	movw	r24, r28
     c58:	e0 de       	rcall	.-576    	; 0xa1a <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     c5a:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <xNumberOfSuccessfulFrees>
     c5e:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <xNumberOfSuccessfulFrees+0x1>
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <xNumberOfSuccessfulFrees+0x1>
     c68:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c6c:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c7a:	fc 01       	movw	r30, r24
     c7c:	03 96       	adiw	r24, 0x03	; 3
     c7e:	92 83       	std	Z+2, r25	; 0x02
     c80:	81 83       	std	Z+1, r24	; 0x01
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	5f ef       	ldi	r21, 0xFF	; 255
     c86:	ba 01       	movw	r22, r20
     c88:	43 83       	std	Z+3, r20	; 0x03
     c8a:	54 83       	std	Z+4, r21	; 0x04
     c8c:	65 83       	std	Z+5, r22	; 0x05
     c8e:	76 83       	std	Z+6, r23	; 0x06
     c90:	90 87       	std	Z+8, r25	; 0x08
     c92:	87 83       	std	Z+7, r24	; 0x07
     c94:	92 87       	std	Z+10, r25	; 0x0a
     c96:	81 87       	std	Z+9, r24	; 0x09
     c98:	10 82       	st	Z, r1
     c9a:	08 95       	ret

00000c9c <vListInitialiseItem>:
     c9c:	fc 01       	movw	r30, r24
     c9e:	13 86       	std	Z+11, r1	; 0x0b
     ca0:	12 86       	std	Z+10, r1	; 0x0a
     ca2:	08 95       	ret

00000ca4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cae:	08 81       	ld	r16, Y
     cb0:	19 81       	ldd	r17, Y+1	; 0x01
     cb2:	2a 81       	ldd	r18, Y+2	; 0x02
     cb4:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     cb6:	0f 3f       	cpi	r16, 0xFF	; 255
     cb8:	4f ef       	ldi	r20, 0xFF	; 255
     cba:	14 07       	cpc	r17, r20
     cbc:	24 07       	cpc	r18, r20
     cbe:	34 07       	cpc	r19, r20
     cc0:	21 f4       	brne	.+8      	; 0xcca <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     cc2:	fc 01       	movw	r30, r24
     cc4:	a1 85       	ldd	r26, Z+9	; 0x09
     cc6:	b2 85       	ldd	r27, Z+10	; 0x0a
     cc8:	11 c0       	rjmp	.+34     	; 0xcec <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     cca:	dc 01       	movw	r26, r24
     ccc:	13 96       	adiw	r26, 0x03	; 3
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <vListInsert+0x2e>
     cd0:	df 01       	movw	r26, r30
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	15 97       	sbiw	r26, 0x05	; 5
     cda:	40 81       	ld	r20, Z
     cdc:	51 81       	ldd	r21, Z+1	; 0x01
     cde:	62 81       	ldd	r22, Z+2	; 0x02
     ce0:	73 81       	ldd	r23, Z+3	; 0x03
     ce2:	04 17       	cp	r16, r20
     ce4:	15 07       	cpc	r17, r21
     ce6:	26 07       	cpc	r18, r22
     ce8:	37 07       	cpc	r19, r23
     cea:	90 f7       	brcc	.-28     	; 0xcd0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     cec:	14 96       	adiw	r26, 0x04	; 4
     cee:	ed 91       	ld	r30, X+
     cf0:	fc 91       	ld	r31, X
     cf2:	15 97       	sbiw	r26, 0x05	; 5
     cf4:	fd 83       	std	Y+5, r31	; 0x05
     cf6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cf8:	d7 83       	std	Z+7, r29	; 0x07
     cfa:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     cfc:	bf 83       	std	Y+7, r27	; 0x07
     cfe:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     d00:	15 96       	adiw	r26, 0x05	; 5
     d02:	dc 93       	st	X, r29
     d04:	ce 93       	st	-X, r28
     d06:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d08:	9b 87       	std	Y+11, r25	; 0x0b
     d0a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 81       	ld	r18, Z
     d10:	2f 5f       	subi	r18, 0xFF	; 255
     d12:	20 83       	st	Z, r18
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     d24:	a2 85       	ldd	r26, Z+10	; 0x0a
     d26:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d28:	c4 81       	ldd	r28, Z+4	; 0x04
     d2a:	d5 81       	ldd	r29, Z+5	; 0x05
     d2c:	86 81       	ldd	r24, Z+6	; 0x06
     d2e:	97 81       	ldd	r25, Z+7	; 0x07
     d30:	9f 83       	std	Y+7, r25	; 0x07
     d32:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d34:	c6 81       	ldd	r28, Z+6	; 0x06
     d36:	d7 81       	ldd	r29, Z+7	; 0x07
     d38:	84 81       	ldd	r24, Z+4	; 0x04
     d3a:	95 81       	ldd	r25, Z+5	; 0x05
     d3c:	9d 83       	std	Y+5, r25	; 0x05
     d3e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	8d 91       	ld	r24, X+
     d44:	9c 91       	ld	r25, X
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	e8 17       	cp	r30, r24
     d4a:	f9 07       	cpc	r31, r25
     d4c:	31 f4       	brne	.+12     	; 0xd5a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d4e:	86 81       	ldd	r24, Z+6	; 0x06
     d50:	97 81       	ldd	r25, Z+7	; 0x07
     d52:	12 96       	adiw	r26, 0x02	; 2
     d54:	9c 93       	st	X, r25
     d56:	8e 93       	st	-X, r24
     d58:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d5a:	13 86       	std	Z+11, r1	; 0x0b
     d5c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d5e:	8c 91       	ld	r24, X
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d64:	8c 91       	ld	r24, X
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d6c:	a8 95       	wdr
     d6e:	90 ec       	ldi	r25, 0xC0	; 192
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	a8 95       	wdr
     d78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d82:	08 95       	ret

00000d84 <pxPortInitialiseStack>:
     d84:	fc 01       	movw	r30, r24
     d86:	60 83       	st	Z, r22
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	70 83       	st	Z, r23
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	10 82       	st	Z, r1
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	10 82       	st	Z, r1
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	20 e8       	ldi	r18, 0x80	; 128
     d98:	20 83       	st	Z, r18
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	10 82       	st	Z, r1
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	10 82       	st	Z, r1
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	10 82       	st	Z, r1
     da6:	77 97       	sbiw	r30, 0x17	; 23
     da8:	40 83       	st	Z, r20
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	50 83       	st	Z, r21
     dae:	86 97       	sbiw	r24, 0x26	; 38
     db0:	08 95       	ret

00000db2 <xPortStartScheduler>:
     db2:	dc df       	rcall	.-72     	; 0xd6c <prvSetupTimerInterrupt>
     db4:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
     db8:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	08 95       	ret
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret

00000e16 <vPortYield>:
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	0f 92       	push	r0
     e1e:	0b b6       	in	r0, 0x3b	; 59
     e20:	0f 92       	push	r0
     e22:	0c b6       	in	r0, 0x3c	; 60
     e24:	0f 92       	push	r0
     e26:	1f 92       	push	r1
     e28:	11 24       	eor	r1, r1
     e2a:	2f 92       	push	r2
     e2c:	3f 92       	push	r3
     e2e:	4f 92       	push	r4
     e30:	5f 92       	push	r5
     e32:	6f 92       	push	r6
     e34:	7f 92       	push	r7
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
     e66:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
     e6a:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
     e6e:	0d b6       	in	r0, 0x3d	; 61
     e70:	0d 92       	st	X+, r0
     e72:	0e b6       	in	r0, 0x3e	; 62
     e74:	0d 92       	st	X+, r0
     e76:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <vTaskSwitchContext>
     e7a:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
     e7e:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
     e82:	cd 91       	ld	r28, X+
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	dd 91       	ld	r29, X+
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	7f 90       	pop	r7
     ebc:	6f 90       	pop	r6
     ebe:	5f 90       	pop	r5
     ec0:	4f 90       	pop	r4
     ec2:	3f 90       	pop	r3
     ec4:	2f 90       	pop	r2
     ec6:	1f 90       	pop	r1
     ec8:	0f 90       	pop	r0
     eca:	0c be       	out	0x3c, r0	; 60
     ecc:	0f 90       	pop	r0
     ece:	0b be       	out	0x3b, r0	; 59
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	08 95       	ret

00000ed8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	0f 92       	push	r0
     ee0:	0b b6       	in	r0, 0x3b	; 59
     ee2:	0f 92       	push	r0
     ee4:	0c b6       	in	r0, 0x3c	; 60
     ee6:	0f 92       	push	r0
     ee8:	1f 92       	push	r1
     eea:	11 24       	eor	r1, r1
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
     f2c:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
     f30:	0d b6       	in	r0, 0x3d	; 61
     f32:	0d 92       	st	X+, r0
     f34:	0e b6       	in	r0, 0x3e	; 62
     f36:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     f38:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     f3a:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskIncrementTick>
     f3e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f40:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     f44:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
     f48:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
     f4c:	cd 91       	ld	r28, X+
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	dd 91       	ld	r29, X+
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	9f 90       	pop	r9
     f82:	8f 90       	pop	r8
     f84:	7f 90       	pop	r7
     f86:	6f 90       	pop	r6
     f88:	5f 90       	pop	r5
     f8a:	4f 90       	pop	r4
     f8c:	3f 90       	pop	r3
     f8e:	2f 90       	pop	r2
     f90:	1f 90       	pop	r1
     f92:	0f 90       	pop	r0
     f94:	0c be       	out	0x3c, r0	; 60
     f96:	0f 90       	pop	r0
     f98:	0b be       	out	0x3b, r0	; 59
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     fa0:	08 95       	ret

00000fa2 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     fa2:	9a df       	rcall	.-204    	; 0xed8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     fa4:	18 95       	reti

00000fa6 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     fa6:	dc 01       	movw	r26, r24
     fa8:	53 96       	adiw	r26, 0x13	; 19
     faa:	2c 91       	ld	r18, X
     fac:	53 97       	sbiw	r26, 0x13	; 19
     fae:	22 23       	and	r18, r18
     fb0:	41 f0       	breq	.+16     	; 0xfc2 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     fb2:	5a 96       	adiw	r26, 0x1a	; 26
     fb4:	ed 91       	ld	r30, X+
     fb6:	fc 91       	ld	r31, X
     fb8:	5b 97       	sbiw	r26, 0x1b	; 27
     fba:	90 81       	ld	r25, Z
     fbc:	8a e0       	ldi	r24, 0x0A	; 10
     fbe:	89 1b       	sub	r24, r25
     fc0:	08 95       	ret
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	08 95       	ret

00000fc6 <prvIsQueueEmpty>:
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	0f 92       	push	r0
     fcc:	fc 01       	movw	r30, r24
     fce:	86 8d       	ldd	r24, Z+30	; 0x1e
     fd0:	81 11       	cpse	r24, r1
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <prvIsQueueEmpty+0x12>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <prvIsQueueEmpty+0x14>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	08 95       	ret

00000fe0 <prvIsQueueFull>:
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	0f 92       	push	r0
     fe6:	fc 01       	movw	r30, r24
     fe8:	26 8d       	ldd	r18, Z+30	; 0x1e
     fea:	87 8d       	ldd	r24, Z+31	; 0x1f
     fec:	28 13       	cpse	r18, r24
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <prvIsQueueFull+0x14>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <prvIsQueueFull+0x16>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	08 95       	ret

00000ffc <prvCopyDataToQueue>:
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	04 2f       	mov	r16, r20
    1008:	1e 8d       	ldd	r17, Y+30	; 0x1e
    100a:	48 a1       	ldd	r20, Y+32	; 0x20
    100c:	41 11       	cpse	r20, r1
    100e:	0c c0       	rjmp	.+24     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1010:	88 81       	ld	r24, Y
    1012:	99 81       	ldd	r25, Y+1	; 0x01
    1014:	89 2b       	or	r24, r25
    1016:	09 f0       	breq	.+2      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1018:	42 c0       	rjmp	.+132    	; 0x109e <__EEPROM_REGION_LENGTH__+0x9e>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <xTaskPriorityDisinherit>
    1022:	1d 82       	std	Y+5, r1	; 0x05
    1024:	1c 82       	std	Y+4, r1	; 0x04
    1026:	42 c0       	rjmp	.+132    	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    1028:	01 11       	cpse	r16, r1
    102a:	17 c0       	rjmp	.+46     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	9b 81       	ldd	r25, Y+3	; 0x03
    1032:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <memcpy>
    1036:	28 a1       	ldd	r18, Y+32	; 0x20
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	82 0f       	add	r24, r18
    103e:	91 1d       	adc	r25, r1
    1040:	9b 83       	std	Y+3, r25	; 0x03
    1042:	8a 83       	std	Y+2, r24	; 0x02
    1044:	2c 81       	ldd	r18, Y+4	; 0x04
    1046:	3d 81       	ldd	r19, Y+5	; 0x05
    1048:	82 17       	cp	r24, r18
    104a:	93 07       	cpc	r25, r19
    104c:	50 f1       	brcs	.+84     	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
    104e:	88 81       	ld	r24, Y
    1050:	99 81       	ldd	r25, Y+1	; 0x01
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	29 c0       	rjmp	.+82     	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	8e 81       	ldd	r24, Y+6	; 0x06
    105e:	9f 81       	ldd	r25, Y+7	; 0x07
    1060:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <memcpy>
    1064:	88 a1       	ldd	r24, Y+32	; 0x20
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	91 95       	neg	r25
    106a:	81 95       	neg	r24
    106c:	91 09       	sbc	r25, r1
    106e:	2e 81       	ldd	r18, Y+6	; 0x06
    1070:	3f 81       	ldd	r19, Y+7	; 0x07
    1072:	28 0f       	add	r18, r24
    1074:	39 1f       	adc	r19, r25
    1076:	3f 83       	std	Y+7, r19	; 0x07
    1078:	2e 83       	std	Y+6, r18	; 0x06
    107a:	48 81       	ld	r20, Y
    107c:	59 81       	ldd	r21, Y+1	; 0x01
    107e:	24 17       	cp	r18, r20
    1080:	35 07       	cpc	r19, r21
    1082:	30 f4       	brcc	.+12     	; 0x1090 <__EEPROM_REGION_LENGTH__+0x90>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	9f 83       	std	Y+7, r25	; 0x07
    108e:	8e 83       	std	Y+6, r24	; 0x06
    1090:	02 30       	cpi	r16, 0x02	; 2
    1092:	49 f4       	brne	.+18     	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    1094:	11 23       	and	r17, r17
    1096:	49 f0       	breq	.+18     	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
    1098:	11 50       	subi	r17, 0x01	; 1
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	1f 5f       	subi	r17, 0xFF	; 255
    10ae:	1e 8f       	std	Y+30, r17	; 0x1e
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <prvCopyDataFromQueue>:
    10ba:	fc 01       	movw	r30, r24
    10bc:	40 a1       	ldd	r20, Z+32	; 0x20
    10be:	44 23       	and	r20, r20
    10c0:	a9 f0       	breq	.+42     	; 0x10ec <prvCopyDataFromQueue+0x32>
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	26 81       	ldd	r18, Z+6	; 0x06
    10c6:	37 81       	ldd	r19, Z+7	; 0x07
    10c8:	24 0f       	add	r18, r20
    10ca:	35 1f       	adc	r19, r21
    10cc:	37 83       	std	Z+7, r19	; 0x07
    10ce:	26 83       	std	Z+6, r18	; 0x06
    10d0:	84 81       	ldd	r24, Z+4	; 0x04
    10d2:	95 81       	ldd	r25, Z+5	; 0x05
    10d4:	28 17       	cp	r18, r24
    10d6:	39 07       	cpc	r19, r25
    10d8:	20 f0       	brcs	.+8      	; 0x10e2 <prvCopyDataFromQueue+0x28>
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	97 83       	std	Z+7, r25	; 0x07
    10e0:	86 83       	std	Z+6, r24	; 0x06
    10e2:	cb 01       	movw	r24, r22
    10e4:	66 81       	ldd	r22, Z+6	; 0x06
    10e6:	77 81       	ldd	r23, Z+7	; 0x07
    10e8:	0c 94 e0 31 	jmp	0x63c0	; 0x63c0 <memcpy>
    10ec:	08 95       	ret

000010ee <prvUnlockQueue>:
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	0f 92       	push	r0
    10fc:	1a a1       	ldd	r17, Y+34	; 0x22
    10fe:	0b c0       	rjmp	.+22     	; 0x1116 <prvUnlockQueue+0x28>
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	88 23       	and	r24, r24
    1104:	51 f0       	breq	.+20     	; 0x111a <prvUnlockQueue+0x2c>
    1106:	ce 01       	movw	r24, r28
    1108:	43 96       	adiw	r24, 0x13	; 19
    110a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    110e:	81 11       	cpse	r24, r1
    1110:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <vTaskMissedYield>
    1114:	11 50       	subi	r17, 0x01	; 1
    1116:	11 16       	cp	r1, r17
    1118:	9c f3       	brlt	.-26     	; 0x1100 <prvUnlockQueue+0x12>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	8a a3       	std	Y+34, r24	; 0x22
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	0f 92       	push	r0
    1128:	19 a1       	ldd	r17, Y+33	; 0x21
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <prvUnlockQueue+0x54>
    112c:	88 85       	ldd	r24, Y+8	; 0x08
    112e:	88 23       	and	r24, r24
    1130:	51 f0       	breq	.+20     	; 0x1146 <prvUnlockQueue+0x58>
    1132:	ce 01       	movw	r24, r28
    1134:	08 96       	adiw	r24, 0x08	; 8
    1136:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    113a:	81 11       	cpse	r24, r1
    113c:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <vTaskMissedYield>
    1140:	11 50       	subi	r17, 0x01	; 1
    1142:	11 16       	cp	r1, r17
    1144:	9c f3       	brlt	.-26     	; 0x112c <prvUnlockQueue+0x3e>
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	89 a3       	std	Y+33, r24	; 0x21
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	08 95       	ret

00001156 <xQueueGenericReset>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	0f 92       	push	r0
    1162:	e8 81       	ld	r30, Y
    1164:	f9 81       	ldd	r31, Y+1	; 0x01
    1166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1168:	28 a1       	ldd	r18, Y+32	; 0x20
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	82 9f       	mul	r24, r18
    1170:	a0 01       	movw	r20, r0
    1172:	83 9f       	mul	r24, r19
    1174:	50 0d       	add	r21, r0
    1176:	92 9f       	mul	r25, r18
    1178:	50 0d       	add	r21, r0
    117a:	11 24       	eor	r1, r1
    117c:	4e 0f       	add	r20, r30
    117e:	5f 1f       	adc	r21, r31
    1180:	5d 83       	std	Y+5, r21	; 0x05
    1182:	4c 83       	std	Y+4, r20	; 0x04
    1184:	1e 8e       	std	Y+30, r1	; 0x1e
    1186:	fb 83       	std	Y+3, r31	; 0x03
    1188:	ea 83       	std	Y+2, r30	; 0x02
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	28 9f       	mul	r18, r24
    118e:	a0 01       	movw	r20, r0
    1190:	29 9f       	mul	r18, r25
    1192:	50 0d       	add	r21, r0
    1194:	38 9f       	mul	r19, r24
    1196:	50 0d       	add	r21, r0
    1198:	11 24       	eor	r1, r1
    119a:	cf 01       	movw	r24, r30
    119c:	84 0f       	add	r24, r20
    119e:	95 1f       	adc	r25, r21
    11a0:	9f 83       	std	Y+7, r25	; 0x07
    11a2:	8e 83       	std	Y+6, r24	; 0x06
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	89 a3       	std	Y+33, r24	; 0x21
    11a8:	8a a3       	std	Y+34, r24	; 0x22
    11aa:	61 11       	cpse	r22, r1
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <xQueueGenericReset+0x6e>
    11ae:	88 85       	ldd	r24, Y+8	; 0x08
    11b0:	88 23       	and	r24, r24
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <xQueueGenericReset+0x7a>
    11b4:	ce 01       	movw	r24, r28
    11b6:	08 96       	adiw	r24, 0x08	; 8
    11b8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    11bc:	88 23       	and	r24, r24
    11be:	41 f0       	breq	.+16     	; 0x11d0 <xQueueGenericReset+0x7a>
    11c0:	2a de       	rcall	.-940    	; 0xe16 <vPortYield>
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <xQueueGenericReset+0x7a>
    11c4:	ce 01       	movw	r24, r28
    11c6:	08 96       	adiw	r24, 0x08	; 8
    11c8:	58 dd       	rcall	.-1360   	; 0xc7a <vListInitialise>
    11ca:	ce 01       	movw	r24, r28
    11cc:	43 96       	adiw	r24, 0x13	; 19
    11ce:	55 dd       	rcall	.-1366   	; 0xc7a <vListInitialise>
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <prvInitialiseNewQueue>:
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	f8 01       	movw	r30, r16
    11e2:	61 11       	cpse	r22, r1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <prvInitialiseNewQueue+0x10>
    11e6:	11 83       	std	Z+1, r17	; 0x01
    11e8:	00 83       	st	Z, r16
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <prvInitialiseNewQueue+0x14>
    11ec:	51 83       	std	Z+1, r21	; 0x01
    11ee:	40 83       	st	Z, r20
    11f0:	87 8f       	std	Z+31, r24	; 0x1f
    11f2:	60 a3       	std	Z+32, r22	; 0x20
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	cf 01       	movw	r24, r30
    11f8:	ae df       	rcall	.-164    	; 0x1156 <xQueueGenericReset>
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	08 95       	ret

00001200 <xQueueGenericCreate>:
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	f8 2e       	mov	r15, r24
    1210:	e6 2e       	mov	r14, r22
    1212:	d4 2e       	mov	r13, r20
    1214:	86 9f       	mul	r24, r22
    1216:	c0 01       	movw	r24, r0
    1218:	11 24       	eor	r1, r1
    121a:	83 96       	adiw	r24, 0x23	; 35
    121c:	48 dc       	rcall	.-1904   	; 0xaae <pvPortMalloc>
    121e:	ec 01       	movw	r28, r24
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	41 f0       	breq	.+16     	; 0x1234 <xQueueGenericCreate+0x34>
    1224:	8c 01       	movw	r16, r24
    1226:	2d 2d       	mov	r18, r13
    1228:	ac 01       	movw	r20, r24
    122a:	4d 5d       	subi	r20, 0xDD	; 221
    122c:	5f 4f       	sbci	r21, 0xFF	; 255
    122e:	6e 2d       	mov	r22, r14
    1230:	8f 2d       	mov	r24, r15
    1232:	d4 df       	rcall	.-88     	; 0x11dc <prvInitialiseNewQueue>
    1234:	ce 01       	movw	r24, r28
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	08 95       	ret

00001246 <xQueueGenericSend>:
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	29 97       	sbiw	r28, 0x09	; 9
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	7c 01       	movw	r14, r24
    1268:	6b 01       	movw	r12, r22
    126a:	2e 83       	std	Y+6, r18	; 0x06
    126c:	3f 83       	std	Y+7, r19	; 0x07
    126e:	48 87       	std	Y+8, r20	; 0x08
    1270:	59 87       	std	Y+9, r21	; 0x09
    1272:	10 e0       	ldi	r17, 0x00	; 0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
    127a:	f7 01       	movw	r30, r14
    127c:	96 8d       	ldd	r25, Z+30	; 0x1e
    127e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1280:	98 17       	cp	r25, r24
    1282:	10 f0       	brcs	.+4      	; 0x1288 <xQueueGenericSend+0x42>
    1284:	02 30       	cpi	r16, 0x02	; 2
    1286:	b1 f4       	brne	.+44     	; 0x12b4 <xQueueGenericSend+0x6e>
    1288:	40 2f       	mov	r20, r16
    128a:	b6 01       	movw	r22, r12
    128c:	c7 01       	movw	r24, r14
    128e:	b6 de       	rcall	.-660    	; 0xffc <prvCopyDataToQueue>
    1290:	f7 01       	movw	r30, r14
    1292:	93 89       	ldd	r25, Z+19	; 0x13
    1294:	99 23       	and	r25, r25
    1296:	41 f0       	breq	.+16     	; 0x12a8 <xQueueGenericSend+0x62>
    1298:	c7 01       	movw	r24, r14
    129a:	43 96       	adiw	r24, 0x13	; 19
    129c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    12a0:	88 23       	and	r24, r24
    12a2:	21 f0       	breq	.+8      	; 0x12ac <xQueueGenericSend+0x66>
    12a4:	b8 dd       	rcall	.-1168   	; 0xe16 <vPortYield>
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <xQueueGenericSend+0x66>
    12a8:	81 11       	cpse	r24, r1
    12aa:	b5 dd       	rcall	.-1174   	; 0xe16 <vPortYield>
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	4c c0       	rjmp	.+152    	; 0x134c <xQueueGenericSend+0x106>
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	a8 85       	ldd	r26, Y+8	; 0x08
    12ba:	b9 85       	ldd	r27, Y+9	; 0x09
    12bc:	89 2b       	or	r24, r25
    12be:	8a 2b       	or	r24, r26
    12c0:	8b 2b       	or	r24, r27
    12c2:	21 f4       	brne	.+8      	; 0x12cc <xQueueGenericSend+0x86>
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	40 c0       	rjmp	.+128    	; 0x134c <xQueueGenericSend+0x106>
    12cc:	11 11       	cpse	r17, r1
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <xQueueGenericSend+0x94>
    12d0:	ce 01       	movw	r24, r28
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <vTaskInternalSetTimeOutState>
    12d8:	11 e0       	ldi	r17, 0x01	; 1
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	c7 d7       	rcall	.+3982   	; 0x226e <vTaskSuspendAll>
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	f7 01       	movw	r30, r14
    12e8:	81 a1       	ldd	r24, Z+33	; 0x21
    12ea:	8f 3f       	cpi	r24, 0xFF	; 255
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <xQueueGenericSend+0xaa>
    12ee:	11 a2       	std	Z+33, r1	; 0x21
    12f0:	f7 01       	movw	r30, r14
    12f2:	82 a1       	ldd	r24, Z+34	; 0x22
    12f4:	8f 3f       	cpi	r24, 0xFF	; 255
    12f6:	09 f4       	brne	.+2      	; 0x12fa <xQueueGenericSend+0xb4>
    12f8:	12 a2       	std	Z+34, r1	; 0x22
    12fa:	0f 90       	pop	r0
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	be 01       	movw	r22, r28
    1300:	6a 5f       	subi	r22, 0xFA	; 250
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <xTaskCheckForTimeOut>
    130c:	81 11       	cpse	r24, r1
    130e:	19 c0       	rjmp	.+50     	; 0x1342 <xQueueGenericSend+0xfc>
    1310:	c7 01       	movw	r24, r14
    1312:	66 de       	rcall	.-820    	; 0xfe0 <prvIsQueueFull>
    1314:	88 23       	and	r24, r24
    1316:	81 f0       	breq	.+32     	; 0x1338 <xQueueGenericSend+0xf2>
    1318:	4e 81       	ldd	r20, Y+6	; 0x06
    131a:	5f 81       	ldd	r21, Y+7	; 0x07
    131c:	68 85       	ldd	r22, Y+8	; 0x08
    131e:	79 85       	ldd	r23, Y+9	; 0x09
    1320:	c7 01       	movw	r24, r14
    1322:	08 96       	adiw	r24, 0x08	; 8
    1324:	0e 94 38 14 	call	0x2870	; 0x2870 <vTaskPlaceOnEventList>
    1328:	c7 01       	movw	r24, r14
    132a:	e1 de       	rcall	.-574    	; 0x10ee <prvUnlockQueue>
    132c:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1330:	81 11       	cpse	r24, r1
    1332:	a0 cf       	rjmp	.-192    	; 0x1274 <xQueueGenericSend+0x2e>
    1334:	70 dd       	rcall	.-1312   	; 0xe16 <vPortYield>
    1336:	9e cf       	rjmp	.-196    	; 0x1274 <xQueueGenericSend+0x2e>
    1338:	c7 01       	movw	r24, r14
    133a:	d9 de       	rcall	.-590    	; 0x10ee <prvUnlockQueue>
    133c:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1340:	99 cf       	rjmp	.-206    	; 0x1274 <xQueueGenericSend+0x2e>
    1342:	c7 01       	movw	r24, r14
    1344:	d4 de       	rcall	.-600    	; 0x10ee <prvUnlockQueue>
    1346:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	29 96       	adiw	r28, 0x09	; 9
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

0000136a <prvInitialiseMutex>:
    136a:	0f 93       	push	r16
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f0       	breq	.+26     	; 0x138a <prvInitialiseMutex+0x20>
    1370:	fc 01       	movw	r30, r24
    1372:	15 82       	std	Z+5, r1	; 0x05
    1374:	14 82       	std	Z+4, r1	; 0x04
    1376:	11 82       	std	Z+1, r1	; 0x01
    1378:	10 82       	st	Z, r1
    137a:	16 82       	std	Z+6, r1	; 0x06
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	5e df       	rcall	.-324    	; 0x1246 <xQueueGenericSend>
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <xQueueCreateMutex>:
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	48 2f       	mov	r20, r24
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	33 df       	rcall	.-410    	; 0x1200 <xQueueGenericCreate>
    139a:	ec 01       	movw	r28, r24
    139c:	e6 df       	rcall	.-52     	; 0x136a <prvInitialiseMutex>
    139e:	ce 01       	movw	r24, r28
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <xQueueGenericSendFromISR>:
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	8a 01       	movw	r16, r20
    13b4:	fc 01       	movw	r30, r24
    13b6:	56 8d       	ldd	r21, Z+30	; 0x1e
    13b8:	37 8d       	ldd	r19, Z+31	; 0x1f
    13ba:	53 17       	cp	r21, r19
    13bc:	10 f0       	brcs	.+4      	; 0x13c2 <xQueueGenericSendFromISR+0x1c>
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	f9 f4       	brne	.+62     	; 0x1400 <xQueueGenericSendFromISR+0x5a>
    13c2:	42 2f       	mov	r20, r18
    13c4:	78 01       	movw	r14, r16
    13c6:	ec 01       	movw	r28, r24
    13c8:	1a a1       	ldd	r17, Y+34	; 0x22
    13ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13cc:	ce 01       	movw	r24, r28
    13ce:	16 de       	rcall	.-980    	; 0xffc <prvCopyDataToQueue>
    13d0:	1f 3f       	cpi	r17, 0xFF	; 255
    13d2:	81 f4       	brne	.+32     	; 0x13f4 <xQueueGenericSendFromISR+0x4e>
    13d4:	8b 89       	ldd	r24, Y+19	; 0x13
    13d6:	88 23       	and	r24, r24
    13d8:	a9 f0       	breq	.+42     	; 0x1404 <xQueueGenericSendFromISR+0x5e>
    13da:	ce 01       	movw	r24, r28
    13dc:	43 96       	adiw	r24, 0x13	; 19
    13de:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    13e2:	88 23       	and	r24, r24
    13e4:	89 f0       	breq	.+34     	; 0x1408 <xQueueGenericSendFromISR+0x62>
    13e6:	e1 14       	cp	r14, r1
    13e8:	f1 04       	cpc	r15, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <xQueueGenericSendFromISR+0x66>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	f7 01       	movw	r30, r14
    13f0:	80 83       	st	Z, r24
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <xQueueGenericSendFromISR+0x68>
    13f4:	ff 24       	eor	r15, r15
    13f6:	f3 94       	inc	r15
    13f8:	f1 0e       	add	r15, r17
    13fa:	fa a2       	std	Y+34, r15	; 0x22
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <xQueueGenericSendFromISR+0x68>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	05 c0       	rjmp	.+10     	; 0x140e <xQueueGenericSendFromISR+0x68>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	03 c0       	rjmp	.+6      	; 0x140e <xQueueGenericSendFromISR+0x68>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	01 c0       	rjmp	.+2      	; 0x140e <xQueueGenericSendFromISR+0x68>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	08 95       	ret

0000141c <xQueueReceive>:
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	29 97       	sbiw	r28, 0x09	; 9
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	8c 01       	movw	r16, r24
    143e:	6b 01       	movw	r12, r22
    1440:	2e 83       	std	Y+6, r18	; 0x06
    1442:	3f 83       	std	Y+7, r19	; 0x07
    1444:	48 87       	std	Y+8, r20	; 0x08
    1446:	59 87       	std	Y+9, r21	; 0x09
    1448:	e1 2c       	mov	r14, r1
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	0f 92       	push	r0
    1450:	f8 01       	movw	r30, r16
    1452:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1454:	ff 20       	and	r15, r15
    1456:	99 f0       	breq	.+38     	; 0x147e <xQueueReceive+0x62>
    1458:	b6 01       	movw	r22, r12
    145a:	c8 01       	movw	r24, r16
    145c:	2e de       	rcall	.-932    	; 0x10ba <prvCopyDataFromQueue>
    145e:	fa 94       	dec	r15
    1460:	f8 01       	movw	r30, r16
    1462:	f6 8e       	std	Z+30, r15	; 0x1e
    1464:	80 85       	ldd	r24, Z+8	; 0x08
    1466:	88 23       	and	r24, r24
    1468:	31 f0       	breq	.+12     	; 0x1476 <xQueueReceive+0x5a>
    146a:	c8 01       	movw	r24, r16
    146c:	08 96       	adiw	r24, 0x08	; 8
    146e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    1472:	81 11       	cpse	r24, r1
    1474:	d0 dc       	rcall	.-1632   	; 0xe16 <vPortYield>
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	4f c0       	rjmp	.+158    	; 0x151c <xQueueReceive+0x100>
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	a8 85       	ldd	r26, Y+8	; 0x08
    1484:	b9 85       	ldd	r27, Y+9	; 0x09
    1486:	89 2b       	or	r24, r25
    1488:	8a 2b       	or	r24, r26
    148a:	8b 2b       	or	r24, r27
    148c:	21 f4       	brne	.+8      	; 0x1496 <xQueueReceive+0x7a>
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	43 c0       	rjmp	.+134    	; 0x151c <xQueueReceive+0x100>
    1496:	e1 10       	cpse	r14, r1
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <xQueueReceive+0x8a>
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <vTaskInternalSetTimeOutState>
    14a2:	ee 24       	eor	r14, r14
    14a4:	e3 94       	inc	r14
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	e1 d6       	rcall	.+3522   	; 0x226e <vTaskSuspendAll>
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	0f 92       	push	r0
    14b2:	f8 01       	movw	r30, r16
    14b4:	81 a1       	ldd	r24, Z+33	; 0x21
    14b6:	8f 3f       	cpi	r24, 0xFF	; 255
    14b8:	09 f4       	brne	.+2      	; 0x14bc <xQueueReceive+0xa0>
    14ba:	11 a2       	std	Z+33, r1	; 0x21
    14bc:	f8 01       	movw	r30, r16
    14be:	82 a1       	ldd	r24, Z+34	; 0x22
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <xQueueReceive+0xaa>
    14c4:	12 a2       	std	Z+34, r1	; 0x22
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	be 01       	movw	r22, r28
    14cc:	6a 5f       	subi	r22, 0xFA	; 250
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <xTaskCheckForTimeOut>
    14d8:	81 11       	cpse	r24, r1
    14da:	17 c0       	rjmp	.+46     	; 0x150a <xQueueReceive+0xee>
    14dc:	c8 01       	movw	r24, r16
    14de:	73 dd       	rcall	.-1306   	; 0xfc6 <prvIsQueueEmpty>
    14e0:	88 23       	and	r24, r24
    14e2:	79 f0       	breq	.+30     	; 0x1502 <xQueueReceive+0xe6>
    14e4:	4e 81       	ldd	r20, Y+6	; 0x06
    14e6:	5f 81       	ldd	r21, Y+7	; 0x07
    14e8:	68 85       	ldd	r22, Y+8	; 0x08
    14ea:	79 85       	ldd	r23, Y+9	; 0x09
    14ec:	c8 01       	movw	r24, r16
    14ee:	43 96       	adiw	r24, 0x13	; 19
    14f0:	0e 94 38 14 	call	0x2870	; 0x2870 <vTaskPlaceOnEventList>
    14f4:	c8 01       	movw	r24, r16
    14f6:	fb dd       	rcall	.-1034   	; 0x10ee <prvUnlockQueue>
    14f8:	fa d7       	rcall	.+4084   	; 0x24ee <xTaskResumeAll>
    14fa:	81 11       	cpse	r24, r1
    14fc:	a6 cf       	rjmp	.-180    	; 0x144a <xQueueReceive+0x2e>
    14fe:	8b dc       	rcall	.-1770   	; 0xe16 <vPortYield>
    1500:	a4 cf       	rjmp	.-184    	; 0x144a <xQueueReceive+0x2e>
    1502:	c8 01       	movw	r24, r16
    1504:	f4 dd       	rcall	.-1048   	; 0x10ee <prvUnlockQueue>
    1506:	f3 d7       	rcall	.+4070   	; 0x24ee <xTaskResumeAll>
    1508:	a0 cf       	rjmp	.-192    	; 0x144a <xQueueReceive+0x2e>
    150a:	c8 01       	movw	r24, r16
    150c:	f0 dd       	rcall	.-1056   	; 0x10ee <prvUnlockQueue>
    150e:	ef d7       	rcall	.+4062   	; 0x24ee <xTaskResumeAll>
    1510:	c8 01       	movw	r24, r16
    1512:	59 dd       	rcall	.-1358   	; 0xfc6 <prvIsQueueEmpty>
    1514:	88 23       	and	r24, r24
    1516:	09 f4       	brne	.+2      	; 0x151a <xQueueReceive+0xfe>
    1518:	98 cf       	rjmp	.-208    	; 0x144a <xQueueReceive+0x2e>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	29 96       	adiw	r28, 0x09	; 9
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	08 95       	ret

0000153a <xQueueSemaphoreTake>:
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	29 97       	sbiw	r28, 0x09	; 9
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	8c 01       	movw	r16, r24
    1558:	4e 83       	std	Y+6, r20	; 0x06
    155a:	5f 83       	std	Y+7, r21	; 0x07
    155c:	68 87       	std	Y+8, r22	; 0x08
    155e:	79 87       	std	Y+9, r23	; 0x09
    1560:	e1 2c       	mov	r14, r1
    1562:	f1 2c       	mov	r15, r1
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	0f 92       	push	r0
    156a:	f8 01       	movw	r30, r16
    156c:	86 8d       	ldd	r24, Z+30	; 0x1e
    156e:	88 23       	and	r24, r24
    1570:	c9 f0       	breq	.+50     	; 0x15a4 <xQueueSemaphoreTake+0x6a>
    1572:	81 50       	subi	r24, 0x01	; 1
    1574:	86 8f       	std	Z+30, r24	; 0x1e
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	89 2b       	or	r24, r25
    157c:	29 f4       	brne	.+10     	; 0x1588 <xQueueSemaphoreTake+0x4e>
    157e:	0e 94 3b 18 	call	0x3076	; 0x3076 <pvTaskIncrementMutexHeldCount>
    1582:	f8 01       	movw	r30, r16
    1584:	95 83       	std	Z+5, r25	; 0x05
    1586:	84 83       	std	Z+4, r24	; 0x04
    1588:	f8 01       	movw	r30, r16
    158a:	80 85       	ldd	r24, Z+8	; 0x08
    158c:	88 23       	and	r24, r24
    158e:	31 f0       	breq	.+12     	; 0x159c <xQueueSemaphoreTake+0x62>
    1590:	c8 01       	movw	r24, r16
    1592:	08 96       	adiw	r24, 0x08	; 8
    1594:	0e 94 db 14 	call	0x29b6	; 0x29b6 <xTaskRemoveFromEventList>
    1598:	81 11       	cpse	r24, r1
    159a:	3d dc       	rcall	.-1926   	; 0xe16 <vPortYield>
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	6f c0       	rjmp	.+222    	; 0x1682 <xQueueSemaphoreTake+0x148>
    15a4:	8e 81       	ldd	r24, Y+6	; 0x06
    15a6:	9f 81       	ldd	r25, Y+7	; 0x07
    15a8:	a8 85       	ldd	r26, Y+8	; 0x08
    15aa:	b9 85       	ldd	r27, Y+9	; 0x09
    15ac:	89 2b       	or	r24, r25
    15ae:	8a 2b       	or	r24, r26
    15b0:	8b 2b       	or	r24, r27
    15b2:	21 f4       	brne	.+8      	; 0x15bc <xQueueSemaphoreTake+0x82>
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	63 c0       	rjmp	.+198    	; 0x1682 <xQueueSemaphoreTake+0x148>
    15bc:	f1 10       	cpse	r15, r1
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <xQueueSemaphoreTake+0x92>
    15c0:	ce 01       	movw	r24, r28
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <vTaskInternalSetTimeOutState>
    15c8:	ff 24       	eor	r15, r15
    15ca:	f3 94       	inc	r15
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	4e d6       	rcall	.+3228   	; 0x226e <vTaskSuspendAll>
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	0f 92       	push	r0
    15d8:	f8 01       	movw	r30, r16
    15da:	81 a1       	ldd	r24, Z+33	; 0x21
    15dc:	8f 3f       	cpi	r24, 0xFF	; 255
    15de:	09 f4       	brne	.+2      	; 0x15e2 <xQueueSemaphoreTake+0xa8>
    15e0:	11 a2       	std	Z+33, r1	; 0x21
    15e2:	f8 01       	movw	r30, r16
    15e4:	82 a1       	ldd	r24, Z+34	; 0x22
    15e6:	8f 3f       	cpi	r24, 0xFF	; 255
    15e8:	09 f4       	brne	.+2      	; 0x15ec <xQueueSemaphoreTake+0xb2>
    15ea:	12 a2       	std	Z+34, r1	; 0x22
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	be 01       	movw	r22, r28
    15f2:	6a 5f       	subi	r22, 0xFA	; 250
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	ce 01       	movw	r24, r28
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <xTaskCheckForTimeOut>
    15fe:	81 11       	cpse	r24, r1
    1600:	26 c0       	rjmp	.+76     	; 0x164e <xQueueSemaphoreTake+0x114>
    1602:	c8 01       	movw	r24, r16
    1604:	e0 dc       	rcall	.-1600   	; 0xfc6 <prvIsQueueEmpty>
    1606:	88 23       	and	r24, r24
    1608:	f1 f0       	breq	.+60     	; 0x1646 <xQueueSemaphoreTake+0x10c>
    160a:	f8 01       	movw	r30, r16
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	89 2b       	or	r24, r25
    1612:	51 f4       	brne	.+20     	; 0x1628 <xQueueSemaphoreTake+0xee>
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	0f 92       	push	r0
    161a:	84 81       	ldd	r24, Z+4	; 0x04
    161c:	95 81       	ldd	r25, Z+5	; 0x05
    161e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <xTaskPriorityInherit>
    1622:	e8 2e       	mov	r14, r24
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	4e 81       	ldd	r20, Y+6	; 0x06
    162a:	5f 81       	ldd	r21, Y+7	; 0x07
    162c:	68 85       	ldd	r22, Y+8	; 0x08
    162e:	79 85       	ldd	r23, Y+9	; 0x09
    1630:	c8 01       	movw	r24, r16
    1632:	43 96       	adiw	r24, 0x13	; 19
    1634:	0e 94 38 14 	call	0x2870	; 0x2870 <vTaskPlaceOnEventList>
    1638:	c8 01       	movw	r24, r16
    163a:	59 dd       	rcall	.-1358   	; 0x10ee <prvUnlockQueue>
    163c:	58 d7       	rcall	.+3760   	; 0x24ee <xTaskResumeAll>
    163e:	81 11       	cpse	r24, r1
    1640:	91 cf       	rjmp	.-222    	; 0x1564 <xQueueSemaphoreTake+0x2a>
    1642:	e9 db       	rcall	.-2094   	; 0xe16 <vPortYield>
    1644:	8f cf       	rjmp	.-226    	; 0x1564 <xQueueSemaphoreTake+0x2a>
    1646:	c8 01       	movw	r24, r16
    1648:	52 dd       	rcall	.-1372   	; 0x10ee <prvUnlockQueue>
    164a:	51 d7       	rcall	.+3746   	; 0x24ee <xTaskResumeAll>
    164c:	8b cf       	rjmp	.-234    	; 0x1564 <xQueueSemaphoreTake+0x2a>
    164e:	c8 01       	movw	r24, r16
    1650:	4e dd       	rcall	.-1380   	; 0x10ee <prvUnlockQueue>
    1652:	4d d7       	rcall	.+3738   	; 0x24ee <xTaskResumeAll>
    1654:	c8 01       	movw	r24, r16
    1656:	b7 dc       	rcall	.-1682   	; 0xfc6 <prvIsQueueEmpty>
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <xQueueSemaphoreTake+0x124>
    165c:	83 cf       	rjmp	.-250    	; 0x1564 <xQueueSemaphoreTake+0x2a>
    165e:	ee 20       	and	r14, r14
    1660:	79 f0       	breq	.+30     	; 0x1680 <xQueueSemaphoreTake+0x146>
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	0f 92       	push	r0
    1668:	c8 01       	movw	r24, r16
    166a:	9d dc       	rcall	.-1734   	; 0xfa6 <prvGetDisinheritPriorityAfterTimeout>
    166c:	68 2f       	mov	r22, r24
    166e:	f8 01       	movw	r30, r16
    1670:	84 81       	ldd	r24, Z+4	; 0x04
    1672:	95 81       	ldd	r25, Z+5	; 0x05
    1674:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <vTaskPriorityDisinheritAfterTimeout>
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <xQueueSemaphoreTake+0x148>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	29 96       	adiw	r28, 0x09	; 9
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	08 95       	ret

0000169c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	0f 92       	push	r0
    16a8:	89 a1       	ldd	r24, Y+33	; 0x21
    16aa:	8f 3f       	cpi	r24, 0xFF	; 255
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <vQueueWaitForMessageRestricted+0x14>
    16ae:	19 a2       	std	Y+33, r1	; 0x21
    16b0:	8a a1       	ldd	r24, Y+34	; 0x22
    16b2:	8f 3f       	cpi	r24, 0xFF	; 255
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <vQueueWaitForMessageRestricted+0x1c>
    16b6:	1a a2       	std	Y+34, r1	; 0x22
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16be:	81 11       	cpse	r24, r1
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16c2:	ce 01       	movw	r24, r28
    16c4:	43 96       	adiw	r24, 0x13	; 19
    16c6:	0e 94 99 14 	call	0x2932	; 0x2932 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    16ca:	ce 01       	movw	r24, r28
    16cc:	10 dd       	rcall	.-1504   	; 0x10ee <prvUnlockQueue>
    }
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    16d4:	fc 01       	movw	r30, r24
    16d6:	44 81       	ldd	r20, Z+4	; 0x04
    16d8:	55 81       	ldd	r21, Z+5	; 0x05
    16da:	22 81       	ldd	r18, Z+2	; 0x02
    16dc:	33 81       	ldd	r19, Z+3	; 0x03
    16de:	24 0f       	add	r18, r20
    16e0:	35 1f       	adc	r19, r21
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	b9 01       	movw	r22, r18
    16e8:	68 1b       	sub	r22, r24
    16ea:	79 0b       	sbc	r23, r25
    16ec:	cb 01       	movw	r24, r22
    16ee:	64 17       	cp	r22, r20
    16f0:	75 07       	cpc	r23, r21
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <prvBytesInBuffer+0x24>
    16f4:	84 1b       	sub	r24, r20
    16f6:	95 0b       	sbc	r25, r21
    16f8:	08 95       	ret

000016fa <prvInitialiseNewStreamBuffer>:
    16fa:	0f 93       	push	r16
    16fc:	fc 01       	movw	r30, r24
    16fe:	8f e0       	ldi	r24, 0x0F	; 15
    1700:	df 01       	movw	r26, r30
    1702:	1d 92       	st	X+, r1
    1704:	8a 95       	dec	r24
    1706:	e9 f7       	brne	.-6      	; 0x1702 <prvInitialiseNewStreamBuffer+0x8>
    1708:	75 87       	std	Z+13, r23	; 0x0d
    170a:	64 87       	std	Z+12, r22	; 0x0c
    170c:	55 83       	std	Z+5, r21	; 0x05
    170e:	44 83       	std	Z+4, r20	; 0x04
    1710:	37 83       	std	Z+7, r19	; 0x07
    1712:	26 83       	std	Z+6, r18	; 0x06
    1714:	06 87       	std	Z+14, r16	; 0x0e
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <prvWriteBytesToBuffer>:
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	6c 01       	movw	r12, r24
    1730:	5b 01       	movw	r10, r22
    1732:	7a 01       	movw	r14, r20
    1734:	fc 01       	movw	r30, r24
    1736:	c2 81       	ldd	r28, Z+2	; 0x02
    1738:	d3 81       	ldd	r29, Z+3	; 0x03
    173a:	04 81       	ldd	r16, Z+4	; 0x04
    173c:	15 81       	ldd	r17, Z+5	; 0x05
    173e:	0c 1b       	sub	r16, r28
    1740:	1d 0b       	sbc	r17, r29
    1742:	40 17       	cp	r20, r16
    1744:	51 07       	cpc	r21, r17
    1746:	08 f4       	brcc	.+2      	; 0x174a <prvWriteBytesToBuffer+0x30>
    1748:	8a 01       	movw	r16, r20
    174a:	f6 01       	movw	r30, r12
    174c:	84 85       	ldd	r24, Z+12	; 0x0c
    174e:	95 85       	ldd	r25, Z+13	; 0x0d
    1750:	a8 01       	movw	r20, r16
    1752:	b5 01       	movw	r22, r10
    1754:	8c 0f       	add	r24, r28
    1756:	9d 1f       	adc	r25, r29
    1758:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <memcpy>
    175c:	0e 15       	cp	r16, r14
    175e:	1f 05       	cpc	r17, r15
    1760:	58 f4       	brcc	.+22     	; 0x1778 <prvWriteBytesToBuffer+0x5e>
    1762:	a7 01       	movw	r20, r14
    1764:	40 1b       	sub	r20, r16
    1766:	51 0b       	sbc	r21, r17
    1768:	b5 01       	movw	r22, r10
    176a:	60 0f       	add	r22, r16
    176c:	71 1f       	adc	r23, r17
    176e:	f6 01       	movw	r30, r12
    1770:	84 85       	ldd	r24, Z+12	; 0x0c
    1772:	95 85       	ldd	r25, Z+13	; 0x0d
    1774:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <memcpy>
    1778:	ce 01       	movw	r24, r28
    177a:	8e 0d       	add	r24, r14
    177c:	9f 1d       	adc	r25, r15
    177e:	f6 01       	movw	r30, r12
    1780:	24 81       	ldd	r18, Z+4	; 0x04
    1782:	35 81       	ldd	r19, Z+5	; 0x05
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	10 f0       	brcs	.+4      	; 0x178e <prvWriteBytesToBuffer+0x74>
    178a:	82 1b       	sub	r24, r18
    178c:	93 0b       	sbc	r25, r19
    178e:	f6 01       	movw	r30, r12
    1790:	93 83       	std	Z+3, r25	; 0x03
    1792:	82 83       	std	Z+2, r24	; 0x02
    1794:	c7 01       	movw	r24, r14
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	cf 90       	pop	r12
    17a6:	bf 90       	pop	r11
    17a8:	af 90       	pop	r10
    17aa:	08 95       	ret

000017ac <prvWriteMessageToBuffer>:
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	1f 92       	push	r1
    17be:	1f 92       	push	r1
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	7c 01       	movw	r14, r24
    17c6:	6b 01       	movw	r12, r22
    17c8:	5a 83       	std	Y+2, r21	; 0x02
    17ca:	49 83       	std	Y+1, r20	; 0x01
    17cc:	21 15       	cp	r18, r1
    17ce:	31 05       	cpc	r19, r1
    17d0:	c1 f0       	breq	.+48     	; 0x1802 <prvWriteMessageToBuffer+0x56>
    17d2:	fc 01       	movw	r30, r24
    17d4:	86 85       	ldd	r24, Z+14	; 0x0e
    17d6:	80 fd       	sbrc	r24, 0
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <prvWriteMessageToBuffer+0x3e>
    17da:	42 17       	cp	r20, r18
    17dc:	53 07       	cpc	r21, r19
    17de:	08 f4       	brcc	.+2      	; 0x17e2 <prvWriteMessageToBuffer+0x36>
    17e0:	9a 01       	movw	r18, r20
    17e2:	3a 83       	std	Y+2, r19	; 0x02
    17e4:	29 83       	std	Y+1, r18	; 0x01
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <prvWriteMessageToBuffer+0x5c>
    17ea:	20 17       	cp	r18, r16
    17ec:	31 07       	cpc	r19, r17
    17ee:	58 f0       	brcs	.+22     	; 0x1806 <prvWriteMessageToBuffer+0x5a>
    17f0:	42 e0       	ldi	r20, 0x02	; 2
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	be 01       	movw	r22, r28
    17f6:	6f 5f       	subi	r22, 0xFF	; 255
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	c7 01       	movw	r24, r14
    17fc:	8e df       	rcall	.-228    	; 0x171a <prvWriteBytesToBuffer>
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <prvWriteMessageToBuffer+0x5c>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <prvWriteMessageToBuffer+0x5c>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	88 23       	and	r24, r24
    180a:	31 f0       	breq	.+12     	; 0x1818 <prvWriteMessageToBuffer+0x6c>
    180c:	49 81       	ldd	r20, Y+1	; 0x01
    180e:	5a 81       	ldd	r21, Y+2	; 0x02
    1810:	b6 01       	movw	r22, r12
    1812:	c7 01       	movw	r24, r14
    1814:	82 df       	rcall	.-252    	; 0x171a <prvWriteBytesToBuffer>
    1816:	02 c0       	rjmp	.+4      	; 0x181c <prvWriteMessageToBuffer+0x70>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	08 95       	ret

00001832 <prvReadBytesFromBuffer>:
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	7c 01       	movw	r14, r24
    1848:	5b 01       	movw	r10, r22
    184a:	e9 01       	movw	r28, r18
    184c:	42 17       	cp	r20, r18
    184e:	53 07       	cpc	r21, r19
    1850:	08 f4       	brcc	.+2      	; 0x1854 <prvReadBytesFromBuffer+0x22>
    1852:	ea 01       	movw	r28, r20
    1854:	20 97       	sbiw	r28, 0x00	; 0
    1856:	81 f1       	breq	.+96     	; 0x18b8 <prvReadBytesFromBuffer+0x86>
    1858:	f7 01       	movw	r30, r14
    185a:	00 81       	ld	r16, Z
    185c:	11 81       	ldd	r17, Z+1	; 0x01
    185e:	84 81       	ldd	r24, Z+4	; 0x04
    1860:	95 81       	ldd	r25, Z+5	; 0x05
    1862:	80 1b       	sub	r24, r16
    1864:	91 0b       	sbc	r25, r17
    1866:	6e 01       	movw	r12, r28
    1868:	8c 17       	cp	r24, r28
    186a:	9d 07       	cpc	r25, r29
    186c:	08 f4       	brcc	.+2      	; 0x1870 <prvReadBytesFromBuffer+0x3e>
    186e:	6c 01       	movw	r12, r24
    1870:	f7 01       	movw	r30, r14
    1872:	64 85       	ldd	r22, Z+12	; 0x0c
    1874:	75 85       	ldd	r23, Z+13	; 0x0d
    1876:	60 0f       	add	r22, r16
    1878:	71 1f       	adc	r23, r17
    187a:	a6 01       	movw	r20, r12
    187c:	c5 01       	movw	r24, r10
    187e:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <memcpy>
    1882:	cc 16       	cp	r12, r28
    1884:	dd 06       	cpc	r13, r29
    1886:	58 f4       	brcc	.+22     	; 0x189e <prvReadBytesFromBuffer+0x6c>
    1888:	ae 01       	movw	r20, r28
    188a:	4c 19       	sub	r20, r12
    188c:	5d 09       	sbc	r21, r13
    188e:	f7 01       	movw	r30, r14
    1890:	64 85       	ldd	r22, Z+12	; 0x0c
    1892:	75 85       	ldd	r23, Z+13	; 0x0d
    1894:	c5 01       	movw	r24, r10
    1896:	8c 0d       	add	r24, r12
    1898:	9d 1d       	adc	r25, r13
    189a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <memcpy>
    189e:	0c 0f       	add	r16, r28
    18a0:	1d 1f       	adc	r17, r29
    18a2:	f7 01       	movw	r30, r14
    18a4:	84 81       	ldd	r24, Z+4	; 0x04
    18a6:	95 81       	ldd	r25, Z+5	; 0x05
    18a8:	08 17       	cp	r16, r24
    18aa:	19 07       	cpc	r17, r25
    18ac:	10 f0       	brcs	.+4      	; 0x18b2 <prvReadBytesFromBuffer+0x80>
    18ae:	08 1b       	sub	r16, r24
    18b0:	19 0b       	sbc	r17, r25
    18b2:	f7 01       	movw	r30, r14
    18b4:	11 83       	std	Z+1, r17	; 0x01
    18b6:	00 83       	st	Z, r16
    18b8:	ce 01       	movw	r24, r28
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	08 95       	ret

000018d0 <prvReadMessageFromBuffer>:
    18d0:	6f 92       	push	r6
    18d2:	7f 92       	push	r7
    18d4:	8f 92       	push	r8
    18d6:	9f 92       	push	r9
    18d8:	af 92       	push	r10
    18da:	bf 92       	push	r11
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	1f 92       	push	r1
    18ee:	1f 92       	push	r1
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	6c 01       	movw	r12, r24
    18f6:	4b 01       	movw	r8, r22
    18f8:	5a 01       	movw	r10, r20
    18fa:	79 01       	movw	r14, r18
    18fc:	01 15       	cp	r16, r1
    18fe:	11 05       	cpc	r17, r1
    1900:	b1 f0       	breq	.+44     	; 0x192e <prvReadMessageFromBuffer+0x5e>
    1902:	fc 01       	movw	r30, r24
    1904:	60 80       	ld	r6, Z
    1906:	71 80       	ldd	r7, Z+1	; 0x01
    1908:	a8 01       	movw	r20, r16
    190a:	be 01       	movw	r22, r28
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	90 df       	rcall	.-224    	; 0x1832 <prvReadBytesFromBuffer>
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	e0 1a       	sub	r14, r16
    1918:	f1 0a       	sbc	r15, r17
    191a:	a8 16       	cp	r10, r24
    191c:	b9 06       	cpc	r11, r25
    191e:	30 f4       	brcc	.+12     	; 0x192c <prvReadMessageFromBuffer+0x5c>
    1920:	f6 01       	movw	r30, r12
    1922:	71 82       	std	Z+1, r7	; 0x01
    1924:	60 82       	st	Z, r6
    1926:	a1 2c       	mov	r10, r1
    1928:	b1 2c       	mov	r11, r1
    192a:	01 c0       	rjmp	.+2      	; 0x192e <prvReadMessageFromBuffer+0x5e>
    192c:	5c 01       	movw	r10, r24
    192e:	97 01       	movw	r18, r14
    1930:	a5 01       	movw	r20, r10
    1932:	b4 01       	movw	r22, r8
    1934:	c6 01       	movw	r24, r12
    1936:	7d df       	rcall	.-262    	; 0x1832 <prvReadBytesFromBuffer>
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	6f 90       	pop	r6
    1958:	08 95       	ret

0000195a <xStreamBufferGenericCreate>:
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ec 01       	movw	r28, r24
    196a:	6b 01       	movw	r12, r22
    196c:	41 30       	cpi	r20, 0x01	; 1
    196e:	11 f4       	brne	.+4      	; 0x1974 <xStreamBufferGenericCreate+0x1a>
    1970:	01 e0       	ldi	r16, 0x01	; 1
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <xStreamBufferGenericCreate+0x1c>
    1974:	00 e0       	ldi	r16, 0x00	; 0
    1976:	c1 14       	cp	r12, r1
    1978:	d1 04       	cpc	r13, r1
    197a:	19 f4       	brne	.+6      	; 0x1982 <xStreamBufferGenericCreate+0x28>
    197c:	cc 24       	eor	r12, r12
    197e:	c3 94       	inc	r12
    1980:	d1 2c       	mov	r13, r1
    1982:	ce 01       	movw	r24, r28
    1984:	40 96       	adiw	r24, 0x10	; 16
    1986:	c8 17       	cp	r28, r24
    1988:	d9 07       	cpc	r29, r25
    198a:	20 f4       	brcc	.+8      	; 0x1994 <xStreamBufferGenericCreate+0x3a>
    198c:	21 96       	adiw	r28, 0x01	; 1
    198e:	8f d8       	rcall	.-3810   	; 0xaae <pvPortMalloc>
    1990:	7c 01       	movw	r14, r24
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <xStreamBufferGenericCreate+0x3e>
    1994:	e1 2c       	mov	r14, r1
    1996:	f1 2c       	mov	r15, r1
    1998:	e1 14       	cp	r14, r1
    199a:	f1 04       	cpc	r15, r1
    199c:	39 f0       	breq	.+14     	; 0x19ac <xStreamBufferGenericCreate+0x52>
    199e:	96 01       	movw	r18, r12
    19a0:	ae 01       	movw	r20, r28
    19a2:	b7 01       	movw	r22, r14
    19a4:	61 5f       	subi	r22, 0xF1	; 241
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	c7 01       	movw	r24, r14
    19aa:	a7 de       	rcall	.-690    	; 0x16fa <prvInitialiseNewStreamBuffer>
    19ac:	c7 01       	movw	r24, r14
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	08 95       	ret

000019be <xStreamBufferReset>:
    19be:	0f 93       	push	r16
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	0f 92       	push	r0
    19c6:	fc 01       	movw	r30, r24
    19c8:	20 85       	ldd	r18, Z+8	; 0x08
    19ca:	31 85       	ldd	r19, Z+9	; 0x09
    19cc:	23 2b       	or	r18, r19
    19ce:	71 f4       	brne	.+28     	; 0x19ec <xStreamBufferReset+0x2e>
    19d0:	22 85       	ldd	r18, Z+10	; 0x0a
    19d2:	33 85       	ldd	r19, Z+11	; 0x0b
    19d4:	23 2b       	or	r18, r19
    19d6:	61 f4       	brne	.+24     	; 0x19f0 <xStreamBufferReset+0x32>
    19d8:	26 81       	ldd	r18, Z+6	; 0x06
    19da:	37 81       	ldd	r19, Z+7	; 0x07
    19dc:	44 81       	ldd	r20, Z+4	; 0x04
    19de:	55 81       	ldd	r21, Z+5	; 0x05
    19e0:	64 85       	ldd	r22, Z+12	; 0x0c
    19e2:	75 85       	ldd	r23, Z+13	; 0x0d
    19e4:	06 85       	ldd	r16, Z+14	; 0x0e
    19e6:	89 de       	rcall	.-750    	; 0x16fa <prvInitialiseNewStreamBuffer>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <xStreamBufferReset+0x34>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <xStreamBufferReset+0x34>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 91       	pop	r16
    19f8:	08 95       	ret

000019fa <xStreamBufferSpacesAvailable>:
    19fa:	fc 01       	movw	r30, r24
    19fc:	24 81       	ldd	r18, Z+4	; 0x04
    19fe:	35 81       	ldd	r19, Z+5	; 0x05
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	82 0f       	add	r24, r18
    1a06:	93 1f       	adc	r25, r19
    1a08:	42 81       	ldd	r20, Z+2	; 0x02
    1a0a:	53 81       	ldd	r21, Z+3	; 0x03
    1a0c:	84 1b       	sub	r24, r20
    1a0e:	95 0b       	sbc	r25, r21
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	82 17       	cp	r24, r18
    1a14:	93 07       	cpc	r25, r19
    1a16:	10 f0       	brcs	.+4      	; 0x1a1c <xStreamBufferSpacesAvailable+0x22>
    1a18:	82 1b       	sub	r24, r18
    1a1a:	93 0b       	sbc	r25, r19
    1a1c:	08 95       	ret

00001a1e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1a1e:	2f 92       	push	r2
    1a20:	3f 92       	push	r3
    1a22:	4f 92       	push	r4
    1a24:	5f 92       	push	r5
    1a26:	6f 92       	push	r6
    1a28:	7f 92       	push	r7
    1a2a:	8f 92       	push	r8
    1a2c:	9f 92       	push	r9
    1a2e:	af 92       	push	r10
    1a30:	bf 92       	push	r11
    1a32:	cf 92       	push	r12
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	2b 97       	sbiw	r28, 0x0b	; 11
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	4c 01       	movw	r8, r24
    1a54:	7b 87       	std	Y+11, r23	; 0x0b
    1a56:	6a 87       	std	Y+10, r22	; 0x0a
    1a58:	1a 01       	movw	r2, r20
    1a5a:	0e 83       	std	Y+6, r16	; 0x06
    1a5c:	1f 83       	std	Y+7, r17	; 0x07
    1a5e:	28 87       	std	Y+8, r18	; 0x08
    1a60:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1a62:	fc 01       	movw	r30, r24
    1a64:	84 81       	ldd	r24, Z+4	; 0x04
    1a66:	95 81       	ldd	r25, Z+5	; 0x05
    1a68:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a6a:	26 85       	ldd	r18, Z+14	; 0x0e
    1a6c:	20 ff       	sbrs	r18, 0
    1a6e:	0c c0       	rjmp	.+24     	; 0x1a88 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a70:	2a 01       	movw	r4, r20
    1a72:	f2 e0       	ldi	r31, 0x02	; 2
    1a74:	4f 0e       	add	r4, r31
    1a76:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a78:	84 15       	cp	r24, r4
    1a7a:	95 05       	cpc	r25, r5
    1a7c:	58 f4       	brcc	.+22     	; 0x1a94 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1a7e:	1e 82       	std	Y+6, r1	; 0x06
    1a80:	1f 82       	std	Y+7, r1	; 0x07
    1a82:	18 86       	std	Y+8, r1	; 0x08
    1a84:	19 86       	std	Y+9, r1	; 0x09
    1a86:	06 c0       	rjmp	.+12     	; 0x1a94 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a88:	84 17       	cp	r24, r20
    1a8a:	95 07       	cpc	r25, r21
    1a8c:	10 f0       	brcs	.+4      	; 0x1a92 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1a8e:	2a 01       	movw	r4, r20
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1a92:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a94:	8e 81       	ldd	r24, Y+6	; 0x06
    1a96:	9f 81       	ldd	r25, Y+7	; 0x07
    1a98:	a8 85       	ldd	r26, Y+8	; 0x08
    1a9a:	b9 85       	ldd	r27, Y+9	; 0x09
    1a9c:	89 2b       	or	r24, r25
    1a9e:	8a 2b       	or	r24, r26
    1aa0:	8b 2b       	or	r24, r27
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <xStreamBufferSend+0x88>
    1aa4:	38 c0       	rjmp	.+112    	; 0x1b16 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	0e 94 24 16 	call	0x2c48	; 0x2c48 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ab4:	c4 01       	movw	r24, r8
    1ab6:	a1 df       	rcall	.-190    	; 0x19fa <xStreamBufferSpacesAvailable>
    1ab8:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1aba:	84 15       	cp	r24, r4
    1abc:	95 05       	cpc	r25, r5
    1abe:	40 f5       	brcc	.+80     	; 0x1b10 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 0e 1b 	call	0x361c	; 0x361c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1aca:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <xTaskGetCurrentTaskHandle>
    1ace:	f4 01       	movw	r30, r8
    1ad0:	93 87       	std	Z+11, r25	; 0x0b
    1ad2:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1ad8:	ae 80       	ldd	r10, Y+6	; 0x06
    1ada:	bf 80       	ldd	r11, Y+7	; 0x07
    1adc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ade:	d9 84       	ldd	r13, Y+9	; 0x09
    1ae0:	e1 2c       	mov	r14, r1
    1ae2:	f1 2c       	mov	r15, r1
    1ae4:	00 e0       	ldi	r16, 0x00	; 0
    1ae6:	10 e0       	ldi	r17, 0x00	; 0
    1ae8:	98 01       	movw	r18, r16
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	ba 01       	movw	r22, r20
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0e 94 4d 18 	call	0x309a	; 0x309a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1af6:	f4 01       	movw	r30, r8
    1af8:	13 86       	std	Z+11, r1	; 0x0b
    1afa:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1afc:	be 01       	movw	r22, r28
    1afe:	6a 5f       	subi	r22, 0xFA	; 250
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <xTaskCheckForTimeOut>
    1b0a:	88 23       	and	r24, r24
    1b0c:	81 f2       	breq	.-96     	; 0x1aae <xStreamBufferSend+0x90>
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
                    break;
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1b16:	61 2c       	mov	r6, r1
    1b18:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1b1a:	61 14       	cp	r6, r1
    1b1c:	71 04       	cpc	r7, r1
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b20:	c4 01       	movw	r24, r8
    1b22:	6b df       	rcall	.-298    	; 0x19fa <xStreamBufferSpacesAvailable>
    1b24:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b26:	82 01       	movw	r16, r4
    1b28:	93 01       	movw	r18, r6
    1b2a:	a1 01       	movw	r20, r2
    1b2c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b2e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b30:	c4 01       	movw	r24, r8
    1b32:	3c de       	rcall	.-904    	; 0x17ac <prvWriteMessageToBuffer>
    1b34:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1b36:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b38:	e9 f0       	breq	.+58     	; 0x1b74 <xStreamBufferSend+0x156>
    1b3a:	c4 01       	movw	r24, r8
    1b3c:	cb dd       	rcall	.-1130   	; 0x16d4 <prvBytesInBuffer>
    1b3e:	f4 01       	movw	r30, r8
    1b40:	26 81       	ldd	r18, Z+6	; 0x06
    1b42:	37 81       	ldd	r19, Z+7	; 0x07
    1b44:	82 17       	cp	r24, r18
    1b46:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1b48:	a8 f0       	brcs	.+42     	; 0x1b74 <xStreamBufferSend+0x156>
    1b4a:	91 d3       	rcall	.+1826   	; 0x226e <vTaskSuspendAll>
    1b4c:	f4 01       	movw	r30, r8
    1b4e:	80 85       	ldd	r24, Z+8	; 0x08
    1b50:	91 85       	ldd	r25, Z+9	; 0x09
    1b52:	89 2b       	or	r24, r25
    1b54:	71 f0       	breq	.+28     	; 0x1b72 <xStreamBufferSend+0x154>
    1b56:	80 85       	ldd	r24, Z+8	; 0x08
    1b58:	91 85       	ldd	r25, Z+9	; 0x09
    1b5a:	e1 2c       	mov	r14, r1
    1b5c:	f1 2c       	mov	r15, r1
    1b5e:	00 e0       	ldi	r16, 0x00	; 0
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	a9 01       	movw	r20, r18
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskGenericNotify>
    1b6c:	f4 01       	movw	r30, r8
    1b6e:	11 86       	std	Z+9, r1	; 0x09
    1b70:	10 86       	std	Z+8, r1	; 0x08
    1b72:	bd d4       	rcall	.+2426   	; 0x24ee <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1b74:	c6 01       	movw	r24, r12
    1b76:	2b 96       	adiw	r28, 0x0b	; 11
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ff 90       	pop	r15
    1b8c:	ef 90       	pop	r14
    1b8e:	df 90       	pop	r13
    1b90:	cf 90       	pop	r12
    1b92:	bf 90       	pop	r11
    1b94:	af 90       	pop	r10
    1b96:	9f 90       	pop	r9
    1b98:	8f 90       	pop	r8
    1b9a:	7f 90       	pop	r7
    1b9c:	6f 90       	pop	r6
    1b9e:	5f 90       	pop	r5
    1ba0:	4f 90       	pop	r4
    1ba2:	3f 90       	pop	r3
    1ba4:	2f 90       	pop	r2
    1ba6:	08 95       	ret

00001ba8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	7b 01       	movw	r14, r22
    1bc0:	5a 01       	movw	r10, r20
    1bc2:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc6:	80 ff       	sbrs	r24, 0
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1bca:	8a 01       	movw	r16, r20
    1bcc:	0e 5f       	subi	r16, 0xFE	; 254
    1bce:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1bd2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	11 df       	rcall	.-478    	; 0x19fa <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1bd8:	9c 01       	movw	r18, r24
    1bda:	a5 01       	movw	r20, r10
    1bdc:	b7 01       	movw	r22, r14
    1bde:	ce 01       	movw	r24, r28
    1be0:	e5 dd       	rcall	.-1078   	; 0x17ac <prvWriteMessageToBuffer>
    1be2:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1be4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1be6:	c1 f0       	breq	.+48     	; 0x1c18 <xStreamBufferSendFromISR+0x70>
    1be8:	ce 01       	movw	r24, r28
    1bea:	74 dd       	rcall	.-1304   	; 0x16d4 <prvBytesInBuffer>
    1bec:	2e 81       	ldd	r18, Y+6	; 0x06
    1bee:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf0:	82 17       	cp	r24, r18
    1bf2:	93 07       	cpc	r25, r19
    1bf4:	88 f0       	brcs	.+34     	; 0x1c18 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1bf6:	88 85       	ldd	r24, Y+8	; 0x08
    1bf8:	99 85       	ldd	r25, Y+9	; 0x09
    1bfa:	89 2b       	or	r24, r25
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <xStreamBufferSendFromISR+0x70>
    1bfe:	88 85       	ldd	r24, Y+8	; 0x08
    1c00:	99 85       	ldd	r25, Y+9	; 0x09
    1c02:	e1 2c       	mov	r14, r1
    1c04:	f1 2c       	mov	r15, r1
    1c06:	00 e0       	ldi	r16, 0x00	; 0
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	a9 01       	movw	r20, r18
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <xTaskGenericNotifyFromISR>
    1c14:	19 86       	std	Y+9, r1	; 0x09
    1c16:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1c18:	c5 01       	movw	r24, r10
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	bf 90       	pop	r11
    1c2c:	af 90       	pop	r10
    1c2e:	08 95       	ret

00001c30 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1c30:	4f 92       	push	r4
    1c32:	5f 92       	push	r5
    1c34:	6f 92       	push	r6
    1c36:	7f 92       	push	r7
    1c38:	8f 92       	push	r8
    1c3a:	9f 92       	push	r9
    1c3c:	af 92       	push	r10
    1c3e:	bf 92       	push	r11
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	2b 01       	movw	r4, r22
    1c54:	3a 01       	movw	r6, r20
    1c56:	58 01       	movw	r10, r16
    1c58:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c5c:	80 ff       	sbrs	r24, 0
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c60:	68 94       	set
    1c62:	88 24       	eor	r8, r8
    1c64:	81 f8       	bld	r8, 1
    1c66:	91 2c       	mov	r9, r1
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1c6a:	81 2c       	mov	r8, r1
    1c6c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c6e:	a1 14       	cp	r10, r1
    1c70:	b1 04       	cpc	r11, r1
    1c72:	c1 04       	cpc	r12, r1
    1c74:	d1 04       	cpc	r13, r1
    1c76:	41 f1       	breq	.+80     	; 0x1cc8 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c7e:	ce 01       	movw	r24, r28
    1c80:	29 dd       	rcall	.-1454   	; 0x16d4 <prvBytesInBuffer>
    1c82:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c84:	88 16       	cp	r8, r24
    1c86:	99 06       	cpc	r9, r25
    1c88:	48 f0       	brcs	.+18     	; 0x1c9c <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 0e 1b 	call	0x361c	; 0x361c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1c94:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <xTaskGetCurrentTaskHandle>
    1c98:	99 87       	std	Y+9, r25	; 0x09
    1c9a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1ca0:	8e 14       	cp	r8, r14
    1ca2:	9f 04       	cpc	r9, r15
    1ca4:	a0 f0       	brcs	.+40     	; 0x1cce <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1ca6:	e1 2c       	mov	r14, r1
    1ca8:	f1 2c       	mov	r15, r1
    1caa:	00 e0       	ldi	r16, 0x00	; 0
    1cac:	10 e0       	ldi	r17, 0x00	; 0
    1cae:	98 01       	movw	r18, r16
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	ba 01       	movw	r22, r20
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	0e 94 4d 18 	call	0x309a	; 0x309a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1cbc:	19 86       	std	Y+9, r1	; 0x09
    1cbe:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	08 dd       	rcall	.-1520   	; 0x16d4 <prvBytesInBuffer>
    1cc4:	7c 01       	movw	r14, r24
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1cc8:	ce 01       	movw	r24, r28
    1cca:	04 dd       	rcall	.-1528   	; 0x16d4 <prvBytesInBuffer>
    1ccc:	7c 01       	movw	r14, r24
    1cce:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1cd0:	9f 04       	cpc	r9, r15
    1cd2:	e8 f4       	brcc	.+58     	; 0x1d0e <xStreamBufferReceive+0xde>
    1cd4:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1cd6:	97 01       	movw	r18, r14
    1cd8:	a3 01       	movw	r20, r6
    1cda:	b2 01       	movw	r22, r4
    1cdc:	ce 01       	movw	r24, r28
    1cde:	f8 dd       	rcall	.-1040   	; 0x18d0 <prvReadMessageFromBuffer>
    1ce0:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1ce2:	89 2b       	or	r24, r25
    1ce4:	b1 f0       	breq	.+44     	; 0x1d12 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1ce6:	c3 d2       	rcall	.+1414   	; 0x226e <vTaskSuspendAll>
    1ce8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cec:	89 2b       	or	r24, r25
    1cee:	69 f0       	breq	.+26     	; 0x1d0a <xStreamBufferReceive+0xda>
    1cf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cf4:	e1 2c       	mov	r14, r1
    1cf6:	f1 2c       	mov	r15, r1
    1cf8:	00 e0       	ldi	r16, 0x00	; 0
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	a9 01       	movw	r20, r18
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskGenericNotify>
    1d06:	1b 86       	std	Y+11, r1	; 0x0b
    1d08:	1a 86       	std	Y+10, r1	; 0x0a
    1d0a:	f1 d3       	rcall	.+2018   	; 0x24ee <xTaskResumeAll>
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <xStreamBufferReceive+0xe2>
    1d0e:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1d10:	d1 2c       	mov	r13, r1
    1d12:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	7f 90       	pop	r7
    1d2e:	6f 90       	pop	r6
    1d30:	5f 90       	pop	r5
    1d32:	4f 90       	pop	r4
    1d34:	08 95       	ret

00001d36 <prvResetNextTaskUnblockTime>:
    1d36:	e0 91 51 16 	lds	r30, 0x1651	; 0x801651 <pxDelayedTaskList>
    1d3a:	f0 91 52 16 	lds	r31, 0x1652	; 0x801652 <pxDelayedTaskList+0x1>
    1d3e:	80 81       	ld	r24, Z
    1d40:	81 11       	cpse	r24, r1
    1d42:	0c c0       	rjmp	.+24     	; 0x1d5c <prvResetNextTaskUnblockTime+0x26>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	dc 01       	movw	r26, r24
    1d4a:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <xNextTaskUnblockTime>
    1d4e:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <xNextTaskUnblockTime+0x1>
    1d52:	a0 93 1d 16 	sts	0x161D, r26	; 0x80161d <xNextTaskUnblockTime+0x2>
    1d56:	b0 93 1e 16 	sts	0x161E, r27	; 0x80161e <xNextTaskUnblockTime+0x3>
    1d5a:	08 95       	ret
    1d5c:	e0 91 51 16 	lds	r30, 0x1651	; 0x801651 <pxDelayedTaskList>
    1d60:	f0 91 52 16 	lds	r31, 0x1652	; 0x801652 <pxDelayedTaskList+0x1>
    1d64:	07 80       	ldd	r0, Z+7	; 0x07
    1d66:	f0 85       	ldd	r31, Z+8	; 0x08
    1d68:	e0 2d       	mov	r30, r0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	a2 81       	ldd	r26, Z+2	; 0x02
    1d70:	b3 81       	ldd	r27, Z+3	; 0x03
    1d72:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <xNextTaskUnblockTime>
    1d76:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <xNextTaskUnblockTime+0x1>
    1d7a:	a0 93 1d 16 	sts	0x161D, r26	; 0x80161d <xNextTaskUnblockTime+0x2>
    1d7e:	b0 93 1e 16 	sts	0x161E, r27	; 0x80161e <xNextTaskUnblockTime+0x3>
    1d82:	08 95       	ret

00001d84 <prvDeleteTCB>:
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
    1d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8e:	0e 94 00 06 	call	0xc00	; 0xc00 <vPortFree>
    1d92:	ce 01       	movw	r24, r28
    1d94:	0e 94 00 06 	call	0xc00	; 0xc00 <vPortFree>
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <prvInitialiseNewTask>:
    1d9e:	4f 92       	push	r4
    1da0:	5f 92       	push	r5
    1da2:	6f 92       	push	r6
    1da4:	7f 92       	push	r7
    1da6:	8f 92       	push	r8
    1da8:	9f 92       	push	r9
    1daa:	af 92       	push	r10
    1dac:	bf 92       	push	r11
    1dae:	cf 92       	push	r12
    1db0:	df 92       	push	r13
    1db2:	ef 92       	push	r14
    1db4:	ff 92       	push	r15
    1db6:	0f 93       	push	r16
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	2c 01       	movw	r4, r24
    1dbe:	5b 01       	movw	r10, r22
    1dc0:	4a 01       	movw	r8, r20
    1dc2:	39 01       	movw	r6, r18
    1dc4:	e6 01       	movw	r28, r12
    1dc6:	65 ea       	ldi	r22, 0xA5	; 165
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dce:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <memset>
    1dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd6:	21 e0       	ldi	r18, 0x01	; 1
    1dd8:	82 1a       	sub	r8, r18
    1dda:	91 08       	sbc	r9, r1
    1ddc:	88 0e       	add	r8, r24
    1dde:	99 1e       	adc	r9, r25
    1de0:	a1 14       	cp	r10, r1
    1de2:	b1 04       	cpc	r11, r1
    1de4:	89 f4       	brne	.+34     	; 0x1e08 <prvInitialiseNewTask+0x6a>
    1de6:	15 c0       	rjmp	.+42     	; 0x1e12 <prvInitialiseNewTask+0x74>
    1de8:	82 2f       	mov	r24, r18
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	f5 01       	movw	r30, r10
    1dee:	e8 0f       	add	r30, r24
    1df0:	f9 1f       	adc	r31, r25
    1df2:	30 81       	ld	r19, Z
    1df4:	de 01       	movw	r26, r28
    1df6:	a8 0f       	add	r26, r24
    1df8:	b9 1f       	adc	r27, r25
    1dfa:	5d 96       	adiw	r26, 0x1d	; 29
    1dfc:	3c 93       	st	X, r19
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 23       	and	r24, r24
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <prvInitialiseNewTask+0x70>
    1e04:	2f 5f       	subi	r18, 0xFF	; 255
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <prvInitialiseNewTask+0x6c>
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	20 31       	cpi	r18, 0x10	; 16
    1e0c:	68 f3       	brcs	.-38     	; 0x1de8 <prvInitialiseNewTask+0x4a>
    1e0e:	1c a6       	std	Y+44, r1	; 0x2c
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <prvInitialiseNewTask+0x76>
    1e12:	1d 8e       	std	Y+29, r1	; 0x1d
    1e14:	0a 30       	cpi	r16, 0x0A	; 10
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <prvInitialiseNewTask+0x7c>
    1e18:	09 e0       	ldi	r16, 0x09	; 9
    1e1a:	0a 8f       	std	Y+26, r16	; 0x1a
    1e1c:	0d a7       	std	Y+45, r16	; 0x2d
    1e1e:	1e a6       	std	Y+46, r1	; 0x2e
    1e20:	ce 01       	movw	r24, r28
    1e22:	02 96       	adiw	r24, 0x02	; 2
    1e24:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialiseItem>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 96       	adiw	r24, 0x0e	; 14
    1e2c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialiseItem>
    1e30:	db 87       	std	Y+11, r29	; 0x0b
    1e32:	ca 87       	std	Y+10, r28	; 0x0a
    1e34:	8a e0       	ldi	r24, 0x0A	; 10
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e0       	ldi	r26, 0x00	; 0
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	80 1b       	sub	r24, r16
    1e3e:	91 09       	sbc	r25, r1
    1e40:	a1 09       	sbc	r26, r1
    1e42:	b1 09       	sbc	r27, r1
    1e44:	8e 87       	std	Y+14, r24	; 0x0e
    1e46:	9f 87       	std	Y+15, r25	; 0x0f
    1e48:	a8 8b       	std	Y+16, r26	; 0x10
    1e4a:	b9 8b       	std	Y+17, r27	; 0x11
    1e4c:	df 8b       	std	Y+23, r29	; 0x17
    1e4e:	ce 8b       	std	Y+22, r28	; 0x16
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	fe 01       	movw	r30, r28
    1e54:	bf 96       	adiw	r30, 0x2f	; 47
    1e56:	df 01       	movw	r26, r30
    1e58:	1d 92       	st	X+, r1
    1e5a:	8a 95       	dec	r24
    1e5c:	e9 f7       	brne	.-6      	; 0x1e58 <prvInitialiseNewTask+0xba>
    1e5e:	1b aa       	std	Y+51, r1	; 0x33
    1e60:	a3 01       	movw	r20, r6
    1e62:	b2 01       	movw	r22, r4
    1e64:	c4 01       	movw	r24, r8
    1e66:	0e 94 c2 06 	call	0xd84	; 0xd84 <pxPortInitialiseStack>
    1e6a:	99 83       	std	Y+1, r25	; 0x01
    1e6c:	88 83       	st	Y, r24
    1e6e:	e1 14       	cp	r14, r1
    1e70:	f1 04       	cpc	r15, r1
    1e72:	19 f0       	breq	.+6      	; 0x1e7a <prvInitialiseNewTask+0xdc>
    1e74:	f7 01       	movw	r30, r14
    1e76:	d1 83       	std	Z+1, r29	; 0x01
    1e78:	c0 83       	st	Z, r28
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	df 90       	pop	r13
    1e86:	cf 90       	pop	r12
    1e88:	bf 90       	pop	r11
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	7f 90       	pop	r7
    1e92:	6f 90       	pop	r6
    1e94:	5f 90       	pop	r5
    1e96:	4f 90       	pop	r4
    1e98:	08 95       	ret

00001e9a <prvInitialiseTaskLists>:
    1e9a:	cf 93       	push	r28
    1e9c:	c0 e0       	ldi	r28, 0x00	; 0
    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <prvInitialiseTaskLists+0x18>
    1ea0:	2b e0       	ldi	r18, 0x0B	; 11
    1ea2:	c2 9f       	mul	r28, r18
    1ea4:	c0 01       	movw	r24, r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	87 59       	subi	r24, 0x97	; 151
    1eaa:	99 4e       	sbci	r25, 0xE9	; 233
    1eac:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    1eb0:	cf 5f       	subi	r28, 0xFF	; 255
    1eb2:	ca 30       	cpi	r28, 0x0A	; 10
    1eb4:	a8 f3       	brcs	.-22     	; 0x1ea0 <prvInitialiseTaskLists+0x6>
    1eb6:	8e e5       	ldi	r24, 0x5E	; 94
    1eb8:	96 e1       	ldi	r25, 0x16	; 22
    1eba:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    1ebe:	83 e5       	ldi	r24, 0x53	; 83
    1ec0:	96 e1       	ldi	r25, 0x16	; 22
    1ec2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    1ec6:	84 e4       	ldi	r24, 0x44	; 68
    1ec8:	96 e1       	ldi	r25, 0x16	; 22
    1eca:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    1ece:	89 e3       	ldi	r24, 0x39	; 57
    1ed0:	96 e1       	ldi	r25, 0x16	; 22
    1ed2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    1ed6:	8d e2       	ldi	r24, 0x2D	; 45
    1ed8:	96 e1       	ldi	r25, 0x16	; 22
    1eda:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    1ede:	8e e5       	ldi	r24, 0x5E	; 94
    1ee0:	96 e1       	ldi	r25, 0x16	; 22
    1ee2:	90 93 52 16 	sts	0x1652, r25	; 0x801652 <pxDelayedTaskList+0x1>
    1ee6:	80 93 51 16 	sts	0x1651, r24	; 0x801651 <pxDelayedTaskList>
    1eea:	83 e5       	ldi	r24, 0x53	; 83
    1eec:	96 e1       	ldi	r25, 0x16	; 22
    1eee:	90 93 50 16 	sts	0x1650, r25	; 0x801650 <pxOverflowDelayedTaskList+0x1>
    1ef2:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <pxOverflowDelayedTaskList>
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <prvAddNewTaskToReadyList>:
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	ec 01       	movw	r28, r24
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	0f 92       	push	r0
    1f06:	80 91 2c 16 	lds	r24, 0x162C	; 0x80162c <uxCurrentNumberOfTasks>
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	80 93 2c 16 	sts	0x162C, r24	; 0x80162c <uxCurrentNumberOfTasks>
    1f10:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    1f14:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    1f18:	89 2b       	or	r24, r25
    1f1a:	51 f4       	brne	.+20     	; 0x1f30 <prvAddNewTaskToReadyList+0x36>
    1f1c:	d0 93 d8 16 	sts	0x16D8, r29	; 0x8016d8 <pxCurrentTCB+0x1>
    1f20:	c0 93 d7 16 	sts	0x16D7, r28	; 0x8016d7 <pxCurrentTCB>
    1f24:	80 91 2c 16 	lds	r24, 0x162C	; 0x80162c <uxCurrentNumberOfTasks>
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 f4       	brne	.+36     	; 0x1f50 <prvAddNewTaskToReadyList+0x56>
    1f2c:	b6 df       	rcall	.-148    	; 0x1e9a <prvInitialiseTaskLists>
    1f2e:	10 c0       	rjmp	.+32     	; 0x1f50 <prvAddNewTaskToReadyList+0x56>
    1f30:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <xSchedulerRunning>
    1f34:	81 11       	cpse	r24, r1
    1f36:	0c c0       	rjmp	.+24     	; 0x1f50 <prvAddNewTaskToReadyList+0x56>
    1f38:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    1f3c:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    1f40:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f44:	89 17       	cp	r24, r25
    1f46:	20 f0       	brcs	.+8      	; 0x1f50 <prvAddNewTaskToReadyList+0x56>
    1f48:	d0 93 d8 16 	sts	0x16D8, r29	; 0x8016d8 <pxCurrentTCB+0x1>
    1f4c:	c0 93 d7 16 	sts	0x16D7, r28	; 0x8016d7 <pxCurrentTCB>
    1f50:	80 91 1f 16 	lds	r24, 0x161F	; 0x80161f <uxTaskNumber>
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	80 93 1f 16 	sts	0x161F, r24	; 0x80161f <uxTaskNumber>
    1f5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f5c:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    1f60:	8e 17       	cp	r24, r30
    1f62:	10 f4       	brcc	.+4      	; 0x1f68 <prvAddNewTaskToReadyList+0x6e>
    1f64:	e0 93 27 16 	sts	0x1627, r30	; 0x801627 <uxTopReadyPriority>
    1f68:	8b e0       	ldi	r24, 0x0B	; 11
    1f6a:	8e 9f       	mul	r24, r30
    1f6c:	f0 01       	movw	r30, r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	e7 59       	subi	r30, 0x97	; 151
    1f72:	f9 4e       	sbci	r31, 0xE9	; 233
    1f74:	01 80       	ldd	r0, Z+1	; 0x01
    1f76:	f2 81       	ldd	r31, Z+2	; 0x02
    1f78:	e0 2d       	mov	r30, r0
    1f7a:	ff 83       	std	Y+7, r31	; 0x07
    1f7c:	ee 83       	std	Y+6, r30	; 0x06
    1f7e:	26 81       	ldd	r18, Z+6	; 0x06
    1f80:	37 81       	ldd	r19, Z+7	; 0x07
    1f82:	39 87       	std	Y+9, r19	; 0x09
    1f84:	28 87       	std	Y+8, r18	; 0x08
    1f86:	a6 81       	ldd	r26, Z+6	; 0x06
    1f88:	b7 81       	ldd	r27, Z+7	; 0x07
    1f8a:	9e 01       	movw	r18, r28
    1f8c:	2e 5f       	subi	r18, 0xFE	; 254
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	15 96       	adiw	r26, 0x05	; 5
    1f92:	3c 93       	st	X, r19
    1f94:	2e 93       	st	-X, r18
    1f96:	14 97       	sbiw	r26, 0x04	; 4
    1f98:	37 83       	std	Z+7, r19	; 0x07
    1f9a:	26 83       	std	Z+6, r18	; 0x06
    1f9c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f9e:	8e 9f       	mul	r24, r30
    1fa0:	f0 01       	movw	r30, r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	e7 59       	subi	r30, 0x97	; 151
    1fa6:	f9 4e       	sbci	r31, 0xE9	; 233
    1fa8:	fd 87       	std	Y+13, r31	; 0x0d
    1faa:	ec 87       	std	Y+12, r30	; 0x0c
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 5f       	subi	r24, 0xFF	; 255
    1fb0:	80 83       	st	Z, r24
    1fb2:	0f 90       	pop	r0
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <xSchedulerRunning>
    1fba:	88 23       	and	r24, r24
    1fbc:	51 f0       	breq	.+20     	; 0x1fd2 <prvAddNewTaskToReadyList+0xd8>
    1fbe:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    1fc2:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    1fc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fca:	98 17       	cp	r25, r24
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <prvAddNewTaskToReadyList+0xd8>
    1fce:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <prvCheckTasksWaitingTermination>:
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	1b c0       	rjmp	.+54     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	0f 92       	push	r0
    1fe4:	e0 91 40 16 	lds	r30, 0x1640	; 0x801640 <xTasksWaitingTermination+0x7>
    1fe8:	f0 91 41 16 	lds	r31, 0x1641	; 0x801641 <xTasksWaitingTermination+0x8>
    1fec:	c0 85       	ldd	r28, Z+8	; 0x08
    1fee:	d1 85       	ldd	r29, Z+9	; 0x09
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	02 96       	adiw	r24, 0x02	; 2
    1ff4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    1ff8:	80 91 2c 16 	lds	r24, 0x162C	; 0x80162c <uxCurrentNumberOfTasks>
    1ffc:	81 50       	subi	r24, 0x01	; 1
    1ffe:	80 93 2c 16 	sts	0x162C, r24	; 0x80162c <uxCurrentNumberOfTasks>
    2002:	80 91 38 16 	lds	r24, 0x1638	; 0x801638 <uxDeletedTasksWaitingCleanUp>
    2006:	81 50       	subi	r24, 0x01	; 1
    2008:	80 93 38 16 	sts	0x1638, r24	; 0x801638 <uxDeletedTasksWaitingCleanUp>
    200c:	0f 90       	pop	r0
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	ce 01       	movw	r24, r28
    2012:	b8 de       	rcall	.-656    	; 0x1d84 <prvDeleteTCB>
    2014:	80 91 38 16 	lds	r24, 0x1638	; 0x801638 <uxDeletedTasksWaitingCleanUp>
    2018:	81 11       	cpse	r24, r1
    201a:	e1 cf       	rjmp	.-62     	; 0x1fde <prvCheckTasksWaitingTermination+0x6>
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

00002022 <prvAddCurrentTaskToDelayedList>:
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	6b 01       	movw	r12, r22
    2038:	7c 01       	movw	r14, r24
    203a:	c4 2f       	mov	r28, r20
    203c:	80 90 28 16 	lds	r8, 0x1628	; 0x801628 <xTickCount>
    2040:	90 90 29 16 	lds	r9, 0x1629	; 0x801629 <xTickCount+0x1>
    2044:	a0 90 2a 16 	lds	r10, 0x162A	; 0x80162a <xTickCount+0x2>
    2048:	b0 90 2b 16 	lds	r11, 0x162B	; 0x80162b <xTickCount+0x3>
    204c:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2050:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2054:	02 96       	adiw	r24, 0x02	; 2
    2056:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    205a:	8f ef       	ldi	r24, 0xFF	; 255
    205c:	c8 16       	cp	r12, r24
    205e:	d8 06       	cpc	r13, r24
    2060:	e8 06       	cpc	r14, r24
    2062:	f8 06       	cpc	r15, r24
    2064:	b1 f5       	brne	.+108    	; 0x20d2 <prvAddCurrentTaskToDelayedList+0xb0>
    2066:	cc 23       	and	r28, r28
    2068:	a1 f1       	breq	.+104    	; 0x20d2 <prvAddCurrentTaskToDelayedList+0xb0>
    206a:	ed e2       	ldi	r30, 0x2D	; 45
    206c:	f6 e1       	ldi	r31, 0x16	; 22
    206e:	a1 81       	ldd	r26, Z+1	; 0x01
    2070:	b2 81       	ldd	r27, Z+2	; 0x02
    2072:	c0 91 d7 16 	lds	r28, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2076:	d0 91 d8 16 	lds	r29, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    207a:	bf 83       	std	Y+7, r27	; 0x07
    207c:	ae 83       	std	Y+6, r26	; 0x06
    207e:	c0 91 d7 16 	lds	r28, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2082:	d0 91 d8 16 	lds	r29, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2086:	16 96       	adiw	r26, 0x06	; 6
    2088:	8d 91       	ld	r24, X+
    208a:	9c 91       	ld	r25, X
    208c:	17 97       	sbiw	r26, 0x07	; 7
    208e:	99 87       	std	Y+9, r25	; 0x09
    2090:	88 87       	std	Y+8, r24	; 0x08
    2092:	16 96       	adiw	r26, 0x06	; 6
    2094:	cd 91       	ld	r28, X+
    2096:	dc 91       	ld	r29, X
    2098:	17 97       	sbiw	r26, 0x07	; 7
    209a:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    209e:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    20a2:	02 96       	adiw	r24, 0x02	; 2
    20a4:	9d 83       	std	Y+5, r25	; 0x05
    20a6:	8c 83       	std	Y+4, r24	; 0x04
    20a8:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    20ac:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    20b0:	02 96       	adiw	r24, 0x02	; 2
    20b2:	17 96       	adiw	r26, 0x07	; 7
    20b4:	9c 93       	st	X, r25
    20b6:	8e 93       	st	-X, r24
    20b8:	16 97       	sbiw	r26, 0x06	; 6
    20ba:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    20be:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    20c2:	1d 96       	adiw	r26, 0x0d	; 13
    20c4:	fc 93       	st	X, r31
    20c6:	ee 93       	st	-X, r30
    20c8:	1c 97       	sbiw	r26, 0x0c	; 12
    20ca:	80 81       	ld	r24, Z
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	80 83       	st	Z, r24
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <prvAddCurrentTaskToDelayedList+0x12e>
    20d2:	c8 0c       	add	r12, r8
    20d4:	d9 1c       	adc	r13, r9
    20d6:	ea 1c       	adc	r14, r10
    20d8:	fb 1c       	adc	r15, r11
    20da:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    20de:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    20e2:	c2 82       	std	Z+2, r12	; 0x02
    20e4:	d3 82       	std	Z+3, r13	; 0x03
    20e6:	e4 82       	std	Z+4, r14	; 0x04
    20e8:	f5 82       	std	Z+5, r15	; 0x05
    20ea:	c8 14       	cp	r12, r8
    20ec:	d9 04       	cpc	r13, r9
    20ee:	ea 04       	cpc	r14, r10
    20f0:	fb 04       	cpc	r15, r11
    20f2:	68 f4       	brcc	.+26     	; 0x210e <prvAddCurrentTaskToDelayedList+0xec>
    20f4:	60 91 d7 16 	lds	r22, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    20f8:	70 91 d8 16 	lds	r23, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    20fc:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <pxOverflowDelayedTaskList>
    2100:	90 91 50 16 	lds	r25, 0x1650	; 0x801650 <pxOverflowDelayedTaskList+0x1>
    2104:	6e 5f       	subi	r22, 0xFE	; 254
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	0e 94 52 06 	call	0xca4	; 0xca4 <vListInsert>
    210c:	21 c0       	rjmp	.+66     	; 0x2150 <prvAddCurrentTaskToDelayedList+0x12e>
    210e:	60 91 d7 16 	lds	r22, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2112:	70 91 d8 16 	lds	r23, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2116:	80 91 51 16 	lds	r24, 0x1651	; 0x801651 <pxDelayedTaskList>
    211a:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <pxDelayedTaskList+0x1>
    211e:	6e 5f       	subi	r22, 0xFE	; 254
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	0e 94 52 06 	call	0xca4	; 0xca4 <vListInsert>
    2126:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <xNextTaskUnblockTime>
    212a:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <xNextTaskUnblockTime+0x1>
    212e:	a0 91 1d 16 	lds	r26, 0x161D	; 0x80161d <xNextTaskUnblockTime+0x2>
    2132:	b0 91 1e 16 	lds	r27, 0x161E	; 0x80161e <xNextTaskUnblockTime+0x3>
    2136:	c8 16       	cp	r12, r24
    2138:	d9 06       	cpc	r13, r25
    213a:	ea 06       	cpc	r14, r26
    213c:	fb 06       	cpc	r15, r27
    213e:	40 f4       	brcc	.+16     	; 0x2150 <prvAddCurrentTaskToDelayedList+0x12e>
    2140:	c0 92 1b 16 	sts	0x161B, r12	; 0x80161b <xNextTaskUnblockTime>
    2144:	d0 92 1c 16 	sts	0x161C, r13	; 0x80161c <xNextTaskUnblockTime+0x1>
    2148:	e0 92 1d 16 	sts	0x161D, r14	; 0x80161d <xNextTaskUnblockTime+0x2>
    214c:	f0 92 1e 16 	sts	0x161E, r15	; 0x80161e <xNextTaskUnblockTime+0x3>
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	cf 90       	pop	r12
    215c:	bf 90       	pop	r11
    215e:	af 90       	pop	r10
    2160:	9f 90       	pop	r9
    2162:	8f 90       	pop	r8
    2164:	08 95       	ret

00002166 <xTaskCreate>:
    2166:	2f 92       	push	r2
    2168:	3f 92       	push	r3
    216a:	4f 92       	push	r4
    216c:	5f 92       	push	r5
    216e:	6f 92       	push	r6
    2170:	7f 92       	push	r7
    2172:	8f 92       	push	r8
    2174:	9f 92       	push	r9
    2176:	af 92       	push	r10
    2178:	bf 92       	push	r11
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	3c 01       	movw	r6, r24
    218a:	1b 01       	movw	r2, r22
    218c:	4a 01       	movw	r8, r20
    218e:	29 01       	movw	r4, r18
    2190:	ca 01       	movw	r24, r20
    2192:	0e 94 57 05 	call	0xaae	; 0xaae <pvPortMalloc>
    2196:	6c 01       	movw	r12, r24
    2198:	89 2b       	or	r24, r25
    219a:	71 f0       	breq	.+28     	; 0x21b8 <xTaskCreate+0x52>
    219c:	84 e3       	ldi	r24, 0x34	; 52
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 57 05 	call	0xaae	; 0xaae <pvPortMalloc>
    21a4:	ec 01       	movw	r28, r24
    21a6:	89 2b       	or	r24, r25
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <xTaskCreate+0x4a>
    21aa:	dc 8e       	std	Y+28, r13	; 0x1c
    21ac:	cb 8e       	std	Y+27, r12	; 0x1b
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <xTaskCreate+0x56>
    21b0:	c6 01       	movw	r24, r12
    21b2:	0e 94 00 06 	call	0xc00	; 0xc00 <vPortFree>
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <xTaskCreate+0x56>
    21b8:	c0 e0       	ldi	r28, 0x00	; 0
    21ba:	d0 e0       	ldi	r29, 0x00	; 0
    21bc:	20 97       	sbiw	r28, 0x00	; 0
    21be:	61 f0       	breq	.+24     	; 0x21d8 <xTaskCreate+0x72>
    21c0:	a1 2c       	mov	r10, r1
    21c2:	b1 2c       	mov	r11, r1
    21c4:	6e 01       	movw	r12, r28
    21c6:	92 01       	movw	r18, r4
    21c8:	a4 01       	movw	r20, r8
    21ca:	b1 01       	movw	r22, r2
    21cc:	c3 01       	movw	r24, r6
    21ce:	e7 dd       	rcall	.-1074   	; 0x1d9e <prvInitialiseNewTask>
    21d0:	ce 01       	movw	r24, r28
    21d2:	93 de       	rcall	.-730    	; 0x1efa <prvAddNewTaskToReadyList>
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <xTaskCreate+0x74>
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	9f 90       	pop	r9
    21ee:	8f 90       	pop	r8
    21f0:	7f 90       	pop	r7
    21f2:	6f 90       	pop	r6
    21f4:	5f 90       	pop	r5
    21f6:	4f 90       	pop	r4
    21f8:	3f 90       	pop	r3
    21fa:	2f 90       	pop	r2
    21fc:	08 95       	ret

000021fe <vTaskStartScheduler>:
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	0f 2e       	mov	r0, r31
    2206:	f9 e1       	ldi	r31, 0x19	; 25
    2208:	ef 2e       	mov	r14, r31
    220a:	f6 e1       	ldi	r31, 0x16	; 22
    220c:	ff 2e       	mov	r15, r31
    220e:	f0 2d       	mov	r31, r0
    2210:	00 e0       	ldi	r16, 0x00	; 0
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 ec       	ldi	r20, 0xC0	; 192
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	6f e5       	ldi	r22, 0x5F	; 95
    221c:	73 e0       	ldi	r23, 0x03	; 3
    221e:	8d ec       	ldi	r24, 0xCD	; 205
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a1 df       	rcall	.-190    	; 0x2166 <xTaskCreate>
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	11 f4       	brne	.+4      	; 0x222c <__stack+0x2d>
    2228:	0e 94 b2 1b 	call	0x3764	; 0x3764 <xTimerCreateTimerTask>
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	c9 f4       	brne	.+50     	; 0x2262 <__stack+0x63>
    2230:	f8 94       	cli
    2232:	8f ef       	ldi	r24, 0xFF	; 255
    2234:	9f ef       	ldi	r25, 0xFF	; 255
    2236:	dc 01       	movw	r26, r24
    2238:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <xNextTaskUnblockTime>
    223c:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <xNextTaskUnblockTime+0x1>
    2240:	a0 93 1d 16 	sts	0x161D, r26	; 0x80161d <xNextTaskUnblockTime+0x2>
    2244:	b0 93 1e 16 	sts	0x161E, r27	; 0x80161e <xNextTaskUnblockTime+0x3>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 26 16 	sts	0x1626, r24	; 0x801626 <xSchedulerRunning>
    224e:	10 92 28 16 	sts	0x1628, r1	; 0x801628 <xTickCount>
    2252:	10 92 29 16 	sts	0x1629, r1	; 0x801629 <xTickCount+0x1>
    2256:	10 92 2a 16 	sts	0x162A, r1	; 0x80162a <xTickCount+0x2>
    225a:	10 92 2b 16 	sts	0x162B, r1	; 0x80162b <xTickCount+0x3>
    225e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <xPortStartScheduler>
    2262:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2266:	0f 91       	pop	r16
    2268:	ff 90       	pop	r15
    226a:	ef 90       	pop	r14
    226c:	08 95       	ret

0000226e <vTaskSuspendAll>:
    226e:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    2272:	8f 5f       	subi	r24, 0xFF	; 255
    2274:	80 93 18 16 	sts	0x1618, r24	; 0x801618 <uxSchedulerSuspended>
    2278:	08 95       	ret

0000227a <xTaskGetTickCount>:
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	0f 92       	push	r0
    2280:	60 91 28 16 	lds	r22, 0x1628	; 0x801628 <xTickCount>
    2284:	70 91 29 16 	lds	r23, 0x1629	; 0x801629 <xTickCount+0x1>
    2288:	80 91 2a 16 	lds	r24, 0x162A	; 0x80162a <xTickCount+0x2>
    228c:	90 91 2b 16 	lds	r25, 0x162B	; 0x80162b <xTickCount+0x3>
    2290:	0f 90       	pop	r0
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	08 95       	ret

00002296 <xTaskIncrementTick>:
    2296:	cf 92       	push	r12
    2298:	df 92       	push	r13
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    22a6:	81 11       	cpse	r24, r1
    22a8:	05 c1       	rjmp	.+522    	; 0x24b4 <xTaskIncrementTick+0x21e>
    22aa:	c0 90 28 16 	lds	r12, 0x1628	; 0x801628 <xTickCount>
    22ae:	d0 90 29 16 	lds	r13, 0x1629	; 0x801629 <xTickCount+0x1>
    22b2:	e0 90 2a 16 	lds	r14, 0x162A	; 0x80162a <xTickCount+0x2>
    22b6:	f0 90 2b 16 	lds	r15, 0x162B	; 0x80162b <xTickCount+0x3>
    22ba:	8f ef       	ldi	r24, 0xFF	; 255
    22bc:	c8 1a       	sub	r12, r24
    22be:	d8 0a       	sbc	r13, r24
    22c0:	e8 0a       	sbc	r14, r24
    22c2:	f8 0a       	sbc	r15, r24
    22c4:	c0 92 28 16 	sts	0x1628, r12	; 0x801628 <xTickCount>
    22c8:	d0 92 29 16 	sts	0x1629, r13	; 0x801629 <xTickCount+0x1>
    22cc:	e0 92 2a 16 	sts	0x162A, r14	; 0x80162a <xTickCount+0x2>
    22d0:	f0 92 2b 16 	sts	0x162B, r15	; 0x80162b <xTickCount+0x3>
    22d4:	c1 14       	cp	r12, r1
    22d6:	d1 04       	cpc	r13, r1
    22d8:	e1 04       	cpc	r14, r1
    22da:	f1 04       	cpc	r15, r1
    22dc:	b1 f4       	brne	.+44     	; 0x230a <xTaskIncrementTick+0x74>
    22de:	80 91 51 16 	lds	r24, 0x1651	; 0x801651 <pxDelayedTaskList>
    22e2:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <pxDelayedTaskList+0x1>
    22e6:	20 91 4f 16 	lds	r18, 0x164F	; 0x80164f <pxOverflowDelayedTaskList>
    22ea:	30 91 50 16 	lds	r19, 0x1650	; 0x801650 <pxOverflowDelayedTaskList+0x1>
    22ee:	30 93 52 16 	sts	0x1652, r19	; 0x801652 <pxDelayedTaskList+0x1>
    22f2:	20 93 51 16 	sts	0x1651, r18	; 0x801651 <pxDelayedTaskList>
    22f6:	90 93 50 16 	sts	0x1650, r25	; 0x801650 <pxOverflowDelayedTaskList+0x1>
    22fa:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <pxOverflowDelayedTaskList>
    22fe:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <xNumOfOverflows>
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	80 93 20 16 	sts	0x1620, r24	; 0x801620 <xNumOfOverflows>
    2308:	16 dd       	rcall	.-1492   	; 0x1d36 <prvResetNextTaskUnblockTime>
    230a:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <xNextTaskUnblockTime>
    230e:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <xNextTaskUnblockTime+0x1>
    2312:	a0 91 1d 16 	lds	r26, 0x161D	; 0x80161d <xNextTaskUnblockTime+0x2>
    2316:	b0 91 1e 16 	lds	r27, 0x161E	; 0x80161e <xNextTaskUnblockTime+0x3>
    231a:	c8 16       	cp	r12, r24
    231c:	d9 06       	cpc	r13, r25
    231e:	ea 06       	cpc	r14, r26
    2320:	fb 06       	cpc	r15, r27
    2322:	20 f4       	brcc	.+8      	; 0x232c <xTaskIncrementTick+0x96>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	b2 c0       	rjmp	.+356    	; 0x248c <xTaskIncrementTick+0x1f6>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	01 c0       	rjmp	.+2      	; 0x232e <xTaskIncrementTick+0x98>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	e0 91 51 16 	lds	r30, 0x1651	; 0x801651 <pxDelayedTaskList>
    2332:	f0 91 52 16 	lds	r31, 0x1652	; 0x801652 <pxDelayedTaskList+0x1>
    2336:	90 81       	ld	r25, Z
    2338:	91 11       	cpse	r25, r1
    233a:	0c c0       	rjmp	.+24     	; 0x2354 <xTaskIncrementTick+0xbe>
    233c:	4f ef       	ldi	r20, 0xFF	; 255
    233e:	5f ef       	ldi	r21, 0xFF	; 255
    2340:	ba 01       	movw	r22, r20
    2342:	40 93 1b 16 	sts	0x161B, r20	; 0x80161b <xNextTaskUnblockTime>
    2346:	50 93 1c 16 	sts	0x161C, r21	; 0x80161c <xNextTaskUnblockTime+0x1>
    234a:	60 93 1d 16 	sts	0x161D, r22	; 0x80161d <xNextTaskUnblockTime+0x2>
    234e:	70 93 1e 16 	sts	0x161E, r23	; 0x80161e <xNextTaskUnblockTime+0x3>
    2352:	9c c0       	rjmp	.+312    	; 0x248c <xTaskIncrementTick+0x1f6>
    2354:	e0 91 51 16 	lds	r30, 0x1651	; 0x801651 <pxDelayedTaskList>
    2358:	f0 91 52 16 	lds	r31, 0x1652	; 0x801652 <pxDelayedTaskList+0x1>
    235c:	07 80       	ldd	r0, Z+7	; 0x07
    235e:	f0 85       	ldd	r31, Z+8	; 0x08
    2360:	e0 2d       	mov	r30, r0
    2362:	00 84       	ldd	r0, Z+8	; 0x08
    2364:	f1 85       	ldd	r31, Z+9	; 0x09
    2366:	e0 2d       	mov	r30, r0
    2368:	42 81       	ldd	r20, Z+2	; 0x02
    236a:	53 81       	ldd	r21, Z+3	; 0x03
    236c:	64 81       	ldd	r22, Z+4	; 0x04
    236e:	75 81       	ldd	r23, Z+5	; 0x05
    2370:	c4 16       	cp	r12, r20
    2372:	d5 06       	cpc	r13, r21
    2374:	e6 06       	cpc	r14, r22
    2376:	f7 06       	cpc	r15, r23
    2378:	48 f4       	brcc	.+18     	; 0x238c <xTaskIncrementTick+0xf6>
    237a:	40 93 1b 16 	sts	0x161B, r20	; 0x80161b <xNextTaskUnblockTime>
    237e:	50 93 1c 16 	sts	0x161C, r21	; 0x80161c <xNextTaskUnblockTime+0x1>
    2382:	60 93 1d 16 	sts	0x161D, r22	; 0x80161d <xNextTaskUnblockTime+0x2>
    2386:	70 93 1e 16 	sts	0x161E, r23	; 0x80161e <xNextTaskUnblockTime+0x3>
    238a:	80 c0       	rjmp	.+256    	; 0x248c <xTaskIncrementTick+0x1f6>
    238c:	a4 85       	ldd	r26, Z+12	; 0x0c
    238e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2390:	c6 81       	ldd	r28, Z+6	; 0x06
    2392:	d7 81       	ldd	r29, Z+7	; 0x07
    2394:	20 85       	ldd	r18, Z+8	; 0x08
    2396:	31 85       	ldd	r19, Z+9	; 0x09
    2398:	3f 83       	std	Y+7, r19	; 0x07
    239a:	2e 83       	std	Y+6, r18	; 0x06
    239c:	c0 85       	ldd	r28, Z+8	; 0x08
    239e:	d1 85       	ldd	r29, Z+9	; 0x09
    23a0:	26 81       	ldd	r18, Z+6	; 0x06
    23a2:	37 81       	ldd	r19, Z+7	; 0x07
    23a4:	3d 83       	std	Y+5, r19	; 0x05
    23a6:	2c 83       	std	Y+4, r18	; 0x04
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	4d 91       	ld	r20, X+
    23ac:	5c 91       	ld	r21, X
    23ae:	12 97       	sbiw	r26, 0x02	; 2
    23b0:	9f 01       	movw	r18, r30
    23b2:	2e 5f       	subi	r18, 0xFE	; 254
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	42 17       	cp	r20, r18
    23b8:	53 07       	cpc	r21, r19
    23ba:	31 f4       	brne	.+12     	; 0x23c8 <xTaskIncrementTick+0x132>
    23bc:	40 85       	ldd	r20, Z+8	; 0x08
    23be:	51 85       	ldd	r21, Z+9	; 0x09
    23c0:	12 96       	adiw	r26, 0x02	; 2
    23c2:	5c 93       	st	X, r21
    23c4:	4e 93       	st	-X, r20
    23c6:	11 97       	sbiw	r26, 0x01	; 1
    23c8:	15 86       	std	Z+13, r1	; 0x0d
    23ca:	14 86       	std	Z+12, r1	; 0x0c
    23cc:	9c 91       	ld	r25, X
    23ce:	91 50       	subi	r25, 0x01	; 1
    23d0:	9c 93       	st	X, r25
    23d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    23d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    23d6:	10 97       	sbiw	r26, 0x00	; 0
    23d8:	09 f1       	breq	.+66     	; 0x241c <xTaskIncrementTick+0x186>
    23da:	c2 89       	ldd	r28, Z+18	; 0x12
    23dc:	d3 89       	ldd	r29, Z+19	; 0x13
    23de:	44 89       	ldd	r20, Z+20	; 0x14
    23e0:	55 89       	ldd	r21, Z+21	; 0x15
    23e2:	5f 83       	std	Y+7, r21	; 0x07
    23e4:	4e 83       	std	Y+6, r20	; 0x06
    23e6:	c4 89       	ldd	r28, Z+20	; 0x14
    23e8:	d5 89       	ldd	r29, Z+21	; 0x15
    23ea:	42 89       	ldd	r20, Z+18	; 0x12
    23ec:	53 89       	ldd	r21, Z+19	; 0x13
    23ee:	5d 83       	std	Y+5, r21	; 0x05
    23f0:	4c 83       	std	Y+4, r20	; 0x04
    23f2:	11 96       	adiw	r26, 0x01	; 1
    23f4:	6d 91       	ld	r22, X+
    23f6:	7c 91       	ld	r23, X
    23f8:	12 97       	sbiw	r26, 0x02	; 2
    23fa:	af 01       	movw	r20, r30
    23fc:	42 5f       	subi	r20, 0xF2	; 242
    23fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2400:	64 17       	cp	r22, r20
    2402:	75 07       	cpc	r23, r21
    2404:	31 f4       	brne	.+12     	; 0x2412 <xTaskIncrementTick+0x17c>
    2406:	44 89       	ldd	r20, Z+20	; 0x14
    2408:	55 89       	ldd	r21, Z+21	; 0x15
    240a:	12 96       	adiw	r26, 0x02	; 2
    240c:	5c 93       	st	X, r21
    240e:	4e 93       	st	-X, r20
    2410:	11 97       	sbiw	r26, 0x01	; 1
    2412:	11 8e       	std	Z+25, r1	; 0x19
    2414:	10 8e       	std	Z+24, r1	; 0x18
    2416:	9c 91       	ld	r25, X
    2418:	91 50       	subi	r25, 0x01	; 1
    241a:	9c 93       	st	X, r25
    241c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    241e:	90 91 27 16 	lds	r25, 0x1627	; 0x801627 <uxTopReadyPriority>
    2422:	9a 17       	cp	r25, r26
    2424:	10 f4       	brcc	.+4      	; 0x242a <xTaskIncrementTick+0x194>
    2426:	a0 93 27 16 	sts	0x1627, r26	; 0x801627 <uxTopReadyPriority>
    242a:	9b e0       	ldi	r25, 0x0B	; 11
    242c:	9a 9f       	mul	r25, r26
    242e:	d0 01       	movw	r26, r0
    2430:	11 24       	eor	r1, r1
    2432:	a7 59       	subi	r26, 0x97	; 151
    2434:	b9 4e       	sbci	r27, 0xE9	; 233
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	0d 90       	ld	r0, X+
    243a:	bc 91       	ld	r27, X
    243c:	a0 2d       	mov	r26, r0
    243e:	b7 83       	std	Z+7, r27	; 0x07
    2440:	a6 83       	std	Z+6, r26	; 0x06
    2442:	16 96       	adiw	r26, 0x06	; 6
    2444:	4d 91       	ld	r20, X+
    2446:	5c 91       	ld	r21, X
    2448:	17 97       	sbiw	r26, 0x07	; 7
    244a:	51 87       	std	Z+9, r21	; 0x09
    244c:	40 87       	std	Z+8, r20	; 0x08
    244e:	16 96       	adiw	r26, 0x06	; 6
    2450:	cd 91       	ld	r28, X+
    2452:	dc 91       	ld	r29, X
    2454:	17 97       	sbiw	r26, 0x07	; 7
    2456:	3d 83       	std	Y+5, r19	; 0x05
    2458:	2c 83       	std	Y+4, r18	; 0x04
    245a:	17 96       	adiw	r26, 0x07	; 7
    245c:	3c 93       	st	X, r19
    245e:	2e 93       	st	-X, r18
    2460:	16 97       	sbiw	r26, 0x06	; 6
    2462:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2464:	9a 9f       	mul	r25, r26
    2466:	d0 01       	movw	r26, r0
    2468:	11 24       	eor	r1, r1
    246a:	a7 59       	subi	r26, 0x97	; 151
    246c:	b9 4e       	sbci	r27, 0xE9	; 233
    246e:	b5 87       	std	Z+13, r27	; 0x0d
    2470:	a4 87       	std	Z+12, r26	; 0x0c
    2472:	9c 91       	ld	r25, X
    2474:	9f 5f       	subi	r25, 0xFF	; 255
    2476:	9c 93       	st	X, r25
    2478:	22 8d       	ldd	r18, Z+26	; 0x1a
    247a:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    247e:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2482:	92 8d       	ldd	r25, Z+26	; 0x1a
    2484:	29 17       	cp	r18, r25
    2486:	08 f0       	brcs	.+2      	; 0x248a <xTaskIncrementTick+0x1f4>
    2488:	4f cf       	rjmp	.-354    	; 0x2328 <xTaskIncrementTick+0x92>
    248a:	51 cf       	rjmp	.-350    	; 0x232e <xTaskIncrementTick+0x98>
    248c:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2490:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2494:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2496:	9b e0       	ldi	r25, 0x0B	; 11
    2498:	e9 9f       	mul	r30, r25
    249a:	f0 01       	movw	r30, r0
    249c:	11 24       	eor	r1, r1
    249e:	e7 59       	subi	r30, 0x97	; 151
    24a0:	f9 4e       	sbci	r31, 0xE9	; 233
    24a2:	90 81       	ld	r25, Z
    24a4:	92 30       	cpi	r25, 0x02	; 2
    24a6:	08 f0       	brcs	.+2      	; 0x24aa <xTaskIncrementTick+0x214>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <xYieldPending>
    24ae:	91 11       	cpse	r25, r1
    24b0:	16 c0       	rjmp	.+44     	; 0x24de <xTaskIncrementTick+0x248>
    24b2:	16 c0       	rjmp	.+44     	; 0x24e0 <xTaskIncrementTick+0x24a>
    24b4:	80 91 22 16 	lds	r24, 0x1622	; 0x801622 <xPendedTicks>
    24b8:	90 91 23 16 	lds	r25, 0x1623	; 0x801623 <xPendedTicks+0x1>
    24bc:	a0 91 24 16 	lds	r26, 0x1624	; 0x801624 <xPendedTicks+0x2>
    24c0:	b0 91 25 16 	lds	r27, 0x1625	; 0x801625 <xPendedTicks+0x3>
    24c4:	01 96       	adiw	r24, 0x01	; 1
    24c6:	a1 1d       	adc	r26, r1
    24c8:	b1 1d       	adc	r27, r1
    24ca:	80 93 22 16 	sts	0x1622, r24	; 0x801622 <xPendedTicks>
    24ce:	90 93 23 16 	sts	0x1623, r25	; 0x801623 <xPendedTicks+0x1>
    24d2:	a0 93 24 16 	sts	0x1624, r26	; 0x801624 <xPendedTicks+0x2>
    24d6:	b0 93 25 16 	sts	0x1625, r27	; 0x801625 <xPendedTicks+0x3>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <xTaskIncrementTick+0x24a>
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	08 95       	ret

000024ee <xTaskResumeAll>:
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	0f 92       	push	r0
    2500:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    2504:	81 50       	subi	r24, 0x01	; 1
    2506:	80 93 18 16 	sts	0x1618, r24	; 0x801618 <uxSchedulerSuspended>
    250a:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    250e:	81 11       	cpse	r24, r1
    2510:	be c0       	rjmp	.+380    	; 0x268e <xTaskResumeAll+0x1a0>
    2512:	80 91 2c 16 	lds	r24, 0x162C	; 0x80162c <uxCurrentNumberOfTasks>
    2516:	81 11       	cpse	r24, r1
    2518:	88 c0       	rjmp	.+272    	; 0x262a <xTaskResumeAll+0x13c>
    251a:	bc c0       	rjmp	.+376    	; 0x2694 <xTaskResumeAll+0x1a6>
    251c:	e0 91 4b 16 	lds	r30, 0x164B	; 0x80164b <xPendingReadyList+0x7>
    2520:	f0 91 4c 16 	lds	r31, 0x164C	; 0x80164c <xPendingReadyList+0x8>
    2524:	00 84       	ldd	r0, Z+8	; 0x08
    2526:	f1 85       	ldd	r31, Z+9	; 0x09
    2528:	e0 2d       	mov	r30, r0
    252a:	a0 8d       	ldd	r26, Z+24	; 0x18
    252c:	b1 8d       	ldd	r27, Z+25	; 0x19
    252e:	c2 89       	ldd	r28, Z+18	; 0x12
    2530:	d3 89       	ldd	r29, Z+19	; 0x13
    2532:	84 89       	ldd	r24, Z+20	; 0x14
    2534:	95 89       	ldd	r25, Z+21	; 0x15
    2536:	9f 83       	std	Y+7, r25	; 0x07
    2538:	8e 83       	std	Y+6, r24	; 0x06
    253a:	c4 89       	ldd	r28, Z+20	; 0x14
    253c:	d5 89       	ldd	r29, Z+21	; 0x15
    253e:	82 89       	ldd	r24, Z+18	; 0x12
    2540:	93 89       	ldd	r25, Z+19	; 0x13
    2542:	9d 83       	std	Y+5, r25	; 0x05
    2544:	8c 83       	std	Y+4, r24	; 0x04
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	2d 91       	ld	r18, X+
    254a:	3c 91       	ld	r19, X
    254c:	12 97       	sbiw	r26, 0x02	; 2
    254e:	cf 01       	movw	r24, r30
    2550:	0e 96       	adiw	r24, 0x0e	; 14
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	31 f4       	brne	.+12     	; 0x2564 <xTaskResumeAll+0x76>
    2558:	84 89       	ldd	r24, Z+20	; 0x14
    255a:	95 89       	ldd	r25, Z+21	; 0x15
    255c:	12 96       	adiw	r26, 0x02	; 2
    255e:	9c 93       	st	X, r25
    2560:	8e 93       	st	-X, r24
    2562:	11 97       	sbiw	r26, 0x01	; 1
    2564:	11 8e       	std	Z+25, r1	; 0x19
    2566:	10 8e       	std	Z+24, r1	; 0x18
    2568:	8c 91       	ld	r24, X
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	8c 93       	st	X, r24
    256e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2570:	b5 85       	ldd	r27, Z+13	; 0x0d
    2572:	c6 81       	ldd	r28, Z+6	; 0x06
    2574:	d7 81       	ldd	r29, Z+7	; 0x07
    2576:	80 85       	ldd	r24, Z+8	; 0x08
    2578:	91 85       	ldd	r25, Z+9	; 0x09
    257a:	9f 83       	std	Y+7, r25	; 0x07
    257c:	8e 83       	std	Y+6, r24	; 0x06
    257e:	c0 85       	ldd	r28, Z+8	; 0x08
    2580:	d1 85       	ldd	r29, Z+9	; 0x09
    2582:	86 81       	ldd	r24, Z+6	; 0x06
    2584:	97 81       	ldd	r25, Z+7	; 0x07
    2586:	9d 83       	std	Y+5, r25	; 0x05
    2588:	8c 83       	std	Y+4, r24	; 0x04
    258a:	11 96       	adiw	r26, 0x01	; 1
    258c:	8d 91       	ld	r24, X+
    258e:	9c 91       	ld	r25, X
    2590:	12 97       	sbiw	r26, 0x02	; 2
    2592:	9f 01       	movw	r18, r30
    2594:	2e 5f       	subi	r18, 0xFE	; 254
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	82 17       	cp	r24, r18
    259a:	93 07       	cpc	r25, r19
    259c:	31 f4       	brne	.+12     	; 0x25aa <xTaskResumeAll+0xbc>
    259e:	80 85       	ldd	r24, Z+8	; 0x08
    25a0:	91 85       	ldd	r25, Z+9	; 0x09
    25a2:	12 96       	adiw	r26, 0x02	; 2
    25a4:	9c 93       	st	X, r25
    25a6:	8e 93       	st	-X, r24
    25a8:	11 97       	sbiw	r26, 0x01	; 1
    25aa:	15 86       	std	Z+13, r1	; 0x0d
    25ac:	14 86       	std	Z+12, r1	; 0x0c
    25ae:	8c 91       	ld	r24, X
    25b0:	81 50       	subi	r24, 0x01	; 1
    25b2:	8c 93       	st	X, r24
    25b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25b6:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    25ba:	8a 17       	cp	r24, r26
    25bc:	10 f4       	brcc	.+4      	; 0x25c2 <xTaskResumeAll+0xd4>
    25be:	a0 93 27 16 	sts	0x1627, r26	; 0x801627 <uxTopReadyPriority>
    25c2:	8b e0       	ldi	r24, 0x0B	; 11
    25c4:	8a 9f       	mul	r24, r26
    25c6:	d0 01       	movw	r26, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	a7 59       	subi	r26, 0x97	; 151
    25cc:	b9 4e       	sbci	r27, 0xE9	; 233
    25ce:	11 96       	adiw	r26, 0x01	; 1
    25d0:	0d 90       	ld	r0, X+
    25d2:	bc 91       	ld	r27, X
    25d4:	a0 2d       	mov	r26, r0
    25d6:	b7 83       	std	Z+7, r27	; 0x07
    25d8:	a6 83       	std	Z+6, r26	; 0x06
    25da:	16 96       	adiw	r26, 0x06	; 6
    25dc:	4d 91       	ld	r20, X+
    25de:	5c 91       	ld	r21, X
    25e0:	17 97       	sbiw	r26, 0x07	; 7
    25e2:	51 87       	std	Z+9, r21	; 0x09
    25e4:	40 87       	std	Z+8, r20	; 0x08
    25e6:	16 96       	adiw	r26, 0x06	; 6
    25e8:	cd 91       	ld	r28, X+
    25ea:	dc 91       	ld	r29, X
    25ec:	17 97       	sbiw	r26, 0x07	; 7
    25ee:	3d 83       	std	Y+5, r19	; 0x05
    25f0:	2c 83       	std	Y+4, r18	; 0x04
    25f2:	17 96       	adiw	r26, 0x07	; 7
    25f4:	3c 93       	st	X, r19
    25f6:	2e 93       	st	-X, r18
    25f8:	16 97       	sbiw	r26, 0x06	; 6
    25fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25fc:	8a 9f       	mul	r24, r26
    25fe:	d0 01       	movw	r26, r0
    2600:	11 24       	eor	r1, r1
    2602:	a7 59       	subi	r26, 0x97	; 151
    2604:	b9 4e       	sbci	r27, 0xE9	; 233
    2606:	b5 87       	std	Z+13, r27	; 0x0d
    2608:	a4 87       	std	Z+12, r26	; 0x0c
    260a:	8c 91       	ld	r24, X
    260c:	8f 5f       	subi	r24, 0xFF	; 255
    260e:	8c 93       	st	X, r24
    2610:	92 8d       	ldd	r25, Z+26	; 0x1a
    2612:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2616:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    261a:	5a 96       	adiw	r26, 0x1a	; 26
    261c:	8c 91       	ld	r24, X
    261e:	98 17       	cp	r25, r24
    2620:	30 f0       	brcs	.+12     	; 0x262e <xTaskResumeAll+0x140>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xYieldPending>
    2628:	02 c0       	rjmp	.+4      	; 0x262e <xTaskResumeAll+0x140>
    262a:	e0 e0       	ldi	r30, 0x00	; 0
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <xPendingReadyList>
    2632:	81 11       	cpse	r24, r1
    2634:	73 cf       	rjmp	.-282    	; 0x251c <xTaskResumeAll+0x2e>
    2636:	ef 2b       	or	r30, r31
    2638:	09 f0       	breq	.+2      	; 0x263c <xTaskResumeAll+0x14e>
    263a:	7d db       	rcall	.-2310   	; 0x1d36 <prvResetNextTaskUnblockTime>
    263c:	c0 90 22 16 	lds	r12, 0x1622	; 0x801622 <xPendedTicks>
    2640:	d0 90 23 16 	lds	r13, 0x1623	; 0x801623 <xPendedTicks+0x1>
    2644:	e0 90 24 16 	lds	r14, 0x1624	; 0x801624 <xPendedTicks+0x2>
    2648:	f0 90 25 16 	lds	r15, 0x1625	; 0x801625 <xPendedTicks+0x3>
    264c:	c1 14       	cp	r12, r1
    264e:	d1 04       	cpc	r13, r1
    2650:	e1 04       	cpc	r14, r1
    2652:	f1 04       	cpc	r15, r1
    2654:	a1 f0       	breq	.+40     	; 0x267e <xTaskResumeAll+0x190>
    2656:	1f de       	rcall	.-962    	; 0x2296 <xTaskIncrementTick>
    2658:	88 23       	and	r24, r24
    265a:	19 f0       	breq	.+6      	; 0x2662 <xTaskResumeAll+0x174>
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xYieldPending>
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	c8 1a       	sub	r12, r24
    2666:	d1 08       	sbc	r13, r1
    2668:	e1 08       	sbc	r14, r1
    266a:	f1 08       	sbc	r15, r1
    266c:	a1 f7       	brne	.-24     	; 0x2656 <xTaskResumeAll+0x168>
    266e:	10 92 22 16 	sts	0x1622, r1	; 0x801622 <xPendedTicks>
    2672:	10 92 23 16 	sts	0x1623, r1	; 0x801623 <xPendedTicks+0x1>
    2676:	10 92 24 16 	sts	0x1624, r1	; 0x801624 <xPendedTicks+0x2>
    267a:	10 92 25 16 	sts	0x1625, r1	; 0x801625 <xPendedTicks+0x3>
    267e:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xYieldPending>
    2682:	88 23       	and	r24, r24
    2684:	31 f0       	breq	.+12     	; 0x2692 <xTaskResumeAll+0x1a4>
    2686:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <xTaskResumeAll+0x1a6>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <xTaskResumeAll+0x1a6>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0f 90       	pop	r0
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	08 95       	ret

000026a6 <xTaskDelayUntil>:
    26a6:	8f 92       	push	r8
    26a8:	9f 92       	push	r9
    26aa:	af 92       	push	r10
    26ac:	bf 92       	push	r11
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	ec 01       	movw	r28, r24
    26be:	6a 01       	movw	r12, r20
    26c0:	7b 01       	movw	r14, r22
    26c2:	d5 dd       	rcall	.-1110   	; 0x226e <vTaskSuspendAll>
    26c4:	80 90 28 16 	lds	r8, 0x1628	; 0x801628 <xTickCount>
    26c8:	90 90 29 16 	lds	r9, 0x1629	; 0x801629 <xTickCount+0x1>
    26cc:	a0 90 2a 16 	lds	r10, 0x162A	; 0x80162a <xTickCount+0x2>
    26d0:	b0 90 2b 16 	lds	r11, 0x162B	; 0x80162b <xTickCount+0x3>
    26d4:	88 81       	ld	r24, Y
    26d6:	99 81       	ldd	r25, Y+1	; 0x01
    26d8:	aa 81       	ldd	r26, Y+2	; 0x02
    26da:	bb 81       	ldd	r27, Y+3	; 0x03
    26dc:	ac 01       	movw	r20, r24
    26de:	bd 01       	movw	r22, r26
    26e0:	4c 0d       	add	r20, r12
    26e2:	5d 1d       	adc	r21, r13
    26e4:	6e 1d       	adc	r22, r14
    26e6:	7f 1d       	adc	r23, r15
    26e8:	88 16       	cp	r8, r24
    26ea:	99 06       	cpc	r9, r25
    26ec:	aa 06       	cpc	r10, r26
    26ee:	bb 06       	cpc	r11, r27
    26f0:	60 f4       	brcc	.+24     	; 0x270a <xTaskDelayUntil+0x64>
    26f2:	48 17       	cp	r20, r24
    26f4:	59 07       	cpc	r21, r25
    26f6:	6a 07       	cpc	r22, r26
    26f8:	7b 07       	cpc	r23, r27
    26fa:	98 f4       	brcc	.+38     	; 0x2722 <xTaskDelayUntil+0x7c>
    26fc:	84 16       	cp	r8, r20
    26fe:	95 06       	cpc	r9, r21
    2700:	a6 06       	cpc	r10, r22
    2702:	b7 06       	cpc	r11, r23
    2704:	80 f0       	brcs	.+32     	; 0x2726 <xTaskDelayUntil+0x80>
    2706:	10 e0       	ldi	r17, 0x00	; 0
    2708:	13 c0       	rjmp	.+38     	; 0x2730 <xTaskDelayUntil+0x8a>
    270a:	48 17       	cp	r20, r24
    270c:	59 07       	cpc	r21, r25
    270e:	6a 07       	cpc	r22, r26
    2710:	7b 07       	cpc	r23, r27
    2712:	58 f0       	brcs	.+22     	; 0x272a <xTaskDelayUntil+0x84>
    2714:	84 16       	cp	r8, r20
    2716:	95 06       	cpc	r9, r21
    2718:	a6 06       	cpc	r10, r22
    271a:	b7 06       	cpc	r11, r23
    271c:	40 f0       	brcs	.+16     	; 0x272e <xTaskDelayUntil+0x88>
    271e:	10 e0       	ldi	r17, 0x00	; 0
    2720:	07 c0       	rjmp	.+14     	; 0x2730 <xTaskDelayUntil+0x8a>
    2722:	10 e0       	ldi	r17, 0x00	; 0
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <xTaskDelayUntil+0x8a>
    2726:	11 e0       	ldi	r17, 0x01	; 1
    2728:	03 c0       	rjmp	.+6      	; 0x2730 <xTaskDelayUntil+0x8a>
    272a:	11 e0       	ldi	r17, 0x01	; 1
    272c:	01 c0       	rjmp	.+2      	; 0x2730 <xTaskDelayUntil+0x8a>
    272e:	11 e0       	ldi	r17, 0x01	; 1
    2730:	48 83       	st	Y, r20
    2732:	59 83       	std	Y+1, r21	; 0x01
    2734:	6a 83       	std	Y+2, r22	; 0x02
    2736:	7b 83       	std	Y+3, r23	; 0x03
    2738:	11 23       	and	r17, r17
    273a:	41 f0       	breq	.+16     	; 0x274c <xTaskDelayUntil+0xa6>
    273c:	cb 01       	movw	r24, r22
    273e:	ba 01       	movw	r22, r20
    2740:	68 19       	sub	r22, r8
    2742:	79 09       	sbc	r23, r9
    2744:	8a 09       	sbc	r24, r10
    2746:	9b 09       	sbc	r25, r11
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	6b dc       	rcall	.-1834   	; 0x2022 <prvAddCurrentTaskToDelayedList>
    274c:	d0 de       	rcall	.-608    	; 0x24ee <xTaskResumeAll>
    274e:	81 11       	cpse	r24, r1
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <xTaskDelayUntil+0xb0>
    2752:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    2756:	81 2f       	mov	r24, r17
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	1f 91       	pop	r17
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	df 90       	pop	r13
    2764:	cf 90       	pop	r12
    2766:	bf 90       	pop	r11
    2768:	af 90       	pop	r10
    276a:	9f 90       	pop	r9
    276c:	8f 90       	pop	r8
    276e:	08 95       	ret

00002770 <vTaskDelay>:
    2770:	cf 92       	push	r12
    2772:	df 92       	push	r13
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	6b 01       	movw	r12, r22
    277a:	7c 01       	movw	r14, r24
    277c:	67 2b       	or	r22, r23
    277e:	68 2b       	or	r22, r24
    2780:	69 2b       	or	r22, r25
    2782:	39 f0       	breq	.+14     	; 0x2792 <vTaskDelay+0x22>
    2784:	74 dd       	rcall	.-1304   	; 0x226e <vTaskSuspendAll>
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	c7 01       	movw	r24, r14
    278a:	b6 01       	movw	r22, r12
    278c:	4a dc       	rcall	.-1900   	; 0x2022 <prvAddCurrentTaskToDelayedList>
    278e:	af de       	rcall	.-674    	; 0x24ee <xTaskResumeAll>
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <vTaskDelay+0x24>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	81 11       	cpse	r24, r1
    2796:	02 c0       	rjmp	.+4      	; 0x279c <vTaskDelay+0x2c>
    2798:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    279c:	ff 90       	pop	r15
    279e:	ef 90       	pop	r14
    27a0:	df 90       	pop	r13
    27a2:	cf 90       	pop	r12
    27a4:	08 95       	ret

000027a6 <vTaskSwitchContext>:
    27a6:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    27aa:	88 23       	and	r24, r24
    27ac:	21 f0       	breq	.+8      	; 0x27b6 <vTaskSwitchContext+0x10>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xYieldPending>
    27b4:	08 95       	ret
    27b6:	10 92 21 16 	sts	0x1621, r1	; 0x801621 <xYieldPending>
    27ba:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    27be:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    27c2:	20 81       	ld	r18, Z
    27c4:	31 81       	ldd	r19, Z+1	; 0x01
    27c6:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    27ca:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    27ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    27d0:	94 8d       	ldd	r25, Z+28	; 0x1c
    27d2:	82 17       	cp	r24, r18
    27d4:	93 07       	cpc	r25, r19
    27d6:	60 f0       	brcs	.+24     	; 0x27f0 <vTaskSwitchContext+0x4a>
    27d8:	60 91 d7 16 	lds	r22, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    27dc:	70 91 d8 16 	lds	r23, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    27e0:	63 5e       	subi	r22, 0xE3	; 227
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    27e8:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    27ec:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <vApplicationStackOverflowHook>
    27f0:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    27f4:	01 c0       	rjmp	.+2      	; 0x27f8 <vTaskSwitchContext+0x52>
    27f6:	81 50       	subi	r24, 0x01	; 1
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	9b e0       	ldi	r25, 0x0B	; 11
    27fe:	92 9f       	mul	r25, r18
    2800:	f0 01       	movw	r30, r0
    2802:	93 9f       	mul	r25, r19
    2804:	f0 0d       	add	r31, r0
    2806:	11 24       	eor	r1, r1
    2808:	e7 59       	subi	r30, 0x97	; 151
    280a:	f9 4e       	sbci	r31, 0xE9	; 233
    280c:	90 81       	ld	r25, Z
    280e:	99 23       	and	r25, r25
    2810:	91 f3       	breq	.-28     	; 0x27f6 <vTaskSwitchContext+0x50>
    2812:	9b e0       	ldi	r25, 0x0B	; 11
    2814:	92 9f       	mul	r25, r18
    2816:	a0 01       	movw	r20, r0
    2818:	93 9f       	mul	r25, r19
    281a:	50 0d       	add	r21, r0
    281c:	11 24       	eor	r1, r1
    281e:	df 01       	movw	r26, r30
    2820:	01 80       	ldd	r0, Z+1	; 0x01
    2822:	f2 81       	ldd	r31, Z+2	; 0x02
    2824:	e0 2d       	mov	r30, r0
    2826:	04 80       	ldd	r0, Z+4	; 0x04
    2828:	f5 81       	ldd	r31, Z+5	; 0x05
    282a:	e0 2d       	mov	r30, r0
    282c:	12 96       	adiw	r26, 0x02	; 2
    282e:	fc 93       	st	X, r31
    2830:	ee 93       	st	-X, r30
    2832:	11 97       	sbiw	r26, 0x01	; 1
    2834:	44 59       	subi	r20, 0x94	; 148
    2836:	59 4e       	sbci	r21, 0xE9	; 233
    2838:	e4 17       	cp	r30, r20
    283a:	f5 07       	cpc	r31, r21
    283c:	29 f4       	brne	.+10     	; 0x2848 <vTaskSwitchContext+0xa2>
    283e:	44 81       	ldd	r20, Z+4	; 0x04
    2840:	55 81       	ldd	r21, Z+5	; 0x05
    2842:	fd 01       	movw	r30, r26
    2844:	52 83       	std	Z+2, r21	; 0x02
    2846:	41 83       	std	Z+1, r20	; 0x01
    2848:	9b e0       	ldi	r25, 0x0B	; 11
    284a:	92 9f       	mul	r25, r18
    284c:	f0 01       	movw	r30, r0
    284e:	93 9f       	mul	r25, r19
    2850:	f0 0d       	add	r31, r0
    2852:	11 24       	eor	r1, r1
    2854:	e7 59       	subi	r30, 0x97	; 151
    2856:	f9 4e       	sbci	r31, 0xE9	; 233
    2858:	01 80       	ldd	r0, Z+1	; 0x01
    285a:	f2 81       	ldd	r31, Z+2	; 0x02
    285c:	e0 2d       	mov	r30, r0
    285e:	20 85       	ldd	r18, Z+8	; 0x08
    2860:	31 85       	ldd	r19, Z+9	; 0x09
    2862:	30 93 d8 16 	sts	0x16D8, r19	; 0x8016d8 <pxCurrentTCB+0x1>
    2866:	20 93 d7 16 	sts	0x16D7, r18	; 0x8016d7 <pxCurrentTCB>
    286a:	80 93 27 16 	sts	0x1627, r24	; 0x801627 <uxTopReadyPriority>
    286e:	08 95       	ret

00002870 <vTaskPlaceOnEventList>:
    2870:	cf 92       	push	r12
    2872:	df 92       	push	r13
    2874:	ef 92       	push	r14
    2876:	ff 92       	push	r15
    2878:	6a 01       	movw	r12, r20
    287a:	7b 01       	movw	r14, r22
    287c:	60 91 d7 16 	lds	r22, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2880:	70 91 d8 16 	lds	r23, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2884:	62 5f       	subi	r22, 0xF2	; 242
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	0e 94 52 06 	call	0xca4	; 0xca4 <vListInsert>
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	c7 01       	movw	r24, r14
    2890:	b6 01       	movw	r22, r12
    2892:	c7 db       	rcall	.-2162   	; 0x2022 <prvAddCurrentTaskToDelayedList>
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
    289c:	08 95       	ret

0000289e <vTaskPlaceOnUnorderedEventList>:
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	fc 01       	movw	r30, r24
    28a8:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    28ac:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    28b0:	70 68       	ori	r23, 0x80	; 128
    28b2:	1e 96       	adiw	r26, 0x0e	; 14
    28b4:	4d 93       	st	X+, r20
    28b6:	5d 93       	st	X+, r21
    28b8:	6d 93       	st	X+, r22
    28ba:	7c 93       	st	X, r23
    28bc:	51 97       	sbiw	r26, 0x11	; 17
    28be:	a1 81       	ldd	r26, Z+1	; 0x01
    28c0:	b2 81       	ldd	r27, Z+2	; 0x02
    28c2:	c0 91 d7 16 	lds	r28, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    28c6:	d0 91 d8 16 	lds	r29, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    28ca:	bb 8b       	std	Y+19, r27	; 0x13
    28cc:	aa 8b       	std	Y+18, r26	; 0x12
    28ce:	c0 91 d7 16 	lds	r28, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    28d2:	d0 91 d8 16 	lds	r29, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    28d6:	16 96       	adiw	r26, 0x06	; 6
    28d8:	8d 91       	ld	r24, X+
    28da:	9c 91       	ld	r25, X
    28dc:	17 97       	sbiw	r26, 0x07	; 7
    28de:	9d 8b       	std	Y+21, r25	; 0x15
    28e0:	8c 8b       	std	Y+20, r24	; 0x14
    28e2:	16 96       	adiw	r26, 0x06	; 6
    28e4:	cd 91       	ld	r28, X+
    28e6:	dc 91       	ld	r29, X
    28e8:	17 97       	sbiw	r26, 0x07	; 7
    28ea:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    28ee:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    28f2:	0e 96       	adiw	r24, 0x0e	; 14
    28f4:	9d 83       	std	Y+5, r25	; 0x05
    28f6:	8c 83       	std	Y+4, r24	; 0x04
    28f8:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    28fc:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2900:	0e 96       	adiw	r24, 0x0e	; 14
    2902:	17 96       	adiw	r26, 0x07	; 7
    2904:	9c 93       	st	X, r25
    2906:	8e 93       	st	-X, r24
    2908:	16 97       	sbiw	r26, 0x06	; 6
    290a:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    290e:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2912:	59 96       	adiw	r26, 0x19	; 25
    2914:	fc 93       	st	X, r31
    2916:	ee 93       	st	-X, r30
    2918:	58 97       	sbiw	r26, 0x18	; 24
    291a:	80 81       	ld	r24, Z
    291c:	8f 5f       	subi	r24, 0xFF	; 255
    291e:	80 83       	st	Z, r24
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	c9 01       	movw	r24, r18
    2924:	b8 01       	movw	r22, r16
    2926:	7d db       	rcall	.-2310   	; 0x2022 <prvAddCurrentTaskToDelayedList>
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <vTaskPlaceOnEventListRestricted>:
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	fc 01       	movw	r30, r24
    2938:	cb 01       	movw	r24, r22
    293a:	ba 01       	movw	r22, r20
    293c:	a1 81       	ldd	r26, Z+1	; 0x01
    293e:	b2 81       	ldd	r27, Z+2	; 0x02
    2940:	c0 91 d7 16 	lds	r28, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2944:	d0 91 d8 16 	lds	r29, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2948:	bb 8b       	std	Y+19, r27	; 0x13
    294a:	aa 8b       	std	Y+18, r26	; 0x12
    294c:	c0 91 d7 16 	lds	r28, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2950:	d0 91 d8 16 	lds	r29, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2954:	16 96       	adiw	r26, 0x06	; 6
    2956:	4d 91       	ld	r20, X+
    2958:	5c 91       	ld	r21, X
    295a:	17 97       	sbiw	r26, 0x07	; 7
    295c:	5d 8b       	std	Y+21, r21	; 0x15
    295e:	4c 8b       	std	Y+20, r20	; 0x14
    2960:	16 96       	adiw	r26, 0x06	; 6
    2962:	cd 91       	ld	r28, X+
    2964:	dc 91       	ld	r29, X
    2966:	17 97       	sbiw	r26, 0x07	; 7
    2968:	40 91 d7 16 	lds	r20, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    296c:	50 91 d8 16 	lds	r21, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2970:	42 5f       	subi	r20, 0xF2	; 242
    2972:	5f 4f       	sbci	r21, 0xFF	; 255
    2974:	5d 83       	std	Y+5, r21	; 0x05
    2976:	4c 83       	std	Y+4, r20	; 0x04
    2978:	40 91 d7 16 	lds	r20, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    297c:	50 91 d8 16 	lds	r21, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2980:	42 5f       	subi	r20, 0xF2	; 242
    2982:	5f 4f       	sbci	r21, 0xFF	; 255
    2984:	17 96       	adiw	r26, 0x07	; 7
    2986:	5c 93       	st	X, r21
    2988:	4e 93       	st	-X, r20
    298a:	16 97       	sbiw	r26, 0x06	; 6
    298c:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2990:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2994:	59 96       	adiw	r26, 0x19	; 25
    2996:	fc 93       	st	X, r31
    2998:	ee 93       	st	-X, r30
    299a:	58 97       	sbiw	r26, 0x18	; 24
    299c:	30 81       	ld	r19, Z
    299e:	3f 5f       	subi	r19, 0xFF	; 255
    29a0:	30 83       	st	Z, r19
    29a2:	22 23       	and	r18, r18
    29a4:	19 f0       	breq	.+6      	; 0x29ac <vTaskPlaceOnEventListRestricted+0x7a>
    29a6:	6f ef       	ldi	r22, 0xFF	; 255
    29a8:	7f ef       	ldi	r23, 0xFF	; 255
    29aa:	cb 01       	movw	r24, r22
    29ac:	42 2f       	mov	r20, r18
    29ae:	39 db       	rcall	.-2446   	; 0x2022 <prvAddCurrentTaskToDelayedList>
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <xTaskRemoveFromEventList>:
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	dc 01       	movw	r26, r24
    29bc:	17 96       	adiw	r26, 0x07	; 7
    29be:	ed 91       	ld	r30, X+
    29c0:	fc 91       	ld	r31, X
    29c2:	18 97       	sbiw	r26, 0x08	; 8
    29c4:	00 84       	ldd	r0, Z+8	; 0x08
    29c6:	f1 85       	ldd	r31, Z+9	; 0x09
    29c8:	e0 2d       	mov	r30, r0
    29ca:	a0 8d       	ldd	r26, Z+24	; 0x18
    29cc:	b1 8d       	ldd	r27, Z+25	; 0x19
    29ce:	c2 89       	ldd	r28, Z+18	; 0x12
    29d0:	d3 89       	ldd	r29, Z+19	; 0x13
    29d2:	84 89       	ldd	r24, Z+20	; 0x14
    29d4:	95 89       	ldd	r25, Z+21	; 0x15
    29d6:	9f 83       	std	Y+7, r25	; 0x07
    29d8:	8e 83       	std	Y+6, r24	; 0x06
    29da:	c4 89       	ldd	r28, Z+20	; 0x14
    29dc:	d5 89       	ldd	r29, Z+21	; 0x15
    29de:	82 89       	ldd	r24, Z+18	; 0x12
    29e0:	93 89       	ldd	r25, Z+19	; 0x13
    29e2:	9d 83       	std	Y+5, r25	; 0x05
    29e4:	8c 83       	std	Y+4, r24	; 0x04
    29e6:	11 96       	adiw	r26, 0x01	; 1
    29e8:	8d 91       	ld	r24, X+
    29ea:	9c 91       	ld	r25, X
    29ec:	12 97       	sbiw	r26, 0x02	; 2
    29ee:	9f 01       	movw	r18, r30
    29f0:	22 5f       	subi	r18, 0xF2	; 242
    29f2:	3f 4f       	sbci	r19, 0xFF	; 255
    29f4:	82 17       	cp	r24, r18
    29f6:	93 07       	cpc	r25, r19
    29f8:	31 f4       	brne	.+12     	; 0x2a06 <xTaskRemoveFromEventList+0x50>
    29fa:	84 89       	ldd	r24, Z+20	; 0x14
    29fc:	95 89       	ldd	r25, Z+21	; 0x15
    29fe:	12 96       	adiw	r26, 0x02	; 2
    2a00:	9c 93       	st	X, r25
    2a02:	8e 93       	st	-X, r24
    2a04:	11 97       	sbiw	r26, 0x01	; 1
    2a06:	11 8e       	std	Z+25, r1	; 0x19
    2a08:	10 8e       	std	Z+24, r1	; 0x18
    2a0a:	8c 91       	ld	r24, X
    2a0c:	81 50       	subi	r24, 0x01	; 1
    2a0e:	8c 93       	st	X, r24
    2a10:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    2a14:	81 11       	cpse	r24, r1
    2a16:	52 c0       	rjmp	.+164    	; 0x2abc <xTaskRemoveFromEventList+0x106>
    2a18:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a1a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a1c:	c6 81       	ldd	r28, Z+6	; 0x06
    2a1e:	d7 81       	ldd	r29, Z+7	; 0x07
    2a20:	80 85       	ldd	r24, Z+8	; 0x08
    2a22:	91 85       	ldd	r25, Z+9	; 0x09
    2a24:	9f 83       	std	Y+7, r25	; 0x07
    2a26:	8e 83       	std	Y+6, r24	; 0x06
    2a28:	c0 85       	ldd	r28, Z+8	; 0x08
    2a2a:	d1 85       	ldd	r29, Z+9	; 0x09
    2a2c:	86 81       	ldd	r24, Z+6	; 0x06
    2a2e:	97 81       	ldd	r25, Z+7	; 0x07
    2a30:	9d 83       	std	Y+5, r25	; 0x05
    2a32:	8c 83       	std	Y+4, r24	; 0x04
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	8d 91       	ld	r24, X+
    2a38:	9c 91       	ld	r25, X
    2a3a:	12 97       	sbiw	r26, 0x02	; 2
    2a3c:	9f 01       	movw	r18, r30
    2a3e:	2e 5f       	subi	r18, 0xFE	; 254
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	82 17       	cp	r24, r18
    2a44:	93 07       	cpc	r25, r19
    2a46:	31 f4       	brne	.+12     	; 0x2a54 <xTaskRemoveFromEventList+0x9e>
    2a48:	80 85       	ldd	r24, Z+8	; 0x08
    2a4a:	91 85       	ldd	r25, Z+9	; 0x09
    2a4c:	12 96       	adiw	r26, 0x02	; 2
    2a4e:	9c 93       	st	X, r25
    2a50:	8e 93       	st	-X, r24
    2a52:	11 97       	sbiw	r26, 0x01	; 1
    2a54:	15 86       	std	Z+13, r1	; 0x0d
    2a56:	14 86       	std	Z+12, r1	; 0x0c
    2a58:	8c 91       	ld	r24, X
    2a5a:	81 50       	subi	r24, 0x01	; 1
    2a5c:	8c 93       	st	X, r24
    2a5e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a60:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    2a64:	8a 17       	cp	r24, r26
    2a66:	10 f4       	brcc	.+4      	; 0x2a6c <xTaskRemoveFromEventList+0xb6>
    2a68:	a0 93 27 16 	sts	0x1627, r26	; 0x801627 <uxTopReadyPriority>
    2a6c:	8b e0       	ldi	r24, 0x0B	; 11
    2a6e:	8a 9f       	mul	r24, r26
    2a70:	d0 01       	movw	r26, r0
    2a72:	11 24       	eor	r1, r1
    2a74:	a7 59       	subi	r26, 0x97	; 151
    2a76:	b9 4e       	sbci	r27, 0xE9	; 233
    2a78:	11 96       	adiw	r26, 0x01	; 1
    2a7a:	0d 90       	ld	r0, X+
    2a7c:	bc 91       	ld	r27, X
    2a7e:	a0 2d       	mov	r26, r0
    2a80:	b7 83       	std	Z+7, r27	; 0x07
    2a82:	a6 83       	std	Z+6, r26	; 0x06
    2a84:	16 96       	adiw	r26, 0x06	; 6
    2a86:	4d 91       	ld	r20, X+
    2a88:	5c 91       	ld	r21, X
    2a8a:	17 97       	sbiw	r26, 0x07	; 7
    2a8c:	51 87       	std	Z+9, r21	; 0x09
    2a8e:	40 87       	std	Z+8, r20	; 0x08
    2a90:	16 96       	adiw	r26, 0x06	; 6
    2a92:	cd 91       	ld	r28, X+
    2a94:	dc 91       	ld	r29, X
    2a96:	17 97       	sbiw	r26, 0x07	; 7
    2a98:	3d 83       	std	Y+5, r19	; 0x05
    2a9a:	2c 83       	std	Y+4, r18	; 0x04
    2a9c:	17 96       	adiw	r26, 0x07	; 7
    2a9e:	3c 93       	st	X, r19
    2aa0:	2e 93       	st	-X, r18
    2aa2:	16 97       	sbiw	r26, 0x06	; 6
    2aa4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2aa6:	8a 9f       	mul	r24, r26
    2aa8:	d0 01       	movw	r26, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	a7 59       	subi	r26, 0x97	; 151
    2aae:	b9 4e       	sbci	r27, 0xE9	; 233
    2ab0:	b5 87       	std	Z+13, r27	; 0x0d
    2ab2:	a4 87       	std	Z+12, r26	; 0x0c
    2ab4:	8c 91       	ld	r24, X
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	8c 93       	st	X, r24
    2aba:	1c c0       	rjmp	.+56     	; 0x2af4 <xTaskRemoveFromEventList+0x13e>
    2abc:	44 e4       	ldi	r20, 0x44	; 68
    2abe:	56 e1       	ldi	r21, 0x16	; 22
    2ac0:	da 01       	movw	r26, r20
    2ac2:	11 96       	adiw	r26, 0x01	; 1
    2ac4:	cd 91       	ld	r28, X+
    2ac6:	dc 91       	ld	r29, X
    2ac8:	12 97       	sbiw	r26, 0x02	; 2
    2aca:	d3 8b       	std	Z+19, r29	; 0x13
    2acc:	c2 8b       	std	Z+18, r28	; 0x12
    2ace:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad2:	95 8b       	std	Z+21, r25	; 0x15
    2ad4:	84 8b       	std	Z+20, r24	; 0x14
    2ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    2ada:	dc 01       	movw	r26, r24
    2adc:	15 96       	adiw	r26, 0x05	; 5
    2ade:	3c 93       	st	X, r19
    2ae0:	2e 93       	st	-X, r18
    2ae2:	14 97       	sbiw	r26, 0x04	; 4
    2ae4:	3f 83       	std	Y+7, r19	; 0x07
    2ae6:	2e 83       	std	Y+6, r18	; 0x06
    2ae8:	51 8f       	std	Z+25, r21	; 0x19
    2aea:	40 8f       	std	Z+24, r20	; 0x18
    2aec:	da 01       	movw	r26, r20
    2aee:	8c 91       	ld	r24, X
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	8c 93       	st	X, r24
    2af4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2af6:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2afa:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2afe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b00:	89 17       	cp	r24, r25
    2b02:	20 f4       	brcc	.+8      	; 0x2b0c <xTaskRemoveFromEventList+0x156>
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xYieldPending>
    2b0a:	01 c0       	rjmp	.+2      	; 0x2b0e <xTaskRemoveFromEventList+0x158>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	08 95       	ret

00002b14 <vTaskRemoveFromUnorderedEventList>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	dc 01       	movw	r26, r24
    2b1a:	70 68       	ori	r23, 0x80	; 128
    2b1c:	4d 93       	st	X+, r20
    2b1e:	5d 93       	st	X+, r21
    2b20:	6d 93       	st	X+, r22
    2b22:	7c 93       	st	X, r23
    2b24:	13 97       	sbiw	r26, 0x03	; 3
    2b26:	18 96       	adiw	r26, 0x08	; 8
    2b28:	ed 91       	ld	r30, X+
    2b2a:	fc 91       	ld	r31, X
    2b2c:	19 97       	sbiw	r26, 0x09	; 9
    2b2e:	1a 96       	adiw	r26, 0x0a	; 10
    2b30:	4d 91       	ld	r20, X+
    2b32:	5c 91       	ld	r21, X
    2b34:	1b 97       	sbiw	r26, 0x0b	; 11
    2b36:	14 96       	adiw	r26, 0x04	; 4
    2b38:	8d 91       	ld	r24, X+
    2b3a:	9c 91       	ld	r25, X
    2b3c:	15 97       	sbiw	r26, 0x05	; 5
    2b3e:	16 96       	adiw	r26, 0x06	; 6
    2b40:	2d 91       	ld	r18, X+
    2b42:	3c 91       	ld	r19, X
    2b44:	17 97       	sbiw	r26, 0x07	; 7
    2b46:	ec 01       	movw	r28, r24
    2b48:	3f 83       	std	Y+7, r19	; 0x07
    2b4a:	2e 83       	std	Y+6, r18	; 0x06
    2b4c:	16 96       	adiw	r26, 0x06	; 6
    2b4e:	8d 91       	ld	r24, X+
    2b50:	9c 91       	ld	r25, X
    2b52:	17 97       	sbiw	r26, 0x07	; 7
    2b54:	14 96       	adiw	r26, 0x04	; 4
    2b56:	2d 91       	ld	r18, X+
    2b58:	3c 91       	ld	r19, X
    2b5a:	15 97       	sbiw	r26, 0x05	; 5
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	3d 83       	std	Y+5, r19	; 0x05
    2b60:	2c 83       	std	Y+4, r18	; 0x04
    2b62:	ea 01       	movw	r28, r20
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	a8 17       	cp	r26, r24
    2b6a:	b9 07       	cpc	r27, r25
    2b6c:	31 f4       	brne	.+12     	; 0x2b7a <vTaskRemoveFromUnorderedEventList+0x66>
    2b6e:	16 96       	adiw	r26, 0x06	; 6
    2b70:	8d 91       	ld	r24, X+
    2b72:	9c 91       	ld	r25, X
    2b74:	17 97       	sbiw	r26, 0x07	; 7
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	1b 96       	adiw	r26, 0x0b	; 11
    2b7c:	1c 92       	st	X, r1
    2b7e:	1e 92       	st	-X, r1
    2b80:	1a 97       	sbiw	r26, 0x0a	; 10
    2b82:	da 01       	movw	r26, r20
    2b84:	8c 91       	ld	r24, X
    2b86:	81 50       	subi	r24, 0x01	; 1
    2b88:	8c 93       	st	X, r24
    2b8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b8c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b8e:	c6 81       	ldd	r28, Z+6	; 0x06
    2b90:	d7 81       	ldd	r29, Z+7	; 0x07
    2b92:	80 85       	ldd	r24, Z+8	; 0x08
    2b94:	91 85       	ldd	r25, Z+9	; 0x09
    2b96:	9f 83       	std	Y+7, r25	; 0x07
    2b98:	8e 83       	std	Y+6, r24	; 0x06
    2b9a:	c0 85       	ldd	r28, Z+8	; 0x08
    2b9c:	d1 85       	ldd	r29, Z+9	; 0x09
    2b9e:	86 81       	ldd	r24, Z+6	; 0x06
    2ba0:	97 81       	ldd	r25, Z+7	; 0x07
    2ba2:	9d 83       	std	Y+5, r25	; 0x05
    2ba4:	8c 83       	std	Y+4, r24	; 0x04
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	8d 91       	ld	r24, X+
    2baa:	9c 91       	ld	r25, X
    2bac:	12 97       	sbiw	r26, 0x02	; 2
    2bae:	9f 01       	movw	r18, r30
    2bb0:	2e 5f       	subi	r18, 0xFE	; 254
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	82 17       	cp	r24, r18
    2bb6:	93 07       	cpc	r25, r19
    2bb8:	31 f4       	brne	.+12     	; 0x2bc6 <vTaskRemoveFromUnorderedEventList+0xb2>
    2bba:	80 85       	ldd	r24, Z+8	; 0x08
    2bbc:	91 85       	ldd	r25, Z+9	; 0x09
    2bbe:	12 96       	adiw	r26, 0x02	; 2
    2bc0:	9c 93       	st	X, r25
    2bc2:	8e 93       	st	-X, r24
    2bc4:	11 97       	sbiw	r26, 0x01	; 1
    2bc6:	15 86       	std	Z+13, r1	; 0x0d
    2bc8:	14 86       	std	Z+12, r1	; 0x0c
    2bca:	8c 91       	ld	r24, X
    2bcc:	81 50       	subi	r24, 0x01	; 1
    2bce:	8c 93       	st	X, r24
    2bd0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bd2:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    2bd6:	8a 17       	cp	r24, r26
    2bd8:	10 f4       	brcc	.+4      	; 0x2bde <vTaskRemoveFromUnorderedEventList+0xca>
    2bda:	a0 93 27 16 	sts	0x1627, r26	; 0x801627 <uxTopReadyPriority>
    2bde:	8b e0       	ldi	r24, 0x0B	; 11
    2be0:	8a 9f       	mul	r24, r26
    2be2:	d0 01       	movw	r26, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	a7 59       	subi	r26, 0x97	; 151
    2be8:	b9 4e       	sbci	r27, 0xE9	; 233
    2bea:	11 96       	adiw	r26, 0x01	; 1
    2bec:	0d 90       	ld	r0, X+
    2bee:	bc 91       	ld	r27, X
    2bf0:	a0 2d       	mov	r26, r0
    2bf2:	b7 83       	std	Z+7, r27	; 0x07
    2bf4:	a6 83       	std	Z+6, r26	; 0x06
    2bf6:	16 96       	adiw	r26, 0x06	; 6
    2bf8:	4d 91       	ld	r20, X+
    2bfa:	5c 91       	ld	r21, X
    2bfc:	17 97       	sbiw	r26, 0x07	; 7
    2bfe:	51 87       	std	Z+9, r21	; 0x09
    2c00:	40 87       	std	Z+8, r20	; 0x08
    2c02:	16 96       	adiw	r26, 0x06	; 6
    2c04:	cd 91       	ld	r28, X+
    2c06:	dc 91       	ld	r29, X
    2c08:	17 97       	sbiw	r26, 0x07	; 7
    2c0a:	3d 83       	std	Y+5, r19	; 0x05
    2c0c:	2c 83       	std	Y+4, r18	; 0x04
    2c0e:	17 96       	adiw	r26, 0x07	; 7
    2c10:	3c 93       	st	X, r19
    2c12:	2e 93       	st	-X, r18
    2c14:	16 97       	sbiw	r26, 0x06	; 6
    2c16:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c18:	8a 9f       	mul	r24, r26
    2c1a:	d0 01       	movw	r26, r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	a7 59       	subi	r26, 0x97	; 151
    2c20:	b9 4e       	sbci	r27, 0xE9	; 233
    2c22:	b5 87       	std	Z+13, r27	; 0x0d
    2c24:	a4 87       	std	Z+12, r26	; 0x0c
    2c26:	8c 91       	ld	r24, X
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	8c 93       	st	X, r24
    2c2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c2e:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2c32:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2c36:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c38:	89 17       	cp	r24, r25
    2c3a:	18 f4       	brcc	.+6      	; 0x2c42 <vTaskRemoveFromUnorderedEventList+0x12e>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xYieldPending>
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <vTaskSetTimeOutState>:
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	0f 92       	push	r0
    2c4e:	20 91 20 16 	lds	r18, 0x1620	; 0x801620 <xNumOfOverflows>
    2c52:	fc 01       	movw	r30, r24
    2c54:	20 83       	st	Z, r18
    2c56:	40 91 28 16 	lds	r20, 0x1628	; 0x801628 <xTickCount>
    2c5a:	50 91 29 16 	lds	r21, 0x1629	; 0x801629 <xTickCount+0x1>
    2c5e:	60 91 2a 16 	lds	r22, 0x162A	; 0x80162a <xTickCount+0x2>
    2c62:	70 91 2b 16 	lds	r23, 0x162B	; 0x80162b <xTickCount+0x3>
    2c66:	41 83       	std	Z+1, r20	; 0x01
    2c68:	52 83       	std	Z+2, r21	; 0x02
    2c6a:	63 83       	std	Z+3, r22	; 0x03
    2c6c:	74 83       	std	Z+4, r23	; 0x04
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	08 95       	ret

00002c74 <vTaskInternalSetTimeOutState>:
    2c74:	20 91 20 16 	lds	r18, 0x1620	; 0x801620 <xNumOfOverflows>
    2c78:	fc 01       	movw	r30, r24
    2c7a:	20 83       	st	Z, r18
    2c7c:	40 91 28 16 	lds	r20, 0x1628	; 0x801628 <xTickCount>
    2c80:	50 91 29 16 	lds	r21, 0x1629	; 0x801629 <xTickCount+0x1>
    2c84:	60 91 2a 16 	lds	r22, 0x162A	; 0x80162a <xTickCount+0x2>
    2c88:	70 91 2b 16 	lds	r23, 0x162B	; 0x80162b <xTickCount+0x3>
    2c8c:	41 83       	std	Z+1, r20	; 0x01
    2c8e:	52 83       	std	Z+2, r21	; 0x02
    2c90:	63 83       	std	Z+3, r22	; 0x03
    2c92:	74 83       	std	Z+4, r23	; 0x04
    2c94:	08 95       	ret

00002c96 <xTaskCheckForTimeOut>:
    2c96:	8f 92       	push	r8
    2c98:	9f 92       	push	r9
    2c9a:	af 92       	push	r10
    2c9c:	bf 92       	push	r11
    2c9e:	cf 92       	push	r12
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	fb 01       	movw	r30, r22
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	0f 92       	push	r0
    2cb6:	c0 90 28 16 	lds	r12, 0x1628	; 0x801628 <xTickCount>
    2cba:	d0 90 29 16 	lds	r13, 0x1629	; 0x801629 <xTickCount+0x1>
    2cbe:	e0 90 2a 16 	lds	r14, 0x162A	; 0x80162a <xTickCount+0x2>
    2cc2:	f0 90 2b 16 	lds	r15, 0x162B	; 0x80162b <xTickCount+0x3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	11 96       	adiw	r26, 0x01	; 1
    2cca:	0d 91       	ld	r16, X+
    2ccc:	1d 91       	ld	r17, X+
    2cce:	2d 91       	ld	r18, X+
    2cd0:	3c 91       	ld	r19, X
    2cd2:	14 97       	sbiw	r26, 0x04	; 4
    2cd4:	46 01       	movw	r8, r12
    2cd6:	57 01       	movw	r10, r14
    2cd8:	80 1a       	sub	r8, r16
    2cda:	91 0a       	sbc	r9, r17
    2cdc:	a2 0a       	sbc	r10, r18
    2cde:	b3 0a       	sbc	r11, r19
    2ce0:	40 81       	ld	r20, Z
    2ce2:	51 81       	ldd	r21, Z+1	; 0x01
    2ce4:	62 81       	ldd	r22, Z+2	; 0x02
    2ce6:	73 81       	ldd	r23, Z+3	; 0x03
    2ce8:	4f 3f       	cpi	r20, 0xFF	; 255
    2cea:	bf ef       	ldi	r27, 0xFF	; 255
    2cec:	5b 07       	cpc	r21, r27
    2cee:	6b 07       	cpc	r22, r27
    2cf0:	7b 07       	cpc	r23, r27
    2cf2:	39 f1       	breq	.+78     	; 0x2d42 <xTaskCheckForTimeOut+0xac>
    2cf4:	ec 01       	movw	r28, r24
    2cf6:	b8 81       	ld	r27, Y
    2cf8:	a0 91 20 16 	lds	r26, 0x1620	; 0x801620 <xNumOfOverflows>
    2cfc:	ba 17       	cp	r27, r26
    2cfe:	59 f0       	breq	.+22     	; 0x2d16 <xTaskCheckForTimeOut+0x80>
    2d00:	c0 16       	cp	r12, r16
    2d02:	d1 06       	cpc	r13, r17
    2d04:	e2 06       	cpc	r14, r18
    2d06:	f3 06       	cpc	r15, r19
    2d08:	30 f0       	brcs	.+12     	; 0x2d16 <xTaskCheckForTimeOut+0x80>
    2d0a:	10 82       	st	Z, r1
    2d0c:	11 82       	std	Z+1, r1	; 0x01
    2d0e:	12 82       	std	Z+2, r1	; 0x02
    2d10:	13 82       	std	Z+3, r1	; 0x03
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	17 c0       	rjmp	.+46     	; 0x2d44 <xTaskCheckForTimeOut+0xae>
    2d16:	84 16       	cp	r8, r20
    2d18:	95 06       	cpc	r9, r21
    2d1a:	a6 06       	cpc	r10, r22
    2d1c:	b7 06       	cpc	r11, r23
    2d1e:	58 f4       	brcc	.+22     	; 0x2d36 <xTaskCheckForTimeOut+0xa0>
    2d20:	48 19       	sub	r20, r8
    2d22:	59 09       	sbc	r21, r9
    2d24:	6a 09       	sbc	r22, r10
    2d26:	7b 09       	sbc	r23, r11
    2d28:	40 83       	st	Z, r20
    2d2a:	51 83       	std	Z+1, r21	; 0x01
    2d2c:	62 83       	std	Z+2, r22	; 0x02
    2d2e:	73 83       	std	Z+3, r23	; 0x03
    2d30:	a1 df       	rcall	.-190    	; 0x2c74 <vTaskInternalSetTimeOutState>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	07 c0       	rjmp	.+14     	; 0x2d44 <xTaskCheckForTimeOut+0xae>
    2d36:	10 82       	st	Z, r1
    2d38:	11 82       	std	Z+1, r1	; 0x01
    2d3a:	12 82       	std	Z+2, r1	; 0x02
    2d3c:	13 82       	std	Z+3, r1	; 0x03
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <xTaskCheckForTimeOut+0xae>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	0f 90       	pop	r0
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	ff 90       	pop	r15
    2d52:	ef 90       	pop	r14
    2d54:	df 90       	pop	r13
    2d56:	cf 90       	pop	r12
    2d58:	bf 90       	pop	r11
    2d5a:	af 90       	pop	r10
    2d5c:	9f 90       	pop	r9
    2d5e:	8f 90       	pop	r8
    2d60:	08 95       	ret

00002d62 <vTaskMissedYield>:
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xYieldPending>
    2d68:	08 95       	ret

00002d6a <xTaskGetCurrentTaskHandle>:
    2d6a:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2d6e:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2d72:	08 95       	ret

00002d74 <xTaskGetSchedulerState>:
    2d74:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <xSchedulerRunning>
    2d78:	88 23       	and	r24, r24
    2d7a:	31 f0       	breq	.+12     	; 0x2d88 <xTaskGetSchedulerState+0x14>
    2d7c:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <uxSchedulerSuspended>
    2d80:	81 11       	cpse	r24, r1
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <xTaskGetSchedulerState+0x18>
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	08 95       	ret
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	08 95       	ret
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	08 95       	ret

00002d90 <xTaskPriorityInherit>:
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	fc 01       	movw	r30, r24
    2d9a:	89 2b       	or	r24, r25
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <xTaskPriorityInherit+0x10>
    2d9e:	77 c0       	rjmp	.+238    	; 0x2e8e <xTaskPriorityInherit+0xfe>
    2da0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2da2:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2da6:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2daa:	5a 96       	adiw	r26, 0x1a	; 26
    2dac:	9c 91       	ld	r25, X
    2dae:	89 17       	cp	r24, r25
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <xTaskPriorityInherit+0x24>
    2db2:	63 c0       	rjmp	.+198    	; 0x2e7a <xTaskPriorityInherit+0xea>
    2db4:	46 85       	ldd	r20, Z+14	; 0x0e
    2db6:	57 85       	ldd	r21, Z+15	; 0x0f
    2db8:	60 89       	ldd	r22, Z+16	; 0x10
    2dba:	71 89       	ldd	r23, Z+17	; 0x11
    2dbc:	77 23       	and	r23, r23
    2dbe:	94 f0       	brlt	.+36     	; 0x2de4 <xTaskPriorityInherit+0x54>
    2dc0:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2dc4:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2dc8:	5a 96       	adiw	r26, 0x1a	; 26
    2dca:	9c 91       	ld	r25, X
    2dcc:	4a e0       	ldi	r20, 0x0A	; 10
    2dce:	50 e0       	ldi	r21, 0x00	; 0
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	49 1b       	sub	r20, r25
    2dd6:	51 09       	sbc	r21, r1
    2dd8:	61 09       	sbc	r22, r1
    2dda:	71 09       	sbc	r23, r1
    2ddc:	46 87       	std	Z+14, r20	; 0x0e
    2dde:	57 87       	std	Z+15, r21	; 0x0f
    2de0:	60 8b       	std	Z+16, r22	; 0x10
    2de2:	71 8b       	std	Z+17, r23	; 0x11
    2de4:	24 85       	ldd	r18, Z+12	; 0x0c
    2de6:	35 85       	ldd	r19, Z+13	; 0x0d
    2de8:	4b e0       	ldi	r20, 0x0B	; 11
    2dea:	84 9f       	mul	r24, r20
    2dec:	c0 01       	movw	r24, r0
    2dee:	11 24       	eor	r1, r1
    2df0:	87 59       	subi	r24, 0x97	; 151
    2df2:	99 4e       	sbci	r25, 0xE9	; 233
    2df4:	28 17       	cp	r18, r24
    2df6:	39 07       	cpc	r19, r25
    2df8:	b9 f5       	brne	.+110    	; 0x2e68 <xTaskPriorityInherit+0xd8>
    2dfa:	ef 01       	movw	r28, r30
    2dfc:	8f 01       	movw	r16, r30
    2dfe:	0e 5f       	subi	r16, 0xFE	; 254
    2e00:	1f 4f       	sbci	r17, 0xFF	; 255
    2e02:	c8 01       	movw	r24, r16
    2e04:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    2e08:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2e0c:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2e10:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e12:	ea 8f       	std	Y+26, r30	; 0x1a
    2e14:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    2e18:	8e 17       	cp	r24, r30
    2e1a:	10 f4       	brcc	.+4      	; 0x2e20 <xTaskPriorityInherit+0x90>
    2e1c:	e0 93 27 16 	sts	0x1627, r30	; 0x801627 <uxTopReadyPriority>
    2e20:	8b e0       	ldi	r24, 0x0B	; 11
    2e22:	8e 9f       	mul	r24, r30
    2e24:	f0 01       	movw	r30, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	e7 59       	subi	r30, 0x97	; 151
    2e2a:	f9 4e       	sbci	r31, 0xE9	; 233
    2e2c:	01 80       	ldd	r0, Z+1	; 0x01
    2e2e:	f2 81       	ldd	r31, Z+2	; 0x02
    2e30:	e0 2d       	mov	r30, r0
    2e32:	ff 83       	std	Y+7, r31	; 0x07
    2e34:	ee 83       	std	Y+6, r30	; 0x06
    2e36:	26 81       	ldd	r18, Z+6	; 0x06
    2e38:	37 81       	ldd	r19, Z+7	; 0x07
    2e3a:	39 87       	std	Y+9, r19	; 0x09
    2e3c:	28 87       	std	Y+8, r18	; 0x08
    2e3e:	a6 81       	ldd	r26, Z+6	; 0x06
    2e40:	b7 81       	ldd	r27, Z+7	; 0x07
    2e42:	15 96       	adiw	r26, 0x05	; 5
    2e44:	1c 93       	st	X, r17
    2e46:	0e 93       	st	-X, r16
    2e48:	14 97       	sbiw	r26, 0x04	; 4
    2e4a:	17 83       	std	Z+7, r17	; 0x07
    2e4c:	06 83       	std	Z+6, r16	; 0x06
    2e4e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e50:	8e 9f       	mul	r24, r30
    2e52:	f0 01       	movw	r30, r0
    2e54:	11 24       	eor	r1, r1
    2e56:	e7 59       	subi	r30, 0x97	; 151
    2e58:	f9 4e       	sbci	r31, 0xE9	; 233
    2e5a:	fd 87       	std	Y+13, r31	; 0x0d
    2e5c:	ec 87       	std	Y+12, r30	; 0x0c
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	80 83       	st	Z, r24
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	16 c0       	rjmp	.+44     	; 0x2e94 <xTaskPriorityInherit+0x104>
    2e68:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2e6c:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2e70:	5a 96       	adiw	r26, 0x1a	; 26
    2e72:	8c 91       	ld	r24, X
    2e74:	82 8f       	std	Z+26, r24	; 0x1a
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	0d c0       	rjmp	.+26     	; 0x2e94 <xTaskPriorityInherit+0x104>
    2e7a:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e7c:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    2e80:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    2e84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e86:	98 17       	cp	r25, r24
    2e88:	20 f0       	brcs	.+8      	; 0x2e92 <xTaskPriorityInherit+0x102>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <xTaskPriorityInherit+0x104>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <xTaskPriorityInherit+0x104>
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <xTaskPriorityDisinherit>:
    2e9e:	0f 93       	push	r16
    2ea0:	1f 93       	push	r17
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	89 2b       	or	r24, r25
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <xTaskPriorityDisinherit+0x10>
    2eac:	49 c0       	rjmp	.+146    	; 0x2f40 <xTaskPriorityDisinherit+0xa2>
    2eae:	86 a5       	ldd	r24, Z+46	; 0x2e
    2eb0:	81 50       	subi	r24, 0x01	; 1
    2eb2:	86 a7       	std	Z+46, r24	; 0x2e
    2eb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    2eb6:	95 a5       	ldd	r25, Z+45	; 0x2d
    2eb8:	29 17       	cp	r18, r25
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <xTaskPriorityDisinherit+0x20>
    2ebc:	43 c0       	rjmp	.+134    	; 0x2f44 <xTaskPriorityDisinherit+0xa6>
    2ebe:	81 11       	cpse	r24, r1
    2ec0:	43 c0       	rjmp	.+134    	; 0x2f48 <xTaskPriorityDisinherit+0xaa>
    2ec2:	ef 01       	movw	r28, r30
    2ec4:	8f 01       	movw	r16, r30
    2ec6:	0e 5f       	subi	r16, 0xFE	; 254
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eca:	c8 01       	movw	r24, r16
    2ecc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    2ed0:	ed a5       	ldd	r30, Y+45	; 0x2d
    2ed2:	ea 8f       	std	Y+26, r30	; 0x1a
    2ed4:	8a e0       	ldi	r24, 0x0A	; 10
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	8e 1b       	sub	r24, r30
    2ede:	91 09       	sbc	r25, r1
    2ee0:	a1 09       	sbc	r26, r1
    2ee2:	b1 09       	sbc	r27, r1
    2ee4:	8e 87       	std	Y+14, r24	; 0x0e
    2ee6:	9f 87       	std	Y+15, r25	; 0x0f
    2ee8:	a8 8b       	std	Y+16, r26	; 0x10
    2eea:	b9 8b       	std	Y+17, r27	; 0x11
    2eec:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    2ef0:	8e 17       	cp	r24, r30
    2ef2:	10 f4       	brcc	.+4      	; 0x2ef8 <xTaskPriorityDisinherit+0x5a>
    2ef4:	e0 93 27 16 	sts	0x1627, r30	; 0x801627 <uxTopReadyPriority>
    2ef8:	8b e0       	ldi	r24, 0x0B	; 11
    2efa:	8e 9f       	mul	r24, r30
    2efc:	f0 01       	movw	r30, r0
    2efe:	11 24       	eor	r1, r1
    2f00:	e7 59       	subi	r30, 0x97	; 151
    2f02:	f9 4e       	sbci	r31, 0xE9	; 233
    2f04:	01 80       	ldd	r0, Z+1	; 0x01
    2f06:	f2 81       	ldd	r31, Z+2	; 0x02
    2f08:	e0 2d       	mov	r30, r0
    2f0a:	ff 83       	std	Y+7, r31	; 0x07
    2f0c:	ee 83       	std	Y+6, r30	; 0x06
    2f0e:	26 81       	ldd	r18, Z+6	; 0x06
    2f10:	37 81       	ldd	r19, Z+7	; 0x07
    2f12:	39 87       	std	Y+9, r19	; 0x09
    2f14:	28 87       	std	Y+8, r18	; 0x08
    2f16:	a6 81       	ldd	r26, Z+6	; 0x06
    2f18:	b7 81       	ldd	r27, Z+7	; 0x07
    2f1a:	15 96       	adiw	r26, 0x05	; 5
    2f1c:	1c 93       	st	X, r17
    2f1e:	0e 93       	st	-X, r16
    2f20:	14 97       	sbiw	r26, 0x04	; 4
    2f22:	17 83       	std	Z+7, r17	; 0x07
    2f24:	06 83       	std	Z+6, r16	; 0x06
    2f26:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f28:	8e 9f       	mul	r24, r30
    2f2a:	f0 01       	movw	r30, r0
    2f2c:	11 24       	eor	r1, r1
    2f2e:	e7 59       	subi	r30, 0x97	; 151
    2f30:	f9 4e       	sbci	r31, 0xE9	; 233
    2f32:	fd 87       	std	Y+13, r31	; 0x0d
    2f34:	ec 87       	std	Y+12, r30	; 0x0c
    2f36:	80 81       	ld	r24, Z
    2f38:	8f 5f       	subi	r24, 0xFF	; 255
    2f3a:	80 83       	st	Z, r24
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	05 c0       	rjmp	.+10     	; 0x2f4a <xTaskPriorityDisinherit+0xac>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	03 c0       	rjmp	.+6      	; 0x2f4a <xTaskPriorityDisinherit+0xac>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <xTaskPriorityDisinherit+0xac>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	08 95       	ret

00002f54 <vTaskPriorityDisinheritAfterTimeout>:
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	89 2b       	or	r24, r25
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2f62:	5a c0       	rjmp	.+180    	; 0x3018 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f64:	85 a5       	ldd	r24, Z+45	; 0x2d
    2f66:	86 17       	cp	r24, r22
    2f68:	08 f4       	brcc	.+2      	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f6a:	86 2f       	mov	r24, r22
    2f6c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f6e:	89 17       	cp	r24, r25
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2f72:	52 c0       	rjmp	.+164    	; 0x3018 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f74:	26 a5       	ldd	r18, Z+46	; 0x2e
    2f76:	21 30       	cpi	r18, 0x01	; 1
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <vTaskPriorityDisinheritAfterTimeout+0x28>
    2f7a:	4e c0       	rjmp	.+156    	; 0x3018 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f7c:	82 8f       	std	Z+26, r24	; 0x1a
    2f7e:	46 85       	ldd	r20, Z+14	; 0x0e
    2f80:	57 85       	ldd	r21, Z+15	; 0x0f
    2f82:	60 89       	ldd	r22, Z+16	; 0x10
    2f84:	71 89       	ldd	r23, Z+17	; 0x11
    2f86:	77 23       	and	r23, r23
    2f88:	64 f0       	brlt	.+24     	; 0x2fa2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2f8a:	4a e0       	ldi	r20, 0x0A	; 10
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	48 1b       	sub	r20, r24
    2f94:	51 09       	sbc	r21, r1
    2f96:	61 09       	sbc	r22, r1
    2f98:	71 09       	sbc	r23, r1
    2f9a:	46 87       	std	Z+14, r20	; 0x0e
    2f9c:	57 87       	std	Z+15, r21	; 0x0f
    2f9e:	60 8b       	std	Z+16, r22	; 0x10
    2fa0:	71 8b       	std	Z+17, r23	; 0x11
    2fa2:	24 85       	ldd	r18, Z+12	; 0x0c
    2fa4:	35 85       	ldd	r19, Z+13	; 0x0d
    2fa6:	4b e0       	ldi	r20, 0x0B	; 11
    2fa8:	94 9f       	mul	r25, r20
    2faa:	c0 01       	movw	r24, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	87 59       	subi	r24, 0x97	; 151
    2fb0:	99 4e       	sbci	r25, 0xE9	; 233
    2fb2:	28 17       	cp	r18, r24
    2fb4:	39 07       	cpc	r19, r25
    2fb6:	81 f5       	brne	.+96     	; 0x3018 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2fb8:	ef 01       	movw	r28, r30
    2fba:	8f 01       	movw	r16, r30
    2fbc:	0e 5f       	subi	r16, 0xFE	; 254
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    2fc6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fc8:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    2fcc:	8e 17       	cp	r24, r30
    2fce:	10 f4       	brcc	.+4      	; 0x2fd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2fd0:	e0 93 27 16 	sts	0x1627, r30	; 0x801627 <uxTopReadyPriority>
    2fd4:	8b e0       	ldi	r24, 0x0B	; 11
    2fd6:	8e 9f       	mul	r24, r30
    2fd8:	f0 01       	movw	r30, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	e7 59       	subi	r30, 0x97	; 151
    2fde:	f9 4e       	sbci	r31, 0xE9	; 233
    2fe0:	01 80       	ldd	r0, Z+1	; 0x01
    2fe2:	f2 81       	ldd	r31, Z+2	; 0x02
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	ff 83       	std	Y+7, r31	; 0x07
    2fe8:	ee 83       	std	Y+6, r30	; 0x06
    2fea:	26 81       	ldd	r18, Z+6	; 0x06
    2fec:	37 81       	ldd	r19, Z+7	; 0x07
    2fee:	39 87       	std	Y+9, r19	; 0x09
    2ff0:	28 87       	std	Y+8, r18	; 0x08
    2ff2:	a6 81       	ldd	r26, Z+6	; 0x06
    2ff4:	b7 81       	ldd	r27, Z+7	; 0x07
    2ff6:	15 96       	adiw	r26, 0x05	; 5
    2ff8:	1c 93       	st	X, r17
    2ffa:	0e 93       	st	-X, r16
    2ffc:	14 97       	sbiw	r26, 0x04	; 4
    2ffe:	17 83       	std	Z+7, r17	; 0x07
    3000:	06 83       	std	Z+6, r16	; 0x06
    3002:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3004:	8e 9f       	mul	r24, r30
    3006:	f0 01       	movw	r30, r0
    3008:	11 24       	eor	r1, r1
    300a:	e7 59       	subi	r30, 0x97	; 151
    300c:	f9 4e       	sbci	r31, 0xE9	; 233
    300e:	fd 87       	std	Y+13, r31	; 0x0d
    3010:	ec 87       	std	Y+12, r30	; 0x0c
    3012:	80 81       	ld	r24, Z
    3014:	8f 5f       	subi	r24, 0xFF	; 255
    3016:	80 83       	st	Z, r24
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	08 95       	ret

00003022 <uxTaskResetEventItemValue>:
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    302e:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    3032:	66 85       	ldd	r22, Z+14	; 0x0e
    3034:	77 85       	ldd	r23, Z+15	; 0x0f
    3036:	80 89       	ldd	r24, Z+16	; 0x10
    3038:	91 89       	ldd	r25, Z+17	; 0x11
    303a:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    303e:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    3042:	a0 91 d7 16 	lds	r26, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3046:	b0 91 d8 16 	lds	r27, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    304a:	5a 96       	adiw	r26, 0x1a	; 26
    304c:	2c 91       	ld	r18, X
    304e:	0f 2e       	mov	r0, r31
    3050:	fa e0       	ldi	r31, 0x0A	; 10
    3052:	cf 2e       	mov	r12, r31
    3054:	d1 2c       	mov	r13, r1
    3056:	e1 2c       	mov	r14, r1
    3058:	f1 2c       	mov	r15, r1
    305a:	f0 2d       	mov	r31, r0
    305c:	c2 1a       	sub	r12, r18
    305e:	d1 08       	sbc	r13, r1
    3060:	e1 08       	sbc	r14, r1
    3062:	f1 08       	sbc	r15, r1
    3064:	c6 86       	std	Z+14, r12	; 0x0e
    3066:	d7 86       	std	Z+15, r13	; 0x0f
    3068:	e0 8a       	std	Z+16, r14	; 0x10
    306a:	f1 8a       	std	Z+17, r15	; 0x11
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	df 90       	pop	r13
    3072:	cf 90       	pop	r12
    3074:	08 95       	ret

00003076 <pvTaskIncrementMutexHeldCount>:
    3076:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    307a:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    307e:	89 2b       	or	r24, r25
    3080:	39 f0       	breq	.+14     	; 0x3090 <pvTaskIncrementMutexHeldCount+0x1a>
    3082:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3086:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    308a:	86 a5       	ldd	r24, Z+46	; 0x2e
    308c:	8f 5f       	subi	r24, 0xFF	; 255
    308e:	86 a7       	std	Z+46, r24	; 0x2e
    3090:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3094:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    3098:	08 95       	ret

0000309a <xTaskGenericNotifyWait>:
    309a:	4f 92       	push	r4
    309c:	5f 92       	push	r5
    309e:	6f 92       	push	r6
    30a0:	7f 92       	push	r7
    30a2:	af 92       	push	r10
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	28 01       	movw	r4, r16
    30b8:	39 01       	movw	r6, r18
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	0f 92       	push	r0
    30c0:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    30c4:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    30c8:	c8 2f       	mov	r28, r24
    30ca:	d0 e0       	ldi	r29, 0x00	; 0
    30cc:	ec 0f       	add	r30, r28
    30ce:	fd 1f       	adc	r31, r29
    30d0:	83 a9       	ldd	r24, Z+51	; 0x33
    30d2:	82 30       	cpi	r24, 0x02	; 2
    30d4:	79 f1       	breq	.+94     	; 0x3134 <xTaskGenericNotifyWait+0x9a>
    30d6:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    30da:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    30de:	ce 01       	movw	r24, r28
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	e8 0f       	add	r30, r24
    30ea:	f9 1f       	adc	r31, r25
    30ec:	87 a5       	ldd	r24, Z+47	; 0x2f
    30ee:	90 a9       	ldd	r25, Z+48	; 0x30
    30f0:	a1 a9       	ldd	r26, Z+49	; 0x31
    30f2:	b2 a9       	ldd	r27, Z+50	; 0x32
    30f4:	40 95       	com	r20
    30f6:	50 95       	com	r21
    30f8:	60 95       	com	r22
    30fa:	70 95       	com	r23
    30fc:	48 23       	and	r20, r24
    30fe:	59 23       	and	r21, r25
    3100:	6a 23       	and	r22, r26
    3102:	7b 23       	and	r23, r27
    3104:	47 a7       	std	Z+47, r20	; 0x2f
    3106:	50 ab       	std	Z+48, r21	; 0x30
    3108:	61 ab       	std	Z+49, r22	; 0x31
    310a:	72 ab       	std	Z+50, r23	; 0x32
    310c:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3110:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    3114:	ec 0f       	add	r30, r28
    3116:	fd 1f       	adc	r31, r29
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	83 ab       	std	Z+51, r24	; 0x33
    311c:	a1 14       	cp	r10, r1
    311e:	b1 04       	cpc	r11, r1
    3120:	c1 04       	cpc	r12, r1
    3122:	d1 04       	cpc	r13, r1
    3124:	39 f0       	breq	.+14     	; 0x3134 <xTaskGenericNotifyWait+0x9a>
    3126:	41 e0       	ldi	r20, 0x01	; 1
    3128:	c6 01       	movw	r24, r12
    312a:	b5 01       	movw	r22, r10
    312c:	0e 94 11 10 	call	0x2022	; 0x2022 <prvAddCurrentTaskToDelayedList>
    3130:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    3134:	0f 90       	pop	r0
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	0f 92       	push	r0
    313e:	e1 14       	cp	r14, r1
    3140:	f1 04       	cpc	r15, r1
    3142:	a1 f0       	breq	.+40     	; 0x316c <xTaskGenericNotifyWait+0xd2>
    3144:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3148:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    314c:	ce 01       	movw	r24, r28
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	e8 0f       	add	r30, r24
    3158:	f9 1f       	adc	r31, r25
    315a:	87 a5       	ldd	r24, Z+47	; 0x2f
    315c:	90 a9       	ldd	r25, Z+48	; 0x30
    315e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3160:	b2 a9       	ldd	r27, Z+50	; 0x32
    3162:	f7 01       	movw	r30, r14
    3164:	80 83       	st	Z, r24
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	a2 83       	std	Z+2, r26	; 0x02
    316a:	b3 83       	std	Z+3, r27	; 0x03
    316c:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3170:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    3174:	ec 0f       	add	r30, r28
    3176:	fd 1f       	adc	r31, r29
    3178:	83 a9       	ldd	r24, Z+51	; 0x33
    317a:	82 30       	cpi	r24, 0x02	; 2
    317c:	e9 f4       	brne	.+58     	; 0x31b8 <xTaskGenericNotifyWait+0x11e>
    317e:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3182:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    3186:	ce 01       	movw	r24, r28
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	e8 0f       	add	r30, r24
    3192:	f9 1f       	adc	r31, r25
    3194:	87 a5       	ldd	r24, Z+47	; 0x2f
    3196:	90 a9       	ldd	r25, Z+48	; 0x30
    3198:	a1 a9       	ldd	r26, Z+49	; 0x31
    319a:	b2 a9       	ldd	r27, Z+50	; 0x32
    319c:	40 94       	com	r4
    319e:	50 94       	com	r5
    31a0:	60 94       	com	r6
    31a2:	70 94       	com	r7
    31a4:	48 22       	and	r4, r24
    31a6:	59 22       	and	r5, r25
    31a8:	6a 22       	and	r6, r26
    31aa:	7b 22       	and	r7, r27
    31ac:	47 a6       	std	Z+47, r4	; 0x2f
    31ae:	50 aa       	std	Z+48, r5	; 0x30
    31b0:	61 aa       	std	Z+49, r6	; 0x31
    31b2:	72 aa       	std	Z+50, r7	; 0x32
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <xTaskGenericNotifyWait+0x120>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	20 91 d7 16 	lds	r18, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    31be:	30 91 d8 16 	lds	r19, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    31c2:	c2 0f       	add	r28, r18
    31c4:	d3 1f       	adc	r29, r19
    31c6:	1b aa       	std	Y+51, r1	; 0x33
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	bf 90       	pop	r11
    31de:	af 90       	pop	r10
    31e0:	7f 90       	pop	r7
    31e2:	6f 90       	pop	r6
    31e4:	5f 90       	pop	r5
    31e6:	4f 90       	pop	r4
    31e8:	08 95       	ret

000031ea <xTaskGenericNotify>:
    31ea:	8f 92       	push	r8
    31ec:	9f 92       	push	r9
    31ee:	af 92       	push	r10
    31f0:	bf 92       	push	r11
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	dc 01       	movw	r26, r24
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	0f 92       	push	r0
    3204:	e1 14       	cp	r14, r1
    3206:	f1 04       	cpc	r15, r1
    3208:	89 f0       	breq	.+34     	; 0x322c <xTaskGenericNotify+0x42>
    320a:	e6 2f       	mov	r30, r22
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	ee 0f       	add	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	ee 0f       	add	r30, r30
    3214:	ff 1f       	adc	r31, r31
    3216:	e8 0f       	add	r30, r24
    3218:	f9 1f       	adc	r31, r25
    321a:	87 a4       	ldd	r8, Z+47	; 0x2f
    321c:	90 a8       	ldd	r9, Z+48	; 0x30
    321e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3220:	b2 a8       	ldd	r11, Z+50	; 0x32
    3222:	f7 01       	movw	r30, r14
    3224:	80 82       	st	Z, r8
    3226:	91 82       	std	Z+1, r9	; 0x01
    3228:	a2 82       	std	Z+2, r10	; 0x02
    322a:	b3 82       	std	Z+3, r11	; 0x03
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	fd 01       	movw	r30, r26
    3230:	e6 0f       	add	r30, r22
    3232:	f7 1f       	adc	r31, r23
    3234:	83 a9       	ldd	r24, Z+51	; 0x33
    3236:	92 e0       	ldi	r25, 0x02	; 2
    3238:	93 ab       	std	Z+51, r25	; 0x33
    323a:	02 30       	cpi	r16, 0x02	; 2
    323c:	01 f1       	breq	.+64     	; 0x327e <xTaskGenericNotify+0x94>
    323e:	18 f4       	brcc	.+6      	; 0x3246 <xTaskGenericNotify+0x5c>
    3240:	01 30       	cpi	r16, 0x01	; 1
    3242:	31 f0       	breq	.+12     	; 0x3250 <xTaskGenericNotify+0x66>
    3244:	4d c0       	rjmp	.+154    	; 0x32e0 <xTaskGenericNotify+0xf6>
    3246:	03 30       	cpi	r16, 0x03	; 3
    3248:	79 f1       	breq	.+94     	; 0x32a8 <xTaskGenericNotify+0xbe>
    324a:	04 30       	cpi	r16, 0x04	; 4
    324c:	d1 f1       	breq	.+116    	; 0x32c2 <xTaskGenericNotify+0xd8>
    324e:	48 c0       	rjmp	.+144    	; 0x32e0 <xTaskGenericNotify+0xf6>
    3250:	66 0f       	add	r22, r22
    3252:	77 1f       	adc	r23, r23
    3254:	66 0f       	add	r22, r22
    3256:	77 1f       	adc	r23, r23
    3258:	fd 01       	movw	r30, r26
    325a:	e6 0f       	add	r30, r22
    325c:	f7 1f       	adc	r31, r23
    325e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3260:	90 a8       	ldd	r9, Z+48	; 0x30
    3262:	a1 a8       	ldd	r10, Z+49	; 0x31
    3264:	b2 a8       	ldd	r11, Z+50	; 0x32
    3266:	ba 01       	movw	r22, r20
    3268:	a9 01       	movw	r20, r18
    326a:	48 29       	or	r20, r8
    326c:	59 29       	or	r21, r9
    326e:	6a 29       	or	r22, r10
    3270:	7b 29       	or	r23, r11
    3272:	47 a7       	std	Z+47, r20	; 0x2f
    3274:	50 ab       	std	Z+48, r21	; 0x30
    3276:	61 ab       	std	Z+49, r22	; 0x31
    3278:	72 ab       	std	Z+50, r23	; 0x32
    327a:	01 e0       	ldi	r16, 0x01	; 1
    327c:	34 c0       	rjmp	.+104    	; 0x32e6 <xTaskGenericNotify+0xfc>
    327e:	66 0f       	add	r22, r22
    3280:	77 1f       	adc	r23, r23
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	fd 01       	movw	r30, r26
    3288:	e6 0f       	add	r30, r22
    328a:	f7 1f       	adc	r31, r23
    328c:	47 a5       	ldd	r20, Z+47	; 0x2f
    328e:	50 a9       	ldd	r21, Z+48	; 0x30
    3290:	61 a9       	ldd	r22, Z+49	; 0x31
    3292:	72 a9       	ldd	r23, Z+50	; 0x32
    3294:	4f 5f       	subi	r20, 0xFF	; 255
    3296:	5f 4f       	sbci	r21, 0xFF	; 255
    3298:	6f 4f       	sbci	r22, 0xFF	; 255
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	47 a7       	std	Z+47, r20	; 0x2f
    329e:	50 ab       	std	Z+48, r21	; 0x30
    32a0:	61 ab       	std	Z+49, r22	; 0x31
    32a2:	72 ab       	std	Z+50, r23	; 0x32
    32a4:	01 e0       	ldi	r16, 0x01	; 1
    32a6:	1f c0       	rjmp	.+62     	; 0x32e6 <xTaskGenericNotify+0xfc>
    32a8:	66 0f       	add	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	66 0f       	add	r22, r22
    32ae:	77 1f       	adc	r23, r23
    32b0:	fd 01       	movw	r30, r26
    32b2:	e6 0f       	add	r30, r22
    32b4:	f7 1f       	adc	r31, r23
    32b6:	27 a7       	std	Z+47, r18	; 0x2f
    32b8:	30 ab       	std	Z+48, r19	; 0x30
    32ba:	41 ab       	std	Z+49, r20	; 0x31
    32bc:	52 ab       	std	Z+50, r21	; 0x32
    32be:	01 e0       	ldi	r16, 0x01	; 1
    32c0:	12 c0       	rjmp	.+36     	; 0x32e6 <xTaskGenericNotify+0xfc>
    32c2:	82 30       	cpi	r24, 0x02	; 2
    32c4:	79 f0       	breq	.+30     	; 0x32e4 <xTaskGenericNotify+0xfa>
    32c6:	66 0f       	add	r22, r22
    32c8:	77 1f       	adc	r23, r23
    32ca:	66 0f       	add	r22, r22
    32cc:	77 1f       	adc	r23, r23
    32ce:	fd 01       	movw	r30, r26
    32d0:	e6 0f       	add	r30, r22
    32d2:	f7 1f       	adc	r31, r23
    32d4:	27 a7       	std	Z+47, r18	; 0x2f
    32d6:	30 ab       	std	Z+48, r19	; 0x30
    32d8:	41 ab       	std	Z+49, r20	; 0x31
    32da:	52 ab       	std	Z+50, r21	; 0x32
    32dc:	01 e0       	ldi	r16, 0x01	; 1
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <xTaskGenericNotify+0xfc>
    32e0:	01 e0       	ldi	r16, 0x01	; 1
    32e2:	01 c0       	rjmp	.+2      	; 0x32e6 <xTaskGenericNotify+0xfc>
    32e4:	00 e0       	ldi	r16, 0x00	; 0
    32e6:	81 30       	cpi	r24, 0x01	; 1
    32e8:	09 f0       	breq	.+2      	; 0x32ec <xTaskGenericNotify+0x102>
    32ea:	69 c0       	rjmp	.+210    	; 0x33be <xTaskGenericNotify+0x1d4>
    32ec:	1c 96       	adiw	r26, 0x0c	; 12
    32ee:	ed 91       	ld	r30, X+
    32f0:	fc 91       	ld	r31, X
    32f2:	1d 97       	sbiw	r26, 0x0d	; 13
    32f4:	16 96       	adiw	r26, 0x06	; 6
    32f6:	cd 91       	ld	r28, X+
    32f8:	dc 91       	ld	r29, X
    32fa:	17 97       	sbiw	r26, 0x07	; 7
    32fc:	18 96       	adiw	r26, 0x08	; 8
    32fe:	8d 91       	ld	r24, X+
    3300:	9c 91       	ld	r25, X
    3302:	19 97       	sbiw	r26, 0x09	; 9
    3304:	9f 83       	std	Y+7, r25	; 0x07
    3306:	8e 83       	std	Y+6, r24	; 0x06
    3308:	18 96       	adiw	r26, 0x08	; 8
    330a:	cd 91       	ld	r28, X+
    330c:	dc 91       	ld	r29, X
    330e:	19 97       	sbiw	r26, 0x09	; 9
    3310:	16 96       	adiw	r26, 0x06	; 6
    3312:	8d 91       	ld	r24, X+
    3314:	9c 91       	ld	r25, X
    3316:	17 97       	sbiw	r26, 0x07	; 7
    3318:	9d 83       	std	Y+5, r25	; 0x05
    331a:	8c 83       	std	Y+4, r24	; 0x04
    331c:	81 81       	ldd	r24, Z+1	; 0x01
    331e:	92 81       	ldd	r25, Z+2	; 0x02
    3320:	9d 01       	movw	r18, r26
    3322:	2e 5f       	subi	r18, 0xFE	; 254
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	82 17       	cp	r24, r18
    3328:	93 07       	cpc	r25, r19
    332a:	31 f4       	brne	.+12     	; 0x3338 <xTaskGenericNotify+0x14e>
    332c:	18 96       	adiw	r26, 0x08	; 8
    332e:	8d 91       	ld	r24, X+
    3330:	9c 91       	ld	r25, X
    3332:	19 97       	sbiw	r26, 0x09	; 9
    3334:	92 83       	std	Z+2, r25	; 0x02
    3336:	81 83       	std	Z+1, r24	; 0x01
    3338:	1d 96       	adiw	r26, 0x0d	; 13
    333a:	1c 92       	st	X, r1
    333c:	1e 92       	st	-X, r1
    333e:	1c 97       	sbiw	r26, 0x0c	; 12
    3340:	80 81       	ld	r24, Z
    3342:	81 50       	subi	r24, 0x01	; 1
    3344:	80 83       	st	Z, r24
    3346:	5a 96       	adiw	r26, 0x1a	; 26
    3348:	ec 91       	ld	r30, X
    334a:	5a 97       	sbiw	r26, 0x1a	; 26
    334c:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <uxTopReadyPriority>
    3350:	8e 17       	cp	r24, r30
    3352:	10 f4       	brcc	.+4      	; 0x3358 <xTaskGenericNotify+0x16e>
    3354:	e0 93 27 16 	sts	0x1627, r30	; 0x801627 <uxTopReadyPriority>
    3358:	8b e0       	ldi	r24, 0x0B	; 11
    335a:	8e 9f       	mul	r24, r30
    335c:	f0 01       	movw	r30, r0
    335e:	11 24       	eor	r1, r1
    3360:	e7 59       	subi	r30, 0x97	; 151
    3362:	f9 4e       	sbci	r31, 0xE9	; 233
    3364:	01 80       	ldd	r0, Z+1	; 0x01
    3366:	f2 81       	ldd	r31, Z+2	; 0x02
    3368:	e0 2d       	mov	r30, r0
    336a:	17 96       	adiw	r26, 0x07	; 7
    336c:	fc 93       	st	X, r31
    336e:	ee 93       	st	-X, r30
    3370:	16 97       	sbiw	r26, 0x06	; 6
    3372:	46 81       	ldd	r20, Z+6	; 0x06
    3374:	57 81       	ldd	r21, Z+7	; 0x07
    3376:	19 96       	adiw	r26, 0x09	; 9
    3378:	5c 93       	st	X, r21
    337a:	4e 93       	st	-X, r20
    337c:	18 97       	sbiw	r26, 0x08	; 8
    337e:	c6 81       	ldd	r28, Z+6	; 0x06
    3380:	d7 81       	ldd	r29, Z+7	; 0x07
    3382:	3d 83       	std	Y+5, r19	; 0x05
    3384:	2c 83       	std	Y+4, r18	; 0x04
    3386:	37 83       	std	Z+7, r19	; 0x07
    3388:	26 83       	std	Z+6, r18	; 0x06
    338a:	5a 96       	adiw	r26, 0x1a	; 26
    338c:	ec 91       	ld	r30, X
    338e:	5a 97       	sbiw	r26, 0x1a	; 26
    3390:	8e 9f       	mul	r24, r30
    3392:	f0 01       	movw	r30, r0
    3394:	11 24       	eor	r1, r1
    3396:	e7 59       	subi	r30, 0x97	; 151
    3398:	f9 4e       	sbci	r31, 0xE9	; 233
    339a:	1d 96       	adiw	r26, 0x0d	; 13
    339c:	fc 93       	st	X, r31
    339e:	ee 93       	st	-X, r30
    33a0:	1c 97       	sbiw	r26, 0x0c	; 12
    33a2:	80 81       	ld	r24, Z
    33a4:	8f 5f       	subi	r24, 0xFF	; 255
    33a6:	80 83       	st	Z, r24
    33a8:	5a 96       	adiw	r26, 0x1a	; 26
    33aa:	9c 91       	ld	r25, X
    33ac:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    33b0:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    33b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b6:	89 17       	cp	r24, r25
    33b8:	10 f4       	brcc	.+4      	; 0x33be <xTaskGenericNotify+0x1d4>
    33ba:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    33be:	0f 90       	pop	r0
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	80 2f       	mov	r24, r16
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	0f 91       	pop	r16
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	bf 90       	pop	r11
    33d0:	af 90       	pop	r10
    33d2:	9f 90       	pop	r9
    33d4:	8f 90       	pop	r8
    33d6:	08 95       	ret

000033d8 <xTaskGenericNotifyFromISR>:
    33d8:	8f 92       	push	r8
    33da:	9f 92       	push	r9
    33dc:	af 92       	push	r10
    33de:	bf 92       	push	r11
    33e0:	cf 92       	push	r12
    33e2:	df 92       	push	r13
    33e4:	ef 92       	push	r14
    33e6:	ff 92       	push	r15
    33e8:	0f 93       	push	r16
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	dc 01       	movw	r26, r24
    33f0:	e1 14       	cp	r14, r1
    33f2:	f1 04       	cpc	r15, r1
    33f4:	89 f0       	breq	.+34     	; 0x3418 <xTaskGenericNotifyFromISR+0x40>
    33f6:	e6 2f       	mov	r30, r22
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	ee 0f       	add	r30, r30
    33fc:	ff 1f       	adc	r31, r31
    33fe:	ee 0f       	add	r30, r30
    3400:	ff 1f       	adc	r31, r31
    3402:	e8 0f       	add	r30, r24
    3404:	f9 1f       	adc	r31, r25
    3406:	87 a4       	ldd	r8, Z+47	; 0x2f
    3408:	90 a8       	ldd	r9, Z+48	; 0x30
    340a:	a1 a8       	ldd	r10, Z+49	; 0x31
    340c:	b2 a8       	ldd	r11, Z+50	; 0x32
    340e:	f7 01       	movw	r30, r14
    3410:	80 82       	st	Z, r8
    3412:	91 82       	std	Z+1, r9	; 0x01
    3414:	a2 82       	std	Z+2, r10	; 0x02
    3416:	b3 82       	std	Z+3, r11	; 0x03
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	fd 01       	movw	r30, r26
    341c:	e6 0f       	add	r30, r22
    341e:	f7 1f       	adc	r31, r23
    3420:	93 a9       	ldd	r25, Z+51	; 0x33
    3422:	82 e0       	ldi	r24, 0x02	; 2
    3424:	83 ab       	std	Z+51, r24	; 0x33
    3426:	02 30       	cpi	r16, 0x02	; 2
    3428:	01 f1       	breq	.+64     	; 0x346a <xTaskGenericNotifyFromISR+0x92>
    342a:	18 f4       	brcc	.+6      	; 0x3432 <xTaskGenericNotifyFromISR+0x5a>
    342c:	01 30       	cpi	r16, 0x01	; 1
    342e:	31 f0       	breq	.+12     	; 0x343c <xTaskGenericNotifyFromISR+0x64>
    3430:	4d c0       	rjmp	.+154    	; 0x34cc <xTaskGenericNotifyFromISR+0xf4>
    3432:	03 30       	cpi	r16, 0x03	; 3
    3434:	79 f1       	breq	.+94     	; 0x3494 <xTaskGenericNotifyFromISR+0xbc>
    3436:	04 30       	cpi	r16, 0x04	; 4
    3438:	d1 f1       	breq	.+116    	; 0x34ae <xTaskGenericNotifyFromISR+0xd6>
    343a:	48 c0       	rjmp	.+144    	; 0x34cc <xTaskGenericNotifyFromISR+0xf4>
    343c:	66 0f       	add	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	66 0f       	add	r22, r22
    3442:	77 1f       	adc	r23, r23
    3444:	fd 01       	movw	r30, r26
    3446:	e6 0f       	add	r30, r22
    3448:	f7 1f       	adc	r31, r23
    344a:	87 a4       	ldd	r8, Z+47	; 0x2f
    344c:	90 a8       	ldd	r9, Z+48	; 0x30
    344e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3450:	b2 a8       	ldd	r11, Z+50	; 0x32
    3452:	ba 01       	movw	r22, r20
    3454:	a9 01       	movw	r20, r18
    3456:	48 29       	or	r20, r8
    3458:	59 29       	or	r21, r9
    345a:	6a 29       	or	r22, r10
    345c:	7b 29       	or	r23, r11
    345e:	47 a7       	std	Z+47, r20	; 0x2f
    3460:	50 ab       	std	Z+48, r21	; 0x30
    3462:	61 ab       	std	Z+49, r22	; 0x31
    3464:	72 ab       	std	Z+50, r23	; 0x32
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	34 c0       	rjmp	.+104    	; 0x34d2 <xTaskGenericNotifyFromISR+0xfa>
    346a:	66 0f       	add	r22, r22
    346c:	77 1f       	adc	r23, r23
    346e:	66 0f       	add	r22, r22
    3470:	77 1f       	adc	r23, r23
    3472:	fd 01       	movw	r30, r26
    3474:	e6 0f       	add	r30, r22
    3476:	f7 1f       	adc	r31, r23
    3478:	47 a5       	ldd	r20, Z+47	; 0x2f
    347a:	50 a9       	ldd	r21, Z+48	; 0x30
    347c:	61 a9       	ldd	r22, Z+49	; 0x31
    347e:	72 a9       	ldd	r23, Z+50	; 0x32
    3480:	4f 5f       	subi	r20, 0xFF	; 255
    3482:	5f 4f       	sbci	r21, 0xFF	; 255
    3484:	6f 4f       	sbci	r22, 0xFF	; 255
    3486:	7f 4f       	sbci	r23, 0xFF	; 255
    3488:	47 a7       	std	Z+47, r20	; 0x2f
    348a:	50 ab       	std	Z+48, r21	; 0x30
    348c:	61 ab       	std	Z+49, r22	; 0x31
    348e:	72 ab       	std	Z+50, r23	; 0x32
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	1f c0       	rjmp	.+62     	; 0x34d2 <xTaskGenericNotifyFromISR+0xfa>
    3494:	66 0f       	add	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	66 0f       	add	r22, r22
    349a:	77 1f       	adc	r23, r23
    349c:	fd 01       	movw	r30, r26
    349e:	e6 0f       	add	r30, r22
    34a0:	f7 1f       	adc	r31, r23
    34a2:	27 a7       	std	Z+47, r18	; 0x2f
    34a4:	30 ab       	std	Z+48, r19	; 0x30
    34a6:	41 ab       	std	Z+49, r20	; 0x31
    34a8:	52 ab       	std	Z+50, r21	; 0x32
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	12 c0       	rjmp	.+36     	; 0x34d2 <xTaskGenericNotifyFromISR+0xfa>
    34ae:	92 30       	cpi	r25, 0x02	; 2
    34b0:	79 f0       	breq	.+30     	; 0x34d0 <xTaskGenericNotifyFromISR+0xf8>
    34b2:	66 0f       	add	r22, r22
    34b4:	77 1f       	adc	r23, r23
    34b6:	66 0f       	add	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	fd 01       	movw	r30, r26
    34bc:	e6 0f       	add	r30, r22
    34be:	f7 1f       	adc	r31, r23
    34c0:	27 a7       	std	Z+47, r18	; 0x2f
    34c2:	30 ab       	std	Z+48, r19	; 0x30
    34c4:	41 ab       	std	Z+49, r20	; 0x31
    34c6:	52 ab       	std	Z+50, r21	; 0x32
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <xTaskGenericNotifyFromISR+0xfa>
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	01 c0       	rjmp	.+2      	; 0x34d2 <xTaskGenericNotifyFromISR+0xfa>
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	91 30       	cpi	r25, 0x01	; 1
    34d4:	09 f0       	breq	.+2      	; 0x34d8 <xTaskGenericNotifyFromISR+0x100>
    34d6:	96 c0       	rjmp	.+300    	; 0x3604 <xTaskGenericNotifyFromISR+0x22c>
    34d8:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <uxSchedulerSuspended>
    34dc:	91 11       	cpse	r25, r1
    34de:	5f c0       	rjmp	.+190    	; 0x359e <xTaskGenericNotifyFromISR+0x1c6>
    34e0:	1c 96       	adiw	r26, 0x0c	; 12
    34e2:	ed 91       	ld	r30, X+
    34e4:	fc 91       	ld	r31, X
    34e6:	1d 97       	sbiw	r26, 0x0d	; 13
    34e8:	16 96       	adiw	r26, 0x06	; 6
    34ea:	cd 91       	ld	r28, X+
    34ec:	dc 91       	ld	r29, X
    34ee:	17 97       	sbiw	r26, 0x07	; 7
    34f0:	18 96       	adiw	r26, 0x08	; 8
    34f2:	2d 91       	ld	r18, X+
    34f4:	3c 91       	ld	r19, X
    34f6:	19 97       	sbiw	r26, 0x09	; 9
    34f8:	3f 83       	std	Y+7, r19	; 0x07
    34fa:	2e 83       	std	Y+6, r18	; 0x06
    34fc:	18 96       	adiw	r26, 0x08	; 8
    34fe:	cd 91       	ld	r28, X+
    3500:	dc 91       	ld	r29, X
    3502:	19 97       	sbiw	r26, 0x09	; 9
    3504:	16 96       	adiw	r26, 0x06	; 6
    3506:	2d 91       	ld	r18, X+
    3508:	3c 91       	ld	r19, X
    350a:	17 97       	sbiw	r26, 0x07	; 7
    350c:	3d 83       	std	Y+5, r19	; 0x05
    350e:	2c 83       	std	Y+4, r18	; 0x04
    3510:	41 81       	ldd	r20, Z+1	; 0x01
    3512:	52 81       	ldd	r21, Z+2	; 0x02
    3514:	9d 01       	movw	r18, r26
    3516:	2e 5f       	subi	r18, 0xFE	; 254
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	42 17       	cp	r20, r18
    351c:	53 07       	cpc	r21, r19
    351e:	31 f4       	brne	.+12     	; 0x352c <xTaskGenericNotifyFromISR+0x154>
    3520:	18 96       	adiw	r26, 0x08	; 8
    3522:	4d 91       	ld	r20, X+
    3524:	5c 91       	ld	r21, X
    3526:	19 97       	sbiw	r26, 0x09	; 9
    3528:	52 83       	std	Z+2, r21	; 0x02
    352a:	41 83       	std	Z+1, r20	; 0x01
    352c:	1d 96       	adiw	r26, 0x0d	; 13
    352e:	1c 92       	st	X, r1
    3530:	1e 92       	st	-X, r1
    3532:	1c 97       	sbiw	r26, 0x0c	; 12
    3534:	90 81       	ld	r25, Z
    3536:	91 50       	subi	r25, 0x01	; 1
    3538:	90 83       	st	Z, r25
    353a:	5a 96       	adiw	r26, 0x1a	; 26
    353c:	ec 91       	ld	r30, X
    353e:	5a 97       	sbiw	r26, 0x1a	; 26
    3540:	90 91 27 16 	lds	r25, 0x1627	; 0x801627 <uxTopReadyPriority>
    3544:	9e 17       	cp	r25, r30
    3546:	10 f4       	brcc	.+4      	; 0x354c <xTaskGenericNotifyFromISR+0x174>
    3548:	e0 93 27 16 	sts	0x1627, r30	; 0x801627 <uxTopReadyPriority>
    354c:	9b e0       	ldi	r25, 0x0B	; 11
    354e:	9e 9f       	mul	r25, r30
    3550:	f0 01       	movw	r30, r0
    3552:	11 24       	eor	r1, r1
    3554:	e7 59       	subi	r30, 0x97	; 151
    3556:	f9 4e       	sbci	r31, 0xE9	; 233
    3558:	01 80       	ldd	r0, Z+1	; 0x01
    355a:	f2 81       	ldd	r31, Z+2	; 0x02
    355c:	e0 2d       	mov	r30, r0
    355e:	17 96       	adiw	r26, 0x07	; 7
    3560:	fc 93       	st	X, r31
    3562:	ee 93       	st	-X, r30
    3564:	16 97       	sbiw	r26, 0x06	; 6
    3566:	46 81       	ldd	r20, Z+6	; 0x06
    3568:	57 81       	ldd	r21, Z+7	; 0x07
    356a:	19 96       	adiw	r26, 0x09	; 9
    356c:	5c 93       	st	X, r21
    356e:	4e 93       	st	-X, r20
    3570:	18 97       	sbiw	r26, 0x08	; 8
    3572:	c6 81       	ldd	r28, Z+6	; 0x06
    3574:	d7 81       	ldd	r29, Z+7	; 0x07
    3576:	3d 83       	std	Y+5, r19	; 0x05
    3578:	2c 83       	std	Y+4, r18	; 0x04
    357a:	37 83       	std	Z+7, r19	; 0x07
    357c:	26 83       	std	Z+6, r18	; 0x06
    357e:	5a 96       	adiw	r26, 0x1a	; 26
    3580:	ec 91       	ld	r30, X
    3582:	5a 97       	sbiw	r26, 0x1a	; 26
    3584:	9e 9f       	mul	r25, r30
    3586:	f0 01       	movw	r30, r0
    3588:	11 24       	eor	r1, r1
    358a:	e7 59       	subi	r30, 0x97	; 151
    358c:	f9 4e       	sbci	r31, 0xE9	; 233
    358e:	1d 96       	adiw	r26, 0x0d	; 13
    3590:	fc 93       	st	X, r31
    3592:	ee 93       	st	-X, r30
    3594:	1c 97       	sbiw	r26, 0x0c	; 12
    3596:	90 81       	ld	r25, Z
    3598:	9f 5f       	subi	r25, 0xFF	; 255
    359a:	90 83       	st	Z, r25
    359c:	21 c0       	rjmp	.+66     	; 0x35e0 <xTaskGenericNotifyFromISR+0x208>
    359e:	64 e4       	ldi	r22, 0x44	; 68
    35a0:	76 e1       	ldi	r23, 0x16	; 22
    35a2:	fb 01       	movw	r30, r22
    35a4:	c1 81       	ldd	r28, Z+1	; 0x01
    35a6:	d2 81       	ldd	r29, Z+2	; 0x02
    35a8:	53 96       	adiw	r26, 0x13	; 19
    35aa:	dc 93       	st	X, r29
    35ac:	ce 93       	st	-X, r28
    35ae:	52 97       	sbiw	r26, 0x12	; 18
    35b0:	2e 81       	ldd	r18, Y+6	; 0x06
    35b2:	3f 81       	ldd	r19, Y+7	; 0x07
    35b4:	55 96       	adiw	r26, 0x15	; 21
    35b6:	3c 93       	st	X, r19
    35b8:	2e 93       	st	-X, r18
    35ba:	54 97       	sbiw	r26, 0x14	; 20
    35bc:	4e 81       	ldd	r20, Y+6	; 0x06
    35be:	5f 81       	ldd	r21, Y+7	; 0x07
    35c0:	9d 01       	movw	r18, r26
    35c2:	22 5f       	subi	r18, 0xF2	; 242
    35c4:	3f 4f       	sbci	r19, 0xFF	; 255
    35c6:	fa 01       	movw	r30, r20
    35c8:	35 83       	std	Z+5, r19	; 0x05
    35ca:	24 83       	std	Z+4, r18	; 0x04
    35cc:	3f 83       	std	Y+7, r19	; 0x07
    35ce:	2e 83       	std	Y+6, r18	; 0x06
    35d0:	59 96       	adiw	r26, 0x19	; 25
    35d2:	7c 93       	st	X, r23
    35d4:	6e 93       	st	-X, r22
    35d6:	58 97       	sbiw	r26, 0x18	; 24
    35d8:	fb 01       	movw	r30, r22
    35da:	90 81       	ld	r25, Z
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	90 83       	st	Z, r25
    35e0:	5a 96       	adiw	r26, 0x1a	; 26
    35e2:	2c 91       	ld	r18, X
    35e4:	e0 91 d7 16 	lds	r30, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    35e8:	f0 91 d8 16 	lds	r31, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>
    35ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    35ee:	92 17       	cp	r25, r18
    35f0:	48 f4       	brcc	.+18     	; 0x3604 <xTaskGenericNotifyFromISR+0x22c>
    35f2:	c1 14       	cp	r12, r1
    35f4:	d1 04       	cpc	r13, r1
    35f6:	19 f0       	breq	.+6      	; 0x35fe <xTaskGenericNotifyFromISR+0x226>
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	f6 01       	movw	r30, r12
    35fc:	90 83       	st	Z, r25
    35fe:	91 e0       	ldi	r25, 0x01	; 1
    3600:	90 93 21 16 	sts	0x1621, r25	; 0x801621 <xYieldPending>
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	0f 91       	pop	r16
    360a:	ff 90       	pop	r15
    360c:	ef 90       	pop	r14
    360e:	df 90       	pop	r13
    3610:	cf 90       	pop	r12
    3612:	bf 90       	pop	r11
    3614:	af 90       	pop	r10
    3616:	9f 90       	pop	r9
    3618:	8f 90       	pop	r8
    361a:	08 95       	ret

0000361c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	21 f4       	brne	.+8      	; 0x3628 <xTaskGenericNotifyStateClear+0xc>
    3620:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxCurrentTCB>
    3624:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	fc 01       	movw	r30, r24
    3632:	e6 0f       	add	r30, r22
    3634:	f7 1f       	adc	r31, r23
    3636:	23 a9       	ldd	r18, Z+51	; 0x33
    3638:	22 30       	cpi	r18, 0x02	; 2
    363a:	31 f4       	brne	.+12     	; 0x3648 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    363c:	fc 01       	movw	r30, r24
    363e:	e6 0f       	add	r30, r22
    3640:	f7 1f       	adc	r31, r23
    3642:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	01 c0       	rjmp	.+2      	; 0x364a <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3648:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    364a:	0f 90       	pop	r0
    364c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    364e:	08 95       	ret

00003650 <prvGetNextExpireTime>:
    3650:	dc 01       	movw	r26, r24
    3652:	e0 91 e3 16 	lds	r30, 0x16E3	; 0x8016e3 <pxCurrentTimerList>
    3656:	f0 91 e4 16 	lds	r31, 0x16E4	; 0x8016e4 <pxCurrentTimerList+0x1>
    365a:	80 81       	ld	r24, Z
    365c:	91 e0       	ldi	r25, 0x01	; 1
    365e:	81 11       	cpse	r24, r1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	9c 93       	st	X, r25
    3664:	91 11       	cpse	r25, r1
    3666:	08 c0       	rjmp	.+16     	; 0x3678 <prvGetNextExpireTime+0x28>
    3668:	07 80       	ldd	r0, Z+7	; 0x07
    366a:	f0 85       	ldd	r31, Z+8	; 0x08
    366c:	e0 2d       	mov	r30, r0
    366e:	60 81       	ld	r22, Z
    3670:	71 81       	ldd	r23, Z+1	; 0x01
    3672:	82 81       	ldd	r24, Z+2	; 0x02
    3674:	93 81       	ldd	r25, Z+3	; 0x03
    3676:	08 95       	ret
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	70 e0       	ldi	r23, 0x00	; 0
    367c:	cb 01       	movw	r24, r22
    367e:	08 95       	ret

00003680 <prvInsertTimerInActiveList>:
    3680:	cf 92       	push	r12
    3682:	df 92       	push	r13
    3684:	ef 92       	push	r14
    3686:	ff 92       	push	r15
    3688:	0f 93       	push	r16
    368a:	1f 93       	push	r17
    368c:	fc 01       	movw	r30, r24
    368e:	42 83       	std	Z+2, r20	; 0x02
    3690:	53 83       	std	Z+3, r21	; 0x03
    3692:	64 83       	std	Z+4, r22	; 0x04
    3694:	75 83       	std	Z+5, r23	; 0x05
    3696:	93 87       	std	Z+11, r25	; 0x0b
    3698:	82 87       	std	Z+10, r24	; 0x0a
    369a:	04 17       	cp	r16, r20
    369c:	15 07       	cpc	r17, r21
    369e:	26 07       	cpc	r18, r22
    36a0:	37 07       	cpc	r19, r23
    36a2:	c0 f0       	brcs	.+48     	; 0x36d4 <prvInsertTimerInActiveList+0x54>
    36a4:	0c 19       	sub	r16, r12
    36a6:	1d 09       	sbc	r17, r13
    36a8:	2e 09       	sbc	r18, r14
    36aa:	3f 09       	sbc	r19, r15
    36ac:	86 85       	ldd	r24, Z+14	; 0x0e
    36ae:	97 85       	ldd	r25, Z+15	; 0x0f
    36b0:	a0 89       	ldd	r26, Z+16	; 0x10
    36b2:	b1 89       	ldd	r27, Z+17	; 0x11
    36b4:	08 17       	cp	r16, r24
    36b6:	19 07       	cpc	r17, r25
    36b8:	2a 07       	cpc	r18, r26
    36ba:	3b 07       	cpc	r19, r27
    36bc:	00 f5       	brcc	.+64     	; 0x36fe <prvInsertTimerInActiveList+0x7e>
    36be:	bf 01       	movw	r22, r30
    36c0:	6e 5f       	subi	r22, 0xFE	; 254
    36c2:	7f 4f       	sbci	r23, 0xFF	; 255
    36c4:	80 91 e1 16 	lds	r24, 0x16E1	; 0x8016e1 <pxOverflowTimerList>
    36c8:	90 91 e2 16 	lds	r25, 0x16E2	; 0x8016e2 <pxOverflowTimerList+0x1>
    36cc:	0e 94 52 06 	call	0xca4	; 0xca4 <vListInsert>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	18 c0       	rjmp	.+48     	; 0x3704 <prvInsertTimerInActiveList+0x84>
    36d4:	0c 15       	cp	r16, r12
    36d6:	1d 05       	cpc	r17, r13
    36d8:	2e 05       	cpc	r18, r14
    36da:	3f 05       	cpc	r19, r15
    36dc:	28 f4       	brcc	.+10     	; 0x36e8 <prvInsertTimerInActiveList+0x68>
    36de:	4c 15       	cp	r20, r12
    36e0:	5d 05       	cpc	r21, r13
    36e2:	6e 05       	cpc	r22, r14
    36e4:	7f 05       	cpc	r23, r15
    36e6:	68 f4       	brcc	.+26     	; 0x3702 <prvInsertTimerInActiveList+0x82>
    36e8:	bf 01       	movw	r22, r30
    36ea:	6e 5f       	subi	r22, 0xFE	; 254
    36ec:	7f 4f       	sbci	r23, 0xFF	; 255
    36ee:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <pxCurrentTimerList>
    36f2:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <pxCurrentTimerList+0x1>
    36f6:	0e 94 52 06 	call	0xca4	; 0xca4 <vListInsert>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	03 c0       	rjmp	.+6      	; 0x3704 <prvInsertTimerInActiveList+0x84>
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <prvInsertTimerInActiveList+0x84>
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	ff 90       	pop	r15
    370a:	ef 90       	pop	r14
    370c:	df 90       	pop	r13
    370e:	cf 90       	pop	r12
    3710:	08 95       	ret

00003712 <prvCheckForValidListAndQueue>:
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	0f 92       	push	r0
    3718:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <xTimerQueue>
    371c:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    3720:	89 2b       	or	r24, r25
    3722:	e9 f4       	brne	.+58     	; 0x375e <prvCheckForValidListAndQueue+0x4c>
    3724:	80 ef       	ldi	r24, 0xF0	; 240
    3726:	96 e1       	ldi	r25, 0x16	; 22
    3728:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    372c:	85 ee       	ldi	r24, 0xE5	; 229
    372e:	96 e1       	ldi	r25, 0x16	; 22
    3730:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInitialise>
    3734:	80 ef       	ldi	r24, 0xF0	; 240
    3736:	96 e1       	ldi	r25, 0x16	; 22
    3738:	90 93 e4 16 	sts	0x16E4, r25	; 0x8016e4 <pxCurrentTimerList+0x1>
    373c:	80 93 e3 16 	sts	0x16E3, r24	; 0x8016e3 <pxCurrentTimerList>
    3740:	85 ee       	ldi	r24, 0xE5	; 229
    3742:	96 e1       	ldi	r25, 0x16	; 22
    3744:	90 93 e2 16 	sts	0x16E2, r25	; 0x8016e2 <pxOverflowTimerList+0x1>
    3748:	80 93 e1 16 	sts	0x16E1, r24	; 0x8016e1 <pxOverflowTimerList>
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	67 e0       	ldi	r22, 0x07	; 7
    3750:	8a e0       	ldi	r24, 0x0A	; 10
    3752:	0e 94 00 09 	call	0x1200	; 0x1200 <xQueueGenericCreate>
    3756:	90 93 e0 16 	sts	0x16E0, r25	; 0x8016e0 <xTimerQueue+0x1>
    375a:	80 93 df 16 	sts	0x16DF, r24	; 0x8016df <xTimerQueue>
    375e:	0f 90       	pop	r0
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	08 95       	ret

00003764 <xTimerCreateTimerTask>:
    3764:	ef 92       	push	r14
    3766:	ff 92       	push	r15
    3768:	0f 93       	push	r16
    376a:	d3 df       	rcall	.-90     	; 0x3712 <prvCheckForValidListAndQueue>
    376c:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <xTimerQueue>
    3770:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    3774:	89 2b       	or	r24, r25
    3776:	91 f0       	breq	.+36     	; 0x379c <xTimerCreateTimerTask+0x38>
    3778:	0f 2e       	mov	r0, r31
    377a:	fd ed       	ldi	r31, 0xDD	; 221
    377c:	ef 2e       	mov	r14, r31
    377e:	f6 e1       	ldi	r31, 0x16	; 22
    3780:	ff 2e       	mov	r15, r31
    3782:	f0 2d       	mov	r31, r0
    3784:	03 e0       	ldi	r16, 0x03	; 3
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 ec       	ldi	r20, 0xC0	; 192
    378c:	50 e0       	ldi	r21, 0x00	; 0
    378e:	64 e6       	ldi	r22, 0x64	; 100
    3790:	73 e0       	ldi	r23, 0x03	; 3
    3792:	87 ed       	ldi	r24, 0xD7	; 215
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
    379a:	01 c0       	rjmp	.+2      	; 0x379e <xTimerCreateTimerTask+0x3a>
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	08 95       	ret

000037a6 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    37a6:	8f 92       	push	r8
    37a8:	9f 92       	push	r9
    37aa:	af 92       	push	r10
    37ac:	bf 92       	push	r11
    37ae:	cf 92       	push	r12
    37b0:	df 92       	push	r13
    37b2:	ef 92       	push	r14
    37b4:	ff 92       	push	r15
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	27 97       	sbiw	r28, 0x07	; 7
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    37ce:	e0 91 df 16 	lds	r30, 0x16DF	; 0x8016df <xTimerQueue>
    37d2:	f0 91 e0 16 	lds	r31, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    37d6:	30 97       	sbiw	r30, 0x00	; 0
    37d8:	81 f1       	breq	.+96     	; 0x383a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    37da:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    37dc:	2a 83       	std	Y+2, r18	; 0x02
    37de:	3b 83       	std	Y+3, r19	; 0x03
    37e0:	4c 83       	std	Y+4, r20	; 0x04
    37e2:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    37e4:	9f 83       	std	Y+7, r25	; 0x07
    37e6:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    37e8:	66 30       	cpi	r22, 0x06	; 6
    37ea:	f4 f4       	brge	.+60     	; 0x3828 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    37ec:	c3 da       	rcall	.-2682   	; 0x2d74 <xTaskGetSchedulerState>
    37ee:	82 30       	cpi	r24, 0x02	; 2
    37f0:	69 f4       	brne	.+26     	; 0x380c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    37f2:	00 e0       	ldi	r16, 0x00	; 0
    37f4:	a7 01       	movw	r20, r14
    37f6:	96 01       	movw	r18, r12
    37f8:	be 01       	movw	r22, r28
    37fa:	6f 5f       	subi	r22, 0xFF	; 255
    37fc:	7f 4f       	sbci	r23, 0xFF	; 255
    37fe:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <xTimerQueue>
    3802:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    3806:	0e 94 23 09 	call	0x1246	; 0x1246 <xQueueGenericSend>
    380a:	18 c0       	rjmp	.+48     	; 0x383c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    380c:	00 e0       	ldi	r16, 0x00	; 0
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	a9 01       	movw	r20, r18
    3814:	be 01       	movw	r22, r28
    3816:	6f 5f       	subi	r22, 0xFF	; 255
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <xTimerQueue>
    381e:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    3822:	0e 94 23 09 	call	0x1246	; 0x1246 <xQueueGenericSend>
    3826:	0a c0       	rjmp	.+20     	; 0x383c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	a8 01       	movw	r20, r16
    382c:	be 01       	movw	r22, r28
    382e:	6f 5f       	subi	r22, 0xFF	; 255
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	cf 01       	movw	r24, r30
    3834:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <xQueueGenericSendFromISR>
    3838:	01 c0       	rjmp	.+2      	; 0x383c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    383a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    383c:	27 96       	adiw	r28, 0x07	; 7
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	df 91       	pop	r29
    384a:	cf 91       	pop	r28
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ff 90       	pop	r15
    3852:	ef 90       	pop	r14
    3854:	df 90       	pop	r13
    3856:	cf 90       	pop	r12
    3858:	bf 90       	pop	r11
    385a:	af 90       	pop	r10
    385c:	9f 90       	pop	r9
    385e:	8f 90       	pop	r8
    3860:	08 95       	ret

00003862 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3862:	8f 92       	push	r8
    3864:	9f 92       	push	r9
    3866:	af 92       	push	r10
    3868:	bf 92       	push	r11
    386a:	cf 92       	push	r12
    386c:	df 92       	push	r13
    386e:	ef 92       	push	r14
    3870:	ff 92       	push	r15
    3872:	0f 93       	push	r16
    3874:	1f 93       	push	r17
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    387a:	3b c0       	rjmp	.+118    	; 0x38f2 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    387c:	07 80       	ldd	r0, Z+7	; 0x07
    387e:	f0 85       	ldd	r31, Z+8	; 0x08
    3880:	e0 2d       	mov	r30, r0
    3882:	80 80       	ld	r8, Z
    3884:	91 80       	ldd	r9, Z+1	; 0x01
    3886:	a2 80       	ldd	r10, Z+2	; 0x02
    3888:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    388a:	c0 85       	ldd	r28, Z+8	; 0x08
    388c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    388e:	8e 01       	movw	r16, r28
    3890:	0e 5f       	subi	r16, 0xFE	; 254
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	c8 01       	movw	r24, r16
    3896:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    389a:	ec 89       	ldd	r30, Y+20	; 0x14
    389c:	fd 89       	ldd	r31, Y+21	; 0x15
    389e:	ce 01       	movw	r24, r28
    38a0:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38a2:	8e 89       	ldd	r24, Y+22	; 0x16
    38a4:	82 ff       	sbrs	r24, 2
    38a6:	25 c0       	rjmp	.+74     	; 0x38f2 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    38a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    38ac:	a8 89       	ldd	r26, Y+16	; 0x10
    38ae:	b9 89       	ldd	r27, Y+17	; 0x11
    38b0:	88 0d       	add	r24, r8
    38b2:	99 1d       	adc	r25, r9
    38b4:	aa 1d       	adc	r26, r10
    38b6:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    38b8:	88 16       	cp	r8, r24
    38ba:	99 06       	cpc	r9, r25
    38bc:	aa 06       	cpc	r10, r26
    38be:	bb 06       	cpc	r11, r27
    38c0:	70 f4       	brcc	.+28     	; 0x38de <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    38c2:	8a 83       	std	Y+2, r24	; 0x02
    38c4:	9b 83       	std	Y+3, r25	; 0x03
    38c6:	ac 83       	std	Y+4, r26	; 0x04
    38c8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    38ca:	db 87       	std	Y+11, r29	; 0x0b
    38cc:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    38ce:	b8 01       	movw	r22, r16
    38d0:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <pxCurrentTimerList>
    38d4:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <pxCurrentTimerList+0x1>
    38d8:	0e 94 52 06 	call	0xca4	; 0xca4 <vListInsert>
    38dc:	0a c0       	rjmp	.+20     	; 0x38f2 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    38de:	c1 2c       	mov	r12, r1
    38e0:	d1 2c       	mov	r13, r1
    38e2:	76 01       	movw	r14, r12
    38e4:	00 e0       	ldi	r16, 0x00	; 0
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	a5 01       	movw	r20, r10
    38ea:	94 01       	movw	r18, r8
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	ce 01       	movw	r24, r28
    38f0:	5a df       	rcall	.-332    	; 0x37a6 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    38f2:	e0 91 e3 16 	lds	r30, 0x16E3	; 0x8016e3 <pxCurrentTimerList>
    38f6:	f0 91 e4 16 	lds	r31, 0x16E4	; 0x8016e4 <pxCurrentTimerList+0x1>
    38fa:	80 81       	ld	r24, Z
    38fc:	81 11       	cpse	r24, r1
    38fe:	be cf       	rjmp	.-132    	; 0x387c <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3900:	80 91 e1 16 	lds	r24, 0x16E1	; 0x8016e1 <pxOverflowTimerList>
    3904:	90 91 e2 16 	lds	r25, 0x16E2	; 0x8016e2 <pxOverflowTimerList+0x1>
    3908:	90 93 e4 16 	sts	0x16E4, r25	; 0x8016e4 <pxCurrentTimerList+0x1>
    390c:	80 93 e3 16 	sts	0x16E3, r24	; 0x8016e3 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3910:	f0 93 e2 16 	sts	0x16E2, r31	; 0x8016e2 <pxOverflowTimerList+0x1>
    3914:	e0 93 e1 16 	sts	0x16E1, r30	; 0x8016e1 <pxOverflowTimerList>
    }
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
    3920:	ff 90       	pop	r15
    3922:	ef 90       	pop	r14
    3924:	df 90       	pop	r13
    3926:	cf 90       	pop	r12
    3928:	bf 90       	pop	r11
    392a:	af 90       	pop	r10
    392c:	9f 90       	pop	r9
    392e:	8f 90       	pop	r8
    3930:	08 95       	ret

00003932 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3932:	cf 92       	push	r12
    3934:	df 92       	push	r13
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3940:	0e 94 3d 11 	call	0x227a	; 0x227a <xTaskGetTickCount>
    3944:	6b 01       	movw	r12, r22
    3946:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3948:	80 91 d9 16 	lds	r24, 0x16D9	; 0x8016d9 <xLastTime.2436>
    394c:	90 91 da 16 	lds	r25, 0x16DA	; 0x8016da <xLastTime.2436+0x1>
    3950:	a0 91 db 16 	lds	r26, 0x16DB	; 0x8016db <xLastTime.2436+0x2>
    3954:	b0 91 dc 16 	lds	r27, 0x16DC	; 0x8016dc <xLastTime.2436+0x3>
    3958:	c8 16       	cp	r12, r24
    395a:	d9 06       	cpc	r13, r25
    395c:	ea 06       	cpc	r14, r26
    395e:	fb 06       	cpc	r15, r27
    3960:	20 f4       	brcc	.+8      	; 0x396a <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3962:	7f df       	rcall	.-258    	; 0x3862 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	88 83       	st	Y, r24
    3968:	01 c0       	rjmp	.+2      	; 0x396c <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    396a:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    396c:	c0 92 d9 16 	sts	0x16D9, r12	; 0x8016d9 <xLastTime.2436>
    3970:	d0 92 da 16 	sts	0x16DA, r13	; 0x8016da <xLastTime.2436+0x1>
    3974:	e0 92 db 16 	sts	0x16DB, r14	; 0x8016db <xLastTime.2436+0x2>
    3978:	f0 92 dc 16 	sts	0x16DC, r15	; 0x8016dc <xLastTime.2436+0x3>

        return xTimeNow;
    }
    397c:	c7 01       	movw	r24, r14
    397e:	b6 01       	movw	r22, r12
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	df 90       	pop	r13
    398a:	cf 90       	pop	r12
    398c:	08 95       	ret

0000398e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    398e:	4f 92       	push	r4
    3990:	5f 92       	push	r5
    3992:	6f 92       	push	r6
    3994:	7f 92       	push	r7
    3996:	8f 92       	push	r8
    3998:	9f 92       	push	r9
    399a:	af 92       	push	r10
    399c:	bf 92       	push	r11
    399e:	cf 92       	push	r12
    39a0:	df 92       	push	r13
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	4b 01       	movw	r8, r22
    39b0:	5c 01       	movw	r10, r24
    39b2:	29 01       	movw	r4, r18
    39b4:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    39b6:	e0 91 e3 16 	lds	r30, 0x16E3	; 0x8016e3 <pxCurrentTimerList>
    39ba:	f0 91 e4 16 	lds	r31, 0x16E4	; 0x8016e4 <pxCurrentTimerList+0x1>
    39be:	07 80       	ldd	r0, Z+7	; 0x07
    39c0:	f0 85       	ldd	r31, Z+8	; 0x08
    39c2:	e0 2d       	mov	r30, r0
    39c4:	c0 85       	ldd	r28, Z+8	; 0x08
    39c6:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    39c8:	ce 01       	movw	r24, r28
    39ca:	02 96       	adiw	r24, 0x02	; 2
    39cc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    39d0:	8e 89       	ldd	r24, Y+22	; 0x16
    39d2:	82 ff       	sbrs	r24, 2
    39d4:	1b c0       	rjmp	.+54     	; 0x3a0c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    39d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    39d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    39da:	68 89       	ldd	r22, Y+16	; 0x10
    39dc:	79 89       	ldd	r23, Y+17	; 0x11
    39de:	48 0d       	add	r20, r8
    39e0:	59 1d       	adc	r21, r9
    39e2:	6a 1d       	adc	r22, r10
    39e4:	7b 1d       	adc	r23, r11
    39e6:	75 01       	movw	r14, r10
    39e8:	64 01       	movw	r12, r8
    39ea:	93 01       	movw	r18, r6
    39ec:	82 01       	movw	r16, r4
    39ee:	ce 01       	movw	r24, r28
    39f0:	47 de       	rcall	.-882    	; 0x3680 <prvInsertTimerInActiveList>
    39f2:	88 23       	and	r24, r24
    39f4:	69 f0       	breq	.+26     	; 0x3a10 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    39f6:	c1 2c       	mov	r12, r1
    39f8:	d1 2c       	mov	r13, r1
    39fa:	76 01       	movw	r14, r12
    39fc:	00 e0       	ldi	r16, 0x00	; 0
    39fe:	10 e0       	ldi	r17, 0x00	; 0
    3a00:	a5 01       	movw	r20, r10
    3a02:	94 01       	movw	r18, r8
    3a04:	60 e0       	ldi	r22, 0x00	; 0
    3a06:	ce 01       	movw	r24, r28
    3a08:	ce de       	rcall	.-612    	; 0x37a6 <xTimerGenericCommand>
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3a0c:	8e 7f       	andi	r24, 0xFE	; 254
    3a0e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a10:	ec 89       	ldd	r30, Y+20	; 0x14
    3a12:	fd 89       	ldd	r31, Y+21	; 0x15
    3a14:	ce 01       	movw	r24, r28
    3a16:	19 95       	eicall
    }
    3a18:	df 91       	pop	r29
    3a1a:	cf 91       	pop	r28
    3a1c:	1f 91       	pop	r17
    3a1e:	0f 91       	pop	r16
    3a20:	ff 90       	pop	r15
    3a22:	ef 90       	pop	r14
    3a24:	df 90       	pop	r13
    3a26:	cf 90       	pop	r12
    3a28:	bf 90       	pop	r11
    3a2a:	af 90       	pop	r10
    3a2c:	9f 90       	pop	r9
    3a2e:	8f 90       	pop	r8
    3a30:	7f 90       	pop	r7
    3a32:	6f 90       	pop	r6
    3a34:	5f 90       	pop	r5
    3a36:	4f 90       	pop	r4
    3a38:	08 95       	ret

00003a3a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3a3a:	8f 92       	push	r8
    3a3c:	9f 92       	push	r9
    3a3e:	af 92       	push	r10
    3a40:	bf 92       	push	r11
    3a42:	cf 92       	push	r12
    3a44:	df 92       	push	r13
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	1f 92       	push	r1
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	6b 01       	movw	r12, r22
    3a58:	7c 01       	movw	r14, r24
    3a5a:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3a5c:	0e 94 37 11 	call	0x226e	; 0x226e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a60:	ce 01       	movw	r24, r28
    3a62:	01 96       	adiw	r24, 0x01	; 1
    3a64:	66 df       	rcall	.-308    	; 0x3932 <prvSampleTimeNow>
    3a66:	4b 01       	movw	r8, r22
    3a68:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	81 11       	cpse	r24, r1
    3a6e:	2d c0       	rjmp	.+90     	; 0x3aca <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3a70:	11 11       	cpse	r17, r1
    3a72:	0d c0       	rjmp	.+26     	; 0x3a8e <prvProcessTimerOrBlockTask+0x54>
    3a74:	8c 14       	cp	r8, r12
    3a76:	9d 04       	cpc	r9, r13
    3a78:	ae 04       	cpc	r10, r14
    3a7a:	bf 04       	cpc	r11, r15
    3a7c:	40 f0       	brcs	.+16     	; 0x3a8e <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3a7e:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3a82:	a5 01       	movw	r20, r10
    3a84:	94 01       	movw	r18, r8
    3a86:	c7 01       	movw	r24, r14
    3a88:	b6 01       	movw	r22, r12
    3a8a:	81 df       	rcall	.-254    	; 0x398e <prvProcessExpiredTimer>
    3a8c:	20 c0       	rjmp	.+64     	; 0x3ace <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3a8e:	11 23       	and	r17, r17
    3a90:	41 f0       	breq	.+16     	; 0x3aa2 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3a92:	e0 91 e1 16 	lds	r30, 0x16E1	; 0x8016e1 <pxOverflowTimerList>
    3a96:	f0 91 e2 16 	lds	r31, 0x16E2	; 0x8016e2 <pxOverflowTimerList+0x1>
    3a9a:	80 81       	ld	r24, Z
    3a9c:	11 e0       	ldi	r17, 0x01	; 1
    3a9e:	81 11       	cpse	r24, r1
    3aa0:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3aa2:	b7 01       	movw	r22, r14
    3aa4:	a6 01       	movw	r20, r12
    3aa6:	48 19       	sub	r20, r8
    3aa8:	59 09       	sbc	r21, r9
    3aaa:	6a 09       	sbc	r22, r10
    3aac:	7b 09       	sbc	r23, r11
    3aae:	21 2f       	mov	r18, r17
    3ab0:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <xTimerQueue>
    3ab4:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    3ab8:	0e 94 4e 0b 	call	0x169c	; 0x169c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3abc:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    3ac0:	81 11       	cpse	r24, r1
    3ac2:	05 c0       	rjmp	.+10     	; 0x3ace <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3ac4:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3aca:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
            }
        }
    }
    3ace:	0f 90       	pop	r0
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	ff 90       	pop	r15
    3ad8:	ef 90       	pop	r14
    3ada:	df 90       	pop	r13
    3adc:	cf 90       	pop	r12
    3ade:	bf 90       	pop	r11
    3ae0:	af 90       	pop	r10
    3ae2:	9f 90       	pop	r9
    3ae4:	8f 90       	pop	r8
    3ae6:	08 95       	ret

00003ae8 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3ae8:	af 92       	push	r10
    3aea:	bf 92       	push	r11
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	28 97       	sbiw	r28, 0x08	; 8
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b0c:	82 c0       	rjmp	.+260    	; 0x3c12 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	88 23       	and	r24, r24
    3b12:	0c f4       	brge	.+2      	; 0x3b16 <prvProcessReceivedCommands+0x2e>
    3b14:	7e c0       	rjmp	.+252    	; 0x3c12 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3b16:	ae 80       	ldd	r10, Y+6	; 0x06
    3b18:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3b1a:	d5 01       	movw	r26, r10
    3b1c:	1c 96       	adiw	r26, 0x0c	; 12
    3b1e:	8d 91       	ld	r24, X+
    3b20:	9c 91       	ld	r25, X
    3b22:	1d 97       	sbiw	r26, 0x0d	; 13
    3b24:	89 2b       	or	r24, r25
    3b26:	21 f0       	breq	.+8      	; 0x3b30 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b28:	c5 01       	movw	r24, r10
    3b2a:	02 96       	adiw	r24, 0x02	; 2
    3b2c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3b30:	ce 01       	movw	r24, r28
    3b32:	08 96       	adiw	r24, 0x08	; 8
    3b34:	fe de       	rcall	.-516    	; 0x3932 <prvSampleTimeNow>
    3b36:	8b 01       	movw	r16, r22
    3b38:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3c:	0e 2e       	mov	r0, r30
    3b3e:	00 0c       	add	r0, r0
    3b40:	ff 0b       	sbc	r31, r31
    3b42:	ea 30       	cpi	r30, 0x0A	; 10
    3b44:	f1 05       	cpc	r31, r1
    3b46:	08 f0       	brcs	.+2      	; 0x3b4a <prvProcessReceivedCommands+0x62>
    3b48:	64 c0       	rjmp	.+200    	; 0x3c12 <prvProcessReceivedCommands+0x12a>
    3b4a:	88 27       	eor	r24, r24
    3b4c:	ee 58       	subi	r30, 0x8E	; 142
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	8f 4f       	sbci	r24, 0xFF	; 255
    3b52:	0c 94 b3 30 	jmp	0x6166	; 0x6166 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b56:	f5 01       	movw	r30, r10
    3b58:	86 89       	ldd	r24, Z+22	; 0x16
    3b5a:	81 60       	ori	r24, 0x01	; 1
    3b5c:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3b5e:	ca 80       	ldd	r12, Y+2	; 0x02
    3b60:	db 80       	ldd	r13, Y+3	; 0x03
    3b62:	ec 80       	ldd	r14, Y+4	; 0x04
    3b64:	fd 80       	ldd	r15, Y+5	; 0x05
    3b66:	46 85       	ldd	r20, Z+14	; 0x0e
    3b68:	57 85       	ldd	r21, Z+15	; 0x0f
    3b6a:	60 89       	ldd	r22, Z+16	; 0x10
    3b6c:	71 89       	ldd	r23, Z+17	; 0x11
    3b6e:	4c 0d       	add	r20, r12
    3b70:	5d 1d       	adc	r21, r13
    3b72:	6e 1d       	adc	r22, r14
    3b74:	7f 1d       	adc	r23, r15
    3b76:	c5 01       	movw	r24, r10
    3b78:	83 dd       	rcall	.-1274   	; 0x3680 <prvInsertTimerInActiveList>
    3b7a:	88 23       	and	r24, r24
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <prvProcessReceivedCommands+0x98>
    3b7e:	49 c0       	rjmp	.+146    	; 0x3c12 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b80:	d5 01       	movw	r26, r10
    3b82:	54 96       	adiw	r26, 0x14	; 20
    3b84:	ed 91       	ld	r30, X+
    3b86:	fc 91       	ld	r31, X
    3b88:	55 97       	sbiw	r26, 0x15	; 21
    3b8a:	c5 01       	movw	r24, r10
    3b8c:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b8e:	f5 01       	movw	r30, r10
    3b90:	86 89       	ldd	r24, Z+22	; 0x16
    3b92:	82 ff       	sbrs	r24, 2
    3b94:	3e c0       	rjmp	.+124    	; 0x3c12 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3b96:	4a 81       	ldd	r20, Y+2	; 0x02
    3b98:	5b 81       	ldd	r21, Y+3	; 0x03
    3b9a:	6c 81       	ldd	r22, Y+4	; 0x04
    3b9c:	7d 81       	ldd	r23, Y+5	; 0x05
    3b9e:	86 85       	ldd	r24, Z+14	; 0x0e
    3ba0:	97 85       	ldd	r25, Z+15	; 0x0f
    3ba2:	a0 89       	ldd	r26, Z+16	; 0x10
    3ba4:	b1 89       	ldd	r27, Z+17	; 0x11
    3ba6:	9a 01       	movw	r18, r20
    3ba8:	ab 01       	movw	r20, r22
    3baa:	28 0f       	add	r18, r24
    3bac:	39 1f       	adc	r19, r25
    3bae:	4a 1f       	adc	r20, r26
    3bb0:	5b 1f       	adc	r21, r27
    3bb2:	c1 2c       	mov	r12, r1
    3bb4:	d1 2c       	mov	r13, r1
    3bb6:	76 01       	movw	r14, r12
    3bb8:	00 e0       	ldi	r16, 0x00	; 0
    3bba:	10 e0       	ldi	r17, 0x00	; 0
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	c5 01       	movw	r24, r10
    3bc0:	f2 dd       	rcall	.-1052   	; 0x37a6 <xTimerGenericCommand>
    3bc2:	27 c0       	rjmp	.+78     	; 0x3c12 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bc4:	d5 01       	movw	r26, r10
    3bc6:	56 96       	adiw	r26, 0x16	; 22
    3bc8:	8c 91       	ld	r24, X
    3bca:	56 97       	sbiw	r26, 0x16	; 22
    3bcc:	8e 7f       	andi	r24, 0xFE	; 254
    3bce:	56 96       	adiw	r26, 0x16	; 22
    3bd0:	8c 93       	st	X, r24
                        break;
    3bd2:	1f c0       	rjmp	.+62     	; 0x3c12 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3bd4:	f5 01       	movw	r30, r10
    3bd6:	86 89       	ldd	r24, Z+22	; 0x16
    3bd8:	81 60       	ori	r24, 0x01	; 1
    3bda:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3bdc:	4a 81       	ldd	r20, Y+2	; 0x02
    3bde:	5b 81       	ldd	r21, Y+3	; 0x03
    3be0:	6c 81       	ldd	r22, Y+4	; 0x04
    3be2:	7d 81       	ldd	r23, Y+5	; 0x05
    3be4:	46 87       	std	Z+14, r20	; 0x0e
    3be6:	57 87       	std	Z+15, r21	; 0x0f
    3be8:	60 8b       	std	Z+16, r22	; 0x10
    3bea:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3bec:	40 0f       	add	r20, r16
    3bee:	51 1f       	adc	r21, r17
    3bf0:	62 1f       	adc	r22, r18
    3bf2:	73 1f       	adc	r23, r19
    3bf4:	68 01       	movw	r12, r16
    3bf6:	79 01       	movw	r14, r18
    3bf8:	c5 01       	movw	r24, r10
    3bfa:	42 dd       	rcall	.-1404   	; 0x3680 <prvInsertTimerInActiveList>
                        break;
    3bfc:	0a c0       	rjmp	.+20     	; 0x3c12 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3bfe:	f5 01       	movw	r30, r10
    3c00:	86 89       	ldd	r24, Z+22	; 0x16
    3c02:	81 fd       	sbrc	r24, 1
    3c04:	04 c0       	rjmp	.+8      	; 0x3c0e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3c06:	c5 01       	movw	r24, r10
    3c08:	0e 94 00 06 	call	0xc00	; 0xc00 <vPortFree>
    3c0c:	02 c0       	rjmp	.+4      	; 0x3c12 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c0e:	8e 7f       	andi	r24, 0xFE	; 254
    3c10:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	a9 01       	movw	r20, r18
    3c18:	be 01       	movw	r22, r28
    3c1a:	6f 5f       	subi	r22, 0xFF	; 255
    3c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1e:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <xTimerQueue>
    3c22:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <xTimerQueue+0x1>
    3c26:	0e 94 0e 0a 	call	0x141c	; 0x141c <xQueueReceive>
    3c2a:	81 11       	cpse	r24, r1
    3c2c:	70 cf       	rjmp	.-288    	; 0x3b0e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3c2e:	28 96       	adiw	r28, 0x08	; 8
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	df 91       	pop	r29
    3c3c:	cf 91       	pop	r28
    3c3e:	1f 91       	pop	r17
    3c40:	0f 91       	pop	r16
    3c42:	ff 90       	pop	r15
    3c44:	ef 90       	pop	r14
    3c46:	df 90       	pop	r13
    3c48:	cf 90       	pop	r12
    3c4a:	bf 90       	pop	r11
    3c4c:	af 90       	pop	r10
    3c4e:	08 95       	ret

00003c50 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3c50:	08 95       	ret

00003c52 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3c52:	84 b1       	in	r24, 0x04	; 4
    3c54:	80 68       	ori	r24, 0x80	; 128
    3c56:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3c58:	85 b1       	in	r24, 0x05	; 5
    3c5a:	80 68       	ori	r24, 0x80	; 128
    3c5c:	85 b9       	out	0x05, r24	; 5
    3c5e:	08 95       	ret

00003c60 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3c60:	83 b1       	in	r24, 0x03	; 3
    3c62:	80 68       	ori	r24, 0x80	; 128
    3c64:	83 b9       	out	0x03, r24	; 3
    3c66:	08 95       	ret

00003c68 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3c68:	f4 df       	rcall	.-24     	; 0x3c52 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c6a:	2f ef       	ldi	r18, 0xFF	; 255
    3c6c:	80 e7       	ldi	r24, 0x70	; 112
    3c6e:	92 e0       	ldi	r25, 0x02	; 2
    3c70:	21 50       	subi	r18, 0x01	; 1
    3c72:	80 40       	sbci	r24, 0x00	; 0
    3c74:	90 40       	sbci	r25, 0x00	; 0
    3c76:	e1 f7       	brne	.-8      	; 0x3c70 <vApplicationMallocFailedHook+0x8>
    3c78:	00 c0       	rjmp	.+0      	; 0x3c7a <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3c7a:	00 00       	nop
    3c7c:	f1 df       	rcall	.-30     	; 0x3c60 <prvBlinkMainLed>
    3c7e:	f5 cf       	rjmp	.-22     	; 0x3c6a <vApplicationMallocFailedHook+0x2>

00003c80 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3c80:	e8 df       	rcall	.-48     	; 0x3c52 <prvSetMainLedOn>
    3c82:	2f ef       	ldi	r18, 0xFF	; 255
    3c84:	87 ea       	ldi	r24, 0xA7	; 167
    3c86:	91 e6       	ldi	r25, 0x61	; 97
    3c88:	21 50       	subi	r18, 0x01	; 1
    3c8a:	80 40       	sbci	r24, 0x00	; 0
    3c8c:	90 40       	sbci	r25, 0x00	; 0
    3c8e:	e1 f7       	brne	.-8      	; 0x3c88 <vApplicationStackOverflowHook+0x8>
    3c90:	00 c0       	rjmp	.+0      	; 0x3c92 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3c92:	00 00       	nop
    3c94:	e5 df       	rcall	.-54     	; 0x3c60 <prvBlinkMainLed>
    3c96:	f5 cf       	rjmp	.-22     	; 0x3c82 <vApplicationStackOverflowHook+0x2>

00003c98 <conditioner_controller_create>:
uint16_t max_humidity;



void conditioner_controller_create(UBaseType_t priority)
{
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
	xTaskCreate(
    3c9e:	e1 2c       	mov	r14, r1
    3ca0:	f1 2c       	mov	r15, r1
    3ca2:	08 2f       	mov	r16, r24
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	48 e8       	ldi	r20, 0x88	; 136
    3caa:	51 e0       	ldi	r21, 0x01	; 1
    3cac:	6c e6       	ldi	r22, 0x6C	; 108
    3cae:	73 e0       	ldi	r23, 0x03	; 3
    3cb0:	8b ed       	ldi	r24, 0xDB	; 219
    3cb2:	9e e1       	ldi	r25, 0x1E	; 30
    3cb4:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
	configMINIMAL_STACK_SIZE+200,
	NULL,
	priority,
	NULL );
	
}
    3cb8:	0f 91       	pop	r16
    3cba:	ff 90       	pop	r15
    3cbc:	ef 90       	pop	r14
    3cbe:	08 95       	ret

00003cc0 <Conditioner_task>:
	}
}

void Conditioner_task()
{
	vTaskDelay(6000);
    3cc0:	60 e7       	ldi	r22, 0x70	; 112
    3cc2:	77 e1       	ldi	r23, 0x17	; 23
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
	current_humiditiy=get_humidity_data();
    3ccc:	f4 d0       	rcall	.+488    	; 0x3eb6 <get_humidity_data>
    3cce:	90 93 96 18 	sts	0x1896, r25	; 0x801896 <current_humiditiy+0x1>
    3cd2:	80 93 95 18 	sts	0x1895, r24	; 0x801895 <current_humiditiy>
	current_temperature=get_temperature_data();
    3cd6:	e4 d0       	rcall	.+456    	; 0x3ea0 <get_temperature_data>
    3cd8:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <current_temperature+0x1>
    3cdc:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <current_temperature>
    3ce0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Configuration_GetMinHumidity>
	min_humidity=Configuration_GetMinHumidity();
    3ce4:	90 93 9c 18 	sts	0x189C, r25	; 0x80189c <min_humidity+0x1>
    3ce8:	80 93 9b 18 	sts	0x189B, r24	; 0x80189b <min_humidity>
    3cec:	0e 94 cb 02 	call	0x596	; 0x596 <Configuration_GetMaxHumidity>
	max_humidity=Configuration_GetMaxHumidity();
    3cf0:	90 93 94 18 	sts	0x1894, r25	; 0x801894 <max_humidity+0x1>
    3cf4:	80 93 93 18 	sts	0x1893, r24	; 0x801893 <max_humidity>
    3cf8:	0e 94 c6 02 	call	0x58c	; 0x58c <Configuration_GetMinTemperature>
	min_temperature=Configuration_GetMinTemperature();
    3cfc:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <min_temperature+0x1>
    3d00:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <min_temperature>
    3d04:	0e 94 c1 02 	call	0x582	; 0x582 <Configuration_GetMaxTemperature>
	max_temperature=Configuration_GetMaxTemperature();
    3d08:	90 93 9e 18 	sts	0x189E, r25	; 0x80189e <max_temperature+0x1>
    3d0c:	80 93 9d 18 	sts	0x189D, r24	; 0x80189d <max_temperature>
    3d10:	60 91 9b 18 	lds	r22, 0x189B	; 0x80189b <min_humidity>
	
	uint16_t temp=min_humidity+max_humidity+min_temperature+max_temperature;
    3d14:	70 91 9c 18 	lds	r23, 0x189C	; 0x80189c <min_humidity+0x1>
    3d18:	40 91 93 18 	lds	r20, 0x1893	; 0x801893 <max_humidity>
    3d1c:	50 91 94 18 	lds	r21, 0x1894	; 0x801894 <max_humidity+0x1>
    3d20:	9b 01       	movw	r18, r22
    3d22:	24 0f       	add	r18, r20
    3d24:	35 1f       	adc	r19, r21
    3d26:	e0 91 97 18 	lds	r30, 0x1897	; 0x801897 <min_temperature>
    3d2a:	f0 91 98 18 	lds	r31, 0x1898	; 0x801898 <min_temperature+0x1>
    3d2e:	2e 0f       	add	r18, r30
    3d30:	3f 1f       	adc	r19, r31
    3d32:	28 0f       	add	r18, r24
    3d34:	39 1f       	adc	r19, r25
    3d36:	21 15       	cp	r18, r1
	
	if (temp!=0 && ((current_humiditiy<min_humidity ) || (current_temperature<min_temperature )))
    3d38:	31 05       	cpc	r19, r1
    3d3a:	d9 f0       	breq	.+54     	; 0x3d72 <Conditioner_task+0xb2>
    3d3c:	a0 91 95 18 	lds	r26, 0x1895	; 0x801895 <current_humiditiy>
    3d40:	b0 91 96 18 	lds	r27, 0x1896	; 0x801896 <current_humiditiy+0x1>
    3d44:	a6 17       	cp	r26, r22
    3d46:	b7 07       	cpc	r27, r23
    3d48:	38 f0       	brcs	.+14     	; 0x3d58 <Conditioner_task+0x98>
    3d4a:	60 91 99 18 	lds	r22, 0x1899	; 0x801899 <current_temperature>
    3d4e:	70 91 9a 18 	lds	r23, 0x189A	; 0x80189a <current_temperature+0x1>
    3d52:	6e 17       	cp	r22, r30
    3d54:	7f 07       	cpc	r23, r31
    3d56:	68 f4       	brcc	.+26     	; 0x3d72 <Conditioner_task+0xb2>
    3d58:	82 e8       	ldi	r24, 0x82	; 130
	{
		printf("MOVING the Servo");
    3d5a:	93 e0       	ldi	r25, 0x03	; 3
    3d5c:	9f 93       	push	r25
    3d5e:	8f 93       	push	r24
    3d60:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    3d64:	64 e6       	ldi	r22, 0x64	; 100
		rc_servo_setPosition((uint8_t)0,100);
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <rc_servo_setPosition>
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	08 95       	ret
    3d72:	23 2b       	or	r18, r19
	}
	else if (temp!=0 && ((current_humiditiy>max_humidity) || (current_temperature>max_temperature)))
    3d74:	d9 f0       	breq	.+54     	; 0x3dac <Conditioner_task+0xec>
    3d76:	20 91 95 18 	lds	r18, 0x1895	; 0x801895 <current_humiditiy>
    3d7a:	30 91 96 18 	lds	r19, 0x1896	; 0x801896 <current_humiditiy+0x1>
    3d7e:	42 17       	cp	r20, r18
    3d80:	53 07       	cpc	r21, r19
    3d82:	38 f0       	brcs	.+14     	; 0x3d92 <Conditioner_task+0xd2>
    3d84:	20 91 99 18 	lds	r18, 0x1899	; 0x801899 <current_temperature>
    3d88:	30 91 9a 18 	lds	r19, 0x189A	; 0x80189a <current_temperature+0x1>
    3d8c:	82 17       	cp	r24, r18
    3d8e:	93 07       	cpc	r25, r19
    3d90:	68 f4       	brcc	.+26     	; 0x3dac <Conditioner_task+0xec>
    3d92:	82 e8       	ldi	r24, 0x82	; 130
	{
		printf("MOVING the Servo");
    3d94:	93 e0       	ldi	r25, 0x03	; 3
    3d96:	9f 93       	push	r25
    3d98:	8f 93       	push	r24
    3d9a:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    3d9e:	6c e9       	ldi	r22, 0x9C	; 156
		rc_servo_setPosition((uint8_t)0,-100);
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <rc_servo_setPosition>
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	08 95       	ret
    3dac:	60 e0       	ldi	r22, 0x00	; 0
	}
	else
	{
		rc_servo_setPosition((uint8_t)0,0);
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	0c 94 a9 27 	jmp	0x4f52	; 0x4f52 <rc_servo_setPosition>
    3db4:	08 95       	ret

00003db6 <Conditioner_Task_Run>:
    3db6:	84 df       	rcall	.-248    	; 0x3cc0 <Conditioner_task>
void Conditioner_Task_Run(void* pvParameters)
{	
	(void)pvParameters;
	for (;;)
	{
		Conditioner_task();
    3db8:	fe cf       	rjmp	.-4      	; 0x3db6 <Conditioner_Task_Run>

00003dba <create_message_buffer>:
 #include <lora_driver.h>
 const size_t xMessageBufferSizeBytes = 100;
 
 void create_message_buffer()
 {
	 xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3dba:	41 e0       	ldi	r20, 0x01	; 1
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	84 e6       	ldi	r24, 0x64	; 100
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e 94 ad 0c 	call	0x195a	; 0x195a <xStreamBufferGenericCreate>
    3dc8:	90 93 5d 18 	sts	0x185D, r25	; 0x80185d <xMessageBuffer+0x1>
    3dcc:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <xMessageBuffer>
	 downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);;
    3dd0:	41 e0       	ldi	r20, 0x01	; 1
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	70 e0       	ldi	r23, 0x00	; 0
    3dd6:	8c e2       	ldi	r24, 0x2C	; 44
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 ad 0c 	call	0x195a	; 0x195a <xStreamBufferGenericCreate>
    3dde:	90 93 61 18 	sts	0x1861, r25	; 0x801861 <downlinkMessageBuffer+0x1>
    3de2:	80 93 60 18 	sts	0x1860, r24	; 0x801860 <downlinkMessageBuffer>
    3de6:	08 95       	ret

00003de8 <create_mutex>:
	 
 }
 
 void create_mutex()
 {
	 mutex = xSemaphoreCreateMutex();
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	0e 94 c7 09 	call	0x138e	; 0x138e <xQueueCreateMutex>
    3dee:	90 93 63 18 	sts	0x1863, r25	; 0x801863 <mutex+0x1>
    3df2:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <mutex>
    3df6:	08 95       	ret

00003df8 <create_event_groups>:
 }
 
void create_event_groups()
{
	_meassureEventGroup=xEventGroupCreate();
    3df8:	0e 94 a3 03 	call	0x746	; 0x746 <xEventGroupCreate>
    3dfc:	90 93 5f 18 	sts	0x185F, r25	; 0x80185f <_meassureEventGroup+0x1>
    3e00:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <_meassureEventGroup>
	_dataReadyEventGroup=xEventGroupCreate();
    3e04:	0e 94 a3 03 	call	0x746	; 0x746 <xEventGroupCreate>
    3e08:	90 93 7f 18 	sts	0x187F, r25	; 0x80187f <_dataReadyEventGroup+0x1>
    3e0c:	80 93 7e 18 	sts	0x187E, r24	; 0x80187e <_dataReadyEventGroup>
    3e10:	08 95       	ret

00003e12 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	packet = pvPortMalloc(sizeof(SensorDataPackage));
    3e12:	86 e0       	ldi	r24, 0x06	; 6
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e 94 57 05 	call	0xaae	; 0xaae <pvPortMalloc>
    3e1a:	90 93 a0 18 	sts	0x18A0, r25	; 0x8018a0 <packet+0x1>
    3e1e:	80 93 9f 18 	sts	0x189F, r24	; 0x80189f <packet>
	if (NULL == packet){
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	11 f4       	brne	.+4      	; 0x3e2a <SensorDataPackage_create+0x18>
		return NULL;
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
	}
	return packet;
}
    3e2a:	08 95       	ret

00003e2c <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3e2c:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <packet>
    3e30:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <packet+0x1>
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	80 83       	st	Z, r24
    3e38:	08 95       	ret

00003e3a <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3e3a:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <packet>
    3e3e:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <packet+0x1>
    3e42:	93 83       	std	Z+3, r25	; 0x03
    3e44:	82 83       	std	Z+2, r24	; 0x02
    3e46:	08 95       	ret

00003e48 <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	 
packet->humidityData=data;	
    3e48:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <packet>
    3e4c:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <packet+0x1>
    3e50:	95 83       	std	Z+5, r25	; 0x05
    3e52:	84 83       	std	Z+4, r24	; 0x04
    3e54:	08 95       	ret

00003e56 <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3e56:	eb ef       	ldi	r30, 0xFB	; 251
    3e58:	f6 e1       	ldi	r31, 0x16	; 22
    3e5a:	26 e0       	ldi	r18, 0x06	; 6
    3e5c:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    3e5e:	60 83       	st	Z, r22
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3e60:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <packet>
    3e64:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <packet+0x1>
    3e68:	2c 91       	ld	r18, X
    3e6a:	11 96       	adiw	r26, 0x01	; 1
    3e6c:	3c 91       	ld	r19, X
    3e6e:	11 97       	sbiw	r26, 0x01	; 1
    3e70:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3e72:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3e74:	12 96       	adiw	r26, 0x02	; 2
    3e76:	2c 91       	ld	r18, X
    3e78:	12 97       	sbiw	r26, 0x02	; 2
    3e7a:	13 96       	adiw	r26, 0x03	; 3
    3e7c:	3c 91       	ld	r19, X
    3e7e:	13 97       	sbiw	r26, 0x03	; 3
    3e80:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3e82:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3e84:	14 96       	adiw	r26, 0x04	; 4
    3e86:	2c 91       	ld	r18, X
    3e88:	14 97       	sbiw	r26, 0x04	; 4
    3e8a:	15 96       	adiw	r26, 0x05	; 5
    3e8c:	3c 91       	ld	r19, X
    3e8e:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3e90:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    3e92:	26 e1       	ldi	r18, 0x16	; 22
    3e94:	dc 01       	movw	r26, r24
    3e96:	01 90       	ld	r0, Z+
    3e98:	0d 92       	st	X+, r0
    3e9a:	2a 95       	dec	r18
    3e9c:	e1 f7       	brne	.-8      	; 0x3e96 <getLoRaPayload+0x40>
	}
    3e9e:	08 95       	ret

00003ea0 <get_temperature_data>:
}
//------Get temperature data-----------

uint16_t get_temperature_data()
{
	return (uint16_t)temperature;
    3ea0:	60 91 13 17 	lds	r22, 0x1713	; 0x801713 <temperature>
    3ea4:	70 91 14 17 	lds	r23, 0x1714	; 0x801714 <temperature+0x1>
    3ea8:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <temperature+0x2>
    3eac:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <temperature+0x3>
    3eb0:	f1 d1       	rcall	.+994    	; 0x4294 <__fixunssfsi>
}
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	08 95       	ret

00003eb6 <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
	return humidity;
}
    3eb6:	80 91 11 17 	lds	r24, 0x1711	; 0x801711 <humidity>
    3eba:	90 91 12 17 	lds	r25, 0x1712	; 0x801712 <humidity+0x1>
    3ebe:	08 95       	ret

00003ec0 <tempHum_taskCreate>:

void tempHum_taskCreate(UBaseType_t task_priority){
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	0f 93       	push	r16
	
	xTaskCreate(
    3ec6:	e1 2c       	mov	r14, r1
    3ec8:	f1 2c       	mov	r15, r1
    3eca:	08 2f       	mov	r16, r24
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 ec       	ldi	r20, 0xC0	; 192
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	63 e9       	ldi	r22, 0x93	; 147
    3ed6:	73 e0       	ldi	r23, 0x03	; 3
    3ed8:	87 ee       	ldi	r24, 0xE7	; 231
    3eda:	9f e1       	ldi	r25, 0x1F	; 31
    3edc:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  task_priority // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    3ee0:	0f 91       	pop	r16
    3ee2:	ff 90       	pop	r15
    3ee4:	ef 90       	pop	r14
    3ee6:	08 95       	ret

00003ee8 <tempHum_Run>:


/* Task to run for the sensors to work */
void tempHum_Run() {
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
	event_measure = xEventGroupWaitBits(
    3ef2:	cc 24       	eor	r12, r12
    3ef4:	ca 94       	dec	r12
    3ef6:	dc 2c       	mov	r13, r12
    3ef8:	76 01       	movw	r14, r12
    3efa:	01 e0       	ldi	r16, 0x01	; 1
    3efc:	21 e0       	ldi	r18, 0x01	; 1
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_meassureEventGroup>
    3f0a:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_meassureEventGroup+0x1>
    3f0e:	0e 94 b6 03 	call	0x76c	; 0x76c <xEventGroupWaitBits>
    3f12:	60 93 a1 18 	sts	0x18A1, r22	; 0x8018a1 <event_measure>
    3f16:	70 93 a2 18 	sts	0x18A2, r23	; 0x8018a2 <event_measure+0x1>
    3f1a:	80 93 a3 18 	sts	0x18A3, r24	; 0x8018a3 <event_measure+0x2>
    3f1e:	90 93 a4 18 	sts	0x18A4, r25	; 0x8018a4 <event_measure+0x3>
	TEMPERATURE_HUMIDITY_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
		
	if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    3f22:	60 ff       	sbrs	r22, 0
    3f24:	4e c0       	rjmp	.+156    	; 0x3fc2 <tempHum_Run+0xda>
	{
		vTaskDelay( pdMS_TO_TICKS(100UL));
    3f26:	66 e0       	ldi	r22, 0x06	; 6
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
		if (HIH8120_OK != hih8120_wakeup())
    3f32:	87 d2       	rcall	.+1294   	; 0x4442 <hih8120_wakeup>
    3f34:	88 23       	and	r24, r24
    3f36:	c1 f0       	breq	.+48     	; 0x3f68 <tempHum_Run+0x80>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f38:	66 e0       	ldi	r22, 0x06	; 6
    3f3a:	70 e0       	ldi	r23, 0x00	; 0
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    3f44:	88 ea       	ldi	r24, 0xA8	; 168
    3f46:	93 e0       	ldi	r25, 0x03	; 3
    3f48:	9f 93       	push	r25
    3f4a:	8f 93       	push	r24
    3f4c:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	06 c0       	rjmp	.+12     	; 0x3f62 <tempHum_Run+0x7a>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    3f56:	63 e0       	ldi	r22, 0x03	; 3
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
		vTaskDelay( pdMS_TO_TICKS(100UL));
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3f62:	6f d2       	rcall	.+1246   	; 0x4442 <hih8120_wakeup>
    3f64:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    3f66:	b9 f3       	breq	.-18     	; 0x3f56 <tempHum_Run+0x6e>
    3f68:	81 d2       	rcall	.+1282   	; 0x446c <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3f6a:	63 e0       	ldi	r22, 0x03	; 3
    3f6c:	70 e0       	ldi	r23, 0x00	; 0
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
		if (HIH8120_OK == hih8120_measure() )
    3f76:	7a d2       	rcall	.+1268   	; 0x446c <hih8120_measure>
    3f78:	81 11       	cpse	r24, r1
    3f7a:	23 c0       	rjmp	.+70     	; 0x3fc2 <tempHum_Run+0xda>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f7c:	66 e0       	ldi	r22, 0x06	; 6
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
			humidity =  hih8120_getHumidityPercent_x10();
    3f88:	96 d2       	rcall	.+1324   	; 0x44b6 <hih8120_getHumidityPercent_x10>
    3f8a:	90 93 12 17 	sts	0x1712, r25	; 0x801712 <humidity+0x1>
    3f8e:	80 93 11 17 	sts	0x1711, r24	; 0x801711 <humidity>
			temperature = hih8120_getTemperature_x10();
    3f92:	b5 d2       	rcall	.+1386   	; 0x44fe <hih8120_getTemperature_x10>
    3f94:	bc 01       	movw	r22, r24
    3f96:	99 0f       	add	r25, r25
    3f98:	88 0b       	sbc	r24, r24
    3f9a:	99 0b       	sbc	r25, r25
    3f9c:	a9 d1       	rcall	.+850    	; 0x42f0 <__floatsisf>
    3f9e:	60 93 13 17 	sts	0x1713, r22	; 0x801713 <temperature>
    3fa2:	70 93 14 17 	sts	0x1714, r23	; 0x801714 <temperature+0x1>
    3fa6:	80 93 15 17 	sts	0x1715, r24	; 0x801715 <temperature+0x2>
    3faa:	90 93 16 17 	sts	0x1716, r25	; 0x801716 <temperature+0x3>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3fae:	42 e0       	ldi	r20, 0x02	; 2
    3fb0:	50 e0       	ldi	r21, 0x00	; 0
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	70 e0       	ldi	r23, 0x00	; 0
    3fb6:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <_dataReadyEventGroup>
    3fba:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <_dataReadyEventGroup+0x1>
    3fbe:	0e 94 56 04 	call	0x8ac	; 0x8ac <xEventGroupSetBits>
		}
	}
}
    3fc2:	0f 91       	pop	r16
    3fc4:	ff 90       	pop	r15
    3fc6:	ef 90       	pop	r14
    3fc8:	df 90       	pop	r13
    3fca:	cf 90       	pop	r12
    3fcc:	08 95       	ret

00003fce <tempHum_Task>:
void tempHum_Task( void *pvParameters )
{
	(void)pvParameters;
	for(;;)
	{
		tempHum_Run();
    3fce:	8c df       	rcall	.-232    	; 0x3ee8 <tempHum_Run>
    3fd0:	fe cf       	rjmp	.-4      	; 0x3fce <tempHum_Task>

00003fd2 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
    3fde:	64 97       	sbiw	r28, 0x14	; 20
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	f8 94       	cli
    3fe4:	de bf       	out	0x3e, r29	; 62
    3fe6:	0f be       	out	0x3f, r0	; 63
    3fe8:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ff0:	fe d3       	rcall	.+2044   	; 0x47ee <lora_driver_rn2483FactoryReset>
    3ff2:	7a d6       	rcall	.+3316   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    3ff4:	9f 93       	push	r25
    3ff6:	8f 93       	push	r24
    3ff8:	82 ee       	ldi	r24, 0xE2	; 226
    3ffa:	93 e0       	ldi	r25, 0x03	; 3
    3ffc:	9f 93       	push	r25
    3ffe:	8f 93       	push	r24
    4000:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    4004:	72 d5       	rcall	.+2788   	; 0x4aea <lora_driver_configureToEu868>
    4006:	70 d6       	rcall	.+3296   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    4008:	9f 93       	push	r25
    400a:	8f 93       	push	r24
    400c:	85 ef       	ldi	r24, 0xF5	; 245
    400e:	93 e0       	ldi	r25, 0x03	; 3
    4010:	9f 93       	push	r25
    4012:	8f 93       	push	r24
    4014:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    4018:	8e e0       	ldi	r24, 0x0E	; 14
    401a:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join1");
    401c:	0e 94 52 32 	call	0x64a4	; 0x64a4 <puts>
    4020:	8e 01       	movw	r16, r28
    4022:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    4024:	1f 4f       	sbci	r17, 0xFF	; 255
    4026:	c8 01       	movw	r24, r16
    4028:	f4 d3       	rcall	.+2024   	; 0x4812 <lora_driver_getRn2483Hweui>
    402a:	5e d6       	rcall	.+3260   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    402c:	1f 93       	push	r17
    402e:	0f 93       	push	r16
    4030:	9f 93       	push	r25
    4032:	8f 93       	push	r24
    4034:	8b e1       	ldi	r24, 0x1B	; 27
    4036:	94 e0       	ldi	r25, 0x04	; 4
    4038:	9f 93       	push	r25
    403a:	8f 93       	push	r24
    403c:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    4040:	c8 01       	movw	r24, r16
    4042:	03 d4       	rcall	.+2054   	; 0x484a <lora_driver_setDeviceIdentifier>
    4044:	51 d6       	rcall	.+3234   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    4046:	9f 93       	push	r25
    4048:	8f 93       	push	r24
    404a:	1f 93       	push	r17
    404c:	0f 93       	push	r16
    404e:	8f e2       	ldi	r24, 0x2F	; 47
    4050:	94 e0       	ldi	r25, 0x04	; 4
    4052:	9f 93       	push	r25
    4054:	8f 93       	push	r24
    4056:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    405a:	84 e4       	ldi	r24, 0x44	; 68
    405c:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join2");
    405e:	0e 94 52 32 	call	0x64a4	; 0x64a4 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    4062:	a8 01       	movw	r20, r16
    4064:	61 e5       	ldi	r22, 0x51	; 81
    4066:	74 e0       	ldi	r23, 0x04	; 4
    4068:	82 e7       	ldi	r24, 0x72	; 114
    406a:	94 e0       	ldi	r25, 0x04	; 4
    406c:	1c d6       	rcall	.+3128   	; 0x4ca6 <lora_driver_setOtaaIdentity>
    406e:	3c d6       	rcall	.+3192   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    4070:	9f 93       	push	r25
    4072:	8f 93       	push	r24
    4074:	1f 93       	push	r17
    4076:	0f 93       	push	r16
    4078:	81 e5       	ldi	r24, 0x51	; 81
    407a:	94 e0       	ldi	r25, 0x04	; 4
    407c:	9f 93       	push	r25
    407e:	8f 93       	push	r24
    4080:	82 e7       	ldi	r24, 0x72	; 114
    4082:	94 e0       	ldi	r25, 0x04	; 4
    4084:	9f 93       	push	r25
    4086:	8f 93       	push	r24
    4088:	83 e8       	ldi	r24, 0x83	; 131
    408a:	94 e0       	ldi	r25, 0x04	; 4
    408c:	9f 93       	push	r25
    408e:	8f 93       	push	r24
    4090:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    4094:	0d d4       	rcall	.+2074   	; 0x48b0 <lora_driver_saveMac>
    4096:	28 d6       	rcall	.+3152   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    4098:	9f 93       	push	r25
    409a:	8f 93       	push	r24
    409c:	89 eb       	ldi	r24, 0xB9	; 185
    409e:	94 e0       	ldi	r25, 0x04	; 4
    40a0:	9f 93       	push	r25
    40a2:	8f 93       	push	r24
    40a4:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	f7 d4       	rcall	.+2542   	; 0x4aa4 <lora_driver_setAdaptiveDataRate>
    40b6:	18 d6       	rcall	.+3120   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    40b8:	9f 93       	push	r25
    40ba:	8f 93       	push	r24
    40bc:	88 ec       	ldi	r24, 0xC8	; 200
    40be:	94 e0       	ldi	r25, 0x04	; 4
    40c0:	9f 93       	push	r25
    40c2:	8f 93       	push	r24
    40c4:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
	puts("Try to join3");
    40c8:	89 ee       	ldi	r24, 0xE9	; 233
    40ca:	94 e0       	ldi	r25, 0x04	; 4
    40cc:	0e 94 52 32 	call	0x64a4	; 0x64a4 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    40d0:	84 ef       	ldi	r24, 0xF4	; 244
    40d2:	91 e0       	ldi	r25, 0x01	; 1
    40d4:	f2 d4       	rcall	.+2532   	; 0x4aba <lora_driver_setReceiveDelay>
    40d6:	08 d6       	rcall	.+3088   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    40d8:	9f 93       	push	r25
    40da:	8f 93       	push	r24
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	8f 93       	push	r24
    40e0:	84 ef       	ldi	r24, 0xF4	; 244
    40e2:	8f 93       	push	r24
    40e4:	86 ef       	ldi	r24, 0xF6	; 246
    40e6:	94 e0       	ldi	r25, 0x04	; 4
    40e8:	9f 93       	push	r25
    40ea:	8f 93       	push	r24
    40ec:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    40fa:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	de d3       	rcall	.+1980   	; 0x48bc <lora_driver_join>
    4100:	08 2f       	mov	r16, r24
    4102:	f2 d5       	rcall	.+3044   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4104:	9f 93       	push	r25
    4106:	8f 93       	push	r24
    4108:	1f 92       	push	r1
    410a:	1f 93       	push	r17
    410c:	86 e1       	ldi	r24, 0x16	; 22
    410e:	95 e0       	ldi	r25, 0x05	; 5
    4110:	9f 93       	push	r25
    4112:	8f 93       	push	r24
    4114:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
    4124:	08 30       	cpi	r16, 0x08	; 8
    4126:	59 f0       	breq	.+22     	; 0x413e <uplink_lora_setup+0x16c>
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    412e:	66 e3       	ldi	r22, 0x36	; 54
    4130:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
    413a:	11 50       	subi	r17, 0x01	; 1
    413c:	f9 f6       	brne	.-66     	; 0x40fc <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    413e:	08 30       	cpi	r16, 0x08	; 8
    4140:	21 f4       	brne	.+8      	; 0x414a <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    4148:	0d c0       	rjmp	.+26     	; 0x4164 <uplink_lora_setup+0x192>
    414a:	86 e3       	ldi	r24, 0x36	; 54
		while (1)
		{
			taskYIELD();
		}
	}
}
    414c:	95 e0       	ldi	r25, 0x05	; 5
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    414e:	0e 94 52 32 	call	0x64a4	; 0x64a4 <puts>
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    415e:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4162:	fd cf       	rjmp	.-6      	; 0x415e <uplink_lora_setup+0x18c>
    4164:	64 96       	adiw	r28, 0x14	; 20
    4166:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    4168:	f8 94       	cli
    416a:	de bf       	out	0x3e, r29	; 62
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	1f 91       	pop	r17
    4176:	0f 91       	pop	r16
    4178:	08 95       	ret

0000417a <upLink_create>:
    417a:	ef 92       	push	r14
    417c:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority)
{
    417e:	0f 93       	push	r16
	
	
	xTaskCreate(
    4180:	20 91 5c 18 	lds	r18, 0x185C	; 0x80185c <xMessageBuffer>
    4184:	30 91 5d 18 	lds	r19, 0x185D	; 0x80185d <xMessageBuffer+0x1>
    4188:	e1 2c       	mov	r14, r1
    418a:	f1 2c       	mov	r15, r1
    418c:	08 2f       	mov	r16, r24
    418e:	48 e8       	ldi	r20, 0x88	; 136
    4190:	51 e0       	ldi	r21, 0x01	; 1
    4192:	61 e4       	ldi	r22, 0x41	; 65
    4194:	75 e0       	ldi	r23, 0x05	; 5
    4196:	81 e1       	ldi	r24, 0x11	; 17
    4198:	91 e2       	ldi	r25, 0x21	; 33
    419a:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)xMessageBuffer,
	priority,
	NULL );
}
    419e:	0f 91       	pop	r16
    41a0:	ff 90       	pop	r15
    41a2:	ef 90       	pop	r14
    41a4:	08 95       	ret

000041a6 <send>:
	{
		send(xBytesSent);
	}
}

void send(size_t xBytesSent){
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
	
	xBytesSent = xMessageBufferReceive(
    41aa:	0f ef       	ldi	r16, 0xFF	; 255
    41ac:	1f ef       	ldi	r17, 0xFF	; 255
    41ae:	98 01       	movw	r18, r16
    41b0:	46 e1       	ldi	r20, 0x16	; 22
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	67 e1       	ldi	r22, 0x17	; 23
    41b6:	77 e1       	ldi	r23, 0x17	; 23
    41b8:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <xMessageBuffer>
    41bc:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <xMessageBuffer+0x1>
    41c0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <xStreamBufferReceive>
	xMessageBuffer,
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(_uplink_payload),	// Size of object
	portMAX_DELAY);
	if (xBytesSent>0)
    41c4:	89 2b       	or	r24, r25
    41c6:	a1 f0       	breq	.+40     	; 0x41f0 <send+0x4a>
	{
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    41c8:	83 e0       	ldi	r24, 0x03	; 3
    41ca:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    41ce:	67 e1       	ldi	r22, 0x17	; 23
    41d0:	77 e1       	ldi	r23, 0x17	; 23
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	9c d3       	rcall	.+1848   	; 0x490e <lora_driver_sendUploadMessage>
    41d6:	88 d5       	rcall	.+2832   	; 0x4ce8 <lora_driver_mapReturnCodeToText>
    41d8:	9f 93       	push	r25
    41da:	8f 93       	push	r24
    41dc:	8c e4       	ldi	r24, 0x4C	; 76
    41de:	95 e0       	ldi	r25, 0x05	; 5
    41e0:	9f 93       	push	r25
    41e2:	8f 93       	push	r24
    41e4:	0e 94 3f 32 	call	0x647e	; 0x647e <printf>
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	0f 90       	pop	r0
    41ee:	0f 90       	pop	r0
	}
}
    41f0:	1f 91       	pop	r17
    41f2:	0f 91       	pop	r16
    41f4:	08 95       	ret

000041f6 <lora_Handler_task>:


void lora_Handler_task()
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	ec d2       	rcall	.+1496   	; 0x47d2 <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    41fa:	62 e0       	ldi	r22, 0x02	; 2
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
	lora_driver_resetRn2483(0);
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	e4 d2       	rcall	.+1480   	; 0x47d2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    420a:	66 e9       	ldi	r22, 0x96	; 150
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4216:	96 d2       	rcall	.+1324   	; 0x4744 <lora_driver_flushBuffers>
	uplink_lora_setup();
    4218:	dc de       	rcall	.-584    	; 0x3fd2 <uplink_lora_setup>
	size_t xBytesSent;
	
	for(;;)
	{
		send(xBytesSent);
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	c3 df       	rcall	.-122    	; 0x41a6 <send>
    4220:	fc cf       	rjmp	.-8      	; 0x421a <lora_Handler_task+0x24>

00004222 <upLinkHandler_StartTask>:
    4222:	e9 df       	rcall	.-46     	; 0x41f6 <lora_Handler_task>

00004224 <create_tasks>:
extern MessageBufferHandle_t downlinkMessageBuffer;

void create_tasks()
{
	
	application_task_create(3);
    4224:	83 e0       	ldi	r24, 0x03	; 3
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	0e 94 08 01 	call	0x210	; 0x210 <application_task_create>
	co2_task_create(1);
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <co2_task_create>
	tempHum_taskCreate(1);
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	45 de       	rcall	.-886    	; 0x3ec0 <tempHum_taskCreate>
	//ToDo maybe to move inside the application task
	SensorDataPackage_create();
    4236:	ed dd       	rcall	.-1062   	; 0x3e12 <SensorDataPackage_create>
	conditioner_controller_create(4);
    4238:	84 e0       	ldi	r24, 0x04	; 4
    423a:	2e cd       	rjmp	.-1444   	; 0x3c98 <conditioner_controller_create>
    423c:	08 95       	ret

0000423e <drivers_initialisation>:
    423e:	e9 d0       	rcall	.+466    	; 0x4412 <hih8120_initialise>

void drivers_initialisation()
{
	
	  hih8120_initialise();
	  mh_z19_initialise(ser_USART3);
    4240:	83 e0       	ldi	r24, 0x03	; 3
	  rc_servo_initialise();
    4242:	2e d6       	rcall	.+3164   	; 0x4ea0 <mh_z19_initialise>
    4244:	9e c6       	rjmp	.+3388   	; 0x4f82 <rc_servo_initialise>
    4246:	08 95       	ret

00004248 <createUtility>:
}

void createUtility()
{
	create_event_groups();
    4248:	d7 dd       	rcall	.-1106   	; 0x3df8 <create_event_groups>
	create_message_buffer();
    424a:	b7 dd       	rcall	.-1170   	; 0x3dba <create_message_buffer>
	create_mutex();
    424c:	cd cd       	rjmp	.-1126   	; 0x3de8 <create_mutex>
    424e:	08 95       	ret

00004250 <initialiseSystem>:
    4250:	81 b1       	in	r24, 0x01	; 1
}

void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    4252:	81 68       	ori	r24, 0x81	; 129
    4254:	81 b9       	out	0x01, r24	; 1
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	0e 94 94 2b 	call	0x5728	; 0x5728 <stdio_initialise>
	drivers_initialisation();
    425c:	f0 df       	rcall	.-32     	; 0x423e <drivers_initialisation>
	create_tasks();
    425e:	e2 df       	rcall	.-60     	; 0x4224 <create_tasks>
    4260:	85 e0       	ldi	r24, 0x05	; 5
	status_leds_initialise(5); // Priority 5 for internal task
    4262:	0e 94 9b 2c 	call	0x5936	; 0x5936 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	createUtility();
    4266:	f0 df       	rcall	.-32     	; 0x4248 <createUtility>
    4268:	60 91 60 18 	lds	r22, 0x1860	; 0x801860 <downlinkMessageBuffer>
	lora_driver_initialise(1, downlinkMessageBuffer);
    426c:	70 91 61 18 	lds	r23, 0x1861	; 0x801861 <downlinkMessageBuffer+0x1>
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	6f d2       	rcall	.+1246   	; 0x4752 <lora_driver_initialise>
	// Create UpLinkTask and start it up with priority 4 and setup the LoRaWan
	upLink_create(4);
    4274:	84 e0       	ldi	r24, 0x04	; 4
    4276:	81 df       	rcall	.-254    	; 0x417a <upLink_create>
    4278:	85 e0       	ldi	r24, 0x05	; 5
	
	// Create DownlinkTask and start it up with priority 5
	lora_DownLinkHandler_create(5);
    427a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <lora_DownLinkHandler_create>
    427e:	08 95       	ret

00004280 <main>:
    4280:	e7 df       	rcall	.-50     	; 0x4250 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program started \n");
    4282:	81 e6       	ldi	r24, 0x61	; 97
    4284:	95 e0       	ldi	r25, 0x05	; 5
    4286:	0e 94 52 32 	call	0x64a4	; 0x64a4 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    428a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <vTaskStartScheduler>
	
}
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	08 95       	ret

00004294 <__fixunssfsi>:
    4294:	70 d0       	rcall	.+224    	; 0x4376 <__fp_splitA>
    4296:	88 f0       	brcs	.+34     	; 0x42ba <__fixunssfsi+0x26>
    4298:	9f 57       	subi	r25, 0x7F	; 127
    429a:	90 f0       	brcs	.+36     	; 0x42c0 <__fixunssfsi+0x2c>
    429c:	b9 2f       	mov	r27, r25
    429e:	99 27       	eor	r25, r25
    42a0:	b7 51       	subi	r27, 0x17	; 23
    42a2:	a0 f0       	brcs	.+40     	; 0x42cc <__fixunssfsi+0x38>
    42a4:	d1 f0       	breq	.+52     	; 0x42da <__fixunssfsi+0x46>
    42a6:	66 0f       	add	r22, r22
    42a8:	77 1f       	adc	r23, r23
    42aa:	88 1f       	adc	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	1a f0       	brmi	.+6      	; 0x42b6 <__fixunssfsi+0x22>
    42b0:	ba 95       	dec	r27
    42b2:	c9 f7       	brne	.-14     	; 0x42a6 <__fixunssfsi+0x12>
    42b4:	12 c0       	rjmp	.+36     	; 0x42da <__fixunssfsi+0x46>
    42b6:	b1 30       	cpi	r27, 0x01	; 1
    42b8:	81 f0       	breq	.+32     	; 0x42da <__fixunssfsi+0x46>
    42ba:	77 d0       	rcall	.+238    	; 0x43aa <__fp_zero>
    42bc:	b1 e0       	ldi	r27, 0x01	; 1
    42be:	08 95       	ret
    42c0:	74 c0       	rjmp	.+232    	; 0x43aa <__fp_zero>
    42c2:	67 2f       	mov	r22, r23
    42c4:	78 2f       	mov	r23, r24
    42c6:	88 27       	eor	r24, r24
    42c8:	b8 5f       	subi	r27, 0xF8	; 248
    42ca:	39 f0       	breq	.+14     	; 0x42da <__fixunssfsi+0x46>
    42cc:	b9 3f       	cpi	r27, 0xF9	; 249
    42ce:	cc f3       	brlt	.-14     	; 0x42c2 <__fixunssfsi+0x2e>
    42d0:	86 95       	lsr	r24
    42d2:	77 95       	ror	r23
    42d4:	67 95       	ror	r22
    42d6:	b3 95       	inc	r27
    42d8:	d9 f7       	brne	.-10     	; 0x42d0 <__fixunssfsi+0x3c>
    42da:	3e f4       	brtc	.+14     	; 0x42ea <__fixunssfsi+0x56>
    42dc:	90 95       	com	r25
    42de:	80 95       	com	r24
    42e0:	70 95       	com	r23
    42e2:	61 95       	neg	r22
    42e4:	7f 4f       	sbci	r23, 0xFF	; 255
    42e6:	8f 4f       	sbci	r24, 0xFF	; 255
    42e8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ea:	08 95       	ret

000042ec <__floatunsisf>:
    42ec:	e8 94       	clt
    42ee:	09 c0       	rjmp	.+18     	; 0x4302 <__floatsisf+0x12>

000042f0 <__floatsisf>:
    42f0:	97 fb       	bst	r25, 7
    42f2:	3e f4       	brtc	.+14     	; 0x4302 <__floatsisf+0x12>
    42f4:	90 95       	com	r25
    42f6:	80 95       	com	r24
    42f8:	70 95       	com	r23
    42fa:	61 95       	neg	r22
    42fc:	7f 4f       	sbci	r23, 0xFF	; 255
    42fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4300:	9f 4f       	sbci	r25, 0xFF	; 255
    4302:	99 23       	and	r25, r25
    4304:	a9 f0       	breq	.+42     	; 0x4330 <__floatsisf+0x40>
    4306:	f9 2f       	mov	r31, r25
    4308:	96 e9       	ldi	r25, 0x96	; 150
    430a:	bb 27       	eor	r27, r27
    430c:	93 95       	inc	r25
    430e:	f6 95       	lsr	r31
    4310:	87 95       	ror	r24
    4312:	77 95       	ror	r23
    4314:	67 95       	ror	r22
    4316:	b7 95       	ror	r27
    4318:	f1 11       	cpse	r31, r1
    431a:	f8 cf       	rjmp	.-16     	; 0x430c <__floatsisf+0x1c>
    431c:	fa f4       	brpl	.+62     	; 0x435c <__floatsisf+0x6c>
    431e:	bb 0f       	add	r27, r27
    4320:	11 f4       	brne	.+4      	; 0x4326 <__floatsisf+0x36>
    4322:	60 ff       	sbrs	r22, 0
    4324:	1b c0       	rjmp	.+54     	; 0x435c <__floatsisf+0x6c>
    4326:	6f 5f       	subi	r22, 0xFF	; 255
    4328:	7f 4f       	sbci	r23, 0xFF	; 255
    432a:	8f 4f       	sbci	r24, 0xFF	; 255
    432c:	9f 4f       	sbci	r25, 0xFF	; 255
    432e:	16 c0       	rjmp	.+44     	; 0x435c <__floatsisf+0x6c>
    4330:	88 23       	and	r24, r24
    4332:	11 f0       	breq	.+4      	; 0x4338 <__floatsisf+0x48>
    4334:	96 e9       	ldi	r25, 0x96	; 150
    4336:	11 c0       	rjmp	.+34     	; 0x435a <__floatsisf+0x6a>
    4338:	77 23       	and	r23, r23
    433a:	21 f0       	breq	.+8      	; 0x4344 <__floatsisf+0x54>
    433c:	9e e8       	ldi	r25, 0x8E	; 142
    433e:	87 2f       	mov	r24, r23
    4340:	76 2f       	mov	r23, r22
    4342:	05 c0       	rjmp	.+10     	; 0x434e <__floatsisf+0x5e>
    4344:	66 23       	and	r22, r22
    4346:	71 f0       	breq	.+28     	; 0x4364 <__floatsisf+0x74>
    4348:	96 e8       	ldi	r25, 0x86	; 134
    434a:	86 2f       	mov	r24, r22
    434c:	70 e0       	ldi	r23, 0x00	; 0
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	2a f0       	brmi	.+10     	; 0x435c <__floatsisf+0x6c>
    4352:	9a 95       	dec	r25
    4354:	66 0f       	add	r22, r22
    4356:	77 1f       	adc	r23, r23
    4358:	88 1f       	adc	r24, r24
    435a:	da f7       	brpl	.-10     	; 0x4352 <__floatsisf+0x62>
    435c:	88 0f       	add	r24, r24
    435e:	96 95       	lsr	r25
    4360:	87 95       	ror	r24
    4362:	97 f9       	bld	r25, 7
    4364:	08 95       	ret

00004366 <__fp_split3>:
    4366:	57 fd       	sbrc	r21, 7
    4368:	90 58       	subi	r25, 0x80	; 128
    436a:	44 0f       	add	r20, r20
    436c:	55 1f       	adc	r21, r21
    436e:	59 f0       	breq	.+22     	; 0x4386 <__fp_splitA+0x10>
    4370:	5f 3f       	cpi	r21, 0xFF	; 255
    4372:	71 f0       	breq	.+28     	; 0x4390 <__fp_splitA+0x1a>
    4374:	47 95       	ror	r20

00004376 <__fp_splitA>:
    4376:	88 0f       	add	r24, r24
    4378:	97 fb       	bst	r25, 7
    437a:	99 1f       	adc	r25, r25
    437c:	61 f0       	breq	.+24     	; 0x4396 <__fp_splitA+0x20>
    437e:	9f 3f       	cpi	r25, 0xFF	; 255
    4380:	79 f0       	breq	.+30     	; 0x43a0 <__fp_splitA+0x2a>
    4382:	87 95       	ror	r24
    4384:	08 95       	ret
    4386:	12 16       	cp	r1, r18
    4388:	13 06       	cpc	r1, r19
    438a:	14 06       	cpc	r1, r20
    438c:	55 1f       	adc	r21, r21
    438e:	f2 cf       	rjmp	.-28     	; 0x4374 <__fp_split3+0xe>
    4390:	46 95       	lsr	r20
    4392:	f1 df       	rcall	.-30     	; 0x4376 <__fp_splitA>
    4394:	08 c0       	rjmp	.+16     	; 0x43a6 <__fp_splitA+0x30>
    4396:	16 16       	cp	r1, r22
    4398:	17 06       	cpc	r1, r23
    439a:	18 06       	cpc	r1, r24
    439c:	99 1f       	adc	r25, r25
    439e:	f1 cf       	rjmp	.-30     	; 0x4382 <__fp_splitA+0xc>
    43a0:	86 95       	lsr	r24
    43a2:	71 05       	cpc	r23, r1
    43a4:	61 05       	cpc	r22, r1
    43a6:	08 94       	sec
    43a8:	08 95       	ret

000043aa <__fp_zero>:
    43aa:	e8 94       	clt

000043ac <__fp_szero>:
    43ac:	bb 27       	eor	r27, r27
    43ae:	66 27       	eor	r22, r22
    43b0:	77 27       	eor	r23, r23
    43b2:	cb 01       	movw	r24, r22
    43b4:	97 f9       	bld	r25, 7
    43b6:	08 95       	ret

000043b8 <_hihTwiCallback>:
    43b8:	65 30       	cpi	r22, 0x05	; 5
    43ba:	f1 f4       	brne	.+60     	; 0x43f8 <_hihTwiCallback+0x40>
    43bc:	fa 01       	movw	r30, r20
    43be:	80 81       	ld	r24, Z
    43c0:	8f 73       	andi	r24, 0x3F	; 63
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	98 2f       	mov	r25, r24
    43c6:	88 27       	eor	r24, r24
    43c8:	21 81       	ldd	r18, Z+1	; 0x01
    43ca:	82 2b       	or	r24, r18
    43cc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    43d0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    43d4:	82 81       	ldd	r24, Z+2	; 0x02
    43d6:	f0 e4       	ldi	r31, 0x40	; 64
    43d8:	8f 9f       	mul	r24, r31
    43da:	c0 01       	movw	r24, r0
    43dc:	11 24       	eor	r1, r1
    43de:	fa 01       	movw	r30, r20
    43e0:	23 81       	ldd	r18, Z+3	; 0x03
    43e2:	26 95       	lsr	r18
    43e4:	26 95       	lsr	r18
    43e6:	82 2b       	or	r24, r18
    43e8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    43ec:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	80 93 2d 17 	sts	0x172D, r24	; 0x80172d <_measuringIsReady>
    43f6:	08 95       	ret
    43f8:	64 30       	cpi	r22, 0x04	; 4
    43fa:	51 f0       	breq	.+20     	; 0x4410 <_hihTwiCallback+0x58>
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e4       	ldi	r25, 0x40	; 64
    4400:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4404:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4408:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    440c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4410:	08 95       	ret

00004412 <hih8120_initialise>:
    4412:	0f 93       	push	r16
    4414:	1f 93       	push	r17
    4416:	0c ed       	ldi	r16, 0xDC	; 220
    4418:	11 e2       	ldi	r17, 0x21	; 33
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	34 e2       	ldi	r19, 0x24	; 36
    441e:	44 ef       	ldi	r20, 0xF4	; 244
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	60 e0       	ldi	r22, 0x00	; 0
    4424:	87 e2       	ldi	r24, 0x27	; 39
    4426:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <twiCreate>
    442a:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <_hih8120Handler+0x1>
    442e:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <_hih8120Handler>
    4432:	21 e0       	ldi	r18, 0x01	; 1
    4434:	89 2b       	or	r24, r25
    4436:	09 f0       	breq	.+2      	; 0x443a <hih8120_initialise+0x28>
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	82 2f       	mov	r24, r18
    443c:	1f 91       	pop	r17
    443e:	0f 91       	pop	r16
    4440:	08 95       	ret

00004442 <hih8120_wakeup>:
    4442:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <_hih8120Handler>
    4446:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <_hih8120Handler+0x1>
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	59 f0       	breq	.+22     	; 0x4464 <hih8120_wakeup+0x22>
    444e:	40 e0       	ldi	r20, 0x00	; 0
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	70 e0       	ldi	r23, 0x00	; 0
    4454:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <twiTransmit>
    4458:	84 30       	cpi	r24, 0x04	; 4
    445a:	31 f4       	brne	.+12     	; 0x4468 <hih8120_wakeup+0x26>
    445c:	10 92 2d 17 	sts	0x172D, r1	; 0x80172d <_measuringIsReady>
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	08 95       	ret
    4464:	82 e0       	ldi	r24, 0x02	; 2
    4466:	08 95       	ret
    4468:	83 e0       	ldi	r24, 0x03	; 3
    446a:	08 95       	ret

0000446c <hih8120_measure>:
    446c:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <_hih8120Handler>
    4470:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <_hih8120Handler+0x1>
    4474:	00 97       	sbiw	r24, 0x00	; 0
    4476:	39 f0       	breq	.+14     	; 0x4486 <hih8120_measure+0x1a>
    4478:	64 e0       	ldi	r22, 0x04	; 4
    447a:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <twiReceive>
    447e:	85 30       	cpi	r24, 0x05	; 5
    4480:	21 f0       	breq	.+8      	; 0x448a <hih8120_measure+0x1e>
    4482:	83 e0       	ldi	r24, 0x03	; 3
    4484:	08 95       	ret
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	08 95       	ret
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	08 95       	ret

0000448e <hih8120_getHumidity>:
    448e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4492:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	28 df       	rcall	.-432    	; 0x42ec <__floatunsisf>
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	48 ec       	ldi	r20, 0xC8	; 200
    44a2:	52 e4       	ldi	r21, 0x42	; 66
    44a4:	0e 94 2b 30 	call	0x6056	; 0x6056 <__mulsf3>
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	38 ef       	ldi	r19, 0xF8	; 248
    44ac:	4f e7       	ldi	r20, 0x7F	; 127
    44ae:	56 e4       	ldi	r21, 0x46	; 70
    44b0:	0c 94 91 2f 	jmp	0x5f22	; 0x5f22 <__divsf3>
    44b4:	08 95       	ret

000044b6 <hih8120_getHumidityPercent_x10>:
    44b6:	eb df       	rcall	.-42     	; 0x448e <hih8120_getHumidity>
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e2       	ldi	r20, 0x20	; 32
    44be:	51 e4       	ldi	r21, 0x41	; 65
    44c0:	0e 94 2b 30 	call	0x6056	; 0x6056 <__mulsf3>
    44c4:	e7 de       	rcall	.-562    	; 0x4294 <__fixunssfsi>
    44c6:	cb 01       	movw	r24, r22
    44c8:	08 95       	ret

000044ca <hih8120_getTemperature>:
    44ca:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    44ce:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0a df       	rcall	.-492    	; 0x42ec <__floatunsisf>
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	45 e2       	ldi	r20, 0x25	; 37
    44de:	53 e4       	ldi	r21, 0x43	; 67
    44e0:	0e 94 2b 30 	call	0x6056	; 0x6056 <__mulsf3>
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	38 ef       	ldi	r19, 0xF8	; 248
    44e8:	4f e7       	ldi	r20, 0x7F	; 127
    44ea:	56 e4       	ldi	r21, 0x46	; 70
    44ec:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <__divsf3>
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	40 e2       	ldi	r20, 0x20	; 32
    44f6:	52 e4       	ldi	r21, 0x42	; 66
    44f8:	0c 94 2a 2f 	jmp	0x5e54	; 0x5e54 <__subsf3>
    44fc:	08 95       	ret

000044fe <hih8120_getTemperature_x10>:
    44fe:	e5 df       	rcall	.-54     	; 0x44ca <hih8120_getTemperature>
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e2       	ldi	r20, 0x20	; 32
    4506:	51 e4       	ldi	r21, 0x41	; 65
    4508:	0e 94 2b 30 	call	0x6056	; 0x6056 <__mulsf3>
    450c:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__fixsfsi>
    4510:	cb 01       	movw	r24, r22
    4512:	08 95       	ret

00004514 <_serialCallBack>:
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	1f 92       	push	r1
    451e:	1f 92       	push	r1
    4520:	cd b7       	in	r28, 0x3d	; 61
    4522:	de b7       	in	r29, 0x3e	; 62
    4524:	8c 01       	movw	r16, r24
    4526:	19 82       	std	Y+1, r1	; 0x01
    4528:	2d c0       	rjmp	.+90     	; 0x4584 <_serialCallBack+0x70>
    452a:	e0 91 67 17 	lds	r30, 0x1767	; 0x801767 <rec_buf_inp.2878>
    452e:	ec 32       	cpi	r30, 0x2C	; 44
    4530:	50 f4       	brcc	.+20     	; 0x4546 <_serialCallBack+0x32>
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	8e 0f       	add	r24, r30
    4536:	80 93 67 17 	sts	0x1767, r24	; 0x801767 <rec_buf_inp.2878>
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	e7 56       	subi	r30, 0x67	; 103
    453e:	f8 4e       	sbci	r31, 0xE8	; 232
    4540:	8a 81       	ldd	r24, Y+2	; 0x02
    4542:	80 83       	st	Z, r24
    4544:	02 c0       	rjmp	.+4      	; 0x454a <_serialCallBack+0x36>
    4546:	10 92 67 17 	sts	0x1767, r1	; 0x801767 <rec_buf_inp.2878>
    454a:	8a 81       	ldd	r24, Y+2	; 0x02
    454c:	8a 30       	cpi	r24, 0x0A	; 10
    454e:	d1 f4       	brne	.+52     	; 0x4584 <_serialCallBack+0x70>
    4550:	40 91 67 17 	lds	r20, 0x1767	; 0x801767 <rec_buf_inp.2878>
    4554:	50 e0       	ldi	r21, 0x00	; 0
    4556:	fa 01       	movw	r30, r20
    4558:	e9 56       	subi	r30, 0x69	; 105
    455a:	f8 4e       	sbci	r31, 0xE8	; 232
    455c:	10 82       	st	Z, r1
    455e:	41 50       	subi	r20, 0x01	; 1
    4560:	51 09       	sbc	r21, r1
    4562:	9e 01       	movw	r18, r28
    4564:	2f 5f       	subi	r18, 0xFF	; 255
    4566:	3f 4f       	sbci	r19, 0xFF	; 255
    4568:	69 e9       	ldi	r22, 0x99	; 153
    456a:	77 e1       	ldi	r23, 0x17	; 23
    456c:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_serialReplyBufferHandle>
    4570:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_serialReplyBufferHandle+0x1>
    4574:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xStreamBufferSendFromISR>
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	81 11       	cpse	r24, r1
    457c:	0e 94 0b 07 	call	0xe16	; 0xe16 <vPortYield>
    4580:	10 92 67 17 	sts	0x1767, r1	; 0x801767 <rec_buf_inp.2878>
    4584:	be 01       	movw	r22, r28
    4586:	6e 5f       	subi	r22, 0xFE	; 254
    4588:	7f 4f       	sbci	r23, 0xFF	; 255
    458a:	c8 01       	movw	r24, r16
    458c:	37 d6       	rcall	.+3182   	; 0x51fc <serial_getByte>
    458e:	88 23       	and	r24, r24
    4590:	61 f2       	breq	.-104    	; 0x452a <_serialCallBack+0x16>
    4592:	0f 90       	pop	r0
    4594:	0f 90       	pop	r0
    4596:	df 91       	pop	r29
    4598:	cf 91       	pop	r28
    459a:	1f 91       	pop	r17
    459c:	0f 91       	pop	r16
    459e:	08 95       	ret

000045a0 <_uploadMessage>:
    45a0:	0f 93       	push	r16
    45a2:	1f 93       	push	r17
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	8c 01       	movw	r16, r24
    45aa:	eb 01       	movw	r28, r22
    45ac:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_serialReplyBufferHandle>
    45b0:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_serialReplyBufferHandle+0x1>
    45b4:	0e 94 df 0c 	call	0x19be	; 0x19be <xStreamBufferReset>
    45b8:	b8 01       	movw	r22, r16
    45ba:	80 e3       	ldi	r24, 0x30	; 48
    45bc:	97 e1       	ldi	r25, 0x17	; 23
    45be:	0e 94 20 32 	call	0x6440	; 0x6440 <strcpy>
    45c2:	20 97       	sbiw	r28, 0x00	; 0
    45c4:	79 f0       	breq	.+30     	; 0x45e4 <_uploadMessage+0x44>
    45c6:	e0 e3       	ldi	r30, 0x30	; 48
    45c8:	f7 e1       	ldi	r31, 0x17	; 23
    45ca:	01 90       	ld	r0, Z+
    45cc:	00 20       	and	r0, r0
    45ce:	e9 f7       	brne	.-6      	; 0x45ca <_uploadMessage+0x2a>
    45d0:	31 97       	sbiw	r30, 0x01	; 1
    45d2:	80 e2       	ldi	r24, 0x20	; 32
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	80 83       	st	Z, r24
    45da:	be 01       	movw	r22, r28
    45dc:	80 e3       	ldi	r24, 0x30	; 48
    45de:	97 e1       	ldi	r25, 0x17	; 23
    45e0:	0e 94 15 32 	call	0x642a	; 0x642a <strcat>
    45e4:	e0 e3       	ldi	r30, 0x30	; 48
    45e6:	f7 e1       	ldi	r31, 0x17	; 23
    45e8:	df 01       	movw	r26, r30
    45ea:	0d 90       	ld	r0, X+
    45ec:	00 20       	and	r0, r0
    45ee:	e9 f7       	brne	.-6      	; 0x45ea <_uploadMessage+0x4a>
    45f0:	11 97       	sbiw	r26, 0x01	; 1
    45f2:	8d e0       	ldi	r24, 0x0D	; 13
    45f4:	9a e0       	ldi	r25, 0x0A	; 10
    45f6:	11 96       	adiw	r26, 0x01	; 1
    45f8:	9c 93       	st	X, r25
    45fa:	8e 93       	st	-X, r24
    45fc:	12 96       	adiw	r26, 0x02	; 2
    45fe:	1c 92       	st	X, r1
    4600:	01 90       	ld	r0, Z+
    4602:	00 20       	and	r0, r0
    4604:	e9 f7       	brne	.-6      	; 0x4600 <_uploadMessage+0x60>
    4606:	31 97       	sbiw	r30, 0x01	; 1
    4608:	e0 53       	subi	r30, 0x30	; 48
    460a:	f7 41       	sbci	r31, 0x17	; 23
    460c:	ae 2f       	mov	r26, r30
    460e:	80 e3       	ldi	r24, 0x30	; 48
    4610:	97 e1       	ldi	r25, 0x17	; 23
    4612:	ac 01       	movw	r20, r24
    4614:	6a 2f       	mov	r22, r26
    4616:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <_rn2483_serial>
    461a:	90 91 6d 17 	lds	r25, 0x176D	; 0x80176d <_rn2483_serial+0x1>
    461e:	99 d5       	rcall	.+2866   	; 0x5152 <serial_sendBytes>
    4620:	81 11       	cpse	r24, r1
    4622:	11 c0       	rjmp	.+34     	; 0x4646 <_uploadMessage+0xa6>
    4624:	08 e2       	ldi	r16, 0x28	; 40
    4626:	15 e0       	ldi	r17, 0x05	; 5
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	4d e2       	ldi	r20, 0x2D	; 45
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	63 ef       	ldi	r22, 0xF3	; 243
    4632:	77 e1       	ldi	r23, 0x17	; 23
    4634:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_serialReplyBufferHandle>
    4638:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_serialReplyBufferHandle+0x1>
    463c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <xStreamBufferReceive>
    4640:	83 ef       	ldi	r24, 0xF3	; 243
    4642:	97 e1       	ldi	r25, 0x17	; 23
    4644:	02 c0       	rjmp	.+4      	; 0x464a <_uploadMessage+0xaa>
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	1f 91       	pop	r17
    4650:	0f 91       	pop	r16
    4652:	08 95       	ret

00004654 <_reply2ReturnCode>:
    4654:	2f 92       	push	r2
    4656:	3f 92       	push	r3
    4658:	4f 92       	push	r4
    465a:	5f 92       	push	r5
    465c:	6f 92       	push	r6
    465e:	7f 92       	push	r7
    4660:	8f 92       	push	r8
    4662:	9f 92       	push	r9
    4664:	af 92       	push	r10
    4666:	bf 92       	push	r11
    4668:	cf 92       	push	r12
    466a:	df 92       	push	r13
    466c:	ef 92       	push	r14
    466e:	ff 92       	push	r15
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	5c 01       	movw	r10, r24
    467a:	fc 01       	movw	r30, r24
    467c:	01 90       	ld	r0, Z+
    467e:	00 20       	and	r0, r0
    4680:	e9 f7       	brne	.-6      	; 0x467c <_reply2ReturnCode+0x28>
    4682:	31 97       	sbiw	r30, 0x01	; 1
    4684:	6f 01       	movw	r12, r30
    4686:	c8 1a       	sub	r12, r24
    4688:	d9 0a       	sbc	r13, r25
    468a:	5c 2c       	mov	r5, r12
    468c:	0f 2e       	mov	r0, r31
    468e:	fb e0       	ldi	r31, 0x0B	; 11
    4690:	8f 2e       	mov	r8, r31
    4692:	f8 e0       	ldi	r31, 0x08	; 8
    4694:	9f 2e       	mov	r9, r31
    4696:	f0 2d       	mov	r31, r0
    4698:	e1 2c       	mov	r14, r1
    469a:	f1 2c       	mov	r15, r1
    469c:	4c 2c       	mov	r4, r12
    469e:	37 01       	movw	r6, r14
    46a0:	f4 01       	movw	r30, r8
    46a2:	01 81       	ldd	r16, Z+1	; 0x01
    46a4:	12 81       	ldd	r17, Z+2	; 0x02
    46a6:	e8 01       	movw	r28, r16
    46a8:	09 90       	ld	r0, Y+
    46aa:	00 20       	and	r0, r0
    46ac:	e9 f7       	brne	.-6      	; 0x46a8 <_reply2ReturnCode+0x54>
    46ae:	21 97       	sbiw	r28, 0x01	; 1
    46b0:	c0 1b       	sub	r28, r16
    46b2:	d1 0b       	sbc	r29, r17
    46b4:	3c 2e       	mov	r3, r28
    46b6:	f9 e0       	ldi	r31, 0x09	; 9
    46b8:	cf 16       	cp	r12, r31
    46ba:	d1 04       	cpc	r13, r1
    46bc:	58 f0       	brcs	.+22     	; 0x46d4 <_reply2ReturnCode+0x80>
    46be:	f4 01       	movw	r30, r8
    46c0:	20 80       	ld	r2, Z
    46c2:	fe e0       	ldi	r31, 0x0E	; 14
    46c4:	2f 12       	cpse	r2, r31
    46c6:	06 c0       	rjmp	.+12     	; 0x46d4 <_reply2ReturnCode+0x80>
    46c8:	b8 01       	movw	r22, r16
    46ca:	c5 01       	movw	r24, r10
    46cc:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <strcasestr>
    46d0:	89 2b       	or	r24, r25
    46d2:	09 f5       	brne	.+66     	; 0x4716 <_reply2ReturnCode+0xc2>
    46d4:	44 2d       	mov	r20, r4
    46d6:	35 14       	cp	r3, r5
    46d8:	08 f4       	brcc	.+2      	; 0x46dc <_reply2ReturnCode+0x88>
    46da:	4c 2f       	mov	r20, r28
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	b8 01       	movw	r22, r16
    46e0:	c5 01       	movw	r24, r10
    46e2:	0e 94 27 32 	call	0x644e	; 0x644e <strncasecmp>
    46e6:	89 2b       	or	r24, r25
    46e8:	49 f4       	brne	.+18     	; 0x46fc <_reply2ReturnCode+0xa8>
    46ea:	f3 01       	movw	r30, r6
    46ec:	ee 0f       	add	r30, r30
    46ee:	ff 1f       	adc	r31, r31
    46f0:	e6 0d       	add	r30, r6
    46f2:	f7 1d       	adc	r31, r7
    46f4:	e5 5f       	subi	r30, 0xF5	; 245
    46f6:	f7 4f       	sbci	r31, 0xF7	; 247
    46f8:	20 80       	ld	r2, Z
    46fa:	0d c0       	rjmp	.+26     	; 0x4716 <_reply2ReturnCode+0xc2>
    46fc:	8f ef       	ldi	r24, 0xFF	; 255
    46fe:	e8 1a       	sub	r14, r24
    4700:	f8 0a       	sbc	r15, r24
    4702:	e3 e0       	ldi	r30, 0x03	; 3
    4704:	8e 0e       	add	r8, r30
    4706:	91 1c       	adc	r9, r1
    4708:	f1 e1       	ldi	r31, 0x11	; 17
    470a:	ef 16       	cp	r14, r31
    470c:	f1 04       	cpc	r15, r1
    470e:	39 f6       	brne	.-114    	; 0x469e <_reply2ReturnCode+0x4a>
    4710:	68 94       	set
    4712:	22 24       	eor	r2, r2
    4714:	24 f8       	bld	r2, 4
    4716:	82 2d       	mov	r24, r2
    4718:	df 91       	pop	r29
    471a:	cf 91       	pop	r28
    471c:	1f 91       	pop	r17
    471e:	0f 91       	pop	r16
    4720:	ff 90       	pop	r15
    4722:	ef 90       	pop	r14
    4724:	df 90       	pop	r13
    4726:	cf 90       	pop	r12
    4728:	bf 90       	pop	r11
    472a:	af 90       	pop	r10
    472c:	9f 90       	pop	r9
    472e:	8f 90       	pop	r8
    4730:	7f 90       	pop	r7
    4732:	6f 90       	pop	r6
    4734:	5f 90       	pop	r5
    4736:	4f 90       	pop	r4
    4738:	3f 90       	pop	r3
    473a:	2f 90       	pop	r2
    473c:	08 95       	ret

0000473e <_uploadMessageRc>:
    473e:	30 df       	rcall	.-416    	; 0x45a0 <_uploadMessage>
    4740:	89 cf       	rjmp	.-238    	; 0x4654 <_reply2ReturnCode>
    4742:	08 95       	ret

00004744 <lora_driver_flushBuffers>:
    4744:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_serialReplyBufferHandle>
    4748:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_serialReplyBufferHandle+0x1>
    474c:	0c 94 df 0c 	jmp	0x19be	; 0x19be <xStreamBufferReset>
    4750:	08 95       	ret

00004752 <lora_driver_initialise>:
    4752:	8f 92       	push	r8
    4754:	9f 92       	push	r9
    4756:	af 92       	push	r10
    4758:	cf 92       	push	r12
    475a:	ef 92       	push	r14
    475c:	0f 93       	push	r16
    475e:	1f 93       	push	r17
    4760:	cf 93       	push	r28
    4762:	c8 2f       	mov	r28, r24
    4764:	8b 01       	movw	r16, r22
    4766:	41 e0       	ldi	r20, 0x01	; 1
    4768:	60 e0       	ldi	r22, 0x00	; 0
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	88 ec       	ldi	r24, 0xC8	; 200
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 ad 0c 	call	0x195a	; 0x195a <xStreamBufferGenericCreate>
    4774:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <_serialReplyBufferHandle+0x1>
    4778:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <_serialReplyBufferHandle>
    477c:	10 93 69 17 	sts	0x1769, r17	; 0x801769 <_downlinkMessageBuffer+0x1>
    4780:	00 93 68 17 	sts	0x1768, r16	; 0x801768 <_downlinkMessageBuffer>
    4784:	0f 2e       	mov	r0, r31
    4786:	fa e8       	ldi	r31, 0x8A	; 138
    4788:	8f 2e       	mov	r8, r31
    478a:	f2 e2       	ldi	r31, 0x22	; 34
    478c:	9f 2e       	mov	r9, r31
    478e:	f0 2d       	mov	r31, r0
    4790:	68 94       	set
    4792:	aa 24       	eor	r10, r10
    4794:	a6 f8       	bld	r10, 6
    4796:	68 94       	set
    4798:	cc 24       	eor	r12, r12
    479a:	c6 f8       	bld	r12, 6
    479c:	e1 2c       	mov	r14, r1
    479e:	00 e0       	ldi	r16, 0x00	; 0
    47a0:	23 e0       	ldi	r18, 0x03	; 3
    47a2:	40 e0       	ldi	r20, 0x00	; 0
    47a4:	51 ee       	ldi	r21, 0xE1	; 225
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	8c 2f       	mov	r24, r28
    47ac:	06 d4       	rcall	.+2060   	; 0x4fba <serial_create>
    47ae:	90 93 6d 17 	sts	0x176D, r25	; 0x80176d <_rn2483_serial+0x1>
    47b2:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <_rn2483_serial>
    47b6:	e7 e0       	ldi	r30, 0x07	; 7
    47b8:	f1 e0       	ldi	r31, 0x01	; 1
    47ba:	80 81       	ld	r24, Z
    47bc:	80 61       	ori	r24, 0x10	; 16
    47be:	80 83       	st	Z, r24
    47c0:	cf 91       	pop	r28
    47c2:	1f 91       	pop	r17
    47c4:	0f 91       	pop	r16
    47c6:	ef 90       	pop	r14
    47c8:	cf 90       	pop	r12
    47ca:	af 90       	pop	r10
    47cc:	9f 90       	pop	r9
    47ce:	8f 90       	pop	r8
    47d0:	08 95       	ret

000047d2 <lora_driver_resetRn2483>:
    47d2:	88 23       	and	r24, r24
    47d4:	31 f0       	breq	.+12     	; 0x47e2 <lora_driver_resetRn2483+0x10>
    47d6:	e8 e0       	ldi	r30, 0x08	; 8
    47d8:	f1 e0       	ldi	r31, 0x01	; 1
    47da:	80 81       	ld	r24, Z
    47dc:	8f 7e       	andi	r24, 0xEF	; 239
    47de:	80 83       	st	Z, r24
    47e0:	08 95       	ret
    47e2:	e8 e0       	ldi	r30, 0x08	; 8
    47e4:	f1 e0       	ldi	r31, 0x01	; 1
    47e6:	80 81       	ld	r24, Z
    47e8:	80 61       	ori	r24, 0x10	; 16
    47ea:	80 83       	st	Z, r24
    47ec:	08 95       	ret

000047ee <lora_driver_rn2483FactoryReset>:
    47ee:	60 e0       	ldi	r22, 0x00	; 0
    47f0:	70 e0       	ldi	r23, 0x00	; 0
    47f2:	81 e9       	ldi	r24, 0x91	; 145
    47f4:	95 e0       	ldi	r25, 0x05	; 5
    47f6:	d4 de       	rcall	.-600    	; 0x45a0 <_uploadMessage>
    47f8:	e3 ef       	ldi	r30, 0xF3	; 243
    47fa:	f7 e1       	ldi	r31, 0x17	; 23
    47fc:	01 90       	ld	r0, Z+
    47fe:	00 20       	and	r0, r0
    4800:	e9 f7       	brne	.-6      	; 0x47fc <lora_driver_rn2483FactoryReset+0xe>
    4802:	31 97       	sbiw	r30, 0x01	; 1
    4804:	e3 5f       	subi	r30, 0xF3	; 243
    4806:	f7 41       	sbci	r31, 0x17	; 23
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	75 97       	sbiw	r30, 0x15	; 21
    480c:	08 f0       	brcs	.+2      	; 0x4810 <lora_driver_rn2483FactoryReset+0x22>
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	08 95       	ret

00004812 <lora_driver_getRn2483Hweui>:
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	ec 01       	movw	r28, r24
    4818:	60 e0       	ldi	r22, 0x00	; 0
    481a:	70 e0       	ldi	r23, 0x00	; 0
    481c:	82 ea       	ldi	r24, 0xA2	; 162
    481e:	95 e0       	ldi	r25, 0x05	; 5
    4820:	bf de       	rcall	.-642    	; 0x45a0 <_uploadMessage>
    4822:	e3 ef       	ldi	r30, 0xF3	; 243
    4824:	f7 e1       	ldi	r31, 0x17	; 23
    4826:	01 90       	ld	r0, Z+
    4828:	00 20       	and	r0, r0
    482a:	e9 f7       	brne	.-6      	; 0x4826 <lora_driver_getRn2483Hweui+0x14>
    482c:	e4 50       	subi	r30, 0x04	; 4
    482e:	f8 41       	sbci	r31, 0x18	; 24
    4830:	39 f4       	brne	.+14     	; 0x4840 <lora_driver_getRn2483Hweui+0x2e>
    4832:	63 ef       	ldi	r22, 0xF3	; 243
    4834:	77 e1       	ldi	r23, 0x17	; 23
    4836:	ce 01       	movw	r24, r28
    4838:	0e 94 20 32 	call	0x6440	; 0x6440 <strcpy>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	02 c0       	rjmp	.+4      	; 0x4844 <lora_driver_getRn2483Hweui+0x32>
    4840:	18 82       	st	Y, r1
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	df 91       	pop	r29
    4846:	cf 91       	pop	r28
    4848:	08 95       	ret

0000484a <lora_driver_setDeviceIdentifier>:
    484a:	fc 01       	movw	r30, r24
    484c:	01 90       	ld	r0, Z+
    484e:	00 20       	and	r0, r0
    4850:	e9 f7       	brne	.-6      	; 0x484c <lora_driver_setDeviceIdentifier+0x2>
    4852:	9f 01       	movw	r18, r30
    4854:	21 51       	subi	r18, 0x11	; 17
    4856:	31 09       	sbc	r19, r1
    4858:	28 17       	cp	r18, r24
    485a:	39 07       	cpc	r19, r25
    485c:	29 f4       	brne	.+10     	; 0x4868 <lora_driver_setDeviceIdentifier+0x1e>
    485e:	bc 01       	movw	r22, r24
    4860:	80 ed       	ldi	r24, 0xD0	; 208
    4862:	95 e0       	ldi	r25, 0x05	; 5
    4864:	6c cf       	rjmp	.-296    	; 0x473e <_uploadMessageRc>
    4866:	08 95       	ret
    4868:	89 e0       	ldi	r24, 0x09	; 9
    486a:	08 95       	ret

0000486c <lora_driver_setApplicationIdentifier>:
    486c:	fc 01       	movw	r30, r24
    486e:	01 90       	ld	r0, Z+
    4870:	00 20       	and	r0, r0
    4872:	e9 f7       	brne	.-6      	; 0x486e <lora_driver_setApplicationIdentifier+0x2>
    4874:	9f 01       	movw	r18, r30
    4876:	21 51       	subi	r18, 0x11	; 17
    4878:	31 09       	sbc	r19, r1
    487a:	28 17       	cp	r18, r24
    487c:	39 07       	cpc	r19, r25
    487e:	29 f4       	brne	.+10     	; 0x488a <lora_driver_setApplicationIdentifier+0x1e>
    4880:	bc 01       	movw	r22, r24
    4882:	8f ed       	ldi	r24, 0xDF	; 223
    4884:	95 e0       	ldi	r25, 0x05	; 5
    4886:	5b cf       	rjmp	.-330    	; 0x473e <_uploadMessageRc>
    4888:	08 95       	ret
    488a:	89 e0       	ldi	r24, 0x09	; 9
    488c:	08 95       	ret

0000488e <lora_driver_setApplicationKey>:
    488e:	fc 01       	movw	r30, r24
    4890:	01 90       	ld	r0, Z+
    4892:	00 20       	and	r0, r0
    4894:	e9 f7       	brne	.-6      	; 0x4890 <lora_driver_setApplicationKey+0x2>
    4896:	9f 01       	movw	r18, r30
    4898:	21 52       	subi	r18, 0x21	; 33
    489a:	31 09       	sbc	r19, r1
    489c:	28 17       	cp	r18, r24
    489e:	39 07       	cpc	r19, r25
    48a0:	29 f4       	brne	.+10     	; 0x48ac <lora_driver_setApplicationKey+0x1e>
    48a2:	bc 01       	movw	r22, r24
    48a4:	8e ee       	ldi	r24, 0xEE	; 238
    48a6:	95 e0       	ldi	r25, 0x05	; 5
    48a8:	4a cf       	rjmp	.-364    	; 0x473e <_uploadMessageRc>
    48aa:	08 95       	ret
    48ac:	89 e0       	ldi	r24, 0x09	; 9
    48ae:	08 95       	ret

000048b0 <lora_driver_saveMac>:
    48b0:	60 e0       	ldi	r22, 0x00	; 0
    48b2:	70 e0       	ldi	r23, 0x00	; 0
    48b4:	8d e2       	ldi	r24, 0x2D	; 45
    48b6:	96 e0       	ldi	r25, 0x06	; 6
    48b8:	42 cf       	rjmp	.-380    	; 0x473e <_uploadMessageRc>
    48ba:	08 95       	ret

000048bc <lora_driver_join>:
    48bc:	0f 93       	push	r16
    48be:	1f 93       	push	r17
    48c0:	e8 2f       	mov	r30, r24
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	ee 0f       	add	r30, r30
    48c6:	ff 1f       	adc	r31, r31
    48c8:	e9 5f       	subi	r30, 0xF9	; 249
    48ca:	f7 4f       	sbci	r31, 0xF7	; 247
    48cc:	60 81       	ld	r22, Z
    48ce:	71 81       	ldd	r23, Z+1	; 0x01
    48d0:	86 e3       	ldi	r24, 0x36	; 54
    48d2:	96 e0       	ldi	r25, 0x06	; 6
    48d4:	34 df       	rcall	.-408    	; 0x473e <_uploadMessageRc>
    48d6:	81 11       	cpse	r24, r1
    48d8:	14 c0       	rjmp	.+40     	; 0x4902 <lora_driver_join+0x46>
    48da:	08 e2       	ldi	r16, 0x28	; 40
    48dc:	15 e0       	ldi	r17, 0x05	; 5
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	4d e2       	ldi	r20, 0x2D	; 45
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	63 ef       	ldi	r22, 0xF3	; 243
    48e8:	77 e1       	ldi	r23, 0x17	; 23
    48ea:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_serialReplyBufferHandle>
    48ee:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_serialReplyBufferHandle+0x1>
    48f2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <xStreamBufferReceive>
    48f6:	88 23       	and	r24, r24
    48f8:	21 f0       	breq	.+8      	; 0x4902 <lora_driver_join+0x46>
    48fa:	83 ef       	ldi	r24, 0xF3	; 243
    48fc:	97 e1       	ldi	r25, 0x17	; 23
    48fe:	aa de       	rcall	.-684    	; 0x4654 <_reply2ReturnCode>
    4900:	03 c0       	rjmp	.+6      	; 0x4908 <lora_driver_join+0x4c>
    4902:	83 ef       	ldi	r24, 0xF3	; 243
    4904:	97 e1       	ldi	r25, 0x17	; 23
    4906:	a6 de       	rcall	.-692    	; 0x4654 <_reply2ReturnCode>
    4908:	1f 91       	pop	r17
    490a:	0f 91       	pop	r16
    490c:	08 95       	ret

0000490e <lora_driver_sendUploadMessage>:
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	1f 92       	push	r1
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
    491c:	db 01       	movw	r26, r22
    491e:	11 96       	adiw	r26, 0x01	; 1
    4920:	9c 91       	ld	r25, X
    4922:	11 97       	sbiw	r26, 0x01	; 1
    4924:	95 31       	cpi	r25, 0x15	; 21
    4926:	08 f0       	brcs	.+2      	; 0x492a <lora_driver_sendUploadMessage+0x1c>
    4928:	b4 c0       	rjmp	.+360    	; 0x4a92 <lora_driver_sendUploadMessage+0x184>
    492a:	99 23       	and	r25, r25
    492c:	81 f1       	breq	.+96     	; 0x498e <lora_driver_sendUploadMessage+0x80>
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	70 e0       	ldi	r23, 0x00	; 0
    4932:	27 2f       	mov	r18, r23
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	46 2f       	mov	r20, r22
    4938:	50 e0       	ldi	r21, 0x00	; 0
    493a:	fd 01       	movw	r30, r26
    493c:	e4 0f       	add	r30, r20
    493e:	f5 1f       	adc	r31, r21
    4940:	92 81       	ldd	r25, Z+2	; 0x02
    4942:	92 95       	swap	r25
    4944:	9f 70       	andi	r25, 0x0F	; 15
    4946:	9a 30       	cpi	r25, 0x0A	; 10
    4948:	10 f0       	brcs	.+4      	; 0x494e <lora_driver_sendUploadMessage+0x40>
    494a:	99 5c       	subi	r25, 0xC9	; 201
    494c:	01 c0       	rjmp	.+2      	; 0x4950 <lora_driver_sendUploadMessage+0x42>
    494e:	90 5d       	subi	r25, 0xD0	; 208
    4950:	f9 01       	movw	r30, r18
    4952:	ec 57       	subi	r30, 0x7C	; 124
    4954:	f8 4e       	sbci	r31, 0xE8	; 232
    4956:	90 83       	st	Z, r25
    4958:	2f 5f       	subi	r18, 0xFF	; 255
    495a:	3f 4f       	sbci	r19, 0xFF	; 255
    495c:	fd 01       	movw	r30, r26
    495e:	e4 0f       	add	r30, r20
    4960:	f5 1f       	adc	r31, r21
    4962:	92 81       	ldd	r25, Z+2	; 0x02
    4964:	9f 70       	andi	r25, 0x0F	; 15
    4966:	49 2f       	mov	r20, r25
    4968:	50 e0       	ldi	r21, 0x00	; 0
    496a:	4a 30       	cpi	r20, 0x0A	; 10
    496c:	51 05       	cpc	r21, r1
    496e:	14 f0       	brlt	.+4      	; 0x4974 <lora_driver_sendUploadMessage+0x66>
    4970:	99 5c       	subi	r25, 0xC9	; 201
    4972:	01 c0       	rjmp	.+2      	; 0x4976 <lora_driver_sendUploadMessage+0x68>
    4974:	90 5d       	subi	r25, 0xD0	; 208
    4976:	f9 01       	movw	r30, r18
    4978:	ec 57       	subi	r30, 0x7C	; 124
    497a:	f8 4e       	sbci	r31, 0xE8	; 232
    497c:	90 83       	st	Z, r25
    497e:	7e 5f       	subi	r23, 0xFE	; 254
    4980:	6f 5f       	subi	r22, 0xFF	; 255
    4982:	11 96       	adiw	r26, 0x01	; 1
    4984:	9c 91       	ld	r25, X
    4986:	11 97       	sbiw	r26, 0x01	; 1
    4988:	69 17       	cp	r22, r25
    498a:	98 f2       	brcs	.-90     	; 0x4932 <lora_driver_sendUploadMessage+0x24>
    498c:	01 c0       	rjmp	.+2      	; 0x4990 <lora_driver_sendUploadMessage+0x82>
    498e:	70 e0       	ldi	r23, 0x00	; 0
    4990:	e7 2f       	mov	r30, r23
    4992:	f0 e0       	ldi	r31, 0x00	; 0
    4994:	ec 57       	subi	r30, 0x7C	; 124
    4996:	f8 4e       	sbci	r31, 0xE8	; 232
    4998:	10 82       	st	Z, r1
    499a:	4c 91       	ld	r20, X
    499c:	81 11       	cpse	r24, r1
    499e:	03 c0       	rjmp	.+6      	; 0x49a6 <lora_driver_sendUploadMessage+0x98>
    49a0:	8f e3       	ldi	r24, 0x3F	; 63
    49a2:	96 e0       	ldi	r25, 0x06	; 6
    49a4:	02 c0       	rjmp	.+4      	; 0x49aa <lora_driver_sendUploadMessage+0x9c>
    49a6:	81 e4       	ldi	r24, 0x41	; 65
    49a8:	96 e0       	ldi	r25, 0x06	; 6
    49aa:	24 e8       	ldi	r18, 0x84	; 132
    49ac:	37 e1       	ldi	r19, 0x17	; 23
    49ae:	3f 93       	push	r19
    49b0:	2f 93       	push	r18
    49b2:	1f 92       	push	r1
    49b4:	4f 93       	push	r20
    49b6:	9f 93       	push	r25
    49b8:	8f 93       	push	r24
    49ba:	85 e4       	ldi	r24, 0x45	; 69
    49bc:	96 e0       	ldi	r25, 0x06	; 6
    49be:	9f 93       	push	r25
    49c0:	8f 93       	push	r24
    49c2:	86 ec       	ldi	r24, 0xC6	; 198
    49c4:	97 e1       	ldi	r25, 0x17	; 23
    49c6:	9f 93       	push	r25
    49c8:	8f 93       	push	r24
    49ca:	0e 94 82 32 	call	0x6504	; 0x6504 <sprintf>
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	86 ec       	ldi	r24, 0xC6	; 198
    49d4:	97 e1       	ldi	r25, 0x17	; 23
    49d6:	b3 de       	rcall	.-666    	; 0x473e <_uploadMessageRc>
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	81 11       	cpse	r24, r1
    49e4:	59 c0       	rjmp	.+178    	; 0x4a98 <lora_driver_sendUploadMessage+0x18a>
    49e6:	08 e2       	ldi	r16, 0x28	; 40
    49e8:	15 e0       	ldi	r17, 0x05	; 5
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	4d e2       	ldi	r20, 0x2D	; 45
    49f0:	50 e0       	ldi	r21, 0x00	; 0
    49f2:	63 ef       	ldi	r22, 0xF3	; 243
    49f4:	77 e1       	ldi	r23, 0x17	; 23
    49f6:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_serialReplyBufferHandle>
    49fa:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_serialReplyBufferHandle+0x1>
    49fe:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <xStreamBufferReceive>
    4a02:	88 23       	and	r24, r24
    4a04:	09 f4       	brne	.+2      	; 0x4a08 <lora_driver_sendUploadMessage+0xfa>
    4a06:	47 c0       	rjmp	.+142    	; 0x4a96 <lora_driver_sendUploadMessage+0x188>
    4a08:	83 ef       	ldi	r24, 0xF3	; 243
    4a0a:	97 e1       	ldi	r25, 0x17	; 23
    4a0c:	23 de       	rcall	.-954    	; 0x4654 <_reply2ReturnCode>
    4a0e:	8e 30       	cpi	r24, 0x0E	; 14
    4a10:	09 f0       	breq	.+2      	; 0x4a14 <lora_driver_sendUploadMessage+0x106>
    4a12:	42 c0       	rjmp	.+132    	; 0x4a98 <lora_driver_sendUploadMessage+0x18a>
    4a14:	87 e0       	ldi	r24, 0x07	; 7
    4a16:	89 83       	std	Y+1, r24	; 0x01
    4a18:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_downlinkMessageBuffer>
    4a1c:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_downlinkMessageBuffer+0x1>
    4a20:	89 2b       	or	r24, r25
    4a22:	a9 f1       	breq	.+106    	; 0x4a8e <lora_driver_sendUploadMessage+0x180>
    4a24:	be 01       	movw	r22, r28
    4a26:	6f 5f       	subi	r22, 0xFF	; 255
    4a28:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2a:	83 ef       	ldi	r24, 0xF3	; 243
    4a2c:	97 e1       	ldi	r25, 0x17	; 23
    4a2e:	68 d1       	rcall	.+720    	; 0x4d00 <decode_port_no>
    4a30:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <_downlinkPayload>
    4a34:	e9 81       	ldd	r30, Y+1	; 0x01
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	ed 50       	subi	r30, 0x0D	; 13
    4a3a:	f8 4e       	sbci	r31, 0xE8	; 232
    4a3c:	df 01       	movw	r26, r30
    4a3e:	0d 90       	ld	r0, X+
    4a40:	00 20       	and	r0, r0
    4a42:	e9 f7       	brne	.-6      	; 0x4a3e <lora_driver_sendUploadMessage+0x130>
    4a44:	11 97       	sbiw	r26, 0x01	; 1
    4a46:	ae 1b       	sub	r26, r30
    4a48:	bf 0b       	sbc	r27, r31
    4a4a:	aa 23       	and	r26, r26
    4a4c:	91 f0       	breq	.+36     	; 0x4a72 <lora_driver_sendUploadMessage+0x164>
    4a4e:	bb 27       	eor	r27, r27
    4a50:	cd 01       	movw	r24, r26
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	9c 01       	movw	r18, r24
    4a56:	12 f4       	brpl	.+4      	; 0x4a5c <lora_driver_sendUploadMessage+0x14e>
    4a58:	2f 5f       	subi	r18, 0xFF	; 255
    4a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5c:	35 95       	asr	r19
    4a5e:	27 95       	ror	r18
    4a60:	20 93 6f 17 	sts	0x176F, r18	; 0x80176f <_downlinkPayload+0x1>
    4a64:	af 01       	movw	r20, r30
    4a66:	4f 5f       	subi	r20, 0xFF	; 255
    4a68:	5f 4f       	sbci	r21, 0xFF	; 255
    4a6a:	64 e1       	ldi	r22, 0x14	; 20
    4a6c:	80 e7       	ldi	r24, 0x70	; 112
    4a6e:	97 e1       	ldi	r25, 0x17	; 23
    4a70:	73 d1       	rcall	.+742    	; 0x4d58 <decode_hexadecimal_string_bytes>
    4a72:	01 e0       	ldi	r16, 0x01	; 1
    4a74:	10 e0       	ldi	r17, 0x00	; 0
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	46 e1       	ldi	r20, 0x16	; 22
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	6e e6       	ldi	r22, 0x6E	; 110
    4a80:	77 e1       	ldi	r23, 0x17	; 23
    4a82:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_downlinkMessageBuffer>
    4a86:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_downlinkMessageBuffer+0x1>
    4a8a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xStreamBufferSend>
    4a8e:	8e e0       	ldi	r24, 0x0E	; 14
    4a90:	03 c0       	rjmp	.+6      	; 0x4a98 <lora_driver_sendUploadMessage+0x18a>
    4a92:	84 e1       	ldi	r24, 0x14	; 20
    4a94:	01 c0       	rjmp	.+2      	; 0x4a98 <lora_driver_sendUploadMessage+0x18a>
    4a96:	80 e0       	ldi	r24, 0x00	; 0
    4a98:	0f 90       	pop	r0
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	1f 91       	pop	r17
    4aa0:	0f 91       	pop	r16
    4aa2:	08 95       	ret

00004aa4 <lora_driver_setAdaptiveDataRate>:
    4aa4:	81 30       	cpi	r24, 0x01	; 1
    4aa6:	19 f0       	breq	.+6      	; 0x4aae <lora_driver_setAdaptiveDataRate+0xa>
    4aa8:	65 e5       	ldi	r22, 0x55	; 85
    4aaa:	76 e0       	ldi	r23, 0x06	; 6
    4aac:	02 c0       	rjmp	.+4      	; 0x4ab2 <lora_driver_setAdaptiveDataRate+0xe>
    4aae:	6e e2       	ldi	r22, 0x2E	; 46
    4ab0:	77 e0       	ldi	r23, 0x07	; 7
    4ab2:	89 e5       	ldi	r24, 0x59	; 89
    4ab4:	96 e0       	ldi	r25, 0x06	; 6
    4ab6:	43 ce       	rjmp	.-890    	; 0x473e <_uploadMessageRc>
    4ab8:	08 95       	ret

00004aba <lora_driver_setReceiveDelay>:
    4aba:	9f 93       	push	r25
    4abc:	8f 93       	push	r24
    4abe:	8a e8       	ldi	r24, 0x8A	; 138
    4ac0:	96 e0       	ldi	r25, 0x06	; 6
    4ac2:	9f 93       	push	r25
    4ac4:	8f 93       	push	r24
    4ac6:	86 ec       	ldi	r24, 0xC6	; 198
    4ac8:	97 e1       	ldi	r25, 0x17	; 23
    4aca:	9f 93       	push	r25
    4acc:	8f 93       	push	r24
    4ace:	0e 94 82 32 	call	0x6504	; 0x6504 <sprintf>
    4ad2:	60 e0       	ldi	r22, 0x00	; 0
    4ad4:	70 e0       	ldi	r23, 0x00	; 0
    4ad6:	86 ec       	ldi	r24, 0xC6	; 198
    4ad8:	97 e1       	ldi	r25, 0x17	; 23
    4ada:	31 de       	rcall	.-926    	; 0x473e <_uploadMessageRc>
    4adc:	0f 90       	pop	r0
    4ade:	0f 90       	pop	r0
    4ae0:	0f 90       	pop	r0
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	08 95       	ret

00004aea <lora_driver_configureToEu868>:
    4aea:	2f 92       	push	r2
    4aec:	3f 92       	push	r3
    4aee:	4f 92       	push	r4
    4af0:	5f 92       	push	r5
    4af2:	6f 92       	push	r6
    4af4:	7f 92       	push	r7
    4af6:	8f 92       	push	r8
    4af8:	9f 92       	push	r9
    4afa:	af 92       	push	r10
    4afc:	bf 92       	push	r11
    4afe:	cf 92       	push	r12
    4b00:	df 92       	push	r13
    4b02:	ef 92       	push	r14
    4b04:	ff 92       	push	r15
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	a0 97       	sbiw	r28, 0x20	; 32
    4b14:	0f b6       	in	r0, 0x3f	; 63
    4b16:	f8 94       	cli
    4b18:	de bf       	out	0x3e, r29	; 62
    4b1a:	0f be       	out	0x3f, r0	; 63
    4b1c:	cd bf       	out	0x3d, r28	; 61
    4b1e:	67 eb       	ldi	r22, 0xB7	; 183
    4b20:	76 e0       	ldi	r23, 0x06	; 6
    4b22:	83 ec       	ldi	r24, 0xC3	; 195
    4b24:	96 e0       	ldi	r25, 0x06	; 6
    4b26:	3c dd       	rcall	.-1416   	; 0x45a0 <_uploadMessage>
    4b28:	95 dd       	rcall	.-1238   	; 0x4654 <_reply2ReturnCode>
    4b2a:	81 11       	cpse	r24, r1
    4b2c:	a3 c0       	rjmp	.+326    	; 0x4c74 <lora_driver_configureToEu868+0x18a>
    4b2e:	80 e2       	ldi	r24, 0x20	; 32
    4b30:	e2 e2       	ldi	r30, 0x22	; 34
    4b32:	f2 e0       	ldi	r31, 0x02	; 2
    4b34:	de 01       	movw	r26, r28
    4b36:	11 96       	adiw	r26, 0x01	; 1
    4b38:	01 90       	ld	r0, Z+
    4b3a:	0d 92       	st	X+, r0
    4b3c:	8a 95       	dec	r24
    4b3e:	e1 f7       	brne	.-8      	; 0x4b38 <lora_driver_configureToEu868+0x4e>
    4b40:	9e 01       	movw	r18, r28
    4b42:	2f 5f       	subi	r18, 0xFF	; 255
    4b44:	3f 4f       	sbci	r19, 0xFF	; 255
    4b46:	69 01       	movw	r12, r18
    4b48:	e1 2c       	mov	r14, r1
    4b4a:	f1 2c       	mov	r15, r1
    4b4c:	0f 2e       	mov	r0, r31
    4b4e:	ff ec       	ldi	r31, 0xCF	; 207
    4b50:	af 2e       	mov	r10, r31
    4b52:	f6 e0       	ldi	r31, 0x06	; 6
    4b54:	bf 2e       	mov	r11, r31
    4b56:	f0 2d       	mov	r31, r0
    4b58:	06 ec       	ldi	r16, 0xC6	; 198
    4b5a:	17 e1       	ldi	r17, 0x17	; 23
    4b5c:	0f 2e       	mov	r0, r31
    4b5e:	f8 ee       	ldi	r31, 0xE8	; 232
    4b60:	4f 2e       	mov	r4, r31
    4b62:	f6 e0       	ldi	r31, 0x06	; 6
    4b64:	5f 2e       	mov	r5, r31
    4b66:	f0 2d       	mov	r31, r0
    4b68:	0f 2e       	mov	r0, r31
    4b6a:	ff ef       	ldi	r31, 0xFF	; 255
    4b6c:	8f 2e       	mov	r8, r31
    4b6e:	f6 e0       	ldi	r31, 0x06	; 6
    4b70:	9f 2e       	mov	r9, r31
    4b72:	f0 2d       	mov	r31, r0
    4b74:	0f 2e       	mov	r0, r31
    4b76:	f9 e1       	ldi	r31, 0x19	; 25
    4b78:	6f 2e       	mov	r6, r31
    4b7a:	f7 e0       	ldi	r31, 0x07	; 7
    4b7c:	7f 2e       	mov	r7, r31
    4b7e:	f0 2d       	mov	r31, r0
    4b80:	3e 2c       	mov	r3, r14
    4b82:	2f 2c       	mov	r2, r15
    4b84:	ff 92       	push	r15
    4b86:	ef 92       	push	r14
    4b88:	bf 92       	push	r11
    4b8a:	af 92       	push	r10
    4b8c:	1f 93       	push	r17
    4b8e:	0f 93       	push	r16
    4b90:	0e 94 82 32 	call	0x6504	; 0x6504 <sprintf>
    4b94:	60 e0       	ldi	r22, 0x00	; 0
    4b96:	70 e0       	ldi	r23, 0x00	; 0
    4b98:	c8 01       	movw	r24, r16
    4b9a:	02 dd       	rcall	.-1532   	; 0x45a0 <_uploadMessage>
    4b9c:	5b dd       	rcall	.-1354   	; 0x4654 <_reply2ReturnCode>
    4b9e:	0f 90       	pop	r0
    4ba0:	0f 90       	pop	r0
    4ba2:	0f 90       	pop	r0
    4ba4:	0f 90       	pop	r0
    4ba6:	0f 90       	pop	r0
    4ba8:	0f 90       	pop	r0
    4baa:	81 11       	cpse	r24, r1
    4bac:	63 c0       	rjmp	.+198    	; 0x4c74 <lora_driver_configureToEu868+0x18a>
    4bae:	32 e0       	ldi	r19, 0x02	; 2
    4bb0:	3e 15       	cp	r19, r14
    4bb2:	e8 f4       	brcc	.+58     	; 0x4bee <lora_driver_configureToEu868+0x104>
    4bb4:	f6 01       	movw	r30, r12
    4bb6:	83 81       	ldd	r24, Z+3	; 0x03
    4bb8:	8f 93       	push	r24
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	8f 93       	push	r24
    4bbe:	81 81       	ldd	r24, Z+1	; 0x01
    4bc0:	8f 93       	push	r24
    4bc2:	80 81       	ld	r24, Z
    4bc4:	8f 93       	push	r24
    4bc6:	ff 92       	push	r15
    4bc8:	ef 92       	push	r14
    4bca:	5f 92       	push	r5
    4bcc:	4f 92       	push	r4
    4bce:	1f 93       	push	r17
    4bd0:	0f 93       	push	r16
    4bd2:	0e 94 82 32 	call	0x6504	; 0x6504 <sprintf>
    4bd6:	60 e0       	ldi	r22, 0x00	; 0
    4bd8:	70 e0       	ldi	r23, 0x00	; 0
    4bda:	c8 01       	movw	r24, r16
    4bdc:	e1 dc       	rcall	.-1598   	; 0x45a0 <_uploadMessage>
    4bde:	3a dd       	rcall	.-1420   	; 0x4654 <_reply2ReturnCode>
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	81 11       	cpse	r24, r1
    4bec:	43 c0       	rjmp	.+134    	; 0x4c74 <lora_driver_configureToEu868+0x18a>
    4bee:	2f 92       	push	r2
    4bf0:	3f 92       	push	r3
    4bf2:	9f 92       	push	r9
    4bf4:	8f 92       	push	r8
    4bf6:	1f 93       	push	r17
    4bf8:	0f 93       	push	r16
    4bfa:	0e 94 82 32 	call	0x6504	; 0x6504 <sprintf>
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	70 e0       	ldi	r23, 0x00	; 0
    4c02:	c8 01       	movw	r24, r16
    4c04:	cd dc       	rcall	.-1638   	; 0x45a0 <_uploadMessage>
    4c06:	26 dd       	rcall	.-1460   	; 0x4654 <_reply2ReturnCode>
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	0f 90       	pop	r0
    4c12:	0f 90       	pop	r0
    4c14:	81 11       	cpse	r24, r1
    4c16:	2e c0       	rjmp	.+92     	; 0x4c74 <lora_driver_configureToEu868+0x18a>
    4c18:	2f 92       	push	r2
    4c1a:	3f 92       	push	r3
    4c1c:	7f 92       	push	r7
    4c1e:	6f 92       	push	r6
    4c20:	1f 93       	push	r17
    4c22:	0f 93       	push	r16
    4c24:	0e 94 82 32 	call	0x6504	; 0x6504 <sprintf>
    4c28:	60 e0       	ldi	r22, 0x00	; 0
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	c8 01       	movw	r24, r16
    4c2e:	b8 dc       	rcall	.-1680   	; 0x45a0 <_uploadMessage>
    4c30:	11 dd       	rcall	.-1502   	; 0x4654 <_reply2ReturnCode>
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
    4c36:	0f 90       	pop	r0
    4c38:	0f 90       	pop	r0
    4c3a:	0f 90       	pop	r0
    4c3c:	0f 90       	pop	r0
    4c3e:	81 11       	cpse	r24, r1
    4c40:	19 c0       	rjmp	.+50     	; 0x4c74 <lora_driver_configureToEu868+0x18a>
    4c42:	3f ef       	ldi	r19, 0xFF	; 255
    4c44:	e3 1a       	sub	r14, r19
    4c46:	f3 0a       	sbc	r15, r19
    4c48:	84 e0       	ldi	r24, 0x04	; 4
    4c4a:	c8 0e       	add	r12, r24
    4c4c:	d1 1c       	adc	r13, r1
    4c4e:	98 e0       	ldi	r25, 0x08	; 8
    4c50:	e9 16       	cp	r14, r25
    4c52:	f1 04       	cpc	r15, r1
    4c54:	09 f0       	breq	.+2      	; 0x4c58 <lora_driver_configureToEu868+0x16e>
    4c56:	94 cf       	rjmp	.-216    	; 0x4b80 <lora_driver_configureToEu868+0x96>
    4c58:	60 e0       	ldi	r22, 0x00	; 0
    4c5a:	70 e0       	ldi	r23, 0x00	; 0
    4c5c:	81 e3       	ldi	r24, 0x31	; 49
    4c5e:	97 e0       	ldi	r25, 0x07	; 7
    4c60:	9f dc       	rcall	.-1730   	; 0x45a0 <_uploadMessage>
    4c62:	f8 dc       	rcall	.-1552   	; 0x4654 <_reply2ReturnCode>
    4c64:	81 11       	cpse	r24, r1
    4c66:	06 c0       	rjmp	.+12     	; 0x4c74 <lora_driver_configureToEu868+0x18a>
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	70 e0       	ldi	r23, 0x00	; 0
    4c6c:	82 e4       	ldi	r24, 0x42	; 66
    4c6e:	97 e0       	ldi	r25, 0x07	; 7
    4c70:	97 dc       	rcall	.-1746   	; 0x45a0 <_uploadMessage>
    4c72:	f0 dc       	rcall	.-1568   	; 0x4654 <_reply2ReturnCode>
    4c74:	a0 96       	adiw	r28, 0x20	; 32
    4c76:	0f b6       	in	r0, 0x3f	; 63
    4c78:	f8 94       	cli
    4c7a:	de bf       	out	0x3e, r29	; 62
    4c7c:	0f be       	out	0x3f, r0	; 63
    4c7e:	cd bf       	out	0x3d, r28	; 61
    4c80:	df 91       	pop	r29
    4c82:	cf 91       	pop	r28
    4c84:	1f 91       	pop	r17
    4c86:	0f 91       	pop	r16
    4c88:	ff 90       	pop	r15
    4c8a:	ef 90       	pop	r14
    4c8c:	df 90       	pop	r13
    4c8e:	cf 90       	pop	r12
    4c90:	bf 90       	pop	r11
    4c92:	af 90       	pop	r10
    4c94:	9f 90       	pop	r9
    4c96:	8f 90       	pop	r8
    4c98:	7f 90       	pop	r7
    4c9a:	6f 90       	pop	r6
    4c9c:	5f 90       	pop	r5
    4c9e:	4f 90       	pop	r4
    4ca0:	3f 90       	pop	r3
    4ca2:	2f 90       	pop	r2
    4ca4:	08 95       	ret

00004ca6 <lora_driver_setOtaaIdentity>:
    4ca6:	ef 92       	push	r14
    4ca8:	ff 92       	push	r15
    4caa:	0f 93       	push	r16
    4cac:	1f 93       	push	r17
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	ec 01       	movw	r28, r24
    4cb4:	8b 01       	movw	r16, r22
    4cb6:	7a 01       	movw	r14, r20
    4cb8:	81 e0       	ldi	r24, 0x01	; 1
    4cba:	f4 de       	rcall	.-536    	; 0x4aa4 <lora_driver_setAdaptiveDataRate>
    4cbc:	81 11       	cpse	r24, r1
    4cbe:	0d c0       	rjmp	.+26     	; 0x4cda <lora_driver_setOtaaIdentity+0x34>
    4cc0:	ce 01       	movw	r24, r28
    4cc2:	d4 dd       	rcall	.-1112   	; 0x486c <lora_driver_setApplicationIdentifier>
    4cc4:	81 11       	cpse	r24, r1
    4cc6:	09 c0       	rjmp	.+18     	; 0x4cda <lora_driver_setOtaaIdentity+0x34>
    4cc8:	c8 01       	movw	r24, r16
    4cca:	e1 dd       	rcall	.-1086   	; 0x488e <lora_driver_setApplicationKey>
    4ccc:	81 11       	cpse	r24, r1
    4cce:	05 c0       	rjmp	.+10     	; 0x4cda <lora_driver_setOtaaIdentity+0x34>
    4cd0:	c7 01       	movw	r24, r14
    4cd2:	bb dd       	rcall	.-1162   	; 0x484a <lora_driver_setDeviceIdentifier>
    4cd4:	81 11       	cpse	r24, r1
    4cd6:	01 c0       	rjmp	.+2      	; 0x4cda <lora_driver_setOtaaIdentity+0x34>
    4cd8:	eb dd       	rcall	.-1066   	; 0x48b0 <lora_driver_saveMac>
    4cda:	df 91       	pop	r29
    4cdc:	cf 91       	pop	r28
    4cde:	1f 91       	pop	r17
    4ce0:	0f 91       	pop	r16
    4ce2:	ff 90       	pop	r15
    4ce4:	ef 90       	pop	r14
    4ce6:	08 95       	ret

00004ce8 <lora_driver_mapReturnCodeToText>:
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	fc 01       	movw	r30, r24
    4cec:	ee 0f       	add	r30, r30
    4cee:	ff 1f       	adc	r31, r31
    4cf0:	8e 0f       	add	r24, r30
    4cf2:	9f 1f       	adc	r25, r31
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	e5 5f       	subi	r30, 0xF5	; 245
    4cf8:	f7 4f       	sbci	r31, 0xF7	; 247
    4cfa:	81 81       	ldd	r24, Z+1	; 0x01
    4cfc:	92 81       	ldd	r25, Z+2	; 0x02
    4cfe:	08 95       	ret

00004d00 <decode_port_no>:
    4d00:	dc 01       	movw	r26, r24
    4d02:	00 97       	sbiw	r24, 0x00	; 0
    4d04:	29 f1       	breq	.+74     	; 0x4d50 <decode_port_no+0x50>
    4d06:	fb 01       	movw	r30, r22
    4d08:	20 81       	ld	r18, Z
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	01 90       	ld	r0, Z+
    4d0e:	00 20       	and	r0, r0
    4d10:	e9 f7       	brne	.-6      	; 0x4d0c <decode_port_no+0xc>
    4d12:	31 97       	sbiw	r30, 0x01	; 1
    4d14:	e8 1b       	sub	r30, r24
    4d16:	f9 0b       	sbc	r31, r25
    4d18:	82 2f       	mov	r24, r18
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	e8 17       	cp	r30, r24
    4d1e:	f9 07       	cpc	r31, r25
    4d20:	c8 f0       	brcs	.+50     	; 0x4d54 <decode_port_no+0x54>
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	08 c0       	rjmp	.+16     	; 0x4d36 <decode_port_no+0x36>
    4d26:	88 0f       	add	r24, r24
    4d28:	38 2f       	mov	r19, r24
    4d2a:	33 0f       	add	r19, r19
    4d2c:	33 0f       	add	r19, r19
    4d2e:	83 0f       	add	r24, r19
    4d30:	80 53       	subi	r24, 0x30	; 48
    4d32:	89 0f       	add	r24, r25
    4d34:	2f 5f       	subi	r18, 0xFF	; 255
    4d36:	fd 01       	movw	r30, r26
    4d38:	e2 0f       	add	r30, r18
    4d3a:	f1 1d       	adc	r31, r1
    4d3c:	90 81       	ld	r25, Z
    4d3e:	30 ed       	ldi	r19, 0xD0	; 208
    4d40:	39 0f       	add	r19, r25
    4d42:	3a 30       	cpi	r19, 0x0A	; 10
    4d44:	10 f4       	brcc	.+4      	; 0x4d4a <decode_port_no+0x4a>
    4d46:	91 11       	cpse	r25, r1
    4d48:	ee cf       	rjmp	.-36     	; 0x4d26 <decode_port_no+0x26>
    4d4a:	fb 01       	movw	r30, r22
    4d4c:	20 83       	st	Z, r18
    4d4e:	08 95       	ret
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	08 95       	ret
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	08 95       	ret

00004d58 <decode_hexadecimal_string_bytes>:
    4d58:	0f 93       	push	r16
    4d5a:	1f 93       	push	r17
    4d5c:	cf 93       	push	r28
    4d5e:	df 93       	push	r29
    4d60:	dc 01       	movw	r26, r24
    4d62:	ea 01       	movw	r28, r20
    4d64:	20 97       	sbiw	r28, 0x00	; 0
    4d66:	e1 f1       	breq	.+120    	; 0x4de0 <decode_hexadecimal_string_bytes+0x88>
    4d68:	fa 01       	movw	r30, r20
    4d6a:	01 90       	ld	r0, Z+
    4d6c:	00 20       	and	r0, r0
    4d6e:	e9 f7       	brne	.-6      	; 0x4d6a <decode_hexadecimal_string_bytes+0x12>
    4d70:	31 97       	sbiw	r30, 0x01	; 1
    4d72:	e4 1b       	sub	r30, r20
    4d74:	f5 0b       	sbc	r31, r21
    4d76:	32 97       	sbiw	r30, 0x02	; 2
    4d78:	10 f5       	brcc	.+68     	; 0x4dbe <decode_hexadecimal_string_bytes+0x66>
    4d7a:	32 c0       	rjmp	.+100    	; 0x4de0 <decode_hexadecimal_string_bytes+0x88>
    4d7c:	8d 01       	movw	r16, r26
    4d7e:	04 0f       	add	r16, r20
    4d80:	15 1f       	adc	r17, r21
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	ae 01       	movw	r20, r28
    4d86:	42 0f       	add	r20, r18
    4d88:	53 1f       	adc	r21, r19
    4d8a:	fa 01       	movw	r30, r20
    4d8c:	90 81       	ld	r25, Z
    4d8e:	91 34       	cpi	r25, 0x41	; 65
    4d90:	28 f0       	brcs	.+10     	; 0x4d9c <decode_hexadecimal_string_bytes+0x44>
    4d92:	97 53       	subi	r25, 0x37	; 55
    4d94:	59 2f       	mov	r21, r25
    4d96:	52 95       	swap	r21
    4d98:	50 7f       	andi	r21, 0xF0	; 240
    4d9a:	03 c0       	rjmp	.+6      	; 0x4da2 <decode_hexadecimal_string_bytes+0x4a>
    4d9c:	59 2f       	mov	r21, r25
    4d9e:	52 95       	swap	r21
    4da0:	50 7f       	andi	r21, 0xF0	; 240
    4da2:	2c 0f       	add	r18, r28
    4da4:	3d 1f       	adc	r19, r29
    4da6:	f9 01       	movw	r30, r18
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	91 34       	cpi	r25, 0x41	; 65
    4dac:	10 f0       	brcs	.+4      	; 0x4db2 <decode_hexadecimal_string_bytes+0x5a>
    4dae:	97 53       	subi	r25, 0x37	; 55
    4db0:	01 c0       	rjmp	.+2      	; 0x4db4 <decode_hexadecimal_string_bytes+0x5c>
    4db2:	90 53       	subi	r25, 0x30	; 48
    4db4:	95 0f       	add	r25, r21
    4db6:	f8 01       	movw	r30, r16
    4db8:	90 83       	st	Z, r25
    4dba:	8f 5f       	subi	r24, 0xFF	; 255
    4dbc:	01 c0       	rjmp	.+2      	; 0x4dc0 <decode_hexadecimal_string_bytes+0x68>
    4dbe:	80 e0       	ldi	r24, 0x00	; 0
    4dc0:	28 2f       	mov	r18, r24
    4dc2:	22 0f       	add	r18, r18
    4dc4:	48 2f       	mov	r20, r24
    4dc6:	50 e0       	ldi	r21, 0x00	; 0
    4dc8:	fe 01       	movw	r30, r28
    4dca:	01 90       	ld	r0, Z+
    4dcc:	00 20       	and	r0, r0
    4dce:	e9 f7       	brne	.-6      	; 0x4dca <decode_hexadecimal_string_bytes+0x72>
    4dd0:	31 97       	sbiw	r30, 0x01	; 1
    4dd2:	ec 1b       	sub	r30, r28
    4dd4:	fd 0b       	sbc	r31, r29
    4dd6:	4e 17       	cp	r20, r30
    4dd8:	5f 07       	cpc	r21, r31
    4dda:	10 f4       	brcc	.+4      	; 0x4de0 <decode_hexadecimal_string_bytes+0x88>
    4ddc:	86 13       	cpse	r24, r22
    4dde:	ce cf       	rjmp	.-100    	; 0x4d7c <decode_hexadecimal_string_bytes+0x24>
    4de0:	df 91       	pop	r29
    4de2:	cf 91       	pop	r28
    4de4:	1f 91       	pop	r17
    4de6:	0f 91       	pop	r16
    4de8:	08 95       	ret

00004dea <_serialCallBack>:
    4dea:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <crc_sum.1945>
    4dee:	86 0f       	add	r24, r22
    4df0:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <crc_sum.1945>
    4df4:	90 91 26 18 	lds	r25, 0x1826	; 0x801826 <_mh_state>
    4df8:	91 30       	cpi	r25, 0x01	; 1
    4dfa:	79 f0       	breq	.+30     	; 0x4e1a <_serialCallBack+0x30>
    4dfc:	28 f0       	brcs	.+10     	; 0x4e08 <_serialCallBack+0x1e>
    4dfe:	92 30       	cpi	r25, 0x02	; 2
    4e00:	a9 f0       	breq	.+42     	; 0x4e2c <_serialCallBack+0x42>
    4e02:	93 30       	cpi	r25, 0x03	; 3
    4e04:	19 f1       	breq	.+70     	; 0x4e4c <_serialCallBack+0x62>
    4e06:	08 95       	ret
    4e08:	6f 3f       	cpi	r22, 0xFF	; 255
    4e0a:	09 f0       	breq	.+2      	; 0x4e0e <_serialCallBack+0x24>
    4e0c:	48 c0       	rjmp	.+144    	; 0x4e9e <_serialCallBack+0xb4>
    4e0e:	10 92 23 18 	sts	0x1823, r1	; 0x801823 <crc_sum.1945>
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_mh_state>
    4e18:	08 95       	ret
    4e1a:	66 38       	cpi	r22, 0x86	; 134
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <_serialCallBack+0x36>
    4e1e:	3f c0       	rjmp	.+126    	; 0x4e9e <_serialCallBack+0xb4>
    4e20:	10 92 22 18 	sts	0x1822, r1	; 0x801822 <inDex.1943>
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_mh_state>
    4e2a:	08 95       	ret
    4e2c:	e0 91 22 18 	lds	r30, 0x1822	; 0x801822 <inDex.1943>
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	8e 0f       	add	r24, r30
    4e34:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <inDex.1943>
    4e38:	f0 e0       	ldi	r31, 0x00	; 0
    4e3a:	e0 5e       	subi	r30, 0xE0	; 224
    4e3c:	f7 4e       	sbci	r31, 0xE7	; 231
    4e3e:	60 83       	st	Z, r22
    4e40:	82 30       	cpi	r24, 0x02	; 2
    4e42:	69 f5       	brne	.+90     	; 0x4e9e <_serialCallBack+0xb4>
    4e44:	83 e0       	ldi	r24, 0x03	; 3
    4e46:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_mh_state>
    4e4a:	08 95       	ret
    4e4c:	90 91 22 18 	lds	r25, 0x1822	; 0x801822 <inDex.1943>
    4e50:	21 e0       	ldi	r18, 0x01	; 1
    4e52:	29 0f       	add	r18, r25
    4e54:	20 93 22 18 	sts	0x1822, r18	; 0x801822 <inDex.1943>
    4e58:	96 30       	cpi	r25, 0x06	; 6
    4e5a:	09 f5       	brne	.+66     	; 0x4e9e <_serialCallBack+0xb4>
    4e5c:	81 11       	cpse	r24, r1
    4e5e:	0e c0       	rjmp	.+28     	; 0x4e7c <_serialCallBack+0x92>
    4e60:	e0 e2       	ldi	r30, 0x20	; 32
    4e62:	f8 e1       	ldi	r31, 0x18	; 24
    4e64:	80 81       	ld	r24, Z
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	98 2f       	mov	r25, r24
    4e6a:	88 27       	eor	r24, r24
    4e6c:	21 81       	ldd	r18, Z+1	; 0x01
    4e6e:	82 0f       	add	r24, r18
    4e70:	91 1d       	adc	r25, r1
    4e72:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <_ppm+0x1>
    4e76:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <_ppm>
    4e7a:	04 c0       	rjmp	.+8      	; 0x4e84 <_serialCallBack+0x9a>
    4e7c:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_ppm+0x1>
    4e80:	10 92 27 18 	sts	0x1827, r1	; 0x801827 <_ppm>
    4e84:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_mh_state>
    4e88:	e0 91 24 18 	lds	r30, 0x1824	; 0x801824 <_appCallBack>
    4e8c:	f0 91 25 18 	lds	r31, 0x1825	; 0x801825 <_appCallBack+0x1>
    4e90:	30 97       	sbiw	r30, 0x00	; 0
    4e92:	29 f0       	breq	.+10     	; 0x4e9e <_serialCallBack+0xb4>
    4e94:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <_ppm>
    4e98:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <_ppm+0x1>
    4e9c:	19 95       	eicall
    4e9e:	08 95       	ret

00004ea0 <mh_z19_initialise>:
    4ea0:	8f 92       	push	r8
    4ea2:	9f 92       	push	r9
    4ea4:	af 92       	push	r10
    4ea6:	cf 92       	push	r12
    4ea8:	ef 92       	push	r14
    4eaa:	0f 93       	push	r16
    4eac:	0f 2e       	mov	r0, r31
    4eae:	f5 ef       	ldi	r31, 0xF5	; 245
    4eb0:	8f 2e       	mov	r8, r31
    4eb2:	f6 e2       	ldi	r31, 0x26	; 38
    4eb4:	9f 2e       	mov	r9, r31
    4eb6:	f0 2d       	mov	r31, r0
    4eb8:	68 94       	set
    4eba:	aa 24       	eor	r10, r10
    4ebc:	a4 f8       	bld	r10, 4
    4ebe:	68 94       	set
    4ec0:	cc 24       	eor	r12, r12
    4ec2:	c4 f8       	bld	r12, 4
    4ec4:	e1 2c       	mov	r14, r1
    4ec6:	00 e0       	ldi	r16, 0x00	; 0
    4ec8:	23 e0       	ldi	r18, 0x03	; 3
    4eca:	40 e8       	ldi	r20, 0x80	; 128
    4ecc:	55 e2       	ldi	r21, 0x25	; 37
    4ece:	60 e0       	ldi	r22, 0x00	; 0
    4ed0:	70 e0       	ldi	r23, 0x00	; 0
    4ed2:	73 d0       	rcall	.+230    	; 0x4fba <serial_create>
    4ed4:	90 93 2a 18 	sts	0x182A, r25	; 0x80182a <_serial+0x1>
    4ed8:	80 93 29 18 	sts	0x1829, r24	; 0x801829 <_serial>
    4edc:	0f 91       	pop	r16
    4ede:	ef 90       	pop	r14
    4ee0:	cf 90       	pop	r12
    4ee2:	af 90       	pop	r10
    4ee4:	9f 90       	pop	r9
    4ee6:	8f 90       	pop	r8
    4ee8:	08 95       	ret

00004eea <mh_z19_injectCallBack>:
    4eea:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <_appCallBack+0x1>
    4eee:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_appCallBack>
    4ef2:	08 95       	ret

00004ef4 <mh_z19_takeMeassuring>:
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
    4efc:	29 97       	sbiw	r28, 0x09	; 9
    4efe:	0f b6       	in	r0, 0x3f	; 63
    4f00:	f8 94       	cli
    4f02:	de bf       	out	0x3e, r29	; 62
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	89 e0       	ldi	r24, 0x09	; 9
    4f0a:	e2 e4       	ldi	r30, 0x42	; 66
    4f0c:	f2 e0       	ldi	r31, 0x02	; 2
    4f0e:	9e 01       	movw	r18, r28
    4f10:	2f 5f       	subi	r18, 0xFF	; 255
    4f12:	3f 4f       	sbci	r19, 0xFF	; 255
    4f14:	d9 01       	movw	r26, r18
    4f16:	01 90       	ld	r0, Z+
    4f18:	0d 92       	st	X+, r0
    4f1a:	8a 95       	dec	r24
    4f1c:	e1 f7       	brne	.-8      	; 0x4f16 <mh_z19_takeMeassuring+0x22>
    4f1e:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_ppm+0x1>
    4f22:	10 92 27 18 	sts	0x1827, r1	; 0x801827 <_ppm>
    4f26:	80 91 29 18 	lds	r24, 0x1829	; 0x801829 <_serial>
    4f2a:	90 91 2a 18 	lds	r25, 0x182A	; 0x80182a <_serial+0x1>
    4f2e:	00 97       	sbiw	r24, 0x00	; 0
    4f30:	31 f0       	breq	.+12     	; 0x4f3e <mh_z19_takeMeassuring+0x4a>
    4f32:	42 2f       	mov	r20, r18
    4f34:	53 2f       	mov	r21, r19
    4f36:	69 e0       	ldi	r22, 0x09	; 9
    4f38:	0c d1       	rcall	.+536    	; 0x5152 <serial_sendBytes>
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	01 c0       	rjmp	.+2      	; 0x4f40 <mh_z19_takeMeassuring+0x4c>
    4f3e:	82 e0       	ldi	r24, 0x02	; 2
    4f40:	29 96       	adiw	r28, 0x09	; 9
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
    4f4c:	df 91       	pop	r29
    4f4e:	cf 91       	pop	r28
    4f50:	08 95       	ret

00004f52 <rc_servo_setPosition>:
    4f52:	65 36       	cpi	r22, 0x65	; 101
    4f54:	0c f0       	brlt	.+2      	; 0x4f58 <rc_servo_setPosition+0x6>
    4f56:	64 e6       	ldi	r22, 0x64	; 100
    4f58:	6c 39       	cpi	r22, 0x9C	; 156
    4f5a:	0c f4       	brge	.+2      	; 0x4f5e <rc_servo_setPosition+0xc>
    4f5c:	6c e9       	ldi	r22, 0x9C	; 156
    4f5e:	96 ef       	ldi	r25, 0xF6	; 246
    4f60:	69 02       	muls	r22, r25
    4f62:	b0 01       	movw	r22, r0
    4f64:	11 24       	eor	r1, r1
    4f66:	68 54       	subi	r22, 0x48	; 72
    4f68:	74 4f       	sbci	r23, 0xF4	; 244
    4f6a:	81 11       	cpse	r24, r1
    4f6c:	05 c0       	rjmp	.+10     	; 0x4f78 <rc_servo_setPosition+0x26>
    4f6e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4f72:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4f76:	08 95       	ret
    4f78:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4f7c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4f80:	08 95       	ret

00004f82 <rc_servo_initialise>:
    4f82:	ea e0       	ldi	r30, 0x0A	; 10
    4f84:	f1 e0       	ldi	r31, 0x01	; 1
    4f86:	80 81       	ld	r24, Z
    4f88:	88 61       	ori	r24, 0x18	; 24
    4f8a:	80 83       	st	Z, r24
    4f8c:	8f e3       	ldi	r24, 0x3F	; 63
    4f8e:	9c e9       	ldi	r25, 0x9C	; 156
    4f90:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4f94:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	80 e0       	ldi	r24, 0x00	; 0
    4f9c:	da df       	rcall	.-76     	; 0x4f52 <rc_servo_setPosition>
    4f9e:	60 e0       	ldi	r22, 0x00	; 0
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	d7 df       	rcall	.-82     	; 0x4f52 <rc_servo_setPosition>
    4fa4:	e0 e2       	ldi	r30, 0x20	; 32
    4fa6:	f1 e0       	ldi	r31, 0x01	; 1
    4fa8:	80 81       	ld	r24, Z
    4faa:	82 6a       	ori	r24, 0xA2	; 162
    4fac:	80 83       	st	Z, r24
    4fae:	e1 e2       	ldi	r30, 0x21	; 33
    4fb0:	f1 e0       	ldi	r31, 0x01	; 1
    4fb2:	80 81       	ld	r24, Z
    4fb4:	8a 61       	ori	r24, 0x1A	; 26
    4fb6:	80 83       	st	Z, r24
    4fb8:	08 95       	ret

00004fba <serial_create>:
    4fba:	2f 92       	push	r2
    4fbc:	3f 92       	push	r3
    4fbe:	4f 92       	push	r4
    4fc0:	5f 92       	push	r5
    4fc2:	6f 92       	push	r6
    4fc4:	7f 92       	push	r7
    4fc6:	8f 92       	push	r8
    4fc8:	9f 92       	push	r9
    4fca:	af 92       	push	r10
    4fcc:	cf 92       	push	r12
    4fce:	ef 92       	push	r14
    4fd0:	ff 92       	push	r15
    4fd2:	0f 93       	push	r16
    4fd4:	1f 93       	push	r17
    4fd6:	cf 93       	push	r28
    4fd8:	df 93       	push	r29
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
    4fde:	f8 2e       	mov	r15, r24
    4fe0:	2a 01       	movw	r4, r20
    4fe2:	3b 01       	movw	r6, r22
    4fe4:	88 e0       	ldi	r24, 0x08	; 8
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0e 94 bb 30 	call	0x6176	; 0x6176 <malloc>
    4fec:	8c 01       	movw	r16, r24
    4fee:	8f 2d       	mov	r24, r15
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	fc 01       	movw	r30, r24
    4ff4:	ee 0f       	add	r30, r30
    4ff6:	ff 1f       	adc	r31, r31
    4ff8:	e5 5d       	subi	r30, 0xD5	; 213
    4ffa:	f7 4e       	sbci	r31, 0xE7	; 231
    4ffc:	11 83       	std	Z+1, r17	; 0x01
    4ffe:	00 83       	st	Z, r16
    5000:	01 15       	cp	r16, r1
    5002:	11 05       	cpc	r17, r1
    5004:	09 f4       	brne	.+2      	; 0x5008 <serial_create+0x4e>
    5006:	68 c0       	rjmp	.+208    	; 0x50d8 <serial_create+0x11e>
    5008:	88 0f       	add	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	fc 01       	movw	r30, r24
    500e:	e5 5f       	subi	r30, 0xF5	; 245
    5010:	fd 4f       	sbci	r31, 0xFD	; 253
    5012:	80 81       	ld	r24, Z
    5014:	91 81       	ldd	r25, Z+1	; 0x01
    5016:	d8 01       	movw	r26, r16
    5018:	8d 93       	st	X+, r24
    501a:	9c 93       	st	X, r25
    501c:	8c 2d       	mov	r24, r12
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	88 0f       	add	r24, r24
    5022:	99 1f       	adc	r25, r25
    5024:	88 0f       	add	r24, r24
    5026:	99 1f       	adc	r25, r25
    5028:	0e 94 bb 30 	call	0x6176	; 0x6176 <malloc>
    502c:	1c 01       	movw	r2, r24
    502e:	86 e0       	ldi	r24, 0x06	; 6
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	0e 94 bb 30 	call	0x6176	; 0x6176 <malloc>
    5036:	7c 01       	movw	r14, r24
    5038:	4c 2d       	mov	r20, r12
    503a:	b1 01       	movw	r22, r2
    503c:	ef d6       	rcall	.+3550   	; 0x5e1c <fifo_init>
    503e:	f8 01       	movw	r30, r16
    5040:	f5 82       	std	Z+5, r15	; 0x05
    5042:	e4 82       	std	Z+4, r14	; 0x04
    5044:	8a 2d       	mov	r24, r10
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	88 0f       	add	r24, r24
    504a:	99 1f       	adc	r25, r25
    504c:	88 0f       	add	r24, r24
    504e:	99 1f       	adc	r25, r25
    5050:	0e 94 bb 30 	call	0x6176	; 0x6176 <malloc>
    5054:	1c 01       	movw	r2, r24
    5056:	86 e0       	ldi	r24, 0x06	; 6
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	0e 94 bb 30 	call	0x6176	; 0x6176 <malloc>
    505e:	7c 01       	movw	r14, r24
    5060:	4a 2d       	mov	r20, r10
    5062:	b1 01       	movw	r22, r2
    5064:	db d6       	rcall	.+3510   	; 0x5e1c <fifo_init>
    5066:	d8 01       	movw	r26, r16
    5068:	13 96       	adiw	r26, 0x03	; 3
    506a:	fc 92       	st	X, r15
    506c:	ee 92       	st	-X, r14
    506e:	12 97       	sbiw	r26, 0x02	; 2
    5070:	17 96       	adiw	r26, 0x07	; 7
    5072:	9c 92       	st	X, r9
    5074:	8e 92       	st	-X, r8
    5076:	16 97       	sbiw	r26, 0x06	; 6
    5078:	ff b6       	in	r15, 0x3f	; 63
    507a:	f8 94       	cli
    507c:	ed 91       	ld	r30, X+
    507e:	fc 91       	ld	r31, X
    5080:	11 97       	sbiw	r26, 0x01	; 1
    5082:	36 97       	sbiw	r30, 0x06	; 6
    5084:	80 81       	ld	r24, Z
    5086:	82 60       	ori	r24, 0x02	; 2
    5088:	80 83       	st	Z, r24
    508a:	8d 90       	ld	r8, X+
    508c:	9c 90       	ld	r9, X
    508e:	c3 01       	movw	r24, r6
    5090:	b2 01       	movw	r22, r4
    5092:	2c d9       	rcall	.-3496   	; 0x42ec <__floatunsisf>
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	40 e0       	ldi	r20, 0x00	; 0
    509a:	51 e4       	ldi	r21, 0x41	; 65
    509c:	dc d7       	rcall	.+4024   	; 0x6056 <__mulsf3>
    509e:	9b 01       	movw	r18, r22
    50a0:	ac 01       	movw	r20, r24
    50a2:	60 e0       	ldi	r22, 0x00	; 0
    50a4:	74 e2       	ldi	r23, 0x24	; 36
    50a6:	84 e7       	ldi	r24, 0x74	; 116
    50a8:	9b e4       	ldi	r25, 0x4B	; 75
    50aa:	3b d7       	rcall	.+3702   	; 0x5f22 <__divsf3>
    50ac:	20 e0       	ldi	r18, 0x00	; 0
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	40 e8       	ldi	r20, 0x80	; 128
    50b2:	5f e3       	ldi	r21, 0x3F	; 63
    50b4:	cf d6       	rcall	.+3486   	; 0x5e54 <__subsf3>
    50b6:	ee d8       	rcall	.-3620   	; 0x4294 <__fixunssfsi>
    50b8:	f4 01       	movw	r30, r8
    50ba:	32 97       	sbiw	r30, 0x02	; 2
    50bc:	60 83       	st	Z, r22
    50be:	d8 01       	movw	r26, r16
    50c0:	ed 91       	ld	r30, X+
    50c2:	fc 91       	ld	r31, X
    50c4:	11 97       	sbiw	r26, 0x01	; 1
    50c6:	35 97       	sbiw	r30, 0x05	; 5
    50c8:	88 e9       	ldi	r24, 0x98	; 152
    50ca:	80 83       	st	Z, r24
    50cc:	ed 91       	ld	r30, X+
    50ce:	fc 91       	ld	r31, X
    50d0:	34 97       	sbiw	r30, 0x04	; 4
    50d2:	86 e0       	ldi	r24, 0x06	; 6
    50d4:	80 83       	st	Z, r24
    50d6:	ff be       	out	0x3f, r15	; 63
    50d8:	c8 01       	movw	r24, r16
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	1f 91       	pop	r17
    50e0:	0f 91       	pop	r16
    50e2:	ff 90       	pop	r15
    50e4:	ef 90       	pop	r14
    50e6:	cf 90       	pop	r12
    50e8:	af 90       	pop	r10
    50ea:	9f 90       	pop	r9
    50ec:	8f 90       	pop	r8
    50ee:	7f 90       	pop	r7
    50f0:	6f 90       	pop	r6
    50f2:	5f 90       	pop	r5
    50f4:	4f 90       	pop	r4
    50f6:	3f 90       	pop	r3
    50f8:	2f 90       	pop	r2
    50fa:	08 95       	ret

000050fc <serial_sendByte>:
    50fc:	cf 93       	push	r28
    50fe:	df 93       	push	r29
    5100:	dc 01       	movw	r26, r24
    5102:	89 2b       	or	r24, r25
    5104:	01 f1       	breq	.+64     	; 0x5146 <serial_sendByte+0x4a>
    5106:	12 96       	adiw	r26, 0x02	; 2
    5108:	ed 91       	ld	r30, X+
    510a:	fc 91       	ld	r31, X
    510c:	13 97       	sbiw	r26, 0x03	; 3
    510e:	93 81       	ldd	r25, Z+3	; 0x03
    5110:	82 81       	ldd	r24, Z+2	; 0x02
    5112:	25 81       	ldd	r18, Z+5	; 0x05
    5114:	98 1b       	sub	r25, r24
    5116:	92 23       	and	r25, r18
    5118:	84 81       	ldd	r24, Z+4	; 0x04
    511a:	98 17       	cp	r25, r24
    511c:	b1 f0       	breq	.+44     	; 0x514a <serial_sendByte+0x4e>
    511e:	83 81       	ldd	r24, Z+3	; 0x03
    5120:	26 95       	lsr	r18
    5122:	28 23       	and	r18, r24
    5124:	c0 81       	ld	r28, Z
    5126:	d1 81       	ldd	r29, Z+1	; 0x01
    5128:	c2 0f       	add	r28, r18
    512a:	d1 1d       	adc	r29, r1
    512c:	68 83       	st	Y, r22
    512e:	8f 5f       	subi	r24, 0xFF	; 255
    5130:	95 81       	ldd	r25, Z+5	; 0x05
    5132:	89 23       	and	r24, r25
    5134:	83 83       	std	Z+3, r24	; 0x03
    5136:	ed 91       	ld	r30, X+
    5138:	fc 91       	ld	r31, X
    513a:	35 97       	sbiw	r30, 0x05	; 5
    513c:	80 81       	ld	r24, Z
    513e:	80 62       	ori	r24, 0x20	; 32
    5140:	80 83       	st	Z, r24
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	03 c0       	rjmp	.+6      	; 0x514c <serial_sendByte+0x50>
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	01 c0       	rjmp	.+2      	; 0x514c <serial_sendByte+0x50>
    514a:	82 e0       	ldi	r24, 0x02	; 2
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	08 95       	ret

00005152 <serial_sendBytes>:
    5152:	ef 92       	push	r14
    5154:	ff 92       	push	r15
    5156:	0f 93       	push	r16
    5158:	1f 93       	push	r17
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	7c 01       	movw	r14, r24
    5160:	00 97       	sbiw	r24, 0x00	; 0
    5162:	09 f4       	brne	.+2      	; 0x5166 <serial_sendBytes+0x14>
    5164:	41 c0       	rjmp	.+130    	; 0x51e8 <serial_sendBytes+0x96>
    5166:	dc 01       	movw	r26, r24
    5168:	12 96       	adiw	r26, 0x02	; 2
    516a:	ed 91       	ld	r30, X+
    516c:	fc 91       	ld	r31, X
    516e:	13 97       	sbiw	r26, 0x03	; 3
    5170:	93 81       	ldd	r25, Z+3	; 0x03
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	98 1b       	sub	r25, r24
    5176:	85 81       	ldd	r24, Z+5	; 0x05
    5178:	98 23       	and	r25, r24
    517a:	84 81       	ldd	r24, Z+4	; 0x04
    517c:	89 1b       	sub	r24, r25
    517e:	86 17       	cp	r24, r22
    5180:	a8 f1       	brcs	.+106    	; 0x51ec <serial_sendBytes+0x9a>
    5182:	66 23       	and	r22, r22
    5184:	41 f1       	breq	.+80     	; 0x51d6 <serial_sendBytes+0x84>
    5186:	84 2f       	mov	r24, r20
    5188:	95 2f       	mov	r25, r21
    518a:	dc 01       	movw	r26, r24
    518c:	61 50       	subi	r22, 0x01	; 1
    518e:	46 2f       	mov	r20, r22
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	4f 5f       	subi	r20, 0xFF	; 255
    5194:	5f 4f       	sbci	r21, 0xFF	; 255
    5196:	48 0f       	add	r20, r24
    5198:	59 1f       	adc	r21, r25
    519a:	e7 01       	movw	r28, r14
    519c:	ea 81       	ldd	r30, Y+2	; 0x02
    519e:	fb 81       	ldd	r31, Y+3	; 0x03
    51a0:	93 81       	ldd	r25, Z+3	; 0x03
    51a2:	82 81       	ldd	r24, Z+2	; 0x02
    51a4:	25 81       	ldd	r18, Z+5	; 0x05
    51a6:	98 1b       	sub	r25, r24
    51a8:	92 23       	and	r25, r18
    51aa:	84 81       	ldd	r24, Z+4	; 0x04
    51ac:	98 17       	cp	r25, r24
    51ae:	79 f0       	breq	.+30     	; 0x51ce <serial_sendBytes+0x7c>
    51b0:	8c 91       	ld	r24, X
    51b2:	93 81       	ldd	r25, Z+3	; 0x03
    51b4:	26 95       	lsr	r18
    51b6:	29 23       	and	r18, r25
    51b8:	60 81       	ld	r22, Z
    51ba:	71 81       	ldd	r23, Z+1	; 0x01
    51bc:	8b 01       	movw	r16, r22
    51be:	02 0f       	add	r16, r18
    51c0:	11 1d       	adc	r17, r1
    51c2:	e8 01       	movw	r28, r16
    51c4:	88 83       	st	Y, r24
    51c6:	9f 5f       	subi	r25, 0xFF	; 255
    51c8:	85 81       	ldd	r24, Z+5	; 0x05
    51ca:	98 23       	and	r25, r24
    51cc:	93 83       	std	Z+3, r25	; 0x03
    51ce:	11 96       	adiw	r26, 0x01	; 1
    51d0:	a4 17       	cp	r26, r20
    51d2:	b5 07       	cpc	r27, r21
    51d4:	11 f7       	brne	.-60     	; 0x519a <serial_sendBytes+0x48>
    51d6:	d7 01       	movw	r26, r14
    51d8:	ed 91       	ld	r30, X+
    51da:	fc 91       	ld	r31, X
    51dc:	35 97       	sbiw	r30, 0x05	; 5
    51de:	80 81       	ld	r24, Z
    51e0:	80 62       	ori	r24, 0x20	; 32
    51e2:	80 83       	st	Z, r24
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	03 c0       	rjmp	.+6      	; 0x51ee <serial_sendBytes+0x9c>
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	01 c0       	rjmp	.+2      	; 0x51ee <serial_sendBytes+0x9c>
    51ec:	82 e0       	ldi	r24, 0x02	; 2
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	1f 91       	pop	r17
    51f4:	0f 91       	pop	r16
    51f6:	ff 90       	pop	r15
    51f8:	ef 90       	pop	r14
    51fa:	08 95       	ret

000051fc <serial_getByte>:
    51fc:	00 97       	sbiw	r24, 0x00	; 0
    51fe:	d1 f0       	breq	.+52     	; 0x5234 <serial_getByte+0x38>
    5200:	dc 01       	movw	r26, r24
    5202:	14 96       	adiw	r26, 0x04	; 4
    5204:	ed 91       	ld	r30, X+
    5206:	fc 91       	ld	r31, X
    5208:	15 97       	sbiw	r26, 0x05	; 5
    520a:	93 81       	ldd	r25, Z+3	; 0x03
    520c:	82 81       	ldd	r24, Z+2	; 0x02
    520e:	98 17       	cp	r25, r24
    5210:	99 f0       	breq	.+38     	; 0x5238 <serial_getByte+0x3c>
    5212:	92 81       	ldd	r25, Z+2	; 0x02
    5214:	85 81       	ldd	r24, Z+5	; 0x05
    5216:	86 95       	lsr	r24
    5218:	89 23       	and	r24, r25
    521a:	a0 81       	ld	r26, Z
    521c:	b1 81       	ldd	r27, Z+1	; 0x01
    521e:	a8 0f       	add	r26, r24
    5220:	b1 1d       	adc	r27, r1
    5222:	8c 91       	ld	r24, X
    5224:	db 01       	movw	r26, r22
    5226:	8c 93       	st	X, r24
    5228:	9f 5f       	subi	r25, 0xFF	; 255
    522a:	85 81       	ldd	r24, Z+5	; 0x05
    522c:	98 23       	and	r25, r24
    522e:	92 83       	std	Z+2, r25	; 0x02
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	08 95       	ret
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	08 95       	ret
    5238:	83 e0       	ldi	r24, 0x03	; 3
    523a:	08 95       	ret

0000523c <__vector_25>:
    523c:	1f 92       	push	r1
    523e:	0f 92       	push	r0
    5240:	0f b6       	in	r0, 0x3f	; 63
    5242:	0f 92       	push	r0
    5244:	11 24       	eor	r1, r1
    5246:	0b b6       	in	r0, 0x3b	; 59
    5248:	0f 92       	push	r0
    524a:	2f 93       	push	r18
    524c:	3f 93       	push	r19
    524e:	4f 93       	push	r20
    5250:	5f 93       	push	r21
    5252:	6f 93       	push	r22
    5254:	7f 93       	push	r23
    5256:	8f 93       	push	r24
    5258:	9f 93       	push	r25
    525a:	af 93       	push	r26
    525c:	bf 93       	push	r27
    525e:	cf 93       	push	r28
    5260:	df 93       	push	r29
    5262:	ef 93       	push	r30
    5264:	ff 93       	push	r31
    5266:	a0 91 2b 18 	lds	r26, 0x182B	; 0x80182b <_ser_handle>
    526a:	b0 91 2c 18 	lds	r27, 0x182C	; 0x80182c <_ser_handle+0x1>
    526e:	10 97       	sbiw	r26, 0x00	; 0
    5270:	11 f1       	breq	.+68     	; 0x52b6 <__vector_25+0x7a>
    5272:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5276:	14 96       	adiw	r26, 0x04	; 4
    5278:	ed 91       	ld	r30, X+
    527a:	fc 91       	ld	r31, X
    527c:	15 97       	sbiw	r26, 0x05	; 5
    527e:	93 81       	ldd	r25, Z+3	; 0x03
    5280:	82 81       	ldd	r24, Z+2	; 0x02
    5282:	25 81       	ldd	r18, Z+5	; 0x05
    5284:	98 1b       	sub	r25, r24
    5286:	92 23       	and	r25, r18
    5288:	84 81       	ldd	r24, Z+4	; 0x04
    528a:	98 17       	cp	r25, r24
    528c:	61 f0       	breq	.+24     	; 0x52a6 <__vector_25+0x6a>
    528e:	83 81       	ldd	r24, Z+3	; 0x03
    5290:	26 95       	lsr	r18
    5292:	28 23       	and	r18, r24
    5294:	c0 81       	ld	r28, Z
    5296:	d1 81       	ldd	r29, Z+1	; 0x01
    5298:	c2 0f       	add	r28, r18
    529a:	d1 1d       	adc	r29, r1
    529c:	68 83       	st	Y, r22
    529e:	8f 5f       	subi	r24, 0xFF	; 255
    52a0:	95 81       	ldd	r25, Z+5	; 0x05
    52a2:	89 23       	and	r24, r25
    52a4:	83 83       	std	Z+3, r24	; 0x03
    52a6:	16 96       	adiw	r26, 0x06	; 6
    52a8:	ed 91       	ld	r30, X+
    52aa:	fc 91       	ld	r31, X
    52ac:	17 97       	sbiw	r26, 0x07	; 7
    52ae:	30 97       	sbiw	r30, 0x00	; 0
    52b0:	11 f0       	breq	.+4      	; 0x52b6 <__vector_25+0x7a>
    52b2:	cd 01       	movw	r24, r26
    52b4:	19 95       	eicall
    52b6:	ff 91       	pop	r31
    52b8:	ef 91       	pop	r30
    52ba:	df 91       	pop	r29
    52bc:	cf 91       	pop	r28
    52be:	bf 91       	pop	r27
    52c0:	af 91       	pop	r26
    52c2:	9f 91       	pop	r25
    52c4:	8f 91       	pop	r24
    52c6:	7f 91       	pop	r23
    52c8:	6f 91       	pop	r22
    52ca:	5f 91       	pop	r21
    52cc:	4f 91       	pop	r20
    52ce:	3f 91       	pop	r19
    52d0:	2f 91       	pop	r18
    52d2:	0f 90       	pop	r0
    52d4:	0b be       	out	0x3b, r0	; 59
    52d6:	0f 90       	pop	r0
    52d8:	0f be       	out	0x3f, r0	; 63
    52da:	0f 90       	pop	r0
    52dc:	1f 90       	pop	r1
    52de:	18 95       	reti

000052e0 <__vector_26>:
    52e0:	1f 92       	push	r1
    52e2:	0f 92       	push	r0
    52e4:	0f b6       	in	r0, 0x3f	; 63
    52e6:	0f 92       	push	r0
    52e8:	11 24       	eor	r1, r1
    52ea:	0b b6       	in	r0, 0x3b	; 59
    52ec:	0f 92       	push	r0
    52ee:	2f 93       	push	r18
    52f0:	8f 93       	push	r24
    52f2:	9f 93       	push	r25
    52f4:	af 93       	push	r26
    52f6:	bf 93       	push	r27
    52f8:	ef 93       	push	r30
    52fa:	ff 93       	push	r31
    52fc:	e0 91 2b 18 	lds	r30, 0x182B	; 0x80182b <_ser_handle>
    5300:	f0 91 2c 18 	lds	r31, 0x182C	; 0x80182c <_ser_handle+0x1>
    5304:	30 97       	sbiw	r30, 0x00	; 0
    5306:	b9 f0       	breq	.+46     	; 0x5336 <__vector_26+0x56>
    5308:	02 80       	ldd	r0, Z+2	; 0x02
    530a:	f3 81       	ldd	r31, Z+3	; 0x03
    530c:	e0 2d       	mov	r30, r0
    530e:	93 81       	ldd	r25, Z+3	; 0x03
    5310:	82 81       	ldd	r24, Z+2	; 0x02
    5312:	98 17       	cp	r25, r24
    5314:	b1 f0       	breq	.+44     	; 0x5342 <__vector_26+0x62>
    5316:	92 81       	ldd	r25, Z+2	; 0x02
    5318:	85 81       	ldd	r24, Z+5	; 0x05
    531a:	28 2f       	mov	r18, r24
    531c:	26 95       	lsr	r18
    531e:	29 23       	and	r18, r25
    5320:	a0 81       	ld	r26, Z
    5322:	b1 81       	ldd	r27, Z+1	; 0x01
    5324:	a2 0f       	add	r26, r18
    5326:	b1 1d       	adc	r27, r1
    5328:	2c 91       	ld	r18, X
    532a:	9f 5f       	subi	r25, 0xFF	; 255
    532c:	89 23       	and	r24, r25
    532e:	82 83       	std	Z+2, r24	; 0x02
    5330:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5334:	0b c0       	rjmp	.+22     	; 0x534c <__vector_26+0x6c>
    5336:	e1 ec       	ldi	r30, 0xC1	; 193
    5338:	f0 e0       	ldi	r31, 0x00	; 0
    533a:	80 81       	ld	r24, Z
    533c:	8f 7d       	andi	r24, 0xDF	; 223
    533e:	80 83       	st	Z, r24
    5340:	05 c0       	rjmp	.+10     	; 0x534c <__vector_26+0x6c>
    5342:	e1 ec       	ldi	r30, 0xC1	; 193
    5344:	f0 e0       	ldi	r31, 0x00	; 0
    5346:	80 81       	ld	r24, Z
    5348:	8f 7d       	andi	r24, 0xDF	; 223
    534a:	80 83       	st	Z, r24
    534c:	ff 91       	pop	r31
    534e:	ef 91       	pop	r30
    5350:	bf 91       	pop	r27
    5352:	af 91       	pop	r26
    5354:	9f 91       	pop	r25
    5356:	8f 91       	pop	r24
    5358:	2f 91       	pop	r18
    535a:	0f 90       	pop	r0
    535c:	0b be       	out	0x3b, r0	; 59
    535e:	0f 90       	pop	r0
    5360:	0f be       	out	0x3f, r0	; 63
    5362:	0f 90       	pop	r0
    5364:	1f 90       	pop	r1
    5366:	18 95       	reti

00005368 <__vector_36>:
    5368:	1f 92       	push	r1
    536a:	0f 92       	push	r0
    536c:	0f b6       	in	r0, 0x3f	; 63
    536e:	0f 92       	push	r0
    5370:	11 24       	eor	r1, r1
    5372:	0b b6       	in	r0, 0x3b	; 59
    5374:	0f 92       	push	r0
    5376:	2f 93       	push	r18
    5378:	3f 93       	push	r19
    537a:	4f 93       	push	r20
    537c:	5f 93       	push	r21
    537e:	6f 93       	push	r22
    5380:	7f 93       	push	r23
    5382:	8f 93       	push	r24
    5384:	9f 93       	push	r25
    5386:	af 93       	push	r26
    5388:	bf 93       	push	r27
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	ef 93       	push	r30
    5390:	ff 93       	push	r31
    5392:	a0 91 2d 18 	lds	r26, 0x182D	; 0x80182d <_ser_handle+0x2>
    5396:	b0 91 2e 18 	lds	r27, 0x182E	; 0x80182e <_ser_handle+0x3>
    539a:	10 97       	sbiw	r26, 0x00	; 0
    539c:	11 f1       	breq	.+68     	; 0x53e2 <__vector_36+0x7a>
    539e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    53a2:	14 96       	adiw	r26, 0x04	; 4
    53a4:	ed 91       	ld	r30, X+
    53a6:	fc 91       	ld	r31, X
    53a8:	15 97       	sbiw	r26, 0x05	; 5
    53aa:	93 81       	ldd	r25, Z+3	; 0x03
    53ac:	82 81       	ldd	r24, Z+2	; 0x02
    53ae:	25 81       	ldd	r18, Z+5	; 0x05
    53b0:	98 1b       	sub	r25, r24
    53b2:	92 23       	and	r25, r18
    53b4:	84 81       	ldd	r24, Z+4	; 0x04
    53b6:	98 17       	cp	r25, r24
    53b8:	61 f0       	breq	.+24     	; 0x53d2 <__vector_36+0x6a>
    53ba:	83 81       	ldd	r24, Z+3	; 0x03
    53bc:	26 95       	lsr	r18
    53be:	28 23       	and	r18, r24
    53c0:	c0 81       	ld	r28, Z
    53c2:	d1 81       	ldd	r29, Z+1	; 0x01
    53c4:	c2 0f       	add	r28, r18
    53c6:	d1 1d       	adc	r29, r1
    53c8:	68 83       	st	Y, r22
    53ca:	8f 5f       	subi	r24, 0xFF	; 255
    53cc:	95 81       	ldd	r25, Z+5	; 0x05
    53ce:	89 23       	and	r24, r25
    53d0:	83 83       	std	Z+3, r24	; 0x03
    53d2:	16 96       	adiw	r26, 0x06	; 6
    53d4:	ed 91       	ld	r30, X+
    53d6:	fc 91       	ld	r31, X
    53d8:	17 97       	sbiw	r26, 0x07	; 7
    53da:	30 97       	sbiw	r30, 0x00	; 0
    53dc:	11 f0       	breq	.+4      	; 0x53e2 <__vector_36+0x7a>
    53de:	cd 01       	movw	r24, r26
    53e0:	19 95       	eicall
    53e2:	ff 91       	pop	r31
    53e4:	ef 91       	pop	r30
    53e6:	df 91       	pop	r29
    53e8:	cf 91       	pop	r28
    53ea:	bf 91       	pop	r27
    53ec:	af 91       	pop	r26
    53ee:	9f 91       	pop	r25
    53f0:	8f 91       	pop	r24
    53f2:	7f 91       	pop	r23
    53f4:	6f 91       	pop	r22
    53f6:	5f 91       	pop	r21
    53f8:	4f 91       	pop	r20
    53fa:	3f 91       	pop	r19
    53fc:	2f 91       	pop	r18
    53fe:	0f 90       	pop	r0
    5400:	0b be       	out	0x3b, r0	; 59
    5402:	0f 90       	pop	r0
    5404:	0f be       	out	0x3f, r0	; 63
    5406:	0f 90       	pop	r0
    5408:	1f 90       	pop	r1
    540a:	18 95       	reti

0000540c <__vector_37>:
    540c:	1f 92       	push	r1
    540e:	0f 92       	push	r0
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	0f 92       	push	r0
    5414:	11 24       	eor	r1, r1
    5416:	0b b6       	in	r0, 0x3b	; 59
    5418:	0f 92       	push	r0
    541a:	2f 93       	push	r18
    541c:	8f 93       	push	r24
    541e:	9f 93       	push	r25
    5420:	af 93       	push	r26
    5422:	bf 93       	push	r27
    5424:	ef 93       	push	r30
    5426:	ff 93       	push	r31
    5428:	e0 91 2d 18 	lds	r30, 0x182D	; 0x80182d <_ser_handle+0x2>
    542c:	f0 91 2e 18 	lds	r31, 0x182E	; 0x80182e <_ser_handle+0x3>
    5430:	30 97       	sbiw	r30, 0x00	; 0
    5432:	b9 f0       	breq	.+46     	; 0x5462 <__vector_37+0x56>
    5434:	02 80       	ldd	r0, Z+2	; 0x02
    5436:	f3 81       	ldd	r31, Z+3	; 0x03
    5438:	e0 2d       	mov	r30, r0
    543a:	93 81       	ldd	r25, Z+3	; 0x03
    543c:	82 81       	ldd	r24, Z+2	; 0x02
    543e:	98 17       	cp	r25, r24
    5440:	b1 f0       	breq	.+44     	; 0x546e <__vector_37+0x62>
    5442:	92 81       	ldd	r25, Z+2	; 0x02
    5444:	85 81       	ldd	r24, Z+5	; 0x05
    5446:	28 2f       	mov	r18, r24
    5448:	26 95       	lsr	r18
    544a:	29 23       	and	r18, r25
    544c:	a0 81       	ld	r26, Z
    544e:	b1 81       	ldd	r27, Z+1	; 0x01
    5450:	a2 0f       	add	r26, r18
    5452:	b1 1d       	adc	r27, r1
    5454:	2c 91       	ld	r18, X
    5456:	9f 5f       	subi	r25, 0xFF	; 255
    5458:	89 23       	and	r24, r25
    545a:	82 83       	std	Z+2, r24	; 0x02
    545c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5460:	0b c0       	rjmp	.+22     	; 0x5478 <__vector_37+0x6c>
    5462:	e9 ec       	ldi	r30, 0xC9	; 201
    5464:	f0 e0       	ldi	r31, 0x00	; 0
    5466:	80 81       	ld	r24, Z
    5468:	8f 7d       	andi	r24, 0xDF	; 223
    546a:	80 83       	st	Z, r24
    546c:	05 c0       	rjmp	.+10     	; 0x5478 <__vector_37+0x6c>
    546e:	e9 ec       	ldi	r30, 0xC9	; 201
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	80 81       	ld	r24, Z
    5474:	8f 7d       	andi	r24, 0xDF	; 223
    5476:	80 83       	st	Z, r24
    5478:	ff 91       	pop	r31
    547a:	ef 91       	pop	r30
    547c:	bf 91       	pop	r27
    547e:	af 91       	pop	r26
    5480:	9f 91       	pop	r25
    5482:	8f 91       	pop	r24
    5484:	2f 91       	pop	r18
    5486:	0f 90       	pop	r0
    5488:	0b be       	out	0x3b, r0	; 59
    548a:	0f 90       	pop	r0
    548c:	0f be       	out	0x3f, r0	; 63
    548e:	0f 90       	pop	r0
    5490:	1f 90       	pop	r1
    5492:	18 95       	reti

00005494 <__vector_51>:
    5494:	1f 92       	push	r1
    5496:	0f 92       	push	r0
    5498:	0f b6       	in	r0, 0x3f	; 63
    549a:	0f 92       	push	r0
    549c:	11 24       	eor	r1, r1
    549e:	0b b6       	in	r0, 0x3b	; 59
    54a0:	0f 92       	push	r0
    54a2:	2f 93       	push	r18
    54a4:	3f 93       	push	r19
    54a6:	4f 93       	push	r20
    54a8:	5f 93       	push	r21
    54aa:	6f 93       	push	r22
    54ac:	7f 93       	push	r23
    54ae:	8f 93       	push	r24
    54b0:	9f 93       	push	r25
    54b2:	af 93       	push	r26
    54b4:	bf 93       	push	r27
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	ef 93       	push	r30
    54bc:	ff 93       	push	r31
    54be:	a0 91 2f 18 	lds	r26, 0x182F	; 0x80182f <_ser_handle+0x4>
    54c2:	b0 91 30 18 	lds	r27, 0x1830	; 0x801830 <_ser_handle+0x5>
    54c6:	10 97       	sbiw	r26, 0x00	; 0
    54c8:	11 f1       	breq	.+68     	; 0x550e <__vector_51+0x7a>
    54ca:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    54ce:	14 96       	adiw	r26, 0x04	; 4
    54d0:	ed 91       	ld	r30, X+
    54d2:	fc 91       	ld	r31, X
    54d4:	15 97       	sbiw	r26, 0x05	; 5
    54d6:	93 81       	ldd	r25, Z+3	; 0x03
    54d8:	82 81       	ldd	r24, Z+2	; 0x02
    54da:	25 81       	ldd	r18, Z+5	; 0x05
    54dc:	98 1b       	sub	r25, r24
    54de:	92 23       	and	r25, r18
    54e0:	84 81       	ldd	r24, Z+4	; 0x04
    54e2:	98 17       	cp	r25, r24
    54e4:	61 f0       	breq	.+24     	; 0x54fe <__vector_51+0x6a>
    54e6:	83 81       	ldd	r24, Z+3	; 0x03
    54e8:	26 95       	lsr	r18
    54ea:	28 23       	and	r18, r24
    54ec:	c0 81       	ld	r28, Z
    54ee:	d1 81       	ldd	r29, Z+1	; 0x01
    54f0:	c2 0f       	add	r28, r18
    54f2:	d1 1d       	adc	r29, r1
    54f4:	68 83       	st	Y, r22
    54f6:	8f 5f       	subi	r24, 0xFF	; 255
    54f8:	95 81       	ldd	r25, Z+5	; 0x05
    54fa:	89 23       	and	r24, r25
    54fc:	83 83       	std	Z+3, r24	; 0x03
    54fe:	16 96       	adiw	r26, 0x06	; 6
    5500:	ed 91       	ld	r30, X+
    5502:	fc 91       	ld	r31, X
    5504:	17 97       	sbiw	r26, 0x07	; 7
    5506:	30 97       	sbiw	r30, 0x00	; 0
    5508:	11 f0       	breq	.+4      	; 0x550e <__vector_51+0x7a>
    550a:	cd 01       	movw	r24, r26
    550c:	19 95       	eicall
    550e:	ff 91       	pop	r31
    5510:	ef 91       	pop	r30
    5512:	df 91       	pop	r29
    5514:	cf 91       	pop	r28
    5516:	bf 91       	pop	r27
    5518:	af 91       	pop	r26
    551a:	9f 91       	pop	r25
    551c:	8f 91       	pop	r24
    551e:	7f 91       	pop	r23
    5520:	6f 91       	pop	r22
    5522:	5f 91       	pop	r21
    5524:	4f 91       	pop	r20
    5526:	3f 91       	pop	r19
    5528:	2f 91       	pop	r18
    552a:	0f 90       	pop	r0
    552c:	0b be       	out	0x3b, r0	; 59
    552e:	0f 90       	pop	r0
    5530:	0f be       	out	0x3f, r0	; 63
    5532:	0f 90       	pop	r0
    5534:	1f 90       	pop	r1
    5536:	18 95       	reti

00005538 <__vector_52>:
    5538:	1f 92       	push	r1
    553a:	0f 92       	push	r0
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	0f 92       	push	r0
    5540:	11 24       	eor	r1, r1
    5542:	0b b6       	in	r0, 0x3b	; 59
    5544:	0f 92       	push	r0
    5546:	2f 93       	push	r18
    5548:	8f 93       	push	r24
    554a:	9f 93       	push	r25
    554c:	af 93       	push	r26
    554e:	bf 93       	push	r27
    5550:	ef 93       	push	r30
    5552:	ff 93       	push	r31
    5554:	e0 91 2f 18 	lds	r30, 0x182F	; 0x80182f <_ser_handle+0x4>
    5558:	f0 91 30 18 	lds	r31, 0x1830	; 0x801830 <_ser_handle+0x5>
    555c:	30 97       	sbiw	r30, 0x00	; 0
    555e:	b9 f0       	breq	.+46     	; 0x558e <__vector_52+0x56>
    5560:	02 80       	ldd	r0, Z+2	; 0x02
    5562:	f3 81       	ldd	r31, Z+3	; 0x03
    5564:	e0 2d       	mov	r30, r0
    5566:	93 81       	ldd	r25, Z+3	; 0x03
    5568:	82 81       	ldd	r24, Z+2	; 0x02
    556a:	98 17       	cp	r25, r24
    556c:	b1 f0       	breq	.+44     	; 0x559a <__vector_52+0x62>
    556e:	92 81       	ldd	r25, Z+2	; 0x02
    5570:	85 81       	ldd	r24, Z+5	; 0x05
    5572:	28 2f       	mov	r18, r24
    5574:	26 95       	lsr	r18
    5576:	29 23       	and	r18, r25
    5578:	a0 81       	ld	r26, Z
    557a:	b1 81       	ldd	r27, Z+1	; 0x01
    557c:	a2 0f       	add	r26, r18
    557e:	b1 1d       	adc	r27, r1
    5580:	2c 91       	ld	r18, X
    5582:	9f 5f       	subi	r25, 0xFF	; 255
    5584:	89 23       	and	r24, r25
    5586:	82 83       	std	Z+2, r24	; 0x02
    5588:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    558c:	0b c0       	rjmp	.+22     	; 0x55a4 <__vector_52+0x6c>
    558e:	e1 ed       	ldi	r30, 0xD1	; 209
    5590:	f0 e0       	ldi	r31, 0x00	; 0
    5592:	80 81       	ld	r24, Z
    5594:	8f 7d       	andi	r24, 0xDF	; 223
    5596:	80 83       	st	Z, r24
    5598:	05 c0       	rjmp	.+10     	; 0x55a4 <__vector_52+0x6c>
    559a:	e1 ed       	ldi	r30, 0xD1	; 209
    559c:	f0 e0       	ldi	r31, 0x00	; 0
    559e:	80 81       	ld	r24, Z
    55a0:	8f 7d       	andi	r24, 0xDF	; 223
    55a2:	80 83       	st	Z, r24
    55a4:	ff 91       	pop	r31
    55a6:	ef 91       	pop	r30
    55a8:	bf 91       	pop	r27
    55aa:	af 91       	pop	r26
    55ac:	9f 91       	pop	r25
    55ae:	8f 91       	pop	r24
    55b0:	2f 91       	pop	r18
    55b2:	0f 90       	pop	r0
    55b4:	0b be       	out	0x3b, r0	; 59
    55b6:	0f 90       	pop	r0
    55b8:	0f be       	out	0x3f, r0	; 63
    55ba:	0f 90       	pop	r0
    55bc:	1f 90       	pop	r1
    55be:	18 95       	reti

000055c0 <__vector_54>:
    55c0:	1f 92       	push	r1
    55c2:	0f 92       	push	r0
    55c4:	0f b6       	in	r0, 0x3f	; 63
    55c6:	0f 92       	push	r0
    55c8:	11 24       	eor	r1, r1
    55ca:	0b b6       	in	r0, 0x3b	; 59
    55cc:	0f 92       	push	r0
    55ce:	2f 93       	push	r18
    55d0:	3f 93       	push	r19
    55d2:	4f 93       	push	r20
    55d4:	5f 93       	push	r21
    55d6:	6f 93       	push	r22
    55d8:	7f 93       	push	r23
    55da:	8f 93       	push	r24
    55dc:	9f 93       	push	r25
    55de:	af 93       	push	r26
    55e0:	bf 93       	push	r27
    55e2:	cf 93       	push	r28
    55e4:	df 93       	push	r29
    55e6:	ef 93       	push	r30
    55e8:	ff 93       	push	r31
    55ea:	a0 91 31 18 	lds	r26, 0x1831	; 0x801831 <_ser_handle+0x6>
    55ee:	b0 91 32 18 	lds	r27, 0x1832	; 0x801832 <_ser_handle+0x7>
    55f2:	10 97       	sbiw	r26, 0x00	; 0
    55f4:	11 f1       	breq	.+68     	; 0x563a <__vector_54+0x7a>
    55f6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    55fa:	14 96       	adiw	r26, 0x04	; 4
    55fc:	ed 91       	ld	r30, X+
    55fe:	fc 91       	ld	r31, X
    5600:	15 97       	sbiw	r26, 0x05	; 5
    5602:	93 81       	ldd	r25, Z+3	; 0x03
    5604:	82 81       	ldd	r24, Z+2	; 0x02
    5606:	25 81       	ldd	r18, Z+5	; 0x05
    5608:	98 1b       	sub	r25, r24
    560a:	92 23       	and	r25, r18
    560c:	84 81       	ldd	r24, Z+4	; 0x04
    560e:	98 17       	cp	r25, r24
    5610:	61 f0       	breq	.+24     	; 0x562a <__vector_54+0x6a>
    5612:	83 81       	ldd	r24, Z+3	; 0x03
    5614:	26 95       	lsr	r18
    5616:	28 23       	and	r18, r24
    5618:	c0 81       	ld	r28, Z
    561a:	d1 81       	ldd	r29, Z+1	; 0x01
    561c:	c2 0f       	add	r28, r18
    561e:	d1 1d       	adc	r29, r1
    5620:	68 83       	st	Y, r22
    5622:	8f 5f       	subi	r24, 0xFF	; 255
    5624:	95 81       	ldd	r25, Z+5	; 0x05
    5626:	89 23       	and	r24, r25
    5628:	83 83       	std	Z+3, r24	; 0x03
    562a:	16 96       	adiw	r26, 0x06	; 6
    562c:	ed 91       	ld	r30, X+
    562e:	fc 91       	ld	r31, X
    5630:	17 97       	sbiw	r26, 0x07	; 7
    5632:	30 97       	sbiw	r30, 0x00	; 0
    5634:	11 f0       	breq	.+4      	; 0x563a <__vector_54+0x7a>
    5636:	cd 01       	movw	r24, r26
    5638:	19 95       	eicall
    563a:	ff 91       	pop	r31
    563c:	ef 91       	pop	r30
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	bf 91       	pop	r27
    5644:	af 91       	pop	r26
    5646:	9f 91       	pop	r25
    5648:	8f 91       	pop	r24
    564a:	7f 91       	pop	r23
    564c:	6f 91       	pop	r22
    564e:	5f 91       	pop	r21
    5650:	4f 91       	pop	r20
    5652:	3f 91       	pop	r19
    5654:	2f 91       	pop	r18
    5656:	0f 90       	pop	r0
    5658:	0b be       	out	0x3b, r0	; 59
    565a:	0f 90       	pop	r0
    565c:	0f be       	out	0x3f, r0	; 63
    565e:	0f 90       	pop	r0
    5660:	1f 90       	pop	r1
    5662:	18 95       	reti

00005664 <__vector_55>:
    5664:	1f 92       	push	r1
    5666:	0f 92       	push	r0
    5668:	0f b6       	in	r0, 0x3f	; 63
    566a:	0f 92       	push	r0
    566c:	11 24       	eor	r1, r1
    566e:	0b b6       	in	r0, 0x3b	; 59
    5670:	0f 92       	push	r0
    5672:	2f 93       	push	r18
    5674:	8f 93       	push	r24
    5676:	9f 93       	push	r25
    5678:	af 93       	push	r26
    567a:	bf 93       	push	r27
    567c:	ef 93       	push	r30
    567e:	ff 93       	push	r31
    5680:	e0 91 31 18 	lds	r30, 0x1831	; 0x801831 <_ser_handle+0x6>
    5684:	f0 91 32 18 	lds	r31, 0x1832	; 0x801832 <_ser_handle+0x7>
    5688:	30 97       	sbiw	r30, 0x00	; 0
    568a:	b9 f0       	breq	.+46     	; 0x56ba <__vector_55+0x56>
    568c:	02 80       	ldd	r0, Z+2	; 0x02
    568e:	f3 81       	ldd	r31, Z+3	; 0x03
    5690:	e0 2d       	mov	r30, r0
    5692:	93 81       	ldd	r25, Z+3	; 0x03
    5694:	82 81       	ldd	r24, Z+2	; 0x02
    5696:	98 17       	cp	r25, r24
    5698:	b1 f0       	breq	.+44     	; 0x56c6 <__vector_55+0x62>
    569a:	92 81       	ldd	r25, Z+2	; 0x02
    569c:	85 81       	ldd	r24, Z+5	; 0x05
    569e:	28 2f       	mov	r18, r24
    56a0:	26 95       	lsr	r18
    56a2:	29 23       	and	r18, r25
    56a4:	a0 81       	ld	r26, Z
    56a6:	b1 81       	ldd	r27, Z+1	; 0x01
    56a8:	a2 0f       	add	r26, r18
    56aa:	b1 1d       	adc	r27, r1
    56ac:	2c 91       	ld	r18, X
    56ae:	9f 5f       	subi	r25, 0xFF	; 255
    56b0:	89 23       	and	r24, r25
    56b2:	82 83       	std	Z+2, r24	; 0x02
    56b4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    56b8:	0b c0       	rjmp	.+22     	; 0x56d0 <__vector_55+0x6c>
    56ba:	e1 e3       	ldi	r30, 0x31	; 49
    56bc:	f1 e0       	ldi	r31, 0x01	; 1
    56be:	80 81       	ld	r24, Z
    56c0:	8f 7d       	andi	r24, 0xDF	; 223
    56c2:	80 83       	st	Z, r24
    56c4:	05 c0       	rjmp	.+10     	; 0x56d0 <__vector_55+0x6c>
    56c6:	e1 e3       	ldi	r30, 0x31	; 49
    56c8:	f1 e0       	ldi	r31, 0x01	; 1
    56ca:	80 81       	ld	r24, Z
    56cc:	8f 7d       	andi	r24, 0xDF	; 223
    56ce:	80 83       	st	Z, r24
    56d0:	ff 91       	pop	r31
    56d2:	ef 91       	pop	r30
    56d4:	bf 91       	pop	r27
    56d6:	af 91       	pop	r26
    56d8:	9f 91       	pop	r25
    56da:	8f 91       	pop	r24
    56dc:	2f 91       	pop	r18
    56de:	0f 90       	pop	r0
    56e0:	0b be       	out	0x3b, r0	; 59
    56e2:	0f 90       	pop	r0
    56e4:	0f be       	out	0x3f, r0	; 63
    56e6:	0f 90       	pop	r0
    56e8:	1f 90       	pop	r1
    56ea:	18 95       	reti

000056ec <usart_getchar>:
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
    56f0:	1f 92       	push	r1
    56f2:	cd b7       	in	r28, 0x3d	; 61
    56f4:	de b7       	in	r29, 0x3e	; 62
    56f6:	be 01       	movw	r22, r28
    56f8:	6f 5f       	subi	r22, 0xFF	; 255
    56fa:	7f 4f       	sbci	r23, 0xFF	; 255
    56fc:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_com_serial_instance>
    5700:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_com_serial_instance+0x1>
    5704:	7b dd       	rcall	.-1290   	; 0x51fc <serial_getByte>
    5706:	81 11       	cpse	r24, r1
    5708:	f6 cf       	rjmp	.-20     	; 0x56f6 <usart_getchar+0xa>
    570a:	89 81       	ldd	r24, Y+1	; 0x01
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	0f 90       	pop	r0
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	08 95       	ret

00005716 <usart_putchar>:
    5716:	68 2f       	mov	r22, r24
    5718:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_com_serial_instance>
    571c:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_com_serial_instance+0x1>
    5720:	ed dc       	rcall	.-1574   	; 0x50fc <serial_sendByte>
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	90 e0       	ldi	r25, 0x00	; 0
    5726:	08 95       	ret

00005728 <stdio_initialise>:
    5728:	8f 92       	push	r8
    572a:	9f 92       	push	r9
    572c:	af 92       	push	r10
    572e:	cf 92       	push	r12
    5730:	ef 92       	push	r14
    5732:	0f 93       	push	r16
    5734:	81 2c       	mov	r8, r1
    5736:	91 2c       	mov	r9, r1
    5738:	68 94       	set
    573a:	aa 24       	eor	r10, r10
    573c:	a7 f8       	bld	r10, 7
    573e:	68 94       	set
    5740:	cc 24       	eor	r12, r12
    5742:	c7 f8       	bld	r12, 7
    5744:	e1 2c       	mov	r14, r1
    5746:	00 e0       	ldi	r16, 0x00	; 0
    5748:	23 e0       	ldi	r18, 0x03	; 3
    574a:	40 e0       	ldi	r20, 0x00	; 0
    574c:	51 ee       	ldi	r21, 0xE1	; 225
    574e:	60 e0       	ldi	r22, 0x00	; 0
    5750:	70 e0       	ldi	r23, 0x00	; 0
    5752:	33 dc       	rcall	.-1946   	; 0x4fba <serial_create>
    5754:	90 93 34 18 	sts	0x1834, r25	; 0x801834 <_com_serial_instance+0x1>
    5758:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <_com_serial_instance>
    575c:	e9 ea       	ldi	r30, 0xA9	; 169
    575e:	f8 e1       	ldi	r31, 0x18	; 24
    5760:	83 e1       	ldi	r24, 0x13	; 19
    5762:	92 e0       	ldi	r25, 0x02	; 2
    5764:	91 83       	std	Z+1, r25	; 0x01
    5766:	80 83       	st	Z, r24
    5768:	93 83       	std	Z+3, r25	; 0x03
    576a:	82 83       	std	Z+2, r24	; 0x02
    576c:	0f 91       	pop	r16
    576e:	ef 90       	pop	r14
    5770:	cf 90       	pop	r12
    5772:	af 90       	pop	r10
    5774:	9f 90       	pop	r9
    5776:	8f 90       	pop	r8
    5778:	08 95       	ret

0000577a <_turn_off>:
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	fc 01       	movw	r30, r24
    577e:	ee 0f       	add	r30, r30
    5780:	ff 1f       	adc	r31, r31
    5782:	e8 0f       	add	r30, r24
    5784:	f9 1f       	adc	r31, r25
    5786:	ee 0f       	add	r30, r30
    5788:	ff 1f       	adc	r31, r31
    578a:	eb 5c       	subi	r30, 0xCB	; 203
    578c:	f7 4e       	sbci	r31, 0xE7	; 231
    578e:	23 81       	ldd	r18, Z+3	; 0x03
    5790:	21 11       	cpse	r18, r1
    5792:	1f c0       	rjmp	.+62     	; 0x57d2 <_turn_off+0x58>
    5794:	9c 01       	movw	r18, r24
    5796:	22 0f       	add	r18, r18
    5798:	33 1f       	adc	r19, r19
    579a:	f9 01       	movw	r30, r18
    579c:	e8 0f       	add	r30, r24
    579e:	f9 1f       	adc	r31, r25
    57a0:	ee 0f       	add	r30, r30
    57a2:	ff 1f       	adc	r31, r31
    57a4:	eb 5c       	subi	r30, 0xCB	; 203
    57a6:	f7 4e       	sbci	r31, 0xE7	; 231
    57a8:	a0 81       	ld	r26, Z
    57aa:	b1 81       	ldd	r27, Z+1	; 0x01
    57ac:	4c 91       	ld	r20, X
    57ae:	f9 01       	movw	r30, r18
    57b0:	e8 0f       	add	r30, r24
    57b2:	f9 1f       	adc	r31, r25
    57b4:	ee 0f       	add	r30, r30
    57b6:	ff 1f       	adc	r31, r31
    57b8:	eb 5c       	subi	r30, 0xCB	; 203
    57ba:	f7 4e       	sbci	r31, 0xE7	; 231
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	02 80       	ldd	r0, Z+2	; 0x02
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <_turn_off+0x4e>
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	0a 94       	dec	r0
    57ca:	e2 f7       	brpl	.-8      	; 0x57c4 <_turn_off+0x4a>
    57cc:	84 2b       	or	r24, r20
    57ce:	8c 93       	st	X, r24
    57d0:	08 95       	ret
    57d2:	fc 01       	movw	r30, r24
    57d4:	ee 0f       	add	r30, r30
    57d6:	ff 1f       	adc	r31, r31
    57d8:	df 01       	movw	r26, r30
    57da:	a8 0f       	add	r26, r24
    57dc:	b9 1f       	adc	r27, r25
    57de:	aa 0f       	add	r26, r26
    57e0:	bb 1f       	adc	r27, r27
    57e2:	ab 5c       	subi	r26, 0xCB	; 203
    57e4:	b7 4e       	sbci	r27, 0xE7	; 231
    57e6:	0d 90       	ld	r0, X+
    57e8:	bc 91       	ld	r27, X
    57ea:	a0 2d       	mov	r26, r0
    57ec:	2c 91       	ld	r18, X
    57ee:	e8 0f       	add	r30, r24
    57f0:	f9 1f       	adc	r31, r25
    57f2:	ee 0f       	add	r30, r30
    57f4:	ff 1f       	adc	r31, r31
    57f6:	eb 5c       	subi	r30, 0xCB	; 203
    57f8:	f7 4e       	sbci	r31, 0xE7	; 231
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	02 80       	ldd	r0, Z+2	; 0x02
    5800:	02 c0       	rjmp	.+4      	; 0x5806 <_turn_off+0x8c>
    5802:	88 0f       	add	r24, r24
    5804:	99 1f       	adc	r25, r25
    5806:	0a 94       	dec	r0
    5808:	e2 f7       	brpl	.-8      	; 0x5802 <_turn_off+0x88>
    580a:	80 95       	com	r24
    580c:	82 23       	and	r24, r18
    580e:	8c 93       	st	X, r24
    5810:	08 95       	ret

00005812 <_turn_on>:
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	fc 01       	movw	r30, r24
    5816:	ee 0f       	add	r30, r30
    5818:	ff 1f       	adc	r31, r31
    581a:	e8 0f       	add	r30, r24
    581c:	f9 1f       	adc	r31, r25
    581e:	ee 0f       	add	r30, r30
    5820:	ff 1f       	adc	r31, r31
    5822:	eb 5c       	subi	r30, 0xCB	; 203
    5824:	f7 4e       	sbci	r31, 0xE7	; 231
    5826:	23 81       	ldd	r18, Z+3	; 0x03
    5828:	21 11       	cpse	r18, r1
    582a:	20 c0       	rjmp	.+64     	; 0x586c <_turn_on+0x5a>
    582c:	9c 01       	movw	r18, r24
    582e:	22 0f       	add	r18, r18
    5830:	33 1f       	adc	r19, r19
    5832:	f9 01       	movw	r30, r18
    5834:	e8 0f       	add	r30, r24
    5836:	f9 1f       	adc	r31, r25
    5838:	ee 0f       	add	r30, r30
    583a:	ff 1f       	adc	r31, r31
    583c:	eb 5c       	subi	r30, 0xCB	; 203
    583e:	f7 4e       	sbci	r31, 0xE7	; 231
    5840:	a0 81       	ld	r26, Z
    5842:	b1 81       	ldd	r27, Z+1	; 0x01
    5844:	4c 91       	ld	r20, X
    5846:	f9 01       	movw	r30, r18
    5848:	e8 0f       	add	r30, r24
    584a:	f9 1f       	adc	r31, r25
    584c:	ee 0f       	add	r30, r30
    584e:	ff 1f       	adc	r31, r31
    5850:	eb 5c       	subi	r30, 0xCB	; 203
    5852:	f7 4e       	sbci	r31, 0xE7	; 231
    5854:	81 e0       	ldi	r24, 0x01	; 1
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	02 80       	ldd	r0, Z+2	; 0x02
    585a:	02 c0       	rjmp	.+4      	; 0x5860 <_turn_on+0x4e>
    585c:	88 0f       	add	r24, r24
    585e:	99 1f       	adc	r25, r25
    5860:	0a 94       	dec	r0
    5862:	e2 f7       	brpl	.-8      	; 0x585c <_turn_on+0x4a>
    5864:	80 95       	com	r24
    5866:	84 23       	and	r24, r20
    5868:	8c 93       	st	X, r24
    586a:	08 95       	ret
    586c:	fc 01       	movw	r30, r24
    586e:	ee 0f       	add	r30, r30
    5870:	ff 1f       	adc	r31, r31
    5872:	df 01       	movw	r26, r30
    5874:	a8 0f       	add	r26, r24
    5876:	b9 1f       	adc	r27, r25
    5878:	aa 0f       	add	r26, r26
    587a:	bb 1f       	adc	r27, r27
    587c:	ab 5c       	subi	r26, 0xCB	; 203
    587e:	b7 4e       	sbci	r27, 0xE7	; 231
    5880:	0d 90       	ld	r0, X+
    5882:	bc 91       	ld	r27, X
    5884:	a0 2d       	mov	r26, r0
    5886:	2c 91       	ld	r18, X
    5888:	e8 0f       	add	r30, r24
    588a:	f9 1f       	adc	r31, r25
    588c:	ee 0f       	add	r30, r30
    588e:	ff 1f       	adc	r31, r31
    5890:	eb 5c       	subi	r30, 0xCB	; 203
    5892:	f7 4e       	sbci	r31, 0xE7	; 231
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	02 80       	ldd	r0, Z+2	; 0x02
    589a:	02 c0       	rjmp	.+4      	; 0x58a0 <_turn_on+0x8e>
    589c:	88 0f       	add	r24, r24
    589e:	99 1f       	adc	r25, r25
    58a0:	0a 94       	dec	r0
    58a2:	e2 f7       	brpl	.-8      	; 0x589c <_turn_on+0x8a>
    58a4:	82 2b       	or	r24, r18
    58a6:	8c 93       	st	X, r24
    58a8:	08 95       	ret

000058aa <_hal_led_task>:
    58aa:	cc 24       	eor	r12, r12
    58ac:	c3 94       	inc	r12
    58ae:	d1 2c       	mov	r13, r1
    58b0:	68 94       	set
    58b2:	bb 24       	eor	r11, r11
    58b4:	b2 f8       	bld	r11, 2
    58b6:	c5 e3       	ldi	r28, 0x35	; 53
    58b8:	d8 e1       	ldi	r29, 0x18	; 24
    58ba:	10 e0       	ldi	r17, 0x00	; 0
    58bc:	8c 81       	ldd	r24, Y+4	; 0x04
    58be:	81 30       	cpi	r24, 0x01	; 1
    58c0:	81 f0       	breq	.+32     	; 0x58e2 <_hal_led_task+0x38>
    58c2:	18 f1       	brcs	.+70     	; 0x590a <_hal_led_task+0x60>
    58c4:	82 30       	cpi	r24, 0x02	; 2
    58c6:	61 f5       	brne	.+88     	; 0x5920 <_hal_led_task+0x76>
    58c8:	e8 81       	ld	r30, Y
    58ca:	f9 81       	ldd	r31, Y+1	; 0x01
    58cc:	20 81       	ld	r18, Z
    58ce:	c6 01       	movw	r24, r12
    58d0:	0a 80       	ldd	r0, Y+2	; 0x02
    58d2:	02 c0       	rjmp	.+4      	; 0x58d8 <_hal_led_task+0x2e>
    58d4:	88 0f       	add	r24, r24
    58d6:	99 1f       	adc	r25, r25
    58d8:	0a 94       	dec	r0
    58da:	e2 f7       	brpl	.-8      	; 0x58d4 <_hal_led_task+0x2a>
    58dc:	82 27       	eor	r24, r18
    58de:	80 83       	st	Z, r24
    58e0:	1f c0       	rjmp	.+62     	; 0x5920 <_hal_led_task+0x76>
    58e2:	8d 81       	ldd	r24, Y+5	; 0x05
    58e4:	8f 5f       	subi	r24, 0xFF	; 255
    58e6:	86 30       	cpi	r24, 0x06	; 6
    58e8:	10 f4       	brcc	.+4      	; 0x58ee <_hal_led_task+0x44>
    58ea:	8d 83       	std	Y+5, r24	; 0x05
    58ec:	19 c0       	rjmp	.+50     	; 0x5920 <_hal_led_task+0x76>
    58ee:	1d 82       	std	Y+5, r1	; 0x05
    58f0:	e8 81       	ld	r30, Y
    58f2:	f9 81       	ldd	r31, Y+1	; 0x01
    58f4:	20 81       	ld	r18, Z
    58f6:	c6 01       	movw	r24, r12
    58f8:	0a 80       	ldd	r0, Y+2	; 0x02
    58fa:	02 c0       	rjmp	.+4      	; 0x5900 <_hal_led_task+0x56>
    58fc:	88 0f       	add	r24, r24
    58fe:	99 1f       	adc	r25, r25
    5900:	0a 94       	dec	r0
    5902:	e2 f7       	brpl	.-8      	; 0x58fc <_hal_led_task+0x52>
    5904:	82 27       	eor	r24, r18
    5906:	80 83       	st	Z, r24
    5908:	0b c0       	rjmp	.+22     	; 0x5920 <_hal_led_task+0x76>
    590a:	0d 81       	ldd	r16, Y+5	; 0x05
    590c:	00 23       	and	r16, r16
    590e:	29 f0       	breq	.+10     	; 0x591a <_hal_led_task+0x70>
    5910:	81 2f       	mov	r24, r17
    5912:	7f df       	rcall	.-258    	; 0x5812 <_turn_on>
    5914:	01 50       	subi	r16, 0x01	; 1
    5916:	0d 83       	std	Y+5, r16	; 0x05
    5918:	03 c0       	rjmp	.+6      	; 0x5920 <_hal_led_task+0x76>
    591a:	bc 82       	std	Y+4, r11	; 0x04
    591c:	81 2f       	mov	r24, r17
    591e:	2d df       	rcall	.-422    	; 0x577a <_turn_off>
    5920:	1f 5f       	subi	r17, 0xFF	; 255
    5922:	26 96       	adiw	r28, 0x06	; 6
    5924:	14 30       	cpi	r17, 0x04	; 4
    5926:	51 f6       	brne	.-108    	; 0x58bc <_hal_led_task+0x12>
    5928:	6c e0       	ldi	r22, 0x0C	; 12
    592a:	70 e0       	ldi	r23, 0x00	; 0
    592c:	80 e0       	ldi	r24, 0x00	; 0
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	0e 94 b8 13 	call	0x2770	; 0x2770 <vTaskDelay>
    5934:	c0 cf       	rjmp	.-128    	; 0x58b6 <_hal_led_task+0xc>

00005936 <status_leds_initialise>:
    5936:	ef 92       	push	r14
    5938:	ff 92       	push	r15
    593a:	0f 93       	push	r16
    593c:	1f 93       	push	r17
    593e:	cf 93       	push	r28
    5940:	df 93       	push	r29
    5942:	08 2f       	mov	r16, r24
    5944:	80 e4       	ldi	r24, 0x40	; 64
    5946:	87 b9       	out	0x07, r24	; 7
    5948:	c5 e3       	ldi	r28, 0x35	; 53
    594a:	d8 e1       	ldi	r29, 0x18	; 24
    594c:	0f 2e       	mov	r0, r31
    594e:	f8 e2       	ldi	r31, 0x28	; 40
    5950:	ef 2e       	mov	r14, r31
    5952:	f1 2c       	mov	r15, r1
    5954:	f0 2d       	mov	r31, r0
    5956:	f9 82       	std	Y+1, r15	; 0x01
    5958:	e8 82       	st	Y, r14
    595a:	86 e0       	ldi	r24, 0x06	; 6
    595c:	8a 83       	std	Y+2, r24	; 0x02
    595e:	1b 82       	std	Y+3, r1	; 0x03
    5960:	14 e0       	ldi	r17, 0x04	; 4
    5962:	1c 83       	std	Y+4, r17	; 0x04
    5964:	80 e0       	ldi	r24, 0x00	; 0
    5966:	09 df       	rcall	.-494    	; 0x577a <_turn_off>
    5968:	80 e8       	ldi	r24, 0x80	; 128
    596a:	87 b9       	out	0x07, r24	; 7
    596c:	ff 82       	std	Y+7, r15	; 0x07
    596e:	ee 82       	std	Y+6, r14	; 0x06
    5970:	87 e0       	ldi	r24, 0x07	; 7
    5972:	88 87       	std	Y+8, r24	; 0x08
    5974:	19 86       	std	Y+9, r1	; 0x09
    5976:	1a 87       	std	Y+10, r17	; 0x0a
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	ff de       	rcall	.-514    	; 0x577a <_turn_off>
    597c:	80 e2       	ldi	r24, 0x20	; 32
    597e:	83 bb       	out	0x13, r24	; 19
    5980:	84 e3       	ldi	r24, 0x34	; 52
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	9d 87       	std	Y+13, r25	; 0x0d
    5986:	8c 87       	std	Y+12, r24	; 0x0c
    5988:	85 e0       	ldi	r24, 0x05	; 5
    598a:	8e 87       	std	Y+14, r24	; 0x0e
    598c:	1f 86       	std	Y+15, r1	; 0x0f
    598e:	18 8b       	std	Y+16, r17	; 0x10
    5990:	82 e0       	ldi	r24, 0x02	; 2
    5992:	f3 de       	rcall	.-538    	; 0x577a <_turn_off>
    5994:	80 e1       	ldi	r24, 0x10	; 16
    5996:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    599a:	82 e0       	ldi	r24, 0x02	; 2
    599c:	91 e0       	ldi	r25, 0x01	; 1
    599e:	9b 8b       	std	Y+19, r25	; 0x13
    59a0:	8a 8b       	std	Y+18, r24	; 0x12
    59a2:	1c 8b       	std	Y+20, r17	; 0x14
    59a4:	1d 8a       	std	Y+21, r1	; 0x15
    59a6:	1e 8b       	std	Y+22, r17	; 0x16
    59a8:	83 e0       	ldi	r24, 0x03	; 3
    59aa:	e7 de       	rcall	.-562    	; 0x577a <_turn_off>
    59ac:	e1 2c       	mov	r14, r1
    59ae:	f1 2c       	mov	r15, r1
    59b0:	20 e0       	ldi	r18, 0x00	; 0
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	40 ec       	ldi	r20, 0xC0	; 192
    59b6:	50 e0       	ldi	r21, 0x00	; 0
    59b8:	6e e3       	ldi	r22, 0x3E	; 62
    59ba:	78 e0       	ldi	r23, 0x08	; 8
    59bc:	85 e5       	ldi	r24, 0x55	; 85
    59be:	9c e2       	ldi	r25, 0x2C	; 44
    59c0:	0e 94 b3 10 	call	0x2166	; 0x2166 <xTaskCreate>
    59c4:	df 91       	pop	r29
    59c6:	cf 91       	pop	r28
    59c8:	1f 91       	pop	r17
    59ca:	0f 91       	pop	r16
    59cc:	ff 90       	pop	r15
    59ce:	ef 90       	pop	r14
    59d0:	08 95       	ret

000059d2 <status_leds_slowBlink>:
    59d2:	cf 93       	push	r28
    59d4:	df 93       	push	r29
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	fc 01       	movw	r30, r24
    59da:	ee 0f       	add	r30, r30
    59dc:	ff 1f       	adc	r31, r31
    59de:	df 01       	movw	r26, r30
    59e0:	a8 0f       	add	r26, r24
    59e2:	b9 1f       	adc	r27, r25
    59e4:	aa 0f       	add	r26, r26
    59e6:	bb 1f       	adc	r27, r27
    59e8:	ab 5c       	subi	r26, 0xCB	; 203
    59ea:	b7 4e       	sbci	r27, 0xE7	; 231
    59ec:	cd 91       	ld	r28, X+
    59ee:	dc 91       	ld	r29, X
    59f0:	11 97       	sbiw	r26, 0x01	; 1
    59f2:	48 81       	ld	r20, Y
    59f4:	21 e0       	ldi	r18, 0x01	; 1
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	12 96       	adiw	r26, 0x02	; 2
    59fa:	0c 90       	ld	r0, X
    59fc:	12 97       	sbiw	r26, 0x02	; 2
    59fe:	02 c0       	rjmp	.+4      	; 0x5a04 <status_leds_slowBlink+0x32>
    5a00:	22 0f       	add	r18, r18
    5a02:	33 1f       	adc	r19, r19
    5a04:	0a 94       	dec	r0
    5a06:	e2 f7       	brpl	.-8      	; 0x5a00 <status_leds_slowBlink+0x2e>
    5a08:	24 27       	eor	r18, r20
    5a0a:	28 83       	st	Y, r18
    5a0c:	fd 01       	movw	r30, r26
    5a0e:	81 e0       	ldi	r24, 0x01	; 1
    5a10:	84 83       	std	Z+4, r24	; 0x04
    5a12:	df 91       	pop	r29
    5a14:	cf 91       	pop	r28
    5a16:	08 95       	ret

00005a18 <status_leds_fastBlink>:
    5a18:	cf 93       	push	r28
    5a1a:	df 93       	push	r29
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	fc 01       	movw	r30, r24
    5a20:	ee 0f       	add	r30, r30
    5a22:	ff 1f       	adc	r31, r31
    5a24:	df 01       	movw	r26, r30
    5a26:	a8 0f       	add	r26, r24
    5a28:	b9 1f       	adc	r27, r25
    5a2a:	aa 0f       	add	r26, r26
    5a2c:	bb 1f       	adc	r27, r27
    5a2e:	ab 5c       	subi	r26, 0xCB	; 203
    5a30:	b7 4e       	sbci	r27, 0xE7	; 231
    5a32:	cd 91       	ld	r28, X+
    5a34:	dc 91       	ld	r29, X
    5a36:	11 97       	sbiw	r26, 0x01	; 1
    5a38:	48 81       	ld	r20, Y
    5a3a:	21 e0       	ldi	r18, 0x01	; 1
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	12 96       	adiw	r26, 0x02	; 2
    5a40:	0c 90       	ld	r0, X
    5a42:	12 97       	sbiw	r26, 0x02	; 2
    5a44:	02 c0       	rjmp	.+4      	; 0x5a4a <status_leds_fastBlink+0x32>
    5a46:	22 0f       	add	r18, r18
    5a48:	33 1f       	adc	r19, r19
    5a4a:	0a 94       	dec	r0
    5a4c:	e2 f7       	brpl	.-8      	; 0x5a46 <status_leds_fastBlink+0x2e>
    5a4e:	24 27       	eor	r18, r20
    5a50:	28 83       	st	Y, r18
    5a52:	fd 01       	movw	r30, r26
    5a54:	82 e0       	ldi	r24, 0x02	; 2
    5a56:	84 83       	std	Z+4, r24	; 0x04
    5a58:	df 91       	pop	r29
    5a5a:	cf 91       	pop	r28
    5a5c:	08 95       	ret

00005a5e <status_leds_ledOn>:
    5a5e:	28 2f       	mov	r18, r24
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	f9 01       	movw	r30, r18
    5a64:	ee 0f       	add	r30, r30
    5a66:	ff 1f       	adc	r31, r31
    5a68:	e2 0f       	add	r30, r18
    5a6a:	f3 1f       	adc	r31, r19
    5a6c:	ee 0f       	add	r30, r30
    5a6e:	ff 1f       	adc	r31, r31
    5a70:	eb 5c       	subi	r30, 0xCB	; 203
    5a72:	f7 4e       	sbci	r31, 0xE7	; 231
    5a74:	93 e0       	ldi	r25, 0x03	; 3
    5a76:	94 83       	std	Z+4, r25	; 0x04
    5a78:	cc ce       	rjmp	.-616    	; 0x5812 <_turn_on>
    5a7a:	08 95       	ret

00005a7c <status_leds_ledOff>:
    5a7c:	28 2f       	mov	r18, r24
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	f9 01       	movw	r30, r18
    5a82:	ee 0f       	add	r30, r30
    5a84:	ff 1f       	adc	r31, r31
    5a86:	e2 0f       	add	r30, r18
    5a88:	f3 1f       	adc	r31, r19
    5a8a:	ee 0f       	add	r30, r30
    5a8c:	ff 1f       	adc	r31, r31
    5a8e:	eb 5c       	subi	r30, 0xCB	; 203
    5a90:	f7 4e       	sbci	r31, 0xE7	; 231
    5a92:	94 e0       	ldi	r25, 0x04	; 4
    5a94:	94 83       	std	Z+4, r25	; 0x04
    5a96:	71 ce       	rjmp	.-798    	; 0x577a <_turn_off>
    5a98:	08 95       	ret

00005a9a <status_leds_longPuls>:
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	ee 0f       	add	r30, r30
    5aa0:	ff 1f       	adc	r31, r31
    5aa2:	df 01       	movw	r26, r30
    5aa4:	a8 0f       	add	r26, r24
    5aa6:	b9 1f       	adc	r27, r25
    5aa8:	aa 0f       	add	r26, r26
    5aaa:	bb 1f       	adc	r27, r27
    5aac:	ab 5c       	subi	r26, 0xCB	; 203
    5aae:	b7 4e       	sbci	r27, 0xE7	; 231
    5ab0:	26 e0       	ldi	r18, 0x06	; 6
    5ab2:	15 96       	adiw	r26, 0x05	; 5
    5ab4:	2c 93       	st	X, r18
    5ab6:	15 97       	sbiw	r26, 0x05	; 5
    5ab8:	fd 01       	movw	r30, r26
    5aba:	14 82       	std	Z+4, r1	; 0x04
    5abc:	08 95       	ret

00005abe <status_leds_shortPuls>:
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	fc 01       	movw	r30, r24
    5ac2:	ee 0f       	add	r30, r30
    5ac4:	ff 1f       	adc	r31, r31
    5ac6:	df 01       	movw	r26, r30
    5ac8:	a8 0f       	add	r26, r24
    5aca:	b9 1f       	adc	r27, r25
    5acc:	aa 0f       	add	r26, r26
    5ace:	bb 1f       	adc	r27, r27
    5ad0:	ab 5c       	subi	r26, 0xCB	; 203
    5ad2:	b7 4e       	sbci	r27, 0xE7	; 231
    5ad4:	15 96       	adiw	r26, 0x05	; 5
    5ad6:	1c 92       	st	X, r1
    5ad8:	15 97       	sbiw	r26, 0x05	; 5
    5ada:	fd 01       	movw	r30, r26
    5adc:	14 82       	std	Z+4, r1	; 0x04
    5ade:	08 95       	ret

00005ae0 <_initTwiInterface>:
    5ae0:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_twiIsInitiated>
    5ae4:	81 11       	cpse	r24, r1
    5ae6:	0c c0       	rjmp	.+24     	; 0x5b00 <_initTwiInterface+0x20>
    5ae8:	8c e0       	ldi	r24, 0x0C	; 12
    5aea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5aee:	8f ef       	ldi	r24, 0xFF	; 255
    5af0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5af4:	84 e0       	ldi	r24, 0x04	; 4
    5af6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5afa:	81 e0       	ldi	r24, 0x01	; 1
    5afc:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_twiIsInitiated>
    5b00:	08 95       	ret

00005b02 <twiCreate>:
    5b02:	af 92       	push	r10
    5b04:	bf 92       	push	r11
    5b06:	cf 92       	push	r12
    5b08:	df 92       	push	r13
    5b0a:	ef 92       	push	r14
    5b0c:	ff 92       	push	r15
    5b0e:	0f 93       	push	r16
    5b10:	1f 93       	push	r17
    5b12:	cf 93       	push	r28
    5b14:	df 93       	push	r29
    5b16:	a8 2e       	mov	r10, r24
    5b18:	b6 2e       	mov	r11, r22
    5b1a:	69 01       	movw	r12, r18
    5b1c:	7a 01       	movw	r14, r20
    5b1e:	84 e0       	ldi	r24, 0x04	; 4
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	29 d3       	rcall	.+1618   	; 0x6176 <malloc>
    5b24:	ec 01       	movw	r28, r24
    5b26:	89 2b       	or	r24, r25
    5b28:	61 f1       	breq	.+88     	; 0x5b82 <twiCreate+0x80>
    5b2a:	a8 82       	st	Y, r10
    5b2c:	81 e0       	ldi	r24, 0x01	; 1
    5b2e:	b8 12       	cpse	r11, r24
    5b30:	12 c0       	rjmp	.+36     	; 0x5b56 <twiCreate+0x54>
    5b32:	c7 01       	movw	r24, r14
    5b34:	b6 01       	movw	r22, r12
    5b36:	20 ea       	ldi	r18, 0xA0	; 160
    5b38:	36 e8       	ldi	r19, 0x86	; 134
    5b3a:	41 e0       	ldi	r20, 0x01	; 1
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	f1 d2       	rcall	.+1506   	; 0x6122 <__udivmodsi4>
    5b40:	da 01       	movw	r26, r20
    5b42:	c9 01       	movw	r24, r18
    5b44:	40 97       	sbiw	r24, 0x10	; 16
    5b46:	a1 09       	sbc	r26, r1
    5b48:	b1 09       	sbc	r27, r1
    5b4a:	b6 95       	lsr	r27
    5b4c:	a7 95       	ror	r26
    5b4e:	97 95       	ror	r25
    5b50:	87 95       	ror	r24
    5b52:	89 83       	std	Y+1, r24	; 0x01
    5b54:	11 c0       	rjmp	.+34     	; 0x5b78 <twiCreate+0x76>
    5b56:	c7 01       	movw	r24, r14
    5b58:	b6 01       	movw	r22, r12
    5b5a:	20 e8       	ldi	r18, 0x80	; 128
    5b5c:	3a e1       	ldi	r19, 0x1A	; 26
    5b5e:	46 e0       	ldi	r20, 0x06	; 6
    5b60:	50 e0       	ldi	r21, 0x00	; 0
    5b62:	df d2       	rcall	.+1470   	; 0x6122 <__udivmodsi4>
    5b64:	da 01       	movw	r26, r20
    5b66:	c9 01       	movw	r24, r18
    5b68:	40 97       	sbiw	r24, 0x10	; 16
    5b6a:	a1 09       	sbc	r26, r1
    5b6c:	b1 09       	sbc	r27, r1
    5b6e:	b6 95       	lsr	r27
    5b70:	a7 95       	ror	r26
    5b72:	97 95       	ror	r25
    5b74:	87 95       	ror	r24
    5b76:	89 83       	std	Y+1, r24	; 0x01
    5b78:	1b 83       	std	Y+3, r17	; 0x03
    5b7a:	0a 83       	std	Y+2, r16	; 0x02
    5b7c:	8c 2f       	mov	r24, r28
    5b7e:	9d 2f       	mov	r25, r29
    5b80:	02 c0       	rjmp	.+4      	; 0x5b86 <twiCreate+0x84>
    5b82:	80 e0       	ldi	r24, 0x00	; 0
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	df 91       	pop	r29
    5b88:	cf 91       	pop	r28
    5b8a:	1f 91       	pop	r17
    5b8c:	0f 91       	pop	r16
    5b8e:	ff 90       	pop	r15
    5b90:	ef 90       	pop	r14
    5b92:	df 90       	pop	r13
    5b94:	cf 90       	pop	r12
    5b96:	bf 90       	pop	r11
    5b98:	af 90       	pop	r10
    5b9a:	08 95       	ret

00005b9c <twiIsBusy>:
    5b9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ba0:	81 70       	andi	r24, 0x01	; 1
    5ba2:	08 95       	ret

00005ba4 <twiTransmit>:
    5ba4:	ff 92       	push	r15
    5ba6:	0f 93       	push	r16
    5ba8:	1f 93       	push	r17
    5baa:	cf 93       	push	r28
    5bac:	df 93       	push	r29
    5bae:	00 97       	sbiw	r24, 0x00	; 0
    5bb0:	d1 f1       	breq	.+116    	; 0x5c26 <twiTransmit+0x82>
    5bb2:	4a 30       	cpi	r20, 0x0A	; 10
    5bb4:	d0 f5       	brcc	.+116    	; 0x5c2a <twiTransmit+0x86>
    5bb6:	f4 2e       	mov	r15, r20
    5bb8:	8b 01       	movw	r16, r22
    5bba:	ec 01       	movw	r28, r24
    5bbc:	ef df       	rcall	.-34     	; 0x5b9c <twiIsBusy>
    5bbe:	81 11       	cpse	r24, r1
    5bc0:	36 c0       	rjmp	.+108    	; 0x5c2e <twiTransmit+0x8a>
    5bc2:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5bc6:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5bca:	c8 17       	cp	r28, r24
    5bcc:	d9 07       	cpc	r29, r25
    5bce:	41 f0       	breq	.+16     	; 0x5be0 <twiTransmit+0x3c>
    5bd0:	87 df       	rcall	.-242    	; 0x5ae0 <_initTwiInterface>
    5bd2:	89 81       	ldd	r24, Y+1	; 0x01
    5bd4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5bd8:	d0 93 4f 18 	sts	0x184F, r29	; 0x80184f <_twiCurrentHandler+0x1>
    5bdc:	c0 93 4e 18 	sts	0x184E, r28	; 0x80184e <_twiCurrentHandler>
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	8f 0d       	add	r24, r15
    5be4:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <_twiMessageLen>
    5be8:	88 81       	ld	r24, Y
    5bea:	88 0f       	add	r24, r24
    5bec:	80 93 51 18 	sts	0x1851, r24	; 0x801851 <_twiMessageBuffer>
    5bf0:	ff 20       	and	r15, r15
    5bf2:	89 f0       	breq	.+34     	; 0x5c16 <twiTransmit+0x72>
    5bf4:	f8 01       	movw	r30, r16
    5bf6:	a2 e5       	ldi	r26, 0x52	; 82
    5bf8:	b8 e1       	ldi	r27, 0x18	; 24
    5bfa:	4f ef       	ldi	r20, 0xFF	; 255
    5bfc:	4f 0d       	add	r20, r15
    5bfe:	64 2f       	mov	r22, r20
    5c00:	70 e0       	ldi	r23, 0x00	; 0
    5c02:	cb 01       	movw	r24, r22
    5c04:	01 96       	adiw	r24, 0x01	; 1
    5c06:	b8 01       	movw	r22, r16
    5c08:	68 0f       	add	r22, r24
    5c0a:	79 1f       	adc	r23, r25
    5c0c:	81 91       	ld	r24, Z+
    5c0e:	8d 93       	st	X+, r24
    5c10:	e6 17       	cp	r30, r22
    5c12:	f7 07       	cpc	r31, r23
    5c14:	d9 f7       	brne	.-10     	; 0x5c0c <twiTransmit+0x68>
    5c16:	88 ef       	ldi	r24, 0xF8	; 248
    5c18:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c1c:	85 ea       	ldi	r24, 0xA5	; 165
    5c1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c22:	84 e0       	ldi	r24, 0x04	; 4
    5c24:	05 c0       	rjmp	.+10     	; 0x5c30 <twiTransmit+0x8c>
    5c26:	86 e0       	ldi	r24, 0x06	; 6
    5c28:	03 c0       	rjmp	.+6      	; 0x5c30 <twiTransmit+0x8c>
    5c2a:	87 e0       	ldi	r24, 0x07	; 7
    5c2c:	01 c0       	rjmp	.+2      	; 0x5c30 <twiTransmit+0x8c>
    5c2e:	82 e0       	ldi	r24, 0x02	; 2
    5c30:	df 91       	pop	r29
    5c32:	cf 91       	pop	r28
    5c34:	1f 91       	pop	r17
    5c36:	0f 91       	pop	r16
    5c38:	ff 90       	pop	r15
    5c3a:	08 95       	ret

00005c3c <twiReceive>:
    5c3c:	1f 93       	push	r17
    5c3e:	cf 93       	push	r28
    5c40:	df 93       	push	r29
    5c42:	00 97       	sbiw	r24, 0x00	; 0
    5c44:	29 f1       	breq	.+74     	; 0x5c90 <twiReceive+0x54>
    5c46:	6b 30       	cpi	r22, 0x0B	; 11
    5c48:	28 f5       	brcc	.+74     	; 0x5c94 <twiReceive+0x58>
    5c4a:	16 2f       	mov	r17, r22
    5c4c:	ec 01       	movw	r28, r24
    5c4e:	a6 df       	rcall	.-180    	; 0x5b9c <twiIsBusy>
    5c50:	81 11       	cpse	r24, r1
    5c52:	22 c0       	rjmp	.+68     	; 0x5c98 <twiReceive+0x5c>
    5c54:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5c58:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5c5c:	c8 17       	cp	r28, r24
    5c5e:	d9 07       	cpc	r29, r25
    5c60:	41 f0       	breq	.+16     	; 0x5c72 <twiReceive+0x36>
    5c62:	3e df       	rcall	.-388    	; 0x5ae0 <_initTwiInterface>
    5c64:	89 81       	ldd	r24, Y+1	; 0x01
    5c66:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5c6a:	d0 93 4f 18 	sts	0x184F, r29	; 0x80184f <_twiCurrentHandler+0x1>
    5c6e:	c0 93 4e 18 	sts	0x184E, r28	; 0x80184e <_twiCurrentHandler>
    5c72:	10 93 50 18 	sts	0x1850, r17	; 0x801850 <_twiMessageLen>
    5c76:	88 81       	ld	r24, Y
    5c78:	88 0f       	add	r24, r24
    5c7a:	81 60       	ori	r24, 0x01	; 1
    5c7c:	80 93 51 18 	sts	0x1851, r24	; 0x801851 <_twiMessageBuffer>
    5c80:	88 ef       	ldi	r24, 0xF8	; 248
    5c82:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c86:	85 ea       	ldi	r24, 0xA5	; 165
    5c88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c8c:	85 e0       	ldi	r24, 0x05	; 5
    5c8e:	05 c0       	rjmp	.+10     	; 0x5c9a <twiReceive+0x5e>
    5c90:	86 e0       	ldi	r24, 0x06	; 6
    5c92:	03 c0       	rjmp	.+6      	; 0x5c9a <twiReceive+0x5e>
    5c94:	87 e0       	ldi	r24, 0x07	; 7
    5c96:	01 c0       	rjmp	.+2      	; 0x5c9a <twiReceive+0x5e>
    5c98:	82 e0       	ldi	r24, 0x02	; 2
    5c9a:	df 91       	pop	r29
    5c9c:	cf 91       	pop	r28
    5c9e:	1f 91       	pop	r17
    5ca0:	08 95       	ret

00005ca2 <__vector_39>:
    5ca2:	1f 92       	push	r1
    5ca4:	0f 92       	push	r0
    5ca6:	0f b6       	in	r0, 0x3f	; 63
    5ca8:	0f 92       	push	r0
    5caa:	11 24       	eor	r1, r1
    5cac:	0b b6       	in	r0, 0x3b	; 59
    5cae:	0f 92       	push	r0
    5cb0:	2f 93       	push	r18
    5cb2:	3f 93       	push	r19
    5cb4:	4f 93       	push	r20
    5cb6:	5f 93       	push	r21
    5cb8:	6f 93       	push	r22
    5cba:	7f 93       	push	r23
    5cbc:	8f 93       	push	r24
    5cbe:	9f 93       	push	r25
    5cc0:	af 93       	push	r26
    5cc2:	bf 93       	push	r27
    5cc4:	ef 93       	push	r30
    5cc6:	ff 93       	push	r31
    5cc8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5ccc:	8e 2f       	mov	r24, r30
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	38 97       	sbiw	r30, 0x08	; 8
    5cd4:	e1 35       	cpi	r30, 0x51	; 81
    5cd6:	f1 05       	cpc	r31, r1
    5cd8:	08 f0       	brcs	.+2      	; 0x5cdc <__vector_39+0x3a>
    5cda:	75 c0       	rjmp	.+234    	; 0x5dc6 <__vector_39+0x124>
    5cdc:	88 27       	eor	r24, r24
    5cde:	e4 58       	subi	r30, 0x84	; 132
    5ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce4:	40 c2       	rjmp	.+1152   	; 0x6166 <__tablejump2__>
    5ce6:	10 92 4d 18 	sts	0x184D, r1	; 0x80184d <_index.1885>
    5cea:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <_index.1885>
    5cee:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_twiMessageLen>
    5cf2:	e8 17       	cp	r30, r24
    5cf4:	70 f4       	brcc	.+28     	; 0x5d12 <__vector_39+0x70>
    5cf6:	81 e0       	ldi	r24, 0x01	; 1
    5cf8:	8e 0f       	add	r24, r30
    5cfa:	80 93 4d 18 	sts	0x184D, r24	; 0x80184d <_index.1885>
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	ef 5a       	subi	r30, 0xAF	; 175
    5d02:	f7 4e       	sbci	r31, 0xE7	; 231
    5d04:	80 81       	ld	r24, Z
    5d06:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d0a:	85 e8       	ldi	r24, 0x85	; 133
    5d0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d10:	72 c0       	rjmp	.+228    	; 0x5df6 <__vector_39+0x154>
    5d12:	84 e9       	ldi	r24, 0x94	; 148
    5d14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d18:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5d1c:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5d20:	dc 01       	movw	r26, r24
    5d22:	12 96       	adiw	r26, 0x02	; 2
    5d24:	ed 91       	ld	r30, X+
    5d26:	fc 91       	ld	r31, X
    5d28:	13 97       	sbiw	r26, 0x03	; 3
    5d2a:	30 97       	sbiw	r30, 0x00	; 0
    5d2c:	09 f4       	brne	.+2      	; 0x5d30 <__vector_39+0x8e>
    5d2e:	63 c0       	rjmp	.+198    	; 0x5df6 <__vector_39+0x154>
    5d30:	20 e0       	ldi	r18, 0x00	; 0
    5d32:	40 e0       	ldi	r20, 0x00	; 0
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	64 e0       	ldi	r22, 0x04	; 4
    5d38:	19 95       	eicall
    5d3a:	5d c0       	rjmp	.+186    	; 0x5df6 <__vector_39+0x154>
    5d3c:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <_index.1885>
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	8e 0f       	add	r24, r30
    5d44:	80 93 4d 18 	sts	0x184D, r24	; 0x80184d <_index.1885>
    5d48:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d4c:	f0 e0       	ldi	r31, 0x00	; 0
    5d4e:	ef 5a       	subi	r30, 0xAF	; 175
    5d50:	f7 4e       	sbci	r31, 0xE7	; 231
    5d52:	80 83       	st	Z, r24
    5d54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d58:	80 34       	cpi	r24, 0x40	; 64
    5d5a:	11 f4       	brne	.+4      	; 0x5d60 <__vector_39+0xbe>
    5d5c:	10 92 4d 18 	sts	0x184D, r1	; 0x80184d <_index.1885>
    5d60:	20 91 4d 18 	lds	r18, 0x184D	; 0x80184d <_index.1885>
    5d64:	30 e0       	ldi	r19, 0x00	; 0
    5d66:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_twiMessageLen>
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	01 97       	sbiw	r24, 0x01	; 1
    5d6e:	28 17       	cp	r18, r24
    5d70:	39 07       	cpc	r19, r25
    5d72:	24 f4       	brge	.+8      	; 0x5d7c <__vector_39+0xda>
    5d74:	85 ec       	ldi	r24, 0xC5	; 197
    5d76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d7a:	3d c0       	rjmp	.+122    	; 0x5df6 <__vector_39+0x154>
    5d7c:	85 e8       	ldi	r24, 0x85	; 133
    5d7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d82:	39 c0       	rjmp	.+114    	; 0x5df6 <__vector_39+0x154>
    5d84:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d88:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <_index.1885>
    5d8c:	f0 e0       	ldi	r31, 0x00	; 0
    5d8e:	ef 5a       	subi	r30, 0xAF	; 175
    5d90:	f7 4e       	sbci	r31, 0xE7	; 231
    5d92:	80 83       	st	Z, r24
    5d94:	84 e9       	ldi	r24, 0x94	; 148
    5d96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d9a:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5d9e:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5da2:	dc 01       	movw	r26, r24
    5da4:	12 96       	adiw	r26, 0x02	; 2
    5da6:	ed 91       	ld	r30, X+
    5da8:	fc 91       	ld	r31, X
    5daa:	13 97       	sbiw	r26, 0x03	; 3
    5dac:	30 97       	sbiw	r30, 0x00	; 0
    5dae:	19 f1       	breq	.+70     	; 0x5df6 <__vector_39+0x154>
    5db0:	20 91 50 18 	lds	r18, 0x1850	; 0x801850 <_twiMessageLen>
    5db4:	41 e5       	ldi	r20, 0x51	; 81
    5db6:	58 e1       	ldi	r21, 0x18	; 24
    5db8:	65 e0       	ldi	r22, 0x05	; 5
    5dba:	19 95       	eicall
    5dbc:	1c c0       	rjmp	.+56     	; 0x5df6 <__vector_39+0x154>
    5dbe:	85 ea       	ldi	r24, 0xA5	; 165
    5dc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dc4:	18 c0       	rjmp	.+48     	; 0x5df6 <__vector_39+0x154>
    5dc6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5dca:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5dce:	84 e0       	ldi	r24, 0x04	; 4
    5dd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dd4:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5dd8:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5ddc:	dc 01       	movw	r26, r24
    5dde:	12 96       	adiw	r26, 0x02	; 2
    5de0:	ed 91       	ld	r30, X+
    5de2:	fc 91       	ld	r31, X
    5de4:	13 97       	sbiw	r26, 0x03	; 3
    5de6:	30 97       	sbiw	r30, 0x00	; 0
    5de8:	31 f0       	breq	.+12     	; 0x5df6 <__vector_39+0x154>
    5dea:	20 e0       	ldi	r18, 0x00	; 0
    5dec:	40 e0       	ldi	r20, 0x00	; 0
    5dee:	50 e0       	ldi	r21, 0x00	; 0
    5df0:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5df4:	19 95       	eicall
    5df6:	ff 91       	pop	r31
    5df8:	ef 91       	pop	r30
    5dfa:	bf 91       	pop	r27
    5dfc:	af 91       	pop	r26
    5dfe:	9f 91       	pop	r25
    5e00:	8f 91       	pop	r24
    5e02:	7f 91       	pop	r23
    5e04:	6f 91       	pop	r22
    5e06:	5f 91       	pop	r21
    5e08:	4f 91       	pop	r20
    5e0a:	3f 91       	pop	r19
    5e0c:	2f 91       	pop	r18
    5e0e:	0f 90       	pop	r0
    5e10:	0b be       	out	0x3b, r0	; 59
    5e12:	0f 90       	pop	r0
    5e14:	0f be       	out	0x3f, r0	; 63
    5e16:	0f 90       	pop	r0
    5e18:	1f 90       	pop	r1
    5e1a:	18 95       	reti

00005e1c <fifo_init>:
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	41 11       	cpse	r20, r1
    5e20:	01 c0       	rjmp	.+2      	; 0x5e24 <fifo_init+0x8>
    5e22:	ca d2       	rcall	.+1428   	; 0x63b8 <abort>
    5e24:	84 2f       	mov	r24, r20
    5e26:	90 e0       	ldi	r25, 0x00	; 0
    5e28:	9c 01       	movw	r18, r24
    5e2a:	21 50       	subi	r18, 0x01	; 1
    5e2c:	31 09       	sbc	r19, r1
    5e2e:	82 23       	and	r24, r18
    5e30:	93 23       	and	r25, r19
    5e32:	89 2b       	or	r24, r25
    5e34:	09 f0       	breq	.+2      	; 0x5e38 <fifo_init+0x1c>
    5e36:	c0 d2       	rcall	.+1408   	; 0x63b8 <abort>
    5e38:	41 38       	cpi	r20, 0x81	; 129
    5e3a:	08 f0       	brcs	.+2      	; 0x5e3e <fifo_init+0x22>
    5e3c:	bd d2       	rcall	.+1402   	; 0x63b8 <abort>
    5e3e:	12 82       	std	Z+2, r1	; 0x02
    5e40:	13 82       	std	Z+3, r1	; 0x03
    5e42:	44 83       	std	Z+4, r20	; 0x04
    5e44:	44 0f       	add	r20, r20
    5e46:	41 50       	subi	r20, 0x01	; 1
    5e48:	45 83       	std	Z+5, r20	; 0x05
    5e4a:	71 83       	std	Z+1, r23	; 0x01
    5e4c:	60 83       	st	Z, r22
    5e4e:	80 e0       	ldi	r24, 0x00	; 0
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	08 95       	ret

00005e54 <__subsf3>:
    5e54:	50 58       	subi	r21, 0x80	; 128

00005e56 <__addsf3>:
    5e56:	bb 27       	eor	r27, r27
    5e58:	aa 27       	eor	r26, r26
    5e5a:	0e d0       	rcall	.+28     	; 0x5e78 <__addsf3x>
    5e5c:	eb c0       	rjmp	.+470    	; 0x6034 <__fp_round>
    5e5e:	dc d0       	rcall	.+440    	; 0x6018 <__fp_pscA>
    5e60:	30 f0       	brcs	.+12     	; 0x5e6e <__addsf3+0x18>
    5e62:	e1 d0       	rcall	.+450    	; 0x6026 <__fp_pscB>
    5e64:	20 f0       	brcs	.+8      	; 0x5e6e <__addsf3+0x18>
    5e66:	31 f4       	brne	.+12     	; 0x5e74 <__addsf3+0x1e>
    5e68:	9f 3f       	cpi	r25, 0xFF	; 255
    5e6a:	11 f4       	brne	.+4      	; 0x5e70 <__addsf3+0x1a>
    5e6c:	1e f4       	brtc	.+6      	; 0x5e74 <__addsf3+0x1e>
    5e6e:	d1 c0       	rjmp	.+418    	; 0x6012 <__fp_nan>
    5e70:	0e f4       	brtc	.+2      	; 0x5e74 <__addsf3+0x1e>
    5e72:	e0 95       	com	r30
    5e74:	e7 fb       	bst	r30, 7
    5e76:	c7 c0       	rjmp	.+398    	; 0x6006 <__fp_inf>

00005e78 <__addsf3x>:
    5e78:	e9 2f       	mov	r30, r25
    5e7a:	0e 94 b3 21 	call	0x4366	; 0x4366 <__fp_split3>
    5e7e:	78 f3       	brcs	.-34     	; 0x5e5e <__addsf3+0x8>
    5e80:	ba 17       	cp	r27, r26
    5e82:	62 07       	cpc	r22, r18
    5e84:	73 07       	cpc	r23, r19
    5e86:	84 07       	cpc	r24, r20
    5e88:	95 07       	cpc	r25, r21
    5e8a:	20 f0       	brcs	.+8      	; 0x5e94 <__addsf3x+0x1c>
    5e8c:	79 f4       	brne	.+30     	; 0x5eac <__addsf3x+0x34>
    5e8e:	a6 f5       	brtc	.+104    	; 0x5ef8 <__addsf3x+0x80>
    5e90:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__fp_zero>
    5e94:	0e f4       	brtc	.+2      	; 0x5e98 <__addsf3x+0x20>
    5e96:	e0 95       	com	r30
    5e98:	0b 2e       	mov	r0, r27
    5e9a:	ba 2f       	mov	r27, r26
    5e9c:	a0 2d       	mov	r26, r0
    5e9e:	0b 01       	movw	r0, r22
    5ea0:	b9 01       	movw	r22, r18
    5ea2:	90 01       	movw	r18, r0
    5ea4:	0c 01       	movw	r0, r24
    5ea6:	ca 01       	movw	r24, r20
    5ea8:	a0 01       	movw	r20, r0
    5eaa:	11 24       	eor	r1, r1
    5eac:	ff 27       	eor	r31, r31
    5eae:	59 1b       	sub	r21, r25
    5eb0:	99 f0       	breq	.+38     	; 0x5ed8 <__addsf3x+0x60>
    5eb2:	59 3f       	cpi	r21, 0xF9	; 249
    5eb4:	50 f4       	brcc	.+20     	; 0x5eca <__addsf3x+0x52>
    5eb6:	50 3e       	cpi	r21, 0xE0	; 224
    5eb8:	68 f1       	brcs	.+90     	; 0x5f14 <__addsf3x+0x9c>
    5eba:	1a 16       	cp	r1, r26
    5ebc:	f0 40       	sbci	r31, 0x00	; 0
    5ebe:	a2 2f       	mov	r26, r18
    5ec0:	23 2f       	mov	r18, r19
    5ec2:	34 2f       	mov	r19, r20
    5ec4:	44 27       	eor	r20, r20
    5ec6:	58 5f       	subi	r21, 0xF8	; 248
    5ec8:	f3 cf       	rjmp	.-26     	; 0x5eb0 <__addsf3x+0x38>
    5eca:	46 95       	lsr	r20
    5ecc:	37 95       	ror	r19
    5ece:	27 95       	ror	r18
    5ed0:	a7 95       	ror	r26
    5ed2:	f0 40       	sbci	r31, 0x00	; 0
    5ed4:	53 95       	inc	r21
    5ed6:	c9 f7       	brne	.-14     	; 0x5eca <__addsf3x+0x52>
    5ed8:	7e f4       	brtc	.+30     	; 0x5ef8 <__addsf3x+0x80>
    5eda:	1f 16       	cp	r1, r31
    5edc:	ba 0b       	sbc	r27, r26
    5ede:	62 0b       	sbc	r22, r18
    5ee0:	73 0b       	sbc	r23, r19
    5ee2:	84 0b       	sbc	r24, r20
    5ee4:	ba f0       	brmi	.+46     	; 0x5f14 <__addsf3x+0x9c>
    5ee6:	91 50       	subi	r25, 0x01	; 1
    5ee8:	a1 f0       	breq	.+40     	; 0x5f12 <__addsf3x+0x9a>
    5eea:	ff 0f       	add	r31, r31
    5eec:	bb 1f       	adc	r27, r27
    5eee:	66 1f       	adc	r22, r22
    5ef0:	77 1f       	adc	r23, r23
    5ef2:	88 1f       	adc	r24, r24
    5ef4:	c2 f7       	brpl	.-16     	; 0x5ee6 <__addsf3x+0x6e>
    5ef6:	0e c0       	rjmp	.+28     	; 0x5f14 <__addsf3x+0x9c>
    5ef8:	ba 0f       	add	r27, r26
    5efa:	62 1f       	adc	r22, r18
    5efc:	73 1f       	adc	r23, r19
    5efe:	84 1f       	adc	r24, r20
    5f00:	48 f4       	brcc	.+18     	; 0x5f14 <__addsf3x+0x9c>
    5f02:	87 95       	ror	r24
    5f04:	77 95       	ror	r23
    5f06:	67 95       	ror	r22
    5f08:	b7 95       	ror	r27
    5f0a:	f7 95       	ror	r31
    5f0c:	9e 3f       	cpi	r25, 0xFE	; 254
    5f0e:	08 f0       	brcs	.+2      	; 0x5f12 <__addsf3x+0x9a>
    5f10:	b1 cf       	rjmp	.-158    	; 0x5e74 <__addsf3+0x1e>
    5f12:	93 95       	inc	r25
    5f14:	88 0f       	add	r24, r24
    5f16:	08 f0       	brcs	.+2      	; 0x5f1a <__addsf3x+0xa2>
    5f18:	99 27       	eor	r25, r25
    5f1a:	ee 0f       	add	r30, r30
    5f1c:	97 95       	ror	r25
    5f1e:	87 95       	ror	r24
    5f20:	08 95       	ret

00005f22 <__divsf3>:
    5f22:	0d d0       	rcall	.+26     	; 0x5f3e <__divsf3x>
    5f24:	87 c0       	rjmp	.+270    	; 0x6034 <__fp_round>
    5f26:	7f d0       	rcall	.+254    	; 0x6026 <__fp_pscB>
    5f28:	48 f0       	brcs	.+18     	; 0x5f3c <__divsf3+0x1a>
    5f2a:	76 d0       	rcall	.+236    	; 0x6018 <__fp_pscA>
    5f2c:	38 f0       	brcs	.+14     	; 0x5f3c <__divsf3+0x1a>
    5f2e:	21 f4       	brne	.+8      	; 0x5f38 <__divsf3+0x16>
    5f30:	5f 3f       	cpi	r21, 0xFF	; 255
    5f32:	21 f0       	breq	.+8      	; 0x5f3c <__divsf3+0x1a>
    5f34:	68 c0       	rjmp	.+208    	; 0x6006 <__fp_inf>
    5f36:	51 11       	cpse	r21, r1
    5f38:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__fp_szero>
    5f3c:	6a c0       	rjmp	.+212    	; 0x6012 <__fp_nan>

00005f3e <__divsf3x>:
    5f3e:	0e 94 b3 21 	call	0x4366	; 0x4366 <__fp_split3>
    5f42:	88 f3       	brcs	.-30     	; 0x5f26 <__divsf3+0x4>

00005f44 <__divsf3_pse>:
    5f44:	99 23       	and	r25, r25
    5f46:	b9 f3       	breq	.-18     	; 0x5f36 <__divsf3+0x14>
    5f48:	55 23       	and	r21, r21
    5f4a:	a1 f3       	breq	.-24     	; 0x5f34 <__divsf3+0x12>
    5f4c:	95 1b       	sub	r25, r21
    5f4e:	55 0b       	sbc	r21, r21
    5f50:	bb 27       	eor	r27, r27
    5f52:	aa 27       	eor	r26, r26
    5f54:	62 17       	cp	r22, r18
    5f56:	73 07       	cpc	r23, r19
    5f58:	84 07       	cpc	r24, r20
    5f5a:	38 f0       	brcs	.+14     	; 0x5f6a <__divsf3_pse+0x26>
    5f5c:	9f 5f       	subi	r25, 0xFF	; 255
    5f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f60:	22 0f       	add	r18, r18
    5f62:	33 1f       	adc	r19, r19
    5f64:	44 1f       	adc	r20, r20
    5f66:	aa 1f       	adc	r26, r26
    5f68:	a9 f3       	breq	.-22     	; 0x5f54 <__divsf3_pse+0x10>
    5f6a:	34 d0       	rcall	.+104    	; 0x5fd4 <__divsf3_pse+0x90>
    5f6c:	0e 2e       	mov	r0, r30
    5f6e:	3a f0       	brmi	.+14     	; 0x5f7e <__divsf3_pse+0x3a>
    5f70:	e0 e8       	ldi	r30, 0x80	; 128
    5f72:	31 d0       	rcall	.+98     	; 0x5fd6 <__divsf3_pse+0x92>
    5f74:	91 50       	subi	r25, 0x01	; 1
    5f76:	50 40       	sbci	r21, 0x00	; 0
    5f78:	e6 95       	lsr	r30
    5f7a:	00 1c       	adc	r0, r0
    5f7c:	ca f7       	brpl	.-14     	; 0x5f70 <__divsf3_pse+0x2c>
    5f7e:	2a d0       	rcall	.+84     	; 0x5fd4 <__divsf3_pse+0x90>
    5f80:	fe 2f       	mov	r31, r30
    5f82:	28 d0       	rcall	.+80     	; 0x5fd4 <__divsf3_pse+0x90>
    5f84:	66 0f       	add	r22, r22
    5f86:	77 1f       	adc	r23, r23
    5f88:	88 1f       	adc	r24, r24
    5f8a:	bb 1f       	adc	r27, r27
    5f8c:	26 17       	cp	r18, r22
    5f8e:	37 07       	cpc	r19, r23
    5f90:	48 07       	cpc	r20, r24
    5f92:	ab 07       	cpc	r26, r27
    5f94:	b0 e8       	ldi	r27, 0x80	; 128
    5f96:	09 f0       	breq	.+2      	; 0x5f9a <__divsf3_pse+0x56>
    5f98:	bb 0b       	sbc	r27, r27
    5f9a:	80 2d       	mov	r24, r0
    5f9c:	bf 01       	movw	r22, r30
    5f9e:	ff 27       	eor	r31, r31
    5fa0:	93 58       	subi	r25, 0x83	; 131
    5fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa4:	32 f0       	brmi	.+12     	; 0x5fb2 <__divsf3_pse+0x6e>
    5fa6:	9e 3f       	cpi	r25, 0xFE	; 254
    5fa8:	51 05       	cpc	r21, r1
    5faa:	70 f0       	brcs	.+28     	; 0x5fc8 <__divsf3_pse+0x84>
    5fac:	2c c0       	rjmp	.+88     	; 0x6006 <__fp_inf>
    5fae:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__fp_szero>
    5fb2:	5f 3f       	cpi	r21, 0xFF	; 255
    5fb4:	e4 f3       	brlt	.-8      	; 0x5fae <__divsf3_pse+0x6a>
    5fb6:	98 3e       	cpi	r25, 0xE8	; 232
    5fb8:	d4 f3       	brlt	.-12     	; 0x5fae <__divsf3_pse+0x6a>
    5fba:	86 95       	lsr	r24
    5fbc:	77 95       	ror	r23
    5fbe:	67 95       	ror	r22
    5fc0:	b7 95       	ror	r27
    5fc2:	f7 95       	ror	r31
    5fc4:	9f 5f       	subi	r25, 0xFF	; 255
    5fc6:	c9 f7       	brne	.-14     	; 0x5fba <__divsf3_pse+0x76>
    5fc8:	88 0f       	add	r24, r24
    5fca:	91 1d       	adc	r25, r1
    5fcc:	96 95       	lsr	r25
    5fce:	87 95       	ror	r24
    5fd0:	97 f9       	bld	r25, 7
    5fd2:	08 95       	ret
    5fd4:	e1 e0       	ldi	r30, 0x01	; 1
    5fd6:	66 0f       	add	r22, r22
    5fd8:	77 1f       	adc	r23, r23
    5fda:	88 1f       	adc	r24, r24
    5fdc:	bb 1f       	adc	r27, r27
    5fde:	62 17       	cp	r22, r18
    5fe0:	73 07       	cpc	r23, r19
    5fe2:	84 07       	cpc	r24, r20
    5fe4:	ba 07       	cpc	r27, r26
    5fe6:	20 f0       	brcs	.+8      	; 0x5ff0 <__divsf3_pse+0xac>
    5fe8:	62 1b       	sub	r22, r18
    5fea:	73 0b       	sbc	r23, r19
    5fec:	84 0b       	sbc	r24, r20
    5fee:	ba 0b       	sbc	r27, r26
    5ff0:	ee 1f       	adc	r30, r30
    5ff2:	88 f7       	brcc	.-30     	; 0x5fd6 <__divsf3_pse+0x92>
    5ff4:	e0 95       	com	r30
    5ff6:	08 95       	ret

00005ff8 <__fixsfsi>:
    5ff8:	0e 94 4a 21 	call	0x4294	; 0x4294 <__fixunssfsi>
    5ffc:	68 94       	set
    5ffe:	b1 11       	cpse	r27, r1
    6000:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__fp_szero>
    6004:	08 95       	ret

00006006 <__fp_inf>:
    6006:	97 f9       	bld	r25, 7
    6008:	9f 67       	ori	r25, 0x7F	; 127
    600a:	80 e8       	ldi	r24, 0x80	; 128
    600c:	70 e0       	ldi	r23, 0x00	; 0
    600e:	60 e0       	ldi	r22, 0x00	; 0
    6010:	08 95       	ret

00006012 <__fp_nan>:
    6012:	9f ef       	ldi	r25, 0xFF	; 255
    6014:	80 ec       	ldi	r24, 0xC0	; 192
    6016:	08 95       	ret

00006018 <__fp_pscA>:
    6018:	00 24       	eor	r0, r0
    601a:	0a 94       	dec	r0
    601c:	16 16       	cp	r1, r22
    601e:	17 06       	cpc	r1, r23
    6020:	18 06       	cpc	r1, r24
    6022:	09 06       	cpc	r0, r25
    6024:	08 95       	ret

00006026 <__fp_pscB>:
    6026:	00 24       	eor	r0, r0
    6028:	0a 94       	dec	r0
    602a:	12 16       	cp	r1, r18
    602c:	13 06       	cpc	r1, r19
    602e:	14 06       	cpc	r1, r20
    6030:	05 06       	cpc	r0, r21
    6032:	08 95       	ret

00006034 <__fp_round>:
    6034:	09 2e       	mov	r0, r25
    6036:	03 94       	inc	r0
    6038:	00 0c       	add	r0, r0
    603a:	11 f4       	brne	.+4      	; 0x6040 <__fp_round+0xc>
    603c:	88 23       	and	r24, r24
    603e:	52 f0       	brmi	.+20     	; 0x6054 <__fp_round+0x20>
    6040:	bb 0f       	add	r27, r27
    6042:	40 f4       	brcc	.+16     	; 0x6054 <__fp_round+0x20>
    6044:	bf 2b       	or	r27, r31
    6046:	11 f4       	brne	.+4      	; 0x604c <__fp_round+0x18>
    6048:	60 ff       	sbrs	r22, 0
    604a:	04 c0       	rjmp	.+8      	; 0x6054 <__fp_round+0x20>
    604c:	6f 5f       	subi	r22, 0xFF	; 255
    604e:	7f 4f       	sbci	r23, 0xFF	; 255
    6050:	8f 4f       	sbci	r24, 0xFF	; 255
    6052:	9f 4f       	sbci	r25, 0xFF	; 255
    6054:	08 95       	ret

00006056 <__mulsf3>:
    6056:	0c d0       	rcall	.+24     	; 0x6070 <__mulsf3x>
    6058:	ed cf       	rjmp	.-38     	; 0x6034 <__fp_round>
    605a:	de df       	rcall	.-68     	; 0x6018 <__fp_pscA>
    605c:	28 f0       	brcs	.+10     	; 0x6068 <__mulsf3+0x12>
    605e:	e3 df       	rcall	.-58     	; 0x6026 <__fp_pscB>
    6060:	18 f0       	brcs	.+6      	; 0x6068 <__mulsf3+0x12>
    6062:	95 23       	and	r25, r21
    6064:	09 f0       	breq	.+2      	; 0x6068 <__mulsf3+0x12>
    6066:	cf cf       	rjmp	.-98     	; 0x6006 <__fp_inf>
    6068:	d4 cf       	rjmp	.-88     	; 0x6012 <__fp_nan>
    606a:	11 24       	eor	r1, r1
    606c:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__fp_szero>

00006070 <__mulsf3x>:
    6070:	0e 94 b3 21 	call	0x4366	; 0x4366 <__fp_split3>
    6074:	90 f3       	brcs	.-28     	; 0x605a <__mulsf3+0x4>

00006076 <__mulsf3_pse>:
    6076:	95 9f       	mul	r25, r21
    6078:	c1 f3       	breq	.-16     	; 0x606a <__mulsf3+0x14>
    607a:	95 0f       	add	r25, r21
    607c:	50 e0       	ldi	r21, 0x00	; 0
    607e:	55 1f       	adc	r21, r21
    6080:	62 9f       	mul	r22, r18
    6082:	f0 01       	movw	r30, r0
    6084:	72 9f       	mul	r23, r18
    6086:	bb 27       	eor	r27, r27
    6088:	f0 0d       	add	r31, r0
    608a:	b1 1d       	adc	r27, r1
    608c:	63 9f       	mul	r22, r19
    608e:	aa 27       	eor	r26, r26
    6090:	f0 0d       	add	r31, r0
    6092:	b1 1d       	adc	r27, r1
    6094:	aa 1f       	adc	r26, r26
    6096:	64 9f       	mul	r22, r20
    6098:	66 27       	eor	r22, r22
    609a:	b0 0d       	add	r27, r0
    609c:	a1 1d       	adc	r26, r1
    609e:	66 1f       	adc	r22, r22
    60a0:	82 9f       	mul	r24, r18
    60a2:	22 27       	eor	r18, r18
    60a4:	b0 0d       	add	r27, r0
    60a6:	a1 1d       	adc	r26, r1
    60a8:	62 1f       	adc	r22, r18
    60aa:	73 9f       	mul	r23, r19
    60ac:	b0 0d       	add	r27, r0
    60ae:	a1 1d       	adc	r26, r1
    60b0:	62 1f       	adc	r22, r18
    60b2:	83 9f       	mul	r24, r19
    60b4:	a0 0d       	add	r26, r0
    60b6:	61 1d       	adc	r22, r1
    60b8:	22 1f       	adc	r18, r18
    60ba:	74 9f       	mul	r23, r20
    60bc:	33 27       	eor	r19, r19
    60be:	a0 0d       	add	r26, r0
    60c0:	61 1d       	adc	r22, r1
    60c2:	23 1f       	adc	r18, r19
    60c4:	84 9f       	mul	r24, r20
    60c6:	60 0d       	add	r22, r0
    60c8:	21 1d       	adc	r18, r1
    60ca:	82 2f       	mov	r24, r18
    60cc:	76 2f       	mov	r23, r22
    60ce:	6a 2f       	mov	r22, r26
    60d0:	11 24       	eor	r1, r1
    60d2:	9f 57       	subi	r25, 0x7F	; 127
    60d4:	50 40       	sbci	r21, 0x00	; 0
    60d6:	92 f0       	brmi	.+36     	; 0x60fc <__mulsf3_pse+0x86>
    60d8:	e9 f0       	breq	.+58     	; 0x6114 <__mulsf3_pse+0x9e>
    60da:	88 23       	and	r24, r24
    60dc:	4a f0       	brmi	.+18     	; 0x60f0 <__mulsf3_pse+0x7a>
    60de:	ee 0f       	add	r30, r30
    60e0:	ff 1f       	adc	r31, r31
    60e2:	bb 1f       	adc	r27, r27
    60e4:	66 1f       	adc	r22, r22
    60e6:	77 1f       	adc	r23, r23
    60e8:	88 1f       	adc	r24, r24
    60ea:	91 50       	subi	r25, 0x01	; 1
    60ec:	50 40       	sbci	r21, 0x00	; 0
    60ee:	a9 f7       	brne	.-22     	; 0x60da <__mulsf3_pse+0x64>
    60f0:	9e 3f       	cpi	r25, 0xFE	; 254
    60f2:	51 05       	cpc	r21, r1
    60f4:	78 f0       	brcs	.+30     	; 0x6114 <__mulsf3_pse+0x9e>
    60f6:	87 cf       	rjmp	.-242    	; 0x6006 <__fp_inf>
    60f8:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__fp_szero>
    60fc:	5f 3f       	cpi	r21, 0xFF	; 255
    60fe:	e4 f3       	brlt	.-8      	; 0x60f8 <__mulsf3_pse+0x82>
    6100:	98 3e       	cpi	r25, 0xE8	; 232
    6102:	d4 f3       	brlt	.-12     	; 0x60f8 <__mulsf3_pse+0x82>
    6104:	86 95       	lsr	r24
    6106:	77 95       	ror	r23
    6108:	67 95       	ror	r22
    610a:	b7 95       	ror	r27
    610c:	f7 95       	ror	r31
    610e:	e7 95       	ror	r30
    6110:	9f 5f       	subi	r25, 0xFF	; 255
    6112:	c1 f7       	brne	.-16     	; 0x6104 <__mulsf3_pse+0x8e>
    6114:	fe 2b       	or	r31, r30
    6116:	88 0f       	add	r24, r24
    6118:	91 1d       	adc	r25, r1
    611a:	96 95       	lsr	r25
    611c:	87 95       	ror	r24
    611e:	97 f9       	bld	r25, 7
    6120:	08 95       	ret

00006122 <__udivmodsi4>:
    6122:	a1 e2       	ldi	r26, 0x21	; 33
    6124:	1a 2e       	mov	r1, r26
    6126:	aa 1b       	sub	r26, r26
    6128:	bb 1b       	sub	r27, r27
    612a:	fd 01       	movw	r30, r26
    612c:	0d c0       	rjmp	.+26     	; 0x6148 <__udivmodsi4_ep>

0000612e <__udivmodsi4_loop>:
    612e:	aa 1f       	adc	r26, r26
    6130:	bb 1f       	adc	r27, r27
    6132:	ee 1f       	adc	r30, r30
    6134:	ff 1f       	adc	r31, r31
    6136:	a2 17       	cp	r26, r18
    6138:	b3 07       	cpc	r27, r19
    613a:	e4 07       	cpc	r30, r20
    613c:	f5 07       	cpc	r31, r21
    613e:	20 f0       	brcs	.+8      	; 0x6148 <__udivmodsi4_ep>
    6140:	a2 1b       	sub	r26, r18
    6142:	b3 0b       	sbc	r27, r19
    6144:	e4 0b       	sbc	r30, r20
    6146:	f5 0b       	sbc	r31, r21

00006148 <__udivmodsi4_ep>:
    6148:	66 1f       	adc	r22, r22
    614a:	77 1f       	adc	r23, r23
    614c:	88 1f       	adc	r24, r24
    614e:	99 1f       	adc	r25, r25
    6150:	1a 94       	dec	r1
    6152:	69 f7       	brne	.-38     	; 0x612e <__udivmodsi4_loop>
    6154:	60 95       	com	r22
    6156:	70 95       	com	r23
    6158:	80 95       	com	r24
    615a:	90 95       	com	r25
    615c:	9b 01       	movw	r18, r22
    615e:	ac 01       	movw	r20, r24
    6160:	bd 01       	movw	r22, r26
    6162:	cf 01       	movw	r24, r30
    6164:	08 95       	ret

00006166 <__tablejump2__>:
    6166:	ee 0f       	add	r30, r30
    6168:	ff 1f       	adc	r31, r31
    616a:	88 1f       	adc	r24, r24
    616c:	8b bf       	out	0x3b, r24	; 59
    616e:	07 90       	elpm	r0, Z+
    6170:	f6 91       	elpm	r31, Z
    6172:	e0 2d       	mov	r30, r0
    6174:	19 94       	eijmp

00006176 <malloc>:
    6176:	0f 93       	push	r16
    6178:	1f 93       	push	r17
    617a:	cf 93       	push	r28
    617c:	df 93       	push	r29
    617e:	82 30       	cpi	r24, 0x02	; 2
    6180:	91 05       	cpc	r25, r1
    6182:	10 f4       	brcc	.+4      	; 0x6188 <malloc+0x12>
    6184:	82 e0       	ldi	r24, 0x02	; 2
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	e0 91 a7 18 	lds	r30, 0x18A7	; 0x8018a7 <__flp>
    618c:	f0 91 a8 18 	lds	r31, 0x18A8	; 0x8018a8 <__flp+0x1>
    6190:	20 e0       	ldi	r18, 0x00	; 0
    6192:	30 e0       	ldi	r19, 0x00	; 0
    6194:	a0 e0       	ldi	r26, 0x00	; 0
    6196:	b0 e0       	ldi	r27, 0x00	; 0
    6198:	30 97       	sbiw	r30, 0x00	; 0
    619a:	19 f1       	breq	.+70     	; 0x61e2 <malloc+0x6c>
    619c:	40 81       	ld	r20, Z
    619e:	51 81       	ldd	r21, Z+1	; 0x01
    61a0:	02 81       	ldd	r16, Z+2	; 0x02
    61a2:	13 81       	ldd	r17, Z+3	; 0x03
    61a4:	48 17       	cp	r20, r24
    61a6:	59 07       	cpc	r21, r25
    61a8:	c8 f0       	brcs	.+50     	; 0x61dc <malloc+0x66>
    61aa:	84 17       	cp	r24, r20
    61ac:	95 07       	cpc	r25, r21
    61ae:	69 f4       	brne	.+26     	; 0x61ca <malloc+0x54>
    61b0:	10 97       	sbiw	r26, 0x00	; 0
    61b2:	31 f0       	breq	.+12     	; 0x61c0 <malloc+0x4a>
    61b4:	12 96       	adiw	r26, 0x02	; 2
    61b6:	0c 93       	st	X, r16
    61b8:	12 97       	sbiw	r26, 0x02	; 2
    61ba:	13 96       	adiw	r26, 0x03	; 3
    61bc:	1c 93       	st	X, r17
    61be:	27 c0       	rjmp	.+78     	; 0x620e <malloc+0x98>
    61c0:	00 93 a7 18 	sts	0x18A7, r16	; 0x8018a7 <__flp>
    61c4:	10 93 a8 18 	sts	0x18A8, r17	; 0x8018a8 <__flp+0x1>
    61c8:	22 c0       	rjmp	.+68     	; 0x620e <malloc+0x98>
    61ca:	21 15       	cp	r18, r1
    61cc:	31 05       	cpc	r19, r1
    61ce:	19 f0       	breq	.+6      	; 0x61d6 <malloc+0x60>
    61d0:	42 17       	cp	r20, r18
    61d2:	53 07       	cpc	r21, r19
    61d4:	18 f4       	brcc	.+6      	; 0x61dc <malloc+0x66>
    61d6:	9a 01       	movw	r18, r20
    61d8:	bd 01       	movw	r22, r26
    61da:	ef 01       	movw	r28, r30
    61dc:	df 01       	movw	r26, r30
    61de:	f8 01       	movw	r30, r16
    61e0:	db cf       	rjmp	.-74     	; 0x6198 <malloc+0x22>
    61e2:	21 15       	cp	r18, r1
    61e4:	31 05       	cpc	r19, r1
    61e6:	f9 f0       	breq	.+62     	; 0x6226 <malloc+0xb0>
    61e8:	28 1b       	sub	r18, r24
    61ea:	39 0b       	sbc	r19, r25
    61ec:	24 30       	cpi	r18, 0x04	; 4
    61ee:	31 05       	cpc	r19, r1
    61f0:	80 f4       	brcc	.+32     	; 0x6212 <malloc+0x9c>
    61f2:	8a 81       	ldd	r24, Y+2	; 0x02
    61f4:	9b 81       	ldd	r25, Y+3	; 0x03
    61f6:	61 15       	cp	r22, r1
    61f8:	71 05       	cpc	r23, r1
    61fa:	21 f0       	breq	.+8      	; 0x6204 <malloc+0x8e>
    61fc:	fb 01       	movw	r30, r22
    61fe:	93 83       	std	Z+3, r25	; 0x03
    6200:	82 83       	std	Z+2, r24	; 0x02
    6202:	04 c0       	rjmp	.+8      	; 0x620c <malloc+0x96>
    6204:	90 93 a8 18 	sts	0x18A8, r25	; 0x8018a8 <__flp+0x1>
    6208:	80 93 a7 18 	sts	0x18A7, r24	; 0x8018a7 <__flp>
    620c:	fe 01       	movw	r30, r28
    620e:	32 96       	adiw	r30, 0x02	; 2
    6210:	44 c0       	rjmp	.+136    	; 0x629a <malloc+0x124>
    6212:	fe 01       	movw	r30, r28
    6214:	e2 0f       	add	r30, r18
    6216:	f3 1f       	adc	r31, r19
    6218:	81 93       	st	Z+, r24
    621a:	91 93       	st	Z+, r25
    621c:	22 50       	subi	r18, 0x02	; 2
    621e:	31 09       	sbc	r19, r1
    6220:	39 83       	std	Y+1, r19	; 0x01
    6222:	28 83       	st	Y, r18
    6224:	3a c0       	rjmp	.+116    	; 0x629a <malloc+0x124>
    6226:	20 91 a5 18 	lds	r18, 0x18A5	; 0x8018a5 <__brkval>
    622a:	30 91 a6 18 	lds	r19, 0x18A6	; 0x8018a6 <__brkval+0x1>
    622e:	23 2b       	or	r18, r19
    6230:	41 f4       	brne	.+16     	; 0x6242 <malloc+0xcc>
    6232:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6236:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    623a:	30 93 a6 18 	sts	0x18A6, r19	; 0x8018a6 <__brkval+0x1>
    623e:	20 93 a5 18 	sts	0x18A5, r18	; 0x8018a5 <__brkval>
    6242:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6246:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    624a:	21 15       	cp	r18, r1
    624c:	31 05       	cpc	r19, r1
    624e:	41 f4       	brne	.+16     	; 0x6260 <malloc+0xea>
    6250:	2d b7       	in	r18, 0x3d	; 61
    6252:	3e b7       	in	r19, 0x3e	; 62
    6254:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6258:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    625c:	24 1b       	sub	r18, r20
    625e:	35 0b       	sbc	r19, r21
    6260:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <__brkval>
    6264:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <__brkval+0x1>
    6268:	e2 17       	cp	r30, r18
    626a:	f3 07       	cpc	r31, r19
    626c:	a0 f4       	brcc	.+40     	; 0x6296 <malloc+0x120>
    626e:	2e 1b       	sub	r18, r30
    6270:	3f 0b       	sbc	r19, r31
    6272:	28 17       	cp	r18, r24
    6274:	39 07       	cpc	r19, r25
    6276:	78 f0       	brcs	.+30     	; 0x6296 <malloc+0x120>
    6278:	ac 01       	movw	r20, r24
    627a:	4e 5f       	subi	r20, 0xFE	; 254
    627c:	5f 4f       	sbci	r21, 0xFF	; 255
    627e:	24 17       	cp	r18, r20
    6280:	35 07       	cpc	r19, r21
    6282:	48 f0       	brcs	.+18     	; 0x6296 <malloc+0x120>
    6284:	4e 0f       	add	r20, r30
    6286:	5f 1f       	adc	r21, r31
    6288:	50 93 a6 18 	sts	0x18A6, r21	; 0x8018a6 <__brkval+0x1>
    628c:	40 93 a5 18 	sts	0x18A5, r20	; 0x8018a5 <__brkval>
    6290:	81 93       	st	Z+, r24
    6292:	91 93       	st	Z+, r25
    6294:	02 c0       	rjmp	.+4      	; 0x629a <malloc+0x124>
    6296:	e0 e0       	ldi	r30, 0x00	; 0
    6298:	f0 e0       	ldi	r31, 0x00	; 0
    629a:	cf 01       	movw	r24, r30
    629c:	df 91       	pop	r29
    629e:	cf 91       	pop	r28
    62a0:	1f 91       	pop	r17
    62a2:	0f 91       	pop	r16
    62a4:	08 95       	ret

000062a6 <free>:
    62a6:	cf 93       	push	r28
    62a8:	df 93       	push	r29
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	09 f4       	brne	.+2      	; 0x62b0 <free+0xa>
    62ae:	81 c0       	rjmp	.+258    	; 0x63b2 <free+0x10c>
    62b0:	fc 01       	movw	r30, r24
    62b2:	32 97       	sbiw	r30, 0x02	; 2
    62b4:	13 82       	std	Z+3, r1	; 0x03
    62b6:	12 82       	std	Z+2, r1	; 0x02
    62b8:	a0 91 a7 18 	lds	r26, 0x18A7	; 0x8018a7 <__flp>
    62bc:	b0 91 a8 18 	lds	r27, 0x18A8	; 0x8018a8 <__flp+0x1>
    62c0:	10 97       	sbiw	r26, 0x00	; 0
    62c2:	81 f4       	brne	.+32     	; 0x62e4 <free+0x3e>
    62c4:	20 81       	ld	r18, Z
    62c6:	31 81       	ldd	r19, Z+1	; 0x01
    62c8:	82 0f       	add	r24, r18
    62ca:	93 1f       	adc	r25, r19
    62cc:	20 91 a5 18 	lds	r18, 0x18A5	; 0x8018a5 <__brkval>
    62d0:	30 91 a6 18 	lds	r19, 0x18A6	; 0x8018a6 <__brkval+0x1>
    62d4:	28 17       	cp	r18, r24
    62d6:	39 07       	cpc	r19, r25
    62d8:	51 f5       	brne	.+84     	; 0x632e <free+0x88>
    62da:	f0 93 a6 18 	sts	0x18A6, r31	; 0x8018a6 <__brkval+0x1>
    62de:	e0 93 a5 18 	sts	0x18A5, r30	; 0x8018a5 <__brkval>
    62e2:	67 c0       	rjmp	.+206    	; 0x63b2 <free+0x10c>
    62e4:	ed 01       	movw	r28, r26
    62e6:	20 e0       	ldi	r18, 0x00	; 0
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	ce 17       	cp	r28, r30
    62ec:	df 07       	cpc	r29, r31
    62ee:	40 f4       	brcc	.+16     	; 0x6300 <free+0x5a>
    62f0:	4a 81       	ldd	r20, Y+2	; 0x02
    62f2:	5b 81       	ldd	r21, Y+3	; 0x03
    62f4:	9e 01       	movw	r18, r28
    62f6:	41 15       	cp	r20, r1
    62f8:	51 05       	cpc	r21, r1
    62fa:	f1 f0       	breq	.+60     	; 0x6338 <free+0x92>
    62fc:	ea 01       	movw	r28, r20
    62fe:	f5 cf       	rjmp	.-22     	; 0x62ea <free+0x44>
    6300:	d3 83       	std	Z+3, r29	; 0x03
    6302:	c2 83       	std	Z+2, r28	; 0x02
    6304:	40 81       	ld	r20, Z
    6306:	51 81       	ldd	r21, Z+1	; 0x01
    6308:	84 0f       	add	r24, r20
    630a:	95 1f       	adc	r25, r21
    630c:	c8 17       	cp	r28, r24
    630e:	d9 07       	cpc	r29, r25
    6310:	59 f4       	brne	.+22     	; 0x6328 <free+0x82>
    6312:	88 81       	ld	r24, Y
    6314:	99 81       	ldd	r25, Y+1	; 0x01
    6316:	84 0f       	add	r24, r20
    6318:	95 1f       	adc	r25, r21
    631a:	02 96       	adiw	r24, 0x02	; 2
    631c:	91 83       	std	Z+1, r25	; 0x01
    631e:	80 83       	st	Z, r24
    6320:	8a 81       	ldd	r24, Y+2	; 0x02
    6322:	9b 81       	ldd	r25, Y+3	; 0x03
    6324:	93 83       	std	Z+3, r25	; 0x03
    6326:	82 83       	std	Z+2, r24	; 0x02
    6328:	21 15       	cp	r18, r1
    632a:	31 05       	cpc	r19, r1
    632c:	29 f4       	brne	.+10     	; 0x6338 <free+0x92>
    632e:	f0 93 a8 18 	sts	0x18A8, r31	; 0x8018a8 <__flp+0x1>
    6332:	e0 93 a7 18 	sts	0x18A7, r30	; 0x8018a7 <__flp>
    6336:	3d c0       	rjmp	.+122    	; 0x63b2 <free+0x10c>
    6338:	e9 01       	movw	r28, r18
    633a:	fb 83       	std	Y+3, r31	; 0x03
    633c:	ea 83       	std	Y+2, r30	; 0x02
    633e:	49 91       	ld	r20, Y+
    6340:	59 91       	ld	r21, Y+
    6342:	c4 0f       	add	r28, r20
    6344:	d5 1f       	adc	r29, r21
    6346:	ec 17       	cp	r30, r28
    6348:	fd 07       	cpc	r31, r29
    634a:	61 f4       	brne	.+24     	; 0x6364 <free+0xbe>
    634c:	80 81       	ld	r24, Z
    634e:	91 81       	ldd	r25, Z+1	; 0x01
    6350:	84 0f       	add	r24, r20
    6352:	95 1f       	adc	r25, r21
    6354:	02 96       	adiw	r24, 0x02	; 2
    6356:	e9 01       	movw	r28, r18
    6358:	99 83       	std	Y+1, r25	; 0x01
    635a:	88 83       	st	Y, r24
    635c:	82 81       	ldd	r24, Z+2	; 0x02
    635e:	93 81       	ldd	r25, Z+3	; 0x03
    6360:	9b 83       	std	Y+3, r25	; 0x03
    6362:	8a 83       	std	Y+2, r24	; 0x02
    6364:	e0 e0       	ldi	r30, 0x00	; 0
    6366:	f0 e0       	ldi	r31, 0x00	; 0
    6368:	12 96       	adiw	r26, 0x02	; 2
    636a:	8d 91       	ld	r24, X+
    636c:	9c 91       	ld	r25, X
    636e:	13 97       	sbiw	r26, 0x03	; 3
    6370:	00 97       	sbiw	r24, 0x00	; 0
    6372:	19 f0       	breq	.+6      	; 0x637a <free+0xd4>
    6374:	fd 01       	movw	r30, r26
    6376:	dc 01       	movw	r26, r24
    6378:	f7 cf       	rjmp	.-18     	; 0x6368 <free+0xc2>
    637a:	8d 91       	ld	r24, X+
    637c:	9c 91       	ld	r25, X
    637e:	11 97       	sbiw	r26, 0x01	; 1
    6380:	9d 01       	movw	r18, r26
    6382:	2e 5f       	subi	r18, 0xFE	; 254
    6384:	3f 4f       	sbci	r19, 0xFF	; 255
    6386:	82 0f       	add	r24, r18
    6388:	93 1f       	adc	r25, r19
    638a:	20 91 a5 18 	lds	r18, 0x18A5	; 0x8018a5 <__brkval>
    638e:	30 91 a6 18 	lds	r19, 0x18A6	; 0x8018a6 <__brkval+0x1>
    6392:	28 17       	cp	r18, r24
    6394:	39 07       	cpc	r19, r25
    6396:	69 f4       	brne	.+26     	; 0x63b2 <free+0x10c>
    6398:	30 97       	sbiw	r30, 0x00	; 0
    639a:	29 f4       	brne	.+10     	; 0x63a6 <free+0x100>
    639c:	10 92 a8 18 	sts	0x18A8, r1	; 0x8018a8 <__flp+0x1>
    63a0:	10 92 a7 18 	sts	0x18A7, r1	; 0x8018a7 <__flp>
    63a4:	02 c0       	rjmp	.+4      	; 0x63aa <free+0x104>
    63a6:	13 82       	std	Z+3, r1	; 0x03
    63a8:	12 82       	std	Z+2, r1	; 0x02
    63aa:	b0 93 a6 18 	sts	0x18A6, r27	; 0x8018a6 <__brkval+0x1>
    63ae:	a0 93 a5 18 	sts	0x18A5, r26	; 0x8018a5 <__brkval>
    63b2:	df 91       	pop	r29
    63b4:	cf 91       	pop	r28
    63b6:	08 95       	ret

000063b8 <abort>:
    63b8:	81 e0       	ldi	r24, 0x01	; 1
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	f8 94       	cli
    63be:	7d c3       	rjmp	.+1786   	; 0x6aba <_exit>

000063c0 <memcpy>:
    63c0:	fb 01       	movw	r30, r22
    63c2:	dc 01       	movw	r26, r24
    63c4:	02 c0       	rjmp	.+4      	; 0x63ca <memcpy+0xa>
    63c6:	01 90       	ld	r0, Z+
    63c8:	0d 92       	st	X+, r0
    63ca:	41 50       	subi	r20, 0x01	; 1
    63cc:	50 40       	sbci	r21, 0x00	; 0
    63ce:	d8 f7       	brcc	.-10     	; 0x63c6 <memcpy+0x6>
    63d0:	08 95       	ret

000063d2 <memset>:
    63d2:	dc 01       	movw	r26, r24
    63d4:	01 c0       	rjmp	.+2      	; 0x63d8 <memset+0x6>
    63d6:	6d 93       	st	X+, r22
    63d8:	41 50       	subi	r20, 0x01	; 1
    63da:	50 40       	sbci	r21, 0x00	; 0
    63dc:	e0 f7       	brcc	.-8      	; 0x63d6 <memset+0x4>
    63de:	08 95       	ret

000063e0 <strcasestr>:
    63e0:	fb 01       	movw	r30, r22
    63e2:	51 91       	ld	r21, Z+
    63e4:	55 23       	and	r21, r21
    63e6:	b1 f0       	breq	.+44     	; 0x6414 <strcasestr+0x34>
    63e8:	bf 01       	movw	r22, r30
    63ea:	dc 01       	movw	r26, r24
    63ec:	05 2e       	mov	r0, r21
    63ee:	4d 91       	ld	r20, X+
    63f0:	44 23       	and	r20, r20
    63f2:	69 f0       	breq	.+26     	; 0x640e <strcasestr+0x2e>
    63f4:	10 d0       	rcall	.+32     	; 0x6416 <strcasestr+0x36>
    63f6:	d9 f7       	brne	.-10     	; 0x63ee <strcasestr+0xe>
    63f8:	cd 01       	movw	r24, r26
    63fa:	01 90       	ld	r0, Z+
    63fc:	00 20       	and	r0, r0
    63fe:	49 f0       	breq	.+18     	; 0x6412 <strcasestr+0x32>
    6400:	4d 91       	ld	r20, X+
    6402:	41 11       	cpse	r20, r1
    6404:	08 d0       	rcall	.+16     	; 0x6416 <strcasestr+0x36>
    6406:	c9 f3       	breq	.-14     	; 0x63fa <strcasestr+0x1a>
    6408:	fb 01       	movw	r30, r22
    640a:	41 11       	cpse	r20, r1
    640c:	ee cf       	rjmp	.-36     	; 0x63ea <strcasestr+0xa>
    640e:	81 e0       	ldi	r24, 0x01	; 1
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	01 97       	sbiw	r24, 0x01	; 1
    6414:	08 95       	ret
    6416:	40 25       	eor	r20, r0
    6418:	39 f0       	breq	.+14     	; 0x6428 <strcasestr+0x48>
    641a:	40 32       	cpi	r20, 0x20	; 32
    641c:	29 f4       	brne	.+10     	; 0x6428 <strcasestr+0x48>
    641e:	40 29       	or	r20, r0
    6420:	4b 57       	subi	r20, 0x7B	; 123
    6422:	46 5e       	subi	r20, 0xE6	; 230
    6424:	08 f0       	brcs	.+2      	; 0x6428 <strcasestr+0x48>
    6426:	18 94       	sez
    6428:	08 95       	ret

0000642a <strcat>:
    642a:	fb 01       	movw	r30, r22
    642c:	dc 01       	movw	r26, r24
    642e:	0d 90       	ld	r0, X+
    6430:	00 20       	and	r0, r0
    6432:	e9 f7       	brne	.-6      	; 0x642e <strcat+0x4>
    6434:	11 97       	sbiw	r26, 0x01	; 1
    6436:	01 90       	ld	r0, Z+
    6438:	0d 92       	st	X+, r0
    643a:	00 20       	and	r0, r0
    643c:	e1 f7       	brne	.-8      	; 0x6436 <strcat+0xc>
    643e:	08 95       	ret

00006440 <strcpy>:
    6440:	fb 01       	movw	r30, r22
    6442:	dc 01       	movw	r26, r24
    6444:	01 90       	ld	r0, Z+
    6446:	0d 92       	st	X+, r0
    6448:	00 20       	and	r0, r0
    644a:	e1 f7       	brne	.-8      	; 0x6444 <strcpy+0x4>
    644c:	08 95       	ret

0000644e <strncasecmp>:
    644e:	fb 01       	movw	r30, r22
    6450:	dc 01       	movw	r26, r24
    6452:	41 50       	subi	r20, 0x01	; 1
    6454:	50 40       	sbci	r21, 0x00	; 0
    6456:	88 f0       	brcs	.+34     	; 0x647a <strncasecmp+0x2c>
    6458:	8d 91       	ld	r24, X+
    645a:	81 34       	cpi	r24, 0x41	; 65
    645c:	1c f0       	brlt	.+6      	; 0x6464 <strncasecmp+0x16>
    645e:	8b 35       	cpi	r24, 0x5B	; 91
    6460:	0c f4       	brge	.+2      	; 0x6464 <strncasecmp+0x16>
    6462:	80 5e       	subi	r24, 0xE0	; 224
    6464:	61 91       	ld	r22, Z+
    6466:	61 34       	cpi	r22, 0x41	; 65
    6468:	1c f0       	brlt	.+6      	; 0x6470 <strncasecmp+0x22>
    646a:	6b 35       	cpi	r22, 0x5B	; 91
    646c:	0c f4       	brge	.+2      	; 0x6470 <strncasecmp+0x22>
    646e:	60 5e       	subi	r22, 0xE0	; 224
    6470:	86 1b       	sub	r24, r22
    6472:	61 11       	cpse	r22, r1
    6474:	71 f3       	breq	.-36     	; 0x6452 <strncasecmp+0x4>
    6476:	99 0b       	sbc	r25, r25
    6478:	08 95       	ret
    647a:	88 1b       	sub	r24, r24
    647c:	fc cf       	rjmp	.-8      	; 0x6476 <strncasecmp+0x28>

0000647e <printf>:
    647e:	cf 93       	push	r28
    6480:	df 93       	push	r29
    6482:	cd b7       	in	r28, 0x3d	; 61
    6484:	de b7       	in	r29, 0x3e	; 62
    6486:	ae 01       	movw	r20, r28
    6488:	4a 5f       	subi	r20, 0xFA	; 250
    648a:	5f 4f       	sbci	r21, 0xFF	; 255
    648c:	fa 01       	movw	r30, r20
    648e:	61 91       	ld	r22, Z+
    6490:	71 91       	ld	r23, Z+
    6492:	af 01       	movw	r20, r30
    6494:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <__iob+0x2>
    6498:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <__iob+0x3>
    649c:	61 d0       	rcall	.+194    	; 0x6560 <vfprintf>
    649e:	df 91       	pop	r29
    64a0:	cf 91       	pop	r28
    64a2:	08 95       	ret

000064a4 <puts>:
    64a4:	0f 93       	push	r16
    64a6:	1f 93       	push	r17
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	e0 91 ab 18 	lds	r30, 0x18AB	; 0x8018ab <__iob+0x2>
    64b0:	f0 91 ac 18 	lds	r31, 0x18AC	; 0x8018ac <__iob+0x3>
    64b4:	23 81       	ldd	r18, Z+3	; 0x03
    64b6:	21 ff       	sbrs	r18, 1
    64b8:	1b c0       	rjmp	.+54     	; 0x64f0 <puts+0x4c>
    64ba:	8c 01       	movw	r16, r24
    64bc:	d0 e0       	ldi	r29, 0x00	; 0
    64be:	c0 e0       	ldi	r28, 0x00	; 0
    64c0:	f8 01       	movw	r30, r16
    64c2:	81 91       	ld	r24, Z+
    64c4:	8f 01       	movw	r16, r30
    64c6:	60 91 ab 18 	lds	r22, 0x18AB	; 0x8018ab <__iob+0x2>
    64ca:	70 91 ac 18 	lds	r23, 0x18AC	; 0x8018ac <__iob+0x3>
    64ce:	db 01       	movw	r26, r22
    64d0:	18 96       	adiw	r26, 0x08	; 8
    64d2:	ed 91       	ld	r30, X+
    64d4:	fc 91       	ld	r31, X
    64d6:	19 97       	sbiw	r26, 0x09	; 9
    64d8:	88 23       	and	r24, r24
    64da:	31 f0       	breq	.+12     	; 0x64e8 <puts+0x44>
    64dc:	19 95       	eicall
    64de:	89 2b       	or	r24, r25
    64e0:	79 f3       	breq	.-34     	; 0x64c0 <puts+0x1c>
    64e2:	df ef       	ldi	r29, 0xFF	; 255
    64e4:	cf ef       	ldi	r28, 0xFF	; 255
    64e6:	ec cf       	rjmp	.-40     	; 0x64c0 <puts+0x1c>
    64e8:	8a e0       	ldi	r24, 0x0A	; 10
    64ea:	19 95       	eicall
    64ec:	89 2b       	or	r24, r25
    64ee:	19 f0       	breq	.+6      	; 0x64f6 <puts+0x52>
    64f0:	8f ef       	ldi	r24, 0xFF	; 255
    64f2:	9f ef       	ldi	r25, 0xFF	; 255
    64f4:	02 c0       	rjmp	.+4      	; 0x64fa <puts+0x56>
    64f6:	8d 2f       	mov	r24, r29
    64f8:	9c 2f       	mov	r25, r28
    64fa:	df 91       	pop	r29
    64fc:	cf 91       	pop	r28
    64fe:	1f 91       	pop	r17
    6500:	0f 91       	pop	r16
    6502:	08 95       	ret

00006504 <sprintf>:
    6504:	0f 93       	push	r16
    6506:	1f 93       	push	r17
    6508:	cf 93       	push	r28
    650a:	df 93       	push	r29
    650c:	cd b7       	in	r28, 0x3d	; 61
    650e:	de b7       	in	r29, 0x3e	; 62
    6510:	2e 97       	sbiw	r28, 0x0e	; 14
    6512:	0f b6       	in	r0, 0x3f	; 63
    6514:	f8 94       	cli
    6516:	de bf       	out	0x3e, r29	; 62
    6518:	0f be       	out	0x3f, r0	; 63
    651a:	cd bf       	out	0x3d, r28	; 61
    651c:	0e 89       	ldd	r16, Y+22	; 0x16
    651e:	1f 89       	ldd	r17, Y+23	; 0x17
    6520:	86 e0       	ldi	r24, 0x06	; 6
    6522:	8c 83       	std	Y+4, r24	; 0x04
    6524:	1a 83       	std	Y+2, r17	; 0x02
    6526:	09 83       	std	Y+1, r16	; 0x01
    6528:	8f ef       	ldi	r24, 0xFF	; 255
    652a:	9f e7       	ldi	r25, 0x7F	; 127
    652c:	9e 83       	std	Y+6, r25	; 0x06
    652e:	8d 83       	std	Y+5, r24	; 0x05
    6530:	ae 01       	movw	r20, r28
    6532:	46 5e       	subi	r20, 0xE6	; 230
    6534:	5f 4f       	sbci	r21, 0xFF	; 255
    6536:	68 8d       	ldd	r22, Y+24	; 0x18
    6538:	79 8d       	ldd	r23, Y+25	; 0x19
    653a:	ce 01       	movw	r24, r28
    653c:	01 96       	adiw	r24, 0x01	; 1
    653e:	10 d0       	rcall	.+32     	; 0x6560 <vfprintf>
    6540:	ef 81       	ldd	r30, Y+7	; 0x07
    6542:	f8 85       	ldd	r31, Y+8	; 0x08
    6544:	e0 0f       	add	r30, r16
    6546:	f1 1f       	adc	r31, r17
    6548:	10 82       	st	Z, r1
    654a:	2e 96       	adiw	r28, 0x0e	; 14
    654c:	0f b6       	in	r0, 0x3f	; 63
    654e:	f8 94       	cli
    6550:	de bf       	out	0x3e, r29	; 62
    6552:	0f be       	out	0x3f, r0	; 63
    6554:	cd bf       	out	0x3d, r28	; 61
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	1f 91       	pop	r17
    655c:	0f 91       	pop	r16
    655e:	08 95       	ret

00006560 <vfprintf>:
    6560:	2f 92       	push	r2
    6562:	3f 92       	push	r3
    6564:	4f 92       	push	r4
    6566:	5f 92       	push	r5
    6568:	6f 92       	push	r6
    656a:	7f 92       	push	r7
    656c:	8f 92       	push	r8
    656e:	9f 92       	push	r9
    6570:	af 92       	push	r10
    6572:	bf 92       	push	r11
    6574:	cf 92       	push	r12
    6576:	df 92       	push	r13
    6578:	ef 92       	push	r14
    657a:	ff 92       	push	r15
    657c:	0f 93       	push	r16
    657e:	1f 93       	push	r17
    6580:	cf 93       	push	r28
    6582:	df 93       	push	r29
    6584:	cd b7       	in	r28, 0x3d	; 61
    6586:	de b7       	in	r29, 0x3e	; 62
    6588:	2b 97       	sbiw	r28, 0x0b	; 11
    658a:	0f b6       	in	r0, 0x3f	; 63
    658c:	f8 94       	cli
    658e:	de bf       	out	0x3e, r29	; 62
    6590:	0f be       	out	0x3f, r0	; 63
    6592:	cd bf       	out	0x3d, r28	; 61
    6594:	6c 01       	movw	r12, r24
    6596:	7b 01       	movw	r14, r22
    6598:	8a 01       	movw	r16, r20
    659a:	fc 01       	movw	r30, r24
    659c:	17 82       	std	Z+7, r1	; 0x07
    659e:	16 82       	std	Z+6, r1	; 0x06
    65a0:	83 81       	ldd	r24, Z+3	; 0x03
    65a2:	81 ff       	sbrs	r24, 1
    65a4:	bf c1       	rjmp	.+894    	; 0x6924 <vfprintf+0x3c4>
    65a6:	ce 01       	movw	r24, r28
    65a8:	01 96       	adiw	r24, 0x01	; 1
    65aa:	3c 01       	movw	r6, r24
    65ac:	f6 01       	movw	r30, r12
    65ae:	93 81       	ldd	r25, Z+3	; 0x03
    65b0:	f7 01       	movw	r30, r14
    65b2:	93 fd       	sbrc	r25, 3
    65b4:	85 91       	lpm	r24, Z+
    65b6:	93 ff       	sbrs	r25, 3
    65b8:	81 91       	ld	r24, Z+
    65ba:	7f 01       	movw	r14, r30
    65bc:	88 23       	and	r24, r24
    65be:	09 f4       	brne	.+2      	; 0x65c2 <vfprintf+0x62>
    65c0:	ad c1       	rjmp	.+858    	; 0x691c <vfprintf+0x3bc>
    65c2:	85 32       	cpi	r24, 0x25	; 37
    65c4:	39 f4       	brne	.+14     	; 0x65d4 <vfprintf+0x74>
    65c6:	93 fd       	sbrc	r25, 3
    65c8:	85 91       	lpm	r24, Z+
    65ca:	93 ff       	sbrs	r25, 3
    65cc:	81 91       	ld	r24, Z+
    65ce:	7f 01       	movw	r14, r30
    65d0:	85 32       	cpi	r24, 0x25	; 37
    65d2:	21 f4       	brne	.+8      	; 0x65dc <vfprintf+0x7c>
    65d4:	b6 01       	movw	r22, r12
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	d6 d1       	rcall	.+940    	; 0x6986 <fputc>
    65da:	e8 cf       	rjmp	.-48     	; 0x65ac <vfprintf+0x4c>
    65dc:	91 2c       	mov	r9, r1
    65de:	21 2c       	mov	r2, r1
    65e0:	31 2c       	mov	r3, r1
    65e2:	ff e1       	ldi	r31, 0x1F	; 31
    65e4:	f3 15       	cp	r31, r3
    65e6:	d8 f0       	brcs	.+54     	; 0x661e <vfprintf+0xbe>
    65e8:	8b 32       	cpi	r24, 0x2B	; 43
    65ea:	79 f0       	breq	.+30     	; 0x660a <vfprintf+0xaa>
    65ec:	38 f4       	brcc	.+14     	; 0x65fc <vfprintf+0x9c>
    65ee:	80 32       	cpi	r24, 0x20	; 32
    65f0:	79 f0       	breq	.+30     	; 0x6610 <vfprintf+0xb0>
    65f2:	83 32       	cpi	r24, 0x23	; 35
    65f4:	a1 f4       	brne	.+40     	; 0x661e <vfprintf+0xbe>
    65f6:	23 2d       	mov	r18, r3
    65f8:	20 61       	ori	r18, 0x10	; 16
    65fa:	1d c0       	rjmp	.+58     	; 0x6636 <vfprintf+0xd6>
    65fc:	8d 32       	cpi	r24, 0x2D	; 45
    65fe:	61 f0       	breq	.+24     	; 0x6618 <vfprintf+0xb8>
    6600:	80 33       	cpi	r24, 0x30	; 48
    6602:	69 f4       	brne	.+26     	; 0x661e <vfprintf+0xbe>
    6604:	23 2d       	mov	r18, r3
    6606:	21 60       	ori	r18, 0x01	; 1
    6608:	16 c0       	rjmp	.+44     	; 0x6636 <vfprintf+0xd6>
    660a:	83 2d       	mov	r24, r3
    660c:	82 60       	ori	r24, 0x02	; 2
    660e:	38 2e       	mov	r3, r24
    6610:	e3 2d       	mov	r30, r3
    6612:	e4 60       	ori	r30, 0x04	; 4
    6614:	3e 2e       	mov	r3, r30
    6616:	2a c0       	rjmp	.+84     	; 0x666c <vfprintf+0x10c>
    6618:	f3 2d       	mov	r31, r3
    661a:	f8 60       	ori	r31, 0x08	; 8
    661c:	1d c0       	rjmp	.+58     	; 0x6658 <vfprintf+0xf8>
    661e:	37 fc       	sbrc	r3, 7
    6620:	2d c0       	rjmp	.+90     	; 0x667c <vfprintf+0x11c>
    6622:	20 ed       	ldi	r18, 0xD0	; 208
    6624:	28 0f       	add	r18, r24
    6626:	2a 30       	cpi	r18, 0x0A	; 10
    6628:	40 f0       	brcs	.+16     	; 0x663a <vfprintf+0xda>
    662a:	8e 32       	cpi	r24, 0x2E	; 46
    662c:	b9 f4       	brne	.+46     	; 0x665c <vfprintf+0xfc>
    662e:	36 fc       	sbrc	r3, 6
    6630:	75 c1       	rjmp	.+746    	; 0x691c <vfprintf+0x3bc>
    6632:	23 2d       	mov	r18, r3
    6634:	20 64       	ori	r18, 0x40	; 64
    6636:	32 2e       	mov	r3, r18
    6638:	19 c0       	rjmp	.+50     	; 0x666c <vfprintf+0x10c>
    663a:	36 fe       	sbrs	r3, 6
    663c:	06 c0       	rjmp	.+12     	; 0x664a <vfprintf+0xea>
    663e:	8a e0       	ldi	r24, 0x0A	; 10
    6640:	98 9e       	mul	r9, r24
    6642:	20 0d       	add	r18, r0
    6644:	11 24       	eor	r1, r1
    6646:	92 2e       	mov	r9, r18
    6648:	11 c0       	rjmp	.+34     	; 0x666c <vfprintf+0x10c>
    664a:	ea e0       	ldi	r30, 0x0A	; 10
    664c:	2e 9e       	mul	r2, r30
    664e:	20 0d       	add	r18, r0
    6650:	11 24       	eor	r1, r1
    6652:	22 2e       	mov	r2, r18
    6654:	f3 2d       	mov	r31, r3
    6656:	f0 62       	ori	r31, 0x20	; 32
    6658:	3f 2e       	mov	r3, r31
    665a:	08 c0       	rjmp	.+16     	; 0x666c <vfprintf+0x10c>
    665c:	8c 36       	cpi	r24, 0x6C	; 108
    665e:	21 f4       	brne	.+8      	; 0x6668 <vfprintf+0x108>
    6660:	83 2d       	mov	r24, r3
    6662:	80 68       	ori	r24, 0x80	; 128
    6664:	38 2e       	mov	r3, r24
    6666:	02 c0       	rjmp	.+4      	; 0x666c <vfprintf+0x10c>
    6668:	88 36       	cpi	r24, 0x68	; 104
    666a:	41 f4       	brne	.+16     	; 0x667c <vfprintf+0x11c>
    666c:	f7 01       	movw	r30, r14
    666e:	93 fd       	sbrc	r25, 3
    6670:	85 91       	lpm	r24, Z+
    6672:	93 ff       	sbrs	r25, 3
    6674:	81 91       	ld	r24, Z+
    6676:	7f 01       	movw	r14, r30
    6678:	81 11       	cpse	r24, r1
    667a:	b3 cf       	rjmp	.-154    	; 0x65e2 <vfprintf+0x82>
    667c:	98 2f       	mov	r25, r24
    667e:	9f 7d       	andi	r25, 0xDF	; 223
    6680:	95 54       	subi	r25, 0x45	; 69
    6682:	93 30       	cpi	r25, 0x03	; 3
    6684:	28 f4       	brcc	.+10     	; 0x6690 <vfprintf+0x130>
    6686:	0c 5f       	subi	r16, 0xFC	; 252
    6688:	1f 4f       	sbci	r17, 0xFF	; 255
    668a:	9f e3       	ldi	r25, 0x3F	; 63
    668c:	99 83       	std	Y+1, r25	; 0x01
    668e:	0d c0       	rjmp	.+26     	; 0x66aa <vfprintf+0x14a>
    6690:	83 36       	cpi	r24, 0x63	; 99
    6692:	31 f0       	breq	.+12     	; 0x66a0 <vfprintf+0x140>
    6694:	83 37       	cpi	r24, 0x73	; 115
    6696:	71 f0       	breq	.+28     	; 0x66b4 <vfprintf+0x154>
    6698:	83 35       	cpi	r24, 0x53	; 83
    669a:	09 f0       	breq	.+2      	; 0x669e <vfprintf+0x13e>
    669c:	55 c0       	rjmp	.+170    	; 0x6748 <vfprintf+0x1e8>
    669e:	20 c0       	rjmp	.+64     	; 0x66e0 <vfprintf+0x180>
    66a0:	f8 01       	movw	r30, r16
    66a2:	80 81       	ld	r24, Z
    66a4:	89 83       	std	Y+1, r24	; 0x01
    66a6:	0e 5f       	subi	r16, 0xFE	; 254
    66a8:	1f 4f       	sbci	r17, 0xFF	; 255
    66aa:	88 24       	eor	r8, r8
    66ac:	83 94       	inc	r8
    66ae:	91 2c       	mov	r9, r1
    66b0:	53 01       	movw	r10, r6
    66b2:	12 c0       	rjmp	.+36     	; 0x66d8 <vfprintf+0x178>
    66b4:	28 01       	movw	r4, r16
    66b6:	f2 e0       	ldi	r31, 0x02	; 2
    66b8:	4f 0e       	add	r4, r31
    66ba:	51 1c       	adc	r5, r1
    66bc:	f8 01       	movw	r30, r16
    66be:	a0 80       	ld	r10, Z
    66c0:	b1 80       	ldd	r11, Z+1	; 0x01
    66c2:	36 fe       	sbrs	r3, 6
    66c4:	03 c0       	rjmp	.+6      	; 0x66cc <vfprintf+0x16c>
    66c6:	69 2d       	mov	r22, r9
    66c8:	70 e0       	ldi	r23, 0x00	; 0
    66ca:	02 c0       	rjmp	.+4      	; 0x66d0 <vfprintf+0x170>
    66cc:	6f ef       	ldi	r22, 0xFF	; 255
    66ce:	7f ef       	ldi	r23, 0xFF	; 255
    66d0:	c5 01       	movw	r24, r10
    66d2:	4e d1       	rcall	.+668    	; 0x6970 <strnlen>
    66d4:	4c 01       	movw	r8, r24
    66d6:	82 01       	movw	r16, r4
    66d8:	f3 2d       	mov	r31, r3
    66da:	ff 77       	andi	r31, 0x7F	; 127
    66dc:	3f 2e       	mov	r3, r31
    66de:	15 c0       	rjmp	.+42     	; 0x670a <vfprintf+0x1aa>
    66e0:	28 01       	movw	r4, r16
    66e2:	22 e0       	ldi	r18, 0x02	; 2
    66e4:	42 0e       	add	r4, r18
    66e6:	51 1c       	adc	r5, r1
    66e8:	f8 01       	movw	r30, r16
    66ea:	a0 80       	ld	r10, Z
    66ec:	b1 80       	ldd	r11, Z+1	; 0x01
    66ee:	36 fe       	sbrs	r3, 6
    66f0:	03 c0       	rjmp	.+6      	; 0x66f8 <vfprintf+0x198>
    66f2:	69 2d       	mov	r22, r9
    66f4:	70 e0       	ldi	r23, 0x00	; 0
    66f6:	02 c0       	rjmp	.+4      	; 0x66fc <vfprintf+0x19c>
    66f8:	6f ef       	ldi	r22, 0xFF	; 255
    66fa:	7f ef       	ldi	r23, 0xFF	; 255
    66fc:	c5 01       	movw	r24, r10
    66fe:	2d d1       	rcall	.+602    	; 0x695a <strnlen_P>
    6700:	4c 01       	movw	r8, r24
    6702:	f3 2d       	mov	r31, r3
    6704:	f0 68       	ori	r31, 0x80	; 128
    6706:	3f 2e       	mov	r3, r31
    6708:	82 01       	movw	r16, r4
    670a:	33 fc       	sbrc	r3, 3
    670c:	19 c0       	rjmp	.+50     	; 0x6740 <vfprintf+0x1e0>
    670e:	82 2d       	mov	r24, r2
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	88 16       	cp	r8, r24
    6714:	99 06       	cpc	r9, r25
    6716:	a0 f4       	brcc	.+40     	; 0x6740 <vfprintf+0x1e0>
    6718:	b6 01       	movw	r22, r12
    671a:	80 e2       	ldi	r24, 0x20	; 32
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	33 d1       	rcall	.+614    	; 0x6986 <fputc>
    6720:	2a 94       	dec	r2
    6722:	f5 cf       	rjmp	.-22     	; 0x670e <vfprintf+0x1ae>
    6724:	f5 01       	movw	r30, r10
    6726:	37 fc       	sbrc	r3, 7
    6728:	85 91       	lpm	r24, Z+
    672a:	37 fe       	sbrs	r3, 7
    672c:	81 91       	ld	r24, Z+
    672e:	5f 01       	movw	r10, r30
    6730:	b6 01       	movw	r22, r12
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	28 d1       	rcall	.+592    	; 0x6986 <fputc>
    6736:	21 10       	cpse	r2, r1
    6738:	2a 94       	dec	r2
    673a:	21 e0       	ldi	r18, 0x01	; 1
    673c:	82 1a       	sub	r8, r18
    673e:	91 08       	sbc	r9, r1
    6740:	81 14       	cp	r8, r1
    6742:	91 04       	cpc	r9, r1
    6744:	79 f7       	brne	.-34     	; 0x6724 <vfprintf+0x1c4>
    6746:	e1 c0       	rjmp	.+450    	; 0x690a <vfprintf+0x3aa>
    6748:	84 36       	cpi	r24, 0x64	; 100
    674a:	11 f0       	breq	.+4      	; 0x6750 <vfprintf+0x1f0>
    674c:	89 36       	cpi	r24, 0x69	; 105
    674e:	39 f5       	brne	.+78     	; 0x679e <vfprintf+0x23e>
    6750:	f8 01       	movw	r30, r16
    6752:	37 fe       	sbrs	r3, 7
    6754:	07 c0       	rjmp	.+14     	; 0x6764 <vfprintf+0x204>
    6756:	60 81       	ld	r22, Z
    6758:	71 81       	ldd	r23, Z+1	; 0x01
    675a:	82 81       	ldd	r24, Z+2	; 0x02
    675c:	93 81       	ldd	r25, Z+3	; 0x03
    675e:	0c 5f       	subi	r16, 0xFC	; 252
    6760:	1f 4f       	sbci	r17, 0xFF	; 255
    6762:	08 c0       	rjmp	.+16     	; 0x6774 <vfprintf+0x214>
    6764:	60 81       	ld	r22, Z
    6766:	71 81       	ldd	r23, Z+1	; 0x01
    6768:	07 2e       	mov	r0, r23
    676a:	00 0c       	add	r0, r0
    676c:	88 0b       	sbc	r24, r24
    676e:	99 0b       	sbc	r25, r25
    6770:	0e 5f       	subi	r16, 0xFE	; 254
    6772:	1f 4f       	sbci	r17, 0xFF	; 255
    6774:	f3 2d       	mov	r31, r3
    6776:	ff 76       	andi	r31, 0x6F	; 111
    6778:	3f 2e       	mov	r3, r31
    677a:	97 ff       	sbrs	r25, 7
    677c:	09 c0       	rjmp	.+18     	; 0x6790 <vfprintf+0x230>
    677e:	90 95       	com	r25
    6780:	80 95       	com	r24
    6782:	70 95       	com	r23
    6784:	61 95       	neg	r22
    6786:	7f 4f       	sbci	r23, 0xFF	; 255
    6788:	8f 4f       	sbci	r24, 0xFF	; 255
    678a:	9f 4f       	sbci	r25, 0xFF	; 255
    678c:	f0 68       	ori	r31, 0x80	; 128
    678e:	3f 2e       	mov	r3, r31
    6790:	2a e0       	ldi	r18, 0x0A	; 10
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	a3 01       	movw	r20, r6
    6796:	33 d1       	rcall	.+614    	; 0x69fe <__ultoa_invert>
    6798:	88 2e       	mov	r8, r24
    679a:	86 18       	sub	r8, r6
    679c:	44 c0       	rjmp	.+136    	; 0x6826 <vfprintf+0x2c6>
    679e:	85 37       	cpi	r24, 0x75	; 117
    67a0:	31 f4       	brne	.+12     	; 0x67ae <vfprintf+0x24e>
    67a2:	23 2d       	mov	r18, r3
    67a4:	2f 7e       	andi	r18, 0xEF	; 239
    67a6:	b2 2e       	mov	r11, r18
    67a8:	2a e0       	ldi	r18, 0x0A	; 10
    67aa:	30 e0       	ldi	r19, 0x00	; 0
    67ac:	25 c0       	rjmp	.+74     	; 0x67f8 <vfprintf+0x298>
    67ae:	93 2d       	mov	r25, r3
    67b0:	99 7f       	andi	r25, 0xF9	; 249
    67b2:	b9 2e       	mov	r11, r25
    67b4:	8f 36       	cpi	r24, 0x6F	; 111
    67b6:	c1 f0       	breq	.+48     	; 0x67e8 <vfprintf+0x288>
    67b8:	18 f4       	brcc	.+6      	; 0x67c0 <vfprintf+0x260>
    67ba:	88 35       	cpi	r24, 0x58	; 88
    67bc:	79 f0       	breq	.+30     	; 0x67dc <vfprintf+0x27c>
    67be:	ae c0       	rjmp	.+348    	; 0x691c <vfprintf+0x3bc>
    67c0:	80 37       	cpi	r24, 0x70	; 112
    67c2:	19 f0       	breq	.+6      	; 0x67ca <vfprintf+0x26a>
    67c4:	88 37       	cpi	r24, 0x78	; 120
    67c6:	21 f0       	breq	.+8      	; 0x67d0 <vfprintf+0x270>
    67c8:	a9 c0       	rjmp	.+338    	; 0x691c <vfprintf+0x3bc>
    67ca:	e9 2f       	mov	r30, r25
    67cc:	e0 61       	ori	r30, 0x10	; 16
    67ce:	be 2e       	mov	r11, r30
    67d0:	b4 fe       	sbrs	r11, 4
    67d2:	0d c0       	rjmp	.+26     	; 0x67ee <vfprintf+0x28e>
    67d4:	fb 2d       	mov	r31, r11
    67d6:	f4 60       	ori	r31, 0x04	; 4
    67d8:	bf 2e       	mov	r11, r31
    67da:	09 c0       	rjmp	.+18     	; 0x67ee <vfprintf+0x28e>
    67dc:	34 fe       	sbrs	r3, 4
    67de:	0a c0       	rjmp	.+20     	; 0x67f4 <vfprintf+0x294>
    67e0:	29 2f       	mov	r18, r25
    67e2:	26 60       	ori	r18, 0x06	; 6
    67e4:	b2 2e       	mov	r11, r18
    67e6:	06 c0       	rjmp	.+12     	; 0x67f4 <vfprintf+0x294>
    67e8:	28 e0       	ldi	r18, 0x08	; 8
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	05 c0       	rjmp	.+10     	; 0x67f8 <vfprintf+0x298>
    67ee:	20 e1       	ldi	r18, 0x10	; 16
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	02 c0       	rjmp	.+4      	; 0x67f8 <vfprintf+0x298>
    67f4:	20 e1       	ldi	r18, 0x10	; 16
    67f6:	32 e0       	ldi	r19, 0x02	; 2
    67f8:	f8 01       	movw	r30, r16
    67fa:	b7 fe       	sbrs	r11, 7
    67fc:	07 c0       	rjmp	.+14     	; 0x680c <vfprintf+0x2ac>
    67fe:	60 81       	ld	r22, Z
    6800:	71 81       	ldd	r23, Z+1	; 0x01
    6802:	82 81       	ldd	r24, Z+2	; 0x02
    6804:	93 81       	ldd	r25, Z+3	; 0x03
    6806:	0c 5f       	subi	r16, 0xFC	; 252
    6808:	1f 4f       	sbci	r17, 0xFF	; 255
    680a:	06 c0       	rjmp	.+12     	; 0x6818 <vfprintf+0x2b8>
    680c:	60 81       	ld	r22, Z
    680e:	71 81       	ldd	r23, Z+1	; 0x01
    6810:	80 e0       	ldi	r24, 0x00	; 0
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	0e 5f       	subi	r16, 0xFE	; 254
    6816:	1f 4f       	sbci	r17, 0xFF	; 255
    6818:	a3 01       	movw	r20, r6
    681a:	f1 d0       	rcall	.+482    	; 0x69fe <__ultoa_invert>
    681c:	88 2e       	mov	r8, r24
    681e:	86 18       	sub	r8, r6
    6820:	fb 2d       	mov	r31, r11
    6822:	ff 77       	andi	r31, 0x7F	; 127
    6824:	3f 2e       	mov	r3, r31
    6826:	36 fe       	sbrs	r3, 6
    6828:	0d c0       	rjmp	.+26     	; 0x6844 <vfprintf+0x2e4>
    682a:	23 2d       	mov	r18, r3
    682c:	2e 7f       	andi	r18, 0xFE	; 254
    682e:	a2 2e       	mov	r10, r18
    6830:	89 14       	cp	r8, r9
    6832:	58 f4       	brcc	.+22     	; 0x684a <vfprintf+0x2ea>
    6834:	34 fe       	sbrs	r3, 4
    6836:	0b c0       	rjmp	.+22     	; 0x684e <vfprintf+0x2ee>
    6838:	32 fc       	sbrc	r3, 2
    683a:	09 c0       	rjmp	.+18     	; 0x684e <vfprintf+0x2ee>
    683c:	83 2d       	mov	r24, r3
    683e:	8e 7e       	andi	r24, 0xEE	; 238
    6840:	a8 2e       	mov	r10, r24
    6842:	05 c0       	rjmp	.+10     	; 0x684e <vfprintf+0x2ee>
    6844:	b8 2c       	mov	r11, r8
    6846:	a3 2c       	mov	r10, r3
    6848:	03 c0       	rjmp	.+6      	; 0x6850 <vfprintf+0x2f0>
    684a:	b8 2c       	mov	r11, r8
    684c:	01 c0       	rjmp	.+2      	; 0x6850 <vfprintf+0x2f0>
    684e:	b9 2c       	mov	r11, r9
    6850:	a4 fe       	sbrs	r10, 4
    6852:	0f c0       	rjmp	.+30     	; 0x6872 <vfprintf+0x312>
    6854:	fe 01       	movw	r30, r28
    6856:	e8 0d       	add	r30, r8
    6858:	f1 1d       	adc	r31, r1
    685a:	80 81       	ld	r24, Z
    685c:	80 33       	cpi	r24, 0x30	; 48
    685e:	21 f4       	brne	.+8      	; 0x6868 <vfprintf+0x308>
    6860:	9a 2d       	mov	r25, r10
    6862:	99 7e       	andi	r25, 0xE9	; 233
    6864:	a9 2e       	mov	r10, r25
    6866:	09 c0       	rjmp	.+18     	; 0x687a <vfprintf+0x31a>
    6868:	a2 fe       	sbrs	r10, 2
    686a:	06 c0       	rjmp	.+12     	; 0x6878 <vfprintf+0x318>
    686c:	b3 94       	inc	r11
    686e:	b3 94       	inc	r11
    6870:	04 c0       	rjmp	.+8      	; 0x687a <vfprintf+0x31a>
    6872:	8a 2d       	mov	r24, r10
    6874:	86 78       	andi	r24, 0x86	; 134
    6876:	09 f0       	breq	.+2      	; 0x687a <vfprintf+0x31a>
    6878:	b3 94       	inc	r11
    687a:	a3 fc       	sbrc	r10, 3
    687c:	10 c0       	rjmp	.+32     	; 0x689e <vfprintf+0x33e>
    687e:	a0 fe       	sbrs	r10, 0
    6880:	06 c0       	rjmp	.+12     	; 0x688e <vfprintf+0x32e>
    6882:	b2 14       	cp	r11, r2
    6884:	80 f4       	brcc	.+32     	; 0x68a6 <vfprintf+0x346>
    6886:	28 0c       	add	r2, r8
    6888:	92 2c       	mov	r9, r2
    688a:	9b 18       	sub	r9, r11
    688c:	0d c0       	rjmp	.+26     	; 0x68a8 <vfprintf+0x348>
    688e:	b2 14       	cp	r11, r2
    6890:	58 f4       	brcc	.+22     	; 0x68a8 <vfprintf+0x348>
    6892:	b6 01       	movw	r22, r12
    6894:	80 e2       	ldi	r24, 0x20	; 32
    6896:	90 e0       	ldi	r25, 0x00	; 0
    6898:	76 d0       	rcall	.+236    	; 0x6986 <fputc>
    689a:	b3 94       	inc	r11
    689c:	f8 cf       	rjmp	.-16     	; 0x688e <vfprintf+0x32e>
    689e:	b2 14       	cp	r11, r2
    68a0:	18 f4       	brcc	.+6      	; 0x68a8 <vfprintf+0x348>
    68a2:	2b 18       	sub	r2, r11
    68a4:	02 c0       	rjmp	.+4      	; 0x68aa <vfprintf+0x34a>
    68a6:	98 2c       	mov	r9, r8
    68a8:	21 2c       	mov	r2, r1
    68aa:	a4 fe       	sbrs	r10, 4
    68ac:	0f c0       	rjmp	.+30     	; 0x68cc <vfprintf+0x36c>
    68ae:	b6 01       	movw	r22, r12
    68b0:	80 e3       	ldi	r24, 0x30	; 48
    68b2:	90 e0       	ldi	r25, 0x00	; 0
    68b4:	68 d0       	rcall	.+208    	; 0x6986 <fputc>
    68b6:	a2 fe       	sbrs	r10, 2
    68b8:	16 c0       	rjmp	.+44     	; 0x68e6 <vfprintf+0x386>
    68ba:	a1 fc       	sbrc	r10, 1
    68bc:	03 c0       	rjmp	.+6      	; 0x68c4 <vfprintf+0x364>
    68be:	88 e7       	ldi	r24, 0x78	; 120
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	02 c0       	rjmp	.+4      	; 0x68c8 <vfprintf+0x368>
    68c4:	88 e5       	ldi	r24, 0x58	; 88
    68c6:	90 e0       	ldi	r25, 0x00	; 0
    68c8:	b6 01       	movw	r22, r12
    68ca:	0c c0       	rjmp	.+24     	; 0x68e4 <vfprintf+0x384>
    68cc:	8a 2d       	mov	r24, r10
    68ce:	86 78       	andi	r24, 0x86	; 134
    68d0:	51 f0       	breq	.+20     	; 0x68e6 <vfprintf+0x386>
    68d2:	a1 fe       	sbrs	r10, 1
    68d4:	02 c0       	rjmp	.+4      	; 0x68da <vfprintf+0x37a>
    68d6:	8b e2       	ldi	r24, 0x2B	; 43
    68d8:	01 c0       	rjmp	.+2      	; 0x68dc <vfprintf+0x37c>
    68da:	80 e2       	ldi	r24, 0x20	; 32
    68dc:	a7 fc       	sbrc	r10, 7
    68de:	8d e2       	ldi	r24, 0x2D	; 45
    68e0:	b6 01       	movw	r22, r12
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	50 d0       	rcall	.+160    	; 0x6986 <fputc>
    68e6:	89 14       	cp	r8, r9
    68e8:	30 f4       	brcc	.+12     	; 0x68f6 <vfprintf+0x396>
    68ea:	b6 01       	movw	r22, r12
    68ec:	80 e3       	ldi	r24, 0x30	; 48
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	4a d0       	rcall	.+148    	; 0x6986 <fputc>
    68f2:	9a 94       	dec	r9
    68f4:	f8 cf       	rjmp	.-16     	; 0x68e6 <vfprintf+0x386>
    68f6:	8a 94       	dec	r8
    68f8:	f3 01       	movw	r30, r6
    68fa:	e8 0d       	add	r30, r8
    68fc:	f1 1d       	adc	r31, r1
    68fe:	80 81       	ld	r24, Z
    6900:	b6 01       	movw	r22, r12
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	40 d0       	rcall	.+128    	; 0x6986 <fputc>
    6906:	81 10       	cpse	r8, r1
    6908:	f6 cf       	rjmp	.-20     	; 0x68f6 <vfprintf+0x396>
    690a:	22 20       	and	r2, r2
    690c:	09 f4       	brne	.+2      	; 0x6910 <vfprintf+0x3b0>
    690e:	4e ce       	rjmp	.-868    	; 0x65ac <vfprintf+0x4c>
    6910:	b6 01       	movw	r22, r12
    6912:	80 e2       	ldi	r24, 0x20	; 32
    6914:	90 e0       	ldi	r25, 0x00	; 0
    6916:	37 d0       	rcall	.+110    	; 0x6986 <fputc>
    6918:	2a 94       	dec	r2
    691a:	f7 cf       	rjmp	.-18     	; 0x690a <vfprintf+0x3aa>
    691c:	f6 01       	movw	r30, r12
    691e:	86 81       	ldd	r24, Z+6	; 0x06
    6920:	97 81       	ldd	r25, Z+7	; 0x07
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <vfprintf+0x3c8>
    6924:	8f ef       	ldi	r24, 0xFF	; 255
    6926:	9f ef       	ldi	r25, 0xFF	; 255
    6928:	2b 96       	adiw	r28, 0x0b	; 11
    692a:	0f b6       	in	r0, 0x3f	; 63
    692c:	f8 94       	cli
    692e:	de bf       	out	0x3e, r29	; 62
    6930:	0f be       	out	0x3f, r0	; 63
    6932:	cd bf       	out	0x3d, r28	; 61
    6934:	df 91       	pop	r29
    6936:	cf 91       	pop	r28
    6938:	1f 91       	pop	r17
    693a:	0f 91       	pop	r16
    693c:	ff 90       	pop	r15
    693e:	ef 90       	pop	r14
    6940:	df 90       	pop	r13
    6942:	cf 90       	pop	r12
    6944:	bf 90       	pop	r11
    6946:	af 90       	pop	r10
    6948:	9f 90       	pop	r9
    694a:	8f 90       	pop	r8
    694c:	7f 90       	pop	r7
    694e:	6f 90       	pop	r6
    6950:	5f 90       	pop	r5
    6952:	4f 90       	pop	r4
    6954:	3f 90       	pop	r3
    6956:	2f 90       	pop	r2
    6958:	08 95       	ret

0000695a <strnlen_P>:
    695a:	fc 01       	movw	r30, r24
    695c:	05 90       	lpm	r0, Z+
    695e:	61 50       	subi	r22, 0x01	; 1
    6960:	70 40       	sbci	r23, 0x00	; 0
    6962:	01 10       	cpse	r0, r1
    6964:	d8 f7       	brcc	.-10     	; 0x695c <strnlen_P+0x2>
    6966:	80 95       	com	r24
    6968:	90 95       	com	r25
    696a:	8e 0f       	add	r24, r30
    696c:	9f 1f       	adc	r25, r31
    696e:	08 95       	ret

00006970 <strnlen>:
    6970:	fc 01       	movw	r30, r24
    6972:	61 50       	subi	r22, 0x01	; 1
    6974:	70 40       	sbci	r23, 0x00	; 0
    6976:	01 90       	ld	r0, Z+
    6978:	01 10       	cpse	r0, r1
    697a:	d8 f7       	brcc	.-10     	; 0x6972 <strnlen+0x2>
    697c:	80 95       	com	r24
    697e:	90 95       	com	r25
    6980:	8e 0f       	add	r24, r30
    6982:	9f 1f       	adc	r25, r31
    6984:	08 95       	ret

00006986 <fputc>:
    6986:	0f 93       	push	r16
    6988:	1f 93       	push	r17
    698a:	cf 93       	push	r28
    698c:	df 93       	push	r29
    698e:	fb 01       	movw	r30, r22
    6990:	23 81       	ldd	r18, Z+3	; 0x03
    6992:	21 fd       	sbrc	r18, 1
    6994:	03 c0       	rjmp	.+6      	; 0x699c <fputc+0x16>
    6996:	8f ef       	ldi	r24, 0xFF	; 255
    6998:	9f ef       	ldi	r25, 0xFF	; 255
    699a:	2c c0       	rjmp	.+88     	; 0x69f4 <fputc+0x6e>
    699c:	22 ff       	sbrs	r18, 2
    699e:	16 c0       	rjmp	.+44     	; 0x69cc <fputc+0x46>
    69a0:	46 81       	ldd	r20, Z+6	; 0x06
    69a2:	57 81       	ldd	r21, Z+7	; 0x07
    69a4:	24 81       	ldd	r18, Z+4	; 0x04
    69a6:	35 81       	ldd	r19, Z+5	; 0x05
    69a8:	42 17       	cp	r20, r18
    69aa:	53 07       	cpc	r21, r19
    69ac:	44 f4       	brge	.+16     	; 0x69be <fputc+0x38>
    69ae:	a0 81       	ld	r26, Z
    69b0:	b1 81       	ldd	r27, Z+1	; 0x01
    69b2:	9d 01       	movw	r18, r26
    69b4:	2f 5f       	subi	r18, 0xFF	; 255
    69b6:	3f 4f       	sbci	r19, 0xFF	; 255
    69b8:	31 83       	std	Z+1, r19	; 0x01
    69ba:	20 83       	st	Z, r18
    69bc:	8c 93       	st	X, r24
    69be:	26 81       	ldd	r18, Z+6	; 0x06
    69c0:	37 81       	ldd	r19, Z+7	; 0x07
    69c2:	2f 5f       	subi	r18, 0xFF	; 255
    69c4:	3f 4f       	sbci	r19, 0xFF	; 255
    69c6:	37 83       	std	Z+7, r19	; 0x07
    69c8:	26 83       	std	Z+6, r18	; 0x06
    69ca:	14 c0       	rjmp	.+40     	; 0x69f4 <fputc+0x6e>
    69cc:	8b 01       	movw	r16, r22
    69ce:	ec 01       	movw	r28, r24
    69d0:	fb 01       	movw	r30, r22
    69d2:	00 84       	ldd	r0, Z+8	; 0x08
    69d4:	f1 85       	ldd	r31, Z+9	; 0x09
    69d6:	e0 2d       	mov	r30, r0
    69d8:	19 95       	eicall
    69da:	89 2b       	or	r24, r25
    69dc:	e1 f6       	brne	.-72     	; 0x6996 <fputc+0x10>
    69de:	d8 01       	movw	r26, r16
    69e0:	16 96       	adiw	r26, 0x06	; 6
    69e2:	8d 91       	ld	r24, X+
    69e4:	9c 91       	ld	r25, X
    69e6:	17 97       	sbiw	r26, 0x07	; 7
    69e8:	01 96       	adiw	r24, 0x01	; 1
    69ea:	17 96       	adiw	r26, 0x07	; 7
    69ec:	9c 93       	st	X, r25
    69ee:	8e 93       	st	-X, r24
    69f0:	16 97       	sbiw	r26, 0x06	; 6
    69f2:	ce 01       	movw	r24, r28
    69f4:	df 91       	pop	r29
    69f6:	cf 91       	pop	r28
    69f8:	1f 91       	pop	r17
    69fa:	0f 91       	pop	r16
    69fc:	08 95       	ret

000069fe <__ultoa_invert>:
    69fe:	fa 01       	movw	r30, r20
    6a00:	aa 27       	eor	r26, r26
    6a02:	28 30       	cpi	r18, 0x08	; 8
    6a04:	51 f1       	breq	.+84     	; 0x6a5a <__ultoa_invert+0x5c>
    6a06:	20 31       	cpi	r18, 0x10	; 16
    6a08:	81 f1       	breq	.+96     	; 0x6a6a <__ultoa_invert+0x6c>
    6a0a:	e8 94       	clt
    6a0c:	6f 93       	push	r22
    6a0e:	6e 7f       	andi	r22, 0xFE	; 254
    6a10:	6e 5f       	subi	r22, 0xFE	; 254
    6a12:	7f 4f       	sbci	r23, 0xFF	; 255
    6a14:	8f 4f       	sbci	r24, 0xFF	; 255
    6a16:	9f 4f       	sbci	r25, 0xFF	; 255
    6a18:	af 4f       	sbci	r26, 0xFF	; 255
    6a1a:	b1 e0       	ldi	r27, 0x01	; 1
    6a1c:	3e d0       	rcall	.+124    	; 0x6a9a <__ultoa_invert+0x9c>
    6a1e:	b4 e0       	ldi	r27, 0x04	; 4
    6a20:	3c d0       	rcall	.+120    	; 0x6a9a <__ultoa_invert+0x9c>
    6a22:	67 0f       	add	r22, r23
    6a24:	78 1f       	adc	r23, r24
    6a26:	89 1f       	adc	r24, r25
    6a28:	9a 1f       	adc	r25, r26
    6a2a:	a1 1d       	adc	r26, r1
    6a2c:	68 0f       	add	r22, r24
    6a2e:	79 1f       	adc	r23, r25
    6a30:	8a 1f       	adc	r24, r26
    6a32:	91 1d       	adc	r25, r1
    6a34:	a1 1d       	adc	r26, r1
    6a36:	6a 0f       	add	r22, r26
    6a38:	71 1d       	adc	r23, r1
    6a3a:	81 1d       	adc	r24, r1
    6a3c:	91 1d       	adc	r25, r1
    6a3e:	a1 1d       	adc	r26, r1
    6a40:	20 d0       	rcall	.+64     	; 0x6a82 <__ultoa_invert+0x84>
    6a42:	09 f4       	brne	.+2      	; 0x6a46 <__ultoa_invert+0x48>
    6a44:	68 94       	set
    6a46:	3f 91       	pop	r19
    6a48:	2a e0       	ldi	r18, 0x0A	; 10
    6a4a:	26 9f       	mul	r18, r22
    6a4c:	11 24       	eor	r1, r1
    6a4e:	30 19       	sub	r19, r0
    6a50:	30 5d       	subi	r19, 0xD0	; 208
    6a52:	31 93       	st	Z+, r19
    6a54:	de f6       	brtc	.-74     	; 0x6a0c <__ultoa_invert+0xe>
    6a56:	cf 01       	movw	r24, r30
    6a58:	08 95       	ret
    6a5a:	46 2f       	mov	r20, r22
    6a5c:	47 70       	andi	r20, 0x07	; 7
    6a5e:	40 5d       	subi	r20, 0xD0	; 208
    6a60:	41 93       	st	Z+, r20
    6a62:	b3 e0       	ldi	r27, 0x03	; 3
    6a64:	0f d0       	rcall	.+30     	; 0x6a84 <__ultoa_invert+0x86>
    6a66:	c9 f7       	brne	.-14     	; 0x6a5a <__ultoa_invert+0x5c>
    6a68:	f6 cf       	rjmp	.-20     	; 0x6a56 <__ultoa_invert+0x58>
    6a6a:	46 2f       	mov	r20, r22
    6a6c:	4f 70       	andi	r20, 0x0F	; 15
    6a6e:	40 5d       	subi	r20, 0xD0	; 208
    6a70:	4a 33       	cpi	r20, 0x3A	; 58
    6a72:	18 f0       	brcs	.+6      	; 0x6a7a <__ultoa_invert+0x7c>
    6a74:	49 5d       	subi	r20, 0xD9	; 217
    6a76:	31 fd       	sbrc	r19, 1
    6a78:	40 52       	subi	r20, 0x20	; 32
    6a7a:	41 93       	st	Z+, r20
    6a7c:	02 d0       	rcall	.+4      	; 0x6a82 <__ultoa_invert+0x84>
    6a7e:	a9 f7       	brne	.-22     	; 0x6a6a <__ultoa_invert+0x6c>
    6a80:	ea cf       	rjmp	.-44     	; 0x6a56 <__ultoa_invert+0x58>
    6a82:	b4 e0       	ldi	r27, 0x04	; 4
    6a84:	a6 95       	lsr	r26
    6a86:	97 95       	ror	r25
    6a88:	87 95       	ror	r24
    6a8a:	77 95       	ror	r23
    6a8c:	67 95       	ror	r22
    6a8e:	ba 95       	dec	r27
    6a90:	c9 f7       	brne	.-14     	; 0x6a84 <__ultoa_invert+0x86>
    6a92:	00 97       	sbiw	r24, 0x00	; 0
    6a94:	61 05       	cpc	r22, r1
    6a96:	71 05       	cpc	r23, r1
    6a98:	08 95       	ret
    6a9a:	9b 01       	movw	r18, r22
    6a9c:	ac 01       	movw	r20, r24
    6a9e:	0a 2e       	mov	r0, r26
    6aa0:	06 94       	lsr	r0
    6aa2:	57 95       	ror	r21
    6aa4:	47 95       	ror	r20
    6aa6:	37 95       	ror	r19
    6aa8:	27 95       	ror	r18
    6aaa:	ba 95       	dec	r27
    6aac:	c9 f7       	brne	.-14     	; 0x6aa0 <__ultoa_invert+0xa2>
    6aae:	62 0f       	add	r22, r18
    6ab0:	73 1f       	adc	r23, r19
    6ab2:	84 1f       	adc	r24, r20
    6ab4:	95 1f       	adc	r25, r21
    6ab6:	a0 1d       	adc	r26, r0
    6ab8:	08 95       	ret

00006aba <_exit>:
    6aba:	f8 94       	cli

00006abc <__stop_program>:
    6abc:	ff cf       	rjmp	.-2      	; 0x6abc <__stop_program>
