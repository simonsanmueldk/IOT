
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000654  00800200  00006b00  00006b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000106b  00800854  00800854  000071e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eb31  00000000  00000000  00007ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bb4  00000000  00000000  000169ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073c4  00000000  00000000  0001a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a28  00000000  00000000  00021968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000462e  00000000  00000000  00024390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c883  00000000  00000000  000289be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  00035241  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	c4 c7       	rjmp	.+3976   	; 0xfba <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3f 29 	jmp	0x527e	; 0x527e <__vector_25>
      68:	0c 94 91 29 	jmp	0x5322	; 0x5322 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <__vector_36>
      94:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 72 2e 	jmp	0x5ce4	; 0x5ce4 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6b 2a 	jmp	0x54d6	; 0x54d6 <__vector_51>
      d0:	0c 94 bd 2a 	jmp	0x557a	; 0x557a <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__vector_54>
      dc:	0c 94 53 2b 	jmp	0x56a6	; 0x56a6 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 1d       	adc	r27, r7
      e6:	b7 1d       	adc	r27, r7
      e8:	b7 1d       	adc	r27, r7
      ea:	ee 1d       	adc	r30, r14
      ec:	f6 1d       	adc	r31, r6
      ee:	0b 1e       	adc	r0, r27
      f0:	b7 1d       	adc	r27, r7
      f2:	b7 1d       	adc	r27, r7
      f4:	ee 1d       	adc	r30, r14
      f6:	f6 1d       	adc	r31, r6
      f8:	94 2e       	mov	r9, r20
      fa:	04 2f       	mov	r16, r20
      fc:	04 2f       	mov	r16, r20
      fe:	04 2f       	mov	r16, r20
     100:	04 2f       	mov	r16, r20
     102:	04 2f       	mov	r16, r20
     104:	04 2f       	mov	r16, r20
     106:	04 2f       	mov	r16, r20
     108:	94 2e       	mov	r9, r20
     10a:	04 2f       	mov	r16, r20
     10c:	04 2f       	mov	r16, r20
     10e:	04 2f       	mov	r16, r20
     110:	04 2f       	mov	r16, r20
     112:	04 2f       	mov	r16, r20
     114:	04 2f       	mov	r16, r20
     116:	04 2f       	mov	r16, r20
     118:	96 2e       	mov	r9, r22
     11a:	04 2f       	mov	r16, r20
     11c:	04 2f       	mov	r16, r20
     11e:	04 2f       	mov	r16, r20
     120:	04 2f       	mov	r16, r20
     122:	04 2f       	mov	r16, r20
     124:	04 2f       	mov	r16, r20
     126:	04 2f       	mov	r16, r20
     128:	04 2f       	mov	r16, r20
     12a:	04 2f       	mov	r16, r20
     12c:	04 2f       	mov	r16, r20
     12e:	04 2f       	mov	r16, r20
     130:	04 2f       	mov	r16, r20
     132:	04 2f       	mov	r16, r20
     134:	04 2f       	mov	r16, r20
     136:	04 2f       	mov	r16, r20
     138:	96 2e       	mov	r9, r22
     13a:	04 2f       	mov	r16, r20
     13c:	04 2f       	mov	r16, r20
     13e:	04 2f       	mov	r16, r20
     140:	04 2f       	mov	r16, r20
     142:	04 2f       	mov	r16, r20
     144:	04 2f       	mov	r16, r20
     146:	04 2f       	mov	r16, r20
     148:	04 2f       	mov	r16, r20
     14a:	04 2f       	mov	r16, r20
     14c:	04 2f       	mov	r16, r20
     14e:	04 2f       	mov	r16, r20
     150:	04 2f       	mov	r16, r20
     152:	04 2f       	mov	r16, r20
     154:	04 2f       	mov	r16, r20
     156:	04 2f       	mov	r16, r20
     158:	00 2f       	mov	r16, r16
     15a:	04 2f       	mov	r16, r20
     15c:	04 2f       	mov	r16, r20
     15e:	04 2f       	mov	r16, r20
     160:	04 2f       	mov	r16, r20
     162:	04 2f       	mov	r16, r20
     164:	04 2f       	mov	r16, r20
     166:	04 2f       	mov	r16, r20
     168:	cb 2e       	mov	r12, r27
     16a:	04 2f       	mov	r16, r20
     16c:	04 2f       	mov	r16, r20
     16e:	04 2f       	mov	r16, r20
     170:	04 2f       	mov	r16, r20
     172:	04 2f       	mov	r16, r20
     174:	04 2f       	mov	r16, r20
     176:	04 2f       	mov	r16, r20
     178:	04 2f       	mov	r16, r20
     17a:	04 2f       	mov	r16, r20
     17c:	04 2f       	mov	r16, r20
     17e:	04 2f       	mov	r16, r20
     180:	04 2f       	mov	r16, r20
     182:	04 2f       	mov	r16, r20
     184:	04 2f       	mov	r16, r20
     186:	04 2f       	mov	r16, r20
     188:	bf 2e       	mov	r11, r31
     18a:	04 2f       	mov	r16, r20
     18c:	04 2f       	mov	r16, r20
     18e:	04 2f       	mov	r16, r20
     190:	04 2f       	mov	r16, r20
     192:	04 2f       	mov	r16, r20
     194:	04 2f       	mov	r16, r20
     196:	04 2f       	mov	r16, r20
     198:	e3 2e       	mov	r14, r19

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <prvCheckTasksWaitingTermination>
     19e:	80 91 77 16 	lds	r24, 0x1677	; 0x801677 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	43 d6       	rcall	.+3206   	; 0xe2e <vPortYield>
     1a8:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 34 1b 	call	0x3668	; 0x3668 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 e0       	ldi	r30, 0x00	; 0
     1e4:	fb e6       	ldi	r31, 0x6B	; 107
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 35       	cpi	r26, 0x54	; 84
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a4 e5       	ldi	r26, 0x54	; 84
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 3b       	cpi	r26, 0xBF	; 191
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 61 21 	call	0x42c2	; 0x42c2 <main>
     20a:	0c 94 7e 35 	jmp	0x6afc	; 0x6afc <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <application_task_create>:
	{
		application_run(&xLastWakeTime,xFrequency);
	}
}
void application_task_create(UBaseType_t task_priority)
{
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
	xTaskCreate(
     216:	e1 2c       	mov	r14, r1
     218:	f1 2c       	mov	r15, r1
     21a:	08 2f       	mov	r16, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 ec       	ldi	r20, 0xC0	; 192
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6f e6       	ldi	r22, 0x6F	; 111
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	88 ec       	ldi	r24, 0xC8	; 200
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  task_priority  // Priority.
	,  NULL );
	
}
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <application_run>:
void application_run(TickType_t* xLastWakeTime,TickType_t xFrequency)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	66 97       	sbiw	r28, 0x16	; 22
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	5c 01       	movw	r10, r24
     266:	2a 01       	movw	r4, r20
     268:	3b 01       	movw	r6, r22
	xEventGroupSetBits(_meassureEventGroup, CO2_BIT | TEMPERATURE_HUMIDITY_BIT);
     26a:	43 e0       	ldi	r20, 0x03	; 3
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_meassureEventGroup>
     276:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_meassureEventGroup+0x1>
     27a:	24 d3       	rcall	.+1608   	; 0x8c4 <xEventGroupSetBits>
	dataReadyEventBits=xEventGroupWaitBits(_dataReadyEventGroup,CO2_BIT | TEMPERATURE_HUMIDITY_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     27c:	cc 24       	eor	r12, r12
     27e:	ca 94       	dec	r12
     280:	dc 2c       	mov	r13, r12
     282:	76 01       	movw	r14, r12
     284:	01 e0       	ldi	r16, 0x01	; 1
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	43 e0       	ldi	r20, 0x03	; 3
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <_dataReadyEventGroup>
     294:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <_dataReadyEventGroup+0x1>
     298:	75 d2       	rcall	.+1258   	; 0x784 <xEventGroupWaitBits>
     29a:	60 93 72 18 	sts	0x1872, r22	; 0x801872 <dataReadyEventBits>
     29e:	70 93 73 18 	sts	0x1873, r23	; 0x801873 <dataReadyEventBits+0x1>
     2a2:	80 93 74 18 	sts	0x1874, r24	; 0x801874 <dataReadyEventBits+0x2>
     2a6:	90 93 75 18 	sts	0x1875, r25	; 0x801875 <dataReadyEventBits+0x3>
	if ((dataReadyEventBits & (CO2_BIT | TEMPERATURE_HUMIDITY_BIT) ) == (CO2_BIT | TEMPERATURE_HUMIDITY_BIT))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <application_run+0x88>
     2be:	53 c0       	rjmp	.+166    	; 0x366 <application_run+0x12e>
	{
		setTemperatureData(get_temperature_data());
     2c0:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <get_temperature_data>
     2c4:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <setTemperatureData>
		printf("Temperature data ---> %d ",get_temperature_data());
     2c8:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <get_temperature_data>
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	8b e7       	ldi	r24, 0x7B	; 123
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
		setHumidityData(get_humidity_data());
     2dc:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <get_humidity_data>
     2e0:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setHumidityData>
		printf(" Humidity data ---> %d ",get_humidity_data());
     2e4:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <get_humidity_data>
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	85 e9       	ldi	r24, 0x95	; 149
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
		setCO2Ppm(get_CO2_data());
     2f8:	81 d0       	rcall	.+258    	; 0x3fc <get_CO2_data>
     2fa:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <setCO2Ppm>
		printf("CO2 data ---> %i ",get_CO2_data());
     2fe:	7e d0       	rcall	.+252    	; 0x3fc <get_CO2_data>
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	8d ea       	ldi	r24, 0xAD	; 173
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
		
		payload=getLoRaPayload((uint8_t)2);
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <getLoRaPayload>
     31a:	86 e1       	ldi	r24, 0x16	; 22
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	a6 e7       	ldi	r26, 0x76	; 118
     322:	b8 e1       	ldi	r27, 0x18	; 24
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <application_run+0xec>
		vTaskDelay(pdMS_TO_TICKS(50UL));
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
     338:	0f ef       	ldi	r16, 0xFF	; 255
     33a:	1f ef       	ldi	r17, 0xFF	; 255
     33c:	98 01       	movw	r18, r16
     33e:	46 e1       	ldi	r20, 0x16	; 22
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	66 e7       	ldi	r22, 0x76	; 118
     344:	78 e1       	ldi	r23, 0x18	; 24
     346:	80 91 6a 18 	lds	r24, 0x186A	; 0x80186a <xMessageBuffer>
     34a:	90 91 6b 18 	lds	r25, 0x186B	; 0x80186b <xMessageBuffer+0x1>
     34e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xStreamBufferSend>
		xTaskDelayUntil(xLastWakeTime, xFrequency );
     352:	b3 01       	movw	r22, r6
     354:	a2 01       	movw	r20, r4
     356:	c5 01       	movw	r24, r10
     358:	0e 94 5f 13 	call	0x26be	; 0x26be <xTaskDelayUntil>
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	}
	
     366:	66 96       	adiw	r28, 0x16	; 22
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	7f 90       	pop	r7
     388:	6f 90       	pop	r6
     38a:	5f 90       	pop	r5
     38c:	4f 90       	pop	r4
     38e:	08 95       	ret

00000390 <Application_Task>:
extern EventGroupHandle_t _meassureEventGroup ;
extern EventGroupHandle_t _dataReadyEventGroup;


void Application_Task(void* pvParameters)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <Application_Task+0x6>
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     39c:	0e 94 49 11 	call	0x2292	; 0x2292 <xTaskGetTickCount>
     3a0:	69 83       	std	Y+1, r22	; 0x01
     3a2:	7a 83       	std	Y+2, r23	; 0x02
     3a4:	8b 83       	std	Y+3, r24	; 0x03
     3a6:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		application_run(&xLastWakeTime,xFrequency);
     3a8:	48 ea       	ldi	r20, 0xA8	; 168
     3aa:	58 e4       	ldi	r21, 0x48	; 72
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	41 df       	rcall	.-382    	; 0x238 <application_run>
     3b6:	f8 cf       	rjmp	.-16     	; 0x3a8 <Application_Task+0x18>

000003b8 <myCo2CallBack>:
	co2_sensor_t new_co2_data = pvPortMalloc(sizeof(CO2_Sensor));
	if(NULL == new_co2_data)
	{
		return NULL;
	}
	new_co2_data->co2_Data=co2_data;
     3b8:	90 93 90 18 	sts	0x1890, r25	; 0x801890 <co2_data+0x1>
     3bc:	80 93 8f 18 	sts	0x188F, r24	; 0x80188f <co2_data>
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <_dataReadyEventGroup>
     3cc:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <_dataReadyEventGroup+0x1>
     3d0:	79 c2       	rjmp	.+1266   	; 0x8c4 <xEventGroupSetBits>
     3d2:	08 95       	ret

000003d4 <co2_task_create>:

}
void co2_task_create(UBaseType_t task_priority)
{
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
	
	xTaskCreate(
     3da:	e1 2c       	mov	r14, r1
     3dc:	f1 2c       	mov	r15, r1
     3de:	08 2f       	mov	r16, r24
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 ec       	ldi	r20, 0xC0	; 192
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	6f eb       	ldi	r22, 0xBF	; 191
     3ea:	72 e0       	ldi	r23, 0x02	; 2
     3ec:	83 e3       	ldi	r24, 0x33	; 51
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
	,  "CO2 Task" 
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  task_priority 
	,  NULL );
}
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <get_CO2_data>:


uint16_t get_CO2_data(){
	
	return (uint16_t)co2_data;
}
     3fc:	80 91 8f 18 	lds	r24, 0x188F	; 0x80188f <co2_data>
     400:	90 91 90 18 	lds	r25, 0x1890	; 0x801890 <co2_data+0x1>
     404:	08 95       	ret

00000406 <CO2_taskRun>:


void CO2_taskRun() {
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     410:	cc 24       	eor	r12, r12
     412:	ca 94       	dec	r12
     414:	dc 2c       	mov	r13, r12
     416:	76 01       	movw	r14, r12
     418:	01 e0       	ldi	r16, 0x01	; 1
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	42 e0       	ldi	r20, 0x02	; 2
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_meassureEventGroup>
     428:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_meassureEventGroup+0x1>
     42c:	ab d1       	rcall	.+854    	; 0x784 <xEventGroupWaitBits>
	_meassureEventGroup,
	CO2_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	if ((event_measure & CO2_BIT)==CO2_BIT)
     42e:	61 ff       	sbrs	r22, 1
     430:	14 c0       	rjmp	.+40     	; 0x45a <CO2_taskRun+0x54>
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
     432:	66 e0       	ldi	r22, 0x06	; 6
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
		rc = mh_z19_takeMeassuring();
     43e:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <mh_z19_takeMeassuring>
     442:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <rc>
		if (rc != MHZ19_OK)
     446:	88 23       	and	r24, r24
     448:	41 f0       	breq	.+16     	; 0x45a <CO2_taskRun+0x54>
		{
			printf("CO2 task got wrong");
     44a:	88 ec       	ldi	r24, 0xC8	; 200
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
		}
	}		
}
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	mh_z19_injectCallBack(myCo2CallBack);
     466:	8c ed       	ldi	r24, 0xDC	; 220
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <mh_z19_injectCallBack>
	for(;;)
	{
		CO2_taskRun();
     46e:	cb df       	rcall	.-106    	; 0x406 <CO2_taskRun>
     470:	fe cf       	rjmp	.-4      	; 0x46e <CO2_Sensor_Task+0x8>

00000472 <Configuration_SetMinTemperature>:

//-----------------------------Methods--------------------------//


void Configuration_SetMinTemperature(int16_t temperature_data)
{
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     47a:	4c e0       	ldi	r20, 0x0C	; 12
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     486:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     48a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <xQueueSemaphoreTake>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	79 f4       	brne	.+30     	; 0x4b0 <Configuration_SetMinTemperature+0x3e>
	{
		min_temperature_data=temperature_data;
     492:	d0 93 9a 18 	sts	0x189A, r29	; 0x80189a <min_temperature_data+0x1>
     496:	c0 93 99 18 	sts	0x1899, r28	; 0x801899 <min_temperature_data>
		xSemaphoreGive(mutex);
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	a9 01       	movw	r20, r18
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     4aa:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     4ae:	d7 d6       	rcall	.+3502   	; 0x125e <xQueueGenericSend>
	}
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <Configuration_SetMaxTemperature>:
void Configuration_SetMaxTemperature(int16_t temperature_data)
{
     4b8:	0f 93       	push	r16
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     4c0:	4f ef       	ldi	r20, 0xFF	; 255
     4c2:	5f ef       	ldi	r21, 0xFF	; 255
     4c4:	ba 01       	movw	r22, r20
     4c6:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     4ca:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     4ce:	0e 94 a9 0a 	call	0x1552	; 0x1552 <xQueueSemaphoreTake>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	79 f4       	brne	.+30     	; 0x4f4 <Configuration_SetMaxTemperature+0x3c>
	{
		max_temperature_data=temperature_data;
     4d6:	d0 93 a0 18 	sts	0x18A0, r29	; 0x8018a0 <max_temperature_data+0x1>
     4da:	c0 93 9f 18 	sts	0x189F, r28	; 0x80189f <max_temperature_data>
		xSemaphoreGive(mutex);
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     4ee:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     4f2:	b5 d6       	rcall	.+3434   	; 0x125e <xQueueGenericSend>
	}
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <Configuration_SetMinHumidity>:
void Configuration_SetMinHumidity(uint16_t humidity_data)
{
     4fc:	0f 93       	push	r16
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     504:	4f ef       	ldi	r20, 0xFF	; 255
     506:	5f ef       	ldi	r21, 0xFF	; 255
     508:	ba 01       	movw	r22, r20
     50a:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     50e:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     512:	0e 94 a9 0a 	call	0x1552	; 0x1552 <xQueueSemaphoreTake>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	79 f4       	brne	.+30     	; 0x538 <Configuration_SetMinHumidity+0x3c>
	{
	min_humidity_data=humidity_data;
     51a:	d0 93 9c 18 	sts	0x189C, r29	; 0x80189c <min_humidity_data+0x1>
     51e:	c0 93 9b 18 	sts	0x189B, r28	; 0x80189b <min_humidity_data>
	xSemaphoreGive(mutex);	
     522:	00 e0       	ldi	r16, 0x00	; 0
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     532:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     536:	93 d6       	rcall	.+3366   	; 0x125e <xQueueGenericSend>
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <Configuration_SetMaxHumidity>:


void Configuration_SetMaxHumidity(uint16_t humidity_data)
{
     540:	0f 93       	push	r16
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     548:	4f ef       	ldi	r20, 0xFF	; 255
     54a:	5f ef       	ldi	r21, 0xFF	; 255
     54c:	ba 01       	movw	r22, r20
     54e:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     552:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     556:	fd d7       	rcall	.+4090   	; 0x1552 <xQueueSemaphoreTake>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	79 f4       	brne	.+30     	; 0x57a <Configuration_SetMaxHumidity+0x3a>
	{
	max_humidity_data=humidity_data;
     55c:	d0 93 9e 18 	sts	0x189E, r29	; 0x80189e <max_humidity_data+0x1>
     560:	c0 93 9d 18 	sts	0x189D, r28	; 0x80189d <max_humidity_data>
	xSemaphoreGive(mutex);
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <mutex>
     574:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <mutex+0x1>
     578:	72 d6       	rcall	.+3300   	; 0x125e <xQueueGenericSend>
	}
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <Configuration_GetMaxTemperature>:

int16_t Configuration_GetMaxTemperature()
{
	return max_temperature_data;	
}
     582:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <max_temperature_data>
     586:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <max_temperature_data+0x1>
     58a:	08 95       	ret

0000058c <Configuration_GetMinTemperature>:
int16_t Configuration_GetMinTemperature()
{
	return min_temperature_data;
}
     58c:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <min_temperature_data>
     590:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <min_temperature_data+0x1>
     594:	08 95       	ret

00000596 <Configuration_GetMaxHumidity>:
uint16_t Configuration_GetMaxHumidity()
{
	return max_humidity_data;
}
     596:	80 91 9d 18 	lds	r24, 0x189D	; 0x80189d <max_humidity_data>
     59a:	90 91 9e 18 	lds	r25, 0x189E	; 0x80189e <max_humidity_data+0x1>
     59e:	08 95       	ret

000005a0 <Configuration_GetMinHumidity>:

uint16_t Configuration_GetMinHumidity()
{	
	return min_humidity_data;
}
     5a0:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <min_humidity_data>
     5a4:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <min_humidity_data+0x1>
     5a8:	08 95       	ret

000005aa <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task();
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority)
{
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
	xTaskCreate(
     5b0:	20 91 6e 18 	lds	r18, 0x186E	; 0x80186e <downlinkMessageBuffer>
     5b4:	30 91 6f 18 	lds	r19, 0x186F	; 0x80186f <downlinkMessageBuffer+0x1>
     5b8:	e1 2c       	mov	r14, r1
     5ba:	f1 2c       	mov	r15, r1
     5bc:	08 2f       	mov	r16, r24
     5be:	48 e8       	ldi	r20, 0x88	; 136
     5c0:	51 e0       	ldi	r21, 0x01	; 1
     5c2:	6b ed       	ldi	r22, 0xDB	; 219
     5c4:	72 e0       	ldi	r23, 0x02	; 2
     5c6:	8c e8       	ldi	r24, 0x8C	; 140
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
	"LoraWanDownlink",
	configMINIMAL_STACK_SIZE+200,
	(void*)downlinkMessageBuffer,
	priority,
	NULL );
}
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <lora_DownLinkHandler_task>:

void lora_DownLinkHandler_task()
{     
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
	size_t xReceivedBytes;
	
	xReceivedBytes=xMessageBufferReceive(
     5ea:	0f ef       	ldi	r16, 0xFF	; 255
     5ec:	1f ef       	ldi	r17, 0xFF	; 255
     5ee:	98 01       	movw	r18, r16
     5f0:	46 e1       	ldi	r20, 0x16	; 22
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	64 e5       	ldi	r22, 0x54	; 84
     5f6:	78 e0       	ldi	r23, 0x08	; 8
     5f8:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <downlinkMessageBuffer>
     5fc:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <downlinkMessageBuffer+0x1>
     600:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
	(void*)&_downlink_payload,
	sizeof(lora_driver_payload_t),
	portMAX_DELAY);
	
	
	if (xReceivedBytes>0)
     604:	89 2b       	or	r24, r25
     606:	09 f4       	brne	.+2      	; 0x60a <lora_DownLinkHandler_task+0x34>
     608:	7c c0       	rjmp	.+248    	; 0x702 <lora_DownLinkHandler_task+0x12c>
	{	
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len);
     60a:	c4 e5       	ldi	r28, 0x54	; 84
     60c:	d8 e0       	ldi	r29, 0x08	; 8
     60e:	99 81       	ldd	r25, Y+1	; 0x01
     610:	88 81       	ld	r24, Y
     612:	1f 92       	push	r1
     614:	9f 93       	push	r25
     616:	1f 92       	push	r1
     618:	8f 93       	push	r24
     61a:	8b ee       	ldi	r24, 0xEB	; 235
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
		
			if (8==_downlink_payload.len )
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	88 30       	cpi	r24, 0x08	; 8
     636:	09 f0       	breq	.+2      	; 0x63a <lora_DownLinkHandler_task+0x64>
     638:	5e c0       	rjmp	.+188    	; 0x6f6 <lora_DownLinkHandler_task+0x120>
			{
				
				uint16_t maxTemperature = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     63a:	5e 01       	movw	r10, r28
     63c:	ea 80       	ldd	r14, Y+2	; 0x02
     63e:	f1 2c       	mov	r15, r1
     640:	fe 2c       	mov	r15, r14
     642:	ee 24       	eor	r14, r14
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	e8 0e       	add	r14, r24
     648:	f1 1c       	adc	r15, r1
				printf("MAXTemperature %d", maxTemperature);
     64a:	ff 92       	push	r15
     64c:	ef 92       	push	r14
     64e:	8d e1       	ldi	r24, 0x1D	; 29
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
				
				uint16_t minTemperature = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     65a:	cc 80       	ldd	r12, Y+4	; 0x04
     65c:	d1 2c       	mov	r13, r1
     65e:	dc 2c       	mov	r13, r12
     660:	cc 24       	eor	r12, r12
     662:	8d 81       	ldd	r24, Y+5	; 0x05
     664:	c8 0e       	add	r12, r24
     666:	d1 1c       	adc	r13, r1
				printf("MINTemperature %d", minTemperature);
     668:	df 92       	push	r13
     66a:	cf 92       	push	r12
     66c:	8f e2       	ldi	r24, 0x2F	; 47
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
				
				uint16_t maxHumidity = (_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
     678:	fe 01       	movw	r30, r28
     67a:	ce 81       	ldd	r28, Y+6	; 0x06
     67c:	d0 e0       	ldi	r29, 0x00	; 0
     67e:	dc 2f       	mov	r29, r28
     680:	cc 27       	eor	r28, r28
     682:	87 81       	ldd	r24, Z+7	; 0x07
     684:	c8 0f       	add	r28, r24
     686:	d1 1d       	adc	r29, r1
				printf("MAXHumidity %d", maxHumidity);
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	81 e4       	ldi	r24, 0x41	; 65
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
				
				uint16_t minHumidity = (_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
     698:	f5 01       	movw	r30, r10
     69a:	00 85       	ldd	r16, Z+8	; 0x08
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	10 2f       	mov	r17, r16
     6a0:	00 27       	eor	r16, r16
     6a2:	81 85       	ldd	r24, Z+9	; 0x09
     6a4:	08 0f       	add	r16, r24
     6a6:	11 1d       	adc	r17, r1
				printf("MINHumidity %d", minHumidity);
     6a8:	1f 93       	push	r17
     6aa:	0f 93       	push	r16
     6ac:	80 e5       	ldi	r24, 0x50	; 80
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
				
				printf("Downlikn start ");
     6b8:	8f e5       	ldi	r24, 0x5F	; 95
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
				Configuration_SetMinTemperature(minTemperature);
     6c4:	c6 01       	movw	r24, r12
     6c6:	d5 de       	rcall	.-598    	; 0x472 <Configuration_SetMinTemperature>
				Configuration_SetMinHumidity(minHumidity);
     6c8:	80 2f       	mov	r24, r16
     6ca:	91 2f       	mov	r25, r17
     6cc:	17 df       	rcall	.-466    	; 0x4fc <Configuration_SetMinHumidity>
				Configuration_SetMaxTemperature(maxTemperature);
     6ce:	c7 01       	movw	r24, r14
     6d0:	f3 de       	rcall	.-538    	; 0x4b8 <Configuration_SetMaxTemperature>
				Configuration_SetMaxHumidity(maxHumidity);
     6d2:	8c 2f       	mov	r24, r28
     6d4:	9d 2f       	mov	r25, r29
     6d6:	34 df       	rcall	.-408    	; 0x540 <Configuration_SetMaxHumidity>
     6d8:	8f e6       	ldi	r24, 0x6F	; 111
				printf("FINISH");
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
     6e4:	8d b7       	in	r24, 0x3d	; 61
     6e6:	9e b7       	in	r25, 0x3e	; 62
     6e8:	44 96       	adiw	r24, 0x14	; 20
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	9e bf       	out	0x3e, r25	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	8d bf       	out	0x3d, r24	; 61
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <lora_DownLinkHandler_task+0x12c>
     6f6:	64 e5       	ldi	r22, 0x54	; 84
			}
			else
			{
				// Retry in 2.5 minutes
				vTaskDelay(pdMS_TO_TICKS(150000)); 			}
     6f8:	74 e2       	ldi	r23, 0x24	; 36
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
     702:	df 91       	pop	r29
	}
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	08 95       	ret

00000718 <lora_DownLinkHandler_startTask>:
     718:	5e df       	rcall	.-324    	; 0x5d6 <lora_DownLinkHandler_task>

void lora_DownLinkHandler_startTask(){
	
	for(;;)
	{
		lora_DownLinkHandler_task();
     71a:	fe cf       	rjmp	.-4      	; 0x718 <lora_DownLinkHandler_startTask>

0000071c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     71c:	0f 93       	push	r16
     71e:	01 11       	cpse	r16, r1
     720:	0c c0       	rjmp	.+24     	; 0x73a <prvTestWaitCondition+0x1e>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	82 23       	and	r24, r18
     728:	93 23       	and	r25, r19
     72a:	a4 23       	and	r26, r20
     72c:	b5 23       	and	r27, r21
     72e:	89 2b       	or	r24, r25
     730:	8a 2b       	or	r24, r26
     732:	8b 2b       	or	r24, r27
     734:	79 f4       	brne	.+30     	; 0x754 <prvTestWaitCondition+0x38>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	10 c0       	rjmp	.+32     	; 0x75a <prvTestWaitCondition+0x3e>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	82 23       	and	r24, r18
     740:	93 23       	and	r25, r19
     742:	a4 23       	and	r26, r20
     744:	b5 23       	and	r27, r21
     746:	28 17       	cp	r18, r24
     748:	39 07       	cpc	r19, r25
     74a:	4a 07       	cpc	r20, r26
     74c:	5b 07       	cpc	r21, r27
     74e:	21 f0       	breq	.+8      	; 0x758 <prvTestWaitCondition+0x3c>
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	03 c0       	rjmp	.+6      	; 0x75a <prvTestWaitCondition+0x3e>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	01 c0       	rjmp	.+2      	; 0x75a <prvTestWaitCondition+0x3e>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <xEventGroupCreate>:
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	8f e0       	ldi	r24, 0x0F	; 15
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	af d1       	rcall	.+862    	; 0xac6 <pvPortMalloc>
     768:	ec 01       	movw	r28, r24
     76a:	00 97       	sbiw	r24, 0x00	; 0
     76c:	39 f0       	breq	.+14     	; 0x77c <xEventGroupCreate+0x1e>
     76e:	fc 01       	movw	r30, r24
     770:	11 92       	st	Z+, r1
     772:	11 92       	st	Z+, r1
     774:	11 92       	st	Z+, r1
     776:	11 92       	st	Z+, r1
     778:	cf 01       	movw	r24, r30
     77a:	8b d2       	rcall	.+1302   	; 0xc92 <vListInitialise>
     77c:	ce 01       	movw	r24, r28
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <xEventGroupWaitBits>:
     784:	2f 92       	push	r2
     786:	3f 92       	push	r3
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	4a 01       	movw	r8, r20
     7ac:	5b 01       	movw	r10, r22
     7ae:	62 2e       	mov	r6, r18
     7b0:	70 2e       	mov	r7, r16
     7b2:	0e 94 43 11 	call	0x2286	; 0x2286 <vTaskSuspendAll>
     7b6:	28 80       	ld	r2, Y
     7b8:	39 80       	ldd	r3, Y+1	; 0x01
     7ba:	4a 80       	ldd	r4, Y+2	; 0x02
     7bc:	5b 80       	ldd	r5, Y+3	; 0x03
     7be:	a5 01       	movw	r20, r10
     7c0:	94 01       	movw	r18, r8
     7c2:	c2 01       	movw	r24, r4
     7c4:	b1 01       	movw	r22, r2
     7c6:	aa df       	rcall	.-172    	; 0x71c <prvTestWaitCondition>
     7c8:	88 23       	and	r24, r24
     7ca:	a1 f0       	breq	.+40     	; 0x7f4 <xEventGroupWaitBits+0x70>
     7cc:	66 20       	and	r6, r6
     7ce:	89 f1       	breq	.+98     	; 0x832 <xEventGroupWaitBits+0xae>
     7d0:	d5 01       	movw	r26, r10
     7d2:	c4 01       	movw	r24, r8
     7d4:	80 95       	com	r24
     7d6:	90 95       	com	r25
     7d8:	a0 95       	com	r26
     7da:	b0 95       	com	r27
     7dc:	82 21       	and	r24, r2
     7de:	93 21       	and	r25, r3
     7e0:	a4 21       	and	r26, r4
     7e2:	b5 21       	and	r27, r5
     7e4:	88 83       	st	Y, r24
     7e6:	99 83       	std	Y+1, r25	; 0x01
     7e8:	aa 83       	std	Y+2, r26	; 0x02
     7ea:	bb 83       	std	Y+3, r27	; 0x03
     7ec:	c1 2c       	mov	r12, r1
     7ee:	d1 2c       	mov	r13, r1
     7f0:	76 01       	movw	r14, r12
     7f2:	22 c0       	rjmp	.+68     	; 0x838 <xEventGroupWaitBits+0xb4>
     7f4:	c1 14       	cp	r12, r1
     7f6:	d1 04       	cpc	r13, r1
     7f8:	e1 04       	cpc	r14, r1
     7fa:	f1 04       	cpc	r15, r1
     7fc:	e9 f0       	breq	.+58     	; 0x838 <xEventGroupWaitBits+0xb4>
     7fe:	61 10       	cpse	r6, r1
     800:	04 c0       	rjmp	.+8      	; 0x80a <xEventGroupWaitBits+0x86>
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	ba 01       	movw	r22, r20
     808:	04 c0       	rjmp	.+8      	; 0x812 <xEventGroupWaitBits+0x8e>
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	71 e0       	ldi	r23, 0x01	; 1
     812:	71 10       	cpse	r7, r1
     814:	74 60       	ori	r23, 0x04	; 4
     816:	48 29       	or	r20, r8
     818:	59 29       	or	r21, r9
     81a:	6a 29       	or	r22, r10
     81c:	7b 29       	or	r23, r11
     81e:	97 01       	movw	r18, r14
     820:	86 01       	movw	r16, r12
     822:	ce 01       	movw	r24, r28
     824:	04 96       	adiw	r24, 0x04	; 4
     826:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <vTaskPlaceOnUnorderedEventList>
     82a:	21 2c       	mov	r2, r1
     82c:	31 2c       	mov	r3, r1
     82e:	21 01       	movw	r4, r2
     830:	03 c0       	rjmp	.+6      	; 0x838 <xEventGroupWaitBits+0xb4>
     832:	c1 2c       	mov	r12, r1
     834:	d1 2c       	mov	r13, r1
     836:	76 01       	movw	r14, r12
     838:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
     83c:	cd 28       	or	r12, r13
     83e:	ce 28       	or	r12, r14
     840:	cf 28       	or	r12, r15
     842:	59 f1       	breq	.+86     	; 0x89a <xEventGroupWaitBits+0x116>
     844:	81 11       	cpse	r24, r1
     846:	01 c0       	rjmp	.+2      	; 0x84a <xEventGroupWaitBits+0xc6>
     848:	f2 d2       	rcall	.+1508   	; 0xe2e <vPortYield>
     84a:	0e 94 1d 18 	call	0x303a	; 0x303a <uxTaskResetEventItemValue>
     84e:	6b 01       	movw	r12, r22
     850:	7c 01       	movw	r14, r24
     852:	91 fd       	sbrc	r25, 1
     854:	1f c0       	rjmp	.+62     	; 0x894 <xEventGroupWaitBits+0x110>
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	0f 92       	push	r0
     85c:	c8 80       	ld	r12, Y
     85e:	d9 80       	ldd	r13, Y+1	; 0x01
     860:	ea 80       	ldd	r14, Y+2	; 0x02
     862:	fb 80       	ldd	r15, Y+3	; 0x03
     864:	07 2d       	mov	r16, r7
     866:	a5 01       	movw	r20, r10
     868:	94 01       	movw	r18, r8
     86a:	c7 01       	movw	r24, r14
     86c:	b6 01       	movw	r22, r12
     86e:	56 df       	rcall	.-340    	; 0x71c <prvTestWaitCondition>
     870:	88 23       	and	r24, r24
     872:	71 f0       	breq	.+28     	; 0x890 <xEventGroupWaitBits+0x10c>
     874:	66 20       	and	r6, r6
     876:	61 f0       	breq	.+24     	; 0x890 <xEventGroupWaitBits+0x10c>
     878:	80 94       	com	r8
     87a:	90 94       	com	r9
     87c:	a0 94       	com	r10
     87e:	b0 94       	com	r11
     880:	8c 20       	and	r8, r12
     882:	9d 20       	and	r9, r13
     884:	ae 20       	and	r10, r14
     886:	bf 20       	and	r11, r15
     888:	88 82       	st	Y, r8
     88a:	99 82       	std	Y+1, r9	; 0x01
     88c:	aa 82       	std	Y+2, r10	; 0x02
     88e:	bb 82       	std	Y+3, r11	; 0x03
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	16 01       	movw	r2, r12
     896:	27 01       	movw	r4, r14
     898:	55 24       	eor	r5, r5
     89a:	c2 01       	movw	r24, r4
     89c:	b1 01       	movw	r22, r2
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	3f 90       	pop	r3
     8c0:	2f 90       	pop	r2
     8c2:	08 95       	ret

000008c4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     8c4:	4f 92       	push	r4
     8c6:	5f 92       	push	r5
     8c8:	6f 92       	push	r6
     8ca:	7f 92       	push	r7
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
     8e2:	6a 01       	movw	r12, r20
     8e4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8e6:	8c 01       	movw	r16, r24
     8e8:	09 5f       	subi	r16, 0xF9	; 249
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     8ec:	0e 94 43 11 	call	0x2286	; 0x2286 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     8f0:	eb 85       	ldd	r30, Y+11	; 0x0b
     8f2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	aa 81       	ldd	r26, Y+2	; 0x02
     8fa:	bb 81       	ldd	r27, Y+3	; 0x03
     8fc:	c8 2a       	or	r12, r24
     8fe:	d9 2a       	or	r13, r25
     900:	ea 2a       	or	r14, r26
     902:	fb 2a       	or	r15, r27
     904:	c8 82       	st	Y, r12
     906:	d9 82       	std	Y+1, r13	; 0x01
     908:	ea 82       	std	Y+2, r14	; 0x02
     90a:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     90c:	c1 2c       	mov	r12, r1
     90e:	d1 2c       	mov	r13, r1
     910:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     912:	3d c0       	rjmp	.+122    	; 0x98e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     914:	a4 80       	ldd	r10, Z+4	; 0x04
     916:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	a2 81       	ldd	r26, Z+2	; 0x02
     91e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     920:	ac 01       	movw	r20, r24
     922:	bd 01       	movw	r22, r26
     924:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     926:	b2 fd       	sbrc	r27, 2
     928:	0e c0       	rjmp	.+28     	; 0x946 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     92a:	48 80       	ld	r4, Y
     92c:	59 80       	ldd	r5, Y+1	; 0x01
     92e:	6a 80       	ldd	r6, Y+2	; 0x02
     930:	7b 80       	ldd	r7, Y+3	; 0x03
     932:	44 22       	and	r4, r20
     934:	55 22       	and	r5, r21
     936:	66 22       	and	r6, r22
     938:	77 22       	and	r7, r23
     93a:	45 28       	or	r4, r5
     93c:	46 28       	or	r4, r6
     93e:	47 28       	or	r4, r7
     940:	89 f4       	brne	.+34     	; 0x964 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	12 c0       	rjmp	.+36     	; 0x96a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     946:	48 80       	ld	r4, Y
     948:	59 80       	ldd	r5, Y+1	; 0x01
     94a:	6a 80       	ldd	r6, Y+2	; 0x02
     94c:	7b 80       	ldd	r7, Y+3	; 0x03
     94e:	44 22       	and	r4, r20
     950:	55 22       	and	r5, r21
     952:	66 22       	and	r6, r22
     954:	77 22       	and	r7, r23
     956:	44 15       	cp	r20, r4
     958:	55 05       	cpc	r21, r5
     95a:	66 05       	cpc	r22, r6
     95c:	77 05       	cpc	r23, r7
     95e:	21 f0       	breq	.+8      	; 0x968 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	03 c0       	rjmp	.+6      	; 0x96a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	01 c0       	rjmp	.+2      	; 0x96a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     968:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     96a:	22 23       	and	r18, r18
     96c:	71 f0       	breq	.+28     	; 0x98a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     96e:	b0 ff       	sbrs	r27, 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     972:	c4 2a       	or	r12, r20
     974:	d5 2a       	or	r13, r21
     976:	e6 2a       	or	r14, r22
     978:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     97a:	48 81       	ld	r20, Y
     97c:	59 81       	ldd	r21, Y+1	; 0x01
     97e:	6a 81       	ldd	r22, Y+2	; 0x02
     980:	7b 81       	ldd	r23, Y+3	; 0x03
     982:	72 60       	ori	r23, 0x02	; 2
     984:	cf 01       	movw	r24, r30
     986:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     98a:	ea 2d       	mov	r30, r10
     98c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     98e:	e0 17       	cp	r30, r16
     990:	f1 07       	cpc	r31, r17
     992:	09 f0       	breq	.+2      	; 0x996 <xEventGroupSetBits+0xd2>
     994:	bf cf       	rjmp	.-130    	; 0x914 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     996:	c0 94       	com	r12
     998:	d0 94       	com	r13
     99a:	e0 94       	com	r14
     99c:	f0 94       	com	r15
     99e:	88 81       	ld	r24, Y
     9a0:	99 81       	ldd	r25, Y+1	; 0x01
     9a2:	aa 81       	ldd	r26, Y+2	; 0x02
     9a4:	bb 81       	ldd	r27, Y+3	; 0x03
     9a6:	c8 22       	and	r12, r24
     9a8:	d9 22       	and	r13, r25
     9aa:	ea 22       	and	r14, r26
     9ac:	fb 22       	and	r15, r27
     9ae:	c8 82       	st	Y, r12
     9b0:	d9 82       	std	Y+1, r13	; 0x01
     9b2:	ea 82       	std	Y+2, r14	; 0x02
     9b4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     9b6:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     9ba:	68 81       	ld	r22, Y
     9bc:	79 81       	ldd	r23, Y+1	; 0x01
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	7f 90       	pop	r7
     9d8:	6f 90       	pop	r6
     9da:	5f 90       	pop	r5
     9dc:	4f 90       	pop	r4
     9de:	08 95       	ret

000009e0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     9e0:	e6 e7       	ldi	r30, 0x76	; 118
     9e2:	f8 e0       	ldi	r31, 0x08	; 8
     9e4:	aa e7       	ldi	r26, 0x7A	; 122
     9e6:	b8 e0       	ldi	r27, 0x08	; 8
     9e8:	b1 83       	std	Z+1, r27	; 0x01
     9ea:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     9ec:	13 82       	std	Z+3, r1	; 0x03
     9ee:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     9f0:	e2 e2       	ldi	r30, 0x22	; 34
     9f2:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     9f4:	f0 93 75 08 	sts	0x0875, r31	; 0x800875 <pxEnd+0x1>
     9f8:	e0 93 74 08 	sts	0x0874, r30	; 0x800874 <pxEnd>
    pxEnd->xBlockSize = 0;
     9fc:	13 82       	std	Z+3, r1	; 0x03
     9fe:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     a00:	11 82       	std	Z+1, r1	; 0x01
     a02:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     a04:	88 ea       	ldi	r24, 0xA8	; 168
     a06:	9d e0       	ldi	r25, 0x0D	; 13
     a08:	13 96       	adiw	r26, 0x03	; 3
     a0a:	9c 93       	st	X, r25
     a0c:	8e 93       	st	-X, r24
     a0e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     a10:	ed 93       	st	X+, r30
     a12:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a14:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <xMinimumEverFreeBytesRemaining+0x1>
     a18:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a1c:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <xFreeBytesRemaining+0x1>
     a20:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e8       	ldi	r25, 0x80	; 128
     a28:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <xBlockAllocatedBit+0x1>
     a2c:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <xBlockAllocatedBit>
     a30:	08 95       	ret

00000a32 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     a38:	a6 e7       	ldi	r26, 0x76	; 118
     a3a:	b8 e0       	ldi	r27, 0x08	; 8
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <prvInsertBlockIntoFreeList+0xe>
     a3e:	df 01       	movw	r26, r30
     a40:	ed 91       	ld	r30, X+
     a42:	fc 91       	ld	r31, X
     a44:	11 97       	sbiw	r26, 0x01	; 1
     a46:	ec 17       	cp	r30, r28
     a48:	fd 07       	cpc	r31, r29
     a4a:	c8 f3       	brcs	.-14     	; 0xa3e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	8d 91       	ld	r24, X+
     a50:	9c 91       	ld	r25, X
     a52:	13 97       	sbiw	r26, 0x03	; 3
     a54:	9d 01       	movw	r18, r26
     a56:	28 0f       	add	r18, r24
     a58:	39 1f       	adc	r19, r25
     a5a:	c2 17       	cp	r28, r18
     a5c:	d3 07       	cpc	r29, r19
     a5e:	49 f4       	brne	.+18     	; 0xa72 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     a60:	2a 81       	ldd	r18, Y+2	; 0x02
     a62:	3b 81       	ldd	r19, Y+3	; 0x03
     a64:	82 0f       	add	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	13 96       	adiw	r26, 0x03	; 3
     a6a:	9c 93       	st	X, r25
     a6c:	8e 93       	st	-X, r24
     a6e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     a70:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	9b 81       	ldd	r25, Y+3	; 0x03
     a76:	9e 01       	movw	r18, r28
     a78:	28 0f       	add	r18, r24
     a7a:	39 1f       	adc	r19, r25
     a7c:	e2 17       	cp	r30, r18
     a7e:	f3 07       	cpc	r31, r19
     a80:	c1 f4       	brne	.+48     	; 0xab2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a82:	20 91 74 08 	lds	r18, 0x0874	; 0x800874 <pxEnd>
     a86:	30 91 75 08 	lds	r19, 0x0875	; 0x800875 <pxEnd+0x1>
     a8a:	e2 17       	cp	r30, r18
     a8c:	f3 07       	cpc	r31, r19
     a8e:	71 f0       	breq	.+28     	; 0xaac <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a90:	22 81       	ldd	r18, Z+2	; 0x02
     a92:	33 81       	ldd	r19, Z+3	; 0x03
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	9b 83       	std	Y+3, r25	; 0x03
     a9a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a9c:	ed 91       	ld	r30, X+
     a9e:	fc 91       	ld	r31, X
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	99 83       	std	Y+1, r25	; 0x01
     aa8:	88 83       	st	Y, r24
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     aac:	39 83       	std	Y+1, r19	; 0x01
     aae:	28 83       	st	Y, r18
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     ab2:	f9 83       	std	Y+1, r31	; 0x01
     ab4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     ab6:	ca 17       	cp	r28, r26
     ab8:	db 07       	cpc	r29, r27
     aba:	11 f0       	breq	.+4      	; 0xac0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     abc:	cd 93       	st	X+, r28
     abe:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     ad4:	0e 94 43 11 	call	0x2286	; 0x2286 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     ad8:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <pxEnd>
     adc:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <pxEnd+0x1>
     ae0:	89 2b       	or	r24, r25
     ae2:	09 f4       	brne	.+2      	; 0xae6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     ae4:	7d df       	rcall	.-262    	; 0x9e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ae6:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <xBlockAllocatedBit>
     aea:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <xBlockAllocatedBit+0x1>
     aee:	80 23       	and	r24, r16
     af0:	91 23       	and	r25, r17
     af2:	89 2b       	or	r24, r25
     af4:	09 f0       	breq	.+2      	; 0xaf8 <pvPortMalloc+0x32>
     af6:	76 c0       	rjmp	.+236    	; 0xbe4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     af8:	01 15       	cp	r16, r1
     afa:	11 05       	cpc	r17, r1
     afc:	49 f0       	breq	.+18     	; 0xb10 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     afe:	c8 01       	movw	r24, r16
     b00:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     b02:	08 17       	cp	r16, r24
     b04:	19 07       	cpc	r17, r25
     b06:	18 f0       	brcs	.+6      	; 0xb0e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     b08:	00 e0       	ldi	r16, 0x00	; 0
     b0a:	10 e0       	ldi	r17, 0x00	; 0
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     b0e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     b10:	01 15       	cp	r16, r1
     b12:	11 05       	cpc	r17, r1
     b14:	09 f4       	brne	.+2      	; 0xb18 <pvPortMalloc+0x52>
     b16:	69 c0       	rjmp	.+210    	; 0xbea <pvPortMalloc+0x124>
     b18:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <xFreeBytesRemaining>
     b1c:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <xFreeBytesRemaining+0x1>
     b20:	80 17       	cp	r24, r16
     b22:	91 07       	cpc	r25, r17
     b24:	08 f4       	brcc	.+2      	; 0xb28 <pvPortMalloc+0x62>
     b26:	64 c0       	rjmp	.+200    	; 0xbf0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     b28:	c0 91 76 08 	lds	r28, 0x0876	; 0x800876 <xStart>
     b2c:	d0 91 77 08 	lds	r29, 0x0877	; 0x800877 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     b30:	e6 e7       	ldi	r30, 0x76	; 118
     b32:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     b36:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     b38:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	80 17       	cp	r24, r16
     b40:	91 07       	cpc	r25, r17
     b42:	20 f4       	brcc	.+8      	; 0xb4c <pvPortMalloc+0x86>
     b44:	88 81       	ld	r24, Y
     b46:	99 81       	ldd	r25, Y+1	; 0x01
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	a9 f7       	brne	.-22     	; 0xb36 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     b4c:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <pxEnd>
     b50:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <pxEnd+0x1>
     b54:	c8 17       	cp	r28, r24
     b56:	d9 07       	cpc	r29, r25
     b58:	09 f4       	brne	.+2      	; 0xb5c <pvPortMalloc+0x96>
     b5a:	4d c0       	rjmp	.+154    	; 0xbf6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     b5c:	e0 80       	ld	r14, Z
     b5e:	f1 80       	ldd	r15, Z+1	; 0x01
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	e8 0e       	add	r14, r24
     b64:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b66:	88 81       	ld	r24, Y
     b68:	99 81       	ldd	r25, Y+1	; 0x01
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b6e:	2a 81       	ldd	r18, Y+2	; 0x02
     b70:	3b 81       	ldd	r19, Y+3	; 0x03
     b72:	20 1b       	sub	r18, r16
     b74:	31 0b       	sbc	r19, r17
     b76:	29 30       	cpi	r18, 0x09	; 9
     b78:	31 05       	cpc	r19, r1
     b7a:	48 f0       	brcs	.+18     	; 0xb8e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b7c:	ce 01       	movw	r24, r28
     b7e:	80 0f       	add	r24, r16
     b80:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b82:	fc 01       	movw	r30, r24
     b84:	33 83       	std	Z+3, r19	; 0x03
     b86:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b88:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b8a:	0a 83       	std	Y+2, r16	; 0x02
     b8c:	52 df       	rcall	.-348    	; 0xa32 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b8e:	2a 81       	ldd	r18, Y+2	; 0x02
     b90:	3b 81       	ldd	r19, Y+3	; 0x03
     b92:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <xFreeBytesRemaining>
     b96:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <xFreeBytesRemaining+0x1>
     b9a:	82 1b       	sub	r24, r18
     b9c:	93 0b       	sbc	r25, r19
     b9e:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <xFreeBytesRemaining+0x1>
     ba2:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     ba6:	40 91 70 08 	lds	r20, 0x0870	; 0x800870 <xMinimumEverFreeBytesRemaining>
     baa:	50 91 71 08 	lds	r21, 0x0871	; 0x800871 <xMinimumEverFreeBytesRemaining+0x1>
     bae:	84 17       	cp	r24, r20
     bb0:	95 07       	cpc	r25, r21
     bb2:	20 f4       	brcc	.+8      	; 0xbbc <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     bb4:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <xMinimumEverFreeBytesRemaining+0x1>
     bb8:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     bbc:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <xBlockAllocatedBit>
     bc0:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <xBlockAllocatedBit+0x1>
     bc4:	28 2b       	or	r18, r24
     bc6:	39 2b       	or	r19, r25
     bc8:	3b 83       	std	Y+3, r19	; 0x03
     bca:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     bcc:	19 82       	std	Y+1, r1	; 0x01
     bce:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     bd0:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <xNumberOfSuccessfulAllocations>
     bd4:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <xNumberOfSuccessfulAllocations+0x1>
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <xNumberOfSuccessfulAllocations+0x1>
     bde:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <xNumberOfSuccessfulAllocations>
     be2:	0b c0       	rjmp	.+22     	; 0xbfa <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     be4:	e1 2c       	mov	r14, r1
     be6:	f1 2c       	mov	r15, r1
     be8:	08 c0       	rjmp	.+16     	; 0xbfa <pvPortMalloc+0x134>
     bea:	e1 2c       	mov	r14, r1
     bec:	f1 2c       	mov	r15, r1
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <pvPortMalloc+0x134>
     bf0:	e1 2c       	mov	r14, r1
     bf2:	f1 2c       	mov	r15, r1
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <pvPortMalloc+0x134>
     bf6:	e1 2c       	mov	r14, r1
     bf8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     bfa:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     bfe:	e1 14       	cp	r14, r1
     c00:	f1 04       	cpc	r15, r1
     c02:	11 f4       	brne	.+4      	; 0xc08 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     c04:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     c08:	c7 01       	movw	r24, r14
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	91 f1       	breq	.+100    	; 0xc88 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     c24:	ec 01       	movw	r28, r24
     c26:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     c28:	4a 81       	ldd	r20, Y+2	; 0x02
     c2a:	5b 81       	ldd	r21, Y+3	; 0x03
     c2c:	20 91 6a 08 	lds	r18, 0x086A	; 0x80086a <xBlockAllocatedBit>
     c30:	30 91 6b 08 	lds	r19, 0x086B	; 0x80086b <xBlockAllocatedBit+0x1>
     c34:	ba 01       	movw	r22, r20
     c36:	62 23       	and	r22, r18
     c38:	73 23       	and	r23, r19
     c3a:	67 2b       	or	r22, r23
     c3c:	29 f1       	breq	.+74     	; 0xc88 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     c3e:	68 81       	ld	r22, Y
     c40:	79 81       	ldd	r23, Y+1	; 0x01
     c42:	67 2b       	or	r22, r23
     c44:	09 f5       	brne	.+66     	; 0xc88 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     c46:	20 95       	com	r18
     c48:	30 95       	com	r19
     c4a:	24 23       	and	r18, r20
     c4c:	35 23       	and	r19, r21
     c4e:	3b 83       	std	Y+3, r19	; 0x03
     c50:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     c52:	0e 94 43 11 	call	0x2286	; 0x2286 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <xFreeBytesRemaining>
     c5e:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <xFreeBytesRemaining+0x1>
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <xFreeBytesRemaining+0x1>
     c6a:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     c6e:	ce 01       	movw	r24, r28
     c70:	e0 de       	rcall	.-576    	; 0xa32 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     c72:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <xNumberOfSuccessfulFrees>
     c76:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <xNumberOfSuccessfulFrees+0x1>
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <xNumberOfSuccessfulFrees+0x1>
     c80:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c84:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c92:	fc 01       	movw	r30, r24
     c94:	03 96       	adiw	r24, 0x03	; 3
     c96:	92 83       	std	Z+2, r25	; 0x02
     c98:	81 83       	std	Z+1, r24	; 0x01
     c9a:	4f ef       	ldi	r20, 0xFF	; 255
     c9c:	5f ef       	ldi	r21, 0xFF	; 255
     c9e:	ba 01       	movw	r22, r20
     ca0:	43 83       	std	Z+3, r20	; 0x03
     ca2:	54 83       	std	Z+4, r21	; 0x04
     ca4:	65 83       	std	Z+5, r22	; 0x05
     ca6:	76 83       	std	Z+6, r23	; 0x06
     ca8:	90 87       	std	Z+8, r25	; 0x08
     caa:	87 83       	std	Z+7, r24	; 0x07
     cac:	92 87       	std	Z+10, r25	; 0x0a
     cae:	81 87       	std	Z+9, r24	; 0x09
     cb0:	10 82       	st	Z, r1
     cb2:	08 95       	ret

00000cb4 <vListInitialiseItem>:
     cb4:	fc 01       	movw	r30, r24
     cb6:	13 86       	std	Z+11, r1	; 0x0b
     cb8:	12 86       	std	Z+10, r1	; 0x0a
     cba:	08 95       	ret

00000cbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cc6:	08 81       	ld	r16, Y
     cc8:	19 81       	ldd	r17, Y+1	; 0x01
     cca:	2a 81       	ldd	r18, Y+2	; 0x02
     ccc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     cce:	0f 3f       	cpi	r16, 0xFF	; 255
     cd0:	4f ef       	ldi	r20, 0xFF	; 255
     cd2:	14 07       	cpc	r17, r20
     cd4:	24 07       	cpc	r18, r20
     cd6:	34 07       	cpc	r19, r20
     cd8:	21 f4       	brne	.+8      	; 0xce2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     cda:	fc 01       	movw	r30, r24
     cdc:	a1 85       	ldd	r26, Z+9	; 0x09
     cde:	b2 85       	ldd	r27, Z+10	; 0x0a
     ce0:	11 c0       	rjmp	.+34     	; 0xd04 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ce2:	dc 01       	movw	r26, r24
     ce4:	13 96       	adiw	r26, 0x03	; 3
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <vListInsert+0x2e>
     ce8:	df 01       	movw	r26, r30
     cea:	14 96       	adiw	r26, 0x04	; 4
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	15 97       	sbiw	r26, 0x05	; 5
     cf2:	40 81       	ld	r20, Z
     cf4:	51 81       	ldd	r21, Z+1	; 0x01
     cf6:	62 81       	ldd	r22, Z+2	; 0x02
     cf8:	73 81       	ldd	r23, Z+3	; 0x03
     cfa:	04 17       	cp	r16, r20
     cfc:	15 07       	cpc	r17, r21
     cfe:	26 07       	cpc	r18, r22
     d00:	37 07       	cpc	r19, r23
     d02:	90 f7       	brcc	.-28     	; 0xce8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     d04:	14 96       	adiw	r26, 0x04	; 4
     d06:	ed 91       	ld	r30, X+
     d08:	fc 91       	ld	r31, X
     d0a:	15 97       	sbiw	r26, 0x05	; 5
     d0c:	fd 83       	std	Y+5, r31	; 0x05
     d0e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d10:	d7 83       	std	Z+7, r29	; 0x07
     d12:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     d14:	bf 83       	std	Y+7, r27	; 0x07
     d16:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     d18:	15 96       	adiw	r26, 0x05	; 5
     d1a:	dc 93       	st	X, r29
     d1c:	ce 93       	st	-X, r28
     d1e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d20:	9b 87       	std	Y+11, r25	; 0x0b
     d22:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     d24:	fc 01       	movw	r30, r24
     d26:	20 81       	ld	r18, Z
     d28:	2f 5f       	subi	r18, 0xFF	; 255
     d2a:	20 83       	st	Z, r18
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     d3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     d3e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d40:	c4 81       	ldd	r28, Z+4	; 0x04
     d42:	d5 81       	ldd	r29, Z+5	; 0x05
     d44:	86 81       	ldd	r24, Z+6	; 0x06
     d46:	97 81       	ldd	r25, Z+7	; 0x07
     d48:	9f 83       	std	Y+7, r25	; 0x07
     d4a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d4c:	c6 81       	ldd	r28, Z+6	; 0x06
     d4e:	d7 81       	ldd	r29, Z+7	; 0x07
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	95 81       	ldd	r25, Z+5	; 0x05
     d54:	9d 83       	std	Y+5, r25	; 0x05
     d56:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	8d 91       	ld	r24, X+
     d5c:	9c 91       	ld	r25, X
     d5e:	12 97       	sbiw	r26, 0x02	; 2
     d60:	e8 17       	cp	r30, r24
     d62:	f9 07       	cpc	r31, r25
     d64:	31 f4       	brne	.+12     	; 0xd72 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d66:	86 81       	ldd	r24, Z+6	; 0x06
     d68:	97 81       	ldd	r25, Z+7	; 0x07
     d6a:	12 96       	adiw	r26, 0x02	; 2
     d6c:	9c 93       	st	X, r25
     d6e:	8e 93       	st	-X, r24
     d70:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d72:	13 86       	std	Z+11, r1	; 0x0b
     d74:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d76:	8c 91       	ld	r24, X
     d78:	81 50       	subi	r24, 0x01	; 1
     d7a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d7c:	8c 91       	ld	r24, X
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d84:	a8 95       	wdr
     d86:	90 ec       	ldi	r25, 0xC0	; 192
     d88:	88 e1       	ldi	r24, 0x18	; 24
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	a8 95       	wdr
     d90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d9a:	08 95       	ret

00000d9c <pxPortInitialiseStack>:
     d9c:	fc 01       	movw	r30, r24
     d9e:	60 83       	st	Z, r22
     da0:	31 97       	sbiw	r30, 0x01	; 1
     da2:	70 83       	st	Z, r23
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	10 82       	st	Z, r1
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	10 82       	st	Z, r1
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	20 e8       	ldi	r18, 0x80	; 128
     db0:	20 83       	st	Z, r18
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	10 82       	st	Z, r1
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	10 82       	st	Z, r1
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	10 82       	st	Z, r1
     dbe:	77 97       	sbiw	r30, 0x17	; 23
     dc0:	40 83       	st	Z, r20
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	50 83       	st	Z, r21
     dc6:	86 97       	sbiw	r24, 0x26	; 38
     dc8:	08 95       	ret

00000dca <xPortStartScheduler>:
     dca:	dc df       	rcall	.-72     	; 0xd84 <prvSetupTimerInterrupt>
     dcc:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
     dd0:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
     dd4:	cd 91       	ld	r28, X+
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	dd 91       	ld	r29, X+
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	3f 90       	pop	r3
     e16:	2f 90       	pop	r2
     e18:	1f 90       	pop	r1
     e1a:	0f 90       	pop	r0
     e1c:	0c be       	out	0x3c, r0	; 60
     e1e:	0f 90       	pop	r0
     e20:	0b be       	out	0x3b, r0	; 59
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	08 95       	ret
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	08 95       	ret

00000e2e <vPortYield>:
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	0f 92       	push	r0
     e36:	0b b6       	in	r0, 0x3b	; 59
     e38:	0f 92       	push	r0
     e3a:	0c b6       	in	r0, 0x3c	; 60
     e3c:	0f 92       	push	r0
     e3e:	1f 92       	push	r1
     e40:	11 24       	eor	r1, r1
     e42:	2f 92       	push	r2
     e44:	3f 92       	push	r3
     e46:	4f 92       	push	r4
     e48:	5f 92       	push	r5
     e4a:	6f 92       	push	r6
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
     e7e:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
     e82:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
     e86:	0d b6       	in	r0, 0x3d	; 61
     e88:	0d 92       	st	X+, r0
     e8a:	0e b6       	in	r0, 0x3e	; 62
     e8c:	0d 92       	st	X+, r0
     e8e:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSwitchContext>
     e92:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
     e96:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
     e9a:	cd 91       	ld	r28, X+
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	dd 91       	ld	r29, X+
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	5f 90       	pop	r5
     ed8:	4f 90       	pop	r4
     eda:	3f 90       	pop	r3
     edc:	2f 90       	pop	r2
     ede:	1f 90       	pop	r1
     ee0:	0f 90       	pop	r0
     ee2:	0c be       	out	0x3c, r0	; 60
     ee4:	0f 90       	pop	r0
     ee6:	0b be       	out	0x3b, r0	; 59
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	08 95       	ret

00000ef0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	0f 92       	push	r0
     ef8:	0b b6       	in	r0, 0x3b	; 59
     efa:	0f 92       	push	r0
     efc:	0c b6       	in	r0, 0x3c	; 60
     efe:	0f 92       	push	r0
     f00:	1f 92       	push	r1
     f02:	11 24       	eor	r1, r1
     f04:	2f 92       	push	r2
     f06:	3f 92       	push	r3
     f08:	4f 92       	push	r4
     f0a:	5f 92       	push	r5
     f0c:	6f 92       	push	r6
     f0e:	7f 92       	push	r7
     f10:	8f 92       	push	r8
     f12:	9f 92       	push	r9
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	2f 93       	push	r18
     f26:	3f 93       	push	r19
     f28:	4f 93       	push	r20
     f2a:	5f 93       	push	r21
     f2c:	6f 93       	push	r22
     f2e:	7f 93       	push	r23
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	af 93       	push	r26
     f36:	bf 93       	push	r27
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
     f44:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
     f48:	0d b6       	in	r0, 0x3d	; 61
     f4a:	0d 92       	st	X+, r0
     f4c:	0e b6       	in	r0, 0x3e	; 62
     f4e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     f50:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     f52:	0e 94 57 11 	call	0x22ae	; 0x22ae <xTaskIncrementTick>
     f56:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f58:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     f5c:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
     f60:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
     f64:	cd 91       	ld	r28, X+
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	dd 91       	ld	r29, X+
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	bf 90       	pop	r11
     f96:	af 90       	pop	r10
     f98:	9f 90       	pop	r9
     f9a:	8f 90       	pop	r8
     f9c:	7f 90       	pop	r7
     f9e:	6f 90       	pop	r6
     fa0:	5f 90       	pop	r5
     fa2:	4f 90       	pop	r4
     fa4:	3f 90       	pop	r3
     fa6:	2f 90       	pop	r2
     fa8:	1f 90       	pop	r1
     faa:	0f 90       	pop	r0
     fac:	0c be       	out	0x3c, r0	; 60
     fae:	0f 90       	pop	r0
     fb0:	0b be       	out	0x3b, r0	; 59
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     fb8:	08 95       	ret

00000fba <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     fba:	9a df       	rcall	.-204    	; 0xef0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     fbc:	18 95       	reti

00000fbe <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     fbe:	dc 01       	movw	r26, r24
     fc0:	53 96       	adiw	r26, 0x13	; 19
     fc2:	2c 91       	ld	r18, X
     fc4:	53 97       	sbiw	r26, 0x13	; 19
     fc6:	22 23       	and	r18, r18
     fc8:	41 f0       	breq	.+16     	; 0xfda <prvGetDisinheritPriorityAfterTimeout+0x1c>
     fca:	5a 96       	adiw	r26, 0x1a	; 26
     fcc:	ed 91       	ld	r30, X+
     fce:	fc 91       	ld	r31, X
     fd0:	5b 97       	sbiw	r26, 0x1b	; 27
     fd2:	90 81       	ld	r25, Z
     fd4:	8a e0       	ldi	r24, 0x0A	; 10
     fd6:	89 1b       	sub	r24, r25
     fd8:	08 95       	ret
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	08 95       	ret

00000fde <prvIsQueueEmpty>:
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	0f 92       	push	r0
     fe4:	fc 01       	movw	r30, r24
     fe6:	86 8d       	ldd	r24, Z+30	; 0x1e
     fe8:	81 11       	cpse	r24, r1
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <prvIsQueueEmpty+0x12>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <prvIsQueueEmpty+0x14>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	08 95       	ret

00000ff8 <prvIsQueueFull>:
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	0f 92       	push	r0
     ffe:	fc 01       	movw	r30, r24
    1000:	26 8d       	ldd	r18, Z+30	; 0x1e
    1002:	87 8d       	ldd	r24, Z+31	; 0x1f
    1004:	28 13       	cpse	r18, r24
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	01 c0       	rjmp	.+2      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	08 95       	ret

00001014 <prvCopyDataToQueue>:
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
    101e:	04 2f       	mov	r16, r20
    1020:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1022:	48 a1       	ldd	r20, Y+32	; 0x20
    1024:	41 11       	cpse	r20, r1
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <prvCopyDataToQueue+0x2c>
    1028:	88 81       	ld	r24, Y
    102a:	99 81       	ldd	r25, Y+1	; 0x01
    102c:	89 2b       	or	r24, r25
    102e:	09 f0       	breq	.+2      	; 0x1032 <prvCopyDataToQueue+0x1e>
    1030:	42 c0       	rjmp	.+132    	; 0x10b6 <prvCopyDataToQueue+0xa2>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <xTaskPriorityDisinherit>
    103a:	1d 82       	std	Y+5, r1	; 0x05
    103c:	1c 82       	std	Y+4, r1	; 0x04
    103e:	42 c0       	rjmp	.+132    	; 0x10c4 <prvCopyDataToQueue+0xb0>
    1040:	01 11       	cpse	r16, r1
    1042:	17 c0       	rjmp	.+46     	; 0x1072 <prvCopyDataToQueue+0x5e>
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	0e 94 01 32 	call	0x6402	; 0x6402 <memcpy>
    104e:	28 a1       	ldd	r18, Y+32	; 0x20
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	82 0f       	add	r24, r18
    1056:	91 1d       	adc	r25, r1
    1058:	9b 83       	std	Y+3, r25	; 0x03
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	82 17       	cp	r24, r18
    1062:	93 07       	cpc	r25, r19
    1064:	50 f1       	brcs	.+84     	; 0x10ba <prvCopyDataToQueue+0xa6>
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	9b 83       	std	Y+3, r25	; 0x03
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	29 c0       	rjmp	.+82     	; 0x10c4 <prvCopyDataToQueue+0xb0>
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	0e 94 01 32 	call	0x6402	; 0x6402 <memcpy>
    107c:	88 a1       	ldd	r24, Y+32	; 0x20
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	91 95       	neg	r25
    1082:	81 95       	neg	r24
    1084:	91 09       	sbc	r25, r1
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	3f 81       	ldd	r19, Y+7	; 0x07
    108a:	28 0f       	add	r18, r24
    108c:	39 1f       	adc	r19, r25
    108e:	3f 83       	std	Y+7, r19	; 0x07
    1090:	2e 83       	std	Y+6, r18	; 0x06
    1092:	48 81       	ld	r20, Y
    1094:	59 81       	ldd	r21, Y+1	; 0x01
    1096:	24 17       	cp	r18, r20
    1098:	35 07       	cpc	r19, r21
    109a:	30 f4       	brcc	.+12     	; 0x10a8 <prvCopyDataToQueue+0x94>
    109c:	2c 81       	ldd	r18, Y+4	; 0x04
    109e:	3d 81       	ldd	r19, Y+5	; 0x05
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	9f 83       	std	Y+7, r25	; 0x07
    10a6:	8e 83       	std	Y+6, r24	; 0x06
    10a8:	02 30       	cpi	r16, 0x02	; 2
    10aa:	49 f4       	brne	.+18     	; 0x10be <prvCopyDataToQueue+0xaa>
    10ac:	11 23       	and	r17, r17
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <prvCopyDataToQueue+0xae>
    10b0:	11 50       	subi	r17, 0x01	; 1
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <prvCopyDataToQueue+0xb0>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <prvCopyDataToQueue+0xb0>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <prvCopyDataToQueue+0xb0>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <prvCopyDataToQueue+0xb0>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	1f 5f       	subi	r17, 0xFF	; 255
    10c6:	1e 8f       	std	Y+30, r17	; 0x1e
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	08 95       	ret

000010d2 <prvCopyDataFromQueue>:
    10d2:	fc 01       	movw	r30, r24
    10d4:	40 a1       	ldd	r20, Z+32	; 0x20
    10d6:	44 23       	and	r20, r20
    10d8:	a9 f0       	breq	.+42     	; 0x1104 <prvCopyDataFromQueue+0x32>
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	26 81       	ldd	r18, Z+6	; 0x06
    10de:	37 81       	ldd	r19, Z+7	; 0x07
    10e0:	24 0f       	add	r18, r20
    10e2:	35 1f       	adc	r19, r21
    10e4:	37 83       	std	Z+7, r19	; 0x07
    10e6:	26 83       	std	Z+6, r18	; 0x06
    10e8:	84 81       	ldd	r24, Z+4	; 0x04
    10ea:	95 81       	ldd	r25, Z+5	; 0x05
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <prvCopyDataFromQueue+0x28>
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	97 83       	std	Z+7, r25	; 0x07
    10f8:	86 83       	std	Z+6, r24	; 0x06
    10fa:	cb 01       	movw	r24, r22
    10fc:	66 81       	ldd	r22, Z+6	; 0x06
    10fe:	77 81       	ldd	r23, Z+7	; 0x07
    1100:	0c 94 01 32 	jmp	0x6402	; 0x6402 <memcpy>
    1104:	08 95       	ret

00001106 <prvUnlockQueue>:
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ec 01       	movw	r28, r24
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	0f 92       	push	r0
    1114:	1a a1       	ldd	r17, Y+34	; 0x22
    1116:	0b c0       	rjmp	.+22     	; 0x112e <prvUnlockQueue+0x28>
    1118:	8b 89       	ldd	r24, Y+19	; 0x13
    111a:	88 23       	and	r24, r24
    111c:	51 f0       	breq	.+20     	; 0x1132 <prvUnlockQueue+0x2c>
    111e:	ce 01       	movw	r24, r28
    1120:	43 96       	adiw	r24, 0x13	; 19
    1122:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    1126:	81 11       	cpse	r24, r1
    1128:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <vTaskMissedYield>
    112c:	11 50       	subi	r17, 0x01	; 1
    112e:	11 16       	cp	r1, r17
    1130:	9c f3       	brlt	.-26     	; 0x1118 <prvUnlockQueue+0x12>
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	8a a3       	std	Y+34, r24	; 0x22
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	0f 92       	push	r0
    1140:	19 a1       	ldd	r17, Y+33	; 0x21
    1142:	0b c0       	rjmp	.+22     	; 0x115a <prvUnlockQueue+0x54>
    1144:	88 85       	ldd	r24, Y+8	; 0x08
    1146:	88 23       	and	r24, r24
    1148:	51 f0       	breq	.+20     	; 0x115e <prvUnlockQueue+0x58>
    114a:	ce 01       	movw	r24, r28
    114c:	08 96       	adiw	r24, 0x08	; 8
    114e:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    1152:	81 11       	cpse	r24, r1
    1154:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <vTaskMissedYield>
    1158:	11 50       	subi	r17, 0x01	; 1
    115a:	11 16       	cp	r1, r17
    115c:	9c f3       	brlt	.-26     	; 0x1144 <prvUnlockQueue+0x3e>
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	89 a3       	std	Y+33, r24	; 0x21
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	08 95       	ret

0000116e <xQueueGenericReset>:
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	0f 92       	push	r0
    117a:	e8 81       	ld	r30, Y
    117c:	f9 81       	ldd	r31, Y+1	; 0x01
    117e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1180:	28 a1       	ldd	r18, Y+32	; 0x20
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	82 9f       	mul	r24, r18
    1188:	a0 01       	movw	r20, r0
    118a:	83 9f       	mul	r24, r19
    118c:	50 0d       	add	r21, r0
    118e:	92 9f       	mul	r25, r18
    1190:	50 0d       	add	r21, r0
    1192:	11 24       	eor	r1, r1
    1194:	4e 0f       	add	r20, r30
    1196:	5f 1f       	adc	r21, r31
    1198:	5d 83       	std	Y+5, r21	; 0x05
    119a:	4c 83       	std	Y+4, r20	; 0x04
    119c:	1e 8e       	std	Y+30, r1	; 0x1e
    119e:	fb 83       	std	Y+3, r31	; 0x03
    11a0:	ea 83       	std	Y+2, r30	; 0x02
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	28 9f       	mul	r18, r24
    11a6:	a0 01       	movw	r20, r0
    11a8:	29 9f       	mul	r18, r25
    11aa:	50 0d       	add	r21, r0
    11ac:	38 9f       	mul	r19, r24
    11ae:	50 0d       	add	r21, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	cf 01       	movw	r24, r30
    11b4:	84 0f       	add	r24, r20
    11b6:	95 1f       	adc	r25, r21
    11b8:	9f 83       	std	Y+7, r25	; 0x07
    11ba:	8e 83       	std	Y+6, r24	; 0x06
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	89 a3       	std	Y+33, r24	; 0x21
    11c0:	8a a3       	std	Y+34, r24	; 0x22
    11c2:	61 11       	cpse	r22, r1
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <xQueueGenericReset+0x6e>
    11c6:	88 85       	ldd	r24, Y+8	; 0x08
    11c8:	88 23       	and	r24, r24
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <xQueueGenericReset+0x7a>
    11cc:	ce 01       	movw	r24, r28
    11ce:	08 96       	adiw	r24, 0x08	; 8
    11d0:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    11d4:	88 23       	and	r24, r24
    11d6:	41 f0       	breq	.+16     	; 0x11e8 <xQueueGenericReset+0x7a>
    11d8:	2a de       	rcall	.-940    	; 0xe2e <vPortYield>
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <xQueueGenericReset+0x7a>
    11dc:	ce 01       	movw	r24, r28
    11de:	08 96       	adiw	r24, 0x08	; 8
    11e0:	58 dd       	rcall	.-1360   	; 0xc92 <vListInitialise>
    11e2:	ce 01       	movw	r24, r28
    11e4:	43 96       	adiw	r24, 0x13	; 19
    11e6:	55 dd       	rcall	.-1366   	; 0xc92 <vListInitialise>
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	08 95       	ret

000011f4 <prvInitialiseNewQueue>:
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	f8 01       	movw	r30, r16
    11fa:	61 11       	cpse	r22, r1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <prvInitialiseNewQueue+0x10>
    11fe:	11 83       	std	Z+1, r17	; 0x01
    1200:	00 83       	st	Z, r16
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <prvInitialiseNewQueue+0x14>
    1204:	51 83       	std	Z+1, r21	; 0x01
    1206:	40 83       	st	Z, r20
    1208:	87 8f       	std	Z+31, r24	; 0x1f
    120a:	60 a3       	std	Z+32, r22	; 0x20
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	cf 01       	movw	r24, r30
    1210:	ae df       	rcall	.-164    	; 0x116e <xQueueGenericReset>
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <xQueueGenericCreate>:
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	f8 2e       	mov	r15, r24
    1228:	e6 2e       	mov	r14, r22
    122a:	d4 2e       	mov	r13, r20
    122c:	86 9f       	mul	r24, r22
    122e:	c0 01       	movw	r24, r0
    1230:	11 24       	eor	r1, r1
    1232:	83 96       	adiw	r24, 0x23	; 35
    1234:	48 dc       	rcall	.-1904   	; 0xac6 <pvPortMalloc>
    1236:	ec 01       	movw	r28, r24
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	41 f0       	breq	.+16     	; 0x124c <xQueueGenericCreate+0x34>
    123c:	8c 01       	movw	r16, r24
    123e:	2d 2d       	mov	r18, r13
    1240:	ac 01       	movw	r20, r24
    1242:	4d 5d       	subi	r20, 0xDD	; 221
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	6e 2d       	mov	r22, r14
    1248:	8f 2d       	mov	r24, r15
    124a:	d4 df       	rcall	.-88     	; 0x11f4 <prvInitialiseNewQueue>
    124c:	ce 01       	movw	r24, r28
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	08 95       	ret

0000125e <xQueueGenericSend>:
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	29 97       	sbiw	r28, 0x09	; 9
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	7c 01       	movw	r14, r24
    1280:	6b 01       	movw	r12, r22
    1282:	2e 83       	std	Y+6, r18	; 0x06
    1284:	3f 83       	std	Y+7, r19	; 0x07
    1286:	48 87       	std	Y+8, r20	; 0x08
    1288:	59 87       	std	Y+9, r21	; 0x09
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	0f 92       	push	r0
    1292:	f7 01       	movw	r30, r14
    1294:	96 8d       	ldd	r25, Z+30	; 0x1e
    1296:	87 8d       	ldd	r24, Z+31	; 0x1f
    1298:	98 17       	cp	r25, r24
    129a:	10 f0       	brcs	.+4      	; 0x12a0 <xQueueGenericSend+0x42>
    129c:	02 30       	cpi	r16, 0x02	; 2
    129e:	b1 f4       	brne	.+44     	; 0x12cc <xQueueGenericSend+0x6e>
    12a0:	40 2f       	mov	r20, r16
    12a2:	b6 01       	movw	r22, r12
    12a4:	c7 01       	movw	r24, r14
    12a6:	b6 de       	rcall	.-660    	; 0x1014 <prvCopyDataToQueue>
    12a8:	f7 01       	movw	r30, r14
    12aa:	93 89       	ldd	r25, Z+19	; 0x13
    12ac:	99 23       	and	r25, r25
    12ae:	41 f0       	breq	.+16     	; 0x12c0 <xQueueGenericSend+0x62>
    12b0:	c7 01       	movw	r24, r14
    12b2:	43 96       	adiw	r24, 0x13	; 19
    12b4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    12b8:	88 23       	and	r24, r24
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <xQueueGenericSend+0x66>
    12bc:	b8 dd       	rcall	.-1168   	; 0xe2e <vPortYield>
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <xQueueGenericSend+0x66>
    12c0:	81 11       	cpse	r24, r1
    12c2:	b5 dd       	rcall	.-1174   	; 0xe2e <vPortYield>
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	4c c0       	rjmp	.+152    	; 0x1364 <xQueueGenericSend+0x106>
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	9f 81       	ldd	r25, Y+7	; 0x07
    12d0:	a8 85       	ldd	r26, Y+8	; 0x08
    12d2:	b9 85       	ldd	r27, Y+9	; 0x09
    12d4:	89 2b       	or	r24, r25
    12d6:	8a 2b       	or	r24, r26
    12d8:	8b 2b       	or	r24, r27
    12da:	21 f4       	brne	.+8      	; 0x12e4 <xQueueGenericSend+0x86>
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	40 c0       	rjmp	.+128    	; 0x1364 <xQueueGenericSend+0x106>
    12e4:	11 11       	cpse	r17, r1
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <xQueueGenericSend+0x94>
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <vTaskInternalSetTimeOutState>
    12f0:	11 e0       	ldi	r17, 0x01	; 1
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	c7 d7       	rcall	.+3982   	; 0x2286 <vTaskSuspendAll>
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	0f 92       	push	r0
    12fe:	f7 01       	movw	r30, r14
    1300:	81 a1       	ldd	r24, Z+33	; 0x21
    1302:	8f 3f       	cpi	r24, 0xFF	; 255
    1304:	09 f4       	brne	.+2      	; 0x1308 <xQueueGenericSend+0xaa>
    1306:	11 a2       	std	Z+33, r1	; 0x21
    1308:	f7 01       	movw	r30, r14
    130a:	82 a1       	ldd	r24, Z+34	; 0x22
    130c:	8f 3f       	cpi	r24, 0xFF	; 255
    130e:	09 f4       	brne	.+2      	; 0x1312 <xQueueGenericSend+0xb4>
    1310:	12 a2       	std	Z+34, r1	; 0x22
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	be 01       	movw	r22, r28
    1318:	6a 5f       	subi	r22, 0xFA	; 250
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	0e 94 57 16 	call	0x2cae	; 0x2cae <xTaskCheckForTimeOut>
    1324:	81 11       	cpse	r24, r1
    1326:	19 c0       	rjmp	.+50     	; 0x135a <xQueueGenericSend+0xfc>
    1328:	c7 01       	movw	r24, r14
    132a:	66 de       	rcall	.-820    	; 0xff8 <prvIsQueueFull>
    132c:	88 23       	and	r24, r24
    132e:	81 f0       	breq	.+32     	; 0x1350 <xQueueGenericSend+0xf2>
    1330:	4e 81       	ldd	r20, Y+6	; 0x06
    1332:	5f 81       	ldd	r21, Y+7	; 0x07
    1334:	68 85       	ldd	r22, Y+8	; 0x08
    1336:	79 85       	ldd	r23, Y+9	; 0x09
    1338:	c7 01       	movw	r24, r14
    133a:	08 96       	adiw	r24, 0x08	; 8
    133c:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskPlaceOnEventList>
    1340:	c7 01       	movw	r24, r14
    1342:	e1 de       	rcall	.-574    	; 0x1106 <prvUnlockQueue>
    1344:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
    1348:	81 11       	cpse	r24, r1
    134a:	a0 cf       	rjmp	.-192    	; 0x128c <xQueueGenericSend+0x2e>
    134c:	70 dd       	rcall	.-1312   	; 0xe2e <vPortYield>
    134e:	9e cf       	rjmp	.-196    	; 0x128c <xQueueGenericSend+0x2e>
    1350:	c7 01       	movw	r24, r14
    1352:	d9 de       	rcall	.-590    	; 0x1106 <prvUnlockQueue>
    1354:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
    1358:	99 cf       	rjmp	.-206    	; 0x128c <xQueueGenericSend+0x2e>
    135a:	c7 01       	movw	r24, r14
    135c:	d4 de       	rcall	.-600    	; 0x1106 <prvUnlockQueue>
    135e:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	29 96       	adiw	r28, 0x09	; 9
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	08 95       	ret

00001382 <prvInitialiseMutex>:
    1382:	0f 93       	push	r16
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f0       	breq	.+26     	; 0x13a2 <prvInitialiseMutex+0x20>
    1388:	fc 01       	movw	r30, r24
    138a:	15 82       	std	Z+5, r1	; 0x05
    138c:	14 82       	std	Z+4, r1	; 0x04
    138e:	11 82       	std	Z+1, r1	; 0x01
    1390:	10 82       	st	Z, r1
    1392:	16 82       	std	Z+6, r1	; 0x06
    1394:	00 e0       	ldi	r16, 0x00	; 0
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	5e df       	rcall	.-324    	; 0x125e <xQueueGenericSend>
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <xQueueCreateMutex>:
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	48 2f       	mov	r20, r24
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	33 df       	rcall	.-410    	; 0x1218 <xQueueGenericCreate>
    13b2:	ec 01       	movw	r28, r24
    13b4:	e6 df       	rcall	.-52     	; 0x1382 <prvInitialiseMutex>
    13b6:	ce 01       	movw	r24, r28
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <xQueueGenericSendFromISR>:
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	8a 01       	movw	r16, r20
    13cc:	fc 01       	movw	r30, r24
    13ce:	56 8d       	ldd	r21, Z+30	; 0x1e
    13d0:	37 8d       	ldd	r19, Z+31	; 0x1f
    13d2:	53 17       	cp	r21, r19
    13d4:	10 f0       	brcs	.+4      	; 0x13da <xQueueGenericSendFromISR+0x1c>
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	f9 f4       	brne	.+62     	; 0x1418 <xQueueGenericSendFromISR+0x5a>
    13da:	42 2f       	mov	r20, r18
    13dc:	78 01       	movw	r14, r16
    13de:	ec 01       	movw	r28, r24
    13e0:	1a a1       	ldd	r17, Y+34	; 0x22
    13e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e4:	ce 01       	movw	r24, r28
    13e6:	16 de       	rcall	.-980    	; 0x1014 <prvCopyDataToQueue>
    13e8:	1f 3f       	cpi	r17, 0xFF	; 255
    13ea:	81 f4       	brne	.+32     	; 0x140c <xQueueGenericSendFromISR+0x4e>
    13ec:	8b 89       	ldd	r24, Y+19	; 0x13
    13ee:	88 23       	and	r24, r24
    13f0:	a9 f0       	breq	.+42     	; 0x141c <xQueueGenericSendFromISR+0x5e>
    13f2:	ce 01       	movw	r24, r28
    13f4:	43 96       	adiw	r24, 0x13	; 19
    13f6:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    13fa:	88 23       	and	r24, r24
    13fc:	89 f0       	breq	.+34     	; 0x1420 <xQueueGenericSendFromISR+0x62>
    13fe:	e1 14       	cp	r14, r1
    1400:	f1 04       	cpc	r15, r1
    1402:	81 f0       	breq	.+32     	; 0x1424 <xQueueGenericSendFromISR+0x66>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	f7 01       	movw	r30, r14
    1408:	80 83       	st	Z, r24
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <xQueueGenericSendFromISR+0x68>
    140c:	ff 24       	eor	r15, r15
    140e:	f3 94       	inc	r15
    1410:	f1 0e       	add	r15, r17
    1412:	fa a2       	std	Y+34, r15	; 0x22
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	07 c0       	rjmp	.+14     	; 0x1426 <xQueueGenericSendFromISR+0x68>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <xQueueGenericSendFromISR+0x68>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <xQueueGenericSendFromISR+0x68>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <xQueueGenericSendFromISR+0x68>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	08 95       	ret

00001434 <xQueueReceive>:
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	29 97       	sbiw	r28, 0x09	; 9
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	8c 01       	movw	r16, r24
    1456:	6b 01       	movw	r12, r22
    1458:	2e 83       	std	Y+6, r18	; 0x06
    145a:	3f 83       	std	Y+7, r19	; 0x07
    145c:	48 87       	std	Y+8, r20	; 0x08
    145e:	59 87       	std	Y+9, r21	; 0x09
    1460:	e1 2c       	mov	r14, r1
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	0f 92       	push	r0
    1468:	f8 01       	movw	r30, r16
    146a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    146c:	ff 20       	and	r15, r15
    146e:	99 f0       	breq	.+38     	; 0x1496 <xQueueReceive+0x62>
    1470:	b6 01       	movw	r22, r12
    1472:	c8 01       	movw	r24, r16
    1474:	2e de       	rcall	.-932    	; 0x10d2 <prvCopyDataFromQueue>
    1476:	fa 94       	dec	r15
    1478:	f8 01       	movw	r30, r16
    147a:	f6 8e       	std	Z+30, r15	; 0x1e
    147c:	80 85       	ldd	r24, Z+8	; 0x08
    147e:	88 23       	and	r24, r24
    1480:	31 f0       	breq	.+12     	; 0x148e <xQueueReceive+0x5a>
    1482:	c8 01       	movw	r24, r16
    1484:	08 96       	adiw	r24, 0x08	; 8
    1486:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    148a:	81 11       	cpse	r24, r1
    148c:	d0 dc       	rcall	.-1632   	; 0xe2e <vPortYield>
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	4f c0       	rjmp	.+158    	; 0x1534 <xQueueReceive+0x100>
    1496:	8e 81       	ldd	r24, Y+6	; 0x06
    1498:	9f 81       	ldd	r25, Y+7	; 0x07
    149a:	a8 85       	ldd	r26, Y+8	; 0x08
    149c:	b9 85       	ldd	r27, Y+9	; 0x09
    149e:	89 2b       	or	r24, r25
    14a0:	8a 2b       	or	r24, r26
    14a2:	8b 2b       	or	r24, r27
    14a4:	21 f4       	brne	.+8      	; 0x14ae <xQueueReceive+0x7a>
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	43 c0       	rjmp	.+134    	; 0x1534 <xQueueReceive+0x100>
    14ae:	e1 10       	cpse	r14, r1
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <xQueueReceive+0x8a>
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <vTaskInternalSetTimeOutState>
    14ba:	ee 24       	eor	r14, r14
    14bc:	e3 94       	inc	r14
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	e1 d6       	rcall	.+3522   	; 0x2286 <vTaskSuspendAll>
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	0f 92       	push	r0
    14ca:	f8 01       	movw	r30, r16
    14cc:	81 a1       	ldd	r24, Z+33	; 0x21
    14ce:	8f 3f       	cpi	r24, 0xFF	; 255
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <xQueueReceive+0xa0>
    14d2:	11 a2       	std	Z+33, r1	; 0x21
    14d4:	f8 01       	movw	r30, r16
    14d6:	82 a1       	ldd	r24, Z+34	; 0x22
    14d8:	8f 3f       	cpi	r24, 0xFF	; 255
    14da:	09 f4       	brne	.+2      	; 0x14de <xQueueReceive+0xaa>
    14dc:	12 a2       	std	Z+34, r1	; 0x22
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	be 01       	movw	r22, r28
    14e4:	6a 5f       	subi	r22, 0xFA	; 250
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	0e 94 57 16 	call	0x2cae	; 0x2cae <xTaskCheckForTimeOut>
    14f0:	81 11       	cpse	r24, r1
    14f2:	17 c0       	rjmp	.+46     	; 0x1522 <xQueueReceive+0xee>
    14f4:	c8 01       	movw	r24, r16
    14f6:	73 dd       	rcall	.-1306   	; 0xfde <prvIsQueueEmpty>
    14f8:	88 23       	and	r24, r24
    14fa:	79 f0       	breq	.+30     	; 0x151a <xQueueReceive+0xe6>
    14fc:	4e 81       	ldd	r20, Y+6	; 0x06
    14fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1500:	68 85       	ldd	r22, Y+8	; 0x08
    1502:	79 85       	ldd	r23, Y+9	; 0x09
    1504:	c8 01       	movw	r24, r16
    1506:	43 96       	adiw	r24, 0x13	; 19
    1508:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskPlaceOnEventList>
    150c:	c8 01       	movw	r24, r16
    150e:	fb dd       	rcall	.-1034   	; 0x1106 <prvUnlockQueue>
    1510:	fa d7       	rcall	.+4084   	; 0x2506 <xTaskResumeAll>
    1512:	81 11       	cpse	r24, r1
    1514:	a6 cf       	rjmp	.-180    	; 0x1462 <xQueueReceive+0x2e>
    1516:	8b dc       	rcall	.-1770   	; 0xe2e <vPortYield>
    1518:	a4 cf       	rjmp	.-184    	; 0x1462 <xQueueReceive+0x2e>
    151a:	c8 01       	movw	r24, r16
    151c:	f4 dd       	rcall	.-1048   	; 0x1106 <prvUnlockQueue>
    151e:	f3 d7       	rcall	.+4070   	; 0x2506 <xTaskResumeAll>
    1520:	a0 cf       	rjmp	.-192    	; 0x1462 <xQueueReceive+0x2e>
    1522:	c8 01       	movw	r24, r16
    1524:	f0 dd       	rcall	.-1056   	; 0x1106 <prvUnlockQueue>
    1526:	ef d7       	rcall	.+4062   	; 0x2506 <xTaskResumeAll>
    1528:	c8 01       	movw	r24, r16
    152a:	59 dd       	rcall	.-1358   	; 0xfde <prvIsQueueEmpty>
    152c:	88 23       	and	r24, r24
    152e:	09 f4       	brne	.+2      	; 0x1532 <xQueueReceive+0xfe>
    1530:	98 cf       	rjmp	.-208    	; 0x1462 <xQueueReceive+0x2e>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	29 96       	adiw	r28, 0x09	; 9
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <xQueueSemaphoreTake>:
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	29 97       	sbiw	r28, 0x09	; 9
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8c 01       	movw	r16, r24
    1570:	4e 83       	std	Y+6, r20	; 0x06
    1572:	5f 83       	std	Y+7, r21	; 0x07
    1574:	68 87       	std	Y+8, r22	; 0x08
    1576:	79 87       	std	Y+9, r23	; 0x09
    1578:	e1 2c       	mov	r14, r1
    157a:	f1 2c       	mov	r15, r1
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	0f 92       	push	r0
    1582:	f8 01       	movw	r30, r16
    1584:	86 8d       	ldd	r24, Z+30	; 0x1e
    1586:	88 23       	and	r24, r24
    1588:	c9 f0       	breq	.+50     	; 0x15bc <xQueueSemaphoreTake+0x6a>
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	86 8f       	std	Z+30, r24	; 0x1e
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	89 2b       	or	r24, r25
    1594:	29 f4       	brne	.+10     	; 0x15a0 <xQueueSemaphoreTake+0x4e>
    1596:	0e 94 47 18 	call	0x308e	; 0x308e <pvTaskIncrementMutexHeldCount>
    159a:	f8 01       	movw	r30, r16
    159c:	95 83       	std	Z+5, r25	; 0x05
    159e:	84 83       	std	Z+4, r24	; 0x04
    15a0:	f8 01       	movw	r30, r16
    15a2:	80 85       	ldd	r24, Z+8	; 0x08
    15a4:	88 23       	and	r24, r24
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <xQueueSemaphoreTake+0x62>
    15a8:	c8 01       	movw	r24, r16
    15aa:	08 96       	adiw	r24, 0x08	; 8
    15ac:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskRemoveFromEventList>
    15b0:	81 11       	cpse	r24, r1
    15b2:	3d dc       	rcall	.-1926   	; 0xe2e <vPortYield>
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	6f c0       	rjmp	.+222    	; 0x169a <xQueueSemaphoreTake+0x148>
    15bc:	8e 81       	ldd	r24, Y+6	; 0x06
    15be:	9f 81       	ldd	r25, Y+7	; 0x07
    15c0:	a8 85       	ldd	r26, Y+8	; 0x08
    15c2:	b9 85       	ldd	r27, Y+9	; 0x09
    15c4:	89 2b       	or	r24, r25
    15c6:	8a 2b       	or	r24, r26
    15c8:	8b 2b       	or	r24, r27
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <xQueueSemaphoreTake+0x82>
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	63 c0       	rjmp	.+198    	; 0x169a <xQueueSemaphoreTake+0x148>
    15d4:	f1 10       	cpse	r15, r1
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <xQueueSemaphoreTake+0x92>
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <vTaskInternalSetTimeOutState>
    15e0:	ff 24       	eor	r15, r15
    15e2:	f3 94       	inc	r15
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	4e d6       	rcall	.+3228   	; 0x2286 <vTaskSuspendAll>
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	0f 92       	push	r0
    15f0:	f8 01       	movw	r30, r16
    15f2:	81 a1       	ldd	r24, Z+33	; 0x21
    15f4:	8f 3f       	cpi	r24, 0xFF	; 255
    15f6:	09 f4       	brne	.+2      	; 0x15fa <xQueueSemaphoreTake+0xa8>
    15f8:	11 a2       	std	Z+33, r1	; 0x21
    15fa:	f8 01       	movw	r30, r16
    15fc:	82 a1       	ldd	r24, Z+34	; 0x22
    15fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1600:	09 f4       	brne	.+2      	; 0x1604 <xQueueSemaphoreTake+0xb2>
    1602:	12 a2       	std	Z+34, r1	; 0x22
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	be 01       	movw	r22, r28
    160a:	6a 5f       	subi	r22, 0xFA	; 250
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	0e 94 57 16 	call	0x2cae	; 0x2cae <xTaskCheckForTimeOut>
    1616:	81 11       	cpse	r24, r1
    1618:	26 c0       	rjmp	.+76     	; 0x1666 <xQueueSemaphoreTake+0x114>
    161a:	c8 01       	movw	r24, r16
    161c:	e0 dc       	rcall	.-1600   	; 0xfde <prvIsQueueEmpty>
    161e:	88 23       	and	r24, r24
    1620:	f1 f0       	breq	.+60     	; 0x165e <xQueueSemaphoreTake+0x10c>
    1622:	f8 01       	movw	r30, r16
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	89 2b       	or	r24, r25
    162a:	51 f4       	brne	.+20     	; 0x1640 <xQueueSemaphoreTake+0xee>
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	0f 92       	push	r0
    1632:	84 81       	ldd	r24, Z+4	; 0x04
    1634:	95 81       	ldd	r25, Z+5	; 0x05
    1636:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <xTaskPriorityInherit>
    163a:	e8 2e       	mov	r14, r24
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	4e 81       	ldd	r20, Y+6	; 0x06
    1642:	5f 81       	ldd	r21, Y+7	; 0x07
    1644:	68 85       	ldd	r22, Y+8	; 0x08
    1646:	79 85       	ldd	r23, Y+9	; 0x09
    1648:	c8 01       	movw	r24, r16
    164a:	43 96       	adiw	r24, 0x13	; 19
    164c:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskPlaceOnEventList>
    1650:	c8 01       	movw	r24, r16
    1652:	59 dd       	rcall	.-1358   	; 0x1106 <prvUnlockQueue>
    1654:	58 d7       	rcall	.+3760   	; 0x2506 <xTaskResumeAll>
    1656:	81 11       	cpse	r24, r1
    1658:	91 cf       	rjmp	.-222    	; 0x157c <xQueueSemaphoreTake+0x2a>
    165a:	e9 db       	rcall	.-2094   	; 0xe2e <vPortYield>
    165c:	8f cf       	rjmp	.-226    	; 0x157c <xQueueSemaphoreTake+0x2a>
    165e:	c8 01       	movw	r24, r16
    1660:	52 dd       	rcall	.-1372   	; 0x1106 <prvUnlockQueue>
    1662:	51 d7       	rcall	.+3746   	; 0x2506 <xTaskResumeAll>
    1664:	8b cf       	rjmp	.-234    	; 0x157c <xQueueSemaphoreTake+0x2a>
    1666:	c8 01       	movw	r24, r16
    1668:	4e dd       	rcall	.-1380   	; 0x1106 <prvUnlockQueue>
    166a:	4d d7       	rcall	.+3738   	; 0x2506 <xTaskResumeAll>
    166c:	c8 01       	movw	r24, r16
    166e:	b7 dc       	rcall	.-1682   	; 0xfde <prvIsQueueEmpty>
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <xQueueSemaphoreTake+0x124>
    1674:	83 cf       	rjmp	.-250    	; 0x157c <xQueueSemaphoreTake+0x2a>
    1676:	ee 20       	and	r14, r14
    1678:	79 f0       	breq	.+30     	; 0x1698 <xQueueSemaphoreTake+0x146>
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	0f 92       	push	r0
    1680:	c8 01       	movw	r24, r16
    1682:	9d dc       	rcall	.-1734   	; 0xfbe <prvGetDisinheritPriorityAfterTimeout>
    1684:	68 2f       	mov	r22, r24
    1686:	f8 01       	movw	r30, r16
    1688:	84 81       	ldd	r24, Z+4	; 0x04
    168a:	95 81       	ldd	r25, Z+5	; 0x05
    168c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout>
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	01 c0       	rjmp	.+2      	; 0x169a <xQueueSemaphoreTake+0x148>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	29 96       	adiw	r28, 0x09	; 9
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	08 95       	ret

000016b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	0f 92       	push	r0
    16c0:	89 a1       	ldd	r24, Y+33	; 0x21
    16c2:	8f 3f       	cpi	r24, 0xFF	; 255
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <vQueueWaitForMessageRestricted+0x14>
    16c6:	19 a2       	std	Y+33, r1	; 0x21
    16c8:	8a a1       	ldd	r24, Y+34	; 0x22
    16ca:	8f 3f       	cpi	r24, 0xFF	; 255
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <vQueueWaitForMessageRestricted+0x1c>
    16ce:	1a a2       	std	Y+34, r1	; 0x22
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d6:	81 11       	cpse	r24, r1
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16da:	ce 01       	movw	r24, r28
    16dc:	43 96       	adiw	r24, 0x13	; 19
    16de:	0e 94 a5 14 	call	0x294a	; 0x294a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    16e2:	ce 01       	movw	r24, r28
    16e4:	10 dd       	rcall	.-1504   	; 0x1106 <prvUnlockQueue>
    }
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    16ec:	fc 01       	movw	r30, r24
    16ee:	44 81       	ldd	r20, Z+4	; 0x04
    16f0:	55 81       	ldd	r21, Z+5	; 0x05
    16f2:	22 81       	ldd	r18, Z+2	; 0x02
    16f4:	33 81       	ldd	r19, Z+3	; 0x03
    16f6:	24 0f       	add	r18, r20
    16f8:	35 1f       	adc	r19, r21
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	b9 01       	movw	r22, r18
    1700:	68 1b       	sub	r22, r24
    1702:	79 0b       	sbc	r23, r25
    1704:	cb 01       	movw	r24, r22
    1706:	64 17       	cp	r22, r20
    1708:	75 07       	cpc	r23, r21
    170a:	10 f0       	brcs	.+4      	; 0x1710 <prvBytesInBuffer+0x24>
    170c:	84 1b       	sub	r24, r20
    170e:	95 0b       	sbc	r25, r21
    1710:	08 95       	ret

00001712 <prvInitialiseNewStreamBuffer>:
    1712:	0f 93       	push	r16
    1714:	fc 01       	movw	r30, r24
    1716:	8f e0       	ldi	r24, 0x0F	; 15
    1718:	df 01       	movw	r26, r30
    171a:	1d 92       	st	X+, r1
    171c:	8a 95       	dec	r24
    171e:	e9 f7       	brne	.-6      	; 0x171a <prvInitialiseNewStreamBuffer+0x8>
    1720:	75 87       	std	Z+13, r23	; 0x0d
    1722:	64 87       	std	Z+12, r22	; 0x0c
    1724:	55 83       	std	Z+5, r21	; 0x05
    1726:	44 83       	std	Z+4, r20	; 0x04
    1728:	37 83       	std	Z+7, r19	; 0x07
    172a:	26 83       	std	Z+6, r18	; 0x06
    172c:	06 87       	std	Z+14, r16	; 0x0e
    172e:	0f 91       	pop	r16
    1730:	08 95       	ret

00001732 <prvWriteBytesToBuffer>:
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	6c 01       	movw	r12, r24
    1748:	5b 01       	movw	r10, r22
    174a:	7a 01       	movw	r14, r20
    174c:	fc 01       	movw	r30, r24
    174e:	c2 81       	ldd	r28, Z+2	; 0x02
    1750:	d3 81       	ldd	r29, Z+3	; 0x03
    1752:	04 81       	ldd	r16, Z+4	; 0x04
    1754:	15 81       	ldd	r17, Z+5	; 0x05
    1756:	0c 1b       	sub	r16, r28
    1758:	1d 0b       	sbc	r17, r29
    175a:	40 17       	cp	r20, r16
    175c:	51 07       	cpc	r21, r17
    175e:	08 f4       	brcc	.+2      	; 0x1762 <prvWriteBytesToBuffer+0x30>
    1760:	8a 01       	movw	r16, r20
    1762:	f6 01       	movw	r30, r12
    1764:	84 85       	ldd	r24, Z+12	; 0x0c
    1766:	95 85       	ldd	r25, Z+13	; 0x0d
    1768:	a8 01       	movw	r20, r16
    176a:	b5 01       	movw	r22, r10
    176c:	8c 0f       	add	r24, r28
    176e:	9d 1f       	adc	r25, r29
    1770:	0e 94 01 32 	call	0x6402	; 0x6402 <memcpy>
    1774:	0e 15       	cp	r16, r14
    1776:	1f 05       	cpc	r17, r15
    1778:	58 f4       	brcc	.+22     	; 0x1790 <prvWriteBytesToBuffer+0x5e>
    177a:	a7 01       	movw	r20, r14
    177c:	40 1b       	sub	r20, r16
    177e:	51 0b       	sbc	r21, r17
    1780:	b5 01       	movw	r22, r10
    1782:	60 0f       	add	r22, r16
    1784:	71 1f       	adc	r23, r17
    1786:	f6 01       	movw	r30, r12
    1788:	84 85       	ldd	r24, Z+12	; 0x0c
    178a:	95 85       	ldd	r25, Z+13	; 0x0d
    178c:	0e 94 01 32 	call	0x6402	; 0x6402 <memcpy>
    1790:	ce 01       	movw	r24, r28
    1792:	8e 0d       	add	r24, r14
    1794:	9f 1d       	adc	r25, r15
    1796:	f6 01       	movw	r30, r12
    1798:	24 81       	ldd	r18, Z+4	; 0x04
    179a:	35 81       	ldd	r19, Z+5	; 0x05
    179c:	82 17       	cp	r24, r18
    179e:	93 07       	cpc	r25, r19
    17a0:	10 f0       	brcs	.+4      	; 0x17a6 <prvWriteBytesToBuffer+0x74>
    17a2:	82 1b       	sub	r24, r18
    17a4:	93 0b       	sbc	r25, r19
    17a6:	f6 01       	movw	r30, r12
    17a8:	93 83       	std	Z+3, r25	; 0x03
    17aa:	82 83       	std	Z+2, r24	; 0x02
    17ac:	c7 01       	movw	r24, r14
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	08 95       	ret

000017c4 <prvWriteMessageToBuffer>:
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	1f 92       	push	r1
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	7c 01       	movw	r14, r24
    17de:	6b 01       	movw	r12, r22
    17e0:	5a 83       	std	Y+2, r21	; 0x02
    17e2:	49 83       	std	Y+1, r20	; 0x01
    17e4:	21 15       	cp	r18, r1
    17e6:	31 05       	cpc	r19, r1
    17e8:	c1 f0       	breq	.+48     	; 0x181a <prvWriteMessageToBuffer+0x56>
    17ea:	fc 01       	movw	r30, r24
    17ec:	86 85       	ldd	r24, Z+14	; 0x0e
    17ee:	80 fd       	sbrc	r24, 0
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <prvWriteMessageToBuffer+0x3e>
    17f2:	42 17       	cp	r20, r18
    17f4:	53 07       	cpc	r21, r19
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <prvWriteMessageToBuffer+0x36>
    17f8:	9a 01       	movw	r18, r20
    17fa:	3a 83       	std	Y+2, r19	; 0x02
    17fc:	29 83       	std	Y+1, r18	; 0x01
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <prvWriteMessageToBuffer+0x5c>
    1802:	20 17       	cp	r18, r16
    1804:	31 07       	cpc	r19, r17
    1806:	58 f0       	brcs	.+22     	; 0x181e <prvWriteMessageToBuffer+0x5a>
    1808:	42 e0       	ldi	r20, 0x02	; 2
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	be 01       	movw	r22, r28
    180e:	6f 5f       	subi	r22, 0xFF	; 255
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	c7 01       	movw	r24, r14
    1814:	8e df       	rcall	.-228    	; 0x1732 <prvWriteBytesToBuffer>
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <prvWriteMessageToBuffer+0x5c>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <prvWriteMessageToBuffer+0x5c>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	88 23       	and	r24, r24
    1822:	31 f0       	breq	.+12     	; 0x1830 <prvWriteMessageToBuffer+0x6c>
    1824:	49 81       	ldd	r20, Y+1	; 0x01
    1826:	5a 81       	ldd	r21, Y+2	; 0x02
    1828:	b6 01       	movw	r22, r12
    182a:	c7 01       	movw	r24, r14
    182c:	82 df       	rcall	.-252    	; 0x1732 <prvWriteBytesToBuffer>
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <prvWriteMessageToBuffer+0x70>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	08 95       	ret

0000184a <prvReadBytesFromBuffer>:
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	7c 01       	movw	r14, r24
    1860:	5b 01       	movw	r10, r22
    1862:	e9 01       	movw	r28, r18
    1864:	42 17       	cp	r20, r18
    1866:	53 07       	cpc	r21, r19
    1868:	08 f4       	brcc	.+2      	; 0x186c <prvReadBytesFromBuffer+0x22>
    186a:	ea 01       	movw	r28, r20
    186c:	20 97       	sbiw	r28, 0x00	; 0
    186e:	81 f1       	breq	.+96     	; 0x18d0 <prvReadBytesFromBuffer+0x86>
    1870:	f7 01       	movw	r30, r14
    1872:	00 81       	ld	r16, Z
    1874:	11 81       	ldd	r17, Z+1	; 0x01
    1876:	84 81       	ldd	r24, Z+4	; 0x04
    1878:	95 81       	ldd	r25, Z+5	; 0x05
    187a:	80 1b       	sub	r24, r16
    187c:	91 0b       	sbc	r25, r17
    187e:	6e 01       	movw	r12, r28
    1880:	8c 17       	cp	r24, r28
    1882:	9d 07       	cpc	r25, r29
    1884:	08 f4       	brcc	.+2      	; 0x1888 <prvReadBytesFromBuffer+0x3e>
    1886:	6c 01       	movw	r12, r24
    1888:	f7 01       	movw	r30, r14
    188a:	64 85       	ldd	r22, Z+12	; 0x0c
    188c:	75 85       	ldd	r23, Z+13	; 0x0d
    188e:	60 0f       	add	r22, r16
    1890:	71 1f       	adc	r23, r17
    1892:	a6 01       	movw	r20, r12
    1894:	c5 01       	movw	r24, r10
    1896:	0e 94 01 32 	call	0x6402	; 0x6402 <memcpy>
    189a:	cc 16       	cp	r12, r28
    189c:	dd 06       	cpc	r13, r29
    189e:	58 f4       	brcc	.+22     	; 0x18b6 <prvReadBytesFromBuffer+0x6c>
    18a0:	ae 01       	movw	r20, r28
    18a2:	4c 19       	sub	r20, r12
    18a4:	5d 09       	sbc	r21, r13
    18a6:	f7 01       	movw	r30, r14
    18a8:	64 85       	ldd	r22, Z+12	; 0x0c
    18aa:	75 85       	ldd	r23, Z+13	; 0x0d
    18ac:	c5 01       	movw	r24, r10
    18ae:	8c 0d       	add	r24, r12
    18b0:	9d 1d       	adc	r25, r13
    18b2:	0e 94 01 32 	call	0x6402	; 0x6402 <memcpy>
    18b6:	0c 0f       	add	r16, r28
    18b8:	1d 1f       	adc	r17, r29
    18ba:	f7 01       	movw	r30, r14
    18bc:	84 81       	ldd	r24, Z+4	; 0x04
    18be:	95 81       	ldd	r25, Z+5	; 0x05
    18c0:	08 17       	cp	r16, r24
    18c2:	19 07       	cpc	r17, r25
    18c4:	10 f0       	brcs	.+4      	; 0x18ca <prvReadBytesFromBuffer+0x80>
    18c6:	08 1b       	sub	r16, r24
    18c8:	19 0b       	sbc	r17, r25
    18ca:	f7 01       	movw	r30, r14
    18cc:	11 83       	std	Z+1, r17	; 0x01
    18ce:	00 83       	st	Z, r16
    18d0:	ce 01       	movw	r24, r28
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	cf 90       	pop	r12
    18e2:	bf 90       	pop	r11
    18e4:	af 90       	pop	r10
    18e6:	08 95       	ret

000018e8 <prvReadMessageFromBuffer>:
    18e8:	6f 92       	push	r6
    18ea:	7f 92       	push	r7
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	1f 92       	push	r1
    1906:	1f 92       	push	r1
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	6c 01       	movw	r12, r24
    190e:	4b 01       	movw	r8, r22
    1910:	5a 01       	movw	r10, r20
    1912:	79 01       	movw	r14, r18
    1914:	01 15       	cp	r16, r1
    1916:	11 05       	cpc	r17, r1
    1918:	b1 f0       	breq	.+44     	; 0x1946 <prvReadMessageFromBuffer+0x5e>
    191a:	fc 01       	movw	r30, r24
    191c:	60 80       	ld	r6, Z
    191e:	71 80       	ldd	r7, Z+1	; 0x01
    1920:	a8 01       	movw	r20, r16
    1922:	be 01       	movw	r22, r28
    1924:	6f 5f       	subi	r22, 0xFF	; 255
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	90 df       	rcall	.-224    	; 0x184a <prvReadBytesFromBuffer>
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	e0 1a       	sub	r14, r16
    1930:	f1 0a       	sbc	r15, r17
    1932:	a8 16       	cp	r10, r24
    1934:	b9 06       	cpc	r11, r25
    1936:	30 f4       	brcc	.+12     	; 0x1944 <prvReadMessageFromBuffer+0x5c>
    1938:	f6 01       	movw	r30, r12
    193a:	71 82       	std	Z+1, r7	; 0x01
    193c:	60 82       	st	Z, r6
    193e:	a1 2c       	mov	r10, r1
    1940:	b1 2c       	mov	r11, r1
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <prvReadMessageFromBuffer+0x5e>
    1944:	5c 01       	movw	r10, r24
    1946:	97 01       	movw	r18, r14
    1948:	a5 01       	movw	r20, r10
    194a:	b4 01       	movw	r22, r8
    194c:	c6 01       	movw	r24, r12
    194e:	7d df       	rcall	.-262    	; 0x184a <prvReadBytesFromBuffer>
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	08 95       	ret

00001972 <xStreamBufferGenericCreate>:
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	ec 01       	movw	r28, r24
    1982:	6b 01       	movw	r12, r22
    1984:	41 30       	cpi	r20, 0x01	; 1
    1986:	11 f4       	brne	.+4      	; 0x198c <xStreamBufferGenericCreate+0x1a>
    1988:	01 e0       	ldi	r16, 0x01	; 1
    198a:	01 c0       	rjmp	.+2      	; 0x198e <xStreamBufferGenericCreate+0x1c>
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	c1 14       	cp	r12, r1
    1990:	d1 04       	cpc	r13, r1
    1992:	19 f4       	brne	.+6      	; 0x199a <xStreamBufferGenericCreate+0x28>
    1994:	cc 24       	eor	r12, r12
    1996:	c3 94       	inc	r12
    1998:	d1 2c       	mov	r13, r1
    199a:	ce 01       	movw	r24, r28
    199c:	40 96       	adiw	r24, 0x10	; 16
    199e:	c8 17       	cp	r28, r24
    19a0:	d9 07       	cpc	r29, r25
    19a2:	20 f4       	brcc	.+8      	; 0x19ac <xStreamBufferGenericCreate+0x3a>
    19a4:	21 96       	adiw	r28, 0x01	; 1
    19a6:	8f d8       	rcall	.-3810   	; 0xac6 <pvPortMalloc>
    19a8:	7c 01       	movw	r14, r24
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <xStreamBufferGenericCreate+0x3e>
    19ac:	e1 2c       	mov	r14, r1
    19ae:	f1 2c       	mov	r15, r1
    19b0:	e1 14       	cp	r14, r1
    19b2:	f1 04       	cpc	r15, r1
    19b4:	39 f0       	breq	.+14     	; 0x19c4 <xStreamBufferGenericCreate+0x52>
    19b6:	96 01       	movw	r18, r12
    19b8:	ae 01       	movw	r20, r28
    19ba:	b7 01       	movw	r22, r14
    19bc:	61 5f       	subi	r22, 0xF1	; 241
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	c7 01       	movw	r24, r14
    19c2:	a7 de       	rcall	.-690    	; 0x1712 <prvInitialiseNewStreamBuffer>
    19c4:	c7 01       	movw	r24, r14
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	08 95       	ret

000019d6 <xStreamBufferReset>:
    19d6:	0f 93       	push	r16
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	0f 92       	push	r0
    19de:	fc 01       	movw	r30, r24
    19e0:	20 85       	ldd	r18, Z+8	; 0x08
    19e2:	31 85       	ldd	r19, Z+9	; 0x09
    19e4:	23 2b       	or	r18, r19
    19e6:	71 f4       	brne	.+28     	; 0x1a04 <xStreamBufferReset+0x2e>
    19e8:	22 85       	ldd	r18, Z+10	; 0x0a
    19ea:	33 85       	ldd	r19, Z+11	; 0x0b
    19ec:	23 2b       	or	r18, r19
    19ee:	61 f4       	brne	.+24     	; 0x1a08 <xStreamBufferReset+0x32>
    19f0:	26 81       	ldd	r18, Z+6	; 0x06
    19f2:	37 81       	ldd	r19, Z+7	; 0x07
    19f4:	44 81       	ldd	r20, Z+4	; 0x04
    19f6:	55 81       	ldd	r21, Z+5	; 0x05
    19f8:	64 85       	ldd	r22, Z+12	; 0x0c
    19fa:	75 85       	ldd	r23, Z+13	; 0x0d
    19fc:	06 85       	ldd	r16, Z+14	; 0x0e
    19fe:	89 de       	rcall	.-750    	; 0x1712 <prvInitialiseNewStreamBuffer>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <xStreamBufferReset+0x34>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <xStreamBufferReset+0x34>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <xStreamBufferSpacesAvailable>:
    1a12:	fc 01       	movw	r30, r24
    1a14:	24 81       	ldd	r18, Z+4	; 0x04
    1a16:	35 81       	ldd	r19, Z+5	; 0x05
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	42 81       	ldd	r20, Z+2	; 0x02
    1a22:	53 81       	ldd	r21, Z+3	; 0x03
    1a24:	84 1b       	sub	r24, r20
    1a26:	95 0b       	sbc	r25, r21
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	82 17       	cp	r24, r18
    1a2c:	93 07       	cpc	r25, r19
    1a2e:	10 f0       	brcs	.+4      	; 0x1a34 <xStreamBufferSpacesAvailable+0x22>
    1a30:	82 1b       	sub	r24, r18
    1a32:	93 0b       	sbc	r25, r19
    1a34:	08 95       	ret

00001a36 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1a36:	2f 92       	push	r2
    1a38:	3f 92       	push	r3
    1a3a:	4f 92       	push	r4
    1a3c:	5f 92       	push	r5
    1a3e:	6f 92       	push	r6
    1a40:	7f 92       	push	r7
    1a42:	8f 92       	push	r8
    1a44:	9f 92       	push	r9
    1a46:	af 92       	push	r10
    1a48:	bf 92       	push	r11
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	4c 01       	movw	r8, r24
    1a6c:	7b 87       	std	Y+11, r23	; 0x0b
    1a6e:	6a 87       	std	Y+10, r22	; 0x0a
    1a70:	1a 01       	movw	r2, r20
    1a72:	0e 83       	std	Y+6, r16	; 0x06
    1a74:	1f 83       	std	Y+7, r17	; 0x07
    1a76:	28 87       	std	Y+8, r18	; 0x08
    1a78:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	84 81       	ldd	r24, Z+4	; 0x04
    1a7e:	95 81       	ldd	r25, Z+5	; 0x05
    1a80:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a82:	26 85       	ldd	r18, Z+14	; 0x0e
    1a84:	20 ff       	sbrs	r18, 0
    1a86:	0c c0       	rjmp	.+24     	; 0x1aa0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a88:	2a 01       	movw	r4, r20
    1a8a:	f2 e0       	ldi	r31, 0x02	; 2
    1a8c:	4f 0e       	add	r4, r31
    1a8e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a90:	84 15       	cp	r24, r4
    1a92:	95 05       	cpc	r25, r5
    1a94:	58 f4       	brcc	.+22     	; 0x1aac <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1a96:	1e 82       	std	Y+6, r1	; 0x06
    1a98:	1f 82       	std	Y+7, r1	; 0x07
    1a9a:	18 86       	std	Y+8, r1	; 0x08
    1a9c:	19 86       	std	Y+9, r1	; 0x09
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1aa0:	84 17       	cp	r24, r20
    1aa2:	95 07       	cpc	r25, r21
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1aa6:	2a 01       	movw	r4, r20
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1aaa:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ab2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ab4:	89 2b       	or	r24, r25
    1ab6:	8a 2b       	or	r24, r26
    1ab8:	8b 2b       	or	r24, r27
    1aba:	09 f4       	brne	.+2      	; 0x1abe <xStreamBufferSend+0x88>
    1abc:	38 c0       	rjmp	.+112    	; 0x1b2e <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	0e 94 30 16 	call	0x2c60	; 0x2c60 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1acc:	c4 01       	movw	r24, r8
    1ace:	a1 df       	rcall	.-190    	; 0x1a12 <xStreamBufferSpacesAvailable>
    1ad0:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1ad2:	84 15       	cp	r24, r4
    1ad4:	95 05       	cpc	r25, r5
    1ad6:	40 f5       	brcc	.+80     	; 0x1b28 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 1a 1b 	call	0x3634	; 0x3634 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1ae2:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <xTaskGetCurrentTaskHandle>
    1ae6:	f4 01       	movw	r30, r8
    1ae8:	93 87       	std	Z+11, r25	; 0x0b
    1aea:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1af0:	ae 80       	ldd	r10, Y+6	; 0x06
    1af2:	bf 80       	ldd	r11, Y+7	; 0x07
    1af4:	c8 84       	ldd	r12, Y+8	; 0x08
    1af6:	d9 84       	ldd	r13, Y+9	; 0x09
    1af8:	e1 2c       	mov	r14, r1
    1afa:	f1 2c       	mov	r15, r1
    1afc:	00 e0       	ldi	r16, 0x00	; 0
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	98 01       	movw	r18, r16
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	ba 01       	movw	r22, r20
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1b0e:	f4 01       	movw	r30, r8
    1b10:	13 86       	std	Z+11, r1	; 0x0b
    1b12:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1b14:	be 01       	movw	r22, r28
    1b16:	6a 5f       	subi	r22, 0xFA	; 250
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	0e 94 57 16 	call	0x2cae	; 0x2cae <xTaskCheckForTimeOut>
    1b22:	88 23       	and	r24, r24
    1b24:	81 f2       	breq	.-96     	; 0x1ac6 <xStreamBufferSend+0x90>
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
                    break;
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1b2e:	61 2c       	mov	r6, r1
    1b30:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1b32:	61 14       	cp	r6, r1
    1b34:	71 04       	cpc	r7, r1
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b38:	c4 01       	movw	r24, r8
    1b3a:	6b df       	rcall	.-298    	; 0x1a12 <xStreamBufferSpacesAvailable>
    1b3c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b3e:	82 01       	movw	r16, r4
    1b40:	93 01       	movw	r18, r6
    1b42:	a1 01       	movw	r20, r2
    1b44:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b46:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b48:	c4 01       	movw	r24, r8
    1b4a:	3c de       	rcall	.-904    	; 0x17c4 <prvWriteMessageToBuffer>
    1b4c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1b4e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b50:	e9 f0       	breq	.+58     	; 0x1b8c <xStreamBufferSend+0x156>
    1b52:	c4 01       	movw	r24, r8
    1b54:	cb dd       	rcall	.-1130   	; 0x16ec <prvBytesInBuffer>
    1b56:	f4 01       	movw	r30, r8
    1b58:	26 81       	ldd	r18, Z+6	; 0x06
    1b5a:	37 81       	ldd	r19, Z+7	; 0x07
    1b5c:	82 17       	cp	r24, r18
    1b5e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1b60:	a8 f0       	brcs	.+42     	; 0x1b8c <xStreamBufferSend+0x156>
    1b62:	91 d3       	rcall	.+1826   	; 0x2286 <vTaskSuspendAll>
    1b64:	f4 01       	movw	r30, r8
    1b66:	80 85       	ldd	r24, Z+8	; 0x08
    1b68:	91 85       	ldd	r25, Z+9	; 0x09
    1b6a:	89 2b       	or	r24, r25
    1b6c:	71 f0       	breq	.+28     	; 0x1b8a <xStreamBufferSend+0x154>
    1b6e:	80 85       	ldd	r24, Z+8	; 0x08
    1b70:	91 85       	ldd	r25, Z+9	; 0x09
    1b72:	e1 2c       	mov	r14, r1
    1b74:	f1 2c       	mov	r15, r1
    1b76:	00 e0       	ldi	r16, 0x00	; 0
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	0e 94 01 19 	call	0x3202	; 0x3202 <xTaskGenericNotify>
    1b84:	f4 01       	movw	r30, r8
    1b86:	11 86       	std	Z+9, r1	; 0x09
    1b88:	10 86       	std	Z+8, r1	; 0x08
    1b8a:	bd d4       	rcall	.+2426   	; 0x2506 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1b8c:	c6 01       	movw	r24, r12
    1b8e:	2b 96       	adiw	r28, 0x0b	; 11
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	7f 90       	pop	r7
    1bb4:	6f 90       	pop	r6
    1bb6:	5f 90       	pop	r5
    1bb8:	4f 90       	pop	r4
    1bba:	3f 90       	pop	r3
    1bbc:	2f 90       	pop	r2
    1bbe:	08 95       	ret

00001bc0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	7b 01       	movw	r14, r22
    1bd8:	5a 01       	movw	r10, r20
    1bda:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bde:	80 ff       	sbrs	r24, 0
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1be2:	8a 01       	movw	r16, r20
    1be4:	0e 5f       	subi	r16, 0xFE	; 254
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1bea:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1bec:	ce 01       	movw	r24, r28
    1bee:	11 df       	rcall	.-478    	; 0x1a12 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1bf0:	9c 01       	movw	r18, r24
    1bf2:	a5 01       	movw	r20, r10
    1bf4:	b7 01       	movw	r22, r14
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	e5 dd       	rcall	.-1078   	; 0x17c4 <prvWriteMessageToBuffer>
    1bfa:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1bfc:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1bfe:	c1 f0       	breq	.+48     	; 0x1c30 <xStreamBufferSendFromISR+0x70>
    1c00:	ce 01       	movw	r24, r28
    1c02:	74 dd       	rcall	.-1304   	; 0x16ec <prvBytesInBuffer>
    1c04:	2e 81       	ldd	r18, Y+6	; 0x06
    1c06:	3f 81       	ldd	r19, Y+7	; 0x07
    1c08:	82 17       	cp	r24, r18
    1c0a:	93 07       	cpc	r25, r19
    1c0c:	88 f0       	brcs	.+34     	; 0x1c30 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1c0e:	88 85       	ldd	r24, Y+8	; 0x08
    1c10:	99 85       	ldd	r25, Y+9	; 0x09
    1c12:	89 2b       	or	r24, r25
    1c14:	69 f0       	breq	.+26     	; 0x1c30 <xStreamBufferSendFromISR+0x70>
    1c16:	88 85       	ldd	r24, Y+8	; 0x08
    1c18:	99 85       	ldd	r25, Y+9	; 0x09
    1c1a:	e1 2c       	mov	r14, r1
    1c1c:	f1 2c       	mov	r15, r1
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <xTaskGenericNotifyFromISR>
    1c2c:	19 86       	std	Y+9, r1	; 0x09
    1c2e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1c30:	c5 01       	movw	r24, r10
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	08 95       	ret

00001c48 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	2b 01       	movw	r4, r22
    1c6c:	3a 01       	movw	r6, r20
    1c6e:	58 01       	movw	r10, r16
    1c70:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c74:	80 ff       	sbrs	r24, 0
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c78:	68 94       	set
    1c7a:	88 24       	eor	r8, r8
    1c7c:	81 f8       	bld	r8, 1
    1c7e:	91 2c       	mov	r9, r1
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1c82:	81 2c       	mov	r8, r1
    1c84:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c86:	a1 14       	cp	r10, r1
    1c88:	b1 04       	cpc	r11, r1
    1c8a:	c1 04       	cpc	r12, r1
    1c8c:	d1 04       	cpc	r13, r1
    1c8e:	41 f1       	breq	.+80     	; 0x1ce0 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c96:	ce 01       	movw	r24, r28
    1c98:	29 dd       	rcall	.-1454   	; 0x16ec <prvBytesInBuffer>
    1c9a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c9c:	88 16       	cp	r8, r24
    1c9e:	99 06       	cpc	r9, r25
    1ca0:	48 f0       	brcs	.+18     	; 0x1cb4 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1cac:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <xTaskGetCurrentTaskHandle>
    1cb0:	99 87       	std	Y+9, r25	; 0x09
    1cb2:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1cb8:	8e 14       	cp	r8, r14
    1cba:	9f 04       	cpc	r9, r15
    1cbc:	a0 f0       	brcs	.+40     	; 0x1ce6 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1cbe:	e1 2c       	mov	r14, r1
    1cc0:	f1 2c       	mov	r15, r1
    1cc2:	00 e0       	ldi	r16, 0x00	; 0
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
    1cc6:	98 01       	movw	r18, r16
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	ba 01       	movw	r22, r20
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 59 18 	call	0x30b2	; 0x30b2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1cd4:	19 86       	std	Y+9, r1	; 0x09
    1cd6:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1cd8:	ce 01       	movw	r24, r28
    1cda:	08 dd       	rcall	.-1520   	; 0x16ec <prvBytesInBuffer>
    1cdc:	7c 01       	movw	r14, r24
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	04 dd       	rcall	.-1528   	; 0x16ec <prvBytesInBuffer>
    1ce4:	7c 01       	movw	r14, r24
    1ce6:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1ce8:	9f 04       	cpc	r9, r15
    1cea:	e8 f4       	brcc	.+58     	; 0x1d26 <xStreamBufferReceive+0xde>
    1cec:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1cee:	97 01       	movw	r18, r14
    1cf0:	a3 01       	movw	r20, r6
    1cf2:	b2 01       	movw	r22, r4
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	f8 dd       	rcall	.-1040   	; 0x18e8 <prvReadMessageFromBuffer>
    1cf8:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1cfa:	89 2b       	or	r24, r25
    1cfc:	b1 f0       	breq	.+44     	; 0x1d2a <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1cfe:	c3 d2       	rcall	.+1414   	; 0x2286 <vTaskSuspendAll>
    1d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d04:	89 2b       	or	r24, r25
    1d06:	69 f0       	breq	.+26     	; 0x1d22 <xStreamBufferReceive+0xda>
    1d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d0c:	e1 2c       	mov	r14, r1
    1d0e:	f1 2c       	mov	r15, r1
    1d10:	00 e0       	ldi	r16, 0x00	; 0
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	a9 01       	movw	r20, r18
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	0e 94 01 19 	call	0x3202	; 0x3202 <xTaskGenericNotify>
    1d1e:	1b 86       	std	Y+11, r1	; 0x0b
    1d20:	1a 86       	std	Y+10, r1	; 0x0a
    1d22:	f1 d3       	rcall	.+2018   	; 0x2506 <xTaskResumeAll>
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <xStreamBufferReceive+0xe2>
    1d26:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1d28:	d1 2c       	mov	r13, r1
    1d2a:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	bf 90       	pop	r11
    1d3e:	af 90       	pop	r10
    1d40:	9f 90       	pop	r9
    1d42:	8f 90       	pop	r8
    1d44:	7f 90       	pop	r7
    1d46:	6f 90       	pop	r6
    1d48:	5f 90       	pop	r5
    1d4a:	4f 90       	pop	r4
    1d4c:	08 95       	ret

00001d4e <prvResetNextTaskUnblockTime>:
    1d4e:	e0 91 5f 16 	lds	r30, 0x165F	; 0x80165f <pxDelayedTaskList>
    1d52:	f0 91 60 16 	lds	r31, 0x1660	; 0x801660 <pxDelayedTaskList+0x1>
    1d56:	80 81       	ld	r24, Z
    1d58:	81 11       	cpse	r24, r1
    1d5a:	0c c0       	rjmp	.+24     	; 0x1d74 <prvResetNextTaskUnblockTime+0x26>
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	9f ef       	ldi	r25, 0xFF	; 255
    1d60:	dc 01       	movw	r26, r24
    1d62:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <xNextTaskUnblockTime>
    1d66:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <xNextTaskUnblockTime+0x1>
    1d6a:	a0 93 2b 16 	sts	0x162B, r26	; 0x80162b <xNextTaskUnblockTime+0x2>
    1d6e:	b0 93 2c 16 	sts	0x162C, r27	; 0x80162c <xNextTaskUnblockTime+0x3>
    1d72:	08 95       	ret
    1d74:	e0 91 5f 16 	lds	r30, 0x165F	; 0x80165f <pxDelayedTaskList>
    1d78:	f0 91 60 16 	lds	r31, 0x1660	; 0x801660 <pxDelayedTaskList+0x1>
    1d7c:	07 80       	ldd	r0, Z+7	; 0x07
    1d7e:	f0 85       	ldd	r31, Z+8	; 0x08
    1d80:	e0 2d       	mov	r30, r0
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	a2 81       	ldd	r26, Z+2	; 0x02
    1d88:	b3 81       	ldd	r27, Z+3	; 0x03
    1d8a:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <xNextTaskUnblockTime>
    1d8e:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <xNextTaskUnblockTime+0x1>
    1d92:	a0 93 2b 16 	sts	0x162B, r26	; 0x80162b <xNextTaskUnblockTime+0x2>
    1d96:	b0 93 2c 16 	sts	0x162C, r27	; 0x80162c <xNextTaskUnblockTime+0x3>
    1d9a:	08 95       	ret

00001d9c <prvDeleteTCB>:
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	0e 94 0c 06 	call	0xc18	; 0xc18 <vPortFree>
    1daa:	ce 01       	movw	r24, r28
    1dac:	0e 94 0c 06 	call	0xc18	; 0xc18 <vPortFree>
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <prvInitialiseNewTask>:
    1db6:	4f 92       	push	r4
    1db8:	5f 92       	push	r5
    1dba:	6f 92       	push	r6
    1dbc:	7f 92       	push	r7
    1dbe:	8f 92       	push	r8
    1dc0:	9f 92       	push	r9
    1dc2:	af 92       	push	r10
    1dc4:	bf 92       	push	r11
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	2c 01       	movw	r4, r24
    1dd6:	5b 01       	movw	r10, r22
    1dd8:	4a 01       	movw	r8, r20
    1dda:	39 01       	movw	r6, r18
    1ddc:	e6 01       	movw	r28, r12
    1dde:	65 ea       	ldi	r22, 0xA5	; 165
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	0e 94 0a 32 	call	0x6414	; 0x6414 <memset>
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	21 e0       	ldi	r18, 0x01	; 1
    1df0:	82 1a       	sub	r8, r18
    1df2:	91 08       	sbc	r9, r1
    1df4:	88 0e       	add	r8, r24
    1df6:	99 1e       	adc	r9, r25
    1df8:	a1 14       	cp	r10, r1
    1dfa:	b1 04       	cpc	r11, r1
    1dfc:	89 f4       	brne	.+34     	; 0x1e20 <prvInitialiseNewTask+0x6a>
    1dfe:	15 c0       	rjmp	.+42     	; 0x1e2a <prvInitialiseNewTask+0x74>
    1e00:	82 2f       	mov	r24, r18
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	f5 01       	movw	r30, r10
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	30 81       	ld	r19, Z
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a8 0f       	add	r26, r24
    1e10:	b9 1f       	adc	r27, r25
    1e12:	5d 96       	adiw	r26, 0x1d	; 29
    1e14:	3c 93       	st	X, r19
    1e16:	80 81       	ld	r24, Z
    1e18:	88 23       	and	r24, r24
    1e1a:	29 f0       	breq	.+10     	; 0x1e26 <prvInitialiseNewTask+0x70>
    1e1c:	2f 5f       	subi	r18, 0xFF	; 255
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <prvInitialiseNewTask+0x6c>
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	20 31       	cpi	r18, 0x10	; 16
    1e24:	68 f3       	brcs	.-38     	; 0x1e00 <prvInitialiseNewTask+0x4a>
    1e26:	1c a6       	std	Y+44, r1	; 0x2c
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <prvInitialiseNewTask+0x76>
    1e2a:	1d 8e       	std	Y+29, r1	; 0x1d
    1e2c:	0a 30       	cpi	r16, 0x0A	; 10
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <prvInitialiseNewTask+0x7c>
    1e30:	09 e0       	ldi	r16, 0x09	; 9
    1e32:	0a 8f       	std	Y+26, r16	; 0x1a
    1e34:	0d a7       	std	Y+45, r16	; 0x2d
    1e36:	1e a6       	std	Y+46, r1	; 0x2e
    1e38:	ce 01       	movw	r24, r28
    1e3a:	02 96       	adiw	r24, 0x02	; 2
    1e3c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <vListInitialiseItem>
    1e40:	ce 01       	movw	r24, r28
    1e42:	0e 96       	adiw	r24, 0x0e	; 14
    1e44:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <vListInitialiseItem>
    1e48:	db 87       	std	Y+11, r29	; 0x0b
    1e4a:	ca 87       	std	Y+10, r28	; 0x0a
    1e4c:	8a e0       	ldi	r24, 0x0A	; 10
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e0       	ldi	r26, 0x00	; 0
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	80 1b       	sub	r24, r16
    1e56:	91 09       	sbc	r25, r1
    1e58:	a1 09       	sbc	r26, r1
    1e5a:	b1 09       	sbc	r27, r1
    1e5c:	8e 87       	std	Y+14, r24	; 0x0e
    1e5e:	9f 87       	std	Y+15, r25	; 0x0f
    1e60:	a8 8b       	std	Y+16, r26	; 0x10
    1e62:	b9 8b       	std	Y+17, r27	; 0x11
    1e64:	df 8b       	std	Y+23, r29	; 0x17
    1e66:	ce 8b       	std	Y+22, r28	; 0x16
    1e68:	84 e0       	ldi	r24, 0x04	; 4
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	bf 96       	adiw	r30, 0x2f	; 47
    1e6e:	df 01       	movw	r26, r30
    1e70:	1d 92       	st	X+, r1
    1e72:	8a 95       	dec	r24
    1e74:	e9 f7       	brne	.-6      	; 0x1e70 <prvInitialiseNewTask+0xba>
    1e76:	1b aa       	std	Y+51, r1	; 0x33
    1e78:	a3 01       	movw	r20, r6
    1e7a:	b2 01       	movw	r22, r4
    1e7c:	c4 01       	movw	r24, r8
    1e7e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <pxPortInitialiseStack>
    1e82:	99 83       	std	Y+1, r25	; 0x01
    1e84:	88 83       	st	Y, r24
    1e86:	e1 14       	cp	r14, r1
    1e88:	f1 04       	cpc	r15, r1
    1e8a:	19 f0       	breq	.+6      	; 0x1e92 <prvInitialiseNewTask+0xdc>
    1e8c:	f7 01       	movw	r30, r14
    1e8e:	d1 83       	std	Z+1, r29	; 0x01
    1e90:	c0 83       	st	Z, r28
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	0f 91       	pop	r16
    1e98:	ff 90       	pop	r15
    1e9a:	ef 90       	pop	r14
    1e9c:	df 90       	pop	r13
    1e9e:	cf 90       	pop	r12
    1ea0:	bf 90       	pop	r11
    1ea2:	af 90       	pop	r10
    1ea4:	9f 90       	pop	r9
    1ea6:	8f 90       	pop	r8
    1ea8:	7f 90       	pop	r7
    1eaa:	6f 90       	pop	r6
    1eac:	5f 90       	pop	r5
    1eae:	4f 90       	pop	r4
    1eb0:	08 95       	ret

00001eb2 <prvInitialiseTaskLists>:
    1eb2:	cf 93       	push	r28
    1eb4:	c0 e0       	ldi	r28, 0x00	; 0
    1eb6:	09 c0       	rjmp	.+18     	; 0x1eca <prvInitialiseTaskLists+0x18>
    1eb8:	2b e0       	ldi	r18, 0x0B	; 11
    1eba:	c2 9f       	mul	r28, r18
    1ebc:	c0 01       	movw	r24, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	89 58       	subi	r24, 0x89	; 137
    1ec2:	99 4e       	sbci	r25, 0xE9	; 233
    1ec4:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    1ec8:	cf 5f       	subi	r28, 0xFF	; 255
    1eca:	ca 30       	cpi	r28, 0x0A	; 10
    1ecc:	a8 f3       	brcs	.-22     	; 0x1eb8 <prvInitialiseTaskLists+0x6>
    1ece:	8c e6       	ldi	r24, 0x6C	; 108
    1ed0:	96 e1       	ldi	r25, 0x16	; 22
    1ed2:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    1ed6:	81 e6       	ldi	r24, 0x61	; 97
    1ed8:	96 e1       	ldi	r25, 0x16	; 22
    1eda:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    1ede:	82 e5       	ldi	r24, 0x52	; 82
    1ee0:	96 e1       	ldi	r25, 0x16	; 22
    1ee2:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    1ee6:	87 e4       	ldi	r24, 0x47	; 71
    1ee8:	96 e1       	ldi	r25, 0x16	; 22
    1eea:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    1eee:	8b e3       	ldi	r24, 0x3B	; 59
    1ef0:	96 e1       	ldi	r25, 0x16	; 22
    1ef2:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    1ef6:	8c e6       	ldi	r24, 0x6C	; 108
    1ef8:	96 e1       	ldi	r25, 0x16	; 22
    1efa:	90 93 60 16 	sts	0x1660, r25	; 0x801660 <pxDelayedTaskList+0x1>
    1efe:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <pxDelayedTaskList>
    1f02:	81 e6       	ldi	r24, 0x61	; 97
    1f04:	96 e1       	ldi	r25, 0x16	; 22
    1f06:	90 93 5e 16 	sts	0x165E, r25	; 0x80165e <pxOverflowDelayedTaskList+0x1>
    1f0a:	80 93 5d 16 	sts	0x165D, r24	; 0x80165d <pxOverflowDelayedTaskList>
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <prvAddNewTaskToReadyList>:
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	ec 01       	movw	r28, r24
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	0f 92       	push	r0
    1f1e:	80 91 3a 16 	lds	r24, 0x163A	; 0x80163a <uxCurrentNumberOfTasks>
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	80 93 3a 16 	sts	0x163A, r24	; 0x80163a <uxCurrentNumberOfTasks>
    1f28:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    1f2c:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    1f30:	89 2b       	or	r24, r25
    1f32:	51 f4       	brne	.+20     	; 0x1f48 <prvAddNewTaskToReadyList+0x36>
    1f34:	d0 93 e6 16 	sts	0x16E6, r29	; 0x8016e6 <pxCurrentTCB+0x1>
    1f38:	c0 93 e5 16 	sts	0x16E5, r28	; 0x8016e5 <pxCurrentTCB>
    1f3c:	80 91 3a 16 	lds	r24, 0x163A	; 0x80163a <uxCurrentNumberOfTasks>
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	91 f4       	brne	.+36     	; 0x1f68 <prvAddNewTaskToReadyList+0x56>
    1f44:	b6 df       	rcall	.-148    	; 0x1eb2 <prvInitialiseTaskLists>
    1f46:	10 c0       	rjmp	.+32     	; 0x1f68 <prvAddNewTaskToReadyList+0x56>
    1f48:	80 91 34 16 	lds	r24, 0x1634	; 0x801634 <xSchedulerRunning>
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	0c c0       	rjmp	.+24     	; 0x1f68 <prvAddNewTaskToReadyList+0x56>
    1f50:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    1f54:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    1f58:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f5c:	89 17       	cp	r24, r25
    1f5e:	20 f0       	brcs	.+8      	; 0x1f68 <prvAddNewTaskToReadyList+0x56>
    1f60:	d0 93 e6 16 	sts	0x16E6, r29	; 0x8016e6 <pxCurrentTCB+0x1>
    1f64:	c0 93 e5 16 	sts	0x16E5, r28	; 0x8016e5 <pxCurrentTCB>
    1f68:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <uxTaskNumber>
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 2d 16 	sts	0x162D, r24	; 0x80162d <uxTaskNumber>
    1f72:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f74:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    1f78:	8e 17       	cp	r24, r30
    1f7a:	10 f4       	brcc	.+4      	; 0x1f80 <prvAddNewTaskToReadyList+0x6e>
    1f7c:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <uxTopReadyPriority>
    1f80:	8b e0       	ldi	r24, 0x0B	; 11
    1f82:	8e 9f       	mul	r24, r30
    1f84:	f0 01       	movw	r30, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	e9 58       	subi	r30, 0x89	; 137
    1f8a:	f9 4e       	sbci	r31, 0xE9	; 233
    1f8c:	01 80       	ldd	r0, Z+1	; 0x01
    1f8e:	f2 81       	ldd	r31, Z+2	; 0x02
    1f90:	e0 2d       	mov	r30, r0
    1f92:	ff 83       	std	Y+7, r31	; 0x07
    1f94:	ee 83       	std	Y+6, r30	; 0x06
    1f96:	26 81       	ldd	r18, Z+6	; 0x06
    1f98:	37 81       	ldd	r19, Z+7	; 0x07
    1f9a:	39 87       	std	Y+9, r19	; 0x09
    1f9c:	28 87       	std	Y+8, r18	; 0x08
    1f9e:	a6 81       	ldd	r26, Z+6	; 0x06
    1fa0:	b7 81       	ldd	r27, Z+7	; 0x07
    1fa2:	9e 01       	movw	r18, r28
    1fa4:	2e 5f       	subi	r18, 0xFE	; 254
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	15 96       	adiw	r26, 0x05	; 5
    1faa:	3c 93       	st	X, r19
    1fac:	2e 93       	st	-X, r18
    1fae:	14 97       	sbiw	r26, 0x04	; 4
    1fb0:	37 83       	std	Z+7, r19	; 0x07
    1fb2:	26 83       	std	Z+6, r18	; 0x06
    1fb4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1fb6:	8e 9f       	mul	r24, r30
    1fb8:	f0 01       	movw	r30, r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	e9 58       	subi	r30, 0x89	; 137
    1fbe:	f9 4e       	sbci	r31, 0xE9	; 233
    1fc0:	fd 87       	std	Y+13, r31	; 0x0d
    1fc2:	ec 87       	std	Y+12, r30	; 0x0c
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	80 83       	st	Z, r24
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	80 91 34 16 	lds	r24, 0x1634	; 0x801634 <xSchedulerRunning>
    1fd2:	88 23       	and	r24, r24
    1fd4:	51 f0       	breq	.+20     	; 0x1fea <prvAddNewTaskToReadyList+0xd8>
    1fd6:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    1fda:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    1fde:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fe0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe2:	98 17       	cp	r25, r24
    1fe4:	10 f4       	brcc	.+4      	; 0x1fea <prvAddNewTaskToReadyList+0xd8>
    1fe6:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <prvCheckTasksWaitingTermination>:
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	1b c0       	rjmp	.+54     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	0f 92       	push	r0
    1ffc:	e0 91 4e 16 	lds	r30, 0x164E	; 0x80164e <xTasksWaitingTermination+0x7>
    2000:	f0 91 4f 16 	lds	r31, 0x164F	; 0x80164f <xTasksWaitingTermination+0x8>
    2004:	c0 85       	ldd	r28, Z+8	; 0x08
    2006:	d1 85       	ldd	r29, Z+9	; 0x09
    2008:	ce 01       	movw	r24, r28
    200a:	02 96       	adiw	r24, 0x02	; 2
    200c:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
    2010:	80 91 3a 16 	lds	r24, 0x163A	; 0x80163a <uxCurrentNumberOfTasks>
    2014:	81 50       	subi	r24, 0x01	; 1
    2016:	80 93 3a 16 	sts	0x163A, r24	; 0x80163a <uxCurrentNumberOfTasks>
    201a:	80 91 46 16 	lds	r24, 0x1646	; 0x801646 <uxDeletedTasksWaitingCleanUp>
    201e:	81 50       	subi	r24, 0x01	; 1
    2020:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <uxDeletedTasksWaitingCleanUp>
    2024:	0f 90       	pop	r0
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	ce 01       	movw	r24, r28
    202a:	b8 de       	rcall	.-656    	; 0x1d9c <prvDeleteTCB>
    202c:	80 91 46 16 	lds	r24, 0x1646	; 0x801646 <uxDeletedTasksWaitingCleanUp>
    2030:	81 11       	cpse	r24, r1
    2032:	e1 cf       	rjmp	.-62     	; 0x1ff6 <prvCheckTasksWaitingTermination+0x6>
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <prvAddCurrentTaskToDelayedList>:
    203a:	8f 92       	push	r8
    203c:	9f 92       	push	r9
    203e:	af 92       	push	r10
    2040:	bf 92       	push	r11
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	6b 01       	movw	r12, r22
    2050:	7c 01       	movw	r14, r24
    2052:	c4 2f       	mov	r28, r20
    2054:	80 90 36 16 	lds	r8, 0x1636	; 0x801636 <xTickCount>
    2058:	90 90 37 16 	lds	r9, 0x1637	; 0x801637 <xTickCount+0x1>
    205c:	a0 90 38 16 	lds	r10, 0x1638	; 0x801638 <xTickCount+0x2>
    2060:	b0 90 39 16 	lds	r11, 0x1639	; 0x801639 <xTickCount+0x3>
    2064:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2068:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    206c:	02 96       	adiw	r24, 0x02	; 2
    206e:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	c8 16       	cp	r12, r24
    2076:	d8 06       	cpc	r13, r24
    2078:	e8 06       	cpc	r14, r24
    207a:	f8 06       	cpc	r15, r24
    207c:	b1 f5       	brne	.+108    	; 0x20ea <prvAddCurrentTaskToDelayedList+0xb0>
    207e:	cc 23       	and	r28, r28
    2080:	a1 f1       	breq	.+104    	; 0x20ea <prvAddCurrentTaskToDelayedList+0xb0>
    2082:	eb e3       	ldi	r30, 0x3B	; 59
    2084:	f6 e1       	ldi	r31, 0x16	; 22
    2086:	a1 81       	ldd	r26, Z+1	; 0x01
    2088:	b2 81       	ldd	r27, Z+2	; 0x02
    208a:	c0 91 e5 16 	lds	r28, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    208e:	d0 91 e6 16 	lds	r29, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2092:	bf 83       	std	Y+7, r27	; 0x07
    2094:	ae 83       	std	Y+6, r26	; 0x06
    2096:	c0 91 e5 16 	lds	r28, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    209a:	d0 91 e6 16 	lds	r29, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    209e:	16 96       	adiw	r26, 0x06	; 6
    20a0:	8d 91       	ld	r24, X+
    20a2:	9c 91       	ld	r25, X
    20a4:	17 97       	sbiw	r26, 0x07	; 7
    20a6:	99 87       	std	Y+9, r25	; 0x09
    20a8:	88 87       	std	Y+8, r24	; 0x08
    20aa:	16 96       	adiw	r26, 0x06	; 6
    20ac:	cd 91       	ld	r28, X+
    20ae:	dc 91       	ld	r29, X
    20b0:	17 97       	sbiw	r26, 0x07	; 7
    20b2:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    20b6:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    20ba:	02 96       	adiw	r24, 0x02	; 2
    20bc:	9d 83       	std	Y+5, r25	; 0x05
    20be:	8c 83       	std	Y+4, r24	; 0x04
    20c0:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    20c4:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    20c8:	02 96       	adiw	r24, 0x02	; 2
    20ca:	17 96       	adiw	r26, 0x07	; 7
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
    20d0:	16 97       	sbiw	r26, 0x06	; 6
    20d2:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    20d6:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    20da:	1d 96       	adiw	r26, 0x0d	; 13
    20dc:	fc 93       	st	X, r31
    20de:	ee 93       	st	-X, r30
    20e0:	1c 97       	sbiw	r26, 0x0c	; 12
    20e2:	80 81       	ld	r24, Z
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	80 83       	st	Z, r24
    20e8:	3f c0       	rjmp	.+126    	; 0x2168 <prvAddCurrentTaskToDelayedList+0x12e>
    20ea:	c8 0c       	add	r12, r8
    20ec:	d9 1c       	adc	r13, r9
    20ee:	ea 1c       	adc	r14, r10
    20f0:	fb 1c       	adc	r15, r11
    20f2:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    20f6:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    20fa:	c2 82       	std	Z+2, r12	; 0x02
    20fc:	d3 82       	std	Z+3, r13	; 0x03
    20fe:	e4 82       	std	Z+4, r14	; 0x04
    2100:	f5 82       	std	Z+5, r15	; 0x05
    2102:	c8 14       	cp	r12, r8
    2104:	d9 04       	cpc	r13, r9
    2106:	ea 04       	cpc	r14, r10
    2108:	fb 04       	cpc	r15, r11
    210a:	68 f4       	brcc	.+26     	; 0x2126 <prvAddCurrentTaskToDelayedList+0xec>
    210c:	60 91 e5 16 	lds	r22, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2110:	70 91 e6 16 	lds	r23, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2114:	80 91 5d 16 	lds	r24, 0x165D	; 0x80165d <pxOverflowDelayedTaskList>
    2118:	90 91 5e 16 	lds	r25, 0x165E	; 0x80165e <pxOverflowDelayedTaskList+0x1>
    211c:	6e 5f       	subi	r22, 0xFE	; 254
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    2124:	21 c0       	rjmp	.+66     	; 0x2168 <prvAddCurrentTaskToDelayedList+0x12e>
    2126:	60 91 e5 16 	lds	r22, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    212a:	70 91 e6 16 	lds	r23, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    212e:	80 91 5f 16 	lds	r24, 0x165F	; 0x80165f <pxDelayedTaskList>
    2132:	90 91 60 16 	lds	r25, 0x1660	; 0x801660 <pxDelayedTaskList+0x1>
    2136:	6e 5f       	subi	r22, 0xFE	; 254
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    213e:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xNextTaskUnblockTime>
    2142:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xNextTaskUnblockTime+0x1>
    2146:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <xNextTaskUnblockTime+0x2>
    214a:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <xNextTaskUnblockTime+0x3>
    214e:	c8 16       	cp	r12, r24
    2150:	d9 06       	cpc	r13, r25
    2152:	ea 06       	cpc	r14, r26
    2154:	fb 06       	cpc	r15, r27
    2156:	40 f4       	brcc	.+16     	; 0x2168 <prvAddCurrentTaskToDelayedList+0x12e>
    2158:	c0 92 29 16 	sts	0x1629, r12	; 0x801629 <xNextTaskUnblockTime>
    215c:	d0 92 2a 16 	sts	0x162A, r13	; 0x80162a <xNextTaskUnblockTime+0x1>
    2160:	e0 92 2b 16 	sts	0x162B, r14	; 0x80162b <xNextTaskUnblockTime+0x2>
    2164:	f0 92 2c 16 	sts	0x162C, r15	; 0x80162c <xNextTaskUnblockTime+0x3>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	bf 90       	pop	r11
    2176:	af 90       	pop	r10
    2178:	9f 90       	pop	r9
    217a:	8f 90       	pop	r8
    217c:	08 95       	ret

0000217e <xTaskCreate>:
    217e:	2f 92       	push	r2
    2180:	3f 92       	push	r3
    2182:	4f 92       	push	r4
    2184:	5f 92       	push	r5
    2186:	6f 92       	push	r6
    2188:	7f 92       	push	r7
    218a:	8f 92       	push	r8
    218c:	9f 92       	push	r9
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	3c 01       	movw	r6, r24
    21a2:	1b 01       	movw	r2, r22
    21a4:	4a 01       	movw	r8, r20
    21a6:	29 01       	movw	r4, r18
    21a8:	ca 01       	movw	r24, r20
    21aa:	0e 94 63 05 	call	0xac6	; 0xac6 <pvPortMalloc>
    21ae:	6c 01       	movw	r12, r24
    21b0:	89 2b       	or	r24, r25
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <xTaskCreate+0x52>
    21b4:	84 e3       	ldi	r24, 0x34	; 52
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 63 05 	call	0xac6	; 0xac6 <pvPortMalloc>
    21bc:	ec 01       	movw	r28, r24
    21be:	89 2b       	or	r24, r25
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <xTaskCreate+0x4a>
    21c2:	dc 8e       	std	Y+28, r13	; 0x1c
    21c4:	cb 8e       	std	Y+27, r12	; 0x1b
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <xTaskCreate+0x56>
    21c8:	c6 01       	movw	r24, r12
    21ca:	0e 94 0c 06 	call	0xc18	; 0xc18 <vPortFree>
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <xTaskCreate+0x56>
    21d0:	c0 e0       	ldi	r28, 0x00	; 0
    21d2:	d0 e0       	ldi	r29, 0x00	; 0
    21d4:	20 97       	sbiw	r28, 0x00	; 0
    21d6:	61 f0       	breq	.+24     	; 0x21f0 <xTaskCreate+0x72>
    21d8:	a1 2c       	mov	r10, r1
    21da:	b1 2c       	mov	r11, r1
    21dc:	6e 01       	movw	r12, r28
    21de:	92 01       	movw	r18, r4
    21e0:	a4 01       	movw	r20, r8
    21e2:	b1 01       	movw	r22, r2
    21e4:	c3 01       	movw	r24, r6
    21e6:	e7 dd       	rcall	.-1074   	; 0x1db6 <prvInitialiseNewTask>
    21e8:	ce 01       	movw	r24, r28
    21ea:	93 de       	rcall	.-730    	; 0x1f12 <prvAddNewTaskToReadyList>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <xTaskCreate+0x74>
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	df 90       	pop	r13
    21fe:	cf 90       	pop	r12
    2200:	bf 90       	pop	r11
    2202:	af 90       	pop	r10
    2204:	9f 90       	pop	r9
    2206:	8f 90       	pop	r8
    2208:	7f 90       	pop	r7
    220a:	6f 90       	pop	r6
    220c:	5f 90       	pop	r5
    220e:	4f 90       	pop	r4
    2210:	3f 90       	pop	r3
    2212:	2f 90       	pop	r2
    2214:	08 95       	ret

00002216 <vTaskStartScheduler>:
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	0f 2e       	mov	r0, r31
    221e:	f7 e2       	ldi	r31, 0x27	; 39
    2220:	ef 2e       	mov	r14, r31
    2222:	f6 e1       	ldi	r31, 0x16	; 22
    2224:	ff 2e       	mov	r15, r31
    2226:	f0 2d       	mov	r31, r0
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 ec       	ldi	r20, 0xC0	; 192
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	66 e7       	ldi	r22, 0x76	; 118
    2234:	73 e0       	ldi	r23, 0x03	; 3
    2236:	8d ec       	ldi	r24, 0xCD	; 205
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a1 df       	rcall	.-190    	; 0x217e <xTaskCreate>
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	11 f4       	brne	.+4      	; 0x2244 <vTaskStartScheduler+0x2e>
    2240:	0e 94 be 1b 	call	0x377c	; 0x377c <xTimerCreateTimerTask>
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	c9 f4       	brne	.+50     	; 0x227a <vTaskStartScheduler+0x64>
    2248:	f8 94       	cli
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	dc 01       	movw	r26, r24
    2250:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <xNextTaskUnblockTime>
    2254:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <xNextTaskUnblockTime+0x1>
    2258:	a0 93 2b 16 	sts	0x162B, r26	; 0x80162b <xNextTaskUnblockTime+0x2>
    225c:	b0 93 2c 16 	sts	0x162C, r27	; 0x80162c <xNextTaskUnblockTime+0x3>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 34 16 	sts	0x1634, r24	; 0x801634 <xSchedulerRunning>
    2266:	10 92 36 16 	sts	0x1636, r1	; 0x801636 <xTickCount>
    226a:	10 92 37 16 	sts	0x1637, r1	; 0x801637 <xTickCount+0x1>
    226e:	10 92 38 16 	sts	0x1638, r1	; 0x801638 <xTickCount+0x2>
    2272:	10 92 39 16 	sts	0x1639, r1	; 0x801639 <xTickCount+0x3>
    2276:	0e 94 e5 06 	call	0xdca	; 0xdca <xPortStartScheduler>
    227a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	08 95       	ret

00002286 <vTaskSuspendAll>:
    2286:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    228a:	8f 5f       	subi	r24, 0xFF	; 255
    228c:	80 93 26 16 	sts	0x1626, r24	; 0x801626 <uxSchedulerSuspended>
    2290:	08 95       	ret

00002292 <xTaskGetTickCount>:
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	0f 92       	push	r0
    2298:	60 91 36 16 	lds	r22, 0x1636	; 0x801636 <xTickCount>
    229c:	70 91 37 16 	lds	r23, 0x1637	; 0x801637 <xTickCount+0x1>
    22a0:	80 91 38 16 	lds	r24, 0x1638	; 0x801638 <xTickCount+0x2>
    22a4:	90 91 39 16 	lds	r25, 0x1639	; 0x801639 <xTickCount+0x3>
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	08 95       	ret

000022ae <xTaskIncrementTick>:
    22ae:	cf 92       	push	r12
    22b0:	df 92       	push	r13
    22b2:	ef 92       	push	r14
    22b4:	ff 92       	push	r15
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    22be:	81 11       	cpse	r24, r1
    22c0:	05 c1       	rjmp	.+522    	; 0x24cc <xTaskIncrementTick+0x21e>
    22c2:	c0 90 36 16 	lds	r12, 0x1636	; 0x801636 <xTickCount>
    22c6:	d0 90 37 16 	lds	r13, 0x1637	; 0x801637 <xTickCount+0x1>
    22ca:	e0 90 38 16 	lds	r14, 0x1638	; 0x801638 <xTickCount+0x2>
    22ce:	f0 90 39 16 	lds	r15, 0x1639	; 0x801639 <xTickCount+0x3>
    22d2:	8f ef       	ldi	r24, 0xFF	; 255
    22d4:	c8 1a       	sub	r12, r24
    22d6:	d8 0a       	sbc	r13, r24
    22d8:	e8 0a       	sbc	r14, r24
    22da:	f8 0a       	sbc	r15, r24
    22dc:	c0 92 36 16 	sts	0x1636, r12	; 0x801636 <xTickCount>
    22e0:	d0 92 37 16 	sts	0x1637, r13	; 0x801637 <xTickCount+0x1>
    22e4:	e0 92 38 16 	sts	0x1638, r14	; 0x801638 <xTickCount+0x2>
    22e8:	f0 92 39 16 	sts	0x1639, r15	; 0x801639 <xTickCount+0x3>
    22ec:	c1 14       	cp	r12, r1
    22ee:	d1 04       	cpc	r13, r1
    22f0:	e1 04       	cpc	r14, r1
    22f2:	f1 04       	cpc	r15, r1
    22f4:	b1 f4       	brne	.+44     	; 0x2322 <xTaskIncrementTick+0x74>
    22f6:	80 91 5f 16 	lds	r24, 0x165F	; 0x80165f <pxDelayedTaskList>
    22fa:	90 91 60 16 	lds	r25, 0x1660	; 0x801660 <pxDelayedTaskList+0x1>
    22fe:	20 91 5d 16 	lds	r18, 0x165D	; 0x80165d <pxOverflowDelayedTaskList>
    2302:	30 91 5e 16 	lds	r19, 0x165E	; 0x80165e <pxOverflowDelayedTaskList+0x1>
    2306:	30 93 60 16 	sts	0x1660, r19	; 0x801660 <pxDelayedTaskList+0x1>
    230a:	20 93 5f 16 	sts	0x165F, r18	; 0x80165f <pxDelayedTaskList>
    230e:	90 93 5e 16 	sts	0x165E, r25	; 0x80165e <pxOverflowDelayedTaskList+0x1>
    2312:	80 93 5d 16 	sts	0x165D, r24	; 0x80165d <pxOverflowDelayedTaskList>
    2316:	80 91 2e 16 	lds	r24, 0x162E	; 0x80162e <xNumOfOverflows>
    231a:	8f 5f       	subi	r24, 0xFF	; 255
    231c:	80 93 2e 16 	sts	0x162E, r24	; 0x80162e <xNumOfOverflows>
    2320:	16 dd       	rcall	.-1492   	; 0x1d4e <prvResetNextTaskUnblockTime>
    2322:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xNextTaskUnblockTime>
    2326:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xNextTaskUnblockTime+0x1>
    232a:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <xNextTaskUnblockTime+0x2>
    232e:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <xNextTaskUnblockTime+0x3>
    2332:	c8 16       	cp	r12, r24
    2334:	d9 06       	cpc	r13, r25
    2336:	ea 06       	cpc	r14, r26
    2338:	fb 06       	cpc	r15, r27
    233a:	20 f4       	brcc	.+8      	; 0x2344 <xTaskIncrementTick+0x96>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	b2 c0       	rjmp	.+356    	; 0x24a4 <xTaskIncrementTick+0x1f6>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <xTaskIncrementTick+0x98>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	e0 91 5f 16 	lds	r30, 0x165F	; 0x80165f <pxDelayedTaskList>
    234a:	f0 91 60 16 	lds	r31, 0x1660	; 0x801660 <pxDelayedTaskList+0x1>
    234e:	90 81       	ld	r25, Z
    2350:	91 11       	cpse	r25, r1
    2352:	0c c0       	rjmp	.+24     	; 0x236c <xTaskIncrementTick+0xbe>
    2354:	4f ef       	ldi	r20, 0xFF	; 255
    2356:	5f ef       	ldi	r21, 0xFF	; 255
    2358:	ba 01       	movw	r22, r20
    235a:	40 93 29 16 	sts	0x1629, r20	; 0x801629 <xNextTaskUnblockTime>
    235e:	50 93 2a 16 	sts	0x162A, r21	; 0x80162a <xNextTaskUnblockTime+0x1>
    2362:	60 93 2b 16 	sts	0x162B, r22	; 0x80162b <xNextTaskUnblockTime+0x2>
    2366:	70 93 2c 16 	sts	0x162C, r23	; 0x80162c <xNextTaskUnblockTime+0x3>
    236a:	9c c0       	rjmp	.+312    	; 0x24a4 <xTaskIncrementTick+0x1f6>
    236c:	e0 91 5f 16 	lds	r30, 0x165F	; 0x80165f <pxDelayedTaskList>
    2370:	f0 91 60 16 	lds	r31, 0x1660	; 0x801660 <pxDelayedTaskList+0x1>
    2374:	07 80       	ldd	r0, Z+7	; 0x07
    2376:	f0 85       	ldd	r31, Z+8	; 0x08
    2378:	e0 2d       	mov	r30, r0
    237a:	00 84       	ldd	r0, Z+8	; 0x08
    237c:	f1 85       	ldd	r31, Z+9	; 0x09
    237e:	e0 2d       	mov	r30, r0
    2380:	42 81       	ldd	r20, Z+2	; 0x02
    2382:	53 81       	ldd	r21, Z+3	; 0x03
    2384:	64 81       	ldd	r22, Z+4	; 0x04
    2386:	75 81       	ldd	r23, Z+5	; 0x05
    2388:	c4 16       	cp	r12, r20
    238a:	d5 06       	cpc	r13, r21
    238c:	e6 06       	cpc	r14, r22
    238e:	f7 06       	cpc	r15, r23
    2390:	48 f4       	brcc	.+18     	; 0x23a4 <xTaskIncrementTick+0xf6>
    2392:	40 93 29 16 	sts	0x1629, r20	; 0x801629 <xNextTaskUnblockTime>
    2396:	50 93 2a 16 	sts	0x162A, r21	; 0x80162a <xNextTaskUnblockTime+0x1>
    239a:	60 93 2b 16 	sts	0x162B, r22	; 0x80162b <xNextTaskUnblockTime+0x2>
    239e:	70 93 2c 16 	sts	0x162C, r23	; 0x80162c <xNextTaskUnblockTime+0x3>
    23a2:	80 c0       	rjmp	.+256    	; 0x24a4 <xTaskIncrementTick+0x1f6>
    23a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23a8:	c6 81       	ldd	r28, Z+6	; 0x06
    23aa:	d7 81       	ldd	r29, Z+7	; 0x07
    23ac:	20 85       	ldd	r18, Z+8	; 0x08
    23ae:	31 85       	ldd	r19, Z+9	; 0x09
    23b0:	3f 83       	std	Y+7, r19	; 0x07
    23b2:	2e 83       	std	Y+6, r18	; 0x06
    23b4:	c0 85       	ldd	r28, Z+8	; 0x08
    23b6:	d1 85       	ldd	r29, Z+9	; 0x09
    23b8:	26 81       	ldd	r18, Z+6	; 0x06
    23ba:	37 81       	ldd	r19, Z+7	; 0x07
    23bc:	3d 83       	std	Y+5, r19	; 0x05
    23be:	2c 83       	std	Y+4, r18	; 0x04
    23c0:	11 96       	adiw	r26, 0x01	; 1
    23c2:	4d 91       	ld	r20, X+
    23c4:	5c 91       	ld	r21, X
    23c6:	12 97       	sbiw	r26, 0x02	; 2
    23c8:	9f 01       	movw	r18, r30
    23ca:	2e 5f       	subi	r18, 0xFE	; 254
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	42 17       	cp	r20, r18
    23d0:	53 07       	cpc	r21, r19
    23d2:	31 f4       	brne	.+12     	; 0x23e0 <xTaskIncrementTick+0x132>
    23d4:	40 85       	ldd	r20, Z+8	; 0x08
    23d6:	51 85       	ldd	r21, Z+9	; 0x09
    23d8:	12 96       	adiw	r26, 0x02	; 2
    23da:	5c 93       	st	X, r21
    23dc:	4e 93       	st	-X, r20
    23de:	11 97       	sbiw	r26, 0x01	; 1
    23e0:	15 86       	std	Z+13, r1	; 0x0d
    23e2:	14 86       	std	Z+12, r1	; 0x0c
    23e4:	9c 91       	ld	r25, X
    23e6:	91 50       	subi	r25, 0x01	; 1
    23e8:	9c 93       	st	X, r25
    23ea:	a0 8d       	ldd	r26, Z+24	; 0x18
    23ec:	b1 8d       	ldd	r27, Z+25	; 0x19
    23ee:	10 97       	sbiw	r26, 0x00	; 0
    23f0:	09 f1       	breq	.+66     	; 0x2434 <xTaskIncrementTick+0x186>
    23f2:	c2 89       	ldd	r28, Z+18	; 0x12
    23f4:	d3 89       	ldd	r29, Z+19	; 0x13
    23f6:	44 89       	ldd	r20, Z+20	; 0x14
    23f8:	55 89       	ldd	r21, Z+21	; 0x15
    23fa:	5f 83       	std	Y+7, r21	; 0x07
    23fc:	4e 83       	std	Y+6, r20	; 0x06
    23fe:	c4 89       	ldd	r28, Z+20	; 0x14
    2400:	d5 89       	ldd	r29, Z+21	; 0x15
    2402:	42 89       	ldd	r20, Z+18	; 0x12
    2404:	53 89       	ldd	r21, Z+19	; 0x13
    2406:	5d 83       	std	Y+5, r21	; 0x05
    2408:	4c 83       	std	Y+4, r20	; 0x04
    240a:	11 96       	adiw	r26, 0x01	; 1
    240c:	6d 91       	ld	r22, X+
    240e:	7c 91       	ld	r23, X
    2410:	12 97       	sbiw	r26, 0x02	; 2
    2412:	af 01       	movw	r20, r30
    2414:	42 5f       	subi	r20, 0xF2	; 242
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	64 17       	cp	r22, r20
    241a:	75 07       	cpc	r23, r21
    241c:	31 f4       	brne	.+12     	; 0x242a <xTaskIncrementTick+0x17c>
    241e:	44 89       	ldd	r20, Z+20	; 0x14
    2420:	55 89       	ldd	r21, Z+21	; 0x15
    2422:	12 96       	adiw	r26, 0x02	; 2
    2424:	5c 93       	st	X, r21
    2426:	4e 93       	st	-X, r20
    2428:	11 97       	sbiw	r26, 0x01	; 1
    242a:	11 8e       	std	Z+25, r1	; 0x19
    242c:	10 8e       	std	Z+24, r1	; 0x18
    242e:	9c 91       	ld	r25, X
    2430:	91 50       	subi	r25, 0x01	; 1
    2432:	9c 93       	st	X, r25
    2434:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2436:	90 91 35 16 	lds	r25, 0x1635	; 0x801635 <uxTopReadyPriority>
    243a:	9a 17       	cp	r25, r26
    243c:	10 f4       	brcc	.+4      	; 0x2442 <xTaskIncrementTick+0x194>
    243e:	a0 93 35 16 	sts	0x1635, r26	; 0x801635 <uxTopReadyPriority>
    2442:	9b e0       	ldi	r25, 0x0B	; 11
    2444:	9a 9f       	mul	r25, r26
    2446:	d0 01       	movw	r26, r0
    2448:	11 24       	eor	r1, r1
    244a:	a9 58       	subi	r26, 0x89	; 137
    244c:	b9 4e       	sbci	r27, 0xE9	; 233
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	0d 90       	ld	r0, X+
    2452:	bc 91       	ld	r27, X
    2454:	a0 2d       	mov	r26, r0
    2456:	b7 83       	std	Z+7, r27	; 0x07
    2458:	a6 83       	std	Z+6, r26	; 0x06
    245a:	16 96       	adiw	r26, 0x06	; 6
    245c:	4d 91       	ld	r20, X+
    245e:	5c 91       	ld	r21, X
    2460:	17 97       	sbiw	r26, 0x07	; 7
    2462:	51 87       	std	Z+9, r21	; 0x09
    2464:	40 87       	std	Z+8, r20	; 0x08
    2466:	16 96       	adiw	r26, 0x06	; 6
    2468:	cd 91       	ld	r28, X+
    246a:	dc 91       	ld	r29, X
    246c:	17 97       	sbiw	r26, 0x07	; 7
    246e:	3d 83       	std	Y+5, r19	; 0x05
    2470:	2c 83       	std	Y+4, r18	; 0x04
    2472:	17 96       	adiw	r26, 0x07	; 7
    2474:	3c 93       	st	X, r19
    2476:	2e 93       	st	-X, r18
    2478:	16 97       	sbiw	r26, 0x06	; 6
    247a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    247c:	9a 9f       	mul	r25, r26
    247e:	d0 01       	movw	r26, r0
    2480:	11 24       	eor	r1, r1
    2482:	a9 58       	subi	r26, 0x89	; 137
    2484:	b9 4e       	sbci	r27, 0xE9	; 233
    2486:	b5 87       	std	Z+13, r27	; 0x0d
    2488:	a4 87       	std	Z+12, r26	; 0x0c
    248a:	9c 91       	ld	r25, X
    248c:	9f 5f       	subi	r25, 0xFF	; 255
    248e:	9c 93       	st	X, r25
    2490:	22 8d       	ldd	r18, Z+26	; 0x1a
    2492:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2496:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    249a:	92 8d       	ldd	r25, Z+26	; 0x1a
    249c:	29 17       	cp	r18, r25
    249e:	08 f0       	brcs	.+2      	; 0x24a2 <xTaskIncrementTick+0x1f4>
    24a0:	4f cf       	rjmp	.-354    	; 0x2340 <xTaskIncrementTick+0x92>
    24a2:	51 cf       	rjmp	.-350    	; 0x2346 <xTaskIncrementTick+0x98>
    24a4:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    24a8:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    24ac:	e2 8d       	ldd	r30, Z+26	; 0x1a
    24ae:	9b e0       	ldi	r25, 0x0B	; 11
    24b0:	e9 9f       	mul	r30, r25
    24b2:	f0 01       	movw	r30, r0
    24b4:	11 24       	eor	r1, r1
    24b6:	e9 58       	subi	r30, 0x89	; 137
    24b8:	f9 4e       	sbci	r31, 0xE9	; 233
    24ba:	90 81       	ld	r25, Z
    24bc:	92 30       	cpi	r25, 0x02	; 2
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <xTaskIncrementTick+0x214>
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 91 2f 16 	lds	r25, 0x162F	; 0x80162f <xYieldPending>
    24c6:	91 11       	cpse	r25, r1
    24c8:	16 c0       	rjmp	.+44     	; 0x24f6 <xTaskIncrementTick+0x248>
    24ca:	16 c0       	rjmp	.+44     	; 0x24f8 <xTaskIncrementTick+0x24a>
    24cc:	80 91 30 16 	lds	r24, 0x1630	; 0x801630 <xPendedTicks>
    24d0:	90 91 31 16 	lds	r25, 0x1631	; 0x801631 <xPendedTicks+0x1>
    24d4:	a0 91 32 16 	lds	r26, 0x1632	; 0x801632 <xPendedTicks+0x2>
    24d8:	b0 91 33 16 	lds	r27, 0x1633	; 0x801633 <xPendedTicks+0x3>
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	a1 1d       	adc	r26, r1
    24e0:	b1 1d       	adc	r27, r1
    24e2:	80 93 30 16 	sts	0x1630, r24	; 0x801630 <xPendedTicks>
    24e6:	90 93 31 16 	sts	0x1631, r25	; 0x801631 <xPendedTicks+0x1>
    24ea:	a0 93 32 16 	sts	0x1632, r26	; 0x801632 <xPendedTicks+0x2>
    24ee:	b0 93 33 16 	sts	0x1633, r27	; 0x801633 <xPendedTicks+0x3>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <xTaskIncrementTick+0x24a>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	df 90       	pop	r13
    2502:	cf 90       	pop	r12
    2504:	08 95       	ret

00002506 <xTaskResumeAll>:
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	0f 92       	push	r0
    2518:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    251c:	81 50       	subi	r24, 0x01	; 1
    251e:	80 93 26 16 	sts	0x1626, r24	; 0x801626 <uxSchedulerSuspended>
    2522:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    2526:	81 11       	cpse	r24, r1
    2528:	be c0       	rjmp	.+380    	; 0x26a6 <xTaskResumeAll+0x1a0>
    252a:	80 91 3a 16 	lds	r24, 0x163A	; 0x80163a <uxCurrentNumberOfTasks>
    252e:	81 11       	cpse	r24, r1
    2530:	88 c0       	rjmp	.+272    	; 0x2642 <xTaskResumeAll+0x13c>
    2532:	bc c0       	rjmp	.+376    	; 0x26ac <xTaskResumeAll+0x1a6>
    2534:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <xPendingReadyList+0x7>
    2538:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <xPendingReadyList+0x8>
    253c:	00 84       	ldd	r0, Z+8	; 0x08
    253e:	f1 85       	ldd	r31, Z+9	; 0x09
    2540:	e0 2d       	mov	r30, r0
    2542:	a0 8d       	ldd	r26, Z+24	; 0x18
    2544:	b1 8d       	ldd	r27, Z+25	; 0x19
    2546:	c2 89       	ldd	r28, Z+18	; 0x12
    2548:	d3 89       	ldd	r29, Z+19	; 0x13
    254a:	84 89       	ldd	r24, Z+20	; 0x14
    254c:	95 89       	ldd	r25, Z+21	; 0x15
    254e:	9f 83       	std	Y+7, r25	; 0x07
    2550:	8e 83       	std	Y+6, r24	; 0x06
    2552:	c4 89       	ldd	r28, Z+20	; 0x14
    2554:	d5 89       	ldd	r29, Z+21	; 0x15
    2556:	82 89       	ldd	r24, Z+18	; 0x12
    2558:	93 89       	ldd	r25, Z+19	; 0x13
    255a:	9d 83       	std	Y+5, r25	; 0x05
    255c:	8c 83       	std	Y+4, r24	; 0x04
    255e:	11 96       	adiw	r26, 0x01	; 1
    2560:	2d 91       	ld	r18, X+
    2562:	3c 91       	ld	r19, X
    2564:	12 97       	sbiw	r26, 0x02	; 2
    2566:	cf 01       	movw	r24, r30
    2568:	0e 96       	adiw	r24, 0x0e	; 14
    256a:	28 17       	cp	r18, r24
    256c:	39 07       	cpc	r19, r25
    256e:	31 f4       	brne	.+12     	; 0x257c <xTaskResumeAll+0x76>
    2570:	84 89       	ldd	r24, Z+20	; 0x14
    2572:	95 89       	ldd	r25, Z+21	; 0x15
    2574:	12 96       	adiw	r26, 0x02	; 2
    2576:	9c 93       	st	X, r25
    2578:	8e 93       	st	-X, r24
    257a:	11 97       	sbiw	r26, 0x01	; 1
    257c:	11 8e       	std	Z+25, r1	; 0x19
    257e:	10 8e       	std	Z+24, r1	; 0x18
    2580:	8c 91       	ld	r24, X
    2582:	81 50       	subi	r24, 0x01	; 1
    2584:	8c 93       	st	X, r24
    2586:	a4 85       	ldd	r26, Z+12	; 0x0c
    2588:	b5 85       	ldd	r27, Z+13	; 0x0d
    258a:	c6 81       	ldd	r28, Z+6	; 0x06
    258c:	d7 81       	ldd	r29, Z+7	; 0x07
    258e:	80 85       	ldd	r24, Z+8	; 0x08
    2590:	91 85       	ldd	r25, Z+9	; 0x09
    2592:	9f 83       	std	Y+7, r25	; 0x07
    2594:	8e 83       	std	Y+6, r24	; 0x06
    2596:	c0 85       	ldd	r28, Z+8	; 0x08
    2598:	d1 85       	ldd	r29, Z+9	; 0x09
    259a:	86 81       	ldd	r24, Z+6	; 0x06
    259c:	97 81       	ldd	r25, Z+7	; 0x07
    259e:	9d 83       	std	Y+5, r25	; 0x05
    25a0:	8c 83       	std	Y+4, r24	; 0x04
    25a2:	11 96       	adiw	r26, 0x01	; 1
    25a4:	8d 91       	ld	r24, X+
    25a6:	9c 91       	ld	r25, X
    25a8:	12 97       	sbiw	r26, 0x02	; 2
    25aa:	9f 01       	movw	r18, r30
    25ac:	2e 5f       	subi	r18, 0xFE	; 254
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	82 17       	cp	r24, r18
    25b2:	93 07       	cpc	r25, r19
    25b4:	31 f4       	brne	.+12     	; 0x25c2 <xTaskResumeAll+0xbc>
    25b6:	80 85       	ldd	r24, Z+8	; 0x08
    25b8:	91 85       	ldd	r25, Z+9	; 0x09
    25ba:	12 96       	adiw	r26, 0x02	; 2
    25bc:	9c 93       	st	X, r25
    25be:	8e 93       	st	-X, r24
    25c0:	11 97       	sbiw	r26, 0x01	; 1
    25c2:	15 86       	std	Z+13, r1	; 0x0d
    25c4:	14 86       	std	Z+12, r1	; 0x0c
    25c6:	8c 91       	ld	r24, X
    25c8:	81 50       	subi	r24, 0x01	; 1
    25ca:	8c 93       	st	X, r24
    25cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25ce:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    25d2:	8a 17       	cp	r24, r26
    25d4:	10 f4       	brcc	.+4      	; 0x25da <xTaskResumeAll+0xd4>
    25d6:	a0 93 35 16 	sts	0x1635, r26	; 0x801635 <uxTopReadyPriority>
    25da:	8b e0       	ldi	r24, 0x0B	; 11
    25dc:	8a 9f       	mul	r24, r26
    25de:	d0 01       	movw	r26, r0
    25e0:	11 24       	eor	r1, r1
    25e2:	a9 58       	subi	r26, 0x89	; 137
    25e4:	b9 4e       	sbci	r27, 0xE9	; 233
    25e6:	11 96       	adiw	r26, 0x01	; 1
    25e8:	0d 90       	ld	r0, X+
    25ea:	bc 91       	ld	r27, X
    25ec:	a0 2d       	mov	r26, r0
    25ee:	b7 83       	std	Z+7, r27	; 0x07
    25f0:	a6 83       	std	Z+6, r26	; 0x06
    25f2:	16 96       	adiw	r26, 0x06	; 6
    25f4:	4d 91       	ld	r20, X+
    25f6:	5c 91       	ld	r21, X
    25f8:	17 97       	sbiw	r26, 0x07	; 7
    25fa:	51 87       	std	Z+9, r21	; 0x09
    25fc:	40 87       	std	Z+8, r20	; 0x08
    25fe:	16 96       	adiw	r26, 0x06	; 6
    2600:	cd 91       	ld	r28, X+
    2602:	dc 91       	ld	r29, X
    2604:	17 97       	sbiw	r26, 0x07	; 7
    2606:	3d 83       	std	Y+5, r19	; 0x05
    2608:	2c 83       	std	Y+4, r18	; 0x04
    260a:	17 96       	adiw	r26, 0x07	; 7
    260c:	3c 93       	st	X, r19
    260e:	2e 93       	st	-X, r18
    2610:	16 97       	sbiw	r26, 0x06	; 6
    2612:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2614:	8a 9f       	mul	r24, r26
    2616:	d0 01       	movw	r26, r0
    2618:	11 24       	eor	r1, r1
    261a:	a9 58       	subi	r26, 0x89	; 137
    261c:	b9 4e       	sbci	r27, 0xE9	; 233
    261e:	b5 87       	std	Z+13, r27	; 0x0d
    2620:	a4 87       	std	Z+12, r26	; 0x0c
    2622:	8c 91       	ld	r24, X
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	8c 93       	st	X, r24
    2628:	92 8d       	ldd	r25, Z+26	; 0x1a
    262a:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    262e:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2632:	5a 96       	adiw	r26, 0x1a	; 26
    2634:	8c 91       	ld	r24, X
    2636:	98 17       	cp	r25, r24
    2638:	30 f0       	brcs	.+12     	; 0x2646 <xTaskResumeAll+0x140>
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	80 93 2f 16 	sts	0x162F, r24	; 0x80162f <xYieldPending>
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <xTaskResumeAll+0x140>
    2642:	e0 e0       	ldi	r30, 0x00	; 0
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <xPendingReadyList>
    264a:	81 11       	cpse	r24, r1
    264c:	73 cf       	rjmp	.-282    	; 0x2534 <xTaskResumeAll+0x2e>
    264e:	ef 2b       	or	r30, r31
    2650:	09 f0       	breq	.+2      	; 0x2654 <xTaskResumeAll+0x14e>
    2652:	7d db       	rcall	.-2310   	; 0x1d4e <prvResetNextTaskUnblockTime>
    2654:	c0 90 30 16 	lds	r12, 0x1630	; 0x801630 <xPendedTicks>
    2658:	d0 90 31 16 	lds	r13, 0x1631	; 0x801631 <xPendedTicks+0x1>
    265c:	e0 90 32 16 	lds	r14, 0x1632	; 0x801632 <xPendedTicks+0x2>
    2660:	f0 90 33 16 	lds	r15, 0x1633	; 0x801633 <xPendedTicks+0x3>
    2664:	c1 14       	cp	r12, r1
    2666:	d1 04       	cpc	r13, r1
    2668:	e1 04       	cpc	r14, r1
    266a:	f1 04       	cpc	r15, r1
    266c:	a1 f0       	breq	.+40     	; 0x2696 <xTaskResumeAll+0x190>
    266e:	1f de       	rcall	.-962    	; 0x22ae <xTaskIncrementTick>
    2670:	88 23       	and	r24, r24
    2672:	19 f0       	breq	.+6      	; 0x267a <xTaskResumeAll+0x174>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 2f 16 	sts	0x162F, r24	; 0x80162f <xYieldPending>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	c8 1a       	sub	r12, r24
    267e:	d1 08       	sbc	r13, r1
    2680:	e1 08       	sbc	r14, r1
    2682:	f1 08       	sbc	r15, r1
    2684:	a1 f7       	brne	.-24     	; 0x266e <xTaskResumeAll+0x168>
    2686:	10 92 30 16 	sts	0x1630, r1	; 0x801630 <xPendedTicks>
    268a:	10 92 31 16 	sts	0x1631, r1	; 0x801631 <xPendedTicks+0x1>
    268e:	10 92 32 16 	sts	0x1632, r1	; 0x801632 <xPendedTicks+0x2>
    2692:	10 92 33 16 	sts	0x1633, r1	; 0x801633 <xPendedTicks+0x3>
    2696:	80 91 2f 16 	lds	r24, 0x162F	; 0x80162f <xYieldPending>
    269a:	88 23       	and	r24, r24
    269c:	31 f0       	breq	.+12     	; 0x26aa <xTaskResumeAll+0x1a4>
    269e:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <xTaskResumeAll+0x1a6>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	01 c0       	rjmp	.+2      	; 0x26ac <xTaskResumeAll+0x1a6>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	cf 90       	pop	r12
    26bc:	08 95       	ret

000026be <xTaskDelayUntil>:
    26be:	8f 92       	push	r8
    26c0:	9f 92       	push	r9
    26c2:	af 92       	push	r10
    26c4:	bf 92       	push	r11
    26c6:	cf 92       	push	r12
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ec 01       	movw	r28, r24
    26d6:	6a 01       	movw	r12, r20
    26d8:	7b 01       	movw	r14, r22
    26da:	d5 dd       	rcall	.-1110   	; 0x2286 <vTaskSuspendAll>
    26dc:	80 90 36 16 	lds	r8, 0x1636	; 0x801636 <xTickCount>
    26e0:	90 90 37 16 	lds	r9, 0x1637	; 0x801637 <xTickCount+0x1>
    26e4:	a0 90 38 16 	lds	r10, 0x1638	; 0x801638 <xTickCount+0x2>
    26e8:	b0 90 39 16 	lds	r11, 0x1639	; 0x801639 <xTickCount+0x3>
    26ec:	88 81       	ld	r24, Y
    26ee:	99 81       	ldd	r25, Y+1	; 0x01
    26f0:	aa 81       	ldd	r26, Y+2	; 0x02
    26f2:	bb 81       	ldd	r27, Y+3	; 0x03
    26f4:	ac 01       	movw	r20, r24
    26f6:	bd 01       	movw	r22, r26
    26f8:	4c 0d       	add	r20, r12
    26fa:	5d 1d       	adc	r21, r13
    26fc:	6e 1d       	adc	r22, r14
    26fe:	7f 1d       	adc	r23, r15
    2700:	88 16       	cp	r8, r24
    2702:	99 06       	cpc	r9, r25
    2704:	aa 06       	cpc	r10, r26
    2706:	bb 06       	cpc	r11, r27
    2708:	60 f4       	brcc	.+24     	; 0x2722 <xTaskDelayUntil+0x64>
    270a:	48 17       	cp	r20, r24
    270c:	59 07       	cpc	r21, r25
    270e:	6a 07       	cpc	r22, r26
    2710:	7b 07       	cpc	r23, r27
    2712:	98 f4       	brcc	.+38     	; 0x273a <xTaskDelayUntil+0x7c>
    2714:	84 16       	cp	r8, r20
    2716:	95 06       	cpc	r9, r21
    2718:	a6 06       	cpc	r10, r22
    271a:	b7 06       	cpc	r11, r23
    271c:	80 f0       	brcs	.+32     	; 0x273e <xTaskDelayUntil+0x80>
    271e:	10 e0       	ldi	r17, 0x00	; 0
    2720:	13 c0       	rjmp	.+38     	; 0x2748 <xTaskDelayUntil+0x8a>
    2722:	48 17       	cp	r20, r24
    2724:	59 07       	cpc	r21, r25
    2726:	6a 07       	cpc	r22, r26
    2728:	7b 07       	cpc	r23, r27
    272a:	58 f0       	brcs	.+22     	; 0x2742 <xTaskDelayUntil+0x84>
    272c:	84 16       	cp	r8, r20
    272e:	95 06       	cpc	r9, r21
    2730:	a6 06       	cpc	r10, r22
    2732:	b7 06       	cpc	r11, r23
    2734:	40 f0       	brcs	.+16     	; 0x2746 <xTaskDelayUntil+0x88>
    2736:	10 e0       	ldi	r17, 0x00	; 0
    2738:	07 c0       	rjmp	.+14     	; 0x2748 <xTaskDelayUntil+0x8a>
    273a:	10 e0       	ldi	r17, 0x00	; 0
    273c:	05 c0       	rjmp	.+10     	; 0x2748 <xTaskDelayUntil+0x8a>
    273e:	11 e0       	ldi	r17, 0x01	; 1
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <xTaskDelayUntil+0x8a>
    2742:	11 e0       	ldi	r17, 0x01	; 1
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <xTaskDelayUntil+0x8a>
    2746:	11 e0       	ldi	r17, 0x01	; 1
    2748:	48 83       	st	Y, r20
    274a:	59 83       	std	Y+1, r21	; 0x01
    274c:	6a 83       	std	Y+2, r22	; 0x02
    274e:	7b 83       	std	Y+3, r23	; 0x03
    2750:	11 23       	and	r17, r17
    2752:	41 f0       	breq	.+16     	; 0x2764 <xTaskDelayUntil+0xa6>
    2754:	cb 01       	movw	r24, r22
    2756:	ba 01       	movw	r22, r20
    2758:	68 19       	sub	r22, r8
    275a:	79 09       	sbc	r23, r9
    275c:	8a 09       	sbc	r24, r10
    275e:	9b 09       	sbc	r25, r11
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	6b dc       	rcall	.-1834   	; 0x203a <prvAddCurrentTaskToDelayedList>
    2764:	d0 de       	rcall	.-608    	; 0x2506 <xTaskResumeAll>
    2766:	81 11       	cpse	r24, r1
    2768:	02 c0       	rjmp	.+4      	; 0x276e <xTaskDelayUntil+0xb0>
    276a:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    276e:	81 2f       	mov	r24, r17
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	ff 90       	pop	r15
    2778:	ef 90       	pop	r14
    277a:	df 90       	pop	r13
    277c:	cf 90       	pop	r12
    277e:	bf 90       	pop	r11
    2780:	af 90       	pop	r10
    2782:	9f 90       	pop	r9
    2784:	8f 90       	pop	r8
    2786:	08 95       	ret

00002788 <vTaskDelay>:
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	6b 01       	movw	r12, r22
    2792:	7c 01       	movw	r14, r24
    2794:	67 2b       	or	r22, r23
    2796:	68 2b       	or	r22, r24
    2798:	69 2b       	or	r22, r25
    279a:	39 f0       	breq	.+14     	; 0x27aa <vTaskDelay+0x22>
    279c:	74 dd       	rcall	.-1304   	; 0x2286 <vTaskSuspendAll>
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	c7 01       	movw	r24, r14
    27a2:	b6 01       	movw	r22, r12
    27a4:	4a dc       	rcall	.-1900   	; 0x203a <prvAddCurrentTaskToDelayedList>
    27a6:	af de       	rcall	.-674    	; 0x2506 <xTaskResumeAll>
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <vTaskDelay+0x24>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	81 11       	cpse	r24, r1
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <vTaskDelay+0x2c>
    27b0:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	08 95       	ret

000027be <vTaskSwitchContext>:
    27be:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    27c2:	88 23       	and	r24, r24
    27c4:	21 f0       	breq	.+8      	; 0x27ce <vTaskSwitchContext+0x10>
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	80 93 2f 16 	sts	0x162F, r24	; 0x80162f <xYieldPending>
    27cc:	08 95       	ret
    27ce:	10 92 2f 16 	sts	0x162F, r1	; 0x80162f <xYieldPending>
    27d2:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    27d6:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    27da:	20 81       	ld	r18, Z
    27dc:	31 81       	ldd	r19, Z+1	; 0x01
    27de:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    27e2:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    27e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    27e8:	94 8d       	ldd	r25, Z+28	; 0x1c
    27ea:	82 17       	cp	r24, r18
    27ec:	93 07       	cpc	r25, r19
    27ee:	60 f0       	brcs	.+24     	; 0x2808 <vTaskSwitchContext+0x4a>
    27f0:	60 91 e5 16 	lds	r22, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    27f4:	70 91 e6 16 	lds	r23, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    27f8:	63 5e       	subi	r22, 0xE3	; 227
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2800:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2804:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <vApplicationStackOverflowHook>
    2808:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <vTaskSwitchContext+0x52>
    280e:	81 50       	subi	r24, 0x01	; 1
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	9b e0       	ldi	r25, 0x0B	; 11
    2816:	92 9f       	mul	r25, r18
    2818:	f0 01       	movw	r30, r0
    281a:	93 9f       	mul	r25, r19
    281c:	f0 0d       	add	r31, r0
    281e:	11 24       	eor	r1, r1
    2820:	e9 58       	subi	r30, 0x89	; 137
    2822:	f9 4e       	sbci	r31, 0xE9	; 233
    2824:	90 81       	ld	r25, Z
    2826:	99 23       	and	r25, r25
    2828:	91 f3       	breq	.-28     	; 0x280e <vTaskSwitchContext+0x50>
    282a:	9b e0       	ldi	r25, 0x0B	; 11
    282c:	92 9f       	mul	r25, r18
    282e:	a0 01       	movw	r20, r0
    2830:	93 9f       	mul	r25, r19
    2832:	50 0d       	add	r21, r0
    2834:	11 24       	eor	r1, r1
    2836:	df 01       	movw	r26, r30
    2838:	01 80       	ldd	r0, Z+1	; 0x01
    283a:	f2 81       	ldd	r31, Z+2	; 0x02
    283c:	e0 2d       	mov	r30, r0
    283e:	04 80       	ldd	r0, Z+4	; 0x04
    2840:	f5 81       	ldd	r31, Z+5	; 0x05
    2842:	e0 2d       	mov	r30, r0
    2844:	12 96       	adiw	r26, 0x02	; 2
    2846:	fc 93       	st	X, r31
    2848:	ee 93       	st	-X, r30
    284a:	11 97       	sbiw	r26, 0x01	; 1
    284c:	46 58       	subi	r20, 0x86	; 134
    284e:	59 4e       	sbci	r21, 0xE9	; 233
    2850:	e4 17       	cp	r30, r20
    2852:	f5 07       	cpc	r31, r21
    2854:	29 f4       	brne	.+10     	; 0x2860 <vTaskSwitchContext+0xa2>
    2856:	44 81       	ldd	r20, Z+4	; 0x04
    2858:	55 81       	ldd	r21, Z+5	; 0x05
    285a:	fd 01       	movw	r30, r26
    285c:	52 83       	std	Z+2, r21	; 0x02
    285e:	41 83       	std	Z+1, r20	; 0x01
    2860:	9b e0       	ldi	r25, 0x0B	; 11
    2862:	92 9f       	mul	r25, r18
    2864:	f0 01       	movw	r30, r0
    2866:	93 9f       	mul	r25, r19
    2868:	f0 0d       	add	r31, r0
    286a:	11 24       	eor	r1, r1
    286c:	e9 58       	subi	r30, 0x89	; 137
    286e:	f9 4e       	sbci	r31, 0xE9	; 233
    2870:	01 80       	ldd	r0, Z+1	; 0x01
    2872:	f2 81       	ldd	r31, Z+2	; 0x02
    2874:	e0 2d       	mov	r30, r0
    2876:	20 85       	ldd	r18, Z+8	; 0x08
    2878:	31 85       	ldd	r19, Z+9	; 0x09
    287a:	30 93 e6 16 	sts	0x16E6, r19	; 0x8016e6 <pxCurrentTCB+0x1>
    287e:	20 93 e5 16 	sts	0x16E5, r18	; 0x8016e5 <pxCurrentTCB>
    2882:	80 93 35 16 	sts	0x1635, r24	; 0x801635 <uxTopReadyPriority>
    2886:	08 95       	ret

00002888 <vTaskPlaceOnEventList>:
    2888:	cf 92       	push	r12
    288a:	df 92       	push	r13
    288c:	ef 92       	push	r14
    288e:	ff 92       	push	r15
    2890:	6a 01       	movw	r12, r20
    2892:	7b 01       	movw	r14, r22
    2894:	60 91 e5 16 	lds	r22, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2898:	70 91 e6 16 	lds	r23, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    289c:	62 5f       	subi	r22, 0xF2	; 242
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	c7 01       	movw	r24, r14
    28a8:	b6 01       	movw	r22, r12
    28aa:	c7 db       	rcall	.-2162   	; 0x203a <prvAddCurrentTaskToDelayedList>
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	08 95       	ret

000028b6 <vTaskPlaceOnUnorderedEventList>:
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	fc 01       	movw	r30, r24
    28c0:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    28c4:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    28c8:	70 68       	ori	r23, 0x80	; 128
    28ca:	1e 96       	adiw	r26, 0x0e	; 14
    28cc:	4d 93       	st	X+, r20
    28ce:	5d 93       	st	X+, r21
    28d0:	6d 93       	st	X+, r22
    28d2:	7c 93       	st	X, r23
    28d4:	51 97       	sbiw	r26, 0x11	; 17
    28d6:	a1 81       	ldd	r26, Z+1	; 0x01
    28d8:	b2 81       	ldd	r27, Z+2	; 0x02
    28da:	c0 91 e5 16 	lds	r28, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    28de:	d0 91 e6 16 	lds	r29, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    28e2:	bb 8b       	std	Y+19, r27	; 0x13
    28e4:	aa 8b       	std	Y+18, r26	; 0x12
    28e6:	c0 91 e5 16 	lds	r28, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    28ea:	d0 91 e6 16 	lds	r29, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    28ee:	16 96       	adiw	r26, 0x06	; 6
    28f0:	8d 91       	ld	r24, X+
    28f2:	9c 91       	ld	r25, X
    28f4:	17 97       	sbiw	r26, 0x07	; 7
    28f6:	9d 8b       	std	Y+21, r25	; 0x15
    28f8:	8c 8b       	std	Y+20, r24	; 0x14
    28fa:	16 96       	adiw	r26, 0x06	; 6
    28fc:	cd 91       	ld	r28, X+
    28fe:	dc 91       	ld	r29, X
    2900:	17 97       	sbiw	r26, 0x07	; 7
    2902:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2906:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    290a:	0e 96       	adiw	r24, 0x0e	; 14
    290c:	9d 83       	std	Y+5, r25	; 0x05
    290e:	8c 83       	std	Y+4, r24	; 0x04
    2910:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2914:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2918:	0e 96       	adiw	r24, 0x0e	; 14
    291a:	17 96       	adiw	r26, 0x07	; 7
    291c:	9c 93       	st	X, r25
    291e:	8e 93       	st	-X, r24
    2920:	16 97       	sbiw	r26, 0x06	; 6
    2922:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2926:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    292a:	59 96       	adiw	r26, 0x19	; 25
    292c:	fc 93       	st	X, r31
    292e:	ee 93       	st	-X, r30
    2930:	58 97       	sbiw	r26, 0x18	; 24
    2932:	80 81       	ld	r24, Z
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	80 83       	st	Z, r24
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	c9 01       	movw	r24, r18
    293c:	b8 01       	movw	r22, r16
    293e:	7d db       	rcall	.-2310   	; 0x203a <prvAddCurrentTaskToDelayedList>
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	08 95       	ret

0000294a <vTaskPlaceOnEventListRestricted>:
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	fc 01       	movw	r30, r24
    2950:	cb 01       	movw	r24, r22
    2952:	ba 01       	movw	r22, r20
    2954:	a1 81       	ldd	r26, Z+1	; 0x01
    2956:	b2 81       	ldd	r27, Z+2	; 0x02
    2958:	c0 91 e5 16 	lds	r28, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    295c:	d0 91 e6 16 	lds	r29, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2960:	bb 8b       	std	Y+19, r27	; 0x13
    2962:	aa 8b       	std	Y+18, r26	; 0x12
    2964:	c0 91 e5 16 	lds	r28, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2968:	d0 91 e6 16 	lds	r29, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    296c:	16 96       	adiw	r26, 0x06	; 6
    296e:	4d 91       	ld	r20, X+
    2970:	5c 91       	ld	r21, X
    2972:	17 97       	sbiw	r26, 0x07	; 7
    2974:	5d 8b       	std	Y+21, r21	; 0x15
    2976:	4c 8b       	std	Y+20, r20	; 0x14
    2978:	16 96       	adiw	r26, 0x06	; 6
    297a:	cd 91       	ld	r28, X+
    297c:	dc 91       	ld	r29, X
    297e:	17 97       	sbiw	r26, 0x07	; 7
    2980:	40 91 e5 16 	lds	r20, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2984:	50 91 e6 16 	lds	r21, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2988:	42 5f       	subi	r20, 0xF2	; 242
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	5d 83       	std	Y+5, r21	; 0x05
    298e:	4c 83       	std	Y+4, r20	; 0x04
    2990:	40 91 e5 16 	lds	r20, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2994:	50 91 e6 16 	lds	r21, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2998:	42 5f       	subi	r20, 0xF2	; 242
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	17 96       	adiw	r26, 0x07	; 7
    299e:	5c 93       	st	X, r21
    29a0:	4e 93       	st	-X, r20
    29a2:	16 97       	sbiw	r26, 0x06	; 6
    29a4:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    29a8:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    29ac:	59 96       	adiw	r26, 0x19	; 25
    29ae:	fc 93       	st	X, r31
    29b0:	ee 93       	st	-X, r30
    29b2:	58 97       	sbiw	r26, 0x18	; 24
    29b4:	30 81       	ld	r19, Z
    29b6:	3f 5f       	subi	r19, 0xFF	; 255
    29b8:	30 83       	st	Z, r19
    29ba:	22 23       	and	r18, r18
    29bc:	19 f0       	breq	.+6      	; 0x29c4 <vTaskPlaceOnEventListRestricted+0x7a>
    29be:	6f ef       	ldi	r22, 0xFF	; 255
    29c0:	7f ef       	ldi	r23, 0xFF	; 255
    29c2:	cb 01       	movw	r24, r22
    29c4:	42 2f       	mov	r20, r18
    29c6:	39 db       	rcall	.-2446   	; 0x203a <prvAddCurrentTaskToDelayedList>
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	08 95       	ret

000029ce <xTaskRemoveFromEventList>:
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	dc 01       	movw	r26, r24
    29d4:	17 96       	adiw	r26, 0x07	; 7
    29d6:	ed 91       	ld	r30, X+
    29d8:	fc 91       	ld	r31, X
    29da:	18 97       	sbiw	r26, 0x08	; 8
    29dc:	00 84       	ldd	r0, Z+8	; 0x08
    29de:	f1 85       	ldd	r31, Z+9	; 0x09
    29e0:	e0 2d       	mov	r30, r0
    29e2:	a0 8d       	ldd	r26, Z+24	; 0x18
    29e4:	b1 8d       	ldd	r27, Z+25	; 0x19
    29e6:	c2 89       	ldd	r28, Z+18	; 0x12
    29e8:	d3 89       	ldd	r29, Z+19	; 0x13
    29ea:	84 89       	ldd	r24, Z+20	; 0x14
    29ec:	95 89       	ldd	r25, Z+21	; 0x15
    29ee:	9f 83       	std	Y+7, r25	; 0x07
    29f0:	8e 83       	std	Y+6, r24	; 0x06
    29f2:	c4 89       	ldd	r28, Z+20	; 0x14
    29f4:	d5 89       	ldd	r29, Z+21	; 0x15
    29f6:	82 89       	ldd	r24, Z+18	; 0x12
    29f8:	93 89       	ldd	r25, Z+19	; 0x13
    29fa:	9d 83       	std	Y+5, r25	; 0x05
    29fc:	8c 83       	std	Y+4, r24	; 0x04
    29fe:	11 96       	adiw	r26, 0x01	; 1
    2a00:	8d 91       	ld	r24, X+
    2a02:	9c 91       	ld	r25, X
    2a04:	12 97       	sbiw	r26, 0x02	; 2
    2a06:	9f 01       	movw	r18, r30
    2a08:	22 5f       	subi	r18, 0xF2	; 242
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	82 17       	cp	r24, r18
    2a0e:	93 07       	cpc	r25, r19
    2a10:	31 f4       	brne	.+12     	; 0x2a1e <xTaskRemoveFromEventList+0x50>
    2a12:	84 89       	ldd	r24, Z+20	; 0x14
    2a14:	95 89       	ldd	r25, Z+21	; 0x15
    2a16:	12 96       	adiw	r26, 0x02	; 2
    2a18:	9c 93       	st	X, r25
    2a1a:	8e 93       	st	-X, r24
    2a1c:	11 97       	sbiw	r26, 0x01	; 1
    2a1e:	11 8e       	std	Z+25, r1	; 0x19
    2a20:	10 8e       	std	Z+24, r1	; 0x18
    2a22:	8c 91       	ld	r24, X
    2a24:	81 50       	subi	r24, 0x01	; 1
    2a26:	8c 93       	st	X, r24
    2a28:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    2a2c:	81 11       	cpse	r24, r1
    2a2e:	52 c0       	rjmp	.+164    	; 0x2ad4 <xTaskRemoveFromEventList+0x106>
    2a30:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a32:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a34:	c6 81       	ldd	r28, Z+6	; 0x06
    2a36:	d7 81       	ldd	r29, Z+7	; 0x07
    2a38:	80 85       	ldd	r24, Z+8	; 0x08
    2a3a:	91 85       	ldd	r25, Z+9	; 0x09
    2a3c:	9f 83       	std	Y+7, r25	; 0x07
    2a3e:	8e 83       	std	Y+6, r24	; 0x06
    2a40:	c0 85       	ldd	r28, Z+8	; 0x08
    2a42:	d1 85       	ldd	r29, Z+9	; 0x09
    2a44:	86 81       	ldd	r24, Z+6	; 0x06
    2a46:	97 81       	ldd	r25, Z+7	; 0x07
    2a48:	9d 83       	std	Y+5, r25	; 0x05
    2a4a:	8c 83       	std	Y+4, r24	; 0x04
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	8d 91       	ld	r24, X+
    2a50:	9c 91       	ld	r25, X
    2a52:	12 97       	sbiw	r26, 0x02	; 2
    2a54:	9f 01       	movw	r18, r30
    2a56:	2e 5f       	subi	r18, 0xFE	; 254
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	82 17       	cp	r24, r18
    2a5c:	93 07       	cpc	r25, r19
    2a5e:	31 f4       	brne	.+12     	; 0x2a6c <xTaskRemoveFromEventList+0x9e>
    2a60:	80 85       	ldd	r24, Z+8	; 0x08
    2a62:	91 85       	ldd	r25, Z+9	; 0x09
    2a64:	12 96       	adiw	r26, 0x02	; 2
    2a66:	9c 93       	st	X, r25
    2a68:	8e 93       	st	-X, r24
    2a6a:	11 97       	sbiw	r26, 0x01	; 1
    2a6c:	15 86       	std	Z+13, r1	; 0x0d
    2a6e:	14 86       	std	Z+12, r1	; 0x0c
    2a70:	8c 91       	ld	r24, X
    2a72:	81 50       	subi	r24, 0x01	; 1
    2a74:	8c 93       	st	X, r24
    2a76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a78:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    2a7c:	8a 17       	cp	r24, r26
    2a7e:	10 f4       	brcc	.+4      	; 0x2a84 <xTaskRemoveFromEventList+0xb6>
    2a80:	a0 93 35 16 	sts	0x1635, r26	; 0x801635 <uxTopReadyPriority>
    2a84:	8b e0       	ldi	r24, 0x0B	; 11
    2a86:	8a 9f       	mul	r24, r26
    2a88:	d0 01       	movw	r26, r0
    2a8a:	11 24       	eor	r1, r1
    2a8c:	a9 58       	subi	r26, 0x89	; 137
    2a8e:	b9 4e       	sbci	r27, 0xE9	; 233
    2a90:	11 96       	adiw	r26, 0x01	; 1
    2a92:	0d 90       	ld	r0, X+
    2a94:	bc 91       	ld	r27, X
    2a96:	a0 2d       	mov	r26, r0
    2a98:	b7 83       	std	Z+7, r27	; 0x07
    2a9a:	a6 83       	std	Z+6, r26	; 0x06
    2a9c:	16 96       	adiw	r26, 0x06	; 6
    2a9e:	4d 91       	ld	r20, X+
    2aa0:	5c 91       	ld	r21, X
    2aa2:	17 97       	sbiw	r26, 0x07	; 7
    2aa4:	51 87       	std	Z+9, r21	; 0x09
    2aa6:	40 87       	std	Z+8, r20	; 0x08
    2aa8:	16 96       	adiw	r26, 0x06	; 6
    2aaa:	cd 91       	ld	r28, X+
    2aac:	dc 91       	ld	r29, X
    2aae:	17 97       	sbiw	r26, 0x07	; 7
    2ab0:	3d 83       	std	Y+5, r19	; 0x05
    2ab2:	2c 83       	std	Y+4, r18	; 0x04
    2ab4:	17 96       	adiw	r26, 0x07	; 7
    2ab6:	3c 93       	st	X, r19
    2ab8:	2e 93       	st	-X, r18
    2aba:	16 97       	sbiw	r26, 0x06	; 6
    2abc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2abe:	8a 9f       	mul	r24, r26
    2ac0:	d0 01       	movw	r26, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	a9 58       	subi	r26, 0x89	; 137
    2ac6:	b9 4e       	sbci	r27, 0xE9	; 233
    2ac8:	b5 87       	std	Z+13, r27	; 0x0d
    2aca:	a4 87       	std	Z+12, r26	; 0x0c
    2acc:	8c 91       	ld	r24, X
    2ace:	8f 5f       	subi	r24, 0xFF	; 255
    2ad0:	8c 93       	st	X, r24
    2ad2:	1c c0       	rjmp	.+56     	; 0x2b0c <xTaskRemoveFromEventList+0x13e>
    2ad4:	42 e5       	ldi	r20, 0x52	; 82
    2ad6:	56 e1       	ldi	r21, 0x16	; 22
    2ad8:	da 01       	movw	r26, r20
    2ada:	11 96       	adiw	r26, 0x01	; 1
    2adc:	cd 91       	ld	r28, X+
    2ade:	dc 91       	ld	r29, X
    2ae0:	12 97       	sbiw	r26, 0x02	; 2
    2ae2:	d3 8b       	std	Z+19, r29	; 0x13
    2ae4:	c2 8b       	std	Z+18, r28	; 0x12
    2ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aea:	95 8b       	std	Z+21, r25	; 0x15
    2aec:	84 8b       	std	Z+20, r24	; 0x14
    2aee:	8e 81       	ldd	r24, Y+6	; 0x06
    2af0:	9f 81       	ldd	r25, Y+7	; 0x07
    2af2:	dc 01       	movw	r26, r24
    2af4:	15 96       	adiw	r26, 0x05	; 5
    2af6:	3c 93       	st	X, r19
    2af8:	2e 93       	st	-X, r18
    2afa:	14 97       	sbiw	r26, 0x04	; 4
    2afc:	3f 83       	std	Y+7, r19	; 0x07
    2afe:	2e 83       	std	Y+6, r18	; 0x06
    2b00:	51 8f       	std	Z+25, r21	; 0x19
    2b02:	40 8f       	std	Z+24, r20	; 0x18
    2b04:	da 01       	movw	r26, r20
    2b06:	8c 91       	ld	r24, X
    2b08:	8f 5f       	subi	r24, 0xFF	; 255
    2b0a:	8c 93       	st	X, r24
    2b0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b0e:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2b12:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2b16:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b18:	89 17       	cp	r24, r25
    2b1a:	20 f4       	brcc	.+8      	; 0x2b24 <xTaskRemoveFromEventList+0x156>
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	80 93 2f 16 	sts	0x162F, r24	; 0x80162f <xYieldPending>
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <xTaskRemoveFromEventList+0x158>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	08 95       	ret

00002b2c <vTaskRemoveFromUnorderedEventList>:
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	dc 01       	movw	r26, r24
    2b32:	70 68       	ori	r23, 0x80	; 128
    2b34:	4d 93       	st	X+, r20
    2b36:	5d 93       	st	X+, r21
    2b38:	6d 93       	st	X+, r22
    2b3a:	7c 93       	st	X, r23
    2b3c:	13 97       	sbiw	r26, 0x03	; 3
    2b3e:	18 96       	adiw	r26, 0x08	; 8
    2b40:	ed 91       	ld	r30, X+
    2b42:	fc 91       	ld	r31, X
    2b44:	19 97       	sbiw	r26, 0x09	; 9
    2b46:	1a 96       	adiw	r26, 0x0a	; 10
    2b48:	4d 91       	ld	r20, X+
    2b4a:	5c 91       	ld	r21, X
    2b4c:	1b 97       	sbiw	r26, 0x0b	; 11
    2b4e:	14 96       	adiw	r26, 0x04	; 4
    2b50:	8d 91       	ld	r24, X+
    2b52:	9c 91       	ld	r25, X
    2b54:	15 97       	sbiw	r26, 0x05	; 5
    2b56:	16 96       	adiw	r26, 0x06	; 6
    2b58:	2d 91       	ld	r18, X+
    2b5a:	3c 91       	ld	r19, X
    2b5c:	17 97       	sbiw	r26, 0x07	; 7
    2b5e:	ec 01       	movw	r28, r24
    2b60:	3f 83       	std	Y+7, r19	; 0x07
    2b62:	2e 83       	std	Y+6, r18	; 0x06
    2b64:	16 96       	adiw	r26, 0x06	; 6
    2b66:	8d 91       	ld	r24, X+
    2b68:	9c 91       	ld	r25, X
    2b6a:	17 97       	sbiw	r26, 0x07	; 7
    2b6c:	14 96       	adiw	r26, 0x04	; 4
    2b6e:	2d 91       	ld	r18, X+
    2b70:	3c 91       	ld	r19, X
    2b72:	15 97       	sbiw	r26, 0x05	; 5
    2b74:	ec 01       	movw	r28, r24
    2b76:	3d 83       	std	Y+5, r19	; 0x05
    2b78:	2c 83       	std	Y+4, r18	; 0x04
    2b7a:	ea 01       	movw	r28, r20
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	a8 17       	cp	r26, r24
    2b82:	b9 07       	cpc	r27, r25
    2b84:	31 f4       	brne	.+12     	; 0x2b92 <vTaskRemoveFromUnorderedEventList+0x66>
    2b86:	16 96       	adiw	r26, 0x06	; 6
    2b88:	8d 91       	ld	r24, X+
    2b8a:	9c 91       	ld	r25, X
    2b8c:	17 97       	sbiw	r26, 0x07	; 7
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	1b 96       	adiw	r26, 0x0b	; 11
    2b94:	1c 92       	st	X, r1
    2b96:	1e 92       	st	-X, r1
    2b98:	1a 97       	sbiw	r26, 0x0a	; 10
    2b9a:	da 01       	movw	r26, r20
    2b9c:	8c 91       	ld	r24, X
    2b9e:	81 50       	subi	r24, 0x01	; 1
    2ba0:	8c 93       	st	X, r24
    2ba2:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ba4:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ba6:	c6 81       	ldd	r28, Z+6	; 0x06
    2ba8:	d7 81       	ldd	r29, Z+7	; 0x07
    2baa:	80 85       	ldd	r24, Z+8	; 0x08
    2bac:	91 85       	ldd	r25, Z+9	; 0x09
    2bae:	9f 83       	std	Y+7, r25	; 0x07
    2bb0:	8e 83       	std	Y+6, r24	; 0x06
    2bb2:	c0 85       	ldd	r28, Z+8	; 0x08
    2bb4:	d1 85       	ldd	r29, Z+9	; 0x09
    2bb6:	86 81       	ldd	r24, Z+6	; 0x06
    2bb8:	97 81       	ldd	r25, Z+7	; 0x07
    2bba:	9d 83       	std	Y+5, r25	; 0x05
    2bbc:	8c 83       	std	Y+4, r24	; 0x04
    2bbe:	11 96       	adiw	r26, 0x01	; 1
    2bc0:	8d 91       	ld	r24, X+
    2bc2:	9c 91       	ld	r25, X
    2bc4:	12 97       	sbiw	r26, 0x02	; 2
    2bc6:	9f 01       	movw	r18, r30
    2bc8:	2e 5f       	subi	r18, 0xFE	; 254
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	82 17       	cp	r24, r18
    2bce:	93 07       	cpc	r25, r19
    2bd0:	31 f4       	brne	.+12     	; 0x2bde <vTaskRemoveFromUnorderedEventList+0xb2>
    2bd2:	80 85       	ldd	r24, Z+8	; 0x08
    2bd4:	91 85       	ldd	r25, Z+9	; 0x09
    2bd6:	12 96       	adiw	r26, 0x02	; 2
    2bd8:	9c 93       	st	X, r25
    2bda:	8e 93       	st	-X, r24
    2bdc:	11 97       	sbiw	r26, 0x01	; 1
    2bde:	15 86       	std	Z+13, r1	; 0x0d
    2be0:	14 86       	std	Z+12, r1	; 0x0c
    2be2:	8c 91       	ld	r24, X
    2be4:	81 50       	subi	r24, 0x01	; 1
    2be6:	8c 93       	st	X, r24
    2be8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bea:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    2bee:	8a 17       	cp	r24, r26
    2bf0:	10 f4       	brcc	.+4      	; 0x2bf6 <vTaskRemoveFromUnorderedEventList+0xca>
    2bf2:	a0 93 35 16 	sts	0x1635, r26	; 0x801635 <uxTopReadyPriority>
    2bf6:	8b e0       	ldi	r24, 0x0B	; 11
    2bf8:	8a 9f       	mul	r24, r26
    2bfa:	d0 01       	movw	r26, r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	a9 58       	subi	r26, 0x89	; 137
    2c00:	b9 4e       	sbci	r27, 0xE9	; 233
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	0d 90       	ld	r0, X+
    2c06:	bc 91       	ld	r27, X
    2c08:	a0 2d       	mov	r26, r0
    2c0a:	b7 83       	std	Z+7, r27	; 0x07
    2c0c:	a6 83       	std	Z+6, r26	; 0x06
    2c0e:	16 96       	adiw	r26, 0x06	; 6
    2c10:	4d 91       	ld	r20, X+
    2c12:	5c 91       	ld	r21, X
    2c14:	17 97       	sbiw	r26, 0x07	; 7
    2c16:	51 87       	std	Z+9, r21	; 0x09
    2c18:	40 87       	std	Z+8, r20	; 0x08
    2c1a:	16 96       	adiw	r26, 0x06	; 6
    2c1c:	cd 91       	ld	r28, X+
    2c1e:	dc 91       	ld	r29, X
    2c20:	17 97       	sbiw	r26, 0x07	; 7
    2c22:	3d 83       	std	Y+5, r19	; 0x05
    2c24:	2c 83       	std	Y+4, r18	; 0x04
    2c26:	17 96       	adiw	r26, 0x07	; 7
    2c28:	3c 93       	st	X, r19
    2c2a:	2e 93       	st	-X, r18
    2c2c:	16 97       	sbiw	r26, 0x06	; 6
    2c2e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c30:	8a 9f       	mul	r24, r26
    2c32:	d0 01       	movw	r26, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	a9 58       	subi	r26, 0x89	; 137
    2c38:	b9 4e       	sbci	r27, 0xE9	; 233
    2c3a:	b5 87       	std	Z+13, r27	; 0x0d
    2c3c:	a4 87       	std	Z+12, r26	; 0x0c
    2c3e:	8c 91       	ld	r24, X
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	8c 93       	st	X, r24
    2c44:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c46:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2c4a:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2c4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c50:	89 17       	cp	r24, r25
    2c52:	18 f4       	brcc	.+6      	; 0x2c5a <vTaskRemoveFromUnorderedEventList+0x12e>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	80 93 2f 16 	sts	0x162F, r24	; 0x80162f <xYieldPending>
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret

00002c60 <vTaskSetTimeOutState>:
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	0f 92       	push	r0
    2c66:	20 91 2e 16 	lds	r18, 0x162E	; 0x80162e <xNumOfOverflows>
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	20 83       	st	Z, r18
    2c6e:	40 91 36 16 	lds	r20, 0x1636	; 0x801636 <xTickCount>
    2c72:	50 91 37 16 	lds	r21, 0x1637	; 0x801637 <xTickCount+0x1>
    2c76:	60 91 38 16 	lds	r22, 0x1638	; 0x801638 <xTickCount+0x2>
    2c7a:	70 91 39 16 	lds	r23, 0x1639	; 0x801639 <xTickCount+0x3>
    2c7e:	41 83       	std	Z+1, r20	; 0x01
    2c80:	52 83       	std	Z+2, r21	; 0x02
    2c82:	63 83       	std	Z+3, r22	; 0x03
    2c84:	74 83       	std	Z+4, r23	; 0x04
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	08 95       	ret

00002c8c <vTaskInternalSetTimeOutState>:
    2c8c:	20 91 2e 16 	lds	r18, 0x162E	; 0x80162e <xNumOfOverflows>
    2c90:	fc 01       	movw	r30, r24
    2c92:	20 83       	st	Z, r18
    2c94:	40 91 36 16 	lds	r20, 0x1636	; 0x801636 <xTickCount>
    2c98:	50 91 37 16 	lds	r21, 0x1637	; 0x801637 <xTickCount+0x1>
    2c9c:	60 91 38 16 	lds	r22, 0x1638	; 0x801638 <xTickCount+0x2>
    2ca0:	70 91 39 16 	lds	r23, 0x1639	; 0x801639 <xTickCount+0x3>
    2ca4:	41 83       	std	Z+1, r20	; 0x01
    2ca6:	52 83       	std	Z+2, r21	; 0x02
    2ca8:	63 83       	std	Z+3, r22	; 0x03
    2caa:	74 83       	std	Z+4, r23	; 0x04
    2cac:	08 95       	ret

00002cae <xTaskCheckForTimeOut>:
    2cae:	8f 92       	push	r8
    2cb0:	9f 92       	push	r9
    2cb2:	af 92       	push	r10
    2cb4:	bf 92       	push	r11
    2cb6:	cf 92       	push	r12
    2cb8:	df 92       	push	r13
    2cba:	ef 92       	push	r14
    2cbc:	ff 92       	push	r15
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	0f 92       	push	r0
    2cce:	c0 90 36 16 	lds	r12, 0x1636	; 0x801636 <xTickCount>
    2cd2:	d0 90 37 16 	lds	r13, 0x1637	; 0x801637 <xTickCount+0x1>
    2cd6:	e0 90 38 16 	lds	r14, 0x1638	; 0x801638 <xTickCount+0x2>
    2cda:	f0 90 39 16 	lds	r15, 0x1639	; 0x801639 <xTickCount+0x3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	11 96       	adiw	r26, 0x01	; 1
    2ce2:	0d 91       	ld	r16, X+
    2ce4:	1d 91       	ld	r17, X+
    2ce6:	2d 91       	ld	r18, X+
    2ce8:	3c 91       	ld	r19, X
    2cea:	14 97       	sbiw	r26, 0x04	; 4
    2cec:	46 01       	movw	r8, r12
    2cee:	57 01       	movw	r10, r14
    2cf0:	80 1a       	sub	r8, r16
    2cf2:	91 0a       	sbc	r9, r17
    2cf4:	a2 0a       	sbc	r10, r18
    2cf6:	b3 0a       	sbc	r11, r19
    2cf8:	40 81       	ld	r20, Z
    2cfa:	51 81       	ldd	r21, Z+1	; 0x01
    2cfc:	62 81       	ldd	r22, Z+2	; 0x02
    2cfe:	73 81       	ldd	r23, Z+3	; 0x03
    2d00:	4f 3f       	cpi	r20, 0xFF	; 255
    2d02:	bf ef       	ldi	r27, 0xFF	; 255
    2d04:	5b 07       	cpc	r21, r27
    2d06:	6b 07       	cpc	r22, r27
    2d08:	7b 07       	cpc	r23, r27
    2d0a:	39 f1       	breq	.+78     	; 0x2d5a <xTaskCheckForTimeOut+0xac>
    2d0c:	ec 01       	movw	r28, r24
    2d0e:	b8 81       	ld	r27, Y
    2d10:	a0 91 2e 16 	lds	r26, 0x162E	; 0x80162e <xNumOfOverflows>
    2d14:	ba 17       	cp	r27, r26
    2d16:	59 f0       	breq	.+22     	; 0x2d2e <xTaskCheckForTimeOut+0x80>
    2d18:	c0 16       	cp	r12, r16
    2d1a:	d1 06       	cpc	r13, r17
    2d1c:	e2 06       	cpc	r14, r18
    2d1e:	f3 06       	cpc	r15, r19
    2d20:	30 f0       	brcs	.+12     	; 0x2d2e <xTaskCheckForTimeOut+0x80>
    2d22:	10 82       	st	Z, r1
    2d24:	11 82       	std	Z+1, r1	; 0x01
    2d26:	12 82       	std	Z+2, r1	; 0x02
    2d28:	13 82       	std	Z+3, r1	; 0x03
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	17 c0       	rjmp	.+46     	; 0x2d5c <xTaskCheckForTimeOut+0xae>
    2d2e:	84 16       	cp	r8, r20
    2d30:	95 06       	cpc	r9, r21
    2d32:	a6 06       	cpc	r10, r22
    2d34:	b7 06       	cpc	r11, r23
    2d36:	58 f4       	brcc	.+22     	; 0x2d4e <xTaskCheckForTimeOut+0xa0>
    2d38:	48 19       	sub	r20, r8
    2d3a:	59 09       	sbc	r21, r9
    2d3c:	6a 09       	sbc	r22, r10
    2d3e:	7b 09       	sbc	r23, r11
    2d40:	40 83       	st	Z, r20
    2d42:	51 83       	std	Z+1, r21	; 0x01
    2d44:	62 83       	std	Z+2, r22	; 0x02
    2d46:	73 83       	std	Z+3, r23	; 0x03
    2d48:	a1 df       	rcall	.-190    	; 0x2c8c <vTaskInternalSetTimeOutState>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	07 c0       	rjmp	.+14     	; 0x2d5c <xTaskCheckForTimeOut+0xae>
    2d4e:	10 82       	st	Z, r1
    2d50:	11 82       	std	Z+1, r1	; 0x01
    2d52:	12 82       	std	Z+2, r1	; 0x02
    2d54:	13 82       	std	Z+3, r1	; 0x03
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <xTaskCheckForTimeOut+0xae>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	ef 90       	pop	r14
    2d6c:	df 90       	pop	r13
    2d6e:	cf 90       	pop	r12
    2d70:	bf 90       	pop	r11
    2d72:	af 90       	pop	r10
    2d74:	9f 90       	pop	r9
    2d76:	8f 90       	pop	r8
    2d78:	08 95       	ret

00002d7a <vTaskMissedYield>:
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	80 93 2f 16 	sts	0x162F, r24	; 0x80162f <xYieldPending>
    2d80:	08 95       	ret

00002d82 <xTaskGetCurrentTaskHandle>:
    2d82:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2d86:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2d8a:	08 95       	ret

00002d8c <xTaskGetSchedulerState>:
    2d8c:	80 91 34 16 	lds	r24, 0x1634	; 0x801634 <xSchedulerRunning>
    2d90:	88 23       	and	r24, r24
    2d92:	31 f0       	breq	.+12     	; 0x2da0 <xTaskGetSchedulerState+0x14>
    2d94:	80 91 26 16 	lds	r24, 0x1626	; 0x801626 <uxSchedulerSuspended>
    2d98:	81 11       	cpse	r24, r1
    2d9a:	04 c0       	rjmp	.+8      	; 0x2da4 <xTaskGetSchedulerState+0x18>
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	08 95       	ret
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	08 95       	ret
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	08 95       	ret

00002da8 <xTaskPriorityInherit>:
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	fc 01       	movw	r30, r24
    2db2:	89 2b       	or	r24, r25
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <xTaskPriorityInherit+0x10>
    2db6:	77 c0       	rjmp	.+238    	; 0x2ea6 <xTaskPriorityInherit+0xfe>
    2db8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dba:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2dbe:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2dc2:	5a 96       	adiw	r26, 0x1a	; 26
    2dc4:	9c 91       	ld	r25, X
    2dc6:	89 17       	cp	r24, r25
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <xTaskPriorityInherit+0x24>
    2dca:	63 c0       	rjmp	.+198    	; 0x2e92 <xTaskPriorityInherit+0xea>
    2dcc:	46 85       	ldd	r20, Z+14	; 0x0e
    2dce:	57 85       	ldd	r21, Z+15	; 0x0f
    2dd0:	60 89       	ldd	r22, Z+16	; 0x10
    2dd2:	71 89       	ldd	r23, Z+17	; 0x11
    2dd4:	77 23       	and	r23, r23
    2dd6:	94 f0       	brlt	.+36     	; 0x2dfc <xTaskPriorityInherit+0x54>
    2dd8:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2ddc:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2de0:	5a 96       	adiw	r26, 0x1a	; 26
    2de2:	9c 91       	ld	r25, X
    2de4:	4a e0       	ldi	r20, 0x0A	; 10
    2de6:	50 e0       	ldi	r21, 0x00	; 0
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	49 1b       	sub	r20, r25
    2dee:	51 09       	sbc	r21, r1
    2df0:	61 09       	sbc	r22, r1
    2df2:	71 09       	sbc	r23, r1
    2df4:	46 87       	std	Z+14, r20	; 0x0e
    2df6:	57 87       	std	Z+15, r21	; 0x0f
    2df8:	60 8b       	std	Z+16, r22	; 0x10
    2dfa:	71 8b       	std	Z+17, r23	; 0x11
    2dfc:	24 85       	ldd	r18, Z+12	; 0x0c
    2dfe:	35 85       	ldd	r19, Z+13	; 0x0d
    2e00:	4b e0       	ldi	r20, 0x0B	; 11
    2e02:	84 9f       	mul	r24, r20
    2e04:	c0 01       	movw	r24, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	89 58       	subi	r24, 0x89	; 137
    2e0a:	99 4e       	sbci	r25, 0xE9	; 233
    2e0c:	28 17       	cp	r18, r24
    2e0e:	39 07       	cpc	r19, r25
    2e10:	b9 f5       	brne	.+110    	; 0x2e80 <xTaskPriorityInherit+0xd8>
    2e12:	ef 01       	movw	r28, r30
    2e14:	8f 01       	movw	r16, r30
    2e16:	0e 5f       	subi	r16, 0xFE	; 254
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	c8 01       	movw	r24, r16
    2e1c:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
    2e20:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2e24:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2e28:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e2a:	ea 8f       	std	Y+26, r30	; 0x1a
    2e2c:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    2e30:	8e 17       	cp	r24, r30
    2e32:	10 f4       	brcc	.+4      	; 0x2e38 <xTaskPriorityInherit+0x90>
    2e34:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <uxTopReadyPriority>
    2e38:	8b e0       	ldi	r24, 0x0B	; 11
    2e3a:	8e 9f       	mul	r24, r30
    2e3c:	f0 01       	movw	r30, r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	e9 58       	subi	r30, 0x89	; 137
    2e42:	f9 4e       	sbci	r31, 0xE9	; 233
    2e44:	01 80       	ldd	r0, Z+1	; 0x01
    2e46:	f2 81       	ldd	r31, Z+2	; 0x02
    2e48:	e0 2d       	mov	r30, r0
    2e4a:	ff 83       	std	Y+7, r31	; 0x07
    2e4c:	ee 83       	std	Y+6, r30	; 0x06
    2e4e:	26 81       	ldd	r18, Z+6	; 0x06
    2e50:	37 81       	ldd	r19, Z+7	; 0x07
    2e52:	39 87       	std	Y+9, r19	; 0x09
    2e54:	28 87       	std	Y+8, r18	; 0x08
    2e56:	a6 81       	ldd	r26, Z+6	; 0x06
    2e58:	b7 81       	ldd	r27, Z+7	; 0x07
    2e5a:	15 96       	adiw	r26, 0x05	; 5
    2e5c:	1c 93       	st	X, r17
    2e5e:	0e 93       	st	-X, r16
    2e60:	14 97       	sbiw	r26, 0x04	; 4
    2e62:	17 83       	std	Z+7, r17	; 0x07
    2e64:	06 83       	std	Z+6, r16	; 0x06
    2e66:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e68:	8e 9f       	mul	r24, r30
    2e6a:	f0 01       	movw	r30, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	e9 58       	subi	r30, 0x89	; 137
    2e70:	f9 4e       	sbci	r31, 0xE9	; 233
    2e72:	fd 87       	std	Y+13, r31	; 0x0d
    2e74:	ec 87       	std	Y+12, r30	; 0x0c
    2e76:	80 81       	ld	r24, Z
    2e78:	8f 5f       	subi	r24, 0xFF	; 255
    2e7a:	80 83       	st	Z, r24
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	16 c0       	rjmp	.+44     	; 0x2eac <xTaskPriorityInherit+0x104>
    2e80:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2e84:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2e88:	5a 96       	adiw	r26, 0x1a	; 26
    2e8a:	8c 91       	ld	r24, X
    2e8c:	82 8f       	std	Z+26, r24	; 0x1a
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	0d c0       	rjmp	.+26     	; 0x2eac <xTaskPriorityInherit+0x104>
    2e92:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e94:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    2e98:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    2e9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e9e:	98 17       	cp	r25, r24
    2ea0:	20 f0       	brcs	.+8      	; 0x2eaa <xTaskPriorityInherit+0x102>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <xTaskPriorityInherit+0x104>
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	01 c0       	rjmp	.+2      	; 0x2eac <xTaskPriorityInherit+0x104>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	08 95       	ret

00002eb6 <xTaskPriorityDisinherit>:
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	89 2b       	or	r24, r25
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <xTaskPriorityDisinherit+0x10>
    2ec4:	49 c0       	rjmp	.+146    	; 0x2f58 <xTaskPriorityDisinherit+0xa2>
    2ec6:	86 a5       	ldd	r24, Z+46	; 0x2e
    2ec8:	81 50       	subi	r24, 0x01	; 1
    2eca:	86 a7       	std	Z+46, r24	; 0x2e
    2ecc:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ece:	95 a5       	ldd	r25, Z+45	; 0x2d
    2ed0:	29 17       	cp	r18, r25
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <xTaskPriorityDisinherit+0x20>
    2ed4:	43 c0       	rjmp	.+134    	; 0x2f5c <xTaskPriorityDisinherit+0xa6>
    2ed6:	81 11       	cpse	r24, r1
    2ed8:	43 c0       	rjmp	.+134    	; 0x2f60 <xTaskPriorityDisinherit+0xaa>
    2eda:	ef 01       	movw	r28, r30
    2edc:	8f 01       	movw	r16, r30
    2ede:	0e 5f       	subi	r16, 0xFE	; 254
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	c8 01       	movw	r24, r16
    2ee4:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
    2ee8:	ed a5       	ldd	r30, Y+45	; 0x2d
    2eea:	ea 8f       	std	Y+26, r30	; 0x1a
    2eec:	8a e0       	ldi	r24, 0x0A	; 10
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e0       	ldi	r26, 0x00	; 0
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	8e 1b       	sub	r24, r30
    2ef6:	91 09       	sbc	r25, r1
    2ef8:	a1 09       	sbc	r26, r1
    2efa:	b1 09       	sbc	r27, r1
    2efc:	8e 87       	std	Y+14, r24	; 0x0e
    2efe:	9f 87       	std	Y+15, r25	; 0x0f
    2f00:	a8 8b       	std	Y+16, r26	; 0x10
    2f02:	b9 8b       	std	Y+17, r27	; 0x11
    2f04:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    2f08:	8e 17       	cp	r24, r30
    2f0a:	10 f4       	brcc	.+4      	; 0x2f10 <xTaskPriorityDisinherit+0x5a>
    2f0c:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <uxTopReadyPriority>
    2f10:	8b e0       	ldi	r24, 0x0B	; 11
    2f12:	8e 9f       	mul	r24, r30
    2f14:	f0 01       	movw	r30, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	e9 58       	subi	r30, 0x89	; 137
    2f1a:	f9 4e       	sbci	r31, 0xE9	; 233
    2f1c:	01 80       	ldd	r0, Z+1	; 0x01
    2f1e:	f2 81       	ldd	r31, Z+2	; 0x02
    2f20:	e0 2d       	mov	r30, r0
    2f22:	ff 83       	std	Y+7, r31	; 0x07
    2f24:	ee 83       	std	Y+6, r30	; 0x06
    2f26:	26 81       	ldd	r18, Z+6	; 0x06
    2f28:	37 81       	ldd	r19, Z+7	; 0x07
    2f2a:	39 87       	std	Y+9, r19	; 0x09
    2f2c:	28 87       	std	Y+8, r18	; 0x08
    2f2e:	a6 81       	ldd	r26, Z+6	; 0x06
    2f30:	b7 81       	ldd	r27, Z+7	; 0x07
    2f32:	15 96       	adiw	r26, 0x05	; 5
    2f34:	1c 93       	st	X, r17
    2f36:	0e 93       	st	-X, r16
    2f38:	14 97       	sbiw	r26, 0x04	; 4
    2f3a:	17 83       	std	Z+7, r17	; 0x07
    2f3c:	06 83       	std	Z+6, r16	; 0x06
    2f3e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f40:	8e 9f       	mul	r24, r30
    2f42:	f0 01       	movw	r30, r0
    2f44:	11 24       	eor	r1, r1
    2f46:	e9 58       	subi	r30, 0x89	; 137
    2f48:	f9 4e       	sbci	r31, 0xE9	; 233
    2f4a:	fd 87       	std	Y+13, r31	; 0x0d
    2f4c:	ec 87       	std	Y+12, r30	; 0x0c
    2f4e:	80 81       	ld	r24, Z
    2f50:	8f 5f       	subi	r24, 0xFF	; 255
    2f52:	80 83       	st	Z, r24
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <xTaskPriorityDisinherit+0xac>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	03 c0       	rjmp	.+6      	; 0x2f62 <xTaskPriorityDisinherit+0xac>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	01 c0       	rjmp	.+2      	; 0x2f62 <xTaskPriorityDisinherit+0xac>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	08 95       	ret

00002f6c <vTaskPriorityDisinheritAfterTimeout>:
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	fc 01       	movw	r30, r24
    2f76:	89 2b       	or	r24, r25
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <vTaskPriorityDisinheritAfterTimeout+0x10>
    2f7a:	5a c0       	rjmp	.+180    	; 0x3030 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f7c:	85 a5       	ldd	r24, Z+45	; 0x2d
    2f7e:	86 17       	cp	r24, r22
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f82:	86 2f       	mov	r24, r22
    2f84:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f86:	89 17       	cp	r24, r25
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <vTaskPriorityDisinheritAfterTimeout+0x20>
    2f8a:	52 c0       	rjmp	.+164    	; 0x3030 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f8c:	26 a5       	ldd	r18, Z+46	; 0x2e
    2f8e:	21 30       	cpi	r18, 0x01	; 1
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2f92:	4e c0       	rjmp	.+156    	; 0x3030 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f94:	82 8f       	std	Z+26, r24	; 0x1a
    2f96:	46 85       	ldd	r20, Z+14	; 0x0e
    2f98:	57 85       	ldd	r21, Z+15	; 0x0f
    2f9a:	60 89       	ldd	r22, Z+16	; 0x10
    2f9c:	71 89       	ldd	r23, Z+17	; 0x11
    2f9e:	77 23       	and	r23, r23
    2fa0:	64 f0       	brlt	.+24     	; 0x2fba <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2fa2:	4a e0       	ldi	r20, 0x0A	; 10
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	48 1b       	sub	r20, r24
    2fac:	51 09       	sbc	r21, r1
    2fae:	61 09       	sbc	r22, r1
    2fb0:	71 09       	sbc	r23, r1
    2fb2:	46 87       	std	Z+14, r20	; 0x0e
    2fb4:	57 87       	std	Z+15, r21	; 0x0f
    2fb6:	60 8b       	std	Z+16, r22	; 0x10
    2fb8:	71 8b       	std	Z+17, r23	; 0x11
    2fba:	24 85       	ldd	r18, Z+12	; 0x0c
    2fbc:	35 85       	ldd	r19, Z+13	; 0x0d
    2fbe:	4b e0       	ldi	r20, 0x0B	; 11
    2fc0:	94 9f       	mul	r25, r20
    2fc2:	c0 01       	movw	r24, r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	89 58       	subi	r24, 0x89	; 137
    2fc8:	99 4e       	sbci	r25, 0xE9	; 233
    2fca:	28 17       	cp	r18, r24
    2fcc:	39 07       	cpc	r19, r25
    2fce:	81 f5       	brne	.+96     	; 0x3030 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2fd0:	ef 01       	movw	r28, r30
    2fd2:	8f 01       	movw	r16, r30
    2fd4:	0e 5f       	subi	r16, 0xFE	; 254
    2fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd8:	c8 01       	movw	r24, r16
    2fda:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
    2fde:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fe0:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    2fe4:	8e 17       	cp	r24, r30
    2fe6:	10 f4       	brcc	.+4      	; 0x2fec <vTaskPriorityDisinheritAfterTimeout+0x80>
    2fe8:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <uxTopReadyPriority>
    2fec:	8b e0       	ldi	r24, 0x0B	; 11
    2fee:	8e 9f       	mul	r24, r30
    2ff0:	f0 01       	movw	r30, r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	e9 58       	subi	r30, 0x89	; 137
    2ff6:	f9 4e       	sbci	r31, 0xE9	; 233
    2ff8:	01 80       	ldd	r0, Z+1	; 0x01
    2ffa:	f2 81       	ldd	r31, Z+2	; 0x02
    2ffc:	e0 2d       	mov	r30, r0
    2ffe:	ff 83       	std	Y+7, r31	; 0x07
    3000:	ee 83       	std	Y+6, r30	; 0x06
    3002:	26 81       	ldd	r18, Z+6	; 0x06
    3004:	37 81       	ldd	r19, Z+7	; 0x07
    3006:	39 87       	std	Y+9, r19	; 0x09
    3008:	28 87       	std	Y+8, r18	; 0x08
    300a:	a6 81       	ldd	r26, Z+6	; 0x06
    300c:	b7 81       	ldd	r27, Z+7	; 0x07
    300e:	15 96       	adiw	r26, 0x05	; 5
    3010:	1c 93       	st	X, r17
    3012:	0e 93       	st	-X, r16
    3014:	14 97       	sbiw	r26, 0x04	; 4
    3016:	17 83       	std	Z+7, r17	; 0x07
    3018:	06 83       	std	Z+6, r16	; 0x06
    301a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    301c:	8e 9f       	mul	r24, r30
    301e:	f0 01       	movw	r30, r0
    3020:	11 24       	eor	r1, r1
    3022:	e9 58       	subi	r30, 0x89	; 137
    3024:	f9 4e       	sbci	r31, 0xE9	; 233
    3026:	fd 87       	std	Y+13, r31	; 0x0d
    3028:	ec 87       	std	Y+12, r30	; 0x0c
    302a:	80 81       	ld	r24, Z
    302c:	8f 5f       	subi	r24, 0xFF	; 255
    302e:	80 83       	st	Z, r24
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	08 95       	ret

0000303a <uxTaskResetEventItemValue>:
    303a:	cf 92       	push	r12
    303c:	df 92       	push	r13
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3046:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    304a:	66 85       	ldd	r22, Z+14	; 0x0e
    304c:	77 85       	ldd	r23, Z+15	; 0x0f
    304e:	80 89       	ldd	r24, Z+16	; 0x10
    3050:	91 89       	ldd	r25, Z+17	; 0x11
    3052:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3056:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    305a:	a0 91 e5 16 	lds	r26, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    305e:	b0 91 e6 16 	lds	r27, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    3062:	5a 96       	adiw	r26, 0x1a	; 26
    3064:	2c 91       	ld	r18, X
    3066:	0f 2e       	mov	r0, r31
    3068:	fa e0       	ldi	r31, 0x0A	; 10
    306a:	cf 2e       	mov	r12, r31
    306c:	d1 2c       	mov	r13, r1
    306e:	e1 2c       	mov	r14, r1
    3070:	f1 2c       	mov	r15, r1
    3072:	f0 2d       	mov	r31, r0
    3074:	c2 1a       	sub	r12, r18
    3076:	d1 08       	sbc	r13, r1
    3078:	e1 08       	sbc	r14, r1
    307a:	f1 08       	sbc	r15, r1
    307c:	c6 86       	std	Z+14, r12	; 0x0e
    307e:	d7 86       	std	Z+15, r13	; 0x0f
    3080:	e0 8a       	std	Z+16, r14	; 0x10
    3082:	f1 8a       	std	Z+17, r15	; 0x11
    3084:	ff 90       	pop	r15
    3086:	ef 90       	pop	r14
    3088:	df 90       	pop	r13
    308a:	cf 90       	pop	r12
    308c:	08 95       	ret

0000308e <pvTaskIncrementMutexHeldCount>:
    308e:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3092:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    3096:	89 2b       	or	r24, r25
    3098:	39 f0       	breq	.+14     	; 0x30a8 <pvTaskIncrementMutexHeldCount+0x1a>
    309a:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    309e:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    30a2:	86 a5       	ldd	r24, Z+46	; 0x2e
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	86 a7       	std	Z+46, r24	; 0x2e
    30a8:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    30ac:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    30b0:	08 95       	ret

000030b2 <xTaskGenericNotifyWait>:
    30b2:	4f 92       	push	r4
    30b4:	5f 92       	push	r5
    30b6:	6f 92       	push	r6
    30b8:	7f 92       	push	r7
    30ba:	af 92       	push	r10
    30bc:	bf 92       	push	r11
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	28 01       	movw	r4, r16
    30d0:	39 01       	movw	r6, r18
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	0f 92       	push	r0
    30d8:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    30dc:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    30e0:	c8 2f       	mov	r28, r24
    30e2:	d0 e0       	ldi	r29, 0x00	; 0
    30e4:	ec 0f       	add	r30, r28
    30e6:	fd 1f       	adc	r31, r29
    30e8:	83 a9       	ldd	r24, Z+51	; 0x33
    30ea:	82 30       	cpi	r24, 0x02	; 2
    30ec:	79 f1       	breq	.+94     	; 0x314c <xTaskGenericNotifyWait+0x9a>
    30ee:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    30f2:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    30f6:	ce 01       	movw	r24, r28
    30f8:	88 0f       	add	r24, r24
    30fa:	99 1f       	adc	r25, r25
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	e8 0f       	add	r30, r24
    3102:	f9 1f       	adc	r31, r25
    3104:	87 a5       	ldd	r24, Z+47	; 0x2f
    3106:	90 a9       	ldd	r25, Z+48	; 0x30
    3108:	a1 a9       	ldd	r26, Z+49	; 0x31
    310a:	b2 a9       	ldd	r27, Z+50	; 0x32
    310c:	40 95       	com	r20
    310e:	50 95       	com	r21
    3110:	60 95       	com	r22
    3112:	70 95       	com	r23
    3114:	48 23       	and	r20, r24
    3116:	59 23       	and	r21, r25
    3118:	6a 23       	and	r22, r26
    311a:	7b 23       	and	r23, r27
    311c:	47 a7       	std	Z+47, r20	; 0x2f
    311e:	50 ab       	std	Z+48, r21	; 0x30
    3120:	61 ab       	std	Z+49, r22	; 0x31
    3122:	72 ab       	std	Z+50, r23	; 0x32
    3124:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3128:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    312c:	ec 0f       	add	r30, r28
    312e:	fd 1f       	adc	r31, r29
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	83 ab       	std	Z+51, r24	; 0x33
    3134:	a1 14       	cp	r10, r1
    3136:	b1 04       	cpc	r11, r1
    3138:	c1 04       	cpc	r12, r1
    313a:	d1 04       	cpc	r13, r1
    313c:	39 f0       	breq	.+14     	; 0x314c <xTaskGenericNotifyWait+0x9a>
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	c6 01       	movw	r24, r12
    3142:	b5 01       	movw	r22, r10
    3144:	0e 94 1d 10 	call	0x203a	; 0x203a <prvAddCurrentTaskToDelayedList>
    3148:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    314c:	0f 90       	pop	r0
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	0f 92       	push	r0
    3156:	e1 14       	cp	r14, r1
    3158:	f1 04       	cpc	r15, r1
    315a:	a1 f0       	breq	.+40     	; 0x3184 <xTaskGenericNotifyWait+0xd2>
    315c:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3160:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    3164:	ce 01       	movw	r24, r28
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	e8 0f       	add	r30, r24
    3170:	f9 1f       	adc	r31, r25
    3172:	87 a5       	ldd	r24, Z+47	; 0x2f
    3174:	90 a9       	ldd	r25, Z+48	; 0x30
    3176:	a1 a9       	ldd	r26, Z+49	; 0x31
    3178:	b2 a9       	ldd	r27, Z+50	; 0x32
    317a:	f7 01       	movw	r30, r14
    317c:	80 83       	st	Z, r24
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	a2 83       	std	Z+2, r26	; 0x02
    3182:	b3 83       	std	Z+3, r27	; 0x03
    3184:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3188:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    318c:	ec 0f       	add	r30, r28
    318e:	fd 1f       	adc	r31, r29
    3190:	83 a9       	ldd	r24, Z+51	; 0x33
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	e9 f4       	brne	.+58     	; 0x31d0 <xTaskGenericNotifyWait+0x11e>
    3196:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    319a:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    319e:	ce 01       	movw	r24, r28
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	e8 0f       	add	r30, r24
    31aa:	f9 1f       	adc	r31, r25
    31ac:	87 a5       	ldd	r24, Z+47	; 0x2f
    31ae:	90 a9       	ldd	r25, Z+48	; 0x30
    31b0:	a1 a9       	ldd	r26, Z+49	; 0x31
    31b2:	b2 a9       	ldd	r27, Z+50	; 0x32
    31b4:	40 94       	com	r4
    31b6:	50 94       	com	r5
    31b8:	60 94       	com	r6
    31ba:	70 94       	com	r7
    31bc:	48 22       	and	r4, r24
    31be:	59 22       	and	r5, r25
    31c0:	6a 22       	and	r6, r26
    31c2:	7b 22       	and	r7, r27
    31c4:	47 a6       	std	Z+47, r4	; 0x2f
    31c6:	50 aa       	std	Z+48, r5	; 0x30
    31c8:	61 aa       	std	Z+49, r6	; 0x31
    31ca:	72 aa       	std	Z+50, r7	; 0x32
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	01 c0       	rjmp	.+2      	; 0x31d2 <xTaskGenericNotifyWait+0x120>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	20 91 e5 16 	lds	r18, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    31d6:	30 91 e6 16 	lds	r19, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    31da:	c2 0f       	add	r28, r18
    31dc:	d3 1f       	adc	r29, r19
    31de:	1b aa       	std	Y+51, r1	; 0x33
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
    31f4:	bf 90       	pop	r11
    31f6:	af 90       	pop	r10
    31f8:	7f 90       	pop	r7
    31fa:	6f 90       	pop	r6
    31fc:	5f 90       	pop	r5
    31fe:	4f 90       	pop	r4
    3200:	08 95       	ret

00003202 <xTaskGenericNotify>:
    3202:	8f 92       	push	r8
    3204:	9f 92       	push	r9
    3206:	af 92       	push	r10
    3208:	bf 92       	push	r11
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	0f 93       	push	r16
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	dc 01       	movw	r26, r24
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	0f 92       	push	r0
    321c:	e1 14       	cp	r14, r1
    321e:	f1 04       	cpc	r15, r1
    3220:	89 f0       	breq	.+34     	; 0x3244 <xTaskGenericNotify+0x42>
    3222:	e6 2f       	mov	r30, r22
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	ee 0f       	add	r30, r30
    3228:	ff 1f       	adc	r31, r31
    322a:	ee 0f       	add	r30, r30
    322c:	ff 1f       	adc	r31, r31
    322e:	e8 0f       	add	r30, r24
    3230:	f9 1f       	adc	r31, r25
    3232:	87 a4       	ldd	r8, Z+47	; 0x2f
    3234:	90 a8       	ldd	r9, Z+48	; 0x30
    3236:	a1 a8       	ldd	r10, Z+49	; 0x31
    3238:	b2 a8       	ldd	r11, Z+50	; 0x32
    323a:	f7 01       	movw	r30, r14
    323c:	80 82       	st	Z, r8
    323e:	91 82       	std	Z+1, r9	; 0x01
    3240:	a2 82       	std	Z+2, r10	; 0x02
    3242:	b3 82       	std	Z+3, r11	; 0x03
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	fd 01       	movw	r30, r26
    3248:	e6 0f       	add	r30, r22
    324a:	f7 1f       	adc	r31, r23
    324c:	83 a9       	ldd	r24, Z+51	; 0x33
    324e:	92 e0       	ldi	r25, 0x02	; 2
    3250:	93 ab       	std	Z+51, r25	; 0x33
    3252:	02 30       	cpi	r16, 0x02	; 2
    3254:	01 f1       	breq	.+64     	; 0x3296 <xTaskGenericNotify+0x94>
    3256:	18 f4       	brcc	.+6      	; 0x325e <xTaskGenericNotify+0x5c>
    3258:	01 30       	cpi	r16, 0x01	; 1
    325a:	31 f0       	breq	.+12     	; 0x3268 <xTaskGenericNotify+0x66>
    325c:	4d c0       	rjmp	.+154    	; 0x32f8 <xTaskGenericNotify+0xf6>
    325e:	03 30       	cpi	r16, 0x03	; 3
    3260:	79 f1       	breq	.+94     	; 0x32c0 <xTaskGenericNotify+0xbe>
    3262:	04 30       	cpi	r16, 0x04	; 4
    3264:	d1 f1       	breq	.+116    	; 0x32da <xTaskGenericNotify+0xd8>
    3266:	48 c0       	rjmp	.+144    	; 0x32f8 <xTaskGenericNotify+0xf6>
    3268:	66 0f       	add	r22, r22
    326a:	77 1f       	adc	r23, r23
    326c:	66 0f       	add	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	fd 01       	movw	r30, r26
    3272:	e6 0f       	add	r30, r22
    3274:	f7 1f       	adc	r31, r23
    3276:	87 a4       	ldd	r8, Z+47	; 0x2f
    3278:	90 a8       	ldd	r9, Z+48	; 0x30
    327a:	a1 a8       	ldd	r10, Z+49	; 0x31
    327c:	b2 a8       	ldd	r11, Z+50	; 0x32
    327e:	ba 01       	movw	r22, r20
    3280:	a9 01       	movw	r20, r18
    3282:	48 29       	or	r20, r8
    3284:	59 29       	or	r21, r9
    3286:	6a 29       	or	r22, r10
    3288:	7b 29       	or	r23, r11
    328a:	47 a7       	std	Z+47, r20	; 0x2f
    328c:	50 ab       	std	Z+48, r21	; 0x30
    328e:	61 ab       	std	Z+49, r22	; 0x31
    3290:	72 ab       	std	Z+50, r23	; 0x32
    3292:	01 e0       	ldi	r16, 0x01	; 1
    3294:	34 c0       	rjmp	.+104    	; 0x32fe <xTaskGenericNotify+0xfc>
    3296:	66 0f       	add	r22, r22
    3298:	77 1f       	adc	r23, r23
    329a:	66 0f       	add	r22, r22
    329c:	77 1f       	adc	r23, r23
    329e:	fd 01       	movw	r30, r26
    32a0:	e6 0f       	add	r30, r22
    32a2:	f7 1f       	adc	r31, r23
    32a4:	47 a5       	ldd	r20, Z+47	; 0x2f
    32a6:	50 a9       	ldd	r21, Z+48	; 0x30
    32a8:	61 a9       	ldd	r22, Z+49	; 0x31
    32aa:	72 a9       	ldd	r23, Z+50	; 0x32
    32ac:	4f 5f       	subi	r20, 0xFF	; 255
    32ae:	5f 4f       	sbci	r21, 0xFF	; 255
    32b0:	6f 4f       	sbci	r22, 0xFF	; 255
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	47 a7       	std	Z+47, r20	; 0x2f
    32b6:	50 ab       	std	Z+48, r21	; 0x30
    32b8:	61 ab       	std	Z+49, r22	; 0x31
    32ba:	72 ab       	std	Z+50, r23	; 0x32
    32bc:	01 e0       	ldi	r16, 0x01	; 1
    32be:	1f c0       	rjmp	.+62     	; 0x32fe <xTaskGenericNotify+0xfc>
    32c0:	66 0f       	add	r22, r22
    32c2:	77 1f       	adc	r23, r23
    32c4:	66 0f       	add	r22, r22
    32c6:	77 1f       	adc	r23, r23
    32c8:	fd 01       	movw	r30, r26
    32ca:	e6 0f       	add	r30, r22
    32cc:	f7 1f       	adc	r31, r23
    32ce:	27 a7       	std	Z+47, r18	; 0x2f
    32d0:	30 ab       	std	Z+48, r19	; 0x30
    32d2:	41 ab       	std	Z+49, r20	; 0x31
    32d4:	52 ab       	std	Z+50, r21	; 0x32
    32d6:	01 e0       	ldi	r16, 0x01	; 1
    32d8:	12 c0       	rjmp	.+36     	; 0x32fe <xTaskGenericNotify+0xfc>
    32da:	82 30       	cpi	r24, 0x02	; 2
    32dc:	79 f0       	breq	.+30     	; 0x32fc <xTaskGenericNotify+0xfa>
    32de:	66 0f       	add	r22, r22
    32e0:	77 1f       	adc	r23, r23
    32e2:	66 0f       	add	r22, r22
    32e4:	77 1f       	adc	r23, r23
    32e6:	fd 01       	movw	r30, r26
    32e8:	e6 0f       	add	r30, r22
    32ea:	f7 1f       	adc	r31, r23
    32ec:	27 a7       	std	Z+47, r18	; 0x2f
    32ee:	30 ab       	std	Z+48, r19	; 0x30
    32f0:	41 ab       	std	Z+49, r20	; 0x31
    32f2:	52 ab       	std	Z+50, r21	; 0x32
    32f4:	01 e0       	ldi	r16, 0x01	; 1
    32f6:	03 c0       	rjmp	.+6      	; 0x32fe <xTaskGenericNotify+0xfc>
    32f8:	01 e0       	ldi	r16, 0x01	; 1
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <xTaskGenericNotify+0xfc>
    32fc:	00 e0       	ldi	r16, 0x00	; 0
    32fe:	81 30       	cpi	r24, 0x01	; 1
    3300:	09 f0       	breq	.+2      	; 0x3304 <xTaskGenericNotify+0x102>
    3302:	69 c0       	rjmp	.+210    	; 0x33d6 <xTaskGenericNotify+0x1d4>
    3304:	1c 96       	adiw	r26, 0x0c	; 12
    3306:	ed 91       	ld	r30, X+
    3308:	fc 91       	ld	r31, X
    330a:	1d 97       	sbiw	r26, 0x0d	; 13
    330c:	16 96       	adiw	r26, 0x06	; 6
    330e:	cd 91       	ld	r28, X+
    3310:	dc 91       	ld	r29, X
    3312:	17 97       	sbiw	r26, 0x07	; 7
    3314:	18 96       	adiw	r26, 0x08	; 8
    3316:	8d 91       	ld	r24, X+
    3318:	9c 91       	ld	r25, X
    331a:	19 97       	sbiw	r26, 0x09	; 9
    331c:	9f 83       	std	Y+7, r25	; 0x07
    331e:	8e 83       	std	Y+6, r24	; 0x06
    3320:	18 96       	adiw	r26, 0x08	; 8
    3322:	cd 91       	ld	r28, X+
    3324:	dc 91       	ld	r29, X
    3326:	19 97       	sbiw	r26, 0x09	; 9
    3328:	16 96       	adiw	r26, 0x06	; 6
    332a:	8d 91       	ld	r24, X+
    332c:	9c 91       	ld	r25, X
    332e:	17 97       	sbiw	r26, 0x07	; 7
    3330:	9d 83       	std	Y+5, r25	; 0x05
    3332:	8c 83       	std	Y+4, r24	; 0x04
    3334:	81 81       	ldd	r24, Z+1	; 0x01
    3336:	92 81       	ldd	r25, Z+2	; 0x02
    3338:	9d 01       	movw	r18, r26
    333a:	2e 5f       	subi	r18, 0xFE	; 254
    333c:	3f 4f       	sbci	r19, 0xFF	; 255
    333e:	82 17       	cp	r24, r18
    3340:	93 07       	cpc	r25, r19
    3342:	31 f4       	brne	.+12     	; 0x3350 <xTaskGenericNotify+0x14e>
    3344:	18 96       	adiw	r26, 0x08	; 8
    3346:	8d 91       	ld	r24, X+
    3348:	9c 91       	ld	r25, X
    334a:	19 97       	sbiw	r26, 0x09	; 9
    334c:	92 83       	std	Z+2, r25	; 0x02
    334e:	81 83       	std	Z+1, r24	; 0x01
    3350:	1d 96       	adiw	r26, 0x0d	; 13
    3352:	1c 92       	st	X, r1
    3354:	1e 92       	st	-X, r1
    3356:	1c 97       	sbiw	r26, 0x0c	; 12
    3358:	80 81       	ld	r24, Z
    335a:	81 50       	subi	r24, 0x01	; 1
    335c:	80 83       	st	Z, r24
    335e:	5a 96       	adiw	r26, 0x1a	; 26
    3360:	ec 91       	ld	r30, X
    3362:	5a 97       	sbiw	r26, 0x1a	; 26
    3364:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <uxTopReadyPriority>
    3368:	8e 17       	cp	r24, r30
    336a:	10 f4       	brcc	.+4      	; 0x3370 <xTaskGenericNotify+0x16e>
    336c:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <uxTopReadyPriority>
    3370:	8b e0       	ldi	r24, 0x0B	; 11
    3372:	8e 9f       	mul	r24, r30
    3374:	f0 01       	movw	r30, r0
    3376:	11 24       	eor	r1, r1
    3378:	e9 58       	subi	r30, 0x89	; 137
    337a:	f9 4e       	sbci	r31, 0xE9	; 233
    337c:	01 80       	ldd	r0, Z+1	; 0x01
    337e:	f2 81       	ldd	r31, Z+2	; 0x02
    3380:	e0 2d       	mov	r30, r0
    3382:	17 96       	adiw	r26, 0x07	; 7
    3384:	fc 93       	st	X, r31
    3386:	ee 93       	st	-X, r30
    3388:	16 97       	sbiw	r26, 0x06	; 6
    338a:	46 81       	ldd	r20, Z+6	; 0x06
    338c:	57 81       	ldd	r21, Z+7	; 0x07
    338e:	19 96       	adiw	r26, 0x09	; 9
    3390:	5c 93       	st	X, r21
    3392:	4e 93       	st	-X, r20
    3394:	18 97       	sbiw	r26, 0x08	; 8
    3396:	c6 81       	ldd	r28, Z+6	; 0x06
    3398:	d7 81       	ldd	r29, Z+7	; 0x07
    339a:	3d 83       	std	Y+5, r19	; 0x05
    339c:	2c 83       	std	Y+4, r18	; 0x04
    339e:	37 83       	std	Z+7, r19	; 0x07
    33a0:	26 83       	std	Z+6, r18	; 0x06
    33a2:	5a 96       	adiw	r26, 0x1a	; 26
    33a4:	ec 91       	ld	r30, X
    33a6:	5a 97       	sbiw	r26, 0x1a	; 26
    33a8:	8e 9f       	mul	r24, r30
    33aa:	f0 01       	movw	r30, r0
    33ac:	11 24       	eor	r1, r1
    33ae:	e9 58       	subi	r30, 0x89	; 137
    33b0:	f9 4e       	sbci	r31, 0xE9	; 233
    33b2:	1d 96       	adiw	r26, 0x0d	; 13
    33b4:	fc 93       	st	X, r31
    33b6:	ee 93       	st	-X, r30
    33b8:	1c 97       	sbiw	r26, 0x0c	; 12
    33ba:	80 81       	ld	r24, Z
    33bc:	8f 5f       	subi	r24, 0xFF	; 255
    33be:	80 83       	st	Z, r24
    33c0:	5a 96       	adiw	r26, 0x1a	; 26
    33c2:	9c 91       	ld	r25, X
    33c4:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    33c8:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    33cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    33ce:	89 17       	cp	r24, r25
    33d0:	10 f4       	brcc	.+4      	; 0x33d6 <xTaskGenericNotify+0x1d4>
    33d2:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    33d6:	0f 90       	pop	r0
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	80 2f       	mov	r24, r16
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	bf 90       	pop	r11
    33e8:	af 90       	pop	r10
    33ea:	9f 90       	pop	r9
    33ec:	8f 90       	pop	r8
    33ee:	08 95       	ret

000033f0 <xTaskGenericNotifyFromISR>:
    33f0:	8f 92       	push	r8
    33f2:	9f 92       	push	r9
    33f4:	af 92       	push	r10
    33f6:	bf 92       	push	r11
    33f8:	cf 92       	push	r12
    33fa:	df 92       	push	r13
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	dc 01       	movw	r26, r24
    3408:	e1 14       	cp	r14, r1
    340a:	f1 04       	cpc	r15, r1
    340c:	89 f0       	breq	.+34     	; 0x3430 <xTaskGenericNotifyFromISR+0x40>
    340e:	e6 2f       	mov	r30, r22
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	e8 0f       	add	r30, r24
    341c:	f9 1f       	adc	r31, r25
    341e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3420:	90 a8       	ldd	r9, Z+48	; 0x30
    3422:	a1 a8       	ldd	r10, Z+49	; 0x31
    3424:	b2 a8       	ldd	r11, Z+50	; 0x32
    3426:	f7 01       	movw	r30, r14
    3428:	80 82       	st	Z, r8
    342a:	91 82       	std	Z+1, r9	; 0x01
    342c:	a2 82       	std	Z+2, r10	; 0x02
    342e:	b3 82       	std	Z+3, r11	; 0x03
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	fd 01       	movw	r30, r26
    3434:	e6 0f       	add	r30, r22
    3436:	f7 1f       	adc	r31, r23
    3438:	93 a9       	ldd	r25, Z+51	; 0x33
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	83 ab       	std	Z+51, r24	; 0x33
    343e:	02 30       	cpi	r16, 0x02	; 2
    3440:	01 f1       	breq	.+64     	; 0x3482 <xTaskGenericNotifyFromISR+0x92>
    3442:	18 f4       	brcc	.+6      	; 0x344a <xTaskGenericNotifyFromISR+0x5a>
    3444:	01 30       	cpi	r16, 0x01	; 1
    3446:	31 f0       	breq	.+12     	; 0x3454 <xTaskGenericNotifyFromISR+0x64>
    3448:	4d c0       	rjmp	.+154    	; 0x34e4 <xTaskGenericNotifyFromISR+0xf4>
    344a:	03 30       	cpi	r16, 0x03	; 3
    344c:	79 f1       	breq	.+94     	; 0x34ac <xTaskGenericNotifyFromISR+0xbc>
    344e:	04 30       	cpi	r16, 0x04	; 4
    3450:	d1 f1       	breq	.+116    	; 0x34c6 <xTaskGenericNotifyFromISR+0xd6>
    3452:	48 c0       	rjmp	.+144    	; 0x34e4 <xTaskGenericNotifyFromISR+0xf4>
    3454:	66 0f       	add	r22, r22
    3456:	77 1f       	adc	r23, r23
    3458:	66 0f       	add	r22, r22
    345a:	77 1f       	adc	r23, r23
    345c:	fd 01       	movw	r30, r26
    345e:	e6 0f       	add	r30, r22
    3460:	f7 1f       	adc	r31, r23
    3462:	87 a4       	ldd	r8, Z+47	; 0x2f
    3464:	90 a8       	ldd	r9, Z+48	; 0x30
    3466:	a1 a8       	ldd	r10, Z+49	; 0x31
    3468:	b2 a8       	ldd	r11, Z+50	; 0x32
    346a:	ba 01       	movw	r22, r20
    346c:	a9 01       	movw	r20, r18
    346e:	48 29       	or	r20, r8
    3470:	59 29       	or	r21, r9
    3472:	6a 29       	or	r22, r10
    3474:	7b 29       	or	r23, r11
    3476:	47 a7       	std	Z+47, r20	; 0x2f
    3478:	50 ab       	std	Z+48, r21	; 0x30
    347a:	61 ab       	std	Z+49, r22	; 0x31
    347c:	72 ab       	std	Z+50, r23	; 0x32
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	34 c0       	rjmp	.+104    	; 0x34ea <xTaskGenericNotifyFromISR+0xfa>
    3482:	66 0f       	add	r22, r22
    3484:	77 1f       	adc	r23, r23
    3486:	66 0f       	add	r22, r22
    3488:	77 1f       	adc	r23, r23
    348a:	fd 01       	movw	r30, r26
    348c:	e6 0f       	add	r30, r22
    348e:	f7 1f       	adc	r31, r23
    3490:	47 a5       	ldd	r20, Z+47	; 0x2f
    3492:	50 a9       	ldd	r21, Z+48	; 0x30
    3494:	61 a9       	ldd	r22, Z+49	; 0x31
    3496:	72 a9       	ldd	r23, Z+50	; 0x32
    3498:	4f 5f       	subi	r20, 0xFF	; 255
    349a:	5f 4f       	sbci	r21, 0xFF	; 255
    349c:	6f 4f       	sbci	r22, 0xFF	; 255
    349e:	7f 4f       	sbci	r23, 0xFF	; 255
    34a0:	47 a7       	std	Z+47, r20	; 0x2f
    34a2:	50 ab       	std	Z+48, r21	; 0x30
    34a4:	61 ab       	std	Z+49, r22	; 0x31
    34a6:	72 ab       	std	Z+50, r23	; 0x32
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	1f c0       	rjmp	.+62     	; 0x34ea <xTaskGenericNotifyFromISR+0xfa>
    34ac:	66 0f       	add	r22, r22
    34ae:	77 1f       	adc	r23, r23
    34b0:	66 0f       	add	r22, r22
    34b2:	77 1f       	adc	r23, r23
    34b4:	fd 01       	movw	r30, r26
    34b6:	e6 0f       	add	r30, r22
    34b8:	f7 1f       	adc	r31, r23
    34ba:	27 a7       	std	Z+47, r18	; 0x2f
    34bc:	30 ab       	std	Z+48, r19	; 0x30
    34be:	41 ab       	std	Z+49, r20	; 0x31
    34c0:	52 ab       	std	Z+50, r21	; 0x32
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	12 c0       	rjmp	.+36     	; 0x34ea <xTaskGenericNotifyFromISR+0xfa>
    34c6:	92 30       	cpi	r25, 0x02	; 2
    34c8:	79 f0       	breq	.+30     	; 0x34e8 <xTaskGenericNotifyFromISR+0xf8>
    34ca:	66 0f       	add	r22, r22
    34cc:	77 1f       	adc	r23, r23
    34ce:	66 0f       	add	r22, r22
    34d0:	77 1f       	adc	r23, r23
    34d2:	fd 01       	movw	r30, r26
    34d4:	e6 0f       	add	r30, r22
    34d6:	f7 1f       	adc	r31, r23
    34d8:	27 a7       	std	Z+47, r18	; 0x2f
    34da:	30 ab       	std	Z+48, r19	; 0x30
    34dc:	41 ab       	std	Z+49, r20	; 0x31
    34de:	52 ab       	std	Z+50, r21	; 0x32
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	03 c0       	rjmp	.+6      	; 0x34ea <xTaskGenericNotifyFromISR+0xfa>
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	01 c0       	rjmp	.+2      	; 0x34ea <xTaskGenericNotifyFromISR+0xfa>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	91 30       	cpi	r25, 0x01	; 1
    34ec:	09 f0       	breq	.+2      	; 0x34f0 <xTaskGenericNotifyFromISR+0x100>
    34ee:	96 c0       	rjmp	.+300    	; 0x361c <xTaskGenericNotifyFromISR+0x22c>
    34f0:	90 91 26 16 	lds	r25, 0x1626	; 0x801626 <uxSchedulerSuspended>
    34f4:	91 11       	cpse	r25, r1
    34f6:	5f c0       	rjmp	.+190    	; 0x35b6 <xTaskGenericNotifyFromISR+0x1c6>
    34f8:	1c 96       	adiw	r26, 0x0c	; 12
    34fa:	ed 91       	ld	r30, X+
    34fc:	fc 91       	ld	r31, X
    34fe:	1d 97       	sbiw	r26, 0x0d	; 13
    3500:	16 96       	adiw	r26, 0x06	; 6
    3502:	cd 91       	ld	r28, X+
    3504:	dc 91       	ld	r29, X
    3506:	17 97       	sbiw	r26, 0x07	; 7
    3508:	18 96       	adiw	r26, 0x08	; 8
    350a:	2d 91       	ld	r18, X+
    350c:	3c 91       	ld	r19, X
    350e:	19 97       	sbiw	r26, 0x09	; 9
    3510:	3f 83       	std	Y+7, r19	; 0x07
    3512:	2e 83       	std	Y+6, r18	; 0x06
    3514:	18 96       	adiw	r26, 0x08	; 8
    3516:	cd 91       	ld	r28, X+
    3518:	dc 91       	ld	r29, X
    351a:	19 97       	sbiw	r26, 0x09	; 9
    351c:	16 96       	adiw	r26, 0x06	; 6
    351e:	2d 91       	ld	r18, X+
    3520:	3c 91       	ld	r19, X
    3522:	17 97       	sbiw	r26, 0x07	; 7
    3524:	3d 83       	std	Y+5, r19	; 0x05
    3526:	2c 83       	std	Y+4, r18	; 0x04
    3528:	41 81       	ldd	r20, Z+1	; 0x01
    352a:	52 81       	ldd	r21, Z+2	; 0x02
    352c:	9d 01       	movw	r18, r26
    352e:	2e 5f       	subi	r18, 0xFE	; 254
    3530:	3f 4f       	sbci	r19, 0xFF	; 255
    3532:	42 17       	cp	r20, r18
    3534:	53 07       	cpc	r21, r19
    3536:	31 f4       	brne	.+12     	; 0x3544 <xTaskGenericNotifyFromISR+0x154>
    3538:	18 96       	adiw	r26, 0x08	; 8
    353a:	4d 91       	ld	r20, X+
    353c:	5c 91       	ld	r21, X
    353e:	19 97       	sbiw	r26, 0x09	; 9
    3540:	52 83       	std	Z+2, r21	; 0x02
    3542:	41 83       	std	Z+1, r20	; 0x01
    3544:	1d 96       	adiw	r26, 0x0d	; 13
    3546:	1c 92       	st	X, r1
    3548:	1e 92       	st	-X, r1
    354a:	1c 97       	sbiw	r26, 0x0c	; 12
    354c:	90 81       	ld	r25, Z
    354e:	91 50       	subi	r25, 0x01	; 1
    3550:	90 83       	st	Z, r25
    3552:	5a 96       	adiw	r26, 0x1a	; 26
    3554:	ec 91       	ld	r30, X
    3556:	5a 97       	sbiw	r26, 0x1a	; 26
    3558:	90 91 35 16 	lds	r25, 0x1635	; 0x801635 <uxTopReadyPriority>
    355c:	9e 17       	cp	r25, r30
    355e:	10 f4       	brcc	.+4      	; 0x3564 <xTaskGenericNotifyFromISR+0x174>
    3560:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <uxTopReadyPriority>
    3564:	9b e0       	ldi	r25, 0x0B	; 11
    3566:	9e 9f       	mul	r25, r30
    3568:	f0 01       	movw	r30, r0
    356a:	11 24       	eor	r1, r1
    356c:	e9 58       	subi	r30, 0x89	; 137
    356e:	f9 4e       	sbci	r31, 0xE9	; 233
    3570:	01 80       	ldd	r0, Z+1	; 0x01
    3572:	f2 81       	ldd	r31, Z+2	; 0x02
    3574:	e0 2d       	mov	r30, r0
    3576:	17 96       	adiw	r26, 0x07	; 7
    3578:	fc 93       	st	X, r31
    357a:	ee 93       	st	-X, r30
    357c:	16 97       	sbiw	r26, 0x06	; 6
    357e:	46 81       	ldd	r20, Z+6	; 0x06
    3580:	57 81       	ldd	r21, Z+7	; 0x07
    3582:	19 96       	adiw	r26, 0x09	; 9
    3584:	5c 93       	st	X, r21
    3586:	4e 93       	st	-X, r20
    3588:	18 97       	sbiw	r26, 0x08	; 8
    358a:	c6 81       	ldd	r28, Z+6	; 0x06
    358c:	d7 81       	ldd	r29, Z+7	; 0x07
    358e:	3d 83       	std	Y+5, r19	; 0x05
    3590:	2c 83       	std	Y+4, r18	; 0x04
    3592:	37 83       	std	Z+7, r19	; 0x07
    3594:	26 83       	std	Z+6, r18	; 0x06
    3596:	5a 96       	adiw	r26, 0x1a	; 26
    3598:	ec 91       	ld	r30, X
    359a:	5a 97       	sbiw	r26, 0x1a	; 26
    359c:	9e 9f       	mul	r25, r30
    359e:	f0 01       	movw	r30, r0
    35a0:	11 24       	eor	r1, r1
    35a2:	e9 58       	subi	r30, 0x89	; 137
    35a4:	f9 4e       	sbci	r31, 0xE9	; 233
    35a6:	1d 96       	adiw	r26, 0x0d	; 13
    35a8:	fc 93       	st	X, r31
    35aa:	ee 93       	st	-X, r30
    35ac:	1c 97       	sbiw	r26, 0x0c	; 12
    35ae:	90 81       	ld	r25, Z
    35b0:	9f 5f       	subi	r25, 0xFF	; 255
    35b2:	90 83       	st	Z, r25
    35b4:	21 c0       	rjmp	.+66     	; 0x35f8 <xTaskGenericNotifyFromISR+0x208>
    35b6:	62 e5       	ldi	r22, 0x52	; 82
    35b8:	76 e1       	ldi	r23, 0x16	; 22
    35ba:	fb 01       	movw	r30, r22
    35bc:	c1 81       	ldd	r28, Z+1	; 0x01
    35be:	d2 81       	ldd	r29, Z+2	; 0x02
    35c0:	53 96       	adiw	r26, 0x13	; 19
    35c2:	dc 93       	st	X, r29
    35c4:	ce 93       	st	-X, r28
    35c6:	52 97       	sbiw	r26, 0x12	; 18
    35c8:	2e 81       	ldd	r18, Y+6	; 0x06
    35ca:	3f 81       	ldd	r19, Y+7	; 0x07
    35cc:	55 96       	adiw	r26, 0x15	; 21
    35ce:	3c 93       	st	X, r19
    35d0:	2e 93       	st	-X, r18
    35d2:	54 97       	sbiw	r26, 0x14	; 20
    35d4:	4e 81       	ldd	r20, Y+6	; 0x06
    35d6:	5f 81       	ldd	r21, Y+7	; 0x07
    35d8:	9d 01       	movw	r18, r26
    35da:	22 5f       	subi	r18, 0xF2	; 242
    35dc:	3f 4f       	sbci	r19, 0xFF	; 255
    35de:	fa 01       	movw	r30, r20
    35e0:	35 83       	std	Z+5, r19	; 0x05
    35e2:	24 83       	std	Z+4, r18	; 0x04
    35e4:	3f 83       	std	Y+7, r19	; 0x07
    35e6:	2e 83       	std	Y+6, r18	; 0x06
    35e8:	59 96       	adiw	r26, 0x19	; 25
    35ea:	7c 93       	st	X, r23
    35ec:	6e 93       	st	-X, r22
    35ee:	58 97       	sbiw	r26, 0x18	; 24
    35f0:	fb 01       	movw	r30, r22
    35f2:	90 81       	ld	r25, Z
    35f4:	9f 5f       	subi	r25, 0xFF	; 255
    35f6:	90 83       	st	Z, r25
    35f8:	5a 96       	adiw	r26, 0x1a	; 26
    35fa:	2c 91       	ld	r18, X
    35fc:	e0 91 e5 16 	lds	r30, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    3600:	f0 91 e6 16 	lds	r31, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>
    3604:	92 8d       	ldd	r25, Z+26	; 0x1a
    3606:	92 17       	cp	r25, r18
    3608:	48 f4       	brcc	.+18     	; 0x361c <xTaskGenericNotifyFromISR+0x22c>
    360a:	c1 14       	cp	r12, r1
    360c:	d1 04       	cpc	r13, r1
    360e:	19 f0       	breq	.+6      	; 0x3616 <xTaskGenericNotifyFromISR+0x226>
    3610:	91 e0       	ldi	r25, 0x01	; 1
    3612:	f6 01       	movw	r30, r12
    3614:	90 83       	st	Z, r25
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	90 93 2f 16 	sts	0x162F, r25	; 0x80162f <xYieldPending>
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	df 90       	pop	r13
    3628:	cf 90       	pop	r12
    362a:	bf 90       	pop	r11
    362c:	af 90       	pop	r10
    362e:	9f 90       	pop	r9
    3630:	8f 90       	pop	r8
    3632:	08 95       	ret

00003634 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	21 f4       	brne	.+8      	; 0x3640 <xTaskGenericNotifyStateClear+0xc>
    3638:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxCurrentTCB>
    363c:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	fc 01       	movw	r30, r24
    364a:	e6 0f       	add	r30, r22
    364c:	f7 1f       	adc	r31, r23
    364e:	23 a9       	ldd	r18, Z+51	; 0x33
    3650:	22 30       	cpi	r18, 0x02	; 2
    3652:	31 f4       	brne	.+12     	; 0x3660 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3654:	fc 01       	movw	r30, r24
    3656:	e6 0f       	add	r30, r22
    3658:	f7 1f       	adc	r31, r23
    365a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3660:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3662:	0f 90       	pop	r0
    3664:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3666:	08 95       	ret

00003668 <prvGetNextExpireTime>:
    3668:	dc 01       	movw	r26, r24
    366a:	e0 91 f1 16 	lds	r30, 0x16F1	; 0x8016f1 <pxCurrentTimerList>
    366e:	f0 91 f2 16 	lds	r31, 0x16F2	; 0x8016f2 <pxCurrentTimerList+0x1>
    3672:	80 81       	ld	r24, Z
    3674:	91 e0       	ldi	r25, 0x01	; 1
    3676:	81 11       	cpse	r24, r1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	9c 93       	st	X, r25
    367c:	91 11       	cpse	r25, r1
    367e:	08 c0       	rjmp	.+16     	; 0x3690 <prvGetNextExpireTime+0x28>
    3680:	07 80       	ldd	r0, Z+7	; 0x07
    3682:	f0 85       	ldd	r31, Z+8	; 0x08
    3684:	e0 2d       	mov	r30, r0
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	08 95       	ret
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	70 e0       	ldi	r23, 0x00	; 0
    3694:	cb 01       	movw	r24, r22
    3696:	08 95       	ret

00003698 <prvInsertTimerInActiveList>:
    3698:	cf 92       	push	r12
    369a:	df 92       	push	r13
    369c:	ef 92       	push	r14
    369e:	ff 92       	push	r15
    36a0:	0f 93       	push	r16
    36a2:	1f 93       	push	r17
    36a4:	fc 01       	movw	r30, r24
    36a6:	42 83       	std	Z+2, r20	; 0x02
    36a8:	53 83       	std	Z+3, r21	; 0x03
    36aa:	64 83       	std	Z+4, r22	; 0x04
    36ac:	75 83       	std	Z+5, r23	; 0x05
    36ae:	93 87       	std	Z+11, r25	; 0x0b
    36b0:	82 87       	std	Z+10, r24	; 0x0a
    36b2:	04 17       	cp	r16, r20
    36b4:	15 07       	cpc	r17, r21
    36b6:	26 07       	cpc	r18, r22
    36b8:	37 07       	cpc	r19, r23
    36ba:	c0 f0       	brcs	.+48     	; 0x36ec <prvInsertTimerInActiveList+0x54>
    36bc:	0c 19       	sub	r16, r12
    36be:	1d 09       	sbc	r17, r13
    36c0:	2e 09       	sbc	r18, r14
    36c2:	3f 09       	sbc	r19, r15
    36c4:	86 85       	ldd	r24, Z+14	; 0x0e
    36c6:	97 85       	ldd	r25, Z+15	; 0x0f
    36c8:	a0 89       	ldd	r26, Z+16	; 0x10
    36ca:	b1 89       	ldd	r27, Z+17	; 0x11
    36cc:	08 17       	cp	r16, r24
    36ce:	19 07       	cpc	r17, r25
    36d0:	2a 07       	cpc	r18, r26
    36d2:	3b 07       	cpc	r19, r27
    36d4:	00 f5       	brcc	.+64     	; 0x3716 <prvInsertTimerInActiveList+0x7e>
    36d6:	bf 01       	movw	r22, r30
    36d8:	6e 5f       	subi	r22, 0xFE	; 254
    36da:	7f 4f       	sbci	r23, 0xFF	; 255
    36dc:	80 91 ef 16 	lds	r24, 0x16EF	; 0x8016ef <pxOverflowTimerList>
    36e0:	90 91 f0 16 	lds	r25, 0x16F0	; 0x8016f0 <pxOverflowTimerList+0x1>
    36e4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	18 c0       	rjmp	.+48     	; 0x371c <prvInsertTimerInActiveList+0x84>
    36ec:	0c 15       	cp	r16, r12
    36ee:	1d 05       	cpc	r17, r13
    36f0:	2e 05       	cpc	r18, r14
    36f2:	3f 05       	cpc	r19, r15
    36f4:	28 f4       	brcc	.+10     	; 0x3700 <prvInsertTimerInActiveList+0x68>
    36f6:	4c 15       	cp	r20, r12
    36f8:	5d 05       	cpc	r21, r13
    36fa:	6e 05       	cpc	r22, r14
    36fc:	7f 05       	cpc	r23, r15
    36fe:	68 f4       	brcc	.+26     	; 0x371a <prvInsertTimerInActiveList+0x82>
    3700:	bf 01       	movw	r22, r30
    3702:	6e 5f       	subi	r22, 0xFE	; 254
    3704:	7f 4f       	sbci	r23, 0xFF	; 255
    3706:	80 91 f1 16 	lds	r24, 0x16F1	; 0x8016f1 <pxCurrentTimerList>
    370a:	90 91 f2 16 	lds	r25, 0x16F2	; 0x8016f2 <pxCurrentTimerList+0x1>
    370e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	03 c0       	rjmp	.+6      	; 0x371c <prvInsertTimerInActiveList+0x84>
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	01 c0       	rjmp	.+2      	; 0x371c <prvInsertTimerInActiveList+0x84>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	08 95       	ret

0000372a <prvCheckForValidListAndQueue>:
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	0f 92       	push	r0
    3730:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <xTimerQueue>
    3734:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    3738:	89 2b       	or	r24, r25
    373a:	e9 f4       	brne	.+58     	; 0x3776 <prvCheckForValidListAndQueue+0x4c>
    373c:	8e ef       	ldi	r24, 0xFE	; 254
    373e:	96 e1       	ldi	r25, 0x16	; 22
    3740:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    3744:	83 ef       	ldi	r24, 0xF3	; 243
    3746:	96 e1       	ldi	r25, 0x16	; 22
    3748:	0e 94 49 06 	call	0xc92	; 0xc92 <vListInitialise>
    374c:	8e ef       	ldi	r24, 0xFE	; 254
    374e:	96 e1       	ldi	r25, 0x16	; 22
    3750:	90 93 f2 16 	sts	0x16F2, r25	; 0x8016f2 <pxCurrentTimerList+0x1>
    3754:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <pxCurrentTimerList>
    3758:	83 ef       	ldi	r24, 0xF3	; 243
    375a:	96 e1       	ldi	r25, 0x16	; 22
    375c:	90 93 f0 16 	sts	0x16F0, r25	; 0x8016f0 <pxOverflowTimerList+0x1>
    3760:	80 93 ef 16 	sts	0x16EF, r24	; 0x8016ef <pxOverflowTimerList>
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	67 e0       	ldi	r22, 0x07	; 7
    3768:	8a e0       	ldi	r24, 0x0A	; 10
    376a:	0e 94 0c 09 	call	0x1218	; 0x1218 <xQueueGenericCreate>
    376e:	90 93 ee 16 	sts	0x16EE, r25	; 0x8016ee <xTimerQueue+0x1>
    3772:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <xTimerQueue>
    3776:	0f 90       	pop	r0
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	08 95       	ret

0000377c <xTimerCreateTimerTask>:
    377c:	ef 92       	push	r14
    377e:	ff 92       	push	r15
    3780:	0f 93       	push	r16
    3782:	d3 df       	rcall	.-90     	; 0x372a <prvCheckForValidListAndQueue>
    3784:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <xTimerQueue>
    3788:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    378c:	89 2b       	or	r24, r25
    378e:	91 f0       	breq	.+36     	; 0x37b4 <xTimerCreateTimerTask+0x38>
    3790:	0f 2e       	mov	r0, r31
    3792:	fb ee       	ldi	r31, 0xEB	; 235
    3794:	ef 2e       	mov	r14, r31
    3796:	f6 e1       	ldi	r31, 0x16	; 22
    3798:	ff 2e       	mov	r15, r31
    379a:	f0 2d       	mov	r31, r0
    379c:	03 e0       	ldi	r16, 0x03	; 3
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 ec       	ldi	r20, 0xC0	; 192
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	6b e7       	ldi	r22, 0x7B	; 123
    37a8:	73 e0       	ldi	r23, 0x03	; 3
    37aa:	87 ed       	ldi	r24, 0xD7	; 215
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <xTimerCreateTimerTask+0x3a>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	08 95       	ret

000037be <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    37be:	8f 92       	push	r8
    37c0:	9f 92       	push	r9
    37c2:	af 92       	push	r10
    37c4:	bf 92       	push	r11
    37c6:	cf 92       	push	r12
    37c8:	df 92       	push	r13
    37ca:	ef 92       	push	r14
    37cc:	ff 92       	push	r15
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	27 97       	sbiw	r28, 0x07	; 7
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    37e6:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <xTimerQueue>
    37ea:	f0 91 ee 16 	lds	r31, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    37ee:	30 97       	sbiw	r30, 0x00	; 0
    37f0:	81 f1       	breq	.+96     	; 0x3852 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    37f2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    37f4:	2a 83       	std	Y+2, r18	; 0x02
    37f6:	3b 83       	std	Y+3, r19	; 0x03
    37f8:	4c 83       	std	Y+4, r20	; 0x04
    37fa:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    37fc:	9f 83       	std	Y+7, r25	; 0x07
    37fe:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3800:	66 30       	cpi	r22, 0x06	; 6
    3802:	f4 f4       	brge	.+60     	; 0x3840 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3804:	c3 da       	rcall	.-2682   	; 0x2d8c <xTaskGetSchedulerState>
    3806:	82 30       	cpi	r24, 0x02	; 2
    3808:	69 f4       	brne	.+26     	; 0x3824 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    380a:	00 e0       	ldi	r16, 0x00	; 0
    380c:	a7 01       	movw	r20, r14
    380e:	96 01       	movw	r18, r12
    3810:	be 01       	movw	r22, r28
    3812:	6f 5f       	subi	r22, 0xFF	; 255
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <xTimerQueue>
    381a:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    381e:	0e 94 2f 09 	call	0x125e	; 0x125e <xQueueGenericSend>
    3822:	18 c0       	rjmp	.+48     	; 0x3854 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3824:	00 e0       	ldi	r16, 0x00	; 0
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	a9 01       	movw	r20, r18
    382c:	be 01       	movw	r22, r28
    382e:	6f 5f       	subi	r22, 0xFF	; 255
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <xTimerQueue>
    3836:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    383a:	0e 94 2f 09 	call	0x125e	; 0x125e <xQueueGenericSend>
    383e:	0a c0       	rjmp	.+20     	; 0x3854 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	a8 01       	movw	r20, r16
    3844:	be 01       	movw	r22, r28
    3846:	6f 5f       	subi	r22, 0xFF	; 255
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	cf 01       	movw	r24, r30
    384c:	0e 94 df 09 	call	0x13be	; 0x13be <xQueueGenericSendFromISR>
    3850:	01 c0       	rjmp	.+2      	; 0x3854 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3852:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3854:	27 96       	adiw	r28, 0x07	; 7
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	1f 91       	pop	r17
    3866:	0f 91       	pop	r16
    3868:	ff 90       	pop	r15
    386a:	ef 90       	pop	r14
    386c:	df 90       	pop	r13
    386e:	cf 90       	pop	r12
    3870:	bf 90       	pop	r11
    3872:	af 90       	pop	r10
    3874:	9f 90       	pop	r9
    3876:	8f 90       	pop	r8
    3878:	08 95       	ret

0000387a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    387a:	8f 92       	push	r8
    387c:	9f 92       	push	r9
    387e:	af 92       	push	r10
    3880:	bf 92       	push	r11
    3882:	cf 92       	push	r12
    3884:	df 92       	push	r13
    3886:	ef 92       	push	r14
    3888:	ff 92       	push	r15
    388a:	0f 93       	push	r16
    388c:	1f 93       	push	r17
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3892:	3b c0       	rjmp	.+118    	; 0x390a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3894:	07 80       	ldd	r0, Z+7	; 0x07
    3896:	f0 85       	ldd	r31, Z+8	; 0x08
    3898:	e0 2d       	mov	r30, r0
    389a:	80 80       	ld	r8, Z
    389c:	91 80       	ldd	r9, Z+1	; 0x01
    389e:	a2 80       	ldd	r10, Z+2	; 0x02
    38a0:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    38a2:	c0 85       	ldd	r28, Z+8	; 0x08
    38a4:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    38a6:	8e 01       	movw	r16, r28
    38a8:	0e 5f       	subi	r16, 0xFE	; 254
    38aa:	1f 4f       	sbci	r17, 0xFF	; 255
    38ac:	c8 01       	movw	r24, r16
    38ae:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    38b2:	ec 89       	ldd	r30, Y+20	; 0x14
    38b4:	fd 89       	ldd	r31, Y+21	; 0x15
    38b6:	ce 01       	movw	r24, r28
    38b8:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38ba:	8e 89       	ldd	r24, Y+22	; 0x16
    38bc:	82 ff       	sbrs	r24, 2
    38be:	25 c0       	rjmp	.+74     	; 0x390a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    38c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    38c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    38c4:	a8 89       	ldd	r26, Y+16	; 0x10
    38c6:	b9 89       	ldd	r27, Y+17	; 0x11
    38c8:	88 0d       	add	r24, r8
    38ca:	99 1d       	adc	r25, r9
    38cc:	aa 1d       	adc	r26, r10
    38ce:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    38d0:	88 16       	cp	r8, r24
    38d2:	99 06       	cpc	r9, r25
    38d4:	aa 06       	cpc	r10, r26
    38d6:	bb 06       	cpc	r11, r27
    38d8:	70 f4       	brcc	.+28     	; 0x38f6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    38da:	8a 83       	std	Y+2, r24	; 0x02
    38dc:	9b 83       	std	Y+3, r25	; 0x03
    38de:	ac 83       	std	Y+4, r26	; 0x04
    38e0:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    38e2:	db 87       	std	Y+11, r29	; 0x0b
    38e4:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    38e6:	b8 01       	movw	r22, r16
    38e8:	80 91 f1 16 	lds	r24, 0x16F1	; 0x8016f1 <pxCurrentTimerList>
    38ec:	90 91 f2 16 	lds	r25, 0x16F2	; 0x8016f2 <pxCurrentTimerList+0x1>
    38f0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    38f4:	0a c0       	rjmp	.+20     	; 0x390a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    38f6:	c1 2c       	mov	r12, r1
    38f8:	d1 2c       	mov	r13, r1
    38fa:	76 01       	movw	r14, r12
    38fc:	00 e0       	ldi	r16, 0x00	; 0
    38fe:	10 e0       	ldi	r17, 0x00	; 0
    3900:	a5 01       	movw	r20, r10
    3902:	94 01       	movw	r18, r8
    3904:	60 e0       	ldi	r22, 0x00	; 0
    3906:	ce 01       	movw	r24, r28
    3908:	5a df       	rcall	.-332    	; 0x37be <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    390a:	e0 91 f1 16 	lds	r30, 0x16F1	; 0x8016f1 <pxCurrentTimerList>
    390e:	f0 91 f2 16 	lds	r31, 0x16F2	; 0x8016f2 <pxCurrentTimerList+0x1>
    3912:	80 81       	ld	r24, Z
    3914:	81 11       	cpse	r24, r1
    3916:	be cf       	rjmp	.-132    	; 0x3894 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3918:	80 91 ef 16 	lds	r24, 0x16EF	; 0x8016ef <pxOverflowTimerList>
    391c:	90 91 f0 16 	lds	r25, 0x16F0	; 0x8016f0 <pxOverflowTimerList+0x1>
    3920:	90 93 f2 16 	sts	0x16F2, r25	; 0x8016f2 <pxCurrentTimerList+0x1>
    3924:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3928:	f0 93 f0 16 	sts	0x16F0, r31	; 0x8016f0 <pxOverflowTimerList+0x1>
    392c:	e0 93 ef 16 	sts	0x16EF, r30	; 0x8016ef <pxOverflowTimerList>
    }
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	df 90       	pop	r13
    393e:	cf 90       	pop	r12
    3940:	bf 90       	pop	r11
    3942:	af 90       	pop	r10
    3944:	9f 90       	pop	r9
    3946:	8f 90       	pop	r8
    3948:	08 95       	ret

0000394a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    394a:	cf 92       	push	r12
    394c:	df 92       	push	r13
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3958:	0e 94 49 11 	call	0x2292	; 0x2292 <xTaskGetTickCount>
    395c:	6b 01       	movw	r12, r22
    395e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3960:	80 91 e7 16 	lds	r24, 0x16E7	; 0x8016e7 <xLastTime.2436>
    3964:	90 91 e8 16 	lds	r25, 0x16E8	; 0x8016e8 <xLastTime.2436+0x1>
    3968:	a0 91 e9 16 	lds	r26, 0x16E9	; 0x8016e9 <xLastTime.2436+0x2>
    396c:	b0 91 ea 16 	lds	r27, 0x16EA	; 0x8016ea <xLastTime.2436+0x3>
    3970:	c8 16       	cp	r12, r24
    3972:	d9 06       	cpc	r13, r25
    3974:	ea 06       	cpc	r14, r26
    3976:	fb 06       	cpc	r15, r27
    3978:	20 f4       	brcc	.+8      	; 0x3982 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    397a:	7f df       	rcall	.-258    	; 0x387a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	88 83       	st	Y, r24
    3980:	01 c0       	rjmp	.+2      	; 0x3984 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3982:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3984:	c0 92 e7 16 	sts	0x16E7, r12	; 0x8016e7 <xLastTime.2436>
    3988:	d0 92 e8 16 	sts	0x16E8, r13	; 0x8016e8 <xLastTime.2436+0x1>
    398c:	e0 92 e9 16 	sts	0x16E9, r14	; 0x8016e9 <xLastTime.2436+0x2>
    3990:	f0 92 ea 16 	sts	0x16EA, r15	; 0x8016ea <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3994:	c7 01       	movw	r24, r14
    3996:	b6 01       	movw	r22, r12
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	ff 90       	pop	r15
    399e:	ef 90       	pop	r14
    39a0:	df 90       	pop	r13
    39a2:	cf 90       	pop	r12
    39a4:	08 95       	ret

000039a6 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    39a6:	4f 92       	push	r4
    39a8:	5f 92       	push	r5
    39aa:	6f 92       	push	r6
    39ac:	7f 92       	push	r7
    39ae:	8f 92       	push	r8
    39b0:	9f 92       	push	r9
    39b2:	af 92       	push	r10
    39b4:	bf 92       	push	r11
    39b6:	cf 92       	push	r12
    39b8:	df 92       	push	r13
    39ba:	ef 92       	push	r14
    39bc:	ff 92       	push	r15
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	4b 01       	movw	r8, r22
    39c8:	5c 01       	movw	r10, r24
    39ca:	29 01       	movw	r4, r18
    39cc:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    39ce:	e0 91 f1 16 	lds	r30, 0x16F1	; 0x8016f1 <pxCurrentTimerList>
    39d2:	f0 91 f2 16 	lds	r31, 0x16F2	; 0x8016f2 <pxCurrentTimerList+0x1>
    39d6:	07 80       	ldd	r0, Z+7	; 0x07
    39d8:	f0 85       	ldd	r31, Z+8	; 0x08
    39da:	e0 2d       	mov	r30, r0
    39dc:	c0 85       	ldd	r28, Z+8	; 0x08
    39de:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    39e0:	ce 01       	movw	r24, r28
    39e2:	02 96       	adiw	r24, 0x02	; 2
    39e4:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    39e8:	8e 89       	ldd	r24, Y+22	; 0x16
    39ea:	82 ff       	sbrs	r24, 2
    39ec:	1b c0       	rjmp	.+54     	; 0x3a24 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    39ee:	4e 85       	ldd	r20, Y+14	; 0x0e
    39f0:	5f 85       	ldd	r21, Y+15	; 0x0f
    39f2:	68 89       	ldd	r22, Y+16	; 0x10
    39f4:	79 89       	ldd	r23, Y+17	; 0x11
    39f6:	48 0d       	add	r20, r8
    39f8:	59 1d       	adc	r21, r9
    39fa:	6a 1d       	adc	r22, r10
    39fc:	7b 1d       	adc	r23, r11
    39fe:	75 01       	movw	r14, r10
    3a00:	64 01       	movw	r12, r8
    3a02:	93 01       	movw	r18, r6
    3a04:	82 01       	movw	r16, r4
    3a06:	ce 01       	movw	r24, r28
    3a08:	47 de       	rcall	.-882    	; 0x3698 <prvInsertTimerInActiveList>
    3a0a:	88 23       	and	r24, r24
    3a0c:	69 f0       	breq	.+26     	; 0x3a28 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a0e:	c1 2c       	mov	r12, r1
    3a10:	d1 2c       	mov	r13, r1
    3a12:	76 01       	movw	r14, r12
    3a14:	00 e0       	ldi	r16, 0x00	; 0
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	a5 01       	movw	r20, r10
    3a1a:	94 01       	movw	r18, r8
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	ce 01       	movw	r24, r28
    3a20:	ce de       	rcall	.-612    	; 0x37be <xTimerGenericCommand>
    3a22:	02 c0       	rjmp	.+4      	; 0x3a28 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3a24:	8e 7f       	andi	r24, 0xFE	; 254
    3a26:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a28:	ec 89       	ldd	r30, Y+20	; 0x14
    3a2a:	fd 89       	ldd	r31, Y+21	; 0x15
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	19 95       	eicall
    }
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	1f 91       	pop	r17
    3a36:	0f 91       	pop	r16
    3a38:	ff 90       	pop	r15
    3a3a:	ef 90       	pop	r14
    3a3c:	df 90       	pop	r13
    3a3e:	cf 90       	pop	r12
    3a40:	bf 90       	pop	r11
    3a42:	af 90       	pop	r10
    3a44:	9f 90       	pop	r9
    3a46:	8f 90       	pop	r8
    3a48:	7f 90       	pop	r7
    3a4a:	6f 90       	pop	r6
    3a4c:	5f 90       	pop	r5
    3a4e:	4f 90       	pop	r4
    3a50:	08 95       	ret

00003a52 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3a52:	8f 92       	push	r8
    3a54:	9f 92       	push	r9
    3a56:	af 92       	push	r10
    3a58:	bf 92       	push	r11
    3a5a:	cf 92       	push	r12
    3a5c:	df 92       	push	r13
    3a5e:	ef 92       	push	r14
    3a60:	ff 92       	push	r15
    3a62:	1f 93       	push	r17
    3a64:	cf 93       	push	r28
    3a66:	df 93       	push	r29
    3a68:	1f 92       	push	r1
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	6b 01       	movw	r12, r22
    3a70:	7c 01       	movw	r14, r24
    3a72:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3a74:	0e 94 43 11 	call	0x2286	; 0x2286 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a78:	ce 01       	movw	r24, r28
    3a7a:	01 96       	adiw	r24, 0x01	; 1
    3a7c:	66 df       	rcall	.-308    	; 0x394a <prvSampleTimeNow>
    3a7e:	4b 01       	movw	r8, r22
    3a80:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	81 11       	cpse	r24, r1
    3a86:	2d c0       	rjmp	.+90     	; 0x3ae2 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3a88:	11 11       	cpse	r17, r1
    3a8a:	0d c0       	rjmp	.+26     	; 0x3aa6 <prvProcessTimerOrBlockTask+0x54>
    3a8c:	8c 14       	cp	r8, r12
    3a8e:	9d 04       	cpc	r9, r13
    3a90:	ae 04       	cpc	r10, r14
    3a92:	bf 04       	cpc	r11, r15
    3a94:	40 f0       	brcs	.+16     	; 0x3aa6 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3a96:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3a9a:	a5 01       	movw	r20, r10
    3a9c:	94 01       	movw	r18, r8
    3a9e:	c7 01       	movw	r24, r14
    3aa0:	b6 01       	movw	r22, r12
    3aa2:	81 df       	rcall	.-254    	; 0x39a6 <prvProcessExpiredTimer>
    3aa4:	20 c0       	rjmp	.+64     	; 0x3ae6 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3aa6:	11 23       	and	r17, r17
    3aa8:	41 f0       	breq	.+16     	; 0x3aba <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3aaa:	e0 91 ef 16 	lds	r30, 0x16EF	; 0x8016ef <pxOverflowTimerList>
    3aae:	f0 91 f0 16 	lds	r31, 0x16F0	; 0x8016f0 <pxOverflowTimerList+0x1>
    3ab2:	80 81       	ld	r24, Z
    3ab4:	11 e0       	ldi	r17, 0x01	; 1
    3ab6:	81 11       	cpse	r24, r1
    3ab8:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3aba:	b7 01       	movw	r22, r14
    3abc:	a6 01       	movw	r20, r12
    3abe:	48 19       	sub	r20, r8
    3ac0:	59 09       	sbc	r21, r9
    3ac2:	6a 09       	sbc	r22, r10
    3ac4:	7b 09       	sbc	r23, r11
    3ac6:	21 2f       	mov	r18, r17
    3ac8:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <xTimerQueue>
    3acc:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    3ad0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3ad4:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
    3ad8:	81 11       	cpse	r24, r1
    3ada:	05 c0       	rjmp	.+10     	; 0x3ae6 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3adc:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    3ae0:	02 c0       	rjmp	.+4      	; 0x3ae6 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3ae2:	0e 94 83 12 	call	0x2506	; 0x2506 <xTaskResumeAll>
            }
        }
    }
    3ae6:	0f 90       	pop	r0
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	1f 91       	pop	r17
    3aee:	ff 90       	pop	r15
    3af0:	ef 90       	pop	r14
    3af2:	df 90       	pop	r13
    3af4:	cf 90       	pop	r12
    3af6:	bf 90       	pop	r11
    3af8:	af 90       	pop	r10
    3afa:	9f 90       	pop	r9
    3afc:	8f 90       	pop	r8
    3afe:	08 95       	ret

00003b00 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3b00:	af 92       	push	r10
    3b02:	bf 92       	push	r11
    3b04:	cf 92       	push	r12
    3b06:	df 92       	push	r13
    3b08:	ef 92       	push	r14
    3b0a:	ff 92       	push	r15
    3b0c:	0f 93       	push	r16
    3b0e:	1f 93       	push	r17
    3b10:	cf 93       	push	r28
    3b12:	df 93       	push	r29
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	28 97       	sbiw	r28, 0x08	; 8
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b24:	82 c0       	rjmp	.+260    	; 0x3c2a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	88 23       	and	r24, r24
    3b2a:	0c f4       	brge	.+2      	; 0x3b2e <prvProcessReceivedCommands+0x2e>
    3b2c:	7e c0       	rjmp	.+252    	; 0x3c2a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3b2e:	ae 80       	ldd	r10, Y+6	; 0x06
    3b30:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3b32:	d5 01       	movw	r26, r10
    3b34:	1c 96       	adiw	r26, 0x0c	; 12
    3b36:	8d 91       	ld	r24, X+
    3b38:	9c 91       	ld	r25, X
    3b3a:	1d 97       	sbiw	r26, 0x0d	; 13
    3b3c:	89 2b       	or	r24, r25
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b40:	c5 01       	movw	r24, r10
    3b42:	02 96       	adiw	r24, 0x02	; 2
    3b44:	0e 94 9b 06 	call	0xd36	; 0xd36 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3b48:	ce 01       	movw	r24, r28
    3b4a:	08 96       	adiw	r24, 0x08	; 8
    3b4c:	fe de       	rcall	.-516    	; 0x394a <prvSampleTimeNow>
    3b4e:	8b 01       	movw	r16, r22
    3b50:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3b52:	e9 81       	ldd	r30, Y+1	; 0x01
    3b54:	0e 2e       	mov	r0, r30
    3b56:	00 0c       	add	r0, r0
    3b58:	ff 0b       	sbc	r31, r31
    3b5a:	ea 30       	cpi	r30, 0x0A	; 10
    3b5c:	f1 05       	cpc	r31, r1
    3b5e:	08 f0       	brcs	.+2      	; 0x3b62 <prvProcessReceivedCommands+0x62>
    3b60:	64 c0       	rjmp	.+200    	; 0x3c2a <prvProcessReceivedCommands+0x12a>
    3b62:	88 27       	eor	r24, r24
    3b64:	ee 58       	subi	r30, 0x8E	; 142
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	8f 4f       	sbci	r24, 0xFF	; 255
    3b6a:	0c 94 d4 30 	jmp	0x61a8	; 0x61a8 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b6e:	f5 01       	movw	r30, r10
    3b70:	86 89       	ldd	r24, Z+22	; 0x16
    3b72:	81 60       	ori	r24, 0x01	; 1
    3b74:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3b76:	ca 80       	ldd	r12, Y+2	; 0x02
    3b78:	db 80       	ldd	r13, Y+3	; 0x03
    3b7a:	ec 80       	ldd	r14, Y+4	; 0x04
    3b7c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b7e:	46 85       	ldd	r20, Z+14	; 0x0e
    3b80:	57 85       	ldd	r21, Z+15	; 0x0f
    3b82:	60 89       	ldd	r22, Z+16	; 0x10
    3b84:	71 89       	ldd	r23, Z+17	; 0x11
    3b86:	4c 0d       	add	r20, r12
    3b88:	5d 1d       	adc	r21, r13
    3b8a:	6e 1d       	adc	r22, r14
    3b8c:	7f 1d       	adc	r23, r15
    3b8e:	c5 01       	movw	r24, r10
    3b90:	83 dd       	rcall	.-1274   	; 0x3698 <prvInsertTimerInActiveList>
    3b92:	88 23       	and	r24, r24
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <prvProcessReceivedCommands+0x98>
    3b96:	49 c0       	rjmp	.+146    	; 0x3c2a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b98:	d5 01       	movw	r26, r10
    3b9a:	54 96       	adiw	r26, 0x14	; 20
    3b9c:	ed 91       	ld	r30, X+
    3b9e:	fc 91       	ld	r31, X
    3ba0:	55 97       	sbiw	r26, 0x15	; 21
    3ba2:	c5 01       	movw	r24, r10
    3ba4:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3ba6:	f5 01       	movw	r30, r10
    3ba8:	86 89       	ldd	r24, Z+22	; 0x16
    3baa:	82 ff       	sbrs	r24, 2
    3bac:	3e c0       	rjmp	.+124    	; 0x3c2a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3bae:	4a 81       	ldd	r20, Y+2	; 0x02
    3bb0:	5b 81       	ldd	r21, Y+3	; 0x03
    3bb2:	6c 81       	ldd	r22, Y+4	; 0x04
    3bb4:	7d 81       	ldd	r23, Y+5	; 0x05
    3bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    3bb8:	97 85       	ldd	r25, Z+15	; 0x0f
    3bba:	a0 89       	ldd	r26, Z+16	; 0x10
    3bbc:	b1 89       	ldd	r27, Z+17	; 0x11
    3bbe:	9a 01       	movw	r18, r20
    3bc0:	ab 01       	movw	r20, r22
    3bc2:	28 0f       	add	r18, r24
    3bc4:	39 1f       	adc	r19, r25
    3bc6:	4a 1f       	adc	r20, r26
    3bc8:	5b 1f       	adc	r21, r27
    3bca:	c1 2c       	mov	r12, r1
    3bcc:	d1 2c       	mov	r13, r1
    3bce:	76 01       	movw	r14, r12
    3bd0:	00 e0       	ldi	r16, 0x00	; 0
    3bd2:	10 e0       	ldi	r17, 0x00	; 0
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	c5 01       	movw	r24, r10
    3bd8:	f2 dd       	rcall	.-1052   	; 0x37be <xTimerGenericCommand>
    3bda:	27 c0       	rjmp	.+78     	; 0x3c2a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bdc:	d5 01       	movw	r26, r10
    3bde:	56 96       	adiw	r26, 0x16	; 22
    3be0:	8c 91       	ld	r24, X
    3be2:	56 97       	sbiw	r26, 0x16	; 22
    3be4:	8e 7f       	andi	r24, 0xFE	; 254
    3be6:	56 96       	adiw	r26, 0x16	; 22
    3be8:	8c 93       	st	X, r24
                        break;
    3bea:	1f c0       	rjmp	.+62     	; 0x3c2a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3bec:	f5 01       	movw	r30, r10
    3bee:	86 89       	ldd	r24, Z+22	; 0x16
    3bf0:	81 60       	ori	r24, 0x01	; 1
    3bf2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3bf4:	4a 81       	ldd	r20, Y+2	; 0x02
    3bf6:	5b 81       	ldd	r21, Y+3	; 0x03
    3bf8:	6c 81       	ldd	r22, Y+4	; 0x04
    3bfa:	7d 81       	ldd	r23, Y+5	; 0x05
    3bfc:	46 87       	std	Z+14, r20	; 0x0e
    3bfe:	57 87       	std	Z+15, r21	; 0x0f
    3c00:	60 8b       	std	Z+16, r22	; 0x10
    3c02:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3c04:	40 0f       	add	r20, r16
    3c06:	51 1f       	adc	r21, r17
    3c08:	62 1f       	adc	r22, r18
    3c0a:	73 1f       	adc	r23, r19
    3c0c:	68 01       	movw	r12, r16
    3c0e:	79 01       	movw	r14, r18
    3c10:	c5 01       	movw	r24, r10
    3c12:	42 dd       	rcall	.-1404   	; 0x3698 <prvInsertTimerInActiveList>
                        break;
    3c14:	0a c0       	rjmp	.+20     	; 0x3c2a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3c16:	f5 01       	movw	r30, r10
    3c18:	86 89       	ldd	r24, Z+22	; 0x16
    3c1a:	81 fd       	sbrc	r24, 1
    3c1c:	04 c0       	rjmp	.+8      	; 0x3c26 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3c1e:	c5 01       	movw	r24, r10
    3c20:	0e 94 0c 06 	call	0xc18	; 0xc18 <vPortFree>
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c26:	8e 7f       	andi	r24, 0xFE	; 254
    3c28:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	a9 01       	movw	r20, r18
    3c30:	be 01       	movw	r22, r28
    3c32:	6f 5f       	subi	r22, 0xFF	; 255
    3c34:	7f 4f       	sbci	r23, 0xFF	; 255
    3c36:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <xTimerQueue>
    3c3a:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <xTimerQueue+0x1>
    3c3e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <xQueueReceive>
    3c42:	81 11       	cpse	r24, r1
    3c44:	70 cf       	rjmp	.-288    	; 0x3b26 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3c46:	28 96       	adiw	r28, 0x08	; 8
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	de bf       	out	0x3e, r29	; 62
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	df 90       	pop	r13
    3c60:	cf 90       	pop	r12
    3c62:	bf 90       	pop	r11
    3c64:	af 90       	pop	r10
    3c66:	08 95       	ret

00003c68 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3c68:	08 95       	ret

00003c6a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3c6a:	84 b1       	in	r24, 0x04	; 4
    3c6c:	80 68       	ori	r24, 0x80	; 128
    3c6e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3c70:	85 b1       	in	r24, 0x05	; 5
    3c72:	80 68       	ori	r24, 0x80	; 128
    3c74:	85 b9       	out	0x05, r24	; 5
    3c76:	08 95       	ret

00003c78 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3c78:	83 b1       	in	r24, 0x03	; 3
    3c7a:	80 68       	ori	r24, 0x80	; 128
    3c7c:	83 b9       	out	0x03, r24	; 3
    3c7e:	08 95       	ret

00003c80 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3c80:	f4 df       	rcall	.-24     	; 0x3c6a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c82:	2f ef       	ldi	r18, 0xFF	; 255
    3c84:	80 e7       	ldi	r24, 0x70	; 112
    3c86:	92 e0       	ldi	r25, 0x02	; 2
    3c88:	21 50       	subi	r18, 0x01	; 1
    3c8a:	80 40       	sbci	r24, 0x00	; 0
    3c8c:	90 40       	sbci	r25, 0x00	; 0
    3c8e:	e1 f7       	brne	.-8      	; 0x3c88 <vApplicationMallocFailedHook+0x8>
    3c90:	00 c0       	rjmp	.+0      	; 0x3c92 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3c92:	00 00       	nop
    3c94:	f1 df       	rcall	.-30     	; 0x3c78 <prvBlinkMainLed>
    3c96:	f5 cf       	rjmp	.-22     	; 0x3c82 <vApplicationMallocFailedHook+0x2>

00003c98 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3c98:	e8 df       	rcall	.-48     	; 0x3c6a <prvSetMainLedOn>
    3c9a:	2f ef       	ldi	r18, 0xFF	; 255
    3c9c:	87 ea       	ldi	r24, 0xA7	; 167
    3c9e:	91 e6       	ldi	r25, 0x61	; 97
    3ca0:	21 50       	subi	r18, 0x01	; 1
    3ca2:	80 40       	sbci	r24, 0x00	; 0
    3ca4:	90 40       	sbci	r25, 0x00	; 0
    3ca6:	e1 f7       	brne	.-8      	; 0x3ca0 <vApplicationStackOverflowHook+0x8>
    3ca8:	00 c0       	rjmp	.+0      	; 0x3caa <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3caa:	00 00       	nop
    3cac:	e5 df       	rcall	.-54     	; 0x3c78 <prvBlinkMainLed>
    3cae:	f5 cf       	rjmp	.-22     	; 0x3c9a <vApplicationStackOverflowHook+0x2>

00003cb0 <conditioner_controller_create>:
uint16_t max_humidity;
uint16_t actuator;


void conditioner_controller_create(UBaseType_t priority)
{
    3cb0:	ef 92       	push	r14
    3cb2:	ff 92       	push	r15
    3cb4:	0f 93       	push	r16
	actuator=0;
    3cb6:	10 92 ac 18 	sts	0x18AC, r1	; 0x8018ac <actuator+0x1>
    3cba:	10 92 ab 18 	sts	0x18AB, r1	; 0x8018ab <actuator>
	xTaskCreate(
    3cbe:	e1 2c       	mov	r14, r1
    3cc0:	f1 2c       	mov	r15, r1
    3cc2:	08 2f       	mov	r16, r24
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	48 e8       	ldi	r20, 0x88	; 136
    3cca:	51 e0       	ldi	r21, 0x01	; 1
    3ccc:	63 e8       	ldi	r22, 0x83	; 131
    3cce:	73 e0       	ldi	r23, 0x03	; 3
    3cd0:	8c ef       	ldi	r24, 0xFC	; 252
    3cd2:	9e e1       	ldi	r25, 0x1E	; 30
    3cd4:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
	configMINIMAL_STACK_SIZE+200,
	NULL,
	priority,
	NULL );
	
}
    3cd8:	0f 91       	pop	r16
    3cda:	ff 90       	pop	r15
    3cdc:	ef 90       	pop	r14
    3cde:	08 95       	ret

00003ce0 <Conditioner_task>:
	}
}

void Conditioner_task()
{
	vTaskDelay(6000);
    3ce0:	60 e7       	ldi	r22, 0x70	; 112
    3ce2:	77 e1       	ldi	r23, 0x17	; 23
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
	current_humiditiy=get_humidity_data();
    3cec:	05 d1       	rcall	.+522    	; 0x3ef8 <get_humidity_data>
    3cee:	90 93 a4 18 	sts	0x18A4, r25	; 0x8018a4 <current_humiditiy+0x1>
    3cf2:	80 93 a3 18 	sts	0x18A3, r24	; 0x8018a3 <current_humiditiy>
	current_temperature=get_temperature_data();
    3cf6:	f5 d0       	rcall	.+490    	; 0x3ee2 <get_temperature_data>
    3cf8:	90 93 a8 18 	sts	0x18A8, r25	; 0x8018a8 <current_temperature+0x1>
    3cfc:	80 93 a7 18 	sts	0x18A7, r24	; 0x8018a7 <current_temperature>
    3d00:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Configuration_GetMinHumidity>
	min_humidity=Configuration_GetMinHumidity();
    3d04:	90 93 aa 18 	sts	0x18AA, r25	; 0x8018aa <min_humidity+0x1>
    3d08:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <min_humidity>
    3d0c:	0e 94 cb 02 	call	0x596	; 0x596 <Configuration_GetMaxHumidity>
	max_humidity=Configuration_GetMaxHumidity();
    3d10:	90 93 a2 18 	sts	0x18A2, r25	; 0x8018a2 <max_humidity+0x1>
    3d14:	80 93 a1 18 	sts	0x18A1, r24	; 0x8018a1 <max_humidity>
    3d18:	0e 94 c6 02 	call	0x58c	; 0x58c <Configuration_GetMinTemperature>
	min_temperature=Configuration_GetMinTemperature();
    3d1c:	90 93 a6 18 	sts	0x18A6, r25	; 0x8018a6 <min_temperature+0x1>
    3d20:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <min_temperature>
    3d24:	0e 94 c1 02 	call	0x582	; 0x582 <Configuration_GetMaxTemperature>
	max_temperature=Configuration_GetMaxTemperature();
    3d28:	90 93 ae 18 	sts	0x18AE, r25	; 0x8018ae <max_temperature+0x1>
    3d2c:	80 93 ad 18 	sts	0x18AD, r24	; 0x8018ad <max_temperature>
    3d30:	40 91 a9 18 	lds	r20, 0x18A9	; 0x8018a9 <min_humidity>
	
	uint16_t temp=min_humidity+max_humidity+min_temperature+max_temperature;
    3d34:	50 91 aa 18 	lds	r21, 0x18AA	; 0x8018aa <min_humidity+0x1>
    3d38:	60 91 a1 18 	lds	r22, 0x18A1	; 0x8018a1 <max_humidity>
    3d3c:	70 91 a2 18 	lds	r23, 0x18A2	; 0x8018a2 <max_humidity+0x1>
    3d40:	9a 01       	movw	r18, r20
    3d42:	26 0f       	add	r18, r22
    3d44:	37 1f       	adc	r19, r23
    3d46:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <min_temperature>
    3d4a:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <min_temperature+0x1>
    3d4e:	2e 0f       	add	r18, r30
    3d50:	3f 1f       	adc	r19, r31
    3d52:	28 0f       	add	r18, r24
    3d54:	39 1f       	adc	r19, r25
    3d56:	21 15       	cp	r18, r1
	
	if (temp!=0 && ((current_humiditiy<min_humidity ) || (current_temperature<min_temperature )))
    3d58:	31 05       	cpc	r19, r1
    3d5a:	31 f1       	breq	.+76     	; 0x3da8 <Conditioner_task+0xc8>
    3d5c:	a0 91 a3 18 	lds	r26, 0x18A3	; 0x8018a3 <current_humiditiy>
    3d60:	b0 91 a4 18 	lds	r27, 0x18A4	; 0x8018a4 <current_humiditiy+0x1>
    3d64:	a4 17       	cp	r26, r20
    3d66:	b5 07       	cpc	r27, r21
    3d68:	38 f0       	brcs	.+14     	; 0x3d78 <Conditioner_task+0x98>
    3d6a:	40 91 a7 18 	lds	r20, 0x18A7	; 0x8018a7 <current_temperature>
    3d6e:	50 91 a8 18 	lds	r21, 0x18A8	; 0x8018a8 <current_temperature+0x1>
    3d72:	4e 17       	cp	r20, r30
    3d74:	5f 07       	cpc	r21, r31
    3d76:	c0 f4       	brcc	.+48     	; 0x3da8 <Conditioner_task+0xc8>
    3d78:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <actuator>
	{
		
		actuator+=100;
    3d7c:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <actuator+0x1>
    3d80:	8c 59       	subi	r24, 0x9C	; 156
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	90 93 ac 18 	sts	0x18AC, r25	; 0x8018ac <actuator+0x1>
    3d88:	80 93 ab 18 	sts	0x18AB, r24	; 0x8018ab <actuator>
    3d8c:	89 e9       	ldi	r24, 0x99	; 153
		printf("MOVING");
    3d8e:	93 e0       	ldi	r25, 0x03	; 3
    3d90:	9f 93       	push	r25
    3d92:	8f 93       	push	r24
    3d94:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    3d98:	60 91 ab 18 	lds	r22, 0x18AB	; 0x8018ab <actuator>
		rc_servo_setPosition((uint8_t)0,actuator);
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <rc_servo_setPosition>
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	08 95       	ret
    3da8:	23 2b       	or	r18, r19
	}
	else if (temp!=0 && ((current_humiditiy>max_humidity) || (current_temperature>max_temperature)))
    3daa:	29 f1       	breq	.+74     	; 0x3df6 <Conditioner_task+0x116>
    3dac:	20 91 a3 18 	lds	r18, 0x18A3	; 0x8018a3 <current_humiditiy>
    3db0:	30 91 a4 18 	lds	r19, 0x18A4	; 0x8018a4 <current_humiditiy+0x1>
    3db4:	62 17       	cp	r22, r18
    3db6:	73 07       	cpc	r23, r19
    3db8:	38 f0       	brcs	.+14     	; 0x3dc8 <Conditioner_task+0xe8>
    3dba:	20 91 a7 18 	lds	r18, 0x18A7	; 0x8018a7 <current_temperature>
    3dbe:	30 91 a8 18 	lds	r19, 0x18A8	; 0x8018a8 <current_temperature+0x1>
    3dc2:	82 17       	cp	r24, r18
    3dc4:	93 07       	cpc	r25, r19
    3dc6:	b8 f4       	brcc	.+46     	; 0x3df6 <Conditioner_task+0x116>
    3dc8:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <actuator>
	{
		actuator-=100;
    3dcc:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <actuator+0x1>
    3dd0:	84 56       	subi	r24, 0x64	; 100
    3dd2:	91 09       	sbc	r25, r1
    3dd4:	90 93 ac 18 	sts	0x18AC, r25	; 0x8018ac <actuator+0x1>
    3dd8:	80 93 ab 18 	sts	0x18AB, r24	; 0x8018ab <actuator>
    3ddc:	89 e9       	ldi	r24, 0x99	; 153
		printf("MOVING");
    3dde:	93 e0       	ldi	r25, 0x03	; 3
    3de0:	9f 93       	push	r25
    3de2:	8f 93       	push	r24
    3de4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    3de8:	60 91 ab 18 	lds	r22, 0x18AB	; 0x8018ab <actuator>
		rc_servo_setPosition((uint8_t)0,actuator);
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <rc_servo_setPosition>
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	08 95       	ret

00003df8 <Conditioner_Task_Run>:
    3df8:	73 df       	rcall	.-282    	; 0x3ce0 <Conditioner_task>
void Conditioner_Task_Run(void* pvParameters)
{	
	(void)pvParameters;
	for (;;)
	{
		Conditioner_task();
    3dfa:	fe cf       	rjmp	.-4      	; 0x3df8 <Conditioner_Task_Run>

00003dfc <create_message_buffer>:
 #include <lora_driver.h>
 const size_t xMessageBufferSizeBytes = 100;
 
 void create_message_buffer()
 {
	 xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3dfc:	41 e0       	ldi	r20, 0x01	; 1
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	84 e6       	ldi	r24, 0x64	; 100
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferGenericCreate>
    3e0a:	90 93 6b 18 	sts	0x186B, r25	; 0x80186b <xMessageBuffer+0x1>
    3e0e:	80 93 6a 18 	sts	0x186A, r24	; 0x80186a <xMessageBuffer>
	 downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);;
    3e12:	41 e0       	ldi	r20, 0x01	; 1
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	70 e0       	ldi	r23, 0x00	; 0
    3e18:	8c e2       	ldi	r24, 0x2C	; 44
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferGenericCreate>
    3e20:	90 93 6f 18 	sts	0x186F, r25	; 0x80186f <downlinkMessageBuffer+0x1>
    3e24:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <downlinkMessageBuffer>
    3e28:	08 95       	ret

00003e2a <create_mutex>:
	 
 }
 
 void create_mutex()
 {
	 mutex = xSemaphoreCreateMutex();
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <xQueueCreateMutex>
    3e30:	90 93 71 18 	sts	0x1871, r25	; 0x801871 <mutex+0x1>
    3e34:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <mutex>
    3e38:	08 95       	ret

00003e3a <create_event_groups>:
 }
 
void create_event_groups()
{
	_meassureEventGroup=xEventGroupCreate();
    3e3a:	0e 94 af 03 	call	0x75e	; 0x75e <xEventGroupCreate>
    3e3e:	90 93 6d 18 	sts	0x186D, r25	; 0x80186d <_meassureEventGroup+0x1>
    3e42:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <_meassureEventGroup>
	_dataReadyEventGroup=xEventGroupCreate();
    3e46:	0e 94 af 03 	call	0x75e	; 0x75e <xEventGroupCreate>
    3e4a:	90 93 8d 18 	sts	0x188D, r25	; 0x80188d <_dataReadyEventGroup+0x1>
    3e4e:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <_dataReadyEventGroup>
    3e52:	08 95       	ret

00003e54 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    3e54:	86 e0       	ldi	r24, 0x06	; 6
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 63 05 	call	0xac6	; 0xac6 <pvPortMalloc>
    3e5c:	90 93 b0 18 	sts	0x18B0, r25	; 0x8018b0 <packet+0x1>
    3e60:	80 93 af 18 	sts	0x18AF, r24	; 0x8018af <packet>
	
	if (NULL == packet){
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	11 f4       	brne	.+4      	; 0x3e6c <SensorDataPackage_create+0x18>
		return NULL;
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return packet;
}
    3e6c:	08 95       	ret

00003e6e <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3e6e:	e0 91 af 18 	lds	r30, 0x18AF	; 0x8018af <packet>
    3e72:	f0 91 b0 18 	lds	r31, 0x18B0	; 0x8018b0 <packet+0x1>
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	80 83       	st	Z, r24
    3e7a:	08 95       	ret

00003e7c <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3e7c:	e0 91 af 18 	lds	r30, 0x18AF	; 0x8018af <packet>
    3e80:	f0 91 b0 18 	lds	r31, 0x18B0	; 0x8018b0 <packet+0x1>
    3e84:	93 83       	std	Z+3, r25	; 0x03
    3e86:	82 83       	std	Z+2, r24	; 0x02
    3e88:	08 95       	ret

00003e8a <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	 
packet->humidityData=data;	
    3e8a:	e0 91 af 18 	lds	r30, 0x18AF	; 0x8018af <packet>
    3e8e:	f0 91 b0 18 	lds	r31, 0x18B0	; 0x8018b0 <packet+0x1>
    3e92:	95 83       	std	Z+5, r25	; 0x05
    3e94:	84 83       	std	Z+4, r24	; 0x04
    3e96:	08 95       	ret

00003e98 <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3e98:	e9 e0       	ldi	r30, 0x09	; 9
    3e9a:	f7 e1       	ldi	r31, 0x17	; 23
    3e9c:	26 e0       	ldi	r18, 0x06	; 6
    3e9e:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    3ea0:	60 83       	st	Z, r22
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3ea2:	a0 91 af 18 	lds	r26, 0x18AF	; 0x8018af <packet>
    3ea6:	b0 91 b0 18 	lds	r27, 0x18B0	; 0x8018b0 <packet+0x1>
    3eaa:	2c 91       	ld	r18, X
    3eac:	11 96       	adiw	r26, 0x01	; 1
    3eae:	3c 91       	ld	r19, X
    3eb0:	11 97       	sbiw	r26, 0x01	; 1
    3eb2:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3eb4:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3eb6:	12 96       	adiw	r26, 0x02	; 2
    3eb8:	2c 91       	ld	r18, X
    3eba:	12 97       	sbiw	r26, 0x02	; 2
    3ebc:	13 96       	adiw	r26, 0x03	; 3
    3ebe:	3c 91       	ld	r19, X
    3ec0:	13 97       	sbiw	r26, 0x03	; 3
    3ec2:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3ec4:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3ec6:	14 96       	adiw	r26, 0x04	; 4
    3ec8:	2c 91       	ld	r18, X
    3eca:	14 97       	sbiw	r26, 0x04	; 4
    3ecc:	15 96       	adiw	r26, 0x05	; 5
    3ece:	3c 91       	ld	r19, X
    3ed0:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3ed2:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    3ed4:	26 e1       	ldi	r18, 0x16	; 22
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	01 90       	ld	r0, Z+
    3eda:	0d 92       	st	X+, r0
    3edc:	2a 95       	dec	r18
    3ede:	e1 f7       	brne	.-8      	; 0x3ed8 <getLoRaPayload+0x40>
	}
    3ee0:	08 95       	ret

00003ee2 <get_temperature_data>:
}
//------Get temperature data-----------

uint16_t get_temperature_data()
{
	return (uint16_t)temperature;
    3ee2:	60 91 21 17 	lds	r22, 0x1721	; 0x801721 <temperature>
    3ee6:	70 91 22 17 	lds	r23, 0x1722	; 0x801722 <temperature+0x1>
    3eea:	80 91 23 17 	lds	r24, 0x1723	; 0x801723 <temperature+0x2>
    3eee:	90 91 24 17 	lds	r25, 0x1724	; 0x801724 <temperature+0x3>
    3ef2:	f1 d1       	rcall	.+994    	; 0x42d6 <__fixunssfsi>
}
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	08 95       	ret

00003ef8 <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
	return humidity;
}
    3ef8:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <humidity>
    3efc:	90 91 20 17 	lds	r25, 0x1720	; 0x801720 <humidity+0x1>
    3f00:	08 95       	ret

00003f02 <tempHum_taskCreate>:

void tempHum_taskCreate(UBaseType_t task_priority){
    3f02:	ef 92       	push	r14
    3f04:	ff 92       	push	r15
    3f06:	0f 93       	push	r16
	
	xTaskCreate(
    3f08:	e1 2c       	mov	r14, r1
    3f0a:	f1 2c       	mov	r15, r1
    3f0c:	08 2f       	mov	r16, r24
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	40 ec       	ldi	r20, 0xC0	; 192
    3f14:	50 e0       	ldi	r21, 0x00	; 0
    3f16:	60 ea       	ldi	r22, 0xA0	; 160
    3f18:	73 e0       	ldi	r23, 0x03	; 3
    3f1a:	88 e0       	ldi	r24, 0x08	; 8
    3f1c:	90 e2       	ldi	r25, 0x20	; 32
    3f1e:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  task_priority // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    3f22:	0f 91       	pop	r16
    3f24:	ff 90       	pop	r15
    3f26:	ef 90       	pop	r14
    3f28:	08 95       	ret

00003f2a <tempHum_Run>:


/* Task to run for the sensors to work */
void tempHum_Run() {
    3f2a:	cf 92       	push	r12
    3f2c:	df 92       	push	r13
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
	event_measure = xEventGroupWaitBits(
    3f34:	cc 24       	eor	r12, r12
    3f36:	ca 94       	dec	r12
    3f38:	dc 2c       	mov	r13, r12
    3f3a:	76 01       	movw	r14, r12
    3f3c:	01 e0       	ldi	r16, 0x01	; 1
    3f3e:	21 e0       	ldi	r18, 0x01	; 1
    3f40:	41 e0       	ldi	r20, 0x01	; 1
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_meassureEventGroup>
    3f4c:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_meassureEventGroup+0x1>
    3f50:	0e 94 c2 03 	call	0x784	; 0x784 <xEventGroupWaitBits>
    3f54:	60 93 b1 18 	sts	0x18B1, r22	; 0x8018b1 <event_measure>
    3f58:	70 93 b2 18 	sts	0x18B2, r23	; 0x8018b2 <event_measure+0x1>
    3f5c:	80 93 b3 18 	sts	0x18B3, r24	; 0x8018b3 <event_measure+0x2>
    3f60:	90 93 b4 18 	sts	0x18B4, r25	; 0x8018b4 <event_measure+0x3>
	TEMPERATURE_HUMIDITY_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
		
	if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    3f64:	60 ff       	sbrs	r22, 0
    3f66:	4e c0       	rjmp	.+156    	; 0x4004 <tempHum_Run+0xda>
	{
		vTaskDelay( pdMS_TO_TICKS(100UL));
    3f68:	66 e0       	ldi	r22, 0x06	; 6
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
		if (HIH8120_OK != hih8120_wakeup())
    3f74:	87 d2       	rcall	.+1294   	; 0x4484 <hih8120_wakeup>
    3f76:	88 23       	and	r24, r24
    3f78:	c1 f0       	breq	.+48     	; 0x3faa <tempHum_Run+0x80>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f7a:	66 e0       	ldi	r22, 0x06	; 6
    3f7c:	70 e0       	ldi	r23, 0x00	; 0
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    3f86:	85 eb       	ldi	r24, 0xB5	; 181
    3f88:	93 e0       	ldi	r25, 0x03	; 3
    3f8a:	9f 93       	push	r25
    3f8c:	8f 93       	push	r24
    3f8e:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	06 c0       	rjmp	.+12     	; 0x3fa4 <tempHum_Run+0x7a>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    3f98:	63 e0       	ldi	r22, 0x03	; 3
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
		vTaskDelay( pdMS_TO_TICKS(100UL));
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3fa4:	6f d2       	rcall	.+1246   	; 0x4484 <hih8120_wakeup>
    3fa6:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    3fa8:	b9 f3       	breq	.-18     	; 0x3f98 <tempHum_Run+0x6e>
    3faa:	81 d2       	rcall	.+1282   	; 0x44ae <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3fac:	63 e0       	ldi	r22, 0x03	; 3
    3fae:	70 e0       	ldi	r23, 0x00	; 0
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
		if (HIH8120_OK == hih8120_measure() )
    3fb8:	7a d2       	rcall	.+1268   	; 0x44ae <hih8120_measure>
    3fba:	81 11       	cpse	r24, r1
    3fbc:	23 c0       	rjmp	.+70     	; 0x4004 <tempHum_Run+0xda>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3fbe:	66 e0       	ldi	r22, 0x06	; 6
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
			humidity =  hih8120_getHumidityPercent_x10();
    3fca:	96 d2       	rcall	.+1324   	; 0x44f8 <hih8120_getHumidityPercent_x10>
    3fcc:	90 93 20 17 	sts	0x1720, r25	; 0x801720 <humidity+0x1>
    3fd0:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <humidity>
			temperature = hih8120_getTemperature_x10();
    3fd4:	b5 d2       	rcall	.+1386   	; 0x4540 <hih8120_getTemperature_x10>
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	99 0f       	add	r25, r25
    3fda:	88 0b       	sbc	r24, r24
    3fdc:	99 0b       	sbc	r25, r25
    3fde:	a9 d1       	rcall	.+850    	; 0x4332 <__floatsisf>
    3fe0:	60 93 21 17 	sts	0x1721, r22	; 0x801721 <temperature>
    3fe4:	70 93 22 17 	sts	0x1722, r23	; 0x801722 <temperature+0x1>
    3fe8:	80 93 23 17 	sts	0x1723, r24	; 0x801723 <temperature+0x2>
    3fec:	90 93 24 17 	sts	0x1724, r25	; 0x801724 <temperature+0x3>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3ff0:	42 e0       	ldi	r20, 0x02	; 2
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	70 e0       	ldi	r23, 0x00	; 0
    3ff8:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <_dataReadyEventGroup>
    3ffc:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <_dataReadyEventGroup+0x1>
    4000:	0e 94 62 04 	call	0x8c4	; 0x8c4 <xEventGroupSetBits>
		}
	}
}
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	df 90       	pop	r13
    400c:	cf 90       	pop	r12
    400e:	08 95       	ret

00004010 <tempHum_Task>:
void tempHum_Task( void *pvParameters )
{
	(void)pvParameters;
	for(;;)
	{
		tempHum_Run();
    4010:	8c df       	rcall	.-232    	; 0x3f2a <tempHum_Run>
    4012:	fe cf       	rjmp	.-4      	; 0x4010 <tempHum_Task>

00004014 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	64 97       	sbiw	r28, 0x14	; 20
    4022:	0f b6       	in	r0, 0x3f	; 63
    4024:	f8 94       	cli
    4026:	de bf       	out	0x3e, r29	; 62
    4028:	0f be       	out	0x3f, r0	; 63
    402a:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    4032:	fe d3       	rcall	.+2044   	; 0x4830 <lora_driver_rn2483FactoryReset>
    4034:	7a d6       	rcall	.+3316   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    4036:	9f 93       	push	r25
    4038:	8f 93       	push	r24
    403a:	8f ee       	ldi	r24, 0xEF	; 239
    403c:	93 e0       	ldi	r25, 0x03	; 3
    403e:	9f 93       	push	r25
    4040:	8f 93       	push	r24
    4042:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    4046:	72 d5       	rcall	.+2788   	; 0x4b2c <lora_driver_configureToEu868>
    4048:	70 d6       	rcall	.+3296   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    404a:	9f 93       	push	r25
    404c:	8f 93       	push	r24
    404e:	82 e0       	ldi	r24, 0x02	; 2
    4050:	94 e0       	ldi	r25, 0x04	; 4
    4052:	9f 93       	push	r25
    4054:	8f 93       	push	r24
    4056:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    405a:	8b e1       	ldi	r24, 0x1B	; 27
    405c:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join1");
    405e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
    4062:	8e 01       	movw	r16, r28
    4064:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    4066:	1f 4f       	sbci	r17, 0xFF	; 255
    4068:	c8 01       	movw	r24, r16
    406a:	f4 d3       	rcall	.+2024   	; 0x4854 <lora_driver_getRn2483Hweui>
    406c:	5e d6       	rcall	.+3260   	; 0x4d2a <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    406e:	1f 93       	push	r17
    4070:	0f 93       	push	r16
    4072:	9f 93       	push	r25
    4074:	8f 93       	push	r24
    4076:	88 e2       	ldi	r24, 0x28	; 40
    4078:	94 e0       	ldi	r25, 0x04	; 4
    407a:	9f 93       	push	r25
    407c:	8f 93       	push	r24
    407e:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    4082:	c8 01       	movw	r24, r16
    4084:	03 d4       	rcall	.+2054   	; 0x488c <lora_driver_setDeviceIdentifier>
    4086:	51 d6       	rcall	.+3234   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    4088:	9f 93       	push	r25
    408a:	8f 93       	push	r24
    408c:	1f 93       	push	r17
    408e:	0f 93       	push	r16
    4090:	8c e3       	ldi	r24, 0x3C	; 60
    4092:	94 e0       	ldi	r25, 0x04	; 4
    4094:	9f 93       	push	r25
    4096:	8f 93       	push	r24
    4098:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    409c:	81 e5       	ldi	r24, 0x51	; 81
    409e:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join2");
    40a0:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    40a4:	a8 01       	movw	r20, r16
    40a6:	6e e5       	ldi	r22, 0x5E	; 94
    40a8:	74 e0       	ldi	r23, 0x04	; 4
    40aa:	8f e7       	ldi	r24, 0x7F	; 127
    40ac:	94 e0       	ldi	r25, 0x04	; 4
    40ae:	1c d6       	rcall	.+3128   	; 0x4ce8 <lora_driver_setOtaaIdentity>
    40b0:	3c d6       	rcall	.+3192   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    40b2:	9f 93       	push	r25
    40b4:	8f 93       	push	r24
    40b6:	1f 93       	push	r17
    40b8:	0f 93       	push	r16
    40ba:	8e e5       	ldi	r24, 0x5E	; 94
    40bc:	94 e0       	ldi	r25, 0x04	; 4
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	8f e7       	ldi	r24, 0x7F	; 127
    40c4:	94 e0       	ldi	r25, 0x04	; 4
    40c6:	9f 93       	push	r25
    40c8:	8f 93       	push	r24
    40ca:	80 e9       	ldi	r24, 0x90	; 144
    40cc:	94 e0       	ldi	r25, 0x04	; 4
    40ce:	9f 93       	push	r25
    40d0:	8f 93       	push	r24
    40d2:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    40d6:	0d d4       	rcall	.+2074   	; 0x48f2 <lora_driver_saveMac>
    40d8:	28 d6       	rcall	.+3152   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    40da:	9f 93       	push	r25
    40dc:	8f 93       	push	r24
    40de:	86 ec       	ldi	r24, 0xC6	; 198
    40e0:	94 e0       	ldi	r25, 0x04	; 4
    40e2:	9f 93       	push	r25
    40e4:	8f 93       	push	r24
    40e6:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	f7 d4       	rcall	.+2542   	; 0x4ae6 <lora_driver_setAdaptiveDataRate>
    40f8:	18 d6       	rcall	.+3120   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    40fa:	9f 93       	push	r25
    40fc:	8f 93       	push	r24
    40fe:	85 ed       	ldi	r24, 0xD5	; 213
    4100:	94 e0       	ldi	r25, 0x04	; 4
    4102:	9f 93       	push	r25
    4104:	8f 93       	push	r24
    4106:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
	puts("Try to join3");
    410a:	86 ef       	ldi	r24, 0xF6	; 246
    410c:	94 e0       	ldi	r25, 0x04	; 4
    410e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    4112:	84 ef       	ldi	r24, 0xF4	; 244
    4114:	91 e0       	ldi	r25, 0x01	; 1
    4116:	f2 d4       	rcall	.+2532   	; 0x4afc <lora_driver_setReceiveDelay>
    4118:	08 d6       	rcall	.+3088   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    411a:	9f 93       	push	r25
    411c:	8f 93       	push	r24
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	8f 93       	push	r24
    4122:	84 ef       	ldi	r24, 0xF4	; 244
    4124:	8f 93       	push	r24
    4126:	83 e0       	ldi	r24, 0x03	; 3
    4128:	95 e0       	ldi	r25, 0x05	; 5
    412a:	9f 93       	push	r25
    412c:	8f 93       	push	r24
    412e:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    413c:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	de d3       	rcall	.+1980   	; 0x48fe <lora_driver_join>
    4142:	08 2f       	mov	r16, r24
    4144:	f2 d5       	rcall	.+3044   	; 0x4d2a <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4146:	9f 93       	push	r25
    4148:	8f 93       	push	r24
    414a:	1f 92       	push	r1
    414c:	1f 93       	push	r17
    414e:	83 e2       	ldi	r24, 0x23	; 35
    4150:	95 e0       	ldi	r25, 0x05	; 5
    4152:	9f 93       	push	r25
    4154:	8f 93       	push	r24
    4156:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    415e:	0f 90       	pop	r0
    4160:	0f 90       	pop	r0
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	08 30       	cpi	r16, 0x08	; 8
    4168:	59 f0       	breq	.+22     	; 0x4180 <uplink_lora_setup+0x16c>
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4170:	66 e3       	ldi	r22, 0x36	; 54
    4172:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
    417c:	11 50       	subi	r17, 0x01	; 1
    417e:	f9 f6       	brne	.-66     	; 0x413e <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4180:	08 30       	cpi	r16, 0x08	; 8
    4182:	21 f4       	brne	.+8      	; 0x418c <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    418a:	0d c0       	rjmp	.+26     	; 0x41a6 <uplink_lora_setup+0x192>
    418c:	83 e4       	ldi	r24, 0x43	; 67
		while (1)
		{
			taskYIELD();
		}
	}
}
    418e:	95 e0       	ldi	r25, 0x05	; 5
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    4190:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    41a0:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    41a4:	fd cf       	rjmp	.-6      	; 0x41a0 <uplink_lora_setup+0x18c>
    41a6:	64 96       	adiw	r28, 0x14	; 20
    41a8:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	df 91       	pop	r29
    41b4:	cf 91       	pop	r28
    41b6:	1f 91       	pop	r17
    41b8:	0f 91       	pop	r16
    41ba:	08 95       	ret

000041bc <upLink_create>:
    41bc:	ef 92       	push	r14
    41be:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority)
{
    41c0:	0f 93       	push	r16
	
	
	xTaskCreate(
    41c2:	20 91 6a 18 	lds	r18, 0x186A	; 0x80186a <xMessageBuffer>
    41c6:	30 91 6b 18 	lds	r19, 0x186B	; 0x80186b <xMessageBuffer+0x1>
    41ca:	e1 2c       	mov	r14, r1
    41cc:	f1 2c       	mov	r15, r1
    41ce:	08 2f       	mov	r16, r24
    41d0:	48 e8       	ldi	r20, 0x88	; 136
    41d2:	51 e0       	ldi	r21, 0x01	; 1
    41d4:	6e e4       	ldi	r22, 0x4E	; 78
    41d6:	75 e0       	ldi	r23, 0x05	; 5
    41d8:	82 e3       	ldi	r24, 0x32	; 50
    41da:	91 e2       	ldi	r25, 0x21	; 33
    41dc:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)xMessageBuffer,
	priority,
	NULL );
}
    41e0:	0f 91       	pop	r16
    41e2:	ff 90       	pop	r15
    41e4:	ef 90       	pop	r14
    41e6:	08 95       	ret

000041e8 <send>:
		send(xBytesSent);

	}
}

void send(size_t xBytesSent){
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
	
	xBytesSent = xMessageBufferReceive(
    41ec:	0f ef       	ldi	r16, 0xFF	; 255
    41ee:	1f ef       	ldi	r17, 0xFF	; 255
    41f0:	98 01       	movw	r18, r16
    41f2:	46 e1       	ldi	r20, 0x16	; 22
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	65 e2       	ldi	r22, 0x25	; 37
    41f8:	77 e1       	ldi	r23, 0x17	; 23
    41fa:	80 91 6a 18 	lds	r24, 0x186A	; 0x80186a <xMessageBuffer>
    41fe:	90 91 6b 18 	lds	r25, 0x186B	; 0x80186b <xMessageBuffer+0x1>
    4202:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(_uplink_payload),	// Size of object
	portMAX_DELAY);

	
	if (xBytesSent>0)
    4206:	89 2b       	or	r24, r25
    4208:	a1 f0       	breq	.+40     	; 0x4232 <send+0x4a>
	{
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4210:	65 e2       	ldi	r22, 0x25	; 37
    4212:	77 e1       	ldi	r23, 0x17	; 23
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	9c d3       	rcall	.+1848   	; 0x4950 <lora_driver_sendUploadMessage>
    4218:	88 d5       	rcall	.+2832   	; 0x4d2a <lora_driver_mapReturnCodeToText>
    421a:	9f 93       	push	r25
    421c:	8f 93       	push	r24
    421e:	89 e5       	ldi	r24, 0x59	; 89
    4220:	95 e0       	ldi	r25, 0x05	; 5
    4222:	9f 93       	push	r25
    4224:	8f 93       	push	r24
    4226:	0e 94 60 32 	call	0x64c0	; 0x64c0 <printf>
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
	}
}
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	08 95       	ret

00004238 <lora_Handler_task>:


void lora_Handler_task()
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	ec d2       	rcall	.+1496   	; 0x4814 <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    423c:	62 e0       	ldi	r22, 0x02	; 2
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
	lora_driver_resetRn2483(0);
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	e4 d2       	rcall	.+1480   	; 0x4814 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    424c:	66 e9       	ldi	r22, 0x96	; 150
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4258:	96 d2       	rcall	.+1324   	; 0x4786 <lora_driver_flushBuffers>
	uplink_lora_setup();
    425a:	dc de       	rcall	.-584    	; 0x4014 <uplink_lora_setup>
	size_t xBytesSent;
	
	for(;;)
	{
		send(xBytesSent);
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	c3 df       	rcall	.-122    	; 0x41e8 <send>
    4262:	fc cf       	rjmp	.-8      	; 0x425c <lora_Handler_task+0x24>

00004264 <upLinkHandler_StartTask>:
    4264:	e9 df       	rcall	.-46     	; 0x4238 <lora_Handler_task>

00004266 <create_tasks>:
extern MessageBufferHandle_t downlinkMessageBuffer;

void create_tasks()
{
	
	application_task_create(3);
    4266:	83 e0       	ldi	r24, 0x03	; 3
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 08 01 	call	0x210	; 0x210 <application_task_create>
	co2_task_create(1);
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <co2_task_create>
	tempHum_taskCreate(1);
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	45 de       	rcall	.-886    	; 0x3f02 <tempHum_taskCreate>
	//ToDo maybe to move inside the application task
	SensorDataPackage_create();
    4278:	ed dd       	rcall	.-1062   	; 0x3e54 <SensorDataPackage_create>
	conditioner_controller_create(4);
    427a:	84 e0       	ldi	r24, 0x04	; 4
    427c:	19 cd       	rjmp	.-1486   	; 0x3cb0 <conditioner_controller_create>
    427e:	08 95       	ret

00004280 <drivers_initialisation>:
    4280:	e9 d0       	rcall	.+466    	; 0x4454 <hih8120_initialise>

void drivers_initialisation()
{
	
	  hih8120_initialise();
	  mh_z19_initialise(ser_USART3);
    4282:	83 e0       	ldi	r24, 0x03	; 3
	  rc_servo_initialise();
    4284:	2e d6       	rcall	.+3164   	; 0x4ee2 <mh_z19_initialise>
    4286:	9e c6       	rjmp	.+3388   	; 0x4fc4 <rc_servo_initialise>
    4288:	08 95       	ret

0000428a <createUtility>:
}

void createUtility()
{
	create_event_groups();
    428a:	d7 dd       	rcall	.-1106   	; 0x3e3a <create_event_groups>
	create_message_buffer();
    428c:	b7 dd       	rcall	.-1170   	; 0x3dfc <create_message_buffer>
	create_mutex();
    428e:	cd cd       	rjmp	.-1126   	; 0x3e2a <create_mutex>
    4290:	08 95       	ret

00004292 <initialiseSystem>:
    4292:	81 b1       	in	r24, 0x01	; 1
}

void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    4294:	81 68       	ori	r24, 0x81	; 129
    4296:	81 b9       	out	0x01, r24	; 1
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	0e 94 b5 2b 	call	0x576a	; 0x576a <stdio_initialise>
	
	drivers_initialisation();
    429e:	f0 df       	rcall	.-32     	; 0x4280 <drivers_initialisation>
	
	create_tasks();
    42a0:	e2 df       	rcall	.-60     	; 0x4266 <create_tasks>
    42a2:	85 e0       	ldi	r24, 0x05	; 5
	status_leds_initialise(5); // Priority 5 for internal task
    42a4:	0e 94 bc 2c 	call	0x5978	; 0x5978 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	createUtility();
    42a8:	f0 df       	rcall	.-32     	; 0x428a <createUtility>
    42aa:	60 91 6e 18 	lds	r22, 0x186E	; 0x80186e <downlinkMessageBuffer>
	lora_driver_initialise(1, downlinkMessageBuffer);
    42ae:	70 91 6f 18 	lds	r23, 0x186F	; 0x80186f <downlinkMessageBuffer+0x1>
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	6f d2       	rcall	.+1246   	; 0x4794 <lora_driver_initialise>
	// Create UpLinkTask and start it up with priority 4 and setup the LoRaWan
	upLink_create(4);
    42b6:	84 e0       	ldi	r24, 0x04	; 4
    42b8:	81 df       	rcall	.-254    	; 0x41bc <upLink_create>
    42ba:	85 e0       	ldi	r24, 0x05	; 5
	
	// Create DownlinkTask and start it up with priority 5
	lora_DownLinkHandler_create(5);
    42bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <lora_DownLinkHandler_create>
    42c0:	08 95       	ret

000042c2 <main>:
    42c2:	e7 df       	rcall	.-50     	; 0x4292 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	//printf("Program Started!!\n");
	printf("Program started \n");
    42c4:	8e e6       	ldi	r24, 0x6E	; 110
    42c6:	95 e0       	ldi	r25, 0x05	; 5
    42c8:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    42cc:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskStartScheduler>
	/* Replace with your application code */
	
}
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	08 95       	ret

000042d6 <__fixunssfsi>:
    42d6:	70 d0       	rcall	.+224    	; 0x43b8 <__fp_splitA>
    42d8:	88 f0       	brcs	.+34     	; 0x42fc <__fixunssfsi+0x26>
    42da:	9f 57       	subi	r25, 0x7F	; 127
    42dc:	90 f0       	brcs	.+36     	; 0x4302 <__fixunssfsi+0x2c>
    42de:	b9 2f       	mov	r27, r25
    42e0:	99 27       	eor	r25, r25
    42e2:	b7 51       	subi	r27, 0x17	; 23
    42e4:	a0 f0       	brcs	.+40     	; 0x430e <__fixunssfsi+0x38>
    42e6:	d1 f0       	breq	.+52     	; 0x431c <__fixunssfsi+0x46>
    42e8:	66 0f       	add	r22, r22
    42ea:	77 1f       	adc	r23, r23
    42ec:	88 1f       	adc	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	1a f0       	brmi	.+6      	; 0x42f8 <__fixunssfsi+0x22>
    42f2:	ba 95       	dec	r27
    42f4:	c9 f7       	brne	.-14     	; 0x42e8 <__fixunssfsi+0x12>
    42f6:	12 c0       	rjmp	.+36     	; 0x431c <__fixunssfsi+0x46>
    42f8:	b1 30       	cpi	r27, 0x01	; 1
    42fa:	81 f0       	breq	.+32     	; 0x431c <__fixunssfsi+0x46>
    42fc:	77 d0       	rcall	.+238    	; 0x43ec <__fp_zero>
    42fe:	b1 e0       	ldi	r27, 0x01	; 1
    4300:	08 95       	ret
    4302:	74 c0       	rjmp	.+232    	; 0x43ec <__fp_zero>
    4304:	67 2f       	mov	r22, r23
    4306:	78 2f       	mov	r23, r24
    4308:	88 27       	eor	r24, r24
    430a:	b8 5f       	subi	r27, 0xF8	; 248
    430c:	39 f0       	breq	.+14     	; 0x431c <__fixunssfsi+0x46>
    430e:	b9 3f       	cpi	r27, 0xF9	; 249
    4310:	cc f3       	brlt	.-14     	; 0x4304 <__fixunssfsi+0x2e>
    4312:	86 95       	lsr	r24
    4314:	77 95       	ror	r23
    4316:	67 95       	ror	r22
    4318:	b3 95       	inc	r27
    431a:	d9 f7       	brne	.-10     	; 0x4312 <__fixunssfsi+0x3c>
    431c:	3e f4       	brtc	.+14     	; 0x432c <__fixunssfsi+0x56>
    431e:	90 95       	com	r25
    4320:	80 95       	com	r24
    4322:	70 95       	com	r23
    4324:	61 95       	neg	r22
    4326:	7f 4f       	sbci	r23, 0xFF	; 255
    4328:	8f 4f       	sbci	r24, 0xFF	; 255
    432a:	9f 4f       	sbci	r25, 0xFF	; 255
    432c:	08 95       	ret

0000432e <__floatunsisf>:
    432e:	e8 94       	clt
    4330:	09 c0       	rjmp	.+18     	; 0x4344 <__floatsisf+0x12>

00004332 <__floatsisf>:
    4332:	97 fb       	bst	r25, 7
    4334:	3e f4       	brtc	.+14     	; 0x4344 <__floatsisf+0x12>
    4336:	90 95       	com	r25
    4338:	80 95       	com	r24
    433a:	70 95       	com	r23
    433c:	61 95       	neg	r22
    433e:	7f 4f       	sbci	r23, 0xFF	; 255
    4340:	8f 4f       	sbci	r24, 0xFF	; 255
    4342:	9f 4f       	sbci	r25, 0xFF	; 255
    4344:	99 23       	and	r25, r25
    4346:	a9 f0       	breq	.+42     	; 0x4372 <__floatsisf+0x40>
    4348:	f9 2f       	mov	r31, r25
    434a:	96 e9       	ldi	r25, 0x96	; 150
    434c:	bb 27       	eor	r27, r27
    434e:	93 95       	inc	r25
    4350:	f6 95       	lsr	r31
    4352:	87 95       	ror	r24
    4354:	77 95       	ror	r23
    4356:	67 95       	ror	r22
    4358:	b7 95       	ror	r27
    435a:	f1 11       	cpse	r31, r1
    435c:	f8 cf       	rjmp	.-16     	; 0x434e <__floatsisf+0x1c>
    435e:	fa f4       	brpl	.+62     	; 0x439e <__floatsisf+0x6c>
    4360:	bb 0f       	add	r27, r27
    4362:	11 f4       	brne	.+4      	; 0x4368 <__floatsisf+0x36>
    4364:	60 ff       	sbrs	r22, 0
    4366:	1b c0       	rjmp	.+54     	; 0x439e <__floatsisf+0x6c>
    4368:	6f 5f       	subi	r22, 0xFF	; 255
    436a:	7f 4f       	sbci	r23, 0xFF	; 255
    436c:	8f 4f       	sbci	r24, 0xFF	; 255
    436e:	9f 4f       	sbci	r25, 0xFF	; 255
    4370:	16 c0       	rjmp	.+44     	; 0x439e <__floatsisf+0x6c>
    4372:	88 23       	and	r24, r24
    4374:	11 f0       	breq	.+4      	; 0x437a <__floatsisf+0x48>
    4376:	96 e9       	ldi	r25, 0x96	; 150
    4378:	11 c0       	rjmp	.+34     	; 0x439c <__floatsisf+0x6a>
    437a:	77 23       	and	r23, r23
    437c:	21 f0       	breq	.+8      	; 0x4386 <__floatsisf+0x54>
    437e:	9e e8       	ldi	r25, 0x8E	; 142
    4380:	87 2f       	mov	r24, r23
    4382:	76 2f       	mov	r23, r22
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <__floatsisf+0x5e>
    4386:	66 23       	and	r22, r22
    4388:	71 f0       	breq	.+28     	; 0x43a6 <__floatsisf+0x74>
    438a:	96 e8       	ldi	r25, 0x86	; 134
    438c:	86 2f       	mov	r24, r22
    438e:	70 e0       	ldi	r23, 0x00	; 0
    4390:	60 e0       	ldi	r22, 0x00	; 0
    4392:	2a f0       	brmi	.+10     	; 0x439e <__floatsisf+0x6c>
    4394:	9a 95       	dec	r25
    4396:	66 0f       	add	r22, r22
    4398:	77 1f       	adc	r23, r23
    439a:	88 1f       	adc	r24, r24
    439c:	da f7       	brpl	.-10     	; 0x4394 <__floatsisf+0x62>
    439e:	88 0f       	add	r24, r24
    43a0:	96 95       	lsr	r25
    43a2:	87 95       	ror	r24
    43a4:	97 f9       	bld	r25, 7
    43a6:	08 95       	ret

000043a8 <__fp_split3>:
    43a8:	57 fd       	sbrc	r21, 7
    43aa:	90 58       	subi	r25, 0x80	; 128
    43ac:	44 0f       	add	r20, r20
    43ae:	55 1f       	adc	r21, r21
    43b0:	59 f0       	breq	.+22     	; 0x43c8 <__fp_splitA+0x10>
    43b2:	5f 3f       	cpi	r21, 0xFF	; 255
    43b4:	71 f0       	breq	.+28     	; 0x43d2 <__fp_splitA+0x1a>
    43b6:	47 95       	ror	r20

000043b8 <__fp_splitA>:
    43b8:	88 0f       	add	r24, r24
    43ba:	97 fb       	bst	r25, 7
    43bc:	99 1f       	adc	r25, r25
    43be:	61 f0       	breq	.+24     	; 0x43d8 <__fp_splitA+0x20>
    43c0:	9f 3f       	cpi	r25, 0xFF	; 255
    43c2:	79 f0       	breq	.+30     	; 0x43e2 <__fp_splitA+0x2a>
    43c4:	87 95       	ror	r24
    43c6:	08 95       	ret
    43c8:	12 16       	cp	r1, r18
    43ca:	13 06       	cpc	r1, r19
    43cc:	14 06       	cpc	r1, r20
    43ce:	55 1f       	adc	r21, r21
    43d0:	f2 cf       	rjmp	.-28     	; 0x43b6 <__fp_split3+0xe>
    43d2:	46 95       	lsr	r20
    43d4:	f1 df       	rcall	.-30     	; 0x43b8 <__fp_splitA>
    43d6:	08 c0       	rjmp	.+16     	; 0x43e8 <__fp_splitA+0x30>
    43d8:	16 16       	cp	r1, r22
    43da:	17 06       	cpc	r1, r23
    43dc:	18 06       	cpc	r1, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	f1 cf       	rjmp	.-30     	; 0x43c4 <__fp_splitA+0xc>
    43e2:	86 95       	lsr	r24
    43e4:	71 05       	cpc	r23, r1
    43e6:	61 05       	cpc	r22, r1
    43e8:	08 94       	sec
    43ea:	08 95       	ret

000043ec <__fp_zero>:
    43ec:	e8 94       	clt

000043ee <__fp_szero>:
    43ee:	bb 27       	eor	r27, r27
    43f0:	66 27       	eor	r22, r22
    43f2:	77 27       	eor	r23, r23
    43f4:	cb 01       	movw	r24, r22
    43f6:	97 f9       	bld	r25, 7
    43f8:	08 95       	ret

000043fa <_hihTwiCallback>:
    43fa:	65 30       	cpi	r22, 0x05	; 5
    43fc:	f1 f4       	brne	.+60     	; 0x443a <_hihTwiCallback+0x40>
    43fe:	fa 01       	movw	r30, r20
    4400:	80 81       	ld	r24, Z
    4402:	8f 73       	andi	r24, 0x3F	; 63
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	98 2f       	mov	r25, r24
    4408:	88 27       	eor	r24, r24
    440a:	21 81       	ldd	r18, Z+1	; 0x01
    440c:	82 2b       	or	r24, r18
    440e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4412:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4416:	82 81       	ldd	r24, Z+2	; 0x02
    4418:	f0 e4       	ldi	r31, 0x40	; 64
    441a:	8f 9f       	mul	r24, r31
    441c:	c0 01       	movw	r24, r0
    441e:	11 24       	eor	r1, r1
    4420:	fa 01       	movw	r30, r20
    4422:	23 81       	ldd	r18, Z+3	; 0x03
    4424:	26 95       	lsr	r18
    4426:	26 95       	lsr	r18
    4428:	82 2b       	or	r24, r18
    442a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    442e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4432:	81 e0       	ldi	r24, 0x01	; 1
    4434:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <_measuringIsReady>
    4438:	08 95       	ret
    443a:	64 30       	cpi	r22, 0x04	; 4
    443c:	51 f0       	breq	.+20     	; 0x4452 <_hihTwiCallback+0x58>
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	90 e4       	ldi	r25, 0x40	; 64
    4442:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4446:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    444a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    444e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4452:	08 95       	ret

00004454 <hih8120_initialise>:
    4454:	0f 93       	push	r16
    4456:	1f 93       	push	r17
    4458:	0d ef       	ldi	r16, 0xFD	; 253
    445a:	11 e2       	ldi	r17, 0x21	; 33
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	34 e2       	ldi	r19, 0x24	; 36
    4460:	44 ef       	ldi	r20, 0xF4	; 244
    4462:	50 e0       	ldi	r21, 0x00	; 0
    4464:	60 e0       	ldi	r22, 0x00	; 0
    4466:	87 e2       	ldi	r24, 0x27	; 39
    4468:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <twiCreate>
    446c:	90 93 3d 17 	sts	0x173D, r25	; 0x80173d <_hih8120Handler+0x1>
    4470:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <_hih8120Handler>
    4474:	21 e0       	ldi	r18, 0x01	; 1
    4476:	89 2b       	or	r24, r25
    4478:	09 f0       	breq	.+2      	; 0x447c <hih8120_initialise+0x28>
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	82 2f       	mov	r24, r18
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	08 95       	ret

00004484 <hih8120_wakeup>:
    4484:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_hih8120Handler>
    4488:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_hih8120Handler+0x1>
    448c:	00 97       	sbiw	r24, 0x00	; 0
    448e:	59 f0       	breq	.+22     	; 0x44a6 <hih8120_wakeup+0x22>
    4490:	40 e0       	ldi	r20, 0x00	; 0
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	70 e0       	ldi	r23, 0x00	; 0
    4496:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <twiTransmit>
    449a:	84 30       	cpi	r24, 0x04	; 4
    449c:	31 f4       	brne	.+12     	; 0x44aa <hih8120_wakeup+0x26>
    449e:	10 92 3b 17 	sts	0x173B, r1	; 0x80173b <_measuringIsReady>
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	08 95       	ret
    44a6:	82 e0       	ldi	r24, 0x02	; 2
    44a8:	08 95       	ret
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	08 95       	ret

000044ae <hih8120_measure>:
    44ae:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_hih8120Handler>
    44b2:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_hih8120Handler+0x1>
    44b6:	00 97       	sbiw	r24, 0x00	; 0
    44b8:	39 f0       	breq	.+14     	; 0x44c8 <hih8120_measure+0x1a>
    44ba:	64 e0       	ldi	r22, 0x04	; 4
    44bc:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <twiReceive>
    44c0:	85 30       	cpi	r24, 0x05	; 5
    44c2:	21 f0       	breq	.+8      	; 0x44cc <hih8120_measure+0x1e>
    44c4:	83 e0       	ldi	r24, 0x03	; 3
    44c6:	08 95       	ret
    44c8:	82 e0       	ldi	r24, 0x02	; 2
    44ca:	08 95       	ret
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	08 95       	ret

000044d0 <hih8120_getHumidity>:
    44d0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    44d4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	28 df       	rcall	.-432    	; 0x432e <__floatunsisf>
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	48 ec       	ldi	r20, 0xC8	; 200
    44e4:	52 e4       	ldi	r21, 0x42	; 66
    44e6:	0e 94 4c 30 	call	0x6098	; 0x6098 <__mulsf3>
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	38 ef       	ldi	r19, 0xF8	; 248
    44ee:	4f e7       	ldi	r20, 0x7F	; 127
    44f0:	56 e4       	ldi	r21, 0x46	; 70
    44f2:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <__divsf3>
    44f6:	08 95       	ret

000044f8 <hih8120_getHumidityPercent_x10>:
    44f8:	eb df       	rcall	.-42     	; 0x44d0 <hih8120_getHumidity>
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	40 e2       	ldi	r20, 0x20	; 32
    4500:	51 e4       	ldi	r21, 0x41	; 65
    4502:	0e 94 4c 30 	call	0x6098	; 0x6098 <__mulsf3>
    4506:	e7 de       	rcall	.-562    	; 0x42d6 <__fixunssfsi>
    4508:	cb 01       	movw	r24, r22
    450a:	08 95       	ret

0000450c <hih8120_getTemperature>:
    450c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4510:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	0a df       	rcall	.-492    	; 0x432e <__floatunsisf>
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	45 e2       	ldi	r20, 0x25	; 37
    4520:	53 e4       	ldi	r21, 0x43	; 67
    4522:	0e 94 4c 30 	call	0x6098	; 0x6098 <__mulsf3>
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	38 ef       	ldi	r19, 0xF8	; 248
    452a:	4f e7       	ldi	r20, 0x7F	; 127
    452c:	56 e4       	ldi	r21, 0x46	; 70
    452e:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__divsf3>
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	40 e2       	ldi	r20, 0x20	; 32
    4538:	52 e4       	ldi	r21, 0x42	; 66
    453a:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <__subsf3>
    453e:	08 95       	ret

00004540 <hih8120_getTemperature_x10>:
    4540:	e5 df       	rcall	.-54     	; 0x450c <hih8120_getTemperature>
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e2       	ldi	r20, 0x20	; 32
    4548:	51 e4       	ldi	r21, 0x41	; 65
    454a:	0e 94 4c 30 	call	0x6098	; 0x6098 <__mulsf3>
    454e:	0e 94 1d 30 	call	0x603a	; 0x603a <__fixsfsi>
    4552:	cb 01       	movw	r24, r22
    4554:	08 95       	ret

00004556 <_serialCallBack>:
    4556:	0f 93       	push	r16
    4558:	1f 93       	push	r17
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	1f 92       	push	r1
    4560:	1f 92       	push	r1
    4562:	cd b7       	in	r28, 0x3d	; 61
    4564:	de b7       	in	r29, 0x3e	; 62
    4566:	8c 01       	movw	r16, r24
    4568:	19 82       	std	Y+1, r1	; 0x01
    456a:	2d c0       	rjmp	.+90     	; 0x45c6 <_serialCallBack+0x70>
    456c:	e0 91 75 17 	lds	r30, 0x1775	; 0x801775 <rec_buf_inp.2878>
    4570:	ec 32       	cpi	r30, 0x2C	; 44
    4572:	50 f4       	brcc	.+20     	; 0x4588 <_serialCallBack+0x32>
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	8e 0f       	add	r24, r30
    4578:	80 93 75 17 	sts	0x1775, r24	; 0x801775 <rec_buf_inp.2878>
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	e9 55       	subi	r30, 0x59	; 89
    4580:	f8 4e       	sbci	r31, 0xE8	; 232
    4582:	8a 81       	ldd	r24, Y+2	; 0x02
    4584:	80 83       	st	Z, r24
    4586:	02 c0       	rjmp	.+4      	; 0x458c <_serialCallBack+0x36>
    4588:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <rec_buf_inp.2878>
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	8a 30       	cpi	r24, 0x0A	; 10
    4590:	d1 f4       	brne	.+52     	; 0x45c6 <_serialCallBack+0x70>
    4592:	40 91 75 17 	lds	r20, 0x1775	; 0x801775 <rec_buf_inp.2878>
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	fa 01       	movw	r30, r20
    459a:	eb 55       	subi	r30, 0x5B	; 91
    459c:	f8 4e       	sbci	r31, 0xE8	; 232
    459e:	10 82       	st	Z, r1
    45a0:	41 50       	subi	r20, 0x01	; 1
    45a2:	51 09       	sbc	r21, r1
    45a4:	9e 01       	movw	r18, r28
    45a6:	2f 5f       	subi	r18, 0xFF	; 255
    45a8:	3f 4f       	sbci	r19, 0xFF	; 255
    45aa:	67 ea       	ldi	r22, 0xA7	; 167
    45ac:	77 e1       	ldi	r23, 0x17	; 23
    45ae:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_serialReplyBufferHandle>
    45b2:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_serialReplyBufferHandle+0x1>
    45b6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <xStreamBufferSendFromISR>
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	81 11       	cpse	r24, r1
    45be:	0e 94 17 07 	call	0xe2e	; 0xe2e <vPortYield>
    45c2:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <rec_buf_inp.2878>
    45c6:	be 01       	movw	r22, r28
    45c8:	6e 5f       	subi	r22, 0xFE	; 254
    45ca:	7f 4f       	sbci	r23, 0xFF	; 255
    45cc:	c8 01       	movw	r24, r16
    45ce:	37 d6       	rcall	.+3182   	; 0x523e <serial_getByte>
    45d0:	88 23       	and	r24, r24
    45d2:	61 f2       	breq	.-104    	; 0x456c <_serialCallBack+0x16>
    45d4:	0f 90       	pop	r0
    45d6:	0f 90       	pop	r0
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	1f 91       	pop	r17
    45de:	0f 91       	pop	r16
    45e0:	08 95       	ret

000045e2 <_uploadMessage>:
    45e2:	0f 93       	push	r16
    45e4:	1f 93       	push	r17
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29
    45ea:	8c 01       	movw	r16, r24
    45ec:	eb 01       	movw	r28, r22
    45ee:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_serialReplyBufferHandle>
    45f2:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_serialReplyBufferHandle+0x1>
    45f6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xStreamBufferReset>
    45fa:	b8 01       	movw	r22, r16
    45fc:	8e e3       	ldi	r24, 0x3E	; 62
    45fe:	97 e1       	ldi	r25, 0x17	; 23
    4600:	0e 94 41 32 	call	0x6482	; 0x6482 <strcpy>
    4604:	20 97       	sbiw	r28, 0x00	; 0
    4606:	79 f0       	breq	.+30     	; 0x4626 <_uploadMessage+0x44>
    4608:	ee e3       	ldi	r30, 0x3E	; 62
    460a:	f7 e1       	ldi	r31, 0x17	; 23
    460c:	01 90       	ld	r0, Z+
    460e:	00 20       	and	r0, r0
    4610:	e9 f7       	brne	.-6      	; 0x460c <_uploadMessage+0x2a>
    4612:	31 97       	sbiw	r30, 0x01	; 1
    4614:	80 e2       	ldi	r24, 0x20	; 32
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	91 83       	std	Z+1, r25	; 0x01
    461a:	80 83       	st	Z, r24
    461c:	be 01       	movw	r22, r28
    461e:	8e e3       	ldi	r24, 0x3E	; 62
    4620:	97 e1       	ldi	r25, 0x17	; 23
    4622:	0e 94 36 32 	call	0x646c	; 0x646c <strcat>
    4626:	ee e3       	ldi	r30, 0x3E	; 62
    4628:	f7 e1       	ldi	r31, 0x17	; 23
    462a:	df 01       	movw	r26, r30
    462c:	0d 90       	ld	r0, X+
    462e:	00 20       	and	r0, r0
    4630:	e9 f7       	brne	.-6      	; 0x462c <_uploadMessage+0x4a>
    4632:	11 97       	sbiw	r26, 0x01	; 1
    4634:	8d e0       	ldi	r24, 0x0D	; 13
    4636:	9a e0       	ldi	r25, 0x0A	; 10
    4638:	11 96       	adiw	r26, 0x01	; 1
    463a:	9c 93       	st	X, r25
    463c:	8e 93       	st	-X, r24
    463e:	12 96       	adiw	r26, 0x02	; 2
    4640:	1c 92       	st	X, r1
    4642:	01 90       	ld	r0, Z+
    4644:	00 20       	and	r0, r0
    4646:	e9 f7       	brne	.-6      	; 0x4642 <_uploadMessage+0x60>
    4648:	31 97       	sbiw	r30, 0x01	; 1
    464a:	ee 53       	subi	r30, 0x3E	; 62
    464c:	f7 41       	sbci	r31, 0x17	; 23
    464e:	ae 2f       	mov	r26, r30
    4650:	8e e3       	ldi	r24, 0x3E	; 62
    4652:	97 e1       	ldi	r25, 0x17	; 23
    4654:	ac 01       	movw	r20, r24
    4656:	6a 2f       	mov	r22, r26
    4658:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_rn2483_serial>
    465c:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_rn2483_serial+0x1>
    4660:	99 d5       	rcall	.+2866   	; 0x5194 <serial_sendBytes>
    4662:	81 11       	cpse	r24, r1
    4664:	11 c0       	rjmp	.+34     	; 0x4688 <_uploadMessage+0xa6>
    4666:	08 e2       	ldi	r16, 0x28	; 40
    4668:	15 e0       	ldi	r17, 0x05	; 5
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	4d e2       	ldi	r20, 0x2D	; 45
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	61 e0       	ldi	r22, 0x01	; 1
    4674:	78 e1       	ldi	r23, 0x18	; 24
    4676:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_serialReplyBufferHandle>
    467a:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_serialReplyBufferHandle+0x1>
    467e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
    4682:	81 e0       	ldi	r24, 0x01	; 1
    4684:	98 e1       	ldi	r25, 0x18	; 24
    4686:	02 c0       	rjmp	.+4      	; 0x468c <_uploadMessage+0xaa>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	df 91       	pop	r29
    468e:	cf 91       	pop	r28
    4690:	1f 91       	pop	r17
    4692:	0f 91       	pop	r16
    4694:	08 95       	ret

00004696 <_reply2ReturnCode>:
    4696:	2f 92       	push	r2
    4698:	3f 92       	push	r3
    469a:	4f 92       	push	r4
    469c:	5f 92       	push	r5
    469e:	6f 92       	push	r6
    46a0:	7f 92       	push	r7
    46a2:	8f 92       	push	r8
    46a4:	9f 92       	push	r9
    46a6:	af 92       	push	r10
    46a8:	bf 92       	push	r11
    46aa:	cf 92       	push	r12
    46ac:	df 92       	push	r13
    46ae:	ef 92       	push	r14
    46b0:	ff 92       	push	r15
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	5c 01       	movw	r10, r24
    46bc:	fc 01       	movw	r30, r24
    46be:	01 90       	ld	r0, Z+
    46c0:	00 20       	and	r0, r0
    46c2:	e9 f7       	brne	.-6      	; 0x46be <_reply2ReturnCode+0x28>
    46c4:	31 97       	sbiw	r30, 0x01	; 1
    46c6:	6f 01       	movw	r12, r30
    46c8:	c8 1a       	sub	r12, r24
    46ca:	d9 0a       	sbc	r13, r25
    46cc:	5c 2c       	mov	r5, r12
    46ce:	0f 2e       	mov	r0, r31
    46d0:	f8 e1       	ldi	r31, 0x18	; 24
    46d2:	8f 2e       	mov	r8, r31
    46d4:	f8 e0       	ldi	r31, 0x08	; 8
    46d6:	9f 2e       	mov	r9, r31
    46d8:	f0 2d       	mov	r31, r0
    46da:	e1 2c       	mov	r14, r1
    46dc:	f1 2c       	mov	r15, r1
    46de:	4c 2c       	mov	r4, r12
    46e0:	37 01       	movw	r6, r14
    46e2:	f4 01       	movw	r30, r8
    46e4:	01 81       	ldd	r16, Z+1	; 0x01
    46e6:	12 81       	ldd	r17, Z+2	; 0x02
    46e8:	e8 01       	movw	r28, r16
    46ea:	09 90       	ld	r0, Y+
    46ec:	00 20       	and	r0, r0
    46ee:	e9 f7       	brne	.-6      	; 0x46ea <_reply2ReturnCode+0x54>
    46f0:	21 97       	sbiw	r28, 0x01	; 1
    46f2:	c0 1b       	sub	r28, r16
    46f4:	d1 0b       	sbc	r29, r17
    46f6:	3c 2e       	mov	r3, r28
    46f8:	f9 e0       	ldi	r31, 0x09	; 9
    46fa:	cf 16       	cp	r12, r31
    46fc:	d1 04       	cpc	r13, r1
    46fe:	58 f0       	brcs	.+22     	; 0x4716 <_reply2ReturnCode+0x80>
    4700:	f4 01       	movw	r30, r8
    4702:	20 80       	ld	r2, Z
    4704:	fe e0       	ldi	r31, 0x0E	; 14
    4706:	2f 12       	cpse	r2, r31
    4708:	06 c0       	rjmp	.+12     	; 0x4716 <_reply2ReturnCode+0x80>
    470a:	b8 01       	movw	r22, r16
    470c:	c5 01       	movw	r24, r10
    470e:	0e 94 11 32 	call	0x6422	; 0x6422 <strcasestr>
    4712:	89 2b       	or	r24, r25
    4714:	09 f5       	brne	.+66     	; 0x4758 <_reply2ReturnCode+0xc2>
    4716:	44 2d       	mov	r20, r4
    4718:	35 14       	cp	r3, r5
    471a:	08 f4       	brcc	.+2      	; 0x471e <_reply2ReturnCode+0x88>
    471c:	4c 2f       	mov	r20, r28
    471e:	50 e0       	ldi	r21, 0x00	; 0
    4720:	b8 01       	movw	r22, r16
    4722:	c5 01       	movw	r24, r10
    4724:	0e 94 48 32 	call	0x6490	; 0x6490 <strncasecmp>
    4728:	89 2b       	or	r24, r25
    472a:	49 f4       	brne	.+18     	; 0x473e <_reply2ReturnCode+0xa8>
    472c:	f3 01       	movw	r30, r6
    472e:	ee 0f       	add	r30, r30
    4730:	ff 1f       	adc	r31, r31
    4732:	e6 0d       	add	r30, r6
    4734:	f7 1d       	adc	r31, r7
    4736:	e8 5e       	subi	r30, 0xE8	; 232
    4738:	f7 4f       	sbci	r31, 0xF7	; 247
    473a:	20 80       	ld	r2, Z
    473c:	0d c0       	rjmp	.+26     	; 0x4758 <_reply2ReturnCode+0xc2>
    473e:	8f ef       	ldi	r24, 0xFF	; 255
    4740:	e8 1a       	sub	r14, r24
    4742:	f8 0a       	sbc	r15, r24
    4744:	e3 e0       	ldi	r30, 0x03	; 3
    4746:	8e 0e       	add	r8, r30
    4748:	91 1c       	adc	r9, r1
    474a:	f1 e1       	ldi	r31, 0x11	; 17
    474c:	ef 16       	cp	r14, r31
    474e:	f1 04       	cpc	r15, r1
    4750:	39 f6       	brne	.-114    	; 0x46e0 <_reply2ReturnCode+0x4a>
    4752:	68 94       	set
    4754:	22 24       	eor	r2, r2
    4756:	24 f8       	bld	r2, 4
    4758:	82 2d       	mov	r24, r2
    475a:	df 91       	pop	r29
    475c:	cf 91       	pop	r28
    475e:	1f 91       	pop	r17
    4760:	0f 91       	pop	r16
    4762:	ff 90       	pop	r15
    4764:	ef 90       	pop	r14
    4766:	df 90       	pop	r13
    4768:	cf 90       	pop	r12
    476a:	bf 90       	pop	r11
    476c:	af 90       	pop	r10
    476e:	9f 90       	pop	r9
    4770:	8f 90       	pop	r8
    4772:	7f 90       	pop	r7
    4774:	6f 90       	pop	r6
    4776:	5f 90       	pop	r5
    4778:	4f 90       	pop	r4
    477a:	3f 90       	pop	r3
    477c:	2f 90       	pop	r2
    477e:	08 95       	ret

00004780 <_uploadMessageRc>:
    4780:	30 df       	rcall	.-416    	; 0x45e2 <_uploadMessage>
    4782:	89 cf       	rjmp	.-238    	; 0x4696 <_reply2ReturnCode>
    4784:	08 95       	ret

00004786 <lora_driver_flushBuffers>:
    4786:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_serialReplyBufferHandle>
    478a:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_serialReplyBufferHandle+0x1>
    478e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <xStreamBufferReset>
    4792:	08 95       	ret

00004794 <lora_driver_initialise>:
    4794:	8f 92       	push	r8
    4796:	9f 92       	push	r9
    4798:	af 92       	push	r10
    479a:	cf 92       	push	r12
    479c:	ef 92       	push	r14
    479e:	0f 93       	push	r16
    47a0:	1f 93       	push	r17
    47a2:	cf 93       	push	r28
    47a4:	c8 2f       	mov	r28, r24
    47a6:	8b 01       	movw	r16, r22
    47a8:	41 e0       	ldi	r20, 0x01	; 1
    47aa:	60 e0       	ldi	r22, 0x00	; 0
    47ac:	70 e0       	ldi	r23, 0x00	; 0
    47ae:	88 ec       	ldi	r24, 0xC8	; 200
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferGenericCreate>
    47b6:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <_serialReplyBufferHandle+0x1>
    47ba:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <_serialReplyBufferHandle>
    47be:	10 93 77 17 	sts	0x1777, r17	; 0x801777 <_downlinkMessageBuffer+0x1>
    47c2:	00 93 76 17 	sts	0x1776, r16	; 0x801776 <_downlinkMessageBuffer>
    47c6:	0f 2e       	mov	r0, r31
    47c8:	fb ea       	ldi	r31, 0xAB	; 171
    47ca:	8f 2e       	mov	r8, r31
    47cc:	f2 e2       	ldi	r31, 0x22	; 34
    47ce:	9f 2e       	mov	r9, r31
    47d0:	f0 2d       	mov	r31, r0
    47d2:	68 94       	set
    47d4:	aa 24       	eor	r10, r10
    47d6:	a6 f8       	bld	r10, 6
    47d8:	68 94       	set
    47da:	cc 24       	eor	r12, r12
    47dc:	c6 f8       	bld	r12, 6
    47de:	e1 2c       	mov	r14, r1
    47e0:	00 e0       	ldi	r16, 0x00	; 0
    47e2:	23 e0       	ldi	r18, 0x03	; 3
    47e4:	40 e0       	ldi	r20, 0x00	; 0
    47e6:	51 ee       	ldi	r21, 0xE1	; 225
    47e8:	60 e0       	ldi	r22, 0x00	; 0
    47ea:	70 e0       	ldi	r23, 0x00	; 0
    47ec:	8c 2f       	mov	r24, r28
    47ee:	06 d4       	rcall	.+2060   	; 0x4ffc <serial_create>
    47f0:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <_rn2483_serial+0x1>
    47f4:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <_rn2483_serial>
    47f8:	e7 e0       	ldi	r30, 0x07	; 7
    47fa:	f1 e0       	ldi	r31, 0x01	; 1
    47fc:	80 81       	ld	r24, Z
    47fe:	80 61       	ori	r24, 0x10	; 16
    4800:	80 83       	st	Z, r24
    4802:	cf 91       	pop	r28
    4804:	1f 91       	pop	r17
    4806:	0f 91       	pop	r16
    4808:	ef 90       	pop	r14
    480a:	cf 90       	pop	r12
    480c:	af 90       	pop	r10
    480e:	9f 90       	pop	r9
    4810:	8f 90       	pop	r8
    4812:	08 95       	ret

00004814 <lora_driver_resetRn2483>:
    4814:	88 23       	and	r24, r24
    4816:	31 f0       	breq	.+12     	; 0x4824 <lora_driver_resetRn2483+0x10>
    4818:	e8 e0       	ldi	r30, 0x08	; 8
    481a:	f1 e0       	ldi	r31, 0x01	; 1
    481c:	80 81       	ld	r24, Z
    481e:	8f 7e       	andi	r24, 0xEF	; 239
    4820:	80 83       	st	Z, r24
    4822:	08 95       	ret
    4824:	e8 e0       	ldi	r30, 0x08	; 8
    4826:	f1 e0       	ldi	r31, 0x01	; 1
    4828:	80 81       	ld	r24, Z
    482a:	80 61       	ori	r24, 0x10	; 16
    482c:	80 83       	st	Z, r24
    482e:	08 95       	ret

00004830 <lora_driver_rn2483FactoryReset>:
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	70 e0       	ldi	r23, 0x00	; 0
    4834:	8e e9       	ldi	r24, 0x9E	; 158
    4836:	95 e0       	ldi	r25, 0x05	; 5
    4838:	d4 de       	rcall	.-600    	; 0x45e2 <_uploadMessage>
    483a:	e1 e0       	ldi	r30, 0x01	; 1
    483c:	f8 e1       	ldi	r31, 0x18	; 24
    483e:	01 90       	ld	r0, Z+
    4840:	00 20       	and	r0, r0
    4842:	e9 f7       	brne	.-6      	; 0x483e <lora_driver_rn2483FactoryReset+0xe>
    4844:	31 97       	sbiw	r30, 0x01	; 1
    4846:	e1 50       	subi	r30, 0x01	; 1
    4848:	f8 41       	sbci	r31, 0x18	; 24
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	75 97       	sbiw	r30, 0x15	; 21
    484e:	08 f0       	brcs	.+2      	; 0x4852 <lora_driver_rn2483FactoryReset+0x22>
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	08 95       	ret

00004854 <lora_driver_getRn2483Hweui>:
    4854:	cf 93       	push	r28
    4856:	df 93       	push	r29
    4858:	ec 01       	movw	r28, r24
    485a:	60 e0       	ldi	r22, 0x00	; 0
    485c:	70 e0       	ldi	r23, 0x00	; 0
    485e:	8f ea       	ldi	r24, 0xAF	; 175
    4860:	95 e0       	ldi	r25, 0x05	; 5
    4862:	bf de       	rcall	.-642    	; 0x45e2 <_uploadMessage>
    4864:	e1 e0       	ldi	r30, 0x01	; 1
    4866:	f8 e1       	ldi	r31, 0x18	; 24
    4868:	01 90       	ld	r0, Z+
    486a:	00 20       	and	r0, r0
    486c:	e9 f7       	brne	.-6      	; 0x4868 <lora_driver_getRn2483Hweui+0x14>
    486e:	e2 51       	subi	r30, 0x12	; 18
    4870:	f8 41       	sbci	r31, 0x18	; 24
    4872:	39 f4       	brne	.+14     	; 0x4882 <lora_driver_getRn2483Hweui+0x2e>
    4874:	61 e0       	ldi	r22, 0x01	; 1
    4876:	78 e1       	ldi	r23, 0x18	; 24
    4878:	ce 01       	movw	r24, r28
    487a:	0e 94 41 32 	call	0x6482	; 0x6482 <strcpy>
    487e:	80 e0       	ldi	r24, 0x00	; 0
    4880:	02 c0       	rjmp	.+4      	; 0x4886 <lora_driver_getRn2483Hweui+0x32>
    4882:	18 82       	st	Y, r1
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	08 95       	ret

0000488c <lora_driver_setDeviceIdentifier>:
    488c:	fc 01       	movw	r30, r24
    488e:	01 90       	ld	r0, Z+
    4890:	00 20       	and	r0, r0
    4892:	e9 f7       	brne	.-6      	; 0x488e <lora_driver_setDeviceIdentifier+0x2>
    4894:	9f 01       	movw	r18, r30
    4896:	21 51       	subi	r18, 0x11	; 17
    4898:	31 09       	sbc	r19, r1
    489a:	28 17       	cp	r18, r24
    489c:	39 07       	cpc	r19, r25
    489e:	29 f4       	brne	.+10     	; 0x48aa <lora_driver_setDeviceIdentifier+0x1e>
    48a0:	bc 01       	movw	r22, r24
    48a2:	8d ed       	ldi	r24, 0xDD	; 221
    48a4:	95 e0       	ldi	r25, 0x05	; 5
    48a6:	6c cf       	rjmp	.-296    	; 0x4780 <_uploadMessageRc>
    48a8:	08 95       	ret
    48aa:	89 e0       	ldi	r24, 0x09	; 9
    48ac:	08 95       	ret

000048ae <lora_driver_setApplicationIdentifier>:
    48ae:	fc 01       	movw	r30, r24
    48b0:	01 90       	ld	r0, Z+
    48b2:	00 20       	and	r0, r0
    48b4:	e9 f7       	brne	.-6      	; 0x48b0 <lora_driver_setApplicationIdentifier+0x2>
    48b6:	9f 01       	movw	r18, r30
    48b8:	21 51       	subi	r18, 0x11	; 17
    48ba:	31 09       	sbc	r19, r1
    48bc:	28 17       	cp	r18, r24
    48be:	39 07       	cpc	r19, r25
    48c0:	29 f4       	brne	.+10     	; 0x48cc <lora_driver_setApplicationIdentifier+0x1e>
    48c2:	bc 01       	movw	r22, r24
    48c4:	8c ee       	ldi	r24, 0xEC	; 236
    48c6:	95 e0       	ldi	r25, 0x05	; 5
    48c8:	5b cf       	rjmp	.-330    	; 0x4780 <_uploadMessageRc>
    48ca:	08 95       	ret
    48cc:	89 e0       	ldi	r24, 0x09	; 9
    48ce:	08 95       	ret

000048d0 <lora_driver_setApplicationKey>:
    48d0:	fc 01       	movw	r30, r24
    48d2:	01 90       	ld	r0, Z+
    48d4:	00 20       	and	r0, r0
    48d6:	e9 f7       	brne	.-6      	; 0x48d2 <lora_driver_setApplicationKey+0x2>
    48d8:	9f 01       	movw	r18, r30
    48da:	21 52       	subi	r18, 0x21	; 33
    48dc:	31 09       	sbc	r19, r1
    48de:	28 17       	cp	r18, r24
    48e0:	39 07       	cpc	r19, r25
    48e2:	29 f4       	brne	.+10     	; 0x48ee <lora_driver_setApplicationKey+0x1e>
    48e4:	bc 01       	movw	r22, r24
    48e6:	8b ef       	ldi	r24, 0xFB	; 251
    48e8:	95 e0       	ldi	r25, 0x05	; 5
    48ea:	4a cf       	rjmp	.-364    	; 0x4780 <_uploadMessageRc>
    48ec:	08 95       	ret
    48ee:	89 e0       	ldi	r24, 0x09	; 9
    48f0:	08 95       	ret

000048f2 <lora_driver_saveMac>:
    48f2:	60 e0       	ldi	r22, 0x00	; 0
    48f4:	70 e0       	ldi	r23, 0x00	; 0
    48f6:	8a e3       	ldi	r24, 0x3A	; 58
    48f8:	96 e0       	ldi	r25, 0x06	; 6
    48fa:	42 cf       	rjmp	.-380    	; 0x4780 <_uploadMessageRc>
    48fc:	08 95       	ret

000048fe <lora_driver_join>:
    48fe:	0f 93       	push	r16
    4900:	1f 93       	push	r17
    4902:	e8 2f       	mov	r30, r24
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	ee 0f       	add	r30, r30
    4908:	ff 1f       	adc	r31, r31
    490a:	ec 5e       	subi	r30, 0xEC	; 236
    490c:	f7 4f       	sbci	r31, 0xF7	; 247
    490e:	60 81       	ld	r22, Z
    4910:	71 81       	ldd	r23, Z+1	; 0x01
    4912:	83 e4       	ldi	r24, 0x43	; 67
    4914:	96 e0       	ldi	r25, 0x06	; 6
    4916:	34 df       	rcall	.-408    	; 0x4780 <_uploadMessageRc>
    4918:	81 11       	cpse	r24, r1
    491a:	14 c0       	rjmp	.+40     	; 0x4944 <lora_driver_join+0x46>
    491c:	08 e2       	ldi	r16, 0x28	; 40
    491e:	15 e0       	ldi	r17, 0x05	; 5
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	4d e2       	ldi	r20, 0x2D	; 45
    4926:	50 e0       	ldi	r21, 0x00	; 0
    4928:	61 e0       	ldi	r22, 0x01	; 1
    492a:	78 e1       	ldi	r23, 0x18	; 24
    492c:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_serialReplyBufferHandle>
    4930:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_serialReplyBufferHandle+0x1>
    4934:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
    4938:	88 23       	and	r24, r24
    493a:	21 f0       	breq	.+8      	; 0x4944 <lora_driver_join+0x46>
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	98 e1       	ldi	r25, 0x18	; 24
    4940:	aa de       	rcall	.-684    	; 0x4696 <_reply2ReturnCode>
    4942:	03 c0       	rjmp	.+6      	; 0x494a <lora_driver_join+0x4c>
    4944:	81 e0       	ldi	r24, 0x01	; 1
    4946:	98 e1       	ldi	r25, 0x18	; 24
    4948:	a6 de       	rcall	.-692    	; 0x4696 <_reply2ReturnCode>
    494a:	1f 91       	pop	r17
    494c:	0f 91       	pop	r16
    494e:	08 95       	ret

00004950 <lora_driver_sendUploadMessage>:
    4950:	0f 93       	push	r16
    4952:	1f 93       	push	r17
    4954:	cf 93       	push	r28
    4956:	df 93       	push	r29
    4958:	1f 92       	push	r1
    495a:	cd b7       	in	r28, 0x3d	; 61
    495c:	de b7       	in	r29, 0x3e	; 62
    495e:	db 01       	movw	r26, r22
    4960:	11 96       	adiw	r26, 0x01	; 1
    4962:	9c 91       	ld	r25, X
    4964:	11 97       	sbiw	r26, 0x01	; 1
    4966:	95 31       	cpi	r25, 0x15	; 21
    4968:	08 f0       	brcs	.+2      	; 0x496c <lora_driver_sendUploadMessage+0x1c>
    496a:	b4 c0       	rjmp	.+360    	; 0x4ad4 <lora_driver_sendUploadMessage+0x184>
    496c:	99 23       	and	r25, r25
    496e:	81 f1       	breq	.+96     	; 0x49d0 <lora_driver_sendUploadMessage+0x80>
    4970:	60 e0       	ldi	r22, 0x00	; 0
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	27 2f       	mov	r18, r23
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	46 2f       	mov	r20, r22
    497a:	50 e0       	ldi	r21, 0x00	; 0
    497c:	fd 01       	movw	r30, r26
    497e:	e4 0f       	add	r30, r20
    4980:	f5 1f       	adc	r31, r21
    4982:	92 81       	ldd	r25, Z+2	; 0x02
    4984:	92 95       	swap	r25
    4986:	9f 70       	andi	r25, 0x0F	; 15
    4988:	9a 30       	cpi	r25, 0x0A	; 10
    498a:	10 f0       	brcs	.+4      	; 0x4990 <lora_driver_sendUploadMessage+0x40>
    498c:	99 5c       	subi	r25, 0xC9	; 201
    498e:	01 c0       	rjmp	.+2      	; 0x4992 <lora_driver_sendUploadMessage+0x42>
    4990:	90 5d       	subi	r25, 0xD0	; 208
    4992:	f9 01       	movw	r30, r18
    4994:	ee 56       	subi	r30, 0x6E	; 110
    4996:	f8 4e       	sbci	r31, 0xE8	; 232
    4998:	90 83       	st	Z, r25
    499a:	2f 5f       	subi	r18, 0xFF	; 255
    499c:	3f 4f       	sbci	r19, 0xFF	; 255
    499e:	fd 01       	movw	r30, r26
    49a0:	e4 0f       	add	r30, r20
    49a2:	f5 1f       	adc	r31, r21
    49a4:	92 81       	ldd	r25, Z+2	; 0x02
    49a6:	9f 70       	andi	r25, 0x0F	; 15
    49a8:	49 2f       	mov	r20, r25
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	4a 30       	cpi	r20, 0x0A	; 10
    49ae:	51 05       	cpc	r21, r1
    49b0:	14 f0       	brlt	.+4      	; 0x49b6 <lora_driver_sendUploadMessage+0x66>
    49b2:	99 5c       	subi	r25, 0xC9	; 201
    49b4:	01 c0       	rjmp	.+2      	; 0x49b8 <lora_driver_sendUploadMessage+0x68>
    49b6:	90 5d       	subi	r25, 0xD0	; 208
    49b8:	f9 01       	movw	r30, r18
    49ba:	ee 56       	subi	r30, 0x6E	; 110
    49bc:	f8 4e       	sbci	r31, 0xE8	; 232
    49be:	90 83       	st	Z, r25
    49c0:	7e 5f       	subi	r23, 0xFE	; 254
    49c2:	6f 5f       	subi	r22, 0xFF	; 255
    49c4:	11 96       	adiw	r26, 0x01	; 1
    49c6:	9c 91       	ld	r25, X
    49c8:	11 97       	sbiw	r26, 0x01	; 1
    49ca:	69 17       	cp	r22, r25
    49cc:	98 f2       	brcs	.-90     	; 0x4974 <lora_driver_sendUploadMessage+0x24>
    49ce:	01 c0       	rjmp	.+2      	; 0x49d2 <lora_driver_sendUploadMessage+0x82>
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	e7 2f       	mov	r30, r23
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	ee 56       	subi	r30, 0x6E	; 110
    49d8:	f8 4e       	sbci	r31, 0xE8	; 232
    49da:	10 82       	st	Z, r1
    49dc:	4c 91       	ld	r20, X
    49de:	81 11       	cpse	r24, r1
    49e0:	03 c0       	rjmp	.+6      	; 0x49e8 <lora_driver_sendUploadMessage+0x98>
    49e2:	8c e4       	ldi	r24, 0x4C	; 76
    49e4:	96 e0       	ldi	r25, 0x06	; 6
    49e6:	02 c0       	rjmp	.+4      	; 0x49ec <lora_driver_sendUploadMessage+0x9c>
    49e8:	8e e4       	ldi	r24, 0x4E	; 78
    49ea:	96 e0       	ldi	r25, 0x06	; 6
    49ec:	22 e9       	ldi	r18, 0x92	; 146
    49ee:	37 e1       	ldi	r19, 0x17	; 23
    49f0:	3f 93       	push	r19
    49f2:	2f 93       	push	r18
    49f4:	1f 92       	push	r1
    49f6:	4f 93       	push	r20
    49f8:	9f 93       	push	r25
    49fa:	8f 93       	push	r24
    49fc:	82 e5       	ldi	r24, 0x52	; 82
    49fe:	96 e0       	ldi	r25, 0x06	; 6
    4a00:	9f 93       	push	r25
    4a02:	8f 93       	push	r24
    4a04:	84 ed       	ldi	r24, 0xD4	; 212
    4a06:	97 e1       	ldi	r25, 0x17	; 23
    4a08:	9f 93       	push	r25
    4a0a:	8f 93       	push	r24
    4a0c:	0e 94 a3 32 	call	0x6546	; 0x6546 <sprintf>
    4a10:	60 e0       	ldi	r22, 0x00	; 0
    4a12:	70 e0       	ldi	r23, 0x00	; 0
    4a14:	84 ed       	ldi	r24, 0xD4	; 212
    4a16:	97 e1       	ldi	r25, 0x17	; 23
    4a18:	b3 de       	rcall	.-666    	; 0x4780 <_uploadMessageRc>
    4a1a:	0f b6       	in	r0, 0x3f	; 63
    4a1c:	f8 94       	cli
    4a1e:	de bf       	out	0x3e, r29	; 62
    4a20:	0f be       	out	0x3f, r0	; 63
    4a22:	cd bf       	out	0x3d, r28	; 61
    4a24:	81 11       	cpse	r24, r1
    4a26:	59 c0       	rjmp	.+178    	; 0x4ada <lora_driver_sendUploadMessage+0x18a>
    4a28:	08 e2       	ldi	r16, 0x28	; 40
    4a2a:	15 e0       	ldi	r17, 0x05	; 5
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	4d e2       	ldi	r20, 0x2D	; 45
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	61 e0       	ldi	r22, 0x01	; 1
    4a36:	78 e1       	ldi	r23, 0x18	; 24
    4a38:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_serialReplyBufferHandle>
    4a3c:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_serialReplyBufferHandle+0x1>
    4a40:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
    4a44:	88 23       	and	r24, r24
    4a46:	09 f4       	brne	.+2      	; 0x4a4a <lora_driver_sendUploadMessage+0xfa>
    4a48:	47 c0       	rjmp	.+142    	; 0x4ad8 <lora_driver_sendUploadMessage+0x188>
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	98 e1       	ldi	r25, 0x18	; 24
    4a4e:	23 de       	rcall	.-954    	; 0x4696 <_reply2ReturnCode>
    4a50:	8e 30       	cpi	r24, 0x0E	; 14
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <lora_driver_sendUploadMessage+0x106>
    4a54:	42 c0       	rjmp	.+132    	; 0x4ada <lora_driver_sendUploadMessage+0x18a>
    4a56:	87 e0       	ldi	r24, 0x07	; 7
    4a58:	89 83       	std	Y+1, r24	; 0x01
    4a5a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_downlinkMessageBuffer>
    4a5e:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_downlinkMessageBuffer+0x1>
    4a62:	89 2b       	or	r24, r25
    4a64:	a9 f1       	breq	.+106    	; 0x4ad0 <lora_driver_sendUploadMessage+0x180>
    4a66:	be 01       	movw	r22, r28
    4a68:	6f 5f       	subi	r22, 0xFF	; 255
    4a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	98 e1       	ldi	r25, 0x18	; 24
    4a70:	68 d1       	rcall	.+720    	; 0x4d42 <decode_port_no>
    4a72:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <_downlinkPayload>
    4a76:	e9 81       	ldd	r30, Y+1	; 0x01
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	ef 5f       	subi	r30, 0xFF	; 255
    4a7c:	f7 4e       	sbci	r31, 0xE7	; 231
    4a7e:	df 01       	movw	r26, r30
    4a80:	0d 90       	ld	r0, X+
    4a82:	00 20       	and	r0, r0
    4a84:	e9 f7       	brne	.-6      	; 0x4a80 <lora_driver_sendUploadMessage+0x130>
    4a86:	11 97       	sbiw	r26, 0x01	; 1
    4a88:	ae 1b       	sub	r26, r30
    4a8a:	bf 0b       	sbc	r27, r31
    4a8c:	aa 23       	and	r26, r26
    4a8e:	91 f0       	breq	.+36     	; 0x4ab4 <lora_driver_sendUploadMessage+0x164>
    4a90:	bb 27       	eor	r27, r27
    4a92:	cd 01       	movw	r24, r26
    4a94:	01 97       	sbiw	r24, 0x01	; 1
    4a96:	9c 01       	movw	r18, r24
    4a98:	12 f4       	brpl	.+4      	; 0x4a9e <lora_driver_sendUploadMessage+0x14e>
    4a9a:	2f 5f       	subi	r18, 0xFF	; 255
    4a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9e:	35 95       	asr	r19
    4aa0:	27 95       	ror	r18
    4aa2:	20 93 7d 17 	sts	0x177D, r18	; 0x80177d <_downlinkPayload+0x1>
    4aa6:	af 01       	movw	r20, r30
    4aa8:	4f 5f       	subi	r20, 0xFF	; 255
    4aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    4aac:	64 e1       	ldi	r22, 0x14	; 20
    4aae:	8e e7       	ldi	r24, 0x7E	; 126
    4ab0:	97 e1       	ldi	r25, 0x17	; 23
    4ab2:	73 d1       	rcall	.+742    	; 0x4d9a <decode_hexadecimal_string_bytes>
    4ab4:	01 e0       	ldi	r16, 0x01	; 1
    4ab6:	10 e0       	ldi	r17, 0x00	; 0
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	46 e1       	ldi	r20, 0x16	; 22
    4abe:	50 e0       	ldi	r21, 0x00	; 0
    4ac0:	6c e7       	ldi	r22, 0x7C	; 124
    4ac2:	77 e1       	ldi	r23, 0x17	; 23
    4ac4:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_downlinkMessageBuffer>
    4ac8:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_downlinkMessageBuffer+0x1>
    4acc:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xStreamBufferSend>
    4ad0:	8e e0       	ldi	r24, 0x0E	; 14
    4ad2:	03 c0       	rjmp	.+6      	; 0x4ada <lora_driver_sendUploadMessage+0x18a>
    4ad4:	84 e1       	ldi	r24, 0x14	; 20
    4ad6:	01 c0       	rjmp	.+2      	; 0x4ada <lora_driver_sendUploadMessage+0x18a>
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	0f 90       	pop	r0
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	1f 91       	pop	r17
    4ae2:	0f 91       	pop	r16
    4ae4:	08 95       	ret

00004ae6 <lora_driver_setAdaptiveDataRate>:
    4ae6:	81 30       	cpi	r24, 0x01	; 1
    4ae8:	19 f0       	breq	.+6      	; 0x4af0 <lora_driver_setAdaptiveDataRate+0xa>
    4aea:	62 e6       	ldi	r22, 0x62	; 98
    4aec:	76 e0       	ldi	r23, 0x06	; 6
    4aee:	02 c0       	rjmp	.+4      	; 0x4af4 <lora_driver_setAdaptiveDataRate+0xe>
    4af0:	6b e3       	ldi	r22, 0x3B	; 59
    4af2:	77 e0       	ldi	r23, 0x07	; 7
    4af4:	86 e6       	ldi	r24, 0x66	; 102
    4af6:	96 e0       	ldi	r25, 0x06	; 6
    4af8:	43 ce       	rjmp	.-890    	; 0x4780 <_uploadMessageRc>
    4afa:	08 95       	ret

00004afc <lora_driver_setReceiveDelay>:
    4afc:	9f 93       	push	r25
    4afe:	8f 93       	push	r24
    4b00:	87 e9       	ldi	r24, 0x97	; 151
    4b02:	96 e0       	ldi	r25, 0x06	; 6
    4b04:	9f 93       	push	r25
    4b06:	8f 93       	push	r24
    4b08:	84 ed       	ldi	r24, 0xD4	; 212
    4b0a:	97 e1       	ldi	r25, 0x17	; 23
    4b0c:	9f 93       	push	r25
    4b0e:	8f 93       	push	r24
    4b10:	0e 94 a3 32 	call	0x6546	; 0x6546 <sprintf>
    4b14:	60 e0       	ldi	r22, 0x00	; 0
    4b16:	70 e0       	ldi	r23, 0x00	; 0
    4b18:	84 ed       	ldi	r24, 0xD4	; 212
    4b1a:	97 e1       	ldi	r25, 0x17	; 23
    4b1c:	31 de       	rcall	.-926    	; 0x4780 <_uploadMessageRc>
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	0f 90       	pop	r0
    4b2a:	08 95       	ret

00004b2c <lora_driver_configureToEu868>:
    4b2c:	2f 92       	push	r2
    4b2e:	3f 92       	push	r3
    4b30:	4f 92       	push	r4
    4b32:	5f 92       	push	r5
    4b34:	6f 92       	push	r6
    4b36:	7f 92       	push	r7
    4b38:	8f 92       	push	r8
    4b3a:	9f 92       	push	r9
    4b3c:	af 92       	push	r10
    4b3e:	bf 92       	push	r11
    4b40:	cf 92       	push	r12
    4b42:	df 92       	push	r13
    4b44:	ef 92       	push	r14
    4b46:	ff 92       	push	r15
    4b48:	0f 93       	push	r16
    4b4a:	1f 93       	push	r17
    4b4c:	cf 93       	push	r28
    4b4e:	df 93       	push	r29
    4b50:	cd b7       	in	r28, 0x3d	; 61
    4b52:	de b7       	in	r29, 0x3e	; 62
    4b54:	a0 97       	sbiw	r28, 0x20	; 32
    4b56:	0f b6       	in	r0, 0x3f	; 63
    4b58:	f8 94       	cli
    4b5a:	de bf       	out	0x3e, r29	; 62
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	cd bf       	out	0x3d, r28	; 61
    4b60:	64 ec       	ldi	r22, 0xC4	; 196
    4b62:	76 e0       	ldi	r23, 0x06	; 6
    4b64:	80 ed       	ldi	r24, 0xD0	; 208
    4b66:	96 e0       	ldi	r25, 0x06	; 6
    4b68:	3c dd       	rcall	.-1416   	; 0x45e2 <_uploadMessage>
    4b6a:	95 dd       	rcall	.-1238   	; 0x4696 <_reply2ReturnCode>
    4b6c:	81 11       	cpse	r24, r1
    4b6e:	a3 c0       	rjmp	.+326    	; 0x4cb6 <lora_driver_configureToEu868+0x18a>
    4b70:	80 e2       	ldi	r24, 0x20	; 32
    4b72:	e2 e2       	ldi	r30, 0x22	; 34
    4b74:	f2 e0       	ldi	r31, 0x02	; 2
    4b76:	de 01       	movw	r26, r28
    4b78:	11 96       	adiw	r26, 0x01	; 1
    4b7a:	01 90       	ld	r0, Z+
    4b7c:	0d 92       	st	X+, r0
    4b7e:	8a 95       	dec	r24
    4b80:	e1 f7       	brne	.-8      	; 0x4b7a <lora_driver_configureToEu868+0x4e>
    4b82:	9e 01       	movw	r18, r28
    4b84:	2f 5f       	subi	r18, 0xFF	; 255
    4b86:	3f 4f       	sbci	r19, 0xFF	; 255
    4b88:	69 01       	movw	r12, r18
    4b8a:	e1 2c       	mov	r14, r1
    4b8c:	f1 2c       	mov	r15, r1
    4b8e:	0f 2e       	mov	r0, r31
    4b90:	fc ed       	ldi	r31, 0xDC	; 220
    4b92:	af 2e       	mov	r10, r31
    4b94:	f6 e0       	ldi	r31, 0x06	; 6
    4b96:	bf 2e       	mov	r11, r31
    4b98:	f0 2d       	mov	r31, r0
    4b9a:	04 ed       	ldi	r16, 0xD4	; 212
    4b9c:	17 e1       	ldi	r17, 0x17	; 23
    4b9e:	0f 2e       	mov	r0, r31
    4ba0:	f5 ef       	ldi	r31, 0xF5	; 245
    4ba2:	4f 2e       	mov	r4, r31
    4ba4:	f6 e0       	ldi	r31, 0x06	; 6
    4ba6:	5f 2e       	mov	r5, r31
    4ba8:	f0 2d       	mov	r31, r0
    4baa:	0f 2e       	mov	r0, r31
    4bac:	fc e0       	ldi	r31, 0x0C	; 12
    4bae:	8f 2e       	mov	r8, r31
    4bb0:	f7 e0       	ldi	r31, 0x07	; 7
    4bb2:	9f 2e       	mov	r9, r31
    4bb4:	f0 2d       	mov	r31, r0
    4bb6:	0f 2e       	mov	r0, r31
    4bb8:	f6 e2       	ldi	r31, 0x26	; 38
    4bba:	6f 2e       	mov	r6, r31
    4bbc:	f7 e0       	ldi	r31, 0x07	; 7
    4bbe:	7f 2e       	mov	r7, r31
    4bc0:	f0 2d       	mov	r31, r0
    4bc2:	3e 2c       	mov	r3, r14
    4bc4:	2f 2c       	mov	r2, r15
    4bc6:	ff 92       	push	r15
    4bc8:	ef 92       	push	r14
    4bca:	bf 92       	push	r11
    4bcc:	af 92       	push	r10
    4bce:	1f 93       	push	r17
    4bd0:	0f 93       	push	r16
    4bd2:	0e 94 a3 32 	call	0x6546	; 0x6546 <sprintf>
    4bd6:	60 e0       	ldi	r22, 0x00	; 0
    4bd8:	70 e0       	ldi	r23, 0x00	; 0
    4bda:	c8 01       	movw	r24, r16
    4bdc:	02 dd       	rcall	.-1532   	; 0x45e2 <_uploadMessage>
    4bde:	5b dd       	rcall	.-1354   	; 0x4696 <_reply2ReturnCode>
    4be0:	0f 90       	pop	r0
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	81 11       	cpse	r24, r1
    4bee:	63 c0       	rjmp	.+198    	; 0x4cb6 <lora_driver_configureToEu868+0x18a>
    4bf0:	32 e0       	ldi	r19, 0x02	; 2
    4bf2:	3e 15       	cp	r19, r14
    4bf4:	e8 f4       	brcc	.+58     	; 0x4c30 <lora_driver_configureToEu868+0x104>
    4bf6:	f6 01       	movw	r30, r12
    4bf8:	83 81       	ldd	r24, Z+3	; 0x03
    4bfa:	8f 93       	push	r24
    4bfc:	82 81       	ldd	r24, Z+2	; 0x02
    4bfe:	8f 93       	push	r24
    4c00:	81 81       	ldd	r24, Z+1	; 0x01
    4c02:	8f 93       	push	r24
    4c04:	80 81       	ld	r24, Z
    4c06:	8f 93       	push	r24
    4c08:	ff 92       	push	r15
    4c0a:	ef 92       	push	r14
    4c0c:	5f 92       	push	r5
    4c0e:	4f 92       	push	r4
    4c10:	1f 93       	push	r17
    4c12:	0f 93       	push	r16
    4c14:	0e 94 a3 32 	call	0x6546	; 0x6546 <sprintf>
    4c18:	60 e0       	ldi	r22, 0x00	; 0
    4c1a:	70 e0       	ldi	r23, 0x00	; 0
    4c1c:	c8 01       	movw	r24, r16
    4c1e:	e1 dc       	rcall	.-1598   	; 0x45e2 <_uploadMessage>
    4c20:	3a dd       	rcall	.-1420   	; 0x4696 <_reply2ReturnCode>
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	81 11       	cpse	r24, r1
    4c2e:	43 c0       	rjmp	.+134    	; 0x4cb6 <lora_driver_configureToEu868+0x18a>
    4c30:	2f 92       	push	r2
    4c32:	3f 92       	push	r3
    4c34:	9f 92       	push	r9
    4c36:	8f 92       	push	r8
    4c38:	1f 93       	push	r17
    4c3a:	0f 93       	push	r16
    4c3c:	0e 94 a3 32 	call	0x6546	; 0x6546 <sprintf>
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	70 e0       	ldi	r23, 0x00	; 0
    4c44:	c8 01       	movw	r24, r16
    4c46:	cd dc       	rcall	.-1638   	; 0x45e2 <_uploadMessage>
    4c48:	26 dd       	rcall	.-1460   	; 0x4696 <_reply2ReturnCode>
    4c4a:	0f 90       	pop	r0
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	81 11       	cpse	r24, r1
    4c58:	2e c0       	rjmp	.+92     	; 0x4cb6 <lora_driver_configureToEu868+0x18a>
    4c5a:	2f 92       	push	r2
    4c5c:	3f 92       	push	r3
    4c5e:	7f 92       	push	r7
    4c60:	6f 92       	push	r6
    4c62:	1f 93       	push	r17
    4c64:	0f 93       	push	r16
    4c66:	0e 94 a3 32 	call	0x6546	; 0x6546 <sprintf>
    4c6a:	60 e0       	ldi	r22, 0x00	; 0
    4c6c:	70 e0       	ldi	r23, 0x00	; 0
    4c6e:	c8 01       	movw	r24, r16
    4c70:	b8 dc       	rcall	.-1680   	; 0x45e2 <_uploadMessage>
    4c72:	11 dd       	rcall	.-1502   	; 0x4696 <_reply2ReturnCode>
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	81 11       	cpse	r24, r1
    4c82:	19 c0       	rjmp	.+50     	; 0x4cb6 <lora_driver_configureToEu868+0x18a>
    4c84:	3f ef       	ldi	r19, 0xFF	; 255
    4c86:	e3 1a       	sub	r14, r19
    4c88:	f3 0a       	sbc	r15, r19
    4c8a:	84 e0       	ldi	r24, 0x04	; 4
    4c8c:	c8 0e       	add	r12, r24
    4c8e:	d1 1c       	adc	r13, r1
    4c90:	98 e0       	ldi	r25, 0x08	; 8
    4c92:	e9 16       	cp	r14, r25
    4c94:	f1 04       	cpc	r15, r1
    4c96:	09 f0       	breq	.+2      	; 0x4c9a <lora_driver_configureToEu868+0x16e>
    4c98:	94 cf       	rjmp	.-216    	; 0x4bc2 <lora_driver_configureToEu868+0x96>
    4c9a:	60 e0       	ldi	r22, 0x00	; 0
    4c9c:	70 e0       	ldi	r23, 0x00	; 0
    4c9e:	8e e3       	ldi	r24, 0x3E	; 62
    4ca0:	97 e0       	ldi	r25, 0x07	; 7
    4ca2:	9f dc       	rcall	.-1730   	; 0x45e2 <_uploadMessage>
    4ca4:	f8 dc       	rcall	.-1552   	; 0x4696 <_reply2ReturnCode>
    4ca6:	81 11       	cpse	r24, r1
    4ca8:	06 c0       	rjmp	.+12     	; 0x4cb6 <lora_driver_configureToEu868+0x18a>
    4caa:	60 e0       	ldi	r22, 0x00	; 0
    4cac:	70 e0       	ldi	r23, 0x00	; 0
    4cae:	8f e4       	ldi	r24, 0x4F	; 79
    4cb0:	97 e0       	ldi	r25, 0x07	; 7
    4cb2:	97 dc       	rcall	.-1746   	; 0x45e2 <_uploadMessage>
    4cb4:	f0 dc       	rcall	.-1568   	; 0x4696 <_reply2ReturnCode>
    4cb6:	a0 96       	adiw	r28, 0x20	; 32
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	7f 90       	pop	r7
    4cdc:	6f 90       	pop	r6
    4cde:	5f 90       	pop	r5
    4ce0:	4f 90       	pop	r4
    4ce2:	3f 90       	pop	r3
    4ce4:	2f 90       	pop	r2
    4ce6:	08 95       	ret

00004ce8 <lora_driver_setOtaaIdentity>:
    4ce8:	ef 92       	push	r14
    4cea:	ff 92       	push	r15
    4cec:	0f 93       	push	r16
    4cee:	1f 93       	push	r17
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	ec 01       	movw	r28, r24
    4cf6:	8b 01       	movw	r16, r22
    4cf8:	7a 01       	movw	r14, r20
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	f4 de       	rcall	.-536    	; 0x4ae6 <lora_driver_setAdaptiveDataRate>
    4cfe:	81 11       	cpse	r24, r1
    4d00:	0d c0       	rjmp	.+26     	; 0x4d1c <lora_driver_setOtaaIdentity+0x34>
    4d02:	ce 01       	movw	r24, r28
    4d04:	d4 dd       	rcall	.-1112   	; 0x48ae <lora_driver_setApplicationIdentifier>
    4d06:	81 11       	cpse	r24, r1
    4d08:	09 c0       	rjmp	.+18     	; 0x4d1c <lora_driver_setOtaaIdentity+0x34>
    4d0a:	c8 01       	movw	r24, r16
    4d0c:	e1 dd       	rcall	.-1086   	; 0x48d0 <lora_driver_setApplicationKey>
    4d0e:	81 11       	cpse	r24, r1
    4d10:	05 c0       	rjmp	.+10     	; 0x4d1c <lora_driver_setOtaaIdentity+0x34>
    4d12:	c7 01       	movw	r24, r14
    4d14:	bb dd       	rcall	.-1162   	; 0x488c <lora_driver_setDeviceIdentifier>
    4d16:	81 11       	cpse	r24, r1
    4d18:	01 c0       	rjmp	.+2      	; 0x4d1c <lora_driver_setOtaaIdentity+0x34>
    4d1a:	eb dd       	rcall	.-1066   	; 0x48f2 <lora_driver_saveMac>
    4d1c:	df 91       	pop	r29
    4d1e:	cf 91       	pop	r28
    4d20:	1f 91       	pop	r17
    4d22:	0f 91       	pop	r16
    4d24:	ff 90       	pop	r15
    4d26:	ef 90       	pop	r14
    4d28:	08 95       	ret

00004d2a <lora_driver_mapReturnCodeToText>:
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	ee 0f       	add	r30, r30
    4d30:	ff 1f       	adc	r31, r31
    4d32:	8e 0f       	add	r24, r30
    4d34:	9f 1f       	adc	r25, r31
    4d36:	fc 01       	movw	r30, r24
    4d38:	e8 5e       	subi	r30, 0xE8	; 232
    4d3a:	f7 4f       	sbci	r31, 0xF7	; 247
    4d3c:	81 81       	ldd	r24, Z+1	; 0x01
    4d3e:	92 81       	ldd	r25, Z+2	; 0x02
    4d40:	08 95       	ret

00004d42 <decode_port_no>:
    4d42:	dc 01       	movw	r26, r24
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	29 f1       	breq	.+74     	; 0x4d92 <decode_port_no+0x50>
    4d48:	fb 01       	movw	r30, r22
    4d4a:	20 81       	ld	r18, Z
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	01 90       	ld	r0, Z+
    4d50:	00 20       	and	r0, r0
    4d52:	e9 f7       	brne	.-6      	; 0x4d4e <decode_port_no+0xc>
    4d54:	31 97       	sbiw	r30, 0x01	; 1
    4d56:	e8 1b       	sub	r30, r24
    4d58:	f9 0b       	sbc	r31, r25
    4d5a:	82 2f       	mov	r24, r18
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	e8 17       	cp	r30, r24
    4d60:	f9 07       	cpc	r31, r25
    4d62:	c8 f0       	brcs	.+50     	; 0x4d96 <decode_port_no+0x54>
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	08 c0       	rjmp	.+16     	; 0x4d78 <decode_port_no+0x36>
    4d68:	88 0f       	add	r24, r24
    4d6a:	38 2f       	mov	r19, r24
    4d6c:	33 0f       	add	r19, r19
    4d6e:	33 0f       	add	r19, r19
    4d70:	83 0f       	add	r24, r19
    4d72:	80 53       	subi	r24, 0x30	; 48
    4d74:	89 0f       	add	r24, r25
    4d76:	2f 5f       	subi	r18, 0xFF	; 255
    4d78:	fd 01       	movw	r30, r26
    4d7a:	e2 0f       	add	r30, r18
    4d7c:	f1 1d       	adc	r31, r1
    4d7e:	90 81       	ld	r25, Z
    4d80:	30 ed       	ldi	r19, 0xD0	; 208
    4d82:	39 0f       	add	r19, r25
    4d84:	3a 30       	cpi	r19, 0x0A	; 10
    4d86:	10 f4       	brcc	.+4      	; 0x4d8c <decode_port_no+0x4a>
    4d88:	91 11       	cpse	r25, r1
    4d8a:	ee cf       	rjmp	.-36     	; 0x4d68 <decode_port_no+0x26>
    4d8c:	fb 01       	movw	r30, r22
    4d8e:	20 83       	st	Z, r18
    4d90:	08 95       	ret
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	08 95       	ret
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	08 95       	ret

00004d9a <decode_hexadecimal_string_bytes>:
    4d9a:	0f 93       	push	r16
    4d9c:	1f 93       	push	r17
    4d9e:	cf 93       	push	r28
    4da0:	df 93       	push	r29
    4da2:	dc 01       	movw	r26, r24
    4da4:	ea 01       	movw	r28, r20
    4da6:	20 97       	sbiw	r28, 0x00	; 0
    4da8:	e1 f1       	breq	.+120    	; 0x4e22 <decode_hexadecimal_string_bytes+0x88>
    4daa:	fa 01       	movw	r30, r20
    4dac:	01 90       	ld	r0, Z+
    4dae:	00 20       	and	r0, r0
    4db0:	e9 f7       	brne	.-6      	; 0x4dac <decode_hexadecimal_string_bytes+0x12>
    4db2:	31 97       	sbiw	r30, 0x01	; 1
    4db4:	e4 1b       	sub	r30, r20
    4db6:	f5 0b       	sbc	r31, r21
    4db8:	32 97       	sbiw	r30, 0x02	; 2
    4dba:	10 f5       	brcc	.+68     	; 0x4e00 <decode_hexadecimal_string_bytes+0x66>
    4dbc:	32 c0       	rjmp	.+100    	; 0x4e22 <decode_hexadecimal_string_bytes+0x88>
    4dbe:	8d 01       	movw	r16, r26
    4dc0:	04 0f       	add	r16, r20
    4dc2:	15 1f       	adc	r17, r21
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	ae 01       	movw	r20, r28
    4dc8:	42 0f       	add	r20, r18
    4dca:	53 1f       	adc	r21, r19
    4dcc:	fa 01       	movw	r30, r20
    4dce:	90 81       	ld	r25, Z
    4dd0:	91 34       	cpi	r25, 0x41	; 65
    4dd2:	28 f0       	brcs	.+10     	; 0x4dde <decode_hexadecimal_string_bytes+0x44>
    4dd4:	97 53       	subi	r25, 0x37	; 55
    4dd6:	59 2f       	mov	r21, r25
    4dd8:	52 95       	swap	r21
    4dda:	50 7f       	andi	r21, 0xF0	; 240
    4ddc:	03 c0       	rjmp	.+6      	; 0x4de4 <decode_hexadecimal_string_bytes+0x4a>
    4dde:	59 2f       	mov	r21, r25
    4de0:	52 95       	swap	r21
    4de2:	50 7f       	andi	r21, 0xF0	; 240
    4de4:	2c 0f       	add	r18, r28
    4de6:	3d 1f       	adc	r19, r29
    4de8:	f9 01       	movw	r30, r18
    4dea:	91 81       	ldd	r25, Z+1	; 0x01
    4dec:	91 34       	cpi	r25, 0x41	; 65
    4dee:	10 f0       	brcs	.+4      	; 0x4df4 <decode_hexadecimal_string_bytes+0x5a>
    4df0:	97 53       	subi	r25, 0x37	; 55
    4df2:	01 c0       	rjmp	.+2      	; 0x4df6 <decode_hexadecimal_string_bytes+0x5c>
    4df4:	90 53       	subi	r25, 0x30	; 48
    4df6:	95 0f       	add	r25, r21
    4df8:	f8 01       	movw	r30, r16
    4dfa:	90 83       	st	Z, r25
    4dfc:	8f 5f       	subi	r24, 0xFF	; 255
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <decode_hexadecimal_string_bytes+0x68>
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	28 2f       	mov	r18, r24
    4e04:	22 0f       	add	r18, r18
    4e06:	48 2f       	mov	r20, r24
    4e08:	50 e0       	ldi	r21, 0x00	; 0
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	01 90       	ld	r0, Z+
    4e0e:	00 20       	and	r0, r0
    4e10:	e9 f7       	brne	.-6      	; 0x4e0c <decode_hexadecimal_string_bytes+0x72>
    4e12:	31 97       	sbiw	r30, 0x01	; 1
    4e14:	ec 1b       	sub	r30, r28
    4e16:	fd 0b       	sbc	r31, r29
    4e18:	4e 17       	cp	r20, r30
    4e1a:	5f 07       	cpc	r21, r31
    4e1c:	10 f4       	brcc	.+4      	; 0x4e22 <decode_hexadecimal_string_bytes+0x88>
    4e1e:	86 13       	cpse	r24, r22
    4e20:	ce cf       	rjmp	.-100    	; 0x4dbe <decode_hexadecimal_string_bytes+0x24>
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	08 95       	ret

00004e2c <_serialCallBack>:
    4e2c:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <crc_sum.1945>
    4e30:	86 0f       	add	r24, r22
    4e32:	80 93 31 18 	sts	0x1831, r24	; 0x801831 <crc_sum.1945>
    4e36:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_mh_state>
    4e3a:	91 30       	cpi	r25, 0x01	; 1
    4e3c:	79 f0       	breq	.+30     	; 0x4e5c <_serialCallBack+0x30>
    4e3e:	28 f0       	brcs	.+10     	; 0x4e4a <_serialCallBack+0x1e>
    4e40:	92 30       	cpi	r25, 0x02	; 2
    4e42:	a9 f0       	breq	.+42     	; 0x4e6e <_serialCallBack+0x42>
    4e44:	93 30       	cpi	r25, 0x03	; 3
    4e46:	19 f1       	breq	.+70     	; 0x4e8e <_serialCallBack+0x62>
    4e48:	08 95       	ret
    4e4a:	6f 3f       	cpi	r22, 0xFF	; 255
    4e4c:	09 f0       	breq	.+2      	; 0x4e50 <_serialCallBack+0x24>
    4e4e:	48 c0       	rjmp	.+144    	; 0x4ee0 <_serialCallBack+0xb4>
    4e50:	10 92 31 18 	sts	0x1831, r1	; 0x801831 <crc_sum.1945>
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <_mh_state>
    4e5a:	08 95       	ret
    4e5c:	66 38       	cpi	r22, 0x86	; 134
    4e5e:	09 f0       	breq	.+2      	; 0x4e62 <_serialCallBack+0x36>
    4e60:	3f c0       	rjmp	.+126    	; 0x4ee0 <_serialCallBack+0xb4>
    4e62:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <inDex.1943>
    4e66:	82 e0       	ldi	r24, 0x02	; 2
    4e68:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <_mh_state>
    4e6c:	08 95       	ret
    4e6e:	e0 91 30 18 	lds	r30, 0x1830	; 0x801830 <inDex.1943>
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	8e 0f       	add	r24, r30
    4e76:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <inDex.1943>
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	e2 5d       	subi	r30, 0xD2	; 210
    4e7e:	f7 4e       	sbci	r31, 0xE7	; 231
    4e80:	60 83       	st	Z, r22
    4e82:	82 30       	cpi	r24, 0x02	; 2
    4e84:	69 f5       	brne	.+90     	; 0x4ee0 <_serialCallBack+0xb4>
    4e86:	83 e0       	ldi	r24, 0x03	; 3
    4e88:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <_mh_state>
    4e8c:	08 95       	ret
    4e8e:	90 91 30 18 	lds	r25, 0x1830	; 0x801830 <inDex.1943>
    4e92:	21 e0       	ldi	r18, 0x01	; 1
    4e94:	29 0f       	add	r18, r25
    4e96:	20 93 30 18 	sts	0x1830, r18	; 0x801830 <inDex.1943>
    4e9a:	96 30       	cpi	r25, 0x06	; 6
    4e9c:	09 f5       	brne	.+66     	; 0x4ee0 <_serialCallBack+0xb4>
    4e9e:	81 11       	cpse	r24, r1
    4ea0:	0e c0       	rjmp	.+28     	; 0x4ebe <_serialCallBack+0x92>
    4ea2:	ee e2       	ldi	r30, 0x2E	; 46
    4ea4:	f8 e1       	ldi	r31, 0x18	; 24
    4ea6:	80 81       	ld	r24, Z
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	98 2f       	mov	r25, r24
    4eac:	88 27       	eor	r24, r24
    4eae:	21 81       	ldd	r18, Z+1	; 0x01
    4eb0:	82 0f       	add	r24, r18
    4eb2:	91 1d       	adc	r25, r1
    4eb4:	90 93 36 18 	sts	0x1836, r25	; 0x801836 <_ppm+0x1>
    4eb8:	80 93 35 18 	sts	0x1835, r24	; 0x801835 <_ppm>
    4ebc:	04 c0       	rjmp	.+8      	; 0x4ec6 <_serialCallBack+0x9a>
    4ebe:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_ppm+0x1>
    4ec2:	10 92 35 18 	sts	0x1835, r1	; 0x801835 <_ppm>
    4ec6:	10 92 34 18 	sts	0x1834, r1	; 0x801834 <_mh_state>
    4eca:	e0 91 32 18 	lds	r30, 0x1832	; 0x801832 <_appCallBack>
    4ece:	f0 91 33 18 	lds	r31, 0x1833	; 0x801833 <_appCallBack+0x1>
    4ed2:	30 97       	sbiw	r30, 0x00	; 0
    4ed4:	29 f0       	breq	.+10     	; 0x4ee0 <_serialCallBack+0xb4>
    4ed6:	80 91 35 18 	lds	r24, 0x1835	; 0x801835 <_ppm>
    4eda:	90 91 36 18 	lds	r25, 0x1836	; 0x801836 <_ppm+0x1>
    4ede:	19 95       	eicall
    4ee0:	08 95       	ret

00004ee2 <mh_z19_initialise>:
    4ee2:	8f 92       	push	r8
    4ee4:	9f 92       	push	r9
    4ee6:	af 92       	push	r10
    4ee8:	cf 92       	push	r12
    4eea:	ef 92       	push	r14
    4eec:	0f 93       	push	r16
    4eee:	0f 2e       	mov	r0, r31
    4ef0:	f6 e1       	ldi	r31, 0x16	; 22
    4ef2:	8f 2e       	mov	r8, r31
    4ef4:	f7 e2       	ldi	r31, 0x27	; 39
    4ef6:	9f 2e       	mov	r9, r31
    4ef8:	f0 2d       	mov	r31, r0
    4efa:	68 94       	set
    4efc:	aa 24       	eor	r10, r10
    4efe:	a4 f8       	bld	r10, 4
    4f00:	68 94       	set
    4f02:	cc 24       	eor	r12, r12
    4f04:	c4 f8       	bld	r12, 4
    4f06:	e1 2c       	mov	r14, r1
    4f08:	00 e0       	ldi	r16, 0x00	; 0
    4f0a:	23 e0       	ldi	r18, 0x03	; 3
    4f0c:	40 e8       	ldi	r20, 0x80	; 128
    4f0e:	55 e2       	ldi	r21, 0x25	; 37
    4f10:	60 e0       	ldi	r22, 0x00	; 0
    4f12:	70 e0       	ldi	r23, 0x00	; 0
    4f14:	73 d0       	rcall	.+230    	; 0x4ffc <serial_create>
    4f16:	90 93 38 18 	sts	0x1838, r25	; 0x801838 <_serial+0x1>
    4f1a:	80 93 37 18 	sts	0x1837, r24	; 0x801837 <_serial>
    4f1e:	0f 91       	pop	r16
    4f20:	ef 90       	pop	r14
    4f22:	cf 90       	pop	r12
    4f24:	af 90       	pop	r10
    4f26:	9f 90       	pop	r9
    4f28:	8f 90       	pop	r8
    4f2a:	08 95       	ret

00004f2c <mh_z19_injectCallBack>:
    4f2c:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_appCallBack+0x1>
    4f30:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_appCallBack>
    4f34:	08 95       	ret

00004f36 <mh_z19_takeMeassuring>:
    4f36:	cf 93       	push	r28
    4f38:	df 93       	push	r29
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	29 97       	sbiw	r28, 0x09	; 9
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	de bf       	out	0x3e, r29	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	cd bf       	out	0x3d, r28	; 61
    4f4a:	89 e0       	ldi	r24, 0x09	; 9
    4f4c:	e2 e4       	ldi	r30, 0x42	; 66
    4f4e:	f2 e0       	ldi	r31, 0x02	; 2
    4f50:	9e 01       	movw	r18, r28
    4f52:	2f 5f       	subi	r18, 0xFF	; 255
    4f54:	3f 4f       	sbci	r19, 0xFF	; 255
    4f56:	d9 01       	movw	r26, r18
    4f58:	01 90       	ld	r0, Z+
    4f5a:	0d 92       	st	X+, r0
    4f5c:	8a 95       	dec	r24
    4f5e:	e1 f7       	brne	.-8      	; 0x4f58 <mh_z19_takeMeassuring+0x22>
    4f60:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_ppm+0x1>
    4f64:	10 92 35 18 	sts	0x1835, r1	; 0x801835 <_ppm>
    4f68:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <_serial>
    4f6c:	90 91 38 18 	lds	r25, 0x1838	; 0x801838 <_serial+0x1>
    4f70:	00 97       	sbiw	r24, 0x00	; 0
    4f72:	31 f0       	breq	.+12     	; 0x4f80 <mh_z19_takeMeassuring+0x4a>
    4f74:	42 2f       	mov	r20, r18
    4f76:	53 2f       	mov	r21, r19
    4f78:	69 e0       	ldi	r22, 0x09	; 9
    4f7a:	0c d1       	rcall	.+536    	; 0x5194 <serial_sendBytes>
    4f7c:	80 e0       	ldi	r24, 0x00	; 0
    4f7e:	01 c0       	rjmp	.+2      	; 0x4f82 <mh_z19_takeMeassuring+0x4c>
    4f80:	82 e0       	ldi	r24, 0x02	; 2
    4f82:	29 96       	adiw	r28, 0x09	; 9
    4f84:	0f b6       	in	r0, 0x3f	; 63
    4f86:	f8 94       	cli
    4f88:	de bf       	out	0x3e, r29	; 62
    4f8a:	0f be       	out	0x3f, r0	; 63
    4f8c:	cd bf       	out	0x3d, r28	; 61
    4f8e:	df 91       	pop	r29
    4f90:	cf 91       	pop	r28
    4f92:	08 95       	ret

00004f94 <rc_servo_setPosition>:
    4f94:	65 36       	cpi	r22, 0x65	; 101
    4f96:	0c f0       	brlt	.+2      	; 0x4f9a <rc_servo_setPosition+0x6>
    4f98:	64 e6       	ldi	r22, 0x64	; 100
    4f9a:	6c 39       	cpi	r22, 0x9C	; 156
    4f9c:	0c f4       	brge	.+2      	; 0x4fa0 <rc_servo_setPosition+0xc>
    4f9e:	6c e9       	ldi	r22, 0x9C	; 156
    4fa0:	96 ef       	ldi	r25, 0xF6	; 246
    4fa2:	69 02       	muls	r22, r25
    4fa4:	b0 01       	movw	r22, r0
    4fa6:	11 24       	eor	r1, r1
    4fa8:	68 54       	subi	r22, 0x48	; 72
    4faa:	74 4f       	sbci	r23, 0xF4	; 244
    4fac:	81 11       	cpse	r24, r1
    4fae:	05 c0       	rjmp	.+10     	; 0x4fba <rc_servo_setPosition+0x26>
    4fb0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4fb4:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4fb8:	08 95       	ret
    4fba:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4fbe:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4fc2:	08 95       	ret

00004fc4 <rc_servo_initialise>:
    4fc4:	ea e0       	ldi	r30, 0x0A	; 10
    4fc6:	f1 e0       	ldi	r31, 0x01	; 1
    4fc8:	80 81       	ld	r24, Z
    4fca:	88 61       	ori	r24, 0x18	; 24
    4fcc:	80 83       	st	Z, r24
    4fce:	8f e3       	ldi	r24, 0x3F	; 63
    4fd0:	9c e9       	ldi	r25, 0x9C	; 156
    4fd2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4fd6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4fda:	60 e0       	ldi	r22, 0x00	; 0
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	da df       	rcall	.-76     	; 0x4f94 <rc_servo_setPosition>
    4fe0:	60 e0       	ldi	r22, 0x00	; 0
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	d7 df       	rcall	.-82     	; 0x4f94 <rc_servo_setPosition>
    4fe6:	e0 e2       	ldi	r30, 0x20	; 32
    4fe8:	f1 e0       	ldi	r31, 0x01	; 1
    4fea:	80 81       	ld	r24, Z
    4fec:	82 6a       	ori	r24, 0xA2	; 162
    4fee:	80 83       	st	Z, r24
    4ff0:	e1 e2       	ldi	r30, 0x21	; 33
    4ff2:	f1 e0       	ldi	r31, 0x01	; 1
    4ff4:	80 81       	ld	r24, Z
    4ff6:	8a 61       	ori	r24, 0x1A	; 26
    4ff8:	80 83       	st	Z, r24
    4ffa:	08 95       	ret

00004ffc <serial_create>:
    4ffc:	2f 92       	push	r2
    4ffe:	3f 92       	push	r3
    5000:	4f 92       	push	r4
    5002:	5f 92       	push	r5
    5004:	6f 92       	push	r6
    5006:	7f 92       	push	r7
    5008:	8f 92       	push	r8
    500a:	9f 92       	push	r9
    500c:	af 92       	push	r10
    500e:	cf 92       	push	r12
    5010:	ef 92       	push	r14
    5012:	ff 92       	push	r15
    5014:	0f 93       	push	r16
    5016:	1f 93       	push	r17
    5018:	cf 93       	push	r28
    501a:	df 93       	push	r29
    501c:	cd b7       	in	r28, 0x3d	; 61
    501e:	de b7       	in	r29, 0x3e	; 62
    5020:	f8 2e       	mov	r15, r24
    5022:	2a 01       	movw	r4, r20
    5024:	3b 01       	movw	r6, r22
    5026:	88 e0       	ldi	r24, 0x08	; 8
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <malloc>
    502e:	8c 01       	movw	r16, r24
    5030:	8f 2d       	mov	r24, r15
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	fc 01       	movw	r30, r24
    5036:	ee 0f       	add	r30, r30
    5038:	ff 1f       	adc	r31, r31
    503a:	e7 5c       	subi	r30, 0xC7	; 199
    503c:	f7 4e       	sbci	r31, 0xE7	; 231
    503e:	11 83       	std	Z+1, r17	; 0x01
    5040:	00 83       	st	Z, r16
    5042:	01 15       	cp	r16, r1
    5044:	11 05       	cpc	r17, r1
    5046:	09 f4       	brne	.+2      	; 0x504a <serial_create+0x4e>
    5048:	68 c0       	rjmp	.+208    	; 0x511a <serial_create+0x11e>
    504a:	88 0f       	add	r24, r24
    504c:	99 1f       	adc	r25, r25
    504e:	fc 01       	movw	r30, r24
    5050:	e5 5f       	subi	r30, 0xF5	; 245
    5052:	fd 4f       	sbci	r31, 0xFD	; 253
    5054:	80 81       	ld	r24, Z
    5056:	91 81       	ldd	r25, Z+1	; 0x01
    5058:	d8 01       	movw	r26, r16
    505a:	8d 93       	st	X+, r24
    505c:	9c 93       	st	X, r25
    505e:	8c 2d       	mov	r24, r12
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	88 0f       	add	r24, r24
    5064:	99 1f       	adc	r25, r25
    5066:	88 0f       	add	r24, r24
    5068:	99 1f       	adc	r25, r25
    506a:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <malloc>
    506e:	1c 01       	movw	r2, r24
    5070:	86 e0       	ldi	r24, 0x06	; 6
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <malloc>
    5078:	7c 01       	movw	r14, r24
    507a:	4c 2d       	mov	r20, r12
    507c:	b1 01       	movw	r22, r2
    507e:	ef d6       	rcall	.+3550   	; 0x5e5e <fifo_init>
    5080:	f8 01       	movw	r30, r16
    5082:	f5 82       	std	Z+5, r15	; 0x05
    5084:	e4 82       	std	Z+4, r14	; 0x04
    5086:	8a 2d       	mov	r24, r10
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	88 0f       	add	r24, r24
    508c:	99 1f       	adc	r25, r25
    508e:	88 0f       	add	r24, r24
    5090:	99 1f       	adc	r25, r25
    5092:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <malloc>
    5096:	1c 01       	movw	r2, r24
    5098:	86 e0       	ldi	r24, 0x06	; 6
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <malloc>
    50a0:	7c 01       	movw	r14, r24
    50a2:	4a 2d       	mov	r20, r10
    50a4:	b1 01       	movw	r22, r2
    50a6:	db d6       	rcall	.+3510   	; 0x5e5e <fifo_init>
    50a8:	d8 01       	movw	r26, r16
    50aa:	13 96       	adiw	r26, 0x03	; 3
    50ac:	fc 92       	st	X, r15
    50ae:	ee 92       	st	-X, r14
    50b0:	12 97       	sbiw	r26, 0x02	; 2
    50b2:	17 96       	adiw	r26, 0x07	; 7
    50b4:	9c 92       	st	X, r9
    50b6:	8e 92       	st	-X, r8
    50b8:	16 97       	sbiw	r26, 0x06	; 6
    50ba:	ff b6       	in	r15, 0x3f	; 63
    50bc:	f8 94       	cli
    50be:	ed 91       	ld	r30, X+
    50c0:	fc 91       	ld	r31, X
    50c2:	11 97       	sbiw	r26, 0x01	; 1
    50c4:	36 97       	sbiw	r30, 0x06	; 6
    50c6:	80 81       	ld	r24, Z
    50c8:	82 60       	ori	r24, 0x02	; 2
    50ca:	80 83       	st	Z, r24
    50cc:	8d 90       	ld	r8, X+
    50ce:	9c 90       	ld	r9, X
    50d0:	c3 01       	movw	r24, r6
    50d2:	b2 01       	movw	r22, r4
    50d4:	2c d9       	rcall	.-3496   	; 0x432e <__floatunsisf>
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	40 e0       	ldi	r20, 0x00	; 0
    50dc:	51 e4       	ldi	r21, 0x41	; 65
    50de:	dc d7       	rcall	.+4024   	; 0x6098 <__mulsf3>
    50e0:	9b 01       	movw	r18, r22
    50e2:	ac 01       	movw	r20, r24
    50e4:	60 e0       	ldi	r22, 0x00	; 0
    50e6:	74 e2       	ldi	r23, 0x24	; 36
    50e8:	84 e7       	ldi	r24, 0x74	; 116
    50ea:	9b e4       	ldi	r25, 0x4B	; 75
    50ec:	3b d7       	rcall	.+3702   	; 0x5f64 <__divsf3>
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e8       	ldi	r20, 0x80	; 128
    50f4:	5f e3       	ldi	r21, 0x3F	; 63
    50f6:	cf d6       	rcall	.+3486   	; 0x5e96 <__subsf3>
    50f8:	ee d8       	rcall	.-3620   	; 0x42d6 <__fixunssfsi>
    50fa:	f4 01       	movw	r30, r8
    50fc:	32 97       	sbiw	r30, 0x02	; 2
    50fe:	60 83       	st	Z, r22
    5100:	d8 01       	movw	r26, r16
    5102:	ed 91       	ld	r30, X+
    5104:	fc 91       	ld	r31, X
    5106:	11 97       	sbiw	r26, 0x01	; 1
    5108:	35 97       	sbiw	r30, 0x05	; 5
    510a:	88 e9       	ldi	r24, 0x98	; 152
    510c:	80 83       	st	Z, r24
    510e:	ed 91       	ld	r30, X+
    5110:	fc 91       	ld	r31, X
    5112:	34 97       	sbiw	r30, 0x04	; 4
    5114:	86 e0       	ldi	r24, 0x06	; 6
    5116:	80 83       	st	Z, r24
    5118:	ff be       	out	0x3f, r15	; 63
    511a:	c8 01       	movw	r24, r16
    511c:	df 91       	pop	r29
    511e:	cf 91       	pop	r28
    5120:	1f 91       	pop	r17
    5122:	0f 91       	pop	r16
    5124:	ff 90       	pop	r15
    5126:	ef 90       	pop	r14
    5128:	cf 90       	pop	r12
    512a:	af 90       	pop	r10
    512c:	9f 90       	pop	r9
    512e:	8f 90       	pop	r8
    5130:	7f 90       	pop	r7
    5132:	6f 90       	pop	r6
    5134:	5f 90       	pop	r5
    5136:	4f 90       	pop	r4
    5138:	3f 90       	pop	r3
    513a:	2f 90       	pop	r2
    513c:	08 95       	ret

0000513e <serial_sendByte>:
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	dc 01       	movw	r26, r24
    5144:	89 2b       	or	r24, r25
    5146:	01 f1       	breq	.+64     	; 0x5188 <serial_sendByte+0x4a>
    5148:	12 96       	adiw	r26, 0x02	; 2
    514a:	ed 91       	ld	r30, X+
    514c:	fc 91       	ld	r31, X
    514e:	13 97       	sbiw	r26, 0x03	; 3
    5150:	93 81       	ldd	r25, Z+3	; 0x03
    5152:	82 81       	ldd	r24, Z+2	; 0x02
    5154:	25 81       	ldd	r18, Z+5	; 0x05
    5156:	98 1b       	sub	r25, r24
    5158:	92 23       	and	r25, r18
    515a:	84 81       	ldd	r24, Z+4	; 0x04
    515c:	98 17       	cp	r25, r24
    515e:	b1 f0       	breq	.+44     	; 0x518c <serial_sendByte+0x4e>
    5160:	83 81       	ldd	r24, Z+3	; 0x03
    5162:	26 95       	lsr	r18
    5164:	28 23       	and	r18, r24
    5166:	c0 81       	ld	r28, Z
    5168:	d1 81       	ldd	r29, Z+1	; 0x01
    516a:	c2 0f       	add	r28, r18
    516c:	d1 1d       	adc	r29, r1
    516e:	68 83       	st	Y, r22
    5170:	8f 5f       	subi	r24, 0xFF	; 255
    5172:	95 81       	ldd	r25, Z+5	; 0x05
    5174:	89 23       	and	r24, r25
    5176:	83 83       	std	Z+3, r24	; 0x03
    5178:	ed 91       	ld	r30, X+
    517a:	fc 91       	ld	r31, X
    517c:	35 97       	sbiw	r30, 0x05	; 5
    517e:	80 81       	ld	r24, Z
    5180:	80 62       	ori	r24, 0x20	; 32
    5182:	80 83       	st	Z, r24
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	03 c0       	rjmp	.+6      	; 0x518e <serial_sendByte+0x50>
    5188:	81 e0       	ldi	r24, 0x01	; 1
    518a:	01 c0       	rjmp	.+2      	; 0x518e <serial_sendByte+0x50>
    518c:	82 e0       	ldi	r24, 0x02	; 2
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	08 95       	ret

00005194 <serial_sendBytes>:
    5194:	ef 92       	push	r14
    5196:	ff 92       	push	r15
    5198:	0f 93       	push	r16
    519a:	1f 93       	push	r17
    519c:	cf 93       	push	r28
    519e:	df 93       	push	r29
    51a0:	7c 01       	movw	r14, r24
    51a2:	00 97       	sbiw	r24, 0x00	; 0
    51a4:	09 f4       	brne	.+2      	; 0x51a8 <serial_sendBytes+0x14>
    51a6:	41 c0       	rjmp	.+130    	; 0x522a <serial_sendBytes+0x96>
    51a8:	dc 01       	movw	r26, r24
    51aa:	12 96       	adiw	r26, 0x02	; 2
    51ac:	ed 91       	ld	r30, X+
    51ae:	fc 91       	ld	r31, X
    51b0:	13 97       	sbiw	r26, 0x03	; 3
    51b2:	93 81       	ldd	r25, Z+3	; 0x03
    51b4:	82 81       	ldd	r24, Z+2	; 0x02
    51b6:	98 1b       	sub	r25, r24
    51b8:	85 81       	ldd	r24, Z+5	; 0x05
    51ba:	98 23       	and	r25, r24
    51bc:	84 81       	ldd	r24, Z+4	; 0x04
    51be:	89 1b       	sub	r24, r25
    51c0:	86 17       	cp	r24, r22
    51c2:	a8 f1       	brcs	.+106    	; 0x522e <serial_sendBytes+0x9a>
    51c4:	66 23       	and	r22, r22
    51c6:	41 f1       	breq	.+80     	; 0x5218 <serial_sendBytes+0x84>
    51c8:	84 2f       	mov	r24, r20
    51ca:	95 2f       	mov	r25, r21
    51cc:	dc 01       	movw	r26, r24
    51ce:	61 50       	subi	r22, 0x01	; 1
    51d0:	46 2f       	mov	r20, r22
    51d2:	50 e0       	ldi	r21, 0x00	; 0
    51d4:	4f 5f       	subi	r20, 0xFF	; 255
    51d6:	5f 4f       	sbci	r21, 0xFF	; 255
    51d8:	48 0f       	add	r20, r24
    51da:	59 1f       	adc	r21, r25
    51dc:	e7 01       	movw	r28, r14
    51de:	ea 81       	ldd	r30, Y+2	; 0x02
    51e0:	fb 81       	ldd	r31, Y+3	; 0x03
    51e2:	93 81       	ldd	r25, Z+3	; 0x03
    51e4:	82 81       	ldd	r24, Z+2	; 0x02
    51e6:	25 81       	ldd	r18, Z+5	; 0x05
    51e8:	98 1b       	sub	r25, r24
    51ea:	92 23       	and	r25, r18
    51ec:	84 81       	ldd	r24, Z+4	; 0x04
    51ee:	98 17       	cp	r25, r24
    51f0:	79 f0       	breq	.+30     	; 0x5210 <serial_sendBytes+0x7c>
    51f2:	8c 91       	ld	r24, X
    51f4:	93 81       	ldd	r25, Z+3	; 0x03
    51f6:	26 95       	lsr	r18
    51f8:	29 23       	and	r18, r25
    51fa:	60 81       	ld	r22, Z
    51fc:	71 81       	ldd	r23, Z+1	; 0x01
    51fe:	8b 01       	movw	r16, r22
    5200:	02 0f       	add	r16, r18
    5202:	11 1d       	adc	r17, r1
    5204:	e8 01       	movw	r28, r16
    5206:	88 83       	st	Y, r24
    5208:	9f 5f       	subi	r25, 0xFF	; 255
    520a:	85 81       	ldd	r24, Z+5	; 0x05
    520c:	98 23       	and	r25, r24
    520e:	93 83       	std	Z+3, r25	; 0x03
    5210:	11 96       	adiw	r26, 0x01	; 1
    5212:	a4 17       	cp	r26, r20
    5214:	b5 07       	cpc	r27, r21
    5216:	11 f7       	brne	.-60     	; 0x51dc <serial_sendBytes+0x48>
    5218:	d7 01       	movw	r26, r14
    521a:	ed 91       	ld	r30, X+
    521c:	fc 91       	ld	r31, X
    521e:	35 97       	sbiw	r30, 0x05	; 5
    5220:	80 81       	ld	r24, Z
    5222:	80 62       	ori	r24, 0x20	; 32
    5224:	80 83       	st	Z, r24
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	03 c0       	rjmp	.+6      	; 0x5230 <serial_sendBytes+0x9c>
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <serial_sendBytes+0x9c>
    522e:	82 e0       	ldi	r24, 0x02	; 2
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	1f 91       	pop	r17
    5236:	0f 91       	pop	r16
    5238:	ff 90       	pop	r15
    523a:	ef 90       	pop	r14
    523c:	08 95       	ret

0000523e <serial_getByte>:
    523e:	00 97       	sbiw	r24, 0x00	; 0
    5240:	d1 f0       	breq	.+52     	; 0x5276 <serial_getByte+0x38>
    5242:	dc 01       	movw	r26, r24
    5244:	14 96       	adiw	r26, 0x04	; 4
    5246:	ed 91       	ld	r30, X+
    5248:	fc 91       	ld	r31, X
    524a:	15 97       	sbiw	r26, 0x05	; 5
    524c:	93 81       	ldd	r25, Z+3	; 0x03
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	98 17       	cp	r25, r24
    5252:	99 f0       	breq	.+38     	; 0x527a <serial_getByte+0x3c>
    5254:	92 81       	ldd	r25, Z+2	; 0x02
    5256:	85 81       	ldd	r24, Z+5	; 0x05
    5258:	86 95       	lsr	r24
    525a:	89 23       	and	r24, r25
    525c:	a0 81       	ld	r26, Z
    525e:	b1 81       	ldd	r27, Z+1	; 0x01
    5260:	a8 0f       	add	r26, r24
    5262:	b1 1d       	adc	r27, r1
    5264:	8c 91       	ld	r24, X
    5266:	db 01       	movw	r26, r22
    5268:	8c 93       	st	X, r24
    526a:	9f 5f       	subi	r25, 0xFF	; 255
    526c:	85 81       	ldd	r24, Z+5	; 0x05
    526e:	98 23       	and	r25, r24
    5270:	92 83       	std	Z+2, r25	; 0x02
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	08 95       	ret
    5276:	81 e0       	ldi	r24, 0x01	; 1
    5278:	08 95       	ret
    527a:	83 e0       	ldi	r24, 0x03	; 3
    527c:	08 95       	ret

0000527e <__vector_25>:
    527e:	1f 92       	push	r1
    5280:	0f 92       	push	r0
    5282:	0f b6       	in	r0, 0x3f	; 63
    5284:	0f 92       	push	r0
    5286:	11 24       	eor	r1, r1
    5288:	0b b6       	in	r0, 0x3b	; 59
    528a:	0f 92       	push	r0
    528c:	2f 93       	push	r18
    528e:	3f 93       	push	r19
    5290:	4f 93       	push	r20
    5292:	5f 93       	push	r21
    5294:	6f 93       	push	r22
    5296:	7f 93       	push	r23
    5298:	8f 93       	push	r24
    529a:	9f 93       	push	r25
    529c:	af 93       	push	r26
    529e:	bf 93       	push	r27
    52a0:	cf 93       	push	r28
    52a2:	df 93       	push	r29
    52a4:	ef 93       	push	r30
    52a6:	ff 93       	push	r31
    52a8:	a0 91 39 18 	lds	r26, 0x1839	; 0x801839 <_ser_handle>
    52ac:	b0 91 3a 18 	lds	r27, 0x183A	; 0x80183a <_ser_handle+0x1>
    52b0:	10 97       	sbiw	r26, 0x00	; 0
    52b2:	11 f1       	breq	.+68     	; 0x52f8 <__vector_25+0x7a>
    52b4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    52b8:	14 96       	adiw	r26, 0x04	; 4
    52ba:	ed 91       	ld	r30, X+
    52bc:	fc 91       	ld	r31, X
    52be:	15 97       	sbiw	r26, 0x05	; 5
    52c0:	93 81       	ldd	r25, Z+3	; 0x03
    52c2:	82 81       	ldd	r24, Z+2	; 0x02
    52c4:	25 81       	ldd	r18, Z+5	; 0x05
    52c6:	98 1b       	sub	r25, r24
    52c8:	92 23       	and	r25, r18
    52ca:	84 81       	ldd	r24, Z+4	; 0x04
    52cc:	98 17       	cp	r25, r24
    52ce:	61 f0       	breq	.+24     	; 0x52e8 <__vector_25+0x6a>
    52d0:	83 81       	ldd	r24, Z+3	; 0x03
    52d2:	26 95       	lsr	r18
    52d4:	28 23       	and	r18, r24
    52d6:	c0 81       	ld	r28, Z
    52d8:	d1 81       	ldd	r29, Z+1	; 0x01
    52da:	c2 0f       	add	r28, r18
    52dc:	d1 1d       	adc	r29, r1
    52de:	68 83       	st	Y, r22
    52e0:	8f 5f       	subi	r24, 0xFF	; 255
    52e2:	95 81       	ldd	r25, Z+5	; 0x05
    52e4:	89 23       	and	r24, r25
    52e6:	83 83       	std	Z+3, r24	; 0x03
    52e8:	16 96       	adiw	r26, 0x06	; 6
    52ea:	ed 91       	ld	r30, X+
    52ec:	fc 91       	ld	r31, X
    52ee:	17 97       	sbiw	r26, 0x07	; 7
    52f0:	30 97       	sbiw	r30, 0x00	; 0
    52f2:	11 f0       	breq	.+4      	; 0x52f8 <__vector_25+0x7a>
    52f4:	cd 01       	movw	r24, r26
    52f6:	19 95       	eicall
    52f8:	ff 91       	pop	r31
    52fa:	ef 91       	pop	r30
    52fc:	df 91       	pop	r29
    52fe:	cf 91       	pop	r28
    5300:	bf 91       	pop	r27
    5302:	af 91       	pop	r26
    5304:	9f 91       	pop	r25
    5306:	8f 91       	pop	r24
    5308:	7f 91       	pop	r23
    530a:	6f 91       	pop	r22
    530c:	5f 91       	pop	r21
    530e:	4f 91       	pop	r20
    5310:	3f 91       	pop	r19
    5312:	2f 91       	pop	r18
    5314:	0f 90       	pop	r0
    5316:	0b be       	out	0x3b, r0	; 59
    5318:	0f 90       	pop	r0
    531a:	0f be       	out	0x3f, r0	; 63
    531c:	0f 90       	pop	r0
    531e:	1f 90       	pop	r1
    5320:	18 95       	reti

00005322 <__vector_26>:
    5322:	1f 92       	push	r1
    5324:	0f 92       	push	r0
    5326:	0f b6       	in	r0, 0x3f	; 63
    5328:	0f 92       	push	r0
    532a:	11 24       	eor	r1, r1
    532c:	0b b6       	in	r0, 0x3b	; 59
    532e:	0f 92       	push	r0
    5330:	2f 93       	push	r18
    5332:	8f 93       	push	r24
    5334:	9f 93       	push	r25
    5336:	af 93       	push	r26
    5338:	bf 93       	push	r27
    533a:	ef 93       	push	r30
    533c:	ff 93       	push	r31
    533e:	e0 91 39 18 	lds	r30, 0x1839	; 0x801839 <_ser_handle>
    5342:	f0 91 3a 18 	lds	r31, 0x183A	; 0x80183a <_ser_handle+0x1>
    5346:	30 97       	sbiw	r30, 0x00	; 0
    5348:	b9 f0       	breq	.+46     	; 0x5378 <__vector_26+0x56>
    534a:	02 80       	ldd	r0, Z+2	; 0x02
    534c:	f3 81       	ldd	r31, Z+3	; 0x03
    534e:	e0 2d       	mov	r30, r0
    5350:	93 81       	ldd	r25, Z+3	; 0x03
    5352:	82 81       	ldd	r24, Z+2	; 0x02
    5354:	98 17       	cp	r25, r24
    5356:	b1 f0       	breq	.+44     	; 0x5384 <__vector_26+0x62>
    5358:	92 81       	ldd	r25, Z+2	; 0x02
    535a:	85 81       	ldd	r24, Z+5	; 0x05
    535c:	28 2f       	mov	r18, r24
    535e:	26 95       	lsr	r18
    5360:	29 23       	and	r18, r25
    5362:	a0 81       	ld	r26, Z
    5364:	b1 81       	ldd	r27, Z+1	; 0x01
    5366:	a2 0f       	add	r26, r18
    5368:	b1 1d       	adc	r27, r1
    536a:	2c 91       	ld	r18, X
    536c:	9f 5f       	subi	r25, 0xFF	; 255
    536e:	89 23       	and	r24, r25
    5370:	82 83       	std	Z+2, r24	; 0x02
    5372:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5376:	0b c0       	rjmp	.+22     	; 0x538e <__vector_26+0x6c>
    5378:	e1 ec       	ldi	r30, 0xC1	; 193
    537a:	f0 e0       	ldi	r31, 0x00	; 0
    537c:	80 81       	ld	r24, Z
    537e:	8f 7d       	andi	r24, 0xDF	; 223
    5380:	80 83       	st	Z, r24
    5382:	05 c0       	rjmp	.+10     	; 0x538e <__vector_26+0x6c>
    5384:	e1 ec       	ldi	r30, 0xC1	; 193
    5386:	f0 e0       	ldi	r31, 0x00	; 0
    5388:	80 81       	ld	r24, Z
    538a:	8f 7d       	andi	r24, 0xDF	; 223
    538c:	80 83       	st	Z, r24
    538e:	ff 91       	pop	r31
    5390:	ef 91       	pop	r30
    5392:	bf 91       	pop	r27
    5394:	af 91       	pop	r26
    5396:	9f 91       	pop	r25
    5398:	8f 91       	pop	r24
    539a:	2f 91       	pop	r18
    539c:	0f 90       	pop	r0
    539e:	0b be       	out	0x3b, r0	; 59
    53a0:	0f 90       	pop	r0
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	0f 90       	pop	r0
    53a6:	1f 90       	pop	r1
    53a8:	18 95       	reti

000053aa <__vector_36>:
    53aa:	1f 92       	push	r1
    53ac:	0f 92       	push	r0
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	0f 92       	push	r0
    53b2:	11 24       	eor	r1, r1
    53b4:	0b b6       	in	r0, 0x3b	; 59
    53b6:	0f 92       	push	r0
    53b8:	2f 93       	push	r18
    53ba:	3f 93       	push	r19
    53bc:	4f 93       	push	r20
    53be:	5f 93       	push	r21
    53c0:	6f 93       	push	r22
    53c2:	7f 93       	push	r23
    53c4:	8f 93       	push	r24
    53c6:	9f 93       	push	r25
    53c8:	af 93       	push	r26
    53ca:	bf 93       	push	r27
    53cc:	cf 93       	push	r28
    53ce:	df 93       	push	r29
    53d0:	ef 93       	push	r30
    53d2:	ff 93       	push	r31
    53d4:	a0 91 3b 18 	lds	r26, 0x183B	; 0x80183b <_ser_handle+0x2>
    53d8:	b0 91 3c 18 	lds	r27, 0x183C	; 0x80183c <_ser_handle+0x3>
    53dc:	10 97       	sbiw	r26, 0x00	; 0
    53de:	11 f1       	breq	.+68     	; 0x5424 <__vector_36+0x7a>
    53e0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    53e4:	14 96       	adiw	r26, 0x04	; 4
    53e6:	ed 91       	ld	r30, X+
    53e8:	fc 91       	ld	r31, X
    53ea:	15 97       	sbiw	r26, 0x05	; 5
    53ec:	93 81       	ldd	r25, Z+3	; 0x03
    53ee:	82 81       	ldd	r24, Z+2	; 0x02
    53f0:	25 81       	ldd	r18, Z+5	; 0x05
    53f2:	98 1b       	sub	r25, r24
    53f4:	92 23       	and	r25, r18
    53f6:	84 81       	ldd	r24, Z+4	; 0x04
    53f8:	98 17       	cp	r25, r24
    53fa:	61 f0       	breq	.+24     	; 0x5414 <__vector_36+0x6a>
    53fc:	83 81       	ldd	r24, Z+3	; 0x03
    53fe:	26 95       	lsr	r18
    5400:	28 23       	and	r18, r24
    5402:	c0 81       	ld	r28, Z
    5404:	d1 81       	ldd	r29, Z+1	; 0x01
    5406:	c2 0f       	add	r28, r18
    5408:	d1 1d       	adc	r29, r1
    540a:	68 83       	st	Y, r22
    540c:	8f 5f       	subi	r24, 0xFF	; 255
    540e:	95 81       	ldd	r25, Z+5	; 0x05
    5410:	89 23       	and	r24, r25
    5412:	83 83       	std	Z+3, r24	; 0x03
    5414:	16 96       	adiw	r26, 0x06	; 6
    5416:	ed 91       	ld	r30, X+
    5418:	fc 91       	ld	r31, X
    541a:	17 97       	sbiw	r26, 0x07	; 7
    541c:	30 97       	sbiw	r30, 0x00	; 0
    541e:	11 f0       	breq	.+4      	; 0x5424 <__vector_36+0x7a>
    5420:	cd 01       	movw	r24, r26
    5422:	19 95       	eicall
    5424:	ff 91       	pop	r31
    5426:	ef 91       	pop	r30
    5428:	df 91       	pop	r29
    542a:	cf 91       	pop	r28
    542c:	bf 91       	pop	r27
    542e:	af 91       	pop	r26
    5430:	9f 91       	pop	r25
    5432:	8f 91       	pop	r24
    5434:	7f 91       	pop	r23
    5436:	6f 91       	pop	r22
    5438:	5f 91       	pop	r21
    543a:	4f 91       	pop	r20
    543c:	3f 91       	pop	r19
    543e:	2f 91       	pop	r18
    5440:	0f 90       	pop	r0
    5442:	0b be       	out	0x3b, r0	; 59
    5444:	0f 90       	pop	r0
    5446:	0f be       	out	0x3f, r0	; 63
    5448:	0f 90       	pop	r0
    544a:	1f 90       	pop	r1
    544c:	18 95       	reti

0000544e <__vector_37>:
    544e:	1f 92       	push	r1
    5450:	0f 92       	push	r0
    5452:	0f b6       	in	r0, 0x3f	; 63
    5454:	0f 92       	push	r0
    5456:	11 24       	eor	r1, r1
    5458:	0b b6       	in	r0, 0x3b	; 59
    545a:	0f 92       	push	r0
    545c:	2f 93       	push	r18
    545e:	8f 93       	push	r24
    5460:	9f 93       	push	r25
    5462:	af 93       	push	r26
    5464:	bf 93       	push	r27
    5466:	ef 93       	push	r30
    5468:	ff 93       	push	r31
    546a:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <_ser_handle+0x2>
    546e:	f0 91 3c 18 	lds	r31, 0x183C	; 0x80183c <_ser_handle+0x3>
    5472:	30 97       	sbiw	r30, 0x00	; 0
    5474:	b9 f0       	breq	.+46     	; 0x54a4 <__vector_37+0x56>
    5476:	02 80       	ldd	r0, Z+2	; 0x02
    5478:	f3 81       	ldd	r31, Z+3	; 0x03
    547a:	e0 2d       	mov	r30, r0
    547c:	93 81       	ldd	r25, Z+3	; 0x03
    547e:	82 81       	ldd	r24, Z+2	; 0x02
    5480:	98 17       	cp	r25, r24
    5482:	b1 f0       	breq	.+44     	; 0x54b0 <__vector_37+0x62>
    5484:	92 81       	ldd	r25, Z+2	; 0x02
    5486:	85 81       	ldd	r24, Z+5	; 0x05
    5488:	28 2f       	mov	r18, r24
    548a:	26 95       	lsr	r18
    548c:	29 23       	and	r18, r25
    548e:	a0 81       	ld	r26, Z
    5490:	b1 81       	ldd	r27, Z+1	; 0x01
    5492:	a2 0f       	add	r26, r18
    5494:	b1 1d       	adc	r27, r1
    5496:	2c 91       	ld	r18, X
    5498:	9f 5f       	subi	r25, 0xFF	; 255
    549a:	89 23       	and	r24, r25
    549c:	82 83       	std	Z+2, r24	; 0x02
    549e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    54a2:	0b c0       	rjmp	.+22     	; 0x54ba <__vector_37+0x6c>
    54a4:	e9 ec       	ldi	r30, 0xC9	; 201
    54a6:	f0 e0       	ldi	r31, 0x00	; 0
    54a8:	80 81       	ld	r24, Z
    54aa:	8f 7d       	andi	r24, 0xDF	; 223
    54ac:	80 83       	st	Z, r24
    54ae:	05 c0       	rjmp	.+10     	; 0x54ba <__vector_37+0x6c>
    54b0:	e9 ec       	ldi	r30, 0xC9	; 201
    54b2:	f0 e0       	ldi	r31, 0x00	; 0
    54b4:	80 81       	ld	r24, Z
    54b6:	8f 7d       	andi	r24, 0xDF	; 223
    54b8:	80 83       	st	Z, r24
    54ba:	ff 91       	pop	r31
    54bc:	ef 91       	pop	r30
    54be:	bf 91       	pop	r27
    54c0:	af 91       	pop	r26
    54c2:	9f 91       	pop	r25
    54c4:	8f 91       	pop	r24
    54c6:	2f 91       	pop	r18
    54c8:	0f 90       	pop	r0
    54ca:	0b be       	out	0x3b, r0	; 59
    54cc:	0f 90       	pop	r0
    54ce:	0f be       	out	0x3f, r0	; 63
    54d0:	0f 90       	pop	r0
    54d2:	1f 90       	pop	r1
    54d4:	18 95       	reti

000054d6 <__vector_51>:
    54d6:	1f 92       	push	r1
    54d8:	0f 92       	push	r0
    54da:	0f b6       	in	r0, 0x3f	; 63
    54dc:	0f 92       	push	r0
    54de:	11 24       	eor	r1, r1
    54e0:	0b b6       	in	r0, 0x3b	; 59
    54e2:	0f 92       	push	r0
    54e4:	2f 93       	push	r18
    54e6:	3f 93       	push	r19
    54e8:	4f 93       	push	r20
    54ea:	5f 93       	push	r21
    54ec:	6f 93       	push	r22
    54ee:	7f 93       	push	r23
    54f0:	8f 93       	push	r24
    54f2:	9f 93       	push	r25
    54f4:	af 93       	push	r26
    54f6:	bf 93       	push	r27
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	ef 93       	push	r30
    54fe:	ff 93       	push	r31
    5500:	a0 91 3d 18 	lds	r26, 0x183D	; 0x80183d <_ser_handle+0x4>
    5504:	b0 91 3e 18 	lds	r27, 0x183E	; 0x80183e <_ser_handle+0x5>
    5508:	10 97       	sbiw	r26, 0x00	; 0
    550a:	11 f1       	breq	.+68     	; 0x5550 <__vector_51+0x7a>
    550c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5510:	14 96       	adiw	r26, 0x04	; 4
    5512:	ed 91       	ld	r30, X+
    5514:	fc 91       	ld	r31, X
    5516:	15 97       	sbiw	r26, 0x05	; 5
    5518:	93 81       	ldd	r25, Z+3	; 0x03
    551a:	82 81       	ldd	r24, Z+2	; 0x02
    551c:	25 81       	ldd	r18, Z+5	; 0x05
    551e:	98 1b       	sub	r25, r24
    5520:	92 23       	and	r25, r18
    5522:	84 81       	ldd	r24, Z+4	; 0x04
    5524:	98 17       	cp	r25, r24
    5526:	61 f0       	breq	.+24     	; 0x5540 <__vector_51+0x6a>
    5528:	83 81       	ldd	r24, Z+3	; 0x03
    552a:	26 95       	lsr	r18
    552c:	28 23       	and	r18, r24
    552e:	c0 81       	ld	r28, Z
    5530:	d1 81       	ldd	r29, Z+1	; 0x01
    5532:	c2 0f       	add	r28, r18
    5534:	d1 1d       	adc	r29, r1
    5536:	68 83       	st	Y, r22
    5538:	8f 5f       	subi	r24, 0xFF	; 255
    553a:	95 81       	ldd	r25, Z+5	; 0x05
    553c:	89 23       	and	r24, r25
    553e:	83 83       	std	Z+3, r24	; 0x03
    5540:	16 96       	adiw	r26, 0x06	; 6
    5542:	ed 91       	ld	r30, X+
    5544:	fc 91       	ld	r31, X
    5546:	17 97       	sbiw	r26, 0x07	; 7
    5548:	30 97       	sbiw	r30, 0x00	; 0
    554a:	11 f0       	breq	.+4      	; 0x5550 <__vector_51+0x7a>
    554c:	cd 01       	movw	r24, r26
    554e:	19 95       	eicall
    5550:	ff 91       	pop	r31
    5552:	ef 91       	pop	r30
    5554:	df 91       	pop	r29
    5556:	cf 91       	pop	r28
    5558:	bf 91       	pop	r27
    555a:	af 91       	pop	r26
    555c:	9f 91       	pop	r25
    555e:	8f 91       	pop	r24
    5560:	7f 91       	pop	r23
    5562:	6f 91       	pop	r22
    5564:	5f 91       	pop	r21
    5566:	4f 91       	pop	r20
    5568:	3f 91       	pop	r19
    556a:	2f 91       	pop	r18
    556c:	0f 90       	pop	r0
    556e:	0b be       	out	0x3b, r0	; 59
    5570:	0f 90       	pop	r0
    5572:	0f be       	out	0x3f, r0	; 63
    5574:	0f 90       	pop	r0
    5576:	1f 90       	pop	r1
    5578:	18 95       	reti

0000557a <__vector_52>:
    557a:	1f 92       	push	r1
    557c:	0f 92       	push	r0
    557e:	0f b6       	in	r0, 0x3f	; 63
    5580:	0f 92       	push	r0
    5582:	11 24       	eor	r1, r1
    5584:	0b b6       	in	r0, 0x3b	; 59
    5586:	0f 92       	push	r0
    5588:	2f 93       	push	r18
    558a:	8f 93       	push	r24
    558c:	9f 93       	push	r25
    558e:	af 93       	push	r26
    5590:	bf 93       	push	r27
    5592:	ef 93       	push	r30
    5594:	ff 93       	push	r31
    5596:	e0 91 3d 18 	lds	r30, 0x183D	; 0x80183d <_ser_handle+0x4>
    559a:	f0 91 3e 18 	lds	r31, 0x183E	; 0x80183e <_ser_handle+0x5>
    559e:	30 97       	sbiw	r30, 0x00	; 0
    55a0:	b9 f0       	breq	.+46     	; 0x55d0 <__vector_52+0x56>
    55a2:	02 80       	ldd	r0, Z+2	; 0x02
    55a4:	f3 81       	ldd	r31, Z+3	; 0x03
    55a6:	e0 2d       	mov	r30, r0
    55a8:	93 81       	ldd	r25, Z+3	; 0x03
    55aa:	82 81       	ldd	r24, Z+2	; 0x02
    55ac:	98 17       	cp	r25, r24
    55ae:	b1 f0       	breq	.+44     	; 0x55dc <__vector_52+0x62>
    55b0:	92 81       	ldd	r25, Z+2	; 0x02
    55b2:	85 81       	ldd	r24, Z+5	; 0x05
    55b4:	28 2f       	mov	r18, r24
    55b6:	26 95       	lsr	r18
    55b8:	29 23       	and	r18, r25
    55ba:	a0 81       	ld	r26, Z
    55bc:	b1 81       	ldd	r27, Z+1	; 0x01
    55be:	a2 0f       	add	r26, r18
    55c0:	b1 1d       	adc	r27, r1
    55c2:	2c 91       	ld	r18, X
    55c4:	9f 5f       	subi	r25, 0xFF	; 255
    55c6:	89 23       	and	r24, r25
    55c8:	82 83       	std	Z+2, r24	; 0x02
    55ca:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    55ce:	0b c0       	rjmp	.+22     	; 0x55e6 <__vector_52+0x6c>
    55d0:	e1 ed       	ldi	r30, 0xD1	; 209
    55d2:	f0 e0       	ldi	r31, 0x00	; 0
    55d4:	80 81       	ld	r24, Z
    55d6:	8f 7d       	andi	r24, 0xDF	; 223
    55d8:	80 83       	st	Z, r24
    55da:	05 c0       	rjmp	.+10     	; 0x55e6 <__vector_52+0x6c>
    55dc:	e1 ed       	ldi	r30, 0xD1	; 209
    55de:	f0 e0       	ldi	r31, 0x00	; 0
    55e0:	80 81       	ld	r24, Z
    55e2:	8f 7d       	andi	r24, 0xDF	; 223
    55e4:	80 83       	st	Z, r24
    55e6:	ff 91       	pop	r31
    55e8:	ef 91       	pop	r30
    55ea:	bf 91       	pop	r27
    55ec:	af 91       	pop	r26
    55ee:	9f 91       	pop	r25
    55f0:	8f 91       	pop	r24
    55f2:	2f 91       	pop	r18
    55f4:	0f 90       	pop	r0
    55f6:	0b be       	out	0x3b, r0	; 59
    55f8:	0f 90       	pop	r0
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	0f 90       	pop	r0
    55fe:	1f 90       	pop	r1
    5600:	18 95       	reti

00005602 <__vector_54>:
    5602:	1f 92       	push	r1
    5604:	0f 92       	push	r0
    5606:	0f b6       	in	r0, 0x3f	; 63
    5608:	0f 92       	push	r0
    560a:	11 24       	eor	r1, r1
    560c:	0b b6       	in	r0, 0x3b	; 59
    560e:	0f 92       	push	r0
    5610:	2f 93       	push	r18
    5612:	3f 93       	push	r19
    5614:	4f 93       	push	r20
    5616:	5f 93       	push	r21
    5618:	6f 93       	push	r22
    561a:	7f 93       	push	r23
    561c:	8f 93       	push	r24
    561e:	9f 93       	push	r25
    5620:	af 93       	push	r26
    5622:	bf 93       	push	r27
    5624:	cf 93       	push	r28
    5626:	df 93       	push	r29
    5628:	ef 93       	push	r30
    562a:	ff 93       	push	r31
    562c:	a0 91 3f 18 	lds	r26, 0x183F	; 0x80183f <_ser_handle+0x6>
    5630:	b0 91 40 18 	lds	r27, 0x1840	; 0x801840 <_ser_handle+0x7>
    5634:	10 97       	sbiw	r26, 0x00	; 0
    5636:	11 f1       	breq	.+68     	; 0x567c <__vector_54+0x7a>
    5638:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    563c:	14 96       	adiw	r26, 0x04	; 4
    563e:	ed 91       	ld	r30, X+
    5640:	fc 91       	ld	r31, X
    5642:	15 97       	sbiw	r26, 0x05	; 5
    5644:	93 81       	ldd	r25, Z+3	; 0x03
    5646:	82 81       	ldd	r24, Z+2	; 0x02
    5648:	25 81       	ldd	r18, Z+5	; 0x05
    564a:	98 1b       	sub	r25, r24
    564c:	92 23       	and	r25, r18
    564e:	84 81       	ldd	r24, Z+4	; 0x04
    5650:	98 17       	cp	r25, r24
    5652:	61 f0       	breq	.+24     	; 0x566c <__vector_54+0x6a>
    5654:	83 81       	ldd	r24, Z+3	; 0x03
    5656:	26 95       	lsr	r18
    5658:	28 23       	and	r18, r24
    565a:	c0 81       	ld	r28, Z
    565c:	d1 81       	ldd	r29, Z+1	; 0x01
    565e:	c2 0f       	add	r28, r18
    5660:	d1 1d       	adc	r29, r1
    5662:	68 83       	st	Y, r22
    5664:	8f 5f       	subi	r24, 0xFF	; 255
    5666:	95 81       	ldd	r25, Z+5	; 0x05
    5668:	89 23       	and	r24, r25
    566a:	83 83       	std	Z+3, r24	; 0x03
    566c:	16 96       	adiw	r26, 0x06	; 6
    566e:	ed 91       	ld	r30, X+
    5670:	fc 91       	ld	r31, X
    5672:	17 97       	sbiw	r26, 0x07	; 7
    5674:	30 97       	sbiw	r30, 0x00	; 0
    5676:	11 f0       	breq	.+4      	; 0x567c <__vector_54+0x7a>
    5678:	cd 01       	movw	r24, r26
    567a:	19 95       	eicall
    567c:	ff 91       	pop	r31
    567e:	ef 91       	pop	r30
    5680:	df 91       	pop	r29
    5682:	cf 91       	pop	r28
    5684:	bf 91       	pop	r27
    5686:	af 91       	pop	r26
    5688:	9f 91       	pop	r25
    568a:	8f 91       	pop	r24
    568c:	7f 91       	pop	r23
    568e:	6f 91       	pop	r22
    5690:	5f 91       	pop	r21
    5692:	4f 91       	pop	r20
    5694:	3f 91       	pop	r19
    5696:	2f 91       	pop	r18
    5698:	0f 90       	pop	r0
    569a:	0b be       	out	0x3b, r0	; 59
    569c:	0f 90       	pop	r0
    569e:	0f be       	out	0x3f, r0	; 63
    56a0:	0f 90       	pop	r0
    56a2:	1f 90       	pop	r1
    56a4:	18 95       	reti

000056a6 <__vector_55>:
    56a6:	1f 92       	push	r1
    56a8:	0f 92       	push	r0
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	0f 92       	push	r0
    56ae:	11 24       	eor	r1, r1
    56b0:	0b b6       	in	r0, 0x3b	; 59
    56b2:	0f 92       	push	r0
    56b4:	2f 93       	push	r18
    56b6:	8f 93       	push	r24
    56b8:	9f 93       	push	r25
    56ba:	af 93       	push	r26
    56bc:	bf 93       	push	r27
    56be:	ef 93       	push	r30
    56c0:	ff 93       	push	r31
    56c2:	e0 91 3f 18 	lds	r30, 0x183F	; 0x80183f <_ser_handle+0x6>
    56c6:	f0 91 40 18 	lds	r31, 0x1840	; 0x801840 <_ser_handle+0x7>
    56ca:	30 97       	sbiw	r30, 0x00	; 0
    56cc:	b9 f0       	breq	.+46     	; 0x56fc <__vector_55+0x56>
    56ce:	02 80       	ldd	r0, Z+2	; 0x02
    56d0:	f3 81       	ldd	r31, Z+3	; 0x03
    56d2:	e0 2d       	mov	r30, r0
    56d4:	93 81       	ldd	r25, Z+3	; 0x03
    56d6:	82 81       	ldd	r24, Z+2	; 0x02
    56d8:	98 17       	cp	r25, r24
    56da:	b1 f0       	breq	.+44     	; 0x5708 <__vector_55+0x62>
    56dc:	92 81       	ldd	r25, Z+2	; 0x02
    56de:	85 81       	ldd	r24, Z+5	; 0x05
    56e0:	28 2f       	mov	r18, r24
    56e2:	26 95       	lsr	r18
    56e4:	29 23       	and	r18, r25
    56e6:	a0 81       	ld	r26, Z
    56e8:	b1 81       	ldd	r27, Z+1	; 0x01
    56ea:	a2 0f       	add	r26, r18
    56ec:	b1 1d       	adc	r27, r1
    56ee:	2c 91       	ld	r18, X
    56f0:	9f 5f       	subi	r25, 0xFF	; 255
    56f2:	89 23       	and	r24, r25
    56f4:	82 83       	std	Z+2, r24	; 0x02
    56f6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    56fa:	0b c0       	rjmp	.+22     	; 0x5712 <__vector_55+0x6c>
    56fc:	e1 e3       	ldi	r30, 0x31	; 49
    56fe:	f1 e0       	ldi	r31, 0x01	; 1
    5700:	80 81       	ld	r24, Z
    5702:	8f 7d       	andi	r24, 0xDF	; 223
    5704:	80 83       	st	Z, r24
    5706:	05 c0       	rjmp	.+10     	; 0x5712 <__vector_55+0x6c>
    5708:	e1 e3       	ldi	r30, 0x31	; 49
    570a:	f1 e0       	ldi	r31, 0x01	; 1
    570c:	80 81       	ld	r24, Z
    570e:	8f 7d       	andi	r24, 0xDF	; 223
    5710:	80 83       	st	Z, r24
    5712:	ff 91       	pop	r31
    5714:	ef 91       	pop	r30
    5716:	bf 91       	pop	r27
    5718:	af 91       	pop	r26
    571a:	9f 91       	pop	r25
    571c:	8f 91       	pop	r24
    571e:	2f 91       	pop	r18
    5720:	0f 90       	pop	r0
    5722:	0b be       	out	0x3b, r0	; 59
    5724:	0f 90       	pop	r0
    5726:	0f be       	out	0x3f, r0	; 63
    5728:	0f 90       	pop	r0
    572a:	1f 90       	pop	r1
    572c:	18 95       	reti

0000572e <usart_getchar>:
    572e:	cf 93       	push	r28
    5730:	df 93       	push	r29
    5732:	1f 92       	push	r1
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
    5738:	be 01       	movw	r22, r28
    573a:	6f 5f       	subi	r22, 0xFF	; 255
    573c:	7f 4f       	sbci	r23, 0xFF	; 255
    573e:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <_com_serial_instance>
    5742:	90 91 42 18 	lds	r25, 0x1842	; 0x801842 <_com_serial_instance+0x1>
    5746:	7b dd       	rcall	.-1290   	; 0x523e <serial_getByte>
    5748:	81 11       	cpse	r24, r1
    574a:	f6 cf       	rjmp	.-20     	; 0x5738 <usart_getchar+0xa>
    574c:	89 81       	ldd	r24, Y+1	; 0x01
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	0f 90       	pop	r0
    5752:	df 91       	pop	r29
    5754:	cf 91       	pop	r28
    5756:	08 95       	ret

00005758 <usart_putchar>:
    5758:	68 2f       	mov	r22, r24
    575a:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <_com_serial_instance>
    575e:	90 91 42 18 	lds	r25, 0x1842	; 0x801842 <_com_serial_instance+0x1>
    5762:	ed dc       	rcall	.-1574   	; 0x513e <serial_sendByte>
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	08 95       	ret

0000576a <stdio_initialise>:
    576a:	8f 92       	push	r8
    576c:	9f 92       	push	r9
    576e:	af 92       	push	r10
    5770:	cf 92       	push	r12
    5772:	ef 92       	push	r14
    5774:	0f 93       	push	r16
    5776:	81 2c       	mov	r8, r1
    5778:	91 2c       	mov	r9, r1
    577a:	68 94       	set
    577c:	aa 24       	eor	r10, r10
    577e:	a7 f8       	bld	r10, 7
    5780:	68 94       	set
    5782:	cc 24       	eor	r12, r12
    5784:	c7 f8       	bld	r12, 7
    5786:	e1 2c       	mov	r14, r1
    5788:	00 e0       	ldi	r16, 0x00	; 0
    578a:	23 e0       	ldi	r18, 0x03	; 3
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	51 ee       	ldi	r21, 0xE1	; 225
    5790:	60 e0       	ldi	r22, 0x00	; 0
    5792:	70 e0       	ldi	r23, 0x00	; 0
    5794:	33 dc       	rcall	.-1946   	; 0x4ffc <serial_create>
    5796:	90 93 42 18 	sts	0x1842, r25	; 0x801842 <_com_serial_instance+0x1>
    579a:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <_com_serial_instance>
    579e:	e9 eb       	ldi	r30, 0xB9	; 185
    57a0:	f8 e1       	ldi	r31, 0x18	; 24
    57a2:	83 e1       	ldi	r24, 0x13	; 19
    57a4:	92 e0       	ldi	r25, 0x02	; 2
    57a6:	91 83       	std	Z+1, r25	; 0x01
    57a8:	80 83       	st	Z, r24
    57aa:	93 83       	std	Z+3, r25	; 0x03
    57ac:	82 83       	std	Z+2, r24	; 0x02
    57ae:	0f 91       	pop	r16
    57b0:	ef 90       	pop	r14
    57b2:	cf 90       	pop	r12
    57b4:	af 90       	pop	r10
    57b6:	9f 90       	pop	r9
    57b8:	8f 90       	pop	r8
    57ba:	08 95       	ret

000057bc <_turn_off>:
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	fc 01       	movw	r30, r24
    57c0:	ee 0f       	add	r30, r30
    57c2:	ff 1f       	adc	r31, r31
    57c4:	e8 0f       	add	r30, r24
    57c6:	f9 1f       	adc	r31, r25
    57c8:	ee 0f       	add	r30, r30
    57ca:	ff 1f       	adc	r31, r31
    57cc:	ed 5b       	subi	r30, 0xBD	; 189
    57ce:	f7 4e       	sbci	r31, 0xE7	; 231
    57d0:	23 81       	ldd	r18, Z+3	; 0x03
    57d2:	21 11       	cpse	r18, r1
    57d4:	1f c0       	rjmp	.+62     	; 0x5814 <_turn_off+0x58>
    57d6:	9c 01       	movw	r18, r24
    57d8:	22 0f       	add	r18, r18
    57da:	33 1f       	adc	r19, r19
    57dc:	f9 01       	movw	r30, r18
    57de:	e8 0f       	add	r30, r24
    57e0:	f9 1f       	adc	r31, r25
    57e2:	ee 0f       	add	r30, r30
    57e4:	ff 1f       	adc	r31, r31
    57e6:	ed 5b       	subi	r30, 0xBD	; 189
    57e8:	f7 4e       	sbci	r31, 0xE7	; 231
    57ea:	a0 81       	ld	r26, Z
    57ec:	b1 81       	ldd	r27, Z+1	; 0x01
    57ee:	4c 91       	ld	r20, X
    57f0:	f9 01       	movw	r30, r18
    57f2:	e8 0f       	add	r30, r24
    57f4:	f9 1f       	adc	r31, r25
    57f6:	ee 0f       	add	r30, r30
    57f8:	ff 1f       	adc	r31, r31
    57fa:	ed 5b       	subi	r30, 0xBD	; 189
    57fc:	f7 4e       	sbci	r31, 0xE7	; 231
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	02 80       	ldd	r0, Z+2	; 0x02
    5804:	02 c0       	rjmp	.+4      	; 0x580a <_turn_off+0x4e>
    5806:	88 0f       	add	r24, r24
    5808:	99 1f       	adc	r25, r25
    580a:	0a 94       	dec	r0
    580c:	e2 f7       	brpl	.-8      	; 0x5806 <_turn_off+0x4a>
    580e:	84 2b       	or	r24, r20
    5810:	8c 93       	st	X, r24
    5812:	08 95       	ret
    5814:	fc 01       	movw	r30, r24
    5816:	ee 0f       	add	r30, r30
    5818:	ff 1f       	adc	r31, r31
    581a:	df 01       	movw	r26, r30
    581c:	a8 0f       	add	r26, r24
    581e:	b9 1f       	adc	r27, r25
    5820:	aa 0f       	add	r26, r26
    5822:	bb 1f       	adc	r27, r27
    5824:	ad 5b       	subi	r26, 0xBD	; 189
    5826:	b7 4e       	sbci	r27, 0xE7	; 231
    5828:	0d 90       	ld	r0, X+
    582a:	bc 91       	ld	r27, X
    582c:	a0 2d       	mov	r26, r0
    582e:	2c 91       	ld	r18, X
    5830:	e8 0f       	add	r30, r24
    5832:	f9 1f       	adc	r31, r25
    5834:	ee 0f       	add	r30, r30
    5836:	ff 1f       	adc	r31, r31
    5838:	ed 5b       	subi	r30, 0xBD	; 189
    583a:	f7 4e       	sbci	r31, 0xE7	; 231
    583c:	81 e0       	ldi	r24, 0x01	; 1
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	02 80       	ldd	r0, Z+2	; 0x02
    5842:	02 c0       	rjmp	.+4      	; 0x5848 <_turn_off+0x8c>
    5844:	88 0f       	add	r24, r24
    5846:	99 1f       	adc	r25, r25
    5848:	0a 94       	dec	r0
    584a:	e2 f7       	brpl	.-8      	; 0x5844 <_turn_off+0x88>
    584c:	80 95       	com	r24
    584e:	82 23       	and	r24, r18
    5850:	8c 93       	st	X, r24
    5852:	08 95       	ret

00005854 <_turn_on>:
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	fc 01       	movw	r30, r24
    5858:	ee 0f       	add	r30, r30
    585a:	ff 1f       	adc	r31, r31
    585c:	e8 0f       	add	r30, r24
    585e:	f9 1f       	adc	r31, r25
    5860:	ee 0f       	add	r30, r30
    5862:	ff 1f       	adc	r31, r31
    5864:	ed 5b       	subi	r30, 0xBD	; 189
    5866:	f7 4e       	sbci	r31, 0xE7	; 231
    5868:	23 81       	ldd	r18, Z+3	; 0x03
    586a:	21 11       	cpse	r18, r1
    586c:	20 c0       	rjmp	.+64     	; 0x58ae <_turn_on+0x5a>
    586e:	9c 01       	movw	r18, r24
    5870:	22 0f       	add	r18, r18
    5872:	33 1f       	adc	r19, r19
    5874:	f9 01       	movw	r30, r18
    5876:	e8 0f       	add	r30, r24
    5878:	f9 1f       	adc	r31, r25
    587a:	ee 0f       	add	r30, r30
    587c:	ff 1f       	adc	r31, r31
    587e:	ed 5b       	subi	r30, 0xBD	; 189
    5880:	f7 4e       	sbci	r31, 0xE7	; 231
    5882:	a0 81       	ld	r26, Z
    5884:	b1 81       	ldd	r27, Z+1	; 0x01
    5886:	4c 91       	ld	r20, X
    5888:	f9 01       	movw	r30, r18
    588a:	e8 0f       	add	r30, r24
    588c:	f9 1f       	adc	r31, r25
    588e:	ee 0f       	add	r30, r30
    5890:	ff 1f       	adc	r31, r31
    5892:	ed 5b       	subi	r30, 0xBD	; 189
    5894:	f7 4e       	sbci	r31, 0xE7	; 231
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	02 80       	ldd	r0, Z+2	; 0x02
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <_turn_on+0x4e>
    589e:	88 0f       	add	r24, r24
    58a0:	99 1f       	adc	r25, r25
    58a2:	0a 94       	dec	r0
    58a4:	e2 f7       	brpl	.-8      	; 0x589e <_turn_on+0x4a>
    58a6:	80 95       	com	r24
    58a8:	84 23       	and	r24, r20
    58aa:	8c 93       	st	X, r24
    58ac:	08 95       	ret
    58ae:	fc 01       	movw	r30, r24
    58b0:	ee 0f       	add	r30, r30
    58b2:	ff 1f       	adc	r31, r31
    58b4:	df 01       	movw	r26, r30
    58b6:	a8 0f       	add	r26, r24
    58b8:	b9 1f       	adc	r27, r25
    58ba:	aa 0f       	add	r26, r26
    58bc:	bb 1f       	adc	r27, r27
    58be:	ad 5b       	subi	r26, 0xBD	; 189
    58c0:	b7 4e       	sbci	r27, 0xE7	; 231
    58c2:	0d 90       	ld	r0, X+
    58c4:	bc 91       	ld	r27, X
    58c6:	a0 2d       	mov	r26, r0
    58c8:	2c 91       	ld	r18, X
    58ca:	e8 0f       	add	r30, r24
    58cc:	f9 1f       	adc	r31, r25
    58ce:	ee 0f       	add	r30, r30
    58d0:	ff 1f       	adc	r31, r31
    58d2:	ed 5b       	subi	r30, 0xBD	; 189
    58d4:	f7 4e       	sbci	r31, 0xE7	; 231
    58d6:	81 e0       	ldi	r24, 0x01	; 1
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	02 80       	ldd	r0, Z+2	; 0x02
    58dc:	02 c0       	rjmp	.+4      	; 0x58e2 <_turn_on+0x8e>
    58de:	88 0f       	add	r24, r24
    58e0:	99 1f       	adc	r25, r25
    58e2:	0a 94       	dec	r0
    58e4:	e2 f7       	brpl	.-8      	; 0x58de <_turn_on+0x8a>
    58e6:	82 2b       	or	r24, r18
    58e8:	8c 93       	st	X, r24
    58ea:	08 95       	ret

000058ec <_hal_led_task>:
    58ec:	cc 24       	eor	r12, r12
    58ee:	c3 94       	inc	r12
    58f0:	d1 2c       	mov	r13, r1
    58f2:	68 94       	set
    58f4:	bb 24       	eor	r11, r11
    58f6:	b2 f8       	bld	r11, 2
    58f8:	c3 e4       	ldi	r28, 0x43	; 67
    58fa:	d8 e1       	ldi	r29, 0x18	; 24
    58fc:	10 e0       	ldi	r17, 0x00	; 0
    58fe:	8c 81       	ldd	r24, Y+4	; 0x04
    5900:	81 30       	cpi	r24, 0x01	; 1
    5902:	81 f0       	breq	.+32     	; 0x5924 <_hal_led_task+0x38>
    5904:	18 f1       	brcs	.+70     	; 0x594c <_hal_led_task+0x60>
    5906:	82 30       	cpi	r24, 0x02	; 2
    5908:	61 f5       	brne	.+88     	; 0x5962 <_hal_led_task+0x76>
    590a:	e8 81       	ld	r30, Y
    590c:	f9 81       	ldd	r31, Y+1	; 0x01
    590e:	20 81       	ld	r18, Z
    5910:	c6 01       	movw	r24, r12
    5912:	0a 80       	ldd	r0, Y+2	; 0x02
    5914:	02 c0       	rjmp	.+4      	; 0x591a <_hal_led_task+0x2e>
    5916:	88 0f       	add	r24, r24
    5918:	99 1f       	adc	r25, r25
    591a:	0a 94       	dec	r0
    591c:	e2 f7       	brpl	.-8      	; 0x5916 <_hal_led_task+0x2a>
    591e:	82 27       	eor	r24, r18
    5920:	80 83       	st	Z, r24
    5922:	1f c0       	rjmp	.+62     	; 0x5962 <_hal_led_task+0x76>
    5924:	8d 81       	ldd	r24, Y+5	; 0x05
    5926:	8f 5f       	subi	r24, 0xFF	; 255
    5928:	86 30       	cpi	r24, 0x06	; 6
    592a:	10 f4       	brcc	.+4      	; 0x5930 <_hal_led_task+0x44>
    592c:	8d 83       	std	Y+5, r24	; 0x05
    592e:	19 c0       	rjmp	.+50     	; 0x5962 <_hal_led_task+0x76>
    5930:	1d 82       	std	Y+5, r1	; 0x05
    5932:	e8 81       	ld	r30, Y
    5934:	f9 81       	ldd	r31, Y+1	; 0x01
    5936:	20 81       	ld	r18, Z
    5938:	c6 01       	movw	r24, r12
    593a:	0a 80       	ldd	r0, Y+2	; 0x02
    593c:	02 c0       	rjmp	.+4      	; 0x5942 <_hal_led_task+0x56>
    593e:	88 0f       	add	r24, r24
    5940:	99 1f       	adc	r25, r25
    5942:	0a 94       	dec	r0
    5944:	e2 f7       	brpl	.-8      	; 0x593e <_hal_led_task+0x52>
    5946:	82 27       	eor	r24, r18
    5948:	80 83       	st	Z, r24
    594a:	0b c0       	rjmp	.+22     	; 0x5962 <_hal_led_task+0x76>
    594c:	0d 81       	ldd	r16, Y+5	; 0x05
    594e:	00 23       	and	r16, r16
    5950:	29 f0       	breq	.+10     	; 0x595c <_hal_led_task+0x70>
    5952:	81 2f       	mov	r24, r17
    5954:	7f df       	rcall	.-258    	; 0x5854 <_turn_on>
    5956:	01 50       	subi	r16, 0x01	; 1
    5958:	0d 83       	std	Y+5, r16	; 0x05
    595a:	03 c0       	rjmp	.+6      	; 0x5962 <_hal_led_task+0x76>
    595c:	bc 82       	std	Y+4, r11	; 0x04
    595e:	81 2f       	mov	r24, r17
    5960:	2d df       	rcall	.-422    	; 0x57bc <_turn_off>
    5962:	1f 5f       	subi	r17, 0xFF	; 255
    5964:	26 96       	adiw	r28, 0x06	; 6
    5966:	14 30       	cpi	r17, 0x04	; 4
    5968:	51 f6       	brne	.-108    	; 0x58fe <_hal_led_task+0x12>
    596a:	6c e0       	ldi	r22, 0x0C	; 12
    596c:	70 e0       	ldi	r23, 0x00	; 0
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	0e 94 c4 13 	call	0x2788	; 0x2788 <vTaskDelay>
    5976:	c0 cf       	rjmp	.-128    	; 0x58f8 <_hal_led_task+0xc>

00005978 <status_leds_initialise>:
    5978:	ef 92       	push	r14
    597a:	ff 92       	push	r15
    597c:	0f 93       	push	r16
    597e:	1f 93       	push	r17
    5980:	cf 93       	push	r28
    5982:	df 93       	push	r29
    5984:	08 2f       	mov	r16, r24
    5986:	80 e4       	ldi	r24, 0x40	; 64
    5988:	87 b9       	out	0x07, r24	; 7
    598a:	c3 e4       	ldi	r28, 0x43	; 67
    598c:	d8 e1       	ldi	r29, 0x18	; 24
    598e:	0f 2e       	mov	r0, r31
    5990:	f8 e2       	ldi	r31, 0x28	; 40
    5992:	ef 2e       	mov	r14, r31
    5994:	f1 2c       	mov	r15, r1
    5996:	f0 2d       	mov	r31, r0
    5998:	f9 82       	std	Y+1, r15	; 0x01
    599a:	e8 82       	st	Y, r14
    599c:	86 e0       	ldi	r24, 0x06	; 6
    599e:	8a 83       	std	Y+2, r24	; 0x02
    59a0:	1b 82       	std	Y+3, r1	; 0x03
    59a2:	14 e0       	ldi	r17, 0x04	; 4
    59a4:	1c 83       	std	Y+4, r17	; 0x04
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	09 df       	rcall	.-494    	; 0x57bc <_turn_off>
    59aa:	80 e8       	ldi	r24, 0x80	; 128
    59ac:	87 b9       	out	0x07, r24	; 7
    59ae:	ff 82       	std	Y+7, r15	; 0x07
    59b0:	ee 82       	std	Y+6, r14	; 0x06
    59b2:	87 e0       	ldi	r24, 0x07	; 7
    59b4:	88 87       	std	Y+8, r24	; 0x08
    59b6:	19 86       	std	Y+9, r1	; 0x09
    59b8:	1a 87       	std	Y+10, r17	; 0x0a
    59ba:	81 e0       	ldi	r24, 0x01	; 1
    59bc:	ff de       	rcall	.-514    	; 0x57bc <_turn_off>
    59be:	80 e2       	ldi	r24, 0x20	; 32
    59c0:	83 bb       	out	0x13, r24	; 19
    59c2:	84 e3       	ldi	r24, 0x34	; 52
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	9d 87       	std	Y+13, r25	; 0x0d
    59c8:	8c 87       	std	Y+12, r24	; 0x0c
    59ca:	85 e0       	ldi	r24, 0x05	; 5
    59cc:	8e 87       	std	Y+14, r24	; 0x0e
    59ce:	1f 86       	std	Y+15, r1	; 0x0f
    59d0:	18 8b       	std	Y+16, r17	; 0x10
    59d2:	82 e0       	ldi	r24, 0x02	; 2
    59d4:	f3 de       	rcall	.-538    	; 0x57bc <_turn_off>
    59d6:	80 e1       	ldi	r24, 0x10	; 16
    59d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    59dc:	82 e0       	ldi	r24, 0x02	; 2
    59de:	91 e0       	ldi	r25, 0x01	; 1
    59e0:	9b 8b       	std	Y+19, r25	; 0x13
    59e2:	8a 8b       	std	Y+18, r24	; 0x12
    59e4:	1c 8b       	std	Y+20, r17	; 0x14
    59e6:	1d 8a       	std	Y+21, r1	; 0x15
    59e8:	1e 8b       	std	Y+22, r17	; 0x16
    59ea:	83 e0       	ldi	r24, 0x03	; 3
    59ec:	e7 de       	rcall	.-562    	; 0x57bc <_turn_off>
    59ee:	e1 2c       	mov	r14, r1
    59f0:	f1 2c       	mov	r15, r1
    59f2:	20 e0       	ldi	r18, 0x00	; 0
    59f4:	30 e0       	ldi	r19, 0x00	; 0
    59f6:	40 ec       	ldi	r20, 0xC0	; 192
    59f8:	50 e0       	ldi	r21, 0x00	; 0
    59fa:	6b e4       	ldi	r22, 0x4B	; 75
    59fc:	78 e0       	ldi	r23, 0x08	; 8
    59fe:	86 e7       	ldi	r24, 0x76	; 118
    5a00:	9c e2       	ldi	r25, 0x2C	; 44
    5a02:	0e 94 bf 10 	call	0x217e	; 0x217e <xTaskCreate>
    5a06:	df 91       	pop	r29
    5a08:	cf 91       	pop	r28
    5a0a:	1f 91       	pop	r17
    5a0c:	0f 91       	pop	r16
    5a0e:	ff 90       	pop	r15
    5a10:	ef 90       	pop	r14
    5a12:	08 95       	ret

00005a14 <status_leds_slowBlink>:
    5a14:	cf 93       	push	r28
    5a16:	df 93       	push	r29
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	ee 0f       	add	r30, r30
    5a1e:	ff 1f       	adc	r31, r31
    5a20:	df 01       	movw	r26, r30
    5a22:	a8 0f       	add	r26, r24
    5a24:	b9 1f       	adc	r27, r25
    5a26:	aa 0f       	add	r26, r26
    5a28:	bb 1f       	adc	r27, r27
    5a2a:	ad 5b       	subi	r26, 0xBD	; 189
    5a2c:	b7 4e       	sbci	r27, 0xE7	; 231
    5a2e:	cd 91       	ld	r28, X+
    5a30:	dc 91       	ld	r29, X
    5a32:	11 97       	sbiw	r26, 0x01	; 1
    5a34:	48 81       	ld	r20, Y
    5a36:	21 e0       	ldi	r18, 0x01	; 1
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	12 96       	adiw	r26, 0x02	; 2
    5a3c:	0c 90       	ld	r0, X
    5a3e:	12 97       	sbiw	r26, 0x02	; 2
    5a40:	02 c0       	rjmp	.+4      	; 0x5a46 <status_leds_slowBlink+0x32>
    5a42:	22 0f       	add	r18, r18
    5a44:	33 1f       	adc	r19, r19
    5a46:	0a 94       	dec	r0
    5a48:	e2 f7       	brpl	.-8      	; 0x5a42 <status_leds_slowBlink+0x2e>
    5a4a:	24 27       	eor	r18, r20
    5a4c:	28 83       	st	Y, r18
    5a4e:	fd 01       	movw	r30, r26
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	84 83       	std	Z+4, r24	; 0x04
    5a54:	df 91       	pop	r29
    5a56:	cf 91       	pop	r28
    5a58:	08 95       	ret

00005a5a <status_leds_fastBlink>:
    5a5a:	cf 93       	push	r28
    5a5c:	df 93       	push	r29
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	fc 01       	movw	r30, r24
    5a62:	ee 0f       	add	r30, r30
    5a64:	ff 1f       	adc	r31, r31
    5a66:	df 01       	movw	r26, r30
    5a68:	a8 0f       	add	r26, r24
    5a6a:	b9 1f       	adc	r27, r25
    5a6c:	aa 0f       	add	r26, r26
    5a6e:	bb 1f       	adc	r27, r27
    5a70:	ad 5b       	subi	r26, 0xBD	; 189
    5a72:	b7 4e       	sbci	r27, 0xE7	; 231
    5a74:	cd 91       	ld	r28, X+
    5a76:	dc 91       	ld	r29, X
    5a78:	11 97       	sbiw	r26, 0x01	; 1
    5a7a:	48 81       	ld	r20, Y
    5a7c:	21 e0       	ldi	r18, 0x01	; 1
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	12 96       	adiw	r26, 0x02	; 2
    5a82:	0c 90       	ld	r0, X
    5a84:	12 97       	sbiw	r26, 0x02	; 2
    5a86:	02 c0       	rjmp	.+4      	; 0x5a8c <status_leds_fastBlink+0x32>
    5a88:	22 0f       	add	r18, r18
    5a8a:	33 1f       	adc	r19, r19
    5a8c:	0a 94       	dec	r0
    5a8e:	e2 f7       	brpl	.-8      	; 0x5a88 <status_leds_fastBlink+0x2e>
    5a90:	24 27       	eor	r18, r20
    5a92:	28 83       	st	Y, r18
    5a94:	fd 01       	movw	r30, r26
    5a96:	82 e0       	ldi	r24, 0x02	; 2
    5a98:	84 83       	std	Z+4, r24	; 0x04
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	08 95       	ret

00005aa0 <status_leds_ledOn>:
    5aa0:	28 2f       	mov	r18, r24
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	f9 01       	movw	r30, r18
    5aa6:	ee 0f       	add	r30, r30
    5aa8:	ff 1f       	adc	r31, r31
    5aaa:	e2 0f       	add	r30, r18
    5aac:	f3 1f       	adc	r31, r19
    5aae:	ee 0f       	add	r30, r30
    5ab0:	ff 1f       	adc	r31, r31
    5ab2:	ed 5b       	subi	r30, 0xBD	; 189
    5ab4:	f7 4e       	sbci	r31, 0xE7	; 231
    5ab6:	93 e0       	ldi	r25, 0x03	; 3
    5ab8:	94 83       	std	Z+4, r25	; 0x04
    5aba:	cc ce       	rjmp	.-616    	; 0x5854 <_turn_on>
    5abc:	08 95       	ret

00005abe <status_leds_ledOff>:
    5abe:	28 2f       	mov	r18, r24
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	f9 01       	movw	r30, r18
    5ac4:	ee 0f       	add	r30, r30
    5ac6:	ff 1f       	adc	r31, r31
    5ac8:	e2 0f       	add	r30, r18
    5aca:	f3 1f       	adc	r31, r19
    5acc:	ee 0f       	add	r30, r30
    5ace:	ff 1f       	adc	r31, r31
    5ad0:	ed 5b       	subi	r30, 0xBD	; 189
    5ad2:	f7 4e       	sbci	r31, 0xE7	; 231
    5ad4:	94 e0       	ldi	r25, 0x04	; 4
    5ad6:	94 83       	std	Z+4, r25	; 0x04
    5ad8:	71 ce       	rjmp	.-798    	; 0x57bc <_turn_off>
    5ada:	08 95       	ret

00005adc <status_leds_longPuls>:
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	fc 01       	movw	r30, r24
    5ae0:	ee 0f       	add	r30, r30
    5ae2:	ff 1f       	adc	r31, r31
    5ae4:	df 01       	movw	r26, r30
    5ae6:	a8 0f       	add	r26, r24
    5ae8:	b9 1f       	adc	r27, r25
    5aea:	aa 0f       	add	r26, r26
    5aec:	bb 1f       	adc	r27, r27
    5aee:	ad 5b       	subi	r26, 0xBD	; 189
    5af0:	b7 4e       	sbci	r27, 0xE7	; 231
    5af2:	26 e0       	ldi	r18, 0x06	; 6
    5af4:	15 96       	adiw	r26, 0x05	; 5
    5af6:	2c 93       	st	X, r18
    5af8:	15 97       	sbiw	r26, 0x05	; 5
    5afa:	fd 01       	movw	r30, r26
    5afc:	14 82       	std	Z+4, r1	; 0x04
    5afe:	08 95       	ret

00005b00 <status_leds_shortPuls>:
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	fc 01       	movw	r30, r24
    5b04:	ee 0f       	add	r30, r30
    5b06:	ff 1f       	adc	r31, r31
    5b08:	df 01       	movw	r26, r30
    5b0a:	a8 0f       	add	r26, r24
    5b0c:	b9 1f       	adc	r27, r25
    5b0e:	aa 0f       	add	r26, r26
    5b10:	bb 1f       	adc	r27, r27
    5b12:	ad 5b       	subi	r26, 0xBD	; 189
    5b14:	b7 4e       	sbci	r27, 0xE7	; 231
    5b16:	15 96       	adiw	r26, 0x05	; 5
    5b18:	1c 92       	st	X, r1
    5b1a:	15 97       	sbiw	r26, 0x05	; 5
    5b1c:	fd 01       	movw	r30, r26
    5b1e:	14 82       	std	Z+4, r1	; 0x04
    5b20:	08 95       	ret

00005b22 <_initTwiInterface>:
    5b22:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <_twiIsInitiated>
    5b26:	81 11       	cpse	r24, r1
    5b28:	0c c0       	rjmp	.+24     	; 0x5b42 <_initTwiInterface+0x20>
    5b2a:	8c e0       	ldi	r24, 0x0C	; 12
    5b2c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b30:	8f ef       	ldi	r24, 0xFF	; 255
    5b32:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b36:	84 e0       	ldi	r24, 0x04	; 4
    5b38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	80 93 69 18 	sts	0x1869, r24	; 0x801869 <_twiIsInitiated>
    5b42:	08 95       	ret

00005b44 <twiCreate>:
    5b44:	af 92       	push	r10
    5b46:	bf 92       	push	r11
    5b48:	cf 92       	push	r12
    5b4a:	df 92       	push	r13
    5b4c:	ef 92       	push	r14
    5b4e:	ff 92       	push	r15
    5b50:	0f 93       	push	r16
    5b52:	1f 93       	push	r17
    5b54:	cf 93       	push	r28
    5b56:	df 93       	push	r29
    5b58:	a8 2e       	mov	r10, r24
    5b5a:	b6 2e       	mov	r11, r22
    5b5c:	69 01       	movw	r12, r18
    5b5e:	7a 01       	movw	r14, r20
    5b60:	84 e0       	ldi	r24, 0x04	; 4
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	29 d3       	rcall	.+1618   	; 0x61b8 <malloc>
    5b66:	ec 01       	movw	r28, r24
    5b68:	89 2b       	or	r24, r25
    5b6a:	61 f1       	breq	.+88     	; 0x5bc4 <twiCreate+0x80>
    5b6c:	a8 82       	st	Y, r10
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	b8 12       	cpse	r11, r24
    5b72:	12 c0       	rjmp	.+36     	; 0x5b98 <twiCreate+0x54>
    5b74:	c7 01       	movw	r24, r14
    5b76:	b6 01       	movw	r22, r12
    5b78:	20 ea       	ldi	r18, 0xA0	; 160
    5b7a:	36 e8       	ldi	r19, 0x86	; 134
    5b7c:	41 e0       	ldi	r20, 0x01	; 1
    5b7e:	50 e0       	ldi	r21, 0x00	; 0
    5b80:	f1 d2       	rcall	.+1506   	; 0x6164 <__udivmodsi4>
    5b82:	da 01       	movw	r26, r20
    5b84:	c9 01       	movw	r24, r18
    5b86:	40 97       	sbiw	r24, 0x10	; 16
    5b88:	a1 09       	sbc	r26, r1
    5b8a:	b1 09       	sbc	r27, r1
    5b8c:	b6 95       	lsr	r27
    5b8e:	a7 95       	ror	r26
    5b90:	97 95       	ror	r25
    5b92:	87 95       	ror	r24
    5b94:	89 83       	std	Y+1, r24	; 0x01
    5b96:	11 c0       	rjmp	.+34     	; 0x5bba <twiCreate+0x76>
    5b98:	c7 01       	movw	r24, r14
    5b9a:	b6 01       	movw	r22, r12
    5b9c:	20 e8       	ldi	r18, 0x80	; 128
    5b9e:	3a e1       	ldi	r19, 0x1A	; 26
    5ba0:	46 e0       	ldi	r20, 0x06	; 6
    5ba2:	50 e0       	ldi	r21, 0x00	; 0
    5ba4:	df d2       	rcall	.+1470   	; 0x6164 <__udivmodsi4>
    5ba6:	da 01       	movw	r26, r20
    5ba8:	c9 01       	movw	r24, r18
    5baa:	40 97       	sbiw	r24, 0x10	; 16
    5bac:	a1 09       	sbc	r26, r1
    5bae:	b1 09       	sbc	r27, r1
    5bb0:	b6 95       	lsr	r27
    5bb2:	a7 95       	ror	r26
    5bb4:	97 95       	ror	r25
    5bb6:	87 95       	ror	r24
    5bb8:	89 83       	std	Y+1, r24	; 0x01
    5bba:	1b 83       	std	Y+3, r17	; 0x03
    5bbc:	0a 83       	std	Y+2, r16	; 0x02
    5bbe:	8c 2f       	mov	r24, r28
    5bc0:	9d 2f       	mov	r25, r29
    5bc2:	02 c0       	rjmp	.+4      	; 0x5bc8 <twiCreate+0x84>
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
    5bc8:	df 91       	pop	r29
    5bca:	cf 91       	pop	r28
    5bcc:	1f 91       	pop	r17
    5bce:	0f 91       	pop	r16
    5bd0:	ff 90       	pop	r15
    5bd2:	ef 90       	pop	r14
    5bd4:	df 90       	pop	r13
    5bd6:	cf 90       	pop	r12
    5bd8:	bf 90       	pop	r11
    5bda:	af 90       	pop	r10
    5bdc:	08 95       	ret

00005bde <twiIsBusy>:
    5bde:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5be2:	81 70       	andi	r24, 0x01	; 1
    5be4:	08 95       	ret

00005be6 <twiTransmit>:
    5be6:	ff 92       	push	r15
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    5bf0:	00 97       	sbiw	r24, 0x00	; 0
    5bf2:	d1 f1       	breq	.+116    	; 0x5c68 <twiTransmit+0x82>
    5bf4:	4a 30       	cpi	r20, 0x0A	; 10
    5bf6:	d0 f5       	brcc	.+116    	; 0x5c6c <twiTransmit+0x86>
    5bf8:	f4 2e       	mov	r15, r20
    5bfa:	8b 01       	movw	r16, r22
    5bfc:	ec 01       	movw	r28, r24
    5bfe:	ef df       	rcall	.-34     	; 0x5bde <twiIsBusy>
    5c00:	81 11       	cpse	r24, r1
    5c02:	36 c0       	rjmp	.+108    	; 0x5c70 <twiTransmit+0x8a>
    5c04:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <_twiCurrentHandler>
    5c08:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <_twiCurrentHandler+0x1>
    5c0c:	c8 17       	cp	r28, r24
    5c0e:	d9 07       	cpc	r29, r25
    5c10:	41 f0       	breq	.+16     	; 0x5c22 <twiTransmit+0x3c>
    5c12:	87 df       	rcall	.-242    	; 0x5b22 <_initTwiInterface>
    5c14:	89 81       	ldd	r24, Y+1	; 0x01
    5c16:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5c1a:	d0 93 5d 18 	sts	0x185D, r29	; 0x80185d <_twiCurrentHandler+0x1>
    5c1e:	c0 93 5c 18 	sts	0x185C, r28	; 0x80185c <_twiCurrentHandler>
    5c22:	81 e0       	ldi	r24, 0x01	; 1
    5c24:	8f 0d       	add	r24, r15
    5c26:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <_twiMessageLen>
    5c2a:	88 81       	ld	r24, Y
    5c2c:	88 0f       	add	r24, r24
    5c2e:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <_twiMessageBuffer>
    5c32:	ff 20       	and	r15, r15
    5c34:	89 f0       	breq	.+34     	; 0x5c58 <twiTransmit+0x72>
    5c36:	f8 01       	movw	r30, r16
    5c38:	a0 e6       	ldi	r26, 0x60	; 96
    5c3a:	b8 e1       	ldi	r27, 0x18	; 24
    5c3c:	4f ef       	ldi	r20, 0xFF	; 255
    5c3e:	4f 0d       	add	r20, r15
    5c40:	64 2f       	mov	r22, r20
    5c42:	70 e0       	ldi	r23, 0x00	; 0
    5c44:	cb 01       	movw	r24, r22
    5c46:	01 96       	adiw	r24, 0x01	; 1
    5c48:	b8 01       	movw	r22, r16
    5c4a:	68 0f       	add	r22, r24
    5c4c:	79 1f       	adc	r23, r25
    5c4e:	81 91       	ld	r24, Z+
    5c50:	8d 93       	st	X+, r24
    5c52:	e6 17       	cp	r30, r22
    5c54:	f7 07       	cpc	r31, r23
    5c56:	d9 f7       	brne	.-10     	; 0x5c4e <twiTransmit+0x68>
    5c58:	88 ef       	ldi	r24, 0xF8	; 248
    5c5a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c5e:	85 ea       	ldi	r24, 0xA5	; 165
    5c60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c64:	84 e0       	ldi	r24, 0x04	; 4
    5c66:	05 c0       	rjmp	.+10     	; 0x5c72 <twiTransmit+0x8c>
    5c68:	86 e0       	ldi	r24, 0x06	; 6
    5c6a:	03 c0       	rjmp	.+6      	; 0x5c72 <twiTransmit+0x8c>
    5c6c:	87 e0       	ldi	r24, 0x07	; 7
    5c6e:	01 c0       	rjmp	.+2      	; 0x5c72 <twiTransmit+0x8c>
    5c70:	82 e0       	ldi	r24, 0x02	; 2
    5c72:	df 91       	pop	r29
    5c74:	cf 91       	pop	r28
    5c76:	1f 91       	pop	r17
    5c78:	0f 91       	pop	r16
    5c7a:	ff 90       	pop	r15
    5c7c:	08 95       	ret

00005c7e <twiReceive>:
    5c7e:	1f 93       	push	r17
    5c80:	cf 93       	push	r28
    5c82:	df 93       	push	r29
    5c84:	00 97       	sbiw	r24, 0x00	; 0
    5c86:	29 f1       	breq	.+74     	; 0x5cd2 <twiReceive+0x54>
    5c88:	6b 30       	cpi	r22, 0x0B	; 11
    5c8a:	28 f5       	brcc	.+74     	; 0x5cd6 <twiReceive+0x58>
    5c8c:	16 2f       	mov	r17, r22
    5c8e:	ec 01       	movw	r28, r24
    5c90:	a6 df       	rcall	.-180    	; 0x5bde <twiIsBusy>
    5c92:	81 11       	cpse	r24, r1
    5c94:	22 c0       	rjmp	.+68     	; 0x5cda <twiReceive+0x5c>
    5c96:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <_twiCurrentHandler>
    5c9a:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <_twiCurrentHandler+0x1>
    5c9e:	c8 17       	cp	r28, r24
    5ca0:	d9 07       	cpc	r29, r25
    5ca2:	41 f0       	breq	.+16     	; 0x5cb4 <twiReceive+0x36>
    5ca4:	3e df       	rcall	.-388    	; 0x5b22 <_initTwiInterface>
    5ca6:	89 81       	ldd	r24, Y+1	; 0x01
    5ca8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5cac:	d0 93 5d 18 	sts	0x185D, r29	; 0x80185d <_twiCurrentHandler+0x1>
    5cb0:	c0 93 5c 18 	sts	0x185C, r28	; 0x80185c <_twiCurrentHandler>
    5cb4:	10 93 5e 18 	sts	0x185E, r17	; 0x80185e <_twiMessageLen>
    5cb8:	88 81       	ld	r24, Y
    5cba:	88 0f       	add	r24, r24
    5cbc:	81 60       	ori	r24, 0x01	; 1
    5cbe:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <_twiMessageBuffer>
    5cc2:	88 ef       	ldi	r24, 0xF8	; 248
    5cc4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5cc8:	85 ea       	ldi	r24, 0xA5	; 165
    5cca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cce:	85 e0       	ldi	r24, 0x05	; 5
    5cd0:	05 c0       	rjmp	.+10     	; 0x5cdc <twiReceive+0x5e>
    5cd2:	86 e0       	ldi	r24, 0x06	; 6
    5cd4:	03 c0       	rjmp	.+6      	; 0x5cdc <twiReceive+0x5e>
    5cd6:	87 e0       	ldi	r24, 0x07	; 7
    5cd8:	01 c0       	rjmp	.+2      	; 0x5cdc <twiReceive+0x5e>
    5cda:	82 e0       	ldi	r24, 0x02	; 2
    5cdc:	df 91       	pop	r29
    5cde:	cf 91       	pop	r28
    5ce0:	1f 91       	pop	r17
    5ce2:	08 95       	ret

00005ce4 <__vector_39>:
    5ce4:	1f 92       	push	r1
    5ce6:	0f 92       	push	r0
    5ce8:	0f b6       	in	r0, 0x3f	; 63
    5cea:	0f 92       	push	r0
    5cec:	11 24       	eor	r1, r1
    5cee:	0b b6       	in	r0, 0x3b	; 59
    5cf0:	0f 92       	push	r0
    5cf2:	2f 93       	push	r18
    5cf4:	3f 93       	push	r19
    5cf6:	4f 93       	push	r20
    5cf8:	5f 93       	push	r21
    5cfa:	6f 93       	push	r22
    5cfc:	7f 93       	push	r23
    5cfe:	8f 93       	push	r24
    5d00:	9f 93       	push	r25
    5d02:	af 93       	push	r26
    5d04:	bf 93       	push	r27
    5d06:	ef 93       	push	r30
    5d08:	ff 93       	push	r31
    5d0a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d0e:	8e 2f       	mov	r24, r30
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	fc 01       	movw	r30, r24
    5d14:	38 97       	sbiw	r30, 0x08	; 8
    5d16:	e1 35       	cpi	r30, 0x51	; 81
    5d18:	f1 05       	cpc	r31, r1
    5d1a:	08 f0       	brcs	.+2      	; 0x5d1e <__vector_39+0x3a>
    5d1c:	75 c0       	rjmp	.+234    	; 0x5e08 <__vector_39+0x124>
    5d1e:	88 27       	eor	r24, r24
    5d20:	e4 58       	subi	r30, 0x84	; 132
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	8f 4f       	sbci	r24, 0xFF	; 255
    5d26:	40 c2       	rjmp	.+1152   	; 0x61a8 <__tablejump2__>
    5d28:	10 92 5b 18 	sts	0x185B, r1	; 0x80185b <_index.1885>
    5d2c:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <_index.1885>
    5d30:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiMessageLen>
    5d34:	e8 17       	cp	r30, r24
    5d36:	70 f4       	brcc	.+28     	; 0x5d54 <__vector_39+0x70>
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	8e 0f       	add	r24, r30
    5d3c:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_index.1885>
    5d40:	f0 e0       	ldi	r31, 0x00	; 0
    5d42:	e1 5a       	subi	r30, 0xA1	; 161
    5d44:	f7 4e       	sbci	r31, 0xE7	; 231
    5d46:	80 81       	ld	r24, Z
    5d48:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d4c:	85 e8       	ldi	r24, 0x85	; 133
    5d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d52:	72 c0       	rjmp	.+228    	; 0x5e38 <__vector_39+0x154>
    5d54:	84 e9       	ldi	r24, 0x94	; 148
    5d56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d5a:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <_twiCurrentHandler>
    5d5e:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <_twiCurrentHandler+0x1>
    5d62:	dc 01       	movw	r26, r24
    5d64:	12 96       	adiw	r26, 0x02	; 2
    5d66:	ed 91       	ld	r30, X+
    5d68:	fc 91       	ld	r31, X
    5d6a:	13 97       	sbiw	r26, 0x03	; 3
    5d6c:	30 97       	sbiw	r30, 0x00	; 0
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <__vector_39+0x8e>
    5d70:	63 c0       	rjmp	.+198    	; 0x5e38 <__vector_39+0x154>
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	40 e0       	ldi	r20, 0x00	; 0
    5d76:	50 e0       	ldi	r21, 0x00	; 0
    5d78:	64 e0       	ldi	r22, 0x04	; 4
    5d7a:	19 95       	eicall
    5d7c:	5d c0       	rjmp	.+186    	; 0x5e38 <__vector_39+0x154>
    5d7e:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <_index.1885>
    5d82:	81 e0       	ldi	r24, 0x01	; 1
    5d84:	8e 0f       	add	r24, r30
    5d86:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_index.1885>
    5d8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d8e:	f0 e0       	ldi	r31, 0x00	; 0
    5d90:	e1 5a       	subi	r30, 0xA1	; 161
    5d92:	f7 4e       	sbci	r31, 0xE7	; 231
    5d94:	80 83       	st	Z, r24
    5d96:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d9a:	80 34       	cpi	r24, 0x40	; 64
    5d9c:	11 f4       	brne	.+4      	; 0x5da2 <__vector_39+0xbe>
    5d9e:	10 92 5b 18 	sts	0x185B, r1	; 0x80185b <_index.1885>
    5da2:	20 91 5b 18 	lds	r18, 0x185B	; 0x80185b <_index.1885>
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiMessageLen>
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	01 97       	sbiw	r24, 0x01	; 1
    5db0:	28 17       	cp	r18, r24
    5db2:	39 07       	cpc	r19, r25
    5db4:	24 f4       	brge	.+8      	; 0x5dbe <__vector_39+0xda>
    5db6:	85 ec       	ldi	r24, 0xC5	; 197
    5db8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dbc:	3d c0       	rjmp	.+122    	; 0x5e38 <__vector_39+0x154>
    5dbe:	85 e8       	ldi	r24, 0x85	; 133
    5dc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dc4:	39 c0       	rjmp	.+114    	; 0x5e38 <__vector_39+0x154>
    5dc6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5dca:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <_index.1885>
    5dce:	f0 e0       	ldi	r31, 0x00	; 0
    5dd0:	e1 5a       	subi	r30, 0xA1	; 161
    5dd2:	f7 4e       	sbci	r31, 0xE7	; 231
    5dd4:	80 83       	st	Z, r24
    5dd6:	84 e9       	ldi	r24, 0x94	; 148
    5dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ddc:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <_twiCurrentHandler>
    5de0:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <_twiCurrentHandler+0x1>
    5de4:	dc 01       	movw	r26, r24
    5de6:	12 96       	adiw	r26, 0x02	; 2
    5de8:	ed 91       	ld	r30, X+
    5dea:	fc 91       	ld	r31, X
    5dec:	13 97       	sbiw	r26, 0x03	; 3
    5dee:	30 97       	sbiw	r30, 0x00	; 0
    5df0:	19 f1       	breq	.+70     	; 0x5e38 <__vector_39+0x154>
    5df2:	20 91 5e 18 	lds	r18, 0x185E	; 0x80185e <_twiMessageLen>
    5df6:	4f e5       	ldi	r20, 0x5F	; 95
    5df8:	58 e1       	ldi	r21, 0x18	; 24
    5dfa:	65 e0       	ldi	r22, 0x05	; 5
    5dfc:	19 95       	eicall
    5dfe:	1c c0       	rjmp	.+56     	; 0x5e38 <__vector_39+0x154>
    5e00:	85 ea       	ldi	r24, 0xA5	; 165
    5e02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e06:	18 c0       	rjmp	.+48     	; 0x5e38 <__vector_39+0x154>
    5e08:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5e0c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5e10:	84 e0       	ldi	r24, 0x04	; 4
    5e12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e16:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <_twiCurrentHandler>
    5e1a:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <_twiCurrentHandler+0x1>
    5e1e:	dc 01       	movw	r26, r24
    5e20:	12 96       	adiw	r26, 0x02	; 2
    5e22:	ed 91       	ld	r30, X+
    5e24:	fc 91       	ld	r31, X
    5e26:	13 97       	sbiw	r26, 0x03	; 3
    5e28:	30 97       	sbiw	r30, 0x00	; 0
    5e2a:	31 f0       	breq	.+12     	; 0x5e38 <__vector_39+0x154>
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	40 e0       	ldi	r20, 0x00	; 0
    5e30:	50 e0       	ldi	r21, 0x00	; 0
    5e32:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5e36:	19 95       	eicall
    5e38:	ff 91       	pop	r31
    5e3a:	ef 91       	pop	r30
    5e3c:	bf 91       	pop	r27
    5e3e:	af 91       	pop	r26
    5e40:	9f 91       	pop	r25
    5e42:	8f 91       	pop	r24
    5e44:	7f 91       	pop	r23
    5e46:	6f 91       	pop	r22
    5e48:	5f 91       	pop	r21
    5e4a:	4f 91       	pop	r20
    5e4c:	3f 91       	pop	r19
    5e4e:	2f 91       	pop	r18
    5e50:	0f 90       	pop	r0
    5e52:	0b be       	out	0x3b, r0	; 59
    5e54:	0f 90       	pop	r0
    5e56:	0f be       	out	0x3f, r0	; 63
    5e58:	0f 90       	pop	r0
    5e5a:	1f 90       	pop	r1
    5e5c:	18 95       	reti

00005e5e <fifo_init>:
    5e5e:	fc 01       	movw	r30, r24
    5e60:	41 11       	cpse	r20, r1
    5e62:	01 c0       	rjmp	.+2      	; 0x5e66 <fifo_init+0x8>
    5e64:	ca d2       	rcall	.+1428   	; 0x63fa <abort>
    5e66:	84 2f       	mov	r24, r20
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	9c 01       	movw	r18, r24
    5e6c:	21 50       	subi	r18, 0x01	; 1
    5e6e:	31 09       	sbc	r19, r1
    5e70:	82 23       	and	r24, r18
    5e72:	93 23       	and	r25, r19
    5e74:	89 2b       	or	r24, r25
    5e76:	09 f0       	breq	.+2      	; 0x5e7a <fifo_init+0x1c>
    5e78:	c0 d2       	rcall	.+1408   	; 0x63fa <abort>
    5e7a:	41 38       	cpi	r20, 0x81	; 129
    5e7c:	08 f0       	brcs	.+2      	; 0x5e80 <fifo_init+0x22>
    5e7e:	bd d2       	rcall	.+1402   	; 0x63fa <abort>
    5e80:	12 82       	std	Z+2, r1	; 0x02
    5e82:	13 82       	std	Z+3, r1	; 0x03
    5e84:	44 83       	std	Z+4, r20	; 0x04
    5e86:	44 0f       	add	r20, r20
    5e88:	41 50       	subi	r20, 0x01	; 1
    5e8a:	45 83       	std	Z+5, r20	; 0x05
    5e8c:	71 83       	std	Z+1, r23	; 0x01
    5e8e:	60 83       	st	Z, r22
    5e90:	80 e0       	ldi	r24, 0x00	; 0
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	08 95       	ret

00005e96 <__subsf3>:
    5e96:	50 58       	subi	r21, 0x80	; 128

00005e98 <__addsf3>:
    5e98:	bb 27       	eor	r27, r27
    5e9a:	aa 27       	eor	r26, r26
    5e9c:	0e d0       	rcall	.+28     	; 0x5eba <__addsf3x>
    5e9e:	eb c0       	rjmp	.+470    	; 0x6076 <__fp_round>
    5ea0:	dc d0       	rcall	.+440    	; 0x605a <__fp_pscA>
    5ea2:	30 f0       	brcs	.+12     	; 0x5eb0 <__addsf3+0x18>
    5ea4:	e1 d0       	rcall	.+450    	; 0x6068 <__fp_pscB>
    5ea6:	20 f0       	brcs	.+8      	; 0x5eb0 <__addsf3+0x18>
    5ea8:	31 f4       	brne	.+12     	; 0x5eb6 <__addsf3+0x1e>
    5eaa:	9f 3f       	cpi	r25, 0xFF	; 255
    5eac:	11 f4       	brne	.+4      	; 0x5eb2 <__addsf3+0x1a>
    5eae:	1e f4       	brtc	.+6      	; 0x5eb6 <__addsf3+0x1e>
    5eb0:	d1 c0       	rjmp	.+418    	; 0x6054 <__fp_nan>
    5eb2:	0e f4       	brtc	.+2      	; 0x5eb6 <__addsf3+0x1e>
    5eb4:	e0 95       	com	r30
    5eb6:	e7 fb       	bst	r30, 7
    5eb8:	c7 c0       	rjmp	.+398    	; 0x6048 <__fp_inf>

00005eba <__addsf3x>:
    5eba:	e9 2f       	mov	r30, r25
    5ebc:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_split3>
    5ec0:	78 f3       	brcs	.-34     	; 0x5ea0 <__addsf3+0x8>
    5ec2:	ba 17       	cp	r27, r26
    5ec4:	62 07       	cpc	r22, r18
    5ec6:	73 07       	cpc	r23, r19
    5ec8:	84 07       	cpc	r24, r20
    5eca:	95 07       	cpc	r25, r21
    5ecc:	20 f0       	brcs	.+8      	; 0x5ed6 <__addsf3x+0x1c>
    5ece:	79 f4       	brne	.+30     	; 0x5eee <__addsf3x+0x34>
    5ed0:	a6 f5       	brtc	.+104    	; 0x5f3a <__addsf3x+0x80>
    5ed2:	0c 94 f6 21 	jmp	0x43ec	; 0x43ec <__fp_zero>
    5ed6:	0e f4       	brtc	.+2      	; 0x5eda <__addsf3x+0x20>
    5ed8:	e0 95       	com	r30
    5eda:	0b 2e       	mov	r0, r27
    5edc:	ba 2f       	mov	r27, r26
    5ede:	a0 2d       	mov	r26, r0
    5ee0:	0b 01       	movw	r0, r22
    5ee2:	b9 01       	movw	r22, r18
    5ee4:	90 01       	movw	r18, r0
    5ee6:	0c 01       	movw	r0, r24
    5ee8:	ca 01       	movw	r24, r20
    5eea:	a0 01       	movw	r20, r0
    5eec:	11 24       	eor	r1, r1
    5eee:	ff 27       	eor	r31, r31
    5ef0:	59 1b       	sub	r21, r25
    5ef2:	99 f0       	breq	.+38     	; 0x5f1a <__addsf3x+0x60>
    5ef4:	59 3f       	cpi	r21, 0xF9	; 249
    5ef6:	50 f4       	brcc	.+20     	; 0x5f0c <__addsf3x+0x52>
    5ef8:	50 3e       	cpi	r21, 0xE0	; 224
    5efa:	68 f1       	brcs	.+90     	; 0x5f56 <__addsf3x+0x9c>
    5efc:	1a 16       	cp	r1, r26
    5efe:	f0 40       	sbci	r31, 0x00	; 0
    5f00:	a2 2f       	mov	r26, r18
    5f02:	23 2f       	mov	r18, r19
    5f04:	34 2f       	mov	r19, r20
    5f06:	44 27       	eor	r20, r20
    5f08:	58 5f       	subi	r21, 0xF8	; 248
    5f0a:	f3 cf       	rjmp	.-26     	; 0x5ef2 <__addsf3x+0x38>
    5f0c:	46 95       	lsr	r20
    5f0e:	37 95       	ror	r19
    5f10:	27 95       	ror	r18
    5f12:	a7 95       	ror	r26
    5f14:	f0 40       	sbci	r31, 0x00	; 0
    5f16:	53 95       	inc	r21
    5f18:	c9 f7       	brne	.-14     	; 0x5f0c <__addsf3x+0x52>
    5f1a:	7e f4       	brtc	.+30     	; 0x5f3a <__addsf3x+0x80>
    5f1c:	1f 16       	cp	r1, r31
    5f1e:	ba 0b       	sbc	r27, r26
    5f20:	62 0b       	sbc	r22, r18
    5f22:	73 0b       	sbc	r23, r19
    5f24:	84 0b       	sbc	r24, r20
    5f26:	ba f0       	brmi	.+46     	; 0x5f56 <__addsf3x+0x9c>
    5f28:	91 50       	subi	r25, 0x01	; 1
    5f2a:	a1 f0       	breq	.+40     	; 0x5f54 <__addsf3x+0x9a>
    5f2c:	ff 0f       	add	r31, r31
    5f2e:	bb 1f       	adc	r27, r27
    5f30:	66 1f       	adc	r22, r22
    5f32:	77 1f       	adc	r23, r23
    5f34:	88 1f       	adc	r24, r24
    5f36:	c2 f7       	brpl	.-16     	; 0x5f28 <__addsf3x+0x6e>
    5f38:	0e c0       	rjmp	.+28     	; 0x5f56 <__addsf3x+0x9c>
    5f3a:	ba 0f       	add	r27, r26
    5f3c:	62 1f       	adc	r22, r18
    5f3e:	73 1f       	adc	r23, r19
    5f40:	84 1f       	adc	r24, r20
    5f42:	48 f4       	brcc	.+18     	; 0x5f56 <__addsf3x+0x9c>
    5f44:	87 95       	ror	r24
    5f46:	77 95       	ror	r23
    5f48:	67 95       	ror	r22
    5f4a:	b7 95       	ror	r27
    5f4c:	f7 95       	ror	r31
    5f4e:	9e 3f       	cpi	r25, 0xFE	; 254
    5f50:	08 f0       	brcs	.+2      	; 0x5f54 <__addsf3x+0x9a>
    5f52:	b1 cf       	rjmp	.-158    	; 0x5eb6 <__addsf3+0x1e>
    5f54:	93 95       	inc	r25
    5f56:	88 0f       	add	r24, r24
    5f58:	08 f0       	brcs	.+2      	; 0x5f5c <__addsf3x+0xa2>
    5f5a:	99 27       	eor	r25, r25
    5f5c:	ee 0f       	add	r30, r30
    5f5e:	97 95       	ror	r25
    5f60:	87 95       	ror	r24
    5f62:	08 95       	ret

00005f64 <__divsf3>:
    5f64:	0d d0       	rcall	.+26     	; 0x5f80 <__divsf3x>
    5f66:	87 c0       	rjmp	.+270    	; 0x6076 <__fp_round>
    5f68:	7f d0       	rcall	.+254    	; 0x6068 <__fp_pscB>
    5f6a:	48 f0       	brcs	.+18     	; 0x5f7e <__divsf3+0x1a>
    5f6c:	76 d0       	rcall	.+236    	; 0x605a <__fp_pscA>
    5f6e:	38 f0       	brcs	.+14     	; 0x5f7e <__divsf3+0x1a>
    5f70:	21 f4       	brne	.+8      	; 0x5f7a <__divsf3+0x16>
    5f72:	5f 3f       	cpi	r21, 0xFF	; 255
    5f74:	21 f0       	breq	.+8      	; 0x5f7e <__divsf3+0x1a>
    5f76:	68 c0       	rjmp	.+208    	; 0x6048 <__fp_inf>
    5f78:	51 11       	cpse	r21, r1
    5f7a:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__fp_szero>
    5f7e:	6a c0       	rjmp	.+212    	; 0x6054 <__fp_nan>

00005f80 <__divsf3x>:
    5f80:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_split3>
    5f84:	88 f3       	brcs	.-30     	; 0x5f68 <__divsf3+0x4>

00005f86 <__divsf3_pse>:
    5f86:	99 23       	and	r25, r25
    5f88:	b9 f3       	breq	.-18     	; 0x5f78 <__divsf3+0x14>
    5f8a:	55 23       	and	r21, r21
    5f8c:	a1 f3       	breq	.-24     	; 0x5f76 <__divsf3+0x12>
    5f8e:	95 1b       	sub	r25, r21
    5f90:	55 0b       	sbc	r21, r21
    5f92:	bb 27       	eor	r27, r27
    5f94:	aa 27       	eor	r26, r26
    5f96:	62 17       	cp	r22, r18
    5f98:	73 07       	cpc	r23, r19
    5f9a:	84 07       	cpc	r24, r20
    5f9c:	38 f0       	brcs	.+14     	; 0x5fac <__divsf3_pse+0x26>
    5f9e:	9f 5f       	subi	r25, 0xFF	; 255
    5fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa2:	22 0f       	add	r18, r18
    5fa4:	33 1f       	adc	r19, r19
    5fa6:	44 1f       	adc	r20, r20
    5fa8:	aa 1f       	adc	r26, r26
    5faa:	a9 f3       	breq	.-22     	; 0x5f96 <__divsf3_pse+0x10>
    5fac:	34 d0       	rcall	.+104    	; 0x6016 <__divsf3_pse+0x90>
    5fae:	0e 2e       	mov	r0, r30
    5fb0:	3a f0       	brmi	.+14     	; 0x5fc0 <__divsf3_pse+0x3a>
    5fb2:	e0 e8       	ldi	r30, 0x80	; 128
    5fb4:	31 d0       	rcall	.+98     	; 0x6018 <__divsf3_pse+0x92>
    5fb6:	91 50       	subi	r25, 0x01	; 1
    5fb8:	50 40       	sbci	r21, 0x00	; 0
    5fba:	e6 95       	lsr	r30
    5fbc:	00 1c       	adc	r0, r0
    5fbe:	ca f7       	brpl	.-14     	; 0x5fb2 <__divsf3_pse+0x2c>
    5fc0:	2a d0       	rcall	.+84     	; 0x6016 <__divsf3_pse+0x90>
    5fc2:	fe 2f       	mov	r31, r30
    5fc4:	28 d0       	rcall	.+80     	; 0x6016 <__divsf3_pse+0x90>
    5fc6:	66 0f       	add	r22, r22
    5fc8:	77 1f       	adc	r23, r23
    5fca:	88 1f       	adc	r24, r24
    5fcc:	bb 1f       	adc	r27, r27
    5fce:	26 17       	cp	r18, r22
    5fd0:	37 07       	cpc	r19, r23
    5fd2:	48 07       	cpc	r20, r24
    5fd4:	ab 07       	cpc	r26, r27
    5fd6:	b0 e8       	ldi	r27, 0x80	; 128
    5fd8:	09 f0       	breq	.+2      	; 0x5fdc <__divsf3_pse+0x56>
    5fda:	bb 0b       	sbc	r27, r27
    5fdc:	80 2d       	mov	r24, r0
    5fde:	bf 01       	movw	r22, r30
    5fe0:	ff 27       	eor	r31, r31
    5fe2:	93 58       	subi	r25, 0x83	; 131
    5fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe6:	32 f0       	brmi	.+12     	; 0x5ff4 <__divsf3_pse+0x6e>
    5fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    5fea:	51 05       	cpc	r21, r1
    5fec:	70 f0       	brcs	.+28     	; 0x600a <__divsf3_pse+0x84>
    5fee:	2c c0       	rjmp	.+88     	; 0x6048 <__fp_inf>
    5ff0:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__fp_szero>
    5ff4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ff6:	e4 f3       	brlt	.-8      	; 0x5ff0 <__divsf3_pse+0x6a>
    5ff8:	98 3e       	cpi	r25, 0xE8	; 232
    5ffa:	d4 f3       	brlt	.-12     	; 0x5ff0 <__divsf3_pse+0x6a>
    5ffc:	86 95       	lsr	r24
    5ffe:	77 95       	ror	r23
    6000:	67 95       	ror	r22
    6002:	b7 95       	ror	r27
    6004:	f7 95       	ror	r31
    6006:	9f 5f       	subi	r25, 0xFF	; 255
    6008:	c9 f7       	brne	.-14     	; 0x5ffc <__divsf3_pse+0x76>
    600a:	88 0f       	add	r24, r24
    600c:	91 1d       	adc	r25, r1
    600e:	96 95       	lsr	r25
    6010:	87 95       	ror	r24
    6012:	97 f9       	bld	r25, 7
    6014:	08 95       	ret
    6016:	e1 e0       	ldi	r30, 0x01	; 1
    6018:	66 0f       	add	r22, r22
    601a:	77 1f       	adc	r23, r23
    601c:	88 1f       	adc	r24, r24
    601e:	bb 1f       	adc	r27, r27
    6020:	62 17       	cp	r22, r18
    6022:	73 07       	cpc	r23, r19
    6024:	84 07       	cpc	r24, r20
    6026:	ba 07       	cpc	r27, r26
    6028:	20 f0       	brcs	.+8      	; 0x6032 <__divsf3_pse+0xac>
    602a:	62 1b       	sub	r22, r18
    602c:	73 0b       	sbc	r23, r19
    602e:	84 0b       	sbc	r24, r20
    6030:	ba 0b       	sbc	r27, r26
    6032:	ee 1f       	adc	r30, r30
    6034:	88 f7       	brcc	.-30     	; 0x6018 <__divsf3_pse+0x92>
    6036:	e0 95       	com	r30
    6038:	08 95       	ret

0000603a <__fixsfsi>:
    603a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__fixunssfsi>
    603e:	68 94       	set
    6040:	b1 11       	cpse	r27, r1
    6042:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__fp_szero>
    6046:	08 95       	ret

00006048 <__fp_inf>:
    6048:	97 f9       	bld	r25, 7
    604a:	9f 67       	ori	r25, 0x7F	; 127
    604c:	80 e8       	ldi	r24, 0x80	; 128
    604e:	70 e0       	ldi	r23, 0x00	; 0
    6050:	60 e0       	ldi	r22, 0x00	; 0
    6052:	08 95       	ret

00006054 <__fp_nan>:
    6054:	9f ef       	ldi	r25, 0xFF	; 255
    6056:	80 ec       	ldi	r24, 0xC0	; 192
    6058:	08 95       	ret

0000605a <__fp_pscA>:
    605a:	00 24       	eor	r0, r0
    605c:	0a 94       	dec	r0
    605e:	16 16       	cp	r1, r22
    6060:	17 06       	cpc	r1, r23
    6062:	18 06       	cpc	r1, r24
    6064:	09 06       	cpc	r0, r25
    6066:	08 95       	ret

00006068 <__fp_pscB>:
    6068:	00 24       	eor	r0, r0
    606a:	0a 94       	dec	r0
    606c:	12 16       	cp	r1, r18
    606e:	13 06       	cpc	r1, r19
    6070:	14 06       	cpc	r1, r20
    6072:	05 06       	cpc	r0, r21
    6074:	08 95       	ret

00006076 <__fp_round>:
    6076:	09 2e       	mov	r0, r25
    6078:	03 94       	inc	r0
    607a:	00 0c       	add	r0, r0
    607c:	11 f4       	brne	.+4      	; 0x6082 <__fp_round+0xc>
    607e:	88 23       	and	r24, r24
    6080:	52 f0       	brmi	.+20     	; 0x6096 <__fp_round+0x20>
    6082:	bb 0f       	add	r27, r27
    6084:	40 f4       	brcc	.+16     	; 0x6096 <__fp_round+0x20>
    6086:	bf 2b       	or	r27, r31
    6088:	11 f4       	brne	.+4      	; 0x608e <__fp_round+0x18>
    608a:	60 ff       	sbrs	r22, 0
    608c:	04 c0       	rjmp	.+8      	; 0x6096 <__fp_round+0x20>
    608e:	6f 5f       	subi	r22, 0xFF	; 255
    6090:	7f 4f       	sbci	r23, 0xFF	; 255
    6092:	8f 4f       	sbci	r24, 0xFF	; 255
    6094:	9f 4f       	sbci	r25, 0xFF	; 255
    6096:	08 95       	ret

00006098 <__mulsf3>:
    6098:	0c d0       	rcall	.+24     	; 0x60b2 <__mulsf3x>
    609a:	ed cf       	rjmp	.-38     	; 0x6076 <__fp_round>
    609c:	de df       	rcall	.-68     	; 0x605a <__fp_pscA>
    609e:	28 f0       	brcs	.+10     	; 0x60aa <__mulsf3+0x12>
    60a0:	e3 df       	rcall	.-58     	; 0x6068 <__fp_pscB>
    60a2:	18 f0       	brcs	.+6      	; 0x60aa <__mulsf3+0x12>
    60a4:	95 23       	and	r25, r21
    60a6:	09 f0       	breq	.+2      	; 0x60aa <__mulsf3+0x12>
    60a8:	cf cf       	rjmp	.-98     	; 0x6048 <__fp_inf>
    60aa:	d4 cf       	rjmp	.-88     	; 0x6054 <__fp_nan>
    60ac:	11 24       	eor	r1, r1
    60ae:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__fp_szero>

000060b2 <__mulsf3x>:
    60b2:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_split3>
    60b6:	90 f3       	brcs	.-28     	; 0x609c <__mulsf3+0x4>

000060b8 <__mulsf3_pse>:
    60b8:	95 9f       	mul	r25, r21
    60ba:	c1 f3       	breq	.-16     	; 0x60ac <__mulsf3+0x14>
    60bc:	95 0f       	add	r25, r21
    60be:	50 e0       	ldi	r21, 0x00	; 0
    60c0:	55 1f       	adc	r21, r21
    60c2:	62 9f       	mul	r22, r18
    60c4:	f0 01       	movw	r30, r0
    60c6:	72 9f       	mul	r23, r18
    60c8:	bb 27       	eor	r27, r27
    60ca:	f0 0d       	add	r31, r0
    60cc:	b1 1d       	adc	r27, r1
    60ce:	63 9f       	mul	r22, r19
    60d0:	aa 27       	eor	r26, r26
    60d2:	f0 0d       	add	r31, r0
    60d4:	b1 1d       	adc	r27, r1
    60d6:	aa 1f       	adc	r26, r26
    60d8:	64 9f       	mul	r22, r20
    60da:	66 27       	eor	r22, r22
    60dc:	b0 0d       	add	r27, r0
    60de:	a1 1d       	adc	r26, r1
    60e0:	66 1f       	adc	r22, r22
    60e2:	82 9f       	mul	r24, r18
    60e4:	22 27       	eor	r18, r18
    60e6:	b0 0d       	add	r27, r0
    60e8:	a1 1d       	adc	r26, r1
    60ea:	62 1f       	adc	r22, r18
    60ec:	73 9f       	mul	r23, r19
    60ee:	b0 0d       	add	r27, r0
    60f0:	a1 1d       	adc	r26, r1
    60f2:	62 1f       	adc	r22, r18
    60f4:	83 9f       	mul	r24, r19
    60f6:	a0 0d       	add	r26, r0
    60f8:	61 1d       	adc	r22, r1
    60fa:	22 1f       	adc	r18, r18
    60fc:	74 9f       	mul	r23, r20
    60fe:	33 27       	eor	r19, r19
    6100:	a0 0d       	add	r26, r0
    6102:	61 1d       	adc	r22, r1
    6104:	23 1f       	adc	r18, r19
    6106:	84 9f       	mul	r24, r20
    6108:	60 0d       	add	r22, r0
    610a:	21 1d       	adc	r18, r1
    610c:	82 2f       	mov	r24, r18
    610e:	76 2f       	mov	r23, r22
    6110:	6a 2f       	mov	r22, r26
    6112:	11 24       	eor	r1, r1
    6114:	9f 57       	subi	r25, 0x7F	; 127
    6116:	50 40       	sbci	r21, 0x00	; 0
    6118:	92 f0       	brmi	.+36     	; 0x613e <__mulsf3_pse+0x86>
    611a:	e9 f0       	breq	.+58     	; 0x6156 <__mulsf3_pse+0x9e>
    611c:	88 23       	and	r24, r24
    611e:	4a f0       	brmi	.+18     	; 0x6132 <__mulsf3_pse+0x7a>
    6120:	ee 0f       	add	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	bb 1f       	adc	r27, r27
    6126:	66 1f       	adc	r22, r22
    6128:	77 1f       	adc	r23, r23
    612a:	88 1f       	adc	r24, r24
    612c:	91 50       	subi	r25, 0x01	; 1
    612e:	50 40       	sbci	r21, 0x00	; 0
    6130:	a9 f7       	brne	.-22     	; 0x611c <__mulsf3_pse+0x64>
    6132:	9e 3f       	cpi	r25, 0xFE	; 254
    6134:	51 05       	cpc	r21, r1
    6136:	78 f0       	brcs	.+30     	; 0x6156 <__mulsf3_pse+0x9e>
    6138:	87 cf       	rjmp	.-242    	; 0x6048 <__fp_inf>
    613a:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__fp_szero>
    613e:	5f 3f       	cpi	r21, 0xFF	; 255
    6140:	e4 f3       	brlt	.-8      	; 0x613a <__mulsf3_pse+0x82>
    6142:	98 3e       	cpi	r25, 0xE8	; 232
    6144:	d4 f3       	brlt	.-12     	; 0x613a <__mulsf3_pse+0x82>
    6146:	86 95       	lsr	r24
    6148:	77 95       	ror	r23
    614a:	67 95       	ror	r22
    614c:	b7 95       	ror	r27
    614e:	f7 95       	ror	r31
    6150:	e7 95       	ror	r30
    6152:	9f 5f       	subi	r25, 0xFF	; 255
    6154:	c1 f7       	brne	.-16     	; 0x6146 <__mulsf3_pse+0x8e>
    6156:	fe 2b       	or	r31, r30
    6158:	88 0f       	add	r24, r24
    615a:	91 1d       	adc	r25, r1
    615c:	96 95       	lsr	r25
    615e:	87 95       	ror	r24
    6160:	97 f9       	bld	r25, 7
    6162:	08 95       	ret

00006164 <__udivmodsi4>:
    6164:	a1 e2       	ldi	r26, 0x21	; 33
    6166:	1a 2e       	mov	r1, r26
    6168:	aa 1b       	sub	r26, r26
    616a:	bb 1b       	sub	r27, r27
    616c:	fd 01       	movw	r30, r26
    616e:	0d c0       	rjmp	.+26     	; 0x618a <__udivmodsi4_ep>

00006170 <__udivmodsi4_loop>:
    6170:	aa 1f       	adc	r26, r26
    6172:	bb 1f       	adc	r27, r27
    6174:	ee 1f       	adc	r30, r30
    6176:	ff 1f       	adc	r31, r31
    6178:	a2 17       	cp	r26, r18
    617a:	b3 07       	cpc	r27, r19
    617c:	e4 07       	cpc	r30, r20
    617e:	f5 07       	cpc	r31, r21
    6180:	20 f0       	brcs	.+8      	; 0x618a <__udivmodsi4_ep>
    6182:	a2 1b       	sub	r26, r18
    6184:	b3 0b       	sbc	r27, r19
    6186:	e4 0b       	sbc	r30, r20
    6188:	f5 0b       	sbc	r31, r21

0000618a <__udivmodsi4_ep>:
    618a:	66 1f       	adc	r22, r22
    618c:	77 1f       	adc	r23, r23
    618e:	88 1f       	adc	r24, r24
    6190:	99 1f       	adc	r25, r25
    6192:	1a 94       	dec	r1
    6194:	69 f7       	brne	.-38     	; 0x6170 <__udivmodsi4_loop>
    6196:	60 95       	com	r22
    6198:	70 95       	com	r23
    619a:	80 95       	com	r24
    619c:	90 95       	com	r25
    619e:	9b 01       	movw	r18, r22
    61a0:	ac 01       	movw	r20, r24
    61a2:	bd 01       	movw	r22, r26
    61a4:	cf 01       	movw	r24, r30
    61a6:	08 95       	ret

000061a8 <__tablejump2__>:
    61a8:	ee 0f       	add	r30, r30
    61aa:	ff 1f       	adc	r31, r31
    61ac:	88 1f       	adc	r24, r24
    61ae:	8b bf       	out	0x3b, r24	; 59
    61b0:	07 90       	elpm	r0, Z+
    61b2:	f6 91       	elpm	r31, Z
    61b4:	e0 2d       	mov	r30, r0
    61b6:	19 94       	eijmp

000061b8 <malloc>:
    61b8:	0f 93       	push	r16
    61ba:	1f 93       	push	r17
    61bc:	cf 93       	push	r28
    61be:	df 93       	push	r29
    61c0:	82 30       	cpi	r24, 0x02	; 2
    61c2:	91 05       	cpc	r25, r1
    61c4:	10 f4       	brcc	.+4      	; 0x61ca <malloc+0x12>
    61c6:	82 e0       	ldi	r24, 0x02	; 2
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	e0 91 b7 18 	lds	r30, 0x18B7	; 0x8018b7 <__flp>
    61ce:	f0 91 b8 18 	lds	r31, 0x18B8	; 0x8018b8 <__flp+0x1>
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	a0 e0       	ldi	r26, 0x00	; 0
    61d8:	b0 e0       	ldi	r27, 0x00	; 0
    61da:	30 97       	sbiw	r30, 0x00	; 0
    61dc:	19 f1       	breq	.+70     	; 0x6224 <malloc+0x6c>
    61de:	40 81       	ld	r20, Z
    61e0:	51 81       	ldd	r21, Z+1	; 0x01
    61e2:	02 81       	ldd	r16, Z+2	; 0x02
    61e4:	13 81       	ldd	r17, Z+3	; 0x03
    61e6:	48 17       	cp	r20, r24
    61e8:	59 07       	cpc	r21, r25
    61ea:	c8 f0       	brcs	.+50     	; 0x621e <malloc+0x66>
    61ec:	84 17       	cp	r24, r20
    61ee:	95 07       	cpc	r25, r21
    61f0:	69 f4       	brne	.+26     	; 0x620c <malloc+0x54>
    61f2:	10 97       	sbiw	r26, 0x00	; 0
    61f4:	31 f0       	breq	.+12     	; 0x6202 <malloc+0x4a>
    61f6:	12 96       	adiw	r26, 0x02	; 2
    61f8:	0c 93       	st	X, r16
    61fa:	12 97       	sbiw	r26, 0x02	; 2
    61fc:	13 96       	adiw	r26, 0x03	; 3
    61fe:	1c 93       	st	X, r17
    6200:	27 c0       	rjmp	.+78     	; 0x6250 <malloc+0x98>
    6202:	00 93 b7 18 	sts	0x18B7, r16	; 0x8018b7 <__flp>
    6206:	10 93 b8 18 	sts	0x18B8, r17	; 0x8018b8 <__flp+0x1>
    620a:	22 c0       	rjmp	.+68     	; 0x6250 <malloc+0x98>
    620c:	21 15       	cp	r18, r1
    620e:	31 05       	cpc	r19, r1
    6210:	19 f0       	breq	.+6      	; 0x6218 <malloc+0x60>
    6212:	42 17       	cp	r20, r18
    6214:	53 07       	cpc	r21, r19
    6216:	18 f4       	brcc	.+6      	; 0x621e <malloc+0x66>
    6218:	9a 01       	movw	r18, r20
    621a:	bd 01       	movw	r22, r26
    621c:	ef 01       	movw	r28, r30
    621e:	df 01       	movw	r26, r30
    6220:	f8 01       	movw	r30, r16
    6222:	db cf       	rjmp	.-74     	; 0x61da <malloc+0x22>
    6224:	21 15       	cp	r18, r1
    6226:	31 05       	cpc	r19, r1
    6228:	f9 f0       	breq	.+62     	; 0x6268 <malloc+0xb0>
    622a:	28 1b       	sub	r18, r24
    622c:	39 0b       	sbc	r19, r25
    622e:	24 30       	cpi	r18, 0x04	; 4
    6230:	31 05       	cpc	r19, r1
    6232:	80 f4       	brcc	.+32     	; 0x6254 <malloc+0x9c>
    6234:	8a 81       	ldd	r24, Y+2	; 0x02
    6236:	9b 81       	ldd	r25, Y+3	; 0x03
    6238:	61 15       	cp	r22, r1
    623a:	71 05       	cpc	r23, r1
    623c:	21 f0       	breq	.+8      	; 0x6246 <malloc+0x8e>
    623e:	fb 01       	movw	r30, r22
    6240:	93 83       	std	Z+3, r25	; 0x03
    6242:	82 83       	std	Z+2, r24	; 0x02
    6244:	04 c0       	rjmp	.+8      	; 0x624e <malloc+0x96>
    6246:	90 93 b8 18 	sts	0x18B8, r25	; 0x8018b8 <__flp+0x1>
    624a:	80 93 b7 18 	sts	0x18B7, r24	; 0x8018b7 <__flp>
    624e:	fe 01       	movw	r30, r28
    6250:	32 96       	adiw	r30, 0x02	; 2
    6252:	44 c0       	rjmp	.+136    	; 0x62dc <malloc+0x124>
    6254:	fe 01       	movw	r30, r28
    6256:	e2 0f       	add	r30, r18
    6258:	f3 1f       	adc	r31, r19
    625a:	81 93       	st	Z+, r24
    625c:	91 93       	st	Z+, r25
    625e:	22 50       	subi	r18, 0x02	; 2
    6260:	31 09       	sbc	r19, r1
    6262:	39 83       	std	Y+1, r19	; 0x01
    6264:	28 83       	st	Y, r18
    6266:	3a c0       	rjmp	.+116    	; 0x62dc <malloc+0x124>
    6268:	20 91 b5 18 	lds	r18, 0x18B5	; 0x8018b5 <__brkval>
    626c:	30 91 b6 18 	lds	r19, 0x18B6	; 0x8018b6 <__brkval+0x1>
    6270:	23 2b       	or	r18, r19
    6272:	41 f4       	brne	.+16     	; 0x6284 <malloc+0xcc>
    6274:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6278:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    627c:	30 93 b6 18 	sts	0x18B6, r19	; 0x8018b6 <__brkval+0x1>
    6280:	20 93 b5 18 	sts	0x18B5, r18	; 0x8018b5 <__brkval>
    6284:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6288:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    628c:	21 15       	cp	r18, r1
    628e:	31 05       	cpc	r19, r1
    6290:	41 f4       	brne	.+16     	; 0x62a2 <malloc+0xea>
    6292:	2d b7       	in	r18, 0x3d	; 61
    6294:	3e b7       	in	r19, 0x3e	; 62
    6296:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    629a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    629e:	24 1b       	sub	r18, r20
    62a0:	35 0b       	sbc	r19, r21
    62a2:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <__brkval>
    62a6:	f0 91 b6 18 	lds	r31, 0x18B6	; 0x8018b6 <__brkval+0x1>
    62aa:	e2 17       	cp	r30, r18
    62ac:	f3 07       	cpc	r31, r19
    62ae:	a0 f4       	brcc	.+40     	; 0x62d8 <malloc+0x120>
    62b0:	2e 1b       	sub	r18, r30
    62b2:	3f 0b       	sbc	r19, r31
    62b4:	28 17       	cp	r18, r24
    62b6:	39 07       	cpc	r19, r25
    62b8:	78 f0       	brcs	.+30     	; 0x62d8 <malloc+0x120>
    62ba:	ac 01       	movw	r20, r24
    62bc:	4e 5f       	subi	r20, 0xFE	; 254
    62be:	5f 4f       	sbci	r21, 0xFF	; 255
    62c0:	24 17       	cp	r18, r20
    62c2:	35 07       	cpc	r19, r21
    62c4:	48 f0       	brcs	.+18     	; 0x62d8 <malloc+0x120>
    62c6:	4e 0f       	add	r20, r30
    62c8:	5f 1f       	adc	r21, r31
    62ca:	50 93 b6 18 	sts	0x18B6, r21	; 0x8018b6 <__brkval+0x1>
    62ce:	40 93 b5 18 	sts	0x18B5, r20	; 0x8018b5 <__brkval>
    62d2:	81 93       	st	Z+, r24
    62d4:	91 93       	st	Z+, r25
    62d6:	02 c0       	rjmp	.+4      	; 0x62dc <malloc+0x124>
    62d8:	e0 e0       	ldi	r30, 0x00	; 0
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	cf 01       	movw	r24, r30
    62de:	df 91       	pop	r29
    62e0:	cf 91       	pop	r28
    62e2:	1f 91       	pop	r17
    62e4:	0f 91       	pop	r16
    62e6:	08 95       	ret

000062e8 <free>:
    62e8:	cf 93       	push	r28
    62ea:	df 93       	push	r29
    62ec:	00 97       	sbiw	r24, 0x00	; 0
    62ee:	09 f4       	brne	.+2      	; 0x62f2 <free+0xa>
    62f0:	81 c0       	rjmp	.+258    	; 0x63f4 <free+0x10c>
    62f2:	fc 01       	movw	r30, r24
    62f4:	32 97       	sbiw	r30, 0x02	; 2
    62f6:	13 82       	std	Z+3, r1	; 0x03
    62f8:	12 82       	std	Z+2, r1	; 0x02
    62fa:	a0 91 b7 18 	lds	r26, 0x18B7	; 0x8018b7 <__flp>
    62fe:	b0 91 b8 18 	lds	r27, 0x18B8	; 0x8018b8 <__flp+0x1>
    6302:	10 97       	sbiw	r26, 0x00	; 0
    6304:	81 f4       	brne	.+32     	; 0x6326 <free+0x3e>
    6306:	20 81       	ld	r18, Z
    6308:	31 81       	ldd	r19, Z+1	; 0x01
    630a:	82 0f       	add	r24, r18
    630c:	93 1f       	adc	r25, r19
    630e:	20 91 b5 18 	lds	r18, 0x18B5	; 0x8018b5 <__brkval>
    6312:	30 91 b6 18 	lds	r19, 0x18B6	; 0x8018b6 <__brkval+0x1>
    6316:	28 17       	cp	r18, r24
    6318:	39 07       	cpc	r19, r25
    631a:	51 f5       	brne	.+84     	; 0x6370 <free+0x88>
    631c:	f0 93 b6 18 	sts	0x18B6, r31	; 0x8018b6 <__brkval+0x1>
    6320:	e0 93 b5 18 	sts	0x18B5, r30	; 0x8018b5 <__brkval>
    6324:	67 c0       	rjmp	.+206    	; 0x63f4 <free+0x10c>
    6326:	ed 01       	movw	r28, r26
    6328:	20 e0       	ldi	r18, 0x00	; 0
    632a:	30 e0       	ldi	r19, 0x00	; 0
    632c:	ce 17       	cp	r28, r30
    632e:	df 07       	cpc	r29, r31
    6330:	40 f4       	brcc	.+16     	; 0x6342 <free+0x5a>
    6332:	4a 81       	ldd	r20, Y+2	; 0x02
    6334:	5b 81       	ldd	r21, Y+3	; 0x03
    6336:	9e 01       	movw	r18, r28
    6338:	41 15       	cp	r20, r1
    633a:	51 05       	cpc	r21, r1
    633c:	f1 f0       	breq	.+60     	; 0x637a <free+0x92>
    633e:	ea 01       	movw	r28, r20
    6340:	f5 cf       	rjmp	.-22     	; 0x632c <free+0x44>
    6342:	d3 83       	std	Z+3, r29	; 0x03
    6344:	c2 83       	std	Z+2, r28	; 0x02
    6346:	40 81       	ld	r20, Z
    6348:	51 81       	ldd	r21, Z+1	; 0x01
    634a:	84 0f       	add	r24, r20
    634c:	95 1f       	adc	r25, r21
    634e:	c8 17       	cp	r28, r24
    6350:	d9 07       	cpc	r29, r25
    6352:	59 f4       	brne	.+22     	; 0x636a <free+0x82>
    6354:	88 81       	ld	r24, Y
    6356:	99 81       	ldd	r25, Y+1	; 0x01
    6358:	84 0f       	add	r24, r20
    635a:	95 1f       	adc	r25, r21
    635c:	02 96       	adiw	r24, 0x02	; 2
    635e:	91 83       	std	Z+1, r25	; 0x01
    6360:	80 83       	st	Z, r24
    6362:	8a 81       	ldd	r24, Y+2	; 0x02
    6364:	9b 81       	ldd	r25, Y+3	; 0x03
    6366:	93 83       	std	Z+3, r25	; 0x03
    6368:	82 83       	std	Z+2, r24	; 0x02
    636a:	21 15       	cp	r18, r1
    636c:	31 05       	cpc	r19, r1
    636e:	29 f4       	brne	.+10     	; 0x637a <free+0x92>
    6370:	f0 93 b8 18 	sts	0x18B8, r31	; 0x8018b8 <__flp+0x1>
    6374:	e0 93 b7 18 	sts	0x18B7, r30	; 0x8018b7 <__flp>
    6378:	3d c0       	rjmp	.+122    	; 0x63f4 <free+0x10c>
    637a:	e9 01       	movw	r28, r18
    637c:	fb 83       	std	Y+3, r31	; 0x03
    637e:	ea 83       	std	Y+2, r30	; 0x02
    6380:	49 91       	ld	r20, Y+
    6382:	59 91       	ld	r21, Y+
    6384:	c4 0f       	add	r28, r20
    6386:	d5 1f       	adc	r29, r21
    6388:	ec 17       	cp	r30, r28
    638a:	fd 07       	cpc	r31, r29
    638c:	61 f4       	brne	.+24     	; 0x63a6 <free+0xbe>
    638e:	80 81       	ld	r24, Z
    6390:	91 81       	ldd	r25, Z+1	; 0x01
    6392:	84 0f       	add	r24, r20
    6394:	95 1f       	adc	r25, r21
    6396:	02 96       	adiw	r24, 0x02	; 2
    6398:	e9 01       	movw	r28, r18
    639a:	99 83       	std	Y+1, r25	; 0x01
    639c:	88 83       	st	Y, r24
    639e:	82 81       	ldd	r24, Z+2	; 0x02
    63a0:	93 81       	ldd	r25, Z+3	; 0x03
    63a2:	9b 83       	std	Y+3, r25	; 0x03
    63a4:	8a 83       	std	Y+2, r24	; 0x02
    63a6:	e0 e0       	ldi	r30, 0x00	; 0
    63a8:	f0 e0       	ldi	r31, 0x00	; 0
    63aa:	12 96       	adiw	r26, 0x02	; 2
    63ac:	8d 91       	ld	r24, X+
    63ae:	9c 91       	ld	r25, X
    63b0:	13 97       	sbiw	r26, 0x03	; 3
    63b2:	00 97       	sbiw	r24, 0x00	; 0
    63b4:	19 f0       	breq	.+6      	; 0x63bc <free+0xd4>
    63b6:	fd 01       	movw	r30, r26
    63b8:	dc 01       	movw	r26, r24
    63ba:	f7 cf       	rjmp	.-18     	; 0x63aa <free+0xc2>
    63bc:	8d 91       	ld	r24, X+
    63be:	9c 91       	ld	r25, X
    63c0:	11 97       	sbiw	r26, 0x01	; 1
    63c2:	9d 01       	movw	r18, r26
    63c4:	2e 5f       	subi	r18, 0xFE	; 254
    63c6:	3f 4f       	sbci	r19, 0xFF	; 255
    63c8:	82 0f       	add	r24, r18
    63ca:	93 1f       	adc	r25, r19
    63cc:	20 91 b5 18 	lds	r18, 0x18B5	; 0x8018b5 <__brkval>
    63d0:	30 91 b6 18 	lds	r19, 0x18B6	; 0x8018b6 <__brkval+0x1>
    63d4:	28 17       	cp	r18, r24
    63d6:	39 07       	cpc	r19, r25
    63d8:	69 f4       	brne	.+26     	; 0x63f4 <free+0x10c>
    63da:	30 97       	sbiw	r30, 0x00	; 0
    63dc:	29 f4       	brne	.+10     	; 0x63e8 <free+0x100>
    63de:	10 92 b8 18 	sts	0x18B8, r1	; 0x8018b8 <__flp+0x1>
    63e2:	10 92 b7 18 	sts	0x18B7, r1	; 0x8018b7 <__flp>
    63e6:	02 c0       	rjmp	.+4      	; 0x63ec <free+0x104>
    63e8:	13 82       	std	Z+3, r1	; 0x03
    63ea:	12 82       	std	Z+2, r1	; 0x02
    63ec:	b0 93 b6 18 	sts	0x18B6, r27	; 0x8018b6 <__brkval+0x1>
    63f0:	a0 93 b5 18 	sts	0x18B5, r26	; 0x8018b5 <__brkval>
    63f4:	df 91       	pop	r29
    63f6:	cf 91       	pop	r28
    63f8:	08 95       	ret

000063fa <abort>:
    63fa:	81 e0       	ldi	r24, 0x01	; 1
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	f8 94       	cli
    6400:	7d c3       	rjmp	.+1786   	; 0x6afc <_exit>

00006402 <memcpy>:
    6402:	fb 01       	movw	r30, r22
    6404:	dc 01       	movw	r26, r24
    6406:	02 c0       	rjmp	.+4      	; 0x640c <memcpy+0xa>
    6408:	01 90       	ld	r0, Z+
    640a:	0d 92       	st	X+, r0
    640c:	41 50       	subi	r20, 0x01	; 1
    640e:	50 40       	sbci	r21, 0x00	; 0
    6410:	d8 f7       	brcc	.-10     	; 0x6408 <memcpy+0x6>
    6412:	08 95       	ret

00006414 <memset>:
    6414:	dc 01       	movw	r26, r24
    6416:	01 c0       	rjmp	.+2      	; 0x641a <memset+0x6>
    6418:	6d 93       	st	X+, r22
    641a:	41 50       	subi	r20, 0x01	; 1
    641c:	50 40       	sbci	r21, 0x00	; 0
    641e:	e0 f7       	brcc	.-8      	; 0x6418 <memset+0x4>
    6420:	08 95       	ret

00006422 <strcasestr>:
    6422:	fb 01       	movw	r30, r22
    6424:	51 91       	ld	r21, Z+
    6426:	55 23       	and	r21, r21
    6428:	b1 f0       	breq	.+44     	; 0x6456 <strcasestr+0x34>
    642a:	bf 01       	movw	r22, r30
    642c:	dc 01       	movw	r26, r24
    642e:	05 2e       	mov	r0, r21
    6430:	4d 91       	ld	r20, X+
    6432:	44 23       	and	r20, r20
    6434:	69 f0       	breq	.+26     	; 0x6450 <strcasestr+0x2e>
    6436:	10 d0       	rcall	.+32     	; 0x6458 <strcasestr+0x36>
    6438:	d9 f7       	brne	.-10     	; 0x6430 <strcasestr+0xe>
    643a:	cd 01       	movw	r24, r26
    643c:	01 90       	ld	r0, Z+
    643e:	00 20       	and	r0, r0
    6440:	49 f0       	breq	.+18     	; 0x6454 <strcasestr+0x32>
    6442:	4d 91       	ld	r20, X+
    6444:	41 11       	cpse	r20, r1
    6446:	08 d0       	rcall	.+16     	; 0x6458 <strcasestr+0x36>
    6448:	c9 f3       	breq	.-14     	; 0x643c <strcasestr+0x1a>
    644a:	fb 01       	movw	r30, r22
    644c:	41 11       	cpse	r20, r1
    644e:	ee cf       	rjmp	.-36     	; 0x642c <strcasestr+0xa>
    6450:	81 e0       	ldi	r24, 0x01	; 1
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	01 97       	sbiw	r24, 0x01	; 1
    6456:	08 95       	ret
    6458:	40 25       	eor	r20, r0
    645a:	39 f0       	breq	.+14     	; 0x646a <strcasestr+0x48>
    645c:	40 32       	cpi	r20, 0x20	; 32
    645e:	29 f4       	brne	.+10     	; 0x646a <strcasestr+0x48>
    6460:	40 29       	or	r20, r0
    6462:	4b 57       	subi	r20, 0x7B	; 123
    6464:	46 5e       	subi	r20, 0xE6	; 230
    6466:	08 f0       	brcs	.+2      	; 0x646a <strcasestr+0x48>
    6468:	18 94       	sez
    646a:	08 95       	ret

0000646c <strcat>:
    646c:	fb 01       	movw	r30, r22
    646e:	dc 01       	movw	r26, r24
    6470:	0d 90       	ld	r0, X+
    6472:	00 20       	and	r0, r0
    6474:	e9 f7       	brne	.-6      	; 0x6470 <strcat+0x4>
    6476:	11 97       	sbiw	r26, 0x01	; 1
    6478:	01 90       	ld	r0, Z+
    647a:	0d 92       	st	X+, r0
    647c:	00 20       	and	r0, r0
    647e:	e1 f7       	brne	.-8      	; 0x6478 <strcat+0xc>
    6480:	08 95       	ret

00006482 <strcpy>:
    6482:	fb 01       	movw	r30, r22
    6484:	dc 01       	movw	r26, r24
    6486:	01 90       	ld	r0, Z+
    6488:	0d 92       	st	X+, r0
    648a:	00 20       	and	r0, r0
    648c:	e1 f7       	brne	.-8      	; 0x6486 <strcpy+0x4>
    648e:	08 95       	ret

00006490 <strncasecmp>:
    6490:	fb 01       	movw	r30, r22
    6492:	dc 01       	movw	r26, r24
    6494:	41 50       	subi	r20, 0x01	; 1
    6496:	50 40       	sbci	r21, 0x00	; 0
    6498:	88 f0       	brcs	.+34     	; 0x64bc <strncasecmp+0x2c>
    649a:	8d 91       	ld	r24, X+
    649c:	81 34       	cpi	r24, 0x41	; 65
    649e:	1c f0       	brlt	.+6      	; 0x64a6 <strncasecmp+0x16>
    64a0:	8b 35       	cpi	r24, 0x5B	; 91
    64a2:	0c f4       	brge	.+2      	; 0x64a6 <strncasecmp+0x16>
    64a4:	80 5e       	subi	r24, 0xE0	; 224
    64a6:	61 91       	ld	r22, Z+
    64a8:	61 34       	cpi	r22, 0x41	; 65
    64aa:	1c f0       	brlt	.+6      	; 0x64b2 <strncasecmp+0x22>
    64ac:	6b 35       	cpi	r22, 0x5B	; 91
    64ae:	0c f4       	brge	.+2      	; 0x64b2 <strncasecmp+0x22>
    64b0:	60 5e       	subi	r22, 0xE0	; 224
    64b2:	86 1b       	sub	r24, r22
    64b4:	61 11       	cpse	r22, r1
    64b6:	71 f3       	breq	.-36     	; 0x6494 <strncasecmp+0x4>
    64b8:	99 0b       	sbc	r25, r25
    64ba:	08 95       	ret
    64bc:	88 1b       	sub	r24, r24
    64be:	fc cf       	rjmp	.-8      	; 0x64b8 <strncasecmp+0x28>

000064c0 <printf>:
    64c0:	cf 93       	push	r28
    64c2:	df 93       	push	r29
    64c4:	cd b7       	in	r28, 0x3d	; 61
    64c6:	de b7       	in	r29, 0x3e	; 62
    64c8:	ae 01       	movw	r20, r28
    64ca:	4a 5f       	subi	r20, 0xFA	; 250
    64cc:	5f 4f       	sbci	r21, 0xFF	; 255
    64ce:	fa 01       	movw	r30, r20
    64d0:	61 91       	ld	r22, Z+
    64d2:	71 91       	ld	r23, Z+
    64d4:	af 01       	movw	r20, r30
    64d6:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <__iob+0x2>
    64da:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <__iob+0x3>
    64de:	61 d0       	rcall	.+194    	; 0x65a2 <vfprintf>
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	08 95       	ret

000064e6 <puts>:
    64e6:	0f 93       	push	r16
    64e8:	1f 93       	push	r17
    64ea:	cf 93       	push	r28
    64ec:	df 93       	push	r29
    64ee:	e0 91 bb 18 	lds	r30, 0x18BB	; 0x8018bb <__iob+0x2>
    64f2:	f0 91 bc 18 	lds	r31, 0x18BC	; 0x8018bc <__iob+0x3>
    64f6:	23 81       	ldd	r18, Z+3	; 0x03
    64f8:	21 ff       	sbrs	r18, 1
    64fa:	1b c0       	rjmp	.+54     	; 0x6532 <puts+0x4c>
    64fc:	8c 01       	movw	r16, r24
    64fe:	d0 e0       	ldi	r29, 0x00	; 0
    6500:	c0 e0       	ldi	r28, 0x00	; 0
    6502:	f8 01       	movw	r30, r16
    6504:	81 91       	ld	r24, Z+
    6506:	8f 01       	movw	r16, r30
    6508:	60 91 bb 18 	lds	r22, 0x18BB	; 0x8018bb <__iob+0x2>
    650c:	70 91 bc 18 	lds	r23, 0x18BC	; 0x8018bc <__iob+0x3>
    6510:	db 01       	movw	r26, r22
    6512:	18 96       	adiw	r26, 0x08	; 8
    6514:	ed 91       	ld	r30, X+
    6516:	fc 91       	ld	r31, X
    6518:	19 97       	sbiw	r26, 0x09	; 9
    651a:	88 23       	and	r24, r24
    651c:	31 f0       	breq	.+12     	; 0x652a <puts+0x44>
    651e:	19 95       	eicall
    6520:	89 2b       	or	r24, r25
    6522:	79 f3       	breq	.-34     	; 0x6502 <puts+0x1c>
    6524:	df ef       	ldi	r29, 0xFF	; 255
    6526:	cf ef       	ldi	r28, 0xFF	; 255
    6528:	ec cf       	rjmp	.-40     	; 0x6502 <puts+0x1c>
    652a:	8a e0       	ldi	r24, 0x0A	; 10
    652c:	19 95       	eicall
    652e:	89 2b       	or	r24, r25
    6530:	19 f0       	breq	.+6      	; 0x6538 <puts+0x52>
    6532:	8f ef       	ldi	r24, 0xFF	; 255
    6534:	9f ef       	ldi	r25, 0xFF	; 255
    6536:	02 c0       	rjmp	.+4      	; 0x653c <puts+0x56>
    6538:	8d 2f       	mov	r24, r29
    653a:	9c 2f       	mov	r25, r28
    653c:	df 91       	pop	r29
    653e:	cf 91       	pop	r28
    6540:	1f 91       	pop	r17
    6542:	0f 91       	pop	r16
    6544:	08 95       	ret

00006546 <sprintf>:
    6546:	0f 93       	push	r16
    6548:	1f 93       	push	r17
    654a:	cf 93       	push	r28
    654c:	df 93       	push	r29
    654e:	cd b7       	in	r28, 0x3d	; 61
    6550:	de b7       	in	r29, 0x3e	; 62
    6552:	2e 97       	sbiw	r28, 0x0e	; 14
    6554:	0f b6       	in	r0, 0x3f	; 63
    6556:	f8 94       	cli
    6558:	de bf       	out	0x3e, r29	; 62
    655a:	0f be       	out	0x3f, r0	; 63
    655c:	cd bf       	out	0x3d, r28	; 61
    655e:	0e 89       	ldd	r16, Y+22	; 0x16
    6560:	1f 89       	ldd	r17, Y+23	; 0x17
    6562:	86 e0       	ldi	r24, 0x06	; 6
    6564:	8c 83       	std	Y+4, r24	; 0x04
    6566:	1a 83       	std	Y+2, r17	; 0x02
    6568:	09 83       	std	Y+1, r16	; 0x01
    656a:	8f ef       	ldi	r24, 0xFF	; 255
    656c:	9f e7       	ldi	r25, 0x7F	; 127
    656e:	9e 83       	std	Y+6, r25	; 0x06
    6570:	8d 83       	std	Y+5, r24	; 0x05
    6572:	ae 01       	movw	r20, r28
    6574:	46 5e       	subi	r20, 0xE6	; 230
    6576:	5f 4f       	sbci	r21, 0xFF	; 255
    6578:	68 8d       	ldd	r22, Y+24	; 0x18
    657a:	79 8d       	ldd	r23, Y+25	; 0x19
    657c:	ce 01       	movw	r24, r28
    657e:	01 96       	adiw	r24, 0x01	; 1
    6580:	10 d0       	rcall	.+32     	; 0x65a2 <vfprintf>
    6582:	ef 81       	ldd	r30, Y+7	; 0x07
    6584:	f8 85       	ldd	r31, Y+8	; 0x08
    6586:	e0 0f       	add	r30, r16
    6588:	f1 1f       	adc	r31, r17
    658a:	10 82       	st	Z, r1
    658c:	2e 96       	adiw	r28, 0x0e	; 14
    658e:	0f b6       	in	r0, 0x3f	; 63
    6590:	f8 94       	cli
    6592:	de bf       	out	0x3e, r29	; 62
    6594:	0f be       	out	0x3f, r0	; 63
    6596:	cd bf       	out	0x3d, r28	; 61
    6598:	df 91       	pop	r29
    659a:	cf 91       	pop	r28
    659c:	1f 91       	pop	r17
    659e:	0f 91       	pop	r16
    65a0:	08 95       	ret

000065a2 <vfprintf>:
    65a2:	2f 92       	push	r2
    65a4:	3f 92       	push	r3
    65a6:	4f 92       	push	r4
    65a8:	5f 92       	push	r5
    65aa:	6f 92       	push	r6
    65ac:	7f 92       	push	r7
    65ae:	8f 92       	push	r8
    65b0:	9f 92       	push	r9
    65b2:	af 92       	push	r10
    65b4:	bf 92       	push	r11
    65b6:	cf 92       	push	r12
    65b8:	df 92       	push	r13
    65ba:	ef 92       	push	r14
    65bc:	ff 92       	push	r15
    65be:	0f 93       	push	r16
    65c0:	1f 93       	push	r17
    65c2:	cf 93       	push	r28
    65c4:	df 93       	push	r29
    65c6:	cd b7       	in	r28, 0x3d	; 61
    65c8:	de b7       	in	r29, 0x3e	; 62
    65ca:	2b 97       	sbiw	r28, 0x0b	; 11
    65cc:	0f b6       	in	r0, 0x3f	; 63
    65ce:	f8 94       	cli
    65d0:	de bf       	out	0x3e, r29	; 62
    65d2:	0f be       	out	0x3f, r0	; 63
    65d4:	cd bf       	out	0x3d, r28	; 61
    65d6:	6c 01       	movw	r12, r24
    65d8:	7b 01       	movw	r14, r22
    65da:	8a 01       	movw	r16, r20
    65dc:	fc 01       	movw	r30, r24
    65de:	17 82       	std	Z+7, r1	; 0x07
    65e0:	16 82       	std	Z+6, r1	; 0x06
    65e2:	83 81       	ldd	r24, Z+3	; 0x03
    65e4:	81 ff       	sbrs	r24, 1
    65e6:	bf c1       	rjmp	.+894    	; 0x6966 <vfprintf+0x3c4>
    65e8:	ce 01       	movw	r24, r28
    65ea:	01 96       	adiw	r24, 0x01	; 1
    65ec:	3c 01       	movw	r6, r24
    65ee:	f6 01       	movw	r30, r12
    65f0:	93 81       	ldd	r25, Z+3	; 0x03
    65f2:	f7 01       	movw	r30, r14
    65f4:	93 fd       	sbrc	r25, 3
    65f6:	85 91       	lpm	r24, Z+
    65f8:	93 ff       	sbrs	r25, 3
    65fa:	81 91       	ld	r24, Z+
    65fc:	7f 01       	movw	r14, r30
    65fe:	88 23       	and	r24, r24
    6600:	09 f4       	brne	.+2      	; 0x6604 <vfprintf+0x62>
    6602:	ad c1       	rjmp	.+858    	; 0x695e <vfprintf+0x3bc>
    6604:	85 32       	cpi	r24, 0x25	; 37
    6606:	39 f4       	brne	.+14     	; 0x6616 <vfprintf+0x74>
    6608:	93 fd       	sbrc	r25, 3
    660a:	85 91       	lpm	r24, Z+
    660c:	93 ff       	sbrs	r25, 3
    660e:	81 91       	ld	r24, Z+
    6610:	7f 01       	movw	r14, r30
    6612:	85 32       	cpi	r24, 0x25	; 37
    6614:	21 f4       	brne	.+8      	; 0x661e <vfprintf+0x7c>
    6616:	b6 01       	movw	r22, r12
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	d6 d1       	rcall	.+940    	; 0x69c8 <fputc>
    661c:	e8 cf       	rjmp	.-48     	; 0x65ee <vfprintf+0x4c>
    661e:	91 2c       	mov	r9, r1
    6620:	21 2c       	mov	r2, r1
    6622:	31 2c       	mov	r3, r1
    6624:	ff e1       	ldi	r31, 0x1F	; 31
    6626:	f3 15       	cp	r31, r3
    6628:	d8 f0       	brcs	.+54     	; 0x6660 <vfprintf+0xbe>
    662a:	8b 32       	cpi	r24, 0x2B	; 43
    662c:	79 f0       	breq	.+30     	; 0x664c <vfprintf+0xaa>
    662e:	38 f4       	brcc	.+14     	; 0x663e <vfprintf+0x9c>
    6630:	80 32       	cpi	r24, 0x20	; 32
    6632:	79 f0       	breq	.+30     	; 0x6652 <vfprintf+0xb0>
    6634:	83 32       	cpi	r24, 0x23	; 35
    6636:	a1 f4       	brne	.+40     	; 0x6660 <vfprintf+0xbe>
    6638:	23 2d       	mov	r18, r3
    663a:	20 61       	ori	r18, 0x10	; 16
    663c:	1d c0       	rjmp	.+58     	; 0x6678 <vfprintf+0xd6>
    663e:	8d 32       	cpi	r24, 0x2D	; 45
    6640:	61 f0       	breq	.+24     	; 0x665a <vfprintf+0xb8>
    6642:	80 33       	cpi	r24, 0x30	; 48
    6644:	69 f4       	brne	.+26     	; 0x6660 <vfprintf+0xbe>
    6646:	23 2d       	mov	r18, r3
    6648:	21 60       	ori	r18, 0x01	; 1
    664a:	16 c0       	rjmp	.+44     	; 0x6678 <vfprintf+0xd6>
    664c:	83 2d       	mov	r24, r3
    664e:	82 60       	ori	r24, 0x02	; 2
    6650:	38 2e       	mov	r3, r24
    6652:	e3 2d       	mov	r30, r3
    6654:	e4 60       	ori	r30, 0x04	; 4
    6656:	3e 2e       	mov	r3, r30
    6658:	2a c0       	rjmp	.+84     	; 0x66ae <vfprintf+0x10c>
    665a:	f3 2d       	mov	r31, r3
    665c:	f8 60       	ori	r31, 0x08	; 8
    665e:	1d c0       	rjmp	.+58     	; 0x669a <vfprintf+0xf8>
    6660:	37 fc       	sbrc	r3, 7
    6662:	2d c0       	rjmp	.+90     	; 0x66be <vfprintf+0x11c>
    6664:	20 ed       	ldi	r18, 0xD0	; 208
    6666:	28 0f       	add	r18, r24
    6668:	2a 30       	cpi	r18, 0x0A	; 10
    666a:	40 f0       	brcs	.+16     	; 0x667c <vfprintf+0xda>
    666c:	8e 32       	cpi	r24, 0x2E	; 46
    666e:	b9 f4       	brne	.+46     	; 0x669e <vfprintf+0xfc>
    6670:	36 fc       	sbrc	r3, 6
    6672:	75 c1       	rjmp	.+746    	; 0x695e <vfprintf+0x3bc>
    6674:	23 2d       	mov	r18, r3
    6676:	20 64       	ori	r18, 0x40	; 64
    6678:	32 2e       	mov	r3, r18
    667a:	19 c0       	rjmp	.+50     	; 0x66ae <vfprintf+0x10c>
    667c:	36 fe       	sbrs	r3, 6
    667e:	06 c0       	rjmp	.+12     	; 0x668c <vfprintf+0xea>
    6680:	8a e0       	ldi	r24, 0x0A	; 10
    6682:	98 9e       	mul	r9, r24
    6684:	20 0d       	add	r18, r0
    6686:	11 24       	eor	r1, r1
    6688:	92 2e       	mov	r9, r18
    668a:	11 c0       	rjmp	.+34     	; 0x66ae <vfprintf+0x10c>
    668c:	ea e0       	ldi	r30, 0x0A	; 10
    668e:	2e 9e       	mul	r2, r30
    6690:	20 0d       	add	r18, r0
    6692:	11 24       	eor	r1, r1
    6694:	22 2e       	mov	r2, r18
    6696:	f3 2d       	mov	r31, r3
    6698:	f0 62       	ori	r31, 0x20	; 32
    669a:	3f 2e       	mov	r3, r31
    669c:	08 c0       	rjmp	.+16     	; 0x66ae <vfprintf+0x10c>
    669e:	8c 36       	cpi	r24, 0x6C	; 108
    66a0:	21 f4       	brne	.+8      	; 0x66aa <vfprintf+0x108>
    66a2:	83 2d       	mov	r24, r3
    66a4:	80 68       	ori	r24, 0x80	; 128
    66a6:	38 2e       	mov	r3, r24
    66a8:	02 c0       	rjmp	.+4      	; 0x66ae <vfprintf+0x10c>
    66aa:	88 36       	cpi	r24, 0x68	; 104
    66ac:	41 f4       	brne	.+16     	; 0x66be <vfprintf+0x11c>
    66ae:	f7 01       	movw	r30, r14
    66b0:	93 fd       	sbrc	r25, 3
    66b2:	85 91       	lpm	r24, Z+
    66b4:	93 ff       	sbrs	r25, 3
    66b6:	81 91       	ld	r24, Z+
    66b8:	7f 01       	movw	r14, r30
    66ba:	81 11       	cpse	r24, r1
    66bc:	b3 cf       	rjmp	.-154    	; 0x6624 <vfprintf+0x82>
    66be:	98 2f       	mov	r25, r24
    66c0:	9f 7d       	andi	r25, 0xDF	; 223
    66c2:	95 54       	subi	r25, 0x45	; 69
    66c4:	93 30       	cpi	r25, 0x03	; 3
    66c6:	28 f4       	brcc	.+10     	; 0x66d2 <vfprintf+0x130>
    66c8:	0c 5f       	subi	r16, 0xFC	; 252
    66ca:	1f 4f       	sbci	r17, 0xFF	; 255
    66cc:	9f e3       	ldi	r25, 0x3F	; 63
    66ce:	99 83       	std	Y+1, r25	; 0x01
    66d0:	0d c0       	rjmp	.+26     	; 0x66ec <vfprintf+0x14a>
    66d2:	83 36       	cpi	r24, 0x63	; 99
    66d4:	31 f0       	breq	.+12     	; 0x66e2 <vfprintf+0x140>
    66d6:	83 37       	cpi	r24, 0x73	; 115
    66d8:	71 f0       	breq	.+28     	; 0x66f6 <vfprintf+0x154>
    66da:	83 35       	cpi	r24, 0x53	; 83
    66dc:	09 f0       	breq	.+2      	; 0x66e0 <vfprintf+0x13e>
    66de:	55 c0       	rjmp	.+170    	; 0x678a <vfprintf+0x1e8>
    66e0:	20 c0       	rjmp	.+64     	; 0x6722 <vfprintf+0x180>
    66e2:	f8 01       	movw	r30, r16
    66e4:	80 81       	ld	r24, Z
    66e6:	89 83       	std	Y+1, r24	; 0x01
    66e8:	0e 5f       	subi	r16, 0xFE	; 254
    66ea:	1f 4f       	sbci	r17, 0xFF	; 255
    66ec:	88 24       	eor	r8, r8
    66ee:	83 94       	inc	r8
    66f0:	91 2c       	mov	r9, r1
    66f2:	53 01       	movw	r10, r6
    66f4:	12 c0       	rjmp	.+36     	; 0x671a <vfprintf+0x178>
    66f6:	28 01       	movw	r4, r16
    66f8:	f2 e0       	ldi	r31, 0x02	; 2
    66fa:	4f 0e       	add	r4, r31
    66fc:	51 1c       	adc	r5, r1
    66fe:	f8 01       	movw	r30, r16
    6700:	a0 80       	ld	r10, Z
    6702:	b1 80       	ldd	r11, Z+1	; 0x01
    6704:	36 fe       	sbrs	r3, 6
    6706:	03 c0       	rjmp	.+6      	; 0x670e <vfprintf+0x16c>
    6708:	69 2d       	mov	r22, r9
    670a:	70 e0       	ldi	r23, 0x00	; 0
    670c:	02 c0       	rjmp	.+4      	; 0x6712 <vfprintf+0x170>
    670e:	6f ef       	ldi	r22, 0xFF	; 255
    6710:	7f ef       	ldi	r23, 0xFF	; 255
    6712:	c5 01       	movw	r24, r10
    6714:	4e d1       	rcall	.+668    	; 0x69b2 <strnlen>
    6716:	4c 01       	movw	r8, r24
    6718:	82 01       	movw	r16, r4
    671a:	f3 2d       	mov	r31, r3
    671c:	ff 77       	andi	r31, 0x7F	; 127
    671e:	3f 2e       	mov	r3, r31
    6720:	15 c0       	rjmp	.+42     	; 0x674c <vfprintf+0x1aa>
    6722:	28 01       	movw	r4, r16
    6724:	22 e0       	ldi	r18, 0x02	; 2
    6726:	42 0e       	add	r4, r18
    6728:	51 1c       	adc	r5, r1
    672a:	f8 01       	movw	r30, r16
    672c:	a0 80       	ld	r10, Z
    672e:	b1 80       	ldd	r11, Z+1	; 0x01
    6730:	36 fe       	sbrs	r3, 6
    6732:	03 c0       	rjmp	.+6      	; 0x673a <vfprintf+0x198>
    6734:	69 2d       	mov	r22, r9
    6736:	70 e0       	ldi	r23, 0x00	; 0
    6738:	02 c0       	rjmp	.+4      	; 0x673e <vfprintf+0x19c>
    673a:	6f ef       	ldi	r22, 0xFF	; 255
    673c:	7f ef       	ldi	r23, 0xFF	; 255
    673e:	c5 01       	movw	r24, r10
    6740:	2d d1       	rcall	.+602    	; 0x699c <strnlen_P>
    6742:	4c 01       	movw	r8, r24
    6744:	f3 2d       	mov	r31, r3
    6746:	f0 68       	ori	r31, 0x80	; 128
    6748:	3f 2e       	mov	r3, r31
    674a:	82 01       	movw	r16, r4
    674c:	33 fc       	sbrc	r3, 3
    674e:	19 c0       	rjmp	.+50     	; 0x6782 <vfprintf+0x1e0>
    6750:	82 2d       	mov	r24, r2
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	88 16       	cp	r8, r24
    6756:	99 06       	cpc	r9, r25
    6758:	a0 f4       	brcc	.+40     	; 0x6782 <vfprintf+0x1e0>
    675a:	b6 01       	movw	r22, r12
    675c:	80 e2       	ldi	r24, 0x20	; 32
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	33 d1       	rcall	.+614    	; 0x69c8 <fputc>
    6762:	2a 94       	dec	r2
    6764:	f5 cf       	rjmp	.-22     	; 0x6750 <vfprintf+0x1ae>
    6766:	f5 01       	movw	r30, r10
    6768:	37 fc       	sbrc	r3, 7
    676a:	85 91       	lpm	r24, Z+
    676c:	37 fe       	sbrs	r3, 7
    676e:	81 91       	ld	r24, Z+
    6770:	5f 01       	movw	r10, r30
    6772:	b6 01       	movw	r22, r12
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	28 d1       	rcall	.+592    	; 0x69c8 <fputc>
    6778:	21 10       	cpse	r2, r1
    677a:	2a 94       	dec	r2
    677c:	21 e0       	ldi	r18, 0x01	; 1
    677e:	82 1a       	sub	r8, r18
    6780:	91 08       	sbc	r9, r1
    6782:	81 14       	cp	r8, r1
    6784:	91 04       	cpc	r9, r1
    6786:	79 f7       	brne	.-34     	; 0x6766 <vfprintf+0x1c4>
    6788:	e1 c0       	rjmp	.+450    	; 0x694c <vfprintf+0x3aa>
    678a:	84 36       	cpi	r24, 0x64	; 100
    678c:	11 f0       	breq	.+4      	; 0x6792 <vfprintf+0x1f0>
    678e:	89 36       	cpi	r24, 0x69	; 105
    6790:	39 f5       	brne	.+78     	; 0x67e0 <vfprintf+0x23e>
    6792:	f8 01       	movw	r30, r16
    6794:	37 fe       	sbrs	r3, 7
    6796:	07 c0       	rjmp	.+14     	; 0x67a6 <vfprintf+0x204>
    6798:	60 81       	ld	r22, Z
    679a:	71 81       	ldd	r23, Z+1	; 0x01
    679c:	82 81       	ldd	r24, Z+2	; 0x02
    679e:	93 81       	ldd	r25, Z+3	; 0x03
    67a0:	0c 5f       	subi	r16, 0xFC	; 252
    67a2:	1f 4f       	sbci	r17, 0xFF	; 255
    67a4:	08 c0       	rjmp	.+16     	; 0x67b6 <vfprintf+0x214>
    67a6:	60 81       	ld	r22, Z
    67a8:	71 81       	ldd	r23, Z+1	; 0x01
    67aa:	07 2e       	mov	r0, r23
    67ac:	00 0c       	add	r0, r0
    67ae:	88 0b       	sbc	r24, r24
    67b0:	99 0b       	sbc	r25, r25
    67b2:	0e 5f       	subi	r16, 0xFE	; 254
    67b4:	1f 4f       	sbci	r17, 0xFF	; 255
    67b6:	f3 2d       	mov	r31, r3
    67b8:	ff 76       	andi	r31, 0x6F	; 111
    67ba:	3f 2e       	mov	r3, r31
    67bc:	97 ff       	sbrs	r25, 7
    67be:	09 c0       	rjmp	.+18     	; 0x67d2 <vfprintf+0x230>
    67c0:	90 95       	com	r25
    67c2:	80 95       	com	r24
    67c4:	70 95       	com	r23
    67c6:	61 95       	neg	r22
    67c8:	7f 4f       	sbci	r23, 0xFF	; 255
    67ca:	8f 4f       	sbci	r24, 0xFF	; 255
    67cc:	9f 4f       	sbci	r25, 0xFF	; 255
    67ce:	f0 68       	ori	r31, 0x80	; 128
    67d0:	3f 2e       	mov	r3, r31
    67d2:	2a e0       	ldi	r18, 0x0A	; 10
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	a3 01       	movw	r20, r6
    67d8:	33 d1       	rcall	.+614    	; 0x6a40 <__ultoa_invert>
    67da:	88 2e       	mov	r8, r24
    67dc:	86 18       	sub	r8, r6
    67de:	44 c0       	rjmp	.+136    	; 0x6868 <vfprintf+0x2c6>
    67e0:	85 37       	cpi	r24, 0x75	; 117
    67e2:	31 f4       	brne	.+12     	; 0x67f0 <vfprintf+0x24e>
    67e4:	23 2d       	mov	r18, r3
    67e6:	2f 7e       	andi	r18, 0xEF	; 239
    67e8:	b2 2e       	mov	r11, r18
    67ea:	2a e0       	ldi	r18, 0x0A	; 10
    67ec:	30 e0       	ldi	r19, 0x00	; 0
    67ee:	25 c0       	rjmp	.+74     	; 0x683a <vfprintf+0x298>
    67f0:	93 2d       	mov	r25, r3
    67f2:	99 7f       	andi	r25, 0xF9	; 249
    67f4:	b9 2e       	mov	r11, r25
    67f6:	8f 36       	cpi	r24, 0x6F	; 111
    67f8:	c1 f0       	breq	.+48     	; 0x682a <vfprintf+0x288>
    67fa:	18 f4       	brcc	.+6      	; 0x6802 <vfprintf+0x260>
    67fc:	88 35       	cpi	r24, 0x58	; 88
    67fe:	79 f0       	breq	.+30     	; 0x681e <vfprintf+0x27c>
    6800:	ae c0       	rjmp	.+348    	; 0x695e <vfprintf+0x3bc>
    6802:	80 37       	cpi	r24, 0x70	; 112
    6804:	19 f0       	breq	.+6      	; 0x680c <vfprintf+0x26a>
    6806:	88 37       	cpi	r24, 0x78	; 120
    6808:	21 f0       	breq	.+8      	; 0x6812 <vfprintf+0x270>
    680a:	a9 c0       	rjmp	.+338    	; 0x695e <vfprintf+0x3bc>
    680c:	e9 2f       	mov	r30, r25
    680e:	e0 61       	ori	r30, 0x10	; 16
    6810:	be 2e       	mov	r11, r30
    6812:	b4 fe       	sbrs	r11, 4
    6814:	0d c0       	rjmp	.+26     	; 0x6830 <vfprintf+0x28e>
    6816:	fb 2d       	mov	r31, r11
    6818:	f4 60       	ori	r31, 0x04	; 4
    681a:	bf 2e       	mov	r11, r31
    681c:	09 c0       	rjmp	.+18     	; 0x6830 <vfprintf+0x28e>
    681e:	34 fe       	sbrs	r3, 4
    6820:	0a c0       	rjmp	.+20     	; 0x6836 <vfprintf+0x294>
    6822:	29 2f       	mov	r18, r25
    6824:	26 60       	ori	r18, 0x06	; 6
    6826:	b2 2e       	mov	r11, r18
    6828:	06 c0       	rjmp	.+12     	; 0x6836 <vfprintf+0x294>
    682a:	28 e0       	ldi	r18, 0x08	; 8
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	05 c0       	rjmp	.+10     	; 0x683a <vfprintf+0x298>
    6830:	20 e1       	ldi	r18, 0x10	; 16
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	02 c0       	rjmp	.+4      	; 0x683a <vfprintf+0x298>
    6836:	20 e1       	ldi	r18, 0x10	; 16
    6838:	32 e0       	ldi	r19, 0x02	; 2
    683a:	f8 01       	movw	r30, r16
    683c:	b7 fe       	sbrs	r11, 7
    683e:	07 c0       	rjmp	.+14     	; 0x684e <vfprintf+0x2ac>
    6840:	60 81       	ld	r22, Z
    6842:	71 81       	ldd	r23, Z+1	; 0x01
    6844:	82 81       	ldd	r24, Z+2	; 0x02
    6846:	93 81       	ldd	r25, Z+3	; 0x03
    6848:	0c 5f       	subi	r16, 0xFC	; 252
    684a:	1f 4f       	sbci	r17, 0xFF	; 255
    684c:	06 c0       	rjmp	.+12     	; 0x685a <vfprintf+0x2b8>
    684e:	60 81       	ld	r22, Z
    6850:	71 81       	ldd	r23, Z+1	; 0x01
    6852:	80 e0       	ldi	r24, 0x00	; 0
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	0e 5f       	subi	r16, 0xFE	; 254
    6858:	1f 4f       	sbci	r17, 0xFF	; 255
    685a:	a3 01       	movw	r20, r6
    685c:	f1 d0       	rcall	.+482    	; 0x6a40 <__ultoa_invert>
    685e:	88 2e       	mov	r8, r24
    6860:	86 18       	sub	r8, r6
    6862:	fb 2d       	mov	r31, r11
    6864:	ff 77       	andi	r31, 0x7F	; 127
    6866:	3f 2e       	mov	r3, r31
    6868:	36 fe       	sbrs	r3, 6
    686a:	0d c0       	rjmp	.+26     	; 0x6886 <vfprintf+0x2e4>
    686c:	23 2d       	mov	r18, r3
    686e:	2e 7f       	andi	r18, 0xFE	; 254
    6870:	a2 2e       	mov	r10, r18
    6872:	89 14       	cp	r8, r9
    6874:	58 f4       	brcc	.+22     	; 0x688c <vfprintf+0x2ea>
    6876:	34 fe       	sbrs	r3, 4
    6878:	0b c0       	rjmp	.+22     	; 0x6890 <vfprintf+0x2ee>
    687a:	32 fc       	sbrc	r3, 2
    687c:	09 c0       	rjmp	.+18     	; 0x6890 <vfprintf+0x2ee>
    687e:	83 2d       	mov	r24, r3
    6880:	8e 7e       	andi	r24, 0xEE	; 238
    6882:	a8 2e       	mov	r10, r24
    6884:	05 c0       	rjmp	.+10     	; 0x6890 <vfprintf+0x2ee>
    6886:	b8 2c       	mov	r11, r8
    6888:	a3 2c       	mov	r10, r3
    688a:	03 c0       	rjmp	.+6      	; 0x6892 <vfprintf+0x2f0>
    688c:	b8 2c       	mov	r11, r8
    688e:	01 c0       	rjmp	.+2      	; 0x6892 <vfprintf+0x2f0>
    6890:	b9 2c       	mov	r11, r9
    6892:	a4 fe       	sbrs	r10, 4
    6894:	0f c0       	rjmp	.+30     	; 0x68b4 <vfprintf+0x312>
    6896:	fe 01       	movw	r30, r28
    6898:	e8 0d       	add	r30, r8
    689a:	f1 1d       	adc	r31, r1
    689c:	80 81       	ld	r24, Z
    689e:	80 33       	cpi	r24, 0x30	; 48
    68a0:	21 f4       	brne	.+8      	; 0x68aa <vfprintf+0x308>
    68a2:	9a 2d       	mov	r25, r10
    68a4:	99 7e       	andi	r25, 0xE9	; 233
    68a6:	a9 2e       	mov	r10, r25
    68a8:	09 c0       	rjmp	.+18     	; 0x68bc <vfprintf+0x31a>
    68aa:	a2 fe       	sbrs	r10, 2
    68ac:	06 c0       	rjmp	.+12     	; 0x68ba <vfprintf+0x318>
    68ae:	b3 94       	inc	r11
    68b0:	b3 94       	inc	r11
    68b2:	04 c0       	rjmp	.+8      	; 0x68bc <vfprintf+0x31a>
    68b4:	8a 2d       	mov	r24, r10
    68b6:	86 78       	andi	r24, 0x86	; 134
    68b8:	09 f0       	breq	.+2      	; 0x68bc <vfprintf+0x31a>
    68ba:	b3 94       	inc	r11
    68bc:	a3 fc       	sbrc	r10, 3
    68be:	10 c0       	rjmp	.+32     	; 0x68e0 <vfprintf+0x33e>
    68c0:	a0 fe       	sbrs	r10, 0
    68c2:	06 c0       	rjmp	.+12     	; 0x68d0 <vfprintf+0x32e>
    68c4:	b2 14       	cp	r11, r2
    68c6:	80 f4       	brcc	.+32     	; 0x68e8 <vfprintf+0x346>
    68c8:	28 0c       	add	r2, r8
    68ca:	92 2c       	mov	r9, r2
    68cc:	9b 18       	sub	r9, r11
    68ce:	0d c0       	rjmp	.+26     	; 0x68ea <vfprintf+0x348>
    68d0:	b2 14       	cp	r11, r2
    68d2:	58 f4       	brcc	.+22     	; 0x68ea <vfprintf+0x348>
    68d4:	b6 01       	movw	r22, r12
    68d6:	80 e2       	ldi	r24, 0x20	; 32
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	76 d0       	rcall	.+236    	; 0x69c8 <fputc>
    68dc:	b3 94       	inc	r11
    68de:	f8 cf       	rjmp	.-16     	; 0x68d0 <vfprintf+0x32e>
    68e0:	b2 14       	cp	r11, r2
    68e2:	18 f4       	brcc	.+6      	; 0x68ea <vfprintf+0x348>
    68e4:	2b 18       	sub	r2, r11
    68e6:	02 c0       	rjmp	.+4      	; 0x68ec <vfprintf+0x34a>
    68e8:	98 2c       	mov	r9, r8
    68ea:	21 2c       	mov	r2, r1
    68ec:	a4 fe       	sbrs	r10, 4
    68ee:	0f c0       	rjmp	.+30     	; 0x690e <vfprintf+0x36c>
    68f0:	b6 01       	movw	r22, r12
    68f2:	80 e3       	ldi	r24, 0x30	; 48
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	68 d0       	rcall	.+208    	; 0x69c8 <fputc>
    68f8:	a2 fe       	sbrs	r10, 2
    68fa:	16 c0       	rjmp	.+44     	; 0x6928 <vfprintf+0x386>
    68fc:	a1 fc       	sbrc	r10, 1
    68fe:	03 c0       	rjmp	.+6      	; 0x6906 <vfprintf+0x364>
    6900:	88 e7       	ldi	r24, 0x78	; 120
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	02 c0       	rjmp	.+4      	; 0x690a <vfprintf+0x368>
    6906:	88 e5       	ldi	r24, 0x58	; 88
    6908:	90 e0       	ldi	r25, 0x00	; 0
    690a:	b6 01       	movw	r22, r12
    690c:	0c c0       	rjmp	.+24     	; 0x6926 <vfprintf+0x384>
    690e:	8a 2d       	mov	r24, r10
    6910:	86 78       	andi	r24, 0x86	; 134
    6912:	51 f0       	breq	.+20     	; 0x6928 <vfprintf+0x386>
    6914:	a1 fe       	sbrs	r10, 1
    6916:	02 c0       	rjmp	.+4      	; 0x691c <vfprintf+0x37a>
    6918:	8b e2       	ldi	r24, 0x2B	; 43
    691a:	01 c0       	rjmp	.+2      	; 0x691e <vfprintf+0x37c>
    691c:	80 e2       	ldi	r24, 0x20	; 32
    691e:	a7 fc       	sbrc	r10, 7
    6920:	8d e2       	ldi	r24, 0x2D	; 45
    6922:	b6 01       	movw	r22, r12
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	50 d0       	rcall	.+160    	; 0x69c8 <fputc>
    6928:	89 14       	cp	r8, r9
    692a:	30 f4       	brcc	.+12     	; 0x6938 <vfprintf+0x396>
    692c:	b6 01       	movw	r22, r12
    692e:	80 e3       	ldi	r24, 0x30	; 48
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	4a d0       	rcall	.+148    	; 0x69c8 <fputc>
    6934:	9a 94       	dec	r9
    6936:	f8 cf       	rjmp	.-16     	; 0x6928 <vfprintf+0x386>
    6938:	8a 94       	dec	r8
    693a:	f3 01       	movw	r30, r6
    693c:	e8 0d       	add	r30, r8
    693e:	f1 1d       	adc	r31, r1
    6940:	80 81       	ld	r24, Z
    6942:	b6 01       	movw	r22, r12
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	40 d0       	rcall	.+128    	; 0x69c8 <fputc>
    6948:	81 10       	cpse	r8, r1
    694a:	f6 cf       	rjmp	.-20     	; 0x6938 <vfprintf+0x396>
    694c:	22 20       	and	r2, r2
    694e:	09 f4       	brne	.+2      	; 0x6952 <vfprintf+0x3b0>
    6950:	4e ce       	rjmp	.-868    	; 0x65ee <vfprintf+0x4c>
    6952:	b6 01       	movw	r22, r12
    6954:	80 e2       	ldi	r24, 0x20	; 32
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	37 d0       	rcall	.+110    	; 0x69c8 <fputc>
    695a:	2a 94       	dec	r2
    695c:	f7 cf       	rjmp	.-18     	; 0x694c <vfprintf+0x3aa>
    695e:	f6 01       	movw	r30, r12
    6960:	86 81       	ldd	r24, Z+6	; 0x06
    6962:	97 81       	ldd	r25, Z+7	; 0x07
    6964:	02 c0       	rjmp	.+4      	; 0x696a <vfprintf+0x3c8>
    6966:	8f ef       	ldi	r24, 0xFF	; 255
    6968:	9f ef       	ldi	r25, 0xFF	; 255
    696a:	2b 96       	adiw	r28, 0x0b	; 11
    696c:	0f b6       	in	r0, 0x3f	; 63
    696e:	f8 94       	cli
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	0f be       	out	0x3f, r0	; 63
    6974:	cd bf       	out	0x3d, r28	; 61
    6976:	df 91       	pop	r29
    6978:	cf 91       	pop	r28
    697a:	1f 91       	pop	r17
    697c:	0f 91       	pop	r16
    697e:	ff 90       	pop	r15
    6980:	ef 90       	pop	r14
    6982:	df 90       	pop	r13
    6984:	cf 90       	pop	r12
    6986:	bf 90       	pop	r11
    6988:	af 90       	pop	r10
    698a:	9f 90       	pop	r9
    698c:	8f 90       	pop	r8
    698e:	7f 90       	pop	r7
    6990:	6f 90       	pop	r6
    6992:	5f 90       	pop	r5
    6994:	4f 90       	pop	r4
    6996:	3f 90       	pop	r3
    6998:	2f 90       	pop	r2
    699a:	08 95       	ret

0000699c <strnlen_P>:
    699c:	fc 01       	movw	r30, r24
    699e:	05 90       	lpm	r0, Z+
    69a0:	61 50       	subi	r22, 0x01	; 1
    69a2:	70 40       	sbci	r23, 0x00	; 0
    69a4:	01 10       	cpse	r0, r1
    69a6:	d8 f7       	brcc	.-10     	; 0x699e <strnlen_P+0x2>
    69a8:	80 95       	com	r24
    69aa:	90 95       	com	r25
    69ac:	8e 0f       	add	r24, r30
    69ae:	9f 1f       	adc	r25, r31
    69b0:	08 95       	ret

000069b2 <strnlen>:
    69b2:	fc 01       	movw	r30, r24
    69b4:	61 50       	subi	r22, 0x01	; 1
    69b6:	70 40       	sbci	r23, 0x00	; 0
    69b8:	01 90       	ld	r0, Z+
    69ba:	01 10       	cpse	r0, r1
    69bc:	d8 f7       	brcc	.-10     	; 0x69b4 <strnlen+0x2>
    69be:	80 95       	com	r24
    69c0:	90 95       	com	r25
    69c2:	8e 0f       	add	r24, r30
    69c4:	9f 1f       	adc	r25, r31
    69c6:	08 95       	ret

000069c8 <fputc>:
    69c8:	0f 93       	push	r16
    69ca:	1f 93       	push	r17
    69cc:	cf 93       	push	r28
    69ce:	df 93       	push	r29
    69d0:	fb 01       	movw	r30, r22
    69d2:	23 81       	ldd	r18, Z+3	; 0x03
    69d4:	21 fd       	sbrc	r18, 1
    69d6:	03 c0       	rjmp	.+6      	; 0x69de <fputc+0x16>
    69d8:	8f ef       	ldi	r24, 0xFF	; 255
    69da:	9f ef       	ldi	r25, 0xFF	; 255
    69dc:	2c c0       	rjmp	.+88     	; 0x6a36 <fputc+0x6e>
    69de:	22 ff       	sbrs	r18, 2
    69e0:	16 c0       	rjmp	.+44     	; 0x6a0e <fputc+0x46>
    69e2:	46 81       	ldd	r20, Z+6	; 0x06
    69e4:	57 81       	ldd	r21, Z+7	; 0x07
    69e6:	24 81       	ldd	r18, Z+4	; 0x04
    69e8:	35 81       	ldd	r19, Z+5	; 0x05
    69ea:	42 17       	cp	r20, r18
    69ec:	53 07       	cpc	r21, r19
    69ee:	44 f4       	brge	.+16     	; 0x6a00 <fputc+0x38>
    69f0:	a0 81       	ld	r26, Z
    69f2:	b1 81       	ldd	r27, Z+1	; 0x01
    69f4:	9d 01       	movw	r18, r26
    69f6:	2f 5f       	subi	r18, 0xFF	; 255
    69f8:	3f 4f       	sbci	r19, 0xFF	; 255
    69fa:	31 83       	std	Z+1, r19	; 0x01
    69fc:	20 83       	st	Z, r18
    69fe:	8c 93       	st	X, r24
    6a00:	26 81       	ldd	r18, Z+6	; 0x06
    6a02:	37 81       	ldd	r19, Z+7	; 0x07
    6a04:	2f 5f       	subi	r18, 0xFF	; 255
    6a06:	3f 4f       	sbci	r19, 0xFF	; 255
    6a08:	37 83       	std	Z+7, r19	; 0x07
    6a0a:	26 83       	std	Z+6, r18	; 0x06
    6a0c:	14 c0       	rjmp	.+40     	; 0x6a36 <fputc+0x6e>
    6a0e:	8b 01       	movw	r16, r22
    6a10:	ec 01       	movw	r28, r24
    6a12:	fb 01       	movw	r30, r22
    6a14:	00 84       	ldd	r0, Z+8	; 0x08
    6a16:	f1 85       	ldd	r31, Z+9	; 0x09
    6a18:	e0 2d       	mov	r30, r0
    6a1a:	19 95       	eicall
    6a1c:	89 2b       	or	r24, r25
    6a1e:	e1 f6       	brne	.-72     	; 0x69d8 <fputc+0x10>
    6a20:	d8 01       	movw	r26, r16
    6a22:	16 96       	adiw	r26, 0x06	; 6
    6a24:	8d 91       	ld	r24, X+
    6a26:	9c 91       	ld	r25, X
    6a28:	17 97       	sbiw	r26, 0x07	; 7
    6a2a:	01 96       	adiw	r24, 0x01	; 1
    6a2c:	17 96       	adiw	r26, 0x07	; 7
    6a2e:	9c 93       	st	X, r25
    6a30:	8e 93       	st	-X, r24
    6a32:	16 97       	sbiw	r26, 0x06	; 6
    6a34:	ce 01       	movw	r24, r28
    6a36:	df 91       	pop	r29
    6a38:	cf 91       	pop	r28
    6a3a:	1f 91       	pop	r17
    6a3c:	0f 91       	pop	r16
    6a3e:	08 95       	ret

00006a40 <__ultoa_invert>:
    6a40:	fa 01       	movw	r30, r20
    6a42:	aa 27       	eor	r26, r26
    6a44:	28 30       	cpi	r18, 0x08	; 8
    6a46:	51 f1       	breq	.+84     	; 0x6a9c <__ultoa_invert+0x5c>
    6a48:	20 31       	cpi	r18, 0x10	; 16
    6a4a:	81 f1       	breq	.+96     	; 0x6aac <__ultoa_invert+0x6c>
    6a4c:	e8 94       	clt
    6a4e:	6f 93       	push	r22
    6a50:	6e 7f       	andi	r22, 0xFE	; 254
    6a52:	6e 5f       	subi	r22, 0xFE	; 254
    6a54:	7f 4f       	sbci	r23, 0xFF	; 255
    6a56:	8f 4f       	sbci	r24, 0xFF	; 255
    6a58:	9f 4f       	sbci	r25, 0xFF	; 255
    6a5a:	af 4f       	sbci	r26, 0xFF	; 255
    6a5c:	b1 e0       	ldi	r27, 0x01	; 1
    6a5e:	3e d0       	rcall	.+124    	; 0x6adc <__ultoa_invert+0x9c>
    6a60:	b4 e0       	ldi	r27, 0x04	; 4
    6a62:	3c d0       	rcall	.+120    	; 0x6adc <__ultoa_invert+0x9c>
    6a64:	67 0f       	add	r22, r23
    6a66:	78 1f       	adc	r23, r24
    6a68:	89 1f       	adc	r24, r25
    6a6a:	9a 1f       	adc	r25, r26
    6a6c:	a1 1d       	adc	r26, r1
    6a6e:	68 0f       	add	r22, r24
    6a70:	79 1f       	adc	r23, r25
    6a72:	8a 1f       	adc	r24, r26
    6a74:	91 1d       	adc	r25, r1
    6a76:	a1 1d       	adc	r26, r1
    6a78:	6a 0f       	add	r22, r26
    6a7a:	71 1d       	adc	r23, r1
    6a7c:	81 1d       	adc	r24, r1
    6a7e:	91 1d       	adc	r25, r1
    6a80:	a1 1d       	adc	r26, r1
    6a82:	20 d0       	rcall	.+64     	; 0x6ac4 <__ultoa_invert+0x84>
    6a84:	09 f4       	brne	.+2      	; 0x6a88 <__ultoa_invert+0x48>
    6a86:	68 94       	set
    6a88:	3f 91       	pop	r19
    6a8a:	2a e0       	ldi	r18, 0x0A	; 10
    6a8c:	26 9f       	mul	r18, r22
    6a8e:	11 24       	eor	r1, r1
    6a90:	30 19       	sub	r19, r0
    6a92:	30 5d       	subi	r19, 0xD0	; 208
    6a94:	31 93       	st	Z+, r19
    6a96:	de f6       	brtc	.-74     	; 0x6a4e <__ultoa_invert+0xe>
    6a98:	cf 01       	movw	r24, r30
    6a9a:	08 95       	ret
    6a9c:	46 2f       	mov	r20, r22
    6a9e:	47 70       	andi	r20, 0x07	; 7
    6aa0:	40 5d       	subi	r20, 0xD0	; 208
    6aa2:	41 93       	st	Z+, r20
    6aa4:	b3 e0       	ldi	r27, 0x03	; 3
    6aa6:	0f d0       	rcall	.+30     	; 0x6ac6 <__ultoa_invert+0x86>
    6aa8:	c9 f7       	brne	.-14     	; 0x6a9c <__ultoa_invert+0x5c>
    6aaa:	f6 cf       	rjmp	.-20     	; 0x6a98 <__ultoa_invert+0x58>
    6aac:	46 2f       	mov	r20, r22
    6aae:	4f 70       	andi	r20, 0x0F	; 15
    6ab0:	40 5d       	subi	r20, 0xD0	; 208
    6ab2:	4a 33       	cpi	r20, 0x3A	; 58
    6ab4:	18 f0       	brcs	.+6      	; 0x6abc <__ultoa_invert+0x7c>
    6ab6:	49 5d       	subi	r20, 0xD9	; 217
    6ab8:	31 fd       	sbrc	r19, 1
    6aba:	40 52       	subi	r20, 0x20	; 32
    6abc:	41 93       	st	Z+, r20
    6abe:	02 d0       	rcall	.+4      	; 0x6ac4 <__ultoa_invert+0x84>
    6ac0:	a9 f7       	brne	.-22     	; 0x6aac <__ultoa_invert+0x6c>
    6ac2:	ea cf       	rjmp	.-44     	; 0x6a98 <__ultoa_invert+0x58>
    6ac4:	b4 e0       	ldi	r27, 0x04	; 4
    6ac6:	a6 95       	lsr	r26
    6ac8:	97 95       	ror	r25
    6aca:	87 95       	ror	r24
    6acc:	77 95       	ror	r23
    6ace:	67 95       	ror	r22
    6ad0:	ba 95       	dec	r27
    6ad2:	c9 f7       	brne	.-14     	; 0x6ac6 <__ultoa_invert+0x86>
    6ad4:	00 97       	sbiw	r24, 0x00	; 0
    6ad6:	61 05       	cpc	r22, r1
    6ad8:	71 05       	cpc	r23, r1
    6ada:	08 95       	ret
    6adc:	9b 01       	movw	r18, r22
    6ade:	ac 01       	movw	r20, r24
    6ae0:	0a 2e       	mov	r0, r26
    6ae2:	06 94       	lsr	r0
    6ae4:	57 95       	ror	r21
    6ae6:	47 95       	ror	r20
    6ae8:	37 95       	ror	r19
    6aea:	27 95       	ror	r18
    6aec:	ba 95       	dec	r27
    6aee:	c9 f7       	brne	.-14     	; 0x6ae2 <__ultoa_invert+0xa2>
    6af0:	62 0f       	add	r22, r18
    6af2:	73 1f       	adc	r23, r19
    6af4:	84 1f       	adc	r24, r20
    6af6:	95 1f       	adc	r25, r21
    6af8:	a0 1d       	adc	r26, r0
    6afa:	08 95       	ret

00006afc <_exit>:
    6afc:	f8 94       	cli

00006afe <__stop_program>:
    6afe:	ff cf       	rjmp	.-2      	; 0x6afe <__stop_program>
