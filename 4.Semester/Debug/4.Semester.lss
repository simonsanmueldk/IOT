
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f4  00800200  00005cd0  00005d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001004  008006f4  008006f4  00006258  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000062b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a40  00000000  00000000  000062f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cf14  00000000  00000000  00006d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003204  00000000  00000000  00013c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006546  00000000  00000000  00016e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024fc  00000000  00000000  0001d394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000402a  00000000  00000000  0001f890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bc3d  00000000  00000000  000238ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c0  00000000  00000000  0002f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2b c5       	rjmp	.+2646   	; 0xa88 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 85 22 	jmp	0x450a	; 0x450a <__vector_25>
      68:	0c 94 d7 22 	jmp	0x45ae	; 0x45ae <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__vector_36>
      94:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 24 27 	jmp	0x4e48	; 0x4e48 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__vector_51>
      d0:	0c 94 03 24 	jmp	0x4806	; 0x4806 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 47 24 	jmp	0x488e	; 0x488e <__vector_54>
      dc:	0c 94 99 24 	jmp	0x4932	; 0x4932 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b 19       	sub	r21, r11
      e6:	5b 19       	sub	r21, r11
      e8:	5b 19       	sub	r21, r11
      ea:	92 19       	sub	r25, r2
      ec:	9a 19       	sub	r25, r10
      ee:	af 19       	sub	r26, r15
      f0:	5b 19       	sub	r21, r11
      f2:	5b 19       	sub	r21, r11
      f4:	92 19       	sub	r25, r2
      f6:	9a 19       	sub	r25, r10
      f8:	46 27       	eor	r20, r22
      fa:	b6 27       	eor	r27, r22
      fc:	b6 27       	eor	r27, r22
      fe:	b6 27       	eor	r27, r22
     100:	b6 27       	eor	r27, r22
     102:	b6 27       	eor	r27, r22
     104:	b6 27       	eor	r27, r22
     106:	b6 27       	eor	r27, r22
     108:	46 27       	eor	r20, r22
     10a:	b6 27       	eor	r27, r22
     10c:	b6 27       	eor	r27, r22
     10e:	b6 27       	eor	r27, r22
     110:	b6 27       	eor	r27, r22
     112:	b6 27       	eor	r27, r22
     114:	b6 27       	eor	r27, r22
     116:	b6 27       	eor	r27, r22
     118:	48 27       	eor	r20, r24
     11a:	b6 27       	eor	r27, r22
     11c:	b6 27       	eor	r27, r22
     11e:	b6 27       	eor	r27, r22
     120:	b6 27       	eor	r27, r22
     122:	b6 27       	eor	r27, r22
     124:	b6 27       	eor	r27, r22
     126:	b6 27       	eor	r27, r22
     128:	b6 27       	eor	r27, r22
     12a:	b6 27       	eor	r27, r22
     12c:	b6 27       	eor	r27, r22
     12e:	b6 27       	eor	r27, r22
     130:	b6 27       	eor	r27, r22
     132:	b6 27       	eor	r27, r22
     134:	b6 27       	eor	r27, r22
     136:	b6 27       	eor	r27, r22
     138:	48 27       	eor	r20, r24
     13a:	b6 27       	eor	r27, r22
     13c:	b6 27       	eor	r27, r22
     13e:	b6 27       	eor	r27, r22
     140:	b6 27       	eor	r27, r22
     142:	b6 27       	eor	r27, r22
     144:	b6 27       	eor	r27, r22
     146:	b6 27       	eor	r27, r22
     148:	b6 27       	eor	r27, r22
     14a:	b6 27       	eor	r27, r22
     14c:	b6 27       	eor	r27, r22
     14e:	b6 27       	eor	r27, r22
     150:	b6 27       	eor	r27, r22
     152:	b6 27       	eor	r27, r22
     154:	b6 27       	eor	r27, r22
     156:	b6 27       	eor	r27, r22
     158:	b2 27       	eor	r27, r18
     15a:	b6 27       	eor	r27, r22
     15c:	b6 27       	eor	r27, r22
     15e:	b6 27       	eor	r27, r22
     160:	b6 27       	eor	r27, r22
     162:	b6 27       	eor	r27, r22
     164:	b6 27       	eor	r27, r22
     166:	b6 27       	eor	r27, r22
     168:	7d 27       	eor	r23, r29
     16a:	b6 27       	eor	r27, r22
     16c:	b6 27       	eor	r27, r22
     16e:	b6 27       	eor	r27, r22
     170:	b6 27       	eor	r27, r22
     172:	b6 27       	eor	r27, r22
     174:	b6 27       	eor	r27, r22
     176:	b6 27       	eor	r27, r22
     178:	b6 27       	eor	r27, r22
     17a:	b6 27       	eor	r27, r22
     17c:	b6 27       	eor	r27, r22
     17e:	b6 27       	eor	r27, r22
     180:	b6 27       	eor	r27, r22
     182:	b6 27       	eor	r27, r22
     184:	b6 27       	eor	r27, r22
     186:	b6 27       	eor	r27, r22
     188:	71 27       	eor	r23, r17
     18a:	b6 27       	eor	r27, r22
     18c:	b6 27       	eor	r27, r22
     18e:	b6 27       	eor	r27, r22
     190:	b6 27       	eor	r27, r22
     192:	b6 27       	eor	r27, r22
     194:	b6 27       	eor	r27, r22
     196:	b6 27       	eor	r27, r22
     198:	95 27       	eor	r25, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvCheckTasksWaitingTermination>
     19e:	80 91 01 15 	lds	r24, 0x1501	; 0x801501 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	aa d3       	rcall	.+1876   	; 0x8fc <vPortYield>
     1a8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 cd 18 	call	0x319a	; 0x319a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 24 19 	call	0x3248	; 0x3248 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	16 e0       	ldi	r17, 0x06	; 6
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 ed       	ldi	r30, 0xD0	; 208
     1e4:	fc e5       	ldi	r31, 0x5C	; 92
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 3f       	cpi	r26, 0xF4	; 244
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	26 e1       	ldi	r18, 0x16	; 22
     1f8:	a4 ef       	ldi	r26, 0xF4	; 244
     1fa:	b6 e0       	ldi	r27, 0x06	; 6
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a8 3f       	cpi	r26, 0xF8	; 248
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 12 1b 	call	0x3624	; 0x3624 <main>
     20a:	0c 94 66 2e 	jmp	0x5ccc	; 0x5ccc <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     210:	0f 93       	push	r16
     212:	01 11       	cpse	r16, r1
     214:	0c c0       	rjmp	.+24     	; 0x22e <prvTestWaitCondition+0x1e>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	82 23       	and	r24, r18
     21c:	93 23       	and	r25, r19
     21e:	a4 23       	and	r26, r20
     220:	b5 23       	and	r27, r21
     222:	89 2b       	or	r24, r25
     224:	8a 2b       	or	r24, r26
     226:	8b 2b       	or	r24, r27
     228:	79 f4       	brne	.+30     	; 0x248 <prvTestWaitCondition+0x38>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	10 c0       	rjmp	.+32     	; 0x24e <prvTestWaitCondition+0x3e>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	82 23       	and	r24, r18
     234:	93 23       	and	r25, r19
     236:	a4 23       	and	r26, r20
     238:	b5 23       	and	r27, r21
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	4a 07       	cpc	r20, r26
     240:	5b 07       	cpc	r21, r27
     242:	21 f0       	breq	.+8      	; 0x24c <prvTestWaitCondition+0x3c>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <prvTestWaitCondition+0x3e>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <prvTestWaitCondition+0x3e>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <xEventGroupWaitBits>:
     252:	2f 92       	push	r2
     254:	3f 92       	push	r3
     256:	4f 92       	push	r4
     258:	5f 92       	push	r5
     25a:	6f 92       	push	r6
     25c:	7f 92       	push	r7
     25e:	8f 92       	push	r8
     260:	9f 92       	push	r9
     262:	af 92       	push	r10
     264:	bf 92       	push	r11
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	ec 01       	movw	r28, r24
     278:	4a 01       	movw	r8, r20
     27a:	5b 01       	movw	r10, r22
     27c:	62 2e       	mov	r6, r18
     27e:	70 2e       	mov	r7, r16
     280:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <vTaskSuspendAll>
     284:	28 80       	ld	r2, Y
     286:	39 80       	ldd	r3, Y+1	; 0x01
     288:	4a 80       	ldd	r4, Y+2	; 0x02
     28a:	5b 80       	ldd	r5, Y+3	; 0x03
     28c:	a5 01       	movw	r20, r10
     28e:	94 01       	movw	r18, r8
     290:	c2 01       	movw	r24, r4
     292:	b1 01       	movw	r22, r2
     294:	bd df       	rcall	.-134    	; 0x210 <prvTestWaitCondition>
     296:	88 23       	and	r24, r24
     298:	a1 f0       	breq	.+40     	; 0x2c2 <xEventGroupWaitBits+0x70>
     29a:	66 20       	and	r6, r6
     29c:	89 f1       	breq	.+98     	; 0x300 <xEventGroupWaitBits+0xae>
     29e:	d5 01       	movw	r26, r10
     2a0:	c4 01       	movw	r24, r8
     2a2:	80 95       	com	r24
     2a4:	90 95       	com	r25
     2a6:	a0 95       	com	r26
     2a8:	b0 95       	com	r27
     2aa:	82 21       	and	r24, r2
     2ac:	93 21       	and	r25, r3
     2ae:	a4 21       	and	r26, r4
     2b0:	b5 21       	and	r27, r5
     2b2:	88 83       	st	Y, r24
     2b4:	99 83       	std	Y+1, r25	; 0x01
     2b6:	aa 83       	std	Y+2, r26	; 0x02
     2b8:	bb 83       	std	Y+3, r27	; 0x03
     2ba:	c1 2c       	mov	r12, r1
     2bc:	d1 2c       	mov	r13, r1
     2be:	76 01       	movw	r14, r12
     2c0:	22 c0       	rjmp	.+68     	; 0x306 <xEventGroupWaitBits+0xb4>
     2c2:	c1 14       	cp	r12, r1
     2c4:	d1 04       	cpc	r13, r1
     2c6:	e1 04       	cpc	r14, r1
     2c8:	f1 04       	cpc	r15, r1
     2ca:	e9 f0       	breq	.+58     	; 0x306 <xEventGroupWaitBits+0xb4>
     2cc:	61 10       	cpse	r6, r1
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <xEventGroupWaitBits+0x86>
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	ba 01       	movw	r22, r20
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <xEventGroupWaitBits+0x8e>
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	71 e0       	ldi	r23, 0x01	; 1
     2e0:	71 10       	cpse	r7, r1
     2e2:	74 60       	ori	r23, 0x04	; 4
     2e4:	48 29       	or	r20, r8
     2e6:	59 29       	or	r21, r9
     2e8:	6a 29       	or	r22, r10
     2ea:	7b 29       	or	r23, r11
     2ec:	97 01       	movw	r18, r14
     2ee:	86 01       	movw	r16, r12
     2f0:	ce 01       	movw	r24, r28
     2f2:	04 96       	adiw	r24, 0x04	; 4
     2f4:	0e 94 00 11 	call	0x2200	; 0x2200 <vTaskPlaceOnUnorderedEventList>
     2f8:	21 2c       	mov	r2, r1
     2fa:	31 2c       	mov	r3, r1
     2fc:	21 01       	movw	r4, r2
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <xEventGroupWaitBits+0xb4>
     300:	c1 2c       	mov	r12, r1
     302:	d1 2c       	mov	r13, r1
     304:	76 01       	movw	r14, r12
     306:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
     30a:	cd 28       	or	r12, r13
     30c:	ce 28       	or	r12, r14
     30e:	cf 28       	or	r12, r15
     310:	59 f1       	breq	.+86     	; 0x368 <xEventGroupWaitBits+0x116>
     312:	81 11       	cpse	r24, r1
     314:	01 c0       	rjmp	.+2      	; 0x318 <xEventGroupWaitBits+0xc6>
     316:	f2 d2       	rcall	.+1508   	; 0x8fc <vPortYield>
     318:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <uxTaskResetEventItemValue>
     31c:	6b 01       	movw	r12, r22
     31e:	7c 01       	movw	r14, r24
     320:	91 fd       	sbrc	r25, 1
     322:	1f c0       	rjmp	.+62     	; 0x362 <xEventGroupWaitBits+0x110>
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	0f 92       	push	r0
     32a:	c8 80       	ld	r12, Y
     32c:	d9 80       	ldd	r13, Y+1	; 0x01
     32e:	ea 80       	ldd	r14, Y+2	; 0x02
     330:	fb 80       	ldd	r15, Y+3	; 0x03
     332:	07 2d       	mov	r16, r7
     334:	a5 01       	movw	r20, r10
     336:	94 01       	movw	r18, r8
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	69 df       	rcall	.-302    	; 0x210 <prvTestWaitCondition>
     33e:	88 23       	and	r24, r24
     340:	71 f0       	breq	.+28     	; 0x35e <xEventGroupWaitBits+0x10c>
     342:	66 20       	and	r6, r6
     344:	61 f0       	breq	.+24     	; 0x35e <xEventGroupWaitBits+0x10c>
     346:	80 94       	com	r8
     348:	90 94       	com	r9
     34a:	a0 94       	com	r10
     34c:	b0 94       	com	r11
     34e:	8c 20       	and	r8, r12
     350:	9d 20       	and	r9, r13
     352:	ae 20       	and	r10, r14
     354:	bf 20       	and	r11, r15
     356:	88 82       	st	Y, r8
     358:	99 82       	std	Y+1, r9	; 0x01
     35a:	aa 82       	std	Y+2, r10	; 0x02
     35c:	bb 82       	std	Y+3, r11	; 0x03
     35e:	0f 90       	pop	r0
     360:	0f be       	out	0x3f, r0	; 63
     362:	16 01       	movw	r2, r12
     364:	27 01       	movw	r4, r14
     366:	55 24       	eor	r5, r5
     368:	c2 01       	movw	r24, r4
     36a:	b1 01       	movw	r22, r2
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	df 90       	pop	r13
     37a:	cf 90       	pop	r12
     37c:	bf 90       	pop	r11
     37e:	af 90       	pop	r10
     380:	9f 90       	pop	r9
     382:	8f 90       	pop	r8
     384:	7f 90       	pop	r7
     386:	6f 90       	pop	r6
     388:	5f 90       	pop	r5
     38a:	4f 90       	pop	r4
     38c:	3f 90       	pop	r3
     38e:	2f 90       	pop	r2
     390:	08 95       	ret

00000392 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     392:	4f 92       	push	r4
     394:	5f 92       	push	r5
     396:	6f 92       	push	r6
     398:	7f 92       	push	r7
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	ec 01       	movw	r28, r24
     3b0:	6a 01       	movw	r12, r20
     3b2:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3b4:	8c 01       	movw	r16, r24
     3b6:	09 5f       	subi	r16, 0xF9	; 249
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     3ba:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     3be:	eb 85       	ldd	r30, Y+11	; 0x0b
     3c0:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     3c2:	88 81       	ld	r24, Y
     3c4:	99 81       	ldd	r25, Y+1	; 0x01
     3c6:	aa 81       	ldd	r26, Y+2	; 0x02
     3c8:	bb 81       	ldd	r27, Y+3	; 0x03
     3ca:	c8 2a       	or	r12, r24
     3cc:	d9 2a       	or	r13, r25
     3ce:	ea 2a       	or	r14, r26
     3d0:	fb 2a       	or	r15, r27
     3d2:	c8 82       	st	Y, r12
     3d4:	d9 82       	std	Y+1, r13	; 0x01
     3d6:	ea 82       	std	Y+2, r14	; 0x02
     3d8:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     3e0:	3d c0       	rjmp	.+122    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        {
            pxNext = listGET_NEXT( pxListItem );
     3e2:	a4 80       	ldd	r10, Z+4	; 0x04
     3e4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	a2 81       	ldd	r26, Z+2	; 0x02
     3ec:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     3ee:	ac 01       	movw	r20, r24
     3f0:	bd 01       	movw	r22, r26
     3f2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     3f4:	b2 fd       	sbrc	r27, 2
     3f6:	0e c0       	rjmp	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     3f8:	48 80       	ld	r4, Y
     3fa:	59 80       	ldd	r5, Y+1	; 0x01
     3fc:	6a 80       	ldd	r6, Y+2	; 0x02
     3fe:	7b 80       	ldd	r7, Y+3	; 0x03
     400:	44 22       	and	r4, r20
     402:	55 22       	and	r5, r21
     404:	66 22       	and	r6, r22
     406:	77 22       	and	r7, r23
     408:	45 28       	or	r4, r5
     40a:	46 28       	or	r4, r6
     40c:	47 28       	or	r4, r7
     40e:	89 f4       	brne	.+34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	12 c0       	rjmp	.+36     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     414:	48 80       	ld	r4, Y
     416:	59 80       	ldd	r5, Y+1	; 0x01
     418:	6a 80       	ldd	r6, Y+2	; 0x02
     41a:	7b 80       	ldd	r7, Y+3	; 0x03
     41c:	44 22       	and	r4, r20
     41e:	55 22       	and	r5, r21
     420:	66 22       	and	r6, r22
     422:	77 22       	and	r7, r23
     424:	44 15       	cp	r20, r4
     426:	55 05       	cpc	r21, r5
     428:	66 05       	cpc	r22, r6
     42a:	77 05       	cpc	r23, r7
     42c:	21 f0       	breq	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	03 c0       	rjmp	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	01 c0       	rjmp	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     436:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     438:	22 23       	and	r18, r18
     43a:	71 f0       	breq	.+28     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     43c:	b0 ff       	sbrs	r27, 0
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     440:	c4 2a       	or	r12, r20
     442:	d5 2a       	or	r13, r21
     444:	e6 2a       	or	r14, r22
     446:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     448:	48 81       	ld	r20, Y
     44a:	59 81       	ldd	r21, Y+1	; 0x01
     44c:	6a 81       	ldd	r22, Y+2	; 0x02
     44e:	7b 81       	ldd	r23, Y+3	; 0x03
     450:	72 60       	ori	r23, 0x02	; 2
     452:	cf 01       	movw	r24, r30
     454:	0e 94 3b 12 	call	0x2476	; 0x2476 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     458:	ea 2d       	mov	r30, r10
     45a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     45c:	e0 17       	cp	r30, r16
     45e:	f1 07       	cpc	r31, r17
     460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	bf cf       	rjmp	.-130    	; 0x3e2 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     464:	c0 94       	com	r12
     466:	d0 94       	com	r13
     468:	e0 94       	com	r14
     46a:	f0 94       	com	r15
     46c:	88 81       	ld	r24, Y
     46e:	99 81       	ldd	r25, Y+1	; 0x01
     470:	aa 81       	ldd	r26, Y+2	; 0x02
     472:	bb 81       	ldd	r27, Y+3	; 0x03
     474:	c8 22       	and	r12, r24
     476:	d9 22       	and	r13, r25
     478:	ea 22       	and	r14, r26
     47a:	fb 22       	and	r15, r27
     47c:	c8 82       	st	Y, r12
     47e:	d9 82       	std	Y+1, r13	; 0x01
     480:	ea 82       	std	Y+2, r14	; 0x02
     482:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     484:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     488:	68 81       	ld	r22, Y
     48a:	79 81       	ldd	r23, Y+1	; 0x01
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	7f 90       	pop	r7
     4a6:	6f 90       	pop	r6
     4a8:	5f 90       	pop	r5
     4aa:	4f 90       	pop	r4
     4ac:	08 95       	ret

000004ae <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4ae:	e0 e0       	ldi	r30, 0x00	; 0
     4b0:	f7 e0       	ldi	r31, 0x07	; 7
     4b2:	a4 e0       	ldi	r26, 0x04	; 4
     4b4:	b7 e0       	ldi	r27, 0x07	; 7
     4b6:	b1 83       	std	Z+1, r27	; 0x01
     4b8:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4ba:	13 82       	std	Z+3, r1	; 0x03
     4bc:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4be:	ec ea       	ldi	r30, 0xAC	; 172
     4c0:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4c2:	f0 93 ff 06 	sts	0x06FF, r31	; 0x8006ff <pxEnd+0x1>
     4c6:	e0 93 fe 06 	sts	0x06FE, r30	; 0x8006fe <pxEnd>
    pxEnd->xBlockSize = 0;
     4ca:	13 82       	std	Z+3, r1	; 0x03
     4cc:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4ce:	11 82       	std	Z+1, r1	; 0x01
     4d0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4d2:	88 ea       	ldi	r24, 0xA8	; 168
     4d4:	9d e0       	ldi	r25, 0x0D	; 13
     4d6:	13 96       	adiw	r26, 0x03	; 3
     4d8:	9c 93       	st	X, r25
     4da:	8e 93       	st	-X, r24
     4dc:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     4de:	ed 93       	st	X+, r30
     4e0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     4e2:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xMinimumEverFreeBytesRemaining+0x1>
     4e6:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     4ea:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <xFreeBytesRemaining+0x1>
     4ee:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e8       	ldi	r25, 0x80	; 128
     4f6:	90 93 f5 06 	sts	0x06F5, r25	; 0x8006f5 <__data_end+0x1>
     4fa:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <__data_end>
     4fe:	08 95       	ret

00000500 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     506:	a0 e0       	ldi	r26, 0x00	; 0
     508:	b7 e0       	ldi	r27, 0x07	; 7
     50a:	01 c0       	rjmp	.+2      	; 0x50e <prvInsertBlockIntoFreeList+0xe>
     50c:	df 01       	movw	r26, r30
     50e:	ed 91       	ld	r30, X+
     510:	fc 91       	ld	r31, X
     512:	11 97       	sbiw	r26, 0x01	; 1
     514:	ec 17       	cp	r30, r28
     516:	fd 07       	cpc	r31, r29
     518:	c8 f3       	brcs	.-14     	; 0x50c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     51a:	12 96       	adiw	r26, 0x02	; 2
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	13 97       	sbiw	r26, 0x03	; 3
     522:	9d 01       	movw	r18, r26
     524:	28 0f       	add	r18, r24
     526:	39 1f       	adc	r19, r25
     528:	c2 17       	cp	r28, r18
     52a:	d3 07       	cpc	r29, r19
     52c:	49 f4       	brne	.+18     	; 0x540 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     52e:	2a 81       	ldd	r18, Y+2	; 0x02
     530:	3b 81       	ldd	r19, Y+3	; 0x03
     532:	82 0f       	add	r24, r18
     534:	93 1f       	adc	r25, r19
     536:	13 96       	adiw	r26, 0x03	; 3
     538:	9c 93       	st	X, r25
     53a:	8e 93       	st	-X, r24
     53c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     53e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	9b 81       	ldd	r25, Y+3	; 0x03
     544:	9e 01       	movw	r18, r28
     546:	28 0f       	add	r18, r24
     548:	39 1f       	adc	r19, r25
     54a:	e2 17       	cp	r30, r18
     54c:	f3 07       	cpc	r31, r19
     54e:	c1 f4       	brne	.+48     	; 0x580 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     550:	20 91 fe 06 	lds	r18, 0x06FE	; 0x8006fe <pxEnd>
     554:	30 91 ff 06 	lds	r19, 0x06FF	; 0x8006ff <pxEnd+0x1>
     558:	e2 17       	cp	r30, r18
     55a:	f3 07       	cpc	r31, r19
     55c:	71 f0       	breq	.+28     	; 0x57a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     55e:	22 81       	ldd	r18, Z+2	; 0x02
     560:	33 81       	ldd	r19, Z+3	; 0x03
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	9b 83       	std	Y+3, r25	; 0x03
     568:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     56a:	ed 91       	ld	r30, X+
     56c:	fc 91       	ld	r31, X
     56e:	11 97       	sbiw	r26, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	91 81       	ldd	r25, Z+1	; 0x01
     574:	99 83       	std	Y+1, r25	; 0x01
     576:	88 83       	st	Y, r24
     578:	05 c0       	rjmp	.+10     	; 0x584 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     57a:	39 83       	std	Y+1, r19	; 0x01
     57c:	28 83       	st	Y, r18
     57e:	02 c0       	rjmp	.+4      	; 0x584 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     580:	f9 83       	std	Y+1, r31	; 0x01
     582:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     584:	ca 17       	cp	r28, r26
     586:	db 07       	cpc	r29, r27
     588:	11 f0       	breq	.+4      	; 0x58e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     58a:	cd 93       	st	X+, r28
     58c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5a2:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5a6:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <pxEnd>
     5aa:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <pxEnd+0x1>
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5b2:	7d df       	rcall	.-262    	; 0x4ae <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5b4:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <__data_end>
     5b8:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <__data_end+0x1>
     5bc:	80 23       	and	r24, r16
     5be:	91 23       	and	r25, r17
     5c0:	89 2b       	or	r24, r25
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <pvPortMalloc+0x32>
     5c4:	76 c0       	rjmp	.+236    	; 0x6b2 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5c6:	01 15       	cp	r16, r1
     5c8:	11 05       	cpc	r17, r1
     5ca:	49 f0       	breq	.+18     	; 0x5de <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5cc:	c8 01       	movw	r24, r16
     5ce:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5d0:	08 17       	cp	r16, r24
     5d2:	19 07       	cpc	r17, r25
     5d4:	18 f0       	brcs	.+6      	; 0x5dc <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	10 e0       	ldi	r17, 0x00	; 0
     5da:	01 c0       	rjmp	.+2      	; 0x5de <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     5dc:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     5de:	01 15       	cp	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <pvPortMalloc+0x52>
     5e4:	69 c0       	rjmp	.+210    	; 0x6b8 <pvPortMalloc+0x124>
     5e6:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <xFreeBytesRemaining>
     5ea:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <xFreeBytesRemaining+0x1>
     5ee:	80 17       	cp	r24, r16
     5f0:	91 07       	cpc	r25, r17
     5f2:	08 f4       	brcc	.+2      	; 0x5f6 <pvPortMalloc+0x62>
     5f4:	64 c0       	rjmp	.+200    	; 0x6be <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     5f6:	c0 91 00 07 	lds	r28, 0x0700	; 0x800700 <xStart>
     5fa:	d0 91 01 07 	lds	r29, 0x0701	; 0x800701 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     5fe:	e0 e0       	ldi	r30, 0x00	; 0
     600:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     602:	02 c0       	rjmp	.+4      	; 0x608 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     604:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     606:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	9b 81       	ldd	r25, Y+3	; 0x03
     60c:	80 17       	cp	r24, r16
     60e:	91 07       	cpc	r25, r17
     610:	20 f4       	brcc	.+8      	; 0x61a <pvPortMalloc+0x86>
     612:	88 81       	ld	r24, Y
     614:	99 81       	ldd	r25, Y+1	; 0x01
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	a9 f7       	brne	.-22     	; 0x604 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     61a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <pxEnd>
     61e:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <pxEnd+0x1>
     622:	c8 17       	cp	r28, r24
     624:	d9 07       	cpc	r29, r25
     626:	09 f4       	brne	.+2      	; 0x62a <pvPortMalloc+0x96>
     628:	4d c0       	rjmp	.+154    	; 0x6c4 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     62a:	e0 80       	ld	r14, Z
     62c:	f1 80       	ldd	r15, Z+1	; 0x01
     62e:	84 e0       	ldi	r24, 0x04	; 4
     630:	e8 0e       	add	r14, r24
     632:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     634:	88 81       	ld	r24, Y
     636:	99 81       	ldd	r25, Y+1	; 0x01
     638:	91 83       	std	Z+1, r25	; 0x01
     63a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     63c:	2a 81       	ldd	r18, Y+2	; 0x02
     63e:	3b 81       	ldd	r19, Y+3	; 0x03
     640:	20 1b       	sub	r18, r16
     642:	31 0b       	sbc	r19, r17
     644:	29 30       	cpi	r18, 0x09	; 9
     646:	31 05       	cpc	r19, r1
     648:	48 f0       	brcs	.+18     	; 0x65c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     64a:	ce 01       	movw	r24, r28
     64c:	80 0f       	add	r24, r16
     64e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     650:	fc 01       	movw	r30, r24
     652:	33 83       	std	Z+3, r19	; 0x03
     654:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     656:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     658:	0a 83       	std	Y+2, r16	; 0x02
     65a:	52 df       	rcall	.-348    	; 0x500 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     65c:	2a 81       	ldd	r18, Y+2	; 0x02
     65e:	3b 81       	ldd	r19, Y+3	; 0x03
     660:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <xFreeBytesRemaining>
     664:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <xFreeBytesRemaining+0x1>
     668:	82 1b       	sub	r24, r18
     66a:	93 0b       	sbc	r25, r19
     66c:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <xFreeBytesRemaining+0x1>
     670:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     674:	40 91 fa 06 	lds	r20, 0x06FA	; 0x8006fa <xMinimumEverFreeBytesRemaining>
     678:	50 91 fb 06 	lds	r21, 0x06FB	; 0x8006fb <xMinimumEverFreeBytesRemaining+0x1>
     67c:	84 17       	cp	r24, r20
     67e:	95 07       	cpc	r25, r21
     680:	20 f4       	brcc	.+8      	; 0x68a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     682:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xMinimumEverFreeBytesRemaining+0x1>
     686:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     68a:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <__data_end>
     68e:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <__data_end+0x1>
     692:	28 2b       	or	r18, r24
     694:	39 2b       	or	r19, r25
     696:	3b 83       	std	Y+3, r19	; 0x03
     698:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     69a:	19 82       	std	Y+1, r1	; 0x01
     69c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     69e:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xNumberOfSuccessfulAllocations>
     6a2:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xNumberOfSuccessfulAllocations+0x1>
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <xNumberOfSuccessfulAllocations+0x1>
     6ac:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xNumberOfSuccessfulAllocations>
     6b0:	0b c0       	rjmp	.+22     	; 0x6c8 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6b2:	e1 2c       	mov	r14, r1
     6b4:	f1 2c       	mov	r15, r1
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <pvPortMalloc+0x134>
     6b8:	e1 2c       	mov	r14, r1
     6ba:	f1 2c       	mov	r15, r1
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <pvPortMalloc+0x134>
     6be:	e1 2c       	mov	r14, r1
     6c0:	f1 2c       	mov	r15, r1
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <pvPortMalloc+0x134>
     6c4:	e1 2c       	mov	r14, r1
     6c6:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6c8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6cc:	e1 14       	cp	r14, r1
     6ce:	f1 04       	cpc	r15, r1
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6d2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6d6:	c7 01       	movw	r24, r14
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     6ee:	00 97       	sbiw	r24, 0x00	; 0
     6f0:	91 f1       	breq	.+100    	; 0x756 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     6f2:	ec 01       	movw	r28, r24
     6f4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     6f6:	4a 81       	ldd	r20, Y+2	; 0x02
     6f8:	5b 81       	ldd	r21, Y+3	; 0x03
     6fa:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <__data_end>
     6fe:	30 91 f5 06 	lds	r19, 0x06F5	; 0x8006f5 <__data_end+0x1>
     702:	ba 01       	movw	r22, r20
     704:	62 23       	and	r22, r18
     706:	73 23       	and	r23, r19
     708:	67 2b       	or	r22, r23
     70a:	29 f1       	breq	.+74     	; 0x756 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     70c:	68 81       	ld	r22, Y
     70e:	79 81       	ldd	r23, Y+1	; 0x01
     710:	67 2b       	or	r22, r23
     712:	09 f5       	brne	.+66     	; 0x756 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     714:	20 95       	com	r18
     716:	30 95       	com	r19
     718:	24 23       	and	r18, r20
     71a:	35 23       	and	r19, r21
     71c:	3b 83       	std	Y+3, r19	; 0x03
     71e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     720:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	9b 81       	ldd	r25, Y+3	; 0x03
     728:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <xFreeBytesRemaining>
     72c:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <xFreeBytesRemaining+0x1>
     730:	82 0f       	add	r24, r18
     732:	93 1f       	adc	r25, r19
     734:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <xFreeBytesRemaining+0x1>
     738:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     73c:	ce 01       	movw	r24, r28
     73e:	e0 de       	rcall	.-576    	; 0x500 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     740:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumberOfSuccessfulFrees>
     744:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xNumberOfSuccessfulFrees+0x1>
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xNumberOfSuccessfulFrees+0x1>
     74e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     752:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     760:	fc 01       	movw	r30, r24
     762:	03 96       	adiw	r24, 0x03	; 3
     764:	92 83       	std	Z+2, r25	; 0x02
     766:	81 83       	std	Z+1, r24	; 0x01
     768:	4f ef       	ldi	r20, 0xFF	; 255
     76a:	5f ef       	ldi	r21, 0xFF	; 255
     76c:	ba 01       	movw	r22, r20
     76e:	43 83       	std	Z+3, r20	; 0x03
     770:	54 83       	std	Z+4, r21	; 0x04
     772:	65 83       	std	Z+5, r22	; 0x05
     774:	76 83       	std	Z+6, r23	; 0x06
     776:	90 87       	std	Z+8, r25	; 0x08
     778:	87 83       	std	Z+7, r24	; 0x07
     77a:	92 87       	std	Z+10, r25	; 0x0a
     77c:	81 87       	std	Z+9, r24	; 0x09
     77e:	10 82       	st	Z, r1
     780:	08 95       	ret

00000782 <vListInitialiseItem>:
     782:	fc 01       	movw	r30, r24
     784:	13 86       	std	Z+11, r1	; 0x0b
     786:	12 86       	std	Z+10, r1	; 0x0a
     788:	08 95       	ret

0000078a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     794:	08 81       	ld	r16, Y
     796:	19 81       	ldd	r17, Y+1	; 0x01
     798:	2a 81       	ldd	r18, Y+2	; 0x02
     79a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     79c:	0f 3f       	cpi	r16, 0xFF	; 255
     79e:	4f ef       	ldi	r20, 0xFF	; 255
     7a0:	14 07       	cpc	r17, r20
     7a2:	24 07       	cpc	r18, r20
     7a4:	34 07       	cpc	r19, r20
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7a8:	fc 01       	movw	r30, r24
     7aa:	a1 85       	ldd	r26, Z+9	; 0x09
     7ac:	b2 85       	ldd	r27, Z+10	; 0x0a
     7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7b0:	dc 01       	movw	r26, r24
     7b2:	13 96       	adiw	r26, 0x03	; 3
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <vListInsert+0x2e>
     7b6:	df 01       	movw	r26, r30
     7b8:	14 96       	adiw	r26, 0x04	; 4
     7ba:	ed 91       	ld	r30, X+
     7bc:	fc 91       	ld	r31, X
     7be:	15 97       	sbiw	r26, 0x05	; 5
     7c0:	40 81       	ld	r20, Z
     7c2:	51 81       	ldd	r21, Z+1	; 0x01
     7c4:	62 81       	ldd	r22, Z+2	; 0x02
     7c6:	73 81       	ldd	r23, Z+3	; 0x03
     7c8:	04 17       	cp	r16, r20
     7ca:	15 07       	cpc	r17, r21
     7cc:	26 07       	cpc	r18, r22
     7ce:	37 07       	cpc	r19, r23
     7d0:	90 f7       	brcc	.-28     	; 0x7b6 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	15 97       	sbiw	r26, 0x05	; 5
     7da:	fd 83       	std	Y+5, r31	; 0x05
     7dc:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7de:	d7 83       	std	Z+7, r29	; 0x07
     7e0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     7e2:	bf 83       	std	Y+7, r27	; 0x07
     7e4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     7e6:	15 96       	adiw	r26, 0x05	; 5
     7e8:	dc 93       	st	X, r29
     7ea:	ce 93       	st	-X, r28
     7ec:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     7ee:	9b 87       	std	Y+11, r25	; 0x0b
     7f0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 81       	ld	r18, Z
     7f6:	2f 5f       	subi	r18, 0xFF	; 255
     7f8:	20 83       	st	Z, r18
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     80a:	a2 85       	ldd	r26, Z+10	; 0x0a
     80c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     80e:	c4 81       	ldd	r28, Z+4	; 0x04
     810:	d5 81       	ldd	r29, Z+5	; 0x05
     812:	86 81       	ldd	r24, Z+6	; 0x06
     814:	97 81       	ldd	r25, Z+7	; 0x07
     816:	9f 83       	std	Y+7, r25	; 0x07
     818:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     81a:	c6 81       	ldd	r28, Z+6	; 0x06
     81c:	d7 81       	ldd	r29, Z+7	; 0x07
     81e:	84 81       	ldd	r24, Z+4	; 0x04
     820:	95 81       	ldd	r25, Z+5	; 0x05
     822:	9d 83       	std	Y+5, r25	; 0x05
     824:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     826:	11 96       	adiw	r26, 0x01	; 1
     828:	8d 91       	ld	r24, X+
     82a:	9c 91       	ld	r25, X
     82c:	12 97       	sbiw	r26, 0x02	; 2
     82e:	e8 17       	cp	r30, r24
     830:	f9 07       	cpc	r31, r25
     832:	31 f4       	brne	.+12     	; 0x840 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     834:	86 81       	ldd	r24, Z+6	; 0x06
     836:	97 81       	ldd	r25, Z+7	; 0x07
     838:	12 96       	adiw	r26, 0x02	; 2
     83a:	9c 93       	st	X, r25
     83c:	8e 93       	st	-X, r24
     83e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     840:	13 86       	std	Z+11, r1	; 0x0b
     842:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     844:	8c 91       	ld	r24, X
     846:	81 50       	subi	r24, 0x01	; 1
     848:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     84a:	8c 91       	ld	r24, X
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     852:	a8 95       	wdr
     854:	90 ec       	ldi	r25, 0xC0	; 192
     856:	88 e1       	ldi	r24, 0x18	; 24
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	a8 95       	wdr
     85e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     862:	0f be       	out	0x3f, r0	; 63
     864:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     868:	08 95       	ret

0000086a <pxPortInitialiseStack>:
     86a:	fc 01       	movw	r30, r24
     86c:	60 83       	st	Z, r22
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	70 83       	st	Z, r23
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	10 82       	st	Z, r1
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	10 82       	st	Z, r1
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	20 e8       	ldi	r18, 0x80	; 128
     87e:	20 83       	st	Z, r18
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	10 82       	st	Z, r1
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	10 82       	st	Z, r1
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	10 82       	st	Z, r1
     88c:	77 97       	sbiw	r30, 0x17	; 23
     88e:	40 83       	st	Z, r20
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	50 83       	st	Z, r21
     894:	86 97       	sbiw	r24, 0x26	; 38
     896:	08 95       	ret

00000898 <xPortStartScheduler>:
     898:	dc df       	rcall	.-72     	; 0x852 <prvSetupTimerInterrupt>
     89a:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
     89e:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
     8a2:	cd 91       	ld	r28, X+
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	dd 91       	ld	r29, X+
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	bf 91       	pop	r27
     8b4:	af 91       	pop	r26
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	7f 91       	pop	r23
     8bc:	6f 91       	pop	r22
     8be:	5f 91       	pop	r21
     8c0:	4f 91       	pop	r20
     8c2:	3f 91       	pop	r19
     8c4:	2f 91       	pop	r18
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	bf 90       	pop	r11
     8d4:	af 90       	pop	r10
     8d6:	9f 90       	pop	r9
     8d8:	8f 90       	pop	r8
     8da:	7f 90       	pop	r7
     8dc:	6f 90       	pop	r6
     8de:	5f 90       	pop	r5
     8e0:	4f 90       	pop	r4
     8e2:	3f 90       	pop	r3
     8e4:	2f 90       	pop	r2
     8e6:	1f 90       	pop	r1
     8e8:	0f 90       	pop	r0
     8ea:	0c be       	out	0x3c, r0	; 60
     8ec:	0f 90       	pop	r0
     8ee:	0b be       	out	0x3b, r0	; 59
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	08 95       	ret
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret

000008fc <vPortYield>:
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	0f 92       	push	r0
     904:	0b b6       	in	r0, 0x3b	; 59
     906:	0f 92       	push	r0
     908:	0c b6       	in	r0, 0x3c	; 60
     90a:	0f 92       	push	r0
     90c:	1f 92       	push	r1
     90e:	11 24       	eor	r1, r1
     910:	2f 92       	push	r2
     912:	3f 92       	push	r3
     914:	4f 92       	push	r4
     916:	5f 92       	push	r5
     918:	6f 92       	push	r6
     91a:	7f 92       	push	r7
     91c:	8f 92       	push	r8
     91e:	9f 92       	push	r9
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	2f 93       	push	r18
     932:	3f 93       	push	r19
     934:	4f 93       	push	r20
     936:	5f 93       	push	r21
     938:	6f 93       	push	r22
     93a:	7f 93       	push	r23
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
     940:	af 93       	push	r26
     942:	bf 93       	push	r27
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
     94c:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
     950:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
     954:	0d b6       	in	r0, 0x3d	; 61
     956:	0d 92       	st	X+, r0
     958:	0e b6       	in	r0, 0x3e	; 62
     95a:	0d 92       	st	X+, r0
     95c:	0e 94 84 10 	call	0x2108	; 0x2108 <vTaskSwitchContext>
     960:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
     964:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
     968:	cd 91       	ld	r28, X+
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	dd 91       	ld	r29, X+
     96e:	de bf       	out	0x3e, r29	; 62
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	bf 90       	pop	r11
     99a:	af 90       	pop	r10
     99c:	9f 90       	pop	r9
     99e:	8f 90       	pop	r8
     9a0:	7f 90       	pop	r7
     9a2:	6f 90       	pop	r6
     9a4:	5f 90       	pop	r5
     9a6:	4f 90       	pop	r4
     9a8:	3f 90       	pop	r3
     9aa:	2f 90       	pop	r2
     9ac:	1f 90       	pop	r1
     9ae:	0f 90       	pop	r0
     9b0:	0c be       	out	0x3c, r0	; 60
     9b2:	0f 90       	pop	r0
     9b4:	0b be       	out	0x3b, r0	; 59
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	08 95       	ret

000009be <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	0f 92       	push	r0
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	0c b6       	in	r0, 0x3c	; 60
     9cc:	0f 92       	push	r0
     9ce:	1f 92       	push	r1
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 92       	push	r2
     9d4:	3f 92       	push	r3
     9d6:	4f 92       	push	r4
     9d8:	5f 92       	push	r5
     9da:	6f 92       	push	r6
     9dc:	7f 92       	push	r7
     9de:	8f 92       	push	r8
     9e0:	9f 92       	push	r9
     9e2:	af 92       	push	r10
     9e4:	bf 92       	push	r11
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
     a0e:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
     a12:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
     a16:	0d b6       	in	r0, 0x3d	; 61
     a18:	0d 92       	st	X+, r0
     a1a:	0e b6       	in	r0, 0x3e	; 62
     a1c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a1e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a20:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <xTaskIncrementTick>
     a24:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a26:	0e 94 84 10 	call	0x2108	; 0x2108 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a2a:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
     a2e:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
     a32:	cd 91       	ld	r28, X+
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	dd 91       	ld	r29, X+
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	7f 90       	pop	r7
     a6c:	6f 90       	pop	r6
     a6e:	5f 90       	pop	r5
     a70:	4f 90       	pop	r4
     a72:	3f 90       	pop	r3
     a74:	2f 90       	pop	r2
     a76:	1f 90       	pop	r1
     a78:	0f 90       	pop	r0
     a7a:	0c be       	out	0x3c, r0	; 60
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a86:	08 95       	ret

00000a88 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     a88:	9a df       	rcall	.-204    	; 0x9be <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     a8a:	18 95       	reti

00000a8c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	0f 92       	push	r0
     a92:	fc 01       	movw	r30, r24
     a94:	86 8d       	ldd	r24, Z+30	; 0x1e
     a96:	81 11       	cpse	r24, r1
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <prvIsQueueEmpty+0x12>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <prvIsQueueEmpty+0x14>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	08 95       	ret

00000aa6 <prvIsQueueFull>:
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	0f 92       	push	r0
     aac:	fc 01       	movw	r30, r24
     aae:	26 8d       	ldd	r18, Z+30	; 0x1e
     ab0:	87 8d       	ldd	r24, Z+31	; 0x1f
     ab2:	28 13       	cpse	r18, r24
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <prvIsQueueFull+0x14>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <prvIsQueueFull+0x16>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	08 95       	ret

00000ac2 <prvCopyDataToQueue>:
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	ec 01       	movw	r28, r24
     acc:	04 2f       	mov	r16, r20
     ace:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ad0:	48 a1       	ldd	r20, Y+32	; 0x20
     ad2:	41 11       	cpse	r20, r1
     ad4:	0c c0       	rjmp	.+24     	; 0xaee <prvCopyDataToQueue+0x2c>
     ad6:	88 81       	ld	r24, Y
     ad8:	99 81       	ldd	r25, Y+1	; 0x01
     ada:	89 2b       	or	r24, r25
     adc:	09 f0       	breq	.+2      	; 0xae0 <prvCopyDataToQueue+0x1e>
     ade:	42 c0       	rjmp	.+132    	; 0xb64 <prvCopyDataToQueue+0xa2>
     ae0:	8c 81       	ldd	r24, Y+4	; 0x04
     ae2:	9d 81       	ldd	r25, Y+5	; 0x05
     ae4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskPriorityDisinherit>
     ae8:	1d 82       	std	Y+5, r1	; 0x05
     aea:	1c 82       	std	Y+4, r1	; 0x04
     aec:	42 c0       	rjmp	.+132    	; 0xb72 <prvCopyDataToQueue+0xb0>
     aee:	01 11       	cpse	r16, r1
     af0:	17 c0       	rjmp	.+46     	; 0xb20 <prvCopyDataToQueue+0x5e>
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <memcpy>
     afc:	28 a1       	ldd	r18, Y+32	; 0x20
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	9b 81       	ldd	r25, Y+3	; 0x03
     b02:	82 0f       	add	r24, r18
     b04:	91 1d       	adc	r25, r1
     b06:	9b 83       	std	Y+3, r25	; 0x03
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	2c 81       	ldd	r18, Y+4	; 0x04
     b0c:	3d 81       	ldd	r19, Y+5	; 0x05
     b0e:	82 17       	cp	r24, r18
     b10:	93 07       	cpc	r25, r19
     b12:	50 f1       	brcs	.+84     	; 0xb68 <prvCopyDataToQueue+0xa6>
     b14:	88 81       	ld	r24, Y
     b16:	99 81       	ldd	r25, Y+1	; 0x01
     b18:	9b 83       	std	Y+3, r25	; 0x03
     b1a:	8a 83       	std	Y+2, r24	; 0x02
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	29 c0       	rjmp	.+82     	; 0xb72 <prvCopyDataToQueue+0xb0>
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	8e 81       	ldd	r24, Y+6	; 0x06
     b24:	9f 81       	ldd	r25, Y+7	; 0x07
     b26:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <memcpy>
     b2a:	88 a1       	ldd	r24, Y+32	; 0x20
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	91 95       	neg	r25
     b30:	81 95       	neg	r24
     b32:	91 09       	sbc	r25, r1
     b34:	2e 81       	ldd	r18, Y+6	; 0x06
     b36:	3f 81       	ldd	r19, Y+7	; 0x07
     b38:	28 0f       	add	r18, r24
     b3a:	39 1f       	adc	r19, r25
     b3c:	3f 83       	std	Y+7, r19	; 0x07
     b3e:	2e 83       	std	Y+6, r18	; 0x06
     b40:	48 81       	ld	r20, Y
     b42:	59 81       	ldd	r21, Y+1	; 0x01
     b44:	24 17       	cp	r18, r20
     b46:	35 07       	cpc	r19, r21
     b48:	30 f4       	brcc	.+12     	; 0xb56 <prvCopyDataToQueue+0x94>
     b4a:	2c 81       	ldd	r18, Y+4	; 0x04
     b4c:	3d 81       	ldd	r19, Y+5	; 0x05
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	9f 83       	std	Y+7, r25	; 0x07
     b54:	8e 83       	std	Y+6, r24	; 0x06
     b56:	02 30       	cpi	r16, 0x02	; 2
     b58:	49 f4       	brne	.+18     	; 0xb6c <prvCopyDataToQueue+0xaa>
     b5a:	11 23       	and	r17, r17
     b5c:	49 f0       	breq	.+18     	; 0xb70 <prvCopyDataToQueue+0xae>
     b5e:	11 50       	subi	r17, 0x01	; 1
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <prvCopyDataToQueue+0xb0>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <prvCopyDataToQueue+0xb0>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <prvCopyDataToQueue+0xb0>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <prvCopyDataToQueue+0xb0>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	1f 5f       	subi	r17, 0xFF	; 255
     b74:	1e 8f       	std	Y+30, r17	; 0x1e
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <prvCopyDataFromQueue>:
     b80:	fc 01       	movw	r30, r24
     b82:	40 a1       	ldd	r20, Z+32	; 0x20
     b84:	44 23       	and	r20, r20
     b86:	a9 f0       	breq	.+42     	; 0xbb2 <prvCopyDataFromQueue+0x32>
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	26 81       	ldd	r18, Z+6	; 0x06
     b8c:	37 81       	ldd	r19, Z+7	; 0x07
     b8e:	24 0f       	add	r18, r20
     b90:	35 1f       	adc	r19, r21
     b92:	37 83       	std	Z+7, r19	; 0x07
     b94:	26 83       	std	Z+6, r18	; 0x06
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	95 81       	ldd	r25, Z+5	; 0x05
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <prvCopyDataFromQueue+0x28>
     ba0:	80 81       	ld	r24, Z
     ba2:	91 81       	ldd	r25, Z+1	; 0x01
     ba4:	97 83       	std	Z+7, r25	; 0x07
     ba6:	86 83       	std	Z+6, r24	; 0x06
     ba8:	cb 01       	movw	r24, r22
     baa:	66 81       	ldd	r22, Z+6	; 0x06
     bac:	77 81       	ldd	r23, Z+7	; 0x07
     bae:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <memcpy>
     bb2:	08 95       	ret

00000bb4 <prvUnlockQueue>:
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	0f 92       	push	r0
     bc2:	1a a1       	ldd	r17, Y+34	; 0x22
     bc4:	0b c0       	rjmp	.+22     	; 0xbdc <prvUnlockQueue+0x28>
     bc6:	8b 89       	ldd	r24, Y+19	; 0x13
     bc8:	88 23       	and	r24, r24
     bca:	51 f0       	breq	.+20     	; 0xbe0 <prvUnlockQueue+0x2c>
     bcc:	ce 01       	movw	r24, r28
     bce:	43 96       	adiw	r24, 0x13	; 19
     bd0:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskRemoveFromEventList>
     bd4:	81 11       	cpse	r24, r1
     bd6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskMissedYield>
     bda:	11 50       	subi	r17, 0x01	; 1
     bdc:	11 16       	cp	r1, r17
     bde:	9c f3       	brlt	.-26     	; 0xbc6 <prvUnlockQueue+0x12>
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	8a a3       	std	Y+34, r24	; 0x22
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	0f 92       	push	r0
     bee:	19 a1       	ldd	r17, Y+33	; 0x21
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <prvUnlockQueue+0x54>
     bf2:	88 85       	ldd	r24, Y+8	; 0x08
     bf4:	88 23       	and	r24, r24
     bf6:	51 f0       	breq	.+20     	; 0xc0c <prvUnlockQueue+0x58>
     bf8:	ce 01       	movw	r24, r28
     bfa:	08 96       	adiw	r24, 0x08	; 8
     bfc:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskRemoveFromEventList>
     c00:	81 11       	cpse	r24, r1
     c02:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskMissedYield>
     c06:	11 50       	subi	r17, 0x01	; 1
     c08:	11 16       	cp	r1, r17
     c0a:	9c f3       	brlt	.-26     	; 0xbf2 <prvUnlockQueue+0x3e>
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	89 a3       	std	Y+33, r24	; 0x21
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	08 95       	ret

00000c1c <xQueueGenericReset>:
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	0f 92       	push	r0
     c28:	e8 81       	ld	r30, Y
     c2a:	f9 81       	ldd	r31, Y+1	; 0x01
     c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2e:	28 a1       	ldd	r18, Y+32	; 0x20
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	82 9f       	mul	r24, r18
     c36:	a0 01       	movw	r20, r0
     c38:	83 9f       	mul	r24, r19
     c3a:	50 0d       	add	r21, r0
     c3c:	92 9f       	mul	r25, r18
     c3e:	50 0d       	add	r21, r0
     c40:	11 24       	eor	r1, r1
     c42:	4e 0f       	add	r20, r30
     c44:	5f 1f       	adc	r21, r31
     c46:	5d 83       	std	Y+5, r21	; 0x05
     c48:	4c 83       	std	Y+4, r20	; 0x04
     c4a:	1e 8e       	std	Y+30, r1	; 0x1e
     c4c:	fb 83       	std	Y+3, r31	; 0x03
     c4e:	ea 83       	std	Y+2, r30	; 0x02
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	28 9f       	mul	r18, r24
     c54:	a0 01       	movw	r20, r0
     c56:	29 9f       	mul	r18, r25
     c58:	50 0d       	add	r21, r0
     c5a:	38 9f       	mul	r19, r24
     c5c:	50 0d       	add	r21, r0
     c5e:	11 24       	eor	r1, r1
     c60:	cf 01       	movw	r24, r30
     c62:	84 0f       	add	r24, r20
     c64:	95 1f       	adc	r25, r21
     c66:	9f 83       	std	Y+7, r25	; 0x07
     c68:	8e 83       	std	Y+6, r24	; 0x06
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	89 a3       	std	Y+33, r24	; 0x21
     c6e:	8a a3       	std	Y+34, r24	; 0x22
     c70:	61 11       	cpse	r22, r1
     c72:	0b c0       	rjmp	.+22     	; 0xc8a <xQueueGenericReset+0x6e>
     c74:	88 85       	ldd	r24, Y+8	; 0x08
     c76:	88 23       	and	r24, r24
     c78:	71 f0       	breq	.+28     	; 0xc96 <xQueueGenericReset+0x7a>
     c7a:	ce 01       	movw	r24, r28
     c7c:	08 96       	adiw	r24, 0x08	; 8
     c7e:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskRemoveFromEventList>
     c82:	88 23       	and	r24, r24
     c84:	41 f0       	breq	.+16     	; 0xc96 <xQueueGenericReset+0x7a>
     c86:	3a de       	rcall	.-908    	; 0x8fc <vPortYield>
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <xQueueGenericReset+0x7a>
     c8a:	ce 01       	movw	r24, r28
     c8c:	08 96       	adiw	r24, 0x08	; 8
     c8e:	68 dd       	rcall	.-1328   	; 0x760 <vListInitialise>
     c90:	ce 01       	movw	r24, r28
     c92:	43 96       	adiw	r24, 0x13	; 19
     c94:	65 dd       	rcall	.-1334   	; 0x760 <vListInitialise>
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <prvInitialiseNewQueue>:
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	f8 01       	movw	r30, r16
     ca8:	61 11       	cpse	r22, r1
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <prvInitialiseNewQueue+0x10>
     cac:	11 83       	std	Z+1, r17	; 0x01
     cae:	00 83       	st	Z, r16
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <prvInitialiseNewQueue+0x14>
     cb2:	51 83       	std	Z+1, r21	; 0x01
     cb4:	40 83       	st	Z, r20
     cb6:	87 8f       	std	Z+31, r24	; 0x1f
     cb8:	60 a3       	std	Z+32, r22	; 0x20
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	cf 01       	movw	r24, r30
     cbe:	ae df       	rcall	.-164    	; 0xc1c <xQueueGenericReset>
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <xQueueGenericCreate>:
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	f8 2e       	mov	r15, r24
     cd6:	e6 2e       	mov	r14, r22
     cd8:	d4 2e       	mov	r13, r20
     cda:	86 9f       	mul	r24, r22
     cdc:	c0 01       	movw	r24, r0
     cde:	11 24       	eor	r1, r1
     ce0:	83 96       	adiw	r24, 0x23	; 35
     ce2:	58 dc       	rcall	.-1872   	; 0x594 <pvPortMalloc>
     ce4:	ec 01       	movw	r28, r24
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	41 f0       	breq	.+16     	; 0xcfa <xQueueGenericCreate+0x34>
     cea:	8c 01       	movw	r16, r24
     cec:	2d 2d       	mov	r18, r13
     cee:	ac 01       	movw	r20, r24
     cf0:	4d 5d       	subi	r20, 0xDD	; 221
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	6e 2d       	mov	r22, r14
     cf6:	8f 2d       	mov	r24, r15
     cf8:	d4 df       	rcall	.-88     	; 0xca2 <prvInitialiseNewQueue>
     cfa:	ce 01       	movw	r24, r28
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	08 95       	ret

00000d0c <xQueueGenericSend>:
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	29 97       	sbiw	r28, 0x09	; 9
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	7c 01       	movw	r14, r24
     d2e:	6b 01       	movw	r12, r22
     d30:	2e 83       	std	Y+6, r18	; 0x06
     d32:	3f 83       	std	Y+7, r19	; 0x07
     d34:	48 87       	std	Y+8, r20	; 0x08
     d36:	59 87       	std	Y+9, r21	; 0x09
     d38:	10 e0       	ldi	r17, 0x00	; 0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	0f 92       	push	r0
     d40:	f7 01       	movw	r30, r14
     d42:	96 8d       	ldd	r25, Z+30	; 0x1e
     d44:	87 8d       	ldd	r24, Z+31	; 0x1f
     d46:	98 17       	cp	r25, r24
     d48:	10 f0       	brcs	.+4      	; 0xd4e <xQueueGenericSend+0x42>
     d4a:	02 30       	cpi	r16, 0x02	; 2
     d4c:	b1 f4       	brne	.+44     	; 0xd7a <xQueueGenericSend+0x6e>
     d4e:	40 2f       	mov	r20, r16
     d50:	b6 01       	movw	r22, r12
     d52:	c7 01       	movw	r24, r14
     d54:	b6 de       	rcall	.-660    	; 0xac2 <prvCopyDataToQueue>
     d56:	f7 01       	movw	r30, r14
     d58:	93 89       	ldd	r25, Z+19	; 0x13
     d5a:	99 23       	and	r25, r25
     d5c:	41 f0       	breq	.+16     	; 0xd6e <xQueueGenericSend+0x62>
     d5e:	c7 01       	movw	r24, r14
     d60:	43 96       	adiw	r24, 0x13	; 19
     d62:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskRemoveFromEventList>
     d66:	88 23       	and	r24, r24
     d68:	21 f0       	breq	.+8      	; 0xd72 <xQueueGenericSend+0x66>
     d6a:	c8 dd       	rcall	.-1136   	; 0x8fc <vPortYield>
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <xQueueGenericSend+0x66>
     d6e:	81 11       	cpse	r24, r1
     d70:	c5 dd       	rcall	.-1142   	; 0x8fc <vPortYield>
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	4c c0       	rjmp	.+152    	; 0xe12 <xQueueGenericSend+0x106>
     d7a:	8e 81       	ldd	r24, Y+6	; 0x06
     d7c:	9f 81       	ldd	r25, Y+7	; 0x07
     d7e:	a8 85       	ldd	r26, Y+8	; 0x08
     d80:	b9 85       	ldd	r27, Y+9	; 0x09
     d82:	89 2b       	or	r24, r25
     d84:	8a 2b       	or	r24, r26
     d86:	8b 2b       	or	r24, r27
     d88:	21 f4       	brne	.+8      	; 0xd92 <xQueueGenericSend+0x86>
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	40 c0       	rjmp	.+128    	; 0xe12 <xQueueGenericSend+0x106>
     d92:	11 11       	cpse	r17, r1
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <xQueueGenericSend+0x94>
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <vTaskInternalSetTimeOutState>
     d9e:	11 e0       	ldi	r17, 0x01	; 1
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	15 d7       	rcall	.+3626   	; 0x1bd0 <vTaskSuspendAll>
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	0f 92       	push	r0
     dac:	f7 01       	movw	r30, r14
     dae:	81 a1       	ldd	r24, Z+33	; 0x21
     db0:	8f 3f       	cpi	r24, 0xFF	; 255
     db2:	09 f4       	brne	.+2      	; 0xdb6 <xQueueGenericSend+0xaa>
     db4:	11 a2       	std	Z+33, r1	; 0x21
     db6:	f7 01       	movw	r30, r14
     db8:	82 a1       	ldd	r24, Z+34	; 0x22
     dba:	8f 3f       	cpi	r24, 0xFF	; 255
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <xQueueGenericSend+0xb4>
     dbe:	12 a2       	std	Z+34, r1	; 0x22
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	be 01       	movw	r22, r28
     dc6:	6a 5f       	subi	r22, 0xFA	; 250
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <xTaskCheckForTimeOut>
     dd2:	81 11       	cpse	r24, r1
     dd4:	19 c0       	rjmp	.+50     	; 0xe08 <xQueueGenericSend+0xfc>
     dd6:	c7 01       	movw	r24, r14
     dd8:	66 de       	rcall	.-820    	; 0xaa6 <prvIsQueueFull>
     dda:	88 23       	and	r24, r24
     ddc:	81 f0       	breq	.+32     	; 0xdfe <xQueueGenericSend+0xf2>
     dde:	4e 81       	ldd	r20, Y+6	; 0x06
     de0:	5f 81       	ldd	r21, Y+7	; 0x07
     de2:	68 85       	ldd	r22, Y+8	; 0x08
     de4:	79 85       	ldd	r23, Y+9	; 0x09
     de6:	c7 01       	movw	r24, r14
     de8:	08 96       	adiw	r24, 0x08	; 8
     dea:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vTaskPlaceOnEventList>
     dee:	c7 01       	movw	r24, r14
     df0:	e1 de       	rcall	.-574    	; 0xbb4 <prvUnlockQueue>
     df2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
     df6:	81 11       	cpse	r24, r1
     df8:	a0 cf       	rjmp	.-192    	; 0xd3a <xQueueGenericSend+0x2e>
     dfa:	80 dd       	rcall	.-1280   	; 0x8fc <vPortYield>
     dfc:	9e cf       	rjmp	.-196    	; 0xd3a <xQueueGenericSend+0x2e>
     dfe:	c7 01       	movw	r24, r14
     e00:	d9 de       	rcall	.-590    	; 0xbb4 <prvUnlockQueue>
     e02:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
     e06:	99 cf       	rjmp	.-206    	; 0xd3a <xQueueGenericSend+0x2e>
     e08:	c7 01       	movw	r24, r14
     e0a:	d4 de       	rcall	.-600    	; 0xbb4 <prvUnlockQueue>
     e0c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	29 96       	adiw	r28, 0x09	; 9
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	08 95       	ret

00000e30 <prvInitialiseMutex>:
     e30:	0f 93       	push	r16
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	69 f0       	breq	.+26     	; 0xe50 <prvInitialiseMutex+0x20>
     e36:	fc 01       	movw	r30, r24
     e38:	15 82       	std	Z+5, r1	; 0x05
     e3a:	14 82       	std	Z+4, r1	; 0x04
     e3c:	11 82       	std	Z+1, r1	; 0x01
     e3e:	10 82       	st	Z, r1
     e40:	16 82       	std	Z+6, r1	; 0x06
     e42:	00 e0       	ldi	r16, 0x00	; 0
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	5e df       	rcall	.-324    	; 0xd0c <xQueueGenericSend>
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <xQueueCreateMutex>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	48 2f       	mov	r20, r24
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	33 df       	rcall	.-410    	; 0xcc6 <xQueueGenericCreate>
     e60:	ec 01       	movw	r28, r24
     e62:	e6 df       	rcall	.-52     	; 0xe30 <prvInitialiseMutex>
     e64:	ce 01       	movw	r24, r28
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <xQueueGenericSendFromISR>:
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	8a 01       	movw	r16, r20
     e7a:	fc 01       	movw	r30, r24
     e7c:	56 8d       	ldd	r21, Z+30	; 0x1e
     e7e:	37 8d       	ldd	r19, Z+31	; 0x1f
     e80:	53 17       	cp	r21, r19
     e82:	10 f0       	brcs	.+4      	; 0xe88 <xQueueGenericSendFromISR+0x1c>
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	f9 f4       	brne	.+62     	; 0xec6 <xQueueGenericSendFromISR+0x5a>
     e88:	42 2f       	mov	r20, r18
     e8a:	78 01       	movw	r14, r16
     e8c:	ec 01       	movw	r28, r24
     e8e:	1a a1       	ldd	r17, Y+34	; 0x22
     e90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e92:	ce 01       	movw	r24, r28
     e94:	16 de       	rcall	.-980    	; 0xac2 <prvCopyDataToQueue>
     e96:	1f 3f       	cpi	r17, 0xFF	; 255
     e98:	81 f4       	brne	.+32     	; 0xeba <xQueueGenericSendFromISR+0x4e>
     e9a:	8b 89       	ldd	r24, Y+19	; 0x13
     e9c:	88 23       	and	r24, r24
     e9e:	a9 f0       	breq	.+42     	; 0xeca <xQueueGenericSendFromISR+0x5e>
     ea0:	ce 01       	movw	r24, r28
     ea2:	43 96       	adiw	r24, 0x13	; 19
     ea4:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskRemoveFromEventList>
     ea8:	88 23       	and	r24, r24
     eaa:	89 f0       	breq	.+34     	; 0xece <xQueueGenericSendFromISR+0x62>
     eac:	e1 14       	cp	r14, r1
     eae:	f1 04       	cpc	r15, r1
     eb0:	81 f0       	breq	.+32     	; 0xed2 <xQueueGenericSendFromISR+0x66>
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	f7 01       	movw	r30, r14
     eb6:	80 83       	st	Z, r24
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <xQueueGenericSendFromISR+0x68>
     eba:	ff 24       	eor	r15, r15
     ebc:	f3 94       	inc	r15
     ebe:	f1 0e       	add	r15, r17
     ec0:	fa a2       	std	Y+34, r15	; 0x22
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <xQueueGenericSendFromISR+0x68>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <xQueueGenericSendFromISR+0x68>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <xQueueGenericSendFromISR+0x68>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <xQueueGenericSendFromISR+0x68>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	08 95       	ret

00000ee2 <xQueueReceive>:
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	29 97       	sbiw	r28, 0x09	; 9
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	8c 01       	movw	r16, r24
     f04:	6b 01       	movw	r12, r22
     f06:	2e 83       	std	Y+6, r18	; 0x06
     f08:	3f 83       	std	Y+7, r19	; 0x07
     f0a:	48 87       	std	Y+8, r20	; 0x08
     f0c:	59 87       	std	Y+9, r21	; 0x09
     f0e:	e1 2c       	mov	r14, r1
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	0f 92       	push	r0
     f16:	f8 01       	movw	r30, r16
     f18:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f1a:	ff 20       	and	r15, r15
     f1c:	99 f0       	breq	.+38     	; 0xf44 <xQueueReceive+0x62>
     f1e:	b6 01       	movw	r22, r12
     f20:	c8 01       	movw	r24, r16
     f22:	2e de       	rcall	.-932    	; 0xb80 <prvCopyDataFromQueue>
     f24:	fa 94       	dec	r15
     f26:	f8 01       	movw	r30, r16
     f28:	f6 8e       	std	Z+30, r15	; 0x1e
     f2a:	80 85       	ldd	r24, Z+8	; 0x08
     f2c:	88 23       	and	r24, r24
     f2e:	31 f0       	breq	.+12     	; 0xf3c <xQueueReceive+0x5a>
     f30:	c8 01       	movw	r24, r16
     f32:	08 96       	adiw	r24, 0x08	; 8
     f34:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskRemoveFromEventList>
     f38:	81 11       	cpse	r24, r1
     f3a:	e0 dc       	rcall	.-1600   	; 0x8fc <vPortYield>
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	4f c0       	rjmp	.+158    	; 0xfe2 <xQueueReceive+0x100>
     f44:	8e 81       	ldd	r24, Y+6	; 0x06
     f46:	9f 81       	ldd	r25, Y+7	; 0x07
     f48:	a8 85       	ldd	r26, Y+8	; 0x08
     f4a:	b9 85       	ldd	r27, Y+9	; 0x09
     f4c:	89 2b       	or	r24, r25
     f4e:	8a 2b       	or	r24, r26
     f50:	8b 2b       	or	r24, r27
     f52:	21 f4       	brne	.+8      	; 0xf5c <xQueueReceive+0x7a>
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	43 c0       	rjmp	.+134    	; 0xfe2 <xQueueReceive+0x100>
     f5c:	e1 10       	cpse	r14, r1
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <xQueueReceive+0x8a>
     f60:	ce 01       	movw	r24, r28
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <vTaskInternalSetTimeOutState>
     f68:	ee 24       	eor	r14, r14
     f6a:	e3 94       	inc	r14
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	2f d6       	rcall	.+3166   	; 0x1bd0 <vTaskSuspendAll>
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	0f 92       	push	r0
     f78:	f8 01       	movw	r30, r16
     f7a:	81 a1       	ldd	r24, Z+33	; 0x21
     f7c:	8f 3f       	cpi	r24, 0xFF	; 255
     f7e:	09 f4       	brne	.+2      	; 0xf82 <xQueueReceive+0xa0>
     f80:	11 a2       	std	Z+33, r1	; 0x21
     f82:	f8 01       	movw	r30, r16
     f84:	82 a1       	ldd	r24, Z+34	; 0x22
     f86:	8f 3f       	cpi	r24, 0xFF	; 255
     f88:	09 f4       	brne	.+2      	; 0xf8c <xQueueReceive+0xaa>
     f8a:	12 a2       	std	Z+34, r1	; 0x22
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	be 01       	movw	r22, r28
     f92:	6a 5f       	subi	r22, 0xFA	; 250
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <xTaskCheckForTimeOut>
     f9e:	81 11       	cpse	r24, r1
     fa0:	17 c0       	rjmp	.+46     	; 0xfd0 <xQueueReceive+0xee>
     fa2:	c8 01       	movw	r24, r16
     fa4:	73 dd       	rcall	.-1306   	; 0xa8c <prvIsQueueEmpty>
     fa6:	88 23       	and	r24, r24
     fa8:	79 f0       	breq	.+30     	; 0xfc8 <xQueueReceive+0xe6>
     faa:	4e 81       	ldd	r20, Y+6	; 0x06
     fac:	5f 81       	ldd	r21, Y+7	; 0x07
     fae:	68 85       	ldd	r22, Y+8	; 0x08
     fb0:	79 85       	ldd	r23, Y+9	; 0x09
     fb2:	c8 01       	movw	r24, r16
     fb4:	43 96       	adiw	r24, 0x13	; 19
     fb6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vTaskPlaceOnEventList>
     fba:	c8 01       	movw	r24, r16
     fbc:	fb dd       	rcall	.-1034   	; 0xbb4 <prvUnlockQueue>
     fbe:	48 d7       	rcall	.+3728   	; 0x1e50 <xTaskResumeAll>
     fc0:	81 11       	cpse	r24, r1
     fc2:	a6 cf       	rjmp	.-180    	; 0xf10 <xQueueReceive+0x2e>
     fc4:	9b dc       	rcall	.-1738   	; 0x8fc <vPortYield>
     fc6:	a4 cf       	rjmp	.-184    	; 0xf10 <xQueueReceive+0x2e>
     fc8:	c8 01       	movw	r24, r16
     fca:	f4 dd       	rcall	.-1048   	; 0xbb4 <prvUnlockQueue>
     fcc:	41 d7       	rcall	.+3714   	; 0x1e50 <xTaskResumeAll>
     fce:	a0 cf       	rjmp	.-192    	; 0xf10 <xQueueReceive+0x2e>
     fd0:	c8 01       	movw	r24, r16
     fd2:	f0 dd       	rcall	.-1056   	; 0xbb4 <prvUnlockQueue>
     fd4:	3d d7       	rcall	.+3706   	; 0x1e50 <xTaskResumeAll>
     fd6:	c8 01       	movw	r24, r16
     fd8:	59 dd       	rcall	.-1358   	; 0xa8c <prvIsQueueEmpty>
     fda:	88 23       	and	r24, r24
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <xQueueReceive+0xfe>
     fde:	98 cf       	rjmp	.-208    	; 0xf10 <xQueueReceive+0x2e>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	29 96       	adiw	r28, 0x09	; 9
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	08 95       	ret

00001000 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	0f 92       	push	r0
    100c:	89 a1       	ldd	r24, Y+33	; 0x21
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	09 f4       	brne	.+2      	; 0x1014 <vQueueWaitForMessageRestricted+0x14>
    1012:	19 a2       	std	Y+33, r1	; 0x21
    1014:	8a a1       	ldd	r24, Y+34	; 0x22
    1016:	8f 3f       	cpi	r24, 0xFF	; 255
    1018:	09 f4       	brne	.+2      	; 0x101c <vQueueWaitForMessageRestricted+0x1c>
    101a:	1a a2       	std	Y+34, r1	; 0x22
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1020:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1022:	81 11       	cpse	r24, r1
    1024:	04 c0       	rjmp	.+8      	; 0x102e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1026:	ce 01       	movw	r24, r28
    1028:	43 96       	adiw	r24, 0x13	; 19
    102a:	0e 94 4a 11 	call	0x2294	; 0x2294 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    102e:	ce 01       	movw	r24, r28
    1030:	c1 dd       	rcall	.-1150   	; 0xbb4 <prvUnlockQueue>
    }
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1038:	fc 01       	movw	r30, r24
    103a:	44 81       	ldd	r20, Z+4	; 0x04
    103c:	55 81       	ldd	r21, Z+5	; 0x05
    103e:	22 81       	ldd	r18, Z+2	; 0x02
    1040:	33 81       	ldd	r19, Z+3	; 0x03
    1042:	24 0f       	add	r18, r20
    1044:	35 1f       	adc	r19, r21
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	b9 01       	movw	r22, r18
    104c:	68 1b       	sub	r22, r24
    104e:	79 0b       	sbc	r23, r25
    1050:	cb 01       	movw	r24, r22
    1052:	64 17       	cp	r22, r20
    1054:	75 07       	cpc	r23, r21
    1056:	10 f0       	brcs	.+4      	; 0x105c <prvBytesInBuffer+0x24>
    1058:	84 1b       	sub	r24, r20
    105a:	95 0b       	sbc	r25, r21
    105c:	08 95       	ret

0000105e <prvInitialiseNewStreamBuffer>:
    105e:	0f 93       	push	r16
    1060:	fc 01       	movw	r30, r24
    1062:	8f e0       	ldi	r24, 0x0F	; 15
    1064:	df 01       	movw	r26, r30
    1066:	1d 92       	st	X+, r1
    1068:	8a 95       	dec	r24
    106a:	e9 f7       	brne	.-6      	; 0x1066 <prvInitialiseNewStreamBuffer+0x8>
    106c:	75 87       	std	Z+13, r23	; 0x0d
    106e:	64 87       	std	Z+12, r22	; 0x0c
    1070:	55 83       	std	Z+5, r21	; 0x05
    1072:	44 83       	std	Z+4, r20	; 0x04
    1074:	37 83       	std	Z+7, r19	; 0x07
    1076:	26 83       	std	Z+6, r18	; 0x06
    1078:	06 87       	std	Z+14, r16	; 0x0e
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <prvWriteBytesToBuffer>:
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	6c 01       	movw	r12, r24
    1094:	5b 01       	movw	r10, r22
    1096:	7a 01       	movw	r14, r20
    1098:	fc 01       	movw	r30, r24
    109a:	c2 81       	ldd	r28, Z+2	; 0x02
    109c:	d3 81       	ldd	r29, Z+3	; 0x03
    109e:	04 81       	ldd	r16, Z+4	; 0x04
    10a0:	15 81       	ldd	r17, Z+5	; 0x05
    10a2:	0c 1b       	sub	r16, r28
    10a4:	1d 0b       	sbc	r17, r29
    10a6:	40 17       	cp	r20, r16
    10a8:	51 07       	cpc	r21, r17
    10aa:	08 f4       	brcc	.+2      	; 0x10ae <prvWriteBytesToBuffer+0x30>
    10ac:	8a 01       	movw	r16, r20
    10ae:	f6 01       	movw	r30, r12
    10b0:	84 85       	ldd	r24, Z+12	; 0x0c
    10b2:	95 85       	ldd	r25, Z+13	; 0x0d
    10b4:	a8 01       	movw	r20, r16
    10b6:	b5 01       	movw	r22, r10
    10b8:	8c 0f       	add	r24, r28
    10ba:	9d 1f       	adc	r25, r29
    10bc:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <memcpy>
    10c0:	0e 15       	cp	r16, r14
    10c2:	1f 05       	cpc	r17, r15
    10c4:	58 f4       	brcc	.+22     	; 0x10dc <prvWriteBytesToBuffer+0x5e>
    10c6:	a7 01       	movw	r20, r14
    10c8:	40 1b       	sub	r20, r16
    10ca:	51 0b       	sbc	r21, r17
    10cc:	b5 01       	movw	r22, r10
    10ce:	60 0f       	add	r22, r16
    10d0:	71 1f       	adc	r23, r17
    10d2:	f6 01       	movw	r30, r12
    10d4:	84 85       	ldd	r24, Z+12	; 0x0c
    10d6:	95 85       	ldd	r25, Z+13	; 0x0d
    10d8:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <memcpy>
    10dc:	ce 01       	movw	r24, r28
    10de:	8e 0d       	add	r24, r14
    10e0:	9f 1d       	adc	r25, r15
    10e2:	f6 01       	movw	r30, r12
    10e4:	24 81       	ldd	r18, Z+4	; 0x04
    10e6:	35 81       	ldd	r19, Z+5	; 0x05
    10e8:	82 17       	cp	r24, r18
    10ea:	93 07       	cpc	r25, r19
    10ec:	10 f0       	brcs	.+4      	; 0x10f2 <prvWriteBytesToBuffer+0x74>
    10ee:	82 1b       	sub	r24, r18
    10f0:	93 0b       	sbc	r25, r19
    10f2:	f6 01       	movw	r30, r12
    10f4:	93 83       	std	Z+3, r25	; 0x03
    10f6:	82 83       	std	Z+2, r24	; 0x02
    10f8:	c7 01       	movw	r24, r14
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	08 95       	ret

00001110 <prvWriteMessageToBuffer>:
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	1f 92       	push	r1
    1122:	1f 92       	push	r1
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	7c 01       	movw	r14, r24
    112a:	6b 01       	movw	r12, r22
    112c:	5a 83       	std	Y+2, r21	; 0x02
    112e:	49 83       	std	Y+1, r20	; 0x01
    1130:	21 15       	cp	r18, r1
    1132:	31 05       	cpc	r19, r1
    1134:	c1 f0       	breq	.+48     	; 0x1166 <prvWriteMessageToBuffer+0x56>
    1136:	fc 01       	movw	r30, r24
    1138:	86 85       	ldd	r24, Z+14	; 0x0e
    113a:	80 fd       	sbrc	r24, 0
    113c:	08 c0       	rjmp	.+16     	; 0x114e <prvWriteMessageToBuffer+0x3e>
    113e:	42 17       	cp	r20, r18
    1140:	53 07       	cpc	r21, r19
    1142:	08 f4       	brcc	.+2      	; 0x1146 <prvWriteMessageToBuffer+0x36>
    1144:	9a 01       	movw	r18, r20
    1146:	3a 83       	std	Y+2, r19	; 0x02
    1148:	29 83       	std	Y+1, r18	; 0x01
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0f c0       	rjmp	.+30     	; 0x116c <prvWriteMessageToBuffer+0x5c>
    114e:	20 17       	cp	r18, r16
    1150:	31 07       	cpc	r19, r17
    1152:	58 f0       	brcs	.+22     	; 0x116a <prvWriteMessageToBuffer+0x5a>
    1154:	42 e0       	ldi	r20, 0x02	; 2
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	be 01       	movw	r22, r28
    115a:	6f 5f       	subi	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	c7 01       	movw	r24, r14
    1160:	8e df       	rcall	.-228    	; 0x107e <prvWriteBytesToBuffer>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	03 c0       	rjmp	.+6      	; 0x116c <prvWriteMessageToBuffer+0x5c>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	01 c0       	rjmp	.+2      	; 0x116c <prvWriteMessageToBuffer+0x5c>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	88 23       	and	r24, r24
    116e:	31 f0       	breq	.+12     	; 0x117c <prvWriteMessageToBuffer+0x6c>
    1170:	49 81       	ldd	r20, Y+1	; 0x01
    1172:	5a 81       	ldd	r21, Y+2	; 0x02
    1174:	b6 01       	movw	r22, r12
    1176:	c7 01       	movw	r24, r14
    1178:	82 df       	rcall	.-252    	; 0x107e <prvWriteBytesToBuffer>
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <prvWriteMessageToBuffer+0x70>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	08 95       	ret

00001196 <prvReadBytesFromBuffer>:
    1196:	af 92       	push	r10
    1198:	bf 92       	push	r11
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	7c 01       	movw	r14, r24
    11ac:	5b 01       	movw	r10, r22
    11ae:	e9 01       	movw	r28, r18
    11b0:	42 17       	cp	r20, r18
    11b2:	53 07       	cpc	r21, r19
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <prvReadBytesFromBuffer+0x22>
    11b6:	ea 01       	movw	r28, r20
    11b8:	20 97       	sbiw	r28, 0x00	; 0
    11ba:	81 f1       	breq	.+96     	; 0x121c <prvReadBytesFromBuffer+0x86>
    11bc:	f7 01       	movw	r30, r14
    11be:	00 81       	ld	r16, Z
    11c0:	11 81       	ldd	r17, Z+1	; 0x01
    11c2:	84 81       	ldd	r24, Z+4	; 0x04
    11c4:	95 81       	ldd	r25, Z+5	; 0x05
    11c6:	80 1b       	sub	r24, r16
    11c8:	91 0b       	sbc	r25, r17
    11ca:	6e 01       	movw	r12, r28
    11cc:	8c 17       	cp	r24, r28
    11ce:	9d 07       	cpc	r25, r29
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <prvReadBytesFromBuffer+0x3e>
    11d2:	6c 01       	movw	r12, r24
    11d4:	f7 01       	movw	r30, r14
    11d6:	64 85       	ldd	r22, Z+12	; 0x0c
    11d8:	75 85       	ldd	r23, Z+13	; 0x0d
    11da:	60 0f       	add	r22, r16
    11dc:	71 1f       	adc	r23, r17
    11de:	a6 01       	movw	r20, r12
    11e0:	c5 01       	movw	r24, r10
    11e2:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <memcpy>
    11e6:	cc 16       	cp	r12, r28
    11e8:	dd 06       	cpc	r13, r29
    11ea:	58 f4       	brcc	.+22     	; 0x1202 <prvReadBytesFromBuffer+0x6c>
    11ec:	ae 01       	movw	r20, r28
    11ee:	4c 19       	sub	r20, r12
    11f0:	5d 09       	sbc	r21, r13
    11f2:	f7 01       	movw	r30, r14
    11f4:	64 85       	ldd	r22, Z+12	; 0x0c
    11f6:	75 85       	ldd	r23, Z+13	; 0x0d
    11f8:	c5 01       	movw	r24, r10
    11fa:	8c 0d       	add	r24, r12
    11fc:	9d 1d       	adc	r25, r13
    11fe:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <memcpy>
    1202:	0c 0f       	add	r16, r28
    1204:	1d 1f       	adc	r17, r29
    1206:	f7 01       	movw	r30, r14
    1208:	84 81       	ldd	r24, Z+4	; 0x04
    120a:	95 81       	ldd	r25, Z+5	; 0x05
    120c:	08 17       	cp	r16, r24
    120e:	19 07       	cpc	r17, r25
    1210:	10 f0       	brcs	.+4      	; 0x1216 <prvReadBytesFromBuffer+0x80>
    1212:	08 1b       	sub	r16, r24
    1214:	19 0b       	sbc	r17, r25
    1216:	f7 01       	movw	r30, r14
    1218:	11 83       	std	Z+1, r17	; 0x01
    121a:	00 83       	st	Z, r16
    121c:	ce 01       	movw	r24, r28
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	08 95       	ret

00001234 <prvReadMessageFromBuffer>:
    1234:	6f 92       	push	r6
    1236:	7f 92       	push	r7
    1238:	8f 92       	push	r8
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	1f 92       	push	r1
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	6c 01       	movw	r12, r24
    125a:	4b 01       	movw	r8, r22
    125c:	5a 01       	movw	r10, r20
    125e:	79 01       	movw	r14, r18
    1260:	01 15       	cp	r16, r1
    1262:	11 05       	cpc	r17, r1
    1264:	b1 f0       	breq	.+44     	; 0x1292 <prvReadMessageFromBuffer+0x5e>
    1266:	fc 01       	movw	r30, r24
    1268:	60 80       	ld	r6, Z
    126a:	71 80       	ldd	r7, Z+1	; 0x01
    126c:	a8 01       	movw	r20, r16
    126e:	be 01       	movw	r22, r28
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	90 df       	rcall	.-224    	; 0x1196 <prvReadBytesFromBuffer>
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	e0 1a       	sub	r14, r16
    127c:	f1 0a       	sbc	r15, r17
    127e:	a8 16       	cp	r10, r24
    1280:	b9 06       	cpc	r11, r25
    1282:	30 f4       	brcc	.+12     	; 0x1290 <prvReadMessageFromBuffer+0x5c>
    1284:	f6 01       	movw	r30, r12
    1286:	71 82       	std	Z+1, r7	; 0x01
    1288:	60 82       	st	Z, r6
    128a:	a1 2c       	mov	r10, r1
    128c:	b1 2c       	mov	r11, r1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <prvReadMessageFromBuffer+0x5e>
    1290:	5c 01       	movw	r10, r24
    1292:	97 01       	movw	r18, r14
    1294:	a5 01       	movw	r20, r10
    1296:	b4 01       	movw	r22, r8
    1298:	c6 01       	movw	r24, r12
    129a:	7d df       	rcall	.-262    	; 0x1196 <prvReadBytesFromBuffer>
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
    12b8:	7f 90       	pop	r7
    12ba:	6f 90       	pop	r6
    12bc:	08 95       	ret

000012be <xStreamBufferGenericCreate>:
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	ec 01       	movw	r28, r24
    12ce:	6b 01       	movw	r12, r22
    12d0:	41 30       	cpi	r20, 0x01	; 1
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <xStreamBufferGenericCreate+0x1a>
    12d4:	01 e0       	ldi	r16, 0x01	; 1
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <xStreamBufferGenericCreate+0x1c>
    12d8:	00 e0       	ldi	r16, 0x00	; 0
    12da:	c1 14       	cp	r12, r1
    12dc:	d1 04       	cpc	r13, r1
    12de:	19 f4       	brne	.+6      	; 0x12e6 <xStreamBufferGenericCreate+0x28>
    12e0:	cc 24       	eor	r12, r12
    12e2:	c3 94       	inc	r12
    12e4:	d1 2c       	mov	r13, r1
    12e6:	ce 01       	movw	r24, r28
    12e8:	40 96       	adiw	r24, 0x10	; 16
    12ea:	c8 17       	cp	r28, r24
    12ec:	d9 07       	cpc	r29, r25
    12ee:	20 f4       	brcc	.+8      	; 0x12f8 <xStreamBufferGenericCreate+0x3a>
    12f0:	21 96       	adiw	r28, 0x01	; 1
    12f2:	50 d9       	rcall	.-3424   	; 0x594 <pvPortMalloc>
    12f4:	7c 01       	movw	r14, r24
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <xStreamBufferGenericCreate+0x3e>
    12f8:	e1 2c       	mov	r14, r1
    12fa:	f1 2c       	mov	r15, r1
    12fc:	e1 14       	cp	r14, r1
    12fe:	f1 04       	cpc	r15, r1
    1300:	39 f0       	breq	.+14     	; 0x1310 <xStreamBufferGenericCreate+0x52>
    1302:	96 01       	movw	r18, r12
    1304:	ae 01       	movw	r20, r28
    1306:	b7 01       	movw	r22, r14
    1308:	61 5f       	subi	r22, 0xF1	; 241
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	c7 01       	movw	r24, r14
    130e:	a7 de       	rcall	.-690    	; 0x105e <prvInitialiseNewStreamBuffer>
    1310:	c7 01       	movw	r24, r14
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	08 95       	ret

00001322 <xStreamBufferReset>:
    1322:	0f 93       	push	r16
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	0f 92       	push	r0
    132a:	fc 01       	movw	r30, r24
    132c:	20 85       	ldd	r18, Z+8	; 0x08
    132e:	31 85       	ldd	r19, Z+9	; 0x09
    1330:	23 2b       	or	r18, r19
    1332:	71 f4       	brne	.+28     	; 0x1350 <xStreamBufferReset+0x2e>
    1334:	22 85       	ldd	r18, Z+10	; 0x0a
    1336:	33 85       	ldd	r19, Z+11	; 0x0b
    1338:	23 2b       	or	r18, r19
    133a:	61 f4       	brne	.+24     	; 0x1354 <xStreamBufferReset+0x32>
    133c:	26 81       	ldd	r18, Z+6	; 0x06
    133e:	37 81       	ldd	r19, Z+7	; 0x07
    1340:	44 81       	ldd	r20, Z+4	; 0x04
    1342:	55 81       	ldd	r21, Z+5	; 0x05
    1344:	64 85       	ldd	r22, Z+12	; 0x0c
    1346:	75 85       	ldd	r23, Z+13	; 0x0d
    1348:	06 85       	ldd	r16, Z+14	; 0x0e
    134a:	89 de       	rcall	.-750    	; 0x105e <prvInitialiseNewStreamBuffer>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <xStreamBufferReset+0x34>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <xStreamBufferReset+0x34>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <xStreamBufferSpacesAvailable>:
    135e:	fc 01       	movw	r30, r24
    1360:	24 81       	ldd	r18, Z+4	; 0x04
    1362:	35 81       	ldd	r19, Z+5	; 0x05
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	82 0f       	add	r24, r18
    136a:	93 1f       	adc	r25, r19
    136c:	42 81       	ldd	r20, Z+2	; 0x02
    136e:	53 81       	ldd	r21, Z+3	; 0x03
    1370:	84 1b       	sub	r24, r20
    1372:	95 0b       	sbc	r25, r21
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	82 17       	cp	r24, r18
    1378:	93 07       	cpc	r25, r19
    137a:	10 f0       	brcs	.+4      	; 0x1380 <xStreamBufferSpacesAvailable+0x22>
    137c:	82 1b       	sub	r24, r18
    137e:	93 0b       	sbc	r25, r19
    1380:	08 95       	ret

00001382 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1382:	2f 92       	push	r2
    1384:	3f 92       	push	r3
    1386:	4f 92       	push	r4
    1388:	5f 92       	push	r5
    138a:	6f 92       	push	r6
    138c:	7f 92       	push	r7
    138e:	8f 92       	push	r8
    1390:	9f 92       	push	r9
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	2b 97       	sbiw	r28, 0x0b	; 11
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	4c 01       	movw	r8, r24
    13b8:	7b 87       	std	Y+11, r23	; 0x0b
    13ba:	6a 87       	std	Y+10, r22	; 0x0a
    13bc:	1a 01       	movw	r2, r20
    13be:	0e 83       	std	Y+6, r16	; 0x06
    13c0:	1f 83       	std	Y+7, r17	; 0x07
    13c2:	28 87       	std	Y+8, r18	; 0x08
    13c4:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    13c6:	fc 01       	movw	r30, r24
    13c8:	84 81       	ldd	r24, Z+4	; 0x04
    13ca:	95 81       	ldd	r25, Z+5	; 0x05
    13cc:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13ce:	26 85       	ldd	r18, Z+14	; 0x0e
    13d0:	20 ff       	sbrs	r18, 0
    13d2:	0c c0       	rjmp	.+24     	; 0x13ec <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13d4:	2a 01       	movw	r4, r20
    13d6:	f2 e0       	ldi	r31, 0x02	; 2
    13d8:	4f 0e       	add	r4, r31
    13da:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    13dc:	84 15       	cp	r24, r4
    13de:	95 05       	cpc	r25, r5
    13e0:	58 f4       	brcc	.+22     	; 0x13f8 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    13e2:	1e 82       	std	Y+6, r1	; 0x06
    13e4:	1f 82       	std	Y+7, r1	; 0x07
    13e6:	18 86       	std	Y+8, r1	; 0x08
    13e8:	19 86       	std	Y+9, r1	; 0x09
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    13ec:	84 17       	cp	r24, r20
    13ee:	95 07       	cpc	r25, r21
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    13f2:	2a 01       	movw	r4, r20
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    13f6:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	a8 85       	ldd	r26, Y+8	; 0x08
    13fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1400:	89 2b       	or	r24, r25
    1402:	8a 2b       	or	r24, r26
    1404:	8b 2b       	or	r24, r27
    1406:	09 f4       	brne	.+2      	; 0x140a <xStreamBufferSend+0x88>
    1408:	38 c0       	rjmp	.+112    	; 0x147a <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    140a:	ce 01       	movw	r24, r28
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1418:	c4 01       	movw	r24, r8
    141a:	a1 df       	rcall	.-190    	; 0x135e <xStreamBufferSpacesAvailable>
    141c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    141e:	84 15       	cp	r24, r4
    1420:	95 05       	cpc	r25, r5
    1422:	40 f5       	brcc	.+80     	; 0x1474 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    142e:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskGetCurrentTaskHandle>
    1432:	f4 01       	movw	r30, r8
    1434:	93 87       	std	Z+11, r25	; 0x0b
    1436:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    143c:	ae 80       	ldd	r10, Y+6	; 0x06
    143e:	bf 80       	ldd	r11, Y+7	; 0x07
    1440:	c8 84       	ldd	r12, Y+8	; 0x08
    1442:	d9 84       	ldd	r13, Y+9	; 0x09
    1444:	e1 2c       	mov	r14, r1
    1446:	f1 2c       	mov	r15, r1
    1448:	00 e0       	ldi	r16, 0x00	; 0
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	98 01       	movw	r18, r16
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	ba 01       	movw	r22, r20
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0e 94 fe 13 	call	0x27fc	; 0x27fc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    145a:	f4 01       	movw	r30, r8
    145c:	13 86       	std	Z+11, r1	; 0x0b
    145e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1460:	be 01       	movw	r22, r28
    1462:	6a 5f       	subi	r22, 0xFA	; 250
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <xTaskCheckForTimeOut>
    146e:	88 23       	and	r24, r24
    1470:	81 f2       	breq	.-96     	; 0x1412 <xStreamBufferSend+0x90>
    1472:	05 c0       	rjmp	.+10     	; 0x147e <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
                    break;
    1478:	02 c0       	rjmp	.+4      	; 0x147e <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    147a:	61 2c       	mov	r6, r1
    147c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    147e:	61 14       	cp	r6, r1
    1480:	71 04       	cpc	r7, r1
    1482:	19 f4       	brne	.+6      	; 0x148a <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1484:	c4 01       	movw	r24, r8
    1486:	6b df       	rcall	.-298    	; 0x135e <xStreamBufferSpacesAvailable>
    1488:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    148a:	82 01       	movw	r16, r4
    148c:	93 01       	movw	r18, r6
    148e:	a1 01       	movw	r20, r2
    1490:	6a 85       	ldd	r22, Y+10	; 0x0a
    1492:	7b 85       	ldd	r23, Y+11	; 0x0b
    1494:	c4 01       	movw	r24, r8
    1496:	3c de       	rcall	.-904    	; 0x1110 <prvWriteMessageToBuffer>
    1498:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    149a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    149c:	e9 f0       	breq	.+58     	; 0x14d8 <xStreamBufferSend+0x156>
    149e:	c4 01       	movw	r24, r8
    14a0:	cb dd       	rcall	.-1130   	; 0x1038 <prvBytesInBuffer>
    14a2:	f4 01       	movw	r30, r8
    14a4:	26 81       	ldd	r18, Z+6	; 0x06
    14a6:	37 81       	ldd	r19, Z+7	; 0x07
    14a8:	82 17       	cp	r24, r18
    14aa:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    14ac:	a8 f0       	brcs	.+42     	; 0x14d8 <xStreamBufferSend+0x156>
    14ae:	90 d3       	rcall	.+1824   	; 0x1bd0 <vTaskSuspendAll>
    14b0:	f4 01       	movw	r30, r8
    14b2:	80 85       	ldd	r24, Z+8	; 0x08
    14b4:	91 85       	ldd	r25, Z+9	; 0x09
    14b6:	89 2b       	or	r24, r25
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <xStreamBufferSend+0x154>
    14ba:	80 85       	ldd	r24, Z+8	; 0x08
    14bc:	91 85       	ldd	r25, Z+9	; 0x09
    14be:	e1 2c       	mov	r14, r1
    14c0:	f1 2c       	mov	r15, r1
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	0e 94 a5 14 	call	0x294a	; 0x294a <xTaskGenericNotify>
    14d0:	f4 01       	movw	r30, r8
    14d2:	11 86       	std	Z+9, r1	; 0x09
    14d4:	10 86       	std	Z+8, r1	; 0x08
    14d6:	bc d4       	rcall	.+2424   	; 0x1e50 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    14d8:	c6 01       	movw	r24, r12
    14da:	2b 96       	adiw	r28, 0x0b	; 11
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	3f 90       	pop	r3
    1508:	2f 90       	pop	r2
    150a:	08 95       	ret

0000150c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ec 01       	movw	r28, r24
    1522:	7b 01       	movw	r14, r22
    1524:	5a 01       	movw	r10, r20
    1526:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1528:	8e 85       	ldd	r24, Y+14	; 0x0e
    152a:	80 ff       	sbrs	r24, 0
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    152e:	8a 01       	movw	r16, r20
    1530:	0e 5f       	subi	r16, 0xFE	; 254
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1536:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1538:	ce 01       	movw	r24, r28
    153a:	11 df       	rcall	.-478    	; 0x135e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    153c:	9c 01       	movw	r18, r24
    153e:	a5 01       	movw	r20, r10
    1540:	b7 01       	movw	r22, r14
    1542:	ce 01       	movw	r24, r28
    1544:	e5 dd       	rcall	.-1078   	; 0x1110 <prvWriteMessageToBuffer>
    1546:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1548:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    154a:	c1 f0       	breq	.+48     	; 0x157c <xStreamBufferSendFromISR+0x70>
    154c:	ce 01       	movw	r24, r28
    154e:	74 dd       	rcall	.-1304   	; 0x1038 <prvBytesInBuffer>
    1550:	2e 81       	ldd	r18, Y+6	; 0x06
    1552:	3f 81       	ldd	r19, Y+7	; 0x07
    1554:	82 17       	cp	r24, r18
    1556:	93 07       	cpc	r25, r19
    1558:	88 f0       	brcs	.+34     	; 0x157c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    155a:	88 85       	ldd	r24, Y+8	; 0x08
    155c:	99 85       	ldd	r25, Y+9	; 0x09
    155e:	89 2b       	or	r24, r25
    1560:	69 f0       	breq	.+26     	; 0x157c <xStreamBufferSendFromISR+0x70>
    1562:	88 85       	ldd	r24, Y+8	; 0x08
    1564:	99 85       	ldd	r25, Y+9	; 0x09
    1566:	e1 2c       	mov	r14, r1
    1568:	f1 2c       	mov	r15, r1
    156a:	00 e0       	ldi	r16, 0x00	; 0
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	a9 01       	movw	r20, r18
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <xTaskGenericNotifyFromISR>
    1578:	19 86       	std	Y+9, r1	; 0x09
    157a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    157c:	c5 01       	movw	r24, r10
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	08 95       	ret

00001594 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1594:	4f 92       	push	r4
    1596:	5f 92       	push	r5
    1598:	6f 92       	push	r6
    159a:	7f 92       	push	r7
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ec 01       	movw	r28, r24
    15b6:	2b 01       	movw	r4, r22
    15b8:	3a 01       	movw	r6, r20
    15ba:	58 01       	movw	r10, r16
    15bc:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15be:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c0:	80 ff       	sbrs	r24, 0
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    15c4:	68 94       	set
    15c6:	88 24       	eor	r8, r8
    15c8:	81 f8       	bld	r8, 1
    15ca:	91 2c       	mov	r9, r1
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    15ce:	81 2c       	mov	r8, r1
    15d0:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15d2:	a1 14       	cp	r10, r1
    15d4:	b1 04       	cpc	r11, r1
    15d6:	c1 04       	cpc	r12, r1
    15d8:	d1 04       	cpc	r13, r1
    15da:	41 f1       	breq	.+80     	; 0x162c <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15e2:	ce 01       	movw	r24, r28
    15e4:	29 dd       	rcall	.-1454   	; 0x1038 <prvBytesInBuffer>
    15e6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    15e8:	88 16       	cp	r8, r24
    15ea:	99 06       	cpc	r9, r25
    15ec:	48 f0       	brcs	.+18     	; 0x1600 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    15f8:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskGetCurrentTaskHandle>
    15fc:	99 87       	std	Y+9, r25	; 0x09
    15fe:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1604:	8e 14       	cp	r8, r14
    1606:	9f 04       	cpc	r9, r15
    1608:	a0 f0       	brcs	.+40     	; 0x1632 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    160a:	e1 2c       	mov	r14, r1
    160c:	f1 2c       	mov	r15, r1
    160e:	00 e0       	ldi	r16, 0x00	; 0
    1610:	10 e0       	ldi	r17, 0x00	; 0
    1612:	98 01       	movw	r18, r16
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	ba 01       	movw	r22, r20
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1620:	19 86       	std	Y+9, r1	; 0x09
    1622:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1624:	ce 01       	movw	r24, r28
    1626:	08 dd       	rcall	.-1520   	; 0x1038 <prvBytesInBuffer>
    1628:	7c 01       	movw	r14, r24
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    162c:	ce 01       	movw	r24, r28
    162e:	04 dd       	rcall	.-1528   	; 0x1038 <prvBytesInBuffer>
    1630:	7c 01       	movw	r14, r24
    1632:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1634:	9f 04       	cpc	r9, r15
    1636:	e8 f4       	brcc	.+58     	; 0x1672 <xStreamBufferReceive+0xde>
    1638:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    163a:	97 01       	movw	r18, r14
    163c:	a3 01       	movw	r20, r6
    163e:	b2 01       	movw	r22, r4
    1640:	ce 01       	movw	r24, r28
    1642:	f8 dd       	rcall	.-1040   	; 0x1234 <prvReadMessageFromBuffer>
    1644:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1646:	89 2b       	or	r24, r25
    1648:	b1 f0       	breq	.+44     	; 0x1676 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    164a:	c2 d2       	rcall	.+1412   	; 0x1bd0 <vTaskSuspendAll>
    164c:	8a 85       	ldd	r24, Y+10	; 0x0a
    164e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1650:	89 2b       	or	r24, r25
    1652:	69 f0       	breq	.+26     	; 0x166e <xStreamBufferReceive+0xda>
    1654:	8a 85       	ldd	r24, Y+10	; 0x0a
    1656:	9b 85       	ldd	r25, Y+11	; 0x0b
    1658:	e1 2c       	mov	r14, r1
    165a:	f1 2c       	mov	r15, r1
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	a9 01       	movw	r20, r18
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 a5 14 	call	0x294a	; 0x294a <xTaskGenericNotify>
    166a:	1b 86       	std	Y+11, r1	; 0x0b
    166c:	1a 86       	std	Y+10, r1	; 0x0a
    166e:	f0 d3       	rcall	.+2016   	; 0x1e50 <xTaskResumeAll>
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <xStreamBufferReceive+0xe2>
    1672:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1674:	d1 2c       	mov	r13, r1
    1676:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	6f 90       	pop	r6
    1694:	5f 90       	pop	r5
    1696:	4f 90       	pop	r4
    1698:	08 95       	ret

0000169a <prvResetNextTaskUnblockTime>:
    169a:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxDelayedTaskList>
    169e:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxDelayedTaskList+0x1>
    16a2:	80 81       	ld	r24, Z
    16a4:	81 11       	cpse	r24, r1
    16a6:	0c c0       	rjmp	.+24     	; 0x16c0 <prvResetNextTaskUnblockTime+0x26>
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	dc 01       	movw	r26, r24
    16ae:	80 93 b3 14 	sts	0x14B3, r24	; 0x8014b3 <xNextTaskUnblockTime>
    16b2:	90 93 b4 14 	sts	0x14B4, r25	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    16b6:	a0 93 b5 14 	sts	0x14B5, r26	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    16ba:	b0 93 b6 14 	sts	0x14B6, r27	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    16be:	08 95       	ret
    16c0:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxDelayedTaskList>
    16c4:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxDelayedTaskList+0x1>
    16c8:	07 80       	ldd	r0, Z+7	; 0x07
    16ca:	f0 85       	ldd	r31, Z+8	; 0x08
    16cc:	e0 2d       	mov	r30, r0
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	a2 81       	ldd	r26, Z+2	; 0x02
    16d4:	b3 81       	ldd	r27, Z+3	; 0x03
    16d6:	80 93 b3 14 	sts	0x14B3, r24	; 0x8014b3 <xNextTaskUnblockTime>
    16da:	90 93 b4 14 	sts	0x14B4, r25	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    16de:	a0 93 b5 14 	sts	0x14B5, r26	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    16e2:	b0 93 b6 14 	sts	0x14B6, r27	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    16e6:	08 95       	ret

000016e8 <prvDeleteTCB>:
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
    16ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortFree>
    16f6:	ce 01       	movw	r24, r28
    16f8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortFree>
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <prvInitialiseNewTask>:
    1702:	4f 92       	push	r4
    1704:	5f 92       	push	r5
    1706:	6f 92       	push	r6
    1708:	7f 92       	push	r7
    170a:	8f 92       	push	r8
    170c:	9f 92       	push	r9
    170e:	af 92       	push	r10
    1710:	bf 92       	push	r11
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	2c 01       	movw	r4, r24
    1722:	5b 01       	movw	r10, r22
    1724:	4a 01       	movw	r8, r20
    1726:	39 01       	movw	r6, r18
    1728:	e6 01       	movw	r28, r12
    172a:	65 ea       	ldi	r22, 0xA5	; 165
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1732:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <memset>
    1736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1738:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	82 1a       	sub	r8, r18
    173e:	91 08       	sbc	r9, r1
    1740:	88 0e       	add	r8, r24
    1742:	99 1e       	adc	r9, r25
    1744:	a1 14       	cp	r10, r1
    1746:	b1 04       	cpc	r11, r1
    1748:	89 f4       	brne	.+34     	; 0x176c <prvInitialiseNewTask+0x6a>
    174a:	15 c0       	rjmp	.+42     	; 0x1776 <prvInitialiseNewTask+0x74>
    174c:	82 2f       	mov	r24, r18
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	f5 01       	movw	r30, r10
    1752:	e8 0f       	add	r30, r24
    1754:	f9 1f       	adc	r31, r25
    1756:	30 81       	ld	r19, Z
    1758:	de 01       	movw	r26, r28
    175a:	a8 0f       	add	r26, r24
    175c:	b9 1f       	adc	r27, r25
    175e:	5d 96       	adiw	r26, 0x1d	; 29
    1760:	3c 93       	st	X, r19
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	29 f0       	breq	.+10     	; 0x1772 <prvInitialiseNewTask+0x70>
    1768:	2f 5f       	subi	r18, 0xFF	; 255
    176a:	01 c0       	rjmp	.+2      	; 0x176e <prvInitialiseNewTask+0x6c>
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	20 31       	cpi	r18, 0x10	; 16
    1770:	68 f3       	brcs	.-38     	; 0x174c <prvInitialiseNewTask+0x4a>
    1772:	1c a6       	std	Y+44, r1	; 0x2c
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <prvInitialiseNewTask+0x76>
    1776:	1d 8e       	std	Y+29, r1	; 0x1d
    1778:	0a 30       	cpi	r16, 0x0A	; 10
    177a:	08 f0       	brcs	.+2      	; 0x177e <prvInitialiseNewTask+0x7c>
    177c:	09 e0       	ldi	r16, 0x09	; 9
    177e:	0a 8f       	std	Y+26, r16	; 0x1a
    1780:	0d a7       	std	Y+45, r16	; 0x2d
    1782:	1e a6       	std	Y+46, r1	; 0x2e
    1784:	ce 01       	movw	r24, r28
    1786:	02 96       	adiw	r24, 0x02	; 2
    1788:	0e 94 c1 03 	call	0x782	; 0x782 <vListInitialiseItem>
    178c:	ce 01       	movw	r24, r28
    178e:	0e 96       	adiw	r24, 0x0e	; 14
    1790:	0e 94 c1 03 	call	0x782	; 0x782 <vListInitialiseItem>
    1794:	db 87       	std	Y+11, r29	; 0x0b
    1796:	ca 87       	std	Y+10, r28	; 0x0a
    1798:	8a e0       	ldi	r24, 0x0A	; 10
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	80 1b       	sub	r24, r16
    17a2:	91 09       	sbc	r25, r1
    17a4:	a1 09       	sbc	r26, r1
    17a6:	b1 09       	sbc	r27, r1
    17a8:	8e 87       	std	Y+14, r24	; 0x0e
    17aa:	9f 87       	std	Y+15, r25	; 0x0f
    17ac:	a8 8b       	std	Y+16, r26	; 0x10
    17ae:	b9 8b       	std	Y+17, r27	; 0x11
    17b0:	df 8b       	std	Y+23, r29	; 0x17
    17b2:	ce 8b       	std	Y+22, r28	; 0x16
    17b4:	84 e0       	ldi	r24, 0x04	; 4
    17b6:	fe 01       	movw	r30, r28
    17b8:	bf 96       	adiw	r30, 0x2f	; 47
    17ba:	df 01       	movw	r26, r30
    17bc:	1d 92       	st	X+, r1
    17be:	8a 95       	dec	r24
    17c0:	e9 f7       	brne	.-6      	; 0x17bc <prvInitialiseNewTask+0xba>
    17c2:	1b aa       	std	Y+51, r1	; 0x33
    17c4:	a3 01       	movw	r20, r6
    17c6:	b2 01       	movw	r22, r4
    17c8:	c4 01       	movw	r24, r8
    17ca:	4f d8       	rcall	.-3938   	; 0x86a <pxPortInitialiseStack>
    17cc:	99 83       	std	Y+1, r25	; 0x01
    17ce:	88 83       	st	Y, r24
    17d0:	e1 14       	cp	r14, r1
    17d2:	f1 04       	cpc	r15, r1
    17d4:	19 f0       	breq	.+6      	; 0x17dc <prvInitialiseNewTask+0xda>
    17d6:	f7 01       	movw	r30, r14
    17d8:	d1 83       	std	Z+1, r29	; 0x01
    17da:	c0 83       	st	Z, r28
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	7f 90       	pop	r7
    17f4:	6f 90       	pop	r6
    17f6:	5f 90       	pop	r5
    17f8:	4f 90       	pop	r4
    17fa:	08 95       	ret

000017fc <prvInitialiseTaskLists>:
    17fc:	cf 93       	push	r28
    17fe:	c0 e0       	ldi	r28, 0x00	; 0
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <prvInitialiseTaskLists+0x18>
    1802:	2b e0       	ldi	r18, 0x0B	; 11
    1804:	c2 9f       	mul	r28, r18
    1806:	c0 01       	movw	r24, r0
    1808:	11 24       	eor	r1, r1
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	9a 4e       	sbci	r25, 0xEA	; 234
    180e:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    1812:	cf 5f       	subi	r28, 0xFF	; 255
    1814:	ca 30       	cpi	r28, 0x0A	; 10
    1816:	a8 f3       	brcs	.-22     	; 0x1802 <prvInitialiseTaskLists+0x6>
    1818:	86 ef       	ldi	r24, 0xF6	; 246
    181a:	94 e1       	ldi	r25, 0x14	; 20
    181c:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    1820:	8b ee       	ldi	r24, 0xEB	; 235
    1822:	94 e1       	ldi	r25, 0x14	; 20
    1824:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    1828:	8c ed       	ldi	r24, 0xDC	; 220
    182a:	94 e1       	ldi	r25, 0x14	; 20
    182c:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    1830:	81 ed       	ldi	r24, 0xD1	; 209
    1832:	94 e1       	ldi	r25, 0x14	; 20
    1834:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    1838:	85 ec       	ldi	r24, 0xC5	; 197
    183a:	94 e1       	ldi	r25, 0x14	; 20
    183c:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    1840:	86 ef       	ldi	r24, 0xF6	; 246
    1842:	94 e1       	ldi	r25, 0x14	; 20
    1844:	90 93 ea 14 	sts	0x14EA, r25	; 0x8014ea <pxDelayedTaskList+0x1>
    1848:	80 93 e9 14 	sts	0x14E9, r24	; 0x8014e9 <pxDelayedTaskList>
    184c:	8b ee       	ldi	r24, 0xEB	; 235
    184e:	94 e1       	ldi	r25, 0x14	; 20
    1850:	90 93 e8 14 	sts	0x14E8, r25	; 0x8014e8 <pxOverflowDelayedTaskList+0x1>
    1854:	80 93 e7 14 	sts	0x14E7, r24	; 0x8014e7 <pxOverflowDelayedTaskList>
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret

0000185c <prvAddNewTaskToReadyList>:
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	ec 01       	movw	r28, r24
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	0f 92       	push	r0
    1868:	80 91 c4 14 	lds	r24, 0x14C4	; 0x8014c4 <uxCurrentNumberOfTasks>
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	80 93 c4 14 	sts	0x14C4, r24	; 0x8014c4 <uxCurrentNumberOfTasks>
    1872:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    1876:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    187a:	89 2b       	or	r24, r25
    187c:	51 f4       	brne	.+20     	; 0x1892 <prvAddNewTaskToReadyList+0x36>
    187e:	d0 93 70 15 	sts	0x1570, r29	; 0x801570 <pxCurrentTCB+0x1>
    1882:	c0 93 6f 15 	sts	0x156F, r28	; 0x80156f <pxCurrentTCB>
    1886:	80 91 c4 14 	lds	r24, 0x14C4	; 0x8014c4 <uxCurrentNumberOfTasks>
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 f4       	brne	.+36     	; 0x18b2 <prvAddNewTaskToReadyList+0x56>
    188e:	b6 df       	rcall	.-148    	; 0x17fc <prvInitialiseTaskLists>
    1890:	10 c0       	rjmp	.+32     	; 0x18b2 <prvAddNewTaskToReadyList+0x56>
    1892:	80 91 be 14 	lds	r24, 0x14BE	; 0x8014be <xSchedulerRunning>
    1896:	81 11       	cpse	r24, r1
    1898:	0c c0       	rjmp	.+24     	; 0x18b2 <prvAddNewTaskToReadyList+0x56>
    189a:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    189e:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    18a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    18a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18a6:	89 17       	cp	r24, r25
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <prvAddNewTaskToReadyList+0x56>
    18aa:	d0 93 70 15 	sts	0x1570, r29	; 0x801570 <pxCurrentTCB+0x1>
    18ae:	c0 93 6f 15 	sts	0x156F, r28	; 0x80156f <pxCurrentTCB>
    18b2:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <uxTaskNumber>
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <uxTaskNumber>
    18bc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18be:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    18c2:	8e 17       	cp	r24, r30
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <prvAddNewTaskToReadyList+0x6e>
    18c6:	e0 93 bf 14 	sts	0x14BF, r30	; 0x8014bf <uxTopReadyPriority>
    18ca:	8b e0       	ldi	r24, 0x0B	; 11
    18cc:	8e 9f       	mul	r24, r30
    18ce:	f0 01       	movw	r30, r0
    18d0:	11 24       	eor	r1, r1
    18d2:	ef 5f       	subi	r30, 0xFF	; 255
    18d4:	fa 4e       	sbci	r31, 0xEA	; 234
    18d6:	01 80       	ldd	r0, Z+1	; 0x01
    18d8:	f2 81       	ldd	r31, Z+2	; 0x02
    18da:	e0 2d       	mov	r30, r0
    18dc:	ff 83       	std	Y+7, r31	; 0x07
    18de:	ee 83       	std	Y+6, r30	; 0x06
    18e0:	26 81       	ldd	r18, Z+6	; 0x06
    18e2:	37 81       	ldd	r19, Z+7	; 0x07
    18e4:	39 87       	std	Y+9, r19	; 0x09
    18e6:	28 87       	std	Y+8, r18	; 0x08
    18e8:	a6 81       	ldd	r26, Z+6	; 0x06
    18ea:	b7 81       	ldd	r27, Z+7	; 0x07
    18ec:	9e 01       	movw	r18, r28
    18ee:	2e 5f       	subi	r18, 0xFE	; 254
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	15 96       	adiw	r26, 0x05	; 5
    18f4:	3c 93       	st	X, r19
    18f6:	2e 93       	st	-X, r18
    18f8:	14 97       	sbiw	r26, 0x04	; 4
    18fa:	37 83       	std	Z+7, r19	; 0x07
    18fc:	26 83       	std	Z+6, r18	; 0x06
    18fe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1900:	8e 9f       	mul	r24, r30
    1902:	f0 01       	movw	r30, r0
    1904:	11 24       	eor	r1, r1
    1906:	ef 5f       	subi	r30, 0xFF	; 255
    1908:	fa 4e       	sbci	r31, 0xEA	; 234
    190a:	fd 87       	std	Y+13, r31	; 0x0d
    190c:	ec 87       	std	Y+12, r30	; 0x0c
    190e:	80 81       	ld	r24, Z
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	80 83       	st	Z, r24
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	80 91 be 14 	lds	r24, 0x14BE	; 0x8014be <xSchedulerRunning>
    191c:	88 23       	and	r24, r24
    191e:	51 f0       	breq	.+20     	; 0x1934 <prvAddNewTaskToReadyList+0xd8>
    1920:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    1924:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1928:	92 8d       	ldd	r25, Z+26	; 0x1a
    192a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    192c:	98 17       	cp	r25, r24
    192e:	10 f4       	brcc	.+4      	; 0x1934 <prvAddNewTaskToReadyList+0xd8>
    1930:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <prvCheckTasksWaitingTermination>:
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	1b c0       	rjmp	.+54     	; 0x1976 <prvCheckTasksWaitingTermination+0x3c>
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	0f 92       	push	r0
    1946:	e0 91 d8 14 	lds	r30, 0x14D8	; 0x8014d8 <xTasksWaitingTermination+0x7>
    194a:	f0 91 d9 14 	lds	r31, 0x14D9	; 0x8014d9 <xTasksWaitingTermination+0x8>
    194e:	c0 85       	ldd	r28, Z+8	; 0x08
    1950:	d1 85       	ldd	r29, Z+9	; 0x09
    1952:	ce 01       	movw	r24, r28
    1954:	02 96       	adiw	r24, 0x02	; 2
    1956:	0e 94 02 04 	call	0x804	; 0x804 <uxListRemove>
    195a:	80 91 c4 14 	lds	r24, 0x14C4	; 0x8014c4 <uxCurrentNumberOfTasks>
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	80 93 c4 14 	sts	0x14C4, r24	; 0x8014c4 <uxCurrentNumberOfTasks>
    1964:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <uxDeletedTasksWaitingCleanUp>
    1968:	81 50       	subi	r24, 0x01	; 1
    196a:	80 93 d0 14 	sts	0x14D0, r24	; 0x8014d0 <uxDeletedTasksWaitingCleanUp>
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	ce 01       	movw	r24, r28
    1974:	b9 de       	rcall	.-654    	; 0x16e8 <prvDeleteTCB>
    1976:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <uxDeletedTasksWaitingCleanUp>
    197a:	81 11       	cpse	r24, r1
    197c:	e1 cf       	rjmp	.-62     	; 0x1940 <prvCheckTasksWaitingTermination+0x6>
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <prvAddCurrentTaskToDelayedList>:
    1984:	8f 92       	push	r8
    1986:	9f 92       	push	r9
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	6b 01       	movw	r12, r22
    199a:	7c 01       	movw	r14, r24
    199c:	c4 2f       	mov	r28, r20
    199e:	80 90 c0 14 	lds	r8, 0x14C0	; 0x8014c0 <xTickCount>
    19a2:	90 90 c1 14 	lds	r9, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    19a6:	a0 90 c2 14 	lds	r10, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    19aa:	b0 90 c3 14 	lds	r11, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    19ae:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    19b2:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    19b6:	02 96       	adiw	r24, 0x02	; 2
    19b8:	0e 94 02 04 	call	0x804	; 0x804 <uxListRemove>
    19bc:	8f ef       	ldi	r24, 0xFF	; 255
    19be:	c8 16       	cp	r12, r24
    19c0:	d8 06       	cpc	r13, r24
    19c2:	e8 06       	cpc	r14, r24
    19c4:	f8 06       	cpc	r15, r24
    19c6:	b1 f5       	brne	.+108    	; 0x1a34 <prvAddCurrentTaskToDelayedList+0xb0>
    19c8:	cc 23       	and	r28, r28
    19ca:	a1 f1       	breq	.+104    	; 0x1a34 <prvAddCurrentTaskToDelayedList+0xb0>
    19cc:	e5 ec       	ldi	r30, 0xC5	; 197
    19ce:	f4 e1       	ldi	r31, 0x14	; 20
    19d0:	a1 81       	ldd	r26, Z+1	; 0x01
    19d2:	b2 81       	ldd	r27, Z+2	; 0x02
    19d4:	c0 91 6f 15 	lds	r28, 0x156F	; 0x80156f <pxCurrentTCB>
    19d8:	d0 91 70 15 	lds	r29, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    19dc:	bf 83       	std	Y+7, r27	; 0x07
    19de:	ae 83       	std	Y+6, r26	; 0x06
    19e0:	c0 91 6f 15 	lds	r28, 0x156F	; 0x80156f <pxCurrentTCB>
    19e4:	d0 91 70 15 	lds	r29, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    19e8:	16 96       	adiw	r26, 0x06	; 6
    19ea:	8d 91       	ld	r24, X+
    19ec:	9c 91       	ld	r25, X
    19ee:	17 97       	sbiw	r26, 0x07	; 7
    19f0:	99 87       	std	Y+9, r25	; 0x09
    19f2:	88 87       	std	Y+8, r24	; 0x08
    19f4:	16 96       	adiw	r26, 0x06	; 6
    19f6:	cd 91       	ld	r28, X+
    19f8:	dc 91       	ld	r29, X
    19fa:	17 97       	sbiw	r26, 0x07	; 7
    19fc:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    1a00:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1a04:	02 96       	adiw	r24, 0x02	; 2
    1a06:	9d 83       	std	Y+5, r25	; 0x05
    1a08:	8c 83       	std	Y+4, r24	; 0x04
    1a0a:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    1a0e:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1a12:	02 96       	adiw	r24, 0x02	; 2
    1a14:	17 96       	adiw	r26, 0x07	; 7
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	16 97       	sbiw	r26, 0x06	; 6
    1a1c:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
    1a20:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1a24:	1d 96       	adiw	r26, 0x0d	; 13
    1a26:	fc 93       	st	X, r31
    1a28:	ee 93       	st	-X, r30
    1a2a:	1c 97       	sbiw	r26, 0x0c	; 12
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	80 83       	st	Z, r24
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <prvAddCurrentTaskToDelayedList+0x12e>
    1a34:	c8 0c       	add	r12, r8
    1a36:	d9 1c       	adc	r13, r9
    1a38:	ea 1c       	adc	r14, r10
    1a3a:	fb 1c       	adc	r15, r11
    1a3c:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    1a40:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1a44:	c2 82       	std	Z+2, r12	; 0x02
    1a46:	d3 82       	std	Z+3, r13	; 0x03
    1a48:	e4 82       	std	Z+4, r14	; 0x04
    1a4a:	f5 82       	std	Z+5, r15	; 0x05
    1a4c:	c8 14       	cp	r12, r8
    1a4e:	d9 04       	cpc	r13, r9
    1a50:	ea 04       	cpc	r14, r10
    1a52:	fb 04       	cpc	r15, r11
    1a54:	68 f4       	brcc	.+26     	; 0x1a70 <prvAddCurrentTaskToDelayedList+0xec>
    1a56:	60 91 6f 15 	lds	r22, 0x156F	; 0x80156f <pxCurrentTCB>
    1a5a:	70 91 70 15 	lds	r23, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1a5e:	80 91 e7 14 	lds	r24, 0x14E7	; 0x8014e7 <pxOverflowDelayedTaskList>
    1a62:	90 91 e8 14 	lds	r25, 0x14E8	; 0x8014e8 <pxOverflowDelayedTaskList+0x1>
    1a66:	6e 5f       	subi	r22, 0xFE	; 254
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <vListInsert>
    1a6e:	21 c0       	rjmp	.+66     	; 0x1ab2 <prvAddCurrentTaskToDelayedList+0x12e>
    1a70:	60 91 6f 15 	lds	r22, 0x156F	; 0x80156f <pxCurrentTCB>
    1a74:	70 91 70 15 	lds	r23, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1a78:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxDelayedTaskList>
    1a7c:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxDelayedTaskList+0x1>
    1a80:	6e 5f       	subi	r22, 0xFE	; 254
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	0e 94 c5 03 	call	0x78a	; 0x78a <vListInsert>
    1a88:	80 91 b3 14 	lds	r24, 0x14B3	; 0x8014b3 <xNextTaskUnblockTime>
    1a8c:	90 91 b4 14 	lds	r25, 0x14B4	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    1a90:	a0 91 b5 14 	lds	r26, 0x14B5	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    1a94:	b0 91 b6 14 	lds	r27, 0x14B6	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    1a98:	c8 16       	cp	r12, r24
    1a9a:	d9 06       	cpc	r13, r25
    1a9c:	ea 06       	cpc	r14, r26
    1a9e:	fb 06       	cpc	r15, r27
    1aa0:	40 f4       	brcc	.+16     	; 0x1ab2 <prvAddCurrentTaskToDelayedList+0x12e>
    1aa2:	c0 92 b3 14 	sts	0x14B3, r12	; 0x8014b3 <xNextTaskUnblockTime>
    1aa6:	d0 92 b4 14 	sts	0x14B4, r13	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    1aaa:	e0 92 b5 14 	sts	0x14B5, r14	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    1aae:	f0 92 b6 14 	sts	0x14B6, r15	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	08 95       	ret

00001ac8 <xTaskCreate>:
    1ac8:	2f 92       	push	r2
    1aca:	3f 92       	push	r3
    1acc:	4f 92       	push	r4
    1ace:	5f 92       	push	r5
    1ad0:	6f 92       	push	r6
    1ad2:	7f 92       	push	r7
    1ad4:	8f 92       	push	r8
    1ad6:	9f 92       	push	r9
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	3c 01       	movw	r6, r24
    1aec:	1b 01       	movw	r2, r22
    1aee:	4a 01       	movw	r8, r20
    1af0:	29 01       	movw	r4, r18
    1af2:	ca 01       	movw	r24, r20
    1af4:	0e 94 ca 02 	call	0x594	; 0x594 <pvPortMalloc>
    1af8:	6c 01       	movw	r12, r24
    1afa:	89 2b       	or	r24, r25
    1afc:	71 f0       	breq	.+28     	; 0x1b1a <xTaskCreate+0x52>
    1afe:	84 e3       	ldi	r24, 0x34	; 52
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 ca 02 	call	0x594	; 0x594 <pvPortMalloc>
    1b06:	ec 01       	movw	r28, r24
    1b08:	89 2b       	or	r24, r25
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <xTaskCreate+0x4a>
    1b0c:	dc 8e       	std	Y+28, r13	; 0x1c
    1b0e:	cb 8e       	std	Y+27, r12	; 0x1b
    1b10:	06 c0       	rjmp	.+12     	; 0x1b1e <xTaskCreate+0x56>
    1b12:	c6 01       	movw	r24, r12
    1b14:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortFree>
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <xTaskCreate+0x56>
    1b1a:	c0 e0       	ldi	r28, 0x00	; 0
    1b1c:	d0 e0       	ldi	r29, 0x00	; 0
    1b1e:	20 97       	sbiw	r28, 0x00	; 0
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <xTaskCreate+0x72>
    1b22:	a1 2c       	mov	r10, r1
    1b24:	b1 2c       	mov	r11, r1
    1b26:	6e 01       	movw	r12, r28
    1b28:	92 01       	movw	r18, r4
    1b2a:	a4 01       	movw	r20, r8
    1b2c:	b1 01       	movw	r22, r2
    1b2e:	c3 01       	movw	r24, r6
    1b30:	e8 dd       	rcall	.-1072   	; 0x1702 <prvInitialiseNewTask>
    1b32:	ce 01       	movw	r24, r28
    1b34:	93 de       	rcall	.-730    	; 0x185c <prvAddNewTaskToReadyList>
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <xTaskCreate+0x74>
    1b3a:	8f ef       	ldi	r24, 0xFF	; 255
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	9f 90       	pop	r9
    1b50:	8f 90       	pop	r8
    1b52:	7f 90       	pop	r7
    1b54:	6f 90       	pop	r6
    1b56:	5f 90       	pop	r5
    1b58:	4f 90       	pop	r4
    1b5a:	3f 90       	pop	r3
    1b5c:	2f 90       	pop	r2
    1b5e:	08 95       	ret

00001b60 <vTaskStartScheduler>:
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	0f 2e       	mov	r0, r31
    1b68:	f1 eb       	ldi	r31, 0xB1	; 177
    1b6a:	ef 2e       	mov	r14, r31
    1b6c:	f4 e1       	ldi	r31, 0x14	; 20
    1b6e:	ff 2e       	mov	r15, r31
    1b70:	f0 2d       	mov	r31, r0
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 ec       	ldi	r20, 0xC0	; 192
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	62 e4       	ldi	r22, 0x42	; 66
    1b7e:	72 e0       	ldi	r23, 0x02	; 2
    1b80:	8d ec       	ldi	r24, 0xCD	; 205
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a1 df       	rcall	.-190    	; 0x1ac8 <xTaskCreate>
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	11 f4       	brne	.+4      	; 0x1b8e <vTaskStartScheduler+0x2e>
    1b8a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <xTimerCreateTimerTask>
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	c9 f4       	brne	.+50     	; 0x1bc4 <vTaskStartScheduler+0x64>
    1b92:	f8 94       	cli
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	9f ef       	ldi	r25, 0xFF	; 255
    1b98:	dc 01       	movw	r26, r24
    1b9a:	80 93 b3 14 	sts	0x14B3, r24	; 0x8014b3 <xNextTaskUnblockTime>
    1b9e:	90 93 b4 14 	sts	0x14B4, r25	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    1ba2:	a0 93 b5 14 	sts	0x14B5, r26	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    1ba6:	b0 93 b6 14 	sts	0x14B6, r27	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	80 93 be 14 	sts	0x14BE, r24	; 0x8014be <xSchedulerRunning>
    1bb0:	10 92 c0 14 	sts	0x14C0, r1	; 0x8014c0 <xTickCount>
    1bb4:	10 92 c1 14 	sts	0x14C1, r1	; 0x8014c1 <xTickCount+0x1>
    1bb8:	10 92 c2 14 	sts	0x14C2, r1	; 0x8014c2 <xTickCount+0x2>
    1bbc:	10 92 c3 14 	sts	0x14C3, r1	; 0x8014c3 <xTickCount+0x3>
    1bc0:	0e 94 4c 04 	call	0x898	; 0x898 <xPortStartScheduler>
    1bc4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	08 95       	ret

00001bd0 <vTaskSuspendAll>:
    1bd0:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 b0 14 	sts	0x14B0, r24	; 0x8014b0 <uxSchedulerSuspended>
    1bda:	08 95       	ret

00001bdc <xTaskGetTickCount>:
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	0f 92       	push	r0
    1be2:	60 91 c0 14 	lds	r22, 0x14C0	; 0x8014c0 <xTickCount>
    1be6:	70 91 c1 14 	lds	r23, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    1bea:	80 91 c2 14 	lds	r24, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    1bee:	90 91 c3 14 	lds	r25, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	08 95       	ret

00001bf8 <xTaskIncrementTick>:
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    1c08:	81 11       	cpse	r24, r1
    1c0a:	05 c1       	rjmp	.+522    	; 0x1e16 <xTaskIncrementTick+0x21e>
    1c0c:	c0 90 c0 14 	lds	r12, 0x14C0	; 0x8014c0 <xTickCount>
    1c10:	d0 90 c1 14 	lds	r13, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    1c14:	e0 90 c2 14 	lds	r14, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    1c18:	f0 90 c3 14 	lds	r15, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	c8 1a       	sub	r12, r24
    1c20:	d8 0a       	sbc	r13, r24
    1c22:	e8 0a       	sbc	r14, r24
    1c24:	f8 0a       	sbc	r15, r24
    1c26:	c0 92 c0 14 	sts	0x14C0, r12	; 0x8014c0 <xTickCount>
    1c2a:	d0 92 c1 14 	sts	0x14C1, r13	; 0x8014c1 <xTickCount+0x1>
    1c2e:	e0 92 c2 14 	sts	0x14C2, r14	; 0x8014c2 <xTickCount+0x2>
    1c32:	f0 92 c3 14 	sts	0x14C3, r15	; 0x8014c3 <xTickCount+0x3>
    1c36:	c1 14       	cp	r12, r1
    1c38:	d1 04       	cpc	r13, r1
    1c3a:	e1 04       	cpc	r14, r1
    1c3c:	f1 04       	cpc	r15, r1
    1c3e:	b1 f4       	brne	.+44     	; 0x1c6c <xTaskIncrementTick+0x74>
    1c40:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxDelayedTaskList>
    1c44:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxDelayedTaskList+0x1>
    1c48:	20 91 e7 14 	lds	r18, 0x14E7	; 0x8014e7 <pxOverflowDelayedTaskList>
    1c4c:	30 91 e8 14 	lds	r19, 0x14E8	; 0x8014e8 <pxOverflowDelayedTaskList+0x1>
    1c50:	30 93 ea 14 	sts	0x14EA, r19	; 0x8014ea <pxDelayedTaskList+0x1>
    1c54:	20 93 e9 14 	sts	0x14E9, r18	; 0x8014e9 <pxDelayedTaskList>
    1c58:	90 93 e8 14 	sts	0x14E8, r25	; 0x8014e8 <pxOverflowDelayedTaskList+0x1>
    1c5c:	80 93 e7 14 	sts	0x14E7, r24	; 0x8014e7 <pxOverflowDelayedTaskList>
    1c60:	80 91 b8 14 	lds	r24, 0x14B8	; 0x8014b8 <xNumOfOverflows>
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	80 93 b8 14 	sts	0x14B8, r24	; 0x8014b8 <xNumOfOverflows>
    1c6a:	17 dd       	rcall	.-1490   	; 0x169a <prvResetNextTaskUnblockTime>
    1c6c:	80 91 b3 14 	lds	r24, 0x14B3	; 0x8014b3 <xNextTaskUnblockTime>
    1c70:	90 91 b4 14 	lds	r25, 0x14B4	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    1c74:	a0 91 b5 14 	lds	r26, 0x14B5	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    1c78:	b0 91 b6 14 	lds	r27, 0x14B6	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    1c7c:	c8 16       	cp	r12, r24
    1c7e:	d9 06       	cpc	r13, r25
    1c80:	ea 06       	cpc	r14, r26
    1c82:	fb 06       	cpc	r15, r27
    1c84:	20 f4       	brcc	.+8      	; 0x1c8e <xTaskIncrementTick+0x96>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	b2 c0       	rjmp	.+356    	; 0x1dee <xTaskIncrementTick+0x1f6>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <xTaskIncrementTick+0x98>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxDelayedTaskList>
    1c94:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxDelayedTaskList+0x1>
    1c98:	90 81       	ld	r25, Z
    1c9a:	91 11       	cpse	r25, r1
    1c9c:	0c c0       	rjmp	.+24     	; 0x1cb6 <xTaskIncrementTick+0xbe>
    1c9e:	4f ef       	ldi	r20, 0xFF	; 255
    1ca0:	5f ef       	ldi	r21, 0xFF	; 255
    1ca2:	ba 01       	movw	r22, r20
    1ca4:	40 93 b3 14 	sts	0x14B3, r20	; 0x8014b3 <xNextTaskUnblockTime>
    1ca8:	50 93 b4 14 	sts	0x14B4, r21	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    1cac:	60 93 b5 14 	sts	0x14B5, r22	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    1cb0:	70 93 b6 14 	sts	0x14B6, r23	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    1cb4:	9c c0       	rjmp	.+312    	; 0x1dee <xTaskIncrementTick+0x1f6>
    1cb6:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxDelayedTaskList>
    1cba:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxDelayedTaskList+0x1>
    1cbe:	07 80       	ldd	r0, Z+7	; 0x07
    1cc0:	f0 85       	ldd	r31, Z+8	; 0x08
    1cc2:	e0 2d       	mov	r30, r0
    1cc4:	00 84       	ldd	r0, Z+8	; 0x08
    1cc6:	f1 85       	ldd	r31, Z+9	; 0x09
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	42 81       	ldd	r20, Z+2	; 0x02
    1ccc:	53 81       	ldd	r21, Z+3	; 0x03
    1cce:	64 81       	ldd	r22, Z+4	; 0x04
    1cd0:	75 81       	ldd	r23, Z+5	; 0x05
    1cd2:	c4 16       	cp	r12, r20
    1cd4:	d5 06       	cpc	r13, r21
    1cd6:	e6 06       	cpc	r14, r22
    1cd8:	f7 06       	cpc	r15, r23
    1cda:	48 f4       	brcc	.+18     	; 0x1cee <xTaskIncrementTick+0xf6>
    1cdc:	40 93 b3 14 	sts	0x14B3, r20	; 0x8014b3 <xNextTaskUnblockTime>
    1ce0:	50 93 b4 14 	sts	0x14B4, r21	; 0x8014b4 <xNextTaskUnblockTime+0x1>
    1ce4:	60 93 b5 14 	sts	0x14B5, r22	; 0x8014b5 <xNextTaskUnblockTime+0x2>
    1ce8:	70 93 b6 14 	sts	0x14B6, r23	; 0x8014b6 <xNextTaskUnblockTime+0x3>
    1cec:	80 c0       	rjmp	.+256    	; 0x1dee <xTaskIncrementTick+0x1f6>
    1cee:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cf0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cf2:	c6 81       	ldd	r28, Z+6	; 0x06
    1cf4:	d7 81       	ldd	r29, Z+7	; 0x07
    1cf6:	20 85       	ldd	r18, Z+8	; 0x08
    1cf8:	31 85       	ldd	r19, Z+9	; 0x09
    1cfa:	3f 83       	std	Y+7, r19	; 0x07
    1cfc:	2e 83       	std	Y+6, r18	; 0x06
    1cfe:	c0 85       	ldd	r28, Z+8	; 0x08
    1d00:	d1 85       	ldd	r29, Z+9	; 0x09
    1d02:	26 81       	ldd	r18, Z+6	; 0x06
    1d04:	37 81       	ldd	r19, Z+7	; 0x07
    1d06:	3d 83       	std	Y+5, r19	; 0x05
    1d08:	2c 83       	std	Y+4, r18	; 0x04
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	4d 91       	ld	r20, X+
    1d0e:	5c 91       	ld	r21, X
    1d10:	12 97       	sbiw	r26, 0x02	; 2
    1d12:	9f 01       	movw	r18, r30
    1d14:	2e 5f       	subi	r18, 0xFE	; 254
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	42 17       	cp	r20, r18
    1d1a:	53 07       	cpc	r21, r19
    1d1c:	31 f4       	brne	.+12     	; 0x1d2a <xTaskIncrementTick+0x132>
    1d1e:	40 85       	ldd	r20, Z+8	; 0x08
    1d20:	51 85       	ldd	r21, Z+9	; 0x09
    1d22:	12 96       	adiw	r26, 0x02	; 2
    1d24:	5c 93       	st	X, r21
    1d26:	4e 93       	st	-X, r20
    1d28:	11 97       	sbiw	r26, 0x01	; 1
    1d2a:	15 86       	std	Z+13, r1	; 0x0d
    1d2c:	14 86       	std	Z+12, r1	; 0x0c
    1d2e:	9c 91       	ld	r25, X
    1d30:	91 50       	subi	r25, 0x01	; 1
    1d32:	9c 93       	st	X, r25
    1d34:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d36:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d38:	10 97       	sbiw	r26, 0x00	; 0
    1d3a:	09 f1       	breq	.+66     	; 0x1d7e <xTaskIncrementTick+0x186>
    1d3c:	c2 89       	ldd	r28, Z+18	; 0x12
    1d3e:	d3 89       	ldd	r29, Z+19	; 0x13
    1d40:	44 89       	ldd	r20, Z+20	; 0x14
    1d42:	55 89       	ldd	r21, Z+21	; 0x15
    1d44:	5f 83       	std	Y+7, r21	; 0x07
    1d46:	4e 83       	std	Y+6, r20	; 0x06
    1d48:	c4 89       	ldd	r28, Z+20	; 0x14
    1d4a:	d5 89       	ldd	r29, Z+21	; 0x15
    1d4c:	42 89       	ldd	r20, Z+18	; 0x12
    1d4e:	53 89       	ldd	r21, Z+19	; 0x13
    1d50:	5d 83       	std	Y+5, r21	; 0x05
    1d52:	4c 83       	std	Y+4, r20	; 0x04
    1d54:	11 96       	adiw	r26, 0x01	; 1
    1d56:	6d 91       	ld	r22, X+
    1d58:	7c 91       	ld	r23, X
    1d5a:	12 97       	sbiw	r26, 0x02	; 2
    1d5c:	af 01       	movw	r20, r30
    1d5e:	42 5f       	subi	r20, 0xF2	; 242
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	64 17       	cp	r22, r20
    1d64:	75 07       	cpc	r23, r21
    1d66:	31 f4       	brne	.+12     	; 0x1d74 <xTaskIncrementTick+0x17c>
    1d68:	44 89       	ldd	r20, Z+20	; 0x14
    1d6a:	55 89       	ldd	r21, Z+21	; 0x15
    1d6c:	12 96       	adiw	r26, 0x02	; 2
    1d6e:	5c 93       	st	X, r21
    1d70:	4e 93       	st	-X, r20
    1d72:	11 97       	sbiw	r26, 0x01	; 1
    1d74:	11 8e       	std	Z+25, r1	; 0x19
    1d76:	10 8e       	std	Z+24, r1	; 0x18
    1d78:	9c 91       	ld	r25, X
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	9c 93       	st	X, r25
    1d7e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d80:	90 91 bf 14 	lds	r25, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    1d84:	9a 17       	cp	r25, r26
    1d86:	10 f4       	brcc	.+4      	; 0x1d8c <xTaskIncrementTick+0x194>
    1d88:	a0 93 bf 14 	sts	0x14BF, r26	; 0x8014bf <uxTopReadyPriority>
    1d8c:	9b e0       	ldi	r25, 0x0B	; 11
    1d8e:	9a 9f       	mul	r25, r26
    1d90:	d0 01       	movw	r26, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	af 5f       	subi	r26, 0xFF	; 255
    1d96:	ba 4e       	sbci	r27, 0xEA	; 234
    1d98:	11 96       	adiw	r26, 0x01	; 1
    1d9a:	0d 90       	ld	r0, X+
    1d9c:	bc 91       	ld	r27, X
    1d9e:	a0 2d       	mov	r26, r0
    1da0:	b7 83       	std	Z+7, r27	; 0x07
    1da2:	a6 83       	std	Z+6, r26	; 0x06
    1da4:	16 96       	adiw	r26, 0x06	; 6
    1da6:	4d 91       	ld	r20, X+
    1da8:	5c 91       	ld	r21, X
    1daa:	17 97       	sbiw	r26, 0x07	; 7
    1dac:	51 87       	std	Z+9, r21	; 0x09
    1dae:	40 87       	std	Z+8, r20	; 0x08
    1db0:	16 96       	adiw	r26, 0x06	; 6
    1db2:	cd 91       	ld	r28, X+
    1db4:	dc 91       	ld	r29, X
    1db6:	17 97       	sbiw	r26, 0x07	; 7
    1db8:	3d 83       	std	Y+5, r19	; 0x05
    1dba:	2c 83       	std	Y+4, r18	; 0x04
    1dbc:	17 96       	adiw	r26, 0x07	; 7
    1dbe:	3c 93       	st	X, r19
    1dc0:	2e 93       	st	-X, r18
    1dc2:	16 97       	sbiw	r26, 0x06	; 6
    1dc4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dc6:	9a 9f       	mul	r25, r26
    1dc8:	d0 01       	movw	r26, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	af 5f       	subi	r26, 0xFF	; 255
    1dce:	ba 4e       	sbci	r27, 0xEA	; 234
    1dd0:	b5 87       	std	Z+13, r27	; 0x0d
    1dd2:	a4 87       	std	Z+12, r26	; 0x0c
    1dd4:	9c 91       	ld	r25, X
    1dd6:	9f 5f       	subi	r25, 0xFF	; 255
    1dd8:	9c 93       	st	X, r25
    1dda:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ddc:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    1de0:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1de4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1de6:	29 17       	cp	r18, r25
    1de8:	08 f0       	brcs	.+2      	; 0x1dec <xTaskIncrementTick+0x1f4>
    1dea:	4f cf       	rjmp	.-354    	; 0x1c8a <xTaskIncrementTick+0x92>
    1dec:	51 cf       	rjmp	.-350    	; 0x1c90 <xTaskIncrementTick+0x98>
    1dee:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    1df2:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1df6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1df8:	9b e0       	ldi	r25, 0x0B	; 11
    1dfa:	e9 9f       	mul	r30, r25
    1dfc:	f0 01       	movw	r30, r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	ef 5f       	subi	r30, 0xFF	; 255
    1e02:	fa 4e       	sbci	r31, 0xEA	; 234
    1e04:	90 81       	ld	r25, Z
    1e06:	92 30       	cpi	r25, 0x02	; 2
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <xTaskIncrementTick+0x214>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 91 b9 14 	lds	r25, 0x14B9	; 0x8014b9 <xYieldPending>
    1e10:	91 11       	cpse	r25, r1
    1e12:	16 c0       	rjmp	.+44     	; 0x1e40 <xTaskIncrementTick+0x248>
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <xTaskIncrementTick+0x24a>
    1e16:	80 91 ba 14 	lds	r24, 0x14BA	; 0x8014ba <xPendedTicks>
    1e1a:	90 91 bb 14 	lds	r25, 0x14BB	; 0x8014bb <xPendedTicks+0x1>
    1e1e:	a0 91 bc 14 	lds	r26, 0x14BC	; 0x8014bc <xPendedTicks+0x2>
    1e22:	b0 91 bd 14 	lds	r27, 0x14BD	; 0x8014bd <xPendedTicks+0x3>
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	a1 1d       	adc	r26, r1
    1e2a:	b1 1d       	adc	r27, r1
    1e2c:	80 93 ba 14 	sts	0x14BA, r24	; 0x8014ba <xPendedTicks>
    1e30:	90 93 bb 14 	sts	0x14BB, r25	; 0x8014bb <xPendedTicks+0x1>
    1e34:	a0 93 bc 14 	sts	0x14BC, r26	; 0x8014bc <xPendedTicks+0x2>
    1e38:	b0 93 bd 14 	sts	0x14BD, r27	; 0x8014bd <xPendedTicks+0x3>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <xTaskIncrementTick+0x24a>
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	08 95       	ret

00001e50 <xTaskResumeAll>:
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	0f 92       	push	r0
    1e62:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    1e66:	81 50       	subi	r24, 0x01	; 1
    1e68:	80 93 b0 14 	sts	0x14B0, r24	; 0x8014b0 <uxSchedulerSuspended>
    1e6c:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    1e70:	81 11       	cpse	r24, r1
    1e72:	be c0       	rjmp	.+380    	; 0x1ff0 <xTaskResumeAll+0x1a0>
    1e74:	80 91 c4 14 	lds	r24, 0x14C4	; 0x8014c4 <uxCurrentNumberOfTasks>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	88 c0       	rjmp	.+272    	; 0x1f8c <xTaskResumeAll+0x13c>
    1e7c:	bc c0       	rjmp	.+376    	; 0x1ff6 <xTaskResumeAll+0x1a6>
    1e7e:	e0 91 e3 14 	lds	r30, 0x14E3	; 0x8014e3 <xPendingReadyList+0x7>
    1e82:	f0 91 e4 14 	lds	r31, 0x14E4	; 0x8014e4 <xPendingReadyList+0x8>
    1e86:	00 84       	ldd	r0, Z+8	; 0x08
    1e88:	f1 85       	ldd	r31, Z+9	; 0x09
    1e8a:	e0 2d       	mov	r30, r0
    1e8c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e8e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e90:	c2 89       	ldd	r28, Z+18	; 0x12
    1e92:	d3 89       	ldd	r29, Z+19	; 0x13
    1e94:	84 89       	ldd	r24, Z+20	; 0x14
    1e96:	95 89       	ldd	r25, Z+21	; 0x15
    1e98:	9f 83       	std	Y+7, r25	; 0x07
    1e9a:	8e 83       	std	Y+6, r24	; 0x06
    1e9c:	c4 89       	ldd	r28, Z+20	; 0x14
    1e9e:	d5 89       	ldd	r29, Z+21	; 0x15
    1ea0:	82 89       	ldd	r24, Z+18	; 0x12
    1ea2:	93 89       	ldd	r25, Z+19	; 0x13
    1ea4:	9d 83       	std	Y+5, r25	; 0x05
    1ea6:	8c 83       	std	Y+4, r24	; 0x04
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	2d 91       	ld	r18, X+
    1eac:	3c 91       	ld	r19, X
    1eae:	12 97       	sbiw	r26, 0x02	; 2
    1eb0:	cf 01       	movw	r24, r30
    1eb2:	0e 96       	adiw	r24, 0x0e	; 14
    1eb4:	28 17       	cp	r18, r24
    1eb6:	39 07       	cpc	r19, r25
    1eb8:	31 f4       	brne	.+12     	; 0x1ec6 <xTaskResumeAll+0x76>
    1eba:	84 89       	ldd	r24, Z+20	; 0x14
    1ebc:	95 89       	ldd	r25, Z+21	; 0x15
    1ebe:	12 96       	adiw	r26, 0x02	; 2
    1ec0:	9c 93       	st	X, r25
    1ec2:	8e 93       	st	-X, r24
    1ec4:	11 97       	sbiw	r26, 0x01	; 1
    1ec6:	11 8e       	std	Z+25, r1	; 0x19
    1ec8:	10 8e       	std	Z+24, r1	; 0x18
    1eca:	8c 91       	ld	r24, X
    1ecc:	81 50       	subi	r24, 0x01	; 1
    1ece:	8c 93       	st	X, r24
    1ed0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ed2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ed4:	c6 81       	ldd	r28, Z+6	; 0x06
    1ed6:	d7 81       	ldd	r29, Z+7	; 0x07
    1ed8:	80 85       	ldd	r24, Z+8	; 0x08
    1eda:	91 85       	ldd	r25, Z+9	; 0x09
    1edc:	9f 83       	std	Y+7, r25	; 0x07
    1ede:	8e 83       	std	Y+6, r24	; 0x06
    1ee0:	c0 85       	ldd	r28, Z+8	; 0x08
    1ee2:	d1 85       	ldd	r29, Z+9	; 0x09
    1ee4:	86 81       	ldd	r24, Z+6	; 0x06
    1ee6:	97 81       	ldd	r25, Z+7	; 0x07
    1ee8:	9d 83       	std	Y+5, r25	; 0x05
    1eea:	8c 83       	std	Y+4, r24	; 0x04
    1eec:	11 96       	adiw	r26, 0x01	; 1
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	12 97       	sbiw	r26, 0x02	; 2
    1ef4:	9f 01       	movw	r18, r30
    1ef6:	2e 5f       	subi	r18, 0xFE	; 254
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	82 17       	cp	r24, r18
    1efc:	93 07       	cpc	r25, r19
    1efe:	31 f4       	brne	.+12     	; 0x1f0c <xTaskResumeAll+0xbc>
    1f00:	80 85       	ldd	r24, Z+8	; 0x08
    1f02:	91 85       	ldd	r25, Z+9	; 0x09
    1f04:	12 96       	adiw	r26, 0x02	; 2
    1f06:	9c 93       	st	X, r25
    1f08:	8e 93       	st	-X, r24
    1f0a:	11 97       	sbiw	r26, 0x01	; 1
    1f0c:	15 86       	std	Z+13, r1	; 0x0d
    1f0e:	14 86       	std	Z+12, r1	; 0x0c
    1f10:	8c 91       	ld	r24, X
    1f12:	81 50       	subi	r24, 0x01	; 1
    1f14:	8c 93       	st	X, r24
    1f16:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f18:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    1f1c:	8a 17       	cp	r24, r26
    1f1e:	10 f4       	brcc	.+4      	; 0x1f24 <xTaskResumeAll+0xd4>
    1f20:	a0 93 bf 14 	sts	0x14BF, r26	; 0x8014bf <uxTopReadyPriority>
    1f24:	8b e0       	ldi	r24, 0x0B	; 11
    1f26:	8a 9f       	mul	r24, r26
    1f28:	d0 01       	movw	r26, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	af 5f       	subi	r26, 0xFF	; 255
    1f2e:	ba 4e       	sbci	r27, 0xEA	; 234
    1f30:	11 96       	adiw	r26, 0x01	; 1
    1f32:	0d 90       	ld	r0, X+
    1f34:	bc 91       	ld	r27, X
    1f36:	a0 2d       	mov	r26, r0
    1f38:	b7 83       	std	Z+7, r27	; 0x07
    1f3a:	a6 83       	std	Z+6, r26	; 0x06
    1f3c:	16 96       	adiw	r26, 0x06	; 6
    1f3e:	4d 91       	ld	r20, X+
    1f40:	5c 91       	ld	r21, X
    1f42:	17 97       	sbiw	r26, 0x07	; 7
    1f44:	51 87       	std	Z+9, r21	; 0x09
    1f46:	40 87       	std	Z+8, r20	; 0x08
    1f48:	16 96       	adiw	r26, 0x06	; 6
    1f4a:	cd 91       	ld	r28, X+
    1f4c:	dc 91       	ld	r29, X
    1f4e:	17 97       	sbiw	r26, 0x07	; 7
    1f50:	3d 83       	std	Y+5, r19	; 0x05
    1f52:	2c 83       	std	Y+4, r18	; 0x04
    1f54:	17 96       	adiw	r26, 0x07	; 7
    1f56:	3c 93       	st	X, r19
    1f58:	2e 93       	st	-X, r18
    1f5a:	16 97       	sbiw	r26, 0x06	; 6
    1f5c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f5e:	8a 9f       	mul	r24, r26
    1f60:	d0 01       	movw	r26, r0
    1f62:	11 24       	eor	r1, r1
    1f64:	af 5f       	subi	r26, 0xFF	; 255
    1f66:	ba 4e       	sbci	r27, 0xEA	; 234
    1f68:	b5 87       	std	Z+13, r27	; 0x0d
    1f6a:	a4 87       	std	Z+12, r26	; 0x0c
    1f6c:	8c 91       	ld	r24, X
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
    1f70:	8c 93       	st	X, r24
    1f72:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f74:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
    1f78:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    1f7c:	5a 96       	adiw	r26, 0x1a	; 26
    1f7e:	8c 91       	ld	r24, X
    1f80:	98 17       	cp	r25, r24
    1f82:	30 f0       	brcs	.+12     	; 0x1f90 <xTaskResumeAll+0x140>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <xYieldPending>
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <xTaskResumeAll+0x140>
    1f8c:	e0 e0       	ldi	r30, 0x00	; 0
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <xPendingReadyList>
    1f94:	81 11       	cpse	r24, r1
    1f96:	73 cf       	rjmp	.-282    	; 0x1e7e <xTaskResumeAll+0x2e>
    1f98:	ef 2b       	or	r30, r31
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <xTaskResumeAll+0x14e>
    1f9c:	7e db       	rcall	.-2308   	; 0x169a <prvResetNextTaskUnblockTime>
    1f9e:	c0 90 ba 14 	lds	r12, 0x14BA	; 0x8014ba <xPendedTicks>
    1fa2:	d0 90 bb 14 	lds	r13, 0x14BB	; 0x8014bb <xPendedTicks+0x1>
    1fa6:	e0 90 bc 14 	lds	r14, 0x14BC	; 0x8014bc <xPendedTicks+0x2>
    1faa:	f0 90 bd 14 	lds	r15, 0x14BD	; 0x8014bd <xPendedTicks+0x3>
    1fae:	c1 14       	cp	r12, r1
    1fb0:	d1 04       	cpc	r13, r1
    1fb2:	e1 04       	cpc	r14, r1
    1fb4:	f1 04       	cpc	r15, r1
    1fb6:	a1 f0       	breq	.+40     	; 0x1fe0 <xTaskResumeAll+0x190>
    1fb8:	1f de       	rcall	.-962    	; 0x1bf8 <xTaskIncrementTick>
    1fba:	88 23       	and	r24, r24
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <xTaskResumeAll+0x174>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <xYieldPending>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	c8 1a       	sub	r12, r24
    1fc8:	d1 08       	sbc	r13, r1
    1fca:	e1 08       	sbc	r14, r1
    1fcc:	f1 08       	sbc	r15, r1
    1fce:	a1 f7       	brne	.-24     	; 0x1fb8 <xTaskResumeAll+0x168>
    1fd0:	10 92 ba 14 	sts	0x14BA, r1	; 0x8014ba <xPendedTicks>
    1fd4:	10 92 bb 14 	sts	0x14BB, r1	; 0x8014bb <xPendedTicks+0x1>
    1fd8:	10 92 bc 14 	sts	0x14BC, r1	; 0x8014bc <xPendedTicks+0x2>
    1fdc:	10 92 bd 14 	sts	0x14BD, r1	; 0x8014bd <xPendedTicks+0x3>
    1fe0:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <xYieldPending>
    1fe4:	88 23       	and	r24, r24
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <xTaskResumeAll+0x1a4>
    1fe8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <xTaskResumeAll+0x1a6>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <xTaskResumeAll+0x1a6>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	08 95       	ret

00002008 <xTaskDelayUntil>:
    2008:	8f 92       	push	r8
    200a:	9f 92       	push	r9
    200c:	af 92       	push	r10
    200e:	bf 92       	push	r11
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	ec 01       	movw	r28, r24
    2020:	6a 01       	movw	r12, r20
    2022:	7b 01       	movw	r14, r22
    2024:	d5 dd       	rcall	.-1110   	; 0x1bd0 <vTaskSuspendAll>
    2026:	80 90 c0 14 	lds	r8, 0x14C0	; 0x8014c0 <xTickCount>
    202a:	90 90 c1 14 	lds	r9, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    202e:	a0 90 c2 14 	lds	r10, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    2032:	b0 90 c3 14 	lds	r11, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    2036:	88 81       	ld	r24, Y
    2038:	99 81       	ldd	r25, Y+1	; 0x01
    203a:	aa 81       	ldd	r26, Y+2	; 0x02
    203c:	bb 81       	ldd	r27, Y+3	; 0x03
    203e:	ac 01       	movw	r20, r24
    2040:	bd 01       	movw	r22, r26
    2042:	4c 0d       	add	r20, r12
    2044:	5d 1d       	adc	r21, r13
    2046:	6e 1d       	adc	r22, r14
    2048:	7f 1d       	adc	r23, r15
    204a:	88 16       	cp	r8, r24
    204c:	99 06       	cpc	r9, r25
    204e:	aa 06       	cpc	r10, r26
    2050:	bb 06       	cpc	r11, r27
    2052:	60 f4       	brcc	.+24     	; 0x206c <xTaskDelayUntil+0x64>
    2054:	48 17       	cp	r20, r24
    2056:	59 07       	cpc	r21, r25
    2058:	6a 07       	cpc	r22, r26
    205a:	7b 07       	cpc	r23, r27
    205c:	98 f4       	brcc	.+38     	; 0x2084 <xTaskDelayUntil+0x7c>
    205e:	84 16       	cp	r8, r20
    2060:	95 06       	cpc	r9, r21
    2062:	a6 06       	cpc	r10, r22
    2064:	b7 06       	cpc	r11, r23
    2066:	80 f0       	brcs	.+32     	; 0x2088 <xTaskDelayUntil+0x80>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	13 c0       	rjmp	.+38     	; 0x2092 <xTaskDelayUntil+0x8a>
    206c:	48 17       	cp	r20, r24
    206e:	59 07       	cpc	r21, r25
    2070:	6a 07       	cpc	r22, r26
    2072:	7b 07       	cpc	r23, r27
    2074:	58 f0       	brcs	.+22     	; 0x208c <xTaskDelayUntil+0x84>
    2076:	84 16       	cp	r8, r20
    2078:	95 06       	cpc	r9, r21
    207a:	a6 06       	cpc	r10, r22
    207c:	b7 06       	cpc	r11, r23
    207e:	40 f0       	brcs	.+16     	; 0x2090 <xTaskDelayUntil+0x88>
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	07 c0       	rjmp	.+14     	; 0x2092 <xTaskDelayUntil+0x8a>
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <xTaskDelayUntil+0x8a>
    2088:	11 e0       	ldi	r17, 0x01	; 1
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <xTaskDelayUntil+0x8a>
    208c:	11 e0       	ldi	r17, 0x01	; 1
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <xTaskDelayUntil+0x8a>
    2090:	11 e0       	ldi	r17, 0x01	; 1
    2092:	48 83       	st	Y, r20
    2094:	59 83       	std	Y+1, r21	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
    2098:	7b 83       	std	Y+3, r23	; 0x03
    209a:	11 23       	and	r17, r17
    209c:	41 f0       	breq	.+16     	; 0x20ae <xTaskDelayUntil+0xa6>
    209e:	cb 01       	movw	r24, r22
    20a0:	ba 01       	movw	r22, r20
    20a2:	68 19       	sub	r22, r8
    20a4:	79 09       	sbc	r23, r9
    20a6:	8a 09       	sbc	r24, r10
    20a8:	9b 09       	sbc	r25, r11
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	6b dc       	rcall	.-1834   	; 0x1984 <prvAddCurrentTaskToDelayedList>
    20ae:	d0 de       	rcall	.-608    	; 0x1e50 <xTaskResumeAll>
    20b0:	81 11       	cpse	r24, r1
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <xTaskDelayUntil+0xb0>
    20b4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    20b8:	81 2f       	mov	r24, r17
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	08 95       	ret

000020d2 <vTaskDelay>:
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	6b 01       	movw	r12, r22
    20dc:	7c 01       	movw	r14, r24
    20de:	67 2b       	or	r22, r23
    20e0:	68 2b       	or	r22, r24
    20e2:	69 2b       	or	r22, r25
    20e4:	39 f0       	breq	.+14     	; 0x20f4 <vTaskDelay+0x22>
    20e6:	74 dd       	rcall	.-1304   	; 0x1bd0 <vTaskSuspendAll>
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	c7 01       	movw	r24, r14
    20ec:	b6 01       	movw	r22, r12
    20ee:	4a dc       	rcall	.-1900   	; 0x1984 <prvAddCurrentTaskToDelayedList>
    20f0:	af de       	rcall	.-674    	; 0x1e50 <xTaskResumeAll>
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <vTaskDelay+0x24>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	81 11       	cpse	r24, r1
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vTaskDelay+0x2c>
    20fa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	08 95       	ret

00002108 <vTaskSwitchContext>:
    2108:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    210c:	88 23       	and	r24, r24
    210e:	21 f0       	breq	.+8      	; 0x2118 <vTaskSwitchContext+0x10>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <xYieldPending>
    2116:	08 95       	ret
    2118:	10 92 b9 14 	sts	0x14B9, r1	; 0x8014b9 <xYieldPending>
    211c:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    2120:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2124:	20 81       	ld	r18, Z
    2126:	31 81       	ldd	r19, Z+1	; 0x01
    2128:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    212c:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2130:	83 8d       	ldd	r24, Z+27	; 0x1b
    2132:	94 8d       	ldd	r25, Z+28	; 0x1c
    2134:	82 17       	cp	r24, r18
    2136:	93 07       	cpc	r25, r19
    2138:	60 f0       	brcs	.+24     	; 0x2152 <vTaskSwitchContext+0x4a>
    213a:	60 91 6f 15 	lds	r22, 0x156F	; 0x80156f <pxCurrentTCB>
    213e:	70 91 70 15 	lds	r23, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2142:	63 5e       	subi	r22, 0xE3	; 227
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    214a:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    214e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <vApplicationStackOverflowHook>
    2152:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    2156:	01 c0       	rjmp	.+2      	; 0x215a <vTaskSwitchContext+0x52>
    2158:	81 50       	subi	r24, 0x01	; 1
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	9b e0       	ldi	r25, 0x0B	; 11
    2160:	92 9f       	mul	r25, r18
    2162:	f0 01       	movw	r30, r0
    2164:	93 9f       	mul	r25, r19
    2166:	f0 0d       	add	r31, r0
    2168:	11 24       	eor	r1, r1
    216a:	ef 5f       	subi	r30, 0xFF	; 255
    216c:	fa 4e       	sbci	r31, 0xEA	; 234
    216e:	90 81       	ld	r25, Z
    2170:	99 23       	and	r25, r25
    2172:	91 f3       	breq	.-28     	; 0x2158 <vTaskSwitchContext+0x50>
    2174:	9b e0       	ldi	r25, 0x0B	; 11
    2176:	92 9f       	mul	r25, r18
    2178:	a0 01       	movw	r20, r0
    217a:	93 9f       	mul	r25, r19
    217c:	50 0d       	add	r21, r0
    217e:	11 24       	eor	r1, r1
    2180:	df 01       	movw	r26, r30
    2182:	01 80       	ldd	r0, Z+1	; 0x01
    2184:	f2 81       	ldd	r31, Z+2	; 0x02
    2186:	e0 2d       	mov	r30, r0
    2188:	04 80       	ldd	r0, Z+4	; 0x04
    218a:	f5 81       	ldd	r31, Z+5	; 0x05
    218c:	e0 2d       	mov	r30, r0
    218e:	12 96       	adiw	r26, 0x02	; 2
    2190:	fc 93       	st	X, r31
    2192:	ee 93       	st	-X, r30
    2194:	11 97       	sbiw	r26, 0x01	; 1
    2196:	4c 5f       	subi	r20, 0xFC	; 252
    2198:	5a 4e       	sbci	r21, 0xEA	; 234
    219a:	e4 17       	cp	r30, r20
    219c:	f5 07       	cpc	r31, r21
    219e:	29 f4       	brne	.+10     	; 0x21aa <vTaskSwitchContext+0xa2>
    21a0:	44 81       	ldd	r20, Z+4	; 0x04
    21a2:	55 81       	ldd	r21, Z+5	; 0x05
    21a4:	fd 01       	movw	r30, r26
    21a6:	52 83       	std	Z+2, r21	; 0x02
    21a8:	41 83       	std	Z+1, r20	; 0x01
    21aa:	9b e0       	ldi	r25, 0x0B	; 11
    21ac:	92 9f       	mul	r25, r18
    21ae:	f0 01       	movw	r30, r0
    21b0:	93 9f       	mul	r25, r19
    21b2:	f0 0d       	add	r31, r0
    21b4:	11 24       	eor	r1, r1
    21b6:	ef 5f       	subi	r30, 0xFF	; 255
    21b8:	fa 4e       	sbci	r31, 0xEA	; 234
    21ba:	01 80       	ldd	r0, Z+1	; 0x01
    21bc:	f2 81       	ldd	r31, Z+2	; 0x02
    21be:	e0 2d       	mov	r30, r0
    21c0:	20 85       	ldd	r18, Z+8	; 0x08
    21c2:	31 85       	ldd	r19, Z+9	; 0x09
    21c4:	30 93 70 15 	sts	0x1570, r19	; 0x801570 <pxCurrentTCB+0x1>
    21c8:	20 93 6f 15 	sts	0x156F, r18	; 0x80156f <pxCurrentTCB>
    21cc:	80 93 bf 14 	sts	0x14BF, r24	; 0x8014bf <uxTopReadyPriority>
    21d0:	08 95       	ret

000021d2 <vTaskPlaceOnEventList>:
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	6a 01       	movw	r12, r20
    21dc:	7b 01       	movw	r14, r22
    21de:	60 91 6f 15 	lds	r22, 0x156F	; 0x80156f <pxCurrentTCB>
    21e2:	70 91 70 15 	lds	r23, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    21e6:	62 5f       	subi	r22, 0xF2	; 242
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	0e 94 c5 03 	call	0x78a	; 0x78a <vListInsert>
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	c7 01       	movw	r24, r14
    21f2:	b6 01       	movw	r22, r12
    21f4:	c7 db       	rcall	.-2162   	; 0x1984 <prvAddCurrentTaskToDelayedList>
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	08 95       	ret

00002200 <vTaskPlaceOnUnorderedEventList>:
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	fc 01       	movw	r30, r24
    220a:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
    220e:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2212:	70 68       	ori	r23, 0x80	; 128
    2214:	1e 96       	adiw	r26, 0x0e	; 14
    2216:	4d 93       	st	X+, r20
    2218:	5d 93       	st	X+, r21
    221a:	6d 93       	st	X+, r22
    221c:	7c 93       	st	X, r23
    221e:	51 97       	sbiw	r26, 0x11	; 17
    2220:	a1 81       	ldd	r26, Z+1	; 0x01
    2222:	b2 81       	ldd	r27, Z+2	; 0x02
    2224:	c0 91 6f 15 	lds	r28, 0x156F	; 0x80156f <pxCurrentTCB>
    2228:	d0 91 70 15 	lds	r29, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    222c:	bb 8b       	std	Y+19, r27	; 0x13
    222e:	aa 8b       	std	Y+18, r26	; 0x12
    2230:	c0 91 6f 15 	lds	r28, 0x156F	; 0x80156f <pxCurrentTCB>
    2234:	d0 91 70 15 	lds	r29, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2238:	16 96       	adiw	r26, 0x06	; 6
    223a:	8d 91       	ld	r24, X+
    223c:	9c 91       	ld	r25, X
    223e:	17 97       	sbiw	r26, 0x07	; 7
    2240:	9d 8b       	std	Y+21, r25	; 0x15
    2242:	8c 8b       	std	Y+20, r24	; 0x14
    2244:	16 96       	adiw	r26, 0x06	; 6
    2246:	cd 91       	ld	r28, X+
    2248:	dc 91       	ld	r29, X
    224a:	17 97       	sbiw	r26, 0x07	; 7
    224c:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    2250:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2254:	0e 96       	adiw	r24, 0x0e	; 14
    2256:	9d 83       	std	Y+5, r25	; 0x05
    2258:	8c 83       	std	Y+4, r24	; 0x04
    225a:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    225e:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2262:	0e 96       	adiw	r24, 0x0e	; 14
    2264:	17 96       	adiw	r26, 0x07	; 7
    2266:	9c 93       	st	X, r25
    2268:	8e 93       	st	-X, r24
    226a:	16 97       	sbiw	r26, 0x06	; 6
    226c:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
    2270:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2274:	59 96       	adiw	r26, 0x19	; 25
    2276:	fc 93       	st	X, r31
    2278:	ee 93       	st	-X, r30
    227a:	58 97       	sbiw	r26, 0x18	; 24
    227c:	80 81       	ld	r24, Z
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	80 83       	st	Z, r24
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	c9 01       	movw	r24, r18
    2286:	b8 01       	movw	r22, r16
    2288:	7d db       	rcall	.-2310   	; 0x1984 <prvAddCurrentTaskToDelayedList>
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	08 95       	ret

00002294 <vTaskPlaceOnEventListRestricted>:
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	fc 01       	movw	r30, r24
    229a:	cb 01       	movw	r24, r22
    229c:	ba 01       	movw	r22, r20
    229e:	a1 81       	ldd	r26, Z+1	; 0x01
    22a0:	b2 81       	ldd	r27, Z+2	; 0x02
    22a2:	c0 91 6f 15 	lds	r28, 0x156F	; 0x80156f <pxCurrentTCB>
    22a6:	d0 91 70 15 	lds	r29, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    22aa:	bb 8b       	std	Y+19, r27	; 0x13
    22ac:	aa 8b       	std	Y+18, r26	; 0x12
    22ae:	c0 91 6f 15 	lds	r28, 0x156F	; 0x80156f <pxCurrentTCB>
    22b2:	d0 91 70 15 	lds	r29, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    22b6:	16 96       	adiw	r26, 0x06	; 6
    22b8:	4d 91       	ld	r20, X+
    22ba:	5c 91       	ld	r21, X
    22bc:	17 97       	sbiw	r26, 0x07	; 7
    22be:	5d 8b       	std	Y+21, r21	; 0x15
    22c0:	4c 8b       	std	Y+20, r20	; 0x14
    22c2:	16 96       	adiw	r26, 0x06	; 6
    22c4:	cd 91       	ld	r28, X+
    22c6:	dc 91       	ld	r29, X
    22c8:	17 97       	sbiw	r26, 0x07	; 7
    22ca:	40 91 6f 15 	lds	r20, 0x156F	; 0x80156f <pxCurrentTCB>
    22ce:	50 91 70 15 	lds	r21, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    22d2:	42 5f       	subi	r20, 0xF2	; 242
    22d4:	5f 4f       	sbci	r21, 0xFF	; 255
    22d6:	5d 83       	std	Y+5, r21	; 0x05
    22d8:	4c 83       	std	Y+4, r20	; 0x04
    22da:	40 91 6f 15 	lds	r20, 0x156F	; 0x80156f <pxCurrentTCB>
    22de:	50 91 70 15 	lds	r21, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    22e2:	42 5f       	subi	r20, 0xF2	; 242
    22e4:	5f 4f       	sbci	r21, 0xFF	; 255
    22e6:	17 96       	adiw	r26, 0x07	; 7
    22e8:	5c 93       	st	X, r21
    22ea:	4e 93       	st	-X, r20
    22ec:	16 97       	sbiw	r26, 0x06	; 6
    22ee:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
    22f2:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    22f6:	59 96       	adiw	r26, 0x19	; 25
    22f8:	fc 93       	st	X, r31
    22fa:	ee 93       	st	-X, r30
    22fc:	58 97       	sbiw	r26, 0x18	; 24
    22fe:	30 81       	ld	r19, Z
    2300:	3f 5f       	subi	r19, 0xFF	; 255
    2302:	30 83       	st	Z, r19
    2304:	22 23       	and	r18, r18
    2306:	19 f0       	breq	.+6      	; 0x230e <vTaskPlaceOnEventListRestricted+0x7a>
    2308:	6f ef       	ldi	r22, 0xFF	; 255
    230a:	7f ef       	ldi	r23, 0xFF	; 255
    230c:	cb 01       	movw	r24, r22
    230e:	42 2f       	mov	r20, r18
    2310:	39 db       	rcall	.-2446   	; 0x1984 <prvAddCurrentTaskToDelayedList>
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <xTaskRemoveFromEventList>:
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	dc 01       	movw	r26, r24
    231e:	17 96       	adiw	r26, 0x07	; 7
    2320:	ed 91       	ld	r30, X+
    2322:	fc 91       	ld	r31, X
    2324:	18 97       	sbiw	r26, 0x08	; 8
    2326:	00 84       	ldd	r0, Z+8	; 0x08
    2328:	f1 85       	ldd	r31, Z+9	; 0x09
    232a:	e0 2d       	mov	r30, r0
    232c:	a0 8d       	ldd	r26, Z+24	; 0x18
    232e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2330:	c2 89       	ldd	r28, Z+18	; 0x12
    2332:	d3 89       	ldd	r29, Z+19	; 0x13
    2334:	84 89       	ldd	r24, Z+20	; 0x14
    2336:	95 89       	ldd	r25, Z+21	; 0x15
    2338:	9f 83       	std	Y+7, r25	; 0x07
    233a:	8e 83       	std	Y+6, r24	; 0x06
    233c:	c4 89       	ldd	r28, Z+20	; 0x14
    233e:	d5 89       	ldd	r29, Z+21	; 0x15
    2340:	82 89       	ldd	r24, Z+18	; 0x12
    2342:	93 89       	ldd	r25, Z+19	; 0x13
    2344:	9d 83       	std	Y+5, r25	; 0x05
    2346:	8c 83       	std	Y+4, r24	; 0x04
    2348:	11 96       	adiw	r26, 0x01	; 1
    234a:	8d 91       	ld	r24, X+
    234c:	9c 91       	ld	r25, X
    234e:	12 97       	sbiw	r26, 0x02	; 2
    2350:	9f 01       	movw	r18, r30
    2352:	22 5f       	subi	r18, 0xF2	; 242
    2354:	3f 4f       	sbci	r19, 0xFF	; 255
    2356:	82 17       	cp	r24, r18
    2358:	93 07       	cpc	r25, r19
    235a:	31 f4       	brne	.+12     	; 0x2368 <xTaskRemoveFromEventList+0x50>
    235c:	84 89       	ldd	r24, Z+20	; 0x14
    235e:	95 89       	ldd	r25, Z+21	; 0x15
    2360:	12 96       	adiw	r26, 0x02	; 2
    2362:	9c 93       	st	X, r25
    2364:	8e 93       	st	-X, r24
    2366:	11 97       	sbiw	r26, 0x01	; 1
    2368:	11 8e       	std	Z+25, r1	; 0x19
    236a:	10 8e       	std	Z+24, r1	; 0x18
    236c:	8c 91       	ld	r24, X
    236e:	81 50       	subi	r24, 0x01	; 1
    2370:	8c 93       	st	X, r24
    2372:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    2376:	81 11       	cpse	r24, r1
    2378:	52 c0       	rjmp	.+164    	; 0x241e <xTaskRemoveFromEventList+0x106>
    237a:	a4 85       	ldd	r26, Z+12	; 0x0c
    237c:	b5 85       	ldd	r27, Z+13	; 0x0d
    237e:	c6 81       	ldd	r28, Z+6	; 0x06
    2380:	d7 81       	ldd	r29, Z+7	; 0x07
    2382:	80 85       	ldd	r24, Z+8	; 0x08
    2384:	91 85       	ldd	r25, Z+9	; 0x09
    2386:	9f 83       	std	Y+7, r25	; 0x07
    2388:	8e 83       	std	Y+6, r24	; 0x06
    238a:	c0 85       	ldd	r28, Z+8	; 0x08
    238c:	d1 85       	ldd	r29, Z+9	; 0x09
    238e:	86 81       	ldd	r24, Z+6	; 0x06
    2390:	97 81       	ldd	r25, Z+7	; 0x07
    2392:	9d 83       	std	Y+5, r25	; 0x05
    2394:	8c 83       	std	Y+4, r24	; 0x04
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	8d 91       	ld	r24, X+
    239a:	9c 91       	ld	r25, X
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	9f 01       	movw	r18, r30
    23a0:	2e 5f       	subi	r18, 0xFE	; 254
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	82 17       	cp	r24, r18
    23a6:	93 07       	cpc	r25, r19
    23a8:	31 f4       	brne	.+12     	; 0x23b6 <xTaskRemoveFromEventList+0x9e>
    23aa:	80 85       	ldd	r24, Z+8	; 0x08
    23ac:	91 85       	ldd	r25, Z+9	; 0x09
    23ae:	12 96       	adiw	r26, 0x02	; 2
    23b0:	9c 93       	st	X, r25
    23b2:	8e 93       	st	-X, r24
    23b4:	11 97       	sbiw	r26, 0x01	; 1
    23b6:	15 86       	std	Z+13, r1	; 0x0d
    23b8:	14 86       	std	Z+12, r1	; 0x0c
    23ba:	8c 91       	ld	r24, X
    23bc:	81 50       	subi	r24, 0x01	; 1
    23be:	8c 93       	st	X, r24
    23c0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23c2:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    23c6:	8a 17       	cp	r24, r26
    23c8:	10 f4       	brcc	.+4      	; 0x23ce <xTaskRemoveFromEventList+0xb6>
    23ca:	a0 93 bf 14 	sts	0x14BF, r26	; 0x8014bf <uxTopReadyPriority>
    23ce:	8b e0       	ldi	r24, 0x0B	; 11
    23d0:	8a 9f       	mul	r24, r26
    23d2:	d0 01       	movw	r26, r0
    23d4:	11 24       	eor	r1, r1
    23d6:	af 5f       	subi	r26, 0xFF	; 255
    23d8:	ba 4e       	sbci	r27, 0xEA	; 234
    23da:	11 96       	adiw	r26, 0x01	; 1
    23dc:	0d 90       	ld	r0, X+
    23de:	bc 91       	ld	r27, X
    23e0:	a0 2d       	mov	r26, r0
    23e2:	b7 83       	std	Z+7, r27	; 0x07
    23e4:	a6 83       	std	Z+6, r26	; 0x06
    23e6:	16 96       	adiw	r26, 0x06	; 6
    23e8:	4d 91       	ld	r20, X+
    23ea:	5c 91       	ld	r21, X
    23ec:	17 97       	sbiw	r26, 0x07	; 7
    23ee:	51 87       	std	Z+9, r21	; 0x09
    23f0:	40 87       	std	Z+8, r20	; 0x08
    23f2:	16 96       	adiw	r26, 0x06	; 6
    23f4:	cd 91       	ld	r28, X+
    23f6:	dc 91       	ld	r29, X
    23f8:	17 97       	sbiw	r26, 0x07	; 7
    23fa:	3d 83       	std	Y+5, r19	; 0x05
    23fc:	2c 83       	std	Y+4, r18	; 0x04
    23fe:	17 96       	adiw	r26, 0x07	; 7
    2400:	3c 93       	st	X, r19
    2402:	2e 93       	st	-X, r18
    2404:	16 97       	sbiw	r26, 0x06	; 6
    2406:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2408:	8a 9f       	mul	r24, r26
    240a:	d0 01       	movw	r26, r0
    240c:	11 24       	eor	r1, r1
    240e:	af 5f       	subi	r26, 0xFF	; 255
    2410:	ba 4e       	sbci	r27, 0xEA	; 234
    2412:	b5 87       	std	Z+13, r27	; 0x0d
    2414:	a4 87       	std	Z+12, r26	; 0x0c
    2416:	8c 91       	ld	r24, X
    2418:	8f 5f       	subi	r24, 0xFF	; 255
    241a:	8c 93       	st	X, r24
    241c:	1c c0       	rjmp	.+56     	; 0x2456 <xTaskRemoveFromEventList+0x13e>
    241e:	4c ed       	ldi	r20, 0xDC	; 220
    2420:	54 e1       	ldi	r21, 0x14	; 20
    2422:	da 01       	movw	r26, r20
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	cd 91       	ld	r28, X+
    2428:	dc 91       	ld	r29, X
    242a:	12 97       	sbiw	r26, 0x02	; 2
    242c:	d3 8b       	std	Z+19, r29	; 0x13
    242e:	c2 8b       	std	Z+18, r28	; 0x12
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	9f 81       	ldd	r25, Y+7	; 0x07
    2434:	95 8b       	std	Z+21, r25	; 0x15
    2436:	84 8b       	std	Z+20, r24	; 0x14
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	9f 81       	ldd	r25, Y+7	; 0x07
    243c:	dc 01       	movw	r26, r24
    243e:	15 96       	adiw	r26, 0x05	; 5
    2440:	3c 93       	st	X, r19
    2442:	2e 93       	st	-X, r18
    2444:	14 97       	sbiw	r26, 0x04	; 4
    2446:	3f 83       	std	Y+7, r19	; 0x07
    2448:	2e 83       	std	Y+6, r18	; 0x06
    244a:	51 8f       	std	Z+25, r21	; 0x19
    244c:	40 8f       	std	Z+24, r20	; 0x18
    244e:	da 01       	movw	r26, r20
    2450:	8c 91       	ld	r24, X
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	8c 93       	st	X, r24
    2456:	92 8d       	ldd	r25, Z+26	; 0x1a
    2458:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    245c:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2460:	82 8d       	ldd	r24, Z+26	; 0x1a
    2462:	89 17       	cp	r24, r25
    2464:	20 f4       	brcc	.+8      	; 0x246e <xTaskRemoveFromEventList+0x156>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <xYieldPending>
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <xTaskRemoveFromEventList+0x158>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	08 95       	ret

00002476 <vTaskRemoveFromUnorderedEventList>:
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	dc 01       	movw	r26, r24
    247c:	70 68       	ori	r23, 0x80	; 128
    247e:	4d 93       	st	X+, r20
    2480:	5d 93       	st	X+, r21
    2482:	6d 93       	st	X+, r22
    2484:	7c 93       	st	X, r23
    2486:	13 97       	sbiw	r26, 0x03	; 3
    2488:	18 96       	adiw	r26, 0x08	; 8
    248a:	ed 91       	ld	r30, X+
    248c:	fc 91       	ld	r31, X
    248e:	19 97       	sbiw	r26, 0x09	; 9
    2490:	1a 96       	adiw	r26, 0x0a	; 10
    2492:	4d 91       	ld	r20, X+
    2494:	5c 91       	ld	r21, X
    2496:	1b 97       	sbiw	r26, 0x0b	; 11
    2498:	14 96       	adiw	r26, 0x04	; 4
    249a:	8d 91       	ld	r24, X+
    249c:	9c 91       	ld	r25, X
    249e:	15 97       	sbiw	r26, 0x05	; 5
    24a0:	16 96       	adiw	r26, 0x06	; 6
    24a2:	2d 91       	ld	r18, X+
    24a4:	3c 91       	ld	r19, X
    24a6:	17 97       	sbiw	r26, 0x07	; 7
    24a8:	ec 01       	movw	r28, r24
    24aa:	3f 83       	std	Y+7, r19	; 0x07
    24ac:	2e 83       	std	Y+6, r18	; 0x06
    24ae:	16 96       	adiw	r26, 0x06	; 6
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	17 97       	sbiw	r26, 0x07	; 7
    24b6:	14 96       	adiw	r26, 0x04	; 4
    24b8:	2d 91       	ld	r18, X+
    24ba:	3c 91       	ld	r19, X
    24bc:	15 97       	sbiw	r26, 0x05	; 5
    24be:	ec 01       	movw	r28, r24
    24c0:	3d 83       	std	Y+5, r19	; 0x05
    24c2:	2c 83       	std	Y+4, r18	; 0x04
    24c4:	ea 01       	movw	r28, r20
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	a8 17       	cp	r26, r24
    24cc:	b9 07       	cpc	r27, r25
    24ce:	31 f4       	brne	.+12     	; 0x24dc <vTaskRemoveFromUnorderedEventList+0x66>
    24d0:	16 96       	adiw	r26, 0x06	; 6
    24d2:	8d 91       	ld	r24, X+
    24d4:	9c 91       	ld	r25, X
    24d6:	17 97       	sbiw	r26, 0x07	; 7
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	1b 96       	adiw	r26, 0x0b	; 11
    24de:	1c 92       	st	X, r1
    24e0:	1e 92       	st	-X, r1
    24e2:	1a 97       	sbiw	r26, 0x0a	; 10
    24e4:	da 01       	movw	r26, r20
    24e6:	8c 91       	ld	r24, X
    24e8:	81 50       	subi	r24, 0x01	; 1
    24ea:	8c 93       	st	X, r24
    24ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    24ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    24f0:	c6 81       	ldd	r28, Z+6	; 0x06
    24f2:	d7 81       	ldd	r29, Z+7	; 0x07
    24f4:	80 85       	ldd	r24, Z+8	; 0x08
    24f6:	91 85       	ldd	r25, Z+9	; 0x09
    24f8:	9f 83       	std	Y+7, r25	; 0x07
    24fa:	8e 83       	std	Y+6, r24	; 0x06
    24fc:	c0 85       	ldd	r28, Z+8	; 0x08
    24fe:	d1 85       	ldd	r29, Z+9	; 0x09
    2500:	86 81       	ldd	r24, Z+6	; 0x06
    2502:	97 81       	ldd	r25, Z+7	; 0x07
    2504:	9d 83       	std	Y+5, r25	; 0x05
    2506:	8c 83       	std	Y+4, r24	; 0x04
    2508:	11 96       	adiw	r26, 0x01	; 1
    250a:	8d 91       	ld	r24, X+
    250c:	9c 91       	ld	r25, X
    250e:	12 97       	sbiw	r26, 0x02	; 2
    2510:	9f 01       	movw	r18, r30
    2512:	2e 5f       	subi	r18, 0xFE	; 254
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	82 17       	cp	r24, r18
    2518:	93 07       	cpc	r25, r19
    251a:	31 f4       	brne	.+12     	; 0x2528 <vTaskRemoveFromUnorderedEventList+0xb2>
    251c:	80 85       	ldd	r24, Z+8	; 0x08
    251e:	91 85       	ldd	r25, Z+9	; 0x09
    2520:	12 96       	adiw	r26, 0x02	; 2
    2522:	9c 93       	st	X, r25
    2524:	8e 93       	st	-X, r24
    2526:	11 97       	sbiw	r26, 0x01	; 1
    2528:	15 86       	std	Z+13, r1	; 0x0d
    252a:	14 86       	std	Z+12, r1	; 0x0c
    252c:	8c 91       	ld	r24, X
    252e:	81 50       	subi	r24, 0x01	; 1
    2530:	8c 93       	st	X, r24
    2532:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2534:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    2538:	8a 17       	cp	r24, r26
    253a:	10 f4       	brcc	.+4      	; 0x2540 <vTaskRemoveFromUnorderedEventList+0xca>
    253c:	a0 93 bf 14 	sts	0x14BF, r26	; 0x8014bf <uxTopReadyPriority>
    2540:	8b e0       	ldi	r24, 0x0B	; 11
    2542:	8a 9f       	mul	r24, r26
    2544:	d0 01       	movw	r26, r0
    2546:	11 24       	eor	r1, r1
    2548:	af 5f       	subi	r26, 0xFF	; 255
    254a:	ba 4e       	sbci	r27, 0xEA	; 234
    254c:	11 96       	adiw	r26, 0x01	; 1
    254e:	0d 90       	ld	r0, X+
    2550:	bc 91       	ld	r27, X
    2552:	a0 2d       	mov	r26, r0
    2554:	b7 83       	std	Z+7, r27	; 0x07
    2556:	a6 83       	std	Z+6, r26	; 0x06
    2558:	16 96       	adiw	r26, 0x06	; 6
    255a:	4d 91       	ld	r20, X+
    255c:	5c 91       	ld	r21, X
    255e:	17 97       	sbiw	r26, 0x07	; 7
    2560:	51 87       	std	Z+9, r21	; 0x09
    2562:	40 87       	std	Z+8, r20	; 0x08
    2564:	16 96       	adiw	r26, 0x06	; 6
    2566:	cd 91       	ld	r28, X+
    2568:	dc 91       	ld	r29, X
    256a:	17 97       	sbiw	r26, 0x07	; 7
    256c:	3d 83       	std	Y+5, r19	; 0x05
    256e:	2c 83       	std	Y+4, r18	; 0x04
    2570:	17 96       	adiw	r26, 0x07	; 7
    2572:	3c 93       	st	X, r19
    2574:	2e 93       	st	-X, r18
    2576:	16 97       	sbiw	r26, 0x06	; 6
    2578:	a2 8d       	ldd	r26, Z+26	; 0x1a
    257a:	8a 9f       	mul	r24, r26
    257c:	d0 01       	movw	r26, r0
    257e:	11 24       	eor	r1, r1
    2580:	af 5f       	subi	r26, 0xFF	; 255
    2582:	ba 4e       	sbci	r27, 0xEA	; 234
    2584:	b5 87       	std	Z+13, r27	; 0x0d
    2586:	a4 87       	std	Z+12, r26	; 0x0c
    2588:	8c 91       	ld	r24, X
    258a:	8f 5f       	subi	r24, 0xFF	; 255
    258c:	8c 93       	st	X, r24
    258e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2590:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    2594:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2598:	82 8d       	ldd	r24, Z+26	; 0x1a
    259a:	89 17       	cp	r24, r25
    259c:	18 f4       	brcc	.+6      	; 0x25a4 <vTaskRemoveFromUnorderedEventList+0x12e>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <xYieldPending>
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <vTaskSetTimeOutState>:
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	0f 92       	push	r0
    25b0:	20 91 b8 14 	lds	r18, 0x14B8	; 0x8014b8 <xNumOfOverflows>
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
    25b8:	40 91 c0 14 	lds	r20, 0x14C0	; 0x8014c0 <xTickCount>
    25bc:	50 91 c1 14 	lds	r21, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    25c0:	60 91 c2 14 	lds	r22, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    25c4:	70 91 c3 14 	lds	r23, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    25c8:	41 83       	std	Z+1, r20	; 0x01
    25ca:	52 83       	std	Z+2, r21	; 0x02
    25cc:	63 83       	std	Z+3, r22	; 0x03
    25ce:	74 83       	std	Z+4, r23	; 0x04
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	08 95       	ret

000025d6 <vTaskInternalSetTimeOutState>:
    25d6:	20 91 b8 14 	lds	r18, 0x14B8	; 0x8014b8 <xNumOfOverflows>
    25da:	fc 01       	movw	r30, r24
    25dc:	20 83       	st	Z, r18
    25de:	40 91 c0 14 	lds	r20, 0x14C0	; 0x8014c0 <xTickCount>
    25e2:	50 91 c1 14 	lds	r21, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    25e6:	60 91 c2 14 	lds	r22, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    25ea:	70 91 c3 14 	lds	r23, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    25ee:	41 83       	std	Z+1, r20	; 0x01
    25f0:	52 83       	std	Z+2, r21	; 0x02
    25f2:	63 83       	std	Z+3, r22	; 0x03
    25f4:	74 83       	std	Z+4, r23	; 0x04
    25f6:	08 95       	ret

000025f8 <xTaskCheckForTimeOut>:
    25f8:	8f 92       	push	r8
    25fa:	9f 92       	push	r9
    25fc:	af 92       	push	r10
    25fe:	bf 92       	push	r11
    2600:	cf 92       	push	r12
    2602:	df 92       	push	r13
    2604:	ef 92       	push	r14
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	fb 01       	movw	r30, r22
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	0f 92       	push	r0
    2618:	c0 90 c0 14 	lds	r12, 0x14C0	; 0x8014c0 <xTickCount>
    261c:	d0 90 c1 14 	lds	r13, 0x14C1	; 0x8014c1 <xTickCount+0x1>
    2620:	e0 90 c2 14 	lds	r14, 0x14C2	; 0x8014c2 <xTickCount+0x2>
    2624:	f0 90 c3 14 	lds	r15, 0x14C3	; 0x8014c3 <xTickCount+0x3>
    2628:	dc 01       	movw	r26, r24
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	0d 91       	ld	r16, X+
    262e:	1d 91       	ld	r17, X+
    2630:	2d 91       	ld	r18, X+
    2632:	3c 91       	ld	r19, X
    2634:	14 97       	sbiw	r26, 0x04	; 4
    2636:	46 01       	movw	r8, r12
    2638:	57 01       	movw	r10, r14
    263a:	80 1a       	sub	r8, r16
    263c:	91 0a       	sbc	r9, r17
    263e:	a2 0a       	sbc	r10, r18
    2640:	b3 0a       	sbc	r11, r19
    2642:	40 81       	ld	r20, Z
    2644:	51 81       	ldd	r21, Z+1	; 0x01
    2646:	62 81       	ldd	r22, Z+2	; 0x02
    2648:	73 81       	ldd	r23, Z+3	; 0x03
    264a:	4f 3f       	cpi	r20, 0xFF	; 255
    264c:	bf ef       	ldi	r27, 0xFF	; 255
    264e:	5b 07       	cpc	r21, r27
    2650:	6b 07       	cpc	r22, r27
    2652:	7b 07       	cpc	r23, r27
    2654:	39 f1       	breq	.+78     	; 0x26a4 <xTaskCheckForTimeOut+0xac>
    2656:	ec 01       	movw	r28, r24
    2658:	b8 81       	ld	r27, Y
    265a:	a0 91 b8 14 	lds	r26, 0x14B8	; 0x8014b8 <xNumOfOverflows>
    265e:	ba 17       	cp	r27, r26
    2660:	59 f0       	breq	.+22     	; 0x2678 <xTaskCheckForTimeOut+0x80>
    2662:	c0 16       	cp	r12, r16
    2664:	d1 06       	cpc	r13, r17
    2666:	e2 06       	cpc	r14, r18
    2668:	f3 06       	cpc	r15, r19
    266a:	30 f0       	brcs	.+12     	; 0x2678 <xTaskCheckForTimeOut+0x80>
    266c:	10 82       	st	Z, r1
    266e:	11 82       	std	Z+1, r1	; 0x01
    2670:	12 82       	std	Z+2, r1	; 0x02
    2672:	13 82       	std	Z+3, r1	; 0x03
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	17 c0       	rjmp	.+46     	; 0x26a6 <xTaskCheckForTimeOut+0xae>
    2678:	84 16       	cp	r8, r20
    267a:	95 06       	cpc	r9, r21
    267c:	a6 06       	cpc	r10, r22
    267e:	b7 06       	cpc	r11, r23
    2680:	58 f4       	brcc	.+22     	; 0x2698 <xTaskCheckForTimeOut+0xa0>
    2682:	48 19       	sub	r20, r8
    2684:	59 09       	sbc	r21, r9
    2686:	6a 09       	sbc	r22, r10
    2688:	7b 09       	sbc	r23, r11
    268a:	40 83       	st	Z, r20
    268c:	51 83       	std	Z+1, r21	; 0x01
    268e:	62 83       	std	Z+2, r22	; 0x02
    2690:	73 83       	std	Z+3, r23	; 0x03
    2692:	a1 df       	rcall	.-190    	; 0x25d6 <vTaskInternalSetTimeOutState>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <xTaskCheckForTimeOut+0xae>
    2698:	10 82       	st	Z, r1
    269a:	11 82       	std	Z+1, r1	; 0x01
    269c:	12 82       	std	Z+2, r1	; 0x02
    269e:	13 82       	std	Z+3, r1	; 0x03
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	01 c0       	rjmp	.+2      	; 0x26a6 <xTaskCheckForTimeOut+0xae>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	bf 90       	pop	r11
    26bc:	af 90       	pop	r10
    26be:	9f 90       	pop	r9
    26c0:	8f 90       	pop	r8
    26c2:	08 95       	ret

000026c4 <vTaskMissedYield>:
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <xYieldPending>
    26ca:	08 95       	ret

000026cc <xTaskGetCurrentTaskHandle>:
    26cc:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    26d0:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    26d4:	08 95       	ret

000026d6 <xTaskGetSchedulerState>:
    26d6:	80 91 be 14 	lds	r24, 0x14BE	; 0x8014be <xSchedulerRunning>
    26da:	88 23       	and	r24, r24
    26dc:	31 f0       	breq	.+12     	; 0x26ea <xTaskGetSchedulerState+0x14>
    26de:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    26e2:	81 11       	cpse	r24, r1
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <xTaskGetSchedulerState+0x18>
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	08 95       	ret
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	08 95       	ret
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	08 95       	ret

000026f2 <xTaskPriorityDisinherit>:
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	fc 01       	movw	r30, r24
    26fc:	89 2b       	or	r24, r25
    26fe:	09 f4       	brne	.+2      	; 0x2702 <xTaskPriorityDisinherit+0x10>
    2700:	49 c0       	rjmp	.+146    	; 0x2794 <xTaskPriorityDisinherit+0xa2>
    2702:	86 a5       	ldd	r24, Z+46	; 0x2e
    2704:	81 50       	subi	r24, 0x01	; 1
    2706:	86 a7       	std	Z+46, r24	; 0x2e
    2708:	22 8d       	ldd	r18, Z+26	; 0x1a
    270a:	95 a5       	ldd	r25, Z+45	; 0x2d
    270c:	29 17       	cp	r18, r25
    270e:	09 f4       	brne	.+2      	; 0x2712 <xTaskPriorityDisinherit+0x20>
    2710:	43 c0       	rjmp	.+134    	; 0x2798 <xTaskPriorityDisinherit+0xa6>
    2712:	81 11       	cpse	r24, r1
    2714:	43 c0       	rjmp	.+134    	; 0x279c <xTaskPriorityDisinherit+0xaa>
    2716:	ef 01       	movw	r28, r30
    2718:	8f 01       	movw	r16, r30
    271a:	0e 5f       	subi	r16, 0xFE	; 254
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	c8 01       	movw	r24, r16
    2720:	0e 94 02 04 	call	0x804	; 0x804 <uxListRemove>
    2724:	ed a5       	ldd	r30, Y+45	; 0x2d
    2726:	ea 8f       	std	Y+26, r30	; 0x1a
    2728:	8a e0       	ldi	r24, 0x0A	; 10
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	8e 1b       	sub	r24, r30
    2732:	91 09       	sbc	r25, r1
    2734:	a1 09       	sbc	r26, r1
    2736:	b1 09       	sbc	r27, r1
    2738:	8e 87       	std	Y+14, r24	; 0x0e
    273a:	9f 87       	std	Y+15, r25	; 0x0f
    273c:	a8 8b       	std	Y+16, r26	; 0x10
    273e:	b9 8b       	std	Y+17, r27	; 0x11
    2740:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    2744:	8e 17       	cp	r24, r30
    2746:	10 f4       	brcc	.+4      	; 0x274c <xTaskPriorityDisinherit+0x5a>
    2748:	e0 93 bf 14 	sts	0x14BF, r30	; 0x8014bf <uxTopReadyPriority>
    274c:	8b e0       	ldi	r24, 0x0B	; 11
    274e:	8e 9f       	mul	r24, r30
    2750:	f0 01       	movw	r30, r0
    2752:	11 24       	eor	r1, r1
    2754:	ef 5f       	subi	r30, 0xFF	; 255
    2756:	fa 4e       	sbci	r31, 0xEA	; 234
    2758:	01 80       	ldd	r0, Z+1	; 0x01
    275a:	f2 81       	ldd	r31, Z+2	; 0x02
    275c:	e0 2d       	mov	r30, r0
    275e:	ff 83       	std	Y+7, r31	; 0x07
    2760:	ee 83       	std	Y+6, r30	; 0x06
    2762:	26 81       	ldd	r18, Z+6	; 0x06
    2764:	37 81       	ldd	r19, Z+7	; 0x07
    2766:	39 87       	std	Y+9, r19	; 0x09
    2768:	28 87       	std	Y+8, r18	; 0x08
    276a:	a6 81       	ldd	r26, Z+6	; 0x06
    276c:	b7 81       	ldd	r27, Z+7	; 0x07
    276e:	15 96       	adiw	r26, 0x05	; 5
    2770:	1c 93       	st	X, r17
    2772:	0e 93       	st	-X, r16
    2774:	14 97       	sbiw	r26, 0x04	; 4
    2776:	17 83       	std	Z+7, r17	; 0x07
    2778:	06 83       	std	Z+6, r16	; 0x06
    277a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    277c:	8e 9f       	mul	r24, r30
    277e:	f0 01       	movw	r30, r0
    2780:	11 24       	eor	r1, r1
    2782:	ef 5f       	subi	r30, 0xFF	; 255
    2784:	fa 4e       	sbci	r31, 0xEA	; 234
    2786:	fd 87       	std	Y+13, r31	; 0x0d
    2788:	ec 87       	std	Y+12, r30	; 0x0c
    278a:	80 81       	ld	r24, Z
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	80 83       	st	Z, r24
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	05 c0       	rjmp	.+10     	; 0x279e <xTaskPriorityDisinherit+0xac>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	03 c0       	rjmp	.+6      	; 0x279e <xTaskPriorityDisinherit+0xac>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	01 c0       	rjmp	.+2      	; 0x279e <xTaskPriorityDisinherit+0xac>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	08 95       	ret

000027a8 <uxTaskResetEventItemValue>:
    27a8:	cf 92       	push	r12
    27aa:	df 92       	push	r13
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    27b4:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    27b8:	66 85       	ldd	r22, Z+14	; 0x0e
    27ba:	77 85       	ldd	r23, Z+15	; 0x0f
    27bc:	80 89       	ldd	r24, Z+16	; 0x10
    27be:	91 89       	ldd	r25, Z+17	; 0x11
    27c0:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    27c4:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    27c8:	a0 91 6f 15 	lds	r26, 0x156F	; 0x80156f <pxCurrentTCB>
    27cc:	b0 91 70 15 	lds	r27, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    27d0:	5a 96       	adiw	r26, 0x1a	; 26
    27d2:	2c 91       	ld	r18, X
    27d4:	0f 2e       	mov	r0, r31
    27d6:	fa e0       	ldi	r31, 0x0A	; 10
    27d8:	cf 2e       	mov	r12, r31
    27da:	d1 2c       	mov	r13, r1
    27dc:	e1 2c       	mov	r14, r1
    27de:	f1 2c       	mov	r15, r1
    27e0:	f0 2d       	mov	r31, r0
    27e2:	c2 1a       	sub	r12, r18
    27e4:	d1 08       	sbc	r13, r1
    27e6:	e1 08       	sbc	r14, r1
    27e8:	f1 08       	sbc	r15, r1
    27ea:	c6 86       	std	Z+14, r12	; 0x0e
    27ec:	d7 86       	std	Z+15, r13	; 0x0f
    27ee:	e0 8a       	std	Z+16, r14	; 0x10
    27f0:	f1 8a       	std	Z+17, r15	; 0x11
    27f2:	ff 90       	pop	r15
    27f4:	ef 90       	pop	r14
    27f6:	df 90       	pop	r13
    27f8:	cf 90       	pop	r12
    27fa:	08 95       	ret

000027fc <xTaskGenericNotifyWait>:
    27fc:	4f 92       	push	r4
    27fe:	5f 92       	push	r5
    2800:	6f 92       	push	r6
    2802:	7f 92       	push	r7
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	28 01       	movw	r4, r16
    281a:	39 01       	movw	r6, r18
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	0f 92       	push	r0
    2822:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    2826:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    282a:	c8 2f       	mov	r28, r24
    282c:	d0 e0       	ldi	r29, 0x00	; 0
    282e:	ec 0f       	add	r30, r28
    2830:	fd 1f       	adc	r31, r29
    2832:	83 a9       	ldd	r24, Z+51	; 0x33
    2834:	82 30       	cpi	r24, 0x02	; 2
    2836:	71 f1       	breq	.+92     	; 0x2894 <xTaskGenericNotifyWait+0x98>
    2838:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    283c:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2840:	ce 01       	movw	r24, r28
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	e8 0f       	add	r30, r24
    284c:	f9 1f       	adc	r31, r25
    284e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2850:	90 a9       	ldd	r25, Z+48	; 0x30
    2852:	a1 a9       	ldd	r26, Z+49	; 0x31
    2854:	b2 a9       	ldd	r27, Z+50	; 0x32
    2856:	40 95       	com	r20
    2858:	50 95       	com	r21
    285a:	60 95       	com	r22
    285c:	70 95       	com	r23
    285e:	48 23       	and	r20, r24
    2860:	59 23       	and	r21, r25
    2862:	6a 23       	and	r22, r26
    2864:	7b 23       	and	r23, r27
    2866:	47 a7       	std	Z+47, r20	; 0x2f
    2868:	50 ab       	std	Z+48, r21	; 0x30
    286a:	61 ab       	std	Z+49, r22	; 0x31
    286c:	72 ab       	std	Z+50, r23	; 0x32
    286e:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    2872:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2876:	ec 0f       	add	r30, r28
    2878:	fd 1f       	adc	r31, r29
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	83 ab       	std	Z+51, r24	; 0x33
    287e:	a1 14       	cp	r10, r1
    2880:	b1 04       	cpc	r11, r1
    2882:	c1 04       	cpc	r12, r1
    2884:	d1 04       	cpc	r13, r1
    2886:	31 f0       	breq	.+12     	; 0x2894 <xTaskGenericNotifyWait+0x98>
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	c6 01       	movw	r24, r12
    288c:	b5 01       	movw	r22, r10
    288e:	7a d8       	rcall	.-3852   	; 0x1984 <prvAddCurrentTaskToDelayedList>
    2890:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	0f 92       	push	r0
    289e:	e1 14       	cp	r14, r1
    28a0:	f1 04       	cpc	r15, r1
    28a2:	a1 f0       	breq	.+40     	; 0x28cc <xTaskGenericNotifyWait+0xd0>
    28a4:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    28a8:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    28ac:	ce 01       	movw	r24, r28
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	e8 0f       	add	r30, r24
    28b8:	f9 1f       	adc	r31, r25
    28ba:	87 a5       	ldd	r24, Z+47	; 0x2f
    28bc:	90 a9       	ldd	r25, Z+48	; 0x30
    28be:	a1 a9       	ldd	r26, Z+49	; 0x31
    28c0:	b2 a9       	ldd	r27, Z+50	; 0x32
    28c2:	f7 01       	movw	r30, r14
    28c4:	80 83       	st	Z, r24
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	b3 83       	std	Z+3, r27	; 0x03
    28cc:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    28d0:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    28d4:	ec 0f       	add	r30, r28
    28d6:	fd 1f       	adc	r31, r29
    28d8:	83 a9       	ldd	r24, Z+51	; 0x33
    28da:	82 30       	cpi	r24, 0x02	; 2
    28dc:	e9 f4       	brne	.+58     	; 0x2918 <xTaskGenericNotifyWait+0x11c>
    28de:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    28e2:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    28e6:	ce 01       	movw	r24, r28
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	e8 0f       	add	r30, r24
    28f2:	f9 1f       	adc	r31, r25
    28f4:	87 a5       	ldd	r24, Z+47	; 0x2f
    28f6:	90 a9       	ldd	r25, Z+48	; 0x30
    28f8:	a1 a9       	ldd	r26, Z+49	; 0x31
    28fa:	b2 a9       	ldd	r27, Z+50	; 0x32
    28fc:	40 94       	com	r4
    28fe:	50 94       	com	r5
    2900:	60 94       	com	r6
    2902:	70 94       	com	r7
    2904:	48 22       	and	r4, r24
    2906:	59 22       	and	r5, r25
    2908:	6a 22       	and	r6, r26
    290a:	7b 22       	and	r7, r27
    290c:	47 a6       	std	Z+47, r4	; 0x2f
    290e:	50 aa       	std	Z+48, r5	; 0x30
    2910:	61 aa       	std	Z+49, r6	; 0x31
    2912:	72 aa       	std	Z+50, r7	; 0x32
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	01 c0       	rjmp	.+2      	; 0x291a <xTaskGenericNotifyWait+0x11e>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	20 91 6f 15 	lds	r18, 0x156F	; 0x80156f <pxCurrentTCB>
    291e:	30 91 70 15 	lds	r19, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2922:	c2 0f       	add	r28, r18
    2924:	d3 1f       	adc	r29, r19
    2926:	1b aa       	std	Y+51, r1	; 0x33
    2928:	0f 90       	pop	r0
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	cf 90       	pop	r12
    293c:	bf 90       	pop	r11
    293e:	af 90       	pop	r10
    2940:	7f 90       	pop	r7
    2942:	6f 90       	pop	r6
    2944:	5f 90       	pop	r5
    2946:	4f 90       	pop	r4
    2948:	08 95       	ret

0000294a <xTaskGenericNotify>:
    294a:	8f 92       	push	r8
    294c:	9f 92       	push	r9
    294e:	af 92       	push	r10
    2950:	bf 92       	push	r11
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	dc 01       	movw	r26, r24
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	0f 92       	push	r0
    2964:	e1 14       	cp	r14, r1
    2966:	f1 04       	cpc	r15, r1
    2968:	89 f0       	breq	.+34     	; 0x298c <xTaskGenericNotify+0x42>
    296a:	e6 2f       	mov	r30, r22
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	e8 0f       	add	r30, r24
    2978:	f9 1f       	adc	r31, r25
    297a:	87 a4       	ldd	r8, Z+47	; 0x2f
    297c:	90 a8       	ldd	r9, Z+48	; 0x30
    297e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2980:	b2 a8       	ldd	r11, Z+50	; 0x32
    2982:	f7 01       	movw	r30, r14
    2984:	80 82       	st	Z, r8
    2986:	91 82       	std	Z+1, r9	; 0x01
    2988:	a2 82       	std	Z+2, r10	; 0x02
    298a:	b3 82       	std	Z+3, r11	; 0x03
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	fd 01       	movw	r30, r26
    2990:	e6 0f       	add	r30, r22
    2992:	f7 1f       	adc	r31, r23
    2994:	83 a9       	ldd	r24, Z+51	; 0x33
    2996:	92 e0       	ldi	r25, 0x02	; 2
    2998:	93 ab       	std	Z+51, r25	; 0x33
    299a:	02 30       	cpi	r16, 0x02	; 2
    299c:	01 f1       	breq	.+64     	; 0x29de <xTaskGenericNotify+0x94>
    299e:	18 f4       	brcc	.+6      	; 0x29a6 <xTaskGenericNotify+0x5c>
    29a0:	01 30       	cpi	r16, 0x01	; 1
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <xTaskGenericNotify+0x66>
    29a4:	4d c0       	rjmp	.+154    	; 0x2a40 <xTaskGenericNotify+0xf6>
    29a6:	03 30       	cpi	r16, 0x03	; 3
    29a8:	79 f1       	breq	.+94     	; 0x2a08 <xTaskGenericNotify+0xbe>
    29aa:	04 30       	cpi	r16, 0x04	; 4
    29ac:	d1 f1       	breq	.+116    	; 0x2a22 <xTaskGenericNotify+0xd8>
    29ae:	48 c0       	rjmp	.+144    	; 0x2a40 <xTaskGenericNotify+0xf6>
    29b0:	66 0f       	add	r22, r22
    29b2:	77 1f       	adc	r23, r23
    29b4:	66 0f       	add	r22, r22
    29b6:	77 1f       	adc	r23, r23
    29b8:	fd 01       	movw	r30, r26
    29ba:	e6 0f       	add	r30, r22
    29bc:	f7 1f       	adc	r31, r23
    29be:	87 a4       	ldd	r8, Z+47	; 0x2f
    29c0:	90 a8       	ldd	r9, Z+48	; 0x30
    29c2:	a1 a8       	ldd	r10, Z+49	; 0x31
    29c4:	b2 a8       	ldd	r11, Z+50	; 0x32
    29c6:	ba 01       	movw	r22, r20
    29c8:	a9 01       	movw	r20, r18
    29ca:	48 29       	or	r20, r8
    29cc:	59 29       	or	r21, r9
    29ce:	6a 29       	or	r22, r10
    29d0:	7b 29       	or	r23, r11
    29d2:	47 a7       	std	Z+47, r20	; 0x2f
    29d4:	50 ab       	std	Z+48, r21	; 0x30
    29d6:	61 ab       	std	Z+49, r22	; 0x31
    29d8:	72 ab       	std	Z+50, r23	; 0x32
    29da:	01 e0       	ldi	r16, 0x01	; 1
    29dc:	34 c0       	rjmp	.+104    	; 0x2a46 <xTaskGenericNotify+0xfc>
    29de:	66 0f       	add	r22, r22
    29e0:	77 1f       	adc	r23, r23
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	fd 01       	movw	r30, r26
    29e8:	e6 0f       	add	r30, r22
    29ea:	f7 1f       	adc	r31, r23
    29ec:	47 a5       	ldd	r20, Z+47	; 0x2f
    29ee:	50 a9       	ldd	r21, Z+48	; 0x30
    29f0:	61 a9       	ldd	r22, Z+49	; 0x31
    29f2:	72 a9       	ldd	r23, Z+50	; 0x32
    29f4:	4f 5f       	subi	r20, 0xFF	; 255
    29f6:	5f 4f       	sbci	r21, 0xFF	; 255
    29f8:	6f 4f       	sbci	r22, 0xFF	; 255
    29fa:	7f 4f       	sbci	r23, 0xFF	; 255
    29fc:	47 a7       	std	Z+47, r20	; 0x2f
    29fe:	50 ab       	std	Z+48, r21	; 0x30
    2a00:	61 ab       	std	Z+49, r22	; 0x31
    2a02:	72 ab       	std	Z+50, r23	; 0x32
    2a04:	01 e0       	ldi	r16, 0x01	; 1
    2a06:	1f c0       	rjmp	.+62     	; 0x2a46 <xTaskGenericNotify+0xfc>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	66 0f       	add	r22, r22
    2a0e:	77 1f       	adc	r23, r23
    2a10:	fd 01       	movw	r30, r26
    2a12:	e6 0f       	add	r30, r22
    2a14:	f7 1f       	adc	r31, r23
    2a16:	27 a7       	std	Z+47, r18	; 0x2f
    2a18:	30 ab       	std	Z+48, r19	; 0x30
    2a1a:	41 ab       	std	Z+49, r20	; 0x31
    2a1c:	52 ab       	std	Z+50, r21	; 0x32
    2a1e:	01 e0       	ldi	r16, 0x01	; 1
    2a20:	12 c0       	rjmp	.+36     	; 0x2a46 <xTaskGenericNotify+0xfc>
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	79 f0       	breq	.+30     	; 0x2a44 <xTaskGenericNotify+0xfa>
    2a26:	66 0f       	add	r22, r22
    2a28:	77 1f       	adc	r23, r23
    2a2a:	66 0f       	add	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	fd 01       	movw	r30, r26
    2a30:	e6 0f       	add	r30, r22
    2a32:	f7 1f       	adc	r31, r23
    2a34:	27 a7       	std	Z+47, r18	; 0x2f
    2a36:	30 ab       	std	Z+48, r19	; 0x30
    2a38:	41 ab       	std	Z+49, r20	; 0x31
    2a3a:	52 ab       	std	Z+50, r21	; 0x32
    2a3c:	01 e0       	ldi	r16, 0x01	; 1
    2a3e:	03 c0       	rjmp	.+6      	; 0x2a46 <xTaskGenericNotify+0xfc>
    2a40:	01 e0       	ldi	r16, 0x01	; 1
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <xTaskGenericNotify+0xfc>
    2a44:	00 e0       	ldi	r16, 0x00	; 0
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <xTaskGenericNotify+0x102>
    2a4a:	69 c0       	rjmp	.+210    	; 0x2b1e <xTaskGenericNotify+0x1d4>
    2a4c:	1c 96       	adiw	r26, 0x0c	; 12
    2a4e:	ed 91       	ld	r30, X+
    2a50:	fc 91       	ld	r31, X
    2a52:	1d 97       	sbiw	r26, 0x0d	; 13
    2a54:	16 96       	adiw	r26, 0x06	; 6
    2a56:	cd 91       	ld	r28, X+
    2a58:	dc 91       	ld	r29, X
    2a5a:	17 97       	sbiw	r26, 0x07	; 7
    2a5c:	18 96       	adiw	r26, 0x08	; 8
    2a5e:	8d 91       	ld	r24, X+
    2a60:	9c 91       	ld	r25, X
    2a62:	19 97       	sbiw	r26, 0x09	; 9
    2a64:	9f 83       	std	Y+7, r25	; 0x07
    2a66:	8e 83       	std	Y+6, r24	; 0x06
    2a68:	18 96       	adiw	r26, 0x08	; 8
    2a6a:	cd 91       	ld	r28, X+
    2a6c:	dc 91       	ld	r29, X
    2a6e:	19 97       	sbiw	r26, 0x09	; 9
    2a70:	16 96       	adiw	r26, 0x06	; 6
    2a72:	8d 91       	ld	r24, X+
    2a74:	9c 91       	ld	r25, X
    2a76:	17 97       	sbiw	r26, 0x07	; 7
    2a78:	9d 83       	std	Y+5, r25	; 0x05
    2a7a:	8c 83       	std	Y+4, r24	; 0x04
    2a7c:	81 81       	ldd	r24, Z+1	; 0x01
    2a7e:	92 81       	ldd	r25, Z+2	; 0x02
    2a80:	9d 01       	movw	r18, r26
    2a82:	2e 5f       	subi	r18, 0xFE	; 254
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	82 17       	cp	r24, r18
    2a88:	93 07       	cpc	r25, r19
    2a8a:	31 f4       	brne	.+12     	; 0x2a98 <xTaskGenericNotify+0x14e>
    2a8c:	18 96       	adiw	r26, 0x08	; 8
    2a8e:	8d 91       	ld	r24, X+
    2a90:	9c 91       	ld	r25, X
    2a92:	19 97       	sbiw	r26, 0x09	; 9
    2a94:	92 83       	std	Z+2, r25	; 0x02
    2a96:	81 83       	std	Z+1, r24	; 0x01
    2a98:	1d 96       	adiw	r26, 0x0d	; 13
    2a9a:	1c 92       	st	X, r1
    2a9c:	1e 92       	st	-X, r1
    2a9e:	1c 97       	sbiw	r26, 0x0c	; 12
    2aa0:	80 81       	ld	r24, Z
    2aa2:	81 50       	subi	r24, 0x01	; 1
    2aa4:	80 83       	st	Z, r24
    2aa6:	5a 96       	adiw	r26, 0x1a	; 26
    2aa8:	ec 91       	ld	r30, X
    2aaa:	5a 97       	sbiw	r26, 0x1a	; 26
    2aac:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    2ab0:	8e 17       	cp	r24, r30
    2ab2:	10 f4       	brcc	.+4      	; 0x2ab8 <xTaskGenericNotify+0x16e>
    2ab4:	e0 93 bf 14 	sts	0x14BF, r30	; 0x8014bf <uxTopReadyPriority>
    2ab8:	8b e0       	ldi	r24, 0x0B	; 11
    2aba:	8e 9f       	mul	r24, r30
    2abc:	f0 01       	movw	r30, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	ef 5f       	subi	r30, 0xFF	; 255
    2ac2:	fa 4e       	sbci	r31, 0xEA	; 234
    2ac4:	01 80       	ldd	r0, Z+1	; 0x01
    2ac6:	f2 81       	ldd	r31, Z+2	; 0x02
    2ac8:	e0 2d       	mov	r30, r0
    2aca:	17 96       	adiw	r26, 0x07	; 7
    2acc:	fc 93       	st	X, r31
    2ace:	ee 93       	st	-X, r30
    2ad0:	16 97       	sbiw	r26, 0x06	; 6
    2ad2:	46 81       	ldd	r20, Z+6	; 0x06
    2ad4:	57 81       	ldd	r21, Z+7	; 0x07
    2ad6:	19 96       	adiw	r26, 0x09	; 9
    2ad8:	5c 93       	st	X, r21
    2ada:	4e 93       	st	-X, r20
    2adc:	18 97       	sbiw	r26, 0x08	; 8
    2ade:	c6 81       	ldd	r28, Z+6	; 0x06
    2ae0:	d7 81       	ldd	r29, Z+7	; 0x07
    2ae2:	3d 83       	std	Y+5, r19	; 0x05
    2ae4:	2c 83       	std	Y+4, r18	; 0x04
    2ae6:	37 83       	std	Z+7, r19	; 0x07
    2ae8:	26 83       	std	Z+6, r18	; 0x06
    2aea:	5a 96       	adiw	r26, 0x1a	; 26
    2aec:	ec 91       	ld	r30, X
    2aee:	5a 97       	sbiw	r26, 0x1a	; 26
    2af0:	8e 9f       	mul	r24, r30
    2af2:	f0 01       	movw	r30, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	ef 5f       	subi	r30, 0xFF	; 255
    2af8:	fa 4e       	sbci	r31, 0xEA	; 234
    2afa:	1d 96       	adiw	r26, 0x0d	; 13
    2afc:	fc 93       	st	X, r31
    2afe:	ee 93       	st	-X, r30
    2b00:	1c 97       	sbiw	r26, 0x0c	; 12
    2b02:	80 81       	ld	r24, Z
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	80 83       	st	Z, r24
    2b08:	5a 96       	adiw	r26, 0x1a	; 26
    2b0a:	9c 91       	ld	r25, X
    2b0c:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    2b10:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b16:	89 17       	cp	r24, r25
    2b18:	10 f4       	brcc	.+4      	; 0x2b1e <xTaskGenericNotify+0x1d4>
    2b1a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    2b1e:	0f 90       	pop	r0
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	80 2f       	mov	r24, r16
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	ef 90       	pop	r14
    2b2e:	bf 90       	pop	r11
    2b30:	af 90       	pop	r10
    2b32:	9f 90       	pop	r9
    2b34:	8f 90       	pop	r8
    2b36:	08 95       	ret

00002b38 <xTaskGenericNotifyFromISR>:
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	dc 01       	movw	r26, r24
    2b50:	e1 14       	cp	r14, r1
    2b52:	f1 04       	cpc	r15, r1
    2b54:	89 f0       	breq	.+34     	; 0x2b78 <xTaskGenericNotifyFromISR+0x40>
    2b56:	e6 2f       	mov	r30, r22
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	ee 0f       	add	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	ee 0f       	add	r30, r30
    2b60:	ff 1f       	adc	r31, r31
    2b62:	e8 0f       	add	r30, r24
    2b64:	f9 1f       	adc	r31, r25
    2b66:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b68:	90 a8       	ldd	r9, Z+48	; 0x30
    2b6a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b6c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b6e:	f7 01       	movw	r30, r14
    2b70:	80 82       	st	Z, r8
    2b72:	91 82       	std	Z+1, r9	; 0x01
    2b74:	a2 82       	std	Z+2, r10	; 0x02
    2b76:	b3 82       	std	Z+3, r11	; 0x03
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	fd 01       	movw	r30, r26
    2b7c:	e6 0f       	add	r30, r22
    2b7e:	f7 1f       	adc	r31, r23
    2b80:	93 a9       	ldd	r25, Z+51	; 0x33
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	83 ab       	std	Z+51, r24	; 0x33
    2b86:	02 30       	cpi	r16, 0x02	; 2
    2b88:	01 f1       	breq	.+64     	; 0x2bca <xTaskGenericNotifyFromISR+0x92>
    2b8a:	18 f4       	brcc	.+6      	; 0x2b92 <xTaskGenericNotifyFromISR+0x5a>
    2b8c:	01 30       	cpi	r16, 0x01	; 1
    2b8e:	31 f0       	breq	.+12     	; 0x2b9c <xTaskGenericNotifyFromISR+0x64>
    2b90:	4d c0       	rjmp	.+154    	; 0x2c2c <xTaskGenericNotifyFromISR+0xf4>
    2b92:	03 30       	cpi	r16, 0x03	; 3
    2b94:	79 f1       	breq	.+94     	; 0x2bf4 <xTaskGenericNotifyFromISR+0xbc>
    2b96:	04 30       	cpi	r16, 0x04	; 4
    2b98:	d1 f1       	breq	.+116    	; 0x2c0e <xTaskGenericNotifyFromISR+0xd6>
    2b9a:	48 c0       	rjmp	.+144    	; 0x2c2c <xTaskGenericNotifyFromISR+0xf4>
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	66 0f       	add	r22, r22
    2ba2:	77 1f       	adc	r23, r23
    2ba4:	fd 01       	movw	r30, r26
    2ba6:	e6 0f       	add	r30, r22
    2ba8:	f7 1f       	adc	r31, r23
    2baa:	87 a4       	ldd	r8, Z+47	; 0x2f
    2bac:	90 a8       	ldd	r9, Z+48	; 0x30
    2bae:	a1 a8       	ldd	r10, Z+49	; 0x31
    2bb0:	b2 a8       	ldd	r11, Z+50	; 0x32
    2bb2:	ba 01       	movw	r22, r20
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	48 29       	or	r20, r8
    2bb8:	59 29       	or	r21, r9
    2bba:	6a 29       	or	r22, r10
    2bbc:	7b 29       	or	r23, r11
    2bbe:	47 a7       	std	Z+47, r20	; 0x2f
    2bc0:	50 ab       	std	Z+48, r21	; 0x30
    2bc2:	61 ab       	std	Z+49, r22	; 0x31
    2bc4:	72 ab       	std	Z+50, r23	; 0x32
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	34 c0       	rjmp	.+104    	; 0x2c32 <xTaskGenericNotifyFromISR+0xfa>
    2bca:	66 0f       	add	r22, r22
    2bcc:	77 1f       	adc	r23, r23
    2bce:	66 0f       	add	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	fd 01       	movw	r30, r26
    2bd4:	e6 0f       	add	r30, r22
    2bd6:	f7 1f       	adc	r31, r23
    2bd8:	47 a5       	ldd	r20, Z+47	; 0x2f
    2bda:	50 a9       	ldd	r21, Z+48	; 0x30
    2bdc:	61 a9       	ldd	r22, Z+49	; 0x31
    2bde:	72 a9       	ldd	r23, Z+50	; 0x32
    2be0:	4f 5f       	subi	r20, 0xFF	; 255
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	6f 4f       	sbci	r22, 0xFF	; 255
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	47 a7       	std	Z+47, r20	; 0x2f
    2bea:	50 ab       	std	Z+48, r21	; 0x30
    2bec:	61 ab       	std	Z+49, r22	; 0x31
    2bee:	72 ab       	std	Z+50, r23	; 0x32
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	1f c0       	rjmp	.+62     	; 0x2c32 <xTaskGenericNotifyFromISR+0xfa>
    2bf4:	66 0f       	add	r22, r22
    2bf6:	77 1f       	adc	r23, r23
    2bf8:	66 0f       	add	r22, r22
    2bfa:	77 1f       	adc	r23, r23
    2bfc:	fd 01       	movw	r30, r26
    2bfe:	e6 0f       	add	r30, r22
    2c00:	f7 1f       	adc	r31, r23
    2c02:	27 a7       	std	Z+47, r18	; 0x2f
    2c04:	30 ab       	std	Z+48, r19	; 0x30
    2c06:	41 ab       	std	Z+49, r20	; 0x31
    2c08:	52 ab       	std	Z+50, r21	; 0x32
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	12 c0       	rjmp	.+36     	; 0x2c32 <xTaskGenericNotifyFromISR+0xfa>
    2c0e:	92 30       	cpi	r25, 0x02	; 2
    2c10:	79 f0       	breq	.+30     	; 0x2c30 <xTaskGenericNotifyFromISR+0xf8>
    2c12:	66 0f       	add	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	fd 01       	movw	r30, r26
    2c1c:	e6 0f       	add	r30, r22
    2c1e:	f7 1f       	adc	r31, r23
    2c20:	27 a7       	std	Z+47, r18	; 0x2f
    2c22:	30 ab       	std	Z+48, r19	; 0x30
    2c24:	41 ab       	std	Z+49, r20	; 0x31
    2c26:	52 ab       	std	Z+50, r21	; 0x32
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <xTaskGenericNotifyFromISR+0xfa>
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <xTaskGenericNotifyFromISR+0xfa>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	91 30       	cpi	r25, 0x01	; 1
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <xTaskGenericNotifyFromISR+0x100>
    2c36:	96 c0       	rjmp	.+300    	; 0x2d64 <xTaskGenericNotifyFromISR+0x22c>
    2c38:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <uxSchedulerSuspended>
    2c3c:	91 11       	cpse	r25, r1
    2c3e:	5f c0       	rjmp	.+190    	; 0x2cfe <xTaskGenericNotifyFromISR+0x1c6>
    2c40:	1c 96       	adiw	r26, 0x0c	; 12
    2c42:	ed 91       	ld	r30, X+
    2c44:	fc 91       	ld	r31, X
    2c46:	1d 97       	sbiw	r26, 0x0d	; 13
    2c48:	16 96       	adiw	r26, 0x06	; 6
    2c4a:	cd 91       	ld	r28, X+
    2c4c:	dc 91       	ld	r29, X
    2c4e:	17 97       	sbiw	r26, 0x07	; 7
    2c50:	18 96       	adiw	r26, 0x08	; 8
    2c52:	2d 91       	ld	r18, X+
    2c54:	3c 91       	ld	r19, X
    2c56:	19 97       	sbiw	r26, 0x09	; 9
    2c58:	3f 83       	std	Y+7, r19	; 0x07
    2c5a:	2e 83       	std	Y+6, r18	; 0x06
    2c5c:	18 96       	adiw	r26, 0x08	; 8
    2c5e:	cd 91       	ld	r28, X+
    2c60:	dc 91       	ld	r29, X
    2c62:	19 97       	sbiw	r26, 0x09	; 9
    2c64:	16 96       	adiw	r26, 0x06	; 6
    2c66:	2d 91       	ld	r18, X+
    2c68:	3c 91       	ld	r19, X
    2c6a:	17 97       	sbiw	r26, 0x07	; 7
    2c6c:	3d 83       	std	Y+5, r19	; 0x05
    2c6e:	2c 83       	std	Y+4, r18	; 0x04
    2c70:	41 81       	ldd	r20, Z+1	; 0x01
    2c72:	52 81       	ldd	r21, Z+2	; 0x02
    2c74:	9d 01       	movw	r18, r26
    2c76:	2e 5f       	subi	r18, 0xFE	; 254
    2c78:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7a:	42 17       	cp	r20, r18
    2c7c:	53 07       	cpc	r21, r19
    2c7e:	31 f4       	brne	.+12     	; 0x2c8c <xTaskGenericNotifyFromISR+0x154>
    2c80:	18 96       	adiw	r26, 0x08	; 8
    2c82:	4d 91       	ld	r20, X+
    2c84:	5c 91       	ld	r21, X
    2c86:	19 97       	sbiw	r26, 0x09	; 9
    2c88:	52 83       	std	Z+2, r21	; 0x02
    2c8a:	41 83       	std	Z+1, r20	; 0x01
    2c8c:	1d 96       	adiw	r26, 0x0d	; 13
    2c8e:	1c 92       	st	X, r1
    2c90:	1e 92       	st	-X, r1
    2c92:	1c 97       	sbiw	r26, 0x0c	; 12
    2c94:	90 81       	ld	r25, Z
    2c96:	91 50       	subi	r25, 0x01	; 1
    2c98:	90 83       	st	Z, r25
    2c9a:	5a 96       	adiw	r26, 0x1a	; 26
    2c9c:	ec 91       	ld	r30, X
    2c9e:	5a 97       	sbiw	r26, 0x1a	; 26
    2ca0:	90 91 bf 14 	lds	r25, 0x14BF	; 0x8014bf <uxTopReadyPriority>
    2ca4:	9e 17       	cp	r25, r30
    2ca6:	10 f4       	brcc	.+4      	; 0x2cac <xTaskGenericNotifyFromISR+0x174>
    2ca8:	e0 93 bf 14 	sts	0x14BF, r30	; 0x8014bf <uxTopReadyPriority>
    2cac:	9b e0       	ldi	r25, 0x0B	; 11
    2cae:	9e 9f       	mul	r25, r30
    2cb0:	f0 01       	movw	r30, r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	ef 5f       	subi	r30, 0xFF	; 255
    2cb6:	fa 4e       	sbci	r31, 0xEA	; 234
    2cb8:	01 80       	ldd	r0, Z+1	; 0x01
    2cba:	f2 81       	ldd	r31, Z+2	; 0x02
    2cbc:	e0 2d       	mov	r30, r0
    2cbe:	17 96       	adiw	r26, 0x07	; 7
    2cc0:	fc 93       	st	X, r31
    2cc2:	ee 93       	st	-X, r30
    2cc4:	16 97       	sbiw	r26, 0x06	; 6
    2cc6:	46 81       	ldd	r20, Z+6	; 0x06
    2cc8:	57 81       	ldd	r21, Z+7	; 0x07
    2cca:	19 96       	adiw	r26, 0x09	; 9
    2ccc:	5c 93       	st	X, r21
    2cce:	4e 93       	st	-X, r20
    2cd0:	18 97       	sbiw	r26, 0x08	; 8
    2cd2:	c6 81       	ldd	r28, Z+6	; 0x06
    2cd4:	d7 81       	ldd	r29, Z+7	; 0x07
    2cd6:	3d 83       	std	Y+5, r19	; 0x05
    2cd8:	2c 83       	std	Y+4, r18	; 0x04
    2cda:	37 83       	std	Z+7, r19	; 0x07
    2cdc:	26 83       	std	Z+6, r18	; 0x06
    2cde:	5a 96       	adiw	r26, 0x1a	; 26
    2ce0:	ec 91       	ld	r30, X
    2ce2:	5a 97       	sbiw	r26, 0x1a	; 26
    2ce4:	9e 9f       	mul	r25, r30
    2ce6:	f0 01       	movw	r30, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	ef 5f       	subi	r30, 0xFF	; 255
    2cec:	fa 4e       	sbci	r31, 0xEA	; 234
    2cee:	1d 96       	adiw	r26, 0x0d	; 13
    2cf0:	fc 93       	st	X, r31
    2cf2:	ee 93       	st	-X, r30
    2cf4:	1c 97       	sbiw	r26, 0x0c	; 12
    2cf6:	90 81       	ld	r25, Z
    2cf8:	9f 5f       	subi	r25, 0xFF	; 255
    2cfa:	90 83       	st	Z, r25
    2cfc:	21 c0       	rjmp	.+66     	; 0x2d40 <xTaskGenericNotifyFromISR+0x208>
    2cfe:	6c ed       	ldi	r22, 0xDC	; 220
    2d00:	74 e1       	ldi	r23, 0x14	; 20
    2d02:	fb 01       	movw	r30, r22
    2d04:	c1 81       	ldd	r28, Z+1	; 0x01
    2d06:	d2 81       	ldd	r29, Z+2	; 0x02
    2d08:	53 96       	adiw	r26, 0x13	; 19
    2d0a:	dc 93       	st	X, r29
    2d0c:	ce 93       	st	-X, r28
    2d0e:	52 97       	sbiw	r26, 0x12	; 18
    2d10:	2e 81       	ldd	r18, Y+6	; 0x06
    2d12:	3f 81       	ldd	r19, Y+7	; 0x07
    2d14:	55 96       	adiw	r26, 0x15	; 21
    2d16:	3c 93       	st	X, r19
    2d18:	2e 93       	st	-X, r18
    2d1a:	54 97       	sbiw	r26, 0x14	; 20
    2d1c:	4e 81       	ldd	r20, Y+6	; 0x06
    2d1e:	5f 81       	ldd	r21, Y+7	; 0x07
    2d20:	9d 01       	movw	r18, r26
    2d22:	22 5f       	subi	r18, 0xF2	; 242
    2d24:	3f 4f       	sbci	r19, 0xFF	; 255
    2d26:	fa 01       	movw	r30, r20
    2d28:	35 83       	std	Z+5, r19	; 0x05
    2d2a:	24 83       	std	Z+4, r18	; 0x04
    2d2c:	3f 83       	std	Y+7, r19	; 0x07
    2d2e:	2e 83       	std	Y+6, r18	; 0x06
    2d30:	59 96       	adiw	r26, 0x19	; 25
    2d32:	7c 93       	st	X, r23
    2d34:	6e 93       	st	-X, r22
    2d36:	58 97       	sbiw	r26, 0x18	; 24
    2d38:	fb 01       	movw	r30, r22
    2d3a:	90 81       	ld	r25, Z
    2d3c:	9f 5f       	subi	r25, 0xFF	; 255
    2d3e:	90 83       	st	Z, r25
    2d40:	5a 96       	adiw	r26, 0x1a	; 26
    2d42:	2c 91       	ld	r18, X
    2d44:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxCurrentTCB>
    2d48:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxCurrentTCB+0x1>
    2d4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d4e:	92 17       	cp	r25, r18
    2d50:	48 f4       	brcc	.+18     	; 0x2d64 <xTaskGenericNotifyFromISR+0x22c>
    2d52:	c1 14       	cp	r12, r1
    2d54:	d1 04       	cpc	r13, r1
    2d56:	19 f0       	breq	.+6      	; 0x2d5e <xTaskGenericNotifyFromISR+0x226>
    2d58:	91 e0       	ldi	r25, 0x01	; 1
    2d5a:	f6 01       	movw	r30, r12
    2d5c:	90 83       	st	Z, r25
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	90 93 b9 14 	sts	0x14B9, r25	; 0x8014b9 <xYieldPending>
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	9f 90       	pop	r9
    2d78:	8f 90       	pop	r8
    2d7a:	08 95       	ret

00002d7c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	21 f4       	brne	.+8      	; 0x2d88 <xTaskGenericNotifyStateClear+0xc>
    2d80:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxCurrentTCB>
    2d84:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	fc 01       	movw	r30, r24
    2d92:	e6 0f       	add	r30, r22
    2d94:	f7 1f       	adc	r31, r23
    2d96:	23 a9       	ldd	r18, Z+51	; 0x33
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	31 f4       	brne	.+12     	; 0x2da8 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	e6 0f       	add	r30, r22
    2da0:	f7 1f       	adc	r31, r23
    2da2:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2da8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2daa:	0f 90       	pop	r0
    2dac:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2dae:	08 95       	ret

00002db0 <prvGetNextExpireTime>:
    2db0:	dc 01       	movw	r26, r24
    2db2:	e0 91 7b 15 	lds	r30, 0x157B	; 0x80157b <pxCurrentTimerList>
    2db6:	f0 91 7c 15 	lds	r31, 0x157C	; 0x80157c <pxCurrentTimerList+0x1>
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9c 93       	st	X, r25
    2dc4:	91 11       	cpse	r25, r1
    2dc6:	08 c0       	rjmp	.+16     	; 0x2dd8 <prvGetNextExpireTime+0x28>
    2dc8:	07 80       	ldd	r0, Z+7	; 0x07
    2dca:	f0 85       	ldd	r31, Z+8	; 0x08
    2dcc:	e0 2d       	mov	r30, r0
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	08 95       	ret
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	cb 01       	movw	r24, r22
    2dde:	08 95       	ret

00002de0 <prvInsertTimerInActiveList>:
    2de0:	cf 92       	push	r12
    2de2:	df 92       	push	r13
    2de4:	ef 92       	push	r14
    2de6:	ff 92       	push	r15
    2de8:	0f 93       	push	r16
    2dea:	1f 93       	push	r17
    2dec:	fc 01       	movw	r30, r24
    2dee:	42 83       	std	Z+2, r20	; 0x02
    2df0:	53 83       	std	Z+3, r21	; 0x03
    2df2:	64 83       	std	Z+4, r22	; 0x04
    2df4:	75 83       	std	Z+5, r23	; 0x05
    2df6:	93 87       	std	Z+11, r25	; 0x0b
    2df8:	82 87       	std	Z+10, r24	; 0x0a
    2dfa:	04 17       	cp	r16, r20
    2dfc:	15 07       	cpc	r17, r21
    2dfe:	26 07       	cpc	r18, r22
    2e00:	37 07       	cpc	r19, r23
    2e02:	c0 f0       	brcs	.+48     	; 0x2e34 <prvInsertTimerInActiveList+0x54>
    2e04:	0c 19       	sub	r16, r12
    2e06:	1d 09       	sbc	r17, r13
    2e08:	2e 09       	sbc	r18, r14
    2e0a:	3f 09       	sbc	r19, r15
    2e0c:	86 85       	ldd	r24, Z+14	; 0x0e
    2e0e:	97 85       	ldd	r25, Z+15	; 0x0f
    2e10:	a0 89       	ldd	r26, Z+16	; 0x10
    2e12:	b1 89       	ldd	r27, Z+17	; 0x11
    2e14:	08 17       	cp	r16, r24
    2e16:	19 07       	cpc	r17, r25
    2e18:	2a 07       	cpc	r18, r26
    2e1a:	3b 07       	cpc	r19, r27
    2e1c:	00 f5       	brcc	.+64     	; 0x2e5e <prvInsertTimerInActiveList+0x7e>
    2e1e:	bf 01       	movw	r22, r30
    2e20:	6e 5f       	subi	r22, 0xFE	; 254
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	80 91 79 15 	lds	r24, 0x1579	; 0x801579 <pxOverflowTimerList>
    2e28:	90 91 7a 15 	lds	r25, 0x157A	; 0x80157a <pxOverflowTimerList+0x1>
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <vListInsert>
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	18 c0       	rjmp	.+48     	; 0x2e64 <prvInsertTimerInActiveList+0x84>
    2e34:	0c 15       	cp	r16, r12
    2e36:	1d 05       	cpc	r17, r13
    2e38:	2e 05       	cpc	r18, r14
    2e3a:	3f 05       	cpc	r19, r15
    2e3c:	28 f4       	brcc	.+10     	; 0x2e48 <prvInsertTimerInActiveList+0x68>
    2e3e:	4c 15       	cp	r20, r12
    2e40:	5d 05       	cpc	r21, r13
    2e42:	6e 05       	cpc	r22, r14
    2e44:	7f 05       	cpc	r23, r15
    2e46:	68 f4       	brcc	.+26     	; 0x2e62 <prvInsertTimerInActiveList+0x82>
    2e48:	bf 01       	movw	r22, r30
    2e4a:	6e 5f       	subi	r22, 0xFE	; 254
    2e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4e:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <pxCurrentTimerList>
    2e52:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <pxCurrentTimerList+0x1>
    2e56:	0e 94 c5 03 	call	0x78a	; 0x78a <vListInsert>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <prvInsertTimerInActiveList+0x84>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <prvInsertTimerInActiveList+0x84>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	ff 90       	pop	r15
    2e6a:	ef 90       	pop	r14
    2e6c:	df 90       	pop	r13
    2e6e:	cf 90       	pop	r12
    2e70:	08 95       	ret

00002e72 <prvCheckForValidListAndQueue>:
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	0f 92       	push	r0
    2e78:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <xTimerQueue>
    2e7c:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <xTimerQueue+0x1>
    2e80:	89 2b       	or	r24, r25
    2e82:	e9 f4       	brne	.+58     	; 0x2ebe <prvCheckForValidListAndQueue+0x4c>
    2e84:	88 e8       	ldi	r24, 0x88	; 136
    2e86:	95 e1       	ldi	r25, 0x15	; 21
    2e88:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    2e8c:	8d e7       	ldi	r24, 0x7D	; 125
    2e8e:	95 e1       	ldi	r25, 0x15	; 21
    2e90:	0e 94 b0 03 	call	0x760	; 0x760 <vListInitialise>
    2e94:	88 e8       	ldi	r24, 0x88	; 136
    2e96:	95 e1       	ldi	r25, 0x15	; 21
    2e98:	90 93 7c 15 	sts	0x157C, r25	; 0x80157c <pxCurrentTimerList+0x1>
    2e9c:	80 93 7b 15 	sts	0x157B, r24	; 0x80157b <pxCurrentTimerList>
    2ea0:	8d e7       	ldi	r24, 0x7D	; 125
    2ea2:	95 e1       	ldi	r25, 0x15	; 21
    2ea4:	90 93 7a 15 	sts	0x157A, r25	; 0x80157a <pxOverflowTimerList+0x1>
    2ea8:	80 93 79 15 	sts	0x1579, r24	; 0x801579 <pxOverflowTimerList>
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	67 e0       	ldi	r22, 0x07	; 7
    2eb0:	8a e0       	ldi	r24, 0x0A	; 10
    2eb2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <xQueueGenericCreate>
    2eb6:	90 93 78 15 	sts	0x1578, r25	; 0x801578 <xTimerQueue+0x1>
    2eba:	80 93 77 15 	sts	0x1577, r24	; 0x801577 <xTimerQueue>
    2ebe:	0f 90       	pop	r0
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	08 95       	ret

00002ec4 <xTimerCreateTimerTask>:
    2ec4:	ef 92       	push	r14
    2ec6:	ff 92       	push	r15
    2ec8:	0f 93       	push	r16
    2eca:	d3 df       	rcall	.-90     	; 0x2e72 <prvCheckForValidListAndQueue>
    2ecc:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <xTimerQueue>
    2ed0:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <xTimerQueue+0x1>
    2ed4:	89 2b       	or	r24, r25
    2ed6:	91 f0       	breq	.+36     	; 0x2efc <xTimerCreateTimerTask+0x38>
    2ed8:	0f 2e       	mov	r0, r31
    2eda:	f5 e7       	ldi	r31, 0x75	; 117
    2edc:	ef 2e       	mov	r14, r31
    2ede:	f5 e1       	ldi	r31, 0x15	; 21
    2ee0:	ff 2e       	mov	r15, r31
    2ee2:	f0 2d       	mov	r31, r0
    2ee4:	03 e0       	ldi	r16, 0x03	; 3
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 ec       	ldi	r20, 0xC0	; 192
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	67 e4       	ldi	r22, 0x47	; 71
    2ef0:	72 e0       	ldi	r23, 0x02	; 2
    2ef2:	87 ed       	ldi	r24, 0xD7	; 215
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xTaskCreate>
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <xTimerCreateTimerTask+0x3a>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	ef 90       	pop	r14
    2f04:	08 95       	ret

00002f06 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2f06:	8f 92       	push	r8
    2f08:	9f 92       	push	r9
    2f0a:	af 92       	push	r10
    2f0c:	bf 92       	push	r11
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	27 97       	sbiw	r28, 0x07	; 7
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2f2e:	e0 91 77 15 	lds	r30, 0x1577	; 0x801577 <xTimerQueue>
    2f32:	f0 91 78 15 	lds	r31, 0x1578	; 0x801578 <xTimerQueue+0x1>
    2f36:	30 97       	sbiw	r30, 0x00	; 0
    2f38:	81 f1       	breq	.+96     	; 0x2f9a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2f3a:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f3c:	2a 83       	std	Y+2, r18	; 0x02
    2f3e:	3b 83       	std	Y+3, r19	; 0x03
    2f40:	4c 83       	std	Y+4, r20	; 0x04
    2f42:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2f44:	9f 83       	std	Y+7, r25	; 0x07
    2f46:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f48:	66 30       	cpi	r22, 0x06	; 6
    2f4a:	f4 f4       	brge	.+60     	; 0x2f88 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f4c:	c4 db       	rcall	.-2168   	; 0x26d6 <xTaskGetSchedulerState>
    2f4e:	82 30       	cpi	r24, 0x02	; 2
    2f50:	69 f4       	brne	.+26     	; 0x2f6c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f52:	00 e0       	ldi	r16, 0x00	; 0
    2f54:	a7 01       	movw	r20, r14
    2f56:	96 01       	movw	r18, r12
    2f58:	be 01       	movw	r22, r28
    2f5a:	6f 5f       	subi	r22, 0xFF	; 255
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <xTimerQueue>
    2f62:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <xTimerQueue+0x1>
    2f66:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericSend>
    2f6a:	18 c0       	rjmp	.+48     	; 0x2f9c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f6c:	00 e0       	ldi	r16, 0x00	; 0
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	a9 01       	movw	r20, r18
    2f74:	be 01       	movw	r22, r28
    2f76:	6f 5f       	subi	r22, 0xFF	; 255
    2f78:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7a:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <xTimerQueue>
    2f7e:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <xTimerQueue+0x1>
    2f82:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericSend>
    2f86:	0a c0       	rjmp	.+20     	; 0x2f9c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	a8 01       	movw	r20, r16
    2f8c:	be 01       	movw	r22, r28
    2f8e:	6f 5f       	subi	r22, 0xFF	; 255
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255
    2f92:	cf 01       	movw	r24, r30
    2f94:	0e 94 36 07 	call	0xe6c	; 0xe6c <xQueueGenericSendFromISR>
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2f9c:	27 96       	adiw	r28, 0x07	; 7
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	ff 90       	pop	r15
    2fb2:	ef 90       	pop	r14
    2fb4:	df 90       	pop	r13
    2fb6:	cf 90       	pop	r12
    2fb8:	bf 90       	pop	r11
    2fba:	af 90       	pop	r10
    2fbc:	9f 90       	pop	r9
    2fbe:	8f 90       	pop	r8
    2fc0:	08 95       	ret

00002fc2 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2fc2:	8f 92       	push	r8
    2fc4:	9f 92       	push	r9
    2fc6:	af 92       	push	r10
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2fda:	3b c0       	rjmp	.+118    	; 0x3052 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2fdc:	07 80       	ldd	r0, Z+7	; 0x07
    2fde:	f0 85       	ldd	r31, Z+8	; 0x08
    2fe0:	e0 2d       	mov	r30, r0
    2fe2:	80 80       	ld	r8, Z
    2fe4:	91 80       	ldd	r9, Z+1	; 0x01
    2fe6:	a2 80       	ldd	r10, Z+2	; 0x02
    2fe8:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2fea:	c0 85       	ldd	r28, Z+8	; 0x08
    2fec:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fee:	8e 01       	movw	r16, r28
    2ff0:	0e 5f       	subi	r16, 0xFE	; 254
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	c8 01       	movw	r24, r16
    2ff6:	0e 94 02 04 	call	0x804	; 0x804 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ffa:	ec 89       	ldd	r30, Y+20	; 0x14
    2ffc:	fd 89       	ldd	r31, Y+21	; 0x15
    2ffe:	ce 01       	movw	r24, r28
    3000:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3002:	8e 89       	ldd	r24, Y+22	; 0x16
    3004:	82 ff       	sbrs	r24, 2
    3006:	25 c0       	rjmp	.+74     	; 0x3052 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3008:	8e 85       	ldd	r24, Y+14	; 0x0e
    300a:	9f 85       	ldd	r25, Y+15	; 0x0f
    300c:	a8 89       	ldd	r26, Y+16	; 0x10
    300e:	b9 89       	ldd	r27, Y+17	; 0x11
    3010:	88 0d       	add	r24, r8
    3012:	99 1d       	adc	r25, r9
    3014:	aa 1d       	adc	r26, r10
    3016:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3018:	88 16       	cp	r8, r24
    301a:	99 06       	cpc	r9, r25
    301c:	aa 06       	cpc	r10, r26
    301e:	bb 06       	cpc	r11, r27
    3020:	70 f4       	brcc	.+28     	; 0x303e <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3022:	8a 83       	std	Y+2, r24	; 0x02
    3024:	9b 83       	std	Y+3, r25	; 0x03
    3026:	ac 83       	std	Y+4, r26	; 0x04
    3028:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    302a:	db 87       	std	Y+11, r29	; 0x0b
    302c:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    302e:	b8 01       	movw	r22, r16
    3030:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <pxCurrentTimerList>
    3034:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <pxCurrentTimerList+0x1>
    3038:	0e 94 c5 03 	call	0x78a	; 0x78a <vListInsert>
    303c:	0a c0       	rjmp	.+20     	; 0x3052 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    303e:	c1 2c       	mov	r12, r1
    3040:	d1 2c       	mov	r13, r1
    3042:	76 01       	movw	r14, r12
    3044:	00 e0       	ldi	r16, 0x00	; 0
    3046:	10 e0       	ldi	r17, 0x00	; 0
    3048:	a5 01       	movw	r20, r10
    304a:	94 01       	movw	r18, r8
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	ce 01       	movw	r24, r28
    3050:	5a df       	rcall	.-332    	; 0x2f06 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3052:	e0 91 7b 15 	lds	r30, 0x157B	; 0x80157b <pxCurrentTimerList>
    3056:	f0 91 7c 15 	lds	r31, 0x157C	; 0x80157c <pxCurrentTimerList+0x1>
    305a:	80 81       	ld	r24, Z
    305c:	81 11       	cpse	r24, r1
    305e:	be cf       	rjmp	.-132    	; 0x2fdc <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3060:	80 91 79 15 	lds	r24, 0x1579	; 0x801579 <pxOverflowTimerList>
    3064:	90 91 7a 15 	lds	r25, 0x157A	; 0x80157a <pxOverflowTimerList+0x1>
    3068:	90 93 7c 15 	sts	0x157C, r25	; 0x80157c <pxCurrentTimerList+0x1>
    306c:	80 93 7b 15 	sts	0x157B, r24	; 0x80157b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3070:	f0 93 7a 15 	sts	0x157A, r31	; 0x80157a <pxOverflowTimerList+0x1>
    3074:	e0 93 79 15 	sts	0x1579, r30	; 0x801579 <pxOverflowTimerList>
    }
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	df 90       	pop	r13
    3086:	cf 90       	pop	r12
    3088:	bf 90       	pop	r11
    308a:	af 90       	pop	r10
    308c:	9f 90       	pop	r9
    308e:	8f 90       	pop	r8
    3090:	08 95       	ret

00003092 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    30a0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <xTaskGetTickCount>
    30a4:	6b 01       	movw	r12, r22
    30a6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    30a8:	80 91 71 15 	lds	r24, 0x1571	; 0x801571 <xLastTime.2436>
    30ac:	90 91 72 15 	lds	r25, 0x1572	; 0x801572 <xLastTime.2436+0x1>
    30b0:	a0 91 73 15 	lds	r26, 0x1573	; 0x801573 <xLastTime.2436+0x2>
    30b4:	b0 91 74 15 	lds	r27, 0x1574	; 0x801574 <xLastTime.2436+0x3>
    30b8:	c8 16       	cp	r12, r24
    30ba:	d9 06       	cpc	r13, r25
    30bc:	ea 06       	cpc	r14, r26
    30be:	fb 06       	cpc	r15, r27
    30c0:	20 f4       	brcc	.+8      	; 0x30ca <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    30c2:	7f df       	rcall	.-258    	; 0x2fc2 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	88 83       	st	Y, r24
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    30ca:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    30cc:	c0 92 71 15 	sts	0x1571, r12	; 0x801571 <xLastTime.2436>
    30d0:	d0 92 72 15 	sts	0x1572, r13	; 0x801572 <xLastTime.2436+0x1>
    30d4:	e0 92 73 15 	sts	0x1573, r14	; 0x801573 <xLastTime.2436+0x2>
    30d8:	f0 92 74 15 	sts	0x1574, r15	; 0x801574 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    30dc:	c7 01       	movw	r24, r14
    30de:	b6 01       	movw	r22, r12
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
    30ec:	08 95       	ret

000030ee <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    30ee:	4f 92       	push	r4
    30f0:	5f 92       	push	r5
    30f2:	6f 92       	push	r6
    30f4:	7f 92       	push	r7
    30f6:	8f 92       	push	r8
    30f8:	9f 92       	push	r9
    30fa:	af 92       	push	r10
    30fc:	bf 92       	push	r11
    30fe:	cf 92       	push	r12
    3100:	df 92       	push	r13
    3102:	ef 92       	push	r14
    3104:	ff 92       	push	r15
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	4b 01       	movw	r8, r22
    3110:	5c 01       	movw	r10, r24
    3112:	29 01       	movw	r4, r18
    3114:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3116:	e0 91 7b 15 	lds	r30, 0x157B	; 0x80157b <pxCurrentTimerList>
    311a:	f0 91 7c 15 	lds	r31, 0x157C	; 0x80157c <pxCurrentTimerList+0x1>
    311e:	07 80       	ldd	r0, Z+7	; 0x07
    3120:	f0 85       	ldd	r31, Z+8	; 0x08
    3122:	e0 2d       	mov	r30, r0
    3124:	c0 85       	ldd	r28, Z+8	; 0x08
    3126:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3128:	ce 01       	movw	r24, r28
    312a:	02 96       	adiw	r24, 0x02	; 2
    312c:	0e 94 02 04 	call	0x804	; 0x804 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3130:	8e 89       	ldd	r24, Y+22	; 0x16
    3132:	82 ff       	sbrs	r24, 2
    3134:	1b c0       	rjmp	.+54     	; 0x316c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3136:	4e 85       	ldd	r20, Y+14	; 0x0e
    3138:	5f 85       	ldd	r21, Y+15	; 0x0f
    313a:	68 89       	ldd	r22, Y+16	; 0x10
    313c:	79 89       	ldd	r23, Y+17	; 0x11
    313e:	48 0d       	add	r20, r8
    3140:	59 1d       	adc	r21, r9
    3142:	6a 1d       	adc	r22, r10
    3144:	7b 1d       	adc	r23, r11
    3146:	75 01       	movw	r14, r10
    3148:	64 01       	movw	r12, r8
    314a:	93 01       	movw	r18, r6
    314c:	82 01       	movw	r16, r4
    314e:	ce 01       	movw	r24, r28
    3150:	47 de       	rcall	.-882    	; 0x2de0 <prvInsertTimerInActiveList>
    3152:	88 23       	and	r24, r24
    3154:	69 f0       	breq	.+26     	; 0x3170 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3156:	c1 2c       	mov	r12, r1
    3158:	d1 2c       	mov	r13, r1
    315a:	76 01       	movw	r14, r12
    315c:	00 e0       	ldi	r16, 0x00	; 0
    315e:	10 e0       	ldi	r17, 0x00	; 0
    3160:	a5 01       	movw	r20, r10
    3162:	94 01       	movw	r18, r8
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	ce 01       	movw	r24, r28
    3168:	ce de       	rcall	.-612    	; 0x2f06 <xTimerGenericCommand>
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    316c:	8e 7f       	andi	r24, 0xFE	; 254
    316e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3170:	ec 89       	ldd	r30, Y+20	; 0x14
    3172:	fd 89       	ldd	r31, Y+21	; 0x15
    3174:	ce 01       	movw	r24, r28
    3176:	19 95       	eicall
    }
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	ff 90       	pop	r15
    3182:	ef 90       	pop	r14
    3184:	df 90       	pop	r13
    3186:	cf 90       	pop	r12
    3188:	bf 90       	pop	r11
    318a:	af 90       	pop	r10
    318c:	9f 90       	pop	r9
    318e:	8f 90       	pop	r8
    3190:	7f 90       	pop	r7
    3192:	6f 90       	pop	r6
    3194:	5f 90       	pop	r5
    3196:	4f 90       	pop	r4
    3198:	08 95       	ret

0000319a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    319a:	8f 92       	push	r8
    319c:	9f 92       	push	r9
    319e:	af 92       	push	r10
    31a0:	bf 92       	push	r11
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	1f 92       	push	r1
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	6b 01       	movw	r12, r22
    31b8:	7c 01       	movw	r14, r24
    31ba:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    31bc:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31c0:	ce 01       	movw	r24, r28
    31c2:	01 96       	adiw	r24, 0x01	; 1
    31c4:	66 df       	rcall	.-308    	; 0x3092 <prvSampleTimeNow>
    31c6:	4b 01       	movw	r8, r22
    31c8:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	81 11       	cpse	r24, r1
    31ce:	2d c0       	rjmp	.+90     	; 0x322a <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    31d0:	11 11       	cpse	r17, r1
    31d2:	0d c0       	rjmp	.+26     	; 0x31ee <prvProcessTimerOrBlockTask+0x54>
    31d4:	8c 14       	cp	r8, r12
    31d6:	9d 04       	cpc	r9, r13
    31d8:	ae 04       	cpc	r10, r14
    31da:	bf 04       	cpc	r11, r15
    31dc:	40 f0       	brcs	.+16     	; 0x31ee <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    31de:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    31e2:	a5 01       	movw	r20, r10
    31e4:	94 01       	movw	r18, r8
    31e6:	c7 01       	movw	r24, r14
    31e8:	b6 01       	movw	r22, r12
    31ea:	81 df       	rcall	.-254    	; 0x30ee <prvProcessExpiredTimer>
    31ec:	20 c0       	rjmp	.+64     	; 0x322e <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    31ee:	11 23       	and	r17, r17
    31f0:	41 f0       	breq	.+16     	; 0x3202 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    31f2:	e0 91 79 15 	lds	r30, 0x1579	; 0x801579 <pxOverflowTimerList>
    31f6:	f0 91 7a 15 	lds	r31, 0x157A	; 0x80157a <pxOverflowTimerList+0x1>
    31fa:	80 81       	ld	r24, Z
    31fc:	11 e0       	ldi	r17, 0x01	; 1
    31fe:	81 11       	cpse	r24, r1
    3200:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3202:	b7 01       	movw	r22, r14
    3204:	a6 01       	movw	r20, r12
    3206:	48 19       	sub	r20, r8
    3208:	59 09       	sbc	r21, r9
    320a:	6a 09       	sbc	r22, r10
    320c:	7b 09       	sbc	r23, r11
    320e:	21 2f       	mov	r18, r17
    3210:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <xTimerQueue>
    3214:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <xTimerQueue+0x1>
    3218:	0e 94 00 08 	call	0x1000	; 0x1000 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    321c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
    3220:	81 11       	cpse	r24, r1
    3222:	05 c0       	rjmp	.+10     	; 0x322e <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3224:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    3228:	02 c0       	rjmp	.+4      	; 0x322e <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    322a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskResumeAll>
            }
        }
    }
    322e:	0f 90       	pop	r0
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	1f 91       	pop	r17
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	bf 90       	pop	r11
    3240:	af 90       	pop	r10
    3242:	9f 90       	pop	r9
    3244:	8f 90       	pop	r8
    3246:	08 95       	ret

00003248 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3248:	af 92       	push	r10
    324a:	bf 92       	push	r11
    324c:	cf 92       	push	r12
    324e:	df 92       	push	r13
    3250:	ef 92       	push	r14
    3252:	ff 92       	push	r15
    3254:	0f 93       	push	r16
    3256:	1f 93       	push	r17
    3258:	cf 93       	push	r28
    325a:	df 93       	push	r29
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	28 97       	sbiw	r28, 0x08	; 8
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    326c:	82 c0       	rjmp	.+260    	; 0x3372 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	88 23       	and	r24, r24
    3272:	0c f4       	brge	.+2      	; 0x3276 <prvProcessReceivedCommands+0x2e>
    3274:	7e c0       	rjmp	.+252    	; 0x3372 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3276:	ae 80       	ldd	r10, Y+6	; 0x06
    3278:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    327a:	d5 01       	movw	r26, r10
    327c:	1c 96       	adiw	r26, 0x0c	; 12
    327e:	8d 91       	ld	r24, X+
    3280:	9c 91       	ld	r25, X
    3282:	1d 97       	sbiw	r26, 0x0d	; 13
    3284:	89 2b       	or	r24, r25
    3286:	21 f0       	breq	.+8      	; 0x3290 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3288:	c5 01       	movw	r24, r10
    328a:	02 96       	adiw	r24, 0x02	; 2
    328c:	0e 94 02 04 	call	0x804	; 0x804 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3290:	ce 01       	movw	r24, r28
    3292:	08 96       	adiw	r24, 0x08	; 8
    3294:	fe de       	rcall	.-516    	; 0x3092 <prvSampleTimeNow>
    3296:	8b 01       	movw	r16, r22
    3298:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    329a:	e9 81       	ldd	r30, Y+1	; 0x01
    329c:	0e 2e       	mov	r0, r30
    329e:	00 0c       	add	r0, r0
    32a0:	ff 0b       	sbc	r31, r31
    32a2:	ea 30       	cpi	r30, 0x0A	; 10
    32a4:	f1 05       	cpc	r31, r1
    32a6:	08 f0       	brcs	.+2      	; 0x32aa <prvProcessReceivedCommands+0x62>
    32a8:	64 c0       	rjmp	.+200    	; 0x3372 <prvProcessReceivedCommands+0x12a>
    32aa:	88 27       	eor	r24, r24
    32ac:	ee 58       	subi	r30, 0x8E	; 142
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	8f 4f       	sbci	r24, 0xFF	; 255
    32b2:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32b6:	f5 01       	movw	r30, r10
    32b8:	86 89       	ldd	r24, Z+22	; 0x16
    32ba:	81 60       	ori	r24, 0x01	; 1
    32bc:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    32be:	ca 80       	ldd	r12, Y+2	; 0x02
    32c0:	db 80       	ldd	r13, Y+3	; 0x03
    32c2:	ec 80       	ldd	r14, Y+4	; 0x04
    32c4:	fd 80       	ldd	r15, Y+5	; 0x05
    32c6:	46 85       	ldd	r20, Z+14	; 0x0e
    32c8:	57 85       	ldd	r21, Z+15	; 0x0f
    32ca:	60 89       	ldd	r22, Z+16	; 0x10
    32cc:	71 89       	ldd	r23, Z+17	; 0x11
    32ce:	4c 0d       	add	r20, r12
    32d0:	5d 1d       	adc	r21, r13
    32d2:	6e 1d       	adc	r22, r14
    32d4:	7f 1d       	adc	r23, r15
    32d6:	c5 01       	movw	r24, r10
    32d8:	83 dd       	rcall	.-1274   	; 0x2de0 <prvInsertTimerInActiveList>
    32da:	88 23       	and	r24, r24
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <prvProcessReceivedCommands+0x98>
    32de:	49 c0       	rjmp	.+146    	; 0x3372 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32e0:	d5 01       	movw	r26, r10
    32e2:	54 96       	adiw	r26, 0x14	; 20
    32e4:	ed 91       	ld	r30, X+
    32e6:	fc 91       	ld	r31, X
    32e8:	55 97       	sbiw	r26, 0x15	; 21
    32ea:	c5 01       	movw	r24, r10
    32ec:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32ee:	f5 01       	movw	r30, r10
    32f0:	86 89       	ldd	r24, Z+22	; 0x16
    32f2:	82 ff       	sbrs	r24, 2
    32f4:	3e c0       	rjmp	.+124    	; 0x3372 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    32f6:	4a 81       	ldd	r20, Y+2	; 0x02
    32f8:	5b 81       	ldd	r21, Y+3	; 0x03
    32fa:	6c 81       	ldd	r22, Y+4	; 0x04
    32fc:	7d 81       	ldd	r23, Y+5	; 0x05
    32fe:	86 85       	ldd	r24, Z+14	; 0x0e
    3300:	97 85       	ldd	r25, Z+15	; 0x0f
    3302:	a0 89       	ldd	r26, Z+16	; 0x10
    3304:	b1 89       	ldd	r27, Z+17	; 0x11
    3306:	9a 01       	movw	r18, r20
    3308:	ab 01       	movw	r20, r22
    330a:	28 0f       	add	r18, r24
    330c:	39 1f       	adc	r19, r25
    330e:	4a 1f       	adc	r20, r26
    3310:	5b 1f       	adc	r21, r27
    3312:	c1 2c       	mov	r12, r1
    3314:	d1 2c       	mov	r13, r1
    3316:	76 01       	movw	r14, r12
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	10 e0       	ldi	r17, 0x00	; 0
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	c5 01       	movw	r24, r10
    3320:	f2 dd       	rcall	.-1052   	; 0x2f06 <xTimerGenericCommand>
    3322:	27 c0       	rjmp	.+78     	; 0x3372 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3324:	d5 01       	movw	r26, r10
    3326:	56 96       	adiw	r26, 0x16	; 22
    3328:	8c 91       	ld	r24, X
    332a:	56 97       	sbiw	r26, 0x16	; 22
    332c:	8e 7f       	andi	r24, 0xFE	; 254
    332e:	56 96       	adiw	r26, 0x16	; 22
    3330:	8c 93       	st	X, r24
                        break;
    3332:	1f c0       	rjmp	.+62     	; 0x3372 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3334:	f5 01       	movw	r30, r10
    3336:	86 89       	ldd	r24, Z+22	; 0x16
    3338:	81 60       	ori	r24, 0x01	; 1
    333a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    333c:	4a 81       	ldd	r20, Y+2	; 0x02
    333e:	5b 81       	ldd	r21, Y+3	; 0x03
    3340:	6c 81       	ldd	r22, Y+4	; 0x04
    3342:	7d 81       	ldd	r23, Y+5	; 0x05
    3344:	46 87       	std	Z+14, r20	; 0x0e
    3346:	57 87       	std	Z+15, r21	; 0x0f
    3348:	60 8b       	std	Z+16, r22	; 0x10
    334a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    334c:	40 0f       	add	r20, r16
    334e:	51 1f       	adc	r21, r17
    3350:	62 1f       	adc	r22, r18
    3352:	73 1f       	adc	r23, r19
    3354:	68 01       	movw	r12, r16
    3356:	79 01       	movw	r14, r18
    3358:	c5 01       	movw	r24, r10
    335a:	42 dd       	rcall	.-1404   	; 0x2de0 <prvInsertTimerInActiveList>
                        break;
    335c:	0a c0       	rjmp	.+20     	; 0x3372 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    335e:	f5 01       	movw	r30, r10
    3360:	86 89       	ldd	r24, Z+22	; 0x16
    3362:	81 fd       	sbrc	r24, 1
    3364:	04 c0       	rjmp	.+8      	; 0x336e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3366:	c5 01       	movw	r24, r10
    3368:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortFree>
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    336e:	8e 7f       	andi	r24, 0xFE	; 254
    3370:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	a9 01       	movw	r20, r18
    3378:	be 01       	movw	r22, r28
    337a:	6f 5f       	subi	r22, 0xFF	; 255
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <xTimerQueue>
    3382:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <xTimerQueue+0x1>
    3386:	0e 94 71 07 	call	0xee2	; 0xee2 <xQueueReceive>
    338a:	81 11       	cpse	r24, r1
    338c:	70 cf       	rjmp	.-288    	; 0x326e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    338e:	28 96       	adiw	r28, 0x08	; 8
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	1f 91       	pop	r17
    33a0:	0f 91       	pop	r16
    33a2:	ff 90       	pop	r15
    33a4:	ef 90       	pop	r14
    33a6:	df 90       	pop	r13
    33a8:	cf 90       	pop	r12
    33aa:	bf 90       	pop	r11
    33ac:	af 90       	pop	r10
    33ae:	08 95       	ret

000033b0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    33b0:	08 95       	ret

000033b2 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    33b2:	84 b1       	in	r24, 0x04	; 4
    33b4:	80 68       	ori	r24, 0x80	; 128
    33b6:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33b8:	85 b1       	in	r24, 0x05	; 5
    33ba:	80 68       	ori	r24, 0x80	; 128
    33bc:	85 b9       	out	0x05, r24	; 5
    33be:	08 95       	ret

000033c0 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    33c0:	83 b1       	in	r24, 0x03	; 3
    33c2:	80 68       	ori	r24, 0x80	; 128
    33c4:	83 b9       	out	0x03, r24	; 3
    33c6:	08 95       	ret

000033c8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    33c8:	f4 df       	rcall	.-24     	; 0x33b2 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33ca:	2f ef       	ldi	r18, 0xFF	; 255
    33cc:	80 e7       	ldi	r24, 0x70	; 112
    33ce:	92 e0       	ldi	r25, 0x02	; 2
    33d0:	21 50       	subi	r18, 0x01	; 1
    33d2:	80 40       	sbci	r24, 0x00	; 0
    33d4:	90 40       	sbci	r25, 0x00	; 0
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <vApplicationMallocFailedHook+0x8>
    33d8:	00 c0       	rjmp	.+0      	; 0x33da <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    33da:	00 00       	nop
    33dc:	f1 df       	rcall	.-30     	; 0x33c0 <prvBlinkMainLed>
    33de:	f5 cf       	rjmp	.-22     	; 0x33ca <vApplicationMallocFailedHook+0x2>

000033e0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    33e0:	e8 df       	rcall	.-48     	; 0x33b2 <prvSetMainLedOn>
    33e2:	2f ef       	ldi	r18, 0xFF	; 255
    33e4:	87 ea       	ldi	r24, 0xA7	; 167
    33e6:	91 e6       	ldi	r25, 0x61	; 97
    33e8:	21 50       	subi	r18, 0x01	; 1
    33ea:	80 40       	sbci	r24, 0x00	; 0
    33ec:	90 40       	sbci	r25, 0x00	; 0
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <vApplicationStackOverflowHook+0x8>
    33f0:	00 c0       	rjmp	.+0      	; 0x33f2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    33f2:	00 00       	nop
    33f4:	e5 df       	rcall	.-54     	; 0x33c0 <prvBlinkMainLed>
    33f6:	f5 cf       	rjmp	.-22     	; 0x33e2 <vApplicationStackOverflowHook+0x2>

000033f8 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    33f8:	86 e0       	ldi	r24, 0x06	; 6
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 ca 02 	call	0x594	; 0x594 <pvPortMalloc>
    3400:	90 93 eb 16 	sts	0x16EB, r25	; 0x8016eb <packet+0x1>
    3404:	80 93 ea 16 	sts	0x16EA, r24	; 0x8016ea <packet>
	
	if (NULL == packet){
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	69 f0       	breq	.+26     	; 0x3426 <SensorDataPackage_create+0x2e>
		return NULL;
	}
	packet->co2Ppm=0;
    340c:	fc 01       	movw	r30, r24
    340e:	11 82       	std	Z+1, r1	; 0x01
    3410:	10 82       	st	Z, r1
	packet->humidityData=0;
    3412:	80 91 ea 16 	lds	r24, 0x16EA	; 0x8016ea <packet>
    3416:	90 91 eb 16 	lds	r25, 0x16EB	; 0x8016eb <packet+0x1>
    341a:	fc 01       	movw	r30, r24
    341c:	15 82       	std	Z+5, r1	; 0x05
    341e:	14 82       	std	Z+4, r1	; 0x04
	packet->temperatureData=0;
    3420:	13 82       	std	Z+3, r1	; 0x03
    3422:	12 82       	std	Z+2, r1	; 0x02
	
	return packet;
    3424:	08 95       	ret

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
	
	if (NULL == packet){
		return NULL;
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
	packet->co2Ppm=0;
	packet->humidityData=0;
	packet->temperatureData=0;
	
	return packet;
}
    342a:	08 95       	ret

0000342c <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    342c:	e0 91 ea 16 	lds	r30, 0x16EA	; 0x8016ea <packet>
    3430:	f0 91 eb 16 	lds	r31, 0x16EB	; 0x8016eb <packet+0x1>
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	08 95       	ret

0000343a <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    343a:	e0 91 ea 16 	lds	r30, 0x16EA	; 0x8016ea <packet>
    343e:	f0 91 eb 16 	lds	r31, 0x16EB	; 0x8016eb <packet+0x1>
    3442:	93 83       	std	Z+3, r25	; 0x03
    3444:	82 83       	std	Z+2, r24	; 0x02
    3446:	08 95       	ret

00003448 <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    3448:	e0 91 ea 16 	lds	r30, 0x16EA	; 0x8016ea <packet>
    344c:	f0 91 eb 16 	lds	r31, 0x16EB	; 0x8016eb <packet+0x1>
    3450:	95 83       	std	Z+5, r25	; 0x05
    3452:	84 83       	std	Z+4, r24	; 0x04
    3454:	08 95       	ret

00003456 <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3456:	e3 e9       	ldi	r30, 0x93	; 147
    3458:	f5 e1       	ldi	r31, 0x15	; 21
    345a:	26 e0       	ldi	r18, 0x06	; 6
    345c:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    345e:	60 83       	st	Z, r22
	
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3460:	a0 91 ea 16 	lds	r26, 0x16EA	; 0x8016ea <packet>
    3464:	b0 91 eb 16 	lds	r27, 0x16EB	; 0x8016eb <packet+0x1>
    3468:	2c 91       	ld	r18, X
    346a:	11 96       	adiw	r26, 0x01	; 1
    346c:	3c 91       	ld	r19, X
    346e:	11 97       	sbiw	r26, 0x01	; 1
    3470:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3472:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[3]=(uint8_t)(packet->temperatureData>>8);
    3474:	12 96       	adiw	r26, 0x02	; 2
    3476:	2c 91       	ld	r18, X
    3478:	12 97       	sbiw	r26, 0x02	; 2
    347a:	13 96       	adiw	r26, 0x03	; 3
    347c:	3c 91       	ld	r19, X
    347e:	13 97       	sbiw	r26, 0x03	; 3
    3480:	35 83       	std	Z+5, r19	; 0x05
	payload.bytes[4] = (uint8_t)(packet->temperatureData &  0xFF);
    3482:	26 83       	std	Z+6, r18	; 0x06
	payload.bytes[5]=(uint8_t)(packet->humidityData>>8);
    3484:	14 96       	adiw	r26, 0x04	; 4
    3486:	2c 91       	ld	r18, X
    3488:	14 97       	sbiw	r26, 0x04	; 4
    348a:	15 96       	adiw	r26, 0x05	; 5
    348c:	3c 91       	ld	r19, X
    348e:	37 83       	std	Z+7, r19	; 0x07
	payload.bytes[6] = (uint8_t)(packet->humidityData &  0xFF);
    3490:	20 87       	std	Z+8, r18	; 0x08
	return payload;
    3492:	26 e1       	ldi	r18, 0x16	; 22
    3494:	dc 01       	movw	r26, r24
    3496:	01 90       	ld	r0, Z+
    3498:	0d 92       	st	X+, r0
    349a:	2a 95       	dec	r18
    349c:	e1 f7       	brne	.-8      	; 0x3496 <getLoRaPayload+0x40>
	};
    349e:	08 95       	ret

000034a0 <get_temperature_data>:
}
//------Get temperature data-----------

uint16_t get_temperature_data()
{
	puts("Task1");
    34a0:	8f e4       	ldi	r24, 0x4F	; 79
    34a2:	92 e0       	ldi	r25, 0x02	; 2
    34a4:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <puts>
		return (uint16_t)temperature;
    34a8:	60 91 ad 15 	lds	r22, 0x15AD	; 0x8015ad <temperature>
    34ac:	70 91 ae 15 	lds	r23, 0x15AE	; 0x8015ae <temperature+0x1>
    34b0:	80 91 af 15 	lds	r24, 0x15AF	; 0x8015af <temperature+0x2>
    34b4:	90 91 b0 15 	lds	r25, 0x15B0	; 0x8015b0 <temperature+0x3>
    34b8:	e2 d1       	rcall	.+964    	; 0x387e <__fixunssfsi>
}
    34ba:	cb 01       	movw	r24, r22
    34bc:	08 95       	ret

000034be <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
		return (uint16_t)humidity;	
    34be:	60 91 a9 15 	lds	r22, 0x15A9	; 0x8015a9 <humidity>
    34c2:	70 91 aa 15 	lds	r23, 0x15AA	; 0x8015aa <humidity+0x1>
    34c6:	80 91 ab 15 	lds	r24, 0x15AB	; 0x8015ab <humidity+0x2>
    34ca:	90 91 ac 15 	lds	r25, 0x15AC	; 0x8015ac <humidity+0x3>
    34ce:	d7 d1       	rcall	.+942    	; 0x387e <__fixunssfsi>
}
    34d0:	cb 01       	movw	r24, r22
    34d2:	08 95       	ret

000034d4 <Application_Task>:
		
	
}*/
/*-----------------------------------------------------------*/
void Application_Task(void* pvParameters)
{
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	ac 97       	sbiw	r28, 0x2c	; 44
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
	puts("TASK a");
    34e8:	80 eb       	ldi	r24, 0xB0	; 176
    34ea:	92 e0       	ldi	r25, 0x02	; 2
    34ec:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <puts>
	lora_driver_payload_t payload;
	EventBits_t dataReadyEventGroup;
	SensorDataPackage_create();
    34f0:	83 df       	rcall	.-250    	; 0x33f8 <SensorDataPackage_create>
	for (;;)
	{
		
		xEventGroupSetBits(measureEventGroup,ALL_READY_BITS);
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 c9 01 	call	0x392	; 0x392 <xEventGroupSetBits>
		puts("TASK b");
    3502:	87 eb       	ldi	r24, 0xB7	; 183
    3504:	92 e0       	ldi	r25, 0x02	; 2
    3506:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <puts>
		dataReadyEventGroup=xEventGroupWaitBits(dataReadyEventGroup,ALL_MEASURE_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
    350a:	cc 24       	eor	r12, r12
    350c:	ca 94       	dec	r12
    350e:	dc 2c       	mov	r13, r12
    3510:	76 01       	movw	r14, r12
    3512:	01 e0       	ldi	r16, 0x01	; 1
    3514:	21 e0       	ldi	r18, 0x01	; 1
    3516:	42 e0       	ldi	r20, 0x02	; 2
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	8b 2d       	mov	r24, r11
    3520:	9a 2d       	mov	r25, r10
    3522:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupWaitBits>
    3526:	b6 2e       	mov	r11, r22
    3528:	a7 2e       	mov	r10, r23
		if ((dataReadyEventGroup & ALL_MEASURE_BITS  )==ALL_MEASURE_BITS)
    352a:	61 ff       	sbrs	r22, 1
    352c:	18 c0       	rjmp	.+48     	; 0x355e <Application_Task+0x8a>
		{
			puts("TASK d");
    352e:	8e eb       	ldi	r24, 0xBE	; 190
    3530:	92 e0       	ldi	r25, 0x02	; 2
    3532:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <puts>
			setCO2Ppm(1050);
    3536:	8a e1       	ldi	r24, 0x1A	; 26
    3538:	94 e0       	ldi	r25, 0x04	; 4
			setTemperatureData(get_temperature_data());
    353a:	78 df       	rcall	.-272    	; 0x342c <setCO2Ppm>
    353c:	b1 df       	rcall	.-158    	; 0x34a0 <get_temperature_data>
    353e:	7d df       	rcall	.-262    	; 0x343a <setTemperatureData>
			printf("%d",get_temperature_data());
    3540:	af df       	rcall	.-162    	; 0x34a0 <get_temperature_data>
    3542:	9f 93       	push	r25
    3544:	8f 93       	push	r24
    3546:	89 e4       	ldi	r24, 0x49	; 73
    3548:	95 e0       	ldi	r25, 0x05	; 5
    354a:	9f 93       	push	r25
    354c:	8f 93       	push	r24
    354e:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>
			setHumidityData(get_humidity_data());
    3552:	b5 df       	rcall	.-150    	; 0x34be <get_humidity_data>
    3554:	79 df       	rcall	.-270    	; 0x3448 <setHumidityData>
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
		}
		
		payload=getLoRaPayload((uint8_t)2);
    355e:	62 e0       	ldi	r22, 0x02	; 2
    3560:	ce 01       	movw	r24, r28
    3562:	47 96       	adiw	r24, 0x17	; 23
    3564:	78 df       	rcall	.-272    	; 0x3456 <getLoRaPayload>
    3566:	86 e1       	ldi	r24, 0x16	; 22
    3568:	fe 01       	movw	r30, r28
    356a:	77 96       	adiw	r30, 0x17	; 23
    356c:	de 01       	movw	r26, r28
    356e:	11 96       	adiw	r26, 0x01	; 1
    3570:	01 90       	ld	r0, Z+
    3572:	0d 92       	st	X+, r0
    3574:	8a 95       	dec	r24
    3576:	e1 f7       	brne	.-8      	; 0x3570 <Application_Task+0x9c>
    3578:	63 e0       	ldi	r22, 0x03	; 3
		vTaskDelay( pdMS_TO_TICKS(50UL) );
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 69 10 	call	0x20d2	; 0x20d2 <vTaskDelay>
    3584:	0f ef       	ldi	r16, 0xFF	; 255
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    3586:	1f ef       	ldi	r17, 0xFF	; 255
    3588:	98 01       	movw	r18, r16
    358a:	46 e1       	ldi	r20, 0x16	; 22
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	be 01       	movw	r22, r28
    3590:	6f 5f       	subi	r22, 0xFF	; 255
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	0e 94 c1 09 	call	0x1382	; 0x1382 <xStreamBufferSend>
    359c:	aa cf       	rjmp	.-172    	; 0x34f2 <Application_Task+0x1e>

0000359e <create_tasks_and_semaphores>:
		
	}
    359e:	ef 92       	push	r14




void create_tasks_and_semaphores(void)
{
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
	
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    35a4:	80 91 ec 16 	lds	r24, 0x16EC	; 0x8016ec <xTestSemaphore>
    35a8:	90 91 ed 16 	lds	r25, 0x16ED	; 0x8016ed <xTestSemaphore+0x1>
    35ac:	89 2b       	or	r24, r25
    35ae:	89 f4       	brne	.+34     	; 0x35d2 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	0e 94 2a 07 	call	0xe54	; 0xe54 <xQueueCreateMutex>
    35b6:	90 93 ed 16 	sts	0x16ED, r25	; 0x8016ed <xTestSemaphore+0x1>
    35ba:	80 93 ec 16 	sts	0x16EC, r24	; 0x8016ec <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	41 f0       	breq	.+16     	; 0x35d2 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    35c2:	00 e0       	ldi	r16, 0x00	; 0
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	a9 01       	movw	r20, r18
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	70 e0       	ldi	r23, 0x00	; 0
    35ce:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericSend>
	//,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	//,  NULL
	//,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	//,  NULL );
	
	xTaskCreate(
    35d2:	e1 2c       	mov	r14, r1
    35d4:	f1 2c       	mov	r15, r1
    35d6:	03 e0       	ldi	r16, 0x03	; 3
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 ec       	ldi	r20, 0xC0	; 192
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	65 ec       	ldi	r22, 0xC5	; 197
    35e2:	72 e0       	ldi	r23, 0x02	; 2
    35e4:	8a e6       	ldi	r24, 0x6A	; 106
    35e6:	9a e1       	ldi	r25, 0x1A	; 26
    35e8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xTaskCreate>
	,  "Application"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    35ec:	0f 91       	pop	r16
    35ee:	ff 90       	pop	r15
    35f0:	ef 90       	pop	r14
    35f2:	08 95       	ret

000035f4 <initialiseSystem>:
	
}
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    35f4:	81 b1       	in	r24, 0x01	; 1
    35f6:	81 68       	ori	r24, 0x81	; 129
    35f8:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <stdio_initialise>
	// Let's create some tasks
	
	if ( HIH8120_OK == hih8120_initialise() )
    3600:	c0 d1       	rcall	.+896    	; 0x3982 <hih8120_initialise>
    3602:	81 11       	cpse	r24, r1
    3604:	05 c0       	rjmp	.+10     	; 0x3610 <initialiseSystem+0x1c>
{
	puts("Task0");
    3606:	81 ed       	ldi	r24, 0xD1	; 209
    3608:	92 e0       	ldi	r25, 0x02	; 2
    360a:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <puts>
	create_tasks_and_semaphores();
    360e:	c7 df       	rcall	.-114    	; 0x359e <create_tasks_and_semaphores>
}
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3610:	85 e0       	ldi	r24, 0x05	; 5
    3612:	0e 94 02 26 	call	0x4c04	; 0x4c04 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	70 e0       	ldi	r23, 0x00	; 0
    361a:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    361c:	e9 d2       	rcall	.+1490   	; 0x3bf0 <lora_driver_initialise>
    361e:	83 e0       	ldi	r24, 0x03	; 3
    3620:	1a c1       	rjmp	.+564    	; 0x3856 <lora_handler_initialise>
    3622:	08 95       	ret

00003624 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3624:	e7 df       	rcall	.-50     	; 0x35f4 <initialiseSystem>
	//printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3626:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <vTaskStartScheduler>

	/* Replace with your application code */
	
}
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	08 95       	ret

00003630 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	64 97       	sbiw	r28, 0x14	; 20
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    364e:	1e d3       	rcall	.+1596   	; 0x3c8c <lora_driver_rn2483FactoryReset>
    3650:	9a d5       	rcall	.+2868   	; 0x4186 <lora_driver_mapReturnCodeToText>
    3652:	9f 93       	push	r25
    3654:	8f 93       	push	r24
    3656:	87 ed       	ldi	r24, 0xD7	; 215
    3658:	92 e0       	ldi	r25, 0x02	; 2
    365a:	9f 93       	push	r25
    365c:	8f 93       	push	r24
    365e:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3662:	92 d4       	rcall	.+2340   	; 0x3f88 <lora_driver_configureToEu868>
    3664:	90 d5       	rcall	.+2848   	; 0x4186 <lora_driver_mapReturnCodeToText>
    3666:	9f 93       	push	r25
    3668:	8f 93       	push	r24
    366a:	8a ee       	ldi	r24, 0xEA	; 234
    366c:	92 e0       	ldi	r25, 0x02	; 2
    366e:	9f 93       	push	r25
    3670:	8f 93       	push	r24
    3672:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>
    3676:	8e 01       	movw	r16, r28
    3678:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    367a:	1f 4f       	sbci	r17, 0xFF	; 255
    367c:	c8 01       	movw	r24, r16
    367e:	18 d3       	rcall	.+1584   	; 0x3cb0 <lora_driver_getRn2483Hweui>
    3680:	82 d5       	rcall	.+2820   	; 0x4186 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3682:	1f 93       	push	r17
    3684:	0f 93       	push	r16
    3686:	9f 93       	push	r25
    3688:	8f 93       	push	r24
    368a:	83 e0       	ldi	r24, 0x03	; 3
    368c:	93 e0       	ldi	r25, 0x03	; 3
    368e:	9f 93       	push	r25
    3690:	8f 93       	push	r24
    3692:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3696:	c8 01       	movw	r24, r16
    3698:	27 d3       	rcall	.+1614   	; 0x3ce8 <lora_driver_setDeviceIdentifier>
    369a:	75 d5       	rcall	.+2794   	; 0x4186 <lora_driver_mapReturnCodeToText>
    369c:	9f 93       	push	r25
    369e:	8f 93       	push	r24
    36a0:	1f 93       	push	r17
    36a2:	0f 93       	push	r16
    36a4:	87 e1       	ldi	r24, 0x17	; 23
    36a6:	93 e0       	ldi	r25, 0x03	; 3
    36a8:	9f 93       	push	r25
    36aa:	8f 93       	push	r24
    36ac:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    36b0:	a8 01       	movw	r20, r16
    36b2:	6c e2       	ldi	r22, 0x2C	; 44
    36b4:	73 e0       	ldi	r23, 0x03	; 3
    36b6:	8d e4       	ldi	r24, 0x4D	; 77
    36b8:	93 e0       	ldi	r25, 0x03	; 3
    36ba:	44 d5       	rcall	.+2696   	; 0x4144 <lora_driver_setOtaaIdentity>
    36bc:	64 d5       	rcall	.+2760   	; 0x4186 <lora_driver_mapReturnCodeToText>
    36be:	9f 93       	push	r25
    36c0:	8f 93       	push	r24
    36c2:	1f 93       	push	r17
    36c4:	0f 93       	push	r16
    36c6:	8c e2       	ldi	r24, 0x2C	; 44
    36c8:	93 e0       	ldi	r25, 0x03	; 3
    36ca:	9f 93       	push	r25
    36cc:	8f 93       	push	r24
    36ce:	8d e4       	ldi	r24, 0x4D	; 77
    36d0:	93 e0       	ldi	r25, 0x03	; 3
    36d2:	9f 93       	push	r25
    36d4:	8f 93       	push	r24
    36d6:	8e e5       	ldi	r24, 0x5E	; 94
    36d8:	93 e0       	ldi	r25, 0x03	; 3
    36da:	9f 93       	push	r25
    36dc:	8f 93       	push	r24
    36de:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    36e2:	35 d3       	rcall	.+1642   	; 0x3d4e <lora_driver_saveMac>
    36e4:	50 d5       	rcall	.+2720   	; 0x4186 <lora_driver_mapReturnCodeToText>
    36e6:	9f 93       	push	r25
    36e8:	8f 93       	push	r24
    36ea:	84 e9       	ldi	r24, 0x94	; 148
    36ec:	93 e0       	ldi	r25, 0x03	; 3
    36ee:	9f 93       	push	r25
    36f0:	8f 93       	push	r24
    36f2:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	1f d4       	rcall	.+2110   	; 0x3f42 <lora_driver_setAdaptiveDataRate>
    3704:	40 d5       	rcall	.+2688   	; 0x4186 <lora_driver_mapReturnCodeToText>
    3706:	9f 93       	push	r25
    3708:	8f 93       	push	r24
    370a:	83 ea       	ldi	r24, 0xA3	; 163
    370c:	93 e0       	ldi	r25, 0x03	; 3
    370e:	9f 93       	push	r25
    3710:	8f 93       	push	r24
    3712:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3716:	84 ef       	ldi	r24, 0xF4	; 244
    3718:	91 e0       	ldi	r25, 0x01	; 1
    371a:	1e d4       	rcall	.+2108   	; 0x3f58 <lora_driver_setReceiveDelay>
    371c:	34 d5       	rcall	.+2664   	; 0x4186 <lora_driver_mapReturnCodeToText>
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	8f 93       	push	r24
    3726:	84 ef       	ldi	r24, 0xF4	; 244
    3728:	8f 93       	push	r24
    372a:	84 ec       	ldi	r24, 0xC4	; 196
    372c:	93 e0       	ldi	r25, 0x03	; 3
    372e:	9f 93       	push	r25
    3730:	8f 93       	push	r24
    3732:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3740:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	0a d3       	rcall	.+1556   	; 0x3d5a <lora_driver_join>
    3746:	08 2f       	mov	r16, r24
    3748:	1e d5       	rcall	.+2620   	; 0x4186 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	1f 92       	push	r1
    3750:	1f 93       	push	r17
    3752:	84 ee       	ldi	r24, 0xE4	; 228
    3754:	93 e0       	ldi	r25, 0x03	; 3
    3756:	9f 93       	push	r25
    3758:	8f 93       	push	r24
    375a:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	08 30       	cpi	r16, 0x08	; 8
    376c:	59 f0       	breq	.+22     	; 0x3784 <_lora_setup+0x154>
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3774:	66 e3       	ldi	r22, 0x36	; 54
    3776:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <vTaskDelay>
    3780:	11 50       	subi	r17, 0x01	; 1
    3782:	f9 f6       	brne	.-66     	; 0x3742 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3784:	08 30       	cpi	r16, 0x08	; 8
    3786:	21 f4       	brne	.+8      	; 0x3790 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    378e:	09 c0       	rjmp	.+18     	; 0x37a2 <_lora_setup+0x172>
    3790:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3792:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    379c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    37a0:	fd cf       	rjmp	.-6      	; 0x379c <_lora_setup+0x16c>
    37a2:	64 96       	adiw	r28, 0x14	; 20
    37a4:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <lora_handler_task>:
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    37bc:	00 d0       	rcall	.+0      	; 0x37be <lora_handler_task+0x6>
    37be:	1f 92       	push	r1
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	54 d2       	rcall	.+1192   	; 0x3c70 <lora_driver_resetRn2483>
	vTaskDelay(2);
    37c8:	62 e0       	ldi	r22, 0x02	; 2
    37ca:	70 e0       	ldi	r23, 0x00	; 0
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	4c d2       	rcall	.+1176   	; 0x3c70 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    37d8:	66 e9       	ldi	r22, 0x96	; 150
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <vTaskDelay>
 
	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    37e4:	fe d1       	rcall	.+1020   	; 0x3be2 <lora_driver_flushBuffers>

	_lora_setup();
    37e6:	24 df       	rcall	.-440    	; 0x3630 <_lora_setup>
    37e8:	e1 eb       	ldi	r30, 0xB1	; 177

	_uplink_payload.len = 6;
    37ea:	f5 e1       	ldi	r31, 0x15	; 21
    37ec:	86 e0       	ldi	r24, 0x06	; 6
    37ee:	81 83       	std	Z+1, r24	; 0x01
    37f0:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    37f2:	80 83       	st	Z, r24
    37f4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    37f8:	69 83       	std	Y+1, r22	; 0x01
    37fa:	7a 83       	std	Y+2, r23	; 0x02
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	9c 83       	std	Y+4, r25	; 0x04
    3800:	48 ea       	ldi	r20, 0xA8	; 168

	for(;;)
	{ 
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3802:	58 e4       	ldi	r21, 0x48	; 72
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	ce 01       	movw	r24, r28
    380a:	01 96       	adiw	r24, 0x01	; 1
    380c:	0e 94 04 10 	call	0x2008	; 0x2008 <xTaskDelayUntil>
    3810:	e1 eb       	ldi	r30, 0xB1	; 177
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3812:	f5 e1       	ldi	r31, 0x15	; 21
    3814:	80 e3       	ldi	r24, 0x30	; 48
    3816:	82 83       	std	Z+2, r24	; 0x02
    3818:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    381a:	83 83       	std	Z+3, r24	; 0x03
    381c:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    381e:	84 83       	std	Z+4, r24	; 0x04
    3820:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    3822:	85 83       	std	Z+5, r24	; 0x05
    3824:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3826:	86 83       	std	Z+6, r24	; 0x06
    3828:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    382a:	87 83       	std	Z+7, r24	; 0x07
    382c:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    382e:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3832:	61 eb       	ldi	r22, 0xB1	; 177
    3834:	75 e1       	ldi	r23, 0x15	; 21
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	b9 d2       	rcall	.+1394   	; 0x3dac <lora_driver_sendUploadMessage>
    383a:	a5 d4       	rcall	.+2378   	; 0x4186 <lora_driver_mapReturnCodeToText>
    383c:	9f 93       	push	r25
    383e:	8f 93       	push	r24
    3840:	84 e0       	ldi	r24, 0x04	; 4
    3842:	94 e0       	ldi	r25, 0x04	; 4
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	0e 94 48 2b 	call	0x5690	; 0x5690 <printf>
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	d5 cf       	rjmp	.-86     	; 0x3800 <lora_handler_task+0x48>

00003856 <lora_handler_initialise>:
    3856:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
	xTaskCreate(
    385c:	e1 2c       	mov	r14, r1
    385e:	f1 2c       	mov	r15, r1
    3860:	08 2f       	mov	r16, r24
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	48 e8       	ldi	r20, 0x88	; 136
    3868:	51 e0       	ldi	r21, 0x01	; 1
    386a:	69 e1       	ldi	r22, 0x19	; 25
    386c:	74 e0       	ldi	r23, 0x04	; 4
    386e:	8c ed       	ldi	r24, 0xDC	; 220
    3870:	9b e1       	ldi	r25, 0x1B	; 27
    3872:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3876:	0f 91       	pop	r16
    3878:	ff 90       	pop	r15
    387a:	ef 90       	pop	r14
    387c:	08 95       	ret

0000387e <__fixunssfsi>:
    387e:	33 d0       	rcall	.+102    	; 0x38e6 <__fp_splitA>
    3880:	88 f0       	brcs	.+34     	; 0x38a4 <__fixunssfsi+0x26>
    3882:	9f 57       	subi	r25, 0x7F	; 127
    3884:	90 f0       	brcs	.+36     	; 0x38aa <__fixunssfsi+0x2c>
    3886:	b9 2f       	mov	r27, r25
    3888:	99 27       	eor	r25, r25
    388a:	b7 51       	subi	r27, 0x17	; 23
    388c:	a0 f0       	brcs	.+40     	; 0x38b6 <__fixunssfsi+0x38>
    388e:	d1 f0       	breq	.+52     	; 0x38c4 <__fixunssfsi+0x46>
    3890:	66 0f       	add	r22, r22
    3892:	77 1f       	adc	r23, r23
    3894:	88 1f       	adc	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	1a f0       	brmi	.+6      	; 0x38a0 <__fixunssfsi+0x22>
    389a:	ba 95       	dec	r27
    389c:	c9 f7       	brne	.-14     	; 0x3890 <__fixunssfsi+0x12>
    389e:	12 c0       	rjmp	.+36     	; 0x38c4 <__fixunssfsi+0x46>
    38a0:	b1 30       	cpi	r27, 0x01	; 1
    38a2:	81 f0       	breq	.+32     	; 0x38c4 <__fixunssfsi+0x46>
    38a4:	3a d0       	rcall	.+116    	; 0x391a <__fp_zero>
    38a6:	b1 e0       	ldi	r27, 0x01	; 1
    38a8:	08 95       	ret
    38aa:	37 c0       	rjmp	.+110    	; 0x391a <__fp_zero>
    38ac:	67 2f       	mov	r22, r23
    38ae:	78 2f       	mov	r23, r24
    38b0:	88 27       	eor	r24, r24
    38b2:	b8 5f       	subi	r27, 0xF8	; 248
    38b4:	39 f0       	breq	.+14     	; 0x38c4 <__fixunssfsi+0x46>
    38b6:	b9 3f       	cpi	r27, 0xF9	; 249
    38b8:	cc f3       	brlt	.-14     	; 0x38ac <__fixunssfsi+0x2e>
    38ba:	86 95       	lsr	r24
    38bc:	77 95       	ror	r23
    38be:	67 95       	ror	r22
    38c0:	b3 95       	inc	r27
    38c2:	d9 f7       	brne	.-10     	; 0x38ba <__fixunssfsi+0x3c>
    38c4:	3e f4       	brtc	.+14     	; 0x38d4 <__fixunssfsi+0x56>
    38c6:	90 95       	com	r25
    38c8:	80 95       	com	r24
    38ca:	70 95       	com	r23
    38cc:	61 95       	neg	r22
    38ce:	7f 4f       	sbci	r23, 0xFF	; 255
    38d0:	8f 4f       	sbci	r24, 0xFF	; 255
    38d2:	9f 4f       	sbci	r25, 0xFF	; 255
    38d4:	08 95       	ret

000038d6 <__fp_split3>:
    38d6:	57 fd       	sbrc	r21, 7
    38d8:	90 58       	subi	r25, 0x80	; 128
    38da:	44 0f       	add	r20, r20
    38dc:	55 1f       	adc	r21, r21
    38de:	59 f0       	breq	.+22     	; 0x38f6 <__fp_splitA+0x10>
    38e0:	5f 3f       	cpi	r21, 0xFF	; 255
    38e2:	71 f0       	breq	.+28     	; 0x3900 <__fp_splitA+0x1a>
    38e4:	47 95       	ror	r20

000038e6 <__fp_splitA>:
    38e6:	88 0f       	add	r24, r24
    38e8:	97 fb       	bst	r25, 7
    38ea:	99 1f       	adc	r25, r25
    38ec:	61 f0       	breq	.+24     	; 0x3906 <__fp_splitA+0x20>
    38ee:	9f 3f       	cpi	r25, 0xFF	; 255
    38f0:	79 f0       	breq	.+30     	; 0x3910 <__fp_splitA+0x2a>
    38f2:	87 95       	ror	r24
    38f4:	08 95       	ret
    38f6:	12 16       	cp	r1, r18
    38f8:	13 06       	cpc	r1, r19
    38fa:	14 06       	cpc	r1, r20
    38fc:	55 1f       	adc	r21, r21
    38fe:	f2 cf       	rjmp	.-28     	; 0x38e4 <__fp_split3+0xe>
    3900:	46 95       	lsr	r20
    3902:	f1 df       	rcall	.-30     	; 0x38e6 <__fp_splitA>
    3904:	08 c0       	rjmp	.+16     	; 0x3916 <__fp_splitA+0x30>
    3906:	16 16       	cp	r1, r22
    3908:	17 06       	cpc	r1, r23
    390a:	18 06       	cpc	r1, r24
    390c:	99 1f       	adc	r25, r25
    390e:	f1 cf       	rjmp	.-30     	; 0x38f2 <__fp_splitA+0xc>
    3910:	86 95       	lsr	r24
    3912:	71 05       	cpc	r23, r1
    3914:	61 05       	cpc	r22, r1
    3916:	08 94       	sec
    3918:	08 95       	ret

0000391a <__fp_zero>:
    391a:	e8 94       	clt

0000391c <__fp_szero>:
    391c:	bb 27       	eor	r27, r27
    391e:	66 27       	eor	r22, r22
    3920:	77 27       	eor	r23, r23
    3922:	cb 01       	movw	r24, r22
    3924:	97 f9       	bld	r25, 7
    3926:	08 95       	ret

00003928 <_hihTwiCallback>:
    3928:	65 30       	cpi	r22, 0x05	; 5
    392a:	f1 f4       	brne	.+60     	; 0x3968 <_hihTwiCallback+0x40>
    392c:	fa 01       	movw	r30, r20
    392e:	80 81       	ld	r24, Z
    3930:	8f 73       	andi	r24, 0x3F	; 63
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	98 2f       	mov	r25, r24
    3936:	88 27       	eor	r24, r24
    3938:	21 81       	ldd	r18, Z+1	; 0x01
    393a:	82 2b       	or	r24, r18
    393c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3940:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3944:	82 81       	ldd	r24, Z+2	; 0x02
    3946:	f0 e4       	ldi	r31, 0x40	; 64
    3948:	8f 9f       	mul	r24, r31
    394a:	c0 01       	movw	r24, r0
    394c:	11 24       	eor	r1, r1
    394e:	fa 01       	movw	r30, r20
    3950:	23 81       	ldd	r18, Z+3	; 0x03
    3952:	26 95       	lsr	r18
    3954:	26 95       	lsr	r18
    3956:	82 2b       	or	r24, r18
    3958:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    395c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	80 93 c7 15 	sts	0x15C7, r24	; 0x8015c7 <_measuringIsReady>
    3966:	08 95       	ret
    3968:	64 30       	cpi	r22, 0x04	; 4
    396a:	51 f0       	breq	.+20     	; 0x3980 <_hihTwiCallback+0x58>
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	90 e4       	ldi	r25, 0x40	; 64
    3970:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3974:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3978:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    397c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3980:	08 95       	ret

00003982 <hih8120_initialise>:
    3982:	0f 93       	push	r16
    3984:	1f 93       	push	r17
    3986:	04 e9       	ldi	r16, 0x94	; 148
    3988:	1c e1       	ldi	r17, 0x1C	; 28
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	34 e2       	ldi	r19, 0x24	; 36
    398e:	44 ef       	ldi	r20, 0xF4	; 244
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	87 e2       	ldi	r24, 0x27	; 39
    3996:	0e 94 d7 26 	call	0x4dae	; 0x4dae <twiCreate>
    399a:	90 93 c9 15 	sts	0x15C9, r25	; 0x8015c9 <_hih8120Handler+0x1>
    399e:	80 93 c8 15 	sts	0x15C8, r24	; 0x8015c8 <_hih8120Handler>
    39a2:	21 e0       	ldi	r18, 0x01	; 1
    39a4:	89 2b       	or	r24, r25
    39a6:	09 f0       	breq	.+2      	; 0x39aa <hih8120_initialise+0x28>
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	82 2f       	mov	r24, r18
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	08 95       	ret

000039b2 <_serialCallBack>:
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	1f 92       	push	r1
    39bc:	1f 92       	push	r1
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	8c 01       	movw	r16, r24
    39c4:	19 82       	std	Y+1, r1	; 0x01
    39c6:	2d c0       	rjmp	.+90     	; 0x3a22 <_serialCallBack+0x70>
    39c8:	e0 91 01 16 	lds	r30, 0x1601	; 0x801601 <rec_buf_inp.2878>
    39cc:	ec 32       	cpi	r30, 0x2C	; 44
    39ce:	50 f4       	brcc	.+20     	; 0x39e4 <_serialCallBack+0x32>
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	8e 0f       	add	r24, r30
    39d4:	80 93 01 16 	sts	0x1601, r24	; 0x801601 <rec_buf_inp.2878>
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	ed 5c       	subi	r30, 0xCD	; 205
    39dc:	f9 4e       	sbci	r31, 0xE9	; 233
    39de:	8a 81       	ldd	r24, Y+2	; 0x02
    39e0:	80 83       	st	Z, r24
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <_serialCallBack+0x36>
    39e4:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <rec_buf_inp.2878>
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	8a 30       	cpi	r24, 0x0A	; 10
    39ec:	d1 f4       	brne	.+52     	; 0x3a22 <_serialCallBack+0x70>
    39ee:	40 91 01 16 	lds	r20, 0x1601	; 0x801601 <rec_buf_inp.2878>
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	fa 01       	movw	r30, r20
    39f6:	ef 5c       	subi	r30, 0xCF	; 207
    39f8:	f9 4e       	sbci	r31, 0xE9	; 233
    39fa:	10 82       	st	Z, r1
    39fc:	41 50       	subi	r20, 0x01	; 1
    39fe:	51 09       	sbc	r21, r1
    3a00:	9e 01       	movw	r18, r28
    3a02:	2f 5f       	subi	r18, 0xFF	; 255
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
    3a06:	63 e3       	ldi	r22, 0x33	; 51
    3a08:	76 e1       	ldi	r23, 0x16	; 22
    3a0a:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_serialReplyBufferHandle>
    3a0e:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <_serialReplyBufferHandle+0x1>
    3a12:	0e 94 86 0a 	call	0x150c	; 0x150c <xStreamBufferSendFromISR>
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	81 11       	cpse	r24, r1
    3a1a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vPortYield>
    3a1e:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <rec_buf_inp.2878>
    3a22:	be 01       	movw	r22, r28
    3a24:	6e 5f       	subi	r22, 0xFE	; 254
    3a26:	7f 4f       	sbci	r23, 0xFF	; 255
    3a28:	c8 01       	movw	r24, r16
    3a2a:	4f d5       	rcall	.+2718   	; 0x44ca <serial_getByte>
    3a2c:	88 23       	and	r24, r24
    3a2e:	61 f2       	breq	.-104    	; 0x39c8 <_serialCallBack+0x16>
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

00003a3e <_uploadMessage>:
    3a3e:	0f 93       	push	r16
    3a40:	1f 93       	push	r17
    3a42:	cf 93       	push	r28
    3a44:	df 93       	push	r29
    3a46:	8c 01       	movw	r16, r24
    3a48:	eb 01       	movw	r28, r22
    3a4a:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_serialReplyBufferHandle>
    3a4e:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <_serialReplyBufferHandle+0x1>
    3a52:	0e 94 91 09 	call	0x1322	; 0x1322 <xStreamBufferReset>
    3a56:	b8 01       	movw	r22, r16
    3a58:	8a ec       	ldi	r24, 0xCA	; 202
    3a5a:	95 e1       	ldi	r25, 0x15	; 21
    3a5c:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcpy>
    3a60:	20 97       	sbiw	r28, 0x00	; 0
    3a62:	79 f0       	breq	.+30     	; 0x3a82 <_uploadMessage+0x44>
    3a64:	ea ec       	ldi	r30, 0xCA	; 202
    3a66:	f5 e1       	ldi	r31, 0x15	; 21
    3a68:	01 90       	ld	r0, Z+
    3a6a:	00 20       	and	r0, r0
    3a6c:	e9 f7       	brne	.-6      	; 0x3a68 <_uploadMessage+0x2a>
    3a6e:	31 97       	sbiw	r30, 0x01	; 1
    3a70:	80 e2       	ldi	r24, 0x20	; 32
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
    3a78:	be 01       	movw	r22, r28
    3a7a:	8a ec       	ldi	r24, 0xCA	; 202
    3a7c:	95 e1       	ldi	r25, 0x15	; 21
    3a7e:	0e 94 1e 2b 	call	0x563c	; 0x563c <strcat>
    3a82:	ea ec       	ldi	r30, 0xCA	; 202
    3a84:	f5 e1       	ldi	r31, 0x15	; 21
    3a86:	df 01       	movw	r26, r30
    3a88:	0d 90       	ld	r0, X+
    3a8a:	00 20       	and	r0, r0
    3a8c:	e9 f7       	brne	.-6      	; 0x3a88 <_uploadMessage+0x4a>
    3a8e:	11 97       	sbiw	r26, 0x01	; 1
    3a90:	8d e0       	ldi	r24, 0x0D	; 13
    3a92:	9a e0       	ldi	r25, 0x0A	; 10
    3a94:	11 96       	adiw	r26, 0x01	; 1
    3a96:	9c 93       	st	X, r25
    3a98:	8e 93       	st	-X, r24
    3a9a:	12 96       	adiw	r26, 0x02	; 2
    3a9c:	1c 92       	st	X, r1
    3a9e:	01 90       	ld	r0, Z+
    3aa0:	00 20       	and	r0, r0
    3aa2:	e9 f7       	brne	.-6      	; 0x3a9e <_uploadMessage+0x60>
    3aa4:	31 97       	sbiw	r30, 0x01	; 1
    3aa6:	ea 5c       	subi	r30, 0xCA	; 202
    3aa8:	f5 41       	sbci	r31, 0x15	; 21
    3aaa:	ae 2f       	mov	r26, r30
    3aac:	8a ec       	ldi	r24, 0xCA	; 202
    3aae:	95 e1       	ldi	r25, 0x15	; 21
    3ab0:	ac 01       	movw	r20, r24
    3ab2:	6a 2f       	mov	r22, r26
    3ab4:	80 91 06 16 	lds	r24, 0x1606	; 0x801606 <_rn2483_serial>
    3ab8:	90 91 07 16 	lds	r25, 0x1607	; 0x801607 <_rn2483_serial+0x1>
    3abc:	b1 d4       	rcall	.+2402   	; 0x4420 <serial_sendBytes>
    3abe:	81 11       	cpse	r24, r1
    3ac0:	11 c0       	rjmp	.+34     	; 0x3ae4 <_uploadMessage+0xa6>
    3ac2:	08 e2       	ldi	r16, 0x28	; 40
    3ac4:	15 e0       	ldi	r17, 0x05	; 5
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4d e2       	ldi	r20, 0x2D	; 45
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	6d e8       	ldi	r22, 0x8D	; 141
    3ad0:	76 e1       	ldi	r23, 0x16	; 22
    3ad2:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_serialReplyBufferHandle>
    3ad6:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <_serialReplyBufferHandle+0x1>
    3ada:	0e 94 ca 0a 	call	0x1594	; 0x1594 <xStreamBufferReceive>
    3ade:	8d e8       	ldi	r24, 0x8D	; 141
    3ae0:	96 e1       	ldi	r25, 0x16	; 22
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <_uploadMessage+0xaa>
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	1f 91       	pop	r17
    3aee:	0f 91       	pop	r16
    3af0:	08 95       	ret

00003af2 <_reply2ReturnCode>:
    3af2:	2f 92       	push	r2
    3af4:	3f 92       	push	r3
    3af6:	4f 92       	push	r4
    3af8:	5f 92       	push	r5
    3afa:	6f 92       	push	r6
    3afc:	7f 92       	push	r7
    3afe:	8f 92       	push	r8
    3b00:	9f 92       	push	r9
    3b02:	af 92       	push	r10
    3b04:	bf 92       	push	r11
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	5c 01       	movw	r10, r24
    3b18:	fc 01       	movw	r30, r24
    3b1a:	01 90       	ld	r0, Z+
    3b1c:	00 20       	and	r0, r0
    3b1e:	e9 f7       	brne	.-6      	; 0x3b1a <_reply2ReturnCode+0x28>
    3b20:	31 97       	sbiw	r30, 0x01	; 1
    3b22:	6f 01       	movw	r12, r30
    3b24:	c8 1a       	sub	r12, r24
    3b26:	d9 0a       	sbc	r13, r25
    3b28:	5c 2c       	mov	r5, r12
    3b2a:	0f 2e       	mov	r0, r31
    3b2c:	f9 eb       	ldi	r31, 0xB9	; 185
    3b2e:	8f 2e       	mov	r8, r31
    3b30:	f6 e0       	ldi	r31, 0x06	; 6
    3b32:	9f 2e       	mov	r9, r31
    3b34:	f0 2d       	mov	r31, r0
    3b36:	e1 2c       	mov	r14, r1
    3b38:	f1 2c       	mov	r15, r1
    3b3a:	4c 2c       	mov	r4, r12
    3b3c:	37 01       	movw	r6, r14
    3b3e:	f4 01       	movw	r30, r8
    3b40:	01 81       	ldd	r16, Z+1	; 0x01
    3b42:	12 81       	ldd	r17, Z+2	; 0x02
    3b44:	e8 01       	movw	r28, r16
    3b46:	09 90       	ld	r0, Y+
    3b48:	00 20       	and	r0, r0
    3b4a:	e9 f7       	brne	.-6      	; 0x3b46 <_reply2ReturnCode+0x54>
    3b4c:	21 97       	sbiw	r28, 0x01	; 1
    3b4e:	c0 1b       	sub	r28, r16
    3b50:	d1 0b       	sbc	r29, r17
    3b52:	3c 2e       	mov	r3, r28
    3b54:	f9 e0       	ldi	r31, 0x09	; 9
    3b56:	cf 16       	cp	r12, r31
    3b58:	d1 04       	cpc	r13, r1
    3b5a:	58 f0       	brcs	.+22     	; 0x3b72 <_reply2ReturnCode+0x80>
    3b5c:	f4 01       	movw	r30, r8
    3b5e:	20 80       	ld	r2, Z
    3b60:	fe e0       	ldi	r31, 0x0E	; 14
    3b62:	2f 12       	cpse	r2, r31
    3b64:	06 c0       	rjmp	.+12     	; 0x3b72 <_reply2ReturnCode+0x80>
    3b66:	b8 01       	movw	r22, r16
    3b68:	c5 01       	movw	r24, r10
    3b6a:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <strcasestr>
    3b6e:	89 2b       	or	r24, r25
    3b70:	09 f5       	brne	.+66     	; 0x3bb4 <_reply2ReturnCode+0xc2>
    3b72:	44 2d       	mov	r20, r4
    3b74:	35 14       	cp	r3, r5
    3b76:	08 f4       	brcc	.+2      	; 0x3b7a <_reply2ReturnCode+0x88>
    3b78:	4c 2f       	mov	r20, r28
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	b8 01       	movw	r22, r16
    3b7e:	c5 01       	movw	r24, r10
    3b80:	0e 94 30 2b 	call	0x5660	; 0x5660 <strncasecmp>
    3b84:	89 2b       	or	r24, r25
    3b86:	49 f4       	brne	.+18     	; 0x3b9a <_reply2ReturnCode+0xa8>
    3b88:	f3 01       	movw	r30, r6
    3b8a:	ee 0f       	add	r30, r30
    3b8c:	ff 1f       	adc	r31, r31
    3b8e:	e6 0d       	add	r30, r6
    3b90:	f7 1d       	adc	r31, r7
    3b92:	e7 54       	subi	r30, 0x47	; 71
    3b94:	f9 4f       	sbci	r31, 0xF9	; 249
    3b96:	20 80       	ld	r2, Z
    3b98:	0d c0       	rjmp	.+26     	; 0x3bb4 <_reply2ReturnCode+0xc2>
    3b9a:	8f ef       	ldi	r24, 0xFF	; 255
    3b9c:	e8 1a       	sub	r14, r24
    3b9e:	f8 0a       	sbc	r15, r24
    3ba0:	e3 e0       	ldi	r30, 0x03	; 3
    3ba2:	8e 0e       	add	r8, r30
    3ba4:	91 1c       	adc	r9, r1
    3ba6:	f1 e1       	ldi	r31, 0x11	; 17
    3ba8:	ef 16       	cp	r14, r31
    3baa:	f1 04       	cpc	r15, r1
    3bac:	39 f6       	brne	.-114    	; 0x3b3c <_reply2ReturnCode+0x4a>
    3bae:	68 94       	set
    3bb0:	22 24       	eor	r2, r2
    3bb2:	24 f8       	bld	r2, 4
    3bb4:	82 2d       	mov	r24, r2
    3bb6:	df 91       	pop	r29
    3bb8:	cf 91       	pop	r28
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
    3bbe:	ff 90       	pop	r15
    3bc0:	ef 90       	pop	r14
    3bc2:	df 90       	pop	r13
    3bc4:	cf 90       	pop	r12
    3bc6:	bf 90       	pop	r11
    3bc8:	af 90       	pop	r10
    3bca:	9f 90       	pop	r9
    3bcc:	8f 90       	pop	r8
    3bce:	7f 90       	pop	r7
    3bd0:	6f 90       	pop	r6
    3bd2:	5f 90       	pop	r5
    3bd4:	4f 90       	pop	r4
    3bd6:	3f 90       	pop	r3
    3bd8:	2f 90       	pop	r2
    3bda:	08 95       	ret

00003bdc <_uploadMessageRc>:
    3bdc:	30 df       	rcall	.-416    	; 0x3a3e <_uploadMessage>
    3bde:	89 cf       	rjmp	.-238    	; 0x3af2 <_reply2ReturnCode>
    3be0:	08 95       	ret

00003be2 <lora_driver_flushBuffers>:
    3be2:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_serialReplyBufferHandle>
    3be6:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <_serialReplyBufferHandle+0x1>
    3bea:	0c 94 91 09 	jmp	0x1322	; 0x1322 <xStreamBufferReset>
    3bee:	08 95       	ret

00003bf0 <lora_driver_initialise>:
    3bf0:	8f 92       	push	r8
    3bf2:	9f 92       	push	r9
    3bf4:	af 92       	push	r10
    3bf6:	cf 92       	push	r12
    3bf8:	ef 92       	push	r14
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	c8 2f       	mov	r28, r24
    3c02:	8b 01       	movw	r16, r22
    3c04:	41 e0       	ldi	r20, 0x01	; 1
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	88 ec       	ldi	r24, 0xC8	; 200
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e 94 5f 09 	call	0x12be	; 0x12be <xStreamBufferGenericCreate>
    3c12:	90 93 05 16 	sts	0x1605, r25	; 0x801605 <_serialReplyBufferHandle+0x1>
    3c16:	80 93 04 16 	sts	0x1604, r24	; 0x801604 <_serialReplyBufferHandle>
    3c1a:	10 93 03 16 	sts	0x1603, r17	; 0x801603 <_downlinkMessageBuffer+0x1>
    3c1e:	00 93 02 16 	sts	0x1602, r16	; 0x801602 <_downlinkMessageBuffer>
    3c22:	0f 2e       	mov	r0, r31
    3c24:	f9 ed       	ldi	r31, 0xD9	; 217
    3c26:	8f 2e       	mov	r8, r31
    3c28:	fc e1       	ldi	r31, 0x1C	; 28
    3c2a:	9f 2e       	mov	r9, r31
    3c2c:	f0 2d       	mov	r31, r0
    3c2e:	68 94       	set
    3c30:	aa 24       	eor	r10, r10
    3c32:	a6 f8       	bld	r10, 6
    3c34:	68 94       	set
    3c36:	cc 24       	eor	r12, r12
    3c38:	c6 f8       	bld	r12, 6
    3c3a:	e1 2c       	mov	r14, r1
    3c3c:	00 e0       	ldi	r16, 0x00	; 0
    3c3e:	23 e0       	ldi	r18, 0x03	; 3
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	51 ee       	ldi	r21, 0xE1	; 225
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	8c 2f       	mov	r24, r28
    3c4a:	1e d3       	rcall	.+1596   	; 0x4288 <serial_create>
    3c4c:	90 93 07 16 	sts	0x1607, r25	; 0x801607 <_rn2483_serial+0x1>
    3c50:	80 93 06 16 	sts	0x1606, r24	; 0x801606 <_rn2483_serial>
    3c54:	e7 e0       	ldi	r30, 0x07	; 7
    3c56:	f1 e0       	ldi	r31, 0x01	; 1
    3c58:	80 81       	ld	r24, Z
    3c5a:	80 61       	ori	r24, 0x10	; 16
    3c5c:	80 83       	st	Z, r24
    3c5e:	cf 91       	pop	r28
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	ef 90       	pop	r14
    3c66:	cf 90       	pop	r12
    3c68:	af 90       	pop	r10
    3c6a:	9f 90       	pop	r9
    3c6c:	8f 90       	pop	r8
    3c6e:	08 95       	ret

00003c70 <lora_driver_resetRn2483>:
    3c70:	88 23       	and	r24, r24
    3c72:	31 f0       	breq	.+12     	; 0x3c80 <lora_driver_resetRn2483+0x10>
    3c74:	e8 e0       	ldi	r30, 0x08	; 8
    3c76:	f1 e0       	ldi	r31, 0x01	; 1
    3c78:	80 81       	ld	r24, Z
    3c7a:	8f 7e       	andi	r24, 0xEF	; 239
    3c7c:	80 83       	st	Z, r24
    3c7e:	08 95       	ret
    3c80:	e8 e0       	ldi	r30, 0x08	; 8
    3c82:	f1 e0       	ldi	r31, 0x01	; 1
    3c84:	80 81       	ld	r24, Z
    3c86:	80 61       	ori	r24, 0x10	; 16
    3c88:	80 83       	st	Z, r24
    3c8a:	08 95       	ret

00003c8c <lora_driver_rn2483FactoryReset>:
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	70 e0       	ldi	r23, 0x00	; 0
    3c90:	8f e3       	ldi	r24, 0x3F	; 63
    3c92:	94 e0       	ldi	r25, 0x04	; 4
    3c94:	d4 de       	rcall	.-600    	; 0x3a3e <_uploadMessage>
    3c96:	ed e8       	ldi	r30, 0x8D	; 141
    3c98:	f6 e1       	ldi	r31, 0x16	; 22
    3c9a:	01 90       	ld	r0, Z+
    3c9c:	00 20       	and	r0, r0
    3c9e:	e9 f7       	brne	.-6      	; 0x3c9a <lora_driver_rn2483FactoryReset+0xe>
    3ca0:	31 97       	sbiw	r30, 0x01	; 1
    3ca2:	ed 58       	subi	r30, 0x8D	; 141
    3ca4:	f6 41       	sbci	r31, 0x16	; 22
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	75 97       	sbiw	r30, 0x15	; 21
    3caa:	08 f0       	brcs	.+2      	; 0x3cae <lora_driver_rn2483FactoryReset+0x22>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	08 95       	ret

00003cb0 <lora_driver_getRn2483Hweui>:
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	ec 01       	movw	r28, r24
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	80 e5       	ldi	r24, 0x50	; 80
    3cbc:	94 e0       	ldi	r25, 0x04	; 4
    3cbe:	bf de       	rcall	.-642    	; 0x3a3e <_uploadMessage>
    3cc0:	ed e8       	ldi	r30, 0x8D	; 141
    3cc2:	f6 e1       	ldi	r31, 0x16	; 22
    3cc4:	01 90       	ld	r0, Z+
    3cc6:	00 20       	and	r0, r0
    3cc8:	e9 f7       	brne	.-6      	; 0x3cc4 <lora_driver_getRn2483Hweui+0x14>
    3cca:	ee 59       	subi	r30, 0x9E	; 158
    3ccc:	f6 41       	sbci	r31, 0x16	; 22
    3cce:	39 f4       	brne	.+14     	; 0x3cde <lora_driver_getRn2483Hweui+0x2e>
    3cd0:	6d e8       	ldi	r22, 0x8D	; 141
    3cd2:	76 e1       	ldi	r23, 0x16	; 22
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcpy>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	02 c0       	rjmp	.+4      	; 0x3ce2 <lora_driver_getRn2483Hweui+0x32>
    3cde:	18 82       	st	Y, r1
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	08 95       	ret

00003ce8 <lora_driver_setDeviceIdentifier>:
    3ce8:	fc 01       	movw	r30, r24
    3cea:	01 90       	ld	r0, Z+
    3cec:	00 20       	and	r0, r0
    3cee:	e9 f7       	brne	.-6      	; 0x3cea <lora_driver_setDeviceIdentifier+0x2>
    3cf0:	9f 01       	movw	r18, r30
    3cf2:	21 51       	subi	r18, 0x11	; 17
    3cf4:	31 09       	sbc	r19, r1
    3cf6:	28 17       	cp	r18, r24
    3cf8:	39 07       	cpc	r19, r25
    3cfa:	29 f4       	brne	.+10     	; 0x3d06 <lora_driver_setDeviceIdentifier+0x1e>
    3cfc:	bc 01       	movw	r22, r24
    3cfe:	8e e7       	ldi	r24, 0x7E	; 126
    3d00:	94 e0       	ldi	r25, 0x04	; 4
    3d02:	6c cf       	rjmp	.-296    	; 0x3bdc <_uploadMessageRc>
    3d04:	08 95       	ret
    3d06:	89 e0       	ldi	r24, 0x09	; 9
    3d08:	08 95       	ret

00003d0a <lora_driver_setApplicationIdentifier>:
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	01 90       	ld	r0, Z+
    3d0e:	00 20       	and	r0, r0
    3d10:	e9 f7       	brne	.-6      	; 0x3d0c <lora_driver_setApplicationIdentifier+0x2>
    3d12:	9f 01       	movw	r18, r30
    3d14:	21 51       	subi	r18, 0x11	; 17
    3d16:	31 09       	sbc	r19, r1
    3d18:	28 17       	cp	r18, r24
    3d1a:	39 07       	cpc	r19, r25
    3d1c:	29 f4       	brne	.+10     	; 0x3d28 <lora_driver_setApplicationIdentifier+0x1e>
    3d1e:	bc 01       	movw	r22, r24
    3d20:	8d e8       	ldi	r24, 0x8D	; 141
    3d22:	94 e0       	ldi	r25, 0x04	; 4
    3d24:	5b cf       	rjmp	.-330    	; 0x3bdc <_uploadMessageRc>
    3d26:	08 95       	ret
    3d28:	89 e0       	ldi	r24, 0x09	; 9
    3d2a:	08 95       	ret

00003d2c <lora_driver_setApplicationKey>:
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	01 90       	ld	r0, Z+
    3d30:	00 20       	and	r0, r0
    3d32:	e9 f7       	brne	.-6      	; 0x3d2e <lora_driver_setApplicationKey+0x2>
    3d34:	9f 01       	movw	r18, r30
    3d36:	21 52       	subi	r18, 0x21	; 33
    3d38:	31 09       	sbc	r19, r1
    3d3a:	28 17       	cp	r18, r24
    3d3c:	39 07       	cpc	r19, r25
    3d3e:	29 f4       	brne	.+10     	; 0x3d4a <lora_driver_setApplicationKey+0x1e>
    3d40:	bc 01       	movw	r22, r24
    3d42:	8c e9       	ldi	r24, 0x9C	; 156
    3d44:	94 e0       	ldi	r25, 0x04	; 4
    3d46:	4a cf       	rjmp	.-364    	; 0x3bdc <_uploadMessageRc>
    3d48:	08 95       	ret
    3d4a:	89 e0       	ldi	r24, 0x09	; 9
    3d4c:	08 95       	ret

00003d4e <lora_driver_saveMac>:
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	8b ed       	ldi	r24, 0xDB	; 219
    3d54:	94 e0       	ldi	r25, 0x04	; 4
    3d56:	42 cf       	rjmp	.-380    	; 0x3bdc <_uploadMessageRc>
    3d58:	08 95       	ret

00003d5a <lora_driver_join>:
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	e8 2f       	mov	r30, r24
    3d60:	f0 e0       	ldi	r31, 0x00	; 0
    3d62:	ee 0f       	add	r30, r30
    3d64:	ff 1f       	adc	r31, r31
    3d66:	eb 54       	subi	r30, 0x4B	; 75
    3d68:	f9 4f       	sbci	r31, 0xF9	; 249
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	84 ee       	ldi	r24, 0xE4	; 228
    3d70:	94 e0       	ldi	r25, 0x04	; 4
    3d72:	34 df       	rcall	.-408    	; 0x3bdc <_uploadMessageRc>
    3d74:	81 11       	cpse	r24, r1
    3d76:	14 c0       	rjmp	.+40     	; 0x3da0 <lora_driver_join+0x46>
    3d78:	08 e2       	ldi	r16, 0x28	; 40
    3d7a:	15 e0       	ldi	r17, 0x05	; 5
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	4d e2       	ldi	r20, 0x2D	; 45
    3d82:	50 e0       	ldi	r21, 0x00	; 0
    3d84:	6d e8       	ldi	r22, 0x8D	; 141
    3d86:	76 e1       	ldi	r23, 0x16	; 22
    3d88:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_serialReplyBufferHandle>
    3d8c:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <_serialReplyBufferHandle+0x1>
    3d90:	0e 94 ca 0a 	call	0x1594	; 0x1594 <xStreamBufferReceive>
    3d94:	88 23       	and	r24, r24
    3d96:	21 f0       	breq	.+8      	; 0x3da0 <lora_driver_join+0x46>
    3d98:	8d e8       	ldi	r24, 0x8D	; 141
    3d9a:	96 e1       	ldi	r25, 0x16	; 22
    3d9c:	aa de       	rcall	.-684    	; 0x3af2 <_reply2ReturnCode>
    3d9e:	03 c0       	rjmp	.+6      	; 0x3da6 <lora_driver_join+0x4c>
    3da0:	8d e8       	ldi	r24, 0x8D	; 141
    3da2:	96 e1       	ldi	r25, 0x16	; 22
    3da4:	a6 de       	rcall	.-692    	; 0x3af2 <_reply2ReturnCode>
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <lora_driver_sendUploadMessage>:
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	1f 92       	push	r1
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	db 01       	movw	r26, r22
    3dbc:	11 96       	adiw	r26, 0x01	; 1
    3dbe:	9c 91       	ld	r25, X
    3dc0:	11 97       	sbiw	r26, 0x01	; 1
    3dc2:	95 31       	cpi	r25, 0x15	; 21
    3dc4:	08 f0       	brcs	.+2      	; 0x3dc8 <lora_driver_sendUploadMessage+0x1c>
    3dc6:	b4 c0       	rjmp	.+360    	; 0x3f30 <lora_driver_sendUploadMessage+0x184>
    3dc8:	99 23       	and	r25, r25
    3dca:	81 f1       	breq	.+96     	; 0x3e2c <lora_driver_sendUploadMessage+0x80>
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	70 e0       	ldi	r23, 0x00	; 0
    3dd0:	27 2f       	mov	r18, r23
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	46 2f       	mov	r20, r22
    3dd6:	50 e0       	ldi	r21, 0x00	; 0
    3dd8:	fd 01       	movw	r30, r26
    3dda:	e4 0f       	add	r30, r20
    3ddc:	f5 1f       	adc	r31, r21
    3dde:	92 81       	ldd	r25, Z+2	; 0x02
    3de0:	92 95       	swap	r25
    3de2:	9f 70       	andi	r25, 0x0F	; 15
    3de4:	9a 30       	cpi	r25, 0x0A	; 10
    3de6:	10 f0       	brcs	.+4      	; 0x3dec <lora_driver_sendUploadMessage+0x40>
    3de8:	99 5c       	subi	r25, 0xC9	; 201
    3dea:	01 c0       	rjmp	.+2      	; 0x3dee <lora_driver_sendUploadMessage+0x42>
    3dec:	90 5d       	subi	r25, 0xD0	; 208
    3dee:	f9 01       	movw	r30, r18
    3df0:	e2 5e       	subi	r30, 0xE2	; 226
    3df2:	f9 4e       	sbci	r31, 0xE9	; 233
    3df4:	90 83       	st	Z, r25
    3df6:	2f 5f       	subi	r18, 0xFF	; 255
    3df8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfa:	fd 01       	movw	r30, r26
    3dfc:	e4 0f       	add	r30, r20
    3dfe:	f5 1f       	adc	r31, r21
    3e00:	92 81       	ldd	r25, Z+2	; 0x02
    3e02:	9f 70       	andi	r25, 0x0F	; 15
    3e04:	49 2f       	mov	r20, r25
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	4a 30       	cpi	r20, 0x0A	; 10
    3e0a:	51 05       	cpc	r21, r1
    3e0c:	14 f0       	brlt	.+4      	; 0x3e12 <lora_driver_sendUploadMessage+0x66>
    3e0e:	99 5c       	subi	r25, 0xC9	; 201
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <lora_driver_sendUploadMessage+0x68>
    3e12:	90 5d       	subi	r25, 0xD0	; 208
    3e14:	f9 01       	movw	r30, r18
    3e16:	e2 5e       	subi	r30, 0xE2	; 226
    3e18:	f9 4e       	sbci	r31, 0xE9	; 233
    3e1a:	90 83       	st	Z, r25
    3e1c:	7e 5f       	subi	r23, 0xFE	; 254
    3e1e:	6f 5f       	subi	r22, 0xFF	; 255
    3e20:	11 96       	adiw	r26, 0x01	; 1
    3e22:	9c 91       	ld	r25, X
    3e24:	11 97       	sbiw	r26, 0x01	; 1
    3e26:	69 17       	cp	r22, r25
    3e28:	98 f2       	brcs	.-90     	; 0x3dd0 <lora_driver_sendUploadMessage+0x24>
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <lora_driver_sendUploadMessage+0x82>
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	e7 2f       	mov	r30, r23
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	e2 5e       	subi	r30, 0xE2	; 226
    3e34:	f9 4e       	sbci	r31, 0xE9	; 233
    3e36:	10 82       	st	Z, r1
    3e38:	4c 91       	ld	r20, X
    3e3a:	81 11       	cpse	r24, r1
    3e3c:	03 c0       	rjmp	.+6      	; 0x3e44 <lora_driver_sendUploadMessage+0x98>
    3e3e:	8d ee       	ldi	r24, 0xED	; 237
    3e40:	94 e0       	ldi	r25, 0x04	; 4
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <lora_driver_sendUploadMessage+0x9c>
    3e44:	8f ee       	ldi	r24, 0xEF	; 239
    3e46:	94 e0       	ldi	r25, 0x04	; 4
    3e48:	2e e1       	ldi	r18, 0x1E	; 30
    3e4a:	36 e1       	ldi	r19, 0x16	; 22
    3e4c:	3f 93       	push	r19
    3e4e:	2f 93       	push	r18
    3e50:	1f 92       	push	r1
    3e52:	4f 93       	push	r20
    3e54:	9f 93       	push	r25
    3e56:	8f 93       	push	r24
    3e58:	83 ef       	ldi	r24, 0xF3	; 243
    3e5a:	94 e0       	ldi	r25, 0x04	; 4
    3e5c:	9f 93       	push	r25
    3e5e:	8f 93       	push	r24
    3e60:	80 e6       	ldi	r24, 0x60	; 96
    3e62:	96 e1       	ldi	r25, 0x16	; 22
    3e64:	9f 93       	push	r25
    3e66:	8f 93       	push	r24
    3e68:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sprintf>
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	80 e6       	ldi	r24, 0x60	; 96
    3e72:	96 e1       	ldi	r25, 0x16	; 22
    3e74:	b3 de       	rcall	.-666    	; 0x3bdc <_uploadMessageRc>
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	81 11       	cpse	r24, r1
    3e82:	59 c0       	rjmp	.+178    	; 0x3f36 <lora_driver_sendUploadMessage+0x18a>
    3e84:	08 e2       	ldi	r16, 0x28	; 40
    3e86:	15 e0       	ldi	r17, 0x05	; 5
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	4d e2       	ldi	r20, 0x2D	; 45
    3e8e:	50 e0       	ldi	r21, 0x00	; 0
    3e90:	6d e8       	ldi	r22, 0x8D	; 141
    3e92:	76 e1       	ldi	r23, 0x16	; 22
    3e94:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_serialReplyBufferHandle>
    3e98:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <_serialReplyBufferHandle+0x1>
    3e9c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <xStreamBufferReceive>
    3ea0:	88 23       	and	r24, r24
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <lora_driver_sendUploadMessage+0xfa>
    3ea4:	47 c0       	rjmp	.+142    	; 0x3f34 <lora_driver_sendUploadMessage+0x188>
    3ea6:	8d e8       	ldi	r24, 0x8D	; 141
    3ea8:	96 e1       	ldi	r25, 0x16	; 22
    3eaa:	23 de       	rcall	.-954    	; 0x3af2 <_reply2ReturnCode>
    3eac:	8e 30       	cpi	r24, 0x0E	; 14
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <lora_driver_sendUploadMessage+0x106>
    3eb0:	42 c0       	rjmp	.+132    	; 0x3f36 <lora_driver_sendUploadMessage+0x18a>
    3eb2:	87 e0       	ldi	r24, 0x07	; 7
    3eb4:	89 83       	std	Y+1, r24	; 0x01
    3eb6:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <_downlinkMessageBuffer>
    3eba:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <_downlinkMessageBuffer+0x1>
    3ebe:	89 2b       	or	r24, r25
    3ec0:	a9 f1       	breq	.+106    	; 0x3f2c <lora_driver_sendUploadMessage+0x180>
    3ec2:	be 01       	movw	r22, r28
    3ec4:	6f 5f       	subi	r22, 0xFF	; 255
    3ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec8:	8d e8       	ldi	r24, 0x8D	; 141
    3eca:	96 e1       	ldi	r25, 0x16	; 22
    3ecc:	68 d1       	rcall	.+720    	; 0x419e <decode_port_no>
    3ece:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <_downlinkPayload>
    3ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	e3 57       	subi	r30, 0x73	; 115
    3ed8:	f9 4e       	sbci	r31, 0xE9	; 233
    3eda:	df 01       	movw	r26, r30
    3edc:	0d 90       	ld	r0, X+
    3ede:	00 20       	and	r0, r0
    3ee0:	e9 f7       	brne	.-6      	; 0x3edc <lora_driver_sendUploadMessage+0x130>
    3ee2:	11 97       	sbiw	r26, 0x01	; 1
    3ee4:	ae 1b       	sub	r26, r30
    3ee6:	bf 0b       	sbc	r27, r31
    3ee8:	aa 23       	and	r26, r26
    3eea:	91 f0       	breq	.+36     	; 0x3f10 <lora_driver_sendUploadMessage+0x164>
    3eec:	bb 27       	eor	r27, r27
    3eee:	cd 01       	movw	r24, r26
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	9c 01       	movw	r18, r24
    3ef4:	12 f4       	brpl	.+4      	; 0x3efa <lora_driver_sendUploadMessage+0x14e>
    3ef6:	2f 5f       	subi	r18, 0xFF	; 255
    3ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    3efa:	35 95       	asr	r19
    3efc:	27 95       	ror	r18
    3efe:	20 93 09 16 	sts	0x1609, r18	; 0x801609 <_downlinkPayload+0x1>
    3f02:	af 01       	movw	r20, r30
    3f04:	4f 5f       	subi	r20, 0xFF	; 255
    3f06:	5f 4f       	sbci	r21, 0xFF	; 255
    3f08:	64 e1       	ldi	r22, 0x14	; 20
    3f0a:	8a e0       	ldi	r24, 0x0A	; 10
    3f0c:	96 e1       	ldi	r25, 0x16	; 22
    3f0e:	73 d1       	rcall	.+742    	; 0x41f6 <decode_hexadecimal_string_bytes>
    3f10:	01 e0       	ldi	r16, 0x01	; 1
    3f12:	10 e0       	ldi	r17, 0x00	; 0
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	46 e1       	ldi	r20, 0x16	; 22
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	68 e0       	ldi	r22, 0x08	; 8
    3f1e:	76 e1       	ldi	r23, 0x16	; 22
    3f20:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <_downlinkMessageBuffer>
    3f24:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <_downlinkMessageBuffer+0x1>
    3f28:	0e 94 c1 09 	call	0x1382	; 0x1382 <xStreamBufferSend>
    3f2c:	8e e0       	ldi	r24, 0x0E	; 14
    3f2e:	03 c0       	rjmp	.+6      	; 0x3f36 <lora_driver_sendUploadMessage+0x18a>
    3f30:	84 e1       	ldi	r24, 0x14	; 20
    3f32:	01 c0       	rjmp	.+2      	; 0x3f36 <lora_driver_sendUploadMessage+0x18a>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	0f 90       	pop	r0
    3f38:	df 91       	pop	r29
    3f3a:	cf 91       	pop	r28
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	08 95       	ret

00003f42 <lora_driver_setAdaptiveDataRate>:
    3f42:	81 30       	cpi	r24, 0x01	; 1
    3f44:	19 f0       	breq	.+6      	; 0x3f4c <lora_driver_setAdaptiveDataRate+0xa>
    3f46:	63 e0       	ldi	r22, 0x03	; 3
    3f48:	75 e0       	ldi	r23, 0x05	; 5
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <lora_driver_setAdaptiveDataRate+0xe>
    3f4c:	6c ed       	ldi	r22, 0xDC	; 220
    3f4e:	75 e0       	ldi	r23, 0x05	; 5
    3f50:	87 e0       	ldi	r24, 0x07	; 7
    3f52:	95 e0       	ldi	r25, 0x05	; 5
    3f54:	43 ce       	rjmp	.-890    	; 0x3bdc <_uploadMessageRc>
    3f56:	08 95       	ret

00003f58 <lora_driver_setReceiveDelay>:
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	88 e3       	ldi	r24, 0x38	; 56
    3f5e:	95 e0       	ldi	r25, 0x05	; 5
    3f60:	9f 93       	push	r25
    3f62:	8f 93       	push	r24
    3f64:	80 e6       	ldi	r24, 0x60	; 96
    3f66:	96 e1       	ldi	r25, 0x16	; 22
    3f68:	9f 93       	push	r25
    3f6a:	8f 93       	push	r24
    3f6c:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sprintf>
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	80 e6       	ldi	r24, 0x60	; 96
    3f76:	96 e1       	ldi	r25, 0x16	; 22
    3f78:	31 de       	rcall	.-926    	; 0x3bdc <_uploadMessageRc>
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	08 95       	ret

00003f88 <lora_driver_configureToEu868>:
    3f88:	2f 92       	push	r2
    3f8a:	3f 92       	push	r3
    3f8c:	4f 92       	push	r4
    3f8e:	5f 92       	push	r5
    3f90:	6f 92       	push	r6
    3f92:	7f 92       	push	r7
    3f94:	8f 92       	push	r8
    3f96:	9f 92       	push	r9
    3f98:	af 92       	push	r10
    3f9a:	bf 92       	push	r11
    3f9c:	cf 92       	push	r12
    3f9e:	df 92       	push	r13
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	a0 97       	sbiw	r28, 0x20	; 32
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	65 e6       	ldi	r22, 0x65	; 101
    3fbe:	75 e0       	ldi	r23, 0x05	; 5
    3fc0:	81 e7       	ldi	r24, 0x71	; 113
    3fc2:	95 e0       	ldi	r25, 0x05	; 5
    3fc4:	3c dd       	rcall	.-1416   	; 0x3a3e <_uploadMessage>
    3fc6:	95 dd       	rcall	.-1238   	; 0x3af2 <_reply2ReturnCode>
    3fc8:	81 11       	cpse	r24, r1
    3fca:	a3 c0       	rjmp	.+326    	; 0x4112 <lora_driver_configureToEu868+0x18a>
    3fcc:	80 e2       	ldi	r24, 0x20	; 32
    3fce:	e2 e2       	ldi	r30, 0x22	; 34
    3fd0:	f2 e0       	ldi	r31, 0x02	; 2
    3fd2:	de 01       	movw	r26, r28
    3fd4:	11 96       	adiw	r26, 0x01	; 1
    3fd6:	01 90       	ld	r0, Z+
    3fd8:	0d 92       	st	X+, r0
    3fda:	8a 95       	dec	r24
    3fdc:	e1 f7       	brne	.-8      	; 0x3fd6 <lora_driver_configureToEu868+0x4e>
    3fde:	9e 01       	movw	r18, r28
    3fe0:	2f 5f       	subi	r18, 0xFF	; 255
    3fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe4:	69 01       	movw	r12, r18
    3fe6:	e1 2c       	mov	r14, r1
    3fe8:	f1 2c       	mov	r15, r1
    3fea:	0f 2e       	mov	r0, r31
    3fec:	fd e7       	ldi	r31, 0x7D	; 125
    3fee:	af 2e       	mov	r10, r31
    3ff0:	f5 e0       	ldi	r31, 0x05	; 5
    3ff2:	bf 2e       	mov	r11, r31
    3ff4:	f0 2d       	mov	r31, r0
    3ff6:	00 e6       	ldi	r16, 0x60	; 96
    3ff8:	16 e1       	ldi	r17, 0x16	; 22
    3ffa:	0f 2e       	mov	r0, r31
    3ffc:	f6 e9       	ldi	r31, 0x96	; 150
    3ffe:	4f 2e       	mov	r4, r31
    4000:	f5 e0       	ldi	r31, 0x05	; 5
    4002:	5f 2e       	mov	r5, r31
    4004:	f0 2d       	mov	r31, r0
    4006:	0f 2e       	mov	r0, r31
    4008:	fd ea       	ldi	r31, 0xAD	; 173
    400a:	8f 2e       	mov	r8, r31
    400c:	f5 e0       	ldi	r31, 0x05	; 5
    400e:	9f 2e       	mov	r9, r31
    4010:	f0 2d       	mov	r31, r0
    4012:	0f 2e       	mov	r0, r31
    4014:	f7 ec       	ldi	r31, 0xC7	; 199
    4016:	6f 2e       	mov	r6, r31
    4018:	f5 e0       	ldi	r31, 0x05	; 5
    401a:	7f 2e       	mov	r7, r31
    401c:	f0 2d       	mov	r31, r0
    401e:	3e 2c       	mov	r3, r14
    4020:	2f 2c       	mov	r2, r15
    4022:	ff 92       	push	r15
    4024:	ef 92       	push	r14
    4026:	bf 92       	push	r11
    4028:	af 92       	push	r10
    402a:	1f 93       	push	r17
    402c:	0f 93       	push	r16
    402e:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sprintf>
    4032:	60 e0       	ldi	r22, 0x00	; 0
    4034:	70 e0       	ldi	r23, 0x00	; 0
    4036:	c8 01       	movw	r24, r16
    4038:	02 dd       	rcall	.-1532   	; 0x3a3e <_uploadMessage>
    403a:	5b dd       	rcall	.-1354   	; 0x3af2 <_reply2ReturnCode>
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	0f 90       	pop	r0
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	81 11       	cpse	r24, r1
    404a:	63 c0       	rjmp	.+198    	; 0x4112 <lora_driver_configureToEu868+0x18a>
    404c:	32 e0       	ldi	r19, 0x02	; 2
    404e:	3e 15       	cp	r19, r14
    4050:	e8 f4       	brcc	.+58     	; 0x408c <lora_driver_configureToEu868+0x104>
    4052:	f6 01       	movw	r30, r12
    4054:	83 81       	ldd	r24, Z+3	; 0x03
    4056:	8f 93       	push	r24
    4058:	82 81       	ldd	r24, Z+2	; 0x02
    405a:	8f 93       	push	r24
    405c:	81 81       	ldd	r24, Z+1	; 0x01
    405e:	8f 93       	push	r24
    4060:	80 81       	ld	r24, Z
    4062:	8f 93       	push	r24
    4064:	ff 92       	push	r15
    4066:	ef 92       	push	r14
    4068:	5f 92       	push	r5
    406a:	4f 92       	push	r4
    406c:	1f 93       	push	r17
    406e:	0f 93       	push	r16
    4070:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sprintf>
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	c8 01       	movw	r24, r16
    407a:	e1 dc       	rcall	.-1598   	; 0x3a3e <_uploadMessage>
    407c:	3a dd       	rcall	.-1420   	; 0x3af2 <_reply2ReturnCode>
    407e:	0f b6       	in	r0, 0x3f	; 63
    4080:	f8 94       	cli
    4082:	de bf       	out	0x3e, r29	; 62
    4084:	0f be       	out	0x3f, r0	; 63
    4086:	cd bf       	out	0x3d, r28	; 61
    4088:	81 11       	cpse	r24, r1
    408a:	43 c0       	rjmp	.+134    	; 0x4112 <lora_driver_configureToEu868+0x18a>
    408c:	2f 92       	push	r2
    408e:	3f 92       	push	r3
    4090:	9f 92       	push	r9
    4092:	8f 92       	push	r8
    4094:	1f 93       	push	r17
    4096:	0f 93       	push	r16
    4098:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sprintf>
    409c:	60 e0       	ldi	r22, 0x00	; 0
    409e:	70 e0       	ldi	r23, 0x00	; 0
    40a0:	c8 01       	movw	r24, r16
    40a2:	cd dc       	rcall	.-1638   	; 0x3a3e <_uploadMessage>
    40a4:	26 dd       	rcall	.-1460   	; 0x3af2 <_reply2ReturnCode>
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	81 11       	cpse	r24, r1
    40b4:	2e c0       	rjmp	.+92     	; 0x4112 <lora_driver_configureToEu868+0x18a>
    40b6:	2f 92       	push	r2
    40b8:	3f 92       	push	r3
    40ba:	7f 92       	push	r7
    40bc:	6f 92       	push	r6
    40be:	1f 93       	push	r17
    40c0:	0f 93       	push	r16
    40c2:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sprintf>
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	70 e0       	ldi	r23, 0x00	; 0
    40ca:	c8 01       	movw	r24, r16
    40cc:	b8 dc       	rcall	.-1680   	; 0x3a3e <_uploadMessage>
    40ce:	11 dd       	rcall	.-1502   	; 0x3af2 <_reply2ReturnCode>
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	81 11       	cpse	r24, r1
    40de:	19 c0       	rjmp	.+50     	; 0x4112 <lora_driver_configureToEu868+0x18a>
    40e0:	3f ef       	ldi	r19, 0xFF	; 255
    40e2:	e3 1a       	sub	r14, r19
    40e4:	f3 0a       	sbc	r15, r19
    40e6:	84 e0       	ldi	r24, 0x04	; 4
    40e8:	c8 0e       	add	r12, r24
    40ea:	d1 1c       	adc	r13, r1
    40ec:	98 e0       	ldi	r25, 0x08	; 8
    40ee:	e9 16       	cp	r14, r25
    40f0:	f1 04       	cpc	r15, r1
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <lora_driver_configureToEu868+0x16e>
    40f4:	94 cf       	rjmp	.-216    	; 0x401e <lora_driver_configureToEu868+0x96>
    40f6:	60 e0       	ldi	r22, 0x00	; 0
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	8f ed       	ldi	r24, 0xDF	; 223
    40fc:	95 e0       	ldi	r25, 0x05	; 5
    40fe:	9f dc       	rcall	.-1730   	; 0x3a3e <_uploadMessage>
    4100:	f8 dc       	rcall	.-1552   	; 0x3af2 <_reply2ReturnCode>
    4102:	81 11       	cpse	r24, r1
    4104:	06 c0       	rjmp	.+12     	; 0x4112 <lora_driver_configureToEu868+0x18a>
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	80 ef       	ldi	r24, 0xF0	; 240
    410c:	95 e0       	ldi	r25, 0x05	; 5
    410e:	97 dc       	rcall	.-1746   	; 0x3a3e <_uploadMessage>
    4110:	f0 dc       	rcall	.-1568   	; 0x3af2 <_reply2ReturnCode>
    4112:	a0 96       	adiw	r28, 0x20	; 32
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	1f 91       	pop	r17
    4124:	0f 91       	pop	r16
    4126:	ff 90       	pop	r15
    4128:	ef 90       	pop	r14
    412a:	df 90       	pop	r13
    412c:	cf 90       	pop	r12
    412e:	bf 90       	pop	r11
    4130:	af 90       	pop	r10
    4132:	9f 90       	pop	r9
    4134:	8f 90       	pop	r8
    4136:	7f 90       	pop	r7
    4138:	6f 90       	pop	r6
    413a:	5f 90       	pop	r5
    413c:	4f 90       	pop	r4
    413e:	3f 90       	pop	r3
    4140:	2f 90       	pop	r2
    4142:	08 95       	ret

00004144 <lora_driver_setOtaaIdentity>:
    4144:	ef 92       	push	r14
    4146:	ff 92       	push	r15
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	cf 93       	push	r28
    414e:	df 93       	push	r29
    4150:	ec 01       	movw	r28, r24
    4152:	8b 01       	movw	r16, r22
    4154:	7a 01       	movw	r14, r20
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	f4 de       	rcall	.-536    	; 0x3f42 <lora_driver_setAdaptiveDataRate>
    415a:	81 11       	cpse	r24, r1
    415c:	0d c0       	rjmp	.+26     	; 0x4178 <lora_driver_setOtaaIdentity+0x34>
    415e:	ce 01       	movw	r24, r28
    4160:	d4 dd       	rcall	.-1112   	; 0x3d0a <lora_driver_setApplicationIdentifier>
    4162:	81 11       	cpse	r24, r1
    4164:	09 c0       	rjmp	.+18     	; 0x4178 <lora_driver_setOtaaIdentity+0x34>
    4166:	c8 01       	movw	r24, r16
    4168:	e1 dd       	rcall	.-1086   	; 0x3d2c <lora_driver_setApplicationKey>
    416a:	81 11       	cpse	r24, r1
    416c:	05 c0       	rjmp	.+10     	; 0x4178 <lora_driver_setOtaaIdentity+0x34>
    416e:	c7 01       	movw	r24, r14
    4170:	bb dd       	rcall	.-1162   	; 0x3ce8 <lora_driver_setDeviceIdentifier>
    4172:	81 11       	cpse	r24, r1
    4174:	01 c0       	rjmp	.+2      	; 0x4178 <lora_driver_setOtaaIdentity+0x34>
    4176:	eb dd       	rcall	.-1066   	; 0x3d4e <lora_driver_saveMac>
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	1f 91       	pop	r17
    417e:	0f 91       	pop	r16
    4180:	ff 90       	pop	r15
    4182:	ef 90       	pop	r14
    4184:	08 95       	ret

00004186 <lora_driver_mapReturnCodeToText>:
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	fc 01       	movw	r30, r24
    418a:	ee 0f       	add	r30, r30
    418c:	ff 1f       	adc	r31, r31
    418e:	8e 0f       	add	r24, r30
    4190:	9f 1f       	adc	r25, r31
    4192:	fc 01       	movw	r30, r24
    4194:	e7 54       	subi	r30, 0x47	; 71
    4196:	f9 4f       	sbci	r31, 0xF9	; 249
    4198:	81 81       	ldd	r24, Z+1	; 0x01
    419a:	92 81       	ldd	r25, Z+2	; 0x02
    419c:	08 95       	ret

0000419e <decode_port_no>:
    419e:	dc 01       	movw	r26, r24
    41a0:	00 97       	sbiw	r24, 0x00	; 0
    41a2:	29 f1       	breq	.+74     	; 0x41ee <decode_port_no+0x50>
    41a4:	fb 01       	movw	r30, r22
    41a6:	20 81       	ld	r18, Z
    41a8:	fc 01       	movw	r30, r24
    41aa:	01 90       	ld	r0, Z+
    41ac:	00 20       	and	r0, r0
    41ae:	e9 f7       	brne	.-6      	; 0x41aa <decode_port_no+0xc>
    41b0:	31 97       	sbiw	r30, 0x01	; 1
    41b2:	e8 1b       	sub	r30, r24
    41b4:	f9 0b       	sbc	r31, r25
    41b6:	82 2f       	mov	r24, r18
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	e8 17       	cp	r30, r24
    41bc:	f9 07       	cpc	r31, r25
    41be:	c8 f0       	brcs	.+50     	; 0x41f2 <decode_port_no+0x54>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	08 c0       	rjmp	.+16     	; 0x41d4 <decode_port_no+0x36>
    41c4:	88 0f       	add	r24, r24
    41c6:	38 2f       	mov	r19, r24
    41c8:	33 0f       	add	r19, r19
    41ca:	33 0f       	add	r19, r19
    41cc:	83 0f       	add	r24, r19
    41ce:	80 53       	subi	r24, 0x30	; 48
    41d0:	89 0f       	add	r24, r25
    41d2:	2f 5f       	subi	r18, 0xFF	; 255
    41d4:	fd 01       	movw	r30, r26
    41d6:	e2 0f       	add	r30, r18
    41d8:	f1 1d       	adc	r31, r1
    41da:	90 81       	ld	r25, Z
    41dc:	30 ed       	ldi	r19, 0xD0	; 208
    41de:	39 0f       	add	r19, r25
    41e0:	3a 30       	cpi	r19, 0x0A	; 10
    41e2:	10 f4       	brcc	.+4      	; 0x41e8 <decode_port_no+0x4a>
    41e4:	91 11       	cpse	r25, r1
    41e6:	ee cf       	rjmp	.-36     	; 0x41c4 <decode_port_no+0x26>
    41e8:	fb 01       	movw	r30, r22
    41ea:	20 83       	st	Z, r18
    41ec:	08 95       	ret
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	08 95       	ret
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	08 95       	ret

000041f6 <decode_hexadecimal_string_bytes>:
    41f6:	0f 93       	push	r16
    41f8:	1f 93       	push	r17
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	dc 01       	movw	r26, r24
    4200:	ea 01       	movw	r28, r20
    4202:	20 97       	sbiw	r28, 0x00	; 0
    4204:	e1 f1       	breq	.+120    	; 0x427e <decode_hexadecimal_string_bytes+0x88>
    4206:	fa 01       	movw	r30, r20
    4208:	01 90       	ld	r0, Z+
    420a:	00 20       	and	r0, r0
    420c:	e9 f7       	brne	.-6      	; 0x4208 <decode_hexadecimal_string_bytes+0x12>
    420e:	31 97       	sbiw	r30, 0x01	; 1
    4210:	e4 1b       	sub	r30, r20
    4212:	f5 0b       	sbc	r31, r21
    4214:	32 97       	sbiw	r30, 0x02	; 2
    4216:	10 f5       	brcc	.+68     	; 0x425c <decode_hexadecimal_string_bytes+0x66>
    4218:	32 c0       	rjmp	.+100    	; 0x427e <decode_hexadecimal_string_bytes+0x88>
    421a:	8d 01       	movw	r16, r26
    421c:	04 0f       	add	r16, r20
    421e:	15 1f       	adc	r17, r21
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	ae 01       	movw	r20, r28
    4224:	42 0f       	add	r20, r18
    4226:	53 1f       	adc	r21, r19
    4228:	fa 01       	movw	r30, r20
    422a:	90 81       	ld	r25, Z
    422c:	91 34       	cpi	r25, 0x41	; 65
    422e:	28 f0       	brcs	.+10     	; 0x423a <decode_hexadecimal_string_bytes+0x44>
    4230:	97 53       	subi	r25, 0x37	; 55
    4232:	59 2f       	mov	r21, r25
    4234:	52 95       	swap	r21
    4236:	50 7f       	andi	r21, 0xF0	; 240
    4238:	03 c0       	rjmp	.+6      	; 0x4240 <decode_hexadecimal_string_bytes+0x4a>
    423a:	59 2f       	mov	r21, r25
    423c:	52 95       	swap	r21
    423e:	50 7f       	andi	r21, 0xF0	; 240
    4240:	2c 0f       	add	r18, r28
    4242:	3d 1f       	adc	r19, r29
    4244:	f9 01       	movw	r30, r18
    4246:	91 81       	ldd	r25, Z+1	; 0x01
    4248:	91 34       	cpi	r25, 0x41	; 65
    424a:	10 f0       	brcs	.+4      	; 0x4250 <decode_hexadecimal_string_bytes+0x5a>
    424c:	97 53       	subi	r25, 0x37	; 55
    424e:	01 c0       	rjmp	.+2      	; 0x4252 <decode_hexadecimal_string_bytes+0x5c>
    4250:	90 53       	subi	r25, 0x30	; 48
    4252:	95 0f       	add	r25, r21
    4254:	f8 01       	movw	r30, r16
    4256:	90 83       	st	Z, r25
    4258:	8f 5f       	subi	r24, 0xFF	; 255
    425a:	01 c0       	rjmp	.+2      	; 0x425e <decode_hexadecimal_string_bytes+0x68>
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	28 2f       	mov	r18, r24
    4260:	22 0f       	add	r18, r18
    4262:	48 2f       	mov	r20, r24
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	fe 01       	movw	r30, r28
    4268:	01 90       	ld	r0, Z+
    426a:	00 20       	and	r0, r0
    426c:	e9 f7       	brne	.-6      	; 0x4268 <decode_hexadecimal_string_bytes+0x72>
    426e:	31 97       	sbiw	r30, 0x01	; 1
    4270:	ec 1b       	sub	r30, r28
    4272:	fd 0b       	sbc	r31, r29
    4274:	4e 17       	cp	r20, r30
    4276:	5f 07       	cpc	r21, r31
    4278:	10 f4       	brcc	.+4      	; 0x427e <decode_hexadecimal_string_bytes+0x88>
    427a:	86 13       	cpse	r24, r22
    427c:	ce cf       	rjmp	.-100    	; 0x421a <decode_hexadecimal_string_bytes+0x24>
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	1f 91       	pop	r17
    4284:	0f 91       	pop	r16
    4286:	08 95       	ret

00004288 <serial_create>:
    4288:	2f 92       	push	r2
    428a:	3f 92       	push	r3
    428c:	4f 92       	push	r4
    428e:	5f 92       	push	r5
    4290:	6f 92       	push	r6
    4292:	7f 92       	push	r7
    4294:	8f 92       	push	r8
    4296:	9f 92       	push	r9
    4298:	af 92       	push	r10
    429a:	cf 92       	push	r12
    429c:	ef 92       	push	r14
    429e:	ff 92       	push	r15
    42a0:	0f 93       	push	r16
    42a2:	1f 93       	push	r17
    42a4:	cf 93       	push	r28
    42a6:	df 93       	push	r29
    42a8:	cd b7       	in	r28, 0x3d	; 61
    42aa:	de b7       	in	r29, 0x3e	; 62
    42ac:	f8 2e       	mov	r15, r24
    42ae:	2a 01       	movw	r4, r20
    42b0:	3b 01       	movw	r6, r22
    42b2:	88 e0       	ldi	r24, 0x08	; 8
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	0e 94 c4 29 	call	0x5388	; 0x5388 <malloc>
    42ba:	8c 01       	movw	r16, r24
    42bc:	8f 2d       	mov	r24, r15
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	fc 01       	movw	r30, r24
    42c2:	ee 0f       	add	r30, r30
    42c4:	ff 1f       	adc	r31, r31
    42c6:	e6 54       	subi	r30, 0x46	; 70
    42c8:	f9 4e       	sbci	r31, 0xE9	; 233
    42ca:	11 83       	std	Z+1, r17	; 0x01
    42cc:	00 83       	st	Z, r16
    42ce:	01 15       	cp	r16, r1
    42d0:	11 05       	cpc	r17, r1
    42d2:	09 f4       	brne	.+2      	; 0x42d6 <serial_create+0x4e>
    42d4:	68 c0       	rjmp	.+208    	; 0x43a6 <serial_create+0x11e>
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	fc 01       	movw	r30, r24
    42dc:	e5 5f       	subi	r30, 0xF5	; 245
    42de:	fd 4f       	sbci	r31, 0xFD	; 253
    42e0:	80 81       	ld	r24, Z
    42e2:	91 81       	ldd	r25, Z+1	; 0x01
    42e4:	d8 01       	movw	r26, r16
    42e6:	8d 93       	st	X+, r24
    42e8:	9c 93       	st	X, r25
    42ea:	8c 2d       	mov	r24, r12
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	88 0f       	add	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	0e 94 c4 29 	call	0x5388	; 0x5388 <malloc>
    42fa:	1c 01       	movw	r2, r24
    42fc:	86 e0       	ldi	r24, 0x06	; 6
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	0e 94 c4 29 	call	0x5388	; 0x5388 <malloc>
    4304:	7c 01       	movw	r14, r24
    4306:	4c 2d       	mov	r20, r12
    4308:	b1 01       	movw	r22, r2
    430a:	5b d6       	rcall	.+3254   	; 0x4fc2 <fifo_init>
    430c:	f8 01       	movw	r30, r16
    430e:	f5 82       	std	Z+5, r15	; 0x05
    4310:	e4 82       	std	Z+4, r14	; 0x04
    4312:	8a 2d       	mov	r24, r10
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	0e 94 c4 29 	call	0x5388	; 0x5388 <malloc>
    4322:	1c 01       	movw	r2, r24
    4324:	86 e0       	ldi	r24, 0x06	; 6
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 c4 29 	call	0x5388	; 0x5388 <malloc>
    432c:	7c 01       	movw	r14, r24
    432e:	4a 2d       	mov	r20, r10
    4330:	b1 01       	movw	r22, r2
    4332:	47 d6       	rcall	.+3214   	; 0x4fc2 <fifo_init>
    4334:	d8 01       	movw	r26, r16
    4336:	13 96       	adiw	r26, 0x03	; 3
    4338:	fc 92       	st	X, r15
    433a:	ee 92       	st	-X, r14
    433c:	12 97       	sbiw	r26, 0x02	; 2
    433e:	17 96       	adiw	r26, 0x07	; 7
    4340:	9c 92       	st	X, r9
    4342:	8e 92       	st	-X, r8
    4344:	16 97       	sbiw	r26, 0x06	; 6
    4346:	ff b6       	in	r15, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	ed 91       	ld	r30, X+
    434c:	fc 91       	ld	r31, X
    434e:	11 97       	sbiw	r26, 0x01	; 1
    4350:	36 97       	sbiw	r30, 0x06	; 6
    4352:	80 81       	ld	r24, Z
    4354:	82 60       	ori	r24, 0x02	; 2
    4356:	80 83       	st	Z, r24
    4358:	8d 90       	ld	r8, X+
    435a:	9c 90       	ld	r9, X
    435c:	c3 01       	movw	r24, r6
    435e:	b2 01       	movw	r22, r4
    4360:	1e d7       	rcall	.+3644   	; 0x519e <__floatunsisf>
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	51 e4       	ldi	r21, 0x41	; 65
    436a:	7e d7       	rcall	.+3836   	; 0x5268 <__mulsf3>
    436c:	9b 01       	movw	r18, r22
    436e:	ac 01       	movw	r20, r24
    4370:	60 e0       	ldi	r22, 0x00	; 0
    4372:	74 e2       	ldi	r23, 0x24	; 36
    4374:	84 e7       	ldi	r24, 0x74	; 116
    4376:	9b e4       	ldi	r25, 0x4B	; 75
    4378:	a7 d6       	rcall	.+3406   	; 0x50c8 <__divsf3>
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e8       	ldi	r20, 0x80	; 128
    4380:	5f e3       	ldi	r21, 0x3F	; 63
    4382:	3b d6       	rcall	.+3190   	; 0x4ffa <__subsf3>
    4384:	7c da       	rcall	.-2824   	; 0x387e <__fixunssfsi>
    4386:	f4 01       	movw	r30, r8
    4388:	32 97       	sbiw	r30, 0x02	; 2
    438a:	60 83       	st	Z, r22
    438c:	d8 01       	movw	r26, r16
    438e:	ed 91       	ld	r30, X+
    4390:	fc 91       	ld	r31, X
    4392:	11 97       	sbiw	r26, 0x01	; 1
    4394:	35 97       	sbiw	r30, 0x05	; 5
    4396:	88 e9       	ldi	r24, 0x98	; 152
    4398:	80 83       	st	Z, r24
    439a:	ed 91       	ld	r30, X+
    439c:	fc 91       	ld	r31, X
    439e:	34 97       	sbiw	r30, 0x04	; 4
    43a0:	86 e0       	ldi	r24, 0x06	; 6
    43a2:	80 83       	st	Z, r24
    43a4:	ff be       	out	0x3f, r15	; 63
    43a6:	c8 01       	movw	r24, r16
    43a8:	df 91       	pop	r29
    43aa:	cf 91       	pop	r28
    43ac:	1f 91       	pop	r17
    43ae:	0f 91       	pop	r16
    43b0:	ff 90       	pop	r15
    43b2:	ef 90       	pop	r14
    43b4:	cf 90       	pop	r12
    43b6:	af 90       	pop	r10
    43b8:	9f 90       	pop	r9
    43ba:	8f 90       	pop	r8
    43bc:	7f 90       	pop	r7
    43be:	6f 90       	pop	r6
    43c0:	5f 90       	pop	r5
    43c2:	4f 90       	pop	r4
    43c4:	3f 90       	pop	r3
    43c6:	2f 90       	pop	r2
    43c8:	08 95       	ret

000043ca <serial_sendByte>:
    43ca:	cf 93       	push	r28
    43cc:	df 93       	push	r29
    43ce:	dc 01       	movw	r26, r24
    43d0:	89 2b       	or	r24, r25
    43d2:	01 f1       	breq	.+64     	; 0x4414 <serial_sendByte+0x4a>
    43d4:	12 96       	adiw	r26, 0x02	; 2
    43d6:	ed 91       	ld	r30, X+
    43d8:	fc 91       	ld	r31, X
    43da:	13 97       	sbiw	r26, 0x03	; 3
    43dc:	93 81       	ldd	r25, Z+3	; 0x03
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	25 81       	ldd	r18, Z+5	; 0x05
    43e2:	98 1b       	sub	r25, r24
    43e4:	92 23       	and	r25, r18
    43e6:	84 81       	ldd	r24, Z+4	; 0x04
    43e8:	98 17       	cp	r25, r24
    43ea:	b1 f0       	breq	.+44     	; 0x4418 <serial_sendByte+0x4e>
    43ec:	83 81       	ldd	r24, Z+3	; 0x03
    43ee:	26 95       	lsr	r18
    43f0:	28 23       	and	r18, r24
    43f2:	c0 81       	ld	r28, Z
    43f4:	d1 81       	ldd	r29, Z+1	; 0x01
    43f6:	c2 0f       	add	r28, r18
    43f8:	d1 1d       	adc	r29, r1
    43fa:	68 83       	st	Y, r22
    43fc:	8f 5f       	subi	r24, 0xFF	; 255
    43fe:	95 81       	ldd	r25, Z+5	; 0x05
    4400:	89 23       	and	r24, r25
    4402:	83 83       	std	Z+3, r24	; 0x03
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	35 97       	sbiw	r30, 0x05	; 5
    440a:	80 81       	ld	r24, Z
    440c:	80 62       	ori	r24, 0x20	; 32
    440e:	80 83       	st	Z, r24
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	03 c0       	rjmp	.+6      	; 0x441a <serial_sendByte+0x50>
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	01 c0       	rjmp	.+2      	; 0x441a <serial_sendByte+0x50>
    4418:	82 e0       	ldi	r24, 0x02	; 2
    441a:	df 91       	pop	r29
    441c:	cf 91       	pop	r28
    441e:	08 95       	ret

00004420 <serial_sendBytes>:
    4420:	ef 92       	push	r14
    4422:	ff 92       	push	r15
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	7c 01       	movw	r14, r24
    442e:	00 97       	sbiw	r24, 0x00	; 0
    4430:	09 f4       	brne	.+2      	; 0x4434 <serial_sendBytes+0x14>
    4432:	41 c0       	rjmp	.+130    	; 0x44b6 <serial_sendBytes+0x96>
    4434:	dc 01       	movw	r26, r24
    4436:	12 96       	adiw	r26, 0x02	; 2
    4438:	ed 91       	ld	r30, X+
    443a:	fc 91       	ld	r31, X
    443c:	13 97       	sbiw	r26, 0x03	; 3
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	98 1b       	sub	r25, r24
    4444:	85 81       	ldd	r24, Z+5	; 0x05
    4446:	98 23       	and	r25, r24
    4448:	84 81       	ldd	r24, Z+4	; 0x04
    444a:	89 1b       	sub	r24, r25
    444c:	86 17       	cp	r24, r22
    444e:	a8 f1       	brcs	.+106    	; 0x44ba <serial_sendBytes+0x9a>
    4450:	66 23       	and	r22, r22
    4452:	41 f1       	breq	.+80     	; 0x44a4 <serial_sendBytes+0x84>
    4454:	84 2f       	mov	r24, r20
    4456:	95 2f       	mov	r25, r21
    4458:	dc 01       	movw	r26, r24
    445a:	61 50       	subi	r22, 0x01	; 1
    445c:	46 2f       	mov	r20, r22
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	4f 5f       	subi	r20, 0xFF	; 255
    4462:	5f 4f       	sbci	r21, 0xFF	; 255
    4464:	48 0f       	add	r20, r24
    4466:	59 1f       	adc	r21, r25
    4468:	e7 01       	movw	r28, r14
    446a:	ea 81       	ldd	r30, Y+2	; 0x02
    446c:	fb 81       	ldd	r31, Y+3	; 0x03
    446e:	93 81       	ldd	r25, Z+3	; 0x03
    4470:	82 81       	ldd	r24, Z+2	; 0x02
    4472:	25 81       	ldd	r18, Z+5	; 0x05
    4474:	98 1b       	sub	r25, r24
    4476:	92 23       	and	r25, r18
    4478:	84 81       	ldd	r24, Z+4	; 0x04
    447a:	98 17       	cp	r25, r24
    447c:	79 f0       	breq	.+30     	; 0x449c <serial_sendBytes+0x7c>
    447e:	8c 91       	ld	r24, X
    4480:	93 81       	ldd	r25, Z+3	; 0x03
    4482:	26 95       	lsr	r18
    4484:	29 23       	and	r18, r25
    4486:	60 81       	ld	r22, Z
    4488:	71 81       	ldd	r23, Z+1	; 0x01
    448a:	8b 01       	movw	r16, r22
    448c:	02 0f       	add	r16, r18
    448e:	11 1d       	adc	r17, r1
    4490:	e8 01       	movw	r28, r16
    4492:	88 83       	st	Y, r24
    4494:	9f 5f       	subi	r25, 0xFF	; 255
    4496:	85 81       	ldd	r24, Z+5	; 0x05
    4498:	98 23       	and	r25, r24
    449a:	93 83       	std	Z+3, r25	; 0x03
    449c:	11 96       	adiw	r26, 0x01	; 1
    449e:	a4 17       	cp	r26, r20
    44a0:	b5 07       	cpc	r27, r21
    44a2:	11 f7       	brne	.-60     	; 0x4468 <serial_sendBytes+0x48>
    44a4:	d7 01       	movw	r26, r14
    44a6:	ed 91       	ld	r30, X+
    44a8:	fc 91       	ld	r31, X
    44aa:	35 97       	sbiw	r30, 0x05	; 5
    44ac:	80 81       	ld	r24, Z
    44ae:	80 62       	ori	r24, 0x20	; 32
    44b0:	80 83       	st	Z, r24
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	03 c0       	rjmp	.+6      	; 0x44bc <serial_sendBytes+0x9c>
    44b6:	81 e0       	ldi	r24, 0x01	; 1
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <serial_sendBytes+0x9c>
    44ba:	82 e0       	ldi	r24, 0x02	; 2
    44bc:	df 91       	pop	r29
    44be:	cf 91       	pop	r28
    44c0:	1f 91       	pop	r17
    44c2:	0f 91       	pop	r16
    44c4:	ff 90       	pop	r15
    44c6:	ef 90       	pop	r14
    44c8:	08 95       	ret

000044ca <serial_getByte>:
    44ca:	00 97       	sbiw	r24, 0x00	; 0
    44cc:	d1 f0       	breq	.+52     	; 0x4502 <serial_getByte+0x38>
    44ce:	dc 01       	movw	r26, r24
    44d0:	14 96       	adiw	r26, 0x04	; 4
    44d2:	ed 91       	ld	r30, X+
    44d4:	fc 91       	ld	r31, X
    44d6:	15 97       	sbiw	r26, 0x05	; 5
    44d8:	93 81       	ldd	r25, Z+3	; 0x03
    44da:	82 81       	ldd	r24, Z+2	; 0x02
    44dc:	98 17       	cp	r25, r24
    44de:	99 f0       	breq	.+38     	; 0x4506 <serial_getByte+0x3c>
    44e0:	92 81       	ldd	r25, Z+2	; 0x02
    44e2:	85 81       	ldd	r24, Z+5	; 0x05
    44e4:	86 95       	lsr	r24
    44e6:	89 23       	and	r24, r25
    44e8:	a0 81       	ld	r26, Z
    44ea:	b1 81       	ldd	r27, Z+1	; 0x01
    44ec:	a8 0f       	add	r26, r24
    44ee:	b1 1d       	adc	r27, r1
    44f0:	8c 91       	ld	r24, X
    44f2:	db 01       	movw	r26, r22
    44f4:	8c 93       	st	X, r24
    44f6:	9f 5f       	subi	r25, 0xFF	; 255
    44f8:	85 81       	ldd	r24, Z+5	; 0x05
    44fa:	98 23       	and	r25, r24
    44fc:	92 83       	std	Z+2, r25	; 0x02
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	08 95       	ret
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	08 95       	ret
    4506:	83 e0       	ldi	r24, 0x03	; 3
    4508:	08 95       	ret

0000450a <__vector_25>:
    450a:	1f 92       	push	r1
    450c:	0f 92       	push	r0
    450e:	0f b6       	in	r0, 0x3f	; 63
    4510:	0f 92       	push	r0
    4512:	11 24       	eor	r1, r1
    4514:	0b b6       	in	r0, 0x3b	; 59
    4516:	0f 92       	push	r0
    4518:	2f 93       	push	r18
    451a:	3f 93       	push	r19
    451c:	4f 93       	push	r20
    451e:	5f 93       	push	r21
    4520:	6f 93       	push	r22
    4522:	7f 93       	push	r23
    4524:	8f 93       	push	r24
    4526:	9f 93       	push	r25
    4528:	af 93       	push	r26
    452a:	bf 93       	push	r27
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	ef 93       	push	r30
    4532:	ff 93       	push	r31
    4534:	a0 91 ba 16 	lds	r26, 0x16BA	; 0x8016ba <_ser_handle>
    4538:	b0 91 bb 16 	lds	r27, 0x16BB	; 0x8016bb <_ser_handle+0x1>
    453c:	10 97       	sbiw	r26, 0x00	; 0
    453e:	11 f1       	breq	.+68     	; 0x4584 <__vector_25+0x7a>
    4540:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4544:	14 96       	adiw	r26, 0x04	; 4
    4546:	ed 91       	ld	r30, X+
    4548:	fc 91       	ld	r31, X
    454a:	15 97       	sbiw	r26, 0x05	; 5
    454c:	93 81       	ldd	r25, Z+3	; 0x03
    454e:	82 81       	ldd	r24, Z+2	; 0x02
    4550:	25 81       	ldd	r18, Z+5	; 0x05
    4552:	98 1b       	sub	r25, r24
    4554:	92 23       	and	r25, r18
    4556:	84 81       	ldd	r24, Z+4	; 0x04
    4558:	98 17       	cp	r25, r24
    455a:	61 f0       	breq	.+24     	; 0x4574 <__vector_25+0x6a>
    455c:	83 81       	ldd	r24, Z+3	; 0x03
    455e:	26 95       	lsr	r18
    4560:	28 23       	and	r18, r24
    4562:	c0 81       	ld	r28, Z
    4564:	d1 81       	ldd	r29, Z+1	; 0x01
    4566:	c2 0f       	add	r28, r18
    4568:	d1 1d       	adc	r29, r1
    456a:	68 83       	st	Y, r22
    456c:	8f 5f       	subi	r24, 0xFF	; 255
    456e:	95 81       	ldd	r25, Z+5	; 0x05
    4570:	89 23       	and	r24, r25
    4572:	83 83       	std	Z+3, r24	; 0x03
    4574:	16 96       	adiw	r26, 0x06	; 6
    4576:	ed 91       	ld	r30, X+
    4578:	fc 91       	ld	r31, X
    457a:	17 97       	sbiw	r26, 0x07	; 7
    457c:	30 97       	sbiw	r30, 0x00	; 0
    457e:	11 f0       	breq	.+4      	; 0x4584 <__vector_25+0x7a>
    4580:	cd 01       	movw	r24, r26
    4582:	19 95       	eicall
    4584:	ff 91       	pop	r31
    4586:	ef 91       	pop	r30
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	bf 91       	pop	r27
    458e:	af 91       	pop	r26
    4590:	9f 91       	pop	r25
    4592:	8f 91       	pop	r24
    4594:	7f 91       	pop	r23
    4596:	6f 91       	pop	r22
    4598:	5f 91       	pop	r21
    459a:	4f 91       	pop	r20
    459c:	3f 91       	pop	r19
    459e:	2f 91       	pop	r18
    45a0:	0f 90       	pop	r0
    45a2:	0b be       	out	0x3b, r0	; 59
    45a4:	0f 90       	pop	r0
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	0f 90       	pop	r0
    45aa:	1f 90       	pop	r1
    45ac:	18 95       	reti

000045ae <__vector_26>:
    45ae:	1f 92       	push	r1
    45b0:	0f 92       	push	r0
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	0f 92       	push	r0
    45b6:	11 24       	eor	r1, r1
    45b8:	0b b6       	in	r0, 0x3b	; 59
    45ba:	0f 92       	push	r0
    45bc:	2f 93       	push	r18
    45be:	8f 93       	push	r24
    45c0:	9f 93       	push	r25
    45c2:	af 93       	push	r26
    45c4:	bf 93       	push	r27
    45c6:	ef 93       	push	r30
    45c8:	ff 93       	push	r31
    45ca:	e0 91 ba 16 	lds	r30, 0x16BA	; 0x8016ba <_ser_handle>
    45ce:	f0 91 bb 16 	lds	r31, 0x16BB	; 0x8016bb <_ser_handle+0x1>
    45d2:	30 97       	sbiw	r30, 0x00	; 0
    45d4:	b9 f0       	breq	.+46     	; 0x4604 <__vector_26+0x56>
    45d6:	02 80       	ldd	r0, Z+2	; 0x02
    45d8:	f3 81       	ldd	r31, Z+3	; 0x03
    45da:	e0 2d       	mov	r30, r0
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	82 81       	ldd	r24, Z+2	; 0x02
    45e0:	98 17       	cp	r25, r24
    45e2:	b1 f0       	breq	.+44     	; 0x4610 <__vector_26+0x62>
    45e4:	92 81       	ldd	r25, Z+2	; 0x02
    45e6:	85 81       	ldd	r24, Z+5	; 0x05
    45e8:	28 2f       	mov	r18, r24
    45ea:	26 95       	lsr	r18
    45ec:	29 23       	and	r18, r25
    45ee:	a0 81       	ld	r26, Z
    45f0:	b1 81       	ldd	r27, Z+1	; 0x01
    45f2:	a2 0f       	add	r26, r18
    45f4:	b1 1d       	adc	r27, r1
    45f6:	2c 91       	ld	r18, X
    45f8:	9f 5f       	subi	r25, 0xFF	; 255
    45fa:	89 23       	and	r24, r25
    45fc:	82 83       	std	Z+2, r24	; 0x02
    45fe:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4602:	0b c0       	rjmp	.+22     	; 0x461a <__vector_26+0x6c>
    4604:	e1 ec       	ldi	r30, 0xC1	; 193
    4606:	f0 e0       	ldi	r31, 0x00	; 0
    4608:	80 81       	ld	r24, Z
    460a:	8f 7d       	andi	r24, 0xDF	; 223
    460c:	80 83       	st	Z, r24
    460e:	05 c0       	rjmp	.+10     	; 0x461a <__vector_26+0x6c>
    4610:	e1 ec       	ldi	r30, 0xC1	; 193
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	80 81       	ld	r24, Z
    4616:	8f 7d       	andi	r24, 0xDF	; 223
    4618:	80 83       	st	Z, r24
    461a:	ff 91       	pop	r31
    461c:	ef 91       	pop	r30
    461e:	bf 91       	pop	r27
    4620:	af 91       	pop	r26
    4622:	9f 91       	pop	r25
    4624:	8f 91       	pop	r24
    4626:	2f 91       	pop	r18
    4628:	0f 90       	pop	r0
    462a:	0b be       	out	0x3b, r0	; 59
    462c:	0f 90       	pop	r0
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	0f 90       	pop	r0
    4632:	1f 90       	pop	r1
    4634:	18 95       	reti

00004636 <__vector_36>:
    4636:	1f 92       	push	r1
    4638:	0f 92       	push	r0
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	0f 92       	push	r0
    463e:	11 24       	eor	r1, r1
    4640:	0b b6       	in	r0, 0x3b	; 59
    4642:	0f 92       	push	r0
    4644:	2f 93       	push	r18
    4646:	3f 93       	push	r19
    4648:	4f 93       	push	r20
    464a:	5f 93       	push	r21
    464c:	6f 93       	push	r22
    464e:	7f 93       	push	r23
    4650:	8f 93       	push	r24
    4652:	9f 93       	push	r25
    4654:	af 93       	push	r26
    4656:	bf 93       	push	r27
    4658:	cf 93       	push	r28
    465a:	df 93       	push	r29
    465c:	ef 93       	push	r30
    465e:	ff 93       	push	r31
    4660:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <_ser_handle+0x2>
    4664:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <_ser_handle+0x3>
    4668:	10 97       	sbiw	r26, 0x00	; 0
    466a:	11 f1       	breq	.+68     	; 0x46b0 <__vector_36+0x7a>
    466c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4670:	14 96       	adiw	r26, 0x04	; 4
    4672:	ed 91       	ld	r30, X+
    4674:	fc 91       	ld	r31, X
    4676:	15 97       	sbiw	r26, 0x05	; 5
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	82 81       	ldd	r24, Z+2	; 0x02
    467c:	25 81       	ldd	r18, Z+5	; 0x05
    467e:	98 1b       	sub	r25, r24
    4680:	92 23       	and	r25, r18
    4682:	84 81       	ldd	r24, Z+4	; 0x04
    4684:	98 17       	cp	r25, r24
    4686:	61 f0       	breq	.+24     	; 0x46a0 <__vector_36+0x6a>
    4688:	83 81       	ldd	r24, Z+3	; 0x03
    468a:	26 95       	lsr	r18
    468c:	28 23       	and	r18, r24
    468e:	c0 81       	ld	r28, Z
    4690:	d1 81       	ldd	r29, Z+1	; 0x01
    4692:	c2 0f       	add	r28, r18
    4694:	d1 1d       	adc	r29, r1
    4696:	68 83       	st	Y, r22
    4698:	8f 5f       	subi	r24, 0xFF	; 255
    469a:	95 81       	ldd	r25, Z+5	; 0x05
    469c:	89 23       	and	r24, r25
    469e:	83 83       	std	Z+3, r24	; 0x03
    46a0:	16 96       	adiw	r26, 0x06	; 6
    46a2:	ed 91       	ld	r30, X+
    46a4:	fc 91       	ld	r31, X
    46a6:	17 97       	sbiw	r26, 0x07	; 7
    46a8:	30 97       	sbiw	r30, 0x00	; 0
    46aa:	11 f0       	breq	.+4      	; 0x46b0 <__vector_36+0x7a>
    46ac:	cd 01       	movw	r24, r26
    46ae:	19 95       	eicall
    46b0:	ff 91       	pop	r31
    46b2:	ef 91       	pop	r30
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	bf 91       	pop	r27
    46ba:	af 91       	pop	r26
    46bc:	9f 91       	pop	r25
    46be:	8f 91       	pop	r24
    46c0:	7f 91       	pop	r23
    46c2:	6f 91       	pop	r22
    46c4:	5f 91       	pop	r21
    46c6:	4f 91       	pop	r20
    46c8:	3f 91       	pop	r19
    46ca:	2f 91       	pop	r18
    46cc:	0f 90       	pop	r0
    46ce:	0b be       	out	0x3b, r0	; 59
    46d0:	0f 90       	pop	r0
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	0f 90       	pop	r0
    46d6:	1f 90       	pop	r1
    46d8:	18 95       	reti

000046da <__vector_37>:
    46da:	1f 92       	push	r1
    46dc:	0f 92       	push	r0
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	0f 92       	push	r0
    46e2:	11 24       	eor	r1, r1
    46e4:	0b b6       	in	r0, 0x3b	; 59
    46e6:	0f 92       	push	r0
    46e8:	2f 93       	push	r18
    46ea:	8f 93       	push	r24
    46ec:	9f 93       	push	r25
    46ee:	af 93       	push	r26
    46f0:	bf 93       	push	r27
    46f2:	ef 93       	push	r30
    46f4:	ff 93       	push	r31
    46f6:	e0 91 bc 16 	lds	r30, 0x16BC	; 0x8016bc <_ser_handle+0x2>
    46fa:	f0 91 bd 16 	lds	r31, 0x16BD	; 0x8016bd <_ser_handle+0x3>
    46fe:	30 97       	sbiw	r30, 0x00	; 0
    4700:	b9 f0       	breq	.+46     	; 0x4730 <__vector_37+0x56>
    4702:	02 80       	ldd	r0, Z+2	; 0x02
    4704:	f3 81       	ldd	r31, Z+3	; 0x03
    4706:	e0 2d       	mov	r30, r0
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	98 17       	cp	r25, r24
    470e:	b1 f0       	breq	.+44     	; 0x473c <__vector_37+0x62>
    4710:	92 81       	ldd	r25, Z+2	; 0x02
    4712:	85 81       	ldd	r24, Z+5	; 0x05
    4714:	28 2f       	mov	r18, r24
    4716:	26 95       	lsr	r18
    4718:	29 23       	and	r18, r25
    471a:	a0 81       	ld	r26, Z
    471c:	b1 81       	ldd	r27, Z+1	; 0x01
    471e:	a2 0f       	add	r26, r18
    4720:	b1 1d       	adc	r27, r1
    4722:	2c 91       	ld	r18, X
    4724:	9f 5f       	subi	r25, 0xFF	; 255
    4726:	89 23       	and	r24, r25
    4728:	82 83       	std	Z+2, r24	; 0x02
    472a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    472e:	0b c0       	rjmp	.+22     	; 0x4746 <__vector_37+0x6c>
    4730:	e9 ec       	ldi	r30, 0xC9	; 201
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	8f 7d       	andi	r24, 0xDF	; 223
    4738:	80 83       	st	Z, r24
    473a:	05 c0       	rjmp	.+10     	; 0x4746 <__vector_37+0x6c>
    473c:	e9 ec       	ldi	r30, 0xC9	; 201
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	8f 7d       	andi	r24, 0xDF	; 223
    4744:	80 83       	st	Z, r24
    4746:	ff 91       	pop	r31
    4748:	ef 91       	pop	r30
    474a:	bf 91       	pop	r27
    474c:	af 91       	pop	r26
    474e:	9f 91       	pop	r25
    4750:	8f 91       	pop	r24
    4752:	2f 91       	pop	r18
    4754:	0f 90       	pop	r0
    4756:	0b be       	out	0x3b, r0	; 59
    4758:	0f 90       	pop	r0
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	0f 90       	pop	r0
    475e:	1f 90       	pop	r1
    4760:	18 95       	reti

00004762 <__vector_51>:
    4762:	1f 92       	push	r1
    4764:	0f 92       	push	r0
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	0f 92       	push	r0
    476a:	11 24       	eor	r1, r1
    476c:	0b b6       	in	r0, 0x3b	; 59
    476e:	0f 92       	push	r0
    4770:	2f 93       	push	r18
    4772:	3f 93       	push	r19
    4774:	4f 93       	push	r20
    4776:	5f 93       	push	r21
    4778:	6f 93       	push	r22
    477a:	7f 93       	push	r23
    477c:	8f 93       	push	r24
    477e:	9f 93       	push	r25
    4780:	af 93       	push	r26
    4782:	bf 93       	push	r27
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	ef 93       	push	r30
    478a:	ff 93       	push	r31
    478c:	a0 91 be 16 	lds	r26, 0x16BE	; 0x8016be <_ser_handle+0x4>
    4790:	b0 91 bf 16 	lds	r27, 0x16BF	; 0x8016bf <_ser_handle+0x5>
    4794:	10 97       	sbiw	r26, 0x00	; 0
    4796:	11 f1       	breq	.+68     	; 0x47dc <__vector_51+0x7a>
    4798:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    479c:	14 96       	adiw	r26, 0x04	; 4
    479e:	ed 91       	ld	r30, X+
    47a0:	fc 91       	ld	r31, X
    47a2:	15 97       	sbiw	r26, 0x05	; 5
    47a4:	93 81       	ldd	r25, Z+3	; 0x03
    47a6:	82 81       	ldd	r24, Z+2	; 0x02
    47a8:	25 81       	ldd	r18, Z+5	; 0x05
    47aa:	98 1b       	sub	r25, r24
    47ac:	92 23       	and	r25, r18
    47ae:	84 81       	ldd	r24, Z+4	; 0x04
    47b0:	98 17       	cp	r25, r24
    47b2:	61 f0       	breq	.+24     	; 0x47cc <__vector_51+0x6a>
    47b4:	83 81       	ldd	r24, Z+3	; 0x03
    47b6:	26 95       	lsr	r18
    47b8:	28 23       	and	r18, r24
    47ba:	c0 81       	ld	r28, Z
    47bc:	d1 81       	ldd	r29, Z+1	; 0x01
    47be:	c2 0f       	add	r28, r18
    47c0:	d1 1d       	adc	r29, r1
    47c2:	68 83       	st	Y, r22
    47c4:	8f 5f       	subi	r24, 0xFF	; 255
    47c6:	95 81       	ldd	r25, Z+5	; 0x05
    47c8:	89 23       	and	r24, r25
    47ca:	83 83       	std	Z+3, r24	; 0x03
    47cc:	16 96       	adiw	r26, 0x06	; 6
    47ce:	ed 91       	ld	r30, X+
    47d0:	fc 91       	ld	r31, X
    47d2:	17 97       	sbiw	r26, 0x07	; 7
    47d4:	30 97       	sbiw	r30, 0x00	; 0
    47d6:	11 f0       	breq	.+4      	; 0x47dc <__vector_51+0x7a>
    47d8:	cd 01       	movw	r24, r26
    47da:	19 95       	eicall
    47dc:	ff 91       	pop	r31
    47de:	ef 91       	pop	r30
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	bf 91       	pop	r27
    47e6:	af 91       	pop	r26
    47e8:	9f 91       	pop	r25
    47ea:	8f 91       	pop	r24
    47ec:	7f 91       	pop	r23
    47ee:	6f 91       	pop	r22
    47f0:	5f 91       	pop	r21
    47f2:	4f 91       	pop	r20
    47f4:	3f 91       	pop	r19
    47f6:	2f 91       	pop	r18
    47f8:	0f 90       	pop	r0
    47fa:	0b be       	out	0x3b, r0	; 59
    47fc:	0f 90       	pop	r0
    47fe:	0f be       	out	0x3f, r0	; 63
    4800:	0f 90       	pop	r0
    4802:	1f 90       	pop	r1
    4804:	18 95       	reti

00004806 <__vector_52>:
    4806:	1f 92       	push	r1
    4808:	0f 92       	push	r0
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	0f 92       	push	r0
    480e:	11 24       	eor	r1, r1
    4810:	0b b6       	in	r0, 0x3b	; 59
    4812:	0f 92       	push	r0
    4814:	2f 93       	push	r18
    4816:	8f 93       	push	r24
    4818:	9f 93       	push	r25
    481a:	af 93       	push	r26
    481c:	bf 93       	push	r27
    481e:	ef 93       	push	r30
    4820:	ff 93       	push	r31
    4822:	e0 91 be 16 	lds	r30, 0x16BE	; 0x8016be <_ser_handle+0x4>
    4826:	f0 91 bf 16 	lds	r31, 0x16BF	; 0x8016bf <_ser_handle+0x5>
    482a:	30 97       	sbiw	r30, 0x00	; 0
    482c:	b9 f0       	breq	.+46     	; 0x485c <__vector_52+0x56>
    482e:	02 80       	ldd	r0, Z+2	; 0x02
    4830:	f3 81       	ldd	r31, Z+3	; 0x03
    4832:	e0 2d       	mov	r30, r0
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	82 81       	ldd	r24, Z+2	; 0x02
    4838:	98 17       	cp	r25, r24
    483a:	b1 f0       	breq	.+44     	; 0x4868 <__vector_52+0x62>
    483c:	92 81       	ldd	r25, Z+2	; 0x02
    483e:	85 81       	ldd	r24, Z+5	; 0x05
    4840:	28 2f       	mov	r18, r24
    4842:	26 95       	lsr	r18
    4844:	29 23       	and	r18, r25
    4846:	a0 81       	ld	r26, Z
    4848:	b1 81       	ldd	r27, Z+1	; 0x01
    484a:	a2 0f       	add	r26, r18
    484c:	b1 1d       	adc	r27, r1
    484e:	2c 91       	ld	r18, X
    4850:	9f 5f       	subi	r25, 0xFF	; 255
    4852:	89 23       	and	r24, r25
    4854:	82 83       	std	Z+2, r24	; 0x02
    4856:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    485a:	0b c0       	rjmp	.+22     	; 0x4872 <__vector_52+0x6c>
    485c:	e1 ed       	ldi	r30, 0xD1	; 209
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	8f 7d       	andi	r24, 0xDF	; 223
    4864:	80 83       	st	Z, r24
    4866:	05 c0       	rjmp	.+10     	; 0x4872 <__vector_52+0x6c>
    4868:	e1 ed       	ldi	r30, 0xD1	; 209
    486a:	f0 e0       	ldi	r31, 0x00	; 0
    486c:	80 81       	ld	r24, Z
    486e:	8f 7d       	andi	r24, 0xDF	; 223
    4870:	80 83       	st	Z, r24
    4872:	ff 91       	pop	r31
    4874:	ef 91       	pop	r30
    4876:	bf 91       	pop	r27
    4878:	af 91       	pop	r26
    487a:	9f 91       	pop	r25
    487c:	8f 91       	pop	r24
    487e:	2f 91       	pop	r18
    4880:	0f 90       	pop	r0
    4882:	0b be       	out	0x3b, r0	; 59
    4884:	0f 90       	pop	r0
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	0f 90       	pop	r0
    488a:	1f 90       	pop	r1
    488c:	18 95       	reti

0000488e <__vector_54>:
    488e:	1f 92       	push	r1
    4890:	0f 92       	push	r0
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	0f 92       	push	r0
    4896:	11 24       	eor	r1, r1
    4898:	0b b6       	in	r0, 0x3b	; 59
    489a:	0f 92       	push	r0
    489c:	2f 93       	push	r18
    489e:	3f 93       	push	r19
    48a0:	4f 93       	push	r20
    48a2:	5f 93       	push	r21
    48a4:	6f 93       	push	r22
    48a6:	7f 93       	push	r23
    48a8:	8f 93       	push	r24
    48aa:	9f 93       	push	r25
    48ac:	af 93       	push	r26
    48ae:	bf 93       	push	r27
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	ef 93       	push	r30
    48b6:	ff 93       	push	r31
    48b8:	a0 91 c0 16 	lds	r26, 0x16C0	; 0x8016c0 <_ser_handle+0x6>
    48bc:	b0 91 c1 16 	lds	r27, 0x16C1	; 0x8016c1 <_ser_handle+0x7>
    48c0:	10 97       	sbiw	r26, 0x00	; 0
    48c2:	11 f1       	breq	.+68     	; 0x4908 <__vector_54+0x7a>
    48c4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    48c8:	14 96       	adiw	r26, 0x04	; 4
    48ca:	ed 91       	ld	r30, X+
    48cc:	fc 91       	ld	r31, X
    48ce:	15 97       	sbiw	r26, 0x05	; 5
    48d0:	93 81       	ldd	r25, Z+3	; 0x03
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	25 81       	ldd	r18, Z+5	; 0x05
    48d6:	98 1b       	sub	r25, r24
    48d8:	92 23       	and	r25, r18
    48da:	84 81       	ldd	r24, Z+4	; 0x04
    48dc:	98 17       	cp	r25, r24
    48de:	61 f0       	breq	.+24     	; 0x48f8 <__vector_54+0x6a>
    48e0:	83 81       	ldd	r24, Z+3	; 0x03
    48e2:	26 95       	lsr	r18
    48e4:	28 23       	and	r18, r24
    48e6:	c0 81       	ld	r28, Z
    48e8:	d1 81       	ldd	r29, Z+1	; 0x01
    48ea:	c2 0f       	add	r28, r18
    48ec:	d1 1d       	adc	r29, r1
    48ee:	68 83       	st	Y, r22
    48f0:	8f 5f       	subi	r24, 0xFF	; 255
    48f2:	95 81       	ldd	r25, Z+5	; 0x05
    48f4:	89 23       	and	r24, r25
    48f6:	83 83       	std	Z+3, r24	; 0x03
    48f8:	16 96       	adiw	r26, 0x06	; 6
    48fa:	ed 91       	ld	r30, X+
    48fc:	fc 91       	ld	r31, X
    48fe:	17 97       	sbiw	r26, 0x07	; 7
    4900:	30 97       	sbiw	r30, 0x00	; 0
    4902:	11 f0       	breq	.+4      	; 0x4908 <__vector_54+0x7a>
    4904:	cd 01       	movw	r24, r26
    4906:	19 95       	eicall
    4908:	ff 91       	pop	r31
    490a:	ef 91       	pop	r30
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	bf 91       	pop	r27
    4912:	af 91       	pop	r26
    4914:	9f 91       	pop	r25
    4916:	8f 91       	pop	r24
    4918:	7f 91       	pop	r23
    491a:	6f 91       	pop	r22
    491c:	5f 91       	pop	r21
    491e:	4f 91       	pop	r20
    4920:	3f 91       	pop	r19
    4922:	2f 91       	pop	r18
    4924:	0f 90       	pop	r0
    4926:	0b be       	out	0x3b, r0	; 59
    4928:	0f 90       	pop	r0
    492a:	0f be       	out	0x3f, r0	; 63
    492c:	0f 90       	pop	r0
    492e:	1f 90       	pop	r1
    4930:	18 95       	reti

00004932 <__vector_55>:
    4932:	1f 92       	push	r1
    4934:	0f 92       	push	r0
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	0f 92       	push	r0
    493a:	11 24       	eor	r1, r1
    493c:	0b b6       	in	r0, 0x3b	; 59
    493e:	0f 92       	push	r0
    4940:	2f 93       	push	r18
    4942:	8f 93       	push	r24
    4944:	9f 93       	push	r25
    4946:	af 93       	push	r26
    4948:	bf 93       	push	r27
    494a:	ef 93       	push	r30
    494c:	ff 93       	push	r31
    494e:	e0 91 c0 16 	lds	r30, 0x16C0	; 0x8016c0 <_ser_handle+0x6>
    4952:	f0 91 c1 16 	lds	r31, 0x16C1	; 0x8016c1 <_ser_handle+0x7>
    4956:	30 97       	sbiw	r30, 0x00	; 0
    4958:	b9 f0       	breq	.+46     	; 0x4988 <__vector_55+0x56>
    495a:	02 80       	ldd	r0, Z+2	; 0x02
    495c:	f3 81       	ldd	r31, Z+3	; 0x03
    495e:	e0 2d       	mov	r30, r0
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	98 17       	cp	r25, r24
    4966:	b1 f0       	breq	.+44     	; 0x4994 <__vector_55+0x62>
    4968:	92 81       	ldd	r25, Z+2	; 0x02
    496a:	85 81       	ldd	r24, Z+5	; 0x05
    496c:	28 2f       	mov	r18, r24
    496e:	26 95       	lsr	r18
    4970:	29 23       	and	r18, r25
    4972:	a0 81       	ld	r26, Z
    4974:	b1 81       	ldd	r27, Z+1	; 0x01
    4976:	a2 0f       	add	r26, r18
    4978:	b1 1d       	adc	r27, r1
    497a:	2c 91       	ld	r18, X
    497c:	9f 5f       	subi	r25, 0xFF	; 255
    497e:	89 23       	and	r24, r25
    4980:	82 83       	std	Z+2, r24	; 0x02
    4982:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4986:	0b c0       	rjmp	.+22     	; 0x499e <__vector_55+0x6c>
    4988:	e1 e3       	ldi	r30, 0x31	; 49
    498a:	f1 e0       	ldi	r31, 0x01	; 1
    498c:	80 81       	ld	r24, Z
    498e:	8f 7d       	andi	r24, 0xDF	; 223
    4990:	80 83       	st	Z, r24
    4992:	05 c0       	rjmp	.+10     	; 0x499e <__vector_55+0x6c>
    4994:	e1 e3       	ldi	r30, 0x31	; 49
    4996:	f1 e0       	ldi	r31, 0x01	; 1
    4998:	80 81       	ld	r24, Z
    499a:	8f 7d       	andi	r24, 0xDF	; 223
    499c:	80 83       	st	Z, r24
    499e:	ff 91       	pop	r31
    49a0:	ef 91       	pop	r30
    49a2:	bf 91       	pop	r27
    49a4:	af 91       	pop	r26
    49a6:	9f 91       	pop	r25
    49a8:	8f 91       	pop	r24
    49aa:	2f 91       	pop	r18
    49ac:	0f 90       	pop	r0
    49ae:	0b be       	out	0x3b, r0	; 59
    49b0:	0f 90       	pop	r0
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	0f 90       	pop	r0
    49b6:	1f 90       	pop	r1
    49b8:	18 95       	reti

000049ba <usart_getchar>:
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	1f 92       	push	r1
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	be 01       	movw	r22, r28
    49c6:	6f 5f       	subi	r22, 0xFF	; 255
    49c8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ca:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_com_serial_instance>
    49ce:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_com_serial_instance+0x1>
    49d2:	7b dd       	rcall	.-1290   	; 0x44ca <serial_getByte>
    49d4:	81 11       	cpse	r24, r1
    49d6:	f6 cf       	rjmp	.-20     	; 0x49c4 <usart_getchar+0xa>
    49d8:	89 81       	ldd	r24, Y+1	; 0x01
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	0f 90       	pop	r0
    49de:	df 91       	pop	r29
    49e0:	cf 91       	pop	r28
    49e2:	08 95       	ret

000049e4 <usart_putchar>:
    49e4:	68 2f       	mov	r22, r24
    49e6:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_com_serial_instance>
    49ea:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_com_serial_instance+0x1>
    49ee:	ed dc       	rcall	.-1574   	; 0x43ca <serial_sendByte>
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	08 95       	ret

000049f6 <stdio_initialise>:
    49f6:	8f 92       	push	r8
    49f8:	9f 92       	push	r9
    49fa:	af 92       	push	r10
    49fc:	cf 92       	push	r12
    49fe:	ef 92       	push	r14
    4a00:	0f 93       	push	r16
    4a02:	81 2c       	mov	r8, r1
    4a04:	91 2c       	mov	r9, r1
    4a06:	68 94       	set
    4a08:	aa 24       	eor	r10, r10
    4a0a:	a7 f8       	bld	r10, 7
    4a0c:	68 94       	set
    4a0e:	cc 24       	eor	r12, r12
    4a10:	c7 f8       	bld	r12, 7
    4a12:	e1 2c       	mov	r14, r1
    4a14:	00 e0       	ldi	r16, 0x00	; 0
    4a16:	23 e0       	ldi	r18, 0x03	; 3
    4a18:	40 e0       	ldi	r20, 0x00	; 0
    4a1a:	51 ee       	ldi	r21, 0xE1	; 225
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	70 e0       	ldi	r23, 0x00	; 0
    4a20:	33 dc       	rcall	.-1946   	; 0x4288 <serial_create>
    4a22:	90 93 c3 16 	sts	0x16C3, r25	; 0x8016c3 <_com_serial_instance+0x1>
    4a26:	80 93 c2 16 	sts	0x16C2, r24	; 0x8016c2 <_com_serial_instance>
    4a2a:	e2 ef       	ldi	r30, 0xF2	; 242
    4a2c:	f6 e1       	ldi	r31, 0x16	; 22
    4a2e:	83 e1       	ldi	r24, 0x13	; 19
    4a30:	92 e0       	ldi	r25, 0x02	; 2
    4a32:	91 83       	std	Z+1, r25	; 0x01
    4a34:	80 83       	st	Z, r24
    4a36:	93 83       	std	Z+3, r25	; 0x03
    4a38:	82 83       	std	Z+2, r24	; 0x02
    4a3a:	0f 91       	pop	r16
    4a3c:	ef 90       	pop	r14
    4a3e:	cf 90       	pop	r12
    4a40:	af 90       	pop	r10
    4a42:	9f 90       	pop	r9
    4a44:	8f 90       	pop	r8
    4a46:	08 95       	ret

00004a48 <_turn_off>:
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	fc 01       	movw	r30, r24
    4a4c:	ee 0f       	add	r30, r30
    4a4e:	ff 1f       	adc	r31, r31
    4a50:	e8 0f       	add	r30, r24
    4a52:	f9 1f       	adc	r31, r25
    4a54:	ee 0f       	add	r30, r30
    4a56:	ff 1f       	adc	r31, r31
    4a58:	ec 53       	subi	r30, 0x3C	; 60
    4a5a:	f9 4e       	sbci	r31, 0xE9	; 233
    4a5c:	23 81       	ldd	r18, Z+3	; 0x03
    4a5e:	21 11       	cpse	r18, r1
    4a60:	1f c0       	rjmp	.+62     	; 0x4aa0 <_turn_off+0x58>
    4a62:	9c 01       	movw	r18, r24
    4a64:	22 0f       	add	r18, r18
    4a66:	33 1f       	adc	r19, r19
    4a68:	f9 01       	movw	r30, r18
    4a6a:	e8 0f       	add	r30, r24
    4a6c:	f9 1f       	adc	r31, r25
    4a6e:	ee 0f       	add	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	ec 53       	subi	r30, 0x3C	; 60
    4a74:	f9 4e       	sbci	r31, 0xE9	; 233
    4a76:	a0 81       	ld	r26, Z
    4a78:	b1 81       	ldd	r27, Z+1	; 0x01
    4a7a:	4c 91       	ld	r20, X
    4a7c:	f9 01       	movw	r30, r18
    4a7e:	e8 0f       	add	r30, r24
    4a80:	f9 1f       	adc	r31, r25
    4a82:	ee 0f       	add	r30, r30
    4a84:	ff 1f       	adc	r31, r31
    4a86:	ec 53       	subi	r30, 0x3C	; 60
    4a88:	f9 4e       	sbci	r31, 0xE9	; 233
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	02 80       	ldd	r0, Z+2	; 0x02
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <_turn_off+0x4e>
    4a92:	88 0f       	add	r24, r24
    4a94:	99 1f       	adc	r25, r25
    4a96:	0a 94       	dec	r0
    4a98:	e2 f7       	brpl	.-8      	; 0x4a92 <_turn_off+0x4a>
    4a9a:	84 2b       	or	r24, r20
    4a9c:	8c 93       	st	X, r24
    4a9e:	08 95       	ret
    4aa0:	fc 01       	movw	r30, r24
    4aa2:	ee 0f       	add	r30, r30
    4aa4:	ff 1f       	adc	r31, r31
    4aa6:	df 01       	movw	r26, r30
    4aa8:	a8 0f       	add	r26, r24
    4aaa:	b9 1f       	adc	r27, r25
    4aac:	aa 0f       	add	r26, r26
    4aae:	bb 1f       	adc	r27, r27
    4ab0:	ac 53       	subi	r26, 0x3C	; 60
    4ab2:	b9 4e       	sbci	r27, 0xE9	; 233
    4ab4:	0d 90       	ld	r0, X+
    4ab6:	bc 91       	ld	r27, X
    4ab8:	a0 2d       	mov	r26, r0
    4aba:	2c 91       	ld	r18, X
    4abc:	e8 0f       	add	r30, r24
    4abe:	f9 1f       	adc	r31, r25
    4ac0:	ee 0f       	add	r30, r30
    4ac2:	ff 1f       	adc	r31, r31
    4ac4:	ec 53       	subi	r30, 0x3C	; 60
    4ac6:	f9 4e       	sbci	r31, 0xE9	; 233
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	02 80       	ldd	r0, Z+2	; 0x02
    4ace:	02 c0       	rjmp	.+4      	; 0x4ad4 <_turn_off+0x8c>
    4ad0:	88 0f       	add	r24, r24
    4ad2:	99 1f       	adc	r25, r25
    4ad4:	0a 94       	dec	r0
    4ad6:	e2 f7       	brpl	.-8      	; 0x4ad0 <_turn_off+0x88>
    4ad8:	80 95       	com	r24
    4ada:	82 23       	and	r24, r18
    4adc:	8c 93       	st	X, r24
    4ade:	08 95       	ret

00004ae0 <_turn_on>:
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	ee 0f       	add	r30, r30
    4ae6:	ff 1f       	adc	r31, r31
    4ae8:	e8 0f       	add	r30, r24
    4aea:	f9 1f       	adc	r31, r25
    4aec:	ee 0f       	add	r30, r30
    4aee:	ff 1f       	adc	r31, r31
    4af0:	ec 53       	subi	r30, 0x3C	; 60
    4af2:	f9 4e       	sbci	r31, 0xE9	; 233
    4af4:	23 81       	ldd	r18, Z+3	; 0x03
    4af6:	21 11       	cpse	r18, r1
    4af8:	20 c0       	rjmp	.+64     	; 0x4b3a <_turn_on+0x5a>
    4afa:	9c 01       	movw	r18, r24
    4afc:	22 0f       	add	r18, r18
    4afe:	33 1f       	adc	r19, r19
    4b00:	f9 01       	movw	r30, r18
    4b02:	e8 0f       	add	r30, r24
    4b04:	f9 1f       	adc	r31, r25
    4b06:	ee 0f       	add	r30, r30
    4b08:	ff 1f       	adc	r31, r31
    4b0a:	ec 53       	subi	r30, 0x3C	; 60
    4b0c:	f9 4e       	sbci	r31, 0xE9	; 233
    4b0e:	a0 81       	ld	r26, Z
    4b10:	b1 81       	ldd	r27, Z+1	; 0x01
    4b12:	4c 91       	ld	r20, X
    4b14:	f9 01       	movw	r30, r18
    4b16:	e8 0f       	add	r30, r24
    4b18:	f9 1f       	adc	r31, r25
    4b1a:	ee 0f       	add	r30, r30
    4b1c:	ff 1f       	adc	r31, r31
    4b1e:	ec 53       	subi	r30, 0x3C	; 60
    4b20:	f9 4e       	sbci	r31, 0xE9	; 233
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	02 80       	ldd	r0, Z+2	; 0x02
    4b28:	02 c0       	rjmp	.+4      	; 0x4b2e <_turn_on+0x4e>
    4b2a:	88 0f       	add	r24, r24
    4b2c:	99 1f       	adc	r25, r25
    4b2e:	0a 94       	dec	r0
    4b30:	e2 f7       	brpl	.-8      	; 0x4b2a <_turn_on+0x4a>
    4b32:	80 95       	com	r24
    4b34:	84 23       	and	r24, r20
    4b36:	8c 93       	st	X, r24
    4b38:	08 95       	ret
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	ee 0f       	add	r30, r30
    4b3e:	ff 1f       	adc	r31, r31
    4b40:	df 01       	movw	r26, r30
    4b42:	a8 0f       	add	r26, r24
    4b44:	b9 1f       	adc	r27, r25
    4b46:	aa 0f       	add	r26, r26
    4b48:	bb 1f       	adc	r27, r27
    4b4a:	ac 53       	subi	r26, 0x3C	; 60
    4b4c:	b9 4e       	sbci	r27, 0xE9	; 233
    4b4e:	0d 90       	ld	r0, X+
    4b50:	bc 91       	ld	r27, X
    4b52:	a0 2d       	mov	r26, r0
    4b54:	2c 91       	ld	r18, X
    4b56:	e8 0f       	add	r30, r24
    4b58:	f9 1f       	adc	r31, r25
    4b5a:	ee 0f       	add	r30, r30
    4b5c:	ff 1f       	adc	r31, r31
    4b5e:	ec 53       	subi	r30, 0x3C	; 60
    4b60:	f9 4e       	sbci	r31, 0xE9	; 233
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	02 80       	ldd	r0, Z+2	; 0x02
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <_turn_on+0x8e>
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	0a 94       	dec	r0
    4b70:	e2 f7       	brpl	.-8      	; 0x4b6a <_turn_on+0x8a>
    4b72:	82 2b       	or	r24, r18
    4b74:	8c 93       	st	X, r24
    4b76:	08 95       	ret

00004b78 <_hal_led_task>:
    4b78:	cc 24       	eor	r12, r12
    4b7a:	c3 94       	inc	r12
    4b7c:	d1 2c       	mov	r13, r1
    4b7e:	68 94       	set
    4b80:	bb 24       	eor	r11, r11
    4b82:	b2 f8       	bld	r11, 2
    4b84:	c4 ec       	ldi	r28, 0xC4	; 196
    4b86:	d6 e1       	ldi	r29, 0x16	; 22
    4b88:	10 e0       	ldi	r17, 0x00	; 0
    4b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b8c:	81 30       	cpi	r24, 0x01	; 1
    4b8e:	81 f0       	breq	.+32     	; 0x4bb0 <_hal_led_task+0x38>
    4b90:	18 f1       	brcs	.+70     	; 0x4bd8 <_hal_led_task+0x60>
    4b92:	82 30       	cpi	r24, 0x02	; 2
    4b94:	61 f5       	brne	.+88     	; 0x4bee <_hal_led_task+0x76>
    4b96:	e8 81       	ld	r30, Y
    4b98:	f9 81       	ldd	r31, Y+1	; 0x01
    4b9a:	20 81       	ld	r18, Z
    4b9c:	c6 01       	movw	r24, r12
    4b9e:	0a 80       	ldd	r0, Y+2	; 0x02
    4ba0:	02 c0       	rjmp	.+4      	; 0x4ba6 <_hal_led_task+0x2e>
    4ba2:	88 0f       	add	r24, r24
    4ba4:	99 1f       	adc	r25, r25
    4ba6:	0a 94       	dec	r0
    4ba8:	e2 f7       	brpl	.-8      	; 0x4ba2 <_hal_led_task+0x2a>
    4baa:	82 27       	eor	r24, r18
    4bac:	80 83       	st	Z, r24
    4bae:	1f c0       	rjmp	.+62     	; 0x4bee <_hal_led_task+0x76>
    4bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb2:	8f 5f       	subi	r24, 0xFF	; 255
    4bb4:	86 30       	cpi	r24, 0x06	; 6
    4bb6:	10 f4       	brcc	.+4      	; 0x4bbc <_hal_led_task+0x44>
    4bb8:	8d 83       	std	Y+5, r24	; 0x05
    4bba:	19 c0       	rjmp	.+50     	; 0x4bee <_hal_led_task+0x76>
    4bbc:	1d 82       	std	Y+5, r1	; 0x05
    4bbe:	e8 81       	ld	r30, Y
    4bc0:	f9 81       	ldd	r31, Y+1	; 0x01
    4bc2:	20 81       	ld	r18, Z
    4bc4:	c6 01       	movw	r24, r12
    4bc6:	0a 80       	ldd	r0, Y+2	; 0x02
    4bc8:	02 c0       	rjmp	.+4      	; 0x4bce <_hal_led_task+0x56>
    4bca:	88 0f       	add	r24, r24
    4bcc:	99 1f       	adc	r25, r25
    4bce:	0a 94       	dec	r0
    4bd0:	e2 f7       	brpl	.-8      	; 0x4bca <_hal_led_task+0x52>
    4bd2:	82 27       	eor	r24, r18
    4bd4:	80 83       	st	Z, r24
    4bd6:	0b c0       	rjmp	.+22     	; 0x4bee <_hal_led_task+0x76>
    4bd8:	0d 81       	ldd	r16, Y+5	; 0x05
    4bda:	00 23       	and	r16, r16
    4bdc:	29 f0       	breq	.+10     	; 0x4be8 <_hal_led_task+0x70>
    4bde:	81 2f       	mov	r24, r17
    4be0:	7f df       	rcall	.-258    	; 0x4ae0 <_turn_on>
    4be2:	01 50       	subi	r16, 0x01	; 1
    4be4:	0d 83       	std	Y+5, r16	; 0x05
    4be6:	03 c0       	rjmp	.+6      	; 0x4bee <_hal_led_task+0x76>
    4be8:	bc 82       	std	Y+4, r11	; 0x04
    4bea:	81 2f       	mov	r24, r17
    4bec:	2d df       	rcall	.-422    	; 0x4a48 <_turn_off>
    4bee:	1f 5f       	subi	r17, 0xFF	; 255
    4bf0:	26 96       	adiw	r28, 0x06	; 6
    4bf2:	14 30       	cpi	r17, 0x04	; 4
    4bf4:	51 f6       	brne	.-108    	; 0x4b8a <_hal_led_task+0x12>
    4bf6:	6c e0       	ldi	r22, 0x0C	; 12
    4bf8:	70 e0       	ldi	r23, 0x00	; 0
    4bfa:	80 e0       	ldi	r24, 0x00	; 0
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	0e 94 69 10 	call	0x20d2	; 0x20d2 <vTaskDelay>
    4c02:	c0 cf       	rjmp	.-128    	; 0x4b84 <_hal_led_task+0xc>

00004c04 <status_leds_initialise>:
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	08 2f       	mov	r16, r24
    4c12:	80 e4       	ldi	r24, 0x40	; 64
    4c14:	87 b9       	out	0x07, r24	; 7
    4c16:	c4 ec       	ldi	r28, 0xC4	; 196
    4c18:	d6 e1       	ldi	r29, 0x16	; 22
    4c1a:	0f 2e       	mov	r0, r31
    4c1c:	f8 e2       	ldi	r31, 0x28	; 40
    4c1e:	ef 2e       	mov	r14, r31
    4c20:	f1 2c       	mov	r15, r1
    4c22:	f0 2d       	mov	r31, r0
    4c24:	f9 82       	std	Y+1, r15	; 0x01
    4c26:	e8 82       	st	Y, r14
    4c28:	86 e0       	ldi	r24, 0x06	; 6
    4c2a:	8a 83       	std	Y+2, r24	; 0x02
    4c2c:	1b 82       	std	Y+3, r1	; 0x03
    4c2e:	14 e0       	ldi	r17, 0x04	; 4
    4c30:	1c 83       	std	Y+4, r17	; 0x04
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	09 df       	rcall	.-494    	; 0x4a48 <_turn_off>
    4c36:	80 e8       	ldi	r24, 0x80	; 128
    4c38:	87 b9       	out	0x07, r24	; 7
    4c3a:	ff 82       	std	Y+7, r15	; 0x07
    4c3c:	ee 82       	std	Y+6, r14	; 0x06
    4c3e:	87 e0       	ldi	r24, 0x07	; 7
    4c40:	88 87       	std	Y+8, r24	; 0x08
    4c42:	19 86       	std	Y+9, r1	; 0x09
    4c44:	1a 87       	std	Y+10, r17	; 0x0a
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	ff de       	rcall	.-514    	; 0x4a48 <_turn_off>
    4c4a:	80 e2       	ldi	r24, 0x20	; 32
    4c4c:	83 bb       	out	0x13, r24	; 19
    4c4e:	84 e3       	ldi	r24, 0x34	; 52
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	9d 87       	std	Y+13, r25	; 0x0d
    4c54:	8c 87       	std	Y+12, r24	; 0x0c
    4c56:	85 e0       	ldi	r24, 0x05	; 5
    4c58:	8e 87       	std	Y+14, r24	; 0x0e
    4c5a:	1f 86       	std	Y+15, r1	; 0x0f
    4c5c:	18 8b       	std	Y+16, r17	; 0x10
    4c5e:	82 e0       	ldi	r24, 0x02	; 2
    4c60:	f3 de       	rcall	.-538    	; 0x4a48 <_turn_off>
    4c62:	80 e1       	ldi	r24, 0x10	; 16
    4c64:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4c68:	82 e0       	ldi	r24, 0x02	; 2
    4c6a:	91 e0       	ldi	r25, 0x01	; 1
    4c6c:	9b 8b       	std	Y+19, r25	; 0x13
    4c6e:	8a 8b       	std	Y+18, r24	; 0x12
    4c70:	1c 8b       	std	Y+20, r17	; 0x14
    4c72:	1d 8a       	std	Y+21, r1	; 0x15
    4c74:	1e 8b       	std	Y+22, r17	; 0x16
    4c76:	83 e0       	ldi	r24, 0x03	; 3
    4c78:	e7 de       	rcall	.-562    	; 0x4a48 <_turn_off>
    4c7a:	e1 2c       	mov	r14, r1
    4c7c:	f1 2c       	mov	r15, r1
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	40 ec       	ldi	r20, 0xC0	; 192
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	6c ee       	ldi	r22, 0xEC	; 236
    4c88:	76 e0       	ldi	r23, 0x06	; 6
    4c8a:	8c eb       	ldi	r24, 0xBC	; 188
    4c8c:	95 e2       	ldi	r25, 0x25	; 37
    4c8e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xTaskCreate>
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	1f 91       	pop	r17
    4c98:	0f 91       	pop	r16
    4c9a:	ff 90       	pop	r15
    4c9c:	ef 90       	pop	r14
    4c9e:	08 95       	ret

00004ca0 <status_leds_slowBlink>:
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	ee 0f       	add	r30, r30
    4caa:	ff 1f       	adc	r31, r31
    4cac:	df 01       	movw	r26, r30
    4cae:	a8 0f       	add	r26, r24
    4cb0:	b9 1f       	adc	r27, r25
    4cb2:	aa 0f       	add	r26, r26
    4cb4:	bb 1f       	adc	r27, r27
    4cb6:	ac 53       	subi	r26, 0x3C	; 60
    4cb8:	b9 4e       	sbci	r27, 0xE9	; 233
    4cba:	cd 91       	ld	r28, X+
    4cbc:	dc 91       	ld	r29, X
    4cbe:	11 97       	sbiw	r26, 0x01	; 1
    4cc0:	48 81       	ld	r20, Y
    4cc2:	21 e0       	ldi	r18, 0x01	; 1
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	12 96       	adiw	r26, 0x02	; 2
    4cc8:	0c 90       	ld	r0, X
    4cca:	12 97       	sbiw	r26, 0x02	; 2
    4ccc:	02 c0       	rjmp	.+4      	; 0x4cd2 <status_leds_slowBlink+0x32>
    4cce:	22 0f       	add	r18, r18
    4cd0:	33 1f       	adc	r19, r19
    4cd2:	0a 94       	dec	r0
    4cd4:	e2 f7       	brpl	.-8      	; 0x4cce <status_leds_slowBlink+0x2e>
    4cd6:	24 27       	eor	r18, r20
    4cd8:	28 83       	st	Y, r18
    4cda:	fd 01       	movw	r30, r26
    4cdc:	81 e0       	ldi	r24, 0x01	; 1
    4cde:	84 83       	std	Z+4, r24	; 0x04
    4ce0:	df 91       	pop	r29
    4ce2:	cf 91       	pop	r28
    4ce4:	08 95       	ret

00004ce6 <status_leds_fastBlink>:
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	fc 01       	movw	r30, r24
    4cee:	ee 0f       	add	r30, r30
    4cf0:	ff 1f       	adc	r31, r31
    4cf2:	df 01       	movw	r26, r30
    4cf4:	a8 0f       	add	r26, r24
    4cf6:	b9 1f       	adc	r27, r25
    4cf8:	aa 0f       	add	r26, r26
    4cfa:	bb 1f       	adc	r27, r27
    4cfc:	ac 53       	subi	r26, 0x3C	; 60
    4cfe:	b9 4e       	sbci	r27, 0xE9	; 233
    4d00:	cd 91       	ld	r28, X+
    4d02:	dc 91       	ld	r29, X
    4d04:	11 97       	sbiw	r26, 0x01	; 1
    4d06:	48 81       	ld	r20, Y
    4d08:	21 e0       	ldi	r18, 0x01	; 1
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	12 96       	adiw	r26, 0x02	; 2
    4d0e:	0c 90       	ld	r0, X
    4d10:	12 97       	sbiw	r26, 0x02	; 2
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <status_leds_fastBlink+0x32>
    4d14:	22 0f       	add	r18, r18
    4d16:	33 1f       	adc	r19, r19
    4d18:	0a 94       	dec	r0
    4d1a:	e2 f7       	brpl	.-8      	; 0x4d14 <status_leds_fastBlink+0x2e>
    4d1c:	24 27       	eor	r18, r20
    4d1e:	28 83       	st	Y, r18
    4d20:	fd 01       	movw	r30, r26
    4d22:	82 e0       	ldi	r24, 0x02	; 2
    4d24:	84 83       	std	Z+4, r24	; 0x04
    4d26:	df 91       	pop	r29
    4d28:	cf 91       	pop	r28
    4d2a:	08 95       	ret

00004d2c <status_leds_ledOn>:
    4d2c:	28 2f       	mov	r18, r24
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	f9 01       	movw	r30, r18
    4d32:	ee 0f       	add	r30, r30
    4d34:	ff 1f       	adc	r31, r31
    4d36:	e2 0f       	add	r30, r18
    4d38:	f3 1f       	adc	r31, r19
    4d3a:	ee 0f       	add	r30, r30
    4d3c:	ff 1f       	adc	r31, r31
    4d3e:	ec 53       	subi	r30, 0x3C	; 60
    4d40:	f9 4e       	sbci	r31, 0xE9	; 233
    4d42:	93 e0       	ldi	r25, 0x03	; 3
    4d44:	94 83       	std	Z+4, r25	; 0x04
    4d46:	cc ce       	rjmp	.-616    	; 0x4ae0 <_turn_on>
    4d48:	08 95       	ret

00004d4a <status_leds_ledOff>:
    4d4a:	28 2f       	mov	r18, r24
    4d4c:	30 e0       	ldi	r19, 0x00	; 0
    4d4e:	f9 01       	movw	r30, r18
    4d50:	ee 0f       	add	r30, r30
    4d52:	ff 1f       	adc	r31, r31
    4d54:	e2 0f       	add	r30, r18
    4d56:	f3 1f       	adc	r31, r19
    4d58:	ee 0f       	add	r30, r30
    4d5a:	ff 1f       	adc	r31, r31
    4d5c:	ec 53       	subi	r30, 0x3C	; 60
    4d5e:	f9 4e       	sbci	r31, 0xE9	; 233
    4d60:	94 e0       	ldi	r25, 0x04	; 4
    4d62:	94 83       	std	Z+4, r25	; 0x04
    4d64:	71 ce       	rjmp	.-798    	; 0x4a48 <_turn_off>
    4d66:	08 95       	ret

00004d68 <status_leds_longPuls>:
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	ee 0f       	add	r30, r30
    4d6e:	ff 1f       	adc	r31, r31
    4d70:	df 01       	movw	r26, r30
    4d72:	a8 0f       	add	r26, r24
    4d74:	b9 1f       	adc	r27, r25
    4d76:	aa 0f       	add	r26, r26
    4d78:	bb 1f       	adc	r27, r27
    4d7a:	ac 53       	subi	r26, 0x3C	; 60
    4d7c:	b9 4e       	sbci	r27, 0xE9	; 233
    4d7e:	26 e0       	ldi	r18, 0x06	; 6
    4d80:	15 96       	adiw	r26, 0x05	; 5
    4d82:	2c 93       	st	X, r18
    4d84:	15 97       	sbiw	r26, 0x05	; 5
    4d86:	fd 01       	movw	r30, r26
    4d88:	14 82       	std	Z+4, r1	; 0x04
    4d8a:	08 95       	ret

00004d8c <status_leds_shortPuls>:
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	fc 01       	movw	r30, r24
    4d90:	ee 0f       	add	r30, r30
    4d92:	ff 1f       	adc	r31, r31
    4d94:	df 01       	movw	r26, r30
    4d96:	a8 0f       	add	r26, r24
    4d98:	b9 1f       	adc	r27, r25
    4d9a:	aa 0f       	add	r26, r26
    4d9c:	bb 1f       	adc	r27, r27
    4d9e:	ac 53       	subi	r26, 0x3C	; 60
    4da0:	b9 4e       	sbci	r27, 0xE9	; 233
    4da2:	15 96       	adiw	r26, 0x05	; 5
    4da4:	1c 92       	st	X, r1
    4da6:	15 97       	sbiw	r26, 0x05	; 5
    4da8:	fd 01       	movw	r30, r26
    4daa:	14 82       	std	Z+4, r1	; 0x04
    4dac:	08 95       	ret

00004dae <twiCreate>:
    4dae:	af 92       	push	r10
    4db0:	bf 92       	push	r11
    4db2:	cf 92       	push	r12
    4db4:	df 92       	push	r13
    4db6:	ef 92       	push	r14
    4db8:	ff 92       	push	r15
    4dba:	0f 93       	push	r16
    4dbc:	1f 93       	push	r17
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	a8 2e       	mov	r10, r24
    4dc4:	b6 2e       	mov	r11, r22
    4dc6:	69 01       	movw	r12, r18
    4dc8:	7a 01       	movw	r14, r20
    4dca:	84 e0       	ldi	r24, 0x04	; 4
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	dc d2       	rcall	.+1464   	; 0x5388 <malloc>
    4dd0:	ec 01       	movw	r28, r24
    4dd2:	89 2b       	or	r24, r25
    4dd4:	61 f1       	breq	.+88     	; 0x4e2e <twiCreate+0x80>
    4dd6:	a8 82       	st	Y, r10
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	b8 12       	cpse	r11, r24
    4ddc:	12 c0       	rjmp	.+36     	; 0x4e02 <twiCreate+0x54>
    4dde:	c7 01       	movw	r24, r14
    4de0:	b6 01       	movw	r22, r12
    4de2:	20 ea       	ldi	r18, 0xA0	; 160
    4de4:	36 e8       	ldi	r19, 0x86	; 134
    4de6:	41 e0       	ldi	r20, 0x01	; 1
    4de8:	50 e0       	ldi	r21, 0x00	; 0
    4dea:	a4 d2       	rcall	.+1352   	; 0x5334 <__udivmodsi4>
    4dec:	da 01       	movw	r26, r20
    4dee:	c9 01       	movw	r24, r18
    4df0:	40 97       	sbiw	r24, 0x10	; 16
    4df2:	a1 09       	sbc	r26, r1
    4df4:	b1 09       	sbc	r27, r1
    4df6:	b6 95       	lsr	r27
    4df8:	a7 95       	ror	r26
    4dfa:	97 95       	ror	r25
    4dfc:	87 95       	ror	r24
    4dfe:	89 83       	std	Y+1, r24	; 0x01
    4e00:	11 c0       	rjmp	.+34     	; 0x4e24 <twiCreate+0x76>
    4e02:	c7 01       	movw	r24, r14
    4e04:	b6 01       	movw	r22, r12
    4e06:	20 e8       	ldi	r18, 0x80	; 128
    4e08:	3a e1       	ldi	r19, 0x1A	; 26
    4e0a:	46 e0       	ldi	r20, 0x06	; 6
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	92 d2       	rcall	.+1316   	; 0x5334 <__udivmodsi4>
    4e10:	da 01       	movw	r26, r20
    4e12:	c9 01       	movw	r24, r18
    4e14:	40 97       	sbiw	r24, 0x10	; 16
    4e16:	a1 09       	sbc	r26, r1
    4e18:	b1 09       	sbc	r27, r1
    4e1a:	b6 95       	lsr	r27
    4e1c:	a7 95       	ror	r26
    4e1e:	97 95       	ror	r25
    4e20:	87 95       	ror	r24
    4e22:	89 83       	std	Y+1, r24	; 0x01
    4e24:	1b 83       	std	Y+3, r17	; 0x03
    4e26:	0a 83       	std	Y+2, r16	; 0x02
    4e28:	8c 2f       	mov	r24, r28
    4e2a:	9d 2f       	mov	r25, r29
    4e2c:	02 c0       	rjmp	.+4      	; 0x4e32 <twiCreate+0x84>
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	1f 91       	pop	r17
    4e38:	0f 91       	pop	r16
    4e3a:	ff 90       	pop	r15
    4e3c:	ef 90       	pop	r14
    4e3e:	df 90       	pop	r13
    4e40:	cf 90       	pop	r12
    4e42:	bf 90       	pop	r11
    4e44:	af 90       	pop	r10
    4e46:	08 95       	ret

00004e48 <__vector_39>:
    4e48:	1f 92       	push	r1
    4e4a:	0f 92       	push	r0
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	0f 92       	push	r0
    4e50:	11 24       	eor	r1, r1
    4e52:	0b b6       	in	r0, 0x3b	; 59
    4e54:	0f 92       	push	r0
    4e56:	2f 93       	push	r18
    4e58:	3f 93       	push	r19
    4e5a:	4f 93       	push	r20
    4e5c:	5f 93       	push	r21
    4e5e:	6f 93       	push	r22
    4e60:	7f 93       	push	r23
    4e62:	8f 93       	push	r24
    4e64:	9f 93       	push	r25
    4e66:	af 93       	push	r26
    4e68:	bf 93       	push	r27
    4e6a:	ef 93       	push	r30
    4e6c:	ff 93       	push	r31
    4e6e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4e72:	8e 2f       	mov	r24, r30
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	fc 01       	movw	r30, r24
    4e78:	38 97       	sbiw	r30, 0x08	; 8
    4e7a:	e1 35       	cpi	r30, 0x51	; 81
    4e7c:	f1 05       	cpc	r31, r1
    4e7e:	08 f0       	brcs	.+2      	; 0x4e82 <__vector_39+0x3a>
    4e80:	75 c0       	rjmp	.+234    	; 0x4f6c <__vector_39+0x124>
    4e82:	88 27       	eor	r24, r24
    4e84:	e4 58       	subi	r30, 0x84	; 132
    4e86:	ff 4f       	sbci	r31, 0xFF	; 255
    4e88:	8f 4f       	sbci	r24, 0xFF	; 255
    4e8a:	76 c2       	rjmp	.+1260   	; 0x5378 <__tablejump2__>
    4e8c:	10 92 dc 16 	sts	0x16DC, r1	; 0x8016dc <_index.1885>
    4e90:	e0 91 dc 16 	lds	r30, 0x16DC	; 0x8016dc <_index.1885>
    4e94:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <_twiMessageLen>
    4e98:	e8 17       	cp	r30, r24
    4e9a:	70 f4       	brcc	.+28     	; 0x4eb8 <__vector_39+0x70>
    4e9c:	81 e0       	ldi	r24, 0x01	; 1
    4e9e:	8e 0f       	add	r24, r30
    4ea0:	80 93 dc 16 	sts	0x16DC, r24	; 0x8016dc <_index.1885>
    4ea4:	f0 e0       	ldi	r31, 0x00	; 0
    4ea6:	e0 52       	subi	r30, 0x20	; 32
    4ea8:	f9 4e       	sbci	r31, 0xE9	; 233
    4eaa:	80 81       	ld	r24, Z
    4eac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4eb0:	85 e8       	ldi	r24, 0x85	; 133
    4eb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4eb6:	72 c0       	rjmp	.+228    	; 0x4f9c <__vector_39+0x154>
    4eb8:	84 e9       	ldi	r24, 0x94	; 148
    4eba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ebe:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <_twiCurrentHandler>
    4ec2:	90 91 de 16 	lds	r25, 0x16DE	; 0x8016de <_twiCurrentHandler+0x1>
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	12 96       	adiw	r26, 0x02	; 2
    4eca:	ed 91       	ld	r30, X+
    4ecc:	fc 91       	ld	r31, X
    4ece:	13 97       	sbiw	r26, 0x03	; 3
    4ed0:	30 97       	sbiw	r30, 0x00	; 0
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <__vector_39+0x8e>
    4ed4:	63 c0       	rjmp	.+198    	; 0x4f9c <__vector_39+0x154>
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	50 e0       	ldi	r21, 0x00	; 0
    4edc:	64 e0       	ldi	r22, 0x04	; 4
    4ede:	19 95       	eicall
    4ee0:	5d c0       	rjmp	.+186    	; 0x4f9c <__vector_39+0x154>
    4ee2:	e0 91 dc 16 	lds	r30, 0x16DC	; 0x8016dc <_index.1885>
    4ee6:	81 e0       	ldi	r24, 0x01	; 1
    4ee8:	8e 0f       	add	r24, r30
    4eea:	80 93 dc 16 	sts	0x16DC, r24	; 0x8016dc <_index.1885>
    4eee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ef2:	f0 e0       	ldi	r31, 0x00	; 0
    4ef4:	e0 52       	subi	r30, 0x20	; 32
    4ef6:	f9 4e       	sbci	r31, 0xE9	; 233
    4ef8:	80 83       	st	Z, r24
    4efa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4efe:	80 34       	cpi	r24, 0x40	; 64
    4f00:	11 f4       	brne	.+4      	; 0x4f06 <__vector_39+0xbe>
    4f02:	10 92 dc 16 	sts	0x16DC, r1	; 0x8016dc <_index.1885>
    4f06:	20 91 dc 16 	lds	r18, 0x16DC	; 0x8016dc <_index.1885>
    4f0a:	30 e0       	ldi	r19, 0x00	; 0
    4f0c:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <_twiMessageLen>
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	28 17       	cp	r18, r24
    4f16:	39 07       	cpc	r19, r25
    4f18:	24 f4       	brge	.+8      	; 0x4f22 <__vector_39+0xda>
    4f1a:	85 ec       	ldi	r24, 0xC5	; 197
    4f1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f20:	3d c0       	rjmp	.+122    	; 0x4f9c <__vector_39+0x154>
    4f22:	85 e8       	ldi	r24, 0x85	; 133
    4f24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f28:	39 c0       	rjmp	.+114    	; 0x4f9c <__vector_39+0x154>
    4f2a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f2e:	e0 91 dc 16 	lds	r30, 0x16DC	; 0x8016dc <_index.1885>
    4f32:	f0 e0       	ldi	r31, 0x00	; 0
    4f34:	e0 52       	subi	r30, 0x20	; 32
    4f36:	f9 4e       	sbci	r31, 0xE9	; 233
    4f38:	80 83       	st	Z, r24
    4f3a:	84 e9       	ldi	r24, 0x94	; 148
    4f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f40:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <_twiCurrentHandler>
    4f44:	90 91 de 16 	lds	r25, 0x16DE	; 0x8016de <_twiCurrentHandler+0x1>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	12 96       	adiw	r26, 0x02	; 2
    4f4c:	ed 91       	ld	r30, X+
    4f4e:	fc 91       	ld	r31, X
    4f50:	13 97       	sbiw	r26, 0x03	; 3
    4f52:	30 97       	sbiw	r30, 0x00	; 0
    4f54:	19 f1       	breq	.+70     	; 0x4f9c <__vector_39+0x154>
    4f56:	20 91 df 16 	lds	r18, 0x16DF	; 0x8016df <_twiMessageLen>
    4f5a:	40 ee       	ldi	r20, 0xE0	; 224
    4f5c:	56 e1       	ldi	r21, 0x16	; 22
    4f5e:	65 e0       	ldi	r22, 0x05	; 5
    4f60:	19 95       	eicall
    4f62:	1c c0       	rjmp	.+56     	; 0x4f9c <__vector_39+0x154>
    4f64:	85 ea       	ldi	r24, 0xA5	; 165
    4f66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f6a:	18 c0       	rjmp	.+48     	; 0x4f9c <__vector_39+0x154>
    4f6c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f70:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4f74:	84 e0       	ldi	r24, 0x04	; 4
    4f76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f7a:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <_twiCurrentHandler>
    4f7e:	90 91 de 16 	lds	r25, 0x16DE	; 0x8016de <_twiCurrentHandler+0x1>
    4f82:	dc 01       	movw	r26, r24
    4f84:	12 96       	adiw	r26, 0x02	; 2
    4f86:	ed 91       	ld	r30, X+
    4f88:	fc 91       	ld	r31, X
    4f8a:	13 97       	sbiw	r26, 0x03	; 3
    4f8c:	30 97       	sbiw	r30, 0x00	; 0
    4f8e:	31 f0       	breq	.+12     	; 0x4f9c <__vector_39+0x154>
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	40 e0       	ldi	r20, 0x00	; 0
    4f94:	50 e0       	ldi	r21, 0x00	; 0
    4f96:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4f9a:	19 95       	eicall
    4f9c:	ff 91       	pop	r31
    4f9e:	ef 91       	pop	r30
    4fa0:	bf 91       	pop	r27
    4fa2:	af 91       	pop	r26
    4fa4:	9f 91       	pop	r25
    4fa6:	8f 91       	pop	r24
    4fa8:	7f 91       	pop	r23
    4faa:	6f 91       	pop	r22
    4fac:	5f 91       	pop	r21
    4fae:	4f 91       	pop	r20
    4fb0:	3f 91       	pop	r19
    4fb2:	2f 91       	pop	r18
    4fb4:	0f 90       	pop	r0
    4fb6:	0b be       	out	0x3b, r0	; 59
    4fb8:	0f 90       	pop	r0
    4fba:	0f be       	out	0x3f, r0	; 63
    4fbc:	0f 90       	pop	r0
    4fbe:	1f 90       	pop	r1
    4fc0:	18 95       	reti

00004fc2 <fifo_init>:
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	41 11       	cpse	r20, r1
    4fc6:	01 c0       	rjmp	.+2      	; 0x4fca <fifo_init+0x8>
    4fc8:	00 d3       	rcall	.+1536   	; 0x55ca <abort>
    4fca:	84 2f       	mov	r24, r20
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	9c 01       	movw	r18, r24
    4fd0:	21 50       	subi	r18, 0x01	; 1
    4fd2:	31 09       	sbc	r19, r1
    4fd4:	82 23       	and	r24, r18
    4fd6:	93 23       	and	r25, r19
    4fd8:	89 2b       	or	r24, r25
    4fda:	09 f0       	breq	.+2      	; 0x4fde <fifo_init+0x1c>
    4fdc:	f6 d2       	rcall	.+1516   	; 0x55ca <abort>
    4fde:	41 38       	cpi	r20, 0x81	; 129
    4fe0:	08 f0       	brcs	.+2      	; 0x4fe4 <fifo_init+0x22>
    4fe2:	f3 d2       	rcall	.+1510   	; 0x55ca <abort>
    4fe4:	12 82       	std	Z+2, r1	; 0x02
    4fe6:	13 82       	std	Z+3, r1	; 0x03
    4fe8:	44 83       	std	Z+4, r20	; 0x04
    4fea:	44 0f       	add	r20, r20
    4fec:	41 50       	subi	r20, 0x01	; 1
    4fee:	45 83       	std	Z+5, r20	; 0x05
    4ff0:	71 83       	std	Z+1, r23	; 0x01
    4ff2:	60 83       	st	Z, r22
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	08 95       	ret

00004ffa <__subsf3>:
    4ffa:	50 58       	subi	r21, 0x80	; 128

00004ffc <__addsf3>:
    4ffc:	bb 27       	eor	r27, r27
    4ffe:	aa 27       	eor	r26, r26
    5000:	0e d0       	rcall	.+28     	; 0x501e <__addsf3x>
    5002:	21 c1       	rjmp	.+578    	; 0x5246 <__fp_round>
    5004:	12 d1       	rcall	.+548    	; 0x522a <__fp_pscA>
    5006:	30 f0       	brcs	.+12     	; 0x5014 <__addsf3+0x18>
    5008:	17 d1       	rcall	.+558    	; 0x5238 <__fp_pscB>
    500a:	20 f0       	brcs	.+8      	; 0x5014 <__addsf3+0x18>
    500c:	31 f4       	brne	.+12     	; 0x501a <__addsf3+0x1e>
    500e:	9f 3f       	cpi	r25, 0xFF	; 255
    5010:	11 f4       	brne	.+4      	; 0x5016 <__addsf3+0x1a>
    5012:	1e f4       	brtc	.+6      	; 0x501a <__addsf3+0x1e>
    5014:	07 c1       	rjmp	.+526    	; 0x5224 <__fp_nan>
    5016:	0e f4       	brtc	.+2      	; 0x501a <__addsf3+0x1e>
    5018:	e0 95       	com	r30
    501a:	e7 fb       	bst	r30, 7
    501c:	fd c0       	rjmp	.+506    	; 0x5218 <__fp_inf>

0000501e <__addsf3x>:
    501e:	e9 2f       	mov	r30, r25
    5020:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fp_split3>
    5024:	78 f3       	brcs	.-34     	; 0x5004 <__addsf3+0x8>
    5026:	ba 17       	cp	r27, r26
    5028:	62 07       	cpc	r22, r18
    502a:	73 07       	cpc	r23, r19
    502c:	84 07       	cpc	r24, r20
    502e:	95 07       	cpc	r25, r21
    5030:	20 f0       	brcs	.+8      	; 0x503a <__addsf3x+0x1c>
    5032:	79 f4       	brne	.+30     	; 0x5052 <__addsf3x+0x34>
    5034:	a6 f5       	brtc	.+104    	; 0x509e <__addsf3x+0x80>
    5036:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__fp_zero>
    503a:	0e f4       	brtc	.+2      	; 0x503e <__addsf3x+0x20>
    503c:	e0 95       	com	r30
    503e:	0b 2e       	mov	r0, r27
    5040:	ba 2f       	mov	r27, r26
    5042:	a0 2d       	mov	r26, r0
    5044:	0b 01       	movw	r0, r22
    5046:	b9 01       	movw	r22, r18
    5048:	90 01       	movw	r18, r0
    504a:	0c 01       	movw	r0, r24
    504c:	ca 01       	movw	r24, r20
    504e:	a0 01       	movw	r20, r0
    5050:	11 24       	eor	r1, r1
    5052:	ff 27       	eor	r31, r31
    5054:	59 1b       	sub	r21, r25
    5056:	99 f0       	breq	.+38     	; 0x507e <__addsf3x+0x60>
    5058:	59 3f       	cpi	r21, 0xF9	; 249
    505a:	50 f4       	brcc	.+20     	; 0x5070 <__addsf3x+0x52>
    505c:	50 3e       	cpi	r21, 0xE0	; 224
    505e:	68 f1       	brcs	.+90     	; 0x50ba <__addsf3x+0x9c>
    5060:	1a 16       	cp	r1, r26
    5062:	f0 40       	sbci	r31, 0x00	; 0
    5064:	a2 2f       	mov	r26, r18
    5066:	23 2f       	mov	r18, r19
    5068:	34 2f       	mov	r19, r20
    506a:	44 27       	eor	r20, r20
    506c:	58 5f       	subi	r21, 0xF8	; 248
    506e:	f3 cf       	rjmp	.-26     	; 0x5056 <__addsf3x+0x38>
    5070:	46 95       	lsr	r20
    5072:	37 95       	ror	r19
    5074:	27 95       	ror	r18
    5076:	a7 95       	ror	r26
    5078:	f0 40       	sbci	r31, 0x00	; 0
    507a:	53 95       	inc	r21
    507c:	c9 f7       	brne	.-14     	; 0x5070 <__addsf3x+0x52>
    507e:	7e f4       	brtc	.+30     	; 0x509e <__addsf3x+0x80>
    5080:	1f 16       	cp	r1, r31
    5082:	ba 0b       	sbc	r27, r26
    5084:	62 0b       	sbc	r22, r18
    5086:	73 0b       	sbc	r23, r19
    5088:	84 0b       	sbc	r24, r20
    508a:	ba f0       	brmi	.+46     	; 0x50ba <__addsf3x+0x9c>
    508c:	91 50       	subi	r25, 0x01	; 1
    508e:	a1 f0       	breq	.+40     	; 0x50b8 <__addsf3x+0x9a>
    5090:	ff 0f       	add	r31, r31
    5092:	bb 1f       	adc	r27, r27
    5094:	66 1f       	adc	r22, r22
    5096:	77 1f       	adc	r23, r23
    5098:	88 1f       	adc	r24, r24
    509a:	c2 f7       	brpl	.-16     	; 0x508c <__addsf3x+0x6e>
    509c:	0e c0       	rjmp	.+28     	; 0x50ba <__addsf3x+0x9c>
    509e:	ba 0f       	add	r27, r26
    50a0:	62 1f       	adc	r22, r18
    50a2:	73 1f       	adc	r23, r19
    50a4:	84 1f       	adc	r24, r20
    50a6:	48 f4       	brcc	.+18     	; 0x50ba <__addsf3x+0x9c>
    50a8:	87 95       	ror	r24
    50aa:	77 95       	ror	r23
    50ac:	67 95       	ror	r22
    50ae:	b7 95       	ror	r27
    50b0:	f7 95       	ror	r31
    50b2:	9e 3f       	cpi	r25, 0xFE	; 254
    50b4:	08 f0       	brcs	.+2      	; 0x50b8 <__addsf3x+0x9a>
    50b6:	b1 cf       	rjmp	.-158    	; 0x501a <__addsf3+0x1e>
    50b8:	93 95       	inc	r25
    50ba:	88 0f       	add	r24, r24
    50bc:	08 f0       	brcs	.+2      	; 0x50c0 <__addsf3x+0xa2>
    50be:	99 27       	eor	r25, r25
    50c0:	ee 0f       	add	r30, r30
    50c2:	97 95       	ror	r25
    50c4:	87 95       	ror	r24
    50c6:	08 95       	ret

000050c8 <__divsf3>:
    50c8:	0d d0       	rcall	.+26     	; 0x50e4 <__divsf3x>
    50ca:	bd c0       	rjmp	.+378    	; 0x5246 <__fp_round>
    50cc:	b5 d0       	rcall	.+362    	; 0x5238 <__fp_pscB>
    50ce:	48 f0       	brcs	.+18     	; 0x50e2 <__divsf3+0x1a>
    50d0:	ac d0       	rcall	.+344    	; 0x522a <__fp_pscA>
    50d2:	38 f0       	brcs	.+14     	; 0x50e2 <__divsf3+0x1a>
    50d4:	21 f4       	brne	.+8      	; 0x50de <__divsf3+0x16>
    50d6:	5f 3f       	cpi	r21, 0xFF	; 255
    50d8:	21 f0       	breq	.+8      	; 0x50e2 <__divsf3+0x1a>
    50da:	9e c0       	rjmp	.+316    	; 0x5218 <__fp_inf>
    50dc:	51 11       	cpse	r21, r1
    50de:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__fp_szero>
    50e2:	a0 c0       	rjmp	.+320    	; 0x5224 <__fp_nan>

000050e4 <__divsf3x>:
    50e4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fp_split3>
    50e8:	88 f3       	brcs	.-30     	; 0x50cc <__divsf3+0x4>

000050ea <__divsf3_pse>:
    50ea:	99 23       	and	r25, r25
    50ec:	b9 f3       	breq	.-18     	; 0x50dc <__divsf3+0x14>
    50ee:	55 23       	and	r21, r21
    50f0:	a1 f3       	breq	.-24     	; 0x50da <__divsf3+0x12>
    50f2:	95 1b       	sub	r25, r21
    50f4:	55 0b       	sbc	r21, r21
    50f6:	bb 27       	eor	r27, r27
    50f8:	aa 27       	eor	r26, r26
    50fa:	62 17       	cp	r22, r18
    50fc:	73 07       	cpc	r23, r19
    50fe:	84 07       	cpc	r24, r20
    5100:	38 f0       	brcs	.+14     	; 0x5110 <__divsf3_pse+0x26>
    5102:	9f 5f       	subi	r25, 0xFF	; 255
    5104:	5f 4f       	sbci	r21, 0xFF	; 255
    5106:	22 0f       	add	r18, r18
    5108:	33 1f       	adc	r19, r19
    510a:	44 1f       	adc	r20, r20
    510c:	aa 1f       	adc	r26, r26
    510e:	a9 f3       	breq	.-22     	; 0x50fa <__divsf3_pse+0x10>
    5110:	34 d0       	rcall	.+104    	; 0x517a <__divsf3_pse+0x90>
    5112:	0e 2e       	mov	r0, r30
    5114:	3a f0       	brmi	.+14     	; 0x5124 <__divsf3_pse+0x3a>
    5116:	e0 e8       	ldi	r30, 0x80	; 128
    5118:	31 d0       	rcall	.+98     	; 0x517c <__divsf3_pse+0x92>
    511a:	91 50       	subi	r25, 0x01	; 1
    511c:	50 40       	sbci	r21, 0x00	; 0
    511e:	e6 95       	lsr	r30
    5120:	00 1c       	adc	r0, r0
    5122:	ca f7       	brpl	.-14     	; 0x5116 <__divsf3_pse+0x2c>
    5124:	2a d0       	rcall	.+84     	; 0x517a <__divsf3_pse+0x90>
    5126:	fe 2f       	mov	r31, r30
    5128:	28 d0       	rcall	.+80     	; 0x517a <__divsf3_pse+0x90>
    512a:	66 0f       	add	r22, r22
    512c:	77 1f       	adc	r23, r23
    512e:	88 1f       	adc	r24, r24
    5130:	bb 1f       	adc	r27, r27
    5132:	26 17       	cp	r18, r22
    5134:	37 07       	cpc	r19, r23
    5136:	48 07       	cpc	r20, r24
    5138:	ab 07       	cpc	r26, r27
    513a:	b0 e8       	ldi	r27, 0x80	; 128
    513c:	09 f0       	breq	.+2      	; 0x5140 <__divsf3_pse+0x56>
    513e:	bb 0b       	sbc	r27, r27
    5140:	80 2d       	mov	r24, r0
    5142:	bf 01       	movw	r22, r30
    5144:	ff 27       	eor	r31, r31
    5146:	93 58       	subi	r25, 0x83	; 131
    5148:	5f 4f       	sbci	r21, 0xFF	; 255
    514a:	32 f0       	brmi	.+12     	; 0x5158 <__divsf3_pse+0x6e>
    514c:	9e 3f       	cpi	r25, 0xFE	; 254
    514e:	51 05       	cpc	r21, r1
    5150:	70 f0       	brcs	.+28     	; 0x516e <__divsf3_pse+0x84>
    5152:	62 c0       	rjmp	.+196    	; 0x5218 <__fp_inf>
    5154:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__fp_szero>
    5158:	5f 3f       	cpi	r21, 0xFF	; 255
    515a:	e4 f3       	brlt	.-8      	; 0x5154 <__divsf3_pse+0x6a>
    515c:	98 3e       	cpi	r25, 0xE8	; 232
    515e:	d4 f3       	brlt	.-12     	; 0x5154 <__divsf3_pse+0x6a>
    5160:	86 95       	lsr	r24
    5162:	77 95       	ror	r23
    5164:	67 95       	ror	r22
    5166:	b7 95       	ror	r27
    5168:	f7 95       	ror	r31
    516a:	9f 5f       	subi	r25, 0xFF	; 255
    516c:	c9 f7       	brne	.-14     	; 0x5160 <__divsf3_pse+0x76>
    516e:	88 0f       	add	r24, r24
    5170:	91 1d       	adc	r25, r1
    5172:	96 95       	lsr	r25
    5174:	87 95       	ror	r24
    5176:	97 f9       	bld	r25, 7
    5178:	08 95       	ret
    517a:	e1 e0       	ldi	r30, 0x01	; 1
    517c:	66 0f       	add	r22, r22
    517e:	77 1f       	adc	r23, r23
    5180:	88 1f       	adc	r24, r24
    5182:	bb 1f       	adc	r27, r27
    5184:	62 17       	cp	r22, r18
    5186:	73 07       	cpc	r23, r19
    5188:	84 07       	cpc	r24, r20
    518a:	ba 07       	cpc	r27, r26
    518c:	20 f0       	brcs	.+8      	; 0x5196 <__divsf3_pse+0xac>
    518e:	62 1b       	sub	r22, r18
    5190:	73 0b       	sbc	r23, r19
    5192:	84 0b       	sbc	r24, r20
    5194:	ba 0b       	sbc	r27, r26
    5196:	ee 1f       	adc	r30, r30
    5198:	88 f7       	brcc	.-30     	; 0x517c <__divsf3_pse+0x92>
    519a:	e0 95       	com	r30
    519c:	08 95       	ret

0000519e <__floatunsisf>:
    519e:	e8 94       	clt
    51a0:	09 c0       	rjmp	.+18     	; 0x51b4 <__floatsisf+0x12>

000051a2 <__floatsisf>:
    51a2:	97 fb       	bst	r25, 7
    51a4:	3e f4       	brtc	.+14     	; 0x51b4 <__floatsisf+0x12>
    51a6:	90 95       	com	r25
    51a8:	80 95       	com	r24
    51aa:	70 95       	com	r23
    51ac:	61 95       	neg	r22
    51ae:	7f 4f       	sbci	r23, 0xFF	; 255
    51b0:	8f 4f       	sbci	r24, 0xFF	; 255
    51b2:	9f 4f       	sbci	r25, 0xFF	; 255
    51b4:	99 23       	and	r25, r25
    51b6:	a9 f0       	breq	.+42     	; 0x51e2 <__floatsisf+0x40>
    51b8:	f9 2f       	mov	r31, r25
    51ba:	96 e9       	ldi	r25, 0x96	; 150
    51bc:	bb 27       	eor	r27, r27
    51be:	93 95       	inc	r25
    51c0:	f6 95       	lsr	r31
    51c2:	87 95       	ror	r24
    51c4:	77 95       	ror	r23
    51c6:	67 95       	ror	r22
    51c8:	b7 95       	ror	r27
    51ca:	f1 11       	cpse	r31, r1
    51cc:	f8 cf       	rjmp	.-16     	; 0x51be <__floatsisf+0x1c>
    51ce:	fa f4       	brpl	.+62     	; 0x520e <__floatsisf+0x6c>
    51d0:	bb 0f       	add	r27, r27
    51d2:	11 f4       	brne	.+4      	; 0x51d8 <__floatsisf+0x36>
    51d4:	60 ff       	sbrs	r22, 0
    51d6:	1b c0       	rjmp	.+54     	; 0x520e <__floatsisf+0x6c>
    51d8:	6f 5f       	subi	r22, 0xFF	; 255
    51da:	7f 4f       	sbci	r23, 0xFF	; 255
    51dc:	8f 4f       	sbci	r24, 0xFF	; 255
    51de:	9f 4f       	sbci	r25, 0xFF	; 255
    51e0:	16 c0       	rjmp	.+44     	; 0x520e <__floatsisf+0x6c>
    51e2:	88 23       	and	r24, r24
    51e4:	11 f0       	breq	.+4      	; 0x51ea <__floatsisf+0x48>
    51e6:	96 e9       	ldi	r25, 0x96	; 150
    51e8:	11 c0       	rjmp	.+34     	; 0x520c <__floatsisf+0x6a>
    51ea:	77 23       	and	r23, r23
    51ec:	21 f0       	breq	.+8      	; 0x51f6 <__floatsisf+0x54>
    51ee:	9e e8       	ldi	r25, 0x8E	; 142
    51f0:	87 2f       	mov	r24, r23
    51f2:	76 2f       	mov	r23, r22
    51f4:	05 c0       	rjmp	.+10     	; 0x5200 <__floatsisf+0x5e>
    51f6:	66 23       	and	r22, r22
    51f8:	71 f0       	breq	.+28     	; 0x5216 <__floatsisf+0x74>
    51fa:	96 e8       	ldi	r25, 0x86	; 134
    51fc:	86 2f       	mov	r24, r22
    51fe:	70 e0       	ldi	r23, 0x00	; 0
    5200:	60 e0       	ldi	r22, 0x00	; 0
    5202:	2a f0       	brmi	.+10     	; 0x520e <__floatsisf+0x6c>
    5204:	9a 95       	dec	r25
    5206:	66 0f       	add	r22, r22
    5208:	77 1f       	adc	r23, r23
    520a:	88 1f       	adc	r24, r24
    520c:	da f7       	brpl	.-10     	; 0x5204 <__floatsisf+0x62>
    520e:	88 0f       	add	r24, r24
    5210:	96 95       	lsr	r25
    5212:	87 95       	ror	r24
    5214:	97 f9       	bld	r25, 7
    5216:	08 95       	ret

00005218 <__fp_inf>:
    5218:	97 f9       	bld	r25, 7
    521a:	9f 67       	ori	r25, 0x7F	; 127
    521c:	80 e8       	ldi	r24, 0x80	; 128
    521e:	70 e0       	ldi	r23, 0x00	; 0
    5220:	60 e0       	ldi	r22, 0x00	; 0
    5222:	08 95       	ret

00005224 <__fp_nan>:
    5224:	9f ef       	ldi	r25, 0xFF	; 255
    5226:	80 ec       	ldi	r24, 0xC0	; 192
    5228:	08 95       	ret

0000522a <__fp_pscA>:
    522a:	00 24       	eor	r0, r0
    522c:	0a 94       	dec	r0
    522e:	16 16       	cp	r1, r22
    5230:	17 06       	cpc	r1, r23
    5232:	18 06       	cpc	r1, r24
    5234:	09 06       	cpc	r0, r25
    5236:	08 95       	ret

00005238 <__fp_pscB>:
    5238:	00 24       	eor	r0, r0
    523a:	0a 94       	dec	r0
    523c:	12 16       	cp	r1, r18
    523e:	13 06       	cpc	r1, r19
    5240:	14 06       	cpc	r1, r20
    5242:	05 06       	cpc	r0, r21
    5244:	08 95       	ret

00005246 <__fp_round>:
    5246:	09 2e       	mov	r0, r25
    5248:	03 94       	inc	r0
    524a:	00 0c       	add	r0, r0
    524c:	11 f4       	brne	.+4      	; 0x5252 <__fp_round+0xc>
    524e:	88 23       	and	r24, r24
    5250:	52 f0       	brmi	.+20     	; 0x5266 <__fp_round+0x20>
    5252:	bb 0f       	add	r27, r27
    5254:	40 f4       	brcc	.+16     	; 0x5266 <__fp_round+0x20>
    5256:	bf 2b       	or	r27, r31
    5258:	11 f4       	brne	.+4      	; 0x525e <__fp_round+0x18>
    525a:	60 ff       	sbrs	r22, 0
    525c:	04 c0       	rjmp	.+8      	; 0x5266 <__fp_round+0x20>
    525e:	6f 5f       	subi	r22, 0xFF	; 255
    5260:	7f 4f       	sbci	r23, 0xFF	; 255
    5262:	8f 4f       	sbci	r24, 0xFF	; 255
    5264:	9f 4f       	sbci	r25, 0xFF	; 255
    5266:	08 95       	ret

00005268 <__mulsf3>:
    5268:	0c d0       	rcall	.+24     	; 0x5282 <__mulsf3x>
    526a:	ed cf       	rjmp	.-38     	; 0x5246 <__fp_round>
    526c:	de df       	rcall	.-68     	; 0x522a <__fp_pscA>
    526e:	28 f0       	brcs	.+10     	; 0x527a <__mulsf3+0x12>
    5270:	e3 df       	rcall	.-58     	; 0x5238 <__fp_pscB>
    5272:	18 f0       	brcs	.+6      	; 0x527a <__mulsf3+0x12>
    5274:	95 23       	and	r25, r21
    5276:	09 f0       	breq	.+2      	; 0x527a <__mulsf3+0x12>
    5278:	cf cf       	rjmp	.-98     	; 0x5218 <__fp_inf>
    527a:	d4 cf       	rjmp	.-88     	; 0x5224 <__fp_nan>
    527c:	11 24       	eor	r1, r1
    527e:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__fp_szero>

00005282 <__mulsf3x>:
    5282:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fp_split3>
    5286:	90 f3       	brcs	.-28     	; 0x526c <__mulsf3+0x4>

00005288 <__mulsf3_pse>:
    5288:	95 9f       	mul	r25, r21
    528a:	c1 f3       	breq	.-16     	; 0x527c <__mulsf3+0x14>
    528c:	95 0f       	add	r25, r21
    528e:	50 e0       	ldi	r21, 0x00	; 0
    5290:	55 1f       	adc	r21, r21
    5292:	62 9f       	mul	r22, r18
    5294:	f0 01       	movw	r30, r0
    5296:	72 9f       	mul	r23, r18
    5298:	bb 27       	eor	r27, r27
    529a:	f0 0d       	add	r31, r0
    529c:	b1 1d       	adc	r27, r1
    529e:	63 9f       	mul	r22, r19
    52a0:	aa 27       	eor	r26, r26
    52a2:	f0 0d       	add	r31, r0
    52a4:	b1 1d       	adc	r27, r1
    52a6:	aa 1f       	adc	r26, r26
    52a8:	64 9f       	mul	r22, r20
    52aa:	66 27       	eor	r22, r22
    52ac:	b0 0d       	add	r27, r0
    52ae:	a1 1d       	adc	r26, r1
    52b0:	66 1f       	adc	r22, r22
    52b2:	82 9f       	mul	r24, r18
    52b4:	22 27       	eor	r18, r18
    52b6:	b0 0d       	add	r27, r0
    52b8:	a1 1d       	adc	r26, r1
    52ba:	62 1f       	adc	r22, r18
    52bc:	73 9f       	mul	r23, r19
    52be:	b0 0d       	add	r27, r0
    52c0:	a1 1d       	adc	r26, r1
    52c2:	62 1f       	adc	r22, r18
    52c4:	83 9f       	mul	r24, r19
    52c6:	a0 0d       	add	r26, r0
    52c8:	61 1d       	adc	r22, r1
    52ca:	22 1f       	adc	r18, r18
    52cc:	74 9f       	mul	r23, r20
    52ce:	33 27       	eor	r19, r19
    52d0:	a0 0d       	add	r26, r0
    52d2:	61 1d       	adc	r22, r1
    52d4:	23 1f       	adc	r18, r19
    52d6:	84 9f       	mul	r24, r20
    52d8:	60 0d       	add	r22, r0
    52da:	21 1d       	adc	r18, r1
    52dc:	82 2f       	mov	r24, r18
    52de:	76 2f       	mov	r23, r22
    52e0:	6a 2f       	mov	r22, r26
    52e2:	11 24       	eor	r1, r1
    52e4:	9f 57       	subi	r25, 0x7F	; 127
    52e6:	50 40       	sbci	r21, 0x00	; 0
    52e8:	92 f0       	brmi	.+36     	; 0x530e <__mulsf3_pse+0x86>
    52ea:	e9 f0       	breq	.+58     	; 0x5326 <__mulsf3_pse+0x9e>
    52ec:	88 23       	and	r24, r24
    52ee:	4a f0       	brmi	.+18     	; 0x5302 <__mulsf3_pse+0x7a>
    52f0:	ee 0f       	add	r30, r30
    52f2:	ff 1f       	adc	r31, r31
    52f4:	bb 1f       	adc	r27, r27
    52f6:	66 1f       	adc	r22, r22
    52f8:	77 1f       	adc	r23, r23
    52fa:	88 1f       	adc	r24, r24
    52fc:	91 50       	subi	r25, 0x01	; 1
    52fe:	50 40       	sbci	r21, 0x00	; 0
    5300:	a9 f7       	brne	.-22     	; 0x52ec <__mulsf3_pse+0x64>
    5302:	9e 3f       	cpi	r25, 0xFE	; 254
    5304:	51 05       	cpc	r21, r1
    5306:	78 f0       	brcs	.+30     	; 0x5326 <__mulsf3_pse+0x9e>
    5308:	87 cf       	rjmp	.-242    	; 0x5218 <__fp_inf>
    530a:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__fp_szero>
    530e:	5f 3f       	cpi	r21, 0xFF	; 255
    5310:	e4 f3       	brlt	.-8      	; 0x530a <__mulsf3_pse+0x82>
    5312:	98 3e       	cpi	r25, 0xE8	; 232
    5314:	d4 f3       	brlt	.-12     	; 0x530a <__mulsf3_pse+0x82>
    5316:	86 95       	lsr	r24
    5318:	77 95       	ror	r23
    531a:	67 95       	ror	r22
    531c:	b7 95       	ror	r27
    531e:	f7 95       	ror	r31
    5320:	e7 95       	ror	r30
    5322:	9f 5f       	subi	r25, 0xFF	; 255
    5324:	c1 f7       	brne	.-16     	; 0x5316 <__mulsf3_pse+0x8e>
    5326:	fe 2b       	or	r31, r30
    5328:	88 0f       	add	r24, r24
    532a:	91 1d       	adc	r25, r1
    532c:	96 95       	lsr	r25
    532e:	87 95       	ror	r24
    5330:	97 f9       	bld	r25, 7
    5332:	08 95       	ret

00005334 <__udivmodsi4>:
    5334:	a1 e2       	ldi	r26, 0x21	; 33
    5336:	1a 2e       	mov	r1, r26
    5338:	aa 1b       	sub	r26, r26
    533a:	bb 1b       	sub	r27, r27
    533c:	fd 01       	movw	r30, r26
    533e:	0d c0       	rjmp	.+26     	; 0x535a <__udivmodsi4_ep>

00005340 <__udivmodsi4_loop>:
    5340:	aa 1f       	adc	r26, r26
    5342:	bb 1f       	adc	r27, r27
    5344:	ee 1f       	adc	r30, r30
    5346:	ff 1f       	adc	r31, r31
    5348:	a2 17       	cp	r26, r18
    534a:	b3 07       	cpc	r27, r19
    534c:	e4 07       	cpc	r30, r20
    534e:	f5 07       	cpc	r31, r21
    5350:	20 f0       	brcs	.+8      	; 0x535a <__udivmodsi4_ep>
    5352:	a2 1b       	sub	r26, r18
    5354:	b3 0b       	sbc	r27, r19
    5356:	e4 0b       	sbc	r30, r20
    5358:	f5 0b       	sbc	r31, r21

0000535a <__udivmodsi4_ep>:
    535a:	66 1f       	adc	r22, r22
    535c:	77 1f       	adc	r23, r23
    535e:	88 1f       	adc	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	1a 94       	dec	r1
    5364:	69 f7       	brne	.-38     	; 0x5340 <__udivmodsi4_loop>
    5366:	60 95       	com	r22
    5368:	70 95       	com	r23
    536a:	80 95       	com	r24
    536c:	90 95       	com	r25
    536e:	9b 01       	movw	r18, r22
    5370:	ac 01       	movw	r20, r24
    5372:	bd 01       	movw	r22, r26
    5374:	cf 01       	movw	r24, r30
    5376:	08 95       	ret

00005378 <__tablejump2__>:
    5378:	ee 0f       	add	r30, r30
    537a:	ff 1f       	adc	r31, r31
    537c:	88 1f       	adc	r24, r24
    537e:	8b bf       	out	0x3b, r24	; 59
    5380:	07 90       	elpm	r0, Z+
    5382:	f6 91       	elpm	r31, Z
    5384:	e0 2d       	mov	r30, r0
    5386:	19 94       	eijmp

00005388 <malloc>:
    5388:	0f 93       	push	r16
    538a:	1f 93       	push	r17
    538c:	cf 93       	push	r28
    538e:	df 93       	push	r29
    5390:	82 30       	cpi	r24, 0x02	; 2
    5392:	91 05       	cpc	r25, r1
    5394:	10 f4       	brcc	.+4      	; 0x539a <malloc+0x12>
    5396:	82 e0       	ldi	r24, 0x02	; 2
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	e0 91 f0 16 	lds	r30, 0x16F0	; 0x8016f0 <__flp>
    539e:	f0 91 f1 16 	lds	r31, 0x16F1	; 0x8016f1 <__flp+0x1>
    53a2:	20 e0       	ldi	r18, 0x00	; 0
    53a4:	30 e0       	ldi	r19, 0x00	; 0
    53a6:	a0 e0       	ldi	r26, 0x00	; 0
    53a8:	b0 e0       	ldi	r27, 0x00	; 0
    53aa:	30 97       	sbiw	r30, 0x00	; 0
    53ac:	19 f1       	breq	.+70     	; 0x53f4 <malloc+0x6c>
    53ae:	40 81       	ld	r20, Z
    53b0:	51 81       	ldd	r21, Z+1	; 0x01
    53b2:	02 81       	ldd	r16, Z+2	; 0x02
    53b4:	13 81       	ldd	r17, Z+3	; 0x03
    53b6:	48 17       	cp	r20, r24
    53b8:	59 07       	cpc	r21, r25
    53ba:	c8 f0       	brcs	.+50     	; 0x53ee <malloc+0x66>
    53bc:	84 17       	cp	r24, r20
    53be:	95 07       	cpc	r25, r21
    53c0:	69 f4       	brne	.+26     	; 0x53dc <malloc+0x54>
    53c2:	10 97       	sbiw	r26, 0x00	; 0
    53c4:	31 f0       	breq	.+12     	; 0x53d2 <malloc+0x4a>
    53c6:	12 96       	adiw	r26, 0x02	; 2
    53c8:	0c 93       	st	X, r16
    53ca:	12 97       	sbiw	r26, 0x02	; 2
    53cc:	13 96       	adiw	r26, 0x03	; 3
    53ce:	1c 93       	st	X, r17
    53d0:	27 c0       	rjmp	.+78     	; 0x5420 <malloc+0x98>
    53d2:	00 93 f0 16 	sts	0x16F0, r16	; 0x8016f0 <__flp>
    53d6:	10 93 f1 16 	sts	0x16F1, r17	; 0x8016f1 <__flp+0x1>
    53da:	22 c0       	rjmp	.+68     	; 0x5420 <malloc+0x98>
    53dc:	21 15       	cp	r18, r1
    53de:	31 05       	cpc	r19, r1
    53e0:	19 f0       	breq	.+6      	; 0x53e8 <malloc+0x60>
    53e2:	42 17       	cp	r20, r18
    53e4:	53 07       	cpc	r21, r19
    53e6:	18 f4       	brcc	.+6      	; 0x53ee <malloc+0x66>
    53e8:	9a 01       	movw	r18, r20
    53ea:	bd 01       	movw	r22, r26
    53ec:	ef 01       	movw	r28, r30
    53ee:	df 01       	movw	r26, r30
    53f0:	f8 01       	movw	r30, r16
    53f2:	db cf       	rjmp	.-74     	; 0x53aa <malloc+0x22>
    53f4:	21 15       	cp	r18, r1
    53f6:	31 05       	cpc	r19, r1
    53f8:	f9 f0       	breq	.+62     	; 0x5438 <malloc+0xb0>
    53fa:	28 1b       	sub	r18, r24
    53fc:	39 0b       	sbc	r19, r25
    53fe:	24 30       	cpi	r18, 0x04	; 4
    5400:	31 05       	cpc	r19, r1
    5402:	80 f4       	brcc	.+32     	; 0x5424 <malloc+0x9c>
    5404:	8a 81       	ldd	r24, Y+2	; 0x02
    5406:	9b 81       	ldd	r25, Y+3	; 0x03
    5408:	61 15       	cp	r22, r1
    540a:	71 05       	cpc	r23, r1
    540c:	21 f0       	breq	.+8      	; 0x5416 <malloc+0x8e>
    540e:	fb 01       	movw	r30, r22
    5410:	93 83       	std	Z+3, r25	; 0x03
    5412:	82 83       	std	Z+2, r24	; 0x02
    5414:	04 c0       	rjmp	.+8      	; 0x541e <malloc+0x96>
    5416:	90 93 f1 16 	sts	0x16F1, r25	; 0x8016f1 <__flp+0x1>
    541a:	80 93 f0 16 	sts	0x16F0, r24	; 0x8016f0 <__flp>
    541e:	fe 01       	movw	r30, r28
    5420:	32 96       	adiw	r30, 0x02	; 2
    5422:	44 c0       	rjmp	.+136    	; 0x54ac <malloc+0x124>
    5424:	fe 01       	movw	r30, r28
    5426:	e2 0f       	add	r30, r18
    5428:	f3 1f       	adc	r31, r19
    542a:	81 93       	st	Z+, r24
    542c:	91 93       	st	Z+, r25
    542e:	22 50       	subi	r18, 0x02	; 2
    5430:	31 09       	sbc	r19, r1
    5432:	39 83       	std	Y+1, r19	; 0x01
    5434:	28 83       	st	Y, r18
    5436:	3a c0       	rjmp	.+116    	; 0x54ac <malloc+0x124>
    5438:	20 91 ee 16 	lds	r18, 0x16EE	; 0x8016ee <__brkval>
    543c:	30 91 ef 16 	lds	r19, 0x16EF	; 0x8016ef <__brkval+0x1>
    5440:	23 2b       	or	r18, r19
    5442:	41 f4       	brne	.+16     	; 0x5454 <malloc+0xcc>
    5444:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5448:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    544c:	30 93 ef 16 	sts	0x16EF, r19	; 0x8016ef <__brkval+0x1>
    5450:	20 93 ee 16 	sts	0x16EE, r18	; 0x8016ee <__brkval>
    5454:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5458:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    545c:	21 15       	cp	r18, r1
    545e:	31 05       	cpc	r19, r1
    5460:	41 f4       	brne	.+16     	; 0x5472 <malloc+0xea>
    5462:	2d b7       	in	r18, 0x3d	; 61
    5464:	3e b7       	in	r19, 0x3e	; 62
    5466:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    546a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    546e:	24 1b       	sub	r18, r20
    5470:	35 0b       	sbc	r19, r21
    5472:	e0 91 ee 16 	lds	r30, 0x16EE	; 0x8016ee <__brkval>
    5476:	f0 91 ef 16 	lds	r31, 0x16EF	; 0x8016ef <__brkval+0x1>
    547a:	e2 17       	cp	r30, r18
    547c:	f3 07       	cpc	r31, r19
    547e:	a0 f4       	brcc	.+40     	; 0x54a8 <malloc+0x120>
    5480:	2e 1b       	sub	r18, r30
    5482:	3f 0b       	sbc	r19, r31
    5484:	28 17       	cp	r18, r24
    5486:	39 07       	cpc	r19, r25
    5488:	78 f0       	brcs	.+30     	; 0x54a8 <malloc+0x120>
    548a:	ac 01       	movw	r20, r24
    548c:	4e 5f       	subi	r20, 0xFE	; 254
    548e:	5f 4f       	sbci	r21, 0xFF	; 255
    5490:	24 17       	cp	r18, r20
    5492:	35 07       	cpc	r19, r21
    5494:	48 f0       	brcs	.+18     	; 0x54a8 <malloc+0x120>
    5496:	4e 0f       	add	r20, r30
    5498:	5f 1f       	adc	r21, r31
    549a:	50 93 ef 16 	sts	0x16EF, r21	; 0x8016ef <__brkval+0x1>
    549e:	40 93 ee 16 	sts	0x16EE, r20	; 0x8016ee <__brkval>
    54a2:	81 93       	st	Z+, r24
    54a4:	91 93       	st	Z+, r25
    54a6:	02 c0       	rjmp	.+4      	; 0x54ac <malloc+0x124>
    54a8:	e0 e0       	ldi	r30, 0x00	; 0
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	cf 01       	movw	r24, r30
    54ae:	df 91       	pop	r29
    54b0:	cf 91       	pop	r28
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	08 95       	ret

000054b8 <free>:
    54b8:	cf 93       	push	r28
    54ba:	df 93       	push	r29
    54bc:	00 97       	sbiw	r24, 0x00	; 0
    54be:	09 f4       	brne	.+2      	; 0x54c2 <free+0xa>
    54c0:	81 c0       	rjmp	.+258    	; 0x55c4 <free+0x10c>
    54c2:	fc 01       	movw	r30, r24
    54c4:	32 97       	sbiw	r30, 0x02	; 2
    54c6:	13 82       	std	Z+3, r1	; 0x03
    54c8:	12 82       	std	Z+2, r1	; 0x02
    54ca:	a0 91 f0 16 	lds	r26, 0x16F0	; 0x8016f0 <__flp>
    54ce:	b0 91 f1 16 	lds	r27, 0x16F1	; 0x8016f1 <__flp+0x1>
    54d2:	10 97       	sbiw	r26, 0x00	; 0
    54d4:	81 f4       	brne	.+32     	; 0x54f6 <free+0x3e>
    54d6:	20 81       	ld	r18, Z
    54d8:	31 81       	ldd	r19, Z+1	; 0x01
    54da:	82 0f       	add	r24, r18
    54dc:	93 1f       	adc	r25, r19
    54de:	20 91 ee 16 	lds	r18, 0x16EE	; 0x8016ee <__brkval>
    54e2:	30 91 ef 16 	lds	r19, 0x16EF	; 0x8016ef <__brkval+0x1>
    54e6:	28 17       	cp	r18, r24
    54e8:	39 07       	cpc	r19, r25
    54ea:	51 f5       	brne	.+84     	; 0x5540 <free+0x88>
    54ec:	f0 93 ef 16 	sts	0x16EF, r31	; 0x8016ef <__brkval+0x1>
    54f0:	e0 93 ee 16 	sts	0x16EE, r30	; 0x8016ee <__brkval>
    54f4:	67 c0       	rjmp	.+206    	; 0x55c4 <free+0x10c>
    54f6:	ed 01       	movw	r28, r26
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	ce 17       	cp	r28, r30
    54fe:	df 07       	cpc	r29, r31
    5500:	40 f4       	brcc	.+16     	; 0x5512 <free+0x5a>
    5502:	4a 81       	ldd	r20, Y+2	; 0x02
    5504:	5b 81       	ldd	r21, Y+3	; 0x03
    5506:	9e 01       	movw	r18, r28
    5508:	41 15       	cp	r20, r1
    550a:	51 05       	cpc	r21, r1
    550c:	f1 f0       	breq	.+60     	; 0x554a <free+0x92>
    550e:	ea 01       	movw	r28, r20
    5510:	f5 cf       	rjmp	.-22     	; 0x54fc <free+0x44>
    5512:	d3 83       	std	Z+3, r29	; 0x03
    5514:	c2 83       	std	Z+2, r28	; 0x02
    5516:	40 81       	ld	r20, Z
    5518:	51 81       	ldd	r21, Z+1	; 0x01
    551a:	84 0f       	add	r24, r20
    551c:	95 1f       	adc	r25, r21
    551e:	c8 17       	cp	r28, r24
    5520:	d9 07       	cpc	r29, r25
    5522:	59 f4       	brne	.+22     	; 0x553a <free+0x82>
    5524:	88 81       	ld	r24, Y
    5526:	99 81       	ldd	r25, Y+1	; 0x01
    5528:	84 0f       	add	r24, r20
    552a:	95 1f       	adc	r25, r21
    552c:	02 96       	adiw	r24, 0x02	; 2
    552e:	91 83       	std	Z+1, r25	; 0x01
    5530:	80 83       	st	Z, r24
    5532:	8a 81       	ldd	r24, Y+2	; 0x02
    5534:	9b 81       	ldd	r25, Y+3	; 0x03
    5536:	93 83       	std	Z+3, r25	; 0x03
    5538:	82 83       	std	Z+2, r24	; 0x02
    553a:	21 15       	cp	r18, r1
    553c:	31 05       	cpc	r19, r1
    553e:	29 f4       	brne	.+10     	; 0x554a <free+0x92>
    5540:	f0 93 f1 16 	sts	0x16F1, r31	; 0x8016f1 <__flp+0x1>
    5544:	e0 93 f0 16 	sts	0x16F0, r30	; 0x8016f0 <__flp>
    5548:	3d c0       	rjmp	.+122    	; 0x55c4 <free+0x10c>
    554a:	e9 01       	movw	r28, r18
    554c:	fb 83       	std	Y+3, r31	; 0x03
    554e:	ea 83       	std	Y+2, r30	; 0x02
    5550:	49 91       	ld	r20, Y+
    5552:	59 91       	ld	r21, Y+
    5554:	c4 0f       	add	r28, r20
    5556:	d5 1f       	adc	r29, r21
    5558:	ec 17       	cp	r30, r28
    555a:	fd 07       	cpc	r31, r29
    555c:	61 f4       	brne	.+24     	; 0x5576 <free+0xbe>
    555e:	80 81       	ld	r24, Z
    5560:	91 81       	ldd	r25, Z+1	; 0x01
    5562:	84 0f       	add	r24, r20
    5564:	95 1f       	adc	r25, r21
    5566:	02 96       	adiw	r24, 0x02	; 2
    5568:	e9 01       	movw	r28, r18
    556a:	99 83       	std	Y+1, r25	; 0x01
    556c:	88 83       	st	Y, r24
    556e:	82 81       	ldd	r24, Z+2	; 0x02
    5570:	93 81       	ldd	r25, Z+3	; 0x03
    5572:	9b 83       	std	Y+3, r25	; 0x03
    5574:	8a 83       	std	Y+2, r24	; 0x02
    5576:	e0 e0       	ldi	r30, 0x00	; 0
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	12 96       	adiw	r26, 0x02	; 2
    557c:	8d 91       	ld	r24, X+
    557e:	9c 91       	ld	r25, X
    5580:	13 97       	sbiw	r26, 0x03	; 3
    5582:	00 97       	sbiw	r24, 0x00	; 0
    5584:	19 f0       	breq	.+6      	; 0x558c <free+0xd4>
    5586:	fd 01       	movw	r30, r26
    5588:	dc 01       	movw	r26, r24
    558a:	f7 cf       	rjmp	.-18     	; 0x557a <free+0xc2>
    558c:	8d 91       	ld	r24, X+
    558e:	9c 91       	ld	r25, X
    5590:	11 97       	sbiw	r26, 0x01	; 1
    5592:	9d 01       	movw	r18, r26
    5594:	2e 5f       	subi	r18, 0xFE	; 254
    5596:	3f 4f       	sbci	r19, 0xFF	; 255
    5598:	82 0f       	add	r24, r18
    559a:	93 1f       	adc	r25, r19
    559c:	20 91 ee 16 	lds	r18, 0x16EE	; 0x8016ee <__brkval>
    55a0:	30 91 ef 16 	lds	r19, 0x16EF	; 0x8016ef <__brkval+0x1>
    55a4:	28 17       	cp	r18, r24
    55a6:	39 07       	cpc	r19, r25
    55a8:	69 f4       	brne	.+26     	; 0x55c4 <free+0x10c>
    55aa:	30 97       	sbiw	r30, 0x00	; 0
    55ac:	29 f4       	brne	.+10     	; 0x55b8 <free+0x100>
    55ae:	10 92 f1 16 	sts	0x16F1, r1	; 0x8016f1 <__flp+0x1>
    55b2:	10 92 f0 16 	sts	0x16F0, r1	; 0x8016f0 <__flp>
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <free+0x104>
    55b8:	13 82       	std	Z+3, r1	; 0x03
    55ba:	12 82       	std	Z+2, r1	; 0x02
    55bc:	b0 93 ef 16 	sts	0x16EF, r27	; 0x8016ef <__brkval+0x1>
    55c0:	a0 93 ee 16 	sts	0x16EE, r26	; 0x8016ee <__brkval>
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	08 95       	ret

000055ca <abort>:
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	f8 94       	cli
    55d0:	7d c3       	rjmp	.+1786   	; 0x5ccc <_exit>

000055d2 <memcpy>:
    55d2:	fb 01       	movw	r30, r22
    55d4:	dc 01       	movw	r26, r24
    55d6:	02 c0       	rjmp	.+4      	; 0x55dc <memcpy+0xa>
    55d8:	01 90       	ld	r0, Z+
    55da:	0d 92       	st	X+, r0
    55dc:	41 50       	subi	r20, 0x01	; 1
    55de:	50 40       	sbci	r21, 0x00	; 0
    55e0:	d8 f7       	brcc	.-10     	; 0x55d8 <memcpy+0x6>
    55e2:	08 95       	ret

000055e4 <memset>:
    55e4:	dc 01       	movw	r26, r24
    55e6:	01 c0       	rjmp	.+2      	; 0x55ea <memset+0x6>
    55e8:	6d 93       	st	X+, r22
    55ea:	41 50       	subi	r20, 0x01	; 1
    55ec:	50 40       	sbci	r21, 0x00	; 0
    55ee:	e0 f7       	brcc	.-8      	; 0x55e8 <memset+0x4>
    55f0:	08 95       	ret

000055f2 <strcasestr>:
    55f2:	fb 01       	movw	r30, r22
    55f4:	51 91       	ld	r21, Z+
    55f6:	55 23       	and	r21, r21
    55f8:	b1 f0       	breq	.+44     	; 0x5626 <strcasestr+0x34>
    55fa:	bf 01       	movw	r22, r30
    55fc:	dc 01       	movw	r26, r24
    55fe:	05 2e       	mov	r0, r21
    5600:	4d 91       	ld	r20, X+
    5602:	44 23       	and	r20, r20
    5604:	69 f0       	breq	.+26     	; 0x5620 <strcasestr+0x2e>
    5606:	10 d0       	rcall	.+32     	; 0x5628 <strcasestr+0x36>
    5608:	d9 f7       	brne	.-10     	; 0x5600 <strcasestr+0xe>
    560a:	cd 01       	movw	r24, r26
    560c:	01 90       	ld	r0, Z+
    560e:	00 20       	and	r0, r0
    5610:	49 f0       	breq	.+18     	; 0x5624 <strcasestr+0x32>
    5612:	4d 91       	ld	r20, X+
    5614:	41 11       	cpse	r20, r1
    5616:	08 d0       	rcall	.+16     	; 0x5628 <strcasestr+0x36>
    5618:	c9 f3       	breq	.-14     	; 0x560c <strcasestr+0x1a>
    561a:	fb 01       	movw	r30, r22
    561c:	41 11       	cpse	r20, r1
    561e:	ee cf       	rjmp	.-36     	; 0x55fc <strcasestr+0xa>
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	01 97       	sbiw	r24, 0x01	; 1
    5626:	08 95       	ret
    5628:	40 25       	eor	r20, r0
    562a:	39 f0       	breq	.+14     	; 0x563a <strcasestr+0x48>
    562c:	40 32       	cpi	r20, 0x20	; 32
    562e:	29 f4       	brne	.+10     	; 0x563a <strcasestr+0x48>
    5630:	40 29       	or	r20, r0
    5632:	4b 57       	subi	r20, 0x7B	; 123
    5634:	46 5e       	subi	r20, 0xE6	; 230
    5636:	08 f0       	brcs	.+2      	; 0x563a <strcasestr+0x48>
    5638:	18 94       	sez
    563a:	08 95       	ret

0000563c <strcat>:
    563c:	fb 01       	movw	r30, r22
    563e:	dc 01       	movw	r26, r24
    5640:	0d 90       	ld	r0, X+
    5642:	00 20       	and	r0, r0
    5644:	e9 f7       	brne	.-6      	; 0x5640 <strcat+0x4>
    5646:	11 97       	sbiw	r26, 0x01	; 1
    5648:	01 90       	ld	r0, Z+
    564a:	0d 92       	st	X+, r0
    564c:	00 20       	and	r0, r0
    564e:	e1 f7       	brne	.-8      	; 0x5648 <strcat+0xc>
    5650:	08 95       	ret

00005652 <strcpy>:
    5652:	fb 01       	movw	r30, r22
    5654:	dc 01       	movw	r26, r24
    5656:	01 90       	ld	r0, Z+
    5658:	0d 92       	st	X+, r0
    565a:	00 20       	and	r0, r0
    565c:	e1 f7       	brne	.-8      	; 0x5656 <strcpy+0x4>
    565e:	08 95       	ret

00005660 <strncasecmp>:
    5660:	fb 01       	movw	r30, r22
    5662:	dc 01       	movw	r26, r24
    5664:	41 50       	subi	r20, 0x01	; 1
    5666:	50 40       	sbci	r21, 0x00	; 0
    5668:	88 f0       	brcs	.+34     	; 0x568c <strncasecmp+0x2c>
    566a:	8d 91       	ld	r24, X+
    566c:	81 34       	cpi	r24, 0x41	; 65
    566e:	1c f0       	brlt	.+6      	; 0x5676 <strncasecmp+0x16>
    5670:	8b 35       	cpi	r24, 0x5B	; 91
    5672:	0c f4       	brge	.+2      	; 0x5676 <strncasecmp+0x16>
    5674:	80 5e       	subi	r24, 0xE0	; 224
    5676:	61 91       	ld	r22, Z+
    5678:	61 34       	cpi	r22, 0x41	; 65
    567a:	1c f0       	brlt	.+6      	; 0x5682 <strncasecmp+0x22>
    567c:	6b 35       	cpi	r22, 0x5B	; 91
    567e:	0c f4       	brge	.+2      	; 0x5682 <strncasecmp+0x22>
    5680:	60 5e       	subi	r22, 0xE0	; 224
    5682:	86 1b       	sub	r24, r22
    5684:	61 11       	cpse	r22, r1
    5686:	71 f3       	breq	.-36     	; 0x5664 <strncasecmp+0x4>
    5688:	99 0b       	sbc	r25, r25
    568a:	08 95       	ret
    568c:	88 1b       	sub	r24, r24
    568e:	fc cf       	rjmp	.-8      	; 0x5688 <strncasecmp+0x28>

00005690 <printf>:
    5690:	cf 93       	push	r28
    5692:	df 93       	push	r29
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
    5698:	ae 01       	movw	r20, r28
    569a:	4a 5f       	subi	r20, 0xFA	; 250
    569c:	5f 4f       	sbci	r21, 0xFF	; 255
    569e:	fa 01       	movw	r30, r20
    56a0:	61 91       	ld	r22, Z+
    56a2:	71 91       	ld	r23, Z+
    56a4:	af 01       	movw	r20, r30
    56a6:	80 91 f4 16 	lds	r24, 0x16F4	; 0x8016f4 <__iob+0x2>
    56aa:	90 91 f5 16 	lds	r25, 0x16F5	; 0x8016f5 <__iob+0x3>
    56ae:	61 d0       	rcall	.+194    	; 0x5772 <vfprintf>
    56b0:	df 91       	pop	r29
    56b2:	cf 91       	pop	r28
    56b4:	08 95       	ret

000056b6 <puts>:
    56b6:	0f 93       	push	r16
    56b8:	1f 93       	push	r17
    56ba:	cf 93       	push	r28
    56bc:	df 93       	push	r29
    56be:	e0 91 f4 16 	lds	r30, 0x16F4	; 0x8016f4 <__iob+0x2>
    56c2:	f0 91 f5 16 	lds	r31, 0x16F5	; 0x8016f5 <__iob+0x3>
    56c6:	23 81       	ldd	r18, Z+3	; 0x03
    56c8:	21 ff       	sbrs	r18, 1
    56ca:	1b c0       	rjmp	.+54     	; 0x5702 <puts+0x4c>
    56cc:	8c 01       	movw	r16, r24
    56ce:	d0 e0       	ldi	r29, 0x00	; 0
    56d0:	c0 e0       	ldi	r28, 0x00	; 0
    56d2:	f8 01       	movw	r30, r16
    56d4:	81 91       	ld	r24, Z+
    56d6:	8f 01       	movw	r16, r30
    56d8:	60 91 f4 16 	lds	r22, 0x16F4	; 0x8016f4 <__iob+0x2>
    56dc:	70 91 f5 16 	lds	r23, 0x16F5	; 0x8016f5 <__iob+0x3>
    56e0:	db 01       	movw	r26, r22
    56e2:	18 96       	adiw	r26, 0x08	; 8
    56e4:	ed 91       	ld	r30, X+
    56e6:	fc 91       	ld	r31, X
    56e8:	19 97       	sbiw	r26, 0x09	; 9
    56ea:	88 23       	and	r24, r24
    56ec:	31 f0       	breq	.+12     	; 0x56fa <puts+0x44>
    56ee:	19 95       	eicall
    56f0:	89 2b       	or	r24, r25
    56f2:	79 f3       	breq	.-34     	; 0x56d2 <puts+0x1c>
    56f4:	df ef       	ldi	r29, 0xFF	; 255
    56f6:	cf ef       	ldi	r28, 0xFF	; 255
    56f8:	ec cf       	rjmp	.-40     	; 0x56d2 <puts+0x1c>
    56fa:	8a e0       	ldi	r24, 0x0A	; 10
    56fc:	19 95       	eicall
    56fe:	89 2b       	or	r24, r25
    5700:	19 f0       	breq	.+6      	; 0x5708 <puts+0x52>
    5702:	8f ef       	ldi	r24, 0xFF	; 255
    5704:	9f ef       	ldi	r25, 0xFF	; 255
    5706:	02 c0       	rjmp	.+4      	; 0x570c <puts+0x56>
    5708:	8d 2f       	mov	r24, r29
    570a:	9c 2f       	mov	r25, r28
    570c:	df 91       	pop	r29
    570e:	cf 91       	pop	r28
    5710:	1f 91       	pop	r17
    5712:	0f 91       	pop	r16
    5714:	08 95       	ret

00005716 <sprintf>:
    5716:	0f 93       	push	r16
    5718:	1f 93       	push	r17
    571a:	cf 93       	push	r28
    571c:	df 93       	push	r29
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
    5722:	2e 97       	sbiw	r28, 0x0e	; 14
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	f8 94       	cli
    5728:	de bf       	out	0x3e, r29	; 62
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	cd bf       	out	0x3d, r28	; 61
    572e:	0e 89       	ldd	r16, Y+22	; 0x16
    5730:	1f 89       	ldd	r17, Y+23	; 0x17
    5732:	86 e0       	ldi	r24, 0x06	; 6
    5734:	8c 83       	std	Y+4, r24	; 0x04
    5736:	1a 83       	std	Y+2, r17	; 0x02
    5738:	09 83       	std	Y+1, r16	; 0x01
    573a:	8f ef       	ldi	r24, 0xFF	; 255
    573c:	9f e7       	ldi	r25, 0x7F	; 127
    573e:	9e 83       	std	Y+6, r25	; 0x06
    5740:	8d 83       	std	Y+5, r24	; 0x05
    5742:	ae 01       	movw	r20, r28
    5744:	46 5e       	subi	r20, 0xE6	; 230
    5746:	5f 4f       	sbci	r21, 0xFF	; 255
    5748:	68 8d       	ldd	r22, Y+24	; 0x18
    574a:	79 8d       	ldd	r23, Y+25	; 0x19
    574c:	ce 01       	movw	r24, r28
    574e:	01 96       	adiw	r24, 0x01	; 1
    5750:	10 d0       	rcall	.+32     	; 0x5772 <vfprintf>
    5752:	ef 81       	ldd	r30, Y+7	; 0x07
    5754:	f8 85       	ldd	r31, Y+8	; 0x08
    5756:	e0 0f       	add	r30, r16
    5758:	f1 1f       	adc	r31, r17
    575a:	10 82       	st	Z, r1
    575c:	2e 96       	adiw	r28, 0x0e	; 14
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	cd bf       	out	0x3d, r28	; 61
    5768:	df 91       	pop	r29
    576a:	cf 91       	pop	r28
    576c:	1f 91       	pop	r17
    576e:	0f 91       	pop	r16
    5770:	08 95       	ret

00005772 <vfprintf>:
    5772:	2f 92       	push	r2
    5774:	3f 92       	push	r3
    5776:	4f 92       	push	r4
    5778:	5f 92       	push	r5
    577a:	6f 92       	push	r6
    577c:	7f 92       	push	r7
    577e:	8f 92       	push	r8
    5780:	9f 92       	push	r9
    5782:	af 92       	push	r10
    5784:	bf 92       	push	r11
    5786:	cf 92       	push	r12
    5788:	df 92       	push	r13
    578a:	ef 92       	push	r14
    578c:	ff 92       	push	r15
    578e:	0f 93       	push	r16
    5790:	1f 93       	push	r17
    5792:	cf 93       	push	r28
    5794:	df 93       	push	r29
    5796:	cd b7       	in	r28, 0x3d	; 61
    5798:	de b7       	in	r29, 0x3e	; 62
    579a:	2b 97       	sbiw	r28, 0x0b	; 11
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	f8 94       	cli
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	0f be       	out	0x3f, r0	; 63
    57a4:	cd bf       	out	0x3d, r28	; 61
    57a6:	6c 01       	movw	r12, r24
    57a8:	7b 01       	movw	r14, r22
    57aa:	8a 01       	movw	r16, r20
    57ac:	fc 01       	movw	r30, r24
    57ae:	17 82       	std	Z+7, r1	; 0x07
    57b0:	16 82       	std	Z+6, r1	; 0x06
    57b2:	83 81       	ldd	r24, Z+3	; 0x03
    57b4:	81 ff       	sbrs	r24, 1
    57b6:	bf c1       	rjmp	.+894    	; 0x5b36 <vfprintf+0x3c4>
    57b8:	ce 01       	movw	r24, r28
    57ba:	01 96       	adiw	r24, 0x01	; 1
    57bc:	3c 01       	movw	r6, r24
    57be:	f6 01       	movw	r30, r12
    57c0:	93 81       	ldd	r25, Z+3	; 0x03
    57c2:	f7 01       	movw	r30, r14
    57c4:	93 fd       	sbrc	r25, 3
    57c6:	85 91       	lpm	r24, Z+
    57c8:	93 ff       	sbrs	r25, 3
    57ca:	81 91       	ld	r24, Z+
    57cc:	7f 01       	movw	r14, r30
    57ce:	88 23       	and	r24, r24
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <vfprintf+0x62>
    57d2:	ad c1       	rjmp	.+858    	; 0x5b2e <vfprintf+0x3bc>
    57d4:	85 32       	cpi	r24, 0x25	; 37
    57d6:	39 f4       	brne	.+14     	; 0x57e6 <vfprintf+0x74>
    57d8:	93 fd       	sbrc	r25, 3
    57da:	85 91       	lpm	r24, Z+
    57dc:	93 ff       	sbrs	r25, 3
    57de:	81 91       	ld	r24, Z+
    57e0:	7f 01       	movw	r14, r30
    57e2:	85 32       	cpi	r24, 0x25	; 37
    57e4:	21 f4       	brne	.+8      	; 0x57ee <vfprintf+0x7c>
    57e6:	b6 01       	movw	r22, r12
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	d6 d1       	rcall	.+940    	; 0x5b98 <fputc>
    57ec:	e8 cf       	rjmp	.-48     	; 0x57be <vfprintf+0x4c>
    57ee:	91 2c       	mov	r9, r1
    57f0:	21 2c       	mov	r2, r1
    57f2:	31 2c       	mov	r3, r1
    57f4:	ff e1       	ldi	r31, 0x1F	; 31
    57f6:	f3 15       	cp	r31, r3
    57f8:	d8 f0       	brcs	.+54     	; 0x5830 <vfprintf+0xbe>
    57fa:	8b 32       	cpi	r24, 0x2B	; 43
    57fc:	79 f0       	breq	.+30     	; 0x581c <vfprintf+0xaa>
    57fe:	38 f4       	brcc	.+14     	; 0x580e <vfprintf+0x9c>
    5800:	80 32       	cpi	r24, 0x20	; 32
    5802:	79 f0       	breq	.+30     	; 0x5822 <vfprintf+0xb0>
    5804:	83 32       	cpi	r24, 0x23	; 35
    5806:	a1 f4       	brne	.+40     	; 0x5830 <vfprintf+0xbe>
    5808:	23 2d       	mov	r18, r3
    580a:	20 61       	ori	r18, 0x10	; 16
    580c:	1d c0       	rjmp	.+58     	; 0x5848 <vfprintf+0xd6>
    580e:	8d 32       	cpi	r24, 0x2D	; 45
    5810:	61 f0       	breq	.+24     	; 0x582a <vfprintf+0xb8>
    5812:	80 33       	cpi	r24, 0x30	; 48
    5814:	69 f4       	brne	.+26     	; 0x5830 <vfprintf+0xbe>
    5816:	23 2d       	mov	r18, r3
    5818:	21 60       	ori	r18, 0x01	; 1
    581a:	16 c0       	rjmp	.+44     	; 0x5848 <vfprintf+0xd6>
    581c:	83 2d       	mov	r24, r3
    581e:	82 60       	ori	r24, 0x02	; 2
    5820:	38 2e       	mov	r3, r24
    5822:	e3 2d       	mov	r30, r3
    5824:	e4 60       	ori	r30, 0x04	; 4
    5826:	3e 2e       	mov	r3, r30
    5828:	2a c0       	rjmp	.+84     	; 0x587e <vfprintf+0x10c>
    582a:	f3 2d       	mov	r31, r3
    582c:	f8 60       	ori	r31, 0x08	; 8
    582e:	1d c0       	rjmp	.+58     	; 0x586a <vfprintf+0xf8>
    5830:	37 fc       	sbrc	r3, 7
    5832:	2d c0       	rjmp	.+90     	; 0x588e <vfprintf+0x11c>
    5834:	20 ed       	ldi	r18, 0xD0	; 208
    5836:	28 0f       	add	r18, r24
    5838:	2a 30       	cpi	r18, 0x0A	; 10
    583a:	40 f0       	brcs	.+16     	; 0x584c <vfprintf+0xda>
    583c:	8e 32       	cpi	r24, 0x2E	; 46
    583e:	b9 f4       	brne	.+46     	; 0x586e <vfprintf+0xfc>
    5840:	36 fc       	sbrc	r3, 6
    5842:	75 c1       	rjmp	.+746    	; 0x5b2e <vfprintf+0x3bc>
    5844:	23 2d       	mov	r18, r3
    5846:	20 64       	ori	r18, 0x40	; 64
    5848:	32 2e       	mov	r3, r18
    584a:	19 c0       	rjmp	.+50     	; 0x587e <vfprintf+0x10c>
    584c:	36 fe       	sbrs	r3, 6
    584e:	06 c0       	rjmp	.+12     	; 0x585c <vfprintf+0xea>
    5850:	8a e0       	ldi	r24, 0x0A	; 10
    5852:	98 9e       	mul	r9, r24
    5854:	20 0d       	add	r18, r0
    5856:	11 24       	eor	r1, r1
    5858:	92 2e       	mov	r9, r18
    585a:	11 c0       	rjmp	.+34     	; 0x587e <vfprintf+0x10c>
    585c:	ea e0       	ldi	r30, 0x0A	; 10
    585e:	2e 9e       	mul	r2, r30
    5860:	20 0d       	add	r18, r0
    5862:	11 24       	eor	r1, r1
    5864:	22 2e       	mov	r2, r18
    5866:	f3 2d       	mov	r31, r3
    5868:	f0 62       	ori	r31, 0x20	; 32
    586a:	3f 2e       	mov	r3, r31
    586c:	08 c0       	rjmp	.+16     	; 0x587e <vfprintf+0x10c>
    586e:	8c 36       	cpi	r24, 0x6C	; 108
    5870:	21 f4       	brne	.+8      	; 0x587a <vfprintf+0x108>
    5872:	83 2d       	mov	r24, r3
    5874:	80 68       	ori	r24, 0x80	; 128
    5876:	38 2e       	mov	r3, r24
    5878:	02 c0       	rjmp	.+4      	; 0x587e <vfprintf+0x10c>
    587a:	88 36       	cpi	r24, 0x68	; 104
    587c:	41 f4       	brne	.+16     	; 0x588e <vfprintf+0x11c>
    587e:	f7 01       	movw	r30, r14
    5880:	93 fd       	sbrc	r25, 3
    5882:	85 91       	lpm	r24, Z+
    5884:	93 ff       	sbrs	r25, 3
    5886:	81 91       	ld	r24, Z+
    5888:	7f 01       	movw	r14, r30
    588a:	81 11       	cpse	r24, r1
    588c:	b3 cf       	rjmp	.-154    	; 0x57f4 <vfprintf+0x82>
    588e:	98 2f       	mov	r25, r24
    5890:	9f 7d       	andi	r25, 0xDF	; 223
    5892:	95 54       	subi	r25, 0x45	; 69
    5894:	93 30       	cpi	r25, 0x03	; 3
    5896:	28 f4       	brcc	.+10     	; 0x58a2 <vfprintf+0x130>
    5898:	0c 5f       	subi	r16, 0xFC	; 252
    589a:	1f 4f       	sbci	r17, 0xFF	; 255
    589c:	9f e3       	ldi	r25, 0x3F	; 63
    589e:	99 83       	std	Y+1, r25	; 0x01
    58a0:	0d c0       	rjmp	.+26     	; 0x58bc <vfprintf+0x14a>
    58a2:	83 36       	cpi	r24, 0x63	; 99
    58a4:	31 f0       	breq	.+12     	; 0x58b2 <vfprintf+0x140>
    58a6:	83 37       	cpi	r24, 0x73	; 115
    58a8:	71 f0       	breq	.+28     	; 0x58c6 <vfprintf+0x154>
    58aa:	83 35       	cpi	r24, 0x53	; 83
    58ac:	09 f0       	breq	.+2      	; 0x58b0 <vfprintf+0x13e>
    58ae:	55 c0       	rjmp	.+170    	; 0x595a <vfprintf+0x1e8>
    58b0:	20 c0       	rjmp	.+64     	; 0x58f2 <vfprintf+0x180>
    58b2:	f8 01       	movw	r30, r16
    58b4:	80 81       	ld	r24, Z
    58b6:	89 83       	std	Y+1, r24	; 0x01
    58b8:	0e 5f       	subi	r16, 0xFE	; 254
    58ba:	1f 4f       	sbci	r17, 0xFF	; 255
    58bc:	88 24       	eor	r8, r8
    58be:	83 94       	inc	r8
    58c0:	91 2c       	mov	r9, r1
    58c2:	53 01       	movw	r10, r6
    58c4:	12 c0       	rjmp	.+36     	; 0x58ea <vfprintf+0x178>
    58c6:	28 01       	movw	r4, r16
    58c8:	f2 e0       	ldi	r31, 0x02	; 2
    58ca:	4f 0e       	add	r4, r31
    58cc:	51 1c       	adc	r5, r1
    58ce:	f8 01       	movw	r30, r16
    58d0:	a0 80       	ld	r10, Z
    58d2:	b1 80       	ldd	r11, Z+1	; 0x01
    58d4:	36 fe       	sbrs	r3, 6
    58d6:	03 c0       	rjmp	.+6      	; 0x58de <vfprintf+0x16c>
    58d8:	69 2d       	mov	r22, r9
    58da:	70 e0       	ldi	r23, 0x00	; 0
    58dc:	02 c0       	rjmp	.+4      	; 0x58e2 <vfprintf+0x170>
    58de:	6f ef       	ldi	r22, 0xFF	; 255
    58e0:	7f ef       	ldi	r23, 0xFF	; 255
    58e2:	c5 01       	movw	r24, r10
    58e4:	4e d1       	rcall	.+668    	; 0x5b82 <strnlen>
    58e6:	4c 01       	movw	r8, r24
    58e8:	82 01       	movw	r16, r4
    58ea:	f3 2d       	mov	r31, r3
    58ec:	ff 77       	andi	r31, 0x7F	; 127
    58ee:	3f 2e       	mov	r3, r31
    58f0:	15 c0       	rjmp	.+42     	; 0x591c <vfprintf+0x1aa>
    58f2:	28 01       	movw	r4, r16
    58f4:	22 e0       	ldi	r18, 0x02	; 2
    58f6:	42 0e       	add	r4, r18
    58f8:	51 1c       	adc	r5, r1
    58fa:	f8 01       	movw	r30, r16
    58fc:	a0 80       	ld	r10, Z
    58fe:	b1 80       	ldd	r11, Z+1	; 0x01
    5900:	36 fe       	sbrs	r3, 6
    5902:	03 c0       	rjmp	.+6      	; 0x590a <vfprintf+0x198>
    5904:	69 2d       	mov	r22, r9
    5906:	70 e0       	ldi	r23, 0x00	; 0
    5908:	02 c0       	rjmp	.+4      	; 0x590e <vfprintf+0x19c>
    590a:	6f ef       	ldi	r22, 0xFF	; 255
    590c:	7f ef       	ldi	r23, 0xFF	; 255
    590e:	c5 01       	movw	r24, r10
    5910:	2d d1       	rcall	.+602    	; 0x5b6c <strnlen_P>
    5912:	4c 01       	movw	r8, r24
    5914:	f3 2d       	mov	r31, r3
    5916:	f0 68       	ori	r31, 0x80	; 128
    5918:	3f 2e       	mov	r3, r31
    591a:	82 01       	movw	r16, r4
    591c:	33 fc       	sbrc	r3, 3
    591e:	19 c0       	rjmp	.+50     	; 0x5952 <vfprintf+0x1e0>
    5920:	82 2d       	mov	r24, r2
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	88 16       	cp	r8, r24
    5926:	99 06       	cpc	r9, r25
    5928:	a0 f4       	brcc	.+40     	; 0x5952 <vfprintf+0x1e0>
    592a:	b6 01       	movw	r22, r12
    592c:	80 e2       	ldi	r24, 0x20	; 32
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	33 d1       	rcall	.+614    	; 0x5b98 <fputc>
    5932:	2a 94       	dec	r2
    5934:	f5 cf       	rjmp	.-22     	; 0x5920 <vfprintf+0x1ae>
    5936:	f5 01       	movw	r30, r10
    5938:	37 fc       	sbrc	r3, 7
    593a:	85 91       	lpm	r24, Z+
    593c:	37 fe       	sbrs	r3, 7
    593e:	81 91       	ld	r24, Z+
    5940:	5f 01       	movw	r10, r30
    5942:	b6 01       	movw	r22, r12
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	28 d1       	rcall	.+592    	; 0x5b98 <fputc>
    5948:	21 10       	cpse	r2, r1
    594a:	2a 94       	dec	r2
    594c:	21 e0       	ldi	r18, 0x01	; 1
    594e:	82 1a       	sub	r8, r18
    5950:	91 08       	sbc	r9, r1
    5952:	81 14       	cp	r8, r1
    5954:	91 04       	cpc	r9, r1
    5956:	79 f7       	brne	.-34     	; 0x5936 <vfprintf+0x1c4>
    5958:	e1 c0       	rjmp	.+450    	; 0x5b1c <vfprintf+0x3aa>
    595a:	84 36       	cpi	r24, 0x64	; 100
    595c:	11 f0       	breq	.+4      	; 0x5962 <vfprintf+0x1f0>
    595e:	89 36       	cpi	r24, 0x69	; 105
    5960:	39 f5       	brne	.+78     	; 0x59b0 <vfprintf+0x23e>
    5962:	f8 01       	movw	r30, r16
    5964:	37 fe       	sbrs	r3, 7
    5966:	07 c0       	rjmp	.+14     	; 0x5976 <vfprintf+0x204>
    5968:	60 81       	ld	r22, Z
    596a:	71 81       	ldd	r23, Z+1	; 0x01
    596c:	82 81       	ldd	r24, Z+2	; 0x02
    596e:	93 81       	ldd	r25, Z+3	; 0x03
    5970:	0c 5f       	subi	r16, 0xFC	; 252
    5972:	1f 4f       	sbci	r17, 0xFF	; 255
    5974:	08 c0       	rjmp	.+16     	; 0x5986 <vfprintf+0x214>
    5976:	60 81       	ld	r22, Z
    5978:	71 81       	ldd	r23, Z+1	; 0x01
    597a:	07 2e       	mov	r0, r23
    597c:	00 0c       	add	r0, r0
    597e:	88 0b       	sbc	r24, r24
    5980:	99 0b       	sbc	r25, r25
    5982:	0e 5f       	subi	r16, 0xFE	; 254
    5984:	1f 4f       	sbci	r17, 0xFF	; 255
    5986:	f3 2d       	mov	r31, r3
    5988:	ff 76       	andi	r31, 0x6F	; 111
    598a:	3f 2e       	mov	r3, r31
    598c:	97 ff       	sbrs	r25, 7
    598e:	09 c0       	rjmp	.+18     	; 0x59a2 <vfprintf+0x230>
    5990:	90 95       	com	r25
    5992:	80 95       	com	r24
    5994:	70 95       	com	r23
    5996:	61 95       	neg	r22
    5998:	7f 4f       	sbci	r23, 0xFF	; 255
    599a:	8f 4f       	sbci	r24, 0xFF	; 255
    599c:	9f 4f       	sbci	r25, 0xFF	; 255
    599e:	f0 68       	ori	r31, 0x80	; 128
    59a0:	3f 2e       	mov	r3, r31
    59a2:	2a e0       	ldi	r18, 0x0A	; 10
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	a3 01       	movw	r20, r6
    59a8:	33 d1       	rcall	.+614    	; 0x5c10 <__ultoa_invert>
    59aa:	88 2e       	mov	r8, r24
    59ac:	86 18       	sub	r8, r6
    59ae:	44 c0       	rjmp	.+136    	; 0x5a38 <vfprintf+0x2c6>
    59b0:	85 37       	cpi	r24, 0x75	; 117
    59b2:	31 f4       	brne	.+12     	; 0x59c0 <vfprintf+0x24e>
    59b4:	23 2d       	mov	r18, r3
    59b6:	2f 7e       	andi	r18, 0xEF	; 239
    59b8:	b2 2e       	mov	r11, r18
    59ba:	2a e0       	ldi	r18, 0x0A	; 10
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	25 c0       	rjmp	.+74     	; 0x5a0a <vfprintf+0x298>
    59c0:	93 2d       	mov	r25, r3
    59c2:	99 7f       	andi	r25, 0xF9	; 249
    59c4:	b9 2e       	mov	r11, r25
    59c6:	8f 36       	cpi	r24, 0x6F	; 111
    59c8:	c1 f0       	breq	.+48     	; 0x59fa <vfprintf+0x288>
    59ca:	18 f4       	brcc	.+6      	; 0x59d2 <vfprintf+0x260>
    59cc:	88 35       	cpi	r24, 0x58	; 88
    59ce:	79 f0       	breq	.+30     	; 0x59ee <vfprintf+0x27c>
    59d0:	ae c0       	rjmp	.+348    	; 0x5b2e <vfprintf+0x3bc>
    59d2:	80 37       	cpi	r24, 0x70	; 112
    59d4:	19 f0       	breq	.+6      	; 0x59dc <vfprintf+0x26a>
    59d6:	88 37       	cpi	r24, 0x78	; 120
    59d8:	21 f0       	breq	.+8      	; 0x59e2 <vfprintf+0x270>
    59da:	a9 c0       	rjmp	.+338    	; 0x5b2e <vfprintf+0x3bc>
    59dc:	e9 2f       	mov	r30, r25
    59de:	e0 61       	ori	r30, 0x10	; 16
    59e0:	be 2e       	mov	r11, r30
    59e2:	b4 fe       	sbrs	r11, 4
    59e4:	0d c0       	rjmp	.+26     	; 0x5a00 <vfprintf+0x28e>
    59e6:	fb 2d       	mov	r31, r11
    59e8:	f4 60       	ori	r31, 0x04	; 4
    59ea:	bf 2e       	mov	r11, r31
    59ec:	09 c0       	rjmp	.+18     	; 0x5a00 <vfprintf+0x28e>
    59ee:	34 fe       	sbrs	r3, 4
    59f0:	0a c0       	rjmp	.+20     	; 0x5a06 <vfprintf+0x294>
    59f2:	29 2f       	mov	r18, r25
    59f4:	26 60       	ori	r18, 0x06	; 6
    59f6:	b2 2e       	mov	r11, r18
    59f8:	06 c0       	rjmp	.+12     	; 0x5a06 <vfprintf+0x294>
    59fa:	28 e0       	ldi	r18, 0x08	; 8
    59fc:	30 e0       	ldi	r19, 0x00	; 0
    59fe:	05 c0       	rjmp	.+10     	; 0x5a0a <vfprintf+0x298>
    5a00:	20 e1       	ldi	r18, 0x10	; 16
    5a02:	30 e0       	ldi	r19, 0x00	; 0
    5a04:	02 c0       	rjmp	.+4      	; 0x5a0a <vfprintf+0x298>
    5a06:	20 e1       	ldi	r18, 0x10	; 16
    5a08:	32 e0       	ldi	r19, 0x02	; 2
    5a0a:	f8 01       	movw	r30, r16
    5a0c:	b7 fe       	sbrs	r11, 7
    5a0e:	07 c0       	rjmp	.+14     	; 0x5a1e <vfprintf+0x2ac>
    5a10:	60 81       	ld	r22, Z
    5a12:	71 81       	ldd	r23, Z+1	; 0x01
    5a14:	82 81       	ldd	r24, Z+2	; 0x02
    5a16:	93 81       	ldd	r25, Z+3	; 0x03
    5a18:	0c 5f       	subi	r16, 0xFC	; 252
    5a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a1c:	06 c0       	rjmp	.+12     	; 0x5a2a <vfprintf+0x2b8>
    5a1e:	60 81       	ld	r22, Z
    5a20:	71 81       	ldd	r23, Z+1	; 0x01
    5a22:	80 e0       	ldi	r24, 0x00	; 0
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	0e 5f       	subi	r16, 0xFE	; 254
    5a28:	1f 4f       	sbci	r17, 0xFF	; 255
    5a2a:	a3 01       	movw	r20, r6
    5a2c:	f1 d0       	rcall	.+482    	; 0x5c10 <__ultoa_invert>
    5a2e:	88 2e       	mov	r8, r24
    5a30:	86 18       	sub	r8, r6
    5a32:	fb 2d       	mov	r31, r11
    5a34:	ff 77       	andi	r31, 0x7F	; 127
    5a36:	3f 2e       	mov	r3, r31
    5a38:	36 fe       	sbrs	r3, 6
    5a3a:	0d c0       	rjmp	.+26     	; 0x5a56 <vfprintf+0x2e4>
    5a3c:	23 2d       	mov	r18, r3
    5a3e:	2e 7f       	andi	r18, 0xFE	; 254
    5a40:	a2 2e       	mov	r10, r18
    5a42:	89 14       	cp	r8, r9
    5a44:	58 f4       	brcc	.+22     	; 0x5a5c <vfprintf+0x2ea>
    5a46:	34 fe       	sbrs	r3, 4
    5a48:	0b c0       	rjmp	.+22     	; 0x5a60 <vfprintf+0x2ee>
    5a4a:	32 fc       	sbrc	r3, 2
    5a4c:	09 c0       	rjmp	.+18     	; 0x5a60 <vfprintf+0x2ee>
    5a4e:	83 2d       	mov	r24, r3
    5a50:	8e 7e       	andi	r24, 0xEE	; 238
    5a52:	a8 2e       	mov	r10, r24
    5a54:	05 c0       	rjmp	.+10     	; 0x5a60 <vfprintf+0x2ee>
    5a56:	b8 2c       	mov	r11, r8
    5a58:	a3 2c       	mov	r10, r3
    5a5a:	03 c0       	rjmp	.+6      	; 0x5a62 <vfprintf+0x2f0>
    5a5c:	b8 2c       	mov	r11, r8
    5a5e:	01 c0       	rjmp	.+2      	; 0x5a62 <vfprintf+0x2f0>
    5a60:	b9 2c       	mov	r11, r9
    5a62:	a4 fe       	sbrs	r10, 4
    5a64:	0f c0       	rjmp	.+30     	; 0x5a84 <vfprintf+0x312>
    5a66:	fe 01       	movw	r30, r28
    5a68:	e8 0d       	add	r30, r8
    5a6a:	f1 1d       	adc	r31, r1
    5a6c:	80 81       	ld	r24, Z
    5a6e:	80 33       	cpi	r24, 0x30	; 48
    5a70:	21 f4       	brne	.+8      	; 0x5a7a <vfprintf+0x308>
    5a72:	9a 2d       	mov	r25, r10
    5a74:	99 7e       	andi	r25, 0xE9	; 233
    5a76:	a9 2e       	mov	r10, r25
    5a78:	09 c0       	rjmp	.+18     	; 0x5a8c <vfprintf+0x31a>
    5a7a:	a2 fe       	sbrs	r10, 2
    5a7c:	06 c0       	rjmp	.+12     	; 0x5a8a <vfprintf+0x318>
    5a7e:	b3 94       	inc	r11
    5a80:	b3 94       	inc	r11
    5a82:	04 c0       	rjmp	.+8      	; 0x5a8c <vfprintf+0x31a>
    5a84:	8a 2d       	mov	r24, r10
    5a86:	86 78       	andi	r24, 0x86	; 134
    5a88:	09 f0       	breq	.+2      	; 0x5a8c <vfprintf+0x31a>
    5a8a:	b3 94       	inc	r11
    5a8c:	a3 fc       	sbrc	r10, 3
    5a8e:	10 c0       	rjmp	.+32     	; 0x5ab0 <vfprintf+0x33e>
    5a90:	a0 fe       	sbrs	r10, 0
    5a92:	06 c0       	rjmp	.+12     	; 0x5aa0 <vfprintf+0x32e>
    5a94:	b2 14       	cp	r11, r2
    5a96:	80 f4       	brcc	.+32     	; 0x5ab8 <vfprintf+0x346>
    5a98:	28 0c       	add	r2, r8
    5a9a:	92 2c       	mov	r9, r2
    5a9c:	9b 18       	sub	r9, r11
    5a9e:	0d c0       	rjmp	.+26     	; 0x5aba <vfprintf+0x348>
    5aa0:	b2 14       	cp	r11, r2
    5aa2:	58 f4       	brcc	.+22     	; 0x5aba <vfprintf+0x348>
    5aa4:	b6 01       	movw	r22, r12
    5aa6:	80 e2       	ldi	r24, 0x20	; 32
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	76 d0       	rcall	.+236    	; 0x5b98 <fputc>
    5aac:	b3 94       	inc	r11
    5aae:	f8 cf       	rjmp	.-16     	; 0x5aa0 <vfprintf+0x32e>
    5ab0:	b2 14       	cp	r11, r2
    5ab2:	18 f4       	brcc	.+6      	; 0x5aba <vfprintf+0x348>
    5ab4:	2b 18       	sub	r2, r11
    5ab6:	02 c0       	rjmp	.+4      	; 0x5abc <vfprintf+0x34a>
    5ab8:	98 2c       	mov	r9, r8
    5aba:	21 2c       	mov	r2, r1
    5abc:	a4 fe       	sbrs	r10, 4
    5abe:	0f c0       	rjmp	.+30     	; 0x5ade <vfprintf+0x36c>
    5ac0:	b6 01       	movw	r22, r12
    5ac2:	80 e3       	ldi	r24, 0x30	; 48
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	68 d0       	rcall	.+208    	; 0x5b98 <fputc>
    5ac8:	a2 fe       	sbrs	r10, 2
    5aca:	16 c0       	rjmp	.+44     	; 0x5af8 <vfprintf+0x386>
    5acc:	a1 fc       	sbrc	r10, 1
    5ace:	03 c0       	rjmp	.+6      	; 0x5ad6 <vfprintf+0x364>
    5ad0:	88 e7       	ldi	r24, 0x78	; 120
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	02 c0       	rjmp	.+4      	; 0x5ada <vfprintf+0x368>
    5ad6:	88 e5       	ldi	r24, 0x58	; 88
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	b6 01       	movw	r22, r12
    5adc:	0c c0       	rjmp	.+24     	; 0x5af6 <vfprintf+0x384>
    5ade:	8a 2d       	mov	r24, r10
    5ae0:	86 78       	andi	r24, 0x86	; 134
    5ae2:	51 f0       	breq	.+20     	; 0x5af8 <vfprintf+0x386>
    5ae4:	a1 fe       	sbrs	r10, 1
    5ae6:	02 c0       	rjmp	.+4      	; 0x5aec <vfprintf+0x37a>
    5ae8:	8b e2       	ldi	r24, 0x2B	; 43
    5aea:	01 c0       	rjmp	.+2      	; 0x5aee <vfprintf+0x37c>
    5aec:	80 e2       	ldi	r24, 0x20	; 32
    5aee:	a7 fc       	sbrc	r10, 7
    5af0:	8d e2       	ldi	r24, 0x2D	; 45
    5af2:	b6 01       	movw	r22, r12
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	50 d0       	rcall	.+160    	; 0x5b98 <fputc>
    5af8:	89 14       	cp	r8, r9
    5afa:	30 f4       	brcc	.+12     	; 0x5b08 <vfprintf+0x396>
    5afc:	b6 01       	movw	r22, r12
    5afe:	80 e3       	ldi	r24, 0x30	; 48
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	4a d0       	rcall	.+148    	; 0x5b98 <fputc>
    5b04:	9a 94       	dec	r9
    5b06:	f8 cf       	rjmp	.-16     	; 0x5af8 <vfprintf+0x386>
    5b08:	8a 94       	dec	r8
    5b0a:	f3 01       	movw	r30, r6
    5b0c:	e8 0d       	add	r30, r8
    5b0e:	f1 1d       	adc	r31, r1
    5b10:	80 81       	ld	r24, Z
    5b12:	b6 01       	movw	r22, r12
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	40 d0       	rcall	.+128    	; 0x5b98 <fputc>
    5b18:	81 10       	cpse	r8, r1
    5b1a:	f6 cf       	rjmp	.-20     	; 0x5b08 <vfprintf+0x396>
    5b1c:	22 20       	and	r2, r2
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <vfprintf+0x3b0>
    5b20:	4e ce       	rjmp	.-868    	; 0x57be <vfprintf+0x4c>
    5b22:	b6 01       	movw	r22, r12
    5b24:	80 e2       	ldi	r24, 0x20	; 32
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	37 d0       	rcall	.+110    	; 0x5b98 <fputc>
    5b2a:	2a 94       	dec	r2
    5b2c:	f7 cf       	rjmp	.-18     	; 0x5b1c <vfprintf+0x3aa>
    5b2e:	f6 01       	movw	r30, r12
    5b30:	86 81       	ldd	r24, Z+6	; 0x06
    5b32:	97 81       	ldd	r25, Z+7	; 0x07
    5b34:	02 c0       	rjmp	.+4      	; 0x5b3a <vfprintf+0x3c8>
    5b36:	8f ef       	ldi	r24, 0xFF	; 255
    5b38:	9f ef       	ldi	r25, 0xFF	; 255
    5b3a:	2b 96       	adiw	r28, 0x0b	; 11
    5b3c:	0f b6       	in	r0, 0x3f	; 63
    5b3e:	f8 94       	cli
    5b40:	de bf       	out	0x3e, r29	; 62
    5b42:	0f be       	out	0x3f, r0	; 63
    5b44:	cd bf       	out	0x3d, r28	; 61
    5b46:	df 91       	pop	r29
    5b48:	cf 91       	pop	r28
    5b4a:	1f 91       	pop	r17
    5b4c:	0f 91       	pop	r16
    5b4e:	ff 90       	pop	r15
    5b50:	ef 90       	pop	r14
    5b52:	df 90       	pop	r13
    5b54:	cf 90       	pop	r12
    5b56:	bf 90       	pop	r11
    5b58:	af 90       	pop	r10
    5b5a:	9f 90       	pop	r9
    5b5c:	8f 90       	pop	r8
    5b5e:	7f 90       	pop	r7
    5b60:	6f 90       	pop	r6
    5b62:	5f 90       	pop	r5
    5b64:	4f 90       	pop	r4
    5b66:	3f 90       	pop	r3
    5b68:	2f 90       	pop	r2
    5b6a:	08 95       	ret

00005b6c <strnlen_P>:
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	05 90       	lpm	r0, Z+
    5b70:	61 50       	subi	r22, 0x01	; 1
    5b72:	70 40       	sbci	r23, 0x00	; 0
    5b74:	01 10       	cpse	r0, r1
    5b76:	d8 f7       	brcc	.-10     	; 0x5b6e <strnlen_P+0x2>
    5b78:	80 95       	com	r24
    5b7a:	90 95       	com	r25
    5b7c:	8e 0f       	add	r24, r30
    5b7e:	9f 1f       	adc	r25, r31
    5b80:	08 95       	ret

00005b82 <strnlen>:
    5b82:	fc 01       	movw	r30, r24
    5b84:	61 50       	subi	r22, 0x01	; 1
    5b86:	70 40       	sbci	r23, 0x00	; 0
    5b88:	01 90       	ld	r0, Z+
    5b8a:	01 10       	cpse	r0, r1
    5b8c:	d8 f7       	brcc	.-10     	; 0x5b84 <strnlen+0x2>
    5b8e:	80 95       	com	r24
    5b90:	90 95       	com	r25
    5b92:	8e 0f       	add	r24, r30
    5b94:	9f 1f       	adc	r25, r31
    5b96:	08 95       	ret

00005b98 <fputc>:
    5b98:	0f 93       	push	r16
    5b9a:	1f 93       	push	r17
    5b9c:	cf 93       	push	r28
    5b9e:	df 93       	push	r29
    5ba0:	fb 01       	movw	r30, r22
    5ba2:	23 81       	ldd	r18, Z+3	; 0x03
    5ba4:	21 fd       	sbrc	r18, 1
    5ba6:	03 c0       	rjmp	.+6      	; 0x5bae <fputc+0x16>
    5ba8:	8f ef       	ldi	r24, 0xFF	; 255
    5baa:	9f ef       	ldi	r25, 0xFF	; 255
    5bac:	2c c0       	rjmp	.+88     	; 0x5c06 <fputc+0x6e>
    5bae:	22 ff       	sbrs	r18, 2
    5bb0:	16 c0       	rjmp	.+44     	; 0x5bde <fputc+0x46>
    5bb2:	46 81       	ldd	r20, Z+6	; 0x06
    5bb4:	57 81       	ldd	r21, Z+7	; 0x07
    5bb6:	24 81       	ldd	r18, Z+4	; 0x04
    5bb8:	35 81       	ldd	r19, Z+5	; 0x05
    5bba:	42 17       	cp	r20, r18
    5bbc:	53 07       	cpc	r21, r19
    5bbe:	44 f4       	brge	.+16     	; 0x5bd0 <fputc+0x38>
    5bc0:	a0 81       	ld	r26, Z
    5bc2:	b1 81       	ldd	r27, Z+1	; 0x01
    5bc4:	9d 01       	movw	r18, r26
    5bc6:	2f 5f       	subi	r18, 0xFF	; 255
    5bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bca:	31 83       	std	Z+1, r19	; 0x01
    5bcc:	20 83       	st	Z, r18
    5bce:	8c 93       	st	X, r24
    5bd0:	26 81       	ldd	r18, Z+6	; 0x06
    5bd2:	37 81       	ldd	r19, Z+7	; 0x07
    5bd4:	2f 5f       	subi	r18, 0xFF	; 255
    5bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bd8:	37 83       	std	Z+7, r19	; 0x07
    5bda:	26 83       	std	Z+6, r18	; 0x06
    5bdc:	14 c0       	rjmp	.+40     	; 0x5c06 <fputc+0x6e>
    5bde:	8b 01       	movw	r16, r22
    5be0:	ec 01       	movw	r28, r24
    5be2:	fb 01       	movw	r30, r22
    5be4:	00 84       	ldd	r0, Z+8	; 0x08
    5be6:	f1 85       	ldd	r31, Z+9	; 0x09
    5be8:	e0 2d       	mov	r30, r0
    5bea:	19 95       	eicall
    5bec:	89 2b       	or	r24, r25
    5bee:	e1 f6       	brne	.-72     	; 0x5ba8 <fputc+0x10>
    5bf0:	d8 01       	movw	r26, r16
    5bf2:	16 96       	adiw	r26, 0x06	; 6
    5bf4:	8d 91       	ld	r24, X+
    5bf6:	9c 91       	ld	r25, X
    5bf8:	17 97       	sbiw	r26, 0x07	; 7
    5bfa:	01 96       	adiw	r24, 0x01	; 1
    5bfc:	17 96       	adiw	r26, 0x07	; 7
    5bfe:	9c 93       	st	X, r25
    5c00:	8e 93       	st	-X, r24
    5c02:	16 97       	sbiw	r26, 0x06	; 6
    5c04:	ce 01       	movw	r24, r28
    5c06:	df 91       	pop	r29
    5c08:	cf 91       	pop	r28
    5c0a:	1f 91       	pop	r17
    5c0c:	0f 91       	pop	r16
    5c0e:	08 95       	ret

00005c10 <__ultoa_invert>:
    5c10:	fa 01       	movw	r30, r20
    5c12:	aa 27       	eor	r26, r26
    5c14:	28 30       	cpi	r18, 0x08	; 8
    5c16:	51 f1       	breq	.+84     	; 0x5c6c <__ultoa_invert+0x5c>
    5c18:	20 31       	cpi	r18, 0x10	; 16
    5c1a:	81 f1       	breq	.+96     	; 0x5c7c <__ultoa_invert+0x6c>
    5c1c:	e8 94       	clt
    5c1e:	6f 93       	push	r22
    5c20:	6e 7f       	andi	r22, 0xFE	; 254
    5c22:	6e 5f       	subi	r22, 0xFE	; 254
    5c24:	7f 4f       	sbci	r23, 0xFF	; 255
    5c26:	8f 4f       	sbci	r24, 0xFF	; 255
    5c28:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2a:	af 4f       	sbci	r26, 0xFF	; 255
    5c2c:	b1 e0       	ldi	r27, 0x01	; 1
    5c2e:	3e d0       	rcall	.+124    	; 0x5cac <__ultoa_invert+0x9c>
    5c30:	b4 e0       	ldi	r27, 0x04	; 4
    5c32:	3c d0       	rcall	.+120    	; 0x5cac <__ultoa_invert+0x9c>
    5c34:	67 0f       	add	r22, r23
    5c36:	78 1f       	adc	r23, r24
    5c38:	89 1f       	adc	r24, r25
    5c3a:	9a 1f       	adc	r25, r26
    5c3c:	a1 1d       	adc	r26, r1
    5c3e:	68 0f       	add	r22, r24
    5c40:	79 1f       	adc	r23, r25
    5c42:	8a 1f       	adc	r24, r26
    5c44:	91 1d       	adc	r25, r1
    5c46:	a1 1d       	adc	r26, r1
    5c48:	6a 0f       	add	r22, r26
    5c4a:	71 1d       	adc	r23, r1
    5c4c:	81 1d       	adc	r24, r1
    5c4e:	91 1d       	adc	r25, r1
    5c50:	a1 1d       	adc	r26, r1
    5c52:	20 d0       	rcall	.+64     	; 0x5c94 <__ultoa_invert+0x84>
    5c54:	09 f4       	brne	.+2      	; 0x5c58 <__ultoa_invert+0x48>
    5c56:	68 94       	set
    5c58:	3f 91       	pop	r19
    5c5a:	2a e0       	ldi	r18, 0x0A	; 10
    5c5c:	26 9f       	mul	r18, r22
    5c5e:	11 24       	eor	r1, r1
    5c60:	30 19       	sub	r19, r0
    5c62:	30 5d       	subi	r19, 0xD0	; 208
    5c64:	31 93       	st	Z+, r19
    5c66:	de f6       	brtc	.-74     	; 0x5c1e <__ultoa_invert+0xe>
    5c68:	cf 01       	movw	r24, r30
    5c6a:	08 95       	ret
    5c6c:	46 2f       	mov	r20, r22
    5c6e:	47 70       	andi	r20, 0x07	; 7
    5c70:	40 5d       	subi	r20, 0xD0	; 208
    5c72:	41 93       	st	Z+, r20
    5c74:	b3 e0       	ldi	r27, 0x03	; 3
    5c76:	0f d0       	rcall	.+30     	; 0x5c96 <__ultoa_invert+0x86>
    5c78:	c9 f7       	brne	.-14     	; 0x5c6c <__ultoa_invert+0x5c>
    5c7a:	f6 cf       	rjmp	.-20     	; 0x5c68 <__ultoa_invert+0x58>
    5c7c:	46 2f       	mov	r20, r22
    5c7e:	4f 70       	andi	r20, 0x0F	; 15
    5c80:	40 5d       	subi	r20, 0xD0	; 208
    5c82:	4a 33       	cpi	r20, 0x3A	; 58
    5c84:	18 f0       	brcs	.+6      	; 0x5c8c <__ultoa_invert+0x7c>
    5c86:	49 5d       	subi	r20, 0xD9	; 217
    5c88:	31 fd       	sbrc	r19, 1
    5c8a:	40 52       	subi	r20, 0x20	; 32
    5c8c:	41 93       	st	Z+, r20
    5c8e:	02 d0       	rcall	.+4      	; 0x5c94 <__ultoa_invert+0x84>
    5c90:	a9 f7       	brne	.-22     	; 0x5c7c <__ultoa_invert+0x6c>
    5c92:	ea cf       	rjmp	.-44     	; 0x5c68 <__ultoa_invert+0x58>
    5c94:	b4 e0       	ldi	r27, 0x04	; 4
    5c96:	a6 95       	lsr	r26
    5c98:	97 95       	ror	r25
    5c9a:	87 95       	ror	r24
    5c9c:	77 95       	ror	r23
    5c9e:	67 95       	ror	r22
    5ca0:	ba 95       	dec	r27
    5ca2:	c9 f7       	brne	.-14     	; 0x5c96 <__ultoa_invert+0x86>
    5ca4:	00 97       	sbiw	r24, 0x00	; 0
    5ca6:	61 05       	cpc	r22, r1
    5ca8:	71 05       	cpc	r23, r1
    5caa:	08 95       	ret
    5cac:	9b 01       	movw	r18, r22
    5cae:	ac 01       	movw	r20, r24
    5cb0:	0a 2e       	mov	r0, r26
    5cb2:	06 94       	lsr	r0
    5cb4:	57 95       	ror	r21
    5cb6:	47 95       	ror	r20
    5cb8:	37 95       	ror	r19
    5cba:	27 95       	ror	r18
    5cbc:	ba 95       	dec	r27
    5cbe:	c9 f7       	brne	.-14     	; 0x5cb2 <__ultoa_invert+0xa2>
    5cc0:	62 0f       	add	r22, r18
    5cc2:	73 1f       	adc	r23, r19
    5cc4:	84 1f       	adc	r24, r20
    5cc6:	95 1f       	adc	r25, r21
    5cc8:	a0 1d       	adc	r26, r0
    5cca:	08 95       	ret

00005ccc <_exit>:
    5ccc:	f8 94       	cli

00005cce <__stop_program>:
    5cce:	ff cf       	rjmp	.-2      	; 0x5cce <__stop_program>
