
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000616  00800200  000068ce  00006962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000068ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001061  00800816  00800816  00006f78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c10  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e8b9  00000000  00000000  00007c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b23  00000000  00000000  000164dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071e7  00000000  00000000  0001a000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002960  00000000  00000000  000211e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045df  00000000  00000000  00023b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c5bd  00000000  00000000  00028127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  000346e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	86 c7       	rjmp	.+3852   	; 0xf3e <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__vector_25>
      68:	0c 94 42 28 	jmp	0x5084	; 0x5084 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 86 28 	jmp	0x510c	; 0x510c <__vector_36>
      94:	0c 94 d8 28 	jmp	0x51b0	; 0x51b0 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 23 2d 	jmp	0x5a46	; 0x5a46 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1c 29 	jmp	0x5238	; 0x5238 <__vector_51>
      d0:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__vector_54>
      dc:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b 1d       	adc	r21, r11
      e6:	5b 1d       	adc	r21, r11
      e8:	5b 1d       	adc	r21, r11
      ea:	92 1d       	adc	r25, r2
      ec:	9a 1d       	adc	r25, r10
      ee:	af 1d       	adc	r26, r15
      f0:	5b 1d       	adc	r21, r11
      f2:	5b 1d       	adc	r21, r11
      f4:	92 1d       	adc	r25, r2
      f6:	9a 1d       	adc	r25, r10
      f8:	45 2d       	mov	r20, r5
      fa:	b5 2d       	mov	r27, r5
      fc:	b5 2d       	mov	r27, r5
      fe:	b5 2d       	mov	r27, r5
     100:	b5 2d       	mov	r27, r5
     102:	b5 2d       	mov	r27, r5
     104:	b5 2d       	mov	r27, r5
     106:	b5 2d       	mov	r27, r5
     108:	45 2d       	mov	r20, r5
     10a:	b5 2d       	mov	r27, r5
     10c:	b5 2d       	mov	r27, r5
     10e:	b5 2d       	mov	r27, r5
     110:	b5 2d       	mov	r27, r5
     112:	b5 2d       	mov	r27, r5
     114:	b5 2d       	mov	r27, r5
     116:	b5 2d       	mov	r27, r5
     118:	47 2d       	mov	r20, r7
     11a:	b5 2d       	mov	r27, r5
     11c:	b5 2d       	mov	r27, r5
     11e:	b5 2d       	mov	r27, r5
     120:	b5 2d       	mov	r27, r5
     122:	b5 2d       	mov	r27, r5
     124:	b5 2d       	mov	r27, r5
     126:	b5 2d       	mov	r27, r5
     128:	b5 2d       	mov	r27, r5
     12a:	b5 2d       	mov	r27, r5
     12c:	b5 2d       	mov	r27, r5
     12e:	b5 2d       	mov	r27, r5
     130:	b5 2d       	mov	r27, r5
     132:	b5 2d       	mov	r27, r5
     134:	b5 2d       	mov	r27, r5
     136:	b5 2d       	mov	r27, r5
     138:	47 2d       	mov	r20, r7
     13a:	b5 2d       	mov	r27, r5
     13c:	b5 2d       	mov	r27, r5
     13e:	b5 2d       	mov	r27, r5
     140:	b5 2d       	mov	r27, r5
     142:	b5 2d       	mov	r27, r5
     144:	b5 2d       	mov	r27, r5
     146:	b5 2d       	mov	r27, r5
     148:	b5 2d       	mov	r27, r5
     14a:	b5 2d       	mov	r27, r5
     14c:	b5 2d       	mov	r27, r5
     14e:	b5 2d       	mov	r27, r5
     150:	b5 2d       	mov	r27, r5
     152:	b5 2d       	mov	r27, r5
     154:	b5 2d       	mov	r27, r5
     156:	b5 2d       	mov	r27, r5
     158:	b1 2d       	mov	r27, r1
     15a:	b5 2d       	mov	r27, r5
     15c:	b5 2d       	mov	r27, r5
     15e:	b5 2d       	mov	r27, r5
     160:	b5 2d       	mov	r27, r5
     162:	b5 2d       	mov	r27, r5
     164:	b5 2d       	mov	r27, r5
     166:	b5 2d       	mov	r27, r5
     168:	7c 2d       	mov	r23, r12
     16a:	b5 2d       	mov	r27, r5
     16c:	b5 2d       	mov	r27, r5
     16e:	b5 2d       	mov	r27, r5
     170:	b5 2d       	mov	r27, r5
     172:	b5 2d       	mov	r27, r5
     174:	b5 2d       	mov	r27, r5
     176:	b5 2d       	mov	r27, r5
     178:	b5 2d       	mov	r27, r5
     17a:	b5 2d       	mov	r27, r5
     17c:	b5 2d       	mov	r27, r5
     17e:	b5 2d       	mov	r27, r5
     180:	b5 2d       	mov	r27, r5
     182:	b5 2d       	mov	r27, r5
     184:	b5 2d       	mov	r27, r5
     186:	b5 2d       	mov	r27, r5
     188:	70 2d       	mov	r23, r0
     18a:	b5 2d       	mov	r27, r5
     18c:	b5 2d       	mov	r27, r5
     18e:	b5 2d       	mov	r27, r5
     190:	b5 2d       	mov	r27, r5
     192:	b5 2d       	mov	r27, r5
     194:	b5 2d       	mov	r27, r5
     196:	b5 2d       	mov	r27, r5
     198:	94 2d       	mov	r25, r4

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <prvCheckTasksWaitingTermination>
     19e:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	05 d6       	rcall	.+3082   	; 0xdb2 <vPortYield>
     1a8:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 cd 1c 	call	0x399a	; 0x399a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee ec       	ldi	r30, 0xCE	; 206
     1e4:	f8 e6       	ldi	r31, 0x68	; 104
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 31       	cpi	r26, 0x16	; 22
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a6 e1       	ldi	r26, 0x16	; 22
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a7 37       	cpi	r26, 0x77	; 119
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 61 20 	call	0x40c2	; 0x40c2 <main>
     20a:	0c 94 65 34 	jmp	0x68ca	; 0x68ca <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <application_task_create>:
	{
		application_run(xLastWakeTime,xFrequency);
	}
}
void application_task_create(UBaseType_t task_priority)
{
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
	xTaskCreate(
     216:	e1 2c       	mov	r14, r1
     218:	f1 2c       	mov	r15, r1
     21a:	08 2f       	mov	r16, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 ec       	ldi	r20, 0xC0	; 192
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6f e6       	ldi	r22, 0x6F	; 111
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	88 ec       	ldi	r24, 0xC8	; 200
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  task_priority  // Priority.
	,  NULL );
	
}
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <application_run>:
void application_run(TickType_t xLastWakeTime,TickType_t xFrequency)
{
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	6a 97       	sbiw	r28, 0x1a	; 26
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	69 83       	std	Y+1, r22	; 0x01
     262:	7a 83       	std	Y+2, r23	; 0x02
     264:	8b 83       	std	Y+3, r24	; 0x03
     266:	9c 83       	std	Y+4, r25	; 0x04
     268:	49 01       	movw	r8, r18
     26a:	5a 01       	movw	r10, r20
	
	xEventGroupSetBits(_meassureEventGroup,CO2_BIT | HUMIDITY_TEMPERATURE_BIT);
     26c:	43 e0       	ldi	r20, 0x03	; 3
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_meassureEventGroup>
     278:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_meassureEventGroup+0x1>
     27c:	e5 d2       	rcall	.+1482   	; 0x848 <xEventGroupSetBits>
	dataReadyEventBits=xEventGroupWaitBits(_dataReadyEventGroup,CO2_BIT | HUMIDITY_TEMPERATURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     27e:	cc 24       	eor	r12, r12
     280:	ca 94       	dec	r12
     282:	dc 2c       	mov	r13, r12
     284:	76 01       	movw	r14, r12
     286:	01 e0       	ldi	r16, 0x01	; 1
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	43 e0       	ldi	r20, 0x03	; 3
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_dataReadyEventGroup>
     296:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_dataReadyEventGroup+0x1>
     29a:	36 d2       	rcall	.+1132   	; 0x708 <xEventGroupWaitBits>
     29c:	60 93 34 18 	sts	0x1834, r22	; 0x801834 <dataReadyEventBits>
     2a0:	70 93 35 18 	sts	0x1835, r23	; 0x801835 <dataReadyEventBits+0x1>
     2a4:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <dataReadyEventBits+0x2>
     2a8:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <dataReadyEventBits+0x3>
	if ((dataReadyEventBits &(CO2_BIT | HUMIDITY_TEMPERATURE_BIT)  )== (CO2_BIT | HUMIDITY_TEMPERATURE_BIT))
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	83 70       	andi	r24, 0x03	; 3
     2b2:	99 27       	eor	r25, r25
     2b4:	aa 27       	eor	r26, r26
     2b6:	bb 27       	eor	r27, r27
     2b8:	03 97       	sbiw	r24, 0x03	; 3
     2ba:	a1 05       	cpc	r26, r1
     2bc:	b1 05       	cpc	r27, r1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <application_run+0x8a>
     2c0:	54 c0       	rjmp	.+168    	; 0x36a <application_run+0x132>
	{
		
		setTemperatureData(get_temperature_data());
     2c2:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_temperature_data>
     2c6:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <setTemperatureData>
		printf("Temperature data ---> %d ",get_temperature_data());
     2ca:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_temperature_data>
     2ce:	9f 93       	push	r25
     2d0:	8f 93       	push	r24
     2d2:	8b e7       	ldi	r24, 0x7B	; 123
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
		setHumidityData(get_humidity_data());
     2de:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <get_humidity_data>
     2e2:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <setHumidityData>
		printf(" Humidity data ---> %d ",get_humidity_data());
     2e6:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <get_humidity_data>
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	85 e9       	ldi	r24, 0x95	; 149
     2f0:	92 e0       	ldi	r25, 0x02	; 2
     2f2:	9f 93       	push	r25
     2f4:	8f 93       	push	r24
     2f6:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
		setCO2Ppm(get_CO2_data());
     2fa:	78 d0       	rcall	.+240    	; 0x3ec <get_CO2_data>
     2fc:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <setCO2Ppm>
		printf("CO2 data ---> %i ",get_CO2_data());
     300:	75 d0       	rcall	.+234    	; 0x3ec <get_CO2_data>
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	8d ea       	ldi	r24, 0xAD	; 173
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	9f 93       	push	r25
     30c:	8f 93       	push	r24
     30e:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
		
		payload=getLoRaPayload((uint8_t)2);
     312:	62 e0       	ldi	r22, 0x02	; 2
     314:	ce 01       	movw	r24, r28
     316:	05 96       	adiw	r24, 0x05	; 5
     318:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <getLoRaPayload>
     31c:	86 e1       	ldi	r24, 0x16	; 22
     31e:	fe 01       	movw	r30, r28
     320:	35 96       	adiw	r30, 0x05	; 5
     322:	a8 e3       	ldi	r26, 0x38	; 56
     324:	b8 e1       	ldi	r27, 0x18	; 24
     326:	01 90       	ld	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	8a 95       	dec	r24
     32c:	e1 f7       	brne	.-8      	; 0x326 <application_run+0xee>
		vTaskDelay(pdMS_TO_TICKS(50UL));
     32e:	63 e0       	ldi	r22, 0x03	; 3
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
     33a:	0f ef       	ldi	r16, 0xFF	; 255
     33c:	1f ef       	ldi	r17, 0xFF	; 255
     33e:	98 01       	movw	r18, r16
     340:	46 e1       	ldi	r20, 0x16	; 22
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	68 e3       	ldi	r22, 0x38	; 56
     346:	78 e1       	ldi	r23, 0x18	; 24
     348:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <xMessageBuffer>
     34c:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <xMessageBuffer+0x1>
     350:	0e 94 bf 0c 	call	0x197e	; 0x197e <xStreamBufferSend>
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     354:	b5 01       	movw	r22, r10
     356:	a4 01       	movw	r20, r8
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	0e 94 03 13 	call	0x2606	; 0x2606 <xTaskDelayUntil>
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
	}
	
     36a:	6a 96       	adiw	r28, 0x1a	; 26
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <Application_Task>:

void Application_Task(void* pvParameters)
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     390:	0e 94 ed 10 	call	0x21da	; 0x21da <xTaskGetTickCount>
     394:	6b 01       	movw	r12, r22
     396:	7c 01       	movw	r14, r24
	
	for (;;)
	{
		application_run(xLastWakeTime,xFrequency);
     398:	28 ea       	ldi	r18, 0xA8	; 168
     39a:	38 e4       	ldi	r19, 0x48	; 72
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	49 df       	rcall	.-366    	; 0x238 <application_run>
     3a6:	f8 cf       	rjmp	.-16     	; 0x398 <Application_Task+0x8>

000003a8 <myCo2CallBack>:
	co2_sensor_t new_co2_data = pvPortMalloc(sizeof(CO2_Sensor));
	if(NULL == new_co2_data)
	{
		return NULL;
	}
	new_co2_data->co2_Data=co2_data;
     3a8:	90 93 52 18 	sts	0x1852, r25	; 0x801852 <co2_data+0x1>
     3ac:	80 93 51 18 	sts	0x1851, r24	; 0x801851 <co2_data>
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_dataReadyEventGroup>
     3bc:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_dataReadyEventGroup+0x1>
     3c0:	43 c2       	rjmp	.+1158   	; 0x848 <xEventGroupSetBits>
     3c2:	08 95       	ret

000003c4 <co2_task_create>:

}
void co2_task_create(UBaseType_t task_priority)
{
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
	xTaskCreate(
     3ca:	e1 2c       	mov	r14, r1
     3cc:	f1 2c       	mov	r15, r1
     3ce:	08 2f       	mov	r16, r24
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 ec       	ldi	r20, 0xC0	; 192
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	6f eb       	ldi	r22, 0xBF	; 191
     3da:	72 e0       	ldi	r23, 0x02	; 2
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
	,  "CO2 Task" 
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  task_priority 
	,  NULL );
}
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <get_CO2_data>:


uint16_t get_CO2_data(){
	
	return (uint16_t)co2_data;
}
     3ec:	80 91 51 18 	lds	r24, 0x1851	; 0x801851 <co2_data>
     3f0:	90 91 52 18 	lds	r25, 0x1852	; 0x801852 <co2_data+0x1>
     3f4:	08 95       	ret

000003f6 <CO2_taskRun>:


void CO2_taskRun() {
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
	
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     400:	cc 24       	eor	r12, r12
     402:	ca 94       	dec	r12
     404:	dc 2c       	mov	r13, r12
     406:	76 01       	movw	r14, r12
     408:	01 e0       	ldi	r16, 0x01	; 1
     40a:	21 e0       	ldi	r18, 0x01	; 1
     40c:	42 e0       	ldi	r20, 0x02	; 2
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_meassureEventGroup>
     418:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_meassureEventGroup+0x1>
     41c:	75 d1       	rcall	.+746    	; 0x708 <xEventGroupWaitBits>
	BIT_CO2,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	
	if ((event_measure & BIT_CO2)==BIT_CO2)
     41e:	61 ff       	sbrs	r22, 1
     420:	1c c0       	rjmp	.+56     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
     422:	66 e0       	ldi	r22, 0x06	; 6
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
		rc = mh_z19_takeMeassuring();
     42e:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <mh_z19_takeMeassuring>
     432:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <rc>
		if (rc != MHZ19_OK)
     436:	88 23       	and	r24, r24
     438:	41 f0       	breq	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			printf("task got wrong");
     43a:	88 ec       	ldi	r24, 0xC8	; 200
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
		}
		printf("<<CO2 task set>>");		
     44a:	87 ed       	ldi	r24, 0xD7	; 215
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
	}		
}
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	mh_z19_injectCallBack(myCo2CallBack);
     466:	84 ed       	ldi	r24, 0xD4	; 212
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <mh_z19_injectCallBack>
	for(;;)
	{
		CO2_taskRun();
     46e:	c3 df       	rcall	.-122    	; 0x3f6 <CO2_taskRun>
     470:	fe cf       	rjmp	.-4      	; 0x46e <CO2_Sensor_Task+0x8>

00000472 <Configuration_SetMinTemperature>:
	return GOOD;
}


void Configuration_SetMinTemperature(int16_t temperature_data)
{
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
	
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     47a:	4f ef       	ldi	r20, 0xFF	; 255
     47c:	5f ef       	ldi	r21, 0xFF	; 255
     47e:	ba 01       	movw	r22, r20
     480:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     484:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     488:	0e 94 4d 0a 	call	0x149a	; 0x149a <xQueueSemaphoreTake>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	31 f4       	brne	.+12     	; 0x49c <Configuration_SetMinTemperature+0x2a>
	{
		conf->min_temperature_data=temperature_data;
     490:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <conf>
     494:	f0 91 5c 18 	lds	r31, 0x185C	; 0x80185c <conf+0x1>
     498:	d1 83       	std	Z+1, r29	; 0x01
     49a:	c0 83       	st	Z, r28
	}
	
	xSemaphoreGive(mutex);
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	a9 01       	movw	r20, r18
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     4ac:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     4b0:	98 d6       	rcall	.+3376   	; 0x11e2 <xQueueGenericSend>


}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <Configuration_SetMaxTemperature>:
void Configuration_SetMaxTemperature(int16_t temperature_data)
{
     4ba:	0f 93       	push	r16
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
	xSemaphoreTake(mutex, portMAX_DELAY);
     4c2:	4f ef       	ldi	r20, 0xFF	; 255
     4c4:	5f ef       	ldi	r21, 0xFF	; 255
     4c6:	ba 01       	movw	r22, r20
     4c8:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     4cc:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     4d0:	e4 d7       	rcall	.+4040   	; 0x149a <xQueueSemaphoreTake>
	conf->max_temperature_data=temperature_data;
     4d2:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <conf>
     4d6:	f0 91 5c 18 	lds	r31, 0x185C	; 0x80185c <conf+0x1>
     4da:	d3 83       	std	Z+3, r29	; 0x03
     4dc:	c2 83       	std	Z+2, r28	; 0x02
	xSemaphoreGive(mutex);
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     4ee:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     4f2:	77 d6       	rcall	.+3310   	; 0x11e2 <xQueueGenericSend>

}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <Configuration_SetMinHumidity>:
void Configuration_SetMinHumidity(uint16_t humidity_data)
{
     4fc:	0f 93       	push	r16
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
	xSemaphoreTake(mutex, portMAX_DELAY);
     504:	4f ef       	ldi	r20, 0xFF	; 255
     506:	5f ef       	ldi	r21, 0xFF	; 255
     508:	ba 01       	movw	r22, r20
     50a:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     50e:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     512:	c3 d7       	rcall	.+3974   	; 0x149a <xQueueSemaphoreTake>
	conf->min_humidity_data=humidity_data;
     514:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <conf>
     518:	f0 91 5c 18 	lds	r31, 0x185C	; 0x80185c <conf+0x1>
     51c:	d5 83       	std	Z+5, r29	; 0x05
     51e:	c4 83       	std	Z+4, r28	; 0x04
	xSemaphoreGive(mutex);
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     530:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     534:	56 d6       	rcall	.+3244   	; 0x11e2 <xQueueGenericSend>


}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	0f 91       	pop	r16
     53c:	08 95       	ret

0000053e <Configuration_SetMaxHumidity>:


void Configuration_SetMaxHumidity(uint16_t humidity_data)
{
     53e:	0f 93       	push	r16
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	ec 01       	movw	r28, r24
	xSemaphoreTake(mutex, portMAX_DELAY);
     546:	4f ef       	ldi	r20, 0xFF	; 255
     548:	5f ef       	ldi	r21, 0xFF	; 255
     54a:	ba 01       	movw	r22, r20
     54c:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     550:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     554:	a2 d7       	rcall	.+3908   	; 0x149a <xQueueSemaphoreTake>
conf->max_humidity_data=humidity_data;
     556:	e0 91 5b 18 	lds	r30, 0x185B	; 0x80185b <conf>
     55a:	f0 91 5c 18 	lds	r31, 0x185C	; 0x80185c <conf+0x1>
     55e:	d7 83       	std	Z+7, r29	; 0x07
     560:	c6 83       	std	Z+6, r28	; 0x06
xSemaphoreGive(mutex);
     562:	00 e0       	ldi	r16, 0x00	; 0
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	a9 01       	movw	r20, r18
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <mutex>
     572:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <mutex+0x1>
     576:	35 d6       	rcall	.+3178   	; 0x11e2 <xQueueGenericSend>

}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task();
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority)
{
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
	xTaskCreate(
     586:	20 91 32 18 	lds	r18, 0x1832	; 0x801832 <downlinkMessageBuffer>
     58a:	30 91 33 18 	lds	r19, 0x1833	; 0x801833 <downlinkMessageBuffer+0x1>
     58e:	e1 2c       	mov	r14, r1
     590:	f1 2c       	mov	r15, r1
     592:	08 2f       	mov	r16, r24
     594:	48 e8       	ldi	r20, 0x88	; 136
     596:	51 e0       	ldi	r21, 0x01	; 1
     598:	68 ee       	ldi	r22, 0xE8	; 232
     59a:	72 e0       	ldi	r23, 0x02	; 2
     59c:	8e e4       	ldi	r24, 0x4E	; 78
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
	"LoraWanDownlink",
	configMINIMAL_STACK_SIZE+200,
	(void*)downlinkMessageBuffer,
	priority,
	NULL );
}
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	08 95       	ret

000005ac <lora_DownLinkHandler_task>:

void lora_DownLinkHandler_task()
{     
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
	size_t xReceivedBytes;
	xReceivedBytes=xMessageBufferReceive(
     5b4:	0f ef       	ldi	r16, 0xFF	; 255
     5b6:	1f ef       	ldi	r17, 0xFF	; 255
     5b8:	98 01       	movw	r18, r16
     5ba:	46 e1       	ldi	r20, 0x16	; 22
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	66 e1       	ldi	r22, 0x16	; 22
     5c0:	78 e0       	ldi	r23, 0x08	; 8
     5c2:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <downlinkMessageBuffer>
     5c6:	90 91 33 18 	lds	r25, 0x1833	; 0x801833 <downlinkMessageBuffer+0x1>
     5ca:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferReceive>
	downlinkMessageBuffer,
	&_downlink_payload,
	sizeof(lora_driver_payload_t),
	portMAX_DELAY);

	if (xReceivedBytes>0)
     5ce:	89 2b       	or	r24, r25
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <lora_DownLinkHandler_task+0x28>
     5d2:	5f c0       	rjmp	.+190    	; 0x692 <lora_DownLinkHandler_task+0xe6>
	{	
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len);
     5d4:	c6 e1       	ldi	r28, 0x16	; 22
     5d6:	d8 e0       	ldi	r29, 0x08	; 8
     5d8:	99 81       	ldd	r25, Y+1	; 0x01
     5da:	88 81       	ld	r24, Y
     5dc:	1f 92       	push	r1
     5de:	9f 93       	push	r25
     5e0:	1f 92       	push	r1
     5e2:	8f 93       	push	r24
     5e4:	88 ef       	ldi	r24, 0xF8	; 248
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
		
			if (8==_downlink_payload.len )
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	88 30       	cpi	r24, 0x08	; 8
     600:	09 f0       	breq	.+2      	; 0x604 <lora_DownLinkHandler_task+0x58>
     602:	3d c0       	rjmp	.+122    	; 0x67e <lora_DownLinkHandler_task+0xd2>
			{
				
				 minHumidity = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	98 2f       	mov	r25, r24
     60a:	88 27       	eor	r24, r24
     60c:	2b 81       	ldd	r18, Y+3	; 0x03
     60e:	82 0f       	add	r24, r18
     610:	91 1d       	adc	r25, r1
     612:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <minHumidity+0x1>
     616:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <minHumidity>
				 minTemperature = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	98 2f       	mov	r25, r24
     620:	88 27       	eor	r24, r24
     622:	2d 81       	ldd	r18, Y+5	; 0x05
     624:	82 0f       	add	r24, r18
     626:	91 1d       	adc	r25, r1
     628:	90 93 62 18 	sts	0x1862, r25	; 0x801862 <minTemperature+0x1>
     62c:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <minTemperature>
				 maxHumidity = (_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
     630:	2e 81       	ldd	r18, Y+6	; 0x06
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	32 2f       	mov	r19, r18
     636:	22 27       	eor	r18, r18
     638:	4f 81       	ldd	r20, Y+7	; 0x07
     63a:	24 0f       	add	r18, r20
     63c:	31 1d       	adc	r19, r1
     63e:	30 93 64 18 	sts	0x1864, r19	; 0x801864 <maxHumidity+0x1>
     642:	20 93 63 18 	sts	0x1863, r18	; 0x801863 <maxHumidity>
				 maxTemperature = (_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
     646:	28 85       	ldd	r18, Y+8	; 0x08
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	32 2f       	mov	r19, r18
     64c:	22 27       	eor	r18, r18
     64e:	49 85       	ldd	r20, Y+9	; 0x09
     650:	24 0f       	add	r18, r20
     652:	31 1d       	adc	r19, r1
     654:	30 93 60 18 	sts	0x1860, r19	; 0x801860 <maxTemperature+0x1>
     658:	20 93 5f 18 	sts	0x185F, r18	; 0x80185f <maxTemperature>
				Configuration_SetMinTemperature(minTemperature);
     65c:	0a df       	rcall	.-492    	; 0x472 <Configuration_SetMinTemperature>
				Configuration_SetMinHumidity(minHumidity);
     65e:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <minHumidity>
     662:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <minHumidity+0x1>
     666:	4a df       	rcall	.-364    	; 0x4fc <Configuration_SetMinHumidity>
				Configuration_SetMaxTemperature(maxTemperature);
     668:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <maxTemperature>
     66c:	90 91 60 18 	lds	r25, 0x1860	; 0x801860 <maxTemperature+0x1>
     670:	24 df       	rcall	.-440    	; 0x4ba <Configuration_SetMaxTemperature>
				Configuration_SetMaxHumidity(maxHumidity);
     672:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <maxHumidity>
     676:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <maxHumidity+0x1>
     67a:	61 df       	rcall	.-318    	; 0x53e <Configuration_SetMaxHumidity>
     67c:	06 c0       	rjmp	.+12     	; 0x68a <lora_DownLinkHandler_task+0xde>

			}
			else
			{
				// Retry in 2.5 minutes
				vTaskDelay(pdMS_TO_TICKS(150000)); 			}
     67e:	64 e5       	ldi	r22, 0x54	; 84
     680:	74 e2       	ldi	r23, 0x24	; 36
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
			
			puts("finished");
     68a:	8a e2       	ldi	r24, 0x2A	; 42
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <puts>
	
			
	
		

     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <lora_DownLinkHandler_startTask>:


void lora_DownLinkHandler_startTask(void* msbuffer){
	for(;;)
	{
		lora_DownLinkHandler_task();
     69c:	87 df       	rcall	.-242    	; 0x5ac <lora_DownLinkHandler_task>
     69e:	fe cf       	rjmp	.-4      	; 0x69c <lora_DownLinkHandler_startTask>

000006a0 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     6a0:	0f 93       	push	r16
     6a2:	01 11       	cpse	r16, r1
     6a4:	0c c0       	rjmp	.+24     	; 0x6be <prvTestWaitCondition+0x1e>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	82 23       	and	r24, r18
     6ac:	93 23       	and	r25, r19
     6ae:	a4 23       	and	r26, r20
     6b0:	b5 23       	and	r27, r21
     6b2:	89 2b       	or	r24, r25
     6b4:	8a 2b       	or	r24, r26
     6b6:	8b 2b       	or	r24, r27
     6b8:	79 f4       	brne	.+30     	; 0x6d8 <prvTestWaitCondition+0x38>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	10 c0       	rjmp	.+32     	; 0x6de <prvTestWaitCondition+0x3e>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	82 23       	and	r24, r18
     6c4:	93 23       	and	r25, r19
     6c6:	a4 23       	and	r26, r20
     6c8:	b5 23       	and	r27, r21
     6ca:	28 17       	cp	r18, r24
     6cc:	39 07       	cpc	r19, r25
     6ce:	4a 07       	cpc	r20, r26
     6d0:	5b 07       	cpc	r21, r27
     6d2:	21 f0       	breq	.+8      	; 0x6dc <prvTestWaitCondition+0x3c>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <prvTestWaitCondition+0x3e>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	01 c0       	rjmp	.+2      	; 0x6de <prvTestWaitCondition+0x3e>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <xEventGroupCreate>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	8f e0       	ldi	r24, 0x0F	; 15
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	af d1       	rcall	.+862    	; 0xa4a <pvPortMalloc>
     6ec:	ec 01       	movw	r28, r24
     6ee:	00 97       	sbiw	r24, 0x00	; 0
     6f0:	39 f0       	breq	.+14     	; 0x700 <xEventGroupCreate+0x1e>
     6f2:	fc 01       	movw	r30, r24
     6f4:	11 92       	st	Z+, r1
     6f6:	11 92       	st	Z+, r1
     6f8:	11 92       	st	Z+, r1
     6fa:	11 92       	st	Z+, r1
     6fc:	cf 01       	movw	r24, r30
     6fe:	8b d2       	rcall	.+1302   	; 0xc16 <vListInitialise>
     700:	ce 01       	movw	r24, r28
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <xEventGroupWaitBits>:
     708:	2f 92       	push	r2
     70a:	3f 92       	push	r3
     70c:	4f 92       	push	r4
     70e:	5f 92       	push	r5
     710:	6f 92       	push	r6
     712:	7f 92       	push	r7
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
     72e:	4a 01       	movw	r8, r20
     730:	5b 01       	movw	r10, r22
     732:	62 2e       	mov	r6, r18
     734:	70 2e       	mov	r7, r16
     736:	0e 94 e7 10 	call	0x21ce	; 0x21ce <vTaskSuspendAll>
     73a:	28 80       	ld	r2, Y
     73c:	39 80       	ldd	r3, Y+1	; 0x01
     73e:	4a 80       	ldd	r4, Y+2	; 0x02
     740:	5b 80       	ldd	r5, Y+3	; 0x03
     742:	a5 01       	movw	r20, r10
     744:	94 01       	movw	r18, r8
     746:	c2 01       	movw	r24, r4
     748:	b1 01       	movw	r22, r2
     74a:	aa df       	rcall	.-172    	; 0x6a0 <prvTestWaitCondition>
     74c:	88 23       	and	r24, r24
     74e:	a1 f0       	breq	.+40     	; 0x778 <xEventGroupWaitBits+0x70>
     750:	66 20       	and	r6, r6
     752:	89 f1       	breq	.+98     	; 0x7b6 <xEventGroupWaitBits+0xae>
     754:	d5 01       	movw	r26, r10
     756:	c4 01       	movw	r24, r8
     758:	80 95       	com	r24
     75a:	90 95       	com	r25
     75c:	a0 95       	com	r26
     75e:	b0 95       	com	r27
     760:	82 21       	and	r24, r2
     762:	93 21       	and	r25, r3
     764:	a4 21       	and	r26, r4
     766:	b5 21       	and	r27, r5
     768:	88 83       	st	Y, r24
     76a:	99 83       	std	Y+1, r25	; 0x01
     76c:	aa 83       	std	Y+2, r26	; 0x02
     76e:	bb 83       	std	Y+3, r27	; 0x03
     770:	c1 2c       	mov	r12, r1
     772:	d1 2c       	mov	r13, r1
     774:	76 01       	movw	r14, r12
     776:	22 c0       	rjmp	.+68     	; 0x7bc <xEventGroupWaitBits+0xb4>
     778:	c1 14       	cp	r12, r1
     77a:	d1 04       	cpc	r13, r1
     77c:	e1 04       	cpc	r14, r1
     77e:	f1 04       	cpc	r15, r1
     780:	e9 f0       	breq	.+58     	; 0x7bc <xEventGroupWaitBits+0xb4>
     782:	61 10       	cpse	r6, r1
     784:	04 c0       	rjmp	.+8      	; 0x78e <xEventGroupWaitBits+0x86>
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	ba 01       	movw	r22, r20
     78c:	04 c0       	rjmp	.+8      	; 0x796 <xEventGroupWaitBits+0x8e>
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	71 10       	cpse	r7, r1
     798:	74 60       	ori	r23, 0x04	; 4
     79a:	48 29       	or	r20, r8
     79c:	59 29       	or	r21, r9
     79e:	6a 29       	or	r22, r10
     7a0:	7b 29       	or	r23, r11
     7a2:	97 01       	movw	r18, r14
     7a4:	86 01       	movw	r16, r12
     7a6:	ce 01       	movw	r24, r28
     7a8:	04 96       	adiw	r24, 0x04	; 4
     7aa:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskPlaceOnUnorderedEventList>
     7ae:	21 2c       	mov	r2, r1
     7b0:	31 2c       	mov	r3, r1
     7b2:	21 01       	movw	r4, r2
     7b4:	03 c0       	rjmp	.+6      	; 0x7bc <xEventGroupWaitBits+0xb4>
     7b6:	c1 2c       	mov	r12, r1
     7b8:	d1 2c       	mov	r13, r1
     7ba:	76 01       	movw	r14, r12
     7bc:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
     7c0:	cd 28       	or	r12, r13
     7c2:	ce 28       	or	r12, r14
     7c4:	cf 28       	or	r12, r15
     7c6:	59 f1       	breq	.+86     	; 0x81e <xEventGroupWaitBits+0x116>
     7c8:	81 11       	cpse	r24, r1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <xEventGroupWaitBits+0xc6>
     7cc:	f2 d2       	rcall	.+1508   	; 0xdb2 <vPortYield>
     7ce:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uxTaskResetEventItemValue>
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
     7d6:	91 fd       	sbrc	r25, 1
     7d8:	1f c0       	rjmp	.+62     	; 0x818 <xEventGroupWaitBits+0x110>
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	0f 92       	push	r0
     7e0:	c8 80       	ld	r12, Y
     7e2:	d9 80       	ldd	r13, Y+1	; 0x01
     7e4:	ea 80       	ldd	r14, Y+2	; 0x02
     7e6:	fb 80       	ldd	r15, Y+3	; 0x03
     7e8:	07 2d       	mov	r16, r7
     7ea:	a5 01       	movw	r20, r10
     7ec:	94 01       	movw	r18, r8
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	56 df       	rcall	.-340    	; 0x6a0 <prvTestWaitCondition>
     7f4:	88 23       	and	r24, r24
     7f6:	71 f0       	breq	.+28     	; 0x814 <xEventGroupWaitBits+0x10c>
     7f8:	66 20       	and	r6, r6
     7fa:	61 f0       	breq	.+24     	; 0x814 <xEventGroupWaitBits+0x10c>
     7fc:	80 94       	com	r8
     7fe:	90 94       	com	r9
     800:	a0 94       	com	r10
     802:	b0 94       	com	r11
     804:	8c 20       	and	r8, r12
     806:	9d 20       	and	r9, r13
     808:	ae 20       	and	r10, r14
     80a:	bf 20       	and	r11, r15
     80c:	88 82       	st	Y, r8
     80e:	99 82       	std	Y+1, r9	; 0x01
     810:	aa 82       	std	Y+2, r10	; 0x02
     812:	bb 82       	std	Y+3, r11	; 0x03
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	16 01       	movw	r2, r12
     81a:	27 01       	movw	r4, r14
     81c:	55 24       	eor	r5, r5
     81e:	c2 01       	movw	r24, r4
     820:	b1 01       	movw	r22, r2
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	6f 90       	pop	r6
     83e:	5f 90       	pop	r5
     840:	4f 90       	pop	r4
     842:	3f 90       	pop	r3
     844:	2f 90       	pop	r2
     846:	08 95       	ret

00000848 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     848:	4f 92       	push	r4
     84a:	5f 92       	push	r5
     84c:	6f 92       	push	r6
     84e:	7f 92       	push	r7
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ec 01       	movw	r28, r24
     866:	6a 01       	movw	r12, r20
     868:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     86a:	8c 01       	movw	r16, r24
     86c:	09 5f       	subi	r16, 0xF9	; 249
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     870:	0e 94 e7 10 	call	0x21ce	; 0x21ce <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     874:	eb 85       	ldd	r30, Y+11	; 0x0b
     876:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     878:	88 81       	ld	r24, Y
     87a:	99 81       	ldd	r25, Y+1	; 0x01
     87c:	aa 81       	ldd	r26, Y+2	; 0x02
     87e:	bb 81       	ldd	r27, Y+3	; 0x03
     880:	c8 2a       	or	r12, r24
     882:	d9 2a       	or	r13, r25
     884:	ea 2a       	or	r14, r26
     886:	fb 2a       	or	r15, r27
     888:	c8 82       	st	Y, r12
     88a:	d9 82       	std	Y+1, r13	; 0x01
     88c:	ea 82       	std	Y+2, r14	; 0x02
     88e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     890:	c1 2c       	mov	r12, r1
     892:	d1 2c       	mov	r13, r1
     894:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     896:	3d c0       	rjmp	.+122    	; 0x912 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     898:	a4 80       	ldd	r10, Z+4	; 0x04
     89a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     89c:	80 81       	ld	r24, Z
     89e:	91 81       	ldd	r25, Z+1	; 0x01
     8a0:	a2 81       	ldd	r26, Z+2	; 0x02
     8a2:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     8a4:	ac 01       	movw	r20, r24
     8a6:	bd 01       	movw	r22, r26
     8a8:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     8aa:	b2 fd       	sbrc	r27, 2
     8ac:	0e c0       	rjmp	.+28     	; 0x8ca <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     8ae:	48 80       	ld	r4, Y
     8b0:	59 80       	ldd	r5, Y+1	; 0x01
     8b2:	6a 80       	ldd	r6, Y+2	; 0x02
     8b4:	7b 80       	ldd	r7, Y+3	; 0x03
     8b6:	44 22       	and	r4, r20
     8b8:	55 22       	and	r5, r21
     8ba:	66 22       	and	r6, r22
     8bc:	77 22       	and	r7, r23
     8be:	45 28       	or	r4, r5
     8c0:	46 28       	or	r4, r6
     8c2:	47 28       	or	r4, r7
     8c4:	89 f4       	brne	.+34     	; 0x8e8 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	12 c0       	rjmp	.+36     	; 0x8ee <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     8ca:	48 80       	ld	r4, Y
     8cc:	59 80       	ldd	r5, Y+1	; 0x01
     8ce:	6a 80       	ldd	r6, Y+2	; 0x02
     8d0:	7b 80       	ldd	r7, Y+3	; 0x03
     8d2:	44 22       	and	r4, r20
     8d4:	55 22       	and	r5, r21
     8d6:	66 22       	and	r6, r22
     8d8:	77 22       	and	r7, r23
     8da:	44 15       	cp	r20, r4
     8dc:	55 05       	cpc	r21, r5
     8de:	66 05       	cpc	r22, r6
     8e0:	77 05       	cpc	r23, r7
     8e2:	21 f0       	breq	.+8      	; 0x8ec <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     8ec:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     8ee:	22 23       	and	r18, r18
     8f0:	71 f0       	breq	.+28     	; 0x90e <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     8f2:	b0 ff       	sbrs	r27, 0
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     8f6:	c4 2a       	or	r12, r20
     8f8:	d5 2a       	or	r13, r21
     8fa:	e6 2a       	or	r14, r22
     8fc:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8fe:	48 81       	ld	r20, Y
     900:	59 81       	ldd	r21, Y+1	; 0x01
     902:	6a 81       	ldd	r22, Y+2	; 0x02
     904:	7b 81       	ldd	r23, Y+3	; 0x03
     906:	72 60       	ori	r23, 0x02	; 2
     908:	cf 01       	movw	r24, r30
     90a:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     90e:	ea 2d       	mov	r30, r10
     910:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     912:	e0 17       	cp	r30, r16
     914:	f1 07       	cpc	r31, r17
     916:	09 f0       	breq	.+2      	; 0x91a <xEventGroupSetBits+0xd2>
     918:	bf cf       	rjmp	.-130    	; 0x898 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     91a:	c0 94       	com	r12
     91c:	d0 94       	com	r13
     91e:	e0 94       	com	r14
     920:	f0 94       	com	r15
     922:	88 81       	ld	r24, Y
     924:	99 81       	ldd	r25, Y+1	; 0x01
     926:	aa 81       	ldd	r26, Y+2	; 0x02
     928:	bb 81       	ldd	r27, Y+3	; 0x03
     92a:	c8 22       	and	r12, r24
     92c:	d9 22       	and	r13, r25
     92e:	ea 22       	and	r14, r26
     930:	fb 22       	and	r15, r27
     932:	c8 82       	st	Y, r12
     934:	d9 82       	std	Y+1, r13	; 0x01
     936:	ea 82       	std	Y+2, r14	; 0x02
     938:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     93a:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     93e:	68 81       	ld	r22, Y
     940:	79 81       	ldd	r23, Y+1	; 0x01
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	9b 81       	ldd	r25, Y+3	; 0x03
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	7f 90       	pop	r7
     95c:	6f 90       	pop	r6
     95e:	5f 90       	pop	r5
     960:	4f 90       	pop	r4
     962:	08 95       	ret

00000964 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     964:	e8 e3       	ldi	r30, 0x38	; 56
     966:	f8 e0       	ldi	r31, 0x08	; 8
     968:	ac e3       	ldi	r26, 0x3C	; 60
     96a:	b8 e0       	ldi	r27, 0x08	; 8
     96c:	b1 83       	std	Z+1, r27	; 0x01
     96e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     970:	13 82       	std	Z+3, r1	; 0x03
     972:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     974:	e4 ee       	ldi	r30, 0xE4	; 228
     976:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     978:	f0 93 37 08 	sts	0x0837, r31	; 0x800837 <pxEnd+0x1>
     97c:	e0 93 36 08 	sts	0x0836, r30	; 0x800836 <pxEnd>
    pxEnd->xBlockSize = 0;
     980:	13 82       	std	Z+3, r1	; 0x03
     982:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     984:	11 82       	std	Z+1, r1	; 0x01
     986:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     988:	88 ea       	ldi	r24, 0xA8	; 168
     98a:	9d e0       	ldi	r25, 0x0D	; 13
     98c:	13 96       	adiw	r26, 0x03	; 3
     98e:	9c 93       	st	X, r25
     990:	8e 93       	st	-X, r24
     992:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     994:	ed 93       	st	X+, r30
     996:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     998:	90 93 33 08 	sts	0x0833, r25	; 0x800833 <xMinimumEverFreeBytesRemaining+0x1>
     99c:	80 93 32 08 	sts	0x0832, r24	; 0x800832 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9a0:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <xFreeBytesRemaining+0x1>
     9a4:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e8       	ldi	r25, 0x80	; 128
     9ac:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <xBlockAllocatedBit+0x1>
     9b0:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <xBlockAllocatedBit>
     9b4:	08 95       	ret

000009b6 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     9bc:	a8 e3       	ldi	r26, 0x38	; 56
     9be:	b8 e0       	ldi	r27, 0x08	; 8
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <prvInsertBlockIntoFreeList+0xe>
     9c2:	df 01       	movw	r26, r30
     9c4:	ed 91       	ld	r30, X+
     9c6:	fc 91       	ld	r31, X
     9c8:	11 97       	sbiw	r26, 0x01	; 1
     9ca:	ec 17       	cp	r30, r28
     9cc:	fd 07       	cpc	r31, r29
     9ce:	c8 f3       	brcs	.-14     	; 0x9c2 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     9d0:	12 96       	adiw	r26, 0x02	; 2
     9d2:	8d 91       	ld	r24, X+
     9d4:	9c 91       	ld	r25, X
     9d6:	13 97       	sbiw	r26, 0x03	; 3
     9d8:	9d 01       	movw	r18, r26
     9da:	28 0f       	add	r18, r24
     9dc:	39 1f       	adc	r19, r25
     9de:	c2 17       	cp	r28, r18
     9e0:	d3 07       	cpc	r29, r19
     9e2:	49 f4       	brne	.+18     	; 0x9f6 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9e4:	2a 81       	ldd	r18, Y+2	; 0x02
     9e6:	3b 81       	ldd	r19, Y+3	; 0x03
     9e8:	82 0f       	add	r24, r18
     9ea:	93 1f       	adc	r25, r19
     9ec:	13 96       	adiw	r26, 0x03	; 3
     9ee:	9c 93       	st	X, r25
     9f0:	8e 93       	st	-X, r24
     9f2:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     9f4:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	9b 81       	ldd	r25, Y+3	; 0x03
     9fa:	9e 01       	movw	r18, r28
     9fc:	28 0f       	add	r18, r24
     9fe:	39 1f       	adc	r19, r25
     a00:	e2 17       	cp	r30, r18
     a02:	f3 07       	cpc	r31, r19
     a04:	c1 f4       	brne	.+48     	; 0xa36 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a06:	20 91 36 08 	lds	r18, 0x0836	; 0x800836 <pxEnd>
     a0a:	30 91 37 08 	lds	r19, 0x0837	; 0x800837 <pxEnd+0x1>
     a0e:	e2 17       	cp	r30, r18
     a10:	f3 07       	cpc	r31, r19
     a12:	71 f0       	breq	.+28     	; 0xa30 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a14:	22 81       	ldd	r18, Z+2	; 0x02
     a16:	33 81       	ldd	r19, Z+3	; 0x03
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	9b 83       	std	Y+3, r25	; 0x03
     a1e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a20:	ed 91       	ld	r30, X+
     a22:	fc 91       	ld	r31, X
     a24:	11 97       	sbiw	r26, 0x01	; 1
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	99 83       	std	Y+1, r25	; 0x01
     a2c:	88 83       	st	Y, r24
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a30:	39 83       	std	Y+1, r19	; 0x01
     a32:	28 83       	st	Y, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a36:	f9 83       	std	Y+1, r31	; 0x01
     a38:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a3a:	ca 17       	cp	r28, r26
     a3c:	db 07       	cpc	r29, r27
     a3e:	11 f0       	breq	.+4      	; 0xa44 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a40:	cd 93       	st	X+, r28
     a42:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a58:	0e 94 e7 10 	call	0x21ce	; 0x21ce <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a5c:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <pxEnd>
     a60:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <pxEnd+0x1>
     a64:	89 2b       	or	r24, r25
     a66:	09 f4       	brne	.+2      	; 0xa6a <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a68:	7d df       	rcall	.-262    	; 0x964 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a6a:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <xBlockAllocatedBit>
     a6e:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <xBlockAllocatedBit+0x1>
     a72:	80 23       	and	r24, r16
     a74:	91 23       	and	r25, r17
     a76:	89 2b       	or	r24, r25
     a78:	09 f0       	breq	.+2      	; 0xa7c <pvPortMalloc+0x32>
     a7a:	76 c0       	rjmp	.+236    	; 0xb68 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a7c:	01 15       	cp	r16, r1
     a7e:	11 05       	cpc	r17, r1
     a80:	49 f0       	breq	.+18     	; 0xa94 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a82:	c8 01       	movw	r24, r16
     a84:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a86:	08 17       	cp	r16, r24
     a88:	19 07       	cpc	r17, r25
     a8a:	18 f0       	brcs	.+6      	; 0xa92 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a8c:	00 e0       	ldi	r16, 0x00	; 0
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a92:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a94:	01 15       	cp	r16, r1
     a96:	11 05       	cpc	r17, r1
     a98:	09 f4       	brne	.+2      	; 0xa9c <pvPortMalloc+0x52>
     a9a:	69 c0       	rjmp	.+210    	; 0xb6e <pvPortMalloc+0x124>
     a9c:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <xFreeBytesRemaining>
     aa0:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <xFreeBytesRemaining+0x1>
     aa4:	80 17       	cp	r24, r16
     aa6:	91 07       	cpc	r25, r17
     aa8:	08 f4       	brcc	.+2      	; 0xaac <pvPortMalloc+0x62>
     aaa:	64 c0       	rjmp	.+200    	; 0xb74 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     aac:	c0 91 38 08 	lds	r28, 0x0838	; 0x800838 <xStart>
     ab0:	d0 91 39 08 	lds	r29, 0x0839	; 0x800839 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     ab4:	e8 e3       	ldi	r30, 0x38	; 56
     ab6:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     aba:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     abc:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	9b 81       	ldd	r25, Y+3	; 0x03
     ac2:	80 17       	cp	r24, r16
     ac4:	91 07       	cpc	r25, r17
     ac6:	20 f4       	brcc	.+8      	; 0xad0 <pvPortMalloc+0x86>
     ac8:	88 81       	ld	r24, Y
     aca:	99 81       	ldd	r25, Y+1	; 0x01
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	a9 f7       	brne	.-22     	; 0xaba <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     ad0:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <pxEnd>
     ad4:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <pxEnd+0x1>
     ad8:	c8 17       	cp	r28, r24
     ada:	d9 07       	cpc	r29, r25
     adc:	09 f4       	brne	.+2      	; 0xae0 <pvPortMalloc+0x96>
     ade:	4d c0       	rjmp	.+154    	; 0xb7a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     ae0:	e0 80       	ld	r14, Z
     ae2:	f1 80       	ldd	r15, Z+1	; 0x01
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	e8 0e       	add	r14, r24
     ae8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     aea:	88 81       	ld	r24, Y
     aec:	99 81       	ldd	r25, Y+1	; 0x01
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     af2:	2a 81       	ldd	r18, Y+2	; 0x02
     af4:	3b 81       	ldd	r19, Y+3	; 0x03
     af6:	20 1b       	sub	r18, r16
     af8:	31 0b       	sbc	r19, r17
     afa:	29 30       	cpi	r18, 0x09	; 9
     afc:	31 05       	cpc	r19, r1
     afe:	48 f0       	brcs	.+18     	; 0xb12 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b00:	ce 01       	movw	r24, r28
     b02:	80 0f       	add	r24, r16
     b04:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b06:	fc 01       	movw	r30, r24
     b08:	33 83       	std	Z+3, r19	; 0x03
     b0a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b0c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b0e:	0a 83       	std	Y+2, r16	; 0x02
     b10:	52 df       	rcall	.-348    	; 0x9b6 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b12:	2a 81       	ldd	r18, Y+2	; 0x02
     b14:	3b 81       	ldd	r19, Y+3	; 0x03
     b16:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <xFreeBytesRemaining>
     b1a:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <xFreeBytesRemaining+0x1>
     b1e:	82 1b       	sub	r24, r18
     b20:	93 0b       	sbc	r25, r19
     b22:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <xFreeBytesRemaining+0x1>
     b26:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b2a:	40 91 32 08 	lds	r20, 0x0832	; 0x800832 <xMinimumEverFreeBytesRemaining>
     b2e:	50 91 33 08 	lds	r21, 0x0833	; 0x800833 <xMinimumEverFreeBytesRemaining+0x1>
     b32:	84 17       	cp	r24, r20
     b34:	95 07       	cpc	r25, r21
     b36:	20 f4       	brcc	.+8      	; 0xb40 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b38:	90 93 33 08 	sts	0x0833, r25	; 0x800833 <xMinimumEverFreeBytesRemaining+0x1>
     b3c:	80 93 32 08 	sts	0x0832, r24	; 0x800832 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b40:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <xBlockAllocatedBit>
     b44:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <xBlockAllocatedBit+0x1>
     b48:	28 2b       	or	r18, r24
     b4a:	39 2b       	or	r19, r25
     b4c:	3b 83       	std	Y+3, r19	; 0x03
     b4e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b54:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <xNumberOfSuccessfulAllocations>
     b58:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <xNumberOfSuccessfulAllocations+0x1>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <xNumberOfSuccessfulAllocations+0x1>
     b62:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <xNumberOfSuccessfulAllocations>
     b66:	0b c0       	rjmp	.+22     	; 0xb7e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b68:	e1 2c       	mov	r14, r1
     b6a:	f1 2c       	mov	r15, r1
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <pvPortMalloc+0x134>
     b6e:	e1 2c       	mov	r14, r1
     b70:	f1 2c       	mov	r15, r1
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <pvPortMalloc+0x134>
     b74:	e1 2c       	mov	r14, r1
     b76:	f1 2c       	mov	r15, r1
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <pvPortMalloc+0x134>
     b7a:	e1 2c       	mov	r14, r1
     b7c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b7e:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	11 f4       	brne	.+4      	; 0xb8c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b88:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b8c:	c7 01       	movw	r24, r14
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	91 f1       	breq	.+100    	; 0xc0c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     ba8:	ec 01       	movw	r28, r24
     baa:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     bac:	4a 81       	ldd	r20, Y+2	; 0x02
     bae:	5b 81       	ldd	r21, Y+3	; 0x03
     bb0:	20 91 2c 08 	lds	r18, 0x082C	; 0x80082c <xBlockAllocatedBit>
     bb4:	30 91 2d 08 	lds	r19, 0x082D	; 0x80082d <xBlockAllocatedBit+0x1>
     bb8:	ba 01       	movw	r22, r20
     bba:	62 23       	and	r22, r18
     bbc:	73 23       	and	r23, r19
     bbe:	67 2b       	or	r22, r23
     bc0:	29 f1       	breq	.+74     	; 0xc0c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     bc2:	68 81       	ld	r22, Y
     bc4:	79 81       	ldd	r23, Y+1	; 0x01
     bc6:	67 2b       	or	r22, r23
     bc8:	09 f5       	brne	.+66     	; 0xc0c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     bca:	20 95       	com	r18
     bcc:	30 95       	com	r19
     bce:	24 23       	and	r18, r20
     bd0:	35 23       	and	r19, r21
     bd2:	3b 83       	std	Y+3, r19	; 0x03
     bd4:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     bd6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	9b 81       	ldd	r25, Y+3	; 0x03
     bde:	20 91 34 08 	lds	r18, 0x0834	; 0x800834 <xFreeBytesRemaining>
     be2:	30 91 35 08 	lds	r19, 0x0835	; 0x800835 <xFreeBytesRemaining+0x1>
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <xFreeBytesRemaining+0x1>
     bee:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     bf2:	ce 01       	movw	r24, r28
     bf4:	e0 de       	rcall	.-576    	; 0x9b6 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     bf6:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <xNumberOfSuccessfulFrees>
     bfa:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <xNumberOfSuccessfulFrees+0x1>
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xNumberOfSuccessfulFrees+0x1>
     c04:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c08:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c16:	fc 01       	movw	r30, r24
     c18:	03 96       	adiw	r24, 0x03	; 3
     c1a:	92 83       	std	Z+2, r25	; 0x02
     c1c:	81 83       	std	Z+1, r24	; 0x01
     c1e:	4f ef       	ldi	r20, 0xFF	; 255
     c20:	5f ef       	ldi	r21, 0xFF	; 255
     c22:	ba 01       	movw	r22, r20
     c24:	43 83       	std	Z+3, r20	; 0x03
     c26:	54 83       	std	Z+4, r21	; 0x04
     c28:	65 83       	std	Z+5, r22	; 0x05
     c2a:	76 83       	std	Z+6, r23	; 0x06
     c2c:	90 87       	std	Z+8, r25	; 0x08
     c2e:	87 83       	std	Z+7, r24	; 0x07
     c30:	92 87       	std	Z+10, r25	; 0x0a
     c32:	81 87       	std	Z+9, r24	; 0x09
     c34:	10 82       	st	Z, r1
     c36:	08 95       	ret

00000c38 <vListInitialiseItem>:
     c38:	fc 01       	movw	r30, r24
     c3a:	13 86       	std	Z+11, r1	; 0x0b
     c3c:	12 86       	std	Z+10, r1	; 0x0a
     c3e:	08 95       	ret

00000c40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c4a:	08 81       	ld	r16, Y
     c4c:	19 81       	ldd	r17, Y+1	; 0x01
     c4e:	2a 81       	ldd	r18, Y+2	; 0x02
     c50:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c52:	0f 3f       	cpi	r16, 0xFF	; 255
     c54:	4f ef       	ldi	r20, 0xFF	; 255
     c56:	14 07       	cpc	r17, r20
     c58:	24 07       	cpc	r18, r20
     c5a:	34 07       	cpc	r19, r20
     c5c:	21 f4       	brne	.+8      	; 0xc66 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c5e:	fc 01       	movw	r30, r24
     c60:	a1 85       	ldd	r26, Z+9	; 0x09
     c62:	b2 85       	ldd	r27, Z+10	; 0x0a
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c66:	dc 01       	movw	r26, r24
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <vListInsert+0x2e>
     c6c:	df 01       	movw	r26, r30
     c6e:	14 96       	adiw	r26, 0x04	; 4
     c70:	ed 91       	ld	r30, X+
     c72:	fc 91       	ld	r31, X
     c74:	15 97       	sbiw	r26, 0x05	; 5
     c76:	40 81       	ld	r20, Z
     c78:	51 81       	ldd	r21, Z+1	; 0x01
     c7a:	62 81       	ldd	r22, Z+2	; 0x02
     c7c:	73 81       	ldd	r23, Z+3	; 0x03
     c7e:	04 17       	cp	r16, r20
     c80:	15 07       	cpc	r17, r21
     c82:	26 07       	cpc	r18, r22
     c84:	37 07       	cpc	r19, r23
     c86:	90 f7       	brcc	.-28     	; 0xc6c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c88:	14 96       	adiw	r26, 0x04	; 4
     c8a:	ed 91       	ld	r30, X+
     c8c:	fc 91       	ld	r31, X
     c8e:	15 97       	sbiw	r26, 0x05	; 5
     c90:	fd 83       	std	Y+5, r31	; 0x05
     c92:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c94:	d7 83       	std	Z+7, r29	; 0x07
     c96:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c98:	bf 83       	std	Y+7, r27	; 0x07
     c9a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c9c:	15 96       	adiw	r26, 0x05	; 5
     c9e:	dc 93       	st	X, r29
     ca0:	ce 93       	st	-X, r28
     ca2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ca4:	9b 87       	std	Y+11, r25	; 0x0b
     ca6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ca8:	fc 01       	movw	r30, r24
     caa:	20 81       	ld	r18, Z
     cac:	2f 5f       	subi	r18, 0xFF	; 255
     cae:	20 83       	st	Z, r18
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     cc0:	a2 85       	ldd	r26, Z+10	; 0x0a
     cc2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cc4:	c4 81       	ldd	r28, Z+4	; 0x04
     cc6:	d5 81       	ldd	r29, Z+5	; 0x05
     cc8:	86 81       	ldd	r24, Z+6	; 0x06
     cca:	97 81       	ldd	r25, Z+7	; 0x07
     ccc:	9f 83       	std	Y+7, r25	; 0x07
     cce:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     cd0:	c6 81       	ldd	r28, Z+6	; 0x06
     cd2:	d7 81       	ldd	r29, Z+7	; 0x07
     cd4:	84 81       	ldd	r24, Z+4	; 0x04
     cd6:	95 81       	ldd	r25, Z+5	; 0x05
     cd8:	9d 83       	std	Y+5, r25	; 0x05
     cda:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	8d 91       	ld	r24, X+
     ce0:	9c 91       	ld	r25, X
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	e8 17       	cp	r30, r24
     ce6:	f9 07       	cpc	r31, r25
     ce8:	31 f4       	brne	.+12     	; 0xcf6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cea:	86 81       	ldd	r24, Z+6	; 0x06
     cec:	97 81       	ldd	r25, Z+7	; 0x07
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	9c 93       	st	X, r25
     cf2:	8e 93       	st	-X, r24
     cf4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     cf6:	13 86       	std	Z+11, r1	; 0x0b
     cf8:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     cfa:	8c 91       	ld	r24, X
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d00:	8c 91       	ld	r24, X
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d08:	a8 95       	wdr
     d0a:	90 ec       	ldi	r25, 0xC0	; 192
     d0c:	88 e1       	ldi	r24, 0x18	; 24
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	a8 95       	wdr
     d14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d1e:	08 95       	ret

00000d20 <pxPortInitialiseStack>:
     d20:	fc 01       	movw	r30, r24
     d22:	60 83       	st	Z, r22
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	70 83       	st	Z, r23
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	10 82       	st	Z, r1
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	10 82       	st	Z, r1
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	20 e8       	ldi	r18, 0x80	; 128
     d34:	20 83       	st	Z, r18
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	10 82       	st	Z, r1
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	10 82       	st	Z, r1
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	10 82       	st	Z, r1
     d42:	77 97       	sbiw	r30, 0x17	; 23
     d44:	40 83       	st	Z, r20
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	50 83       	st	Z, r21
     d4a:	86 97       	sbiw	r24, 0x26	; 38
     d4c:	08 95       	ret

00000d4e <xPortStartScheduler>:
     d4e:	dc df       	rcall	.-72     	; 0xd08 <prvSetupTimerInterrupt>
     d50:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
     d54:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
     d58:	cd 91       	ld	r28, X+
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	dd 91       	ld	r29, X+
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	7f 90       	pop	r7
     d92:	6f 90       	pop	r6
     d94:	5f 90       	pop	r5
     d96:	4f 90       	pop	r4
     d98:	3f 90       	pop	r3
     d9a:	2f 90       	pop	r2
     d9c:	1f 90       	pop	r1
     d9e:	0f 90       	pop	r0
     da0:	0c be       	out	0x3c, r0	; 60
     da2:	0f 90       	pop	r0
     da4:	0b be       	out	0x3b, r0	; 59
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	08 95       	ret
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	08 95       	ret

00000db2 <vPortYield>:
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	0f 92       	push	r0
     dba:	0b b6       	in	r0, 0x3b	; 59
     dbc:	0f 92       	push	r0
     dbe:	0c b6       	in	r0, 0x3c	; 60
     dc0:	0f 92       	push	r0
     dc2:	1f 92       	push	r1
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 92       	push	r2
     dc8:	3f 92       	push	r3
     dca:	4f 92       	push	r4
     dcc:	5f 92       	push	r5
     dce:	6f 92       	push	r6
     dd0:	7f 92       	push	r7
     dd2:	8f 92       	push	r8
     dd4:	9f 92       	push	r9
     dd6:	af 92       	push	r10
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
     e06:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
     e0a:	0d b6       	in	r0, 0x3d	; 61
     e0c:	0d 92       	st	X+, r0
     e0e:	0e b6       	in	r0, 0x3e	; 62
     e10:	0d 92       	st	X+, r0
     e12:	0e 94 83 13 	call	0x2706	; 0x2706 <vTaskSwitchContext>
     e16:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
     e1a:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
     e1e:	cd 91       	ld	r28, X+
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	dd 91       	ld	r29, X+
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	af 90       	pop	r10
     e52:	9f 90       	pop	r9
     e54:	8f 90       	pop	r8
     e56:	7f 90       	pop	r7
     e58:	6f 90       	pop	r6
     e5a:	5f 90       	pop	r5
     e5c:	4f 90       	pop	r4
     e5e:	3f 90       	pop	r3
     e60:	2f 90       	pop	r2
     e62:	1f 90       	pop	r1
     e64:	0f 90       	pop	r0
     e66:	0c be       	out	0x3c, r0	; 60
     e68:	0f 90       	pop	r0
     e6a:	0b be       	out	0x3b, r0	; 59
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	08 95       	ret

00000e74 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	0f 92       	push	r0
     e7c:	0b b6       	in	r0, 0x3b	; 59
     e7e:	0f 92       	push	r0
     e80:	0c b6       	in	r0, 0x3c	; 60
     e82:	0f 92       	push	r0
     e84:	1f 92       	push	r1
     e86:	11 24       	eor	r1, r1
     e88:	2f 92       	push	r2
     e8a:	3f 92       	push	r3
     e8c:	4f 92       	push	r4
     e8e:	5f 92       	push	r5
     e90:	6f 92       	push	r6
     e92:	7f 92       	push	r7
     e94:	8f 92       	push	r8
     e96:	9f 92       	push	r9
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
     ec8:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
     ecc:	0d b6       	in	r0, 0x3d	; 61
     ece:	0d 92       	st	X+, r0
     ed0:	0e b6       	in	r0, 0x3e	; 62
     ed2:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     ed4:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ed6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskIncrementTick>
     eda:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     edc:	0e 94 83 13 	call	0x2706	; 0x2706 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     ee0:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
     ee4:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
     ee8:	cd 91       	ld	r28, X+
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	dd 91       	ld	r29, X+
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	5f 90       	pop	r5
     f26:	4f 90       	pop	r4
     f28:	3f 90       	pop	r3
     f2a:	2f 90       	pop	r2
     f2c:	1f 90       	pop	r1
     f2e:	0f 90       	pop	r0
     f30:	0c be       	out	0x3c, r0	; 60
     f32:	0f 90       	pop	r0
     f34:	0b be       	out	0x3b, r0	; 59
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f3c:	08 95       	ret

00000f3e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f3e:	9a df       	rcall	.-204    	; 0xe74 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f40:	18 95       	reti

00000f42 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f42:	dc 01       	movw	r26, r24
     f44:	53 96       	adiw	r26, 0x13	; 19
     f46:	2c 91       	ld	r18, X
     f48:	53 97       	sbiw	r26, 0x13	; 19
     f4a:	22 23       	and	r18, r18
     f4c:	41 f0       	breq	.+16     	; 0xf5e <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f4e:	5a 96       	adiw	r26, 0x1a	; 26
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	5b 97       	sbiw	r26, 0x1b	; 27
     f56:	90 81       	ld	r25, Z
     f58:	8a e0       	ldi	r24, 0x0A	; 10
     f5a:	89 1b       	sub	r24, r25
     f5c:	08 95       	ret
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret

00000f62 <prvIsQueueEmpty>:
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	0f 92       	push	r0
     f68:	fc 01       	movw	r30, r24
     f6a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f6c:	81 11       	cpse	r24, r1
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <prvIsQueueEmpty+0x12>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <prvIsQueueEmpty+0x14>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	08 95       	ret

00000f7c <prvIsQueueFull>:
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	fc 01       	movw	r30, r24
     f84:	26 8d       	ldd	r18, Z+30	; 0x1e
     f86:	87 8d       	ldd	r24, Z+31	; 0x1f
     f88:	28 13       	cpse	r18, r24
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <prvIsQueueFull+0x14>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <prvIsQueueFull+0x16>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	08 95       	ret

00000f98 <prvCopyDataToQueue>:
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
     fa2:	04 2f       	mov	r16, r20
     fa4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     fa6:	48 a1       	ldd	r20, Y+32	; 0x20
     fa8:	41 11       	cpse	r20, r1
     faa:	0c c0       	rjmp	.+24     	; 0xfc4 <prvCopyDataToQueue+0x2c>
     fac:	88 81       	ld	r24, Y
     fae:	99 81       	ldd	r25, Y+1	; 0x01
     fb0:	89 2b       	or	r24, r25
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <prvCopyDataToQueue+0x1e>
     fb4:	42 c0       	rjmp	.+132    	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <xTaskPriorityDisinherit>
     fbe:	1d 82       	std	Y+5, r1	; 0x05
     fc0:	1c 82       	std	Y+4, r1	; 0x04
     fc2:	42 c0       	rjmp	.+132    	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
     fc4:	01 11       	cpse	r16, r1
     fc6:	17 c0       	rjmp	.+46     	; 0xff6 <prvCopyDataToQueue+0x5e>
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <memcpy>
     fd2:	28 a1       	ldd	r18, Y+32	; 0x20
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	82 0f       	add	r24, r18
     fda:	91 1d       	adc	r25, r1
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	2c 81       	ldd	r18, Y+4	; 0x04
     fe2:	3d 81       	ldd	r19, Y+5	; 0x05
     fe4:	82 17       	cp	r24, r18
     fe6:	93 07       	cpc	r25, r19
     fe8:	50 f1       	brcs	.+84     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
     fea:	88 81       	ld	r24, Y
     fec:	99 81       	ldd	r25, Y+1	; 0x01
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	29 c0       	rjmp	.+82     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	8e 81       	ldd	r24, Y+6	; 0x06
     ffa:	9f 81       	ldd	r25, Y+7	; 0x07
     ffc:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <memcpy>
    1000:	88 a1       	ldd	r24, Y+32	; 0x20
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	91 95       	neg	r25
    1006:	81 95       	neg	r24
    1008:	91 09       	sbc	r25, r1
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	3f 81       	ldd	r19, Y+7	; 0x07
    100e:	28 0f       	add	r18, r24
    1010:	39 1f       	adc	r19, r25
    1012:	3f 83       	std	Y+7, r19	; 0x07
    1014:	2e 83       	std	Y+6, r18	; 0x06
    1016:	48 81       	ld	r20, Y
    1018:	59 81       	ldd	r21, Y+1	; 0x01
    101a:	24 17       	cp	r18, r20
    101c:	35 07       	cpc	r19, r21
    101e:	30 f4       	brcc	.+12     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	9f 83       	std	Y+7, r25	; 0x07
    102a:	8e 83       	std	Y+6, r24	; 0x06
    102c:	02 30       	cpi	r16, 0x02	; 2
    102e:	49 f4       	brne	.+18     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    1030:	11 23       	and	r17, r17
    1032:	49 f0       	breq	.+18     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    1034:	11 50       	subi	r17, 0x01	; 1
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	1f 5f       	subi	r17, 0xFF	; 255
    104a:	1e 8f       	std	Y+30, r17	; 0x1e
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	08 95       	ret

00001056 <prvCopyDataFromQueue>:
    1056:	fc 01       	movw	r30, r24
    1058:	40 a1       	ldd	r20, Z+32	; 0x20
    105a:	44 23       	and	r20, r20
    105c:	a9 f0       	breq	.+42     	; 0x1088 <prvCopyDataFromQueue+0x32>
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	26 81       	ldd	r18, Z+6	; 0x06
    1062:	37 81       	ldd	r19, Z+7	; 0x07
    1064:	24 0f       	add	r18, r20
    1066:	35 1f       	adc	r19, r21
    1068:	37 83       	std	Z+7, r19	; 0x07
    106a:	26 83       	std	Z+6, r18	; 0x06
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	20 f0       	brcs	.+8      	; 0x107e <prvCopyDataFromQueue+0x28>
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	97 83       	std	Z+7, r25	; 0x07
    107c:	86 83       	std	Z+6, r24	; 0x06
    107e:	cb 01       	movw	r24, r22
    1080:	66 81       	ldd	r22, Z+6	; 0x06
    1082:	77 81       	ldd	r23, Z+7	; 0x07
    1084:	0c 94 e8 30 	jmp	0x61d0	; 0x61d0 <memcpy>
    1088:	08 95       	ret

0000108a <prvUnlockQueue>:
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	0f 92       	push	r0
    1098:	1a a1       	ldd	r17, Y+34	; 0x22
    109a:	0b c0       	rjmp	.+22     	; 0x10b2 <prvUnlockQueue+0x28>
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	88 23       	and	r24, r24
    10a0:	51 f0       	breq	.+20     	; 0x10b6 <prvUnlockQueue+0x2c>
    10a2:	ce 01       	movw	r24, r28
    10a4:	43 96       	adiw	r24, 0x13	; 19
    10a6:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    10aa:	81 11       	cpse	r24, r1
    10ac:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <vTaskMissedYield>
    10b0:	11 50       	subi	r17, 0x01	; 1
    10b2:	11 16       	cp	r1, r17
    10b4:	9c f3       	brlt	.-26     	; 0x109c <prvUnlockQueue+0x12>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	8a a3       	std	Y+34, r24	; 0x22
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	0f 92       	push	r0
    10c4:	19 a1       	ldd	r17, Y+33	; 0x21
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <prvUnlockQueue+0x54>
    10c8:	88 85       	ldd	r24, Y+8	; 0x08
    10ca:	88 23       	and	r24, r24
    10cc:	51 f0       	breq	.+20     	; 0x10e2 <prvUnlockQueue+0x58>
    10ce:	ce 01       	movw	r24, r28
    10d0:	08 96       	adiw	r24, 0x08	; 8
    10d2:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    10d6:	81 11       	cpse	r24, r1
    10d8:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <vTaskMissedYield>
    10dc:	11 50       	subi	r17, 0x01	; 1
    10de:	11 16       	cp	r1, r17
    10e0:	9c f3       	brlt	.-26     	; 0x10c8 <prvUnlockQueue+0x3e>
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	89 a3       	std	Y+33, r24	; 0x21
    10e6:	0f 90       	pop	r0
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	08 95       	ret

000010f2 <xQueueGenericReset>:
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	0f 92       	push	r0
    10fe:	e8 81       	ld	r30, Y
    1100:	f9 81       	ldd	r31, Y+1	; 0x01
    1102:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1104:	28 a1       	ldd	r18, Y+32	; 0x20
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	82 9f       	mul	r24, r18
    110c:	a0 01       	movw	r20, r0
    110e:	83 9f       	mul	r24, r19
    1110:	50 0d       	add	r21, r0
    1112:	92 9f       	mul	r25, r18
    1114:	50 0d       	add	r21, r0
    1116:	11 24       	eor	r1, r1
    1118:	4e 0f       	add	r20, r30
    111a:	5f 1f       	adc	r21, r31
    111c:	5d 83       	std	Y+5, r21	; 0x05
    111e:	4c 83       	std	Y+4, r20	; 0x04
    1120:	1e 8e       	std	Y+30, r1	; 0x1e
    1122:	fb 83       	std	Y+3, r31	; 0x03
    1124:	ea 83       	std	Y+2, r30	; 0x02
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	28 9f       	mul	r18, r24
    112a:	a0 01       	movw	r20, r0
    112c:	29 9f       	mul	r18, r25
    112e:	50 0d       	add	r21, r0
    1130:	38 9f       	mul	r19, r24
    1132:	50 0d       	add	r21, r0
    1134:	11 24       	eor	r1, r1
    1136:	cf 01       	movw	r24, r30
    1138:	84 0f       	add	r24, r20
    113a:	95 1f       	adc	r25, r21
    113c:	9f 83       	std	Y+7, r25	; 0x07
    113e:	8e 83       	std	Y+6, r24	; 0x06
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	89 a3       	std	Y+33, r24	; 0x21
    1144:	8a a3       	std	Y+34, r24	; 0x22
    1146:	61 11       	cpse	r22, r1
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <xQueueGenericReset+0x6e>
    114a:	88 85       	ldd	r24, Y+8	; 0x08
    114c:	88 23       	and	r24, r24
    114e:	71 f0       	breq	.+28     	; 0x116c <xQueueGenericReset+0x7a>
    1150:	ce 01       	movw	r24, r28
    1152:	08 96       	adiw	r24, 0x08	; 8
    1154:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    1158:	88 23       	and	r24, r24
    115a:	41 f0       	breq	.+16     	; 0x116c <xQueueGenericReset+0x7a>
    115c:	2a de       	rcall	.-940    	; 0xdb2 <vPortYield>
    115e:	06 c0       	rjmp	.+12     	; 0x116c <xQueueGenericReset+0x7a>
    1160:	ce 01       	movw	r24, r28
    1162:	08 96       	adiw	r24, 0x08	; 8
    1164:	58 dd       	rcall	.-1360   	; 0xc16 <vListInitialise>
    1166:	ce 01       	movw	r24, r28
    1168:	43 96       	adiw	r24, 0x13	; 19
    116a:	55 dd       	rcall	.-1366   	; 0xc16 <vListInitialise>
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <prvInitialiseNewQueue>:
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	f8 01       	movw	r30, r16
    117e:	61 11       	cpse	r22, r1
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <prvInitialiseNewQueue+0x10>
    1182:	11 83       	std	Z+1, r17	; 0x01
    1184:	00 83       	st	Z, r16
    1186:	02 c0       	rjmp	.+4      	; 0x118c <prvInitialiseNewQueue+0x14>
    1188:	51 83       	std	Z+1, r21	; 0x01
    118a:	40 83       	st	Z, r20
    118c:	87 8f       	std	Z+31, r24	; 0x1f
    118e:	60 a3       	std	Z+32, r22	; 0x20
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	cf 01       	movw	r24, r30
    1194:	ae df       	rcall	.-164    	; 0x10f2 <xQueueGenericReset>
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <xQueueGenericCreate>:
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	f8 2e       	mov	r15, r24
    11ac:	e6 2e       	mov	r14, r22
    11ae:	d4 2e       	mov	r13, r20
    11b0:	86 9f       	mul	r24, r22
    11b2:	c0 01       	movw	r24, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	83 96       	adiw	r24, 0x23	; 35
    11b8:	48 dc       	rcall	.-1904   	; 0xa4a <pvPortMalloc>
    11ba:	ec 01       	movw	r28, r24
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	41 f0       	breq	.+16     	; 0x11d0 <xQueueGenericCreate+0x34>
    11c0:	8c 01       	movw	r16, r24
    11c2:	2d 2d       	mov	r18, r13
    11c4:	ac 01       	movw	r20, r24
    11c6:	4d 5d       	subi	r20, 0xDD	; 221
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	6e 2d       	mov	r22, r14
    11cc:	8f 2d       	mov	r24, r15
    11ce:	d4 df       	rcall	.-88     	; 0x1178 <prvInitialiseNewQueue>
    11d0:	ce 01       	movw	r24, r28
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	08 95       	ret

000011e2 <xQueueGenericSend>:
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	29 97       	sbiw	r28, 0x09	; 9
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	7c 01       	movw	r14, r24
    1204:	6b 01       	movw	r12, r22
    1206:	2e 83       	std	Y+6, r18	; 0x06
    1208:	3f 83       	std	Y+7, r19	; 0x07
    120a:	48 87       	std	Y+8, r20	; 0x08
    120c:	59 87       	std	Y+9, r21	; 0x09
    120e:	10 e0       	ldi	r17, 0x00	; 0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	0f 92       	push	r0
    1216:	f7 01       	movw	r30, r14
    1218:	96 8d       	ldd	r25, Z+30	; 0x1e
    121a:	87 8d       	ldd	r24, Z+31	; 0x1f
    121c:	98 17       	cp	r25, r24
    121e:	10 f0       	brcs	.+4      	; 0x1224 <xQueueGenericSend+0x42>
    1220:	02 30       	cpi	r16, 0x02	; 2
    1222:	b1 f4       	brne	.+44     	; 0x1250 <xQueueGenericSend+0x6e>
    1224:	40 2f       	mov	r20, r16
    1226:	b6 01       	movw	r22, r12
    1228:	c7 01       	movw	r24, r14
    122a:	b6 de       	rcall	.-660    	; 0xf98 <prvCopyDataToQueue>
    122c:	f7 01       	movw	r30, r14
    122e:	93 89       	ldd	r25, Z+19	; 0x13
    1230:	99 23       	and	r25, r25
    1232:	41 f0       	breq	.+16     	; 0x1244 <xQueueGenericSend+0x62>
    1234:	c7 01       	movw	r24, r14
    1236:	43 96       	adiw	r24, 0x13	; 19
    1238:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    123c:	88 23       	and	r24, r24
    123e:	21 f0       	breq	.+8      	; 0x1248 <xQueueGenericSend+0x66>
    1240:	b8 dd       	rcall	.-1168   	; 0xdb2 <vPortYield>
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <xQueueGenericSend+0x66>
    1244:	81 11       	cpse	r24, r1
    1246:	b5 dd       	rcall	.-1174   	; 0xdb2 <vPortYield>
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	4c c0       	rjmp	.+152    	; 0x12e8 <xQueueGenericSend+0x106>
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	9f 81       	ldd	r25, Y+7	; 0x07
    1254:	a8 85       	ldd	r26, Y+8	; 0x08
    1256:	b9 85       	ldd	r27, Y+9	; 0x09
    1258:	89 2b       	or	r24, r25
    125a:	8a 2b       	or	r24, r26
    125c:	8b 2b       	or	r24, r27
    125e:	21 f4       	brne	.+8      	; 0x1268 <xQueueGenericSend+0x86>
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	40 c0       	rjmp	.+128    	; 0x12e8 <xQueueGenericSend+0x106>
    1268:	11 11       	cpse	r17, r1
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <xQueueGenericSend+0x94>
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <vTaskInternalSetTimeOutState>
    1274:	11 e0       	ldi	r17, 0x01	; 1
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	a9 d7       	rcall	.+3922   	; 0x21ce <vTaskSuspendAll>
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	0f 92       	push	r0
    1282:	f7 01       	movw	r30, r14
    1284:	81 a1       	ldd	r24, Z+33	; 0x21
    1286:	8f 3f       	cpi	r24, 0xFF	; 255
    1288:	09 f4       	brne	.+2      	; 0x128c <xQueueGenericSend+0xaa>
    128a:	11 a2       	std	Z+33, r1	; 0x21
    128c:	f7 01       	movw	r30, r14
    128e:	82 a1       	ldd	r24, Z+34	; 0x22
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	09 f4       	brne	.+2      	; 0x1296 <xQueueGenericSend+0xb4>
    1294:	12 a2       	std	Z+34, r1	; 0x22
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	be 01       	movw	r22, r28
    129c:	6a 5f       	subi	r22, 0xFA	; 250
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <xTaskCheckForTimeOut>
    12a8:	81 11       	cpse	r24, r1
    12aa:	19 c0       	rjmp	.+50     	; 0x12de <xQueueGenericSend+0xfc>
    12ac:	c7 01       	movw	r24, r14
    12ae:	66 de       	rcall	.-820    	; 0xf7c <prvIsQueueFull>
    12b0:	88 23       	and	r24, r24
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <xQueueGenericSend+0xf2>
    12b4:	4e 81       	ldd	r20, Y+6	; 0x06
    12b6:	5f 81       	ldd	r21, Y+7	; 0x07
    12b8:	68 85       	ldd	r22, Y+8	; 0x08
    12ba:	79 85       	ldd	r23, Y+9	; 0x09
    12bc:	c7 01       	movw	r24, r14
    12be:	08 96       	adiw	r24, 0x08	; 8
    12c0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskPlaceOnEventList>
    12c4:	c7 01       	movw	r24, r14
    12c6:	e1 de       	rcall	.-574    	; 0x108a <prvUnlockQueue>
    12c8:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
    12cc:	81 11       	cpse	r24, r1
    12ce:	a0 cf       	rjmp	.-192    	; 0x1210 <xQueueGenericSend+0x2e>
    12d0:	70 dd       	rcall	.-1312   	; 0xdb2 <vPortYield>
    12d2:	9e cf       	rjmp	.-196    	; 0x1210 <xQueueGenericSend+0x2e>
    12d4:	c7 01       	movw	r24, r14
    12d6:	d9 de       	rcall	.-590    	; 0x108a <prvUnlockQueue>
    12d8:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
    12dc:	99 cf       	rjmp	.-206    	; 0x1210 <xQueueGenericSend+0x2e>
    12de:	c7 01       	movw	r24, r14
    12e0:	d4 de       	rcall	.-600    	; 0x108a <prvUnlockQueue>
    12e2:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	29 96       	adiw	r28, 0x09	; 9
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	08 95       	ret

00001306 <xQueueGenericSendFromISR>:
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	8a 01       	movw	r16, r20
    1314:	fc 01       	movw	r30, r24
    1316:	56 8d       	ldd	r21, Z+30	; 0x1e
    1318:	37 8d       	ldd	r19, Z+31	; 0x1f
    131a:	53 17       	cp	r21, r19
    131c:	10 f0       	brcs	.+4      	; 0x1322 <xQueueGenericSendFromISR+0x1c>
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	f9 f4       	brne	.+62     	; 0x1360 <xQueueGenericSendFromISR+0x5a>
    1322:	42 2f       	mov	r20, r18
    1324:	78 01       	movw	r14, r16
    1326:	ec 01       	movw	r28, r24
    1328:	1a a1       	ldd	r17, Y+34	; 0x22
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	ce 01       	movw	r24, r28
    132e:	34 de       	rcall	.-920    	; 0xf98 <prvCopyDataToQueue>
    1330:	1f 3f       	cpi	r17, 0xFF	; 255
    1332:	81 f4       	brne	.+32     	; 0x1354 <xQueueGenericSendFromISR+0x4e>
    1334:	8b 89       	ldd	r24, Y+19	; 0x13
    1336:	88 23       	and	r24, r24
    1338:	a9 f0       	breq	.+42     	; 0x1364 <xQueueGenericSendFromISR+0x5e>
    133a:	ce 01       	movw	r24, r28
    133c:	43 96       	adiw	r24, 0x13	; 19
    133e:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    1342:	88 23       	and	r24, r24
    1344:	89 f0       	breq	.+34     	; 0x1368 <xQueueGenericSendFromISR+0x62>
    1346:	e1 14       	cp	r14, r1
    1348:	f1 04       	cpc	r15, r1
    134a:	81 f0       	breq	.+32     	; 0x136c <xQueueGenericSendFromISR+0x66>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	f7 01       	movw	r30, r14
    1350:	80 83       	st	Z, r24
    1352:	0d c0       	rjmp	.+26     	; 0x136e <xQueueGenericSendFromISR+0x68>
    1354:	ff 24       	eor	r15, r15
    1356:	f3 94       	inc	r15
    1358:	f1 0e       	add	r15, r17
    135a:	fa a2       	std	Y+34, r15	; 0x22
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	07 c0       	rjmp	.+14     	; 0x136e <xQueueGenericSendFromISR+0x68>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	05 c0       	rjmp	.+10     	; 0x136e <xQueueGenericSendFromISR+0x68>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	03 c0       	rjmp	.+6      	; 0x136e <xQueueGenericSendFromISR+0x68>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	01 c0       	rjmp	.+2      	; 0x136e <xQueueGenericSendFromISR+0x68>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <xQueueReceive>:
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	29 97       	sbiw	r28, 0x09	; 9
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	8c 01       	movw	r16, r24
    139e:	6b 01       	movw	r12, r22
    13a0:	2e 83       	std	Y+6, r18	; 0x06
    13a2:	3f 83       	std	Y+7, r19	; 0x07
    13a4:	48 87       	std	Y+8, r20	; 0x08
    13a6:	59 87       	std	Y+9, r21	; 0x09
    13a8:	e1 2c       	mov	r14, r1
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	0f 92       	push	r0
    13b0:	f8 01       	movw	r30, r16
    13b2:	f6 8c       	ldd	r15, Z+30	; 0x1e
    13b4:	ff 20       	and	r15, r15
    13b6:	99 f0       	breq	.+38     	; 0x13de <xQueueReceive+0x62>
    13b8:	b6 01       	movw	r22, r12
    13ba:	c8 01       	movw	r24, r16
    13bc:	4c de       	rcall	.-872    	; 0x1056 <prvCopyDataFromQueue>
    13be:	fa 94       	dec	r15
    13c0:	f8 01       	movw	r30, r16
    13c2:	f6 8e       	std	Z+30, r15	; 0x1e
    13c4:	80 85       	ldd	r24, Z+8	; 0x08
    13c6:	88 23       	and	r24, r24
    13c8:	31 f0       	breq	.+12     	; 0x13d6 <xQueueReceive+0x5a>
    13ca:	c8 01       	movw	r24, r16
    13cc:	08 96       	adiw	r24, 0x08	; 8
    13ce:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    13d2:	81 11       	cpse	r24, r1
    13d4:	ee dc       	rcall	.-1572   	; 0xdb2 <vPortYield>
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	4f c0       	rjmp	.+158    	; 0x147c <xQueueReceive+0x100>
    13de:	8e 81       	ldd	r24, Y+6	; 0x06
    13e0:	9f 81       	ldd	r25, Y+7	; 0x07
    13e2:	a8 85       	ldd	r26, Y+8	; 0x08
    13e4:	b9 85       	ldd	r27, Y+9	; 0x09
    13e6:	89 2b       	or	r24, r25
    13e8:	8a 2b       	or	r24, r26
    13ea:	8b 2b       	or	r24, r27
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <xQueueReceive+0x7a>
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	43 c0       	rjmp	.+134    	; 0x147c <xQueueReceive+0x100>
    13f6:	e1 10       	cpse	r14, r1
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <xQueueReceive+0x8a>
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <vTaskInternalSetTimeOutState>
    1402:	ee 24       	eor	r14, r14
    1404:	e3 94       	inc	r14
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	e1 d6       	rcall	.+3522   	; 0x21ce <vTaskSuspendAll>
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	0f 92       	push	r0
    1412:	f8 01       	movw	r30, r16
    1414:	81 a1       	ldd	r24, Z+33	; 0x21
    1416:	8f 3f       	cpi	r24, 0xFF	; 255
    1418:	09 f4       	brne	.+2      	; 0x141c <xQueueReceive+0xa0>
    141a:	11 a2       	std	Z+33, r1	; 0x21
    141c:	f8 01       	movw	r30, r16
    141e:	82 a1       	ldd	r24, Z+34	; 0x22
    1420:	8f 3f       	cpi	r24, 0xFF	; 255
    1422:	09 f4       	brne	.+2      	; 0x1426 <xQueueReceive+0xaa>
    1424:	12 a2       	std	Z+34, r1	; 0x22
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	be 01       	movw	r22, r28
    142c:	6a 5f       	subi	r22, 0xFA	; 250
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <xTaskCheckForTimeOut>
    1438:	81 11       	cpse	r24, r1
    143a:	17 c0       	rjmp	.+46     	; 0x146a <xQueueReceive+0xee>
    143c:	c8 01       	movw	r24, r16
    143e:	91 dd       	rcall	.-1246   	; 0xf62 <prvIsQueueEmpty>
    1440:	88 23       	and	r24, r24
    1442:	79 f0       	breq	.+30     	; 0x1462 <xQueueReceive+0xe6>
    1444:	4e 81       	ldd	r20, Y+6	; 0x06
    1446:	5f 81       	ldd	r21, Y+7	; 0x07
    1448:	68 85       	ldd	r22, Y+8	; 0x08
    144a:	79 85       	ldd	r23, Y+9	; 0x09
    144c:	c8 01       	movw	r24, r16
    144e:	43 96       	adiw	r24, 0x13	; 19
    1450:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskPlaceOnEventList>
    1454:	c8 01       	movw	r24, r16
    1456:	19 de       	rcall	.-974    	; 0x108a <prvUnlockQueue>
    1458:	fa d7       	rcall	.+4084   	; 0x244e <xTaskResumeAll>
    145a:	81 11       	cpse	r24, r1
    145c:	a6 cf       	rjmp	.-180    	; 0x13aa <xQueueReceive+0x2e>
    145e:	a9 dc       	rcall	.-1710   	; 0xdb2 <vPortYield>
    1460:	a4 cf       	rjmp	.-184    	; 0x13aa <xQueueReceive+0x2e>
    1462:	c8 01       	movw	r24, r16
    1464:	12 de       	rcall	.-988    	; 0x108a <prvUnlockQueue>
    1466:	f3 d7       	rcall	.+4070   	; 0x244e <xTaskResumeAll>
    1468:	a0 cf       	rjmp	.-192    	; 0x13aa <xQueueReceive+0x2e>
    146a:	c8 01       	movw	r24, r16
    146c:	0e de       	rcall	.-996    	; 0x108a <prvUnlockQueue>
    146e:	ef d7       	rcall	.+4062   	; 0x244e <xTaskResumeAll>
    1470:	c8 01       	movw	r24, r16
    1472:	77 dd       	rcall	.-1298   	; 0xf62 <prvIsQueueEmpty>
    1474:	88 23       	and	r24, r24
    1476:	09 f4       	brne	.+2      	; 0x147a <xQueueReceive+0xfe>
    1478:	98 cf       	rjmp	.-208    	; 0x13aa <xQueueReceive+0x2e>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	29 96       	adiw	r28, 0x09	; 9
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	08 95       	ret

0000149a <xQueueSemaphoreTake>:
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	29 97       	sbiw	r28, 0x09	; 9
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	8c 01       	movw	r16, r24
    14b8:	4e 83       	std	Y+6, r20	; 0x06
    14ba:	5f 83       	std	Y+7, r21	; 0x07
    14bc:	68 87       	std	Y+8, r22	; 0x08
    14be:	79 87       	std	Y+9, r23	; 0x09
    14c0:	e1 2c       	mov	r14, r1
    14c2:	f1 2c       	mov	r15, r1
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	0f 92       	push	r0
    14ca:	f8 01       	movw	r30, r16
    14cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    14ce:	88 23       	and	r24, r24
    14d0:	c9 f0       	breq	.+50     	; 0x1504 <xQueueSemaphoreTake+0x6a>
    14d2:	81 50       	subi	r24, 0x01	; 1
    14d4:	86 8f       	std	Z+30, r24	; 0x1e
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	89 2b       	or	r24, r25
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <xQueueSemaphoreTake+0x4e>
    14de:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <pvTaskIncrementMutexHeldCount>
    14e2:	f8 01       	movw	r30, r16
    14e4:	95 83       	std	Z+5, r25	; 0x05
    14e6:	84 83       	std	Z+4, r24	; 0x04
    14e8:	f8 01       	movw	r30, r16
    14ea:	80 85       	ldd	r24, Z+8	; 0x08
    14ec:	88 23       	and	r24, r24
    14ee:	31 f0       	breq	.+12     	; 0x14fc <xQueueSemaphoreTake+0x62>
    14f0:	c8 01       	movw	r24, r16
    14f2:	08 96       	adiw	r24, 0x08	; 8
    14f4:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskRemoveFromEventList>
    14f8:	81 11       	cpse	r24, r1
    14fa:	5b dc       	rcall	.-1866   	; 0xdb2 <vPortYield>
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	6f c0       	rjmp	.+222    	; 0x15e2 <xQueueSemaphoreTake+0x148>
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	a8 85       	ldd	r26, Y+8	; 0x08
    150a:	b9 85       	ldd	r27, Y+9	; 0x09
    150c:	89 2b       	or	r24, r25
    150e:	8a 2b       	or	r24, r26
    1510:	8b 2b       	or	r24, r27
    1512:	21 f4       	brne	.+8      	; 0x151c <xQueueSemaphoreTake+0x82>
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	63 c0       	rjmp	.+198    	; 0x15e2 <xQueueSemaphoreTake+0x148>
    151c:	f1 10       	cpse	r15, r1
    151e:	06 c0       	rjmp	.+12     	; 0x152c <xQueueSemaphoreTake+0x92>
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <vTaskInternalSetTimeOutState>
    1528:	ff 24       	eor	r15, r15
    152a:	f3 94       	inc	r15
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	4e d6       	rcall	.+3228   	; 0x21ce <vTaskSuspendAll>
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	0f 92       	push	r0
    1538:	f8 01       	movw	r30, r16
    153a:	81 a1       	ldd	r24, Z+33	; 0x21
    153c:	8f 3f       	cpi	r24, 0xFF	; 255
    153e:	09 f4       	brne	.+2      	; 0x1542 <xQueueSemaphoreTake+0xa8>
    1540:	11 a2       	std	Z+33, r1	; 0x21
    1542:	f8 01       	movw	r30, r16
    1544:	82 a1       	ldd	r24, Z+34	; 0x22
    1546:	8f 3f       	cpi	r24, 0xFF	; 255
    1548:	09 f4       	brne	.+2      	; 0x154c <xQueueSemaphoreTake+0xb2>
    154a:	12 a2       	std	Z+34, r1	; 0x22
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	be 01       	movw	r22, r28
    1552:	6a 5f       	subi	r22, 0xFA	; 250
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	ce 01       	movw	r24, r28
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <xTaskCheckForTimeOut>
    155e:	81 11       	cpse	r24, r1
    1560:	26 c0       	rjmp	.+76     	; 0x15ae <xQueueSemaphoreTake+0x114>
    1562:	c8 01       	movw	r24, r16
    1564:	fe dc       	rcall	.-1540   	; 0xf62 <prvIsQueueEmpty>
    1566:	88 23       	and	r24, r24
    1568:	f1 f0       	breq	.+60     	; 0x15a6 <xQueueSemaphoreTake+0x10c>
    156a:	f8 01       	movw	r30, r16
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	89 2b       	or	r24, r25
    1572:	51 f4       	brne	.+20     	; 0x1588 <xQueueSemaphoreTake+0xee>
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
    157a:	84 81       	ldd	r24, Z+4	; 0x04
    157c:	95 81       	ldd	r25, Z+5	; 0x05
    157e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <xTaskPriorityInherit>
    1582:	e8 2e       	mov	r14, r24
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	4e 81       	ldd	r20, Y+6	; 0x06
    158a:	5f 81       	ldd	r21, Y+7	; 0x07
    158c:	68 85       	ldd	r22, Y+8	; 0x08
    158e:	79 85       	ldd	r23, Y+9	; 0x09
    1590:	c8 01       	movw	r24, r16
    1592:	43 96       	adiw	r24, 0x13	; 19
    1594:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskPlaceOnEventList>
    1598:	c8 01       	movw	r24, r16
    159a:	77 dd       	rcall	.-1298   	; 0x108a <prvUnlockQueue>
    159c:	58 d7       	rcall	.+3760   	; 0x244e <xTaskResumeAll>
    159e:	81 11       	cpse	r24, r1
    15a0:	91 cf       	rjmp	.-222    	; 0x14c4 <xQueueSemaphoreTake+0x2a>
    15a2:	07 dc       	rcall	.-2034   	; 0xdb2 <vPortYield>
    15a4:	8f cf       	rjmp	.-226    	; 0x14c4 <xQueueSemaphoreTake+0x2a>
    15a6:	c8 01       	movw	r24, r16
    15a8:	70 dd       	rcall	.-1312   	; 0x108a <prvUnlockQueue>
    15aa:	51 d7       	rcall	.+3746   	; 0x244e <xTaskResumeAll>
    15ac:	8b cf       	rjmp	.-234    	; 0x14c4 <xQueueSemaphoreTake+0x2a>
    15ae:	c8 01       	movw	r24, r16
    15b0:	6c dd       	rcall	.-1320   	; 0x108a <prvUnlockQueue>
    15b2:	4d d7       	rcall	.+3738   	; 0x244e <xTaskResumeAll>
    15b4:	c8 01       	movw	r24, r16
    15b6:	d5 dc       	rcall	.-1622   	; 0xf62 <prvIsQueueEmpty>
    15b8:	88 23       	and	r24, r24
    15ba:	09 f4       	brne	.+2      	; 0x15be <xQueueSemaphoreTake+0x124>
    15bc:	83 cf       	rjmp	.-250    	; 0x14c4 <xQueueSemaphoreTake+0x2a>
    15be:	ee 20       	and	r14, r14
    15c0:	79 f0       	breq	.+30     	; 0x15e0 <xQueueSemaphoreTake+0x146>
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	0f 92       	push	r0
    15c8:	c8 01       	movw	r24, r16
    15ca:	bb dc       	rcall	.-1674   	; 0xf42 <prvGetDisinheritPriorityAfterTimeout>
    15cc:	68 2f       	mov	r22, r24
    15ce:	f8 01       	movw	r30, r16
    15d0:	84 81       	ldd	r24, Z+4	; 0x04
    15d2:	95 81       	ldd	r25, Z+5	; 0x05
    15d4:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <vTaskPriorityDisinheritAfterTimeout>
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <xQueueSemaphoreTake+0x148>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	29 96       	adiw	r28, 0x09	; 9
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	08 95       	ret

000015fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	0f 92       	push	r0
    1608:	89 a1       	ldd	r24, Y+33	; 0x21
    160a:	8f 3f       	cpi	r24, 0xFF	; 255
    160c:	09 f4       	brne	.+2      	; 0x1610 <vQueueWaitForMessageRestricted+0x14>
    160e:	19 a2       	std	Y+33, r1	; 0x21
    1610:	8a a1       	ldd	r24, Y+34	; 0x22
    1612:	8f 3f       	cpi	r24, 0xFF	; 255
    1614:	09 f4       	brne	.+2      	; 0x1618 <vQueueWaitForMessageRestricted+0x1c>
    1616:	1a a2       	std	Y+34, r1	; 0x22
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    161c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    161e:	81 11       	cpse	r24, r1
    1620:	04 c0       	rjmp	.+8      	; 0x162a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1622:	ce 01       	movw	r24, r28
    1624:	43 96       	adiw	r24, 0x13	; 19
    1626:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    162a:	ce 01       	movw	r24, r28
    162c:	2e dd       	rcall	.-1444   	; 0x108a <prvUnlockQueue>
    }
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1634:	fc 01       	movw	r30, r24
    1636:	44 81       	ldd	r20, Z+4	; 0x04
    1638:	55 81       	ldd	r21, Z+5	; 0x05
    163a:	22 81       	ldd	r18, Z+2	; 0x02
    163c:	33 81       	ldd	r19, Z+3	; 0x03
    163e:	24 0f       	add	r18, r20
    1640:	35 1f       	adc	r19, r21
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	b9 01       	movw	r22, r18
    1648:	68 1b       	sub	r22, r24
    164a:	79 0b       	sbc	r23, r25
    164c:	cb 01       	movw	r24, r22
    164e:	64 17       	cp	r22, r20
    1650:	75 07       	cpc	r23, r21
    1652:	10 f0       	brcs	.+4      	; 0x1658 <prvBytesInBuffer+0x24>
    1654:	84 1b       	sub	r24, r20
    1656:	95 0b       	sbc	r25, r21
    1658:	08 95       	ret

0000165a <prvInitialiseNewStreamBuffer>:
    165a:	0f 93       	push	r16
    165c:	fc 01       	movw	r30, r24
    165e:	8f e0       	ldi	r24, 0x0F	; 15
    1660:	df 01       	movw	r26, r30
    1662:	1d 92       	st	X+, r1
    1664:	8a 95       	dec	r24
    1666:	e9 f7       	brne	.-6      	; 0x1662 <prvInitialiseNewStreamBuffer+0x8>
    1668:	75 87       	std	Z+13, r23	; 0x0d
    166a:	64 87       	std	Z+12, r22	; 0x0c
    166c:	55 83       	std	Z+5, r21	; 0x05
    166e:	44 83       	std	Z+4, r20	; 0x04
    1670:	37 83       	std	Z+7, r19	; 0x07
    1672:	26 83       	std	Z+6, r18	; 0x06
    1674:	06 87       	std	Z+14, r16	; 0x0e
    1676:	0f 91       	pop	r16
    1678:	08 95       	ret

0000167a <prvWriteBytesToBuffer>:
    167a:	af 92       	push	r10
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	6c 01       	movw	r12, r24
    1690:	5b 01       	movw	r10, r22
    1692:	7a 01       	movw	r14, r20
    1694:	fc 01       	movw	r30, r24
    1696:	c2 81       	ldd	r28, Z+2	; 0x02
    1698:	d3 81       	ldd	r29, Z+3	; 0x03
    169a:	04 81       	ldd	r16, Z+4	; 0x04
    169c:	15 81       	ldd	r17, Z+5	; 0x05
    169e:	0c 1b       	sub	r16, r28
    16a0:	1d 0b       	sbc	r17, r29
    16a2:	40 17       	cp	r20, r16
    16a4:	51 07       	cpc	r21, r17
    16a6:	08 f4       	brcc	.+2      	; 0x16aa <prvWriteBytesToBuffer+0x30>
    16a8:	8a 01       	movw	r16, r20
    16aa:	f6 01       	movw	r30, r12
    16ac:	84 85       	ldd	r24, Z+12	; 0x0c
    16ae:	95 85       	ldd	r25, Z+13	; 0x0d
    16b0:	a8 01       	movw	r20, r16
    16b2:	b5 01       	movw	r22, r10
    16b4:	8c 0f       	add	r24, r28
    16b6:	9d 1f       	adc	r25, r29
    16b8:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <memcpy>
    16bc:	0e 15       	cp	r16, r14
    16be:	1f 05       	cpc	r17, r15
    16c0:	58 f4       	brcc	.+22     	; 0x16d8 <prvWriteBytesToBuffer+0x5e>
    16c2:	a7 01       	movw	r20, r14
    16c4:	40 1b       	sub	r20, r16
    16c6:	51 0b       	sbc	r21, r17
    16c8:	b5 01       	movw	r22, r10
    16ca:	60 0f       	add	r22, r16
    16cc:	71 1f       	adc	r23, r17
    16ce:	f6 01       	movw	r30, r12
    16d0:	84 85       	ldd	r24, Z+12	; 0x0c
    16d2:	95 85       	ldd	r25, Z+13	; 0x0d
    16d4:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <memcpy>
    16d8:	ce 01       	movw	r24, r28
    16da:	8e 0d       	add	r24, r14
    16dc:	9f 1d       	adc	r25, r15
    16de:	f6 01       	movw	r30, r12
    16e0:	24 81       	ldd	r18, Z+4	; 0x04
    16e2:	35 81       	ldd	r19, Z+5	; 0x05
    16e4:	82 17       	cp	r24, r18
    16e6:	93 07       	cpc	r25, r19
    16e8:	10 f0       	brcs	.+4      	; 0x16ee <prvWriteBytesToBuffer+0x74>
    16ea:	82 1b       	sub	r24, r18
    16ec:	93 0b       	sbc	r25, r19
    16ee:	f6 01       	movw	r30, r12
    16f0:	93 83       	std	Z+3, r25	; 0x03
    16f2:	82 83       	std	Z+2, r24	; 0x02
    16f4:	c7 01       	movw	r24, r14
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	df 90       	pop	r13
    1704:	cf 90       	pop	r12
    1706:	bf 90       	pop	r11
    1708:	af 90       	pop	r10
    170a:	08 95       	ret

0000170c <prvWriteMessageToBuffer>:
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	1f 92       	push	r1
    171e:	1f 92       	push	r1
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	7c 01       	movw	r14, r24
    1726:	6b 01       	movw	r12, r22
    1728:	5a 83       	std	Y+2, r21	; 0x02
    172a:	49 83       	std	Y+1, r20	; 0x01
    172c:	21 15       	cp	r18, r1
    172e:	31 05       	cpc	r19, r1
    1730:	c1 f0       	breq	.+48     	; 0x1762 <prvWriteMessageToBuffer+0x56>
    1732:	fc 01       	movw	r30, r24
    1734:	86 85       	ldd	r24, Z+14	; 0x0e
    1736:	80 fd       	sbrc	r24, 0
    1738:	08 c0       	rjmp	.+16     	; 0x174a <prvWriteMessageToBuffer+0x3e>
    173a:	42 17       	cp	r20, r18
    173c:	53 07       	cpc	r21, r19
    173e:	08 f4       	brcc	.+2      	; 0x1742 <prvWriteMessageToBuffer+0x36>
    1740:	9a 01       	movw	r18, r20
    1742:	3a 83       	std	Y+2, r19	; 0x02
    1744:	29 83       	std	Y+1, r18	; 0x01
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <prvWriteMessageToBuffer+0x5c>
    174a:	20 17       	cp	r18, r16
    174c:	31 07       	cpc	r19, r17
    174e:	58 f0       	brcs	.+22     	; 0x1766 <prvWriteMessageToBuffer+0x5a>
    1750:	42 e0       	ldi	r20, 0x02	; 2
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	be 01       	movw	r22, r28
    1756:	6f 5f       	subi	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	c7 01       	movw	r24, r14
    175c:	8e df       	rcall	.-228    	; 0x167a <prvWriteBytesToBuffer>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <prvWriteMessageToBuffer+0x5c>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <prvWriteMessageToBuffer+0x5c>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	88 23       	and	r24, r24
    176a:	31 f0       	breq	.+12     	; 0x1778 <prvWriteMessageToBuffer+0x6c>
    176c:	49 81       	ldd	r20, Y+1	; 0x01
    176e:	5a 81       	ldd	r21, Y+2	; 0x02
    1770:	b6 01       	movw	r22, r12
    1772:	c7 01       	movw	r24, r14
    1774:	82 df       	rcall	.-252    	; 0x167a <prvWriteBytesToBuffer>
    1776:	02 c0       	rjmp	.+4      	; 0x177c <prvWriteMessageToBuffer+0x70>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	08 95       	ret

00001792 <prvReadBytesFromBuffer>:
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	7c 01       	movw	r14, r24
    17a8:	5b 01       	movw	r10, r22
    17aa:	e9 01       	movw	r28, r18
    17ac:	42 17       	cp	r20, r18
    17ae:	53 07       	cpc	r21, r19
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <prvReadBytesFromBuffer+0x22>
    17b2:	ea 01       	movw	r28, r20
    17b4:	20 97       	sbiw	r28, 0x00	; 0
    17b6:	81 f1       	breq	.+96     	; 0x1818 <prvReadBytesFromBuffer+0x86>
    17b8:	f7 01       	movw	r30, r14
    17ba:	00 81       	ld	r16, Z
    17bc:	11 81       	ldd	r17, Z+1	; 0x01
    17be:	84 81       	ldd	r24, Z+4	; 0x04
    17c0:	95 81       	ldd	r25, Z+5	; 0x05
    17c2:	80 1b       	sub	r24, r16
    17c4:	91 0b       	sbc	r25, r17
    17c6:	6e 01       	movw	r12, r28
    17c8:	8c 17       	cp	r24, r28
    17ca:	9d 07       	cpc	r25, r29
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <prvReadBytesFromBuffer+0x3e>
    17ce:	6c 01       	movw	r12, r24
    17d0:	f7 01       	movw	r30, r14
    17d2:	64 85       	ldd	r22, Z+12	; 0x0c
    17d4:	75 85       	ldd	r23, Z+13	; 0x0d
    17d6:	60 0f       	add	r22, r16
    17d8:	71 1f       	adc	r23, r17
    17da:	a6 01       	movw	r20, r12
    17dc:	c5 01       	movw	r24, r10
    17de:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <memcpy>
    17e2:	cc 16       	cp	r12, r28
    17e4:	dd 06       	cpc	r13, r29
    17e6:	58 f4       	brcc	.+22     	; 0x17fe <prvReadBytesFromBuffer+0x6c>
    17e8:	ae 01       	movw	r20, r28
    17ea:	4c 19       	sub	r20, r12
    17ec:	5d 09       	sbc	r21, r13
    17ee:	f7 01       	movw	r30, r14
    17f0:	64 85       	ldd	r22, Z+12	; 0x0c
    17f2:	75 85       	ldd	r23, Z+13	; 0x0d
    17f4:	c5 01       	movw	r24, r10
    17f6:	8c 0d       	add	r24, r12
    17f8:	9d 1d       	adc	r25, r13
    17fa:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <memcpy>
    17fe:	0c 0f       	add	r16, r28
    1800:	1d 1f       	adc	r17, r29
    1802:	f7 01       	movw	r30, r14
    1804:	84 81       	ldd	r24, Z+4	; 0x04
    1806:	95 81       	ldd	r25, Z+5	; 0x05
    1808:	08 17       	cp	r16, r24
    180a:	19 07       	cpc	r17, r25
    180c:	10 f0       	brcs	.+4      	; 0x1812 <prvReadBytesFromBuffer+0x80>
    180e:	08 1b       	sub	r16, r24
    1810:	19 0b       	sbc	r17, r25
    1812:	f7 01       	movw	r30, r14
    1814:	11 83       	std	Z+1, r17	; 0x01
    1816:	00 83       	st	Z, r16
    1818:	ce 01       	movw	r24, r28
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	bf 90       	pop	r11
    182c:	af 90       	pop	r10
    182e:	08 95       	ret

00001830 <prvReadMessageFromBuffer>:
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	1f 92       	push	r1
    184e:	1f 92       	push	r1
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	6c 01       	movw	r12, r24
    1856:	4b 01       	movw	r8, r22
    1858:	5a 01       	movw	r10, r20
    185a:	79 01       	movw	r14, r18
    185c:	01 15       	cp	r16, r1
    185e:	11 05       	cpc	r17, r1
    1860:	b1 f0       	breq	.+44     	; 0x188e <prvReadMessageFromBuffer+0x5e>
    1862:	fc 01       	movw	r30, r24
    1864:	60 80       	ld	r6, Z
    1866:	71 80       	ldd	r7, Z+1	; 0x01
    1868:	a8 01       	movw	r20, r16
    186a:	be 01       	movw	r22, r28
    186c:	6f 5f       	subi	r22, 0xFF	; 255
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	90 df       	rcall	.-224    	; 0x1792 <prvReadBytesFromBuffer>
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	e0 1a       	sub	r14, r16
    1878:	f1 0a       	sbc	r15, r17
    187a:	a8 16       	cp	r10, r24
    187c:	b9 06       	cpc	r11, r25
    187e:	30 f4       	brcc	.+12     	; 0x188c <prvReadMessageFromBuffer+0x5c>
    1880:	f6 01       	movw	r30, r12
    1882:	71 82       	std	Z+1, r7	; 0x01
    1884:	60 82       	st	Z, r6
    1886:	a1 2c       	mov	r10, r1
    1888:	b1 2c       	mov	r11, r1
    188a:	01 c0       	rjmp	.+2      	; 0x188e <prvReadMessageFromBuffer+0x5e>
    188c:	5c 01       	movw	r10, r24
    188e:	97 01       	movw	r18, r14
    1890:	a5 01       	movw	r20, r10
    1892:	b4 01       	movw	r22, r8
    1894:	c6 01       	movw	r24, r12
    1896:	7d df       	rcall	.-262    	; 0x1792 <prvReadBytesFromBuffer>
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	9f 90       	pop	r9
    18b2:	8f 90       	pop	r8
    18b4:	7f 90       	pop	r7
    18b6:	6f 90       	pop	r6
    18b8:	08 95       	ret

000018ba <xStreamBufferGenericCreate>:
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	ec 01       	movw	r28, r24
    18ca:	6b 01       	movw	r12, r22
    18cc:	41 30       	cpi	r20, 0x01	; 1
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <xStreamBufferGenericCreate+0x1a>
    18d0:	01 e0       	ldi	r16, 0x01	; 1
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <xStreamBufferGenericCreate+0x1c>
    18d4:	00 e0       	ldi	r16, 0x00	; 0
    18d6:	c1 14       	cp	r12, r1
    18d8:	d1 04       	cpc	r13, r1
    18da:	19 f4       	brne	.+6      	; 0x18e2 <xStreamBufferGenericCreate+0x28>
    18dc:	cc 24       	eor	r12, r12
    18de:	c3 94       	inc	r12
    18e0:	d1 2c       	mov	r13, r1
    18e2:	ce 01       	movw	r24, r28
    18e4:	40 96       	adiw	r24, 0x10	; 16
    18e6:	c8 17       	cp	r28, r24
    18e8:	d9 07       	cpc	r29, r25
    18ea:	20 f4       	brcc	.+8      	; 0x18f4 <xStreamBufferGenericCreate+0x3a>
    18ec:	21 96       	adiw	r28, 0x01	; 1
    18ee:	ad d8       	rcall	.-3750   	; 0xa4a <pvPortMalloc>
    18f0:	7c 01       	movw	r14, r24
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <xStreamBufferGenericCreate+0x3e>
    18f4:	e1 2c       	mov	r14, r1
    18f6:	f1 2c       	mov	r15, r1
    18f8:	e1 14       	cp	r14, r1
    18fa:	f1 04       	cpc	r15, r1
    18fc:	39 f0       	breq	.+14     	; 0x190c <xStreamBufferGenericCreate+0x52>
    18fe:	96 01       	movw	r18, r12
    1900:	ae 01       	movw	r20, r28
    1902:	b7 01       	movw	r22, r14
    1904:	61 5f       	subi	r22, 0xF1	; 241
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	c7 01       	movw	r24, r14
    190a:	a7 de       	rcall	.-690    	; 0x165a <prvInitialiseNewStreamBuffer>
    190c:	c7 01       	movw	r24, r14
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	08 95       	ret

0000191e <xStreamBufferReset>:
    191e:	0f 93       	push	r16
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	0f 92       	push	r0
    1926:	fc 01       	movw	r30, r24
    1928:	20 85       	ldd	r18, Z+8	; 0x08
    192a:	31 85       	ldd	r19, Z+9	; 0x09
    192c:	23 2b       	or	r18, r19
    192e:	71 f4       	brne	.+28     	; 0x194c <xStreamBufferReset+0x2e>
    1930:	22 85       	ldd	r18, Z+10	; 0x0a
    1932:	33 85       	ldd	r19, Z+11	; 0x0b
    1934:	23 2b       	or	r18, r19
    1936:	61 f4       	brne	.+24     	; 0x1950 <xStreamBufferReset+0x32>
    1938:	26 81       	ldd	r18, Z+6	; 0x06
    193a:	37 81       	ldd	r19, Z+7	; 0x07
    193c:	44 81       	ldd	r20, Z+4	; 0x04
    193e:	55 81       	ldd	r21, Z+5	; 0x05
    1940:	64 85       	ldd	r22, Z+12	; 0x0c
    1942:	75 85       	ldd	r23, Z+13	; 0x0d
    1944:	06 85       	ldd	r16, Z+14	; 0x0e
    1946:	89 de       	rcall	.-750    	; 0x165a <prvInitialiseNewStreamBuffer>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <xStreamBufferReset+0x34>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <xStreamBufferReset+0x34>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <xStreamBufferSpacesAvailable>:
    195a:	fc 01       	movw	r30, r24
    195c:	24 81       	ldd	r18, Z+4	; 0x04
    195e:	35 81       	ldd	r19, Z+5	; 0x05
    1960:	80 81       	ld	r24, Z
    1962:	91 81       	ldd	r25, Z+1	; 0x01
    1964:	82 0f       	add	r24, r18
    1966:	93 1f       	adc	r25, r19
    1968:	42 81       	ldd	r20, Z+2	; 0x02
    196a:	53 81       	ldd	r21, Z+3	; 0x03
    196c:	84 1b       	sub	r24, r20
    196e:	95 0b       	sbc	r25, r21
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	10 f0       	brcs	.+4      	; 0x197c <xStreamBufferSpacesAvailable+0x22>
    1978:	82 1b       	sub	r24, r18
    197a:	93 0b       	sbc	r25, r19
    197c:	08 95       	ret

0000197e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    197e:	2f 92       	push	r2
    1980:	3f 92       	push	r3
    1982:	4f 92       	push	r4
    1984:	5f 92       	push	r5
    1986:	6f 92       	push	r6
    1988:	7f 92       	push	r7
    198a:	8f 92       	push	r8
    198c:	9f 92       	push	r9
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	2b 97       	sbiw	r28, 0x0b	; 11
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	4c 01       	movw	r8, r24
    19b4:	7b 87       	std	Y+11, r23	; 0x0b
    19b6:	6a 87       	std	Y+10, r22	; 0x0a
    19b8:	1a 01       	movw	r2, r20
    19ba:	0e 83       	std	Y+6, r16	; 0x06
    19bc:	1f 83       	std	Y+7, r17	; 0x07
    19be:	28 87       	std	Y+8, r18	; 0x08
    19c0:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    19c2:	fc 01       	movw	r30, r24
    19c4:	84 81       	ldd	r24, Z+4	; 0x04
    19c6:	95 81       	ldd	r25, Z+5	; 0x05
    19c8:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19ca:	26 85       	ldd	r18, Z+14	; 0x0e
    19cc:	20 ff       	sbrs	r18, 0
    19ce:	0c c0       	rjmp	.+24     	; 0x19e8 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19d0:	2a 01       	movw	r4, r20
    19d2:	f2 e0       	ldi	r31, 0x02	; 2
    19d4:	4f 0e       	add	r4, r31
    19d6:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    19d8:	84 15       	cp	r24, r4
    19da:	95 05       	cpc	r25, r5
    19dc:	58 f4       	brcc	.+22     	; 0x19f4 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    19de:	1e 82       	std	Y+6, r1	; 0x06
    19e0:	1f 82       	std	Y+7, r1	; 0x07
    19e2:	18 86       	std	Y+8, r1	; 0x08
    19e4:	19 86       	std	Y+9, r1	; 0x09
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19e8:	84 17       	cp	r24, r20
    19ea:	95 07       	cpc	r25, r21
    19ec:	10 f0       	brcs	.+4      	; 0x19f2 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    19ee:	2a 01       	movw	r4, r20
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    19f2:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19f4:	8e 81       	ldd	r24, Y+6	; 0x06
    19f6:	9f 81       	ldd	r25, Y+7	; 0x07
    19f8:	a8 85       	ldd	r26, Y+8	; 0x08
    19fa:	b9 85       	ldd	r27, Y+9	; 0x09
    19fc:	89 2b       	or	r24, r25
    19fe:	8a 2b       	or	r24, r26
    1a00:	8b 2b       	or	r24, r27
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <xStreamBufferSend+0x88>
    1a04:	38 c0       	rjmp	.+112    	; 0x1a76 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1a06:	ce 01       	movw	r24, r28
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a14:	c4 01       	movw	r24, r8
    1a16:	a1 df       	rcall	.-190    	; 0x195a <xStreamBufferSpacesAvailable>
    1a18:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1a1a:	84 15       	cp	r24, r4
    1a1c:	95 05       	cpc	r25, r5
    1a1e:	40 f5       	brcc	.+80     	; 0x1a70 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 be 1a 	call	0x357c	; 0x357c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a2a:	0e 94 65 16 	call	0x2cca	; 0x2cca <xTaskGetCurrentTaskHandle>
    1a2e:	f4 01       	movw	r30, r8
    1a30:	93 87       	std	Z+11, r25	; 0x0b
    1a32:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a38:	ae 80       	ldd	r10, Y+6	; 0x06
    1a3a:	bf 80       	ldd	r11, Y+7	; 0x07
    1a3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a3e:	d9 84       	ldd	r13, Y+9	; 0x09
    1a40:	e1 2c       	mov	r14, r1
    1a42:	f1 2c       	mov	r15, r1
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	98 01       	movw	r18, r16
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	ba 01       	movw	r22, r20
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a56:	f4 01       	movw	r30, r8
    1a58:	13 86       	std	Z+11, r1	; 0x0b
    1a5a:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a5c:	be 01       	movw	r22, r28
    1a5e:	6a 5f       	subi	r22, 0xFA	; 250
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <xTaskCheckForTimeOut>
    1a6a:	88 23       	and	r24, r24
    1a6c:	81 f2       	breq	.-96     	; 0x1a0e <xStreamBufferSend+0x90>
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a70:	0f 90       	pop	r0
    1a72:	0f be       	out	0x3f, r0	; 63
                    break;
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a76:	61 2c       	mov	r6, r1
    1a78:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a7a:	61 14       	cp	r6, r1
    1a7c:	71 04       	cpc	r7, r1
    1a7e:	19 f4       	brne	.+6      	; 0x1a86 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a80:	c4 01       	movw	r24, r8
    1a82:	6b df       	rcall	.-298    	; 0x195a <xStreamBufferSpacesAvailable>
    1a84:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a86:	82 01       	movw	r16, r4
    1a88:	93 01       	movw	r18, r6
    1a8a:	a1 01       	movw	r20, r2
    1a8c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a8e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a90:	c4 01       	movw	r24, r8
    1a92:	3c de       	rcall	.-904    	; 0x170c <prvWriteMessageToBuffer>
    1a94:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1a96:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a98:	e9 f0       	breq	.+58     	; 0x1ad4 <xStreamBufferSend+0x156>
    1a9a:	c4 01       	movw	r24, r8
    1a9c:	cb dd       	rcall	.-1130   	; 0x1634 <prvBytesInBuffer>
    1a9e:	f4 01       	movw	r30, r8
    1aa0:	26 81       	ldd	r18, Z+6	; 0x06
    1aa2:	37 81       	ldd	r19, Z+7	; 0x07
    1aa4:	82 17       	cp	r24, r18
    1aa6:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1aa8:	a8 f0       	brcs	.+42     	; 0x1ad4 <xStreamBufferSend+0x156>
    1aaa:	91 d3       	rcall	.+1826   	; 0x21ce <vTaskSuspendAll>
    1aac:	f4 01       	movw	r30, r8
    1aae:	80 85       	ldd	r24, Z+8	; 0x08
    1ab0:	91 85       	ldd	r25, Z+9	; 0x09
    1ab2:	89 2b       	or	r24, r25
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <xStreamBufferSend+0x154>
    1ab6:	80 85       	ldd	r24, Z+8	; 0x08
    1ab8:	91 85       	ldd	r25, Z+9	; 0x09
    1aba:	e1 2c       	mov	r14, r1
    1abc:	f1 2c       	mov	r15, r1
    1abe:	00 e0       	ldi	r16, 0x00	; 0
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	0e 94 a5 18 	call	0x314a	; 0x314a <xTaskGenericNotify>
    1acc:	f4 01       	movw	r30, r8
    1ace:	11 86       	std	Z+9, r1	; 0x09
    1ad0:	10 86       	std	Z+8, r1	; 0x08
    1ad2:	bd d4       	rcall	.+2426   	; 0x244e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1ad4:	c6 01       	movw	r24, r12
    1ad6:	2b 96       	adiw	r28, 0x0b	; 11
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
    1afa:	7f 90       	pop	r7
    1afc:	6f 90       	pop	r6
    1afe:	5f 90       	pop	r5
    1b00:	4f 90       	pop	r4
    1b02:	3f 90       	pop	r3
    1b04:	2f 90       	pop	r2
    1b06:	08 95       	ret

00001b08 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	7b 01       	movw	r14, r22
    1b20:	5a 01       	movw	r10, r20
    1b22:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b24:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b2a:	8a 01       	movw	r16, r20
    1b2c:	0e 5f       	subi	r16, 0xFE	; 254
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1b32:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b34:	ce 01       	movw	r24, r28
    1b36:	11 df       	rcall	.-478    	; 0x195a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b38:	9c 01       	movw	r18, r24
    1b3a:	a5 01       	movw	r20, r10
    1b3c:	b7 01       	movw	r22, r14
    1b3e:	ce 01       	movw	r24, r28
    1b40:	e5 dd       	rcall	.-1078   	; 0x170c <prvWriteMessageToBuffer>
    1b42:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b44:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b46:	c1 f0       	breq	.+48     	; 0x1b78 <xStreamBufferSendFromISR+0x70>
    1b48:	ce 01       	movw	r24, r28
    1b4a:	74 dd       	rcall	.-1304   	; 0x1634 <prvBytesInBuffer>
    1b4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b50:	82 17       	cp	r24, r18
    1b52:	93 07       	cpc	r25, r19
    1b54:	88 f0       	brcs	.+34     	; 0x1b78 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b56:	88 85       	ldd	r24, Y+8	; 0x08
    1b58:	99 85       	ldd	r25, Y+9	; 0x09
    1b5a:	89 2b       	or	r24, r25
    1b5c:	69 f0       	breq	.+26     	; 0x1b78 <xStreamBufferSendFromISR+0x70>
    1b5e:	88 85       	ldd	r24, Y+8	; 0x08
    1b60:	99 85       	ldd	r25, Y+9	; 0x09
    1b62:	e1 2c       	mov	r14, r1
    1b64:	f1 2c       	mov	r15, r1
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	0e 94 9c 19 	call	0x3338	; 0x3338 <xTaskGenericNotifyFromISR>
    1b74:	19 86       	std	Y+9, r1	; 0x09
    1b76:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b78:	c5 01       	movw	r24, r10
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	08 95       	ret

00001b90 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b90:	4f 92       	push	r4
    1b92:	5f 92       	push	r5
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	ec 01       	movw	r28, r24
    1bb2:	2b 01       	movw	r4, r22
    1bb4:	3a 01       	movw	r6, r20
    1bb6:	58 01       	movw	r10, r16
    1bb8:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bbc:	80 ff       	sbrs	r24, 0
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1bc0:	68 94       	set
    1bc2:	88 24       	eor	r8, r8
    1bc4:	81 f8       	bld	r8, 1
    1bc6:	91 2c       	mov	r9, r1
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1bca:	81 2c       	mov	r8, r1
    1bcc:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1bce:	a1 14       	cp	r10, r1
    1bd0:	b1 04       	cpc	r11, r1
    1bd2:	c1 04       	cpc	r12, r1
    1bd4:	d1 04       	cpc	r13, r1
    1bd6:	41 f1       	breq	.+80     	; 0x1c28 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bde:	ce 01       	movw	r24, r28
    1be0:	29 dd       	rcall	.-1454   	; 0x1634 <prvBytesInBuffer>
    1be2:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1be4:	88 16       	cp	r8, r24
    1be6:	99 06       	cpc	r9, r25
    1be8:	48 f0       	brcs	.+18     	; 0x1bfc <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 be 1a 	call	0x357c	; 0x357c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1bf4:	0e 94 65 16 	call	0x2cca	; 0x2cca <xTaskGetCurrentTaskHandle>
    1bf8:	99 87       	std	Y+9, r25	; 0x09
    1bfa:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c00:	8e 14       	cp	r8, r14
    1c02:	9f 04       	cpc	r9, r15
    1c04:	a0 f0       	brcs	.+40     	; 0x1c2e <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1c06:	e1 2c       	mov	r14, r1
    1c08:	f1 2c       	mov	r15, r1
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	98 01       	movw	r18, r16
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	ba 01       	movw	r22, r20
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1c1c:	19 86       	std	Y+9, r1	; 0x09
    1c1e:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c20:	ce 01       	movw	r24, r28
    1c22:	08 dd       	rcall	.-1520   	; 0x1634 <prvBytesInBuffer>
    1c24:	7c 01       	movw	r14, r24
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c28:	ce 01       	movw	r24, r28
    1c2a:	04 dd       	rcall	.-1528   	; 0x1634 <prvBytesInBuffer>
    1c2c:	7c 01       	movw	r14, r24
    1c2e:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1c30:	9f 04       	cpc	r9, r15
    1c32:	e8 f4       	brcc	.+58     	; 0x1c6e <xStreamBufferReceive+0xde>
    1c34:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c36:	97 01       	movw	r18, r14
    1c38:	a3 01       	movw	r20, r6
    1c3a:	b2 01       	movw	r22, r4
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	f8 dd       	rcall	.-1040   	; 0x1830 <prvReadMessageFromBuffer>
    1c40:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c42:	89 2b       	or	r24, r25
    1c44:	b1 f0       	breq	.+44     	; 0x1c72 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c46:	c3 d2       	rcall	.+1414   	; 0x21ce <vTaskSuspendAll>
    1c48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c4c:	89 2b       	or	r24, r25
    1c4e:	69 f0       	breq	.+26     	; 0x1c6a <xStreamBufferReceive+0xda>
    1c50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c54:	e1 2c       	mov	r14, r1
    1c56:	f1 2c       	mov	r15, r1
    1c58:	00 e0       	ldi	r16, 0x00	; 0
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 a5 18 	call	0x314a	; 0x314a <xTaskGenericNotify>
    1c66:	1b 86       	std	Y+11, r1	; 0x0b
    1c68:	1a 86       	std	Y+10, r1	; 0x0a
    1c6a:	f1 d3       	rcall	.+2018   	; 0x244e <xTaskResumeAll>
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <xStreamBufferReceive+0xe2>
    1c6e:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c70:	d1 2c       	mov	r13, r1
    1c72:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	bf 90       	pop	r11
    1c86:	af 90       	pop	r10
    1c88:	9f 90       	pop	r9
    1c8a:	8f 90       	pop	r8
    1c8c:	7f 90       	pop	r7
    1c8e:	6f 90       	pop	r6
    1c90:	5f 90       	pop	r5
    1c92:	4f 90       	pop	r4
    1c94:	08 95       	ret

00001c96 <prvResetNextTaskUnblockTime>:
    1c96:	e0 91 21 16 	lds	r30, 0x1621	; 0x801621 <pxDelayedTaskList>
    1c9a:	f0 91 22 16 	lds	r31, 0x1622	; 0x801622 <pxDelayedTaskList+0x1>
    1c9e:	80 81       	ld	r24, Z
    1ca0:	81 11       	cpse	r24, r1
    1ca2:	0c c0       	rjmp	.+24     	; 0x1cbc <prvResetNextTaskUnblockTime+0x26>
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	9f ef       	ldi	r25, 0xFF	; 255
    1ca8:	dc 01       	movw	r26, r24
    1caa:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xNextTaskUnblockTime>
    1cae:	90 93 ec 15 	sts	0x15EC, r25	; 0x8015ec <xNextTaskUnblockTime+0x1>
    1cb2:	a0 93 ed 15 	sts	0x15ED, r26	; 0x8015ed <xNextTaskUnblockTime+0x2>
    1cb6:	b0 93 ee 15 	sts	0x15EE, r27	; 0x8015ee <xNextTaskUnblockTime+0x3>
    1cba:	08 95       	ret
    1cbc:	e0 91 21 16 	lds	r30, 0x1621	; 0x801621 <pxDelayedTaskList>
    1cc0:	f0 91 22 16 	lds	r31, 0x1622	; 0x801622 <pxDelayedTaskList+0x1>
    1cc4:	07 80       	ldd	r0, Z+7	; 0x07
    1cc6:	f0 85       	ldd	r31, Z+8	; 0x08
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	a2 81       	ldd	r26, Z+2	; 0x02
    1cd0:	b3 81       	ldd	r27, Z+3	; 0x03
    1cd2:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xNextTaskUnblockTime>
    1cd6:	90 93 ec 15 	sts	0x15EC, r25	; 0x8015ec <xNextTaskUnblockTime+0x1>
    1cda:	a0 93 ed 15 	sts	0x15ED, r26	; 0x8015ed <xNextTaskUnblockTime+0x2>
    1cde:	b0 93 ee 15 	sts	0x15EE, r27	; 0x8015ee <xNextTaskUnblockTime+0x3>
    1ce2:	08 95       	ret

00001ce4 <prvDeleteTCB>:
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	ec 01       	movw	r28, r24
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vPortFree>
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vPortFree>
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

00001cfe <prvInitialiseNewTask>:
    1cfe:	4f 92       	push	r4
    1d00:	5f 92       	push	r5
    1d02:	6f 92       	push	r6
    1d04:	7f 92       	push	r7
    1d06:	8f 92       	push	r8
    1d08:	9f 92       	push	r9
    1d0a:	af 92       	push	r10
    1d0c:	bf 92       	push	r11
    1d0e:	cf 92       	push	r12
    1d10:	df 92       	push	r13
    1d12:	ef 92       	push	r14
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	2c 01       	movw	r4, r24
    1d1e:	5b 01       	movw	r10, r22
    1d20:	4a 01       	movw	r8, r20
    1d22:	39 01       	movw	r6, r18
    1d24:	e6 01       	movw	r28, r12
    1d26:	65 ea       	ldi	r22, 0xA5	; 165
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2e:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <memset>
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	82 1a       	sub	r8, r18
    1d3a:	91 08       	sbc	r9, r1
    1d3c:	88 0e       	add	r8, r24
    1d3e:	99 1e       	adc	r9, r25
    1d40:	a1 14       	cp	r10, r1
    1d42:	b1 04       	cpc	r11, r1
    1d44:	89 f4       	brne	.+34     	; 0x1d68 <prvInitialiseNewTask+0x6a>
    1d46:	15 c0       	rjmp	.+42     	; 0x1d72 <prvInitialiseNewTask+0x74>
    1d48:	82 2f       	mov	r24, r18
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	f5 01       	movw	r30, r10
    1d4e:	e8 0f       	add	r30, r24
    1d50:	f9 1f       	adc	r31, r25
    1d52:	30 81       	ld	r19, Z
    1d54:	de 01       	movw	r26, r28
    1d56:	a8 0f       	add	r26, r24
    1d58:	b9 1f       	adc	r27, r25
    1d5a:	5d 96       	adiw	r26, 0x1d	; 29
    1d5c:	3c 93       	st	X, r19
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 23       	and	r24, r24
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <prvInitialiseNewTask+0x70>
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <prvInitialiseNewTask+0x6c>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	20 31       	cpi	r18, 0x10	; 16
    1d6c:	68 f3       	brcs	.-38     	; 0x1d48 <prvInitialiseNewTask+0x4a>
    1d6e:	1c a6       	std	Y+44, r1	; 0x2c
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <prvInitialiseNewTask+0x76>
    1d72:	1d 8e       	std	Y+29, r1	; 0x1d
    1d74:	0a 30       	cpi	r16, 0x0A	; 10
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <prvInitialiseNewTask+0x7c>
    1d78:	09 e0       	ldi	r16, 0x09	; 9
    1d7a:	0a 8f       	std	Y+26, r16	; 0x1a
    1d7c:	0d a7       	std	Y+45, r16	; 0x2d
    1d7e:	1e a6       	std	Y+46, r1	; 0x2e
    1d80:	ce 01       	movw	r24, r28
    1d82:	02 96       	adiw	r24, 0x02	; 2
    1d84:	0e 94 1c 06 	call	0xc38	; 0xc38 <vListInitialiseItem>
    1d88:	ce 01       	movw	r24, r28
    1d8a:	0e 96       	adiw	r24, 0x0e	; 14
    1d8c:	0e 94 1c 06 	call	0xc38	; 0xc38 <vListInitialiseItem>
    1d90:	db 87       	std	Y+11, r29	; 0x0b
    1d92:	ca 87       	std	Y+10, r28	; 0x0a
    1d94:	8a e0       	ldi	r24, 0x0A	; 10
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 e0       	ldi	r26, 0x00	; 0
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	80 1b       	sub	r24, r16
    1d9e:	91 09       	sbc	r25, r1
    1da0:	a1 09       	sbc	r26, r1
    1da2:	b1 09       	sbc	r27, r1
    1da4:	8e 87       	std	Y+14, r24	; 0x0e
    1da6:	9f 87       	std	Y+15, r25	; 0x0f
    1da8:	a8 8b       	std	Y+16, r26	; 0x10
    1daa:	b9 8b       	std	Y+17, r27	; 0x11
    1dac:	df 8b       	std	Y+23, r29	; 0x17
    1dae:	ce 8b       	std	Y+22, r28	; 0x16
    1db0:	84 e0       	ldi	r24, 0x04	; 4
    1db2:	fe 01       	movw	r30, r28
    1db4:	bf 96       	adiw	r30, 0x2f	; 47
    1db6:	df 01       	movw	r26, r30
    1db8:	1d 92       	st	X+, r1
    1dba:	8a 95       	dec	r24
    1dbc:	e9 f7       	brne	.-6      	; 0x1db8 <prvInitialiseNewTask+0xba>
    1dbe:	1b aa       	std	Y+51, r1	; 0x33
    1dc0:	a3 01       	movw	r20, r6
    1dc2:	b2 01       	movw	r22, r4
    1dc4:	c4 01       	movw	r24, r8
    1dc6:	0e 94 90 06 	call	0xd20	; 0xd20 <pxPortInitialiseStack>
    1dca:	99 83       	std	Y+1, r25	; 0x01
    1dcc:	88 83       	st	Y, r24
    1dce:	e1 14       	cp	r14, r1
    1dd0:	f1 04       	cpc	r15, r1
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <prvInitialiseNewTask+0xdc>
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	d1 83       	std	Z+1, r29	; 0x01
    1dd8:	c0 83       	st	Z, r28
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	bf 90       	pop	r11
    1dea:	af 90       	pop	r10
    1dec:	9f 90       	pop	r9
    1dee:	8f 90       	pop	r8
    1df0:	7f 90       	pop	r7
    1df2:	6f 90       	pop	r6
    1df4:	5f 90       	pop	r5
    1df6:	4f 90       	pop	r4
    1df8:	08 95       	ret

00001dfa <prvInitialiseTaskLists>:
    1dfa:	cf 93       	push	r28
    1dfc:	c0 e0       	ldi	r28, 0x00	; 0
    1dfe:	09 c0       	rjmp	.+18     	; 0x1e12 <prvInitialiseTaskLists+0x18>
    1e00:	2b e0       	ldi	r18, 0x0B	; 11
    1e02:	c2 9f       	mul	r28, r18
    1e04:	c0 01       	movw	r24, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	87 5c       	subi	r24, 0xC7	; 199
    1e0a:	99 4e       	sbci	r25, 0xE9	; 233
    1e0c:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    1e10:	cf 5f       	subi	r28, 0xFF	; 255
    1e12:	ca 30       	cpi	r28, 0x0A	; 10
    1e14:	a8 f3       	brcs	.-22     	; 0x1e00 <prvInitialiseTaskLists+0x6>
    1e16:	8e e2       	ldi	r24, 0x2E	; 46
    1e18:	96 e1       	ldi	r25, 0x16	; 22
    1e1a:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    1e1e:	83 e2       	ldi	r24, 0x23	; 35
    1e20:	96 e1       	ldi	r25, 0x16	; 22
    1e22:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    1e26:	84 e1       	ldi	r24, 0x14	; 20
    1e28:	96 e1       	ldi	r25, 0x16	; 22
    1e2a:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    1e2e:	89 e0       	ldi	r24, 0x09	; 9
    1e30:	96 e1       	ldi	r25, 0x16	; 22
    1e32:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    1e36:	8d ef       	ldi	r24, 0xFD	; 253
    1e38:	95 e1       	ldi	r25, 0x15	; 21
    1e3a:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    1e3e:	8e e2       	ldi	r24, 0x2E	; 46
    1e40:	96 e1       	ldi	r25, 0x16	; 22
    1e42:	90 93 22 16 	sts	0x1622, r25	; 0x801622 <pxDelayedTaskList+0x1>
    1e46:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <pxDelayedTaskList>
    1e4a:	83 e2       	ldi	r24, 0x23	; 35
    1e4c:	96 e1       	ldi	r25, 0x16	; 22
    1e4e:	90 93 20 16 	sts	0x1620, r25	; 0x801620 <pxOverflowDelayedTaskList+0x1>
    1e52:	80 93 1f 16 	sts	0x161F, r24	; 0x80161f <pxOverflowDelayedTaskList>
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <prvAddNewTaskToReadyList>:
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	ec 01       	movw	r28, r24
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	0f 92       	push	r0
    1e66:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <uxCurrentNumberOfTasks>
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	80 93 fc 15 	sts	0x15FC, r24	; 0x8015fc <uxCurrentNumberOfTasks>
    1e70:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1e74:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    1e78:	89 2b       	or	r24, r25
    1e7a:	51 f4       	brne	.+20     	; 0x1e90 <prvAddNewTaskToReadyList+0x36>
    1e7c:	d0 93 a8 16 	sts	0x16A8, r29	; 0x8016a8 <pxCurrentTCB+0x1>
    1e80:	c0 93 a7 16 	sts	0x16A7, r28	; 0x8016a7 <pxCurrentTCB>
    1e84:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <uxCurrentNumberOfTasks>
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 f4       	brne	.+36     	; 0x1eb0 <prvAddNewTaskToReadyList+0x56>
    1e8c:	b6 df       	rcall	.-148    	; 0x1dfa <prvInitialiseTaskLists>
    1e8e:	10 c0       	rjmp	.+32     	; 0x1eb0 <prvAddNewTaskToReadyList+0x56>
    1e90:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <xSchedulerRunning>
    1e94:	81 11       	cpse	r24, r1
    1e96:	0c c0       	rjmp	.+24     	; 0x1eb0 <prvAddNewTaskToReadyList+0x56>
    1e98:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1e9c:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    1ea0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ea2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ea4:	89 17       	cp	r24, r25
    1ea6:	20 f0       	brcs	.+8      	; 0x1eb0 <prvAddNewTaskToReadyList+0x56>
    1ea8:	d0 93 a8 16 	sts	0x16A8, r29	; 0x8016a8 <pxCurrentTCB+0x1>
    1eac:	c0 93 a7 16 	sts	0x16A7, r28	; 0x8016a7 <pxCurrentTCB>
    1eb0:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <uxTaskNumber>
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	80 93 ef 15 	sts	0x15EF, r24	; 0x8015ef <uxTaskNumber>
    1eba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ebc:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    1ec0:	8e 17       	cp	r24, r30
    1ec2:	10 f4       	brcc	.+4      	; 0x1ec8 <prvAddNewTaskToReadyList+0x6e>
    1ec4:	e0 93 f7 15 	sts	0x15F7, r30	; 0x8015f7 <uxTopReadyPriority>
    1ec8:	8b e0       	ldi	r24, 0x0B	; 11
    1eca:	8e 9f       	mul	r24, r30
    1ecc:	f0 01       	movw	r30, r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	e7 5c       	subi	r30, 0xC7	; 199
    1ed2:	f9 4e       	sbci	r31, 0xE9	; 233
    1ed4:	01 80       	ldd	r0, Z+1	; 0x01
    1ed6:	f2 81       	ldd	r31, Z+2	; 0x02
    1ed8:	e0 2d       	mov	r30, r0
    1eda:	ff 83       	std	Y+7, r31	; 0x07
    1edc:	ee 83       	std	Y+6, r30	; 0x06
    1ede:	26 81       	ldd	r18, Z+6	; 0x06
    1ee0:	37 81       	ldd	r19, Z+7	; 0x07
    1ee2:	39 87       	std	Y+9, r19	; 0x09
    1ee4:	28 87       	std	Y+8, r18	; 0x08
    1ee6:	a6 81       	ldd	r26, Z+6	; 0x06
    1ee8:	b7 81       	ldd	r27, Z+7	; 0x07
    1eea:	9e 01       	movw	r18, r28
    1eec:	2e 5f       	subi	r18, 0xFE	; 254
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	15 96       	adiw	r26, 0x05	; 5
    1ef2:	3c 93       	st	X, r19
    1ef4:	2e 93       	st	-X, r18
    1ef6:	14 97       	sbiw	r26, 0x04	; 4
    1ef8:	37 83       	std	Z+7, r19	; 0x07
    1efa:	26 83       	std	Z+6, r18	; 0x06
    1efc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1efe:	8e 9f       	mul	r24, r30
    1f00:	f0 01       	movw	r30, r0
    1f02:	11 24       	eor	r1, r1
    1f04:	e7 5c       	subi	r30, 0xC7	; 199
    1f06:	f9 4e       	sbci	r31, 0xE9	; 233
    1f08:	fd 87       	std	Y+13, r31	; 0x0d
    1f0a:	ec 87       	std	Y+12, r30	; 0x0c
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 5f       	subi	r24, 0xFF	; 255
    1f10:	80 83       	st	Z, r24
    1f12:	0f 90       	pop	r0
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <xSchedulerRunning>
    1f1a:	88 23       	and	r24, r24
    1f1c:	51 f0       	breq	.+20     	; 0x1f32 <prvAddNewTaskToReadyList+0xd8>
    1f1e:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1f22:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    1f26:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f2a:	98 17       	cp	r25, r24
    1f2c:	10 f4       	brcc	.+4      	; 0x1f32 <prvAddNewTaskToReadyList+0xd8>
    1f2e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <prvCheckTasksWaitingTermination>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	1b c0       	rjmp	.+54     	; 0x1f74 <prvCheckTasksWaitingTermination+0x3c>
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	0f 92       	push	r0
    1f44:	e0 91 10 16 	lds	r30, 0x1610	; 0x801610 <xTasksWaitingTermination+0x7>
    1f48:	f0 91 11 16 	lds	r31, 0x1611	; 0x801611 <xTasksWaitingTermination+0x8>
    1f4c:	c0 85       	ldd	r28, Z+8	; 0x08
    1f4e:	d1 85       	ldd	r29, Z+9	; 0x09
    1f50:	ce 01       	movw	r24, r28
    1f52:	02 96       	adiw	r24, 0x02	; 2
    1f54:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
    1f58:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <uxCurrentNumberOfTasks>
    1f5c:	81 50       	subi	r24, 0x01	; 1
    1f5e:	80 93 fc 15 	sts	0x15FC, r24	; 0x8015fc <uxCurrentNumberOfTasks>
    1f62:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxDeletedTasksWaitingCleanUp>
    1f66:	81 50       	subi	r24, 0x01	; 1
    1f68:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <uxDeletedTasksWaitingCleanUp>
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	ce 01       	movw	r24, r28
    1f72:	b8 de       	rcall	.-656    	; 0x1ce4 <prvDeleteTCB>
    1f74:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxDeletedTasksWaitingCleanUp>
    1f78:	81 11       	cpse	r24, r1
    1f7a:	e1 cf       	rjmp	.-62     	; 0x1f3e <prvCheckTasksWaitingTermination+0x6>
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	08 95       	ret

00001f82 <prvAddCurrentTaskToDelayedList>:
    1f82:	8f 92       	push	r8
    1f84:	9f 92       	push	r9
    1f86:	af 92       	push	r10
    1f88:	bf 92       	push	r11
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
    1f9a:	c4 2f       	mov	r28, r20
    1f9c:	80 90 f8 15 	lds	r8, 0x15F8	; 0x8015f8 <xTickCount>
    1fa0:	90 90 f9 15 	lds	r9, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    1fa4:	a0 90 fa 15 	lds	r10, 0x15FA	; 0x8015fa <xTickCount+0x2>
    1fa8:	b0 90 fb 15 	lds	r11, 0x15FB	; 0x8015fb <xTickCount+0x3>
    1fac:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1fb0:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    1fb4:	02 96       	adiw	r24, 0x02	; 2
    1fb6:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	c8 16       	cp	r12, r24
    1fbe:	d8 06       	cpc	r13, r24
    1fc0:	e8 06       	cpc	r14, r24
    1fc2:	f8 06       	cpc	r15, r24
    1fc4:	b1 f5       	brne	.+108    	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    1fc6:	cc 23       	and	r28, r28
    1fc8:	a1 f1       	breq	.+104    	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    1fca:	ed ef       	ldi	r30, 0xFD	; 253
    1fcc:	f5 e1       	ldi	r31, 0x15	; 21
    1fce:	a1 81       	ldd	r26, Z+1	; 0x01
    1fd0:	b2 81       	ldd	r27, Z+2	; 0x02
    1fd2:	c0 91 a7 16 	lds	r28, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1fd6:	d0 91 a8 16 	lds	r29, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    1fda:	bf 83       	std	Y+7, r27	; 0x07
    1fdc:	ae 83       	std	Y+6, r26	; 0x06
    1fde:	c0 91 a7 16 	lds	r28, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1fe2:	d0 91 a8 16 	lds	r29, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    1fe6:	16 96       	adiw	r26, 0x06	; 6
    1fe8:	8d 91       	ld	r24, X+
    1fea:	9c 91       	ld	r25, X
    1fec:	17 97       	sbiw	r26, 0x07	; 7
    1fee:	99 87       	std	Y+9, r25	; 0x09
    1ff0:	88 87       	std	Y+8, r24	; 0x08
    1ff2:	16 96       	adiw	r26, 0x06	; 6
    1ff4:	cd 91       	ld	r28, X+
    1ff6:	dc 91       	ld	r29, X
    1ff8:	17 97       	sbiw	r26, 0x07	; 7
    1ffa:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    1ffe:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2002:	02 96       	adiw	r24, 0x02	; 2
    2004:	9d 83       	std	Y+5, r25	; 0x05
    2006:	8c 83       	std	Y+4, r24	; 0x04
    2008:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    200c:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2010:	02 96       	adiw	r24, 0x02	; 2
    2012:	17 96       	adiw	r26, 0x07	; 7
    2014:	9c 93       	st	X, r25
    2016:	8e 93       	st	-X, r24
    2018:	16 97       	sbiw	r26, 0x06	; 6
    201a:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    201e:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2022:	1d 96       	adiw	r26, 0x0d	; 13
    2024:	fc 93       	st	X, r31
    2026:	ee 93       	st	-X, r30
    2028:	1c 97       	sbiw	r26, 0x0c	; 12
    202a:	80 81       	ld	r24, Z
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	80 83       	st	Z, r24
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    2032:	c8 0c       	add	r12, r8
    2034:	d9 1c       	adc	r13, r9
    2036:	ea 1c       	adc	r14, r10
    2038:	fb 1c       	adc	r15, r11
    203a:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    203e:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2042:	c2 82       	std	Z+2, r12	; 0x02
    2044:	d3 82       	std	Z+3, r13	; 0x03
    2046:	e4 82       	std	Z+4, r14	; 0x04
    2048:	f5 82       	std	Z+5, r15	; 0x05
    204a:	c8 14       	cp	r12, r8
    204c:	d9 04       	cpc	r13, r9
    204e:	ea 04       	cpc	r14, r10
    2050:	fb 04       	cpc	r15, r11
    2052:	68 f4       	brcc	.+26     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    2054:	60 91 a7 16 	lds	r22, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2058:	70 91 a8 16 	lds	r23, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    205c:	80 91 1f 16 	lds	r24, 0x161F	; 0x80161f <pxOverflowDelayedTaskList>
    2060:	90 91 20 16 	lds	r25, 0x1620	; 0x801620 <pxOverflowDelayedTaskList+0x1>
    2064:	6e 5f       	subi	r22, 0xFE	; 254
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	0e 94 20 06 	call	0xc40	; 0xc40 <vListInsert>
    206c:	21 c0       	rjmp	.+66     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    206e:	60 91 a7 16 	lds	r22, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2072:	70 91 a8 16 	lds	r23, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2076:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <pxDelayedTaskList>
    207a:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <pxDelayedTaskList+0x1>
    207e:	6e 5f       	subi	r22, 0xFE	; 254
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	0e 94 20 06 	call	0xc40	; 0xc40 <vListInsert>
    2086:	80 91 eb 15 	lds	r24, 0x15EB	; 0x8015eb <xNextTaskUnblockTime>
    208a:	90 91 ec 15 	lds	r25, 0x15EC	; 0x8015ec <xNextTaskUnblockTime+0x1>
    208e:	a0 91 ed 15 	lds	r26, 0x15ED	; 0x8015ed <xNextTaskUnblockTime+0x2>
    2092:	b0 91 ee 15 	lds	r27, 0x15EE	; 0x8015ee <xNextTaskUnblockTime+0x3>
    2096:	c8 16       	cp	r12, r24
    2098:	d9 06       	cpc	r13, r25
    209a:	ea 06       	cpc	r14, r26
    209c:	fb 06       	cpc	r15, r27
    209e:	40 f4       	brcc	.+16     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    20a0:	c0 92 eb 15 	sts	0x15EB, r12	; 0x8015eb <xNextTaskUnblockTime>
    20a4:	d0 92 ec 15 	sts	0x15EC, r13	; 0x8015ec <xNextTaskUnblockTime+0x1>
    20a8:	e0 92 ed 15 	sts	0x15ED, r14	; 0x8015ed <xNextTaskUnblockTime+0x2>
    20ac:	f0 92 ee 15 	sts	0x15EE, r15	; 0x8015ee <xNextTaskUnblockTime+0x3>
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
    20bc:	bf 90       	pop	r11
    20be:	af 90       	pop	r10
    20c0:	9f 90       	pop	r9
    20c2:	8f 90       	pop	r8
    20c4:	08 95       	ret

000020c6 <xTaskCreate>:
    20c6:	2f 92       	push	r2
    20c8:	3f 92       	push	r3
    20ca:	4f 92       	push	r4
    20cc:	5f 92       	push	r5
    20ce:	6f 92       	push	r6
    20d0:	7f 92       	push	r7
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	3c 01       	movw	r6, r24
    20ea:	1b 01       	movw	r2, r22
    20ec:	4a 01       	movw	r8, r20
    20ee:	29 01       	movw	r4, r18
    20f0:	ca 01       	movw	r24, r20
    20f2:	0e 94 25 05 	call	0xa4a	; 0xa4a <pvPortMalloc>
    20f6:	6c 01       	movw	r12, r24
    20f8:	89 2b       	or	r24, r25
    20fa:	71 f0       	breq	.+28     	; 0x2118 <xTaskCreate+0x52>
    20fc:	84 e3       	ldi	r24, 0x34	; 52
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 25 05 	call	0xa4a	; 0xa4a <pvPortMalloc>
    2104:	ec 01       	movw	r28, r24
    2106:	89 2b       	or	r24, r25
    2108:	19 f0       	breq	.+6      	; 0x2110 <xTaskCreate+0x4a>
    210a:	dc 8e       	std	Y+28, r13	; 0x1c
    210c:	cb 8e       	std	Y+27, r12	; 0x1b
    210e:	06 c0       	rjmp	.+12     	; 0x211c <xTaskCreate+0x56>
    2110:	c6 01       	movw	r24, r12
    2112:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vPortFree>
    2116:	02 c0       	rjmp	.+4      	; 0x211c <xTaskCreate+0x56>
    2118:	c0 e0       	ldi	r28, 0x00	; 0
    211a:	d0 e0       	ldi	r29, 0x00	; 0
    211c:	20 97       	sbiw	r28, 0x00	; 0
    211e:	61 f0       	breq	.+24     	; 0x2138 <xTaskCreate+0x72>
    2120:	a1 2c       	mov	r10, r1
    2122:	b1 2c       	mov	r11, r1
    2124:	6e 01       	movw	r12, r28
    2126:	92 01       	movw	r18, r4
    2128:	a4 01       	movw	r20, r8
    212a:	b1 01       	movw	r22, r2
    212c:	c3 01       	movw	r24, r6
    212e:	e7 dd       	rcall	.-1074   	; 0x1cfe <prvInitialiseNewTask>
    2130:	ce 01       	movw	r24, r28
    2132:	93 de       	rcall	.-730    	; 0x1e5a <prvAddNewTaskToReadyList>
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	01 c0       	rjmp	.+2      	; 0x213a <xTaskCreate+0x74>
    2138:	8f ef       	ldi	r24, 0xFF	; 255
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	5f 90       	pop	r5
    2156:	4f 90       	pop	r4
    2158:	3f 90       	pop	r3
    215a:	2f 90       	pop	r2
    215c:	08 95       	ret

0000215e <vTaskStartScheduler>:
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	0f 2e       	mov	r0, r31
    2166:	f9 ee       	ldi	r31, 0xE9	; 233
    2168:	ef 2e       	mov	r14, r31
    216a:	f5 e1       	ldi	r31, 0x15	; 21
    216c:	ff 2e       	mov	r15, r31
    216e:	f0 2d       	mov	r31, r0
    2170:	00 e0       	ldi	r16, 0x00	; 0
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 ec       	ldi	r20, 0xC0	; 192
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	63 e3       	ldi	r22, 0x33	; 51
    217c:	73 e0       	ldi	r23, 0x03	; 3
    217e:	8d ec       	ldi	r24, 0xCD	; 205
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a1 df       	rcall	.-190    	; 0x20c6 <xTaskCreate>
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	11 f4       	brne	.+4      	; 0x218c <vTaskStartScheduler+0x2e>
    2188:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <xTimerCreateTimerTask>
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	c9 f4       	brne	.+50     	; 0x21c2 <vTaskStartScheduler+0x64>
    2190:	f8 94       	cli
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	9f ef       	ldi	r25, 0xFF	; 255
    2196:	dc 01       	movw	r26, r24
    2198:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xNextTaskUnblockTime>
    219c:	90 93 ec 15 	sts	0x15EC, r25	; 0x8015ec <xNextTaskUnblockTime+0x1>
    21a0:	a0 93 ed 15 	sts	0x15ED, r26	; 0x8015ed <xNextTaskUnblockTime+0x2>
    21a4:	b0 93 ee 15 	sts	0x15EE, r27	; 0x8015ee <xNextTaskUnblockTime+0x3>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	80 93 f6 15 	sts	0x15F6, r24	; 0x8015f6 <xSchedulerRunning>
    21ae:	10 92 f8 15 	sts	0x15F8, r1	; 0x8015f8 <xTickCount>
    21b2:	10 92 f9 15 	sts	0x15F9, r1	; 0x8015f9 <xTickCount+0x1>
    21b6:	10 92 fa 15 	sts	0x15FA, r1	; 0x8015fa <xTickCount+0x2>
    21ba:	10 92 fb 15 	sts	0x15FB, r1	; 0x8015fb <xTickCount+0x3>
    21be:	0e 94 a7 06 	call	0xd4e	; 0xd4e <xPortStartScheduler>
    21c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	08 95       	ret

000021ce <vTaskSuspendAll>:
    21ce:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	80 93 e8 15 	sts	0x15E8, r24	; 0x8015e8 <uxSchedulerSuspended>
    21d8:	08 95       	ret

000021da <xTaskGetTickCount>:
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	0f 92       	push	r0
    21e0:	60 91 f8 15 	lds	r22, 0x15F8	; 0x8015f8 <xTickCount>
    21e4:	70 91 f9 15 	lds	r23, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    21e8:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <xTickCount+0x2>
    21ec:	90 91 fb 15 	lds	r25, 0x15FB	; 0x8015fb <xTickCount+0x3>
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	08 95       	ret

000021f6 <xTaskIncrementTick>:
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    2206:	81 11       	cpse	r24, r1
    2208:	05 c1       	rjmp	.+522    	; 0x2414 <__stack+0x215>
    220a:	c0 90 f8 15 	lds	r12, 0x15F8	; 0x8015f8 <xTickCount>
    220e:	d0 90 f9 15 	lds	r13, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    2212:	e0 90 fa 15 	lds	r14, 0x15FA	; 0x8015fa <xTickCount+0x2>
    2216:	f0 90 fb 15 	lds	r15, 0x15FB	; 0x8015fb <xTickCount+0x3>
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	c8 1a       	sub	r12, r24
    221e:	d8 0a       	sbc	r13, r24
    2220:	e8 0a       	sbc	r14, r24
    2222:	f8 0a       	sbc	r15, r24
    2224:	c0 92 f8 15 	sts	0x15F8, r12	; 0x8015f8 <xTickCount>
    2228:	d0 92 f9 15 	sts	0x15F9, r13	; 0x8015f9 <xTickCount+0x1>
    222c:	e0 92 fa 15 	sts	0x15FA, r14	; 0x8015fa <xTickCount+0x2>
    2230:	f0 92 fb 15 	sts	0x15FB, r15	; 0x8015fb <xTickCount+0x3>
    2234:	c1 14       	cp	r12, r1
    2236:	d1 04       	cpc	r13, r1
    2238:	e1 04       	cpc	r14, r1
    223a:	f1 04       	cpc	r15, r1
    223c:	b1 f4       	brne	.+44     	; 0x226a <__stack+0x6b>
    223e:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <pxDelayedTaskList>
    2242:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <pxDelayedTaskList+0x1>
    2246:	20 91 1f 16 	lds	r18, 0x161F	; 0x80161f <pxOverflowDelayedTaskList>
    224a:	30 91 20 16 	lds	r19, 0x1620	; 0x801620 <pxOverflowDelayedTaskList+0x1>
    224e:	30 93 22 16 	sts	0x1622, r19	; 0x801622 <pxDelayedTaskList+0x1>
    2252:	20 93 21 16 	sts	0x1621, r18	; 0x801621 <pxDelayedTaskList>
    2256:	90 93 20 16 	sts	0x1620, r25	; 0x801620 <pxOverflowDelayedTaskList+0x1>
    225a:	80 93 1f 16 	sts	0x161F, r24	; 0x80161f <pxOverflowDelayedTaskList>
    225e:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <xNumOfOverflows>
    2262:	8f 5f       	subi	r24, 0xFF	; 255
    2264:	80 93 f0 15 	sts	0x15F0, r24	; 0x8015f0 <xNumOfOverflows>
    2268:	16 dd       	rcall	.-1492   	; 0x1c96 <prvResetNextTaskUnblockTime>
    226a:	80 91 eb 15 	lds	r24, 0x15EB	; 0x8015eb <xNextTaskUnblockTime>
    226e:	90 91 ec 15 	lds	r25, 0x15EC	; 0x8015ec <xNextTaskUnblockTime+0x1>
    2272:	a0 91 ed 15 	lds	r26, 0x15ED	; 0x8015ed <xNextTaskUnblockTime+0x2>
    2276:	b0 91 ee 15 	lds	r27, 0x15EE	; 0x8015ee <xNextTaskUnblockTime+0x3>
    227a:	c8 16       	cp	r12, r24
    227c:	d9 06       	cpc	r13, r25
    227e:	ea 06       	cpc	r14, r26
    2280:	fb 06       	cpc	r15, r27
    2282:	20 f4       	brcc	.+8      	; 0x228c <__stack+0x8d>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	b2 c0       	rjmp	.+356    	; 0x23ec <__stack+0x1ed>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	01 c0       	rjmp	.+2      	; 0x228e <__stack+0x8f>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	e0 91 21 16 	lds	r30, 0x1621	; 0x801621 <pxDelayedTaskList>
    2292:	f0 91 22 16 	lds	r31, 0x1622	; 0x801622 <pxDelayedTaskList+0x1>
    2296:	90 81       	ld	r25, Z
    2298:	91 11       	cpse	r25, r1
    229a:	0c c0       	rjmp	.+24     	; 0x22b4 <__stack+0xb5>
    229c:	4f ef       	ldi	r20, 0xFF	; 255
    229e:	5f ef       	ldi	r21, 0xFF	; 255
    22a0:	ba 01       	movw	r22, r20
    22a2:	40 93 eb 15 	sts	0x15EB, r20	; 0x8015eb <xNextTaskUnblockTime>
    22a6:	50 93 ec 15 	sts	0x15EC, r21	; 0x8015ec <xNextTaskUnblockTime+0x1>
    22aa:	60 93 ed 15 	sts	0x15ED, r22	; 0x8015ed <xNextTaskUnblockTime+0x2>
    22ae:	70 93 ee 15 	sts	0x15EE, r23	; 0x8015ee <xNextTaskUnblockTime+0x3>
    22b2:	9c c0       	rjmp	.+312    	; 0x23ec <__stack+0x1ed>
    22b4:	e0 91 21 16 	lds	r30, 0x1621	; 0x801621 <pxDelayedTaskList>
    22b8:	f0 91 22 16 	lds	r31, 0x1622	; 0x801622 <pxDelayedTaskList+0x1>
    22bc:	07 80       	ldd	r0, Z+7	; 0x07
    22be:	f0 85       	ldd	r31, Z+8	; 0x08
    22c0:	e0 2d       	mov	r30, r0
    22c2:	00 84       	ldd	r0, Z+8	; 0x08
    22c4:	f1 85       	ldd	r31, Z+9	; 0x09
    22c6:	e0 2d       	mov	r30, r0
    22c8:	42 81       	ldd	r20, Z+2	; 0x02
    22ca:	53 81       	ldd	r21, Z+3	; 0x03
    22cc:	64 81       	ldd	r22, Z+4	; 0x04
    22ce:	75 81       	ldd	r23, Z+5	; 0x05
    22d0:	c4 16       	cp	r12, r20
    22d2:	d5 06       	cpc	r13, r21
    22d4:	e6 06       	cpc	r14, r22
    22d6:	f7 06       	cpc	r15, r23
    22d8:	48 f4       	brcc	.+18     	; 0x22ec <__stack+0xed>
    22da:	40 93 eb 15 	sts	0x15EB, r20	; 0x8015eb <xNextTaskUnblockTime>
    22de:	50 93 ec 15 	sts	0x15EC, r21	; 0x8015ec <xNextTaskUnblockTime+0x1>
    22e2:	60 93 ed 15 	sts	0x15ED, r22	; 0x8015ed <xNextTaskUnblockTime+0x2>
    22e6:	70 93 ee 15 	sts	0x15EE, r23	; 0x8015ee <xNextTaskUnblockTime+0x3>
    22ea:	80 c0       	rjmp	.+256    	; 0x23ec <__stack+0x1ed>
    22ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    22ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    22f0:	c6 81       	ldd	r28, Z+6	; 0x06
    22f2:	d7 81       	ldd	r29, Z+7	; 0x07
    22f4:	20 85       	ldd	r18, Z+8	; 0x08
    22f6:	31 85       	ldd	r19, Z+9	; 0x09
    22f8:	3f 83       	std	Y+7, r19	; 0x07
    22fa:	2e 83       	std	Y+6, r18	; 0x06
    22fc:	c0 85       	ldd	r28, Z+8	; 0x08
    22fe:	d1 85       	ldd	r29, Z+9	; 0x09
    2300:	26 81       	ldd	r18, Z+6	; 0x06
    2302:	37 81       	ldd	r19, Z+7	; 0x07
    2304:	3d 83       	std	Y+5, r19	; 0x05
    2306:	2c 83       	std	Y+4, r18	; 0x04
    2308:	11 96       	adiw	r26, 0x01	; 1
    230a:	4d 91       	ld	r20, X+
    230c:	5c 91       	ld	r21, X
    230e:	12 97       	sbiw	r26, 0x02	; 2
    2310:	9f 01       	movw	r18, r30
    2312:	2e 5f       	subi	r18, 0xFE	; 254
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	42 17       	cp	r20, r18
    2318:	53 07       	cpc	r21, r19
    231a:	31 f4       	brne	.+12     	; 0x2328 <__stack+0x129>
    231c:	40 85       	ldd	r20, Z+8	; 0x08
    231e:	51 85       	ldd	r21, Z+9	; 0x09
    2320:	12 96       	adiw	r26, 0x02	; 2
    2322:	5c 93       	st	X, r21
    2324:	4e 93       	st	-X, r20
    2326:	11 97       	sbiw	r26, 0x01	; 1
    2328:	15 86       	std	Z+13, r1	; 0x0d
    232a:	14 86       	std	Z+12, r1	; 0x0c
    232c:	9c 91       	ld	r25, X
    232e:	91 50       	subi	r25, 0x01	; 1
    2330:	9c 93       	st	X, r25
    2332:	a0 8d       	ldd	r26, Z+24	; 0x18
    2334:	b1 8d       	ldd	r27, Z+25	; 0x19
    2336:	10 97       	sbiw	r26, 0x00	; 0
    2338:	09 f1       	breq	.+66     	; 0x237c <__stack+0x17d>
    233a:	c2 89       	ldd	r28, Z+18	; 0x12
    233c:	d3 89       	ldd	r29, Z+19	; 0x13
    233e:	44 89       	ldd	r20, Z+20	; 0x14
    2340:	55 89       	ldd	r21, Z+21	; 0x15
    2342:	5f 83       	std	Y+7, r21	; 0x07
    2344:	4e 83       	std	Y+6, r20	; 0x06
    2346:	c4 89       	ldd	r28, Z+20	; 0x14
    2348:	d5 89       	ldd	r29, Z+21	; 0x15
    234a:	42 89       	ldd	r20, Z+18	; 0x12
    234c:	53 89       	ldd	r21, Z+19	; 0x13
    234e:	5d 83       	std	Y+5, r21	; 0x05
    2350:	4c 83       	std	Y+4, r20	; 0x04
    2352:	11 96       	adiw	r26, 0x01	; 1
    2354:	6d 91       	ld	r22, X+
    2356:	7c 91       	ld	r23, X
    2358:	12 97       	sbiw	r26, 0x02	; 2
    235a:	af 01       	movw	r20, r30
    235c:	42 5f       	subi	r20, 0xF2	; 242
    235e:	5f 4f       	sbci	r21, 0xFF	; 255
    2360:	64 17       	cp	r22, r20
    2362:	75 07       	cpc	r23, r21
    2364:	31 f4       	brne	.+12     	; 0x2372 <__stack+0x173>
    2366:	44 89       	ldd	r20, Z+20	; 0x14
    2368:	55 89       	ldd	r21, Z+21	; 0x15
    236a:	12 96       	adiw	r26, 0x02	; 2
    236c:	5c 93       	st	X, r21
    236e:	4e 93       	st	-X, r20
    2370:	11 97       	sbiw	r26, 0x01	; 1
    2372:	11 8e       	std	Z+25, r1	; 0x19
    2374:	10 8e       	std	Z+24, r1	; 0x18
    2376:	9c 91       	ld	r25, X
    2378:	91 50       	subi	r25, 0x01	; 1
    237a:	9c 93       	st	X, r25
    237c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    237e:	90 91 f7 15 	lds	r25, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    2382:	9a 17       	cp	r25, r26
    2384:	10 f4       	brcc	.+4      	; 0x238a <__stack+0x18b>
    2386:	a0 93 f7 15 	sts	0x15F7, r26	; 0x8015f7 <uxTopReadyPriority>
    238a:	9b e0       	ldi	r25, 0x0B	; 11
    238c:	9a 9f       	mul	r25, r26
    238e:	d0 01       	movw	r26, r0
    2390:	11 24       	eor	r1, r1
    2392:	a7 5c       	subi	r26, 0xC7	; 199
    2394:	b9 4e       	sbci	r27, 0xE9	; 233
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	0d 90       	ld	r0, X+
    239a:	bc 91       	ld	r27, X
    239c:	a0 2d       	mov	r26, r0
    239e:	b7 83       	std	Z+7, r27	; 0x07
    23a0:	a6 83       	std	Z+6, r26	; 0x06
    23a2:	16 96       	adiw	r26, 0x06	; 6
    23a4:	4d 91       	ld	r20, X+
    23a6:	5c 91       	ld	r21, X
    23a8:	17 97       	sbiw	r26, 0x07	; 7
    23aa:	51 87       	std	Z+9, r21	; 0x09
    23ac:	40 87       	std	Z+8, r20	; 0x08
    23ae:	16 96       	adiw	r26, 0x06	; 6
    23b0:	cd 91       	ld	r28, X+
    23b2:	dc 91       	ld	r29, X
    23b4:	17 97       	sbiw	r26, 0x07	; 7
    23b6:	3d 83       	std	Y+5, r19	; 0x05
    23b8:	2c 83       	std	Y+4, r18	; 0x04
    23ba:	17 96       	adiw	r26, 0x07	; 7
    23bc:	3c 93       	st	X, r19
    23be:	2e 93       	st	-X, r18
    23c0:	16 97       	sbiw	r26, 0x06	; 6
    23c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23c4:	9a 9f       	mul	r25, r26
    23c6:	d0 01       	movw	r26, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	a7 5c       	subi	r26, 0xC7	; 199
    23cc:	b9 4e       	sbci	r27, 0xE9	; 233
    23ce:	b5 87       	std	Z+13, r27	; 0x0d
    23d0:	a4 87       	std	Z+12, r26	; 0x0c
    23d2:	9c 91       	ld	r25, X
    23d4:	9f 5f       	subi	r25, 0xFF	; 255
    23d6:	9c 93       	st	X, r25
    23d8:	22 8d       	ldd	r18, Z+26	; 0x1a
    23da:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    23de:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    23e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    23e4:	29 17       	cp	r18, r25
    23e6:	08 f0       	brcs	.+2      	; 0x23ea <__stack+0x1eb>
    23e8:	4f cf       	rjmp	.-354    	; 0x2288 <__stack+0x89>
    23ea:	51 cf       	rjmp	.-350    	; 0x228e <__stack+0x8f>
    23ec:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    23f0:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    23f4:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23f6:	9b e0       	ldi	r25, 0x0B	; 11
    23f8:	e9 9f       	mul	r30, r25
    23fa:	f0 01       	movw	r30, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	e7 5c       	subi	r30, 0xC7	; 199
    2400:	f9 4e       	sbci	r31, 0xE9	; 233
    2402:	90 81       	ld	r25, Z
    2404:	92 30       	cpi	r25, 0x02	; 2
    2406:	08 f0       	brcs	.+2      	; 0x240a <__stack+0x20b>
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 91 f1 15 	lds	r25, 0x15F1	; 0x8015f1 <xYieldPending>
    240e:	91 11       	cpse	r25, r1
    2410:	16 c0       	rjmp	.+44     	; 0x243e <__stack+0x23f>
    2412:	16 c0       	rjmp	.+44     	; 0x2440 <__stack+0x241>
    2414:	80 91 f2 15 	lds	r24, 0x15F2	; 0x8015f2 <xPendedTicks>
    2418:	90 91 f3 15 	lds	r25, 0x15F3	; 0x8015f3 <xPendedTicks+0x1>
    241c:	a0 91 f4 15 	lds	r26, 0x15F4	; 0x8015f4 <xPendedTicks+0x2>
    2420:	b0 91 f5 15 	lds	r27, 0x15F5	; 0x8015f5 <xPendedTicks+0x3>
    2424:	01 96       	adiw	r24, 0x01	; 1
    2426:	a1 1d       	adc	r26, r1
    2428:	b1 1d       	adc	r27, r1
    242a:	80 93 f2 15 	sts	0x15F2, r24	; 0x8015f2 <xPendedTicks>
    242e:	90 93 f3 15 	sts	0x15F3, r25	; 0x8015f3 <xPendedTicks+0x1>
    2432:	a0 93 f4 15 	sts	0x15F4, r26	; 0x8015f4 <xPendedTicks+0x2>
    2436:	b0 93 f5 15 	sts	0x15F5, r27	; 0x8015f5 <xPendedTicks+0x3>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <__stack+0x241>
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	08 95       	ret

0000244e <xTaskResumeAll>:
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	0f 92       	push	r0
    2460:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    2464:	81 50       	subi	r24, 0x01	; 1
    2466:	80 93 e8 15 	sts	0x15E8, r24	; 0x8015e8 <uxSchedulerSuspended>
    246a:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    246e:	81 11       	cpse	r24, r1
    2470:	be c0       	rjmp	.+380    	; 0x25ee <xTaskResumeAll+0x1a0>
    2472:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <uxCurrentNumberOfTasks>
    2476:	81 11       	cpse	r24, r1
    2478:	88 c0       	rjmp	.+272    	; 0x258a <xTaskResumeAll+0x13c>
    247a:	bc c0       	rjmp	.+376    	; 0x25f4 <xTaskResumeAll+0x1a6>
    247c:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <xPendingReadyList+0x7>
    2480:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <xPendingReadyList+0x8>
    2484:	00 84       	ldd	r0, Z+8	; 0x08
    2486:	f1 85       	ldd	r31, Z+9	; 0x09
    2488:	e0 2d       	mov	r30, r0
    248a:	a0 8d       	ldd	r26, Z+24	; 0x18
    248c:	b1 8d       	ldd	r27, Z+25	; 0x19
    248e:	c2 89       	ldd	r28, Z+18	; 0x12
    2490:	d3 89       	ldd	r29, Z+19	; 0x13
    2492:	84 89       	ldd	r24, Z+20	; 0x14
    2494:	95 89       	ldd	r25, Z+21	; 0x15
    2496:	9f 83       	std	Y+7, r25	; 0x07
    2498:	8e 83       	std	Y+6, r24	; 0x06
    249a:	c4 89       	ldd	r28, Z+20	; 0x14
    249c:	d5 89       	ldd	r29, Z+21	; 0x15
    249e:	82 89       	ldd	r24, Z+18	; 0x12
    24a0:	93 89       	ldd	r25, Z+19	; 0x13
    24a2:	9d 83       	std	Y+5, r25	; 0x05
    24a4:	8c 83       	std	Y+4, r24	; 0x04
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	2d 91       	ld	r18, X+
    24aa:	3c 91       	ld	r19, X
    24ac:	12 97       	sbiw	r26, 0x02	; 2
    24ae:	cf 01       	movw	r24, r30
    24b0:	0e 96       	adiw	r24, 0x0e	; 14
    24b2:	28 17       	cp	r18, r24
    24b4:	39 07       	cpc	r19, r25
    24b6:	31 f4       	brne	.+12     	; 0x24c4 <xTaskResumeAll+0x76>
    24b8:	84 89       	ldd	r24, Z+20	; 0x14
    24ba:	95 89       	ldd	r25, Z+21	; 0x15
    24bc:	12 96       	adiw	r26, 0x02	; 2
    24be:	9c 93       	st	X, r25
    24c0:	8e 93       	st	-X, r24
    24c2:	11 97       	sbiw	r26, 0x01	; 1
    24c4:	11 8e       	std	Z+25, r1	; 0x19
    24c6:	10 8e       	std	Z+24, r1	; 0x18
    24c8:	8c 91       	ld	r24, X
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	8c 93       	st	X, r24
    24ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    24d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    24d2:	c6 81       	ldd	r28, Z+6	; 0x06
    24d4:	d7 81       	ldd	r29, Z+7	; 0x07
    24d6:	80 85       	ldd	r24, Z+8	; 0x08
    24d8:	91 85       	ldd	r25, Z+9	; 0x09
    24da:	9f 83       	std	Y+7, r25	; 0x07
    24dc:	8e 83       	std	Y+6, r24	; 0x06
    24de:	c0 85       	ldd	r28, Z+8	; 0x08
    24e0:	d1 85       	ldd	r29, Z+9	; 0x09
    24e2:	86 81       	ldd	r24, Z+6	; 0x06
    24e4:	97 81       	ldd	r25, Z+7	; 0x07
    24e6:	9d 83       	std	Y+5, r25	; 0x05
    24e8:	8c 83       	std	Y+4, r24	; 0x04
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	8d 91       	ld	r24, X+
    24ee:	9c 91       	ld	r25, X
    24f0:	12 97       	sbiw	r26, 0x02	; 2
    24f2:	9f 01       	movw	r18, r30
    24f4:	2e 5f       	subi	r18, 0xFE	; 254
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	82 17       	cp	r24, r18
    24fa:	93 07       	cpc	r25, r19
    24fc:	31 f4       	brne	.+12     	; 0x250a <xTaskResumeAll+0xbc>
    24fe:	80 85       	ldd	r24, Z+8	; 0x08
    2500:	91 85       	ldd	r25, Z+9	; 0x09
    2502:	12 96       	adiw	r26, 0x02	; 2
    2504:	9c 93       	st	X, r25
    2506:	8e 93       	st	-X, r24
    2508:	11 97       	sbiw	r26, 0x01	; 1
    250a:	15 86       	std	Z+13, r1	; 0x0d
    250c:	14 86       	std	Z+12, r1	; 0x0c
    250e:	8c 91       	ld	r24, X
    2510:	81 50       	subi	r24, 0x01	; 1
    2512:	8c 93       	st	X, r24
    2514:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2516:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    251a:	8a 17       	cp	r24, r26
    251c:	10 f4       	brcc	.+4      	; 0x2522 <xTaskResumeAll+0xd4>
    251e:	a0 93 f7 15 	sts	0x15F7, r26	; 0x8015f7 <uxTopReadyPriority>
    2522:	8b e0       	ldi	r24, 0x0B	; 11
    2524:	8a 9f       	mul	r24, r26
    2526:	d0 01       	movw	r26, r0
    2528:	11 24       	eor	r1, r1
    252a:	a7 5c       	subi	r26, 0xC7	; 199
    252c:	b9 4e       	sbci	r27, 0xE9	; 233
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	0d 90       	ld	r0, X+
    2532:	bc 91       	ld	r27, X
    2534:	a0 2d       	mov	r26, r0
    2536:	b7 83       	std	Z+7, r27	; 0x07
    2538:	a6 83       	std	Z+6, r26	; 0x06
    253a:	16 96       	adiw	r26, 0x06	; 6
    253c:	4d 91       	ld	r20, X+
    253e:	5c 91       	ld	r21, X
    2540:	17 97       	sbiw	r26, 0x07	; 7
    2542:	51 87       	std	Z+9, r21	; 0x09
    2544:	40 87       	std	Z+8, r20	; 0x08
    2546:	16 96       	adiw	r26, 0x06	; 6
    2548:	cd 91       	ld	r28, X+
    254a:	dc 91       	ld	r29, X
    254c:	17 97       	sbiw	r26, 0x07	; 7
    254e:	3d 83       	std	Y+5, r19	; 0x05
    2550:	2c 83       	std	Y+4, r18	; 0x04
    2552:	17 96       	adiw	r26, 0x07	; 7
    2554:	3c 93       	st	X, r19
    2556:	2e 93       	st	-X, r18
    2558:	16 97       	sbiw	r26, 0x06	; 6
    255a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    255c:	8a 9f       	mul	r24, r26
    255e:	d0 01       	movw	r26, r0
    2560:	11 24       	eor	r1, r1
    2562:	a7 5c       	subi	r26, 0xC7	; 199
    2564:	b9 4e       	sbci	r27, 0xE9	; 233
    2566:	b5 87       	std	Z+13, r27	; 0x0d
    2568:	a4 87       	std	Z+12, r26	; 0x0c
    256a:	8c 91       	ld	r24, X
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	8c 93       	st	X, r24
    2570:	92 8d       	ldd	r25, Z+26	; 0x1a
    2572:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2576:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    257a:	5a 96       	adiw	r26, 0x1a	; 26
    257c:	8c 91       	ld	r24, X
    257e:	98 17       	cp	r25, r24
    2580:	30 f0       	brcs	.+12     	; 0x258e <xTaskResumeAll+0x140>
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <xYieldPending>
    2588:	02 c0       	rjmp	.+4      	; 0x258e <xTaskResumeAll+0x140>
    258a:	e0 e0       	ldi	r30, 0x00	; 0
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <xPendingReadyList>
    2592:	81 11       	cpse	r24, r1
    2594:	73 cf       	rjmp	.-282    	; 0x247c <xTaskResumeAll+0x2e>
    2596:	ef 2b       	or	r30, r31
    2598:	09 f0       	breq	.+2      	; 0x259c <xTaskResumeAll+0x14e>
    259a:	7d db       	rcall	.-2310   	; 0x1c96 <prvResetNextTaskUnblockTime>
    259c:	c0 90 f2 15 	lds	r12, 0x15F2	; 0x8015f2 <xPendedTicks>
    25a0:	d0 90 f3 15 	lds	r13, 0x15F3	; 0x8015f3 <xPendedTicks+0x1>
    25a4:	e0 90 f4 15 	lds	r14, 0x15F4	; 0x8015f4 <xPendedTicks+0x2>
    25a8:	f0 90 f5 15 	lds	r15, 0x15F5	; 0x8015f5 <xPendedTicks+0x3>
    25ac:	c1 14       	cp	r12, r1
    25ae:	d1 04       	cpc	r13, r1
    25b0:	e1 04       	cpc	r14, r1
    25b2:	f1 04       	cpc	r15, r1
    25b4:	a1 f0       	breq	.+40     	; 0x25de <xTaskResumeAll+0x190>
    25b6:	1f de       	rcall	.-962    	; 0x21f6 <xTaskIncrementTick>
    25b8:	88 23       	and	r24, r24
    25ba:	19 f0       	breq	.+6      	; 0x25c2 <xTaskResumeAll+0x174>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <xYieldPending>
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	c8 1a       	sub	r12, r24
    25c6:	d1 08       	sbc	r13, r1
    25c8:	e1 08       	sbc	r14, r1
    25ca:	f1 08       	sbc	r15, r1
    25cc:	a1 f7       	brne	.-24     	; 0x25b6 <xTaskResumeAll+0x168>
    25ce:	10 92 f2 15 	sts	0x15F2, r1	; 0x8015f2 <xPendedTicks>
    25d2:	10 92 f3 15 	sts	0x15F3, r1	; 0x8015f3 <xPendedTicks+0x1>
    25d6:	10 92 f4 15 	sts	0x15F4, r1	; 0x8015f4 <xPendedTicks+0x2>
    25da:	10 92 f5 15 	sts	0x15F5, r1	; 0x8015f5 <xPendedTicks+0x3>
    25de:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <xYieldPending>
    25e2:	88 23       	and	r24, r24
    25e4:	31 f0       	breq	.+12     	; 0x25f2 <xTaskResumeAll+0x1a4>
    25e6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <xTaskResumeAll+0x1a6>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <xTaskResumeAll+0x1a6>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	0f 90       	pop	r0
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	08 95       	ret

00002606 <xTaskDelayUntil>:
    2606:	8f 92       	push	r8
    2608:	9f 92       	push	r9
    260a:	af 92       	push	r10
    260c:	bf 92       	push	r11
    260e:	cf 92       	push	r12
    2610:	df 92       	push	r13
    2612:	ef 92       	push	r14
    2614:	ff 92       	push	r15
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	ec 01       	movw	r28, r24
    261e:	6a 01       	movw	r12, r20
    2620:	7b 01       	movw	r14, r22
    2622:	d5 dd       	rcall	.-1110   	; 0x21ce <vTaskSuspendAll>
    2624:	80 90 f8 15 	lds	r8, 0x15F8	; 0x8015f8 <xTickCount>
    2628:	90 90 f9 15 	lds	r9, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    262c:	a0 90 fa 15 	lds	r10, 0x15FA	; 0x8015fa <xTickCount+0x2>
    2630:	b0 90 fb 15 	lds	r11, 0x15FB	; 0x8015fb <xTickCount+0x3>
    2634:	88 81       	ld	r24, Y
    2636:	99 81       	ldd	r25, Y+1	; 0x01
    2638:	aa 81       	ldd	r26, Y+2	; 0x02
    263a:	bb 81       	ldd	r27, Y+3	; 0x03
    263c:	ac 01       	movw	r20, r24
    263e:	bd 01       	movw	r22, r26
    2640:	4c 0d       	add	r20, r12
    2642:	5d 1d       	adc	r21, r13
    2644:	6e 1d       	adc	r22, r14
    2646:	7f 1d       	adc	r23, r15
    2648:	88 16       	cp	r8, r24
    264a:	99 06       	cpc	r9, r25
    264c:	aa 06       	cpc	r10, r26
    264e:	bb 06       	cpc	r11, r27
    2650:	60 f4       	brcc	.+24     	; 0x266a <xTaskDelayUntil+0x64>
    2652:	48 17       	cp	r20, r24
    2654:	59 07       	cpc	r21, r25
    2656:	6a 07       	cpc	r22, r26
    2658:	7b 07       	cpc	r23, r27
    265a:	98 f4       	brcc	.+38     	; 0x2682 <xTaskDelayUntil+0x7c>
    265c:	84 16       	cp	r8, r20
    265e:	95 06       	cpc	r9, r21
    2660:	a6 06       	cpc	r10, r22
    2662:	b7 06       	cpc	r11, r23
    2664:	80 f0       	brcs	.+32     	; 0x2686 <xTaskDelayUntil+0x80>
    2666:	10 e0       	ldi	r17, 0x00	; 0
    2668:	13 c0       	rjmp	.+38     	; 0x2690 <xTaskDelayUntil+0x8a>
    266a:	48 17       	cp	r20, r24
    266c:	59 07       	cpc	r21, r25
    266e:	6a 07       	cpc	r22, r26
    2670:	7b 07       	cpc	r23, r27
    2672:	58 f0       	brcs	.+22     	; 0x268a <xTaskDelayUntil+0x84>
    2674:	84 16       	cp	r8, r20
    2676:	95 06       	cpc	r9, r21
    2678:	a6 06       	cpc	r10, r22
    267a:	b7 06       	cpc	r11, r23
    267c:	40 f0       	brcs	.+16     	; 0x268e <xTaskDelayUntil+0x88>
    267e:	10 e0       	ldi	r17, 0x00	; 0
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <xTaskDelayUntil+0x8a>
    2682:	10 e0       	ldi	r17, 0x00	; 0
    2684:	05 c0       	rjmp	.+10     	; 0x2690 <xTaskDelayUntil+0x8a>
    2686:	11 e0       	ldi	r17, 0x01	; 1
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <xTaskDelayUntil+0x8a>
    268a:	11 e0       	ldi	r17, 0x01	; 1
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <xTaskDelayUntil+0x8a>
    268e:	11 e0       	ldi	r17, 0x01	; 1
    2690:	48 83       	st	Y, r20
    2692:	59 83       	std	Y+1, r21	; 0x01
    2694:	6a 83       	std	Y+2, r22	; 0x02
    2696:	7b 83       	std	Y+3, r23	; 0x03
    2698:	11 23       	and	r17, r17
    269a:	41 f0       	breq	.+16     	; 0x26ac <xTaskDelayUntil+0xa6>
    269c:	cb 01       	movw	r24, r22
    269e:	ba 01       	movw	r22, r20
    26a0:	68 19       	sub	r22, r8
    26a2:	79 09       	sbc	r23, r9
    26a4:	8a 09       	sbc	r24, r10
    26a6:	9b 09       	sbc	r25, r11
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	6b dc       	rcall	.-1834   	; 0x1f82 <prvAddCurrentTaskToDelayedList>
    26ac:	d0 de       	rcall	.-608    	; 0x244e <xTaskResumeAll>
    26ae:	81 11       	cpse	r24, r1
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <xTaskDelayUntil+0xb0>
    26b2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    26b6:	81 2f       	mov	r24, r17
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	bf 90       	pop	r11
    26c8:	af 90       	pop	r10
    26ca:	9f 90       	pop	r9
    26cc:	8f 90       	pop	r8
    26ce:	08 95       	ret

000026d0 <vTaskDelay>:
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	6b 01       	movw	r12, r22
    26da:	7c 01       	movw	r14, r24
    26dc:	67 2b       	or	r22, r23
    26de:	68 2b       	or	r22, r24
    26e0:	69 2b       	or	r22, r25
    26e2:	39 f0       	breq	.+14     	; 0x26f2 <vTaskDelay+0x22>
    26e4:	74 dd       	rcall	.-1304   	; 0x21ce <vTaskSuspendAll>
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	c7 01       	movw	r24, r14
    26ea:	b6 01       	movw	r22, r12
    26ec:	4a dc       	rcall	.-1900   	; 0x1f82 <prvAddCurrentTaskToDelayedList>
    26ee:	af de       	rcall	.-674    	; 0x244e <xTaskResumeAll>
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <vTaskDelay+0x24>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	81 11       	cpse	r24, r1
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <vTaskDelay+0x2c>
    26f8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	08 95       	ret

00002706 <vTaskSwitchContext>:
    2706:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    270a:	88 23       	and	r24, r24
    270c:	21 f0       	breq	.+8      	; 0x2716 <vTaskSwitchContext+0x10>
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <xYieldPending>
    2714:	08 95       	ret
    2716:	10 92 f1 15 	sts	0x15F1, r1	; 0x8015f1 <xYieldPending>
    271a:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    271e:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2722:	20 81       	ld	r18, Z
    2724:	31 81       	ldd	r19, Z+1	; 0x01
    2726:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    272a:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    272e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2730:	94 8d       	ldd	r25, Z+28	; 0x1c
    2732:	82 17       	cp	r24, r18
    2734:	93 07       	cpc	r25, r19
    2736:	60 f0       	brcs	.+24     	; 0x2750 <vTaskSwitchContext+0x4a>
    2738:	60 91 a7 16 	lds	r22, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    273c:	70 91 a8 16 	lds	r23, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2740:	63 5e       	subi	r22, 0xE3	; 227
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    2744:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2748:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    274c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <vApplicationStackOverflowHook>
    2750:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <vTaskSwitchContext+0x52>
    2756:	81 50       	subi	r24, 0x01	; 1
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	9b e0       	ldi	r25, 0x0B	; 11
    275e:	92 9f       	mul	r25, r18
    2760:	f0 01       	movw	r30, r0
    2762:	93 9f       	mul	r25, r19
    2764:	f0 0d       	add	r31, r0
    2766:	11 24       	eor	r1, r1
    2768:	e7 5c       	subi	r30, 0xC7	; 199
    276a:	f9 4e       	sbci	r31, 0xE9	; 233
    276c:	90 81       	ld	r25, Z
    276e:	99 23       	and	r25, r25
    2770:	91 f3       	breq	.-28     	; 0x2756 <vTaskSwitchContext+0x50>
    2772:	9b e0       	ldi	r25, 0x0B	; 11
    2774:	92 9f       	mul	r25, r18
    2776:	a0 01       	movw	r20, r0
    2778:	93 9f       	mul	r25, r19
    277a:	50 0d       	add	r21, r0
    277c:	11 24       	eor	r1, r1
    277e:	df 01       	movw	r26, r30
    2780:	01 80       	ldd	r0, Z+1	; 0x01
    2782:	f2 81       	ldd	r31, Z+2	; 0x02
    2784:	e0 2d       	mov	r30, r0
    2786:	04 80       	ldd	r0, Z+4	; 0x04
    2788:	f5 81       	ldd	r31, Z+5	; 0x05
    278a:	e0 2d       	mov	r30, r0
    278c:	12 96       	adiw	r26, 0x02	; 2
    278e:	fc 93       	st	X, r31
    2790:	ee 93       	st	-X, r30
    2792:	11 97       	sbiw	r26, 0x01	; 1
    2794:	44 5c       	subi	r20, 0xC4	; 196
    2796:	59 4e       	sbci	r21, 0xE9	; 233
    2798:	e4 17       	cp	r30, r20
    279a:	f5 07       	cpc	r31, r21
    279c:	29 f4       	brne	.+10     	; 0x27a8 <vTaskSwitchContext+0xa2>
    279e:	44 81       	ldd	r20, Z+4	; 0x04
    27a0:	55 81       	ldd	r21, Z+5	; 0x05
    27a2:	fd 01       	movw	r30, r26
    27a4:	52 83       	std	Z+2, r21	; 0x02
    27a6:	41 83       	std	Z+1, r20	; 0x01
    27a8:	9b e0       	ldi	r25, 0x0B	; 11
    27aa:	92 9f       	mul	r25, r18
    27ac:	f0 01       	movw	r30, r0
    27ae:	93 9f       	mul	r25, r19
    27b0:	f0 0d       	add	r31, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	e7 5c       	subi	r30, 0xC7	; 199
    27b6:	f9 4e       	sbci	r31, 0xE9	; 233
    27b8:	01 80       	ldd	r0, Z+1	; 0x01
    27ba:	f2 81       	ldd	r31, Z+2	; 0x02
    27bc:	e0 2d       	mov	r30, r0
    27be:	20 85       	ldd	r18, Z+8	; 0x08
    27c0:	31 85       	ldd	r19, Z+9	; 0x09
    27c2:	30 93 a8 16 	sts	0x16A8, r19	; 0x8016a8 <pxCurrentTCB+0x1>
    27c6:	20 93 a7 16 	sts	0x16A7, r18	; 0x8016a7 <pxCurrentTCB>
    27ca:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <uxTopReadyPriority>
    27ce:	08 95       	ret

000027d0 <vTaskPlaceOnEventList>:
    27d0:	cf 92       	push	r12
    27d2:	df 92       	push	r13
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	6a 01       	movw	r12, r20
    27da:	7b 01       	movw	r14, r22
    27dc:	60 91 a7 16 	lds	r22, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    27e0:	70 91 a8 16 	lds	r23, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    27e4:	62 5f       	subi	r22, 0xF2	; 242
    27e6:	7f 4f       	sbci	r23, 0xFF	; 255
    27e8:	0e 94 20 06 	call	0xc40	; 0xc40 <vListInsert>
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	c7 01       	movw	r24, r14
    27f0:	b6 01       	movw	r22, r12
    27f2:	c7 db       	rcall	.-2162   	; 0x1f82 <prvAddCurrentTaskToDelayedList>
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	df 90       	pop	r13
    27fa:	cf 90       	pop	r12
    27fc:	08 95       	ret

000027fe <vTaskPlaceOnUnorderedEventList>:
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	fc 01       	movw	r30, r24
    2808:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    280c:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2810:	70 68       	ori	r23, 0x80	; 128
    2812:	1e 96       	adiw	r26, 0x0e	; 14
    2814:	4d 93       	st	X+, r20
    2816:	5d 93       	st	X+, r21
    2818:	6d 93       	st	X+, r22
    281a:	7c 93       	st	X, r23
    281c:	51 97       	sbiw	r26, 0x11	; 17
    281e:	a1 81       	ldd	r26, Z+1	; 0x01
    2820:	b2 81       	ldd	r27, Z+2	; 0x02
    2822:	c0 91 a7 16 	lds	r28, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2826:	d0 91 a8 16 	lds	r29, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    282a:	bb 8b       	std	Y+19, r27	; 0x13
    282c:	aa 8b       	std	Y+18, r26	; 0x12
    282e:	c0 91 a7 16 	lds	r28, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2832:	d0 91 a8 16 	lds	r29, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2836:	16 96       	adiw	r26, 0x06	; 6
    2838:	8d 91       	ld	r24, X+
    283a:	9c 91       	ld	r25, X
    283c:	17 97       	sbiw	r26, 0x07	; 7
    283e:	9d 8b       	std	Y+21, r25	; 0x15
    2840:	8c 8b       	std	Y+20, r24	; 0x14
    2842:	16 96       	adiw	r26, 0x06	; 6
    2844:	cd 91       	ld	r28, X+
    2846:	dc 91       	ld	r29, X
    2848:	17 97       	sbiw	r26, 0x07	; 7
    284a:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    284e:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2852:	0e 96       	adiw	r24, 0x0e	; 14
    2854:	9d 83       	std	Y+5, r25	; 0x05
    2856:	8c 83       	std	Y+4, r24	; 0x04
    2858:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    285c:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2860:	0e 96       	adiw	r24, 0x0e	; 14
    2862:	17 96       	adiw	r26, 0x07	; 7
    2864:	9c 93       	st	X, r25
    2866:	8e 93       	st	-X, r24
    2868:	16 97       	sbiw	r26, 0x06	; 6
    286a:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    286e:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2872:	59 96       	adiw	r26, 0x19	; 25
    2874:	fc 93       	st	X, r31
    2876:	ee 93       	st	-X, r30
    2878:	58 97       	sbiw	r26, 0x18	; 24
    287a:	80 81       	ld	r24, Z
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	80 83       	st	Z, r24
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	c9 01       	movw	r24, r18
    2884:	b8 01       	movw	r22, r16
    2886:	7d db       	rcall	.-2310   	; 0x1f82 <prvAddCurrentTaskToDelayedList>
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <vTaskPlaceOnEventListRestricted>:
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	fc 01       	movw	r30, r24
    2898:	cb 01       	movw	r24, r22
    289a:	ba 01       	movw	r22, r20
    289c:	a1 81       	ldd	r26, Z+1	; 0x01
    289e:	b2 81       	ldd	r27, Z+2	; 0x02
    28a0:	c0 91 a7 16 	lds	r28, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    28a4:	d0 91 a8 16 	lds	r29, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    28a8:	bb 8b       	std	Y+19, r27	; 0x13
    28aa:	aa 8b       	std	Y+18, r26	; 0x12
    28ac:	c0 91 a7 16 	lds	r28, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    28b0:	d0 91 a8 16 	lds	r29, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    28b4:	16 96       	adiw	r26, 0x06	; 6
    28b6:	4d 91       	ld	r20, X+
    28b8:	5c 91       	ld	r21, X
    28ba:	17 97       	sbiw	r26, 0x07	; 7
    28bc:	5d 8b       	std	Y+21, r21	; 0x15
    28be:	4c 8b       	std	Y+20, r20	; 0x14
    28c0:	16 96       	adiw	r26, 0x06	; 6
    28c2:	cd 91       	ld	r28, X+
    28c4:	dc 91       	ld	r29, X
    28c6:	17 97       	sbiw	r26, 0x07	; 7
    28c8:	40 91 a7 16 	lds	r20, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    28cc:	50 91 a8 16 	lds	r21, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    28d0:	42 5f       	subi	r20, 0xF2	; 242
    28d2:	5f 4f       	sbci	r21, 0xFF	; 255
    28d4:	5d 83       	std	Y+5, r21	; 0x05
    28d6:	4c 83       	std	Y+4, r20	; 0x04
    28d8:	40 91 a7 16 	lds	r20, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    28dc:	50 91 a8 16 	lds	r21, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    28e0:	42 5f       	subi	r20, 0xF2	; 242
    28e2:	5f 4f       	sbci	r21, 0xFF	; 255
    28e4:	17 96       	adiw	r26, 0x07	; 7
    28e6:	5c 93       	st	X, r21
    28e8:	4e 93       	st	-X, r20
    28ea:	16 97       	sbiw	r26, 0x06	; 6
    28ec:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    28f0:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    28f4:	59 96       	adiw	r26, 0x19	; 25
    28f6:	fc 93       	st	X, r31
    28f8:	ee 93       	st	-X, r30
    28fa:	58 97       	sbiw	r26, 0x18	; 24
    28fc:	30 81       	ld	r19, Z
    28fe:	3f 5f       	subi	r19, 0xFF	; 255
    2900:	30 83       	st	Z, r19
    2902:	22 23       	and	r18, r18
    2904:	19 f0       	breq	.+6      	; 0x290c <vTaskPlaceOnEventListRestricted+0x7a>
    2906:	6f ef       	ldi	r22, 0xFF	; 255
    2908:	7f ef       	ldi	r23, 0xFF	; 255
    290a:	cb 01       	movw	r24, r22
    290c:	42 2f       	mov	r20, r18
    290e:	39 db       	rcall	.-2446   	; 0x1f82 <prvAddCurrentTaskToDelayedList>
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <xTaskRemoveFromEventList>:
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	dc 01       	movw	r26, r24
    291c:	17 96       	adiw	r26, 0x07	; 7
    291e:	ed 91       	ld	r30, X+
    2920:	fc 91       	ld	r31, X
    2922:	18 97       	sbiw	r26, 0x08	; 8
    2924:	00 84       	ldd	r0, Z+8	; 0x08
    2926:	f1 85       	ldd	r31, Z+9	; 0x09
    2928:	e0 2d       	mov	r30, r0
    292a:	a0 8d       	ldd	r26, Z+24	; 0x18
    292c:	b1 8d       	ldd	r27, Z+25	; 0x19
    292e:	c2 89       	ldd	r28, Z+18	; 0x12
    2930:	d3 89       	ldd	r29, Z+19	; 0x13
    2932:	84 89       	ldd	r24, Z+20	; 0x14
    2934:	95 89       	ldd	r25, Z+21	; 0x15
    2936:	9f 83       	std	Y+7, r25	; 0x07
    2938:	8e 83       	std	Y+6, r24	; 0x06
    293a:	c4 89       	ldd	r28, Z+20	; 0x14
    293c:	d5 89       	ldd	r29, Z+21	; 0x15
    293e:	82 89       	ldd	r24, Z+18	; 0x12
    2940:	93 89       	ldd	r25, Z+19	; 0x13
    2942:	9d 83       	std	Y+5, r25	; 0x05
    2944:	8c 83       	std	Y+4, r24	; 0x04
    2946:	11 96       	adiw	r26, 0x01	; 1
    2948:	8d 91       	ld	r24, X+
    294a:	9c 91       	ld	r25, X
    294c:	12 97       	sbiw	r26, 0x02	; 2
    294e:	9f 01       	movw	r18, r30
    2950:	22 5f       	subi	r18, 0xF2	; 242
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
    2954:	82 17       	cp	r24, r18
    2956:	93 07       	cpc	r25, r19
    2958:	31 f4       	brne	.+12     	; 0x2966 <xTaskRemoveFromEventList+0x50>
    295a:	84 89       	ldd	r24, Z+20	; 0x14
    295c:	95 89       	ldd	r25, Z+21	; 0x15
    295e:	12 96       	adiw	r26, 0x02	; 2
    2960:	9c 93       	st	X, r25
    2962:	8e 93       	st	-X, r24
    2964:	11 97       	sbiw	r26, 0x01	; 1
    2966:	11 8e       	std	Z+25, r1	; 0x19
    2968:	10 8e       	std	Z+24, r1	; 0x18
    296a:	8c 91       	ld	r24, X
    296c:	81 50       	subi	r24, 0x01	; 1
    296e:	8c 93       	st	X, r24
    2970:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    2974:	81 11       	cpse	r24, r1
    2976:	52 c0       	rjmp	.+164    	; 0x2a1c <xTaskRemoveFromEventList+0x106>
    2978:	a4 85       	ldd	r26, Z+12	; 0x0c
    297a:	b5 85       	ldd	r27, Z+13	; 0x0d
    297c:	c6 81       	ldd	r28, Z+6	; 0x06
    297e:	d7 81       	ldd	r29, Z+7	; 0x07
    2980:	80 85       	ldd	r24, Z+8	; 0x08
    2982:	91 85       	ldd	r25, Z+9	; 0x09
    2984:	9f 83       	std	Y+7, r25	; 0x07
    2986:	8e 83       	std	Y+6, r24	; 0x06
    2988:	c0 85       	ldd	r28, Z+8	; 0x08
    298a:	d1 85       	ldd	r29, Z+9	; 0x09
    298c:	86 81       	ldd	r24, Z+6	; 0x06
    298e:	97 81       	ldd	r25, Z+7	; 0x07
    2990:	9d 83       	std	Y+5, r25	; 0x05
    2992:	8c 83       	std	Y+4, r24	; 0x04
    2994:	11 96       	adiw	r26, 0x01	; 1
    2996:	8d 91       	ld	r24, X+
    2998:	9c 91       	ld	r25, X
    299a:	12 97       	sbiw	r26, 0x02	; 2
    299c:	9f 01       	movw	r18, r30
    299e:	2e 5f       	subi	r18, 0xFE	; 254
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	82 17       	cp	r24, r18
    29a4:	93 07       	cpc	r25, r19
    29a6:	31 f4       	brne	.+12     	; 0x29b4 <xTaskRemoveFromEventList+0x9e>
    29a8:	80 85       	ldd	r24, Z+8	; 0x08
    29aa:	91 85       	ldd	r25, Z+9	; 0x09
    29ac:	12 96       	adiw	r26, 0x02	; 2
    29ae:	9c 93       	st	X, r25
    29b0:	8e 93       	st	-X, r24
    29b2:	11 97       	sbiw	r26, 0x01	; 1
    29b4:	15 86       	std	Z+13, r1	; 0x0d
    29b6:	14 86       	std	Z+12, r1	; 0x0c
    29b8:	8c 91       	ld	r24, X
    29ba:	81 50       	subi	r24, 0x01	; 1
    29bc:	8c 93       	st	X, r24
    29be:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29c0:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    29c4:	8a 17       	cp	r24, r26
    29c6:	10 f4       	brcc	.+4      	; 0x29cc <xTaskRemoveFromEventList+0xb6>
    29c8:	a0 93 f7 15 	sts	0x15F7, r26	; 0x8015f7 <uxTopReadyPriority>
    29cc:	8b e0       	ldi	r24, 0x0B	; 11
    29ce:	8a 9f       	mul	r24, r26
    29d0:	d0 01       	movw	r26, r0
    29d2:	11 24       	eor	r1, r1
    29d4:	a7 5c       	subi	r26, 0xC7	; 199
    29d6:	b9 4e       	sbci	r27, 0xE9	; 233
    29d8:	11 96       	adiw	r26, 0x01	; 1
    29da:	0d 90       	ld	r0, X+
    29dc:	bc 91       	ld	r27, X
    29de:	a0 2d       	mov	r26, r0
    29e0:	b7 83       	std	Z+7, r27	; 0x07
    29e2:	a6 83       	std	Z+6, r26	; 0x06
    29e4:	16 96       	adiw	r26, 0x06	; 6
    29e6:	4d 91       	ld	r20, X+
    29e8:	5c 91       	ld	r21, X
    29ea:	17 97       	sbiw	r26, 0x07	; 7
    29ec:	51 87       	std	Z+9, r21	; 0x09
    29ee:	40 87       	std	Z+8, r20	; 0x08
    29f0:	16 96       	adiw	r26, 0x06	; 6
    29f2:	cd 91       	ld	r28, X+
    29f4:	dc 91       	ld	r29, X
    29f6:	17 97       	sbiw	r26, 0x07	; 7
    29f8:	3d 83       	std	Y+5, r19	; 0x05
    29fa:	2c 83       	std	Y+4, r18	; 0x04
    29fc:	17 96       	adiw	r26, 0x07	; 7
    29fe:	3c 93       	st	X, r19
    2a00:	2e 93       	st	-X, r18
    2a02:	16 97       	sbiw	r26, 0x06	; 6
    2a04:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a06:	8a 9f       	mul	r24, r26
    2a08:	d0 01       	movw	r26, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	a7 5c       	subi	r26, 0xC7	; 199
    2a0e:	b9 4e       	sbci	r27, 0xE9	; 233
    2a10:	b5 87       	std	Z+13, r27	; 0x0d
    2a12:	a4 87       	std	Z+12, r26	; 0x0c
    2a14:	8c 91       	ld	r24, X
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	8c 93       	st	X, r24
    2a1a:	1c c0       	rjmp	.+56     	; 0x2a54 <xTaskRemoveFromEventList+0x13e>
    2a1c:	44 e1       	ldi	r20, 0x14	; 20
    2a1e:	56 e1       	ldi	r21, 0x16	; 22
    2a20:	da 01       	movw	r26, r20
    2a22:	11 96       	adiw	r26, 0x01	; 1
    2a24:	cd 91       	ld	r28, X+
    2a26:	dc 91       	ld	r29, X
    2a28:	12 97       	sbiw	r26, 0x02	; 2
    2a2a:	d3 8b       	std	Z+19, r29	; 0x13
    2a2c:	c2 8b       	std	Z+18, r28	; 0x12
    2a2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a30:	9f 81       	ldd	r25, Y+7	; 0x07
    2a32:	95 8b       	std	Z+21, r25	; 0x15
    2a34:	84 8b       	std	Z+20, r24	; 0x14
    2a36:	8e 81       	ldd	r24, Y+6	; 0x06
    2a38:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	15 96       	adiw	r26, 0x05	; 5
    2a3e:	3c 93       	st	X, r19
    2a40:	2e 93       	st	-X, r18
    2a42:	14 97       	sbiw	r26, 0x04	; 4
    2a44:	3f 83       	std	Y+7, r19	; 0x07
    2a46:	2e 83       	std	Y+6, r18	; 0x06
    2a48:	51 8f       	std	Z+25, r21	; 0x19
    2a4a:	40 8f       	std	Z+24, r20	; 0x18
    2a4c:	da 01       	movw	r26, r20
    2a4e:	8c 91       	ld	r24, X
    2a50:	8f 5f       	subi	r24, 0xFF	; 255
    2a52:	8c 93       	st	X, r24
    2a54:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a56:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2a5a:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a60:	89 17       	cp	r24, r25
    2a62:	20 f4       	brcc	.+8      	; 0x2a6c <xTaskRemoveFromEventList+0x156>
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <xYieldPending>
    2a6a:	01 c0       	rjmp	.+2      	; 0x2a6e <xTaskRemoveFromEventList+0x158>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	08 95       	ret

00002a74 <vTaskRemoveFromUnorderedEventList>:
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	dc 01       	movw	r26, r24
    2a7a:	70 68       	ori	r23, 0x80	; 128
    2a7c:	4d 93       	st	X+, r20
    2a7e:	5d 93       	st	X+, r21
    2a80:	6d 93       	st	X+, r22
    2a82:	7c 93       	st	X, r23
    2a84:	13 97       	sbiw	r26, 0x03	; 3
    2a86:	18 96       	adiw	r26, 0x08	; 8
    2a88:	ed 91       	ld	r30, X+
    2a8a:	fc 91       	ld	r31, X
    2a8c:	19 97       	sbiw	r26, 0x09	; 9
    2a8e:	1a 96       	adiw	r26, 0x0a	; 10
    2a90:	4d 91       	ld	r20, X+
    2a92:	5c 91       	ld	r21, X
    2a94:	1b 97       	sbiw	r26, 0x0b	; 11
    2a96:	14 96       	adiw	r26, 0x04	; 4
    2a98:	8d 91       	ld	r24, X+
    2a9a:	9c 91       	ld	r25, X
    2a9c:	15 97       	sbiw	r26, 0x05	; 5
    2a9e:	16 96       	adiw	r26, 0x06	; 6
    2aa0:	2d 91       	ld	r18, X+
    2aa2:	3c 91       	ld	r19, X
    2aa4:	17 97       	sbiw	r26, 0x07	; 7
    2aa6:	ec 01       	movw	r28, r24
    2aa8:	3f 83       	std	Y+7, r19	; 0x07
    2aaa:	2e 83       	std	Y+6, r18	; 0x06
    2aac:	16 96       	adiw	r26, 0x06	; 6
    2aae:	8d 91       	ld	r24, X+
    2ab0:	9c 91       	ld	r25, X
    2ab2:	17 97       	sbiw	r26, 0x07	; 7
    2ab4:	14 96       	adiw	r26, 0x04	; 4
    2ab6:	2d 91       	ld	r18, X+
    2ab8:	3c 91       	ld	r19, X
    2aba:	15 97       	sbiw	r26, 0x05	; 5
    2abc:	ec 01       	movw	r28, r24
    2abe:	3d 83       	std	Y+5, r19	; 0x05
    2ac0:	2c 83       	std	Y+4, r18	; 0x04
    2ac2:	ea 01       	movw	r28, r20
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	a8 17       	cp	r26, r24
    2aca:	b9 07       	cpc	r27, r25
    2acc:	31 f4       	brne	.+12     	; 0x2ada <vTaskRemoveFromUnorderedEventList+0x66>
    2ace:	16 96       	adiw	r26, 0x06	; 6
    2ad0:	8d 91       	ld	r24, X+
    2ad2:	9c 91       	ld	r25, X
    2ad4:	17 97       	sbiw	r26, 0x07	; 7
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	1b 96       	adiw	r26, 0x0b	; 11
    2adc:	1c 92       	st	X, r1
    2ade:	1e 92       	st	-X, r1
    2ae0:	1a 97       	sbiw	r26, 0x0a	; 10
    2ae2:	da 01       	movw	r26, r20
    2ae4:	8c 91       	ld	r24, X
    2ae6:	81 50       	subi	r24, 0x01	; 1
    2ae8:	8c 93       	st	X, r24
    2aea:	a4 85       	ldd	r26, Z+12	; 0x0c
    2aec:	b5 85       	ldd	r27, Z+13	; 0x0d
    2aee:	c6 81       	ldd	r28, Z+6	; 0x06
    2af0:	d7 81       	ldd	r29, Z+7	; 0x07
    2af2:	80 85       	ldd	r24, Z+8	; 0x08
    2af4:	91 85       	ldd	r25, Z+9	; 0x09
    2af6:	9f 83       	std	Y+7, r25	; 0x07
    2af8:	8e 83       	std	Y+6, r24	; 0x06
    2afa:	c0 85       	ldd	r28, Z+8	; 0x08
    2afc:	d1 85       	ldd	r29, Z+9	; 0x09
    2afe:	86 81       	ldd	r24, Z+6	; 0x06
    2b00:	97 81       	ldd	r25, Z+7	; 0x07
    2b02:	9d 83       	std	Y+5, r25	; 0x05
    2b04:	8c 83       	std	Y+4, r24	; 0x04
    2b06:	11 96       	adiw	r26, 0x01	; 1
    2b08:	8d 91       	ld	r24, X+
    2b0a:	9c 91       	ld	r25, X
    2b0c:	12 97       	sbiw	r26, 0x02	; 2
    2b0e:	9f 01       	movw	r18, r30
    2b10:	2e 5f       	subi	r18, 0xFE	; 254
    2b12:	3f 4f       	sbci	r19, 0xFF	; 255
    2b14:	82 17       	cp	r24, r18
    2b16:	93 07       	cpc	r25, r19
    2b18:	31 f4       	brne	.+12     	; 0x2b26 <vTaskRemoveFromUnorderedEventList+0xb2>
    2b1a:	80 85       	ldd	r24, Z+8	; 0x08
    2b1c:	91 85       	ldd	r25, Z+9	; 0x09
    2b1e:	12 96       	adiw	r26, 0x02	; 2
    2b20:	9c 93       	st	X, r25
    2b22:	8e 93       	st	-X, r24
    2b24:	11 97       	sbiw	r26, 0x01	; 1
    2b26:	15 86       	std	Z+13, r1	; 0x0d
    2b28:	14 86       	std	Z+12, r1	; 0x0c
    2b2a:	8c 91       	ld	r24, X
    2b2c:	81 50       	subi	r24, 0x01	; 1
    2b2e:	8c 93       	st	X, r24
    2b30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b32:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    2b36:	8a 17       	cp	r24, r26
    2b38:	10 f4       	brcc	.+4      	; 0x2b3e <vTaskRemoveFromUnorderedEventList+0xca>
    2b3a:	a0 93 f7 15 	sts	0x15F7, r26	; 0x8015f7 <uxTopReadyPriority>
    2b3e:	8b e0       	ldi	r24, 0x0B	; 11
    2b40:	8a 9f       	mul	r24, r26
    2b42:	d0 01       	movw	r26, r0
    2b44:	11 24       	eor	r1, r1
    2b46:	a7 5c       	subi	r26, 0xC7	; 199
    2b48:	b9 4e       	sbci	r27, 0xE9	; 233
    2b4a:	11 96       	adiw	r26, 0x01	; 1
    2b4c:	0d 90       	ld	r0, X+
    2b4e:	bc 91       	ld	r27, X
    2b50:	a0 2d       	mov	r26, r0
    2b52:	b7 83       	std	Z+7, r27	; 0x07
    2b54:	a6 83       	std	Z+6, r26	; 0x06
    2b56:	16 96       	adiw	r26, 0x06	; 6
    2b58:	4d 91       	ld	r20, X+
    2b5a:	5c 91       	ld	r21, X
    2b5c:	17 97       	sbiw	r26, 0x07	; 7
    2b5e:	51 87       	std	Z+9, r21	; 0x09
    2b60:	40 87       	std	Z+8, r20	; 0x08
    2b62:	16 96       	adiw	r26, 0x06	; 6
    2b64:	cd 91       	ld	r28, X+
    2b66:	dc 91       	ld	r29, X
    2b68:	17 97       	sbiw	r26, 0x07	; 7
    2b6a:	3d 83       	std	Y+5, r19	; 0x05
    2b6c:	2c 83       	std	Y+4, r18	; 0x04
    2b6e:	17 96       	adiw	r26, 0x07	; 7
    2b70:	3c 93       	st	X, r19
    2b72:	2e 93       	st	-X, r18
    2b74:	16 97       	sbiw	r26, 0x06	; 6
    2b76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b78:	8a 9f       	mul	r24, r26
    2b7a:	d0 01       	movw	r26, r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	a7 5c       	subi	r26, 0xC7	; 199
    2b80:	b9 4e       	sbci	r27, 0xE9	; 233
    2b82:	b5 87       	std	Z+13, r27	; 0x0d
    2b84:	a4 87       	std	Z+12, r26	; 0x0c
    2b86:	8c 91       	ld	r24, X
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	8c 93       	st	X, r24
    2b8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b8e:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2b92:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2b96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b98:	89 17       	cp	r24, r25
    2b9a:	18 f4       	brcc	.+6      	; 0x2ba2 <vTaskRemoveFromUnorderedEventList+0x12e>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <xYieldPending>
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	08 95       	ret

00002ba8 <vTaskSetTimeOutState>:
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	0f 92       	push	r0
    2bae:	20 91 f0 15 	lds	r18, 0x15F0	; 0x8015f0 <xNumOfOverflows>
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	20 83       	st	Z, r18
    2bb6:	40 91 f8 15 	lds	r20, 0x15F8	; 0x8015f8 <xTickCount>
    2bba:	50 91 f9 15 	lds	r21, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    2bbe:	60 91 fa 15 	lds	r22, 0x15FA	; 0x8015fa <xTickCount+0x2>
    2bc2:	70 91 fb 15 	lds	r23, 0x15FB	; 0x8015fb <xTickCount+0x3>
    2bc6:	41 83       	std	Z+1, r20	; 0x01
    2bc8:	52 83       	std	Z+2, r21	; 0x02
    2bca:	63 83       	std	Z+3, r22	; 0x03
    2bcc:	74 83       	std	Z+4, r23	; 0x04
    2bce:	0f 90       	pop	r0
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	08 95       	ret

00002bd4 <vTaskInternalSetTimeOutState>:
    2bd4:	20 91 f0 15 	lds	r18, 0x15F0	; 0x8015f0 <xNumOfOverflows>
    2bd8:	fc 01       	movw	r30, r24
    2bda:	20 83       	st	Z, r18
    2bdc:	40 91 f8 15 	lds	r20, 0x15F8	; 0x8015f8 <xTickCount>
    2be0:	50 91 f9 15 	lds	r21, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    2be4:	60 91 fa 15 	lds	r22, 0x15FA	; 0x8015fa <xTickCount+0x2>
    2be8:	70 91 fb 15 	lds	r23, 0x15FB	; 0x8015fb <xTickCount+0x3>
    2bec:	41 83       	std	Z+1, r20	; 0x01
    2bee:	52 83       	std	Z+2, r21	; 0x02
    2bf0:	63 83       	std	Z+3, r22	; 0x03
    2bf2:	74 83       	std	Z+4, r23	; 0x04
    2bf4:	08 95       	ret

00002bf6 <xTaskCheckForTimeOut>:
    2bf6:	8f 92       	push	r8
    2bf8:	9f 92       	push	r9
    2bfa:	af 92       	push	r10
    2bfc:	bf 92       	push	r11
    2bfe:	cf 92       	push	r12
    2c00:	df 92       	push	r13
    2c02:	ef 92       	push	r14
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	fb 01       	movw	r30, r22
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	0f 92       	push	r0
    2c16:	c0 90 f8 15 	lds	r12, 0x15F8	; 0x8015f8 <xTickCount>
    2c1a:	d0 90 f9 15 	lds	r13, 0x15F9	; 0x8015f9 <xTickCount+0x1>
    2c1e:	e0 90 fa 15 	lds	r14, 0x15FA	; 0x8015fa <xTickCount+0x2>
    2c22:	f0 90 fb 15 	lds	r15, 0x15FB	; 0x8015fb <xTickCount+0x3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	0d 91       	ld	r16, X+
    2c2c:	1d 91       	ld	r17, X+
    2c2e:	2d 91       	ld	r18, X+
    2c30:	3c 91       	ld	r19, X
    2c32:	14 97       	sbiw	r26, 0x04	; 4
    2c34:	46 01       	movw	r8, r12
    2c36:	57 01       	movw	r10, r14
    2c38:	80 1a       	sub	r8, r16
    2c3a:	91 0a       	sbc	r9, r17
    2c3c:	a2 0a       	sbc	r10, r18
    2c3e:	b3 0a       	sbc	r11, r19
    2c40:	40 81       	ld	r20, Z
    2c42:	51 81       	ldd	r21, Z+1	; 0x01
    2c44:	62 81       	ldd	r22, Z+2	; 0x02
    2c46:	73 81       	ldd	r23, Z+3	; 0x03
    2c48:	4f 3f       	cpi	r20, 0xFF	; 255
    2c4a:	bf ef       	ldi	r27, 0xFF	; 255
    2c4c:	5b 07       	cpc	r21, r27
    2c4e:	6b 07       	cpc	r22, r27
    2c50:	7b 07       	cpc	r23, r27
    2c52:	39 f1       	breq	.+78     	; 0x2ca2 <xTaskCheckForTimeOut+0xac>
    2c54:	ec 01       	movw	r28, r24
    2c56:	b8 81       	ld	r27, Y
    2c58:	a0 91 f0 15 	lds	r26, 0x15F0	; 0x8015f0 <xNumOfOverflows>
    2c5c:	ba 17       	cp	r27, r26
    2c5e:	59 f0       	breq	.+22     	; 0x2c76 <xTaskCheckForTimeOut+0x80>
    2c60:	c0 16       	cp	r12, r16
    2c62:	d1 06       	cpc	r13, r17
    2c64:	e2 06       	cpc	r14, r18
    2c66:	f3 06       	cpc	r15, r19
    2c68:	30 f0       	brcs	.+12     	; 0x2c76 <xTaskCheckForTimeOut+0x80>
    2c6a:	10 82       	st	Z, r1
    2c6c:	11 82       	std	Z+1, r1	; 0x01
    2c6e:	12 82       	std	Z+2, r1	; 0x02
    2c70:	13 82       	std	Z+3, r1	; 0x03
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	17 c0       	rjmp	.+46     	; 0x2ca4 <xTaskCheckForTimeOut+0xae>
    2c76:	84 16       	cp	r8, r20
    2c78:	95 06       	cpc	r9, r21
    2c7a:	a6 06       	cpc	r10, r22
    2c7c:	b7 06       	cpc	r11, r23
    2c7e:	58 f4       	brcc	.+22     	; 0x2c96 <xTaskCheckForTimeOut+0xa0>
    2c80:	48 19       	sub	r20, r8
    2c82:	59 09       	sbc	r21, r9
    2c84:	6a 09       	sbc	r22, r10
    2c86:	7b 09       	sbc	r23, r11
    2c88:	40 83       	st	Z, r20
    2c8a:	51 83       	std	Z+1, r21	; 0x01
    2c8c:	62 83       	std	Z+2, r22	; 0x02
    2c8e:	73 83       	std	Z+3, r23	; 0x03
    2c90:	a1 df       	rcall	.-190    	; 0x2bd4 <vTaskInternalSetTimeOutState>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	07 c0       	rjmp	.+14     	; 0x2ca4 <xTaskCheckForTimeOut+0xae>
    2c96:	10 82       	st	Z, r1
    2c98:	11 82       	std	Z+1, r1	; 0x01
    2c9a:	12 82       	std	Z+2, r1	; 0x02
    2c9c:	13 82       	std	Z+3, r1	; 0x03
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	01 c0       	rjmp	.+2      	; 0x2ca4 <xTaskCheckForTimeOut+0xae>
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ff 90       	pop	r15
    2cb2:	ef 90       	pop	r14
    2cb4:	df 90       	pop	r13
    2cb6:	cf 90       	pop	r12
    2cb8:	bf 90       	pop	r11
    2cba:	af 90       	pop	r10
    2cbc:	9f 90       	pop	r9
    2cbe:	8f 90       	pop	r8
    2cc0:	08 95       	ret

00002cc2 <vTaskMissedYield>:
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <xYieldPending>
    2cc8:	08 95       	ret

00002cca <xTaskGetCurrentTaskHandle>:
    2cca:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2cce:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2cd2:	08 95       	ret

00002cd4 <xTaskGetSchedulerState>:
    2cd4:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <xSchedulerRunning>
    2cd8:	88 23       	and	r24, r24
    2cda:	31 f0       	breq	.+12     	; 0x2ce8 <xTaskGetSchedulerState+0x14>
    2cdc:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    2ce0:	81 11       	cpse	r24, r1
    2ce2:	04 c0       	rjmp	.+8      	; 0x2cec <xTaskGetSchedulerState+0x18>
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	08 95       	ret
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	08 95       	ret
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	08 95       	ret

00002cf0 <xTaskPriorityInherit>:
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	89 2b       	or	r24, r25
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <xTaskPriorityInherit+0x10>
    2cfe:	77 c0       	rjmp	.+238    	; 0x2dee <xTaskPriorityInherit+0xfe>
    2d00:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d02:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2d06:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2d0a:	5a 96       	adiw	r26, 0x1a	; 26
    2d0c:	9c 91       	ld	r25, X
    2d0e:	89 17       	cp	r24, r25
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <xTaskPriorityInherit+0x24>
    2d12:	63 c0       	rjmp	.+198    	; 0x2dda <xTaskPriorityInherit+0xea>
    2d14:	46 85       	ldd	r20, Z+14	; 0x0e
    2d16:	57 85       	ldd	r21, Z+15	; 0x0f
    2d18:	60 89       	ldd	r22, Z+16	; 0x10
    2d1a:	71 89       	ldd	r23, Z+17	; 0x11
    2d1c:	77 23       	and	r23, r23
    2d1e:	94 f0       	brlt	.+36     	; 0x2d44 <xTaskPriorityInherit+0x54>
    2d20:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2d24:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2d28:	5a 96       	adiw	r26, 0x1a	; 26
    2d2a:	9c 91       	ld	r25, X
    2d2c:	4a e0       	ldi	r20, 0x0A	; 10
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	60 e0       	ldi	r22, 0x00	; 0
    2d32:	70 e0       	ldi	r23, 0x00	; 0
    2d34:	49 1b       	sub	r20, r25
    2d36:	51 09       	sbc	r21, r1
    2d38:	61 09       	sbc	r22, r1
    2d3a:	71 09       	sbc	r23, r1
    2d3c:	46 87       	std	Z+14, r20	; 0x0e
    2d3e:	57 87       	std	Z+15, r21	; 0x0f
    2d40:	60 8b       	std	Z+16, r22	; 0x10
    2d42:	71 8b       	std	Z+17, r23	; 0x11
    2d44:	24 85       	ldd	r18, Z+12	; 0x0c
    2d46:	35 85       	ldd	r19, Z+13	; 0x0d
    2d48:	4b e0       	ldi	r20, 0x0B	; 11
    2d4a:	84 9f       	mul	r24, r20
    2d4c:	c0 01       	movw	r24, r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	87 5c       	subi	r24, 0xC7	; 199
    2d52:	99 4e       	sbci	r25, 0xE9	; 233
    2d54:	28 17       	cp	r18, r24
    2d56:	39 07       	cpc	r19, r25
    2d58:	b9 f5       	brne	.+110    	; 0x2dc8 <xTaskPriorityInherit+0xd8>
    2d5a:	ef 01       	movw	r28, r30
    2d5c:	8f 01       	movw	r16, r30
    2d5e:	0e 5f       	subi	r16, 0xFE	; 254
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	c8 01       	movw	r24, r16
    2d64:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
    2d68:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2d6c:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2d70:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d72:	ea 8f       	std	Y+26, r30	; 0x1a
    2d74:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    2d78:	8e 17       	cp	r24, r30
    2d7a:	10 f4       	brcc	.+4      	; 0x2d80 <xTaskPriorityInherit+0x90>
    2d7c:	e0 93 f7 15 	sts	0x15F7, r30	; 0x8015f7 <uxTopReadyPriority>
    2d80:	8b e0       	ldi	r24, 0x0B	; 11
    2d82:	8e 9f       	mul	r24, r30
    2d84:	f0 01       	movw	r30, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	e7 5c       	subi	r30, 0xC7	; 199
    2d8a:	f9 4e       	sbci	r31, 0xE9	; 233
    2d8c:	01 80       	ldd	r0, Z+1	; 0x01
    2d8e:	f2 81       	ldd	r31, Z+2	; 0x02
    2d90:	e0 2d       	mov	r30, r0
    2d92:	ff 83       	std	Y+7, r31	; 0x07
    2d94:	ee 83       	std	Y+6, r30	; 0x06
    2d96:	26 81       	ldd	r18, Z+6	; 0x06
    2d98:	37 81       	ldd	r19, Z+7	; 0x07
    2d9a:	39 87       	std	Y+9, r19	; 0x09
    2d9c:	28 87       	std	Y+8, r18	; 0x08
    2d9e:	a6 81       	ldd	r26, Z+6	; 0x06
    2da0:	b7 81       	ldd	r27, Z+7	; 0x07
    2da2:	15 96       	adiw	r26, 0x05	; 5
    2da4:	1c 93       	st	X, r17
    2da6:	0e 93       	st	-X, r16
    2da8:	14 97       	sbiw	r26, 0x04	; 4
    2daa:	17 83       	std	Z+7, r17	; 0x07
    2dac:	06 83       	std	Z+6, r16	; 0x06
    2dae:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2db0:	8e 9f       	mul	r24, r30
    2db2:	f0 01       	movw	r30, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	e7 5c       	subi	r30, 0xC7	; 199
    2db8:	f9 4e       	sbci	r31, 0xE9	; 233
    2dba:	fd 87       	std	Y+13, r31	; 0x0d
    2dbc:	ec 87       	std	Y+12, r30	; 0x0c
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	80 83       	st	Z, r24
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	16 c0       	rjmp	.+44     	; 0x2df4 <xTaskPriorityInherit+0x104>
    2dc8:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2dcc:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2dd0:	5a 96       	adiw	r26, 0x1a	; 26
    2dd2:	8c 91       	ld	r24, X
    2dd4:	82 8f       	std	Z+26, r24	; 0x1a
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	0d c0       	rjmp	.+26     	; 0x2df4 <xTaskPriorityInherit+0x104>
    2dda:	95 a5       	ldd	r25, Z+45	; 0x2d
    2ddc:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2de0:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2de4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2de6:	98 17       	cp	r25, r24
    2de8:	20 f0       	brcs	.+8      	; 0x2df2 <xTaskPriorityInherit+0x102>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	03 c0       	rjmp	.+6      	; 0x2df4 <xTaskPriorityInherit+0x104>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	01 c0       	rjmp	.+2      	; 0x2df4 <xTaskPriorityInherit+0x104>
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <xTaskPriorityDisinherit>:
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	fc 01       	movw	r30, r24
    2e08:	89 2b       	or	r24, r25
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <xTaskPriorityDisinherit+0x10>
    2e0c:	49 c0       	rjmp	.+146    	; 0x2ea0 <xTaskPriorityDisinherit+0xa2>
    2e0e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e10:	81 50       	subi	r24, 0x01	; 1
    2e12:	86 a7       	std	Z+46, r24	; 0x2e
    2e14:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e16:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e18:	29 17       	cp	r18, r25
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <xTaskPriorityDisinherit+0x20>
    2e1c:	43 c0       	rjmp	.+134    	; 0x2ea4 <xTaskPriorityDisinherit+0xa6>
    2e1e:	81 11       	cpse	r24, r1
    2e20:	43 c0       	rjmp	.+134    	; 0x2ea8 <xTaskPriorityDisinherit+0xaa>
    2e22:	ef 01       	movw	r28, r30
    2e24:	8f 01       	movw	r16, r30
    2e26:	0e 5f       	subi	r16, 0xFE	; 254
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	c8 01       	movw	r24, r16
    2e2c:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
    2e30:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e32:	ea 8f       	std	Y+26, r30	; 0x1a
    2e34:	8a e0       	ldi	r24, 0x0A	; 10
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a0 e0       	ldi	r26, 0x00	; 0
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	8e 1b       	sub	r24, r30
    2e3e:	91 09       	sbc	r25, r1
    2e40:	a1 09       	sbc	r26, r1
    2e42:	b1 09       	sbc	r27, r1
    2e44:	8e 87       	std	Y+14, r24	; 0x0e
    2e46:	9f 87       	std	Y+15, r25	; 0x0f
    2e48:	a8 8b       	std	Y+16, r26	; 0x10
    2e4a:	b9 8b       	std	Y+17, r27	; 0x11
    2e4c:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    2e50:	8e 17       	cp	r24, r30
    2e52:	10 f4       	brcc	.+4      	; 0x2e58 <xTaskPriorityDisinherit+0x5a>
    2e54:	e0 93 f7 15 	sts	0x15F7, r30	; 0x8015f7 <uxTopReadyPriority>
    2e58:	8b e0       	ldi	r24, 0x0B	; 11
    2e5a:	8e 9f       	mul	r24, r30
    2e5c:	f0 01       	movw	r30, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	e7 5c       	subi	r30, 0xC7	; 199
    2e62:	f9 4e       	sbci	r31, 0xE9	; 233
    2e64:	01 80       	ldd	r0, Z+1	; 0x01
    2e66:	f2 81       	ldd	r31, Z+2	; 0x02
    2e68:	e0 2d       	mov	r30, r0
    2e6a:	ff 83       	std	Y+7, r31	; 0x07
    2e6c:	ee 83       	std	Y+6, r30	; 0x06
    2e6e:	26 81       	ldd	r18, Z+6	; 0x06
    2e70:	37 81       	ldd	r19, Z+7	; 0x07
    2e72:	39 87       	std	Y+9, r19	; 0x09
    2e74:	28 87       	std	Y+8, r18	; 0x08
    2e76:	a6 81       	ldd	r26, Z+6	; 0x06
    2e78:	b7 81       	ldd	r27, Z+7	; 0x07
    2e7a:	15 96       	adiw	r26, 0x05	; 5
    2e7c:	1c 93       	st	X, r17
    2e7e:	0e 93       	st	-X, r16
    2e80:	14 97       	sbiw	r26, 0x04	; 4
    2e82:	17 83       	std	Z+7, r17	; 0x07
    2e84:	06 83       	std	Z+6, r16	; 0x06
    2e86:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e88:	8e 9f       	mul	r24, r30
    2e8a:	f0 01       	movw	r30, r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	e7 5c       	subi	r30, 0xC7	; 199
    2e90:	f9 4e       	sbci	r31, 0xE9	; 233
    2e92:	fd 87       	std	Y+13, r31	; 0x0d
    2e94:	ec 87       	std	Y+12, r30	; 0x0c
    2e96:	80 81       	ld	r24, Z
    2e98:	8f 5f       	subi	r24, 0xFF	; 255
    2e9a:	80 83       	st	Z, r24
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	05 c0       	rjmp	.+10     	; 0x2eaa <xTaskPriorityDisinherit+0xac>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <xTaskPriorityDisinherit+0xac>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	01 c0       	rjmp	.+2      	; 0x2eaa <xTaskPriorityDisinherit+0xac>
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	1f 91       	pop	r17
    2eb0:	0f 91       	pop	r16
    2eb2:	08 95       	ret

00002eb4 <vTaskPriorityDisinheritAfterTimeout>:
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	89 2b       	or	r24, r25
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2ec2:	5a c0       	rjmp	.+180    	; 0x2f78 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ec4:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ec6:	86 17       	cp	r24, r22
    2ec8:	08 f4       	brcc	.+2      	; 0x2ecc <vTaskPriorityDisinheritAfterTimeout+0x18>
    2eca:	86 2f       	mov	r24, r22
    2ecc:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ece:	89 17       	cp	r24, r25
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2ed2:	52 c0       	rjmp	.+164    	; 0x2f78 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ed4:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ed6:	21 30       	cpi	r18, 0x01	; 1
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <vTaskPriorityDisinheritAfterTimeout+0x28>
    2eda:	4e c0       	rjmp	.+156    	; 0x2f78 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2edc:	82 8f       	std	Z+26, r24	; 0x1a
    2ede:	46 85       	ldd	r20, Z+14	; 0x0e
    2ee0:	57 85       	ldd	r21, Z+15	; 0x0f
    2ee2:	60 89       	ldd	r22, Z+16	; 0x10
    2ee4:	71 89       	ldd	r23, Z+17	; 0x11
    2ee6:	77 23       	and	r23, r23
    2ee8:	64 f0       	brlt	.+24     	; 0x2f02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2eea:	4a e0       	ldi	r20, 0x0A	; 10
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	48 1b       	sub	r20, r24
    2ef4:	51 09       	sbc	r21, r1
    2ef6:	61 09       	sbc	r22, r1
    2ef8:	71 09       	sbc	r23, r1
    2efa:	46 87       	std	Z+14, r20	; 0x0e
    2efc:	57 87       	std	Z+15, r21	; 0x0f
    2efe:	60 8b       	std	Z+16, r22	; 0x10
    2f00:	71 8b       	std	Z+17, r23	; 0x11
    2f02:	24 85       	ldd	r18, Z+12	; 0x0c
    2f04:	35 85       	ldd	r19, Z+13	; 0x0d
    2f06:	4b e0       	ldi	r20, 0x0B	; 11
    2f08:	94 9f       	mul	r25, r20
    2f0a:	c0 01       	movw	r24, r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	87 5c       	subi	r24, 0xC7	; 199
    2f10:	99 4e       	sbci	r25, 0xE9	; 233
    2f12:	28 17       	cp	r18, r24
    2f14:	39 07       	cpc	r19, r25
    2f16:	81 f5       	brne	.+96     	; 0x2f78 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f18:	ef 01       	movw	r28, r30
    2f1a:	8f 01       	movw	r16, r30
    2f1c:	0e 5f       	subi	r16, 0xFE	; 254
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	c8 01       	movw	r24, r16
    2f22:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
    2f26:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f28:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    2f2c:	8e 17       	cp	r24, r30
    2f2e:	10 f4       	brcc	.+4      	; 0x2f34 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2f30:	e0 93 f7 15 	sts	0x15F7, r30	; 0x8015f7 <uxTopReadyPriority>
    2f34:	8b e0       	ldi	r24, 0x0B	; 11
    2f36:	8e 9f       	mul	r24, r30
    2f38:	f0 01       	movw	r30, r0
    2f3a:	11 24       	eor	r1, r1
    2f3c:	e7 5c       	subi	r30, 0xC7	; 199
    2f3e:	f9 4e       	sbci	r31, 0xE9	; 233
    2f40:	01 80       	ldd	r0, Z+1	; 0x01
    2f42:	f2 81       	ldd	r31, Z+2	; 0x02
    2f44:	e0 2d       	mov	r30, r0
    2f46:	ff 83       	std	Y+7, r31	; 0x07
    2f48:	ee 83       	std	Y+6, r30	; 0x06
    2f4a:	26 81       	ldd	r18, Z+6	; 0x06
    2f4c:	37 81       	ldd	r19, Z+7	; 0x07
    2f4e:	39 87       	std	Y+9, r19	; 0x09
    2f50:	28 87       	std	Y+8, r18	; 0x08
    2f52:	a6 81       	ldd	r26, Z+6	; 0x06
    2f54:	b7 81       	ldd	r27, Z+7	; 0x07
    2f56:	15 96       	adiw	r26, 0x05	; 5
    2f58:	1c 93       	st	X, r17
    2f5a:	0e 93       	st	-X, r16
    2f5c:	14 97       	sbiw	r26, 0x04	; 4
    2f5e:	17 83       	std	Z+7, r17	; 0x07
    2f60:	06 83       	std	Z+6, r16	; 0x06
    2f62:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f64:	8e 9f       	mul	r24, r30
    2f66:	f0 01       	movw	r30, r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	e7 5c       	subi	r30, 0xC7	; 199
    2f6c:	f9 4e       	sbci	r31, 0xE9	; 233
    2f6e:	fd 87       	std	Y+13, r31	; 0x0d
    2f70:	ec 87       	std	Y+12, r30	; 0x0c
    2f72:	80 81       	ld	r24, Z
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	80 83       	st	Z, r24
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <uxTaskResetEventItemValue>:
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2f8e:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2f92:	66 85       	ldd	r22, Z+14	; 0x0e
    2f94:	77 85       	ldd	r23, Z+15	; 0x0f
    2f96:	80 89       	ldd	r24, Z+16	; 0x10
    2f98:	91 89       	ldd	r25, Z+17	; 0x11
    2f9a:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2f9e:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2fa2:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2fa6:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2faa:	5a 96       	adiw	r26, 0x1a	; 26
    2fac:	2c 91       	ld	r18, X
    2fae:	0f 2e       	mov	r0, r31
    2fb0:	fa e0       	ldi	r31, 0x0A	; 10
    2fb2:	cf 2e       	mov	r12, r31
    2fb4:	d1 2c       	mov	r13, r1
    2fb6:	e1 2c       	mov	r14, r1
    2fb8:	f1 2c       	mov	r15, r1
    2fba:	f0 2d       	mov	r31, r0
    2fbc:	c2 1a       	sub	r12, r18
    2fbe:	d1 08       	sbc	r13, r1
    2fc0:	e1 08       	sbc	r14, r1
    2fc2:	f1 08       	sbc	r15, r1
    2fc4:	c6 86       	std	Z+14, r12	; 0x0e
    2fc6:	d7 86       	std	Z+15, r13	; 0x0f
    2fc8:	e0 8a       	std	Z+16, r14	; 0x10
    2fca:	f1 8a       	std	Z+17, r15	; 0x11
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	cf 90       	pop	r12
    2fd4:	08 95       	ret

00002fd6 <pvTaskIncrementMutexHeldCount>:
    2fd6:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2fda:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2fde:	89 2b       	or	r24, r25
    2fe0:	39 f0       	breq	.+14     	; 0x2ff0 <pvTaskIncrementMutexHeldCount+0x1a>
    2fe2:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2fe6:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2fea:	86 a5       	ldd	r24, Z+46	; 0x2e
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	86 a7       	std	Z+46, r24	; 0x2e
    2ff0:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    2ff4:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    2ff8:	08 95       	ret

00002ffa <xTaskGenericNotifyWait>:
    2ffa:	4f 92       	push	r4
    2ffc:	5f 92       	push	r5
    2ffe:	6f 92       	push	r6
    3000:	7f 92       	push	r7
    3002:	af 92       	push	r10
    3004:	bf 92       	push	r11
    3006:	cf 92       	push	r12
    3008:	df 92       	push	r13
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	28 01       	movw	r4, r16
    3018:	39 01       	movw	r6, r18
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	0f 92       	push	r0
    3020:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    3024:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    3028:	c8 2f       	mov	r28, r24
    302a:	d0 e0       	ldi	r29, 0x00	; 0
    302c:	ec 0f       	add	r30, r28
    302e:	fd 1f       	adc	r31, r29
    3030:	83 a9       	ldd	r24, Z+51	; 0x33
    3032:	82 30       	cpi	r24, 0x02	; 2
    3034:	79 f1       	breq	.+94     	; 0x3094 <xTaskGenericNotifyWait+0x9a>
    3036:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    303a:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    303e:	ce 01       	movw	r24, r28
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	e8 0f       	add	r30, r24
    304a:	f9 1f       	adc	r31, r25
    304c:	87 a5       	ldd	r24, Z+47	; 0x2f
    304e:	90 a9       	ldd	r25, Z+48	; 0x30
    3050:	a1 a9       	ldd	r26, Z+49	; 0x31
    3052:	b2 a9       	ldd	r27, Z+50	; 0x32
    3054:	40 95       	com	r20
    3056:	50 95       	com	r21
    3058:	60 95       	com	r22
    305a:	70 95       	com	r23
    305c:	48 23       	and	r20, r24
    305e:	59 23       	and	r21, r25
    3060:	6a 23       	and	r22, r26
    3062:	7b 23       	and	r23, r27
    3064:	47 a7       	std	Z+47, r20	; 0x2f
    3066:	50 ab       	std	Z+48, r21	; 0x30
    3068:	61 ab       	std	Z+49, r22	; 0x31
    306a:	72 ab       	std	Z+50, r23	; 0x32
    306c:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    3070:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    3074:	ec 0f       	add	r30, r28
    3076:	fd 1f       	adc	r31, r29
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	83 ab       	std	Z+51, r24	; 0x33
    307c:	a1 14       	cp	r10, r1
    307e:	b1 04       	cpc	r11, r1
    3080:	c1 04       	cpc	r12, r1
    3082:	d1 04       	cpc	r13, r1
    3084:	39 f0       	breq	.+14     	; 0x3094 <xTaskGenericNotifyWait+0x9a>
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	c6 01       	movw	r24, r12
    308a:	b5 01       	movw	r22, r10
    308c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <prvAddCurrentTaskToDelayedList>
    3090:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	0f 92       	push	r0
    309e:	e1 14       	cp	r14, r1
    30a0:	f1 04       	cpc	r15, r1
    30a2:	a1 f0       	breq	.+40     	; 0x30cc <xTaskGenericNotifyWait+0xd2>
    30a4:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    30a8:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    30ac:	ce 01       	movw	r24, r28
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	e8 0f       	add	r30, r24
    30b8:	f9 1f       	adc	r31, r25
    30ba:	87 a5       	ldd	r24, Z+47	; 0x2f
    30bc:	90 a9       	ldd	r25, Z+48	; 0x30
    30be:	a1 a9       	ldd	r26, Z+49	; 0x31
    30c0:	b2 a9       	ldd	r27, Z+50	; 0x32
    30c2:	f7 01       	movw	r30, r14
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
    30cc:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    30d0:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    30d4:	ec 0f       	add	r30, r28
    30d6:	fd 1f       	adc	r31, r29
    30d8:	83 a9       	ldd	r24, Z+51	; 0x33
    30da:	82 30       	cpi	r24, 0x02	; 2
    30dc:	e9 f4       	brne	.+58     	; 0x3118 <xTaskGenericNotifyWait+0x11e>
    30de:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    30e2:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    30e6:	ce 01       	movw	r24, r28
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	e8 0f       	add	r30, r24
    30f2:	f9 1f       	adc	r31, r25
    30f4:	87 a5       	ldd	r24, Z+47	; 0x2f
    30f6:	90 a9       	ldd	r25, Z+48	; 0x30
    30f8:	a1 a9       	ldd	r26, Z+49	; 0x31
    30fa:	b2 a9       	ldd	r27, Z+50	; 0x32
    30fc:	40 94       	com	r4
    30fe:	50 94       	com	r5
    3100:	60 94       	com	r6
    3102:	70 94       	com	r7
    3104:	48 22       	and	r4, r24
    3106:	59 22       	and	r5, r25
    3108:	6a 22       	and	r6, r26
    310a:	7b 22       	and	r7, r27
    310c:	47 a6       	std	Z+47, r4	; 0x2f
    310e:	50 aa       	std	Z+48, r5	; 0x30
    3110:	61 aa       	std	Z+49, r6	; 0x31
    3112:	72 aa       	std	Z+50, r7	; 0x32
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	01 c0       	rjmp	.+2      	; 0x311a <xTaskGenericNotifyWait+0x120>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	20 91 a7 16 	lds	r18, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    311e:	30 91 a8 16 	lds	r19, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    3122:	c2 0f       	add	r28, r18
    3124:	d3 1f       	adc	r29, r19
    3126:	1b aa       	std	Y+51, r1	; 0x33
    3128:	0f 90       	pop	r0
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	bf 90       	pop	r11
    313e:	af 90       	pop	r10
    3140:	7f 90       	pop	r7
    3142:	6f 90       	pop	r6
    3144:	5f 90       	pop	r5
    3146:	4f 90       	pop	r4
    3148:	08 95       	ret

0000314a <xTaskGenericNotify>:
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	dc 01       	movw	r26, r24
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	0f 92       	push	r0
    3164:	e1 14       	cp	r14, r1
    3166:	f1 04       	cpc	r15, r1
    3168:	89 f0       	breq	.+34     	; 0x318c <xTaskGenericNotify+0x42>
    316a:	e6 2f       	mov	r30, r22
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	ee 0f       	add	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	ee 0f       	add	r30, r30
    3174:	ff 1f       	adc	r31, r31
    3176:	e8 0f       	add	r30, r24
    3178:	f9 1f       	adc	r31, r25
    317a:	87 a4       	ldd	r8, Z+47	; 0x2f
    317c:	90 a8       	ldd	r9, Z+48	; 0x30
    317e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3180:	b2 a8       	ldd	r11, Z+50	; 0x32
    3182:	f7 01       	movw	r30, r14
    3184:	80 82       	st	Z, r8
    3186:	91 82       	std	Z+1, r9	; 0x01
    3188:	a2 82       	std	Z+2, r10	; 0x02
    318a:	b3 82       	std	Z+3, r11	; 0x03
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	fd 01       	movw	r30, r26
    3190:	e6 0f       	add	r30, r22
    3192:	f7 1f       	adc	r31, r23
    3194:	83 a9       	ldd	r24, Z+51	; 0x33
    3196:	92 e0       	ldi	r25, 0x02	; 2
    3198:	93 ab       	std	Z+51, r25	; 0x33
    319a:	02 30       	cpi	r16, 0x02	; 2
    319c:	01 f1       	breq	.+64     	; 0x31de <xTaskGenericNotify+0x94>
    319e:	18 f4       	brcc	.+6      	; 0x31a6 <xTaskGenericNotify+0x5c>
    31a0:	01 30       	cpi	r16, 0x01	; 1
    31a2:	31 f0       	breq	.+12     	; 0x31b0 <xTaskGenericNotify+0x66>
    31a4:	4d c0       	rjmp	.+154    	; 0x3240 <xTaskGenericNotify+0xf6>
    31a6:	03 30       	cpi	r16, 0x03	; 3
    31a8:	79 f1       	breq	.+94     	; 0x3208 <xTaskGenericNotify+0xbe>
    31aa:	04 30       	cpi	r16, 0x04	; 4
    31ac:	d1 f1       	breq	.+116    	; 0x3222 <xTaskGenericNotify+0xd8>
    31ae:	48 c0       	rjmp	.+144    	; 0x3240 <xTaskGenericNotify+0xf6>
    31b0:	66 0f       	add	r22, r22
    31b2:	77 1f       	adc	r23, r23
    31b4:	66 0f       	add	r22, r22
    31b6:	77 1f       	adc	r23, r23
    31b8:	fd 01       	movw	r30, r26
    31ba:	e6 0f       	add	r30, r22
    31bc:	f7 1f       	adc	r31, r23
    31be:	87 a4       	ldd	r8, Z+47	; 0x2f
    31c0:	90 a8       	ldd	r9, Z+48	; 0x30
    31c2:	a1 a8       	ldd	r10, Z+49	; 0x31
    31c4:	b2 a8       	ldd	r11, Z+50	; 0x32
    31c6:	ba 01       	movw	r22, r20
    31c8:	a9 01       	movw	r20, r18
    31ca:	48 29       	or	r20, r8
    31cc:	59 29       	or	r21, r9
    31ce:	6a 29       	or	r22, r10
    31d0:	7b 29       	or	r23, r11
    31d2:	47 a7       	std	Z+47, r20	; 0x2f
    31d4:	50 ab       	std	Z+48, r21	; 0x30
    31d6:	61 ab       	std	Z+49, r22	; 0x31
    31d8:	72 ab       	std	Z+50, r23	; 0x32
    31da:	01 e0       	ldi	r16, 0x01	; 1
    31dc:	34 c0       	rjmp	.+104    	; 0x3246 <xTaskGenericNotify+0xfc>
    31de:	66 0f       	add	r22, r22
    31e0:	77 1f       	adc	r23, r23
    31e2:	66 0f       	add	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	fd 01       	movw	r30, r26
    31e8:	e6 0f       	add	r30, r22
    31ea:	f7 1f       	adc	r31, r23
    31ec:	47 a5       	ldd	r20, Z+47	; 0x2f
    31ee:	50 a9       	ldd	r21, Z+48	; 0x30
    31f0:	61 a9       	ldd	r22, Z+49	; 0x31
    31f2:	72 a9       	ldd	r23, Z+50	; 0x32
    31f4:	4f 5f       	subi	r20, 0xFF	; 255
    31f6:	5f 4f       	sbci	r21, 0xFF	; 255
    31f8:	6f 4f       	sbci	r22, 0xFF	; 255
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	47 a7       	std	Z+47, r20	; 0x2f
    31fe:	50 ab       	std	Z+48, r21	; 0x30
    3200:	61 ab       	std	Z+49, r22	; 0x31
    3202:	72 ab       	std	Z+50, r23	; 0x32
    3204:	01 e0       	ldi	r16, 0x01	; 1
    3206:	1f c0       	rjmp	.+62     	; 0x3246 <xTaskGenericNotify+0xfc>
    3208:	66 0f       	add	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	66 0f       	add	r22, r22
    320e:	77 1f       	adc	r23, r23
    3210:	fd 01       	movw	r30, r26
    3212:	e6 0f       	add	r30, r22
    3214:	f7 1f       	adc	r31, r23
    3216:	27 a7       	std	Z+47, r18	; 0x2f
    3218:	30 ab       	std	Z+48, r19	; 0x30
    321a:	41 ab       	std	Z+49, r20	; 0x31
    321c:	52 ab       	std	Z+50, r21	; 0x32
    321e:	01 e0       	ldi	r16, 0x01	; 1
    3220:	12 c0       	rjmp	.+36     	; 0x3246 <xTaskGenericNotify+0xfc>
    3222:	82 30       	cpi	r24, 0x02	; 2
    3224:	79 f0       	breq	.+30     	; 0x3244 <xTaskGenericNotify+0xfa>
    3226:	66 0f       	add	r22, r22
    3228:	77 1f       	adc	r23, r23
    322a:	66 0f       	add	r22, r22
    322c:	77 1f       	adc	r23, r23
    322e:	fd 01       	movw	r30, r26
    3230:	e6 0f       	add	r30, r22
    3232:	f7 1f       	adc	r31, r23
    3234:	27 a7       	std	Z+47, r18	; 0x2f
    3236:	30 ab       	std	Z+48, r19	; 0x30
    3238:	41 ab       	std	Z+49, r20	; 0x31
    323a:	52 ab       	std	Z+50, r21	; 0x32
    323c:	01 e0       	ldi	r16, 0x01	; 1
    323e:	03 c0       	rjmp	.+6      	; 0x3246 <xTaskGenericNotify+0xfc>
    3240:	01 e0       	ldi	r16, 0x01	; 1
    3242:	01 c0       	rjmp	.+2      	; 0x3246 <xTaskGenericNotify+0xfc>
    3244:	00 e0       	ldi	r16, 0x00	; 0
    3246:	81 30       	cpi	r24, 0x01	; 1
    3248:	09 f0       	breq	.+2      	; 0x324c <xTaskGenericNotify+0x102>
    324a:	69 c0       	rjmp	.+210    	; 0x331e <xTaskGenericNotify+0x1d4>
    324c:	1c 96       	adiw	r26, 0x0c	; 12
    324e:	ed 91       	ld	r30, X+
    3250:	fc 91       	ld	r31, X
    3252:	1d 97       	sbiw	r26, 0x0d	; 13
    3254:	16 96       	adiw	r26, 0x06	; 6
    3256:	cd 91       	ld	r28, X+
    3258:	dc 91       	ld	r29, X
    325a:	17 97       	sbiw	r26, 0x07	; 7
    325c:	18 96       	adiw	r26, 0x08	; 8
    325e:	8d 91       	ld	r24, X+
    3260:	9c 91       	ld	r25, X
    3262:	19 97       	sbiw	r26, 0x09	; 9
    3264:	9f 83       	std	Y+7, r25	; 0x07
    3266:	8e 83       	std	Y+6, r24	; 0x06
    3268:	18 96       	adiw	r26, 0x08	; 8
    326a:	cd 91       	ld	r28, X+
    326c:	dc 91       	ld	r29, X
    326e:	19 97       	sbiw	r26, 0x09	; 9
    3270:	16 96       	adiw	r26, 0x06	; 6
    3272:	8d 91       	ld	r24, X+
    3274:	9c 91       	ld	r25, X
    3276:	17 97       	sbiw	r26, 0x07	; 7
    3278:	9d 83       	std	Y+5, r25	; 0x05
    327a:	8c 83       	std	Y+4, r24	; 0x04
    327c:	81 81       	ldd	r24, Z+1	; 0x01
    327e:	92 81       	ldd	r25, Z+2	; 0x02
    3280:	9d 01       	movw	r18, r26
    3282:	2e 5f       	subi	r18, 0xFE	; 254
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	82 17       	cp	r24, r18
    3288:	93 07       	cpc	r25, r19
    328a:	31 f4       	brne	.+12     	; 0x3298 <xTaskGenericNotify+0x14e>
    328c:	18 96       	adiw	r26, 0x08	; 8
    328e:	8d 91       	ld	r24, X+
    3290:	9c 91       	ld	r25, X
    3292:	19 97       	sbiw	r26, 0x09	; 9
    3294:	92 83       	std	Z+2, r25	; 0x02
    3296:	81 83       	std	Z+1, r24	; 0x01
    3298:	1d 96       	adiw	r26, 0x0d	; 13
    329a:	1c 92       	st	X, r1
    329c:	1e 92       	st	-X, r1
    329e:	1c 97       	sbiw	r26, 0x0c	; 12
    32a0:	80 81       	ld	r24, Z
    32a2:	81 50       	subi	r24, 0x01	; 1
    32a4:	80 83       	st	Z, r24
    32a6:	5a 96       	adiw	r26, 0x1a	; 26
    32a8:	ec 91       	ld	r30, X
    32aa:	5a 97       	sbiw	r26, 0x1a	; 26
    32ac:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    32b0:	8e 17       	cp	r24, r30
    32b2:	10 f4       	brcc	.+4      	; 0x32b8 <xTaskGenericNotify+0x16e>
    32b4:	e0 93 f7 15 	sts	0x15F7, r30	; 0x8015f7 <uxTopReadyPriority>
    32b8:	8b e0       	ldi	r24, 0x0B	; 11
    32ba:	8e 9f       	mul	r24, r30
    32bc:	f0 01       	movw	r30, r0
    32be:	11 24       	eor	r1, r1
    32c0:	e7 5c       	subi	r30, 0xC7	; 199
    32c2:	f9 4e       	sbci	r31, 0xE9	; 233
    32c4:	01 80       	ldd	r0, Z+1	; 0x01
    32c6:	f2 81       	ldd	r31, Z+2	; 0x02
    32c8:	e0 2d       	mov	r30, r0
    32ca:	17 96       	adiw	r26, 0x07	; 7
    32cc:	fc 93       	st	X, r31
    32ce:	ee 93       	st	-X, r30
    32d0:	16 97       	sbiw	r26, 0x06	; 6
    32d2:	46 81       	ldd	r20, Z+6	; 0x06
    32d4:	57 81       	ldd	r21, Z+7	; 0x07
    32d6:	19 96       	adiw	r26, 0x09	; 9
    32d8:	5c 93       	st	X, r21
    32da:	4e 93       	st	-X, r20
    32dc:	18 97       	sbiw	r26, 0x08	; 8
    32de:	c6 81       	ldd	r28, Z+6	; 0x06
    32e0:	d7 81       	ldd	r29, Z+7	; 0x07
    32e2:	3d 83       	std	Y+5, r19	; 0x05
    32e4:	2c 83       	std	Y+4, r18	; 0x04
    32e6:	37 83       	std	Z+7, r19	; 0x07
    32e8:	26 83       	std	Z+6, r18	; 0x06
    32ea:	5a 96       	adiw	r26, 0x1a	; 26
    32ec:	ec 91       	ld	r30, X
    32ee:	5a 97       	sbiw	r26, 0x1a	; 26
    32f0:	8e 9f       	mul	r24, r30
    32f2:	f0 01       	movw	r30, r0
    32f4:	11 24       	eor	r1, r1
    32f6:	e7 5c       	subi	r30, 0xC7	; 199
    32f8:	f9 4e       	sbci	r31, 0xE9	; 233
    32fa:	1d 96       	adiw	r26, 0x0d	; 13
    32fc:	fc 93       	st	X, r31
    32fe:	ee 93       	st	-X, r30
    3300:	1c 97       	sbiw	r26, 0x0c	; 12
    3302:	80 81       	ld	r24, Z
    3304:	8f 5f       	subi	r24, 0xFF	; 255
    3306:	80 83       	st	Z, r24
    3308:	5a 96       	adiw	r26, 0x1a	; 26
    330a:	9c 91       	ld	r25, X
    330c:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    3310:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    3314:	82 8d       	ldd	r24, Z+26	; 0x1a
    3316:	89 17       	cp	r24, r25
    3318:	10 f4       	brcc	.+4      	; 0x331e <xTaskGenericNotify+0x1d4>
    331a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    331e:	0f 90       	pop	r0
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	80 2f       	mov	r24, r16
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	bf 90       	pop	r11
    3330:	af 90       	pop	r10
    3332:	9f 90       	pop	r9
    3334:	8f 90       	pop	r8
    3336:	08 95       	ret

00003338 <xTaskGenericNotifyFromISR>:
    3338:	8f 92       	push	r8
    333a:	9f 92       	push	r9
    333c:	af 92       	push	r10
    333e:	bf 92       	push	r11
    3340:	cf 92       	push	r12
    3342:	df 92       	push	r13
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	dc 01       	movw	r26, r24
    3350:	e1 14       	cp	r14, r1
    3352:	f1 04       	cpc	r15, r1
    3354:	89 f0       	breq	.+34     	; 0x3378 <xTaskGenericNotifyFromISR+0x40>
    3356:	e6 2f       	mov	r30, r22
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	ee 0f       	add	r30, r30
    335c:	ff 1f       	adc	r31, r31
    335e:	ee 0f       	add	r30, r30
    3360:	ff 1f       	adc	r31, r31
    3362:	e8 0f       	add	r30, r24
    3364:	f9 1f       	adc	r31, r25
    3366:	87 a4       	ldd	r8, Z+47	; 0x2f
    3368:	90 a8       	ldd	r9, Z+48	; 0x30
    336a:	a1 a8       	ldd	r10, Z+49	; 0x31
    336c:	b2 a8       	ldd	r11, Z+50	; 0x32
    336e:	f7 01       	movw	r30, r14
    3370:	80 82       	st	Z, r8
    3372:	91 82       	std	Z+1, r9	; 0x01
    3374:	a2 82       	std	Z+2, r10	; 0x02
    3376:	b3 82       	std	Z+3, r11	; 0x03
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	fd 01       	movw	r30, r26
    337c:	e6 0f       	add	r30, r22
    337e:	f7 1f       	adc	r31, r23
    3380:	93 a9       	ldd	r25, Z+51	; 0x33
    3382:	82 e0       	ldi	r24, 0x02	; 2
    3384:	83 ab       	std	Z+51, r24	; 0x33
    3386:	02 30       	cpi	r16, 0x02	; 2
    3388:	01 f1       	breq	.+64     	; 0x33ca <xTaskGenericNotifyFromISR+0x92>
    338a:	18 f4       	brcc	.+6      	; 0x3392 <xTaskGenericNotifyFromISR+0x5a>
    338c:	01 30       	cpi	r16, 0x01	; 1
    338e:	31 f0       	breq	.+12     	; 0x339c <xTaskGenericNotifyFromISR+0x64>
    3390:	4d c0       	rjmp	.+154    	; 0x342c <xTaskGenericNotifyFromISR+0xf4>
    3392:	03 30       	cpi	r16, 0x03	; 3
    3394:	79 f1       	breq	.+94     	; 0x33f4 <xTaskGenericNotifyFromISR+0xbc>
    3396:	04 30       	cpi	r16, 0x04	; 4
    3398:	d1 f1       	breq	.+116    	; 0x340e <xTaskGenericNotifyFromISR+0xd6>
    339a:	48 c0       	rjmp	.+144    	; 0x342c <xTaskGenericNotifyFromISR+0xf4>
    339c:	66 0f       	add	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	fd 01       	movw	r30, r26
    33a6:	e6 0f       	add	r30, r22
    33a8:	f7 1f       	adc	r31, r23
    33aa:	87 a4       	ldd	r8, Z+47	; 0x2f
    33ac:	90 a8       	ldd	r9, Z+48	; 0x30
    33ae:	a1 a8       	ldd	r10, Z+49	; 0x31
    33b0:	b2 a8       	ldd	r11, Z+50	; 0x32
    33b2:	ba 01       	movw	r22, r20
    33b4:	a9 01       	movw	r20, r18
    33b6:	48 29       	or	r20, r8
    33b8:	59 29       	or	r21, r9
    33ba:	6a 29       	or	r22, r10
    33bc:	7b 29       	or	r23, r11
    33be:	47 a7       	std	Z+47, r20	; 0x2f
    33c0:	50 ab       	std	Z+48, r21	; 0x30
    33c2:	61 ab       	std	Z+49, r22	; 0x31
    33c4:	72 ab       	std	Z+50, r23	; 0x32
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	34 c0       	rjmp	.+104    	; 0x3432 <xTaskGenericNotifyFromISR+0xfa>
    33ca:	66 0f       	add	r22, r22
    33cc:	77 1f       	adc	r23, r23
    33ce:	66 0f       	add	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	fd 01       	movw	r30, r26
    33d4:	e6 0f       	add	r30, r22
    33d6:	f7 1f       	adc	r31, r23
    33d8:	47 a5       	ldd	r20, Z+47	; 0x2f
    33da:	50 a9       	ldd	r21, Z+48	; 0x30
    33dc:	61 a9       	ldd	r22, Z+49	; 0x31
    33de:	72 a9       	ldd	r23, Z+50	; 0x32
    33e0:	4f 5f       	subi	r20, 0xFF	; 255
    33e2:	5f 4f       	sbci	r21, 0xFF	; 255
    33e4:	6f 4f       	sbci	r22, 0xFF	; 255
    33e6:	7f 4f       	sbci	r23, 0xFF	; 255
    33e8:	47 a7       	std	Z+47, r20	; 0x2f
    33ea:	50 ab       	std	Z+48, r21	; 0x30
    33ec:	61 ab       	std	Z+49, r22	; 0x31
    33ee:	72 ab       	std	Z+50, r23	; 0x32
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	1f c0       	rjmp	.+62     	; 0x3432 <xTaskGenericNotifyFromISR+0xfa>
    33f4:	66 0f       	add	r22, r22
    33f6:	77 1f       	adc	r23, r23
    33f8:	66 0f       	add	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	fd 01       	movw	r30, r26
    33fe:	e6 0f       	add	r30, r22
    3400:	f7 1f       	adc	r31, r23
    3402:	27 a7       	std	Z+47, r18	; 0x2f
    3404:	30 ab       	std	Z+48, r19	; 0x30
    3406:	41 ab       	std	Z+49, r20	; 0x31
    3408:	52 ab       	std	Z+50, r21	; 0x32
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	12 c0       	rjmp	.+36     	; 0x3432 <xTaskGenericNotifyFromISR+0xfa>
    340e:	92 30       	cpi	r25, 0x02	; 2
    3410:	79 f0       	breq	.+30     	; 0x3430 <xTaskGenericNotifyFromISR+0xf8>
    3412:	66 0f       	add	r22, r22
    3414:	77 1f       	adc	r23, r23
    3416:	66 0f       	add	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	fd 01       	movw	r30, r26
    341c:	e6 0f       	add	r30, r22
    341e:	f7 1f       	adc	r31, r23
    3420:	27 a7       	std	Z+47, r18	; 0x2f
    3422:	30 ab       	std	Z+48, r19	; 0x30
    3424:	41 ab       	std	Z+49, r20	; 0x31
    3426:	52 ab       	std	Z+50, r21	; 0x32
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <xTaskGenericNotifyFromISR+0xfa>
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <xTaskGenericNotifyFromISR+0xfa>
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	91 30       	cpi	r25, 0x01	; 1
    3434:	09 f0       	breq	.+2      	; 0x3438 <xTaskGenericNotifyFromISR+0x100>
    3436:	96 c0       	rjmp	.+300    	; 0x3564 <xTaskGenericNotifyFromISR+0x22c>
    3438:	90 91 e8 15 	lds	r25, 0x15E8	; 0x8015e8 <uxSchedulerSuspended>
    343c:	91 11       	cpse	r25, r1
    343e:	5f c0       	rjmp	.+190    	; 0x34fe <xTaskGenericNotifyFromISR+0x1c6>
    3440:	1c 96       	adiw	r26, 0x0c	; 12
    3442:	ed 91       	ld	r30, X+
    3444:	fc 91       	ld	r31, X
    3446:	1d 97       	sbiw	r26, 0x0d	; 13
    3448:	16 96       	adiw	r26, 0x06	; 6
    344a:	cd 91       	ld	r28, X+
    344c:	dc 91       	ld	r29, X
    344e:	17 97       	sbiw	r26, 0x07	; 7
    3450:	18 96       	adiw	r26, 0x08	; 8
    3452:	2d 91       	ld	r18, X+
    3454:	3c 91       	ld	r19, X
    3456:	19 97       	sbiw	r26, 0x09	; 9
    3458:	3f 83       	std	Y+7, r19	; 0x07
    345a:	2e 83       	std	Y+6, r18	; 0x06
    345c:	18 96       	adiw	r26, 0x08	; 8
    345e:	cd 91       	ld	r28, X+
    3460:	dc 91       	ld	r29, X
    3462:	19 97       	sbiw	r26, 0x09	; 9
    3464:	16 96       	adiw	r26, 0x06	; 6
    3466:	2d 91       	ld	r18, X+
    3468:	3c 91       	ld	r19, X
    346a:	17 97       	sbiw	r26, 0x07	; 7
    346c:	3d 83       	std	Y+5, r19	; 0x05
    346e:	2c 83       	std	Y+4, r18	; 0x04
    3470:	41 81       	ldd	r20, Z+1	; 0x01
    3472:	52 81       	ldd	r21, Z+2	; 0x02
    3474:	9d 01       	movw	r18, r26
    3476:	2e 5f       	subi	r18, 0xFE	; 254
    3478:	3f 4f       	sbci	r19, 0xFF	; 255
    347a:	42 17       	cp	r20, r18
    347c:	53 07       	cpc	r21, r19
    347e:	31 f4       	brne	.+12     	; 0x348c <xTaskGenericNotifyFromISR+0x154>
    3480:	18 96       	adiw	r26, 0x08	; 8
    3482:	4d 91       	ld	r20, X+
    3484:	5c 91       	ld	r21, X
    3486:	19 97       	sbiw	r26, 0x09	; 9
    3488:	52 83       	std	Z+2, r21	; 0x02
    348a:	41 83       	std	Z+1, r20	; 0x01
    348c:	1d 96       	adiw	r26, 0x0d	; 13
    348e:	1c 92       	st	X, r1
    3490:	1e 92       	st	-X, r1
    3492:	1c 97       	sbiw	r26, 0x0c	; 12
    3494:	90 81       	ld	r25, Z
    3496:	91 50       	subi	r25, 0x01	; 1
    3498:	90 83       	st	Z, r25
    349a:	5a 96       	adiw	r26, 0x1a	; 26
    349c:	ec 91       	ld	r30, X
    349e:	5a 97       	sbiw	r26, 0x1a	; 26
    34a0:	90 91 f7 15 	lds	r25, 0x15F7	; 0x8015f7 <uxTopReadyPriority>
    34a4:	9e 17       	cp	r25, r30
    34a6:	10 f4       	brcc	.+4      	; 0x34ac <xTaskGenericNotifyFromISR+0x174>
    34a8:	e0 93 f7 15 	sts	0x15F7, r30	; 0x8015f7 <uxTopReadyPriority>
    34ac:	9b e0       	ldi	r25, 0x0B	; 11
    34ae:	9e 9f       	mul	r25, r30
    34b0:	f0 01       	movw	r30, r0
    34b2:	11 24       	eor	r1, r1
    34b4:	e7 5c       	subi	r30, 0xC7	; 199
    34b6:	f9 4e       	sbci	r31, 0xE9	; 233
    34b8:	01 80       	ldd	r0, Z+1	; 0x01
    34ba:	f2 81       	ldd	r31, Z+2	; 0x02
    34bc:	e0 2d       	mov	r30, r0
    34be:	17 96       	adiw	r26, 0x07	; 7
    34c0:	fc 93       	st	X, r31
    34c2:	ee 93       	st	-X, r30
    34c4:	16 97       	sbiw	r26, 0x06	; 6
    34c6:	46 81       	ldd	r20, Z+6	; 0x06
    34c8:	57 81       	ldd	r21, Z+7	; 0x07
    34ca:	19 96       	adiw	r26, 0x09	; 9
    34cc:	5c 93       	st	X, r21
    34ce:	4e 93       	st	-X, r20
    34d0:	18 97       	sbiw	r26, 0x08	; 8
    34d2:	c6 81       	ldd	r28, Z+6	; 0x06
    34d4:	d7 81       	ldd	r29, Z+7	; 0x07
    34d6:	3d 83       	std	Y+5, r19	; 0x05
    34d8:	2c 83       	std	Y+4, r18	; 0x04
    34da:	37 83       	std	Z+7, r19	; 0x07
    34dc:	26 83       	std	Z+6, r18	; 0x06
    34de:	5a 96       	adiw	r26, 0x1a	; 26
    34e0:	ec 91       	ld	r30, X
    34e2:	5a 97       	sbiw	r26, 0x1a	; 26
    34e4:	9e 9f       	mul	r25, r30
    34e6:	f0 01       	movw	r30, r0
    34e8:	11 24       	eor	r1, r1
    34ea:	e7 5c       	subi	r30, 0xC7	; 199
    34ec:	f9 4e       	sbci	r31, 0xE9	; 233
    34ee:	1d 96       	adiw	r26, 0x0d	; 13
    34f0:	fc 93       	st	X, r31
    34f2:	ee 93       	st	-X, r30
    34f4:	1c 97       	sbiw	r26, 0x0c	; 12
    34f6:	90 81       	ld	r25, Z
    34f8:	9f 5f       	subi	r25, 0xFF	; 255
    34fa:	90 83       	st	Z, r25
    34fc:	21 c0       	rjmp	.+66     	; 0x3540 <xTaskGenericNotifyFromISR+0x208>
    34fe:	64 e1       	ldi	r22, 0x14	; 20
    3500:	76 e1       	ldi	r23, 0x16	; 22
    3502:	fb 01       	movw	r30, r22
    3504:	c1 81       	ldd	r28, Z+1	; 0x01
    3506:	d2 81       	ldd	r29, Z+2	; 0x02
    3508:	53 96       	adiw	r26, 0x13	; 19
    350a:	dc 93       	st	X, r29
    350c:	ce 93       	st	-X, r28
    350e:	52 97       	sbiw	r26, 0x12	; 18
    3510:	2e 81       	ldd	r18, Y+6	; 0x06
    3512:	3f 81       	ldd	r19, Y+7	; 0x07
    3514:	55 96       	adiw	r26, 0x15	; 21
    3516:	3c 93       	st	X, r19
    3518:	2e 93       	st	-X, r18
    351a:	54 97       	sbiw	r26, 0x14	; 20
    351c:	4e 81       	ldd	r20, Y+6	; 0x06
    351e:	5f 81       	ldd	r21, Y+7	; 0x07
    3520:	9d 01       	movw	r18, r26
    3522:	22 5f       	subi	r18, 0xF2	; 242
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	fa 01       	movw	r30, r20
    3528:	35 83       	std	Z+5, r19	; 0x05
    352a:	24 83       	std	Z+4, r18	; 0x04
    352c:	3f 83       	std	Y+7, r19	; 0x07
    352e:	2e 83       	std	Y+6, r18	; 0x06
    3530:	59 96       	adiw	r26, 0x19	; 25
    3532:	7c 93       	st	X, r23
    3534:	6e 93       	st	-X, r22
    3536:	58 97       	sbiw	r26, 0x18	; 24
    3538:	fb 01       	movw	r30, r22
    353a:	90 81       	ld	r25, Z
    353c:	9f 5f       	subi	r25, 0xFF	; 255
    353e:	90 83       	st	Z, r25
    3540:	5a 96       	adiw	r26, 0x1a	; 26
    3542:	2c 91       	ld	r18, X
    3544:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    3548:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>
    354c:	92 8d       	ldd	r25, Z+26	; 0x1a
    354e:	92 17       	cp	r25, r18
    3550:	48 f4       	brcc	.+18     	; 0x3564 <xTaskGenericNotifyFromISR+0x22c>
    3552:	c1 14       	cp	r12, r1
    3554:	d1 04       	cpc	r13, r1
    3556:	19 f0       	breq	.+6      	; 0x355e <xTaskGenericNotifyFromISR+0x226>
    3558:	91 e0       	ldi	r25, 0x01	; 1
    355a:	f6 01       	movw	r30, r12
    355c:	90 83       	st	Z, r25
    355e:	91 e0       	ldi	r25, 0x01	; 1
    3560:	90 93 f1 15 	sts	0x15F1, r25	; 0x8015f1 <xYieldPending>
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	0f 91       	pop	r16
    356a:	ff 90       	pop	r15
    356c:	ef 90       	pop	r14
    356e:	df 90       	pop	r13
    3570:	cf 90       	pop	r12
    3572:	bf 90       	pop	r11
    3574:	af 90       	pop	r10
    3576:	9f 90       	pop	r9
    3578:	8f 90       	pop	r8
    357a:	08 95       	ret

0000357c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    357c:	00 97       	sbiw	r24, 0x00	; 0
    357e:	21 f4       	brne	.+8      	; 0x3588 <xTaskGenericNotifyStateClear+0xc>
    3580:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxCurrentTCB>
    3584:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	fc 01       	movw	r30, r24
    3592:	e6 0f       	add	r30, r22
    3594:	f7 1f       	adc	r31, r23
    3596:	23 a9       	ldd	r18, Z+51	; 0x33
    3598:	22 30       	cpi	r18, 0x02	; 2
    359a:	31 f4       	brne	.+12     	; 0x35a8 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    359c:	fc 01       	movw	r30, r24
    359e:	e6 0f       	add	r30, r22
    35a0:	f7 1f       	adc	r31, r23
    35a2:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	01 c0       	rjmp	.+2      	; 0x35aa <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    35a8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    35aa:	0f 90       	pop	r0
    35ac:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    35ae:	08 95       	ret

000035b0 <prvGetNextExpireTime>:
    35b0:	dc 01       	movw	r26, r24
    35b2:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTimerList>
    35b6:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTimerList+0x1>
    35ba:	80 81       	ld	r24, Z
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	81 11       	cpse	r24, r1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9c 93       	st	X, r25
    35c4:	91 11       	cpse	r25, r1
    35c6:	08 c0       	rjmp	.+16     	; 0x35d8 <prvGetNextExpireTime+0x28>
    35c8:	07 80       	ldd	r0, Z+7	; 0x07
    35ca:	f0 85       	ldd	r31, Z+8	; 0x08
    35cc:	e0 2d       	mov	r30, r0
    35ce:	60 81       	ld	r22, Z
    35d0:	71 81       	ldd	r23, Z+1	; 0x01
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	93 81       	ldd	r25, Z+3	; 0x03
    35d6:	08 95       	ret
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	cb 01       	movw	r24, r22
    35de:	08 95       	ret

000035e0 <prvInsertTimerInActiveList>:
    35e0:	cf 92       	push	r12
    35e2:	df 92       	push	r13
    35e4:	ef 92       	push	r14
    35e6:	ff 92       	push	r15
    35e8:	0f 93       	push	r16
    35ea:	1f 93       	push	r17
    35ec:	fc 01       	movw	r30, r24
    35ee:	42 83       	std	Z+2, r20	; 0x02
    35f0:	53 83       	std	Z+3, r21	; 0x03
    35f2:	64 83       	std	Z+4, r22	; 0x04
    35f4:	75 83       	std	Z+5, r23	; 0x05
    35f6:	93 87       	std	Z+11, r25	; 0x0b
    35f8:	82 87       	std	Z+10, r24	; 0x0a
    35fa:	04 17       	cp	r16, r20
    35fc:	15 07       	cpc	r17, r21
    35fe:	26 07       	cpc	r18, r22
    3600:	37 07       	cpc	r19, r23
    3602:	c0 f0       	brcs	.+48     	; 0x3634 <prvInsertTimerInActiveList+0x54>
    3604:	0c 19       	sub	r16, r12
    3606:	1d 09       	sbc	r17, r13
    3608:	2e 09       	sbc	r18, r14
    360a:	3f 09       	sbc	r19, r15
    360c:	86 85       	ldd	r24, Z+14	; 0x0e
    360e:	97 85       	ldd	r25, Z+15	; 0x0f
    3610:	a0 89       	ldd	r26, Z+16	; 0x10
    3612:	b1 89       	ldd	r27, Z+17	; 0x11
    3614:	08 17       	cp	r16, r24
    3616:	19 07       	cpc	r17, r25
    3618:	2a 07       	cpc	r18, r26
    361a:	3b 07       	cpc	r19, r27
    361c:	00 f5       	brcc	.+64     	; 0x365e <prvInsertTimerInActiveList+0x7e>
    361e:	bf 01       	movw	r22, r30
    3620:	6e 5f       	subi	r22, 0xFE	; 254
    3622:	7f 4f       	sbci	r23, 0xFF	; 255
    3624:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <pxOverflowTimerList>
    3628:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <pxOverflowTimerList+0x1>
    362c:	0e 94 20 06 	call	0xc40	; 0xc40 <vListInsert>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	18 c0       	rjmp	.+48     	; 0x3664 <prvInsertTimerInActiveList+0x84>
    3634:	0c 15       	cp	r16, r12
    3636:	1d 05       	cpc	r17, r13
    3638:	2e 05       	cpc	r18, r14
    363a:	3f 05       	cpc	r19, r15
    363c:	28 f4       	brcc	.+10     	; 0x3648 <prvInsertTimerInActiveList+0x68>
    363e:	4c 15       	cp	r20, r12
    3640:	5d 05       	cpc	r21, r13
    3642:	6e 05       	cpc	r22, r14
    3644:	7f 05       	cpc	r23, r15
    3646:	68 f4       	brcc	.+26     	; 0x3662 <prvInsertTimerInActiveList+0x82>
    3648:	bf 01       	movw	r22, r30
    364a:	6e 5f       	subi	r22, 0xFE	; 254
    364c:	7f 4f       	sbci	r23, 0xFF	; 255
    364e:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTimerList>
    3652:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTimerList+0x1>
    3656:	0e 94 20 06 	call	0xc40	; 0xc40 <vListInsert>
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	03 c0       	rjmp	.+6      	; 0x3664 <prvInsertTimerInActiveList+0x84>
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	01 c0       	rjmp	.+2      	; 0x3664 <prvInsertTimerInActiveList+0x84>
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	08 95       	ret

00003672 <prvCheckForValidListAndQueue>:
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	0f 92       	push	r0
    3678:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xTimerQueue>
    367c:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    3680:	89 2b       	or	r24, r25
    3682:	e9 f4       	brne	.+58     	; 0x36be <prvCheckForValidListAndQueue+0x4c>
    3684:	80 ec       	ldi	r24, 0xC0	; 192
    3686:	96 e1       	ldi	r25, 0x16	; 22
    3688:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    368c:	85 eb       	ldi	r24, 0xB5	; 181
    368e:	96 e1       	ldi	r25, 0x16	; 22
    3690:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInitialise>
    3694:	80 ec       	ldi	r24, 0xC0	; 192
    3696:	96 e1       	ldi	r25, 0x16	; 22
    3698:	90 93 b4 16 	sts	0x16B4, r25	; 0x8016b4 <pxCurrentTimerList+0x1>
    369c:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <pxCurrentTimerList>
    36a0:	85 eb       	ldi	r24, 0xB5	; 181
    36a2:	96 e1       	ldi	r25, 0x16	; 22
    36a4:	90 93 b2 16 	sts	0x16B2, r25	; 0x8016b2 <pxOverflowTimerList+0x1>
    36a8:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <pxOverflowTimerList>
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	67 e0       	ldi	r22, 0x07	; 7
    36b0:	8a e0       	ldi	r24, 0x0A	; 10
    36b2:	0e 94 ce 08 	call	0x119c	; 0x119c <xQueueGenericCreate>
    36b6:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <xTimerQueue+0x1>
    36ba:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <xTimerQueue>
    36be:	0f 90       	pop	r0
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	08 95       	ret

000036c4 <xTimerCreateTimerTask>:
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	d3 df       	rcall	.-90     	; 0x3672 <prvCheckForValidListAndQueue>
    36cc:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xTimerQueue>
    36d0:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    36d4:	89 2b       	or	r24, r25
    36d6:	91 f0       	breq	.+36     	; 0x36fc <xTimerCreateTimerTask+0x38>
    36d8:	0f 2e       	mov	r0, r31
    36da:	fd ea       	ldi	r31, 0xAD	; 173
    36dc:	ef 2e       	mov	r14, r31
    36de:	f6 e1       	ldi	r31, 0x16	; 22
    36e0:	ff 2e       	mov	r15, r31
    36e2:	f0 2d       	mov	r31, r0
    36e4:	03 e0       	ldi	r16, 0x03	; 3
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 ec       	ldi	r20, 0xC0	; 192
    36ec:	50 e0       	ldi	r21, 0x00	; 0
    36ee:	68 e3       	ldi	r22, 0x38	; 56
    36f0:	73 e0       	ldi	r23, 0x03	; 3
    36f2:	87 ed       	ldi	r24, 0xD7	; 215
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
    36fa:	01 c0       	rjmp	.+2      	; 0x36fe <xTimerCreateTimerTask+0x3a>
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	0f 91       	pop	r16
    3700:	ff 90       	pop	r15
    3702:	ef 90       	pop	r14
    3704:	08 95       	ret

00003706 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3706:	8f 92       	push	r8
    3708:	9f 92       	push	r9
    370a:	af 92       	push	r10
    370c:	bf 92       	push	r11
    370e:	cf 92       	push	r12
    3710:	df 92       	push	r13
    3712:	ef 92       	push	r14
    3714:	ff 92       	push	r15
    3716:	0f 93       	push	r16
    3718:	1f 93       	push	r17
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	27 97       	sbiw	r28, 0x07	; 7
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    372e:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <xTimerQueue>
    3732:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    3736:	30 97       	sbiw	r30, 0x00	; 0
    3738:	81 f1       	breq	.+96     	; 0x379a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    373a:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    373c:	2a 83       	std	Y+2, r18	; 0x02
    373e:	3b 83       	std	Y+3, r19	; 0x03
    3740:	4c 83       	std	Y+4, r20	; 0x04
    3742:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3744:	9f 83       	std	Y+7, r25	; 0x07
    3746:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3748:	66 30       	cpi	r22, 0x06	; 6
    374a:	f4 f4       	brge	.+60     	; 0x3788 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    374c:	c3 da       	rcall	.-2682   	; 0x2cd4 <xTaskGetSchedulerState>
    374e:	82 30       	cpi	r24, 0x02	; 2
    3750:	69 f4       	brne	.+26     	; 0x376c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3752:	00 e0       	ldi	r16, 0x00	; 0
    3754:	a7 01       	movw	r20, r14
    3756:	96 01       	movw	r18, r12
    3758:	be 01       	movw	r22, r28
    375a:	6f 5f       	subi	r22, 0xFF	; 255
    375c:	7f 4f       	sbci	r23, 0xFF	; 255
    375e:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xTimerQueue>
    3762:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    3766:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xQueueGenericSend>
    376a:	18 c0       	rjmp	.+48     	; 0x379c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    376c:	00 e0       	ldi	r16, 0x00	; 0
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	a9 01       	movw	r20, r18
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xTimerQueue>
    377e:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    3782:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xQueueGenericSend>
    3786:	0a c0       	rjmp	.+20     	; 0x379c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	a8 01       	movw	r20, r16
    378c:	be 01       	movw	r22, r28
    378e:	6f 5f       	subi	r22, 0xFF	; 255
    3790:	7f 4f       	sbci	r23, 0xFF	; 255
    3792:	cf 01       	movw	r24, r30
    3794:	0e 94 83 09 	call	0x1306	; 0x1306 <xQueueGenericSendFromISR>
    3798:	01 c0       	rjmp	.+2      	; 0x379c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    379a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    379c:	27 96       	adiw	r28, 0x07	; 7
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	df 91       	pop	r29
    37aa:	cf 91       	pop	r28
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	df 90       	pop	r13
    37b6:	cf 90       	pop	r12
    37b8:	bf 90       	pop	r11
    37ba:	af 90       	pop	r10
    37bc:	9f 90       	pop	r9
    37be:	8f 90       	pop	r8
    37c0:	08 95       	ret

000037c2 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    37c2:	8f 92       	push	r8
    37c4:	9f 92       	push	r9
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37da:	3b c0       	rjmp	.+118    	; 0x3852 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37dc:	07 80       	ldd	r0, Z+7	; 0x07
    37de:	f0 85       	ldd	r31, Z+8	; 0x08
    37e0:	e0 2d       	mov	r30, r0
    37e2:	80 80       	ld	r8, Z
    37e4:	91 80       	ldd	r9, Z+1	; 0x01
    37e6:	a2 80       	ldd	r10, Z+2	; 0x02
    37e8:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37ea:	c0 85       	ldd	r28, Z+8	; 0x08
    37ec:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37ee:	8e 01       	movw	r16, r28
    37f0:	0e 5f       	subi	r16, 0xFE	; 254
    37f2:	1f 4f       	sbci	r17, 0xFF	; 255
    37f4:	c8 01       	movw	r24, r16
    37f6:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37fa:	ec 89       	ldd	r30, Y+20	; 0x14
    37fc:	fd 89       	ldd	r31, Y+21	; 0x15
    37fe:	ce 01       	movw	r24, r28
    3800:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3802:	8e 89       	ldd	r24, Y+22	; 0x16
    3804:	82 ff       	sbrs	r24, 2
    3806:	25 c0       	rjmp	.+74     	; 0x3852 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3808:	8e 85       	ldd	r24, Y+14	; 0x0e
    380a:	9f 85       	ldd	r25, Y+15	; 0x0f
    380c:	a8 89       	ldd	r26, Y+16	; 0x10
    380e:	b9 89       	ldd	r27, Y+17	; 0x11
    3810:	88 0d       	add	r24, r8
    3812:	99 1d       	adc	r25, r9
    3814:	aa 1d       	adc	r26, r10
    3816:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3818:	88 16       	cp	r8, r24
    381a:	99 06       	cpc	r9, r25
    381c:	aa 06       	cpc	r10, r26
    381e:	bb 06       	cpc	r11, r27
    3820:	70 f4       	brcc	.+28     	; 0x383e <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3822:	8a 83       	std	Y+2, r24	; 0x02
    3824:	9b 83       	std	Y+3, r25	; 0x03
    3826:	ac 83       	std	Y+4, r26	; 0x04
    3828:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    382a:	db 87       	std	Y+11, r29	; 0x0b
    382c:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    382e:	b8 01       	movw	r22, r16
    3830:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTimerList>
    3834:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTimerList+0x1>
    3838:	0e 94 20 06 	call	0xc40	; 0xc40 <vListInsert>
    383c:	0a c0       	rjmp	.+20     	; 0x3852 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    383e:	c1 2c       	mov	r12, r1
    3840:	d1 2c       	mov	r13, r1
    3842:	76 01       	movw	r14, r12
    3844:	00 e0       	ldi	r16, 0x00	; 0
    3846:	10 e0       	ldi	r17, 0x00	; 0
    3848:	a5 01       	movw	r20, r10
    384a:	94 01       	movw	r18, r8
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	ce 01       	movw	r24, r28
    3850:	5a df       	rcall	.-332    	; 0x3706 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3852:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTimerList>
    3856:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTimerList+0x1>
    385a:	80 81       	ld	r24, Z
    385c:	81 11       	cpse	r24, r1
    385e:	be cf       	rjmp	.-132    	; 0x37dc <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3860:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <pxOverflowTimerList>
    3864:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <pxOverflowTimerList+0x1>
    3868:	90 93 b4 16 	sts	0x16B4, r25	; 0x8016b4 <pxCurrentTimerList+0x1>
    386c:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3870:	f0 93 b2 16 	sts	0x16B2, r31	; 0x8016b2 <pxOverflowTimerList+0x1>
    3874:	e0 93 b1 16 	sts	0x16B1, r30	; 0x8016b1 <pxOverflowTimerList>
    }
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	ff 90       	pop	r15
    3882:	ef 90       	pop	r14
    3884:	df 90       	pop	r13
    3886:	cf 90       	pop	r12
    3888:	bf 90       	pop	r11
    388a:	af 90       	pop	r10
    388c:	9f 90       	pop	r9
    388e:	8f 90       	pop	r8
    3890:	08 95       	ret

00003892 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3892:	cf 92       	push	r12
    3894:	df 92       	push	r13
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    38a0:	0e 94 ed 10 	call	0x21da	; 0x21da <xTaskGetTickCount>
    38a4:	6b 01       	movw	r12, r22
    38a6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    38a8:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xLastTime.2436>
    38ac:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xLastTime.2436+0x1>
    38b0:	a0 91 ab 16 	lds	r26, 0x16AB	; 0x8016ab <xLastTime.2436+0x2>
    38b4:	b0 91 ac 16 	lds	r27, 0x16AC	; 0x8016ac <xLastTime.2436+0x3>
    38b8:	c8 16       	cp	r12, r24
    38ba:	d9 06       	cpc	r13, r25
    38bc:	ea 06       	cpc	r14, r26
    38be:	fb 06       	cpc	r15, r27
    38c0:	20 f4       	brcc	.+8      	; 0x38ca <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    38c2:	7f df       	rcall	.-258    	; 0x37c2 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	88 83       	st	Y, r24
    38c8:	01 c0       	rjmp	.+2      	; 0x38cc <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    38ca:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    38cc:	c0 92 a9 16 	sts	0x16A9, r12	; 0x8016a9 <xLastTime.2436>
    38d0:	d0 92 aa 16 	sts	0x16AA, r13	; 0x8016aa <xLastTime.2436+0x1>
    38d4:	e0 92 ab 16 	sts	0x16AB, r14	; 0x8016ab <xLastTime.2436+0x2>
    38d8:	f0 92 ac 16 	sts	0x16AC, r15	; 0x8016ac <xLastTime.2436+0x3>

        return xTimeNow;
    }
    38dc:	c7 01       	movw	r24, r14
    38de:	b6 01       	movw	r22, r12
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	ff 90       	pop	r15
    38e6:	ef 90       	pop	r14
    38e8:	df 90       	pop	r13
    38ea:	cf 90       	pop	r12
    38ec:	08 95       	ret

000038ee <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    38ee:	4f 92       	push	r4
    38f0:	5f 92       	push	r5
    38f2:	6f 92       	push	r6
    38f4:	7f 92       	push	r7
    38f6:	8f 92       	push	r8
    38f8:	9f 92       	push	r9
    38fa:	af 92       	push	r10
    38fc:	bf 92       	push	r11
    38fe:	cf 92       	push	r12
    3900:	df 92       	push	r13
    3902:	ef 92       	push	r14
    3904:	ff 92       	push	r15
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	4b 01       	movw	r8, r22
    3910:	5c 01       	movw	r10, r24
    3912:	29 01       	movw	r4, r18
    3914:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3916:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTimerList>
    391a:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTimerList+0x1>
    391e:	07 80       	ldd	r0, Z+7	; 0x07
    3920:	f0 85       	ldd	r31, Z+8	; 0x08
    3922:	e0 2d       	mov	r30, r0
    3924:	c0 85       	ldd	r28, Z+8	; 0x08
    3926:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3928:	ce 01       	movw	r24, r28
    392a:	02 96       	adiw	r24, 0x02	; 2
    392c:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3930:	8e 89       	ldd	r24, Y+22	; 0x16
    3932:	82 ff       	sbrs	r24, 2
    3934:	1b c0       	rjmp	.+54     	; 0x396c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3936:	4e 85       	ldd	r20, Y+14	; 0x0e
    3938:	5f 85       	ldd	r21, Y+15	; 0x0f
    393a:	68 89       	ldd	r22, Y+16	; 0x10
    393c:	79 89       	ldd	r23, Y+17	; 0x11
    393e:	48 0d       	add	r20, r8
    3940:	59 1d       	adc	r21, r9
    3942:	6a 1d       	adc	r22, r10
    3944:	7b 1d       	adc	r23, r11
    3946:	75 01       	movw	r14, r10
    3948:	64 01       	movw	r12, r8
    394a:	93 01       	movw	r18, r6
    394c:	82 01       	movw	r16, r4
    394e:	ce 01       	movw	r24, r28
    3950:	47 de       	rcall	.-882    	; 0x35e0 <prvInsertTimerInActiveList>
    3952:	88 23       	and	r24, r24
    3954:	69 f0       	breq	.+26     	; 0x3970 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3956:	c1 2c       	mov	r12, r1
    3958:	d1 2c       	mov	r13, r1
    395a:	76 01       	movw	r14, r12
    395c:	00 e0       	ldi	r16, 0x00	; 0
    395e:	10 e0       	ldi	r17, 0x00	; 0
    3960:	a5 01       	movw	r20, r10
    3962:	94 01       	movw	r18, r8
    3964:	60 e0       	ldi	r22, 0x00	; 0
    3966:	ce 01       	movw	r24, r28
    3968:	ce de       	rcall	.-612    	; 0x3706 <xTimerGenericCommand>
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    396c:	8e 7f       	andi	r24, 0xFE	; 254
    396e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3970:	ec 89       	ldd	r30, Y+20	; 0x14
    3972:	fd 89       	ldd	r31, Y+21	; 0x15
    3974:	ce 01       	movw	r24, r28
    3976:	19 95       	eicall
    }
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	ff 90       	pop	r15
    3982:	ef 90       	pop	r14
    3984:	df 90       	pop	r13
    3986:	cf 90       	pop	r12
    3988:	bf 90       	pop	r11
    398a:	af 90       	pop	r10
    398c:	9f 90       	pop	r9
    398e:	8f 90       	pop	r8
    3990:	7f 90       	pop	r7
    3992:	6f 90       	pop	r6
    3994:	5f 90       	pop	r5
    3996:	4f 90       	pop	r4
    3998:	08 95       	ret

0000399a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    399a:	8f 92       	push	r8
    399c:	9f 92       	push	r9
    399e:	af 92       	push	r10
    39a0:	bf 92       	push	r11
    39a2:	cf 92       	push	r12
    39a4:	df 92       	push	r13
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	1f 92       	push	r1
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
    39b6:	6b 01       	movw	r12, r22
    39b8:	7c 01       	movw	r14, r24
    39ba:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    39bc:	0e 94 e7 10 	call	0x21ce	; 0x21ce <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    39c0:	ce 01       	movw	r24, r28
    39c2:	01 96       	adiw	r24, 0x01	; 1
    39c4:	66 df       	rcall	.-308    	; 0x3892 <prvSampleTimeNow>
    39c6:	4b 01       	movw	r8, r22
    39c8:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	81 11       	cpse	r24, r1
    39ce:	2d c0       	rjmp	.+90     	; 0x3a2a <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    39d0:	11 11       	cpse	r17, r1
    39d2:	0d c0       	rjmp	.+26     	; 0x39ee <prvProcessTimerOrBlockTask+0x54>
    39d4:	8c 14       	cp	r8, r12
    39d6:	9d 04       	cpc	r9, r13
    39d8:	ae 04       	cpc	r10, r14
    39da:	bf 04       	cpc	r11, r15
    39dc:	40 f0       	brcs	.+16     	; 0x39ee <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    39de:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39e2:	a5 01       	movw	r20, r10
    39e4:	94 01       	movw	r18, r8
    39e6:	c7 01       	movw	r24, r14
    39e8:	b6 01       	movw	r22, r12
    39ea:	81 df       	rcall	.-254    	; 0x38ee <prvProcessExpiredTimer>
    39ec:	20 c0       	rjmp	.+64     	; 0x3a2e <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    39ee:	11 23       	and	r17, r17
    39f0:	41 f0       	breq	.+16     	; 0x3a02 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    39f2:	e0 91 b1 16 	lds	r30, 0x16B1	; 0x8016b1 <pxOverflowTimerList>
    39f6:	f0 91 b2 16 	lds	r31, 0x16B2	; 0x8016b2 <pxOverflowTimerList+0x1>
    39fa:	80 81       	ld	r24, Z
    39fc:	11 e0       	ldi	r17, 0x01	; 1
    39fe:	81 11       	cpse	r24, r1
    3a00:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3a02:	b7 01       	movw	r22, r14
    3a04:	a6 01       	movw	r20, r12
    3a06:	48 19       	sub	r20, r8
    3a08:	59 09       	sbc	r21, r9
    3a0a:	6a 09       	sbc	r22, r10
    3a0c:	7b 09       	sbc	r23, r11
    3a0e:	21 2f       	mov	r18, r17
    3a10:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xTimerQueue>
    3a14:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    3a18:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3a1c:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
    3a20:	81 11       	cpse	r24, r1
    3a22:	05 c0       	rjmp	.+10     	; 0x3a2e <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3a24:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    3a28:	02 c0       	rjmp	.+4      	; 0x3a2e <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3a2a:	0e 94 27 12 	call	0x244e	; 0x244e <xTaskResumeAll>
            }
        }
    }
    3a2e:	0f 90       	pop	r0
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	1f 91       	pop	r17
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	bf 90       	pop	r11
    3a40:	af 90       	pop	r10
    3a42:	9f 90       	pop	r9
    3a44:	8f 90       	pop	r8
    3a46:	08 95       	ret

00003a48 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a48:	af 92       	push	r10
    3a4a:	bf 92       	push	r11
    3a4c:	cf 92       	push	r12
    3a4e:	df 92       	push	r13
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	28 97       	sbiw	r28, 0x08	; 8
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a6c:	82 c0       	rjmp	.+260    	; 0x3b72 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	88 23       	and	r24, r24
    3a72:	0c f4       	brge	.+2      	; 0x3a76 <prvProcessReceivedCommands+0x2e>
    3a74:	7e c0       	rjmp	.+252    	; 0x3b72 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a76:	ae 80       	ldd	r10, Y+6	; 0x06
    3a78:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a7a:	d5 01       	movw	r26, r10
    3a7c:	1c 96       	adiw	r26, 0x0c	; 12
    3a7e:	8d 91       	ld	r24, X+
    3a80:	9c 91       	ld	r25, X
    3a82:	1d 97       	sbiw	r26, 0x0d	; 13
    3a84:	89 2b       	or	r24, r25
    3a86:	21 f0       	breq	.+8      	; 0x3a90 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a88:	c5 01       	movw	r24, r10
    3a8a:	02 96       	adiw	r24, 0x02	; 2
    3a8c:	0e 94 5d 06 	call	0xcba	; 0xcba <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a90:	ce 01       	movw	r24, r28
    3a92:	08 96       	adiw	r24, 0x08	; 8
    3a94:	fe de       	rcall	.-516    	; 0x3892 <prvSampleTimeNow>
    3a96:	8b 01       	movw	r16, r22
    3a98:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9c:	0e 2e       	mov	r0, r30
    3a9e:	00 0c       	add	r0, r0
    3aa0:	ff 0b       	sbc	r31, r31
    3aa2:	ea 30       	cpi	r30, 0x0A	; 10
    3aa4:	f1 05       	cpc	r31, r1
    3aa6:	08 f0       	brcs	.+2      	; 0x3aaa <prvProcessReceivedCommands+0x62>
    3aa8:	64 c0       	rjmp	.+200    	; 0x3b72 <prvProcessReceivedCommands+0x12a>
    3aaa:	88 27       	eor	r24, r24
    3aac:	ee 58       	subi	r30, 0x8E	; 142
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ab2:	0c 94 bb 2f 	jmp	0x5f76	; 0x5f76 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3ab6:	f5 01       	movw	r30, r10
    3ab8:	86 89       	ldd	r24, Z+22	; 0x16
    3aba:	81 60       	ori	r24, 0x01	; 1
    3abc:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3abe:	ca 80       	ldd	r12, Y+2	; 0x02
    3ac0:	db 80       	ldd	r13, Y+3	; 0x03
    3ac2:	ec 80       	ldd	r14, Y+4	; 0x04
    3ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ac6:	46 85       	ldd	r20, Z+14	; 0x0e
    3ac8:	57 85       	ldd	r21, Z+15	; 0x0f
    3aca:	60 89       	ldd	r22, Z+16	; 0x10
    3acc:	71 89       	ldd	r23, Z+17	; 0x11
    3ace:	4c 0d       	add	r20, r12
    3ad0:	5d 1d       	adc	r21, r13
    3ad2:	6e 1d       	adc	r22, r14
    3ad4:	7f 1d       	adc	r23, r15
    3ad6:	c5 01       	movw	r24, r10
    3ad8:	83 dd       	rcall	.-1274   	; 0x35e0 <prvInsertTimerInActiveList>
    3ada:	88 23       	and	r24, r24
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <prvProcessReceivedCommands+0x98>
    3ade:	49 c0       	rjmp	.+146    	; 0x3b72 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3ae0:	d5 01       	movw	r26, r10
    3ae2:	54 96       	adiw	r26, 0x14	; 20
    3ae4:	ed 91       	ld	r30, X+
    3ae6:	fc 91       	ld	r31, X
    3ae8:	55 97       	sbiw	r26, 0x15	; 21
    3aea:	c5 01       	movw	r24, r10
    3aec:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3aee:	f5 01       	movw	r30, r10
    3af0:	86 89       	ldd	r24, Z+22	; 0x16
    3af2:	82 ff       	sbrs	r24, 2
    3af4:	3e c0       	rjmp	.+124    	; 0x3b72 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3af6:	4a 81       	ldd	r20, Y+2	; 0x02
    3af8:	5b 81       	ldd	r21, Y+3	; 0x03
    3afa:	6c 81       	ldd	r22, Y+4	; 0x04
    3afc:	7d 81       	ldd	r23, Y+5	; 0x05
    3afe:	86 85       	ldd	r24, Z+14	; 0x0e
    3b00:	97 85       	ldd	r25, Z+15	; 0x0f
    3b02:	a0 89       	ldd	r26, Z+16	; 0x10
    3b04:	b1 89       	ldd	r27, Z+17	; 0x11
    3b06:	9a 01       	movw	r18, r20
    3b08:	ab 01       	movw	r20, r22
    3b0a:	28 0f       	add	r18, r24
    3b0c:	39 1f       	adc	r19, r25
    3b0e:	4a 1f       	adc	r20, r26
    3b10:	5b 1f       	adc	r21, r27
    3b12:	c1 2c       	mov	r12, r1
    3b14:	d1 2c       	mov	r13, r1
    3b16:	76 01       	movw	r14, r12
    3b18:	00 e0       	ldi	r16, 0x00	; 0
    3b1a:	10 e0       	ldi	r17, 0x00	; 0
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	c5 01       	movw	r24, r10
    3b20:	f2 dd       	rcall	.-1052   	; 0x3706 <xTimerGenericCommand>
    3b22:	27 c0       	rjmp	.+78     	; 0x3b72 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b24:	d5 01       	movw	r26, r10
    3b26:	56 96       	adiw	r26, 0x16	; 22
    3b28:	8c 91       	ld	r24, X
    3b2a:	56 97       	sbiw	r26, 0x16	; 22
    3b2c:	8e 7f       	andi	r24, 0xFE	; 254
    3b2e:	56 96       	adiw	r26, 0x16	; 22
    3b30:	8c 93       	st	X, r24
                        break;
    3b32:	1f c0       	rjmp	.+62     	; 0x3b72 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b34:	f5 01       	movw	r30, r10
    3b36:	86 89       	ldd	r24, Z+22	; 0x16
    3b38:	81 60       	ori	r24, 0x01	; 1
    3b3a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b3c:	4a 81       	ldd	r20, Y+2	; 0x02
    3b3e:	5b 81       	ldd	r21, Y+3	; 0x03
    3b40:	6c 81       	ldd	r22, Y+4	; 0x04
    3b42:	7d 81       	ldd	r23, Y+5	; 0x05
    3b44:	46 87       	std	Z+14, r20	; 0x0e
    3b46:	57 87       	std	Z+15, r21	; 0x0f
    3b48:	60 8b       	std	Z+16, r22	; 0x10
    3b4a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b4c:	40 0f       	add	r20, r16
    3b4e:	51 1f       	adc	r21, r17
    3b50:	62 1f       	adc	r22, r18
    3b52:	73 1f       	adc	r23, r19
    3b54:	68 01       	movw	r12, r16
    3b56:	79 01       	movw	r14, r18
    3b58:	c5 01       	movw	r24, r10
    3b5a:	42 dd       	rcall	.-1404   	; 0x35e0 <prvInsertTimerInActiveList>
                        break;
    3b5c:	0a c0       	rjmp	.+20     	; 0x3b72 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b5e:	f5 01       	movw	r30, r10
    3b60:	86 89       	ldd	r24, Z+22	; 0x16
    3b62:	81 fd       	sbrc	r24, 1
    3b64:	04 c0       	rjmp	.+8      	; 0x3b6e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b66:	c5 01       	movw	r24, r10
    3b68:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vPortFree>
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b6e:	8e 7f       	andi	r24, 0xFE	; 254
    3b70:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	a9 01       	movw	r20, r18
    3b78:	be 01       	movw	r22, r28
    3b7a:	6f 5f       	subi	r22, 0xFF	; 255
    3b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7e:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xTimerQueue>
    3b82:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xTimerQueue+0x1>
    3b86:	0e 94 be 09 	call	0x137c	; 0x137c <xQueueReceive>
    3b8a:	81 11       	cpse	r24, r1
    3b8c:	70 cf       	rjmp	.-288    	; 0x3a6e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3b8e:	28 96       	adiw	r28, 0x08	; 8
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	de bf       	out	0x3e, r29	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	bf 90       	pop	r11
    3bac:	af 90       	pop	r10
    3bae:	08 95       	ret

00003bb0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3bb0:	08 95       	ret

00003bb2 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3bb2:	84 b1       	in	r24, 0x04	; 4
    3bb4:	80 68       	ori	r24, 0x80	; 128
    3bb6:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3bb8:	85 b1       	in	r24, 0x05	; 5
    3bba:	80 68       	ori	r24, 0x80	; 128
    3bbc:	85 b9       	out	0x05, r24	; 5
    3bbe:	08 95       	ret

00003bc0 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3bc0:	83 b1       	in	r24, 0x03	; 3
    3bc2:	80 68       	ori	r24, 0x80	; 128
    3bc4:	83 b9       	out	0x03, r24	; 3
    3bc6:	08 95       	ret

00003bc8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3bc8:	f4 df       	rcall	.-24     	; 0x3bb2 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3bca:	2f ef       	ldi	r18, 0xFF	; 255
    3bcc:	80 e7       	ldi	r24, 0x70	; 112
    3bce:	92 e0       	ldi	r25, 0x02	; 2
    3bd0:	21 50       	subi	r18, 0x01	; 1
    3bd2:	80 40       	sbci	r24, 0x00	; 0
    3bd4:	90 40       	sbci	r25, 0x00	; 0
    3bd6:	e1 f7       	brne	.-8      	; 0x3bd0 <vApplicationMallocFailedHook+0x8>
    3bd8:	00 c0       	rjmp	.+0      	; 0x3bda <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3bda:	00 00       	nop
    3bdc:	f1 df       	rcall	.-30     	; 0x3bc0 <prvBlinkMainLed>
    3bde:	f5 cf       	rjmp	.-22     	; 0x3bca <vApplicationMallocFailedHook+0x2>

00003be0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3be0:	e8 df       	rcall	.-48     	; 0x3bb2 <prvSetMainLedOn>
    3be2:	2f ef       	ldi	r18, 0xFF	; 255
    3be4:	87 ea       	ldi	r24, 0xA7	; 167
    3be6:	91 e6       	ldi	r25, 0x61	; 97
    3be8:	21 50       	subi	r18, 0x01	; 1
    3bea:	80 40       	sbci	r24, 0x00	; 0
    3bec:	90 40       	sbci	r25, 0x00	; 0
    3bee:	e1 f7       	brne	.-8      	; 0x3be8 <vApplicationStackOverflowHook+0x8>
    3bf0:	00 c0       	rjmp	.+0      	; 0x3bf2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3bf2:	00 00       	nop
    3bf4:	e5 df       	rcall	.-54     	; 0x3bc0 <prvBlinkMainLed>
    3bf6:	f5 cf       	rjmp	.-22     	; 0x3be2 <vApplicationStackOverflowHook+0x2>

00003bf8 <create_message_buffer>:
 #include "Utility.h"
 #include <lora_driver.h>
 const size_t xMessageBufferSizeBytes = 100;
 void create_message_buffer()
 {
	 xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	84 e6       	ldi	r24, 0x64	; 100
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xStreamBufferGenericCreate>
    3c06:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <xMessageBuffer+0x1>
    3c0a:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <xMessageBuffer>
	 downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);;
    3c0e:	41 e0       	ldi	r20, 0x01	; 1
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	8c e2       	ldi	r24, 0x2C	; 44
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xStreamBufferGenericCreate>
    3c1c:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <downlinkMessageBuffer+0x1>
    3c20:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <downlinkMessageBuffer>
    3c24:	08 95       	ret

00003c26 <create_event_groups>:
 }
 
 
void create_event_groups()
{
	_meassureEventGroup=xEventGroupCreate();
    3c26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <xEventGroupCreate>
    3c2a:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <_meassureEventGroup+0x1>
    3c2e:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <_meassureEventGroup>
	_dataReadyEventGroup=xEventGroupCreate();
    3c32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <xEventGroupCreate>
    3c36:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <_dataReadyEventGroup+0x1>
    3c3a:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <_dataReadyEventGroup>
    3c3e:	08 95       	ret

00003c40 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    3c40:	86 e0       	ldi	r24, 0x06	; 6
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	0e 94 25 05 	call	0xa4a	; 0xa4a <pvPortMalloc>
    3c48:	90 93 68 18 	sts	0x1868, r25	; 0x801868 <packet+0x1>
    3c4c:	80 93 67 18 	sts	0x1867, r24	; 0x801867 <packet>
	
	if (NULL == packet){
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	11 f4       	brne	.+4      	; 0x3c58 <SensorDataPackage_create+0x18>
		return NULL;
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return packet;
}
    3c58:	08 95       	ret

00003c5a <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3c5a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <packet>
    3c5e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <packet+0x1>
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	80 83       	st	Z, r24
    3c66:	08 95       	ret

00003c68 <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3c68:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <packet>
    3c6c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <packet+0x1>
    3c70:	93 83       	std	Z+3, r25	; 0x03
    3c72:	82 83       	std	Z+2, r24	; 0x02
    3c74:	08 95       	ret

00003c76 <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    3c76:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <packet>
    3c7a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <packet+0x1>
    3c7e:	95 83       	std	Z+5, r25	; 0x05
    3c80:	84 83       	std	Z+4, r24	; 0x04
    3c82:	08 95       	ret

00003c84 <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3c84:	eb ec       	ldi	r30, 0xCB	; 203
    3c86:	f6 e1       	ldi	r31, 0x16	; 22
    3c88:	26 e0       	ldi	r18, 0x06	; 6
    3c8a:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    3c8c:	60 83       	st	Z, r22
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3c8e:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <packet>
    3c92:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <packet+0x1>
    3c96:	2c 91       	ld	r18, X
    3c98:	11 96       	adiw	r26, 0x01	; 1
    3c9a:	3c 91       	ld	r19, X
    3c9c:	11 97       	sbiw	r26, 0x01	; 1
    3c9e:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3ca0:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3ca2:	12 96       	adiw	r26, 0x02	; 2
    3ca4:	2c 91       	ld	r18, X
    3ca6:	12 97       	sbiw	r26, 0x02	; 2
    3ca8:	13 96       	adiw	r26, 0x03	; 3
    3caa:	3c 91       	ld	r19, X
    3cac:	13 97       	sbiw	r26, 0x03	; 3
    3cae:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3cb0:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3cb2:	14 96       	adiw	r26, 0x04	; 4
    3cb4:	2c 91       	ld	r18, X
    3cb6:	14 97       	sbiw	r26, 0x04	; 4
    3cb8:	15 96       	adiw	r26, 0x05	; 5
    3cba:	3c 91       	ld	r19, X
    3cbc:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3cbe:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    3cc0:	26 e1       	ldi	r18, 0x16	; 22
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	01 90       	ld	r0, Z+
    3cc6:	0d 92       	st	X+, r0
    3cc8:	2a 95       	dec	r18
    3cca:	e1 f7       	brne	.-8      	; 0x3cc4 <getLoRaPayload+0x40>
	};
    3ccc:	08 95       	ret

00003cce <get_temperature_data>:
}
//------Get temperature data-----------

uint16_t get_temperature_data()
{
	return (uint16_t)temperature;
    3cce:	60 91 e5 16 	lds	r22, 0x16E5	; 0x8016e5 <temperature>
    3cd2:	70 91 e6 16 	lds	r23, 0x16E6	; 0x8016e6 <temperature+0x1>
    3cd6:	80 91 e7 16 	lds	r24, 0x16E7	; 0x8016e7 <temperature+0x2>
    3cda:	90 91 e8 16 	lds	r25, 0x16E8	; 0x8016e8 <temperature+0x3>
    3cde:	fb d1       	rcall	.+1014   	; 0x40d6 <__fixunssfsi>
}
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	08 95       	ret

00003ce4 <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
	return (uint16_t)humidity;
    3ce4:	60 91 e1 16 	lds	r22, 0x16E1	; 0x8016e1 <humidity>
    3ce8:	70 91 e2 16 	lds	r23, 0x16E2	; 0x8016e2 <humidity+0x1>
    3cec:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <humidity+0x2>
    3cf0:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <humidity+0x3>
    3cf4:	f0 d1       	rcall	.+992    	; 0x40d6 <__fixunssfsi>
}
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	08 95       	ret

00003cfa <tempHum_taskCreate>:

void tempHum_taskCreate(UBaseType_t task_priority){
    3cfa:	ef 92       	push	r14
    3cfc:	ff 92       	push	r15
    3cfe:	0f 93       	push	r16
	xTaskCreate(
    3d00:	e1 2c       	mov	r14, r1
    3d02:	f1 2c       	mov	r15, r1
    3d04:	08 2f       	mov	r16, r24
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 ec       	ldi	r20, 0xC0	; 192
    3d0c:	50 e0       	ldi	r21, 0x00	; 0
    3d0e:	60 e4       	ldi	r22, 0x40	; 64
    3d10:	73 e0       	ldi	r23, 0x03	; 3
    3d12:	8b e0       	ldi	r24, 0x0B	; 11
    3d14:	9f e1       	ldi	r25, 0x1F	; 31
    3d16:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  task_priority // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	08 95       	ret

00003d22 <tempHum_Run>:


/* Task to run for the sensors to work */
void tempHum_Run() {
    3d22:	cf 92       	push	r12
    3d24:	df 92       	push	r13
    3d26:	ef 92       	push	r14
    3d28:	ff 92       	push	r15
    3d2a:	0f 93       	push	r16
	//Wait for Event bits to be set in Group
	event_measure = xEventGroupWaitBits(
    3d2c:	cc 24       	eor	r12, r12
    3d2e:	ca 94       	dec	r12
    3d30:	dc 2c       	mov	r13, r12
    3d32:	76 01       	movw	r14, r12
    3d34:	01 e0       	ldi	r16, 0x01	; 1
    3d36:	21 e0       	ldi	r18, 0x01	; 1
    3d38:	41 e0       	ldi	r20, 0x01	; 1
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_meassureEventGroup>
    3d44:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_meassureEventGroup+0x1>
    3d48:	0e 94 84 03 	call	0x708	; 0x708 <xEventGroupWaitBits>
    3d4c:	60 93 69 18 	sts	0x1869, r22	; 0x801869 <event_measure>
    3d50:	70 93 6a 18 	sts	0x186A, r23	; 0x80186a <event_measure+0x1>
    3d54:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <event_measure+0x2>
    3d58:	90 93 6c 18 	sts	0x186C, r25	; 0x80186c <event_measure+0x3>
	BIT_TEMPERATURE_HUMIDITY,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	
	if ((event_measure & BIT_TEMPERATURE_HUMIDITY) ==BIT_TEMPERATURE_HUMIDITY)
    3d5c:	60 ff       	sbrs	r22, 0
    3d5e:	55 c0       	rjmp	.+170    	; 0x3e0a <tempHum_Run+0xe8>
	{
		
		vTaskDelay( pdMS_TO_TICKS(100UL));
    3d60:	66 e0       	ldi	r22, 0x06	; 6
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    3d6c:	4e d2       	rcall	.+1180   	; 0x420a <hih8120_wakeup>
    3d6e:	88 23       	and	r24, r24
    3d70:	c1 f0       	breq	.+48     	; 0x3da2 <tempHum_Run+0x80>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3d72:	66 e0       	ldi	r22, 0x06	; 6
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    3d7e:	85 e5       	ldi	r24, 0x55	; 85
    3d80:	93 e0       	ldi	r25, 0x03	; 3
    3d82:	9f 93       	push	r25
    3d84:	8f 93       	push	r24
    3d86:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	06 c0       	rjmp	.+12     	; 0x3d9c <tempHum_Run+0x7a>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    3d90:	63 e0       	ldi	r22, 0x03	; 3
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3d9c:	36 d2       	rcall	.+1132   	; 0x420a <hih8120_wakeup>
    3d9e:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    3da0:	b9 f3       	breq	.-18     	; 0x3d90 <tempHum_Run+0x6e>
    3da2:	48 d2       	rcall	.+1168   	; 0x4234 <hih8120_measure>
		
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3da4:	63 e0       	ldi	r22, 0x03	; 3
    3da6:	70 e0       	ldi	r23, 0x00	; 0
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    3db0:	41 d2       	rcall	.+1154   	; 0x4234 <hih8120_measure>
    3db2:	81 11       	cpse	r24, r1
    3db4:	2a c0       	rjmp	.+84     	; 0x3e0a <tempHum_Run+0xe8>
		{
			
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3db6:	66 e0       	ldi	r22, 0x06	; 6
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
			humidity =  hih8120_getHumidity();
    3dc2:	49 d2       	rcall	.+1170   	; 0x4256 <hih8120_getHumidity>
    3dc4:	60 93 e1 16 	sts	0x16E1, r22	; 0x8016e1 <humidity>
    3dc8:	70 93 e2 16 	sts	0x16E2, r23	; 0x8016e2 <humidity+0x1>
    3dcc:	80 93 e3 16 	sts	0x16E3, r24	; 0x8016e3 <humidity+0x2>
    3dd0:	90 93 e4 16 	sts	0x16E4, r25	; 0x8016e4 <humidity+0x3>
			temperature = hih8120_getTemperature();
    3dd4:	55 d2       	rcall	.+1194   	; 0x4280 <hih8120_getTemperature>
    3dd6:	60 93 e5 16 	sts	0x16E5, r22	; 0x8016e5 <temperature>
    3dda:	70 93 e6 16 	sts	0x16E6, r23	; 0x8016e6 <temperature+0x1>
    3dde:	80 93 e7 16 	sts	0x16E7, r24	; 0x8016e7 <temperature+0x2>
    3de2:	90 93 e8 16 	sts	0x16E8, r25	; 0x8016e8 <temperature+0x3>
			printf("<<Temperature Humidity task set>>");
    3de6:	8f e8       	ldi	r24, 0x8F	; 143
    3de8:	93 e0       	ldi	r25, 0x03	; 3
    3dea:	9f 93       	push	r25
    3dec:	8f 93       	push	r24
    3dee:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3df2:	42 e0       	ldi	r20, 0x02	; 2
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	70 e0       	ldi	r23, 0x00	; 0
    3dfa:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_dataReadyEventGroup>
    3dfe:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_dataReadyEventGroup+0x1>
    3e02:	0e 94 24 04 	call	0x848	; 0x848 <xEventGroupSetBits>
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
			
		}
	}
	
}
    3e0a:	0f 91       	pop	r16
    3e0c:	ff 90       	pop	r15
    3e0e:	ef 90       	pop	r14
    3e10:	df 90       	pop	r13
    3e12:	cf 90       	pop	r12
    3e14:	08 95       	ret

00003e16 <tempHum_Task>:
void tempHum_Task( void *pvParameters )
{
	(void)pvParameters;
	for(;;)
	{
		tempHum_Run();
    3e16:	85 df       	rcall	.-246    	; 0x3d22 <tempHum_Run>
    3e18:	fe cf       	rjmp	.-4      	; 0x3e16 <tempHum_Task>

00003e1a <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	64 97       	sbiw	r28, 0x14	; 20
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	f8 94       	cli
    3e2c:	de bf       	out	0x3e, r29	; 62
    3e2e:	0f be       	out	0x3f, r0	; 63
    3e30:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	0e 94 bb 2b 	call	0x5776	; 0x5776 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3e38:	ab d3       	rcall	.+1878   	; 0x4590 <lora_driver_rn2483FactoryReset>
    3e3a:	27 d6       	rcall	.+3150   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	81 eb       	ldi	r24, 0xB1	; 177
    3e42:	93 e0       	ldi	r25, 0x03	; 3
    3e44:	9f 93       	push	r25
    3e46:	8f 93       	push	r24
    3e48:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3e4c:	1f d5       	rcall	.+2622   	; 0x488c <lora_driver_configureToEu868>
    3e4e:	1d d6       	rcall	.+3130   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3e50:	9f 93       	push	r25
    3e52:	8f 93       	push	r24
    3e54:	84 ec       	ldi	r24, 0xC4	; 196
    3e56:	93 e0       	ldi	r25, 0x03	; 3
    3e58:	9f 93       	push	r25
    3e5a:	8f 93       	push	r24
    3e5c:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
    3e60:	8d ed       	ldi	r24, 0xDD	; 221
    3e62:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join1");
    3e64:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <puts>
    3e68:	8e 01       	movw	r16, r28
    3e6a:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6e:	c8 01       	movw	r24, r16
    3e70:	a1 d3       	rcall	.+1858   	; 0x45b4 <lora_driver_getRn2483Hweui>
    3e72:	0b d6       	rcall	.+3094   	; 0x4a8a <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3e74:	1f 93       	push	r17
    3e76:	0f 93       	push	r16
    3e78:	9f 93       	push	r25
    3e7a:	8f 93       	push	r24
    3e7c:	8a ee       	ldi	r24, 0xEA	; 234
    3e7e:	93 e0       	ldi	r25, 0x03	; 3
    3e80:	9f 93       	push	r25
    3e82:	8f 93       	push	r24
    3e84:	0e 94 47 31 	call	0x628e	; 0x628e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3e88:	c8 01       	movw	r24, r16
    3e8a:	b0 d3       	rcall	.+1888   	; 0x45ec <lora_driver_setDeviceIdentifier>
    3e8c:	fe d5       	rcall	.+3068   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3e8e:	9f 93       	push	r25
    3e90:	8f 93       	push	r24
    3e92:	1f 93       	push	r17
    3e94:	0f 93       	push	r16
    3e96:	8e ef       	ldi	r24, 0xFE	; 254
    3e98:	93 e0       	ldi	r25, 0x03	; 3
    3e9a:	9f 93       	push	r25
    3e9c:	8f 93       	push	r24
    3e9e:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
    3ea2:	83 e1       	ldi	r24, 0x13	; 19
    3ea4:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join2");
    3ea6:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3eaa:	a8 01       	movw	r20, r16
    3eac:	60 e2       	ldi	r22, 0x20	; 32
    3eae:	74 e0       	ldi	r23, 0x04	; 4
    3eb0:	81 e4       	ldi	r24, 0x41	; 65
    3eb2:	94 e0       	ldi	r25, 0x04	; 4
    3eb4:	c9 d5       	rcall	.+2962   	; 0x4a48 <lora_driver_setOtaaIdentity>
    3eb6:	e9 d5       	rcall	.+3026   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3eb8:	9f 93       	push	r25
    3eba:	8f 93       	push	r24
    3ebc:	1f 93       	push	r17
    3ebe:	0f 93       	push	r16
    3ec0:	80 e2       	ldi	r24, 0x20	; 32
    3ec2:	94 e0       	ldi	r25, 0x04	; 4
    3ec4:	9f 93       	push	r25
    3ec6:	8f 93       	push	r24
    3ec8:	81 e4       	ldi	r24, 0x41	; 65
    3eca:	94 e0       	ldi	r25, 0x04	; 4
    3ecc:	9f 93       	push	r25
    3ece:	8f 93       	push	r24
    3ed0:	82 e5       	ldi	r24, 0x52	; 82
    3ed2:	94 e0       	ldi	r25, 0x04	; 4
    3ed4:	9f 93       	push	r25
    3ed6:	8f 93       	push	r24
    3ed8:	0e 94 47 31 	call	0x628e	; 0x628e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3edc:	ba d3       	rcall	.+1908   	; 0x4652 <lora_driver_saveMac>
    3ede:	d5 d5       	rcall	.+2986   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3ee0:	9f 93       	push	r25
    3ee2:	8f 93       	push	r24
    3ee4:	88 e8       	ldi	r24, 0x88	; 136
    3ee6:	94 e0       	ldi	r25, 0x04	; 4
    3ee8:	9f 93       	push	r25
    3eea:	8f 93       	push	r24
    3eec:	0e 94 47 31 	call	0x628e	; 0x628e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	a4 d4       	rcall	.+2376   	; 0x4846 <lora_driver_setAdaptiveDataRate>
    3efe:	c5 d5       	rcall	.+2954   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3f00:	9f 93       	push	r25
    3f02:	8f 93       	push	r24
    3f04:	87 e9       	ldi	r24, 0x97	; 151
    3f06:	94 e0       	ldi	r25, 0x04	; 4
    3f08:	9f 93       	push	r25
    3f0a:	8f 93       	push	r24
    3f0c:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
	puts("Try to join3");
    3f10:	88 eb       	ldi	r24, 0xB8	; 184
    3f12:	94 e0       	ldi	r25, 0x04	; 4
    3f14:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3f18:	84 ef       	ldi	r24, 0xF4	; 244
    3f1a:	91 e0       	ldi	r25, 0x01	; 1
    3f1c:	9f d4       	rcall	.+2366   	; 0x485c <lora_driver_setReceiveDelay>
    3f1e:	b5 d5       	rcall	.+2922   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    3f20:	9f 93       	push	r25
    3f22:	8f 93       	push	r24
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	8f 93       	push	r24
    3f28:	84 ef       	ldi	r24, 0xF4	; 244
    3f2a:	8f 93       	push	r24
    3f2c:	85 ec       	ldi	r24, 0xC5	; 197
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3f42:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	8b d3       	rcall	.+1814   	; 0x465e <lora_driver_join>
    3f48:	08 2f       	mov	r16, r24
    3f4a:	9f d5       	rcall	.+2878   	; 0x4a8a <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3f4c:	9f 93       	push	r25
    3f4e:	8f 93       	push	r24
    3f50:	1f 92       	push	r1
    3f52:	1f 93       	push	r17
    3f54:	85 ee       	ldi	r24, 0xE5	; 229
    3f56:	94 e0       	ldi	r25, 0x04	; 4
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	08 30       	cpi	r16, 0x08	; 8
    3f6e:	59 f0       	breq	.+22     	; 0x3f86 <uplink_lora_setup+0x16c>
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	0e 94 1f 2c 	call	0x583e	; 0x583e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3f76:	66 e3       	ldi	r22, 0x36	; 54
    3f78:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
    3f82:	11 50       	subi	r17, 0x01	; 1
    3f84:	f9 f6       	brne	.-66     	; 0x3f44 <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3f86:	08 30       	cpi	r16, 0x08	; 8
    3f88:	21 f4       	brne	.+8      	; 0x3f92 <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	0e 94 01 2c 	call	0x5802	; 0x5802 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3f90:	0d c0       	rjmp	.+26     	; 0x3fac <uplink_lora_setup+0x192>
    3f92:	85 e0       	ldi	r24, 0x05	; 5
		while (1)
		{
			taskYIELD();
		}
	}
}
    3f94:	95 e0       	ldi	r25, 0x05	; 5
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    3f96:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <puts>
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	0e 94 10 2c 	call	0x5820	; 0x5820 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	0e 94 de 2b 	call	0x57bc	; 0x57bc <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3fa6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3faa:	fd cf       	rjmp	.-6      	; 0x3fa6 <uplink_lora_setup+0x18c>
    3fac:	64 96       	adiw	r28, 0x14	; 20
    3fae:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	08 95       	ret

00003fc2 <upLink_create>:
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority)
{
    3fc6:	0f 93       	push	r16
	
	
	xTaskCreate(
    3fc8:	20 91 2e 18 	lds	r18, 0x182E	; 0x80182e <xMessageBuffer>
    3fcc:	30 91 2f 18 	lds	r19, 0x182F	; 0x80182f <xMessageBuffer+0x1>
    3fd0:	e1 2c       	mov	r14, r1
    3fd2:	f1 2c       	mov	r15, r1
    3fd4:	08 2f       	mov	r16, r24
    3fd6:	48 e8       	ldi	r20, 0x88	; 136
    3fd8:	51 e0       	ldi	r21, 0x01	; 1
    3fda:	60 e1       	ldi	r22, 0x10	; 16
    3fdc:	75 e0       	ldi	r23, 0x05	; 5
    3fde:	85 e3       	ldi	r24, 0x35	; 53
    3fe0:	90 e2       	ldi	r25, 0x20	; 32
    3fe2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)xMessageBuffer,
	priority,
	NULL );
}
    3fe6:	0f 91       	pop	r16
    3fe8:	ff 90       	pop	r15
    3fea:	ef 90       	pop	r14
    3fec:	08 95       	ret

00003fee <send>:
			taskYIELD();
		}
	}
}

void send(size_t xBytesSent){
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
	xBytesSent = xMessageBufferReceive(
    3ff2:	0f ef       	ldi	r16, 0xFF	; 255
    3ff4:	1f ef       	ldi	r17, 0xFF	; 255
    3ff6:	98 01       	movw	r18, r16
    3ff8:	46 e1       	ldi	r20, 0x16	; 22
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	69 ee       	ldi	r22, 0xE9	; 233
    3ffe:	76 e1       	ldi	r23, 0x16	; 22
    4000:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <xMessageBuffer>
    4004:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <xMessageBuffer+0x1>
    4008:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferReceive>
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(_uplink_payload),	// Size of object
	portMAX_DELAY);
	
	
	if (xBytesSent>0)
    400c:	89 2b       	or	r24, r25
    400e:	a1 f0       	breq	.+40     	; 0x4038 <send+0x4a>
	{
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    4010:	83 e0       	ldi	r24, 0x03	; 3
    4012:	0e 94 31 2c 	call	0x5862	; 0x5862 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4016:	69 ee       	ldi	r22, 0xE9	; 233
    4018:	76 e1       	ldi	r23, 0x16	; 22
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	49 d3       	rcall	.+1682   	; 0x46b0 <lora_driver_sendUploadMessage>
    401e:	35 d5       	rcall	.+2666   	; 0x4a8a <lora_driver_mapReturnCodeToText>
    4020:	9f 93       	push	r25
    4022:	8f 93       	push	r24
    4024:	8b e1       	ldi	r24, 0x1B	; 27
    4026:	95 e0       	ldi	r25, 0x05	; 5
    4028:	9f 93       	push	r25
    402a:	8f 93       	push	r24
    402c:	0e 94 47 31 	call	0x628e	; 0x628e <printf>
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	0f 90       	pop	r0
	}
}
    4038:	1f 91       	pop	r17
    403a:	0f 91       	pop	r16
    403c:	08 95       	ret

0000403e <lora_Handler_task>:

void lora_Handler_task()
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	99 d2       	rcall	.+1330   	; 0x4574 <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    4042:	62 e0       	ldi	r22, 0x02	; 2
    4044:	70 e0       	ldi	r23, 0x00	; 0
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
	lora_driver_resetRn2483(0);
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	91 d2       	rcall	.+1314   	; 0x4574 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    4052:	66 e9       	ldi	r22, 0x96	; 150
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    405e:	43 d2       	rcall	.+1158   	; 0x44e6 <lora_driver_flushBuffers>
	uplink_lora_setup();
    4060:	dc de       	rcall	.-584    	; 0x3e1a <uplink_lora_setup>
	size_t xBytesSent;
	
	for(;;)
	{
		send(xBytesSent);
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	c3 df       	rcall	.-122    	; 0x3fee <send>
    4068:	fc cf       	rjmp	.-8      	; 0x4062 <lora_Handler_task+0x24>

0000406a <upLinkHandler_StartTask>:
    406a:	e9 df       	rcall	.-46     	; 0x403e <lora_Handler_task>

0000406c <create_tasks>:

extern MessageBufferHandle_t downlinkMessageBuffer;

void create_tasks()
{
	co2_task_create(1);
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <co2_task_create>
	
	tempHum_taskCreate(1);
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	42 de       	rcall	.-892    	; 0x3cfa <tempHum_taskCreate>
	
	application_task_create(3);
    4076:	83 e0       	ldi	r24, 0x03	; 3
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 08 01 	call	0x210	; 0x210 <application_task_create>
	
	//ToDo maybe to move inside the application task
	SensorDataPackage_create();
	
	// Create UpLinkTask and start it up with priority 4 and setup the LoRaWan
	upLink_create(4);
    407e:	e0 dd       	rcall	.-1088   	; 0x3c40 <SensorDataPackage_create>
    4080:	84 e0       	ldi	r24, 0x04	; 4
    4082:	9f df       	rcall	.-194    	; 0x3fc2 <upLink_create>
	
	// Create DownlinkTask and start it up with priority 5
	lora_DownLinkHandler_create(5);
    4084:	85 e0       	ldi	r24, 0x05	; 5
    4086:	0c 94 c0 02 	jmp	0x580	; 0x580 <lora_DownLinkHandler_create>
    408a:	08 95       	ret

0000408c <drivers_initialisation>:
	
}

void drivers_initialisation()
{
	  hih8120_initialise();
    408c:	a6 d0       	rcall	.+332    	; 0x41da <hih8120_initialise>
	  mh_z19_initialise(ser_USART3);
    408e:	83 e0       	ldi	r24, 0x03	; 3
	  rc_servo_initialise();
    4090:	d8 d5       	rcall	.+2992   	; 0x4c42 <mh_z19_initialise>
    4092:	48 c6       	rjmp	.+3216   	; 0x4d24 <rc_servo_initialise>
    4094:	08 95       	ret

00004096 <createUtility>:
}

void createUtility()
{
	create_event_groups();
    4096:	c7 dd       	rcall	.-1138   	; 0x3c26 <create_event_groups>
	create_message_buffer();
    4098:	af cd       	rjmp	.-1186   	; 0x3bf8 <create_message_buffer>
    409a:	08 95       	ret

0000409c <initialiseSystem>:
    409c:	81 b1       	in	r24, 0x01	; 1
}

void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    409e:	81 68       	ori	r24, 0x81	; 129
    40a0:	81 b9       	out	0x01, r24	; 1
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	0e 94 66 2a 	call	0x54cc	; 0x54cc <stdio_initialise>
	
	drivers_initialisation();
    40a8:	f1 df       	rcall	.-30     	; 0x408c <drivers_initialisation>
	createUtility();
    40aa:	f5 df       	rcall	.-22     	; 0x4096 <createUtility>
	create_tasks();
    40ac:	df df       	rcall	.-66     	; 0x406c <create_tasks>
    40ae:	85 e0       	ldi	r24, 0x05	; 5

	status_leds_initialise(5); // Priority 5 for internal task
    40b0:	0e 94 6d 2b 	call	0x56da	; 0x56da <status_leds_initialise>
    40b4:	60 91 32 18 	lds	r22, 0x1832	; 0x801832 <downlinkMessageBuffer>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    40b8:	70 91 33 18 	lds	r23, 0x1833	; 0x801833 <downlinkMessageBuffer+0x1>
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	1a c2       	rjmp	.+1076   	; 0x44f4 <lora_driver_initialise>
    40c0:	08 95       	ret

000040c2 <main>:
    40c2:	ec df       	rcall	.-40     	; 0x409c <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	//printf("Program Started!!\n");
	printf("Program started \n");
    40c4:	80 e3       	ldi	r24, 0x30	; 48
    40c6:	95 e0       	ldi	r25, 0x05	; 5
    40c8:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    40cc:	0e 94 af 10 	call	0x215e	; 0x215e <vTaskStartScheduler>
	/* Replace with your application code */
	
}
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	08 95       	ret

000040d6 <__fixunssfsi>:
    40d6:	33 d0       	rcall	.+102    	; 0x413e <__fp_splitA>
    40d8:	88 f0       	brcs	.+34     	; 0x40fc <__fixunssfsi+0x26>
    40da:	9f 57       	subi	r25, 0x7F	; 127
    40dc:	90 f0       	brcs	.+36     	; 0x4102 <__fixunssfsi+0x2c>
    40de:	b9 2f       	mov	r27, r25
    40e0:	99 27       	eor	r25, r25
    40e2:	b7 51       	subi	r27, 0x17	; 23
    40e4:	a0 f0       	brcs	.+40     	; 0x410e <__fixunssfsi+0x38>
    40e6:	d1 f0       	breq	.+52     	; 0x411c <__fixunssfsi+0x46>
    40e8:	66 0f       	add	r22, r22
    40ea:	77 1f       	adc	r23, r23
    40ec:	88 1f       	adc	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	1a f0       	brmi	.+6      	; 0x40f8 <__fixunssfsi+0x22>
    40f2:	ba 95       	dec	r27
    40f4:	c9 f7       	brne	.-14     	; 0x40e8 <__fixunssfsi+0x12>
    40f6:	12 c0       	rjmp	.+36     	; 0x411c <__fixunssfsi+0x46>
    40f8:	b1 30       	cpi	r27, 0x01	; 1
    40fa:	81 f0       	breq	.+32     	; 0x411c <__fixunssfsi+0x46>
    40fc:	3a d0       	rcall	.+116    	; 0x4172 <__fp_zero>
    40fe:	b1 e0       	ldi	r27, 0x01	; 1
    4100:	08 95       	ret
    4102:	37 c0       	rjmp	.+110    	; 0x4172 <__fp_zero>
    4104:	67 2f       	mov	r22, r23
    4106:	78 2f       	mov	r23, r24
    4108:	88 27       	eor	r24, r24
    410a:	b8 5f       	subi	r27, 0xF8	; 248
    410c:	39 f0       	breq	.+14     	; 0x411c <__fixunssfsi+0x46>
    410e:	b9 3f       	cpi	r27, 0xF9	; 249
    4110:	cc f3       	brlt	.-14     	; 0x4104 <__fixunssfsi+0x2e>
    4112:	86 95       	lsr	r24
    4114:	77 95       	ror	r23
    4116:	67 95       	ror	r22
    4118:	b3 95       	inc	r27
    411a:	d9 f7       	brne	.-10     	; 0x4112 <__fixunssfsi+0x3c>
    411c:	3e f4       	brtc	.+14     	; 0x412c <__fixunssfsi+0x56>
    411e:	90 95       	com	r25
    4120:	80 95       	com	r24
    4122:	70 95       	com	r23
    4124:	61 95       	neg	r22
    4126:	7f 4f       	sbci	r23, 0xFF	; 255
    4128:	8f 4f       	sbci	r24, 0xFF	; 255
    412a:	9f 4f       	sbci	r25, 0xFF	; 255
    412c:	08 95       	ret

0000412e <__fp_split3>:
    412e:	57 fd       	sbrc	r21, 7
    4130:	90 58       	subi	r25, 0x80	; 128
    4132:	44 0f       	add	r20, r20
    4134:	55 1f       	adc	r21, r21
    4136:	59 f0       	breq	.+22     	; 0x414e <__fp_splitA+0x10>
    4138:	5f 3f       	cpi	r21, 0xFF	; 255
    413a:	71 f0       	breq	.+28     	; 0x4158 <__fp_splitA+0x1a>
    413c:	47 95       	ror	r20

0000413e <__fp_splitA>:
    413e:	88 0f       	add	r24, r24
    4140:	97 fb       	bst	r25, 7
    4142:	99 1f       	adc	r25, r25
    4144:	61 f0       	breq	.+24     	; 0x415e <__fp_splitA+0x20>
    4146:	9f 3f       	cpi	r25, 0xFF	; 255
    4148:	79 f0       	breq	.+30     	; 0x4168 <__fp_splitA+0x2a>
    414a:	87 95       	ror	r24
    414c:	08 95       	ret
    414e:	12 16       	cp	r1, r18
    4150:	13 06       	cpc	r1, r19
    4152:	14 06       	cpc	r1, r20
    4154:	55 1f       	adc	r21, r21
    4156:	f2 cf       	rjmp	.-28     	; 0x413c <__fp_split3+0xe>
    4158:	46 95       	lsr	r20
    415a:	f1 df       	rcall	.-30     	; 0x413e <__fp_splitA>
    415c:	08 c0       	rjmp	.+16     	; 0x416e <__fp_splitA+0x30>
    415e:	16 16       	cp	r1, r22
    4160:	17 06       	cpc	r1, r23
    4162:	18 06       	cpc	r1, r24
    4164:	99 1f       	adc	r25, r25
    4166:	f1 cf       	rjmp	.-30     	; 0x414a <__fp_splitA+0xc>
    4168:	86 95       	lsr	r24
    416a:	71 05       	cpc	r23, r1
    416c:	61 05       	cpc	r22, r1
    416e:	08 94       	sec
    4170:	08 95       	ret

00004172 <__fp_zero>:
    4172:	e8 94       	clt

00004174 <__fp_szero>:
    4174:	bb 27       	eor	r27, r27
    4176:	66 27       	eor	r22, r22
    4178:	77 27       	eor	r23, r23
    417a:	cb 01       	movw	r24, r22
    417c:	97 f9       	bld	r25, 7
    417e:	08 95       	ret

00004180 <_hihTwiCallback>:
    4180:	65 30       	cpi	r22, 0x05	; 5
    4182:	f1 f4       	brne	.+60     	; 0x41c0 <_hihTwiCallback+0x40>
    4184:	fa 01       	movw	r30, r20
    4186:	80 81       	ld	r24, Z
    4188:	8f 73       	andi	r24, 0x3F	; 63
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	98 2f       	mov	r25, r24
    418e:	88 27       	eor	r24, r24
    4190:	21 81       	ldd	r18, Z+1	; 0x01
    4192:	82 2b       	or	r24, r18
    4194:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4198:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    419c:	82 81       	ldd	r24, Z+2	; 0x02
    419e:	f0 e4       	ldi	r31, 0x40	; 64
    41a0:	8f 9f       	mul	r24, r31
    41a2:	c0 01       	movw	r24, r0
    41a4:	11 24       	eor	r1, r1
    41a6:	fa 01       	movw	r30, r20
    41a8:	23 81       	ldd	r18, Z+3	; 0x03
    41aa:	26 95       	lsr	r18
    41ac:	26 95       	lsr	r18
    41ae:	82 2b       	or	r24, r18
    41b0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    41b4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	80 93 ff 16 	sts	0x16FF, r24	; 0x8016ff <_measuringIsReady>
    41be:	08 95       	ret
    41c0:	64 30       	cpi	r22, 0x04	; 4
    41c2:	51 f0       	breq	.+20     	; 0x41d8 <_hihTwiCallback+0x58>
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	90 e4       	ldi	r25, 0x40	; 64
    41c8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    41cc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    41d0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    41d4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    41d8:	08 95       	ret

000041da <hih8120_initialise>:
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	00 ec       	ldi	r16, 0xC0	; 192
    41e0:	10 e2       	ldi	r17, 0x20	; 32
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	34 e2       	ldi	r19, 0x24	; 36
    41e6:	44 ef       	ldi	r20, 0xF4	; 244
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	60 e0       	ldi	r22, 0x00	; 0
    41ec:	87 e2       	ldi	r24, 0x27	; 39
    41ee:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <twiCreate>
    41f2:	90 93 01 17 	sts	0x1701, r25	; 0x801701 <_hih8120Handler+0x1>
    41f6:	80 93 00 17 	sts	0x1700, r24	; 0x801700 <_hih8120Handler>
    41fa:	21 e0       	ldi	r18, 0x01	; 1
    41fc:	89 2b       	or	r24, r25
    41fe:	09 f0       	breq	.+2      	; 0x4202 <hih8120_initialise+0x28>
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	82 2f       	mov	r24, r18
    4204:	1f 91       	pop	r17
    4206:	0f 91       	pop	r16
    4208:	08 95       	ret

0000420a <hih8120_wakeup>:
    420a:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_hih8120Handler>
    420e:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_hih8120Handler+0x1>
    4212:	00 97       	sbiw	r24, 0x00	; 0
    4214:	59 f0       	breq	.+22     	; 0x422c <hih8120_wakeup+0x22>
    4216:	40 e0       	ldi	r20, 0x00	; 0
    4218:	60 e0       	ldi	r22, 0x00	; 0
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <twiTransmit>
    4220:	84 30       	cpi	r24, 0x04	; 4
    4222:	31 f4       	brne	.+12     	; 0x4230 <hih8120_wakeup+0x26>
    4224:	10 92 ff 16 	sts	0x16FF, r1	; 0x8016ff <_measuringIsReady>
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	08 95       	ret
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	08 95       	ret
    4230:	83 e0       	ldi	r24, 0x03	; 3
    4232:	08 95       	ret

00004234 <hih8120_measure>:
    4234:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_hih8120Handler>
    4238:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_hih8120Handler+0x1>
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	39 f0       	breq	.+14     	; 0x424e <hih8120_measure+0x1a>
    4240:	64 e0       	ldi	r22, 0x04	; 4
    4242:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <twiReceive>
    4246:	85 30       	cpi	r24, 0x05	; 5
    4248:	21 f0       	breq	.+8      	; 0x4252 <hih8120_measure+0x1e>
    424a:	83 e0       	ldi	r24, 0x03	; 3
    424c:	08 95       	ret
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	08 95       	ret
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	08 95       	ret

00004256 <hih8120_getHumidity>:
    4256:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    425a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__floatunsisf>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	48 ec       	ldi	r20, 0xC8	; 200
    426c:	52 e4       	ldi	r21, 0x42	; 66
    426e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	38 ef       	ldi	r19, 0xF8	; 248
    4276:	4f e7       	ldi	r20, 0x7F	; 127
    4278:	56 e4       	ldi	r21, 0x46	; 70
    427a:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__divsf3>
    427e:	08 95       	ret

00004280 <hih8120_getTemperature>:
    4280:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4284:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__floatunsisf>
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	45 e2       	ldi	r20, 0x25	; 37
    4296:	53 e4       	ldi	r21, 0x43	; 67
    4298:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	38 ef       	ldi	r19, 0xF8	; 248
    42a0:	4f e7       	ldi	r20, 0x7F	; 127
    42a2:	56 e4       	ldi	r21, 0x46	; 70
    42a4:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divsf3>
    42a8:	20 e0       	ldi	r18, 0x00	; 0
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	40 e2       	ldi	r20, 0x20	; 32
    42ae:	52 e4       	ldi	r21, 0x42	; 66
    42b0:	0c 94 fc 2d 	jmp	0x5bf8	; 0x5bf8 <__subsf3>
    42b4:	08 95       	ret

000042b6 <_serialCallBack>:
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	1f 92       	push	r1
    42c0:	1f 92       	push	r1
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
    42c6:	8c 01       	movw	r16, r24
    42c8:	19 82       	std	Y+1, r1	; 0x01
    42ca:	2d c0       	rjmp	.+90     	; 0x4326 <_serialCallBack+0x70>
    42cc:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <rec_buf_inp.2878>
    42d0:	ec 32       	cpi	r30, 0x2C	; 44
    42d2:	50 f4       	brcc	.+20     	; 0x42e8 <_serialCallBack+0x32>
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	8e 0f       	add	r24, r30
    42d8:	80 93 39 17 	sts	0x1739, r24	; 0x801739 <rec_buf_inp.2878>
    42dc:	f0 e0       	ldi	r31, 0x00	; 0
    42de:	e5 59       	subi	r30, 0x95	; 149
    42e0:	f8 4e       	sbci	r31, 0xE8	; 232
    42e2:	8a 81       	ldd	r24, Y+2	; 0x02
    42e4:	80 83       	st	Z, r24
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <_serialCallBack+0x36>
    42e8:	10 92 39 17 	sts	0x1739, r1	; 0x801739 <rec_buf_inp.2878>
    42ec:	8a 81       	ldd	r24, Y+2	; 0x02
    42ee:	8a 30       	cpi	r24, 0x0A	; 10
    42f0:	d1 f4       	brne	.+52     	; 0x4326 <_serialCallBack+0x70>
    42f2:	40 91 39 17 	lds	r20, 0x1739	; 0x801739 <rec_buf_inp.2878>
    42f6:	50 e0       	ldi	r21, 0x00	; 0
    42f8:	fa 01       	movw	r30, r20
    42fa:	e7 59       	subi	r30, 0x97	; 151
    42fc:	f8 4e       	sbci	r31, 0xE8	; 232
    42fe:	10 82       	st	Z, r1
    4300:	41 50       	subi	r20, 0x01	; 1
    4302:	51 09       	sbc	r21, r1
    4304:	9e 01       	movw	r18, r28
    4306:	2f 5f       	subi	r18, 0xFF	; 255
    4308:	3f 4f       	sbci	r19, 0xFF	; 255
    430a:	6b e6       	ldi	r22, 0x6B	; 107
    430c:	77 e1       	ldi	r23, 0x17	; 23
    430e:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_serialReplyBufferHandle>
    4312:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_serialReplyBufferHandle+0x1>
    4316:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xStreamBufferSendFromISR>
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	81 11       	cpse	r24, r1
    431e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYield>
    4322:	10 92 39 17 	sts	0x1739, r1	; 0x801739 <rec_buf_inp.2878>
    4326:	be 01       	movw	r22, r28
    4328:	6e 5f       	subi	r22, 0xFE	; 254
    432a:	7f 4f       	sbci	r23, 0xFF	; 255
    432c:	c8 01       	movw	r24, r16
    432e:	38 d6       	rcall	.+3184   	; 0x4fa0 <serial_getByte>
    4330:	88 23       	and	r24, r24
    4332:	61 f2       	breq	.-104    	; 0x42cc <_serialCallBack+0x16>
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	08 95       	ret

00004342 <_uploadMessage>:
    4342:	0f 93       	push	r16
    4344:	1f 93       	push	r17
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	8c 01       	movw	r16, r24
    434c:	eb 01       	movw	r28, r22
    434e:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_serialReplyBufferHandle>
    4352:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_serialReplyBufferHandle+0x1>
    4356:	0e 94 8f 0c 	call	0x191e	; 0x191e <xStreamBufferReset>
    435a:	b8 01       	movw	r22, r16
    435c:	82 e0       	ldi	r24, 0x02	; 2
    435e:	97 e1       	ldi	r25, 0x17	; 23
    4360:	0e 94 28 31 	call	0x6250	; 0x6250 <strcpy>
    4364:	20 97       	sbiw	r28, 0x00	; 0
    4366:	79 f0       	breq	.+30     	; 0x4386 <_uploadMessage+0x44>
    4368:	e2 e0       	ldi	r30, 0x02	; 2
    436a:	f7 e1       	ldi	r31, 0x17	; 23
    436c:	01 90       	ld	r0, Z+
    436e:	00 20       	and	r0, r0
    4370:	e9 f7       	brne	.-6      	; 0x436c <_uploadMessage+0x2a>
    4372:	31 97       	sbiw	r30, 0x01	; 1
    4374:	80 e2       	ldi	r24, 0x20	; 32
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	91 83       	std	Z+1, r25	; 0x01
    437a:	80 83       	st	Z, r24
    437c:	be 01       	movw	r22, r28
    437e:	82 e0       	ldi	r24, 0x02	; 2
    4380:	97 e1       	ldi	r25, 0x17	; 23
    4382:	0e 94 1d 31 	call	0x623a	; 0x623a <strcat>
    4386:	e2 e0       	ldi	r30, 0x02	; 2
    4388:	f7 e1       	ldi	r31, 0x17	; 23
    438a:	df 01       	movw	r26, r30
    438c:	0d 90       	ld	r0, X+
    438e:	00 20       	and	r0, r0
    4390:	e9 f7       	brne	.-6      	; 0x438c <_uploadMessage+0x4a>
    4392:	11 97       	sbiw	r26, 0x01	; 1
    4394:	8d e0       	ldi	r24, 0x0D	; 13
    4396:	9a e0       	ldi	r25, 0x0A	; 10
    4398:	11 96       	adiw	r26, 0x01	; 1
    439a:	9c 93       	st	X, r25
    439c:	8e 93       	st	-X, r24
    439e:	12 96       	adiw	r26, 0x02	; 2
    43a0:	1c 92       	st	X, r1
    43a2:	01 90       	ld	r0, Z+
    43a4:	00 20       	and	r0, r0
    43a6:	e9 f7       	brne	.-6      	; 0x43a2 <_uploadMessage+0x60>
    43a8:	31 97       	sbiw	r30, 0x01	; 1
    43aa:	e2 50       	subi	r30, 0x02	; 2
    43ac:	f7 41       	sbci	r31, 0x17	; 23
    43ae:	ae 2f       	mov	r26, r30
    43b0:	82 e0       	ldi	r24, 0x02	; 2
    43b2:	97 e1       	ldi	r25, 0x17	; 23
    43b4:	ac 01       	movw	r20, r24
    43b6:	6a 2f       	mov	r22, r26
    43b8:	80 91 3e 17 	lds	r24, 0x173E	; 0x80173e <_rn2483_serial>
    43bc:	90 91 3f 17 	lds	r25, 0x173F	; 0x80173f <_rn2483_serial+0x1>
    43c0:	9a d5       	rcall	.+2868   	; 0x4ef6 <serial_sendBytes>
    43c2:	81 11       	cpse	r24, r1
    43c4:	11 c0       	rjmp	.+34     	; 0x43e8 <_uploadMessage+0xa6>
    43c6:	08 e2       	ldi	r16, 0x28	; 40
    43c8:	15 e0       	ldi	r17, 0x05	; 5
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	4d e2       	ldi	r20, 0x2D	; 45
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	65 ec       	ldi	r22, 0xC5	; 197
    43d4:	77 e1       	ldi	r23, 0x17	; 23
    43d6:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_serialReplyBufferHandle>
    43da:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_serialReplyBufferHandle+0x1>
    43de:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferReceive>
    43e2:	85 ec       	ldi	r24, 0xC5	; 197
    43e4:	97 e1       	ldi	r25, 0x17	; 23
    43e6:	02 c0       	rjmp	.+4      	; 0x43ec <_uploadMessage+0xaa>
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	1f 91       	pop	r17
    43f2:	0f 91       	pop	r16
    43f4:	08 95       	ret

000043f6 <_reply2ReturnCode>:
    43f6:	2f 92       	push	r2
    43f8:	3f 92       	push	r3
    43fa:	4f 92       	push	r4
    43fc:	5f 92       	push	r5
    43fe:	6f 92       	push	r6
    4400:	7f 92       	push	r7
    4402:	8f 92       	push	r8
    4404:	9f 92       	push	r9
    4406:	af 92       	push	r10
    4408:	bf 92       	push	r11
    440a:	cf 92       	push	r12
    440c:	df 92       	push	r13
    440e:	ef 92       	push	r14
    4410:	ff 92       	push	r15
    4412:	0f 93       	push	r16
    4414:	1f 93       	push	r17
    4416:	cf 93       	push	r28
    4418:	df 93       	push	r29
    441a:	5c 01       	movw	r10, r24
    441c:	fc 01       	movw	r30, r24
    441e:	01 90       	ld	r0, Z+
    4420:	00 20       	and	r0, r0
    4422:	e9 f7       	brne	.-6      	; 0x441e <_reply2ReturnCode+0x28>
    4424:	31 97       	sbiw	r30, 0x01	; 1
    4426:	6f 01       	movw	r12, r30
    4428:	c8 1a       	sub	r12, r24
    442a:	d9 0a       	sbc	r13, r25
    442c:	5c 2c       	mov	r5, r12
    442e:	0f 2e       	mov	r0, r31
    4430:	fa ed       	ldi	r31, 0xDA	; 218
    4432:	8f 2e       	mov	r8, r31
    4434:	f7 e0       	ldi	r31, 0x07	; 7
    4436:	9f 2e       	mov	r9, r31
    4438:	f0 2d       	mov	r31, r0
    443a:	e1 2c       	mov	r14, r1
    443c:	f1 2c       	mov	r15, r1
    443e:	4c 2c       	mov	r4, r12
    4440:	37 01       	movw	r6, r14
    4442:	f4 01       	movw	r30, r8
    4444:	01 81       	ldd	r16, Z+1	; 0x01
    4446:	12 81       	ldd	r17, Z+2	; 0x02
    4448:	e8 01       	movw	r28, r16
    444a:	09 90       	ld	r0, Y+
    444c:	00 20       	and	r0, r0
    444e:	e9 f7       	brne	.-6      	; 0x444a <_reply2ReturnCode+0x54>
    4450:	21 97       	sbiw	r28, 0x01	; 1
    4452:	c0 1b       	sub	r28, r16
    4454:	d1 0b       	sbc	r29, r17
    4456:	3c 2e       	mov	r3, r28
    4458:	f9 e0       	ldi	r31, 0x09	; 9
    445a:	cf 16       	cp	r12, r31
    445c:	d1 04       	cpc	r13, r1
    445e:	58 f0       	brcs	.+22     	; 0x4476 <_reply2ReturnCode+0x80>
    4460:	f4 01       	movw	r30, r8
    4462:	20 80       	ld	r2, Z
    4464:	fe e0       	ldi	r31, 0x0E	; 14
    4466:	2f 12       	cpse	r2, r31
    4468:	06 c0       	rjmp	.+12     	; 0x4476 <_reply2ReturnCode+0x80>
    446a:	b8 01       	movw	r22, r16
    446c:	c5 01       	movw	r24, r10
    446e:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <strcasestr>
    4472:	89 2b       	or	r24, r25
    4474:	09 f5       	brne	.+66     	; 0x44b8 <_reply2ReturnCode+0xc2>
    4476:	44 2d       	mov	r20, r4
    4478:	35 14       	cp	r3, r5
    447a:	08 f4       	brcc	.+2      	; 0x447e <_reply2ReturnCode+0x88>
    447c:	4c 2f       	mov	r20, r28
    447e:	50 e0       	ldi	r21, 0x00	; 0
    4480:	b8 01       	movw	r22, r16
    4482:	c5 01       	movw	r24, r10
    4484:	0e 94 2f 31 	call	0x625e	; 0x625e <strncasecmp>
    4488:	89 2b       	or	r24, r25
    448a:	49 f4       	brne	.+18     	; 0x449e <_reply2ReturnCode+0xa8>
    448c:	f3 01       	movw	r30, r6
    448e:	ee 0f       	add	r30, r30
    4490:	ff 1f       	adc	r31, r31
    4492:	e6 0d       	add	r30, r6
    4494:	f7 1d       	adc	r31, r7
    4496:	e6 52       	subi	r30, 0x26	; 38
    4498:	f8 4f       	sbci	r31, 0xF8	; 248
    449a:	20 80       	ld	r2, Z
    449c:	0d c0       	rjmp	.+26     	; 0x44b8 <_reply2ReturnCode+0xc2>
    449e:	8f ef       	ldi	r24, 0xFF	; 255
    44a0:	e8 1a       	sub	r14, r24
    44a2:	f8 0a       	sbc	r15, r24
    44a4:	e3 e0       	ldi	r30, 0x03	; 3
    44a6:	8e 0e       	add	r8, r30
    44a8:	91 1c       	adc	r9, r1
    44aa:	f1 e1       	ldi	r31, 0x11	; 17
    44ac:	ef 16       	cp	r14, r31
    44ae:	f1 04       	cpc	r15, r1
    44b0:	39 f6       	brne	.-114    	; 0x4440 <_reply2ReturnCode+0x4a>
    44b2:	68 94       	set
    44b4:	22 24       	eor	r2, r2
    44b6:	24 f8       	bld	r2, 4
    44b8:	82 2d       	mov	r24, r2
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	1f 91       	pop	r17
    44c0:	0f 91       	pop	r16
    44c2:	ff 90       	pop	r15
    44c4:	ef 90       	pop	r14
    44c6:	df 90       	pop	r13
    44c8:	cf 90       	pop	r12
    44ca:	bf 90       	pop	r11
    44cc:	af 90       	pop	r10
    44ce:	9f 90       	pop	r9
    44d0:	8f 90       	pop	r8
    44d2:	7f 90       	pop	r7
    44d4:	6f 90       	pop	r6
    44d6:	5f 90       	pop	r5
    44d8:	4f 90       	pop	r4
    44da:	3f 90       	pop	r3
    44dc:	2f 90       	pop	r2
    44de:	08 95       	ret

000044e0 <_uploadMessageRc>:
    44e0:	30 df       	rcall	.-416    	; 0x4342 <_uploadMessage>
    44e2:	89 cf       	rjmp	.-238    	; 0x43f6 <_reply2ReturnCode>
    44e4:	08 95       	ret

000044e6 <lora_driver_flushBuffers>:
    44e6:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_serialReplyBufferHandle>
    44ea:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_serialReplyBufferHandle+0x1>
    44ee:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <xStreamBufferReset>
    44f2:	08 95       	ret

000044f4 <lora_driver_initialise>:
    44f4:	8f 92       	push	r8
    44f6:	9f 92       	push	r9
    44f8:	af 92       	push	r10
    44fa:	cf 92       	push	r12
    44fc:	ef 92       	push	r14
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
    4502:	cf 93       	push	r28
    4504:	c8 2f       	mov	r28, r24
    4506:	8b 01       	movw	r16, r22
    4508:	41 e0       	ldi	r20, 0x01	; 1
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	70 e0       	ldi	r23, 0x00	; 0
    450e:	88 ec       	ldi	r24, 0xC8	; 200
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xStreamBufferGenericCreate>
    4516:	90 93 3d 17 	sts	0x173D, r25	; 0x80173d <_serialReplyBufferHandle+0x1>
    451a:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <_serialReplyBufferHandle>
    451e:	10 93 3b 17 	sts	0x173B, r17	; 0x80173b <_downlinkMessageBuffer+0x1>
    4522:	00 93 3a 17 	sts	0x173A, r16	; 0x80173a <_downlinkMessageBuffer>
    4526:	0f 2e       	mov	r0, r31
    4528:	fb e5       	ldi	r31, 0x5B	; 91
    452a:	8f 2e       	mov	r8, r31
    452c:	f1 e2       	ldi	r31, 0x21	; 33
    452e:	9f 2e       	mov	r9, r31
    4530:	f0 2d       	mov	r31, r0
    4532:	68 94       	set
    4534:	aa 24       	eor	r10, r10
    4536:	a6 f8       	bld	r10, 6
    4538:	68 94       	set
    453a:	cc 24       	eor	r12, r12
    453c:	c6 f8       	bld	r12, 6
    453e:	e1 2c       	mov	r14, r1
    4540:	00 e0       	ldi	r16, 0x00	; 0
    4542:	23 e0       	ldi	r18, 0x03	; 3
    4544:	40 e0       	ldi	r20, 0x00	; 0
    4546:	51 ee       	ldi	r21, 0xE1	; 225
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	8c 2f       	mov	r24, r28
    454e:	06 d4       	rcall	.+2060   	; 0x4d5c <serial_create>
    4550:	90 93 3f 17 	sts	0x173F, r25	; 0x80173f <_rn2483_serial+0x1>
    4554:	80 93 3e 17 	sts	0x173E, r24	; 0x80173e <_rn2483_serial>
    4558:	e7 e0       	ldi	r30, 0x07	; 7
    455a:	f1 e0       	ldi	r31, 0x01	; 1
    455c:	80 81       	ld	r24, Z
    455e:	80 61       	ori	r24, 0x10	; 16
    4560:	80 83       	st	Z, r24
    4562:	cf 91       	pop	r28
    4564:	1f 91       	pop	r17
    4566:	0f 91       	pop	r16
    4568:	ef 90       	pop	r14
    456a:	cf 90       	pop	r12
    456c:	af 90       	pop	r10
    456e:	9f 90       	pop	r9
    4570:	8f 90       	pop	r8
    4572:	08 95       	ret

00004574 <lora_driver_resetRn2483>:
    4574:	88 23       	and	r24, r24
    4576:	31 f0       	breq	.+12     	; 0x4584 <lora_driver_resetRn2483+0x10>
    4578:	e8 e0       	ldi	r30, 0x08	; 8
    457a:	f1 e0       	ldi	r31, 0x01	; 1
    457c:	80 81       	ld	r24, Z
    457e:	8f 7e       	andi	r24, 0xEF	; 239
    4580:	80 83       	st	Z, r24
    4582:	08 95       	ret
    4584:	e8 e0       	ldi	r30, 0x08	; 8
    4586:	f1 e0       	ldi	r31, 0x01	; 1
    4588:	80 81       	ld	r24, Z
    458a:	80 61       	ori	r24, 0x10	; 16
    458c:	80 83       	st	Z, r24
    458e:	08 95       	ret

00004590 <lora_driver_rn2483FactoryReset>:
    4590:	60 e0       	ldi	r22, 0x00	; 0
    4592:	70 e0       	ldi	r23, 0x00	; 0
    4594:	80 e6       	ldi	r24, 0x60	; 96
    4596:	95 e0       	ldi	r25, 0x05	; 5
    4598:	d4 de       	rcall	.-600    	; 0x4342 <_uploadMessage>
    459a:	e5 ec       	ldi	r30, 0xC5	; 197
    459c:	f7 e1       	ldi	r31, 0x17	; 23
    459e:	01 90       	ld	r0, Z+
    45a0:	00 20       	and	r0, r0
    45a2:	e9 f7       	brne	.-6      	; 0x459e <lora_driver_rn2483FactoryReset+0xe>
    45a4:	31 97       	sbiw	r30, 0x01	; 1
    45a6:	e5 5c       	subi	r30, 0xC5	; 197
    45a8:	f7 41       	sbci	r31, 0x17	; 23
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	75 97       	sbiw	r30, 0x15	; 21
    45ae:	08 f0       	brcs	.+2      	; 0x45b2 <lora_driver_rn2483FactoryReset+0x22>
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	08 95       	ret

000045b4 <lora_driver_getRn2483Hweui>:
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	ec 01       	movw	r28, r24
    45ba:	60 e0       	ldi	r22, 0x00	; 0
    45bc:	70 e0       	ldi	r23, 0x00	; 0
    45be:	81 e7       	ldi	r24, 0x71	; 113
    45c0:	95 e0       	ldi	r25, 0x05	; 5
    45c2:	bf de       	rcall	.-642    	; 0x4342 <_uploadMessage>
    45c4:	e5 ec       	ldi	r30, 0xC5	; 197
    45c6:	f7 e1       	ldi	r31, 0x17	; 23
    45c8:	01 90       	ld	r0, Z+
    45ca:	00 20       	and	r0, r0
    45cc:	e9 f7       	brne	.-6      	; 0x45c8 <lora_driver_getRn2483Hweui+0x14>
    45ce:	e6 5d       	subi	r30, 0xD6	; 214
    45d0:	f7 41       	sbci	r31, 0x17	; 23
    45d2:	39 f4       	brne	.+14     	; 0x45e2 <lora_driver_getRn2483Hweui+0x2e>
    45d4:	65 ec       	ldi	r22, 0xC5	; 197
    45d6:	77 e1       	ldi	r23, 0x17	; 23
    45d8:	ce 01       	movw	r24, r28
    45da:	0e 94 28 31 	call	0x6250	; 0x6250 <strcpy>
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	02 c0       	rjmp	.+4      	; 0x45e6 <lora_driver_getRn2483Hweui+0x32>
    45e2:	18 82       	st	Y, r1
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	df 91       	pop	r29
    45e8:	cf 91       	pop	r28
    45ea:	08 95       	ret

000045ec <lora_driver_setDeviceIdentifier>:
    45ec:	fc 01       	movw	r30, r24
    45ee:	01 90       	ld	r0, Z+
    45f0:	00 20       	and	r0, r0
    45f2:	e9 f7       	brne	.-6      	; 0x45ee <lora_driver_setDeviceIdentifier+0x2>
    45f4:	9f 01       	movw	r18, r30
    45f6:	21 51       	subi	r18, 0x11	; 17
    45f8:	31 09       	sbc	r19, r1
    45fa:	28 17       	cp	r18, r24
    45fc:	39 07       	cpc	r19, r25
    45fe:	29 f4       	brne	.+10     	; 0x460a <lora_driver_setDeviceIdentifier+0x1e>
    4600:	bc 01       	movw	r22, r24
    4602:	8f e9       	ldi	r24, 0x9F	; 159
    4604:	95 e0       	ldi	r25, 0x05	; 5
    4606:	6c cf       	rjmp	.-296    	; 0x44e0 <_uploadMessageRc>
    4608:	08 95       	ret
    460a:	89 e0       	ldi	r24, 0x09	; 9
    460c:	08 95       	ret

0000460e <lora_driver_setApplicationIdentifier>:
    460e:	fc 01       	movw	r30, r24
    4610:	01 90       	ld	r0, Z+
    4612:	00 20       	and	r0, r0
    4614:	e9 f7       	brne	.-6      	; 0x4610 <lora_driver_setApplicationIdentifier+0x2>
    4616:	9f 01       	movw	r18, r30
    4618:	21 51       	subi	r18, 0x11	; 17
    461a:	31 09       	sbc	r19, r1
    461c:	28 17       	cp	r18, r24
    461e:	39 07       	cpc	r19, r25
    4620:	29 f4       	brne	.+10     	; 0x462c <lora_driver_setApplicationIdentifier+0x1e>
    4622:	bc 01       	movw	r22, r24
    4624:	8e ea       	ldi	r24, 0xAE	; 174
    4626:	95 e0       	ldi	r25, 0x05	; 5
    4628:	5b cf       	rjmp	.-330    	; 0x44e0 <_uploadMessageRc>
    462a:	08 95       	ret
    462c:	89 e0       	ldi	r24, 0x09	; 9
    462e:	08 95       	ret

00004630 <lora_driver_setApplicationKey>:
    4630:	fc 01       	movw	r30, r24
    4632:	01 90       	ld	r0, Z+
    4634:	00 20       	and	r0, r0
    4636:	e9 f7       	brne	.-6      	; 0x4632 <lora_driver_setApplicationKey+0x2>
    4638:	9f 01       	movw	r18, r30
    463a:	21 52       	subi	r18, 0x21	; 33
    463c:	31 09       	sbc	r19, r1
    463e:	28 17       	cp	r18, r24
    4640:	39 07       	cpc	r19, r25
    4642:	29 f4       	brne	.+10     	; 0x464e <lora_driver_setApplicationKey+0x1e>
    4644:	bc 01       	movw	r22, r24
    4646:	8d eb       	ldi	r24, 0xBD	; 189
    4648:	95 e0       	ldi	r25, 0x05	; 5
    464a:	4a cf       	rjmp	.-364    	; 0x44e0 <_uploadMessageRc>
    464c:	08 95       	ret
    464e:	89 e0       	ldi	r24, 0x09	; 9
    4650:	08 95       	ret

00004652 <lora_driver_saveMac>:
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	8c ef       	ldi	r24, 0xFC	; 252
    4658:	95 e0       	ldi	r25, 0x05	; 5
    465a:	42 cf       	rjmp	.-380    	; 0x44e0 <_uploadMessageRc>
    465c:	08 95       	ret

0000465e <lora_driver_join>:
    465e:	0f 93       	push	r16
    4660:	1f 93       	push	r17
    4662:	e8 2f       	mov	r30, r24
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	ea 52       	subi	r30, 0x2A	; 42
    466c:	f8 4f       	sbci	r31, 0xF8	; 248
    466e:	60 81       	ld	r22, Z
    4670:	71 81       	ldd	r23, Z+1	; 0x01
    4672:	85 e0       	ldi	r24, 0x05	; 5
    4674:	96 e0       	ldi	r25, 0x06	; 6
    4676:	34 df       	rcall	.-408    	; 0x44e0 <_uploadMessageRc>
    4678:	81 11       	cpse	r24, r1
    467a:	14 c0       	rjmp	.+40     	; 0x46a4 <lora_driver_join+0x46>
    467c:	08 e2       	ldi	r16, 0x28	; 40
    467e:	15 e0       	ldi	r17, 0x05	; 5
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	4d e2       	ldi	r20, 0x2D	; 45
    4686:	50 e0       	ldi	r21, 0x00	; 0
    4688:	65 ec       	ldi	r22, 0xC5	; 197
    468a:	77 e1       	ldi	r23, 0x17	; 23
    468c:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_serialReplyBufferHandle>
    4690:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_serialReplyBufferHandle+0x1>
    4694:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferReceive>
    4698:	88 23       	and	r24, r24
    469a:	21 f0       	breq	.+8      	; 0x46a4 <lora_driver_join+0x46>
    469c:	85 ec       	ldi	r24, 0xC5	; 197
    469e:	97 e1       	ldi	r25, 0x17	; 23
    46a0:	aa de       	rcall	.-684    	; 0x43f6 <_reply2ReturnCode>
    46a2:	03 c0       	rjmp	.+6      	; 0x46aa <lora_driver_join+0x4c>
    46a4:	85 ec       	ldi	r24, 0xC5	; 197
    46a6:	97 e1       	ldi	r25, 0x17	; 23
    46a8:	a6 de       	rcall	.-692    	; 0x43f6 <_reply2ReturnCode>
    46aa:	1f 91       	pop	r17
    46ac:	0f 91       	pop	r16
    46ae:	08 95       	ret

000046b0 <lora_driver_sendUploadMessage>:
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	1f 92       	push	r1
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	db 01       	movw	r26, r22
    46c0:	11 96       	adiw	r26, 0x01	; 1
    46c2:	9c 91       	ld	r25, X
    46c4:	11 97       	sbiw	r26, 0x01	; 1
    46c6:	95 31       	cpi	r25, 0x15	; 21
    46c8:	08 f0       	brcs	.+2      	; 0x46cc <lora_driver_sendUploadMessage+0x1c>
    46ca:	b4 c0       	rjmp	.+360    	; 0x4834 <lora_driver_sendUploadMessage+0x184>
    46cc:	99 23       	and	r25, r25
    46ce:	81 f1       	breq	.+96     	; 0x4730 <lora_driver_sendUploadMessage+0x80>
    46d0:	60 e0       	ldi	r22, 0x00	; 0
    46d2:	70 e0       	ldi	r23, 0x00	; 0
    46d4:	27 2f       	mov	r18, r23
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	46 2f       	mov	r20, r22
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	fd 01       	movw	r30, r26
    46de:	e4 0f       	add	r30, r20
    46e0:	f5 1f       	adc	r31, r21
    46e2:	92 81       	ldd	r25, Z+2	; 0x02
    46e4:	92 95       	swap	r25
    46e6:	9f 70       	andi	r25, 0x0F	; 15
    46e8:	9a 30       	cpi	r25, 0x0A	; 10
    46ea:	10 f0       	brcs	.+4      	; 0x46f0 <lora_driver_sendUploadMessage+0x40>
    46ec:	99 5c       	subi	r25, 0xC9	; 201
    46ee:	01 c0       	rjmp	.+2      	; 0x46f2 <lora_driver_sendUploadMessage+0x42>
    46f0:	90 5d       	subi	r25, 0xD0	; 208
    46f2:	f9 01       	movw	r30, r18
    46f4:	ea 5a       	subi	r30, 0xAA	; 170
    46f6:	f8 4e       	sbci	r31, 0xE8	; 232
    46f8:	90 83       	st	Z, r25
    46fa:	2f 5f       	subi	r18, 0xFF	; 255
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	fd 01       	movw	r30, r26
    4700:	e4 0f       	add	r30, r20
    4702:	f5 1f       	adc	r31, r21
    4704:	92 81       	ldd	r25, Z+2	; 0x02
    4706:	9f 70       	andi	r25, 0x0F	; 15
    4708:	49 2f       	mov	r20, r25
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	4a 30       	cpi	r20, 0x0A	; 10
    470e:	51 05       	cpc	r21, r1
    4710:	14 f0       	brlt	.+4      	; 0x4716 <lora_driver_sendUploadMessage+0x66>
    4712:	99 5c       	subi	r25, 0xC9	; 201
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <lora_driver_sendUploadMessage+0x68>
    4716:	90 5d       	subi	r25, 0xD0	; 208
    4718:	f9 01       	movw	r30, r18
    471a:	ea 5a       	subi	r30, 0xAA	; 170
    471c:	f8 4e       	sbci	r31, 0xE8	; 232
    471e:	90 83       	st	Z, r25
    4720:	7e 5f       	subi	r23, 0xFE	; 254
    4722:	6f 5f       	subi	r22, 0xFF	; 255
    4724:	11 96       	adiw	r26, 0x01	; 1
    4726:	9c 91       	ld	r25, X
    4728:	11 97       	sbiw	r26, 0x01	; 1
    472a:	69 17       	cp	r22, r25
    472c:	98 f2       	brcs	.-90     	; 0x46d4 <lora_driver_sendUploadMessage+0x24>
    472e:	01 c0       	rjmp	.+2      	; 0x4732 <lora_driver_sendUploadMessage+0x82>
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	e7 2f       	mov	r30, r23
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	ea 5a       	subi	r30, 0xAA	; 170
    4738:	f8 4e       	sbci	r31, 0xE8	; 232
    473a:	10 82       	st	Z, r1
    473c:	4c 91       	ld	r20, X
    473e:	81 11       	cpse	r24, r1
    4740:	03 c0       	rjmp	.+6      	; 0x4748 <lora_driver_sendUploadMessage+0x98>
    4742:	8e e0       	ldi	r24, 0x0E	; 14
    4744:	96 e0       	ldi	r25, 0x06	; 6
    4746:	02 c0       	rjmp	.+4      	; 0x474c <lora_driver_sendUploadMessage+0x9c>
    4748:	80 e1       	ldi	r24, 0x10	; 16
    474a:	96 e0       	ldi	r25, 0x06	; 6
    474c:	26 e5       	ldi	r18, 0x56	; 86
    474e:	37 e1       	ldi	r19, 0x17	; 23
    4750:	3f 93       	push	r19
    4752:	2f 93       	push	r18
    4754:	1f 92       	push	r1
    4756:	4f 93       	push	r20
    4758:	9f 93       	push	r25
    475a:	8f 93       	push	r24
    475c:	84 e1       	ldi	r24, 0x14	; 20
    475e:	96 e0       	ldi	r25, 0x06	; 6
    4760:	9f 93       	push	r25
    4762:	8f 93       	push	r24
    4764:	88 e9       	ldi	r24, 0x98	; 152
    4766:	97 e1       	ldi	r25, 0x17	; 23
    4768:	9f 93       	push	r25
    476a:	8f 93       	push	r24
    476c:	0e 94 8a 31 	call	0x6314	; 0x6314 <sprintf>
    4770:	60 e0       	ldi	r22, 0x00	; 0
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	88 e9       	ldi	r24, 0x98	; 152
    4776:	97 e1       	ldi	r25, 0x17	; 23
    4778:	b3 de       	rcall	.-666    	; 0x44e0 <_uploadMessageRc>
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	f8 94       	cli
    477e:	de bf       	out	0x3e, r29	; 62
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	81 11       	cpse	r24, r1
    4786:	59 c0       	rjmp	.+178    	; 0x483a <lora_driver_sendUploadMessage+0x18a>
    4788:	08 e2       	ldi	r16, 0x28	; 40
    478a:	15 e0       	ldi	r17, 0x05	; 5
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	4d e2       	ldi	r20, 0x2D	; 45
    4792:	50 e0       	ldi	r21, 0x00	; 0
    4794:	65 ec       	ldi	r22, 0xC5	; 197
    4796:	77 e1       	ldi	r23, 0x17	; 23
    4798:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_serialReplyBufferHandle>
    479c:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_serialReplyBufferHandle+0x1>
    47a0:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferReceive>
    47a4:	88 23       	and	r24, r24
    47a6:	09 f4       	brne	.+2      	; 0x47aa <lora_driver_sendUploadMessage+0xfa>
    47a8:	47 c0       	rjmp	.+142    	; 0x4838 <lora_driver_sendUploadMessage+0x188>
    47aa:	85 ec       	ldi	r24, 0xC5	; 197
    47ac:	97 e1       	ldi	r25, 0x17	; 23
    47ae:	23 de       	rcall	.-954    	; 0x43f6 <_reply2ReturnCode>
    47b0:	8e 30       	cpi	r24, 0x0E	; 14
    47b2:	09 f0       	breq	.+2      	; 0x47b6 <lora_driver_sendUploadMessage+0x106>
    47b4:	42 c0       	rjmp	.+132    	; 0x483a <lora_driver_sendUploadMessage+0x18a>
    47b6:	87 e0       	ldi	r24, 0x07	; 7
    47b8:	89 83       	std	Y+1, r24	; 0x01
    47ba:	80 91 3a 17 	lds	r24, 0x173A	; 0x80173a <_downlinkMessageBuffer>
    47be:	90 91 3b 17 	lds	r25, 0x173B	; 0x80173b <_downlinkMessageBuffer+0x1>
    47c2:	89 2b       	or	r24, r25
    47c4:	a9 f1       	breq	.+106    	; 0x4830 <lora_driver_sendUploadMessage+0x180>
    47c6:	be 01       	movw	r22, r28
    47c8:	6f 5f       	subi	r22, 0xFF	; 255
    47ca:	7f 4f       	sbci	r23, 0xFF	; 255
    47cc:	85 ec       	ldi	r24, 0xC5	; 197
    47ce:	97 e1       	ldi	r25, 0x17	; 23
    47d0:	68 d1       	rcall	.+720    	; 0x4aa2 <decode_port_no>
    47d2:	80 93 40 17 	sts	0x1740, r24	; 0x801740 <_downlinkPayload>
    47d6:	e9 81       	ldd	r30, Y+1	; 0x01
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	eb 53       	subi	r30, 0x3B	; 59
    47dc:	f8 4e       	sbci	r31, 0xE8	; 232
    47de:	df 01       	movw	r26, r30
    47e0:	0d 90       	ld	r0, X+
    47e2:	00 20       	and	r0, r0
    47e4:	e9 f7       	brne	.-6      	; 0x47e0 <lora_driver_sendUploadMessage+0x130>
    47e6:	11 97       	sbiw	r26, 0x01	; 1
    47e8:	ae 1b       	sub	r26, r30
    47ea:	bf 0b       	sbc	r27, r31
    47ec:	aa 23       	and	r26, r26
    47ee:	91 f0       	breq	.+36     	; 0x4814 <lora_driver_sendUploadMessage+0x164>
    47f0:	bb 27       	eor	r27, r27
    47f2:	cd 01       	movw	r24, r26
    47f4:	01 97       	sbiw	r24, 0x01	; 1
    47f6:	9c 01       	movw	r18, r24
    47f8:	12 f4       	brpl	.+4      	; 0x47fe <lora_driver_sendUploadMessage+0x14e>
    47fa:	2f 5f       	subi	r18, 0xFF	; 255
    47fc:	3f 4f       	sbci	r19, 0xFF	; 255
    47fe:	35 95       	asr	r19
    4800:	27 95       	ror	r18
    4802:	20 93 41 17 	sts	0x1741, r18	; 0x801741 <_downlinkPayload+0x1>
    4806:	af 01       	movw	r20, r30
    4808:	4f 5f       	subi	r20, 0xFF	; 255
    480a:	5f 4f       	sbci	r21, 0xFF	; 255
    480c:	64 e1       	ldi	r22, 0x14	; 20
    480e:	82 e4       	ldi	r24, 0x42	; 66
    4810:	97 e1       	ldi	r25, 0x17	; 23
    4812:	73 d1       	rcall	.+742    	; 0x4afa <decode_hexadecimal_string_bytes>
    4814:	01 e0       	ldi	r16, 0x01	; 1
    4816:	10 e0       	ldi	r17, 0x00	; 0
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	46 e1       	ldi	r20, 0x16	; 22
    481e:	50 e0       	ldi	r21, 0x00	; 0
    4820:	60 e4       	ldi	r22, 0x40	; 64
    4822:	77 e1       	ldi	r23, 0x17	; 23
    4824:	80 91 3a 17 	lds	r24, 0x173A	; 0x80173a <_downlinkMessageBuffer>
    4828:	90 91 3b 17 	lds	r25, 0x173B	; 0x80173b <_downlinkMessageBuffer+0x1>
    482c:	0e 94 bf 0c 	call	0x197e	; 0x197e <xStreamBufferSend>
    4830:	8e e0       	ldi	r24, 0x0E	; 14
    4832:	03 c0       	rjmp	.+6      	; 0x483a <lora_driver_sendUploadMessage+0x18a>
    4834:	84 e1       	ldi	r24, 0x14	; 20
    4836:	01 c0       	rjmp	.+2      	; 0x483a <lora_driver_sendUploadMessage+0x18a>
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	0f 90       	pop	r0
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	1f 91       	pop	r17
    4842:	0f 91       	pop	r16
    4844:	08 95       	ret

00004846 <lora_driver_setAdaptiveDataRate>:
    4846:	81 30       	cpi	r24, 0x01	; 1
    4848:	19 f0       	breq	.+6      	; 0x4850 <lora_driver_setAdaptiveDataRate+0xa>
    484a:	64 e2       	ldi	r22, 0x24	; 36
    484c:	76 e0       	ldi	r23, 0x06	; 6
    484e:	02 c0       	rjmp	.+4      	; 0x4854 <lora_driver_setAdaptiveDataRate+0xe>
    4850:	6d ef       	ldi	r22, 0xFD	; 253
    4852:	76 e0       	ldi	r23, 0x06	; 6
    4854:	88 e2       	ldi	r24, 0x28	; 40
    4856:	96 e0       	ldi	r25, 0x06	; 6
    4858:	43 ce       	rjmp	.-890    	; 0x44e0 <_uploadMessageRc>
    485a:	08 95       	ret

0000485c <lora_driver_setReceiveDelay>:
    485c:	9f 93       	push	r25
    485e:	8f 93       	push	r24
    4860:	89 e5       	ldi	r24, 0x59	; 89
    4862:	96 e0       	ldi	r25, 0x06	; 6
    4864:	9f 93       	push	r25
    4866:	8f 93       	push	r24
    4868:	88 e9       	ldi	r24, 0x98	; 152
    486a:	97 e1       	ldi	r25, 0x17	; 23
    486c:	9f 93       	push	r25
    486e:	8f 93       	push	r24
    4870:	0e 94 8a 31 	call	0x6314	; 0x6314 <sprintf>
    4874:	60 e0       	ldi	r22, 0x00	; 0
    4876:	70 e0       	ldi	r23, 0x00	; 0
    4878:	88 e9       	ldi	r24, 0x98	; 152
    487a:	97 e1       	ldi	r25, 0x17	; 23
    487c:	31 de       	rcall	.-926    	; 0x44e0 <_uploadMessageRc>
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	08 95       	ret

0000488c <lora_driver_configureToEu868>:
    488c:	2f 92       	push	r2
    488e:	3f 92       	push	r3
    4890:	4f 92       	push	r4
    4892:	5f 92       	push	r5
    4894:	6f 92       	push	r6
    4896:	7f 92       	push	r7
    4898:	8f 92       	push	r8
    489a:	9f 92       	push	r9
    489c:	af 92       	push	r10
    489e:	bf 92       	push	r11
    48a0:	cf 92       	push	r12
    48a2:	df 92       	push	r13
    48a4:	ef 92       	push	r14
    48a6:	ff 92       	push	r15
    48a8:	0f 93       	push	r16
    48aa:	1f 93       	push	r17
    48ac:	cf 93       	push	r28
    48ae:	df 93       	push	r29
    48b0:	cd b7       	in	r28, 0x3d	; 61
    48b2:	de b7       	in	r29, 0x3e	; 62
    48b4:	a0 97       	sbiw	r28, 0x20	; 32
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	f8 94       	cli
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	66 e8       	ldi	r22, 0x86	; 134
    48c2:	76 e0       	ldi	r23, 0x06	; 6
    48c4:	82 e9       	ldi	r24, 0x92	; 146
    48c6:	96 e0       	ldi	r25, 0x06	; 6
    48c8:	3c dd       	rcall	.-1416   	; 0x4342 <_uploadMessage>
    48ca:	95 dd       	rcall	.-1238   	; 0x43f6 <_reply2ReturnCode>
    48cc:	81 11       	cpse	r24, r1
    48ce:	a3 c0       	rjmp	.+326    	; 0x4a16 <lora_driver_configureToEu868+0x18a>
    48d0:	80 e2       	ldi	r24, 0x20	; 32
    48d2:	e2 e2       	ldi	r30, 0x22	; 34
    48d4:	f2 e0       	ldi	r31, 0x02	; 2
    48d6:	de 01       	movw	r26, r28
    48d8:	11 96       	adiw	r26, 0x01	; 1
    48da:	01 90       	ld	r0, Z+
    48dc:	0d 92       	st	X+, r0
    48de:	8a 95       	dec	r24
    48e0:	e1 f7       	brne	.-8      	; 0x48da <lora_driver_configureToEu868+0x4e>
    48e2:	9e 01       	movw	r18, r28
    48e4:	2f 5f       	subi	r18, 0xFF	; 255
    48e6:	3f 4f       	sbci	r19, 0xFF	; 255
    48e8:	69 01       	movw	r12, r18
    48ea:	e1 2c       	mov	r14, r1
    48ec:	f1 2c       	mov	r15, r1
    48ee:	0f 2e       	mov	r0, r31
    48f0:	fe e9       	ldi	r31, 0x9E	; 158
    48f2:	af 2e       	mov	r10, r31
    48f4:	f6 e0       	ldi	r31, 0x06	; 6
    48f6:	bf 2e       	mov	r11, r31
    48f8:	f0 2d       	mov	r31, r0
    48fa:	08 e9       	ldi	r16, 0x98	; 152
    48fc:	17 e1       	ldi	r17, 0x17	; 23
    48fe:	0f 2e       	mov	r0, r31
    4900:	f7 eb       	ldi	r31, 0xB7	; 183
    4902:	4f 2e       	mov	r4, r31
    4904:	f6 e0       	ldi	r31, 0x06	; 6
    4906:	5f 2e       	mov	r5, r31
    4908:	f0 2d       	mov	r31, r0
    490a:	0f 2e       	mov	r0, r31
    490c:	fe ec       	ldi	r31, 0xCE	; 206
    490e:	8f 2e       	mov	r8, r31
    4910:	f6 e0       	ldi	r31, 0x06	; 6
    4912:	9f 2e       	mov	r9, r31
    4914:	f0 2d       	mov	r31, r0
    4916:	0f 2e       	mov	r0, r31
    4918:	f8 ee       	ldi	r31, 0xE8	; 232
    491a:	6f 2e       	mov	r6, r31
    491c:	f6 e0       	ldi	r31, 0x06	; 6
    491e:	7f 2e       	mov	r7, r31
    4920:	f0 2d       	mov	r31, r0
    4922:	3e 2c       	mov	r3, r14
    4924:	2f 2c       	mov	r2, r15
    4926:	ff 92       	push	r15
    4928:	ef 92       	push	r14
    492a:	bf 92       	push	r11
    492c:	af 92       	push	r10
    492e:	1f 93       	push	r17
    4930:	0f 93       	push	r16
    4932:	0e 94 8a 31 	call	0x6314	; 0x6314 <sprintf>
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	c8 01       	movw	r24, r16
    493c:	02 dd       	rcall	.-1532   	; 0x4342 <_uploadMessage>
    493e:	5b dd       	rcall	.-1354   	; 0x43f6 <_reply2ReturnCode>
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	81 11       	cpse	r24, r1
    494e:	63 c0       	rjmp	.+198    	; 0x4a16 <lora_driver_configureToEu868+0x18a>
    4950:	32 e0       	ldi	r19, 0x02	; 2
    4952:	3e 15       	cp	r19, r14
    4954:	e8 f4       	brcc	.+58     	; 0x4990 <lora_driver_configureToEu868+0x104>
    4956:	f6 01       	movw	r30, r12
    4958:	83 81       	ldd	r24, Z+3	; 0x03
    495a:	8f 93       	push	r24
    495c:	82 81       	ldd	r24, Z+2	; 0x02
    495e:	8f 93       	push	r24
    4960:	81 81       	ldd	r24, Z+1	; 0x01
    4962:	8f 93       	push	r24
    4964:	80 81       	ld	r24, Z
    4966:	8f 93       	push	r24
    4968:	ff 92       	push	r15
    496a:	ef 92       	push	r14
    496c:	5f 92       	push	r5
    496e:	4f 92       	push	r4
    4970:	1f 93       	push	r17
    4972:	0f 93       	push	r16
    4974:	0e 94 8a 31 	call	0x6314	; 0x6314 <sprintf>
    4978:	60 e0       	ldi	r22, 0x00	; 0
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	c8 01       	movw	r24, r16
    497e:	e1 dc       	rcall	.-1598   	; 0x4342 <_uploadMessage>
    4980:	3a dd       	rcall	.-1420   	; 0x43f6 <_reply2ReturnCode>
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	81 11       	cpse	r24, r1
    498e:	43 c0       	rjmp	.+134    	; 0x4a16 <lora_driver_configureToEu868+0x18a>
    4990:	2f 92       	push	r2
    4992:	3f 92       	push	r3
    4994:	9f 92       	push	r9
    4996:	8f 92       	push	r8
    4998:	1f 93       	push	r17
    499a:	0f 93       	push	r16
    499c:	0e 94 8a 31 	call	0x6314	; 0x6314 <sprintf>
    49a0:	60 e0       	ldi	r22, 0x00	; 0
    49a2:	70 e0       	ldi	r23, 0x00	; 0
    49a4:	c8 01       	movw	r24, r16
    49a6:	cd dc       	rcall	.-1638   	; 0x4342 <_uploadMessage>
    49a8:	26 dd       	rcall	.-1460   	; 0x43f6 <_reply2ReturnCode>
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	81 11       	cpse	r24, r1
    49b8:	2e c0       	rjmp	.+92     	; 0x4a16 <lora_driver_configureToEu868+0x18a>
    49ba:	2f 92       	push	r2
    49bc:	3f 92       	push	r3
    49be:	7f 92       	push	r7
    49c0:	6f 92       	push	r6
    49c2:	1f 93       	push	r17
    49c4:	0f 93       	push	r16
    49c6:	0e 94 8a 31 	call	0x6314	; 0x6314 <sprintf>
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	c8 01       	movw	r24, r16
    49d0:	b8 dc       	rcall	.-1680   	; 0x4342 <_uploadMessage>
    49d2:	11 dd       	rcall	.-1502   	; 0x43f6 <_reply2ReturnCode>
    49d4:	0f 90       	pop	r0
    49d6:	0f 90       	pop	r0
    49d8:	0f 90       	pop	r0
    49da:	0f 90       	pop	r0
    49dc:	0f 90       	pop	r0
    49de:	0f 90       	pop	r0
    49e0:	81 11       	cpse	r24, r1
    49e2:	19 c0       	rjmp	.+50     	; 0x4a16 <lora_driver_configureToEu868+0x18a>
    49e4:	3f ef       	ldi	r19, 0xFF	; 255
    49e6:	e3 1a       	sub	r14, r19
    49e8:	f3 0a       	sbc	r15, r19
    49ea:	84 e0       	ldi	r24, 0x04	; 4
    49ec:	c8 0e       	add	r12, r24
    49ee:	d1 1c       	adc	r13, r1
    49f0:	98 e0       	ldi	r25, 0x08	; 8
    49f2:	e9 16       	cp	r14, r25
    49f4:	f1 04       	cpc	r15, r1
    49f6:	09 f0       	breq	.+2      	; 0x49fa <lora_driver_configureToEu868+0x16e>
    49f8:	94 cf       	rjmp	.-216    	; 0x4922 <lora_driver_configureToEu868+0x96>
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	70 e0       	ldi	r23, 0x00	; 0
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	97 e0       	ldi	r25, 0x07	; 7
    4a02:	9f dc       	rcall	.-1730   	; 0x4342 <_uploadMessage>
    4a04:	f8 dc       	rcall	.-1552   	; 0x43f6 <_reply2ReturnCode>
    4a06:	81 11       	cpse	r24, r1
    4a08:	06 c0       	rjmp	.+12     	; 0x4a16 <lora_driver_configureToEu868+0x18a>
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	70 e0       	ldi	r23, 0x00	; 0
    4a0e:	81 e1       	ldi	r24, 0x11	; 17
    4a10:	97 e0       	ldi	r25, 0x07	; 7
    4a12:	97 dc       	rcall	.-1746   	; 0x4342 <_uploadMessage>
    4a14:	f0 dc       	rcall	.-1568   	; 0x43f6 <_reply2ReturnCode>
    4a16:	a0 96       	adiw	r28, 0x20	; 32
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	df 91       	pop	r29
    4a24:	cf 91       	pop	r28
    4a26:	1f 91       	pop	r17
    4a28:	0f 91       	pop	r16
    4a2a:	ff 90       	pop	r15
    4a2c:	ef 90       	pop	r14
    4a2e:	df 90       	pop	r13
    4a30:	cf 90       	pop	r12
    4a32:	bf 90       	pop	r11
    4a34:	af 90       	pop	r10
    4a36:	9f 90       	pop	r9
    4a38:	8f 90       	pop	r8
    4a3a:	7f 90       	pop	r7
    4a3c:	6f 90       	pop	r6
    4a3e:	5f 90       	pop	r5
    4a40:	4f 90       	pop	r4
    4a42:	3f 90       	pop	r3
    4a44:	2f 90       	pop	r2
    4a46:	08 95       	ret

00004a48 <lora_driver_setOtaaIdentity>:
    4a48:	ef 92       	push	r14
    4a4a:	ff 92       	push	r15
    4a4c:	0f 93       	push	r16
    4a4e:	1f 93       	push	r17
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	ec 01       	movw	r28, r24
    4a56:	8b 01       	movw	r16, r22
    4a58:	7a 01       	movw	r14, r20
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	f4 de       	rcall	.-536    	; 0x4846 <lora_driver_setAdaptiveDataRate>
    4a5e:	81 11       	cpse	r24, r1
    4a60:	0d c0       	rjmp	.+26     	; 0x4a7c <lora_driver_setOtaaIdentity+0x34>
    4a62:	ce 01       	movw	r24, r28
    4a64:	d4 dd       	rcall	.-1112   	; 0x460e <lora_driver_setApplicationIdentifier>
    4a66:	81 11       	cpse	r24, r1
    4a68:	09 c0       	rjmp	.+18     	; 0x4a7c <lora_driver_setOtaaIdentity+0x34>
    4a6a:	c8 01       	movw	r24, r16
    4a6c:	e1 dd       	rcall	.-1086   	; 0x4630 <lora_driver_setApplicationKey>
    4a6e:	81 11       	cpse	r24, r1
    4a70:	05 c0       	rjmp	.+10     	; 0x4a7c <lora_driver_setOtaaIdentity+0x34>
    4a72:	c7 01       	movw	r24, r14
    4a74:	bb dd       	rcall	.-1162   	; 0x45ec <lora_driver_setDeviceIdentifier>
    4a76:	81 11       	cpse	r24, r1
    4a78:	01 c0       	rjmp	.+2      	; 0x4a7c <lora_driver_setOtaaIdentity+0x34>
    4a7a:	eb dd       	rcall	.-1066   	; 0x4652 <lora_driver_saveMac>
    4a7c:	df 91       	pop	r29
    4a7e:	cf 91       	pop	r28
    4a80:	1f 91       	pop	r17
    4a82:	0f 91       	pop	r16
    4a84:	ff 90       	pop	r15
    4a86:	ef 90       	pop	r14
    4a88:	08 95       	ret

00004a8a <lora_driver_mapReturnCodeToText>:
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	ee 0f       	add	r30, r30
    4a90:	ff 1f       	adc	r31, r31
    4a92:	8e 0f       	add	r24, r30
    4a94:	9f 1f       	adc	r25, r31
    4a96:	fc 01       	movw	r30, r24
    4a98:	e6 52       	subi	r30, 0x26	; 38
    4a9a:	f8 4f       	sbci	r31, 0xF8	; 248
    4a9c:	81 81       	ldd	r24, Z+1	; 0x01
    4a9e:	92 81       	ldd	r25, Z+2	; 0x02
    4aa0:	08 95       	ret

00004aa2 <decode_port_no>:
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	00 97       	sbiw	r24, 0x00	; 0
    4aa6:	29 f1       	breq	.+74     	; 0x4af2 <decode_port_no+0x50>
    4aa8:	fb 01       	movw	r30, r22
    4aaa:	20 81       	ld	r18, Z
    4aac:	fc 01       	movw	r30, r24
    4aae:	01 90       	ld	r0, Z+
    4ab0:	00 20       	and	r0, r0
    4ab2:	e9 f7       	brne	.-6      	; 0x4aae <decode_port_no+0xc>
    4ab4:	31 97       	sbiw	r30, 0x01	; 1
    4ab6:	e8 1b       	sub	r30, r24
    4ab8:	f9 0b       	sbc	r31, r25
    4aba:	82 2f       	mov	r24, r18
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	e8 17       	cp	r30, r24
    4ac0:	f9 07       	cpc	r31, r25
    4ac2:	c8 f0       	brcs	.+50     	; 0x4af6 <decode_port_no+0x54>
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	08 c0       	rjmp	.+16     	; 0x4ad8 <decode_port_no+0x36>
    4ac8:	88 0f       	add	r24, r24
    4aca:	38 2f       	mov	r19, r24
    4acc:	33 0f       	add	r19, r19
    4ace:	33 0f       	add	r19, r19
    4ad0:	83 0f       	add	r24, r19
    4ad2:	80 53       	subi	r24, 0x30	; 48
    4ad4:	89 0f       	add	r24, r25
    4ad6:	2f 5f       	subi	r18, 0xFF	; 255
    4ad8:	fd 01       	movw	r30, r26
    4ada:	e2 0f       	add	r30, r18
    4adc:	f1 1d       	adc	r31, r1
    4ade:	90 81       	ld	r25, Z
    4ae0:	30 ed       	ldi	r19, 0xD0	; 208
    4ae2:	39 0f       	add	r19, r25
    4ae4:	3a 30       	cpi	r19, 0x0A	; 10
    4ae6:	10 f4       	brcc	.+4      	; 0x4aec <decode_port_no+0x4a>
    4ae8:	91 11       	cpse	r25, r1
    4aea:	ee cf       	rjmp	.-36     	; 0x4ac8 <decode_port_no+0x26>
    4aec:	fb 01       	movw	r30, r22
    4aee:	20 83       	st	Z, r18
    4af0:	08 95       	ret
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	08 95       	ret
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	08 95       	ret

00004afa <decode_hexadecimal_string_bytes>:
    4afa:	0f 93       	push	r16
    4afc:	1f 93       	push	r17
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	dc 01       	movw	r26, r24
    4b04:	ea 01       	movw	r28, r20
    4b06:	20 97       	sbiw	r28, 0x00	; 0
    4b08:	e1 f1       	breq	.+120    	; 0x4b82 <decode_hexadecimal_string_bytes+0x88>
    4b0a:	fa 01       	movw	r30, r20
    4b0c:	01 90       	ld	r0, Z+
    4b0e:	00 20       	and	r0, r0
    4b10:	e9 f7       	brne	.-6      	; 0x4b0c <decode_hexadecimal_string_bytes+0x12>
    4b12:	31 97       	sbiw	r30, 0x01	; 1
    4b14:	e4 1b       	sub	r30, r20
    4b16:	f5 0b       	sbc	r31, r21
    4b18:	32 97       	sbiw	r30, 0x02	; 2
    4b1a:	10 f5       	brcc	.+68     	; 0x4b60 <decode_hexadecimal_string_bytes+0x66>
    4b1c:	32 c0       	rjmp	.+100    	; 0x4b82 <decode_hexadecimal_string_bytes+0x88>
    4b1e:	8d 01       	movw	r16, r26
    4b20:	04 0f       	add	r16, r20
    4b22:	15 1f       	adc	r17, r21
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	ae 01       	movw	r20, r28
    4b28:	42 0f       	add	r20, r18
    4b2a:	53 1f       	adc	r21, r19
    4b2c:	fa 01       	movw	r30, r20
    4b2e:	90 81       	ld	r25, Z
    4b30:	91 34       	cpi	r25, 0x41	; 65
    4b32:	28 f0       	brcs	.+10     	; 0x4b3e <decode_hexadecimal_string_bytes+0x44>
    4b34:	97 53       	subi	r25, 0x37	; 55
    4b36:	59 2f       	mov	r21, r25
    4b38:	52 95       	swap	r21
    4b3a:	50 7f       	andi	r21, 0xF0	; 240
    4b3c:	03 c0       	rjmp	.+6      	; 0x4b44 <decode_hexadecimal_string_bytes+0x4a>
    4b3e:	59 2f       	mov	r21, r25
    4b40:	52 95       	swap	r21
    4b42:	50 7f       	andi	r21, 0xF0	; 240
    4b44:	2c 0f       	add	r18, r28
    4b46:	3d 1f       	adc	r19, r29
    4b48:	f9 01       	movw	r30, r18
    4b4a:	91 81       	ldd	r25, Z+1	; 0x01
    4b4c:	91 34       	cpi	r25, 0x41	; 65
    4b4e:	10 f0       	brcs	.+4      	; 0x4b54 <decode_hexadecimal_string_bytes+0x5a>
    4b50:	97 53       	subi	r25, 0x37	; 55
    4b52:	01 c0       	rjmp	.+2      	; 0x4b56 <decode_hexadecimal_string_bytes+0x5c>
    4b54:	90 53       	subi	r25, 0x30	; 48
    4b56:	95 0f       	add	r25, r21
    4b58:	f8 01       	movw	r30, r16
    4b5a:	90 83       	st	Z, r25
    4b5c:	8f 5f       	subi	r24, 0xFF	; 255
    4b5e:	01 c0       	rjmp	.+2      	; 0x4b62 <decode_hexadecimal_string_bytes+0x68>
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	28 2f       	mov	r18, r24
    4b64:	22 0f       	add	r18, r18
    4b66:	48 2f       	mov	r20, r24
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	01 90       	ld	r0, Z+
    4b6e:	00 20       	and	r0, r0
    4b70:	e9 f7       	brne	.-6      	; 0x4b6c <decode_hexadecimal_string_bytes+0x72>
    4b72:	31 97       	sbiw	r30, 0x01	; 1
    4b74:	ec 1b       	sub	r30, r28
    4b76:	fd 0b       	sbc	r31, r29
    4b78:	4e 17       	cp	r20, r30
    4b7a:	5f 07       	cpc	r21, r31
    4b7c:	10 f4       	brcc	.+4      	; 0x4b82 <decode_hexadecimal_string_bytes+0x88>
    4b7e:	86 13       	cpse	r24, r22
    4b80:	ce cf       	rjmp	.-100    	; 0x4b1e <decode_hexadecimal_string_bytes+0x24>
    4b82:	df 91       	pop	r29
    4b84:	cf 91       	pop	r28
    4b86:	1f 91       	pop	r17
    4b88:	0f 91       	pop	r16
    4b8a:	08 95       	ret

00004b8c <_serialCallBack>:
    4b8c:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <crc_sum.1945>
    4b90:	86 0f       	add	r24, r22
    4b92:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <crc_sum.1945>
    4b96:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_mh_state>
    4b9a:	91 30       	cpi	r25, 0x01	; 1
    4b9c:	79 f0       	breq	.+30     	; 0x4bbc <_serialCallBack+0x30>
    4b9e:	28 f0       	brcs	.+10     	; 0x4baa <_serialCallBack+0x1e>
    4ba0:	92 30       	cpi	r25, 0x02	; 2
    4ba2:	a9 f0       	breq	.+42     	; 0x4bce <_serialCallBack+0x42>
    4ba4:	93 30       	cpi	r25, 0x03	; 3
    4ba6:	19 f1       	breq	.+70     	; 0x4bee <_serialCallBack+0x62>
    4ba8:	08 95       	ret
    4baa:	6f 3f       	cpi	r22, 0xFF	; 255
    4bac:	09 f0       	breq	.+2      	; 0x4bb0 <_serialCallBack+0x24>
    4bae:	48 c0       	rjmp	.+144    	; 0x4c40 <_serialCallBack+0xb4>
    4bb0:	10 92 f5 17 	sts	0x17F5, r1	; 0x8017f5 <crc_sum.1945>
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	80 93 f8 17 	sts	0x17F8, r24	; 0x8017f8 <_mh_state>
    4bba:	08 95       	ret
    4bbc:	66 38       	cpi	r22, 0x86	; 134
    4bbe:	09 f0       	breq	.+2      	; 0x4bc2 <_serialCallBack+0x36>
    4bc0:	3f c0       	rjmp	.+126    	; 0x4c40 <_serialCallBack+0xb4>
    4bc2:	10 92 f4 17 	sts	0x17F4, r1	; 0x8017f4 <inDex.1943>
    4bc6:	82 e0       	ldi	r24, 0x02	; 2
    4bc8:	80 93 f8 17 	sts	0x17F8, r24	; 0x8017f8 <_mh_state>
    4bcc:	08 95       	ret
    4bce:	e0 91 f4 17 	lds	r30, 0x17F4	; 0x8017f4 <inDex.1943>
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	8e 0f       	add	r24, r30
    4bd6:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <inDex.1943>
    4bda:	f0 e0       	ldi	r31, 0x00	; 0
    4bdc:	ee 50       	subi	r30, 0x0E	; 14
    4bde:	f8 4e       	sbci	r31, 0xE8	; 232
    4be0:	60 83       	st	Z, r22
    4be2:	82 30       	cpi	r24, 0x02	; 2
    4be4:	69 f5       	brne	.+90     	; 0x4c40 <_serialCallBack+0xb4>
    4be6:	83 e0       	ldi	r24, 0x03	; 3
    4be8:	80 93 f8 17 	sts	0x17F8, r24	; 0x8017f8 <_mh_state>
    4bec:	08 95       	ret
    4bee:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <inDex.1943>
    4bf2:	21 e0       	ldi	r18, 0x01	; 1
    4bf4:	29 0f       	add	r18, r25
    4bf6:	20 93 f4 17 	sts	0x17F4, r18	; 0x8017f4 <inDex.1943>
    4bfa:	96 30       	cpi	r25, 0x06	; 6
    4bfc:	09 f5       	brne	.+66     	; 0x4c40 <_serialCallBack+0xb4>
    4bfe:	81 11       	cpse	r24, r1
    4c00:	0e c0       	rjmp	.+28     	; 0x4c1e <_serialCallBack+0x92>
    4c02:	e2 ef       	ldi	r30, 0xF2	; 242
    4c04:	f7 e1       	ldi	r31, 0x17	; 23
    4c06:	80 81       	ld	r24, Z
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	98 2f       	mov	r25, r24
    4c0c:	88 27       	eor	r24, r24
    4c0e:	21 81       	ldd	r18, Z+1	; 0x01
    4c10:	82 0f       	add	r24, r18
    4c12:	91 1d       	adc	r25, r1
    4c14:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <_ppm+0x1>
    4c18:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <_ppm>
    4c1c:	04 c0       	rjmp	.+8      	; 0x4c26 <_serialCallBack+0x9a>
    4c1e:	10 92 fa 17 	sts	0x17FA, r1	; 0x8017fa <_ppm+0x1>
    4c22:	10 92 f9 17 	sts	0x17F9, r1	; 0x8017f9 <_ppm>
    4c26:	10 92 f8 17 	sts	0x17F8, r1	; 0x8017f8 <_mh_state>
    4c2a:	e0 91 f6 17 	lds	r30, 0x17F6	; 0x8017f6 <_appCallBack>
    4c2e:	f0 91 f7 17 	lds	r31, 0x17F7	; 0x8017f7 <_appCallBack+0x1>
    4c32:	30 97       	sbiw	r30, 0x00	; 0
    4c34:	29 f0       	breq	.+10     	; 0x4c40 <_serialCallBack+0xb4>
    4c36:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <_ppm>
    4c3a:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <_ppm+0x1>
    4c3e:	19 95       	eicall
    4c40:	08 95       	ret

00004c42 <mh_z19_initialise>:
    4c42:	8f 92       	push	r8
    4c44:	9f 92       	push	r9
    4c46:	af 92       	push	r10
    4c48:	cf 92       	push	r12
    4c4a:	ef 92       	push	r14
    4c4c:	0f 93       	push	r16
    4c4e:	0f 2e       	mov	r0, r31
    4c50:	f6 ec       	ldi	r31, 0xC6	; 198
    4c52:	8f 2e       	mov	r8, r31
    4c54:	f5 e2       	ldi	r31, 0x25	; 37
    4c56:	9f 2e       	mov	r9, r31
    4c58:	f0 2d       	mov	r31, r0
    4c5a:	68 94       	set
    4c5c:	aa 24       	eor	r10, r10
    4c5e:	a4 f8       	bld	r10, 4
    4c60:	68 94       	set
    4c62:	cc 24       	eor	r12, r12
    4c64:	c4 f8       	bld	r12, 4
    4c66:	e1 2c       	mov	r14, r1
    4c68:	00 e0       	ldi	r16, 0x00	; 0
    4c6a:	23 e0       	ldi	r18, 0x03	; 3
    4c6c:	40 e8       	ldi	r20, 0x80	; 128
    4c6e:	55 e2       	ldi	r21, 0x25	; 37
    4c70:	60 e0       	ldi	r22, 0x00	; 0
    4c72:	70 e0       	ldi	r23, 0x00	; 0
    4c74:	73 d0       	rcall	.+230    	; 0x4d5c <serial_create>
    4c76:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <_serial+0x1>
    4c7a:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <_serial>
    4c7e:	0f 91       	pop	r16
    4c80:	ef 90       	pop	r14
    4c82:	cf 90       	pop	r12
    4c84:	af 90       	pop	r10
    4c86:	9f 90       	pop	r9
    4c88:	8f 90       	pop	r8
    4c8a:	08 95       	ret

00004c8c <mh_z19_injectCallBack>:
    4c8c:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <_appCallBack+0x1>
    4c90:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <_appCallBack>
    4c94:	08 95       	ret

00004c96 <mh_z19_takeMeassuring>:
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	29 97       	sbiw	r28, 0x09	; 9
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	89 e0       	ldi	r24, 0x09	; 9
    4cac:	e2 e4       	ldi	r30, 0x42	; 66
    4cae:	f2 e0       	ldi	r31, 0x02	; 2
    4cb0:	9e 01       	movw	r18, r28
    4cb2:	2f 5f       	subi	r18, 0xFF	; 255
    4cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb6:	d9 01       	movw	r26, r18
    4cb8:	01 90       	ld	r0, Z+
    4cba:	0d 92       	st	X+, r0
    4cbc:	8a 95       	dec	r24
    4cbe:	e1 f7       	brne	.-8      	; 0x4cb8 <mh_z19_takeMeassuring+0x22>
    4cc0:	10 92 fa 17 	sts	0x17FA, r1	; 0x8017fa <_ppm+0x1>
    4cc4:	10 92 f9 17 	sts	0x17F9, r1	; 0x8017f9 <_ppm>
    4cc8:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <_serial>
    4ccc:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <_serial+0x1>
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	31 f0       	breq	.+12     	; 0x4ce0 <mh_z19_takeMeassuring+0x4a>
    4cd4:	42 2f       	mov	r20, r18
    4cd6:	53 2f       	mov	r21, r19
    4cd8:	69 e0       	ldi	r22, 0x09	; 9
    4cda:	0d d1       	rcall	.+538    	; 0x4ef6 <serial_sendBytes>
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	01 c0       	rjmp	.+2      	; 0x4ce2 <mh_z19_takeMeassuring+0x4c>
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	29 96       	adiw	r28, 0x09	; 9
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	df 91       	pop	r29
    4cf0:	cf 91       	pop	r28
    4cf2:	08 95       	ret

00004cf4 <rc_servo_setPosition>:
    4cf4:	65 36       	cpi	r22, 0x65	; 101
    4cf6:	0c f0       	brlt	.+2      	; 0x4cfa <rc_servo_setPosition+0x6>
    4cf8:	64 e6       	ldi	r22, 0x64	; 100
    4cfa:	6c 39       	cpi	r22, 0x9C	; 156
    4cfc:	0c f4       	brge	.+2      	; 0x4d00 <rc_servo_setPosition+0xc>
    4cfe:	6c e9       	ldi	r22, 0x9C	; 156
    4d00:	96 ef       	ldi	r25, 0xF6	; 246
    4d02:	69 02       	muls	r22, r25
    4d04:	b0 01       	movw	r22, r0
    4d06:	11 24       	eor	r1, r1
    4d08:	68 54       	subi	r22, 0x48	; 72
    4d0a:	74 4f       	sbci	r23, 0xF4	; 244
    4d0c:	81 11       	cpse	r24, r1
    4d0e:	05 c0       	rjmp	.+10     	; 0x4d1a <rc_servo_setPosition+0x26>
    4d10:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4d14:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4d18:	08 95       	ret
    4d1a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4d1e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4d22:	08 95       	ret

00004d24 <rc_servo_initialise>:
    4d24:	ea e0       	ldi	r30, 0x0A	; 10
    4d26:	f1 e0       	ldi	r31, 0x01	; 1
    4d28:	80 81       	ld	r24, Z
    4d2a:	88 61       	ori	r24, 0x18	; 24
    4d2c:	80 83       	st	Z, r24
    4d2e:	8f e3       	ldi	r24, 0x3F	; 63
    4d30:	9c e9       	ldi	r25, 0x9C	; 156
    4d32:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4d36:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4d3a:	60 e0       	ldi	r22, 0x00	; 0
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	da df       	rcall	.-76     	; 0x4cf4 <rc_servo_setPosition>
    4d40:	60 e0       	ldi	r22, 0x00	; 0
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	d7 df       	rcall	.-82     	; 0x4cf4 <rc_servo_setPosition>
    4d46:	e0 e2       	ldi	r30, 0x20	; 32
    4d48:	f1 e0       	ldi	r31, 0x01	; 1
    4d4a:	80 81       	ld	r24, Z
    4d4c:	82 6a       	ori	r24, 0xA2	; 162
    4d4e:	80 83       	st	Z, r24
    4d50:	e1 e2       	ldi	r30, 0x21	; 33
    4d52:	f1 e0       	ldi	r31, 0x01	; 1
    4d54:	80 81       	ld	r24, Z
    4d56:	8a 61       	ori	r24, 0x1A	; 26
    4d58:	80 83       	st	Z, r24
    4d5a:	08 95       	ret

00004d5c <serial_create>:
    4d5c:	2f 92       	push	r2
    4d5e:	3f 92       	push	r3
    4d60:	4f 92       	push	r4
    4d62:	5f 92       	push	r5
    4d64:	6f 92       	push	r6
    4d66:	7f 92       	push	r7
    4d68:	8f 92       	push	r8
    4d6a:	9f 92       	push	r9
    4d6c:	af 92       	push	r10
    4d6e:	cf 92       	push	r12
    4d70:	ef 92       	push	r14
    4d72:	ff 92       	push	r15
    4d74:	0f 93       	push	r16
    4d76:	1f 93       	push	r17
    4d78:	cf 93       	push	r28
    4d7a:	df 93       	push	r29
    4d7c:	cd b7       	in	r28, 0x3d	; 61
    4d7e:	de b7       	in	r29, 0x3e	; 62
    4d80:	f8 2e       	mov	r15, r24
    4d82:	2a 01       	movw	r4, r20
    4d84:	3b 01       	movw	r6, r22
    4d86:	88 e0       	ldi	r24, 0x08	; 8
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <malloc>
    4d8e:	8c 01       	movw	r16, r24
    4d90:	8f 2d       	mov	r24, r15
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	fc 01       	movw	r30, r24
    4d96:	ee 0f       	add	r30, r30
    4d98:	ff 1f       	adc	r31, r31
    4d9a:	e3 50       	subi	r30, 0x03	; 3
    4d9c:	f8 4e       	sbci	r31, 0xE8	; 232
    4d9e:	11 83       	std	Z+1, r17	; 0x01
    4da0:	00 83       	st	Z, r16
    4da2:	01 15       	cp	r16, r1
    4da4:	11 05       	cpc	r17, r1
    4da6:	09 f4       	brne	.+2      	; 0x4daa <serial_create+0x4e>
    4da8:	69 c0       	rjmp	.+210    	; 0x4e7c <serial_create+0x120>
    4daa:	88 0f       	add	r24, r24
    4dac:	99 1f       	adc	r25, r25
    4dae:	fc 01       	movw	r30, r24
    4db0:	e5 5f       	subi	r30, 0xF5	; 245
    4db2:	fd 4f       	sbci	r31, 0xFD	; 253
    4db4:	80 81       	ld	r24, Z
    4db6:	91 81       	ldd	r25, Z+1	; 0x01
    4db8:	d8 01       	movw	r26, r16
    4dba:	8d 93       	st	X+, r24
    4dbc:	9c 93       	st	X, r25
    4dbe:	8c 2d       	mov	r24, r12
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	88 0f       	add	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <malloc>
    4dce:	1c 01       	movw	r2, r24
    4dd0:	86 e0       	ldi	r24, 0x06	; 6
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <malloc>
    4dd8:	7c 01       	movw	r14, r24
    4dda:	4c 2d       	mov	r20, r12
    4ddc:	b1 01       	movw	r22, r2
    4dde:	f0 d6       	rcall	.+3552   	; 0x5bc0 <fifo_init>
    4de0:	f8 01       	movw	r30, r16
    4de2:	f5 82       	std	Z+5, r15	; 0x05
    4de4:	e4 82       	std	Z+4, r14	; 0x04
    4de6:	8a 2d       	mov	r24, r10
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	88 0f       	add	r24, r24
    4dec:	99 1f       	adc	r25, r25
    4dee:	88 0f       	add	r24, r24
    4df0:	99 1f       	adc	r25, r25
    4df2:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <malloc>
    4df6:	1c 01       	movw	r2, r24
    4df8:	86 e0       	ldi	r24, 0x06	; 6
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <malloc>
    4e00:	7c 01       	movw	r14, r24
    4e02:	4a 2d       	mov	r20, r10
    4e04:	b1 01       	movw	r22, r2
    4e06:	dc d6       	rcall	.+3512   	; 0x5bc0 <fifo_init>
    4e08:	d8 01       	movw	r26, r16
    4e0a:	13 96       	adiw	r26, 0x03	; 3
    4e0c:	fc 92       	st	X, r15
    4e0e:	ee 92       	st	-X, r14
    4e10:	12 97       	sbiw	r26, 0x02	; 2
    4e12:	17 96       	adiw	r26, 0x07	; 7
    4e14:	9c 92       	st	X, r9
    4e16:	8e 92       	st	-X, r8
    4e18:	16 97       	sbiw	r26, 0x06	; 6
    4e1a:	ff b6       	in	r15, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	ed 91       	ld	r30, X+
    4e20:	fc 91       	ld	r31, X
    4e22:	11 97       	sbiw	r26, 0x01	; 1
    4e24:	36 97       	sbiw	r30, 0x06	; 6
    4e26:	80 81       	ld	r24, Z
    4e28:	82 60       	ori	r24, 0x02	; 2
    4e2a:	80 83       	st	Z, r24
    4e2c:	8d 90       	ld	r8, X+
    4e2e:	9c 90       	ld	r9, X
    4e30:	c3 01       	movw	r24, r6
    4e32:	b2 01       	movw	r22, r4
    4e34:	b3 d7       	rcall	.+3942   	; 0x5d9c <__floatunsisf>
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	40 e0       	ldi	r20, 0x00	; 0
    4e3c:	51 e4       	ldi	r21, 0x41	; 65
    4e3e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    4e42:	9b 01       	movw	r18, r22
    4e44:	ac 01       	movw	r20, r24
    4e46:	60 e0       	ldi	r22, 0x00	; 0
    4e48:	74 e2       	ldi	r23, 0x24	; 36
    4e4a:	84 e7       	ldi	r24, 0x74	; 116
    4e4c:	9b e4       	ldi	r25, 0x4B	; 75
    4e4e:	3b d7       	rcall	.+3702   	; 0x5cc6 <__divsf3>
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e8       	ldi	r20, 0x80	; 128
    4e56:	5f e3       	ldi	r21, 0x3F	; 63
    4e58:	cf d6       	rcall	.+3486   	; 0x5bf8 <__subsf3>
    4e5a:	3d d9       	rcall	.-3462   	; 0x40d6 <__fixunssfsi>
    4e5c:	f4 01       	movw	r30, r8
    4e5e:	32 97       	sbiw	r30, 0x02	; 2
    4e60:	60 83       	st	Z, r22
    4e62:	d8 01       	movw	r26, r16
    4e64:	ed 91       	ld	r30, X+
    4e66:	fc 91       	ld	r31, X
    4e68:	11 97       	sbiw	r26, 0x01	; 1
    4e6a:	35 97       	sbiw	r30, 0x05	; 5
    4e6c:	88 e9       	ldi	r24, 0x98	; 152
    4e6e:	80 83       	st	Z, r24
    4e70:	ed 91       	ld	r30, X+
    4e72:	fc 91       	ld	r31, X
    4e74:	34 97       	sbiw	r30, 0x04	; 4
    4e76:	86 e0       	ldi	r24, 0x06	; 6
    4e78:	80 83       	st	Z, r24
    4e7a:	ff be       	out	0x3f, r15	; 63
    4e7c:	c8 01       	movw	r24, r16
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	cf 90       	pop	r12
    4e8c:	af 90       	pop	r10
    4e8e:	9f 90       	pop	r9
    4e90:	8f 90       	pop	r8
    4e92:	7f 90       	pop	r7
    4e94:	6f 90       	pop	r6
    4e96:	5f 90       	pop	r5
    4e98:	4f 90       	pop	r4
    4e9a:	3f 90       	pop	r3
    4e9c:	2f 90       	pop	r2
    4e9e:	08 95       	ret

00004ea0 <serial_sendByte>:
    4ea0:	cf 93       	push	r28
    4ea2:	df 93       	push	r29
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	89 2b       	or	r24, r25
    4ea8:	01 f1       	breq	.+64     	; 0x4eea <serial_sendByte+0x4a>
    4eaa:	12 96       	adiw	r26, 0x02	; 2
    4eac:	ed 91       	ld	r30, X+
    4eae:	fc 91       	ld	r31, X
    4eb0:	13 97       	sbiw	r26, 0x03	; 3
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	82 81       	ldd	r24, Z+2	; 0x02
    4eb6:	25 81       	ldd	r18, Z+5	; 0x05
    4eb8:	98 1b       	sub	r25, r24
    4eba:	92 23       	and	r25, r18
    4ebc:	84 81       	ldd	r24, Z+4	; 0x04
    4ebe:	98 17       	cp	r25, r24
    4ec0:	b1 f0       	breq	.+44     	; 0x4eee <serial_sendByte+0x4e>
    4ec2:	83 81       	ldd	r24, Z+3	; 0x03
    4ec4:	26 95       	lsr	r18
    4ec6:	28 23       	and	r18, r24
    4ec8:	c0 81       	ld	r28, Z
    4eca:	d1 81       	ldd	r29, Z+1	; 0x01
    4ecc:	c2 0f       	add	r28, r18
    4ece:	d1 1d       	adc	r29, r1
    4ed0:	68 83       	st	Y, r22
    4ed2:	8f 5f       	subi	r24, 0xFF	; 255
    4ed4:	95 81       	ldd	r25, Z+5	; 0x05
    4ed6:	89 23       	and	r24, r25
    4ed8:	83 83       	std	Z+3, r24	; 0x03
    4eda:	ed 91       	ld	r30, X+
    4edc:	fc 91       	ld	r31, X
    4ede:	35 97       	sbiw	r30, 0x05	; 5
    4ee0:	80 81       	ld	r24, Z
    4ee2:	80 62       	ori	r24, 0x20	; 32
    4ee4:	80 83       	st	Z, r24
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	03 c0       	rjmp	.+6      	; 0x4ef0 <serial_sendByte+0x50>
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	01 c0       	rjmp	.+2      	; 0x4ef0 <serial_sendByte+0x50>
    4eee:	82 e0       	ldi	r24, 0x02	; 2
    4ef0:	df 91       	pop	r29
    4ef2:	cf 91       	pop	r28
    4ef4:	08 95       	ret

00004ef6 <serial_sendBytes>:
    4ef6:	ef 92       	push	r14
    4ef8:	ff 92       	push	r15
    4efa:	0f 93       	push	r16
    4efc:	1f 93       	push	r17
    4efe:	cf 93       	push	r28
    4f00:	df 93       	push	r29
    4f02:	7c 01       	movw	r14, r24
    4f04:	00 97       	sbiw	r24, 0x00	; 0
    4f06:	09 f4       	brne	.+2      	; 0x4f0a <serial_sendBytes+0x14>
    4f08:	41 c0       	rjmp	.+130    	; 0x4f8c <serial_sendBytes+0x96>
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	12 96       	adiw	r26, 0x02	; 2
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	13 97       	sbiw	r26, 0x03	; 3
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	98 1b       	sub	r25, r24
    4f1a:	85 81       	ldd	r24, Z+5	; 0x05
    4f1c:	98 23       	and	r25, r24
    4f1e:	84 81       	ldd	r24, Z+4	; 0x04
    4f20:	89 1b       	sub	r24, r25
    4f22:	86 17       	cp	r24, r22
    4f24:	a8 f1       	brcs	.+106    	; 0x4f90 <serial_sendBytes+0x9a>
    4f26:	66 23       	and	r22, r22
    4f28:	41 f1       	breq	.+80     	; 0x4f7a <serial_sendBytes+0x84>
    4f2a:	84 2f       	mov	r24, r20
    4f2c:	95 2f       	mov	r25, r21
    4f2e:	dc 01       	movw	r26, r24
    4f30:	61 50       	subi	r22, 0x01	; 1
    4f32:	46 2f       	mov	r20, r22
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	4f 5f       	subi	r20, 0xFF	; 255
    4f38:	5f 4f       	sbci	r21, 0xFF	; 255
    4f3a:	48 0f       	add	r20, r24
    4f3c:	59 1f       	adc	r21, r25
    4f3e:	e7 01       	movw	r28, r14
    4f40:	ea 81       	ldd	r30, Y+2	; 0x02
    4f42:	fb 81       	ldd	r31, Y+3	; 0x03
    4f44:	93 81       	ldd	r25, Z+3	; 0x03
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	25 81       	ldd	r18, Z+5	; 0x05
    4f4a:	98 1b       	sub	r25, r24
    4f4c:	92 23       	and	r25, r18
    4f4e:	84 81       	ldd	r24, Z+4	; 0x04
    4f50:	98 17       	cp	r25, r24
    4f52:	79 f0       	breq	.+30     	; 0x4f72 <serial_sendBytes+0x7c>
    4f54:	8c 91       	ld	r24, X
    4f56:	93 81       	ldd	r25, Z+3	; 0x03
    4f58:	26 95       	lsr	r18
    4f5a:	29 23       	and	r18, r25
    4f5c:	60 81       	ld	r22, Z
    4f5e:	71 81       	ldd	r23, Z+1	; 0x01
    4f60:	8b 01       	movw	r16, r22
    4f62:	02 0f       	add	r16, r18
    4f64:	11 1d       	adc	r17, r1
    4f66:	e8 01       	movw	r28, r16
    4f68:	88 83       	st	Y, r24
    4f6a:	9f 5f       	subi	r25, 0xFF	; 255
    4f6c:	85 81       	ldd	r24, Z+5	; 0x05
    4f6e:	98 23       	and	r25, r24
    4f70:	93 83       	std	Z+3, r25	; 0x03
    4f72:	11 96       	adiw	r26, 0x01	; 1
    4f74:	a4 17       	cp	r26, r20
    4f76:	b5 07       	cpc	r27, r21
    4f78:	11 f7       	brne	.-60     	; 0x4f3e <serial_sendBytes+0x48>
    4f7a:	d7 01       	movw	r26, r14
    4f7c:	ed 91       	ld	r30, X+
    4f7e:	fc 91       	ld	r31, X
    4f80:	35 97       	sbiw	r30, 0x05	; 5
    4f82:	80 81       	ld	r24, Z
    4f84:	80 62       	ori	r24, 0x20	; 32
    4f86:	80 83       	st	Z, r24
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	03 c0       	rjmp	.+6      	; 0x4f92 <serial_sendBytes+0x9c>
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	01 c0       	rjmp	.+2      	; 0x4f92 <serial_sendBytes+0x9c>
    4f90:	82 e0       	ldi	r24, 0x02	; 2
    4f92:	df 91       	pop	r29
    4f94:	cf 91       	pop	r28
    4f96:	1f 91       	pop	r17
    4f98:	0f 91       	pop	r16
    4f9a:	ff 90       	pop	r15
    4f9c:	ef 90       	pop	r14
    4f9e:	08 95       	ret

00004fa0 <serial_getByte>:
    4fa0:	00 97       	sbiw	r24, 0x00	; 0
    4fa2:	d1 f0       	breq	.+52     	; 0x4fd8 <serial_getByte+0x38>
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	14 96       	adiw	r26, 0x04	; 4
    4fa8:	ed 91       	ld	r30, X+
    4faa:	fc 91       	ld	r31, X
    4fac:	15 97       	sbiw	r26, 0x05	; 5
    4fae:	93 81       	ldd	r25, Z+3	; 0x03
    4fb0:	82 81       	ldd	r24, Z+2	; 0x02
    4fb2:	98 17       	cp	r25, r24
    4fb4:	99 f0       	breq	.+38     	; 0x4fdc <serial_getByte+0x3c>
    4fb6:	92 81       	ldd	r25, Z+2	; 0x02
    4fb8:	85 81       	ldd	r24, Z+5	; 0x05
    4fba:	86 95       	lsr	r24
    4fbc:	89 23       	and	r24, r25
    4fbe:	a0 81       	ld	r26, Z
    4fc0:	b1 81       	ldd	r27, Z+1	; 0x01
    4fc2:	a8 0f       	add	r26, r24
    4fc4:	b1 1d       	adc	r27, r1
    4fc6:	8c 91       	ld	r24, X
    4fc8:	db 01       	movw	r26, r22
    4fca:	8c 93       	st	X, r24
    4fcc:	9f 5f       	subi	r25, 0xFF	; 255
    4fce:	85 81       	ldd	r24, Z+5	; 0x05
    4fd0:	98 23       	and	r25, r24
    4fd2:	92 83       	std	Z+2, r25	; 0x02
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	08 95       	ret
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	08 95       	ret
    4fdc:	83 e0       	ldi	r24, 0x03	; 3
    4fde:	08 95       	ret

00004fe0 <__vector_25>:
    4fe0:	1f 92       	push	r1
    4fe2:	0f 92       	push	r0
    4fe4:	0f b6       	in	r0, 0x3f	; 63
    4fe6:	0f 92       	push	r0
    4fe8:	11 24       	eor	r1, r1
    4fea:	0b b6       	in	r0, 0x3b	; 59
    4fec:	0f 92       	push	r0
    4fee:	2f 93       	push	r18
    4ff0:	3f 93       	push	r19
    4ff2:	4f 93       	push	r20
    4ff4:	5f 93       	push	r21
    4ff6:	6f 93       	push	r22
    4ff8:	7f 93       	push	r23
    4ffa:	8f 93       	push	r24
    4ffc:	9f 93       	push	r25
    4ffe:	af 93       	push	r26
    5000:	bf 93       	push	r27
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
    5006:	ef 93       	push	r30
    5008:	ff 93       	push	r31
    500a:	a0 91 fd 17 	lds	r26, 0x17FD	; 0x8017fd <_ser_handle>
    500e:	b0 91 fe 17 	lds	r27, 0x17FE	; 0x8017fe <_ser_handle+0x1>
    5012:	10 97       	sbiw	r26, 0x00	; 0
    5014:	11 f1       	breq	.+68     	; 0x505a <__vector_25+0x7a>
    5016:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    501a:	14 96       	adiw	r26, 0x04	; 4
    501c:	ed 91       	ld	r30, X+
    501e:	fc 91       	ld	r31, X
    5020:	15 97       	sbiw	r26, 0x05	; 5
    5022:	93 81       	ldd	r25, Z+3	; 0x03
    5024:	82 81       	ldd	r24, Z+2	; 0x02
    5026:	25 81       	ldd	r18, Z+5	; 0x05
    5028:	98 1b       	sub	r25, r24
    502a:	92 23       	and	r25, r18
    502c:	84 81       	ldd	r24, Z+4	; 0x04
    502e:	98 17       	cp	r25, r24
    5030:	61 f0       	breq	.+24     	; 0x504a <__vector_25+0x6a>
    5032:	83 81       	ldd	r24, Z+3	; 0x03
    5034:	26 95       	lsr	r18
    5036:	28 23       	and	r18, r24
    5038:	c0 81       	ld	r28, Z
    503a:	d1 81       	ldd	r29, Z+1	; 0x01
    503c:	c2 0f       	add	r28, r18
    503e:	d1 1d       	adc	r29, r1
    5040:	68 83       	st	Y, r22
    5042:	8f 5f       	subi	r24, 0xFF	; 255
    5044:	95 81       	ldd	r25, Z+5	; 0x05
    5046:	89 23       	and	r24, r25
    5048:	83 83       	std	Z+3, r24	; 0x03
    504a:	16 96       	adiw	r26, 0x06	; 6
    504c:	ed 91       	ld	r30, X+
    504e:	fc 91       	ld	r31, X
    5050:	17 97       	sbiw	r26, 0x07	; 7
    5052:	30 97       	sbiw	r30, 0x00	; 0
    5054:	11 f0       	breq	.+4      	; 0x505a <__vector_25+0x7a>
    5056:	cd 01       	movw	r24, r26
    5058:	19 95       	eicall
    505a:	ff 91       	pop	r31
    505c:	ef 91       	pop	r30
    505e:	df 91       	pop	r29
    5060:	cf 91       	pop	r28
    5062:	bf 91       	pop	r27
    5064:	af 91       	pop	r26
    5066:	9f 91       	pop	r25
    5068:	8f 91       	pop	r24
    506a:	7f 91       	pop	r23
    506c:	6f 91       	pop	r22
    506e:	5f 91       	pop	r21
    5070:	4f 91       	pop	r20
    5072:	3f 91       	pop	r19
    5074:	2f 91       	pop	r18
    5076:	0f 90       	pop	r0
    5078:	0b be       	out	0x3b, r0	; 59
    507a:	0f 90       	pop	r0
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	0f 90       	pop	r0
    5080:	1f 90       	pop	r1
    5082:	18 95       	reti

00005084 <__vector_26>:
    5084:	1f 92       	push	r1
    5086:	0f 92       	push	r0
    5088:	0f b6       	in	r0, 0x3f	; 63
    508a:	0f 92       	push	r0
    508c:	11 24       	eor	r1, r1
    508e:	0b b6       	in	r0, 0x3b	; 59
    5090:	0f 92       	push	r0
    5092:	2f 93       	push	r18
    5094:	8f 93       	push	r24
    5096:	9f 93       	push	r25
    5098:	af 93       	push	r26
    509a:	bf 93       	push	r27
    509c:	ef 93       	push	r30
    509e:	ff 93       	push	r31
    50a0:	e0 91 fd 17 	lds	r30, 0x17FD	; 0x8017fd <_ser_handle>
    50a4:	f0 91 fe 17 	lds	r31, 0x17FE	; 0x8017fe <_ser_handle+0x1>
    50a8:	30 97       	sbiw	r30, 0x00	; 0
    50aa:	b9 f0       	breq	.+46     	; 0x50da <__vector_26+0x56>
    50ac:	02 80       	ldd	r0, Z+2	; 0x02
    50ae:	f3 81       	ldd	r31, Z+3	; 0x03
    50b0:	e0 2d       	mov	r30, r0
    50b2:	93 81       	ldd	r25, Z+3	; 0x03
    50b4:	82 81       	ldd	r24, Z+2	; 0x02
    50b6:	98 17       	cp	r25, r24
    50b8:	b1 f0       	breq	.+44     	; 0x50e6 <__vector_26+0x62>
    50ba:	92 81       	ldd	r25, Z+2	; 0x02
    50bc:	85 81       	ldd	r24, Z+5	; 0x05
    50be:	28 2f       	mov	r18, r24
    50c0:	26 95       	lsr	r18
    50c2:	29 23       	and	r18, r25
    50c4:	a0 81       	ld	r26, Z
    50c6:	b1 81       	ldd	r27, Z+1	; 0x01
    50c8:	a2 0f       	add	r26, r18
    50ca:	b1 1d       	adc	r27, r1
    50cc:	2c 91       	ld	r18, X
    50ce:	9f 5f       	subi	r25, 0xFF	; 255
    50d0:	89 23       	and	r24, r25
    50d2:	82 83       	std	Z+2, r24	; 0x02
    50d4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    50d8:	0b c0       	rjmp	.+22     	; 0x50f0 <__vector_26+0x6c>
    50da:	e1 ec       	ldi	r30, 0xC1	; 193
    50dc:	f0 e0       	ldi	r31, 0x00	; 0
    50de:	80 81       	ld	r24, Z
    50e0:	8f 7d       	andi	r24, 0xDF	; 223
    50e2:	80 83       	st	Z, r24
    50e4:	05 c0       	rjmp	.+10     	; 0x50f0 <__vector_26+0x6c>
    50e6:	e1 ec       	ldi	r30, 0xC1	; 193
    50e8:	f0 e0       	ldi	r31, 0x00	; 0
    50ea:	80 81       	ld	r24, Z
    50ec:	8f 7d       	andi	r24, 0xDF	; 223
    50ee:	80 83       	st	Z, r24
    50f0:	ff 91       	pop	r31
    50f2:	ef 91       	pop	r30
    50f4:	bf 91       	pop	r27
    50f6:	af 91       	pop	r26
    50f8:	9f 91       	pop	r25
    50fa:	8f 91       	pop	r24
    50fc:	2f 91       	pop	r18
    50fe:	0f 90       	pop	r0
    5100:	0b be       	out	0x3b, r0	; 59
    5102:	0f 90       	pop	r0
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	0f 90       	pop	r0
    5108:	1f 90       	pop	r1
    510a:	18 95       	reti

0000510c <__vector_36>:
    510c:	1f 92       	push	r1
    510e:	0f 92       	push	r0
    5110:	0f b6       	in	r0, 0x3f	; 63
    5112:	0f 92       	push	r0
    5114:	11 24       	eor	r1, r1
    5116:	0b b6       	in	r0, 0x3b	; 59
    5118:	0f 92       	push	r0
    511a:	2f 93       	push	r18
    511c:	3f 93       	push	r19
    511e:	4f 93       	push	r20
    5120:	5f 93       	push	r21
    5122:	6f 93       	push	r22
    5124:	7f 93       	push	r23
    5126:	8f 93       	push	r24
    5128:	9f 93       	push	r25
    512a:	af 93       	push	r26
    512c:	bf 93       	push	r27
    512e:	cf 93       	push	r28
    5130:	df 93       	push	r29
    5132:	ef 93       	push	r30
    5134:	ff 93       	push	r31
    5136:	a0 91 ff 17 	lds	r26, 0x17FF	; 0x8017ff <_ser_handle+0x2>
    513a:	b0 91 00 18 	lds	r27, 0x1800	; 0x801800 <_ser_handle+0x3>
    513e:	10 97       	sbiw	r26, 0x00	; 0
    5140:	11 f1       	breq	.+68     	; 0x5186 <__vector_36+0x7a>
    5142:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5146:	14 96       	adiw	r26, 0x04	; 4
    5148:	ed 91       	ld	r30, X+
    514a:	fc 91       	ld	r31, X
    514c:	15 97       	sbiw	r26, 0x05	; 5
    514e:	93 81       	ldd	r25, Z+3	; 0x03
    5150:	82 81       	ldd	r24, Z+2	; 0x02
    5152:	25 81       	ldd	r18, Z+5	; 0x05
    5154:	98 1b       	sub	r25, r24
    5156:	92 23       	and	r25, r18
    5158:	84 81       	ldd	r24, Z+4	; 0x04
    515a:	98 17       	cp	r25, r24
    515c:	61 f0       	breq	.+24     	; 0x5176 <__vector_36+0x6a>
    515e:	83 81       	ldd	r24, Z+3	; 0x03
    5160:	26 95       	lsr	r18
    5162:	28 23       	and	r18, r24
    5164:	c0 81       	ld	r28, Z
    5166:	d1 81       	ldd	r29, Z+1	; 0x01
    5168:	c2 0f       	add	r28, r18
    516a:	d1 1d       	adc	r29, r1
    516c:	68 83       	st	Y, r22
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	95 81       	ldd	r25, Z+5	; 0x05
    5172:	89 23       	and	r24, r25
    5174:	83 83       	std	Z+3, r24	; 0x03
    5176:	16 96       	adiw	r26, 0x06	; 6
    5178:	ed 91       	ld	r30, X+
    517a:	fc 91       	ld	r31, X
    517c:	17 97       	sbiw	r26, 0x07	; 7
    517e:	30 97       	sbiw	r30, 0x00	; 0
    5180:	11 f0       	breq	.+4      	; 0x5186 <__vector_36+0x7a>
    5182:	cd 01       	movw	r24, r26
    5184:	19 95       	eicall
    5186:	ff 91       	pop	r31
    5188:	ef 91       	pop	r30
    518a:	df 91       	pop	r29
    518c:	cf 91       	pop	r28
    518e:	bf 91       	pop	r27
    5190:	af 91       	pop	r26
    5192:	9f 91       	pop	r25
    5194:	8f 91       	pop	r24
    5196:	7f 91       	pop	r23
    5198:	6f 91       	pop	r22
    519a:	5f 91       	pop	r21
    519c:	4f 91       	pop	r20
    519e:	3f 91       	pop	r19
    51a0:	2f 91       	pop	r18
    51a2:	0f 90       	pop	r0
    51a4:	0b be       	out	0x3b, r0	; 59
    51a6:	0f 90       	pop	r0
    51a8:	0f be       	out	0x3f, r0	; 63
    51aa:	0f 90       	pop	r0
    51ac:	1f 90       	pop	r1
    51ae:	18 95       	reti

000051b0 <__vector_37>:
    51b0:	1f 92       	push	r1
    51b2:	0f 92       	push	r0
    51b4:	0f b6       	in	r0, 0x3f	; 63
    51b6:	0f 92       	push	r0
    51b8:	11 24       	eor	r1, r1
    51ba:	0b b6       	in	r0, 0x3b	; 59
    51bc:	0f 92       	push	r0
    51be:	2f 93       	push	r18
    51c0:	8f 93       	push	r24
    51c2:	9f 93       	push	r25
    51c4:	af 93       	push	r26
    51c6:	bf 93       	push	r27
    51c8:	ef 93       	push	r30
    51ca:	ff 93       	push	r31
    51cc:	e0 91 ff 17 	lds	r30, 0x17FF	; 0x8017ff <_ser_handle+0x2>
    51d0:	f0 91 00 18 	lds	r31, 0x1800	; 0x801800 <_ser_handle+0x3>
    51d4:	30 97       	sbiw	r30, 0x00	; 0
    51d6:	b9 f0       	breq	.+46     	; 0x5206 <__vector_37+0x56>
    51d8:	02 80       	ldd	r0, Z+2	; 0x02
    51da:	f3 81       	ldd	r31, Z+3	; 0x03
    51dc:	e0 2d       	mov	r30, r0
    51de:	93 81       	ldd	r25, Z+3	; 0x03
    51e0:	82 81       	ldd	r24, Z+2	; 0x02
    51e2:	98 17       	cp	r25, r24
    51e4:	b1 f0       	breq	.+44     	; 0x5212 <__vector_37+0x62>
    51e6:	92 81       	ldd	r25, Z+2	; 0x02
    51e8:	85 81       	ldd	r24, Z+5	; 0x05
    51ea:	28 2f       	mov	r18, r24
    51ec:	26 95       	lsr	r18
    51ee:	29 23       	and	r18, r25
    51f0:	a0 81       	ld	r26, Z
    51f2:	b1 81       	ldd	r27, Z+1	; 0x01
    51f4:	a2 0f       	add	r26, r18
    51f6:	b1 1d       	adc	r27, r1
    51f8:	2c 91       	ld	r18, X
    51fa:	9f 5f       	subi	r25, 0xFF	; 255
    51fc:	89 23       	and	r24, r25
    51fe:	82 83       	std	Z+2, r24	; 0x02
    5200:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5204:	0b c0       	rjmp	.+22     	; 0x521c <__vector_37+0x6c>
    5206:	e9 ec       	ldi	r30, 0xC9	; 201
    5208:	f0 e0       	ldi	r31, 0x00	; 0
    520a:	80 81       	ld	r24, Z
    520c:	8f 7d       	andi	r24, 0xDF	; 223
    520e:	80 83       	st	Z, r24
    5210:	05 c0       	rjmp	.+10     	; 0x521c <__vector_37+0x6c>
    5212:	e9 ec       	ldi	r30, 0xC9	; 201
    5214:	f0 e0       	ldi	r31, 0x00	; 0
    5216:	80 81       	ld	r24, Z
    5218:	8f 7d       	andi	r24, 0xDF	; 223
    521a:	80 83       	st	Z, r24
    521c:	ff 91       	pop	r31
    521e:	ef 91       	pop	r30
    5220:	bf 91       	pop	r27
    5222:	af 91       	pop	r26
    5224:	9f 91       	pop	r25
    5226:	8f 91       	pop	r24
    5228:	2f 91       	pop	r18
    522a:	0f 90       	pop	r0
    522c:	0b be       	out	0x3b, r0	; 59
    522e:	0f 90       	pop	r0
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	0f 90       	pop	r0
    5234:	1f 90       	pop	r1
    5236:	18 95       	reti

00005238 <__vector_51>:
    5238:	1f 92       	push	r1
    523a:	0f 92       	push	r0
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	0f 92       	push	r0
    5240:	11 24       	eor	r1, r1
    5242:	0b b6       	in	r0, 0x3b	; 59
    5244:	0f 92       	push	r0
    5246:	2f 93       	push	r18
    5248:	3f 93       	push	r19
    524a:	4f 93       	push	r20
    524c:	5f 93       	push	r21
    524e:	6f 93       	push	r22
    5250:	7f 93       	push	r23
    5252:	8f 93       	push	r24
    5254:	9f 93       	push	r25
    5256:	af 93       	push	r26
    5258:	bf 93       	push	r27
    525a:	cf 93       	push	r28
    525c:	df 93       	push	r29
    525e:	ef 93       	push	r30
    5260:	ff 93       	push	r31
    5262:	a0 91 01 18 	lds	r26, 0x1801	; 0x801801 <_ser_handle+0x4>
    5266:	b0 91 02 18 	lds	r27, 0x1802	; 0x801802 <_ser_handle+0x5>
    526a:	10 97       	sbiw	r26, 0x00	; 0
    526c:	11 f1       	breq	.+68     	; 0x52b2 <__vector_51+0x7a>
    526e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5272:	14 96       	adiw	r26, 0x04	; 4
    5274:	ed 91       	ld	r30, X+
    5276:	fc 91       	ld	r31, X
    5278:	15 97       	sbiw	r26, 0x05	; 5
    527a:	93 81       	ldd	r25, Z+3	; 0x03
    527c:	82 81       	ldd	r24, Z+2	; 0x02
    527e:	25 81       	ldd	r18, Z+5	; 0x05
    5280:	98 1b       	sub	r25, r24
    5282:	92 23       	and	r25, r18
    5284:	84 81       	ldd	r24, Z+4	; 0x04
    5286:	98 17       	cp	r25, r24
    5288:	61 f0       	breq	.+24     	; 0x52a2 <__vector_51+0x6a>
    528a:	83 81       	ldd	r24, Z+3	; 0x03
    528c:	26 95       	lsr	r18
    528e:	28 23       	and	r18, r24
    5290:	c0 81       	ld	r28, Z
    5292:	d1 81       	ldd	r29, Z+1	; 0x01
    5294:	c2 0f       	add	r28, r18
    5296:	d1 1d       	adc	r29, r1
    5298:	68 83       	st	Y, r22
    529a:	8f 5f       	subi	r24, 0xFF	; 255
    529c:	95 81       	ldd	r25, Z+5	; 0x05
    529e:	89 23       	and	r24, r25
    52a0:	83 83       	std	Z+3, r24	; 0x03
    52a2:	16 96       	adiw	r26, 0x06	; 6
    52a4:	ed 91       	ld	r30, X+
    52a6:	fc 91       	ld	r31, X
    52a8:	17 97       	sbiw	r26, 0x07	; 7
    52aa:	30 97       	sbiw	r30, 0x00	; 0
    52ac:	11 f0       	breq	.+4      	; 0x52b2 <__vector_51+0x7a>
    52ae:	cd 01       	movw	r24, r26
    52b0:	19 95       	eicall
    52b2:	ff 91       	pop	r31
    52b4:	ef 91       	pop	r30
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	bf 91       	pop	r27
    52bc:	af 91       	pop	r26
    52be:	9f 91       	pop	r25
    52c0:	8f 91       	pop	r24
    52c2:	7f 91       	pop	r23
    52c4:	6f 91       	pop	r22
    52c6:	5f 91       	pop	r21
    52c8:	4f 91       	pop	r20
    52ca:	3f 91       	pop	r19
    52cc:	2f 91       	pop	r18
    52ce:	0f 90       	pop	r0
    52d0:	0b be       	out	0x3b, r0	; 59
    52d2:	0f 90       	pop	r0
    52d4:	0f be       	out	0x3f, r0	; 63
    52d6:	0f 90       	pop	r0
    52d8:	1f 90       	pop	r1
    52da:	18 95       	reti

000052dc <__vector_52>:
    52dc:	1f 92       	push	r1
    52de:	0f 92       	push	r0
    52e0:	0f b6       	in	r0, 0x3f	; 63
    52e2:	0f 92       	push	r0
    52e4:	11 24       	eor	r1, r1
    52e6:	0b b6       	in	r0, 0x3b	; 59
    52e8:	0f 92       	push	r0
    52ea:	2f 93       	push	r18
    52ec:	8f 93       	push	r24
    52ee:	9f 93       	push	r25
    52f0:	af 93       	push	r26
    52f2:	bf 93       	push	r27
    52f4:	ef 93       	push	r30
    52f6:	ff 93       	push	r31
    52f8:	e0 91 01 18 	lds	r30, 0x1801	; 0x801801 <_ser_handle+0x4>
    52fc:	f0 91 02 18 	lds	r31, 0x1802	; 0x801802 <_ser_handle+0x5>
    5300:	30 97       	sbiw	r30, 0x00	; 0
    5302:	b9 f0       	breq	.+46     	; 0x5332 <__vector_52+0x56>
    5304:	02 80       	ldd	r0, Z+2	; 0x02
    5306:	f3 81       	ldd	r31, Z+3	; 0x03
    5308:	e0 2d       	mov	r30, r0
    530a:	93 81       	ldd	r25, Z+3	; 0x03
    530c:	82 81       	ldd	r24, Z+2	; 0x02
    530e:	98 17       	cp	r25, r24
    5310:	b1 f0       	breq	.+44     	; 0x533e <__vector_52+0x62>
    5312:	92 81       	ldd	r25, Z+2	; 0x02
    5314:	85 81       	ldd	r24, Z+5	; 0x05
    5316:	28 2f       	mov	r18, r24
    5318:	26 95       	lsr	r18
    531a:	29 23       	and	r18, r25
    531c:	a0 81       	ld	r26, Z
    531e:	b1 81       	ldd	r27, Z+1	; 0x01
    5320:	a2 0f       	add	r26, r18
    5322:	b1 1d       	adc	r27, r1
    5324:	2c 91       	ld	r18, X
    5326:	9f 5f       	subi	r25, 0xFF	; 255
    5328:	89 23       	and	r24, r25
    532a:	82 83       	std	Z+2, r24	; 0x02
    532c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5330:	0b c0       	rjmp	.+22     	; 0x5348 <__vector_52+0x6c>
    5332:	e1 ed       	ldi	r30, 0xD1	; 209
    5334:	f0 e0       	ldi	r31, 0x00	; 0
    5336:	80 81       	ld	r24, Z
    5338:	8f 7d       	andi	r24, 0xDF	; 223
    533a:	80 83       	st	Z, r24
    533c:	05 c0       	rjmp	.+10     	; 0x5348 <__vector_52+0x6c>
    533e:	e1 ed       	ldi	r30, 0xD1	; 209
    5340:	f0 e0       	ldi	r31, 0x00	; 0
    5342:	80 81       	ld	r24, Z
    5344:	8f 7d       	andi	r24, 0xDF	; 223
    5346:	80 83       	st	Z, r24
    5348:	ff 91       	pop	r31
    534a:	ef 91       	pop	r30
    534c:	bf 91       	pop	r27
    534e:	af 91       	pop	r26
    5350:	9f 91       	pop	r25
    5352:	8f 91       	pop	r24
    5354:	2f 91       	pop	r18
    5356:	0f 90       	pop	r0
    5358:	0b be       	out	0x3b, r0	; 59
    535a:	0f 90       	pop	r0
    535c:	0f be       	out	0x3f, r0	; 63
    535e:	0f 90       	pop	r0
    5360:	1f 90       	pop	r1
    5362:	18 95       	reti

00005364 <__vector_54>:
    5364:	1f 92       	push	r1
    5366:	0f 92       	push	r0
    5368:	0f b6       	in	r0, 0x3f	; 63
    536a:	0f 92       	push	r0
    536c:	11 24       	eor	r1, r1
    536e:	0b b6       	in	r0, 0x3b	; 59
    5370:	0f 92       	push	r0
    5372:	2f 93       	push	r18
    5374:	3f 93       	push	r19
    5376:	4f 93       	push	r20
    5378:	5f 93       	push	r21
    537a:	6f 93       	push	r22
    537c:	7f 93       	push	r23
    537e:	8f 93       	push	r24
    5380:	9f 93       	push	r25
    5382:	af 93       	push	r26
    5384:	bf 93       	push	r27
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29
    538a:	ef 93       	push	r30
    538c:	ff 93       	push	r31
    538e:	a0 91 03 18 	lds	r26, 0x1803	; 0x801803 <_ser_handle+0x6>
    5392:	b0 91 04 18 	lds	r27, 0x1804	; 0x801804 <_ser_handle+0x7>
    5396:	10 97       	sbiw	r26, 0x00	; 0
    5398:	11 f1       	breq	.+68     	; 0x53de <__vector_54+0x7a>
    539a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    539e:	14 96       	adiw	r26, 0x04	; 4
    53a0:	ed 91       	ld	r30, X+
    53a2:	fc 91       	ld	r31, X
    53a4:	15 97       	sbiw	r26, 0x05	; 5
    53a6:	93 81       	ldd	r25, Z+3	; 0x03
    53a8:	82 81       	ldd	r24, Z+2	; 0x02
    53aa:	25 81       	ldd	r18, Z+5	; 0x05
    53ac:	98 1b       	sub	r25, r24
    53ae:	92 23       	and	r25, r18
    53b0:	84 81       	ldd	r24, Z+4	; 0x04
    53b2:	98 17       	cp	r25, r24
    53b4:	61 f0       	breq	.+24     	; 0x53ce <__vector_54+0x6a>
    53b6:	83 81       	ldd	r24, Z+3	; 0x03
    53b8:	26 95       	lsr	r18
    53ba:	28 23       	and	r18, r24
    53bc:	c0 81       	ld	r28, Z
    53be:	d1 81       	ldd	r29, Z+1	; 0x01
    53c0:	c2 0f       	add	r28, r18
    53c2:	d1 1d       	adc	r29, r1
    53c4:	68 83       	st	Y, r22
    53c6:	8f 5f       	subi	r24, 0xFF	; 255
    53c8:	95 81       	ldd	r25, Z+5	; 0x05
    53ca:	89 23       	and	r24, r25
    53cc:	83 83       	std	Z+3, r24	; 0x03
    53ce:	16 96       	adiw	r26, 0x06	; 6
    53d0:	ed 91       	ld	r30, X+
    53d2:	fc 91       	ld	r31, X
    53d4:	17 97       	sbiw	r26, 0x07	; 7
    53d6:	30 97       	sbiw	r30, 0x00	; 0
    53d8:	11 f0       	breq	.+4      	; 0x53de <__vector_54+0x7a>
    53da:	cd 01       	movw	r24, r26
    53dc:	19 95       	eicall
    53de:	ff 91       	pop	r31
    53e0:	ef 91       	pop	r30
    53e2:	df 91       	pop	r29
    53e4:	cf 91       	pop	r28
    53e6:	bf 91       	pop	r27
    53e8:	af 91       	pop	r26
    53ea:	9f 91       	pop	r25
    53ec:	8f 91       	pop	r24
    53ee:	7f 91       	pop	r23
    53f0:	6f 91       	pop	r22
    53f2:	5f 91       	pop	r21
    53f4:	4f 91       	pop	r20
    53f6:	3f 91       	pop	r19
    53f8:	2f 91       	pop	r18
    53fa:	0f 90       	pop	r0
    53fc:	0b be       	out	0x3b, r0	; 59
    53fe:	0f 90       	pop	r0
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	0f 90       	pop	r0
    5404:	1f 90       	pop	r1
    5406:	18 95       	reti

00005408 <__vector_55>:
    5408:	1f 92       	push	r1
    540a:	0f 92       	push	r0
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	0f 92       	push	r0
    5410:	11 24       	eor	r1, r1
    5412:	0b b6       	in	r0, 0x3b	; 59
    5414:	0f 92       	push	r0
    5416:	2f 93       	push	r18
    5418:	8f 93       	push	r24
    541a:	9f 93       	push	r25
    541c:	af 93       	push	r26
    541e:	bf 93       	push	r27
    5420:	ef 93       	push	r30
    5422:	ff 93       	push	r31
    5424:	e0 91 03 18 	lds	r30, 0x1803	; 0x801803 <_ser_handle+0x6>
    5428:	f0 91 04 18 	lds	r31, 0x1804	; 0x801804 <_ser_handle+0x7>
    542c:	30 97       	sbiw	r30, 0x00	; 0
    542e:	b9 f0       	breq	.+46     	; 0x545e <__vector_55+0x56>
    5430:	02 80       	ldd	r0, Z+2	; 0x02
    5432:	f3 81       	ldd	r31, Z+3	; 0x03
    5434:	e0 2d       	mov	r30, r0
    5436:	93 81       	ldd	r25, Z+3	; 0x03
    5438:	82 81       	ldd	r24, Z+2	; 0x02
    543a:	98 17       	cp	r25, r24
    543c:	b1 f0       	breq	.+44     	; 0x546a <__vector_55+0x62>
    543e:	92 81       	ldd	r25, Z+2	; 0x02
    5440:	85 81       	ldd	r24, Z+5	; 0x05
    5442:	28 2f       	mov	r18, r24
    5444:	26 95       	lsr	r18
    5446:	29 23       	and	r18, r25
    5448:	a0 81       	ld	r26, Z
    544a:	b1 81       	ldd	r27, Z+1	; 0x01
    544c:	a2 0f       	add	r26, r18
    544e:	b1 1d       	adc	r27, r1
    5450:	2c 91       	ld	r18, X
    5452:	9f 5f       	subi	r25, 0xFF	; 255
    5454:	89 23       	and	r24, r25
    5456:	82 83       	std	Z+2, r24	; 0x02
    5458:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    545c:	0b c0       	rjmp	.+22     	; 0x5474 <__vector_55+0x6c>
    545e:	e1 e3       	ldi	r30, 0x31	; 49
    5460:	f1 e0       	ldi	r31, 0x01	; 1
    5462:	80 81       	ld	r24, Z
    5464:	8f 7d       	andi	r24, 0xDF	; 223
    5466:	80 83       	st	Z, r24
    5468:	05 c0       	rjmp	.+10     	; 0x5474 <__vector_55+0x6c>
    546a:	e1 e3       	ldi	r30, 0x31	; 49
    546c:	f1 e0       	ldi	r31, 0x01	; 1
    546e:	80 81       	ld	r24, Z
    5470:	8f 7d       	andi	r24, 0xDF	; 223
    5472:	80 83       	st	Z, r24
    5474:	ff 91       	pop	r31
    5476:	ef 91       	pop	r30
    5478:	bf 91       	pop	r27
    547a:	af 91       	pop	r26
    547c:	9f 91       	pop	r25
    547e:	8f 91       	pop	r24
    5480:	2f 91       	pop	r18
    5482:	0f 90       	pop	r0
    5484:	0b be       	out	0x3b, r0	; 59
    5486:	0f 90       	pop	r0
    5488:	0f be       	out	0x3f, r0	; 63
    548a:	0f 90       	pop	r0
    548c:	1f 90       	pop	r1
    548e:	18 95       	reti

00005490 <usart_getchar>:
    5490:	cf 93       	push	r28
    5492:	df 93       	push	r29
    5494:	1f 92       	push	r1
    5496:	cd b7       	in	r28, 0x3d	; 61
    5498:	de b7       	in	r29, 0x3e	; 62
    549a:	be 01       	movw	r22, r28
    549c:	6f 5f       	subi	r22, 0xFF	; 255
    549e:	7f 4f       	sbci	r23, 0xFF	; 255
    54a0:	80 91 05 18 	lds	r24, 0x1805	; 0x801805 <_com_serial_instance>
    54a4:	90 91 06 18 	lds	r25, 0x1806	; 0x801806 <_com_serial_instance+0x1>
    54a8:	7b dd       	rcall	.-1290   	; 0x4fa0 <serial_getByte>
    54aa:	81 11       	cpse	r24, r1
    54ac:	f6 cf       	rjmp	.-20     	; 0x549a <usart_getchar+0xa>
    54ae:	89 81       	ldd	r24, Y+1	; 0x01
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	0f 90       	pop	r0
    54b4:	df 91       	pop	r29
    54b6:	cf 91       	pop	r28
    54b8:	08 95       	ret

000054ba <usart_putchar>:
    54ba:	68 2f       	mov	r22, r24
    54bc:	80 91 05 18 	lds	r24, 0x1805	; 0x801805 <_com_serial_instance>
    54c0:	90 91 06 18 	lds	r25, 0x1806	; 0x801806 <_com_serial_instance+0x1>
    54c4:	ed dc       	rcall	.-1574   	; 0x4ea0 <serial_sendByte>
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	08 95       	ret

000054cc <stdio_initialise>:
    54cc:	8f 92       	push	r8
    54ce:	9f 92       	push	r9
    54d0:	af 92       	push	r10
    54d2:	cf 92       	push	r12
    54d4:	ef 92       	push	r14
    54d6:	0f 93       	push	r16
    54d8:	81 2c       	mov	r8, r1
    54da:	91 2c       	mov	r9, r1
    54dc:	68 94       	set
    54de:	aa 24       	eor	r10, r10
    54e0:	a7 f8       	bld	r10, 7
    54e2:	68 94       	set
    54e4:	cc 24       	eor	r12, r12
    54e6:	c7 f8       	bld	r12, 7
    54e8:	e1 2c       	mov	r14, r1
    54ea:	00 e0       	ldi	r16, 0x00	; 0
    54ec:	23 e0       	ldi	r18, 0x03	; 3
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	51 ee       	ldi	r21, 0xE1	; 225
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	32 dc       	rcall	.-1948   	; 0x4d5c <serial_create>
    54f8:	90 93 06 18 	sts	0x1806, r25	; 0x801806 <_com_serial_instance+0x1>
    54fc:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <_com_serial_instance>
    5500:	e1 e7       	ldi	r30, 0x71	; 113
    5502:	f8 e1       	ldi	r31, 0x18	; 24
    5504:	83 e1       	ldi	r24, 0x13	; 19
    5506:	92 e0       	ldi	r25, 0x02	; 2
    5508:	91 83       	std	Z+1, r25	; 0x01
    550a:	80 83       	st	Z, r24
    550c:	93 83       	std	Z+3, r25	; 0x03
    550e:	82 83       	std	Z+2, r24	; 0x02
    5510:	0f 91       	pop	r16
    5512:	ef 90       	pop	r14
    5514:	cf 90       	pop	r12
    5516:	af 90       	pop	r10
    5518:	9f 90       	pop	r9
    551a:	8f 90       	pop	r8
    551c:	08 95       	ret

0000551e <_turn_off>:
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	fc 01       	movw	r30, r24
    5522:	ee 0f       	add	r30, r30
    5524:	ff 1f       	adc	r31, r31
    5526:	e8 0f       	add	r30, r24
    5528:	f9 1f       	adc	r31, r25
    552a:	ee 0f       	add	r30, r30
    552c:	ff 1f       	adc	r31, r31
    552e:	e9 5f       	subi	r30, 0xF9	; 249
    5530:	f7 4e       	sbci	r31, 0xE7	; 231
    5532:	23 81       	ldd	r18, Z+3	; 0x03
    5534:	21 11       	cpse	r18, r1
    5536:	1f c0       	rjmp	.+62     	; 0x5576 <_turn_off+0x58>
    5538:	9c 01       	movw	r18, r24
    553a:	22 0f       	add	r18, r18
    553c:	33 1f       	adc	r19, r19
    553e:	f9 01       	movw	r30, r18
    5540:	e8 0f       	add	r30, r24
    5542:	f9 1f       	adc	r31, r25
    5544:	ee 0f       	add	r30, r30
    5546:	ff 1f       	adc	r31, r31
    5548:	e9 5f       	subi	r30, 0xF9	; 249
    554a:	f7 4e       	sbci	r31, 0xE7	; 231
    554c:	a0 81       	ld	r26, Z
    554e:	b1 81       	ldd	r27, Z+1	; 0x01
    5550:	4c 91       	ld	r20, X
    5552:	f9 01       	movw	r30, r18
    5554:	e8 0f       	add	r30, r24
    5556:	f9 1f       	adc	r31, r25
    5558:	ee 0f       	add	r30, r30
    555a:	ff 1f       	adc	r31, r31
    555c:	e9 5f       	subi	r30, 0xF9	; 249
    555e:	f7 4e       	sbci	r31, 0xE7	; 231
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	02 80       	ldd	r0, Z+2	; 0x02
    5566:	02 c0       	rjmp	.+4      	; 0x556c <_turn_off+0x4e>
    5568:	88 0f       	add	r24, r24
    556a:	99 1f       	adc	r25, r25
    556c:	0a 94       	dec	r0
    556e:	e2 f7       	brpl	.-8      	; 0x5568 <_turn_off+0x4a>
    5570:	84 2b       	or	r24, r20
    5572:	8c 93       	st	X, r24
    5574:	08 95       	ret
    5576:	fc 01       	movw	r30, r24
    5578:	ee 0f       	add	r30, r30
    557a:	ff 1f       	adc	r31, r31
    557c:	df 01       	movw	r26, r30
    557e:	a8 0f       	add	r26, r24
    5580:	b9 1f       	adc	r27, r25
    5582:	aa 0f       	add	r26, r26
    5584:	bb 1f       	adc	r27, r27
    5586:	a9 5f       	subi	r26, 0xF9	; 249
    5588:	b7 4e       	sbci	r27, 0xE7	; 231
    558a:	0d 90       	ld	r0, X+
    558c:	bc 91       	ld	r27, X
    558e:	a0 2d       	mov	r26, r0
    5590:	2c 91       	ld	r18, X
    5592:	e8 0f       	add	r30, r24
    5594:	f9 1f       	adc	r31, r25
    5596:	ee 0f       	add	r30, r30
    5598:	ff 1f       	adc	r31, r31
    559a:	e9 5f       	subi	r30, 0xF9	; 249
    559c:	f7 4e       	sbci	r31, 0xE7	; 231
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	02 80       	ldd	r0, Z+2	; 0x02
    55a4:	02 c0       	rjmp	.+4      	; 0x55aa <_turn_off+0x8c>
    55a6:	88 0f       	add	r24, r24
    55a8:	99 1f       	adc	r25, r25
    55aa:	0a 94       	dec	r0
    55ac:	e2 f7       	brpl	.-8      	; 0x55a6 <_turn_off+0x88>
    55ae:	80 95       	com	r24
    55b0:	82 23       	and	r24, r18
    55b2:	8c 93       	st	X, r24
    55b4:	08 95       	ret

000055b6 <_turn_on>:
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	fc 01       	movw	r30, r24
    55ba:	ee 0f       	add	r30, r30
    55bc:	ff 1f       	adc	r31, r31
    55be:	e8 0f       	add	r30, r24
    55c0:	f9 1f       	adc	r31, r25
    55c2:	ee 0f       	add	r30, r30
    55c4:	ff 1f       	adc	r31, r31
    55c6:	e9 5f       	subi	r30, 0xF9	; 249
    55c8:	f7 4e       	sbci	r31, 0xE7	; 231
    55ca:	23 81       	ldd	r18, Z+3	; 0x03
    55cc:	21 11       	cpse	r18, r1
    55ce:	20 c0       	rjmp	.+64     	; 0x5610 <_turn_on+0x5a>
    55d0:	9c 01       	movw	r18, r24
    55d2:	22 0f       	add	r18, r18
    55d4:	33 1f       	adc	r19, r19
    55d6:	f9 01       	movw	r30, r18
    55d8:	e8 0f       	add	r30, r24
    55da:	f9 1f       	adc	r31, r25
    55dc:	ee 0f       	add	r30, r30
    55de:	ff 1f       	adc	r31, r31
    55e0:	e9 5f       	subi	r30, 0xF9	; 249
    55e2:	f7 4e       	sbci	r31, 0xE7	; 231
    55e4:	a0 81       	ld	r26, Z
    55e6:	b1 81       	ldd	r27, Z+1	; 0x01
    55e8:	4c 91       	ld	r20, X
    55ea:	f9 01       	movw	r30, r18
    55ec:	e8 0f       	add	r30, r24
    55ee:	f9 1f       	adc	r31, r25
    55f0:	ee 0f       	add	r30, r30
    55f2:	ff 1f       	adc	r31, r31
    55f4:	e9 5f       	subi	r30, 0xF9	; 249
    55f6:	f7 4e       	sbci	r31, 0xE7	; 231
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	02 80       	ldd	r0, Z+2	; 0x02
    55fe:	02 c0       	rjmp	.+4      	; 0x5604 <_turn_on+0x4e>
    5600:	88 0f       	add	r24, r24
    5602:	99 1f       	adc	r25, r25
    5604:	0a 94       	dec	r0
    5606:	e2 f7       	brpl	.-8      	; 0x5600 <_turn_on+0x4a>
    5608:	80 95       	com	r24
    560a:	84 23       	and	r24, r20
    560c:	8c 93       	st	X, r24
    560e:	08 95       	ret
    5610:	fc 01       	movw	r30, r24
    5612:	ee 0f       	add	r30, r30
    5614:	ff 1f       	adc	r31, r31
    5616:	df 01       	movw	r26, r30
    5618:	a8 0f       	add	r26, r24
    561a:	b9 1f       	adc	r27, r25
    561c:	aa 0f       	add	r26, r26
    561e:	bb 1f       	adc	r27, r27
    5620:	a9 5f       	subi	r26, 0xF9	; 249
    5622:	b7 4e       	sbci	r27, 0xE7	; 231
    5624:	0d 90       	ld	r0, X+
    5626:	bc 91       	ld	r27, X
    5628:	a0 2d       	mov	r26, r0
    562a:	2c 91       	ld	r18, X
    562c:	e8 0f       	add	r30, r24
    562e:	f9 1f       	adc	r31, r25
    5630:	ee 0f       	add	r30, r30
    5632:	ff 1f       	adc	r31, r31
    5634:	e9 5f       	subi	r30, 0xF9	; 249
    5636:	f7 4e       	sbci	r31, 0xE7	; 231
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	02 80       	ldd	r0, Z+2	; 0x02
    563e:	02 c0       	rjmp	.+4      	; 0x5644 <_turn_on+0x8e>
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	0a 94       	dec	r0
    5646:	e2 f7       	brpl	.-8      	; 0x5640 <_turn_on+0x8a>
    5648:	82 2b       	or	r24, r18
    564a:	8c 93       	st	X, r24
    564c:	08 95       	ret

0000564e <_hal_led_task>:
    564e:	cc 24       	eor	r12, r12
    5650:	c3 94       	inc	r12
    5652:	d1 2c       	mov	r13, r1
    5654:	68 94       	set
    5656:	bb 24       	eor	r11, r11
    5658:	b2 f8       	bld	r11, 2
    565a:	c7 e0       	ldi	r28, 0x07	; 7
    565c:	d8 e1       	ldi	r29, 0x18	; 24
    565e:	10 e0       	ldi	r17, 0x00	; 0
    5660:	8c 81       	ldd	r24, Y+4	; 0x04
    5662:	81 30       	cpi	r24, 0x01	; 1
    5664:	81 f0       	breq	.+32     	; 0x5686 <_hal_led_task+0x38>
    5666:	18 f1       	brcs	.+70     	; 0x56ae <_hal_led_task+0x60>
    5668:	82 30       	cpi	r24, 0x02	; 2
    566a:	61 f5       	brne	.+88     	; 0x56c4 <_hal_led_task+0x76>
    566c:	e8 81       	ld	r30, Y
    566e:	f9 81       	ldd	r31, Y+1	; 0x01
    5670:	20 81       	ld	r18, Z
    5672:	c6 01       	movw	r24, r12
    5674:	0a 80       	ldd	r0, Y+2	; 0x02
    5676:	02 c0       	rjmp	.+4      	; 0x567c <_hal_led_task+0x2e>
    5678:	88 0f       	add	r24, r24
    567a:	99 1f       	adc	r25, r25
    567c:	0a 94       	dec	r0
    567e:	e2 f7       	brpl	.-8      	; 0x5678 <_hal_led_task+0x2a>
    5680:	82 27       	eor	r24, r18
    5682:	80 83       	st	Z, r24
    5684:	1f c0       	rjmp	.+62     	; 0x56c4 <_hal_led_task+0x76>
    5686:	8d 81       	ldd	r24, Y+5	; 0x05
    5688:	8f 5f       	subi	r24, 0xFF	; 255
    568a:	86 30       	cpi	r24, 0x06	; 6
    568c:	10 f4       	brcc	.+4      	; 0x5692 <_hal_led_task+0x44>
    568e:	8d 83       	std	Y+5, r24	; 0x05
    5690:	19 c0       	rjmp	.+50     	; 0x56c4 <_hal_led_task+0x76>
    5692:	1d 82       	std	Y+5, r1	; 0x05
    5694:	e8 81       	ld	r30, Y
    5696:	f9 81       	ldd	r31, Y+1	; 0x01
    5698:	20 81       	ld	r18, Z
    569a:	c6 01       	movw	r24, r12
    569c:	0a 80       	ldd	r0, Y+2	; 0x02
    569e:	02 c0       	rjmp	.+4      	; 0x56a4 <_hal_led_task+0x56>
    56a0:	88 0f       	add	r24, r24
    56a2:	99 1f       	adc	r25, r25
    56a4:	0a 94       	dec	r0
    56a6:	e2 f7       	brpl	.-8      	; 0x56a0 <_hal_led_task+0x52>
    56a8:	82 27       	eor	r24, r18
    56aa:	80 83       	st	Z, r24
    56ac:	0b c0       	rjmp	.+22     	; 0x56c4 <_hal_led_task+0x76>
    56ae:	0d 81       	ldd	r16, Y+5	; 0x05
    56b0:	00 23       	and	r16, r16
    56b2:	29 f0       	breq	.+10     	; 0x56be <_hal_led_task+0x70>
    56b4:	81 2f       	mov	r24, r17
    56b6:	7f df       	rcall	.-258    	; 0x55b6 <_turn_on>
    56b8:	01 50       	subi	r16, 0x01	; 1
    56ba:	0d 83       	std	Y+5, r16	; 0x05
    56bc:	03 c0       	rjmp	.+6      	; 0x56c4 <_hal_led_task+0x76>
    56be:	bc 82       	std	Y+4, r11	; 0x04
    56c0:	81 2f       	mov	r24, r17
    56c2:	2d df       	rcall	.-422    	; 0x551e <_turn_off>
    56c4:	1f 5f       	subi	r17, 0xFF	; 255
    56c6:	26 96       	adiw	r28, 0x06	; 6
    56c8:	14 30       	cpi	r17, 0x04	; 4
    56ca:	51 f6       	brne	.-108    	; 0x5660 <_hal_led_task+0x12>
    56cc:	6c e0       	ldi	r22, 0x0C	; 12
    56ce:	70 e0       	ldi	r23, 0x00	; 0
    56d0:	80 e0       	ldi	r24, 0x00	; 0
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskDelay>
    56d8:	c0 cf       	rjmp	.-128    	; 0x565a <_hal_led_task+0xc>

000056da <status_leds_initialise>:
    56da:	ef 92       	push	r14
    56dc:	ff 92       	push	r15
    56de:	0f 93       	push	r16
    56e0:	1f 93       	push	r17
    56e2:	cf 93       	push	r28
    56e4:	df 93       	push	r29
    56e6:	08 2f       	mov	r16, r24
    56e8:	80 e4       	ldi	r24, 0x40	; 64
    56ea:	87 b9       	out	0x07, r24	; 7
    56ec:	c7 e0       	ldi	r28, 0x07	; 7
    56ee:	d8 e1       	ldi	r29, 0x18	; 24
    56f0:	0f 2e       	mov	r0, r31
    56f2:	f8 e2       	ldi	r31, 0x28	; 40
    56f4:	ef 2e       	mov	r14, r31
    56f6:	f1 2c       	mov	r15, r1
    56f8:	f0 2d       	mov	r31, r0
    56fa:	f9 82       	std	Y+1, r15	; 0x01
    56fc:	e8 82       	st	Y, r14
    56fe:	86 e0       	ldi	r24, 0x06	; 6
    5700:	8a 83       	std	Y+2, r24	; 0x02
    5702:	1b 82       	std	Y+3, r1	; 0x03
    5704:	14 e0       	ldi	r17, 0x04	; 4
    5706:	1c 83       	std	Y+4, r17	; 0x04
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	09 df       	rcall	.-494    	; 0x551e <_turn_off>
    570c:	80 e8       	ldi	r24, 0x80	; 128
    570e:	87 b9       	out	0x07, r24	; 7
    5710:	ff 82       	std	Y+7, r15	; 0x07
    5712:	ee 82       	std	Y+6, r14	; 0x06
    5714:	87 e0       	ldi	r24, 0x07	; 7
    5716:	88 87       	std	Y+8, r24	; 0x08
    5718:	19 86       	std	Y+9, r1	; 0x09
    571a:	1a 87       	std	Y+10, r17	; 0x0a
    571c:	81 e0       	ldi	r24, 0x01	; 1
    571e:	ff de       	rcall	.-514    	; 0x551e <_turn_off>
    5720:	80 e2       	ldi	r24, 0x20	; 32
    5722:	83 bb       	out	0x13, r24	; 19
    5724:	84 e3       	ldi	r24, 0x34	; 52
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	9d 87       	std	Y+13, r25	; 0x0d
    572a:	8c 87       	std	Y+12, r24	; 0x0c
    572c:	85 e0       	ldi	r24, 0x05	; 5
    572e:	8e 87       	std	Y+14, r24	; 0x0e
    5730:	1f 86       	std	Y+15, r1	; 0x0f
    5732:	18 8b       	std	Y+16, r17	; 0x10
    5734:	82 e0       	ldi	r24, 0x02	; 2
    5736:	f3 de       	rcall	.-538    	; 0x551e <_turn_off>
    5738:	80 e1       	ldi	r24, 0x10	; 16
    573a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    573e:	82 e0       	ldi	r24, 0x02	; 2
    5740:	91 e0       	ldi	r25, 0x01	; 1
    5742:	9b 8b       	std	Y+19, r25	; 0x13
    5744:	8a 8b       	std	Y+18, r24	; 0x12
    5746:	1c 8b       	std	Y+20, r17	; 0x14
    5748:	1d 8a       	std	Y+21, r1	; 0x15
    574a:	1e 8b       	std	Y+22, r17	; 0x16
    574c:	83 e0       	ldi	r24, 0x03	; 3
    574e:	e7 de       	rcall	.-562    	; 0x551e <_turn_off>
    5750:	e1 2c       	mov	r14, r1
    5752:	f1 2c       	mov	r15, r1
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	40 ec       	ldi	r20, 0xC0	; 192
    575a:	50 e0       	ldi	r21, 0x00	; 0
    575c:	6d e0       	ldi	r22, 0x0D	; 13
    575e:	78 e0       	ldi	r23, 0x08	; 8
    5760:	87 e2       	ldi	r24, 0x27	; 39
    5762:	9b e2       	ldi	r25, 0x2B	; 43
    5764:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTaskCreate>
    5768:	df 91       	pop	r29
    576a:	cf 91       	pop	r28
    576c:	1f 91       	pop	r17
    576e:	0f 91       	pop	r16
    5770:	ff 90       	pop	r15
    5772:	ef 90       	pop	r14
    5774:	08 95       	ret

00005776 <status_leds_slowBlink>:
    5776:	cf 93       	push	r28
    5778:	df 93       	push	r29
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	fc 01       	movw	r30, r24
    577e:	ee 0f       	add	r30, r30
    5780:	ff 1f       	adc	r31, r31
    5782:	df 01       	movw	r26, r30
    5784:	a8 0f       	add	r26, r24
    5786:	b9 1f       	adc	r27, r25
    5788:	aa 0f       	add	r26, r26
    578a:	bb 1f       	adc	r27, r27
    578c:	a9 5f       	subi	r26, 0xF9	; 249
    578e:	b7 4e       	sbci	r27, 0xE7	; 231
    5790:	cd 91       	ld	r28, X+
    5792:	dc 91       	ld	r29, X
    5794:	11 97       	sbiw	r26, 0x01	; 1
    5796:	48 81       	ld	r20, Y
    5798:	21 e0       	ldi	r18, 0x01	; 1
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	12 96       	adiw	r26, 0x02	; 2
    579e:	0c 90       	ld	r0, X
    57a0:	12 97       	sbiw	r26, 0x02	; 2
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <status_leds_slowBlink+0x32>
    57a4:	22 0f       	add	r18, r18
    57a6:	33 1f       	adc	r19, r19
    57a8:	0a 94       	dec	r0
    57aa:	e2 f7       	brpl	.-8      	; 0x57a4 <status_leds_slowBlink+0x2e>
    57ac:	24 27       	eor	r18, r20
    57ae:	28 83       	st	Y, r18
    57b0:	fd 01       	movw	r30, r26
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	84 83       	std	Z+4, r24	; 0x04
    57b6:	df 91       	pop	r29
    57b8:	cf 91       	pop	r28
    57ba:	08 95       	ret

000057bc <status_leds_fastBlink>:
    57bc:	cf 93       	push	r28
    57be:	df 93       	push	r29
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	fc 01       	movw	r30, r24
    57c4:	ee 0f       	add	r30, r30
    57c6:	ff 1f       	adc	r31, r31
    57c8:	df 01       	movw	r26, r30
    57ca:	a8 0f       	add	r26, r24
    57cc:	b9 1f       	adc	r27, r25
    57ce:	aa 0f       	add	r26, r26
    57d0:	bb 1f       	adc	r27, r27
    57d2:	a9 5f       	subi	r26, 0xF9	; 249
    57d4:	b7 4e       	sbci	r27, 0xE7	; 231
    57d6:	cd 91       	ld	r28, X+
    57d8:	dc 91       	ld	r29, X
    57da:	11 97       	sbiw	r26, 0x01	; 1
    57dc:	48 81       	ld	r20, Y
    57de:	21 e0       	ldi	r18, 0x01	; 1
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	12 96       	adiw	r26, 0x02	; 2
    57e4:	0c 90       	ld	r0, X
    57e6:	12 97       	sbiw	r26, 0x02	; 2
    57e8:	02 c0       	rjmp	.+4      	; 0x57ee <status_leds_fastBlink+0x32>
    57ea:	22 0f       	add	r18, r18
    57ec:	33 1f       	adc	r19, r19
    57ee:	0a 94       	dec	r0
    57f0:	e2 f7       	brpl	.-8      	; 0x57ea <status_leds_fastBlink+0x2e>
    57f2:	24 27       	eor	r18, r20
    57f4:	28 83       	st	Y, r18
    57f6:	fd 01       	movw	r30, r26
    57f8:	82 e0       	ldi	r24, 0x02	; 2
    57fa:	84 83       	std	Z+4, r24	; 0x04
    57fc:	df 91       	pop	r29
    57fe:	cf 91       	pop	r28
    5800:	08 95       	ret

00005802 <status_leds_ledOn>:
    5802:	28 2f       	mov	r18, r24
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	f9 01       	movw	r30, r18
    5808:	ee 0f       	add	r30, r30
    580a:	ff 1f       	adc	r31, r31
    580c:	e2 0f       	add	r30, r18
    580e:	f3 1f       	adc	r31, r19
    5810:	ee 0f       	add	r30, r30
    5812:	ff 1f       	adc	r31, r31
    5814:	e9 5f       	subi	r30, 0xF9	; 249
    5816:	f7 4e       	sbci	r31, 0xE7	; 231
    5818:	93 e0       	ldi	r25, 0x03	; 3
    581a:	94 83       	std	Z+4, r25	; 0x04
    581c:	cc ce       	rjmp	.-616    	; 0x55b6 <_turn_on>
    581e:	08 95       	ret

00005820 <status_leds_ledOff>:
    5820:	28 2f       	mov	r18, r24
    5822:	30 e0       	ldi	r19, 0x00	; 0
    5824:	f9 01       	movw	r30, r18
    5826:	ee 0f       	add	r30, r30
    5828:	ff 1f       	adc	r31, r31
    582a:	e2 0f       	add	r30, r18
    582c:	f3 1f       	adc	r31, r19
    582e:	ee 0f       	add	r30, r30
    5830:	ff 1f       	adc	r31, r31
    5832:	e9 5f       	subi	r30, 0xF9	; 249
    5834:	f7 4e       	sbci	r31, 0xE7	; 231
    5836:	94 e0       	ldi	r25, 0x04	; 4
    5838:	94 83       	std	Z+4, r25	; 0x04
    583a:	71 ce       	rjmp	.-798    	; 0x551e <_turn_off>
    583c:	08 95       	ret

0000583e <status_leds_longPuls>:
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	fc 01       	movw	r30, r24
    5842:	ee 0f       	add	r30, r30
    5844:	ff 1f       	adc	r31, r31
    5846:	df 01       	movw	r26, r30
    5848:	a8 0f       	add	r26, r24
    584a:	b9 1f       	adc	r27, r25
    584c:	aa 0f       	add	r26, r26
    584e:	bb 1f       	adc	r27, r27
    5850:	a9 5f       	subi	r26, 0xF9	; 249
    5852:	b7 4e       	sbci	r27, 0xE7	; 231
    5854:	26 e0       	ldi	r18, 0x06	; 6
    5856:	15 96       	adiw	r26, 0x05	; 5
    5858:	2c 93       	st	X, r18
    585a:	15 97       	sbiw	r26, 0x05	; 5
    585c:	fd 01       	movw	r30, r26
    585e:	14 82       	std	Z+4, r1	; 0x04
    5860:	08 95       	ret

00005862 <status_leds_shortPuls>:
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	fc 01       	movw	r30, r24
    5866:	ee 0f       	add	r30, r30
    5868:	ff 1f       	adc	r31, r31
    586a:	df 01       	movw	r26, r30
    586c:	a8 0f       	add	r26, r24
    586e:	b9 1f       	adc	r27, r25
    5870:	aa 0f       	add	r26, r26
    5872:	bb 1f       	adc	r27, r27
    5874:	a9 5f       	subi	r26, 0xF9	; 249
    5876:	b7 4e       	sbci	r27, 0xE7	; 231
    5878:	15 96       	adiw	r26, 0x05	; 5
    587a:	1c 92       	st	X, r1
    587c:	15 97       	sbiw	r26, 0x05	; 5
    587e:	fd 01       	movw	r30, r26
    5880:	14 82       	std	Z+4, r1	; 0x04
    5882:	08 95       	ret

00005884 <_initTwiInterface>:
    5884:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <_twiIsInitiated>
    5888:	81 11       	cpse	r24, r1
    588a:	0c c0       	rjmp	.+24     	; 0x58a4 <_initTwiInterface+0x20>
    588c:	8c e0       	ldi	r24, 0x0C	; 12
    588e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5892:	8f ef       	ldi	r24, 0xFF	; 255
    5894:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5898:	84 e0       	ldi	r24, 0x04	; 4
    589a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <_twiIsInitiated>
    58a4:	08 95       	ret

000058a6 <twiCreate>:
    58a6:	af 92       	push	r10
    58a8:	bf 92       	push	r11
    58aa:	cf 92       	push	r12
    58ac:	df 92       	push	r13
    58ae:	ef 92       	push	r14
    58b0:	ff 92       	push	r15
    58b2:	0f 93       	push	r16
    58b4:	1f 93       	push	r17
    58b6:	cf 93       	push	r28
    58b8:	df 93       	push	r29
    58ba:	a8 2e       	mov	r10, r24
    58bc:	b6 2e       	mov	r11, r22
    58be:	69 01       	movw	r12, r18
    58c0:	7a 01       	movw	r14, r20
    58c2:	84 e0       	ldi	r24, 0x04	; 4
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	5f d3       	rcall	.+1726   	; 0x5f86 <malloc>
    58c8:	ec 01       	movw	r28, r24
    58ca:	89 2b       	or	r24, r25
    58cc:	61 f1       	breq	.+88     	; 0x5926 <twiCreate+0x80>
    58ce:	a8 82       	st	Y, r10
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	b8 12       	cpse	r11, r24
    58d4:	12 c0       	rjmp	.+36     	; 0x58fa <twiCreate+0x54>
    58d6:	c7 01       	movw	r24, r14
    58d8:	b6 01       	movw	r22, r12
    58da:	20 ea       	ldi	r18, 0xA0	; 160
    58dc:	36 e8       	ldi	r19, 0x86	; 134
    58de:	41 e0       	ldi	r20, 0x01	; 1
    58e0:	50 e0       	ldi	r21, 0x00	; 0
    58e2:	27 d3       	rcall	.+1614   	; 0x5f32 <__udivmodsi4>
    58e4:	da 01       	movw	r26, r20
    58e6:	c9 01       	movw	r24, r18
    58e8:	40 97       	sbiw	r24, 0x10	; 16
    58ea:	a1 09       	sbc	r26, r1
    58ec:	b1 09       	sbc	r27, r1
    58ee:	b6 95       	lsr	r27
    58f0:	a7 95       	ror	r26
    58f2:	97 95       	ror	r25
    58f4:	87 95       	ror	r24
    58f6:	89 83       	std	Y+1, r24	; 0x01
    58f8:	11 c0       	rjmp	.+34     	; 0x591c <twiCreate+0x76>
    58fa:	c7 01       	movw	r24, r14
    58fc:	b6 01       	movw	r22, r12
    58fe:	20 e8       	ldi	r18, 0x80	; 128
    5900:	3a e1       	ldi	r19, 0x1A	; 26
    5902:	46 e0       	ldi	r20, 0x06	; 6
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	15 d3       	rcall	.+1578   	; 0x5f32 <__udivmodsi4>
    5908:	da 01       	movw	r26, r20
    590a:	c9 01       	movw	r24, r18
    590c:	40 97       	sbiw	r24, 0x10	; 16
    590e:	a1 09       	sbc	r26, r1
    5910:	b1 09       	sbc	r27, r1
    5912:	b6 95       	lsr	r27
    5914:	a7 95       	ror	r26
    5916:	97 95       	ror	r25
    5918:	87 95       	ror	r24
    591a:	89 83       	std	Y+1, r24	; 0x01
    591c:	1b 83       	std	Y+3, r17	; 0x03
    591e:	0a 83       	std	Y+2, r16	; 0x02
    5920:	8c 2f       	mov	r24, r28
    5922:	9d 2f       	mov	r25, r29
    5924:	02 c0       	rjmp	.+4      	; 0x592a <twiCreate+0x84>
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	df 91       	pop	r29
    592c:	cf 91       	pop	r28
    592e:	1f 91       	pop	r17
    5930:	0f 91       	pop	r16
    5932:	ff 90       	pop	r15
    5934:	ef 90       	pop	r14
    5936:	df 90       	pop	r13
    5938:	cf 90       	pop	r12
    593a:	bf 90       	pop	r11
    593c:	af 90       	pop	r10
    593e:	08 95       	ret

00005940 <twiIsBusy>:
    5940:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5944:	81 70       	andi	r24, 0x01	; 1
    5946:	08 95       	ret

00005948 <twiTransmit>:
    5948:	ff 92       	push	r15
    594a:	0f 93       	push	r16
    594c:	1f 93       	push	r17
    594e:	cf 93       	push	r28
    5950:	df 93       	push	r29
    5952:	00 97       	sbiw	r24, 0x00	; 0
    5954:	d1 f1       	breq	.+116    	; 0x59ca <twiTransmit+0x82>
    5956:	4a 30       	cpi	r20, 0x0A	; 10
    5958:	d0 f5       	brcc	.+116    	; 0x59ce <twiTransmit+0x86>
    595a:	f4 2e       	mov	r15, r20
    595c:	8b 01       	movw	r16, r22
    595e:	ec 01       	movw	r28, r24
    5960:	ef df       	rcall	.-34     	; 0x5940 <twiIsBusy>
    5962:	81 11       	cpse	r24, r1
    5964:	36 c0       	rjmp	.+108    	; 0x59d2 <twiTransmit+0x8a>
    5966:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_twiCurrentHandler>
    596a:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_twiCurrentHandler+0x1>
    596e:	c8 17       	cp	r28, r24
    5970:	d9 07       	cpc	r29, r25
    5972:	41 f0       	breq	.+16     	; 0x5984 <twiTransmit+0x3c>
    5974:	87 df       	rcall	.-242    	; 0x5884 <_initTwiInterface>
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    597c:	d0 93 21 18 	sts	0x1821, r29	; 0x801821 <_twiCurrentHandler+0x1>
    5980:	c0 93 20 18 	sts	0x1820, r28	; 0x801820 <_twiCurrentHandler>
    5984:	81 e0       	ldi	r24, 0x01	; 1
    5986:	8f 0d       	add	r24, r15
    5988:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <_twiMessageLen>
    598c:	88 81       	ld	r24, Y
    598e:	88 0f       	add	r24, r24
    5990:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <_twiMessageBuffer>
    5994:	ff 20       	and	r15, r15
    5996:	89 f0       	breq	.+34     	; 0x59ba <twiTransmit+0x72>
    5998:	f8 01       	movw	r30, r16
    599a:	a4 e2       	ldi	r26, 0x24	; 36
    599c:	b8 e1       	ldi	r27, 0x18	; 24
    599e:	4f ef       	ldi	r20, 0xFF	; 255
    59a0:	4f 0d       	add	r20, r15
    59a2:	64 2f       	mov	r22, r20
    59a4:	70 e0       	ldi	r23, 0x00	; 0
    59a6:	cb 01       	movw	r24, r22
    59a8:	01 96       	adiw	r24, 0x01	; 1
    59aa:	b8 01       	movw	r22, r16
    59ac:	68 0f       	add	r22, r24
    59ae:	79 1f       	adc	r23, r25
    59b0:	81 91       	ld	r24, Z+
    59b2:	8d 93       	st	X+, r24
    59b4:	e6 17       	cp	r30, r22
    59b6:	f7 07       	cpc	r31, r23
    59b8:	d9 f7       	brne	.-10     	; 0x59b0 <twiTransmit+0x68>
    59ba:	88 ef       	ldi	r24, 0xF8	; 248
    59bc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59c0:	85 ea       	ldi	r24, 0xA5	; 165
    59c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59c6:	84 e0       	ldi	r24, 0x04	; 4
    59c8:	05 c0       	rjmp	.+10     	; 0x59d4 <twiTransmit+0x8c>
    59ca:	86 e0       	ldi	r24, 0x06	; 6
    59cc:	03 c0       	rjmp	.+6      	; 0x59d4 <twiTransmit+0x8c>
    59ce:	87 e0       	ldi	r24, 0x07	; 7
    59d0:	01 c0       	rjmp	.+2      	; 0x59d4 <twiTransmit+0x8c>
    59d2:	82 e0       	ldi	r24, 0x02	; 2
    59d4:	df 91       	pop	r29
    59d6:	cf 91       	pop	r28
    59d8:	1f 91       	pop	r17
    59da:	0f 91       	pop	r16
    59dc:	ff 90       	pop	r15
    59de:	08 95       	ret

000059e0 <twiReceive>:
    59e0:	1f 93       	push	r17
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	00 97       	sbiw	r24, 0x00	; 0
    59e8:	29 f1       	breq	.+74     	; 0x5a34 <twiReceive+0x54>
    59ea:	6b 30       	cpi	r22, 0x0B	; 11
    59ec:	28 f5       	brcc	.+74     	; 0x5a38 <twiReceive+0x58>
    59ee:	16 2f       	mov	r17, r22
    59f0:	ec 01       	movw	r28, r24
    59f2:	a6 df       	rcall	.-180    	; 0x5940 <twiIsBusy>
    59f4:	81 11       	cpse	r24, r1
    59f6:	22 c0       	rjmp	.+68     	; 0x5a3c <twiReceive+0x5c>
    59f8:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_twiCurrentHandler>
    59fc:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_twiCurrentHandler+0x1>
    5a00:	c8 17       	cp	r28, r24
    5a02:	d9 07       	cpc	r29, r25
    5a04:	41 f0       	breq	.+16     	; 0x5a16 <twiReceive+0x36>
    5a06:	3e df       	rcall	.-388    	; 0x5884 <_initTwiInterface>
    5a08:	89 81       	ldd	r24, Y+1	; 0x01
    5a0a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a0e:	d0 93 21 18 	sts	0x1821, r29	; 0x801821 <_twiCurrentHandler+0x1>
    5a12:	c0 93 20 18 	sts	0x1820, r28	; 0x801820 <_twiCurrentHandler>
    5a16:	10 93 22 18 	sts	0x1822, r17	; 0x801822 <_twiMessageLen>
    5a1a:	88 81       	ld	r24, Y
    5a1c:	88 0f       	add	r24, r24
    5a1e:	81 60       	ori	r24, 0x01	; 1
    5a20:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <_twiMessageBuffer>
    5a24:	88 ef       	ldi	r24, 0xF8	; 248
    5a26:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5a2a:	85 ea       	ldi	r24, 0xA5	; 165
    5a2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a30:	85 e0       	ldi	r24, 0x05	; 5
    5a32:	05 c0       	rjmp	.+10     	; 0x5a3e <twiReceive+0x5e>
    5a34:	86 e0       	ldi	r24, 0x06	; 6
    5a36:	03 c0       	rjmp	.+6      	; 0x5a3e <twiReceive+0x5e>
    5a38:	87 e0       	ldi	r24, 0x07	; 7
    5a3a:	01 c0       	rjmp	.+2      	; 0x5a3e <twiReceive+0x5e>
    5a3c:	82 e0       	ldi	r24, 0x02	; 2
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	1f 91       	pop	r17
    5a44:	08 95       	ret

00005a46 <__vector_39>:
    5a46:	1f 92       	push	r1
    5a48:	0f 92       	push	r0
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	0f 92       	push	r0
    5a4e:	11 24       	eor	r1, r1
    5a50:	0b b6       	in	r0, 0x3b	; 59
    5a52:	0f 92       	push	r0
    5a54:	2f 93       	push	r18
    5a56:	3f 93       	push	r19
    5a58:	4f 93       	push	r20
    5a5a:	5f 93       	push	r21
    5a5c:	6f 93       	push	r22
    5a5e:	7f 93       	push	r23
    5a60:	8f 93       	push	r24
    5a62:	9f 93       	push	r25
    5a64:	af 93       	push	r26
    5a66:	bf 93       	push	r27
    5a68:	ef 93       	push	r30
    5a6a:	ff 93       	push	r31
    5a6c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a70:	8e 2f       	mov	r24, r30
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	fc 01       	movw	r30, r24
    5a76:	38 97       	sbiw	r30, 0x08	; 8
    5a78:	e1 35       	cpi	r30, 0x51	; 81
    5a7a:	f1 05       	cpc	r31, r1
    5a7c:	08 f0       	brcs	.+2      	; 0x5a80 <__vector_39+0x3a>
    5a7e:	75 c0       	rjmp	.+234    	; 0x5b6a <__vector_39+0x124>
    5a80:	88 27       	eor	r24, r24
    5a82:	e4 58       	subi	r30, 0x84	; 132
    5a84:	ff 4f       	sbci	r31, 0xFF	; 255
    5a86:	8f 4f       	sbci	r24, 0xFF	; 255
    5a88:	76 c2       	rjmp	.+1260   	; 0x5f76 <__tablejump2__>
    5a8a:	10 92 1f 18 	sts	0x181F, r1	; 0x80181f <_index.1885>
    5a8e:	e0 91 1f 18 	lds	r30, 0x181F	; 0x80181f <_index.1885>
    5a92:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_twiMessageLen>
    5a96:	e8 17       	cp	r30, r24
    5a98:	70 f4       	brcc	.+28     	; 0x5ab6 <__vector_39+0x70>
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	8e 0f       	add	r24, r30
    5a9e:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <_index.1885>
    5aa2:	f0 e0       	ldi	r31, 0x00	; 0
    5aa4:	ed 5d       	subi	r30, 0xDD	; 221
    5aa6:	f7 4e       	sbci	r31, 0xE7	; 231
    5aa8:	80 81       	ld	r24, Z
    5aaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5aae:	85 e8       	ldi	r24, 0x85	; 133
    5ab0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ab4:	72 c0       	rjmp	.+228    	; 0x5b9a <__vector_39+0x154>
    5ab6:	84 e9       	ldi	r24, 0x94	; 148
    5ab8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5abc:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_twiCurrentHandler>
    5ac0:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_twiCurrentHandler+0x1>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	12 96       	adiw	r26, 0x02	; 2
    5ac8:	ed 91       	ld	r30, X+
    5aca:	fc 91       	ld	r31, X
    5acc:	13 97       	sbiw	r26, 0x03	; 3
    5ace:	30 97       	sbiw	r30, 0x00	; 0
    5ad0:	09 f4       	brne	.+2      	; 0x5ad4 <__vector_39+0x8e>
    5ad2:	63 c0       	rjmp	.+198    	; 0x5b9a <__vector_39+0x154>
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	40 e0       	ldi	r20, 0x00	; 0
    5ad8:	50 e0       	ldi	r21, 0x00	; 0
    5ada:	64 e0       	ldi	r22, 0x04	; 4
    5adc:	19 95       	eicall
    5ade:	5d c0       	rjmp	.+186    	; 0x5b9a <__vector_39+0x154>
    5ae0:	e0 91 1f 18 	lds	r30, 0x181F	; 0x80181f <_index.1885>
    5ae4:	81 e0       	ldi	r24, 0x01	; 1
    5ae6:	8e 0f       	add	r24, r30
    5ae8:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <_index.1885>
    5aec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5af0:	f0 e0       	ldi	r31, 0x00	; 0
    5af2:	ed 5d       	subi	r30, 0xDD	; 221
    5af4:	f7 4e       	sbci	r31, 0xE7	; 231
    5af6:	80 83       	st	Z, r24
    5af8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5afc:	80 34       	cpi	r24, 0x40	; 64
    5afe:	11 f4       	brne	.+4      	; 0x5b04 <__vector_39+0xbe>
    5b00:	10 92 1f 18 	sts	0x181F, r1	; 0x80181f <_index.1885>
    5b04:	20 91 1f 18 	lds	r18, 0x181F	; 0x80181f <_index.1885>
    5b08:	30 e0       	ldi	r19, 0x00	; 0
    5b0a:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_twiMessageLen>
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	01 97       	sbiw	r24, 0x01	; 1
    5b12:	28 17       	cp	r18, r24
    5b14:	39 07       	cpc	r19, r25
    5b16:	24 f4       	brge	.+8      	; 0x5b20 <__vector_39+0xda>
    5b18:	85 ec       	ldi	r24, 0xC5	; 197
    5b1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b1e:	3d c0       	rjmp	.+122    	; 0x5b9a <__vector_39+0x154>
    5b20:	85 e8       	ldi	r24, 0x85	; 133
    5b22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b26:	39 c0       	rjmp	.+114    	; 0x5b9a <__vector_39+0x154>
    5b28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b2c:	e0 91 1f 18 	lds	r30, 0x181F	; 0x80181f <_index.1885>
    5b30:	f0 e0       	ldi	r31, 0x00	; 0
    5b32:	ed 5d       	subi	r30, 0xDD	; 221
    5b34:	f7 4e       	sbci	r31, 0xE7	; 231
    5b36:	80 83       	st	Z, r24
    5b38:	84 e9       	ldi	r24, 0x94	; 148
    5b3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b3e:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_twiCurrentHandler>
    5b42:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_twiCurrentHandler+0x1>
    5b46:	dc 01       	movw	r26, r24
    5b48:	12 96       	adiw	r26, 0x02	; 2
    5b4a:	ed 91       	ld	r30, X+
    5b4c:	fc 91       	ld	r31, X
    5b4e:	13 97       	sbiw	r26, 0x03	; 3
    5b50:	30 97       	sbiw	r30, 0x00	; 0
    5b52:	19 f1       	breq	.+70     	; 0x5b9a <__vector_39+0x154>
    5b54:	20 91 22 18 	lds	r18, 0x1822	; 0x801822 <_twiMessageLen>
    5b58:	43 e2       	ldi	r20, 0x23	; 35
    5b5a:	58 e1       	ldi	r21, 0x18	; 24
    5b5c:	65 e0       	ldi	r22, 0x05	; 5
    5b5e:	19 95       	eicall
    5b60:	1c c0       	rjmp	.+56     	; 0x5b9a <__vector_39+0x154>
    5b62:	85 ea       	ldi	r24, 0xA5	; 165
    5b64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b68:	18 c0       	rjmp	.+48     	; 0x5b9a <__vector_39+0x154>
    5b6a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b6e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b72:	84 e0       	ldi	r24, 0x04	; 4
    5b74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b78:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_twiCurrentHandler>
    5b7c:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_twiCurrentHandler+0x1>
    5b80:	dc 01       	movw	r26, r24
    5b82:	12 96       	adiw	r26, 0x02	; 2
    5b84:	ed 91       	ld	r30, X+
    5b86:	fc 91       	ld	r31, X
    5b88:	13 97       	sbiw	r26, 0x03	; 3
    5b8a:	30 97       	sbiw	r30, 0x00	; 0
    5b8c:	31 f0       	breq	.+12     	; 0x5b9a <__vector_39+0x154>
    5b8e:	20 e0       	ldi	r18, 0x00	; 0
    5b90:	40 e0       	ldi	r20, 0x00	; 0
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5b98:	19 95       	eicall
    5b9a:	ff 91       	pop	r31
    5b9c:	ef 91       	pop	r30
    5b9e:	bf 91       	pop	r27
    5ba0:	af 91       	pop	r26
    5ba2:	9f 91       	pop	r25
    5ba4:	8f 91       	pop	r24
    5ba6:	7f 91       	pop	r23
    5ba8:	6f 91       	pop	r22
    5baa:	5f 91       	pop	r21
    5bac:	4f 91       	pop	r20
    5bae:	3f 91       	pop	r19
    5bb0:	2f 91       	pop	r18
    5bb2:	0f 90       	pop	r0
    5bb4:	0b be       	out	0x3b, r0	; 59
    5bb6:	0f 90       	pop	r0
    5bb8:	0f be       	out	0x3f, r0	; 63
    5bba:	0f 90       	pop	r0
    5bbc:	1f 90       	pop	r1
    5bbe:	18 95       	reti

00005bc0 <fifo_init>:
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	41 11       	cpse	r20, r1
    5bc4:	01 c0       	rjmp	.+2      	; 0x5bc8 <fifo_init+0x8>
    5bc6:	00 d3       	rcall	.+1536   	; 0x61c8 <abort>
    5bc8:	84 2f       	mov	r24, r20
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	9c 01       	movw	r18, r24
    5bce:	21 50       	subi	r18, 0x01	; 1
    5bd0:	31 09       	sbc	r19, r1
    5bd2:	82 23       	and	r24, r18
    5bd4:	93 23       	and	r25, r19
    5bd6:	89 2b       	or	r24, r25
    5bd8:	09 f0       	breq	.+2      	; 0x5bdc <fifo_init+0x1c>
    5bda:	f6 d2       	rcall	.+1516   	; 0x61c8 <abort>
    5bdc:	41 38       	cpi	r20, 0x81	; 129
    5bde:	08 f0       	brcs	.+2      	; 0x5be2 <fifo_init+0x22>
    5be0:	f3 d2       	rcall	.+1510   	; 0x61c8 <abort>
    5be2:	12 82       	std	Z+2, r1	; 0x02
    5be4:	13 82       	std	Z+3, r1	; 0x03
    5be6:	44 83       	std	Z+4, r20	; 0x04
    5be8:	44 0f       	add	r20, r20
    5bea:	41 50       	subi	r20, 0x01	; 1
    5bec:	45 83       	std	Z+5, r20	; 0x05
    5bee:	71 83       	std	Z+1, r23	; 0x01
    5bf0:	60 83       	st	Z, r22
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	08 95       	ret

00005bf8 <__subsf3>:
    5bf8:	50 58       	subi	r21, 0x80	; 128

00005bfa <__addsf3>:
    5bfa:	bb 27       	eor	r27, r27
    5bfc:	aa 27       	eor	r26, r26
    5bfe:	0e d0       	rcall	.+28     	; 0x5c1c <__addsf3x>
    5c00:	21 c1       	rjmp	.+578    	; 0x5e44 <__fp_round>
    5c02:	12 d1       	rcall	.+548    	; 0x5e28 <__fp_pscA>
    5c04:	30 f0       	brcs	.+12     	; 0x5c12 <__addsf3+0x18>
    5c06:	17 d1       	rcall	.+558    	; 0x5e36 <__fp_pscB>
    5c08:	20 f0       	brcs	.+8      	; 0x5c12 <__addsf3+0x18>
    5c0a:	31 f4       	brne	.+12     	; 0x5c18 <__addsf3+0x1e>
    5c0c:	9f 3f       	cpi	r25, 0xFF	; 255
    5c0e:	11 f4       	brne	.+4      	; 0x5c14 <__addsf3+0x1a>
    5c10:	1e f4       	brtc	.+6      	; 0x5c18 <__addsf3+0x1e>
    5c12:	07 c1       	rjmp	.+526    	; 0x5e22 <__fp_nan>
    5c14:	0e f4       	brtc	.+2      	; 0x5c18 <__addsf3+0x1e>
    5c16:	e0 95       	com	r30
    5c18:	e7 fb       	bst	r30, 7
    5c1a:	fd c0       	rjmp	.+506    	; 0x5e16 <__fp_inf>

00005c1c <__addsf3x>:
    5c1c:	e9 2f       	mov	r30, r25
    5c1e:	0e 94 97 20 	call	0x412e	; 0x412e <__fp_split3>
    5c22:	78 f3       	brcs	.-34     	; 0x5c02 <__addsf3+0x8>
    5c24:	ba 17       	cp	r27, r26
    5c26:	62 07       	cpc	r22, r18
    5c28:	73 07       	cpc	r23, r19
    5c2a:	84 07       	cpc	r24, r20
    5c2c:	95 07       	cpc	r25, r21
    5c2e:	20 f0       	brcs	.+8      	; 0x5c38 <__addsf3x+0x1c>
    5c30:	79 f4       	brne	.+30     	; 0x5c50 <__addsf3x+0x34>
    5c32:	a6 f5       	brtc	.+104    	; 0x5c9c <__addsf3x+0x80>
    5c34:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__fp_zero>
    5c38:	0e f4       	brtc	.+2      	; 0x5c3c <__addsf3x+0x20>
    5c3a:	e0 95       	com	r30
    5c3c:	0b 2e       	mov	r0, r27
    5c3e:	ba 2f       	mov	r27, r26
    5c40:	a0 2d       	mov	r26, r0
    5c42:	0b 01       	movw	r0, r22
    5c44:	b9 01       	movw	r22, r18
    5c46:	90 01       	movw	r18, r0
    5c48:	0c 01       	movw	r0, r24
    5c4a:	ca 01       	movw	r24, r20
    5c4c:	a0 01       	movw	r20, r0
    5c4e:	11 24       	eor	r1, r1
    5c50:	ff 27       	eor	r31, r31
    5c52:	59 1b       	sub	r21, r25
    5c54:	99 f0       	breq	.+38     	; 0x5c7c <__addsf3x+0x60>
    5c56:	59 3f       	cpi	r21, 0xF9	; 249
    5c58:	50 f4       	brcc	.+20     	; 0x5c6e <__addsf3x+0x52>
    5c5a:	50 3e       	cpi	r21, 0xE0	; 224
    5c5c:	68 f1       	brcs	.+90     	; 0x5cb8 <__addsf3x+0x9c>
    5c5e:	1a 16       	cp	r1, r26
    5c60:	f0 40       	sbci	r31, 0x00	; 0
    5c62:	a2 2f       	mov	r26, r18
    5c64:	23 2f       	mov	r18, r19
    5c66:	34 2f       	mov	r19, r20
    5c68:	44 27       	eor	r20, r20
    5c6a:	58 5f       	subi	r21, 0xF8	; 248
    5c6c:	f3 cf       	rjmp	.-26     	; 0x5c54 <__addsf3x+0x38>
    5c6e:	46 95       	lsr	r20
    5c70:	37 95       	ror	r19
    5c72:	27 95       	ror	r18
    5c74:	a7 95       	ror	r26
    5c76:	f0 40       	sbci	r31, 0x00	; 0
    5c78:	53 95       	inc	r21
    5c7a:	c9 f7       	brne	.-14     	; 0x5c6e <__addsf3x+0x52>
    5c7c:	7e f4       	brtc	.+30     	; 0x5c9c <__addsf3x+0x80>
    5c7e:	1f 16       	cp	r1, r31
    5c80:	ba 0b       	sbc	r27, r26
    5c82:	62 0b       	sbc	r22, r18
    5c84:	73 0b       	sbc	r23, r19
    5c86:	84 0b       	sbc	r24, r20
    5c88:	ba f0       	brmi	.+46     	; 0x5cb8 <__addsf3x+0x9c>
    5c8a:	91 50       	subi	r25, 0x01	; 1
    5c8c:	a1 f0       	breq	.+40     	; 0x5cb6 <__addsf3x+0x9a>
    5c8e:	ff 0f       	add	r31, r31
    5c90:	bb 1f       	adc	r27, r27
    5c92:	66 1f       	adc	r22, r22
    5c94:	77 1f       	adc	r23, r23
    5c96:	88 1f       	adc	r24, r24
    5c98:	c2 f7       	brpl	.-16     	; 0x5c8a <__addsf3x+0x6e>
    5c9a:	0e c0       	rjmp	.+28     	; 0x5cb8 <__addsf3x+0x9c>
    5c9c:	ba 0f       	add	r27, r26
    5c9e:	62 1f       	adc	r22, r18
    5ca0:	73 1f       	adc	r23, r19
    5ca2:	84 1f       	adc	r24, r20
    5ca4:	48 f4       	brcc	.+18     	; 0x5cb8 <__addsf3x+0x9c>
    5ca6:	87 95       	ror	r24
    5ca8:	77 95       	ror	r23
    5caa:	67 95       	ror	r22
    5cac:	b7 95       	ror	r27
    5cae:	f7 95       	ror	r31
    5cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    5cb2:	08 f0       	brcs	.+2      	; 0x5cb6 <__addsf3x+0x9a>
    5cb4:	b1 cf       	rjmp	.-158    	; 0x5c18 <__addsf3+0x1e>
    5cb6:	93 95       	inc	r25
    5cb8:	88 0f       	add	r24, r24
    5cba:	08 f0       	brcs	.+2      	; 0x5cbe <__addsf3x+0xa2>
    5cbc:	99 27       	eor	r25, r25
    5cbe:	ee 0f       	add	r30, r30
    5cc0:	97 95       	ror	r25
    5cc2:	87 95       	ror	r24
    5cc4:	08 95       	ret

00005cc6 <__divsf3>:
    5cc6:	0d d0       	rcall	.+26     	; 0x5ce2 <__divsf3x>
    5cc8:	bd c0       	rjmp	.+378    	; 0x5e44 <__fp_round>
    5cca:	b5 d0       	rcall	.+362    	; 0x5e36 <__fp_pscB>
    5ccc:	48 f0       	brcs	.+18     	; 0x5ce0 <__divsf3+0x1a>
    5cce:	ac d0       	rcall	.+344    	; 0x5e28 <__fp_pscA>
    5cd0:	38 f0       	brcs	.+14     	; 0x5ce0 <__divsf3+0x1a>
    5cd2:	21 f4       	brne	.+8      	; 0x5cdc <__divsf3+0x16>
    5cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    5cd6:	21 f0       	breq	.+8      	; 0x5ce0 <__divsf3+0x1a>
    5cd8:	9e c0       	rjmp	.+316    	; 0x5e16 <__fp_inf>
    5cda:	51 11       	cpse	r21, r1
    5cdc:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__fp_szero>
    5ce0:	a0 c0       	rjmp	.+320    	; 0x5e22 <__fp_nan>

00005ce2 <__divsf3x>:
    5ce2:	0e 94 97 20 	call	0x412e	; 0x412e <__fp_split3>
    5ce6:	88 f3       	brcs	.-30     	; 0x5cca <__divsf3+0x4>

00005ce8 <__divsf3_pse>:
    5ce8:	99 23       	and	r25, r25
    5cea:	b9 f3       	breq	.-18     	; 0x5cda <__divsf3+0x14>
    5cec:	55 23       	and	r21, r21
    5cee:	a1 f3       	breq	.-24     	; 0x5cd8 <__divsf3+0x12>
    5cf0:	95 1b       	sub	r25, r21
    5cf2:	55 0b       	sbc	r21, r21
    5cf4:	bb 27       	eor	r27, r27
    5cf6:	aa 27       	eor	r26, r26
    5cf8:	62 17       	cp	r22, r18
    5cfa:	73 07       	cpc	r23, r19
    5cfc:	84 07       	cpc	r24, r20
    5cfe:	38 f0       	brcs	.+14     	; 0x5d0e <__divsf3_pse+0x26>
    5d00:	9f 5f       	subi	r25, 0xFF	; 255
    5d02:	5f 4f       	sbci	r21, 0xFF	; 255
    5d04:	22 0f       	add	r18, r18
    5d06:	33 1f       	adc	r19, r19
    5d08:	44 1f       	adc	r20, r20
    5d0a:	aa 1f       	adc	r26, r26
    5d0c:	a9 f3       	breq	.-22     	; 0x5cf8 <__divsf3_pse+0x10>
    5d0e:	34 d0       	rcall	.+104    	; 0x5d78 <__divsf3_pse+0x90>
    5d10:	0e 2e       	mov	r0, r30
    5d12:	3a f0       	brmi	.+14     	; 0x5d22 <__divsf3_pse+0x3a>
    5d14:	e0 e8       	ldi	r30, 0x80	; 128
    5d16:	31 d0       	rcall	.+98     	; 0x5d7a <__divsf3_pse+0x92>
    5d18:	91 50       	subi	r25, 0x01	; 1
    5d1a:	50 40       	sbci	r21, 0x00	; 0
    5d1c:	e6 95       	lsr	r30
    5d1e:	00 1c       	adc	r0, r0
    5d20:	ca f7       	brpl	.-14     	; 0x5d14 <__divsf3_pse+0x2c>
    5d22:	2a d0       	rcall	.+84     	; 0x5d78 <__divsf3_pse+0x90>
    5d24:	fe 2f       	mov	r31, r30
    5d26:	28 d0       	rcall	.+80     	; 0x5d78 <__divsf3_pse+0x90>
    5d28:	66 0f       	add	r22, r22
    5d2a:	77 1f       	adc	r23, r23
    5d2c:	88 1f       	adc	r24, r24
    5d2e:	bb 1f       	adc	r27, r27
    5d30:	26 17       	cp	r18, r22
    5d32:	37 07       	cpc	r19, r23
    5d34:	48 07       	cpc	r20, r24
    5d36:	ab 07       	cpc	r26, r27
    5d38:	b0 e8       	ldi	r27, 0x80	; 128
    5d3a:	09 f0       	breq	.+2      	; 0x5d3e <__divsf3_pse+0x56>
    5d3c:	bb 0b       	sbc	r27, r27
    5d3e:	80 2d       	mov	r24, r0
    5d40:	bf 01       	movw	r22, r30
    5d42:	ff 27       	eor	r31, r31
    5d44:	93 58       	subi	r25, 0x83	; 131
    5d46:	5f 4f       	sbci	r21, 0xFF	; 255
    5d48:	32 f0       	brmi	.+12     	; 0x5d56 <__divsf3_pse+0x6e>
    5d4a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d4c:	51 05       	cpc	r21, r1
    5d4e:	70 f0       	brcs	.+28     	; 0x5d6c <__divsf3_pse+0x84>
    5d50:	62 c0       	rjmp	.+196    	; 0x5e16 <__fp_inf>
    5d52:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__fp_szero>
    5d56:	5f 3f       	cpi	r21, 0xFF	; 255
    5d58:	e4 f3       	brlt	.-8      	; 0x5d52 <__divsf3_pse+0x6a>
    5d5a:	98 3e       	cpi	r25, 0xE8	; 232
    5d5c:	d4 f3       	brlt	.-12     	; 0x5d52 <__divsf3_pse+0x6a>
    5d5e:	86 95       	lsr	r24
    5d60:	77 95       	ror	r23
    5d62:	67 95       	ror	r22
    5d64:	b7 95       	ror	r27
    5d66:	f7 95       	ror	r31
    5d68:	9f 5f       	subi	r25, 0xFF	; 255
    5d6a:	c9 f7       	brne	.-14     	; 0x5d5e <__divsf3_pse+0x76>
    5d6c:	88 0f       	add	r24, r24
    5d6e:	91 1d       	adc	r25, r1
    5d70:	96 95       	lsr	r25
    5d72:	87 95       	ror	r24
    5d74:	97 f9       	bld	r25, 7
    5d76:	08 95       	ret
    5d78:	e1 e0       	ldi	r30, 0x01	; 1
    5d7a:	66 0f       	add	r22, r22
    5d7c:	77 1f       	adc	r23, r23
    5d7e:	88 1f       	adc	r24, r24
    5d80:	bb 1f       	adc	r27, r27
    5d82:	62 17       	cp	r22, r18
    5d84:	73 07       	cpc	r23, r19
    5d86:	84 07       	cpc	r24, r20
    5d88:	ba 07       	cpc	r27, r26
    5d8a:	20 f0       	brcs	.+8      	; 0x5d94 <__divsf3_pse+0xac>
    5d8c:	62 1b       	sub	r22, r18
    5d8e:	73 0b       	sbc	r23, r19
    5d90:	84 0b       	sbc	r24, r20
    5d92:	ba 0b       	sbc	r27, r26
    5d94:	ee 1f       	adc	r30, r30
    5d96:	88 f7       	brcc	.-30     	; 0x5d7a <__divsf3_pse+0x92>
    5d98:	e0 95       	com	r30
    5d9a:	08 95       	ret

00005d9c <__floatunsisf>:
    5d9c:	e8 94       	clt
    5d9e:	09 c0       	rjmp	.+18     	; 0x5db2 <__floatsisf+0x12>

00005da0 <__floatsisf>:
    5da0:	97 fb       	bst	r25, 7
    5da2:	3e f4       	brtc	.+14     	; 0x5db2 <__floatsisf+0x12>
    5da4:	90 95       	com	r25
    5da6:	80 95       	com	r24
    5da8:	70 95       	com	r23
    5daa:	61 95       	neg	r22
    5dac:	7f 4f       	sbci	r23, 0xFF	; 255
    5dae:	8f 4f       	sbci	r24, 0xFF	; 255
    5db0:	9f 4f       	sbci	r25, 0xFF	; 255
    5db2:	99 23       	and	r25, r25
    5db4:	a9 f0       	breq	.+42     	; 0x5de0 <__floatsisf+0x40>
    5db6:	f9 2f       	mov	r31, r25
    5db8:	96 e9       	ldi	r25, 0x96	; 150
    5dba:	bb 27       	eor	r27, r27
    5dbc:	93 95       	inc	r25
    5dbe:	f6 95       	lsr	r31
    5dc0:	87 95       	ror	r24
    5dc2:	77 95       	ror	r23
    5dc4:	67 95       	ror	r22
    5dc6:	b7 95       	ror	r27
    5dc8:	f1 11       	cpse	r31, r1
    5dca:	f8 cf       	rjmp	.-16     	; 0x5dbc <__floatsisf+0x1c>
    5dcc:	fa f4       	brpl	.+62     	; 0x5e0c <__floatsisf+0x6c>
    5dce:	bb 0f       	add	r27, r27
    5dd0:	11 f4       	brne	.+4      	; 0x5dd6 <__floatsisf+0x36>
    5dd2:	60 ff       	sbrs	r22, 0
    5dd4:	1b c0       	rjmp	.+54     	; 0x5e0c <__floatsisf+0x6c>
    5dd6:	6f 5f       	subi	r22, 0xFF	; 255
    5dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dda:	8f 4f       	sbci	r24, 0xFF	; 255
    5ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dde:	16 c0       	rjmp	.+44     	; 0x5e0c <__floatsisf+0x6c>
    5de0:	88 23       	and	r24, r24
    5de2:	11 f0       	breq	.+4      	; 0x5de8 <__floatsisf+0x48>
    5de4:	96 e9       	ldi	r25, 0x96	; 150
    5de6:	11 c0       	rjmp	.+34     	; 0x5e0a <__floatsisf+0x6a>
    5de8:	77 23       	and	r23, r23
    5dea:	21 f0       	breq	.+8      	; 0x5df4 <__floatsisf+0x54>
    5dec:	9e e8       	ldi	r25, 0x8E	; 142
    5dee:	87 2f       	mov	r24, r23
    5df0:	76 2f       	mov	r23, r22
    5df2:	05 c0       	rjmp	.+10     	; 0x5dfe <__floatsisf+0x5e>
    5df4:	66 23       	and	r22, r22
    5df6:	71 f0       	breq	.+28     	; 0x5e14 <__floatsisf+0x74>
    5df8:	96 e8       	ldi	r25, 0x86	; 134
    5dfa:	86 2f       	mov	r24, r22
    5dfc:	70 e0       	ldi	r23, 0x00	; 0
    5dfe:	60 e0       	ldi	r22, 0x00	; 0
    5e00:	2a f0       	brmi	.+10     	; 0x5e0c <__floatsisf+0x6c>
    5e02:	9a 95       	dec	r25
    5e04:	66 0f       	add	r22, r22
    5e06:	77 1f       	adc	r23, r23
    5e08:	88 1f       	adc	r24, r24
    5e0a:	da f7       	brpl	.-10     	; 0x5e02 <__floatsisf+0x62>
    5e0c:	88 0f       	add	r24, r24
    5e0e:	96 95       	lsr	r25
    5e10:	87 95       	ror	r24
    5e12:	97 f9       	bld	r25, 7
    5e14:	08 95       	ret

00005e16 <__fp_inf>:
    5e16:	97 f9       	bld	r25, 7
    5e18:	9f 67       	ori	r25, 0x7F	; 127
    5e1a:	80 e8       	ldi	r24, 0x80	; 128
    5e1c:	70 e0       	ldi	r23, 0x00	; 0
    5e1e:	60 e0       	ldi	r22, 0x00	; 0
    5e20:	08 95       	ret

00005e22 <__fp_nan>:
    5e22:	9f ef       	ldi	r25, 0xFF	; 255
    5e24:	80 ec       	ldi	r24, 0xC0	; 192
    5e26:	08 95       	ret

00005e28 <__fp_pscA>:
    5e28:	00 24       	eor	r0, r0
    5e2a:	0a 94       	dec	r0
    5e2c:	16 16       	cp	r1, r22
    5e2e:	17 06       	cpc	r1, r23
    5e30:	18 06       	cpc	r1, r24
    5e32:	09 06       	cpc	r0, r25
    5e34:	08 95       	ret

00005e36 <__fp_pscB>:
    5e36:	00 24       	eor	r0, r0
    5e38:	0a 94       	dec	r0
    5e3a:	12 16       	cp	r1, r18
    5e3c:	13 06       	cpc	r1, r19
    5e3e:	14 06       	cpc	r1, r20
    5e40:	05 06       	cpc	r0, r21
    5e42:	08 95       	ret

00005e44 <__fp_round>:
    5e44:	09 2e       	mov	r0, r25
    5e46:	03 94       	inc	r0
    5e48:	00 0c       	add	r0, r0
    5e4a:	11 f4       	brne	.+4      	; 0x5e50 <__fp_round+0xc>
    5e4c:	88 23       	and	r24, r24
    5e4e:	52 f0       	brmi	.+20     	; 0x5e64 <__fp_round+0x20>
    5e50:	bb 0f       	add	r27, r27
    5e52:	40 f4       	brcc	.+16     	; 0x5e64 <__fp_round+0x20>
    5e54:	bf 2b       	or	r27, r31
    5e56:	11 f4       	brne	.+4      	; 0x5e5c <__fp_round+0x18>
    5e58:	60 ff       	sbrs	r22, 0
    5e5a:	04 c0       	rjmp	.+8      	; 0x5e64 <__fp_round+0x20>
    5e5c:	6f 5f       	subi	r22, 0xFF	; 255
    5e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e60:	8f 4f       	sbci	r24, 0xFF	; 255
    5e62:	9f 4f       	sbci	r25, 0xFF	; 255
    5e64:	08 95       	ret

00005e66 <__mulsf3>:
    5e66:	0c d0       	rcall	.+24     	; 0x5e80 <__mulsf3x>
    5e68:	ed cf       	rjmp	.-38     	; 0x5e44 <__fp_round>
    5e6a:	de df       	rcall	.-68     	; 0x5e28 <__fp_pscA>
    5e6c:	28 f0       	brcs	.+10     	; 0x5e78 <__mulsf3+0x12>
    5e6e:	e3 df       	rcall	.-58     	; 0x5e36 <__fp_pscB>
    5e70:	18 f0       	brcs	.+6      	; 0x5e78 <__mulsf3+0x12>
    5e72:	95 23       	and	r25, r21
    5e74:	09 f0       	breq	.+2      	; 0x5e78 <__mulsf3+0x12>
    5e76:	cf cf       	rjmp	.-98     	; 0x5e16 <__fp_inf>
    5e78:	d4 cf       	rjmp	.-88     	; 0x5e22 <__fp_nan>
    5e7a:	11 24       	eor	r1, r1
    5e7c:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__fp_szero>

00005e80 <__mulsf3x>:
    5e80:	0e 94 97 20 	call	0x412e	; 0x412e <__fp_split3>
    5e84:	90 f3       	brcs	.-28     	; 0x5e6a <__mulsf3+0x4>

00005e86 <__mulsf3_pse>:
    5e86:	95 9f       	mul	r25, r21
    5e88:	c1 f3       	breq	.-16     	; 0x5e7a <__mulsf3+0x14>
    5e8a:	95 0f       	add	r25, r21
    5e8c:	50 e0       	ldi	r21, 0x00	; 0
    5e8e:	55 1f       	adc	r21, r21
    5e90:	62 9f       	mul	r22, r18
    5e92:	f0 01       	movw	r30, r0
    5e94:	72 9f       	mul	r23, r18
    5e96:	bb 27       	eor	r27, r27
    5e98:	f0 0d       	add	r31, r0
    5e9a:	b1 1d       	adc	r27, r1
    5e9c:	63 9f       	mul	r22, r19
    5e9e:	aa 27       	eor	r26, r26
    5ea0:	f0 0d       	add	r31, r0
    5ea2:	b1 1d       	adc	r27, r1
    5ea4:	aa 1f       	adc	r26, r26
    5ea6:	64 9f       	mul	r22, r20
    5ea8:	66 27       	eor	r22, r22
    5eaa:	b0 0d       	add	r27, r0
    5eac:	a1 1d       	adc	r26, r1
    5eae:	66 1f       	adc	r22, r22
    5eb0:	82 9f       	mul	r24, r18
    5eb2:	22 27       	eor	r18, r18
    5eb4:	b0 0d       	add	r27, r0
    5eb6:	a1 1d       	adc	r26, r1
    5eb8:	62 1f       	adc	r22, r18
    5eba:	73 9f       	mul	r23, r19
    5ebc:	b0 0d       	add	r27, r0
    5ebe:	a1 1d       	adc	r26, r1
    5ec0:	62 1f       	adc	r22, r18
    5ec2:	83 9f       	mul	r24, r19
    5ec4:	a0 0d       	add	r26, r0
    5ec6:	61 1d       	adc	r22, r1
    5ec8:	22 1f       	adc	r18, r18
    5eca:	74 9f       	mul	r23, r20
    5ecc:	33 27       	eor	r19, r19
    5ece:	a0 0d       	add	r26, r0
    5ed0:	61 1d       	adc	r22, r1
    5ed2:	23 1f       	adc	r18, r19
    5ed4:	84 9f       	mul	r24, r20
    5ed6:	60 0d       	add	r22, r0
    5ed8:	21 1d       	adc	r18, r1
    5eda:	82 2f       	mov	r24, r18
    5edc:	76 2f       	mov	r23, r22
    5ede:	6a 2f       	mov	r22, r26
    5ee0:	11 24       	eor	r1, r1
    5ee2:	9f 57       	subi	r25, 0x7F	; 127
    5ee4:	50 40       	sbci	r21, 0x00	; 0
    5ee6:	92 f0       	brmi	.+36     	; 0x5f0c <__mulsf3_pse+0x86>
    5ee8:	e9 f0       	breq	.+58     	; 0x5f24 <__mulsf3_pse+0x9e>
    5eea:	88 23       	and	r24, r24
    5eec:	4a f0       	brmi	.+18     	; 0x5f00 <__mulsf3_pse+0x7a>
    5eee:	ee 0f       	add	r30, r30
    5ef0:	ff 1f       	adc	r31, r31
    5ef2:	bb 1f       	adc	r27, r27
    5ef4:	66 1f       	adc	r22, r22
    5ef6:	77 1f       	adc	r23, r23
    5ef8:	88 1f       	adc	r24, r24
    5efa:	91 50       	subi	r25, 0x01	; 1
    5efc:	50 40       	sbci	r21, 0x00	; 0
    5efe:	a9 f7       	brne	.-22     	; 0x5eea <__mulsf3_pse+0x64>
    5f00:	9e 3f       	cpi	r25, 0xFE	; 254
    5f02:	51 05       	cpc	r21, r1
    5f04:	78 f0       	brcs	.+30     	; 0x5f24 <__mulsf3_pse+0x9e>
    5f06:	87 cf       	rjmp	.-242    	; 0x5e16 <__fp_inf>
    5f08:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__fp_szero>
    5f0c:	5f 3f       	cpi	r21, 0xFF	; 255
    5f0e:	e4 f3       	brlt	.-8      	; 0x5f08 <__mulsf3_pse+0x82>
    5f10:	98 3e       	cpi	r25, 0xE8	; 232
    5f12:	d4 f3       	brlt	.-12     	; 0x5f08 <__mulsf3_pse+0x82>
    5f14:	86 95       	lsr	r24
    5f16:	77 95       	ror	r23
    5f18:	67 95       	ror	r22
    5f1a:	b7 95       	ror	r27
    5f1c:	f7 95       	ror	r31
    5f1e:	e7 95       	ror	r30
    5f20:	9f 5f       	subi	r25, 0xFF	; 255
    5f22:	c1 f7       	brne	.-16     	; 0x5f14 <__mulsf3_pse+0x8e>
    5f24:	fe 2b       	or	r31, r30
    5f26:	88 0f       	add	r24, r24
    5f28:	91 1d       	adc	r25, r1
    5f2a:	96 95       	lsr	r25
    5f2c:	87 95       	ror	r24
    5f2e:	97 f9       	bld	r25, 7
    5f30:	08 95       	ret

00005f32 <__udivmodsi4>:
    5f32:	a1 e2       	ldi	r26, 0x21	; 33
    5f34:	1a 2e       	mov	r1, r26
    5f36:	aa 1b       	sub	r26, r26
    5f38:	bb 1b       	sub	r27, r27
    5f3a:	fd 01       	movw	r30, r26
    5f3c:	0d c0       	rjmp	.+26     	; 0x5f58 <__udivmodsi4_ep>

00005f3e <__udivmodsi4_loop>:
    5f3e:	aa 1f       	adc	r26, r26
    5f40:	bb 1f       	adc	r27, r27
    5f42:	ee 1f       	adc	r30, r30
    5f44:	ff 1f       	adc	r31, r31
    5f46:	a2 17       	cp	r26, r18
    5f48:	b3 07       	cpc	r27, r19
    5f4a:	e4 07       	cpc	r30, r20
    5f4c:	f5 07       	cpc	r31, r21
    5f4e:	20 f0       	brcs	.+8      	; 0x5f58 <__udivmodsi4_ep>
    5f50:	a2 1b       	sub	r26, r18
    5f52:	b3 0b       	sbc	r27, r19
    5f54:	e4 0b       	sbc	r30, r20
    5f56:	f5 0b       	sbc	r31, r21

00005f58 <__udivmodsi4_ep>:
    5f58:	66 1f       	adc	r22, r22
    5f5a:	77 1f       	adc	r23, r23
    5f5c:	88 1f       	adc	r24, r24
    5f5e:	99 1f       	adc	r25, r25
    5f60:	1a 94       	dec	r1
    5f62:	69 f7       	brne	.-38     	; 0x5f3e <__udivmodsi4_loop>
    5f64:	60 95       	com	r22
    5f66:	70 95       	com	r23
    5f68:	80 95       	com	r24
    5f6a:	90 95       	com	r25
    5f6c:	9b 01       	movw	r18, r22
    5f6e:	ac 01       	movw	r20, r24
    5f70:	bd 01       	movw	r22, r26
    5f72:	cf 01       	movw	r24, r30
    5f74:	08 95       	ret

00005f76 <__tablejump2__>:
    5f76:	ee 0f       	add	r30, r30
    5f78:	ff 1f       	adc	r31, r31
    5f7a:	88 1f       	adc	r24, r24
    5f7c:	8b bf       	out	0x3b, r24	; 59
    5f7e:	07 90       	elpm	r0, Z+
    5f80:	f6 91       	elpm	r31, Z
    5f82:	e0 2d       	mov	r30, r0
    5f84:	19 94       	eijmp

00005f86 <malloc>:
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    5f8a:	cf 93       	push	r28
    5f8c:	df 93       	push	r29
    5f8e:	82 30       	cpi	r24, 0x02	; 2
    5f90:	91 05       	cpc	r25, r1
    5f92:	10 f4       	brcc	.+4      	; 0x5f98 <malloc+0x12>
    5f94:	82 e0       	ldi	r24, 0x02	; 2
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <__flp>
    5f9c:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <__flp+0x1>
    5fa0:	20 e0       	ldi	r18, 0x00	; 0
    5fa2:	30 e0       	ldi	r19, 0x00	; 0
    5fa4:	a0 e0       	ldi	r26, 0x00	; 0
    5fa6:	b0 e0       	ldi	r27, 0x00	; 0
    5fa8:	30 97       	sbiw	r30, 0x00	; 0
    5faa:	19 f1       	breq	.+70     	; 0x5ff2 <malloc+0x6c>
    5fac:	40 81       	ld	r20, Z
    5fae:	51 81       	ldd	r21, Z+1	; 0x01
    5fb0:	02 81       	ldd	r16, Z+2	; 0x02
    5fb2:	13 81       	ldd	r17, Z+3	; 0x03
    5fb4:	48 17       	cp	r20, r24
    5fb6:	59 07       	cpc	r21, r25
    5fb8:	c8 f0       	brcs	.+50     	; 0x5fec <malloc+0x66>
    5fba:	84 17       	cp	r24, r20
    5fbc:	95 07       	cpc	r25, r21
    5fbe:	69 f4       	brne	.+26     	; 0x5fda <malloc+0x54>
    5fc0:	10 97       	sbiw	r26, 0x00	; 0
    5fc2:	31 f0       	breq	.+12     	; 0x5fd0 <malloc+0x4a>
    5fc4:	12 96       	adiw	r26, 0x02	; 2
    5fc6:	0c 93       	st	X, r16
    5fc8:	12 97       	sbiw	r26, 0x02	; 2
    5fca:	13 96       	adiw	r26, 0x03	; 3
    5fcc:	1c 93       	st	X, r17
    5fce:	27 c0       	rjmp	.+78     	; 0x601e <malloc+0x98>
    5fd0:	00 93 6f 18 	sts	0x186F, r16	; 0x80186f <__flp>
    5fd4:	10 93 70 18 	sts	0x1870, r17	; 0x801870 <__flp+0x1>
    5fd8:	22 c0       	rjmp	.+68     	; 0x601e <malloc+0x98>
    5fda:	21 15       	cp	r18, r1
    5fdc:	31 05       	cpc	r19, r1
    5fde:	19 f0       	breq	.+6      	; 0x5fe6 <malloc+0x60>
    5fe0:	42 17       	cp	r20, r18
    5fe2:	53 07       	cpc	r21, r19
    5fe4:	18 f4       	brcc	.+6      	; 0x5fec <malloc+0x66>
    5fe6:	9a 01       	movw	r18, r20
    5fe8:	bd 01       	movw	r22, r26
    5fea:	ef 01       	movw	r28, r30
    5fec:	df 01       	movw	r26, r30
    5fee:	f8 01       	movw	r30, r16
    5ff0:	db cf       	rjmp	.-74     	; 0x5fa8 <malloc+0x22>
    5ff2:	21 15       	cp	r18, r1
    5ff4:	31 05       	cpc	r19, r1
    5ff6:	f9 f0       	breq	.+62     	; 0x6036 <malloc+0xb0>
    5ff8:	28 1b       	sub	r18, r24
    5ffa:	39 0b       	sbc	r19, r25
    5ffc:	24 30       	cpi	r18, 0x04	; 4
    5ffe:	31 05       	cpc	r19, r1
    6000:	80 f4       	brcc	.+32     	; 0x6022 <malloc+0x9c>
    6002:	8a 81       	ldd	r24, Y+2	; 0x02
    6004:	9b 81       	ldd	r25, Y+3	; 0x03
    6006:	61 15       	cp	r22, r1
    6008:	71 05       	cpc	r23, r1
    600a:	21 f0       	breq	.+8      	; 0x6014 <malloc+0x8e>
    600c:	fb 01       	movw	r30, r22
    600e:	93 83       	std	Z+3, r25	; 0x03
    6010:	82 83       	std	Z+2, r24	; 0x02
    6012:	04 c0       	rjmp	.+8      	; 0x601c <malloc+0x96>
    6014:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <__flp+0x1>
    6018:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <__flp>
    601c:	fe 01       	movw	r30, r28
    601e:	32 96       	adiw	r30, 0x02	; 2
    6020:	44 c0       	rjmp	.+136    	; 0x60aa <malloc+0x124>
    6022:	fe 01       	movw	r30, r28
    6024:	e2 0f       	add	r30, r18
    6026:	f3 1f       	adc	r31, r19
    6028:	81 93       	st	Z+, r24
    602a:	91 93       	st	Z+, r25
    602c:	22 50       	subi	r18, 0x02	; 2
    602e:	31 09       	sbc	r19, r1
    6030:	39 83       	std	Y+1, r19	; 0x01
    6032:	28 83       	st	Y, r18
    6034:	3a c0       	rjmp	.+116    	; 0x60aa <malloc+0x124>
    6036:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <__brkval>
    603a:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <__brkval+0x1>
    603e:	23 2b       	or	r18, r19
    6040:	41 f4       	brne	.+16     	; 0x6052 <malloc+0xcc>
    6042:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6046:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    604a:	30 93 6e 18 	sts	0x186E, r19	; 0x80186e <__brkval+0x1>
    604e:	20 93 6d 18 	sts	0x186D, r18	; 0x80186d <__brkval>
    6052:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6056:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    605a:	21 15       	cp	r18, r1
    605c:	31 05       	cpc	r19, r1
    605e:	41 f4       	brne	.+16     	; 0x6070 <malloc+0xea>
    6060:	2d b7       	in	r18, 0x3d	; 61
    6062:	3e b7       	in	r19, 0x3e	; 62
    6064:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6068:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    606c:	24 1b       	sub	r18, r20
    606e:	35 0b       	sbc	r19, r21
    6070:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <__brkval>
    6074:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <__brkval+0x1>
    6078:	e2 17       	cp	r30, r18
    607a:	f3 07       	cpc	r31, r19
    607c:	a0 f4       	brcc	.+40     	; 0x60a6 <malloc+0x120>
    607e:	2e 1b       	sub	r18, r30
    6080:	3f 0b       	sbc	r19, r31
    6082:	28 17       	cp	r18, r24
    6084:	39 07       	cpc	r19, r25
    6086:	78 f0       	brcs	.+30     	; 0x60a6 <malloc+0x120>
    6088:	ac 01       	movw	r20, r24
    608a:	4e 5f       	subi	r20, 0xFE	; 254
    608c:	5f 4f       	sbci	r21, 0xFF	; 255
    608e:	24 17       	cp	r18, r20
    6090:	35 07       	cpc	r19, r21
    6092:	48 f0       	brcs	.+18     	; 0x60a6 <malloc+0x120>
    6094:	4e 0f       	add	r20, r30
    6096:	5f 1f       	adc	r21, r31
    6098:	50 93 6e 18 	sts	0x186E, r21	; 0x80186e <__brkval+0x1>
    609c:	40 93 6d 18 	sts	0x186D, r20	; 0x80186d <__brkval>
    60a0:	81 93       	st	Z+, r24
    60a2:	91 93       	st	Z+, r25
    60a4:	02 c0       	rjmp	.+4      	; 0x60aa <malloc+0x124>
    60a6:	e0 e0       	ldi	r30, 0x00	; 0
    60a8:	f0 e0       	ldi	r31, 0x00	; 0
    60aa:	cf 01       	movw	r24, r30
    60ac:	df 91       	pop	r29
    60ae:	cf 91       	pop	r28
    60b0:	1f 91       	pop	r17
    60b2:	0f 91       	pop	r16
    60b4:	08 95       	ret

000060b6 <free>:
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	00 97       	sbiw	r24, 0x00	; 0
    60bc:	09 f4       	brne	.+2      	; 0x60c0 <free+0xa>
    60be:	81 c0       	rjmp	.+258    	; 0x61c2 <free+0x10c>
    60c0:	fc 01       	movw	r30, r24
    60c2:	32 97       	sbiw	r30, 0x02	; 2
    60c4:	13 82       	std	Z+3, r1	; 0x03
    60c6:	12 82       	std	Z+2, r1	; 0x02
    60c8:	a0 91 6f 18 	lds	r26, 0x186F	; 0x80186f <__flp>
    60cc:	b0 91 70 18 	lds	r27, 0x1870	; 0x801870 <__flp+0x1>
    60d0:	10 97       	sbiw	r26, 0x00	; 0
    60d2:	81 f4       	brne	.+32     	; 0x60f4 <free+0x3e>
    60d4:	20 81       	ld	r18, Z
    60d6:	31 81       	ldd	r19, Z+1	; 0x01
    60d8:	82 0f       	add	r24, r18
    60da:	93 1f       	adc	r25, r19
    60dc:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <__brkval>
    60e0:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <__brkval+0x1>
    60e4:	28 17       	cp	r18, r24
    60e6:	39 07       	cpc	r19, r25
    60e8:	51 f5       	brne	.+84     	; 0x613e <free+0x88>
    60ea:	f0 93 6e 18 	sts	0x186E, r31	; 0x80186e <__brkval+0x1>
    60ee:	e0 93 6d 18 	sts	0x186D, r30	; 0x80186d <__brkval>
    60f2:	67 c0       	rjmp	.+206    	; 0x61c2 <free+0x10c>
    60f4:	ed 01       	movw	r28, r26
    60f6:	20 e0       	ldi	r18, 0x00	; 0
    60f8:	30 e0       	ldi	r19, 0x00	; 0
    60fa:	ce 17       	cp	r28, r30
    60fc:	df 07       	cpc	r29, r31
    60fe:	40 f4       	brcc	.+16     	; 0x6110 <free+0x5a>
    6100:	4a 81       	ldd	r20, Y+2	; 0x02
    6102:	5b 81       	ldd	r21, Y+3	; 0x03
    6104:	9e 01       	movw	r18, r28
    6106:	41 15       	cp	r20, r1
    6108:	51 05       	cpc	r21, r1
    610a:	f1 f0       	breq	.+60     	; 0x6148 <free+0x92>
    610c:	ea 01       	movw	r28, r20
    610e:	f5 cf       	rjmp	.-22     	; 0x60fa <free+0x44>
    6110:	d3 83       	std	Z+3, r29	; 0x03
    6112:	c2 83       	std	Z+2, r28	; 0x02
    6114:	40 81       	ld	r20, Z
    6116:	51 81       	ldd	r21, Z+1	; 0x01
    6118:	84 0f       	add	r24, r20
    611a:	95 1f       	adc	r25, r21
    611c:	c8 17       	cp	r28, r24
    611e:	d9 07       	cpc	r29, r25
    6120:	59 f4       	brne	.+22     	; 0x6138 <free+0x82>
    6122:	88 81       	ld	r24, Y
    6124:	99 81       	ldd	r25, Y+1	; 0x01
    6126:	84 0f       	add	r24, r20
    6128:	95 1f       	adc	r25, r21
    612a:	02 96       	adiw	r24, 0x02	; 2
    612c:	91 83       	std	Z+1, r25	; 0x01
    612e:	80 83       	st	Z, r24
    6130:	8a 81       	ldd	r24, Y+2	; 0x02
    6132:	9b 81       	ldd	r25, Y+3	; 0x03
    6134:	93 83       	std	Z+3, r25	; 0x03
    6136:	82 83       	std	Z+2, r24	; 0x02
    6138:	21 15       	cp	r18, r1
    613a:	31 05       	cpc	r19, r1
    613c:	29 f4       	brne	.+10     	; 0x6148 <free+0x92>
    613e:	f0 93 70 18 	sts	0x1870, r31	; 0x801870 <__flp+0x1>
    6142:	e0 93 6f 18 	sts	0x186F, r30	; 0x80186f <__flp>
    6146:	3d c0       	rjmp	.+122    	; 0x61c2 <free+0x10c>
    6148:	e9 01       	movw	r28, r18
    614a:	fb 83       	std	Y+3, r31	; 0x03
    614c:	ea 83       	std	Y+2, r30	; 0x02
    614e:	49 91       	ld	r20, Y+
    6150:	59 91       	ld	r21, Y+
    6152:	c4 0f       	add	r28, r20
    6154:	d5 1f       	adc	r29, r21
    6156:	ec 17       	cp	r30, r28
    6158:	fd 07       	cpc	r31, r29
    615a:	61 f4       	brne	.+24     	; 0x6174 <free+0xbe>
    615c:	80 81       	ld	r24, Z
    615e:	91 81       	ldd	r25, Z+1	; 0x01
    6160:	84 0f       	add	r24, r20
    6162:	95 1f       	adc	r25, r21
    6164:	02 96       	adiw	r24, 0x02	; 2
    6166:	e9 01       	movw	r28, r18
    6168:	99 83       	std	Y+1, r25	; 0x01
    616a:	88 83       	st	Y, r24
    616c:	82 81       	ldd	r24, Z+2	; 0x02
    616e:	93 81       	ldd	r25, Z+3	; 0x03
    6170:	9b 83       	std	Y+3, r25	; 0x03
    6172:	8a 83       	std	Y+2, r24	; 0x02
    6174:	e0 e0       	ldi	r30, 0x00	; 0
    6176:	f0 e0       	ldi	r31, 0x00	; 0
    6178:	12 96       	adiw	r26, 0x02	; 2
    617a:	8d 91       	ld	r24, X+
    617c:	9c 91       	ld	r25, X
    617e:	13 97       	sbiw	r26, 0x03	; 3
    6180:	00 97       	sbiw	r24, 0x00	; 0
    6182:	19 f0       	breq	.+6      	; 0x618a <free+0xd4>
    6184:	fd 01       	movw	r30, r26
    6186:	dc 01       	movw	r26, r24
    6188:	f7 cf       	rjmp	.-18     	; 0x6178 <free+0xc2>
    618a:	8d 91       	ld	r24, X+
    618c:	9c 91       	ld	r25, X
    618e:	11 97       	sbiw	r26, 0x01	; 1
    6190:	9d 01       	movw	r18, r26
    6192:	2e 5f       	subi	r18, 0xFE	; 254
    6194:	3f 4f       	sbci	r19, 0xFF	; 255
    6196:	82 0f       	add	r24, r18
    6198:	93 1f       	adc	r25, r19
    619a:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <__brkval>
    619e:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <__brkval+0x1>
    61a2:	28 17       	cp	r18, r24
    61a4:	39 07       	cpc	r19, r25
    61a6:	69 f4       	brne	.+26     	; 0x61c2 <free+0x10c>
    61a8:	30 97       	sbiw	r30, 0x00	; 0
    61aa:	29 f4       	brne	.+10     	; 0x61b6 <free+0x100>
    61ac:	10 92 70 18 	sts	0x1870, r1	; 0x801870 <__flp+0x1>
    61b0:	10 92 6f 18 	sts	0x186F, r1	; 0x80186f <__flp>
    61b4:	02 c0       	rjmp	.+4      	; 0x61ba <free+0x104>
    61b6:	13 82       	std	Z+3, r1	; 0x03
    61b8:	12 82       	std	Z+2, r1	; 0x02
    61ba:	b0 93 6e 18 	sts	0x186E, r27	; 0x80186e <__brkval+0x1>
    61be:	a0 93 6d 18 	sts	0x186D, r26	; 0x80186d <__brkval>
    61c2:	df 91       	pop	r29
    61c4:	cf 91       	pop	r28
    61c6:	08 95       	ret

000061c8 <abort>:
    61c8:	81 e0       	ldi	r24, 0x01	; 1
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	f8 94       	cli
    61ce:	7d c3       	rjmp	.+1786   	; 0x68ca <_exit>

000061d0 <memcpy>:
    61d0:	fb 01       	movw	r30, r22
    61d2:	dc 01       	movw	r26, r24
    61d4:	02 c0       	rjmp	.+4      	; 0x61da <memcpy+0xa>
    61d6:	01 90       	ld	r0, Z+
    61d8:	0d 92       	st	X+, r0
    61da:	41 50       	subi	r20, 0x01	; 1
    61dc:	50 40       	sbci	r21, 0x00	; 0
    61de:	d8 f7       	brcc	.-10     	; 0x61d6 <memcpy+0x6>
    61e0:	08 95       	ret

000061e2 <memset>:
    61e2:	dc 01       	movw	r26, r24
    61e4:	01 c0       	rjmp	.+2      	; 0x61e8 <memset+0x6>
    61e6:	6d 93       	st	X+, r22
    61e8:	41 50       	subi	r20, 0x01	; 1
    61ea:	50 40       	sbci	r21, 0x00	; 0
    61ec:	e0 f7       	brcc	.-8      	; 0x61e6 <memset+0x4>
    61ee:	08 95       	ret

000061f0 <strcasestr>:
    61f0:	fb 01       	movw	r30, r22
    61f2:	51 91       	ld	r21, Z+
    61f4:	55 23       	and	r21, r21
    61f6:	b1 f0       	breq	.+44     	; 0x6224 <strcasestr+0x34>
    61f8:	bf 01       	movw	r22, r30
    61fa:	dc 01       	movw	r26, r24
    61fc:	05 2e       	mov	r0, r21
    61fe:	4d 91       	ld	r20, X+
    6200:	44 23       	and	r20, r20
    6202:	69 f0       	breq	.+26     	; 0x621e <strcasestr+0x2e>
    6204:	10 d0       	rcall	.+32     	; 0x6226 <strcasestr+0x36>
    6206:	d9 f7       	brne	.-10     	; 0x61fe <strcasestr+0xe>
    6208:	cd 01       	movw	r24, r26
    620a:	01 90       	ld	r0, Z+
    620c:	00 20       	and	r0, r0
    620e:	49 f0       	breq	.+18     	; 0x6222 <strcasestr+0x32>
    6210:	4d 91       	ld	r20, X+
    6212:	41 11       	cpse	r20, r1
    6214:	08 d0       	rcall	.+16     	; 0x6226 <strcasestr+0x36>
    6216:	c9 f3       	breq	.-14     	; 0x620a <strcasestr+0x1a>
    6218:	fb 01       	movw	r30, r22
    621a:	41 11       	cpse	r20, r1
    621c:	ee cf       	rjmp	.-36     	; 0x61fa <strcasestr+0xa>
    621e:	81 e0       	ldi	r24, 0x01	; 1
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	01 97       	sbiw	r24, 0x01	; 1
    6224:	08 95       	ret
    6226:	40 25       	eor	r20, r0
    6228:	39 f0       	breq	.+14     	; 0x6238 <strcasestr+0x48>
    622a:	40 32       	cpi	r20, 0x20	; 32
    622c:	29 f4       	brne	.+10     	; 0x6238 <strcasestr+0x48>
    622e:	40 29       	or	r20, r0
    6230:	4b 57       	subi	r20, 0x7B	; 123
    6232:	46 5e       	subi	r20, 0xE6	; 230
    6234:	08 f0       	brcs	.+2      	; 0x6238 <strcasestr+0x48>
    6236:	18 94       	sez
    6238:	08 95       	ret

0000623a <strcat>:
    623a:	fb 01       	movw	r30, r22
    623c:	dc 01       	movw	r26, r24
    623e:	0d 90       	ld	r0, X+
    6240:	00 20       	and	r0, r0
    6242:	e9 f7       	brne	.-6      	; 0x623e <strcat+0x4>
    6244:	11 97       	sbiw	r26, 0x01	; 1
    6246:	01 90       	ld	r0, Z+
    6248:	0d 92       	st	X+, r0
    624a:	00 20       	and	r0, r0
    624c:	e1 f7       	brne	.-8      	; 0x6246 <strcat+0xc>
    624e:	08 95       	ret

00006250 <strcpy>:
    6250:	fb 01       	movw	r30, r22
    6252:	dc 01       	movw	r26, r24
    6254:	01 90       	ld	r0, Z+
    6256:	0d 92       	st	X+, r0
    6258:	00 20       	and	r0, r0
    625a:	e1 f7       	brne	.-8      	; 0x6254 <strcpy+0x4>
    625c:	08 95       	ret

0000625e <strncasecmp>:
    625e:	fb 01       	movw	r30, r22
    6260:	dc 01       	movw	r26, r24
    6262:	41 50       	subi	r20, 0x01	; 1
    6264:	50 40       	sbci	r21, 0x00	; 0
    6266:	88 f0       	brcs	.+34     	; 0x628a <strncasecmp+0x2c>
    6268:	8d 91       	ld	r24, X+
    626a:	81 34       	cpi	r24, 0x41	; 65
    626c:	1c f0       	brlt	.+6      	; 0x6274 <strncasecmp+0x16>
    626e:	8b 35       	cpi	r24, 0x5B	; 91
    6270:	0c f4       	brge	.+2      	; 0x6274 <strncasecmp+0x16>
    6272:	80 5e       	subi	r24, 0xE0	; 224
    6274:	61 91       	ld	r22, Z+
    6276:	61 34       	cpi	r22, 0x41	; 65
    6278:	1c f0       	brlt	.+6      	; 0x6280 <strncasecmp+0x22>
    627a:	6b 35       	cpi	r22, 0x5B	; 91
    627c:	0c f4       	brge	.+2      	; 0x6280 <strncasecmp+0x22>
    627e:	60 5e       	subi	r22, 0xE0	; 224
    6280:	86 1b       	sub	r24, r22
    6282:	61 11       	cpse	r22, r1
    6284:	71 f3       	breq	.-36     	; 0x6262 <strncasecmp+0x4>
    6286:	99 0b       	sbc	r25, r25
    6288:	08 95       	ret
    628a:	88 1b       	sub	r24, r24
    628c:	fc cf       	rjmp	.-8      	; 0x6286 <strncasecmp+0x28>

0000628e <printf>:
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	cd b7       	in	r28, 0x3d	; 61
    6294:	de b7       	in	r29, 0x3e	; 62
    6296:	ae 01       	movw	r20, r28
    6298:	4a 5f       	subi	r20, 0xFA	; 250
    629a:	5f 4f       	sbci	r21, 0xFF	; 255
    629c:	fa 01       	movw	r30, r20
    629e:	61 91       	ld	r22, Z+
    62a0:	71 91       	ld	r23, Z+
    62a2:	af 01       	movw	r20, r30
    62a4:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <__iob+0x2>
    62a8:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <__iob+0x3>
    62ac:	61 d0       	rcall	.+194    	; 0x6370 <vfprintf>
    62ae:	df 91       	pop	r29
    62b0:	cf 91       	pop	r28
    62b2:	08 95       	ret

000062b4 <puts>:
    62b4:	0f 93       	push	r16
    62b6:	1f 93       	push	r17
    62b8:	cf 93       	push	r28
    62ba:	df 93       	push	r29
    62bc:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <__iob+0x2>
    62c0:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <__iob+0x3>
    62c4:	23 81       	ldd	r18, Z+3	; 0x03
    62c6:	21 ff       	sbrs	r18, 1
    62c8:	1b c0       	rjmp	.+54     	; 0x6300 <puts+0x4c>
    62ca:	8c 01       	movw	r16, r24
    62cc:	d0 e0       	ldi	r29, 0x00	; 0
    62ce:	c0 e0       	ldi	r28, 0x00	; 0
    62d0:	f8 01       	movw	r30, r16
    62d2:	81 91       	ld	r24, Z+
    62d4:	8f 01       	movw	r16, r30
    62d6:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <__iob+0x2>
    62da:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <__iob+0x3>
    62de:	db 01       	movw	r26, r22
    62e0:	18 96       	adiw	r26, 0x08	; 8
    62e2:	ed 91       	ld	r30, X+
    62e4:	fc 91       	ld	r31, X
    62e6:	19 97       	sbiw	r26, 0x09	; 9
    62e8:	88 23       	and	r24, r24
    62ea:	31 f0       	breq	.+12     	; 0x62f8 <puts+0x44>
    62ec:	19 95       	eicall
    62ee:	89 2b       	or	r24, r25
    62f0:	79 f3       	breq	.-34     	; 0x62d0 <puts+0x1c>
    62f2:	df ef       	ldi	r29, 0xFF	; 255
    62f4:	cf ef       	ldi	r28, 0xFF	; 255
    62f6:	ec cf       	rjmp	.-40     	; 0x62d0 <puts+0x1c>
    62f8:	8a e0       	ldi	r24, 0x0A	; 10
    62fa:	19 95       	eicall
    62fc:	89 2b       	or	r24, r25
    62fe:	19 f0       	breq	.+6      	; 0x6306 <puts+0x52>
    6300:	8f ef       	ldi	r24, 0xFF	; 255
    6302:	9f ef       	ldi	r25, 0xFF	; 255
    6304:	02 c0       	rjmp	.+4      	; 0x630a <puts+0x56>
    6306:	8d 2f       	mov	r24, r29
    6308:	9c 2f       	mov	r25, r28
    630a:	df 91       	pop	r29
    630c:	cf 91       	pop	r28
    630e:	1f 91       	pop	r17
    6310:	0f 91       	pop	r16
    6312:	08 95       	ret

00006314 <sprintf>:
    6314:	0f 93       	push	r16
    6316:	1f 93       	push	r17
    6318:	cf 93       	push	r28
    631a:	df 93       	push	r29
    631c:	cd b7       	in	r28, 0x3d	; 61
    631e:	de b7       	in	r29, 0x3e	; 62
    6320:	2e 97       	sbiw	r28, 0x0e	; 14
    6322:	0f b6       	in	r0, 0x3f	; 63
    6324:	f8 94       	cli
    6326:	de bf       	out	0x3e, r29	; 62
    6328:	0f be       	out	0x3f, r0	; 63
    632a:	cd bf       	out	0x3d, r28	; 61
    632c:	0e 89       	ldd	r16, Y+22	; 0x16
    632e:	1f 89       	ldd	r17, Y+23	; 0x17
    6330:	86 e0       	ldi	r24, 0x06	; 6
    6332:	8c 83       	std	Y+4, r24	; 0x04
    6334:	1a 83       	std	Y+2, r17	; 0x02
    6336:	09 83       	std	Y+1, r16	; 0x01
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	9f e7       	ldi	r25, 0x7F	; 127
    633c:	9e 83       	std	Y+6, r25	; 0x06
    633e:	8d 83       	std	Y+5, r24	; 0x05
    6340:	ae 01       	movw	r20, r28
    6342:	46 5e       	subi	r20, 0xE6	; 230
    6344:	5f 4f       	sbci	r21, 0xFF	; 255
    6346:	68 8d       	ldd	r22, Y+24	; 0x18
    6348:	79 8d       	ldd	r23, Y+25	; 0x19
    634a:	ce 01       	movw	r24, r28
    634c:	01 96       	adiw	r24, 0x01	; 1
    634e:	10 d0       	rcall	.+32     	; 0x6370 <vfprintf>
    6350:	ef 81       	ldd	r30, Y+7	; 0x07
    6352:	f8 85       	ldd	r31, Y+8	; 0x08
    6354:	e0 0f       	add	r30, r16
    6356:	f1 1f       	adc	r31, r17
    6358:	10 82       	st	Z, r1
    635a:	2e 96       	adiw	r28, 0x0e	; 14
    635c:	0f b6       	in	r0, 0x3f	; 63
    635e:	f8 94       	cli
    6360:	de bf       	out	0x3e, r29	; 62
    6362:	0f be       	out	0x3f, r0	; 63
    6364:	cd bf       	out	0x3d, r28	; 61
    6366:	df 91       	pop	r29
    6368:	cf 91       	pop	r28
    636a:	1f 91       	pop	r17
    636c:	0f 91       	pop	r16
    636e:	08 95       	ret

00006370 <vfprintf>:
    6370:	2f 92       	push	r2
    6372:	3f 92       	push	r3
    6374:	4f 92       	push	r4
    6376:	5f 92       	push	r5
    6378:	6f 92       	push	r6
    637a:	7f 92       	push	r7
    637c:	8f 92       	push	r8
    637e:	9f 92       	push	r9
    6380:	af 92       	push	r10
    6382:	bf 92       	push	r11
    6384:	cf 92       	push	r12
    6386:	df 92       	push	r13
    6388:	ef 92       	push	r14
    638a:	ff 92       	push	r15
    638c:	0f 93       	push	r16
    638e:	1f 93       	push	r17
    6390:	cf 93       	push	r28
    6392:	df 93       	push	r29
    6394:	cd b7       	in	r28, 0x3d	; 61
    6396:	de b7       	in	r29, 0x3e	; 62
    6398:	2b 97       	sbiw	r28, 0x0b	; 11
    639a:	0f b6       	in	r0, 0x3f	; 63
    639c:	f8 94       	cli
    639e:	de bf       	out	0x3e, r29	; 62
    63a0:	0f be       	out	0x3f, r0	; 63
    63a2:	cd bf       	out	0x3d, r28	; 61
    63a4:	6c 01       	movw	r12, r24
    63a6:	7b 01       	movw	r14, r22
    63a8:	8a 01       	movw	r16, r20
    63aa:	fc 01       	movw	r30, r24
    63ac:	17 82       	std	Z+7, r1	; 0x07
    63ae:	16 82       	std	Z+6, r1	; 0x06
    63b0:	83 81       	ldd	r24, Z+3	; 0x03
    63b2:	81 ff       	sbrs	r24, 1
    63b4:	bf c1       	rjmp	.+894    	; 0x6734 <vfprintf+0x3c4>
    63b6:	ce 01       	movw	r24, r28
    63b8:	01 96       	adiw	r24, 0x01	; 1
    63ba:	3c 01       	movw	r6, r24
    63bc:	f6 01       	movw	r30, r12
    63be:	93 81       	ldd	r25, Z+3	; 0x03
    63c0:	f7 01       	movw	r30, r14
    63c2:	93 fd       	sbrc	r25, 3
    63c4:	85 91       	lpm	r24, Z+
    63c6:	93 ff       	sbrs	r25, 3
    63c8:	81 91       	ld	r24, Z+
    63ca:	7f 01       	movw	r14, r30
    63cc:	88 23       	and	r24, r24
    63ce:	09 f4       	brne	.+2      	; 0x63d2 <vfprintf+0x62>
    63d0:	ad c1       	rjmp	.+858    	; 0x672c <vfprintf+0x3bc>
    63d2:	85 32       	cpi	r24, 0x25	; 37
    63d4:	39 f4       	brne	.+14     	; 0x63e4 <vfprintf+0x74>
    63d6:	93 fd       	sbrc	r25, 3
    63d8:	85 91       	lpm	r24, Z+
    63da:	93 ff       	sbrs	r25, 3
    63dc:	81 91       	ld	r24, Z+
    63de:	7f 01       	movw	r14, r30
    63e0:	85 32       	cpi	r24, 0x25	; 37
    63e2:	21 f4       	brne	.+8      	; 0x63ec <vfprintf+0x7c>
    63e4:	b6 01       	movw	r22, r12
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	d6 d1       	rcall	.+940    	; 0x6796 <fputc>
    63ea:	e8 cf       	rjmp	.-48     	; 0x63bc <vfprintf+0x4c>
    63ec:	91 2c       	mov	r9, r1
    63ee:	21 2c       	mov	r2, r1
    63f0:	31 2c       	mov	r3, r1
    63f2:	ff e1       	ldi	r31, 0x1F	; 31
    63f4:	f3 15       	cp	r31, r3
    63f6:	d8 f0       	brcs	.+54     	; 0x642e <vfprintf+0xbe>
    63f8:	8b 32       	cpi	r24, 0x2B	; 43
    63fa:	79 f0       	breq	.+30     	; 0x641a <vfprintf+0xaa>
    63fc:	38 f4       	brcc	.+14     	; 0x640c <vfprintf+0x9c>
    63fe:	80 32       	cpi	r24, 0x20	; 32
    6400:	79 f0       	breq	.+30     	; 0x6420 <vfprintf+0xb0>
    6402:	83 32       	cpi	r24, 0x23	; 35
    6404:	a1 f4       	brne	.+40     	; 0x642e <vfprintf+0xbe>
    6406:	23 2d       	mov	r18, r3
    6408:	20 61       	ori	r18, 0x10	; 16
    640a:	1d c0       	rjmp	.+58     	; 0x6446 <vfprintf+0xd6>
    640c:	8d 32       	cpi	r24, 0x2D	; 45
    640e:	61 f0       	breq	.+24     	; 0x6428 <vfprintf+0xb8>
    6410:	80 33       	cpi	r24, 0x30	; 48
    6412:	69 f4       	brne	.+26     	; 0x642e <vfprintf+0xbe>
    6414:	23 2d       	mov	r18, r3
    6416:	21 60       	ori	r18, 0x01	; 1
    6418:	16 c0       	rjmp	.+44     	; 0x6446 <vfprintf+0xd6>
    641a:	83 2d       	mov	r24, r3
    641c:	82 60       	ori	r24, 0x02	; 2
    641e:	38 2e       	mov	r3, r24
    6420:	e3 2d       	mov	r30, r3
    6422:	e4 60       	ori	r30, 0x04	; 4
    6424:	3e 2e       	mov	r3, r30
    6426:	2a c0       	rjmp	.+84     	; 0x647c <vfprintf+0x10c>
    6428:	f3 2d       	mov	r31, r3
    642a:	f8 60       	ori	r31, 0x08	; 8
    642c:	1d c0       	rjmp	.+58     	; 0x6468 <vfprintf+0xf8>
    642e:	37 fc       	sbrc	r3, 7
    6430:	2d c0       	rjmp	.+90     	; 0x648c <vfprintf+0x11c>
    6432:	20 ed       	ldi	r18, 0xD0	; 208
    6434:	28 0f       	add	r18, r24
    6436:	2a 30       	cpi	r18, 0x0A	; 10
    6438:	40 f0       	brcs	.+16     	; 0x644a <vfprintf+0xda>
    643a:	8e 32       	cpi	r24, 0x2E	; 46
    643c:	b9 f4       	brne	.+46     	; 0x646c <vfprintf+0xfc>
    643e:	36 fc       	sbrc	r3, 6
    6440:	75 c1       	rjmp	.+746    	; 0x672c <vfprintf+0x3bc>
    6442:	23 2d       	mov	r18, r3
    6444:	20 64       	ori	r18, 0x40	; 64
    6446:	32 2e       	mov	r3, r18
    6448:	19 c0       	rjmp	.+50     	; 0x647c <vfprintf+0x10c>
    644a:	36 fe       	sbrs	r3, 6
    644c:	06 c0       	rjmp	.+12     	; 0x645a <vfprintf+0xea>
    644e:	8a e0       	ldi	r24, 0x0A	; 10
    6450:	98 9e       	mul	r9, r24
    6452:	20 0d       	add	r18, r0
    6454:	11 24       	eor	r1, r1
    6456:	92 2e       	mov	r9, r18
    6458:	11 c0       	rjmp	.+34     	; 0x647c <vfprintf+0x10c>
    645a:	ea e0       	ldi	r30, 0x0A	; 10
    645c:	2e 9e       	mul	r2, r30
    645e:	20 0d       	add	r18, r0
    6460:	11 24       	eor	r1, r1
    6462:	22 2e       	mov	r2, r18
    6464:	f3 2d       	mov	r31, r3
    6466:	f0 62       	ori	r31, 0x20	; 32
    6468:	3f 2e       	mov	r3, r31
    646a:	08 c0       	rjmp	.+16     	; 0x647c <vfprintf+0x10c>
    646c:	8c 36       	cpi	r24, 0x6C	; 108
    646e:	21 f4       	brne	.+8      	; 0x6478 <vfprintf+0x108>
    6470:	83 2d       	mov	r24, r3
    6472:	80 68       	ori	r24, 0x80	; 128
    6474:	38 2e       	mov	r3, r24
    6476:	02 c0       	rjmp	.+4      	; 0x647c <vfprintf+0x10c>
    6478:	88 36       	cpi	r24, 0x68	; 104
    647a:	41 f4       	brne	.+16     	; 0x648c <vfprintf+0x11c>
    647c:	f7 01       	movw	r30, r14
    647e:	93 fd       	sbrc	r25, 3
    6480:	85 91       	lpm	r24, Z+
    6482:	93 ff       	sbrs	r25, 3
    6484:	81 91       	ld	r24, Z+
    6486:	7f 01       	movw	r14, r30
    6488:	81 11       	cpse	r24, r1
    648a:	b3 cf       	rjmp	.-154    	; 0x63f2 <vfprintf+0x82>
    648c:	98 2f       	mov	r25, r24
    648e:	9f 7d       	andi	r25, 0xDF	; 223
    6490:	95 54       	subi	r25, 0x45	; 69
    6492:	93 30       	cpi	r25, 0x03	; 3
    6494:	28 f4       	brcc	.+10     	; 0x64a0 <vfprintf+0x130>
    6496:	0c 5f       	subi	r16, 0xFC	; 252
    6498:	1f 4f       	sbci	r17, 0xFF	; 255
    649a:	9f e3       	ldi	r25, 0x3F	; 63
    649c:	99 83       	std	Y+1, r25	; 0x01
    649e:	0d c0       	rjmp	.+26     	; 0x64ba <vfprintf+0x14a>
    64a0:	83 36       	cpi	r24, 0x63	; 99
    64a2:	31 f0       	breq	.+12     	; 0x64b0 <vfprintf+0x140>
    64a4:	83 37       	cpi	r24, 0x73	; 115
    64a6:	71 f0       	breq	.+28     	; 0x64c4 <vfprintf+0x154>
    64a8:	83 35       	cpi	r24, 0x53	; 83
    64aa:	09 f0       	breq	.+2      	; 0x64ae <vfprintf+0x13e>
    64ac:	55 c0       	rjmp	.+170    	; 0x6558 <vfprintf+0x1e8>
    64ae:	20 c0       	rjmp	.+64     	; 0x64f0 <vfprintf+0x180>
    64b0:	f8 01       	movw	r30, r16
    64b2:	80 81       	ld	r24, Z
    64b4:	89 83       	std	Y+1, r24	; 0x01
    64b6:	0e 5f       	subi	r16, 0xFE	; 254
    64b8:	1f 4f       	sbci	r17, 0xFF	; 255
    64ba:	88 24       	eor	r8, r8
    64bc:	83 94       	inc	r8
    64be:	91 2c       	mov	r9, r1
    64c0:	53 01       	movw	r10, r6
    64c2:	12 c0       	rjmp	.+36     	; 0x64e8 <vfprintf+0x178>
    64c4:	28 01       	movw	r4, r16
    64c6:	f2 e0       	ldi	r31, 0x02	; 2
    64c8:	4f 0e       	add	r4, r31
    64ca:	51 1c       	adc	r5, r1
    64cc:	f8 01       	movw	r30, r16
    64ce:	a0 80       	ld	r10, Z
    64d0:	b1 80       	ldd	r11, Z+1	; 0x01
    64d2:	36 fe       	sbrs	r3, 6
    64d4:	03 c0       	rjmp	.+6      	; 0x64dc <vfprintf+0x16c>
    64d6:	69 2d       	mov	r22, r9
    64d8:	70 e0       	ldi	r23, 0x00	; 0
    64da:	02 c0       	rjmp	.+4      	; 0x64e0 <vfprintf+0x170>
    64dc:	6f ef       	ldi	r22, 0xFF	; 255
    64de:	7f ef       	ldi	r23, 0xFF	; 255
    64e0:	c5 01       	movw	r24, r10
    64e2:	4e d1       	rcall	.+668    	; 0x6780 <strnlen>
    64e4:	4c 01       	movw	r8, r24
    64e6:	82 01       	movw	r16, r4
    64e8:	f3 2d       	mov	r31, r3
    64ea:	ff 77       	andi	r31, 0x7F	; 127
    64ec:	3f 2e       	mov	r3, r31
    64ee:	15 c0       	rjmp	.+42     	; 0x651a <vfprintf+0x1aa>
    64f0:	28 01       	movw	r4, r16
    64f2:	22 e0       	ldi	r18, 0x02	; 2
    64f4:	42 0e       	add	r4, r18
    64f6:	51 1c       	adc	r5, r1
    64f8:	f8 01       	movw	r30, r16
    64fa:	a0 80       	ld	r10, Z
    64fc:	b1 80       	ldd	r11, Z+1	; 0x01
    64fe:	36 fe       	sbrs	r3, 6
    6500:	03 c0       	rjmp	.+6      	; 0x6508 <vfprintf+0x198>
    6502:	69 2d       	mov	r22, r9
    6504:	70 e0       	ldi	r23, 0x00	; 0
    6506:	02 c0       	rjmp	.+4      	; 0x650c <vfprintf+0x19c>
    6508:	6f ef       	ldi	r22, 0xFF	; 255
    650a:	7f ef       	ldi	r23, 0xFF	; 255
    650c:	c5 01       	movw	r24, r10
    650e:	2d d1       	rcall	.+602    	; 0x676a <strnlen_P>
    6510:	4c 01       	movw	r8, r24
    6512:	f3 2d       	mov	r31, r3
    6514:	f0 68       	ori	r31, 0x80	; 128
    6516:	3f 2e       	mov	r3, r31
    6518:	82 01       	movw	r16, r4
    651a:	33 fc       	sbrc	r3, 3
    651c:	19 c0       	rjmp	.+50     	; 0x6550 <vfprintf+0x1e0>
    651e:	82 2d       	mov	r24, r2
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	88 16       	cp	r8, r24
    6524:	99 06       	cpc	r9, r25
    6526:	a0 f4       	brcc	.+40     	; 0x6550 <vfprintf+0x1e0>
    6528:	b6 01       	movw	r22, r12
    652a:	80 e2       	ldi	r24, 0x20	; 32
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	33 d1       	rcall	.+614    	; 0x6796 <fputc>
    6530:	2a 94       	dec	r2
    6532:	f5 cf       	rjmp	.-22     	; 0x651e <vfprintf+0x1ae>
    6534:	f5 01       	movw	r30, r10
    6536:	37 fc       	sbrc	r3, 7
    6538:	85 91       	lpm	r24, Z+
    653a:	37 fe       	sbrs	r3, 7
    653c:	81 91       	ld	r24, Z+
    653e:	5f 01       	movw	r10, r30
    6540:	b6 01       	movw	r22, r12
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	28 d1       	rcall	.+592    	; 0x6796 <fputc>
    6546:	21 10       	cpse	r2, r1
    6548:	2a 94       	dec	r2
    654a:	21 e0       	ldi	r18, 0x01	; 1
    654c:	82 1a       	sub	r8, r18
    654e:	91 08       	sbc	r9, r1
    6550:	81 14       	cp	r8, r1
    6552:	91 04       	cpc	r9, r1
    6554:	79 f7       	brne	.-34     	; 0x6534 <vfprintf+0x1c4>
    6556:	e1 c0       	rjmp	.+450    	; 0x671a <vfprintf+0x3aa>
    6558:	84 36       	cpi	r24, 0x64	; 100
    655a:	11 f0       	breq	.+4      	; 0x6560 <vfprintf+0x1f0>
    655c:	89 36       	cpi	r24, 0x69	; 105
    655e:	39 f5       	brne	.+78     	; 0x65ae <vfprintf+0x23e>
    6560:	f8 01       	movw	r30, r16
    6562:	37 fe       	sbrs	r3, 7
    6564:	07 c0       	rjmp	.+14     	; 0x6574 <vfprintf+0x204>
    6566:	60 81       	ld	r22, Z
    6568:	71 81       	ldd	r23, Z+1	; 0x01
    656a:	82 81       	ldd	r24, Z+2	; 0x02
    656c:	93 81       	ldd	r25, Z+3	; 0x03
    656e:	0c 5f       	subi	r16, 0xFC	; 252
    6570:	1f 4f       	sbci	r17, 0xFF	; 255
    6572:	08 c0       	rjmp	.+16     	; 0x6584 <vfprintf+0x214>
    6574:	60 81       	ld	r22, Z
    6576:	71 81       	ldd	r23, Z+1	; 0x01
    6578:	07 2e       	mov	r0, r23
    657a:	00 0c       	add	r0, r0
    657c:	88 0b       	sbc	r24, r24
    657e:	99 0b       	sbc	r25, r25
    6580:	0e 5f       	subi	r16, 0xFE	; 254
    6582:	1f 4f       	sbci	r17, 0xFF	; 255
    6584:	f3 2d       	mov	r31, r3
    6586:	ff 76       	andi	r31, 0x6F	; 111
    6588:	3f 2e       	mov	r3, r31
    658a:	97 ff       	sbrs	r25, 7
    658c:	09 c0       	rjmp	.+18     	; 0x65a0 <vfprintf+0x230>
    658e:	90 95       	com	r25
    6590:	80 95       	com	r24
    6592:	70 95       	com	r23
    6594:	61 95       	neg	r22
    6596:	7f 4f       	sbci	r23, 0xFF	; 255
    6598:	8f 4f       	sbci	r24, 0xFF	; 255
    659a:	9f 4f       	sbci	r25, 0xFF	; 255
    659c:	f0 68       	ori	r31, 0x80	; 128
    659e:	3f 2e       	mov	r3, r31
    65a0:	2a e0       	ldi	r18, 0x0A	; 10
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	a3 01       	movw	r20, r6
    65a6:	33 d1       	rcall	.+614    	; 0x680e <__ultoa_invert>
    65a8:	88 2e       	mov	r8, r24
    65aa:	86 18       	sub	r8, r6
    65ac:	44 c0       	rjmp	.+136    	; 0x6636 <vfprintf+0x2c6>
    65ae:	85 37       	cpi	r24, 0x75	; 117
    65b0:	31 f4       	brne	.+12     	; 0x65be <vfprintf+0x24e>
    65b2:	23 2d       	mov	r18, r3
    65b4:	2f 7e       	andi	r18, 0xEF	; 239
    65b6:	b2 2e       	mov	r11, r18
    65b8:	2a e0       	ldi	r18, 0x0A	; 10
    65ba:	30 e0       	ldi	r19, 0x00	; 0
    65bc:	25 c0       	rjmp	.+74     	; 0x6608 <vfprintf+0x298>
    65be:	93 2d       	mov	r25, r3
    65c0:	99 7f       	andi	r25, 0xF9	; 249
    65c2:	b9 2e       	mov	r11, r25
    65c4:	8f 36       	cpi	r24, 0x6F	; 111
    65c6:	c1 f0       	breq	.+48     	; 0x65f8 <vfprintf+0x288>
    65c8:	18 f4       	brcc	.+6      	; 0x65d0 <vfprintf+0x260>
    65ca:	88 35       	cpi	r24, 0x58	; 88
    65cc:	79 f0       	breq	.+30     	; 0x65ec <vfprintf+0x27c>
    65ce:	ae c0       	rjmp	.+348    	; 0x672c <vfprintf+0x3bc>
    65d0:	80 37       	cpi	r24, 0x70	; 112
    65d2:	19 f0       	breq	.+6      	; 0x65da <vfprintf+0x26a>
    65d4:	88 37       	cpi	r24, 0x78	; 120
    65d6:	21 f0       	breq	.+8      	; 0x65e0 <vfprintf+0x270>
    65d8:	a9 c0       	rjmp	.+338    	; 0x672c <vfprintf+0x3bc>
    65da:	e9 2f       	mov	r30, r25
    65dc:	e0 61       	ori	r30, 0x10	; 16
    65de:	be 2e       	mov	r11, r30
    65e0:	b4 fe       	sbrs	r11, 4
    65e2:	0d c0       	rjmp	.+26     	; 0x65fe <vfprintf+0x28e>
    65e4:	fb 2d       	mov	r31, r11
    65e6:	f4 60       	ori	r31, 0x04	; 4
    65e8:	bf 2e       	mov	r11, r31
    65ea:	09 c0       	rjmp	.+18     	; 0x65fe <vfprintf+0x28e>
    65ec:	34 fe       	sbrs	r3, 4
    65ee:	0a c0       	rjmp	.+20     	; 0x6604 <vfprintf+0x294>
    65f0:	29 2f       	mov	r18, r25
    65f2:	26 60       	ori	r18, 0x06	; 6
    65f4:	b2 2e       	mov	r11, r18
    65f6:	06 c0       	rjmp	.+12     	; 0x6604 <vfprintf+0x294>
    65f8:	28 e0       	ldi	r18, 0x08	; 8
    65fa:	30 e0       	ldi	r19, 0x00	; 0
    65fc:	05 c0       	rjmp	.+10     	; 0x6608 <vfprintf+0x298>
    65fe:	20 e1       	ldi	r18, 0x10	; 16
    6600:	30 e0       	ldi	r19, 0x00	; 0
    6602:	02 c0       	rjmp	.+4      	; 0x6608 <vfprintf+0x298>
    6604:	20 e1       	ldi	r18, 0x10	; 16
    6606:	32 e0       	ldi	r19, 0x02	; 2
    6608:	f8 01       	movw	r30, r16
    660a:	b7 fe       	sbrs	r11, 7
    660c:	07 c0       	rjmp	.+14     	; 0x661c <vfprintf+0x2ac>
    660e:	60 81       	ld	r22, Z
    6610:	71 81       	ldd	r23, Z+1	; 0x01
    6612:	82 81       	ldd	r24, Z+2	; 0x02
    6614:	93 81       	ldd	r25, Z+3	; 0x03
    6616:	0c 5f       	subi	r16, 0xFC	; 252
    6618:	1f 4f       	sbci	r17, 0xFF	; 255
    661a:	06 c0       	rjmp	.+12     	; 0x6628 <vfprintf+0x2b8>
    661c:	60 81       	ld	r22, Z
    661e:	71 81       	ldd	r23, Z+1	; 0x01
    6620:	80 e0       	ldi	r24, 0x00	; 0
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	0e 5f       	subi	r16, 0xFE	; 254
    6626:	1f 4f       	sbci	r17, 0xFF	; 255
    6628:	a3 01       	movw	r20, r6
    662a:	f1 d0       	rcall	.+482    	; 0x680e <__ultoa_invert>
    662c:	88 2e       	mov	r8, r24
    662e:	86 18       	sub	r8, r6
    6630:	fb 2d       	mov	r31, r11
    6632:	ff 77       	andi	r31, 0x7F	; 127
    6634:	3f 2e       	mov	r3, r31
    6636:	36 fe       	sbrs	r3, 6
    6638:	0d c0       	rjmp	.+26     	; 0x6654 <vfprintf+0x2e4>
    663a:	23 2d       	mov	r18, r3
    663c:	2e 7f       	andi	r18, 0xFE	; 254
    663e:	a2 2e       	mov	r10, r18
    6640:	89 14       	cp	r8, r9
    6642:	58 f4       	brcc	.+22     	; 0x665a <vfprintf+0x2ea>
    6644:	34 fe       	sbrs	r3, 4
    6646:	0b c0       	rjmp	.+22     	; 0x665e <vfprintf+0x2ee>
    6648:	32 fc       	sbrc	r3, 2
    664a:	09 c0       	rjmp	.+18     	; 0x665e <vfprintf+0x2ee>
    664c:	83 2d       	mov	r24, r3
    664e:	8e 7e       	andi	r24, 0xEE	; 238
    6650:	a8 2e       	mov	r10, r24
    6652:	05 c0       	rjmp	.+10     	; 0x665e <vfprintf+0x2ee>
    6654:	b8 2c       	mov	r11, r8
    6656:	a3 2c       	mov	r10, r3
    6658:	03 c0       	rjmp	.+6      	; 0x6660 <vfprintf+0x2f0>
    665a:	b8 2c       	mov	r11, r8
    665c:	01 c0       	rjmp	.+2      	; 0x6660 <vfprintf+0x2f0>
    665e:	b9 2c       	mov	r11, r9
    6660:	a4 fe       	sbrs	r10, 4
    6662:	0f c0       	rjmp	.+30     	; 0x6682 <vfprintf+0x312>
    6664:	fe 01       	movw	r30, r28
    6666:	e8 0d       	add	r30, r8
    6668:	f1 1d       	adc	r31, r1
    666a:	80 81       	ld	r24, Z
    666c:	80 33       	cpi	r24, 0x30	; 48
    666e:	21 f4       	brne	.+8      	; 0x6678 <vfprintf+0x308>
    6670:	9a 2d       	mov	r25, r10
    6672:	99 7e       	andi	r25, 0xE9	; 233
    6674:	a9 2e       	mov	r10, r25
    6676:	09 c0       	rjmp	.+18     	; 0x668a <vfprintf+0x31a>
    6678:	a2 fe       	sbrs	r10, 2
    667a:	06 c0       	rjmp	.+12     	; 0x6688 <vfprintf+0x318>
    667c:	b3 94       	inc	r11
    667e:	b3 94       	inc	r11
    6680:	04 c0       	rjmp	.+8      	; 0x668a <vfprintf+0x31a>
    6682:	8a 2d       	mov	r24, r10
    6684:	86 78       	andi	r24, 0x86	; 134
    6686:	09 f0       	breq	.+2      	; 0x668a <vfprintf+0x31a>
    6688:	b3 94       	inc	r11
    668a:	a3 fc       	sbrc	r10, 3
    668c:	10 c0       	rjmp	.+32     	; 0x66ae <vfprintf+0x33e>
    668e:	a0 fe       	sbrs	r10, 0
    6690:	06 c0       	rjmp	.+12     	; 0x669e <vfprintf+0x32e>
    6692:	b2 14       	cp	r11, r2
    6694:	80 f4       	brcc	.+32     	; 0x66b6 <vfprintf+0x346>
    6696:	28 0c       	add	r2, r8
    6698:	92 2c       	mov	r9, r2
    669a:	9b 18       	sub	r9, r11
    669c:	0d c0       	rjmp	.+26     	; 0x66b8 <vfprintf+0x348>
    669e:	b2 14       	cp	r11, r2
    66a0:	58 f4       	brcc	.+22     	; 0x66b8 <vfprintf+0x348>
    66a2:	b6 01       	movw	r22, r12
    66a4:	80 e2       	ldi	r24, 0x20	; 32
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	76 d0       	rcall	.+236    	; 0x6796 <fputc>
    66aa:	b3 94       	inc	r11
    66ac:	f8 cf       	rjmp	.-16     	; 0x669e <vfprintf+0x32e>
    66ae:	b2 14       	cp	r11, r2
    66b0:	18 f4       	brcc	.+6      	; 0x66b8 <vfprintf+0x348>
    66b2:	2b 18       	sub	r2, r11
    66b4:	02 c0       	rjmp	.+4      	; 0x66ba <vfprintf+0x34a>
    66b6:	98 2c       	mov	r9, r8
    66b8:	21 2c       	mov	r2, r1
    66ba:	a4 fe       	sbrs	r10, 4
    66bc:	0f c0       	rjmp	.+30     	; 0x66dc <vfprintf+0x36c>
    66be:	b6 01       	movw	r22, r12
    66c0:	80 e3       	ldi	r24, 0x30	; 48
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	68 d0       	rcall	.+208    	; 0x6796 <fputc>
    66c6:	a2 fe       	sbrs	r10, 2
    66c8:	16 c0       	rjmp	.+44     	; 0x66f6 <vfprintf+0x386>
    66ca:	a1 fc       	sbrc	r10, 1
    66cc:	03 c0       	rjmp	.+6      	; 0x66d4 <vfprintf+0x364>
    66ce:	88 e7       	ldi	r24, 0x78	; 120
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	02 c0       	rjmp	.+4      	; 0x66d8 <vfprintf+0x368>
    66d4:	88 e5       	ldi	r24, 0x58	; 88
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	b6 01       	movw	r22, r12
    66da:	0c c0       	rjmp	.+24     	; 0x66f4 <vfprintf+0x384>
    66dc:	8a 2d       	mov	r24, r10
    66de:	86 78       	andi	r24, 0x86	; 134
    66e0:	51 f0       	breq	.+20     	; 0x66f6 <vfprintf+0x386>
    66e2:	a1 fe       	sbrs	r10, 1
    66e4:	02 c0       	rjmp	.+4      	; 0x66ea <vfprintf+0x37a>
    66e6:	8b e2       	ldi	r24, 0x2B	; 43
    66e8:	01 c0       	rjmp	.+2      	; 0x66ec <vfprintf+0x37c>
    66ea:	80 e2       	ldi	r24, 0x20	; 32
    66ec:	a7 fc       	sbrc	r10, 7
    66ee:	8d e2       	ldi	r24, 0x2D	; 45
    66f0:	b6 01       	movw	r22, r12
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	50 d0       	rcall	.+160    	; 0x6796 <fputc>
    66f6:	89 14       	cp	r8, r9
    66f8:	30 f4       	brcc	.+12     	; 0x6706 <vfprintf+0x396>
    66fa:	b6 01       	movw	r22, r12
    66fc:	80 e3       	ldi	r24, 0x30	; 48
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	4a d0       	rcall	.+148    	; 0x6796 <fputc>
    6702:	9a 94       	dec	r9
    6704:	f8 cf       	rjmp	.-16     	; 0x66f6 <vfprintf+0x386>
    6706:	8a 94       	dec	r8
    6708:	f3 01       	movw	r30, r6
    670a:	e8 0d       	add	r30, r8
    670c:	f1 1d       	adc	r31, r1
    670e:	80 81       	ld	r24, Z
    6710:	b6 01       	movw	r22, r12
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	40 d0       	rcall	.+128    	; 0x6796 <fputc>
    6716:	81 10       	cpse	r8, r1
    6718:	f6 cf       	rjmp	.-20     	; 0x6706 <vfprintf+0x396>
    671a:	22 20       	and	r2, r2
    671c:	09 f4       	brne	.+2      	; 0x6720 <vfprintf+0x3b0>
    671e:	4e ce       	rjmp	.-868    	; 0x63bc <vfprintf+0x4c>
    6720:	b6 01       	movw	r22, r12
    6722:	80 e2       	ldi	r24, 0x20	; 32
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	37 d0       	rcall	.+110    	; 0x6796 <fputc>
    6728:	2a 94       	dec	r2
    672a:	f7 cf       	rjmp	.-18     	; 0x671a <vfprintf+0x3aa>
    672c:	f6 01       	movw	r30, r12
    672e:	86 81       	ldd	r24, Z+6	; 0x06
    6730:	97 81       	ldd	r25, Z+7	; 0x07
    6732:	02 c0       	rjmp	.+4      	; 0x6738 <vfprintf+0x3c8>
    6734:	8f ef       	ldi	r24, 0xFF	; 255
    6736:	9f ef       	ldi	r25, 0xFF	; 255
    6738:	2b 96       	adiw	r28, 0x0b	; 11
    673a:	0f b6       	in	r0, 0x3f	; 63
    673c:	f8 94       	cli
    673e:	de bf       	out	0x3e, r29	; 62
    6740:	0f be       	out	0x3f, r0	; 63
    6742:	cd bf       	out	0x3d, r28	; 61
    6744:	df 91       	pop	r29
    6746:	cf 91       	pop	r28
    6748:	1f 91       	pop	r17
    674a:	0f 91       	pop	r16
    674c:	ff 90       	pop	r15
    674e:	ef 90       	pop	r14
    6750:	df 90       	pop	r13
    6752:	cf 90       	pop	r12
    6754:	bf 90       	pop	r11
    6756:	af 90       	pop	r10
    6758:	9f 90       	pop	r9
    675a:	8f 90       	pop	r8
    675c:	7f 90       	pop	r7
    675e:	6f 90       	pop	r6
    6760:	5f 90       	pop	r5
    6762:	4f 90       	pop	r4
    6764:	3f 90       	pop	r3
    6766:	2f 90       	pop	r2
    6768:	08 95       	ret

0000676a <strnlen_P>:
    676a:	fc 01       	movw	r30, r24
    676c:	05 90       	lpm	r0, Z+
    676e:	61 50       	subi	r22, 0x01	; 1
    6770:	70 40       	sbci	r23, 0x00	; 0
    6772:	01 10       	cpse	r0, r1
    6774:	d8 f7       	brcc	.-10     	; 0x676c <strnlen_P+0x2>
    6776:	80 95       	com	r24
    6778:	90 95       	com	r25
    677a:	8e 0f       	add	r24, r30
    677c:	9f 1f       	adc	r25, r31
    677e:	08 95       	ret

00006780 <strnlen>:
    6780:	fc 01       	movw	r30, r24
    6782:	61 50       	subi	r22, 0x01	; 1
    6784:	70 40       	sbci	r23, 0x00	; 0
    6786:	01 90       	ld	r0, Z+
    6788:	01 10       	cpse	r0, r1
    678a:	d8 f7       	brcc	.-10     	; 0x6782 <strnlen+0x2>
    678c:	80 95       	com	r24
    678e:	90 95       	com	r25
    6790:	8e 0f       	add	r24, r30
    6792:	9f 1f       	adc	r25, r31
    6794:	08 95       	ret

00006796 <fputc>:
    6796:	0f 93       	push	r16
    6798:	1f 93       	push	r17
    679a:	cf 93       	push	r28
    679c:	df 93       	push	r29
    679e:	fb 01       	movw	r30, r22
    67a0:	23 81       	ldd	r18, Z+3	; 0x03
    67a2:	21 fd       	sbrc	r18, 1
    67a4:	03 c0       	rjmp	.+6      	; 0x67ac <fputc+0x16>
    67a6:	8f ef       	ldi	r24, 0xFF	; 255
    67a8:	9f ef       	ldi	r25, 0xFF	; 255
    67aa:	2c c0       	rjmp	.+88     	; 0x6804 <fputc+0x6e>
    67ac:	22 ff       	sbrs	r18, 2
    67ae:	16 c0       	rjmp	.+44     	; 0x67dc <fputc+0x46>
    67b0:	46 81       	ldd	r20, Z+6	; 0x06
    67b2:	57 81       	ldd	r21, Z+7	; 0x07
    67b4:	24 81       	ldd	r18, Z+4	; 0x04
    67b6:	35 81       	ldd	r19, Z+5	; 0x05
    67b8:	42 17       	cp	r20, r18
    67ba:	53 07       	cpc	r21, r19
    67bc:	44 f4       	brge	.+16     	; 0x67ce <fputc+0x38>
    67be:	a0 81       	ld	r26, Z
    67c0:	b1 81       	ldd	r27, Z+1	; 0x01
    67c2:	9d 01       	movw	r18, r26
    67c4:	2f 5f       	subi	r18, 0xFF	; 255
    67c6:	3f 4f       	sbci	r19, 0xFF	; 255
    67c8:	31 83       	std	Z+1, r19	; 0x01
    67ca:	20 83       	st	Z, r18
    67cc:	8c 93       	st	X, r24
    67ce:	26 81       	ldd	r18, Z+6	; 0x06
    67d0:	37 81       	ldd	r19, Z+7	; 0x07
    67d2:	2f 5f       	subi	r18, 0xFF	; 255
    67d4:	3f 4f       	sbci	r19, 0xFF	; 255
    67d6:	37 83       	std	Z+7, r19	; 0x07
    67d8:	26 83       	std	Z+6, r18	; 0x06
    67da:	14 c0       	rjmp	.+40     	; 0x6804 <fputc+0x6e>
    67dc:	8b 01       	movw	r16, r22
    67de:	ec 01       	movw	r28, r24
    67e0:	fb 01       	movw	r30, r22
    67e2:	00 84       	ldd	r0, Z+8	; 0x08
    67e4:	f1 85       	ldd	r31, Z+9	; 0x09
    67e6:	e0 2d       	mov	r30, r0
    67e8:	19 95       	eicall
    67ea:	89 2b       	or	r24, r25
    67ec:	e1 f6       	brne	.-72     	; 0x67a6 <fputc+0x10>
    67ee:	d8 01       	movw	r26, r16
    67f0:	16 96       	adiw	r26, 0x06	; 6
    67f2:	8d 91       	ld	r24, X+
    67f4:	9c 91       	ld	r25, X
    67f6:	17 97       	sbiw	r26, 0x07	; 7
    67f8:	01 96       	adiw	r24, 0x01	; 1
    67fa:	17 96       	adiw	r26, 0x07	; 7
    67fc:	9c 93       	st	X, r25
    67fe:	8e 93       	st	-X, r24
    6800:	16 97       	sbiw	r26, 0x06	; 6
    6802:	ce 01       	movw	r24, r28
    6804:	df 91       	pop	r29
    6806:	cf 91       	pop	r28
    6808:	1f 91       	pop	r17
    680a:	0f 91       	pop	r16
    680c:	08 95       	ret

0000680e <__ultoa_invert>:
    680e:	fa 01       	movw	r30, r20
    6810:	aa 27       	eor	r26, r26
    6812:	28 30       	cpi	r18, 0x08	; 8
    6814:	51 f1       	breq	.+84     	; 0x686a <__ultoa_invert+0x5c>
    6816:	20 31       	cpi	r18, 0x10	; 16
    6818:	81 f1       	breq	.+96     	; 0x687a <__ultoa_invert+0x6c>
    681a:	e8 94       	clt
    681c:	6f 93       	push	r22
    681e:	6e 7f       	andi	r22, 0xFE	; 254
    6820:	6e 5f       	subi	r22, 0xFE	; 254
    6822:	7f 4f       	sbci	r23, 0xFF	; 255
    6824:	8f 4f       	sbci	r24, 0xFF	; 255
    6826:	9f 4f       	sbci	r25, 0xFF	; 255
    6828:	af 4f       	sbci	r26, 0xFF	; 255
    682a:	b1 e0       	ldi	r27, 0x01	; 1
    682c:	3e d0       	rcall	.+124    	; 0x68aa <__ultoa_invert+0x9c>
    682e:	b4 e0       	ldi	r27, 0x04	; 4
    6830:	3c d0       	rcall	.+120    	; 0x68aa <__ultoa_invert+0x9c>
    6832:	67 0f       	add	r22, r23
    6834:	78 1f       	adc	r23, r24
    6836:	89 1f       	adc	r24, r25
    6838:	9a 1f       	adc	r25, r26
    683a:	a1 1d       	adc	r26, r1
    683c:	68 0f       	add	r22, r24
    683e:	79 1f       	adc	r23, r25
    6840:	8a 1f       	adc	r24, r26
    6842:	91 1d       	adc	r25, r1
    6844:	a1 1d       	adc	r26, r1
    6846:	6a 0f       	add	r22, r26
    6848:	71 1d       	adc	r23, r1
    684a:	81 1d       	adc	r24, r1
    684c:	91 1d       	adc	r25, r1
    684e:	a1 1d       	adc	r26, r1
    6850:	20 d0       	rcall	.+64     	; 0x6892 <__ultoa_invert+0x84>
    6852:	09 f4       	brne	.+2      	; 0x6856 <__ultoa_invert+0x48>
    6854:	68 94       	set
    6856:	3f 91       	pop	r19
    6858:	2a e0       	ldi	r18, 0x0A	; 10
    685a:	26 9f       	mul	r18, r22
    685c:	11 24       	eor	r1, r1
    685e:	30 19       	sub	r19, r0
    6860:	30 5d       	subi	r19, 0xD0	; 208
    6862:	31 93       	st	Z+, r19
    6864:	de f6       	brtc	.-74     	; 0x681c <__ultoa_invert+0xe>
    6866:	cf 01       	movw	r24, r30
    6868:	08 95       	ret
    686a:	46 2f       	mov	r20, r22
    686c:	47 70       	andi	r20, 0x07	; 7
    686e:	40 5d       	subi	r20, 0xD0	; 208
    6870:	41 93       	st	Z+, r20
    6872:	b3 e0       	ldi	r27, 0x03	; 3
    6874:	0f d0       	rcall	.+30     	; 0x6894 <__ultoa_invert+0x86>
    6876:	c9 f7       	brne	.-14     	; 0x686a <__ultoa_invert+0x5c>
    6878:	f6 cf       	rjmp	.-20     	; 0x6866 <__ultoa_invert+0x58>
    687a:	46 2f       	mov	r20, r22
    687c:	4f 70       	andi	r20, 0x0F	; 15
    687e:	40 5d       	subi	r20, 0xD0	; 208
    6880:	4a 33       	cpi	r20, 0x3A	; 58
    6882:	18 f0       	brcs	.+6      	; 0x688a <__ultoa_invert+0x7c>
    6884:	49 5d       	subi	r20, 0xD9	; 217
    6886:	31 fd       	sbrc	r19, 1
    6888:	40 52       	subi	r20, 0x20	; 32
    688a:	41 93       	st	Z+, r20
    688c:	02 d0       	rcall	.+4      	; 0x6892 <__ultoa_invert+0x84>
    688e:	a9 f7       	brne	.-22     	; 0x687a <__ultoa_invert+0x6c>
    6890:	ea cf       	rjmp	.-44     	; 0x6866 <__ultoa_invert+0x58>
    6892:	b4 e0       	ldi	r27, 0x04	; 4
    6894:	a6 95       	lsr	r26
    6896:	97 95       	ror	r25
    6898:	87 95       	ror	r24
    689a:	77 95       	ror	r23
    689c:	67 95       	ror	r22
    689e:	ba 95       	dec	r27
    68a0:	c9 f7       	brne	.-14     	; 0x6894 <__ultoa_invert+0x86>
    68a2:	00 97       	sbiw	r24, 0x00	; 0
    68a4:	61 05       	cpc	r22, r1
    68a6:	71 05       	cpc	r23, r1
    68a8:	08 95       	ret
    68aa:	9b 01       	movw	r18, r22
    68ac:	ac 01       	movw	r20, r24
    68ae:	0a 2e       	mov	r0, r26
    68b0:	06 94       	lsr	r0
    68b2:	57 95       	ror	r21
    68b4:	47 95       	ror	r20
    68b6:	37 95       	ror	r19
    68b8:	27 95       	ror	r18
    68ba:	ba 95       	dec	r27
    68bc:	c9 f7       	brne	.-14     	; 0x68b0 <__ultoa_invert+0xa2>
    68be:	62 0f       	add	r22, r18
    68c0:	73 1f       	adc	r23, r19
    68c2:	84 1f       	adc	r24, r20
    68c4:	95 1f       	adc	r25, r21
    68c6:	a0 1d       	adc	r26, r0
    68c8:	08 95       	ret

000068ca <_exit>:
    68ca:	f8 94       	cli

000068cc <__stop_program>:
    68cc:	ff cf       	rjmp	.-2      	; 0x68cc <__stop_program>
