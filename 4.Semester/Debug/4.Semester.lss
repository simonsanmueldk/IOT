
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  00006290  00006324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001022  008007b0  008007b0  000068d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000068d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad8  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da77  00000000  00000000  00007448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000359b  00000000  00000000  00014ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006943  00000000  00000000  0001845a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026bc  00000000  00000000  0001eda0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000427f  00000000  00000000  0002145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c1ad  00000000  00000000  000256db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a38  00000000  00000000  00031888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	cd c5       	rjmp	.+2970   	; 0xbcc <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__vector_25>
      68:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__vector_36>
      94:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fd 25 	jmp	0x4bfa	; 0x4bfa <__vector_51>
      d0:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__vector_54>
      dc:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fd 19       	sub	r31, r13
      e6:	fd 19       	sub	r31, r13
      e8:	fd 19       	sub	r31, r13
      ea:	34 1a       	sub	r3, r20
      ec:	3c 1a       	sub	r3, r28
      ee:	51 1a       	sub	r5, r17
      f0:	fd 19       	sub	r31, r13
      f2:	fd 19       	sub	r31, r13
      f4:	34 1a       	sub	r3, r20
      f6:	3c 1a       	sub	r3, r28
      f8:	26 2a       	or	r2, r22
      fa:	96 2a       	or	r9, r22
      fc:	96 2a       	or	r9, r22
      fe:	96 2a       	or	r9, r22
     100:	96 2a       	or	r9, r22
     102:	96 2a       	or	r9, r22
     104:	96 2a       	or	r9, r22
     106:	96 2a       	or	r9, r22
     108:	26 2a       	or	r2, r22
     10a:	96 2a       	or	r9, r22
     10c:	96 2a       	or	r9, r22
     10e:	96 2a       	or	r9, r22
     110:	96 2a       	or	r9, r22
     112:	96 2a       	or	r9, r22
     114:	96 2a       	or	r9, r22
     116:	96 2a       	or	r9, r22
     118:	28 2a       	or	r2, r24
     11a:	96 2a       	or	r9, r22
     11c:	96 2a       	or	r9, r22
     11e:	96 2a       	or	r9, r22
     120:	96 2a       	or	r9, r22
     122:	96 2a       	or	r9, r22
     124:	96 2a       	or	r9, r22
     126:	96 2a       	or	r9, r22
     128:	96 2a       	or	r9, r22
     12a:	96 2a       	or	r9, r22
     12c:	96 2a       	or	r9, r22
     12e:	96 2a       	or	r9, r22
     130:	96 2a       	or	r9, r22
     132:	96 2a       	or	r9, r22
     134:	96 2a       	or	r9, r22
     136:	96 2a       	or	r9, r22
     138:	28 2a       	or	r2, r24
     13a:	96 2a       	or	r9, r22
     13c:	96 2a       	or	r9, r22
     13e:	96 2a       	or	r9, r22
     140:	96 2a       	or	r9, r22
     142:	96 2a       	or	r9, r22
     144:	96 2a       	or	r9, r22
     146:	96 2a       	or	r9, r22
     148:	96 2a       	or	r9, r22
     14a:	96 2a       	or	r9, r22
     14c:	96 2a       	or	r9, r22
     14e:	96 2a       	or	r9, r22
     150:	96 2a       	or	r9, r22
     152:	96 2a       	or	r9, r22
     154:	96 2a       	or	r9, r22
     156:	96 2a       	or	r9, r22
     158:	92 2a       	or	r9, r18
     15a:	96 2a       	or	r9, r22
     15c:	96 2a       	or	r9, r22
     15e:	96 2a       	or	r9, r22
     160:	96 2a       	or	r9, r22
     162:	96 2a       	or	r9, r22
     164:	96 2a       	or	r9, r22
     166:	96 2a       	or	r9, r22
     168:	5d 2a       	or	r5, r29
     16a:	96 2a       	or	r9, r22
     16c:	96 2a       	or	r9, r22
     16e:	96 2a       	or	r9, r22
     170:	96 2a       	or	r9, r22
     172:	96 2a       	or	r9, r22
     174:	96 2a       	or	r9, r22
     176:	96 2a       	or	r9, r22
     178:	96 2a       	or	r9, r22
     17a:	96 2a       	or	r9, r22
     17c:	96 2a       	or	r9, r22
     17e:	96 2a       	or	r9, r22
     180:	96 2a       	or	r9, r22
     182:	96 2a       	or	r9, r22
     184:	96 2a       	or	r9, r22
     186:	96 2a       	or	r9, r22
     188:	51 2a       	or	r5, r17
     18a:	96 2a       	or	r9, r22
     18c:	96 2a       	or	r9, r22
     18e:	96 2a       	or	r9, r22
     190:	96 2a       	or	r9, r22
     192:	96 2a       	or	r9, r22
     194:	96 2a       	or	r9, r22
     196:	96 2a       	or	r9, r22
     198:	75 2a       	or	r7, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <prvCheckTasksWaitingTermination>
     19e:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	4c d4       	rcall	.+2200   	; 0xa40 <vPortYield>
     1a8:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 6f 19 	call	0x32de	; 0x32de <prvProcessTimerOrBlockTask>
     1c6:	0e 94 c6 19 	call	0x338c	; 0x338c <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 e9       	ldi	r30, 0x90	; 144
     1e4:	f2 e6       	ldi	r31, 0x62	; 98
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 3b       	cpi	r26, 0xB0	; 176
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	27 e1       	ldi	r18, 0x17	; 23
     1f8:	a0 eb       	ldi	r26, 0xB0	; 176
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a2 3d       	cpi	r26, 0xD2	; 210
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <main>
     20a:	0c 94 46 31 	jmp	0x628c	; 0x628c <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <myCo2CallBack>:
mh_z19_returnCode_t rc;
uint16_t *ppm;
uint16_t *co2_data;

void myCo2CallBack(uint16_t *ppm){
	co2_data = ppm;
     210:	90 93 af 17 	sts	0x17AF, r25	; 0x8017af <co2_data+0x1>
     214:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <co2_data>
     218:	08 95       	ret

0000021a <get_CO2_data>:
};


uint16_t get_CO2_data(){
	printf(" CO2 data %d",co2_data);
     21a:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <co2_data+0x1>
     21e:	8f 93       	push	r24
     220:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <co2_data>
     224:	8f 93       	push	r24
     226:	83 e7       	ldi	r24, 0x73	; 115
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
	return co2_data;
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
}
     23a:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <co2_data>
     23e:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <co2_data+0x1>
     242:	08 95       	ret

00000244 <CO2_taskRun>:


void CO2_taskRun() {
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
	vTaskStartScheduler();
     24e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskStartScheduler>

	EventBits_t event;
	event = xEventGroupWaitBits(
     252:	cc 24       	eor	r12, r12
     254:	ca 94       	dec	r12
     256:	dc 2c       	mov	r13, r12
     258:	76 01       	movw	r14, r12
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	42 e0       	ldi	r20, 0x02	; 2
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <meassureEventGroup>
     26a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <meassureEventGroup+0x1>
     26e:	93 d0       	rcall	.+294    	; 0x396 <xEventGroupWaitBits>
	CO2_BIT,
	pdTRUE,
	pdFALSE,
	portMAX_DELAY);
	
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
     270:	40 91 b6 17 	lds	r20, 0x17B6	; 0x8017b6 <xFrequency>
     274:	50 91 b7 17 	lds	r21, 0x17B7	; 0x8017b7 <xFrequency+0x1>
     278:	60 91 b8 17 	lds	r22, 0x17B8	; 0x8017b8 <xFrequency+0x2>
     27c:	70 91 b9 17 	lds	r23, 0x17B9	; 0x8017b9 <xFrequency+0x3>
     280:	80 eb       	ldi	r24, 0xB0	; 176
     282:	97 e1       	ldi	r25, 0x17	; 23
     284:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskDelayUntil>
	
	rc = mh_z19_takeMeassuring();
     288:	0e 94 4f 23 	call	0x469e	; 0x469e <mh_z19_takeMeassuring>
     28c:	80 93 ad 17 	sts	0x17AD, r24	; 0x8017ad <rc>
	
	if (rc != MHZ19_OK)
     290:	88 23       	and	r24, r24
     292:	41 f0       	breq	.+16     	; 0x2a4 <CO2_taskRun+0x60>
	{
		printf("task got wrong");
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	9f 93       	push	r25
     29a:	8f 93       	push	r24
     29c:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
	}
	
	vTaskDelay(pdMS_TO_TICKS(500UL));
     2a4:	6f e1       	ldi	r22, 0x1F	; 31
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
	
	rc = mh_z19_getCo2Ppm(ppm);
     2b0:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <ppm>
     2b4:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <ppm+0x1>
     2b8:	0e 94 7e 23 	call	0x46fc	; 0x46fc <mh_z19_getCo2Ppm>
     2bc:	80 93 ad 17 	sts	0x17AD, r24	; 0x8017ad <rc>
	
	if (rc != MHZ19_OK)
     2c0:	88 23       	and	r24, r24
     2c2:	41 f0       	breq	.+16     	; 0x2d4 <CO2_taskRun+0x90>
	{
		printf("cant get co2 data");
     2c4:	8f e8       	ldi	r24, 0x8F	; 143
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	9f 93       	push	r25
     2ca:	8f 93       	push	r24
     2cc:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
	}
	
	myCo2CallBack(ppm);
     2d4:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <ppm>
     2d8:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <ppm+0x1>
	get_CO2_data();
     2dc:	99 df       	rcall	.-206    	; 0x210 <myCo2CallBack>
     2de:	9d df       	rcall	.-198    	; 0x21a <get_CO2_data>
	
}
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	08 95       	ret

000002ec <CO2_Sensor_Task>:


void CO2_Sensor_Task(){
	
	xEventGroupSetBits(dataReadyEventGroup, CO2_READY_BIT);
     2ec:	41 e0       	ldi	r20, 0x01	; 1
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dataReadyEventGroup>
     2f8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dataReadyEventGroup+0x1>
     2fc:	ec d0       	rcall	.+472    	; 0x4d6 <xEventGroupSetBits>
	
	xFrequency = 5000/portTICK_PERIOD_MS;
     2fe:	88 e3       	ldi	r24, 0x38	; 56
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <xFrequency>
     30a:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <xFrequency+0x1>
     30e:	a0 93 b8 17 	sts	0x17B8, r26	; 0x8017b8 <xFrequency+0x2>
     312:	b0 93 b9 17 	sts	0x17B9, r27	; 0x8017b9 <xFrequency+0x3>
	
	xLastWakeTime = xTaskGetTickCount();
     316:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xTaskGetTickCount>
     31a:	60 93 b0 17 	sts	0x17B0, r22	; 0x8017b0 <xLastWakeTime>
     31e:	70 93 b1 17 	sts	0x17B1, r23	; 0x8017b1 <xLastWakeTime+0x1>
     322:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <xLastWakeTime+0x2>
     326:	90 93 b3 17 	sts	0x17B3, r25	; 0x8017b3 <xLastWakeTime+0x3>


	for(;;)
	{
		
		CO2_taskRun();
     32a:	8c df       	rcall	.-232    	; 0x244 <CO2_taskRun>
     32c:	fe cf       	rjmp	.-4      	; 0x32a <CO2_Sensor_Task+0x3e>

0000032e <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     32e:	0f 93       	push	r16
     330:	01 11       	cpse	r16, r1
     332:	0c c0       	rjmp	.+24     	; 0x34c <prvTestWaitCondition+0x1e>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	82 23       	and	r24, r18
     33a:	93 23       	and	r25, r19
     33c:	a4 23       	and	r26, r20
     33e:	b5 23       	and	r27, r21
     340:	89 2b       	or	r24, r25
     342:	8a 2b       	or	r24, r26
     344:	8b 2b       	or	r24, r27
     346:	79 f4       	brne	.+30     	; 0x366 <prvTestWaitCondition+0x38>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	10 c0       	rjmp	.+32     	; 0x36c <prvTestWaitCondition+0x3e>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	82 23       	and	r24, r18
     352:	93 23       	and	r25, r19
     354:	a4 23       	and	r26, r20
     356:	b5 23       	and	r27, r21
     358:	28 17       	cp	r18, r24
     35a:	39 07       	cpc	r19, r25
     35c:	4a 07       	cpc	r20, r26
     35e:	5b 07       	cpc	r21, r27
     360:	21 f0       	breq	.+8      	; 0x36a <prvTestWaitCondition+0x3c>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	03 c0       	rjmp	.+6      	; 0x36c <prvTestWaitCondition+0x3e>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	01 c0       	rjmp	.+2      	; 0x36c <prvTestWaitCondition+0x3e>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <xEventGroupCreate>:
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	8f e0       	ldi	r24, 0x0F	; 15
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	af d1       	rcall	.+862    	; 0x6d8 <pvPortMalloc>
     37a:	ec 01       	movw	r28, r24
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	39 f0       	breq	.+14     	; 0x38e <xEventGroupCreate+0x1e>
     380:	fc 01       	movw	r30, r24
     382:	11 92       	st	Z+, r1
     384:	11 92       	st	Z+, r1
     386:	11 92       	st	Z+, r1
     388:	11 92       	st	Z+, r1
     38a:	cf 01       	movw	r24, r30
     38c:	8b d2       	rcall	.+1302   	; 0x8a4 <vListInitialise>
     38e:	ce 01       	movw	r24, r28
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <xEventGroupWaitBits>:
     396:	2f 92       	push	r2
     398:	3f 92       	push	r3
     39a:	4f 92       	push	r4
     39c:	5f 92       	push	r5
     39e:	6f 92       	push	r6
     3a0:	7f 92       	push	r7
     3a2:	8f 92       	push	r8
     3a4:	9f 92       	push	r9
     3a6:	af 92       	push	r10
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
     3bc:	4a 01       	movw	r8, r20
     3be:	5b 01       	movw	r10, r22
     3c0:	62 2e       	mov	r6, r18
     3c2:	70 2e       	mov	r7, r16
     3c4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskSuspendAll>
     3c8:	28 80       	ld	r2, Y
     3ca:	39 80       	ldd	r3, Y+1	; 0x01
     3cc:	4a 80       	ldd	r4, Y+2	; 0x02
     3ce:	5b 80       	ldd	r5, Y+3	; 0x03
     3d0:	a5 01       	movw	r20, r10
     3d2:	94 01       	movw	r18, r8
     3d4:	c2 01       	movw	r24, r4
     3d6:	b1 01       	movw	r22, r2
     3d8:	aa df       	rcall	.-172    	; 0x32e <prvTestWaitCondition>
     3da:	88 23       	and	r24, r24
     3dc:	a1 f0       	breq	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3de:	66 20       	and	r6, r6
     3e0:	89 f1       	breq	.+98     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3e2:	d5 01       	movw	r26, r10
     3e4:	c4 01       	movw	r24, r8
     3e6:	80 95       	com	r24
     3e8:	90 95       	com	r25
     3ea:	a0 95       	com	r26
     3ec:	b0 95       	com	r27
     3ee:	82 21       	and	r24, r2
     3f0:	93 21       	and	r25, r3
     3f2:	a4 21       	and	r26, r4
     3f4:	b5 21       	and	r27, r5
     3f6:	88 83       	st	Y, r24
     3f8:	99 83       	std	Y+1, r25	; 0x01
     3fa:	aa 83       	std	Y+2, r26	; 0x02
     3fc:	bb 83       	std	Y+3, r27	; 0x03
     3fe:	c1 2c       	mov	r12, r1
     400:	d1 2c       	mov	r13, r1
     402:	76 01       	movw	r14, r12
     404:	22 c0       	rjmp	.+68     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     406:	c1 14       	cp	r12, r1
     408:	d1 04       	cpc	r13, r1
     40a:	e1 04       	cpc	r14, r1
     40c:	f1 04       	cpc	r15, r1
     40e:	e9 f0       	breq	.+58     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     410:	61 10       	cpse	r6, r1
     412:	04 c0       	rjmp	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	ba 01       	movw	r22, r20
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	71 10       	cpse	r7, r1
     426:	74 60       	ori	r23, 0x04	; 4
     428:	48 29       	or	r20, r8
     42a:	59 29       	or	r21, r9
     42c:	6a 29       	or	r22, r10
     42e:	7b 29       	or	r23, r11
     430:	97 01       	movw	r18, r14
     432:	86 01       	movw	r16, r12
     434:	ce 01       	movw	r24, r28
     436:	04 96       	adiw	r24, 0x04	; 4
     438:	0e 94 a2 11 	call	0x2344	; 0x2344 <vTaskPlaceOnUnorderedEventList>
     43c:	21 2c       	mov	r2, r1
     43e:	31 2c       	mov	r3, r1
     440:	21 01       	movw	r4, r2
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c1 2c       	mov	r12, r1
     446:	d1 2c       	mov	r13, r1
     448:	76 01       	movw	r14, r12
     44a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
     44e:	cd 28       	or	r12, r13
     450:	ce 28       	or	r12, r14
     452:	cf 28       	or	r12, r15
     454:	59 f1       	breq	.+86     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     456:	81 11       	cpse	r24, r1
     458:	01 c0       	rjmp	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	f2 d2       	rcall	.+1508   	; 0xa40 <vPortYield>
     45c:	0e 94 76 14 	call	0x28ec	; 0x28ec <uxTaskResetEventItemValue>
     460:	6b 01       	movw	r12, r22
     462:	7c 01       	movw	r14, r24
     464:	91 fd       	sbrc	r25, 1
     466:	1f c0       	rjmp	.+62     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	0f 92       	push	r0
     46e:	c8 80       	ld	r12, Y
     470:	d9 80       	ldd	r13, Y+1	; 0x01
     472:	ea 80       	ldd	r14, Y+2	; 0x02
     474:	fb 80       	ldd	r15, Y+3	; 0x03
     476:	07 2d       	mov	r16, r7
     478:	a5 01       	movw	r20, r10
     47a:	94 01       	movw	r18, r8
     47c:	c7 01       	movw	r24, r14
     47e:	b6 01       	movw	r22, r12
     480:	56 df       	rcall	.-340    	; 0x32e <prvTestWaitCondition>
     482:	88 23       	and	r24, r24
     484:	71 f0       	breq	.+28     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     486:	66 20       	and	r6, r6
     488:	61 f0       	breq	.+24     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     48a:	80 94       	com	r8
     48c:	90 94       	com	r9
     48e:	a0 94       	com	r10
     490:	b0 94       	com	r11
     492:	8c 20       	and	r8, r12
     494:	9d 20       	and	r9, r13
     496:	ae 20       	and	r10, r14
     498:	bf 20       	and	r11, r15
     49a:	88 82       	st	Y, r8
     49c:	99 82       	std	Y+1, r9	; 0x01
     49e:	aa 82       	std	Y+2, r10	; 0x02
     4a0:	bb 82       	std	Y+3, r11	; 0x03
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	16 01       	movw	r2, r12
     4a8:	27 01       	movw	r4, r14
     4aa:	55 24       	eor	r5, r5
     4ac:	c2 01       	movw	r24, r4
     4ae:	b1 01       	movw	r22, r2
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	9f 90       	pop	r9
     4c6:	8f 90       	pop	r8
     4c8:	7f 90       	pop	r7
     4ca:	6f 90       	pop	r6
     4cc:	5f 90       	pop	r5
     4ce:	4f 90       	pop	r4
     4d0:	3f 90       	pop	r3
     4d2:	2f 90       	pop	r2
     4d4:	08 95       	ret

000004d6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ec 01       	movw	r28, r24
     4f4:	6a 01       	movw	r12, r20
     4f6:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4f8:	8c 01       	movw	r16, r24
     4fa:	09 5f       	subi	r16, 0xF9	; 249
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     4fe:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     502:	eb 85       	ldd	r30, Y+11	; 0x0b
     504:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     506:	88 81       	ld	r24, Y
     508:	99 81       	ldd	r25, Y+1	; 0x01
     50a:	aa 81       	ldd	r26, Y+2	; 0x02
     50c:	bb 81       	ldd	r27, Y+3	; 0x03
     50e:	c8 2a       	or	r12, r24
     510:	d9 2a       	or	r13, r25
     512:	ea 2a       	or	r14, r26
     514:	fb 2a       	or	r15, r27
     516:	c8 82       	st	Y, r12
     518:	d9 82       	std	Y+1, r13	; 0x01
     51a:	ea 82       	std	Y+2, r14	; 0x02
     51c:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     51e:	c1 2c       	mov	r12, r1
     520:	d1 2c       	mov	r13, r1
     522:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     524:	3d c0       	rjmp	.+122    	; 0x5a0 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     526:	a4 80       	ldd	r10, Z+4	; 0x04
     528:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     52a:	80 81       	ld	r24, Z
     52c:	91 81       	ldd	r25, Z+1	; 0x01
     52e:	a2 81       	ldd	r26, Z+2	; 0x02
     530:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     532:	ac 01       	movw	r20, r24
     534:	bd 01       	movw	r22, r26
     536:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     538:	b2 fd       	sbrc	r27, 2
     53a:	0e c0       	rjmp	.+28     	; 0x558 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     53c:	48 80       	ld	r4, Y
     53e:	59 80       	ldd	r5, Y+1	; 0x01
     540:	6a 80       	ldd	r6, Y+2	; 0x02
     542:	7b 80       	ldd	r7, Y+3	; 0x03
     544:	44 22       	and	r4, r20
     546:	55 22       	and	r5, r21
     548:	66 22       	and	r6, r22
     54a:	77 22       	and	r7, r23
     54c:	45 28       	or	r4, r5
     54e:	46 28       	or	r4, r6
     550:	47 28       	or	r4, r7
     552:	89 f4       	brne	.+34     	; 0x576 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	12 c0       	rjmp	.+36     	; 0x57c <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     558:	48 80       	ld	r4, Y
     55a:	59 80       	ldd	r5, Y+1	; 0x01
     55c:	6a 80       	ldd	r6, Y+2	; 0x02
     55e:	7b 80       	ldd	r7, Y+3	; 0x03
     560:	44 22       	and	r4, r20
     562:	55 22       	and	r5, r21
     564:	66 22       	and	r6, r22
     566:	77 22       	and	r7, r23
     568:	44 15       	cp	r20, r4
     56a:	55 05       	cpc	r21, r5
     56c:	66 05       	cpc	r22, r6
     56e:	77 05       	cpc	r23, r7
     570:	21 f0       	breq	.+8      	; 0x57a <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	03 c0       	rjmp	.+6      	; 0x57c <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	01 c0       	rjmp	.+2      	; 0x57c <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     57a:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     57c:	22 23       	and	r18, r18
     57e:	71 f0       	breq	.+28     	; 0x59c <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     580:	b0 ff       	sbrs	r27, 0
     582:	04 c0       	rjmp	.+8      	; 0x58c <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     584:	c4 2a       	or	r12, r20
     586:	d5 2a       	or	r13, r21
     588:	e6 2a       	or	r14, r22
     58a:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     58c:	48 81       	ld	r20, Y
     58e:	59 81       	ldd	r21, Y+1	; 0x01
     590:	6a 81       	ldd	r22, Y+2	; 0x02
     592:	7b 81       	ldd	r23, Y+3	; 0x03
     594:	72 60       	ori	r23, 0x02	; 2
     596:	cf 01       	movw	r24, r30
     598:	0e 94 dd 12 	call	0x25ba	; 0x25ba <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     59c:	ea 2d       	mov	r30, r10
     59e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     5a0:	e0 17       	cp	r30, r16
     5a2:	f1 07       	cpc	r31, r17
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <xEventGroupSetBits+0xd2>
     5a6:	bf cf       	rjmp	.-130    	; 0x526 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     5a8:	c0 94       	com	r12
     5aa:	d0 94       	com	r13
     5ac:	e0 94       	com	r14
     5ae:	f0 94       	com	r15
     5b0:	88 81       	ld	r24, Y
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	aa 81       	ldd	r26, Y+2	; 0x02
     5b6:	bb 81       	ldd	r27, Y+3	; 0x03
     5b8:	c8 22       	and	r12, r24
     5ba:	d9 22       	and	r13, r25
     5bc:	ea 22       	and	r14, r26
     5be:	fb 22       	and	r15, r27
     5c0:	c8 82       	st	Y, r12
     5c2:	d9 82       	std	Y+1, r13	; 0x01
     5c4:	ea 82       	std	Y+2, r14	; 0x02
     5c6:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     5c8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     5cc:	68 81       	ld	r22, Y
     5ce:	79 81       	ldd	r23, Y+1	; 0x01
     5d0:	8a 81       	ldd	r24, Y+2	; 0x02
     5d2:	9b 81       	ldd	r25, Y+3	; 0x03
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	7f 90       	pop	r7
     5ea:	6f 90       	pop	r6
     5ec:	5f 90       	pop	r5
     5ee:	4f 90       	pop	r4
     5f0:	08 95       	ret

000005f2 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5f2:	ec eb       	ldi	r30, 0xBC	; 188
     5f4:	f7 e0       	ldi	r31, 0x07	; 7
     5f6:	a0 ec       	ldi	r26, 0xC0	; 192
     5f8:	b7 e0       	ldi	r27, 0x07	; 7
     5fa:	b1 83       	std	Z+1, r27	; 0x01
     5fc:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     5fe:	13 82       	std	Z+3, r1	; 0x03
     600:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     602:	e8 e6       	ldi	r30, 0x68	; 104
     604:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     606:	f0 93 bb 07 	sts	0x07BB, r31	; 0x8007bb <pxEnd+0x1>
     60a:	e0 93 ba 07 	sts	0x07BA, r30	; 0x8007ba <pxEnd>
    pxEnd->xBlockSize = 0;
     60e:	13 82       	std	Z+3, r1	; 0x03
     610:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     612:	11 82       	std	Z+1, r1	; 0x01
     614:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     616:	88 ea       	ldi	r24, 0xA8	; 168
     618:	9d e0       	ldi	r25, 0x0D	; 13
     61a:	13 96       	adiw	r26, 0x03	; 3
     61c:	9c 93       	st	X, r25
     61e:	8e 93       	st	-X, r24
     620:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     622:	ed 93       	st	X+, r30
     624:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     626:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <xMinimumEverFreeBytesRemaining+0x1>
     62a:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     62e:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <xFreeBytesRemaining+0x1>
     632:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e8       	ldi	r25, 0x80	; 128
     63a:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <__data_end+0x1>
     63e:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <__data_end>
     642:	08 95       	ret

00000644 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     64a:	ac eb       	ldi	r26, 0xBC	; 188
     64c:	b7 e0       	ldi	r27, 0x07	; 7
     64e:	01 c0       	rjmp	.+2      	; 0x652 <prvInsertBlockIntoFreeList+0xe>
     650:	df 01       	movw	r26, r30
     652:	ed 91       	ld	r30, X+
     654:	fc 91       	ld	r31, X
     656:	11 97       	sbiw	r26, 0x01	; 1
     658:	ec 17       	cp	r30, r28
     65a:	fd 07       	cpc	r31, r29
     65c:	c8 f3       	brcs	.-14     	; 0x650 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     65e:	12 96       	adiw	r26, 0x02	; 2
     660:	8d 91       	ld	r24, X+
     662:	9c 91       	ld	r25, X
     664:	13 97       	sbiw	r26, 0x03	; 3
     666:	9d 01       	movw	r18, r26
     668:	28 0f       	add	r18, r24
     66a:	39 1f       	adc	r19, r25
     66c:	c2 17       	cp	r28, r18
     66e:	d3 07       	cpc	r29, r19
     670:	49 f4       	brne	.+18     	; 0x684 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     672:	2a 81       	ldd	r18, Y+2	; 0x02
     674:	3b 81       	ldd	r19, Y+3	; 0x03
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
     67a:	13 96       	adiw	r26, 0x03	; 3
     67c:	9c 93       	st	X, r25
     67e:	8e 93       	st	-X, r24
     680:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     682:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	9e 01       	movw	r18, r28
     68a:	28 0f       	add	r18, r24
     68c:	39 1f       	adc	r19, r25
     68e:	e2 17       	cp	r30, r18
     690:	f3 07       	cpc	r31, r19
     692:	c1 f4       	brne	.+48     	; 0x6c4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     694:	20 91 ba 07 	lds	r18, 0x07BA	; 0x8007ba <pxEnd>
     698:	30 91 bb 07 	lds	r19, 0x07BB	; 0x8007bb <pxEnd+0x1>
     69c:	e2 17       	cp	r30, r18
     69e:	f3 07       	cpc	r31, r19
     6a0:	71 f0       	breq	.+28     	; 0x6be <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     6a2:	22 81       	ldd	r18, Z+2	; 0x02
     6a4:	33 81       	ldd	r19, Z+3	; 0x03
     6a6:	82 0f       	add	r24, r18
     6a8:	93 1f       	adc	r25, r19
     6aa:	9b 83       	std	Y+3, r25	; 0x03
     6ac:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	11 97       	sbiw	r26, 0x01	; 1
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	99 83       	std	Y+1, r25	; 0x01
     6ba:	88 83       	st	Y, r24
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6be:	39 83       	std	Y+1, r19	; 0x01
     6c0:	28 83       	st	Y, r18
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6c4:	f9 83       	std	Y+1, r31	; 0x01
     6c6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6c8:	ca 17       	cp	r28, r26
     6ca:	db 07       	cpc	r29, r27
     6cc:	11 f0       	breq	.+4      	; 0x6d2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     6ce:	cd 93       	st	X+, r28
     6d0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     6e6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     6ea:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <pxEnd>
     6ee:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <pxEnd+0x1>
     6f2:	89 2b       	or	r24, r25
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     6f6:	7d df       	rcall	.-262    	; 0x5f2 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     6f8:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <__data_end>
     6fc:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <__data_end+0x1>
     700:	80 23       	and	r24, r16
     702:	91 23       	and	r25, r17
     704:	89 2b       	or	r24, r25
     706:	09 f0       	breq	.+2      	; 0x70a <pvPortMalloc+0x32>
     708:	76 c0       	rjmp	.+236    	; 0x7f6 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     70a:	01 15       	cp	r16, r1
     70c:	11 05       	cpc	r17, r1
     70e:	49 f0       	breq	.+18     	; 0x722 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     710:	c8 01       	movw	r24, r16
     712:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     714:	08 17       	cp	r16, r24
     716:	19 07       	cpc	r17, r25
     718:	18 f0       	brcs	.+6      	; 0x720 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	01 c0       	rjmp	.+2      	; 0x722 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     720:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     722:	01 15       	cp	r16, r1
     724:	11 05       	cpc	r17, r1
     726:	09 f4       	brne	.+2      	; 0x72a <pvPortMalloc+0x52>
     728:	69 c0       	rjmp	.+210    	; 0x7fc <pvPortMalloc+0x124>
     72a:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <xFreeBytesRemaining>
     72e:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <xFreeBytesRemaining+0x1>
     732:	80 17       	cp	r24, r16
     734:	91 07       	cpc	r25, r17
     736:	08 f4       	brcc	.+2      	; 0x73a <pvPortMalloc+0x62>
     738:	64 c0       	rjmp	.+200    	; 0x802 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     73a:	c0 91 bc 07 	lds	r28, 0x07BC	; 0x8007bc <xStart>
     73e:	d0 91 bd 07 	lds	r29, 0x07BD	; 0x8007bd <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     742:	ec eb       	ldi	r30, 0xBC	; 188
     744:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     746:	02 c0       	rjmp	.+4      	; 0x74c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     748:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     74a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	9b 81       	ldd	r25, Y+3	; 0x03
     750:	80 17       	cp	r24, r16
     752:	91 07       	cpc	r25, r17
     754:	20 f4       	brcc	.+8      	; 0x75e <pvPortMalloc+0x86>
     756:	88 81       	ld	r24, Y
     758:	99 81       	ldd	r25, Y+1	; 0x01
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	a9 f7       	brne	.-22     	; 0x748 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     75e:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <pxEnd>
     762:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <pxEnd+0x1>
     766:	c8 17       	cp	r28, r24
     768:	d9 07       	cpc	r29, r25
     76a:	09 f4       	brne	.+2      	; 0x76e <pvPortMalloc+0x96>
     76c:	4d c0       	rjmp	.+154    	; 0x808 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     76e:	e0 80       	ld	r14, Z
     770:	f1 80       	ldd	r15, Z+1	; 0x01
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	e8 0e       	add	r14, r24
     776:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     778:	88 81       	ld	r24, Y
     77a:	99 81       	ldd	r25, Y+1	; 0x01
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     780:	2a 81       	ldd	r18, Y+2	; 0x02
     782:	3b 81       	ldd	r19, Y+3	; 0x03
     784:	20 1b       	sub	r18, r16
     786:	31 0b       	sbc	r19, r17
     788:	29 30       	cpi	r18, 0x09	; 9
     78a:	31 05       	cpc	r19, r1
     78c:	48 f0       	brcs	.+18     	; 0x7a0 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     78e:	ce 01       	movw	r24, r28
     790:	80 0f       	add	r24, r16
     792:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     794:	fc 01       	movw	r30, r24
     796:	33 83       	std	Z+3, r19	; 0x03
     798:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     79a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     79c:	0a 83       	std	Y+2, r16	; 0x02
     79e:	52 df       	rcall	.-348    	; 0x644 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7a0:	2a 81       	ldd	r18, Y+2	; 0x02
     7a2:	3b 81       	ldd	r19, Y+3	; 0x03
     7a4:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <xFreeBytesRemaining>
     7a8:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <xFreeBytesRemaining+0x1>
     7ac:	82 1b       	sub	r24, r18
     7ae:	93 0b       	sbc	r25, r19
     7b0:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <xFreeBytesRemaining+0x1>
     7b4:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     7b8:	40 91 b6 07 	lds	r20, 0x07B6	; 0x8007b6 <xMinimumEverFreeBytesRemaining>
     7bc:	50 91 b7 07 	lds	r21, 0x07B7	; 0x8007b7 <xMinimumEverFreeBytesRemaining+0x1>
     7c0:	84 17       	cp	r24, r20
     7c2:	95 07       	cpc	r25, r21
     7c4:	20 f4       	brcc	.+8      	; 0x7ce <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     7c6:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <xMinimumEverFreeBytesRemaining+0x1>
     7ca:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     7ce:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <__data_end>
     7d2:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <__data_end+0x1>
     7d6:	28 2b       	or	r18, r24
     7d8:	39 2b       	or	r19, r25
     7da:	3b 83       	std	Y+3, r19	; 0x03
     7dc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     7de:	19 82       	std	Y+1, r1	; 0x01
     7e0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     7e2:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xNumberOfSuccessfulAllocations>
     7e6:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xNumberOfSuccessfulAllocations+0x1>
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	90 93 b5 07 	sts	0x07B5, r25	; 0x8007b5 <xNumberOfSuccessfulAllocations+0x1>
     7f0:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xNumberOfSuccessfulAllocations>
     7f4:	0b c0       	rjmp	.+22     	; 0x80c <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     7f6:	e1 2c       	mov	r14, r1
     7f8:	f1 2c       	mov	r15, r1
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <pvPortMalloc+0x134>
     7fc:	e1 2c       	mov	r14, r1
     7fe:	f1 2c       	mov	r15, r1
     800:	05 c0       	rjmp	.+10     	; 0x80c <pvPortMalloc+0x134>
     802:	e1 2c       	mov	r14, r1
     804:	f1 2c       	mov	r15, r1
     806:	02 c0       	rjmp	.+4      	; 0x80c <pvPortMalloc+0x134>
     808:	e1 2c       	mov	r14, r1
     80a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     80c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     810:	e1 14       	cp	r14, r1
     812:	f1 04       	cpc	r15, r1
     814:	11 f4       	brne	.+4      	; 0x81a <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     816:	0e 94 86 1a 	call	0x350c	; 0x350c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     81a:	c7 01       	movw	r24, r14
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	08 95       	ret

0000082a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	91 f1       	breq	.+100    	; 0x89a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     836:	ec 01       	movw	r28, r24
     838:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     83a:	4a 81       	ldd	r20, Y+2	; 0x02
     83c:	5b 81       	ldd	r21, Y+3	; 0x03
     83e:	20 91 b0 07 	lds	r18, 0x07B0	; 0x8007b0 <__data_end>
     842:	30 91 b1 07 	lds	r19, 0x07B1	; 0x8007b1 <__data_end+0x1>
     846:	ba 01       	movw	r22, r20
     848:	62 23       	and	r22, r18
     84a:	73 23       	and	r23, r19
     84c:	67 2b       	or	r22, r23
     84e:	29 f1       	breq	.+74     	; 0x89a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     850:	68 81       	ld	r22, Y
     852:	79 81       	ldd	r23, Y+1	; 0x01
     854:	67 2b       	or	r22, r23
     856:	09 f5       	brne	.+66     	; 0x89a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     858:	20 95       	com	r18
     85a:	30 95       	com	r19
     85c:	24 23       	and	r18, r20
     85e:	35 23       	and	r19, r21
     860:	3b 83       	std	Y+3, r19	; 0x03
     862:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     864:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <xFreeBytesRemaining>
     870:	30 91 b9 07 	lds	r19, 0x07B9	; 0x8007b9 <xFreeBytesRemaining+0x1>
     874:	82 0f       	add	r24, r18
     876:	93 1f       	adc	r25, r19
     878:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <xFreeBytesRemaining+0x1>
     87c:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     880:	ce 01       	movw	r24, r28
     882:	e0 de       	rcall	.-576    	; 0x644 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     884:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <xNumberOfSuccessfulFrees>
     888:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <xNumberOfSuccessfulFrees+0x1>
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <xNumberOfSuccessfulFrees+0x1>
     892:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     896:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     8a4:	fc 01       	movw	r30, r24
     8a6:	03 96       	adiw	r24, 0x03	; 3
     8a8:	92 83       	std	Z+2, r25	; 0x02
     8aa:	81 83       	std	Z+1, r24	; 0x01
     8ac:	4f ef       	ldi	r20, 0xFF	; 255
     8ae:	5f ef       	ldi	r21, 0xFF	; 255
     8b0:	ba 01       	movw	r22, r20
     8b2:	43 83       	std	Z+3, r20	; 0x03
     8b4:	54 83       	std	Z+4, r21	; 0x04
     8b6:	65 83       	std	Z+5, r22	; 0x05
     8b8:	76 83       	std	Z+6, r23	; 0x06
     8ba:	90 87       	std	Z+8, r25	; 0x08
     8bc:	87 83       	std	Z+7, r24	; 0x07
     8be:	92 87       	std	Z+10, r25	; 0x0a
     8c0:	81 87       	std	Z+9, r24	; 0x09
     8c2:	10 82       	st	Z, r1
     8c4:	08 95       	ret

000008c6 <vListInitialiseItem>:
     8c6:	fc 01       	movw	r30, r24
     8c8:	13 86       	std	Z+11, r1	; 0x0b
     8ca:	12 86       	std	Z+10, r1	; 0x0a
     8cc:	08 95       	ret

000008ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8d8:	08 81       	ld	r16, Y
     8da:	19 81       	ldd	r17, Y+1	; 0x01
     8dc:	2a 81       	ldd	r18, Y+2	; 0x02
     8de:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     8e0:	0f 3f       	cpi	r16, 0xFF	; 255
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	14 07       	cpc	r17, r20
     8e6:	24 07       	cpc	r18, r20
     8e8:	34 07       	cpc	r19, r20
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     8ec:	fc 01       	movw	r30, r24
     8ee:	a1 85       	ldd	r26, Z+9	; 0x09
     8f0:	b2 85       	ldd	r27, Z+10	; 0x0a
     8f2:	11 c0       	rjmp	.+34     	; 0x916 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     8f4:	dc 01       	movw	r26, r24
     8f6:	13 96       	adiw	r26, 0x03	; 3
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <vListInsert+0x2e>
     8fa:	df 01       	movw	r26, r30
     8fc:	14 96       	adiw	r26, 0x04	; 4
     8fe:	ed 91       	ld	r30, X+
     900:	fc 91       	ld	r31, X
     902:	15 97       	sbiw	r26, 0x05	; 5
     904:	40 81       	ld	r20, Z
     906:	51 81       	ldd	r21, Z+1	; 0x01
     908:	62 81       	ldd	r22, Z+2	; 0x02
     90a:	73 81       	ldd	r23, Z+3	; 0x03
     90c:	04 17       	cp	r16, r20
     90e:	15 07       	cpc	r17, r21
     910:	26 07       	cpc	r18, r22
     912:	37 07       	cpc	r19, r23
     914:	90 f7       	brcc	.-28     	; 0x8fa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     916:	14 96       	adiw	r26, 0x04	; 4
     918:	ed 91       	ld	r30, X+
     91a:	fc 91       	ld	r31, X
     91c:	15 97       	sbiw	r26, 0x05	; 5
     91e:	fd 83       	std	Y+5, r31	; 0x05
     920:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     922:	d7 83       	std	Z+7, r29	; 0x07
     924:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     926:	bf 83       	std	Y+7, r27	; 0x07
     928:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     92a:	15 96       	adiw	r26, 0x05	; 5
     92c:	dc 93       	st	X, r29
     92e:	ce 93       	st	-X, r28
     930:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     932:	9b 87       	std	Y+11, r25	; 0x0b
     934:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     936:	fc 01       	movw	r30, r24
     938:	20 81       	ld	r18, Z
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	20 83       	st	Z, r18
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	08 95       	ret

00000948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     94e:	a2 85       	ldd	r26, Z+10	; 0x0a
     950:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     952:	c4 81       	ldd	r28, Z+4	; 0x04
     954:	d5 81       	ldd	r29, Z+5	; 0x05
     956:	86 81       	ldd	r24, Z+6	; 0x06
     958:	97 81       	ldd	r25, Z+7	; 0x07
     95a:	9f 83       	std	Y+7, r25	; 0x07
     95c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     95e:	c6 81       	ldd	r28, Z+6	; 0x06
     960:	d7 81       	ldd	r29, Z+7	; 0x07
     962:	84 81       	ldd	r24, Z+4	; 0x04
     964:	95 81       	ldd	r25, Z+5	; 0x05
     966:	9d 83       	std	Y+5, r25	; 0x05
     968:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	8d 91       	ld	r24, X+
     96e:	9c 91       	ld	r25, X
     970:	12 97       	sbiw	r26, 0x02	; 2
     972:	e8 17       	cp	r30, r24
     974:	f9 07       	cpc	r31, r25
     976:	31 f4       	brne	.+12     	; 0x984 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     978:	86 81       	ldd	r24, Z+6	; 0x06
     97a:	97 81       	ldd	r25, Z+7	; 0x07
     97c:	12 96       	adiw	r26, 0x02	; 2
     97e:	9c 93       	st	X, r25
     980:	8e 93       	st	-X, r24
     982:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     984:	13 86       	std	Z+11, r1	; 0x0b
     986:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     988:	8c 91       	ld	r24, X
     98a:	81 50       	subi	r24, 0x01	; 1
     98c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     98e:	8c 91       	ld	r24, X
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     996:	a8 95       	wdr
     998:	90 ec       	ldi	r25, 0xC0	; 192
     99a:	88 e1       	ldi	r24, 0x18	; 24
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	a8 95       	wdr
     9a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9ac:	08 95       	ret

000009ae <pxPortInitialiseStack>:
     9ae:	fc 01       	movw	r30, r24
     9b0:	60 83       	st	Z, r22
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	70 83       	st	Z, r23
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	10 82       	st	Z, r1
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	10 82       	st	Z, r1
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	20 e8       	ldi	r18, 0x80	; 128
     9c2:	20 83       	st	Z, r18
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	10 82       	st	Z, r1
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	10 82       	st	Z, r1
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
     9d0:	77 97       	sbiw	r30, 0x17	; 23
     9d2:	40 83       	st	Z, r20
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	50 83       	st	Z, r21
     9d8:	86 97       	sbiw	r24, 0x26	; 38
     9da:	08 95       	ret

000009dc <xPortStartScheduler>:
     9dc:	dc df       	rcall	.-72     	; 0x996 <prvSetupTimerInterrupt>
     9de:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
     9e2:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
     9e6:	cd 91       	ld	r28, X+
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	dd 91       	ld	r29, X+
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	8f 90       	pop	r8
     a1e:	7f 90       	pop	r7
     a20:	6f 90       	pop	r6
     a22:	5f 90       	pop	r5
     a24:	4f 90       	pop	r4
     a26:	3f 90       	pop	r3
     a28:	2f 90       	pop	r2
     a2a:	1f 90       	pop	r1
     a2c:	0f 90       	pop	r0
     a2e:	0c be       	out	0x3c, r0	; 60
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	08 95       	ret
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	08 95       	ret

00000a40 <vPortYield>:
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	0f 92       	push	r0
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	0c b6       	in	r0, 0x3c	; 60
     a4e:	0f 92       	push	r0
     a50:	1f 92       	push	r1
     a52:	11 24       	eor	r1, r1
     a54:	2f 92       	push	r2
     a56:	3f 92       	push	r3
     a58:	4f 92       	push	r4
     a5a:	5f 92       	push	r5
     a5c:	6f 92       	push	r6
     a5e:	7f 92       	push	r7
     a60:	8f 92       	push	r8
     a62:	9f 92       	push	r9
     a64:	af 92       	push	r10
     a66:	bf 92       	push	r11
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	2f 93       	push	r18
     a76:	3f 93       	push	r19
     a78:	4f 93       	push	r20
     a7a:	5f 93       	push	r21
     a7c:	6f 93       	push	r22
     a7e:	7f 93       	push	r23
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
     a90:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
     a94:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
     a98:	0d b6       	in	r0, 0x3d	; 61
     a9a:	0d 92       	st	X+, r0
     a9c:	0e b6       	in	r0, 0x3e	; 62
     a9e:	0d 92       	st	X+, r0
     aa0:	0e 94 26 11 	call	0x224c	; 0x224c <vTaskSwitchContext>
     aa4:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
     aa8:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
     aac:	cd 91       	ld	r28, X+
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	dd 91       	ld	r29, X+
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	3f 90       	pop	r3
     aee:	2f 90       	pop	r2
     af0:	1f 90       	pop	r1
     af2:	0f 90       	pop	r0
     af4:	0c be       	out	0x3c, r0	; 60
     af6:	0f 90       	pop	r0
     af8:	0b be       	out	0x3b, r0	; 59
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	08 95       	ret

00000b02 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	0f 92       	push	r0
     b0a:	0b b6       	in	r0, 0x3b	; 59
     b0c:	0f 92       	push	r0
     b0e:	0c b6       	in	r0, 0x3c	; 60
     b10:	0f 92       	push	r0
     b12:	1f 92       	push	r1
     b14:	11 24       	eor	r1, r1
     b16:	2f 92       	push	r2
     b18:	3f 92       	push	r3
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
     b52:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
     b56:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
     b5a:	0d b6       	in	r0, 0x3d	; 61
     b5c:	0d 92       	st	X+, r0
     b5e:	0e b6       	in	r0, 0x3e	; 62
     b60:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b62:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     b64:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <xTaskIncrementTick>
     b68:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b6a:	0e 94 26 11 	call	0x224c	; 0x224c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     b6e:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
     b72:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
     b76:	cd 91       	ld	r28, X+
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	dd 91       	ld	r29, X+
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	7f 90       	pop	r7
     bb0:	6f 90       	pop	r6
     bb2:	5f 90       	pop	r5
     bb4:	4f 90       	pop	r4
     bb6:	3f 90       	pop	r3
     bb8:	2f 90       	pop	r2
     bba:	1f 90       	pop	r1
     bbc:	0f 90       	pop	r0
     bbe:	0c be       	out	0x3c, r0	; 60
     bc0:	0f 90       	pop	r0
     bc2:	0b be       	out	0x3b, r0	; 59
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     bca:	08 95       	ret

00000bcc <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     bcc:	9a df       	rcall	.-204    	; 0xb02 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     bce:	18 95       	reti

00000bd0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	0f 92       	push	r0
     bd6:	fc 01       	movw	r30, r24
     bd8:	86 8d       	ldd	r24, Z+30	; 0x1e
     bda:	81 11       	cpse	r24, r1
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <prvIsQueueEmpty+0x12>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <prvIsQueueEmpty+0x14>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	08 95       	ret

00000bea <prvIsQueueFull>:
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	0f 92       	push	r0
     bf0:	fc 01       	movw	r30, r24
     bf2:	26 8d       	ldd	r18, Z+30	; 0x1e
     bf4:	87 8d       	ldd	r24, Z+31	; 0x1f
     bf6:	28 13       	cpse	r18, r24
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <prvIsQueueFull+0x14>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <prvIsQueueFull+0x16>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	08 95       	ret

00000c06 <prvCopyDataToQueue>:
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	04 2f       	mov	r16, r20
     c12:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c14:	48 a1       	ldd	r20, Y+32	; 0x20
     c16:	41 11       	cpse	r20, r1
     c18:	0c c0       	rjmp	.+24     	; 0xc32 <prvCopyDataToQueue+0x2c>
     c1a:	88 81       	ld	r24, Y
     c1c:	99 81       	ldd	r25, Y+1	; 0x01
     c1e:	89 2b       	or	r24, r25
     c20:	09 f0       	breq	.+2      	; 0xc24 <prvCopyDataToQueue+0x1e>
     c22:	42 c0       	rjmp	.+132    	; 0xca8 <prvCopyDataToQueue+0xa2>
     c24:	8c 81       	ldd	r24, Y+4	; 0x04
     c26:	9d 81       	ldd	r25, Y+5	; 0x05
     c28:	0e 94 1b 14 	call	0x2836	; 0x2836 <xTaskPriorityDisinherit>
     c2c:	1d 82       	std	Y+5, r1	; 0x05
     c2e:	1c 82       	std	Y+4, r1	; 0x04
     c30:	42 c0       	rjmp	.+132    	; 0xcb6 <prvCopyDataToQueue+0xb0>
     c32:	01 11       	cpse	r16, r1
     c34:	17 c0       	rjmp	.+46     	; 0xc64 <prvCopyDataToQueue+0x5e>
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <memcpy>
     c40:	28 a1       	ldd	r18, Y+32	; 0x20
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	9b 81       	ldd	r25, Y+3	; 0x03
     c46:	82 0f       	add	r24, r18
     c48:	91 1d       	adc	r25, r1
     c4a:	9b 83       	std	Y+3, r25	; 0x03
     c4c:	8a 83       	std	Y+2, r24	; 0x02
     c4e:	2c 81       	ldd	r18, Y+4	; 0x04
     c50:	3d 81       	ldd	r19, Y+5	; 0x05
     c52:	82 17       	cp	r24, r18
     c54:	93 07       	cpc	r25, r19
     c56:	50 f1       	brcs	.+84     	; 0xcac <prvCopyDataToQueue+0xa6>
     c58:	88 81       	ld	r24, Y
     c5a:	99 81       	ldd	r25, Y+1	; 0x01
     c5c:	9b 83       	std	Y+3, r25	; 0x03
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	29 c0       	rjmp	.+82     	; 0xcb6 <prvCopyDataToQueue+0xb0>
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <memcpy>
     c6e:	88 a1       	ldd	r24, Y+32	; 0x20
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	91 95       	neg	r25
     c74:	81 95       	neg	r24
     c76:	91 09       	sbc	r25, r1
     c78:	2e 81       	ldd	r18, Y+6	; 0x06
     c7a:	3f 81       	ldd	r19, Y+7	; 0x07
     c7c:	28 0f       	add	r18, r24
     c7e:	39 1f       	adc	r19, r25
     c80:	3f 83       	std	Y+7, r19	; 0x07
     c82:	2e 83       	std	Y+6, r18	; 0x06
     c84:	48 81       	ld	r20, Y
     c86:	59 81       	ldd	r21, Y+1	; 0x01
     c88:	24 17       	cp	r18, r20
     c8a:	35 07       	cpc	r19, r21
     c8c:	30 f4       	brcc	.+12     	; 0xc9a <prvCopyDataToQueue+0x94>
     c8e:	2c 81       	ldd	r18, Y+4	; 0x04
     c90:	3d 81       	ldd	r19, Y+5	; 0x05
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	9f 83       	std	Y+7, r25	; 0x07
     c98:	8e 83       	std	Y+6, r24	; 0x06
     c9a:	02 30       	cpi	r16, 0x02	; 2
     c9c:	49 f4       	brne	.+18     	; 0xcb0 <prvCopyDataToQueue+0xaa>
     c9e:	11 23       	and	r17, r17
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <prvCopyDataToQueue+0xae>
     ca2:	11 50       	subi	r17, 0x01	; 1
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <prvCopyDataToQueue+0xb0>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <prvCopyDataToQueue+0xb0>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <prvCopyDataToQueue+0xb0>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <prvCopyDataToQueue+0xb0>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	1f 5f       	subi	r17, 0xFF	; 255
     cb8:	1e 8f       	std	Y+30, r17	; 0x1e
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <prvCopyDataFromQueue>:
     cc4:	fc 01       	movw	r30, r24
     cc6:	40 a1       	ldd	r20, Z+32	; 0x20
     cc8:	44 23       	and	r20, r20
     cca:	a9 f0       	breq	.+42     	; 0xcf6 <prvCopyDataFromQueue+0x32>
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	26 81       	ldd	r18, Z+6	; 0x06
     cd0:	37 81       	ldd	r19, Z+7	; 0x07
     cd2:	24 0f       	add	r18, r20
     cd4:	35 1f       	adc	r19, r21
     cd6:	37 83       	std	Z+7, r19	; 0x07
     cd8:	26 83       	std	Z+6, r18	; 0x06
     cda:	84 81       	ldd	r24, Z+4	; 0x04
     cdc:	95 81       	ldd	r25, Z+5	; 0x05
     cde:	28 17       	cp	r18, r24
     ce0:	39 07       	cpc	r19, r25
     ce2:	20 f0       	brcs	.+8      	; 0xcec <prvCopyDataFromQueue+0x28>
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	97 83       	std	Z+7, r25	; 0x07
     cea:	86 83       	std	Z+6, r24	; 0x06
     cec:	cb 01       	movw	r24, r22
     cee:	66 81       	ldd	r22, Z+6	; 0x06
     cf0:	77 81       	ldd	r23, Z+7	; 0x07
     cf2:	0c 94 c9 2d 	jmp	0x5b92	; 0x5b92 <memcpy>
     cf6:	08 95       	ret

00000cf8 <prvUnlockQueue>:
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	0f 92       	push	r0
     d06:	1a a1       	ldd	r17, Y+34	; 0x22
     d08:	0b c0       	rjmp	.+22     	; 0xd20 <prvUnlockQueue+0x28>
     d0a:	8b 89       	ldd	r24, Y+19	; 0x13
     d0c:	88 23       	and	r24, r24
     d0e:	51 f0       	breq	.+20     	; 0xd24 <prvUnlockQueue+0x2c>
     d10:	ce 01       	movw	r24, r28
     d12:	43 96       	adiw	r24, 0x13	; 19
     d14:	0e 94 2e 12 	call	0x245c	; 0x245c <xTaskRemoveFromEventList>
     d18:	81 11       	cpse	r24, r1
     d1a:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskMissedYield>
     d1e:	11 50       	subi	r17, 0x01	; 1
     d20:	11 16       	cp	r1, r17
     d22:	9c f3       	brlt	.-26     	; 0xd0a <prvUnlockQueue+0x12>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	8a a3       	std	Y+34, r24	; 0x22
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	0f 92       	push	r0
     d32:	19 a1       	ldd	r17, Y+33	; 0x21
     d34:	0b c0       	rjmp	.+22     	; 0xd4c <prvUnlockQueue+0x54>
     d36:	88 85       	ldd	r24, Y+8	; 0x08
     d38:	88 23       	and	r24, r24
     d3a:	51 f0       	breq	.+20     	; 0xd50 <prvUnlockQueue+0x58>
     d3c:	ce 01       	movw	r24, r28
     d3e:	08 96       	adiw	r24, 0x08	; 8
     d40:	0e 94 2e 12 	call	0x245c	; 0x245c <xTaskRemoveFromEventList>
     d44:	81 11       	cpse	r24, r1
     d46:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskMissedYield>
     d4a:	11 50       	subi	r17, 0x01	; 1
     d4c:	11 16       	cp	r1, r17
     d4e:	9c f3       	brlt	.-26     	; 0xd36 <prvUnlockQueue+0x3e>
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	89 a3       	std	Y+33, r24	; 0x21
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	08 95       	ret

00000d60 <xQueueGenericReset>:
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	0f 92       	push	r0
     d6c:	e8 81       	ld	r30, Y
     d6e:	f9 81       	ldd	r31, Y+1	; 0x01
     d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d72:	28 a1       	ldd	r18, Y+32	; 0x20
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	82 9f       	mul	r24, r18
     d7a:	a0 01       	movw	r20, r0
     d7c:	83 9f       	mul	r24, r19
     d7e:	50 0d       	add	r21, r0
     d80:	92 9f       	mul	r25, r18
     d82:	50 0d       	add	r21, r0
     d84:	11 24       	eor	r1, r1
     d86:	4e 0f       	add	r20, r30
     d88:	5f 1f       	adc	r21, r31
     d8a:	5d 83       	std	Y+5, r21	; 0x05
     d8c:	4c 83       	std	Y+4, r20	; 0x04
     d8e:	1e 8e       	std	Y+30, r1	; 0x1e
     d90:	fb 83       	std	Y+3, r31	; 0x03
     d92:	ea 83       	std	Y+2, r30	; 0x02
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	28 9f       	mul	r18, r24
     d98:	a0 01       	movw	r20, r0
     d9a:	29 9f       	mul	r18, r25
     d9c:	50 0d       	add	r21, r0
     d9e:	38 9f       	mul	r19, r24
     da0:	50 0d       	add	r21, r0
     da2:	11 24       	eor	r1, r1
     da4:	cf 01       	movw	r24, r30
     da6:	84 0f       	add	r24, r20
     da8:	95 1f       	adc	r25, r21
     daa:	9f 83       	std	Y+7, r25	; 0x07
     dac:	8e 83       	std	Y+6, r24	; 0x06
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	89 a3       	std	Y+33, r24	; 0x21
     db2:	8a a3       	std	Y+34, r24	; 0x22
     db4:	61 11       	cpse	r22, r1
     db6:	0b c0       	rjmp	.+22     	; 0xdce <xQueueGenericReset+0x6e>
     db8:	88 85       	ldd	r24, Y+8	; 0x08
     dba:	88 23       	and	r24, r24
     dbc:	71 f0       	breq	.+28     	; 0xdda <xQueueGenericReset+0x7a>
     dbe:	ce 01       	movw	r24, r28
     dc0:	08 96       	adiw	r24, 0x08	; 8
     dc2:	0e 94 2e 12 	call	0x245c	; 0x245c <xTaskRemoveFromEventList>
     dc6:	88 23       	and	r24, r24
     dc8:	41 f0       	breq	.+16     	; 0xdda <xQueueGenericReset+0x7a>
     dca:	3a de       	rcall	.-908    	; 0xa40 <vPortYield>
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <xQueueGenericReset+0x7a>
     dce:	ce 01       	movw	r24, r28
     dd0:	08 96       	adiw	r24, 0x08	; 8
     dd2:	68 dd       	rcall	.-1328   	; 0x8a4 <vListInitialise>
     dd4:	ce 01       	movw	r24, r28
     dd6:	43 96       	adiw	r24, 0x13	; 19
     dd8:	65 dd       	rcall	.-1334   	; 0x8a4 <vListInitialise>
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <prvInitialiseNewQueue>:
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	f8 01       	movw	r30, r16
     dec:	61 11       	cpse	r22, r1
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <prvInitialiseNewQueue+0x10>
     df0:	11 83       	std	Z+1, r17	; 0x01
     df2:	00 83       	st	Z, r16
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <prvInitialiseNewQueue+0x14>
     df6:	51 83       	std	Z+1, r21	; 0x01
     df8:	40 83       	st	Z, r20
     dfa:	87 8f       	std	Z+31, r24	; 0x1f
     dfc:	60 a3       	std	Z+32, r22	; 0x20
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	cf 01       	movw	r24, r30
     e02:	ae df       	rcall	.-164    	; 0xd60 <xQueueGenericReset>
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <xQueueGenericCreate>:
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	f8 2e       	mov	r15, r24
     e1a:	e6 2e       	mov	r14, r22
     e1c:	d4 2e       	mov	r13, r20
     e1e:	86 9f       	mul	r24, r22
     e20:	c0 01       	movw	r24, r0
     e22:	11 24       	eor	r1, r1
     e24:	83 96       	adiw	r24, 0x23	; 35
     e26:	58 dc       	rcall	.-1872   	; 0x6d8 <pvPortMalloc>
     e28:	ec 01       	movw	r28, r24
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	41 f0       	breq	.+16     	; 0xe3e <xQueueGenericCreate+0x34>
     e2e:	8c 01       	movw	r16, r24
     e30:	2d 2d       	mov	r18, r13
     e32:	ac 01       	movw	r20, r24
     e34:	4d 5d       	subi	r20, 0xDD	; 221
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	6e 2d       	mov	r22, r14
     e3a:	8f 2d       	mov	r24, r15
     e3c:	d4 df       	rcall	.-88     	; 0xde6 <prvInitialiseNewQueue>
     e3e:	ce 01       	movw	r24, r28
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	08 95       	ret

00000e50 <xQueueGenericSend>:
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	29 97       	sbiw	r28, 0x09	; 9
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	7c 01       	movw	r14, r24
     e72:	6b 01       	movw	r12, r22
     e74:	2e 83       	std	Y+6, r18	; 0x06
     e76:	3f 83       	std	Y+7, r19	; 0x07
     e78:	48 87       	std	Y+8, r20	; 0x08
     e7a:	59 87       	std	Y+9, r21	; 0x09
     e7c:	10 e0       	ldi	r17, 0x00	; 0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	0f 92       	push	r0
     e84:	f7 01       	movw	r30, r14
     e86:	96 8d       	ldd	r25, Z+30	; 0x1e
     e88:	87 8d       	ldd	r24, Z+31	; 0x1f
     e8a:	98 17       	cp	r25, r24
     e8c:	10 f0       	brcs	.+4      	; 0xe92 <xQueueGenericSend+0x42>
     e8e:	02 30       	cpi	r16, 0x02	; 2
     e90:	b1 f4       	brne	.+44     	; 0xebe <xQueueGenericSend+0x6e>
     e92:	40 2f       	mov	r20, r16
     e94:	b6 01       	movw	r22, r12
     e96:	c7 01       	movw	r24, r14
     e98:	b6 de       	rcall	.-660    	; 0xc06 <prvCopyDataToQueue>
     e9a:	f7 01       	movw	r30, r14
     e9c:	93 89       	ldd	r25, Z+19	; 0x13
     e9e:	99 23       	and	r25, r25
     ea0:	41 f0       	breq	.+16     	; 0xeb2 <xQueueGenericSend+0x62>
     ea2:	c7 01       	movw	r24, r14
     ea4:	43 96       	adiw	r24, 0x13	; 19
     ea6:	0e 94 2e 12 	call	0x245c	; 0x245c <xTaskRemoveFromEventList>
     eaa:	88 23       	and	r24, r24
     eac:	21 f0       	breq	.+8      	; 0xeb6 <xQueueGenericSend+0x66>
     eae:	c8 dd       	rcall	.-1136   	; 0xa40 <vPortYield>
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <xQueueGenericSend+0x66>
     eb2:	81 11       	cpse	r24, r1
     eb4:	c5 dd       	rcall	.-1142   	; 0xa40 <vPortYield>
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	4c c0       	rjmp	.+152    	; 0xf56 <xQueueGenericSend+0x106>
     ebe:	8e 81       	ldd	r24, Y+6	; 0x06
     ec0:	9f 81       	ldd	r25, Y+7	; 0x07
     ec2:	a8 85       	ldd	r26, Y+8	; 0x08
     ec4:	b9 85       	ldd	r27, Y+9	; 0x09
     ec6:	89 2b       	or	r24, r25
     ec8:	8a 2b       	or	r24, r26
     eca:	8b 2b       	or	r24, r27
     ecc:	21 f4       	brne	.+8      	; 0xed6 <xQueueGenericSend+0x86>
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	40 c0       	rjmp	.+128    	; 0xf56 <xQueueGenericSend+0x106>
     ed6:	11 11       	cpse	r17, r1
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <xQueueGenericSend+0x94>
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 8d 13 	call	0x271a	; 0x271a <vTaskInternalSetTimeOutState>
     ee2:	11 e0       	ldi	r17, 0x01	; 1
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	15 d7       	rcall	.+3626   	; 0x1d14 <vTaskSuspendAll>
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	f7 01       	movw	r30, r14
     ef2:	81 a1       	ldd	r24, Z+33	; 0x21
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueGenericSend+0xaa>
     ef8:	11 a2       	std	Z+33, r1	; 0x21
     efa:	f7 01       	movw	r30, r14
     efc:	82 a1       	ldd	r24, Z+34	; 0x22
     efe:	8f 3f       	cpi	r24, 0xFF	; 255
     f00:	09 f4       	brne	.+2      	; 0xf04 <xQueueGenericSend+0xb4>
     f02:	12 a2       	std	Z+34, r1	; 0x22
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	be 01       	movw	r22, r28
     f0a:	6a 5f       	subi	r22, 0xFA	; 250
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	0e 94 9e 13 	call	0x273c	; 0x273c <xTaskCheckForTimeOut>
     f16:	81 11       	cpse	r24, r1
     f18:	19 c0       	rjmp	.+50     	; 0xf4c <xQueueGenericSend+0xfc>
     f1a:	c7 01       	movw	r24, r14
     f1c:	66 de       	rcall	.-820    	; 0xbea <prvIsQueueFull>
     f1e:	88 23       	and	r24, r24
     f20:	81 f0       	breq	.+32     	; 0xf42 <xQueueGenericSend+0xf2>
     f22:	4e 81       	ldd	r20, Y+6	; 0x06
     f24:	5f 81       	ldd	r21, Y+7	; 0x07
     f26:	68 85       	ldd	r22, Y+8	; 0x08
     f28:	79 85       	ldd	r23, Y+9	; 0x09
     f2a:	c7 01       	movw	r24, r14
     f2c:	08 96       	adiw	r24, 0x08	; 8
     f2e:	0e 94 8b 11 	call	0x2316	; 0x2316 <vTaskPlaceOnEventList>
     f32:	c7 01       	movw	r24, r14
     f34:	e1 de       	rcall	.-574    	; 0xcf8 <prvUnlockQueue>
     f36:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
     f3a:	81 11       	cpse	r24, r1
     f3c:	a0 cf       	rjmp	.-192    	; 0xe7e <xQueueGenericSend+0x2e>
     f3e:	80 dd       	rcall	.-1280   	; 0xa40 <vPortYield>
     f40:	9e cf       	rjmp	.-196    	; 0xe7e <xQueueGenericSend+0x2e>
     f42:	c7 01       	movw	r24, r14
     f44:	d9 de       	rcall	.-590    	; 0xcf8 <prvUnlockQueue>
     f46:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
     f4a:	99 cf       	rjmp	.-206    	; 0xe7e <xQueueGenericSend+0x2e>
     f4c:	c7 01       	movw	r24, r14
     f4e:	d4 de       	rcall	.-600    	; 0xcf8 <prvUnlockQueue>
     f50:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	29 96       	adiw	r28, 0x09	; 9
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	08 95       	ret

00000f74 <prvInitialiseMutex>:
     f74:	0f 93       	push	r16
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	69 f0       	breq	.+26     	; 0xf94 <prvInitialiseMutex+0x20>
     f7a:	fc 01       	movw	r30, r24
     f7c:	15 82       	std	Z+5, r1	; 0x05
     f7e:	14 82       	std	Z+4, r1	; 0x04
     f80:	11 82       	std	Z+1, r1	; 0x01
     f82:	10 82       	st	Z, r1
     f84:	16 82       	std	Z+6, r1	; 0x06
     f86:	00 e0       	ldi	r16, 0x00	; 0
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	a9 01       	movw	r20, r18
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	5e df       	rcall	.-324    	; 0xe50 <xQueueGenericSend>
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <xQueueCreateMutex>:
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	48 2f       	mov	r20, r24
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	33 df       	rcall	.-410    	; 0xe0a <xQueueGenericCreate>
     fa4:	ec 01       	movw	r28, r24
     fa6:	e6 df       	rcall	.-52     	; 0xf74 <prvInitialiseMutex>
     fa8:	ce 01       	movw	r24, r28
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <xQueueGenericSendFromISR>:
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	8a 01       	movw	r16, r20
     fbe:	fc 01       	movw	r30, r24
     fc0:	56 8d       	ldd	r21, Z+30	; 0x1e
     fc2:	37 8d       	ldd	r19, Z+31	; 0x1f
     fc4:	53 17       	cp	r21, r19
     fc6:	10 f0       	brcs	.+4      	; 0xfcc <xQueueGenericSendFromISR+0x1c>
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	f9 f4       	brne	.+62     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fcc:	42 2f       	mov	r20, r18
     fce:	78 01       	movw	r14, r16
     fd0:	ec 01       	movw	r28, r24
     fd2:	1a a1       	ldd	r17, Y+34	; 0x22
     fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd6:	ce 01       	movw	r24, r28
     fd8:	16 de       	rcall	.-980    	; 0xc06 <prvCopyDataToQueue>
     fda:	1f 3f       	cpi	r17, 0xFF	; 255
     fdc:	81 f4       	brne	.+32     	; 0xffe <xQueueGenericSendFromISR+0x4e>
     fde:	8b 89       	ldd	r24, Y+19	; 0x13
     fe0:	88 23       	and	r24, r24
     fe2:	a9 f0       	breq	.+42     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fe4:	ce 01       	movw	r24, r28
     fe6:	43 96       	adiw	r24, 0x13	; 19
     fe8:	0e 94 2e 12 	call	0x245c	; 0x245c <xTaskRemoveFromEventList>
     fec:	88 23       	and	r24, r24
     fee:	89 f0       	breq	.+34     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     ff0:	e1 14       	cp	r14, r1
     ff2:	f1 04       	cpc	r15, r1
     ff4:	81 f0       	breq	.+32     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	f7 01       	movw	r30, r14
     ffa:	80 83       	st	Z, r24
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     ffe:	ff 24       	eor	r15, r15
    1000:	f3 94       	inc	r15
    1002:	f1 0e       	add	r15, r17
    1004:	fa a2       	std	Y+34, r15	; 0x22
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	08 95       	ret

00001026 <xQueueReceive>:
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	29 97       	sbiw	r28, 0x09	; 9
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	8c 01       	movw	r16, r24
    1048:	6b 01       	movw	r12, r22
    104a:	2e 83       	std	Y+6, r18	; 0x06
    104c:	3f 83       	std	Y+7, r19	; 0x07
    104e:	48 87       	std	Y+8, r20	; 0x08
    1050:	59 87       	std	Y+9, r21	; 0x09
    1052:	e1 2c       	mov	r14, r1
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	0f 92       	push	r0
    105a:	f8 01       	movw	r30, r16
    105c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    105e:	ff 20       	and	r15, r15
    1060:	99 f0       	breq	.+38     	; 0x1088 <xQueueReceive+0x62>
    1062:	b6 01       	movw	r22, r12
    1064:	c8 01       	movw	r24, r16
    1066:	2e de       	rcall	.-932    	; 0xcc4 <prvCopyDataFromQueue>
    1068:	fa 94       	dec	r15
    106a:	f8 01       	movw	r30, r16
    106c:	f6 8e       	std	Z+30, r15	; 0x1e
    106e:	80 85       	ldd	r24, Z+8	; 0x08
    1070:	88 23       	and	r24, r24
    1072:	31 f0       	breq	.+12     	; 0x1080 <xQueueReceive+0x5a>
    1074:	c8 01       	movw	r24, r16
    1076:	08 96       	adiw	r24, 0x08	; 8
    1078:	0e 94 2e 12 	call	0x245c	; 0x245c <xTaskRemoveFromEventList>
    107c:	81 11       	cpse	r24, r1
    107e:	e0 dc       	rcall	.-1600   	; 0xa40 <vPortYield>
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	4f c0       	rjmp	.+158    	; 0x1126 <xQueueReceive+0x100>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	a8 85       	ldd	r26, Y+8	; 0x08
    108e:	b9 85       	ldd	r27, Y+9	; 0x09
    1090:	89 2b       	or	r24, r25
    1092:	8a 2b       	or	r24, r26
    1094:	8b 2b       	or	r24, r27
    1096:	21 f4       	brne	.+8      	; 0x10a0 <xQueueReceive+0x7a>
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	43 c0       	rjmp	.+134    	; 0x1126 <xQueueReceive+0x100>
    10a0:	e1 10       	cpse	r14, r1
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <xQueueReceive+0x8a>
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 8d 13 	call	0x271a	; 0x271a <vTaskInternalSetTimeOutState>
    10ac:	ee 24       	eor	r14, r14
    10ae:	e3 94       	inc	r14
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	2f d6       	rcall	.+3166   	; 0x1d14 <vTaskSuspendAll>
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	0f 92       	push	r0
    10bc:	f8 01       	movw	r30, r16
    10be:	81 a1       	ldd	r24, Z+33	; 0x21
    10c0:	8f 3f       	cpi	r24, 0xFF	; 255
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <xQueueReceive+0xa0>
    10c4:	11 a2       	std	Z+33, r1	; 0x21
    10c6:	f8 01       	movw	r30, r16
    10c8:	82 a1       	ldd	r24, Z+34	; 0x22
    10ca:	8f 3f       	cpi	r24, 0xFF	; 255
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <xQueueReceive+0xaa>
    10ce:	12 a2       	std	Z+34, r1	; 0x22
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	be 01       	movw	r22, r28
    10d6:	6a 5f       	subi	r22, 0xFA	; 250
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	0e 94 9e 13 	call	0x273c	; 0x273c <xTaskCheckForTimeOut>
    10e2:	81 11       	cpse	r24, r1
    10e4:	17 c0       	rjmp	.+46     	; 0x1114 <xQueueReceive+0xee>
    10e6:	c8 01       	movw	r24, r16
    10e8:	73 dd       	rcall	.-1306   	; 0xbd0 <prvIsQueueEmpty>
    10ea:	88 23       	and	r24, r24
    10ec:	79 f0       	breq	.+30     	; 0x110c <xQueueReceive+0xe6>
    10ee:	4e 81       	ldd	r20, Y+6	; 0x06
    10f0:	5f 81       	ldd	r21, Y+7	; 0x07
    10f2:	68 85       	ldd	r22, Y+8	; 0x08
    10f4:	79 85       	ldd	r23, Y+9	; 0x09
    10f6:	c8 01       	movw	r24, r16
    10f8:	43 96       	adiw	r24, 0x13	; 19
    10fa:	0e 94 8b 11 	call	0x2316	; 0x2316 <vTaskPlaceOnEventList>
    10fe:	c8 01       	movw	r24, r16
    1100:	fb dd       	rcall	.-1034   	; 0xcf8 <prvUnlockQueue>
    1102:	48 d7       	rcall	.+3728   	; 0x1f94 <xTaskResumeAll>
    1104:	81 11       	cpse	r24, r1
    1106:	a6 cf       	rjmp	.-180    	; 0x1054 <xQueueReceive+0x2e>
    1108:	9b dc       	rcall	.-1738   	; 0xa40 <vPortYield>
    110a:	a4 cf       	rjmp	.-184    	; 0x1054 <xQueueReceive+0x2e>
    110c:	c8 01       	movw	r24, r16
    110e:	f4 dd       	rcall	.-1048   	; 0xcf8 <prvUnlockQueue>
    1110:	41 d7       	rcall	.+3714   	; 0x1f94 <xTaskResumeAll>
    1112:	a0 cf       	rjmp	.-192    	; 0x1054 <xQueueReceive+0x2e>
    1114:	c8 01       	movw	r24, r16
    1116:	f0 dd       	rcall	.-1056   	; 0xcf8 <prvUnlockQueue>
    1118:	3d d7       	rcall	.+3706   	; 0x1f94 <xTaskResumeAll>
    111a:	c8 01       	movw	r24, r16
    111c:	59 dd       	rcall	.-1358   	; 0xbd0 <prvIsQueueEmpty>
    111e:	88 23       	and	r24, r24
    1120:	09 f4       	brne	.+2      	; 0x1124 <xQueueReceive+0xfe>
    1122:	98 cf       	rjmp	.-208    	; 0x1054 <xQueueReceive+0x2e>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	29 96       	adiw	r28, 0x09	; 9
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	08 95       	ret

00001144 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	0f 92       	push	r0
    1150:	89 a1       	ldd	r24, Y+33	; 0x21
    1152:	8f 3f       	cpi	r24, 0xFF	; 255
    1154:	09 f4       	brne	.+2      	; 0x1158 <vQueueWaitForMessageRestricted+0x14>
    1156:	19 a2       	std	Y+33, r1	; 0x21
    1158:	8a a1       	ldd	r24, Y+34	; 0x22
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	09 f4       	brne	.+2      	; 0x1160 <vQueueWaitForMessageRestricted+0x1c>
    115e:	1a a2       	std	Y+34, r1	; 0x22
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1164:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1166:	81 11       	cpse	r24, r1
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    116a:	ce 01       	movw	r24, r28
    116c:	43 96       	adiw	r24, 0x13	; 19
    116e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1172:	ce 01       	movw	r24, r28
    1174:	c1 dd       	rcall	.-1150   	; 0xcf8 <prvUnlockQueue>
    }
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    117c:	fc 01       	movw	r30, r24
    117e:	44 81       	ldd	r20, Z+4	; 0x04
    1180:	55 81       	ldd	r21, Z+5	; 0x05
    1182:	22 81       	ldd	r18, Z+2	; 0x02
    1184:	33 81       	ldd	r19, Z+3	; 0x03
    1186:	24 0f       	add	r18, r20
    1188:	35 1f       	adc	r19, r21
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	b9 01       	movw	r22, r18
    1190:	68 1b       	sub	r22, r24
    1192:	79 0b       	sbc	r23, r25
    1194:	cb 01       	movw	r24, r22
    1196:	64 17       	cp	r22, r20
    1198:	75 07       	cpc	r23, r21
    119a:	10 f0       	brcs	.+4      	; 0x11a0 <prvBytesInBuffer+0x24>
    119c:	84 1b       	sub	r24, r20
    119e:	95 0b       	sbc	r25, r21
    11a0:	08 95       	ret

000011a2 <prvInitialiseNewStreamBuffer>:
    11a2:	0f 93       	push	r16
    11a4:	fc 01       	movw	r30, r24
    11a6:	8f e0       	ldi	r24, 0x0F	; 15
    11a8:	df 01       	movw	r26, r30
    11aa:	1d 92       	st	X+, r1
    11ac:	8a 95       	dec	r24
    11ae:	e9 f7       	brne	.-6      	; 0x11aa <prvInitialiseNewStreamBuffer+0x8>
    11b0:	75 87       	std	Z+13, r23	; 0x0d
    11b2:	64 87       	std	Z+12, r22	; 0x0c
    11b4:	55 83       	std	Z+5, r21	; 0x05
    11b6:	44 83       	std	Z+4, r20	; 0x04
    11b8:	37 83       	std	Z+7, r19	; 0x07
    11ba:	26 83       	std	Z+6, r18	; 0x06
    11bc:	06 87       	std	Z+14, r16	; 0x0e
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <prvWriteBytesToBuffer>:
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	6c 01       	movw	r12, r24
    11d8:	5b 01       	movw	r10, r22
    11da:	7a 01       	movw	r14, r20
    11dc:	fc 01       	movw	r30, r24
    11de:	c2 81       	ldd	r28, Z+2	; 0x02
    11e0:	d3 81       	ldd	r29, Z+3	; 0x03
    11e2:	04 81       	ldd	r16, Z+4	; 0x04
    11e4:	15 81       	ldd	r17, Z+5	; 0x05
    11e6:	0c 1b       	sub	r16, r28
    11e8:	1d 0b       	sbc	r17, r29
    11ea:	40 17       	cp	r20, r16
    11ec:	51 07       	cpc	r21, r17
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <prvWriteBytesToBuffer+0x30>
    11f0:	8a 01       	movw	r16, r20
    11f2:	f6 01       	movw	r30, r12
    11f4:	84 85       	ldd	r24, Z+12	; 0x0c
    11f6:	95 85       	ldd	r25, Z+13	; 0x0d
    11f8:	a8 01       	movw	r20, r16
    11fa:	b5 01       	movw	r22, r10
    11fc:	8c 0f       	add	r24, r28
    11fe:	9d 1f       	adc	r25, r29
    1200:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <memcpy>
    1204:	0e 15       	cp	r16, r14
    1206:	1f 05       	cpc	r17, r15
    1208:	58 f4       	brcc	.+22     	; 0x1220 <prvWriteBytesToBuffer+0x5e>
    120a:	a7 01       	movw	r20, r14
    120c:	40 1b       	sub	r20, r16
    120e:	51 0b       	sbc	r21, r17
    1210:	b5 01       	movw	r22, r10
    1212:	60 0f       	add	r22, r16
    1214:	71 1f       	adc	r23, r17
    1216:	f6 01       	movw	r30, r12
    1218:	84 85       	ldd	r24, Z+12	; 0x0c
    121a:	95 85       	ldd	r25, Z+13	; 0x0d
    121c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <memcpy>
    1220:	ce 01       	movw	r24, r28
    1222:	8e 0d       	add	r24, r14
    1224:	9f 1d       	adc	r25, r15
    1226:	f6 01       	movw	r30, r12
    1228:	24 81       	ldd	r18, Z+4	; 0x04
    122a:	35 81       	ldd	r19, Z+5	; 0x05
    122c:	82 17       	cp	r24, r18
    122e:	93 07       	cpc	r25, r19
    1230:	10 f0       	brcs	.+4      	; 0x1236 <prvWriteBytesToBuffer+0x74>
    1232:	82 1b       	sub	r24, r18
    1234:	93 0b       	sbc	r25, r19
    1236:	f6 01       	movw	r30, r12
    1238:	93 83       	std	Z+3, r25	; 0x03
    123a:	82 83       	std	Z+2, r24	; 0x02
    123c:	c7 01       	movw	r24, r14
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	bf 90       	pop	r11
    1250:	af 90       	pop	r10
    1252:	08 95       	ret

00001254 <prvWriteMessageToBuffer>:
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	1f 92       	push	r1
    1266:	1f 92       	push	r1
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	7c 01       	movw	r14, r24
    126e:	6b 01       	movw	r12, r22
    1270:	5a 83       	std	Y+2, r21	; 0x02
    1272:	49 83       	std	Y+1, r20	; 0x01
    1274:	21 15       	cp	r18, r1
    1276:	31 05       	cpc	r19, r1
    1278:	c1 f0       	breq	.+48     	; 0x12aa <prvWriteMessageToBuffer+0x56>
    127a:	fc 01       	movw	r30, r24
    127c:	86 85       	ldd	r24, Z+14	; 0x0e
    127e:	80 fd       	sbrc	r24, 0
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <prvWriteMessageToBuffer+0x3e>
    1282:	42 17       	cp	r20, r18
    1284:	53 07       	cpc	r21, r19
    1286:	08 f4       	brcc	.+2      	; 0x128a <prvWriteMessageToBuffer+0x36>
    1288:	9a 01       	movw	r18, r20
    128a:	3a 83       	std	Y+2, r19	; 0x02
    128c:	29 83       	std	Y+1, r18	; 0x01
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <prvWriteMessageToBuffer+0x5c>
    1292:	20 17       	cp	r18, r16
    1294:	31 07       	cpc	r19, r17
    1296:	58 f0       	brcs	.+22     	; 0x12ae <prvWriteMessageToBuffer+0x5a>
    1298:	42 e0       	ldi	r20, 0x02	; 2
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	be 01       	movw	r22, r28
    129e:	6f 5f       	subi	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	c7 01       	movw	r24, r14
    12a4:	8e df       	rcall	.-228    	; 0x11c2 <prvWriteBytesToBuffer>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <prvWriteMessageToBuffer+0x5c>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <prvWriteMessageToBuffer+0x5c>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	88 23       	and	r24, r24
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <prvWriteMessageToBuffer+0x6c>
    12b4:	49 81       	ldd	r20, Y+1	; 0x01
    12b6:	5a 81       	ldd	r21, Y+2	; 0x02
    12b8:	b6 01       	movw	r22, r12
    12ba:	c7 01       	movw	r24, r14
    12bc:	82 df       	rcall	.-252    	; 0x11c2 <prvWriteBytesToBuffer>
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <prvWriteMessageToBuffer+0x70>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	08 95       	ret

000012da <prvReadBytesFromBuffer>:
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	7c 01       	movw	r14, r24
    12f0:	5b 01       	movw	r10, r22
    12f2:	e9 01       	movw	r28, r18
    12f4:	42 17       	cp	r20, r18
    12f6:	53 07       	cpc	r21, r19
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <prvReadBytesFromBuffer+0x22>
    12fa:	ea 01       	movw	r28, r20
    12fc:	20 97       	sbiw	r28, 0x00	; 0
    12fe:	81 f1       	breq	.+96     	; 0x1360 <prvReadBytesFromBuffer+0x86>
    1300:	f7 01       	movw	r30, r14
    1302:	00 81       	ld	r16, Z
    1304:	11 81       	ldd	r17, Z+1	; 0x01
    1306:	84 81       	ldd	r24, Z+4	; 0x04
    1308:	95 81       	ldd	r25, Z+5	; 0x05
    130a:	80 1b       	sub	r24, r16
    130c:	91 0b       	sbc	r25, r17
    130e:	6e 01       	movw	r12, r28
    1310:	8c 17       	cp	r24, r28
    1312:	9d 07       	cpc	r25, r29
    1314:	08 f4       	brcc	.+2      	; 0x1318 <prvReadBytesFromBuffer+0x3e>
    1316:	6c 01       	movw	r12, r24
    1318:	f7 01       	movw	r30, r14
    131a:	64 85       	ldd	r22, Z+12	; 0x0c
    131c:	75 85       	ldd	r23, Z+13	; 0x0d
    131e:	60 0f       	add	r22, r16
    1320:	71 1f       	adc	r23, r17
    1322:	a6 01       	movw	r20, r12
    1324:	c5 01       	movw	r24, r10
    1326:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <memcpy>
    132a:	cc 16       	cp	r12, r28
    132c:	dd 06       	cpc	r13, r29
    132e:	58 f4       	brcc	.+22     	; 0x1346 <prvReadBytesFromBuffer+0x6c>
    1330:	ae 01       	movw	r20, r28
    1332:	4c 19       	sub	r20, r12
    1334:	5d 09       	sbc	r21, r13
    1336:	f7 01       	movw	r30, r14
    1338:	64 85       	ldd	r22, Z+12	; 0x0c
    133a:	75 85       	ldd	r23, Z+13	; 0x0d
    133c:	c5 01       	movw	r24, r10
    133e:	8c 0d       	add	r24, r12
    1340:	9d 1d       	adc	r25, r13
    1342:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <memcpy>
    1346:	0c 0f       	add	r16, r28
    1348:	1d 1f       	adc	r17, r29
    134a:	f7 01       	movw	r30, r14
    134c:	84 81       	ldd	r24, Z+4	; 0x04
    134e:	95 81       	ldd	r25, Z+5	; 0x05
    1350:	08 17       	cp	r16, r24
    1352:	19 07       	cpc	r17, r25
    1354:	10 f0       	brcs	.+4      	; 0x135a <prvReadBytesFromBuffer+0x80>
    1356:	08 1b       	sub	r16, r24
    1358:	19 0b       	sbc	r17, r25
    135a:	f7 01       	movw	r30, r14
    135c:	11 83       	std	Z+1, r17	; 0x01
    135e:	00 83       	st	Z, r16
    1360:	ce 01       	movw	r24, r28
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	08 95       	ret

00001378 <prvReadMessageFromBuffer>:
    1378:	6f 92       	push	r6
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	1f 92       	push	r1
    1396:	1f 92       	push	r1
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	6c 01       	movw	r12, r24
    139e:	4b 01       	movw	r8, r22
    13a0:	5a 01       	movw	r10, r20
    13a2:	79 01       	movw	r14, r18
    13a4:	01 15       	cp	r16, r1
    13a6:	11 05       	cpc	r17, r1
    13a8:	b1 f0       	breq	.+44     	; 0x13d6 <prvReadMessageFromBuffer+0x5e>
    13aa:	fc 01       	movw	r30, r24
    13ac:	60 80       	ld	r6, Z
    13ae:	71 80       	ldd	r7, Z+1	; 0x01
    13b0:	a8 01       	movw	r20, r16
    13b2:	be 01       	movw	r22, r28
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	90 df       	rcall	.-224    	; 0x12da <prvReadBytesFromBuffer>
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	e0 1a       	sub	r14, r16
    13c0:	f1 0a       	sbc	r15, r17
    13c2:	a8 16       	cp	r10, r24
    13c4:	b9 06       	cpc	r11, r25
    13c6:	30 f4       	brcc	.+12     	; 0x13d4 <prvReadMessageFromBuffer+0x5c>
    13c8:	f6 01       	movw	r30, r12
    13ca:	71 82       	std	Z+1, r7	; 0x01
    13cc:	60 82       	st	Z, r6
    13ce:	a1 2c       	mov	r10, r1
    13d0:	b1 2c       	mov	r11, r1
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <prvReadMessageFromBuffer+0x5e>
    13d4:	5c 01       	movw	r10, r24
    13d6:	97 01       	movw	r18, r14
    13d8:	a5 01       	movw	r20, r10
    13da:	b4 01       	movw	r22, r8
    13dc:	c6 01       	movw	r24, r12
    13de:	7d df       	rcall	.-262    	; 0x12da <prvReadBytesFromBuffer>
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	bf 90       	pop	r11
    13f6:	af 90       	pop	r10
    13f8:	9f 90       	pop	r9
    13fa:	8f 90       	pop	r8
    13fc:	7f 90       	pop	r7
    13fe:	6f 90       	pop	r6
    1400:	08 95       	ret

00001402 <xStreamBufferGenericCreate>:
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	ec 01       	movw	r28, r24
    1412:	6b 01       	movw	r12, r22
    1414:	41 30       	cpi	r20, 0x01	; 1
    1416:	11 f4       	brne	.+4      	; 0x141c <xStreamBufferGenericCreate+0x1a>
    1418:	01 e0       	ldi	r16, 0x01	; 1
    141a:	01 c0       	rjmp	.+2      	; 0x141e <xStreamBufferGenericCreate+0x1c>
    141c:	00 e0       	ldi	r16, 0x00	; 0
    141e:	c1 14       	cp	r12, r1
    1420:	d1 04       	cpc	r13, r1
    1422:	19 f4       	brne	.+6      	; 0x142a <xStreamBufferGenericCreate+0x28>
    1424:	cc 24       	eor	r12, r12
    1426:	c3 94       	inc	r12
    1428:	d1 2c       	mov	r13, r1
    142a:	ce 01       	movw	r24, r28
    142c:	40 96       	adiw	r24, 0x10	; 16
    142e:	c8 17       	cp	r28, r24
    1430:	d9 07       	cpc	r29, r25
    1432:	20 f4       	brcc	.+8      	; 0x143c <xStreamBufferGenericCreate+0x3a>
    1434:	21 96       	adiw	r28, 0x01	; 1
    1436:	50 d9       	rcall	.-3424   	; 0x6d8 <pvPortMalloc>
    1438:	7c 01       	movw	r14, r24
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <xStreamBufferGenericCreate+0x3e>
    143c:	e1 2c       	mov	r14, r1
    143e:	f1 2c       	mov	r15, r1
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	39 f0       	breq	.+14     	; 0x1454 <xStreamBufferGenericCreate+0x52>
    1446:	96 01       	movw	r18, r12
    1448:	ae 01       	movw	r20, r28
    144a:	b7 01       	movw	r22, r14
    144c:	61 5f       	subi	r22, 0xF1	; 241
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	c7 01       	movw	r24, r14
    1452:	a7 de       	rcall	.-690    	; 0x11a2 <prvInitialiseNewStreamBuffer>
    1454:	c7 01       	movw	r24, r14
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	08 95       	ret

00001466 <xStreamBufferReset>:
    1466:	0f 93       	push	r16
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	0f 92       	push	r0
    146e:	fc 01       	movw	r30, r24
    1470:	20 85       	ldd	r18, Z+8	; 0x08
    1472:	31 85       	ldd	r19, Z+9	; 0x09
    1474:	23 2b       	or	r18, r19
    1476:	71 f4       	brne	.+28     	; 0x1494 <xStreamBufferReset+0x2e>
    1478:	22 85       	ldd	r18, Z+10	; 0x0a
    147a:	33 85       	ldd	r19, Z+11	; 0x0b
    147c:	23 2b       	or	r18, r19
    147e:	61 f4       	brne	.+24     	; 0x1498 <xStreamBufferReset+0x32>
    1480:	26 81       	ldd	r18, Z+6	; 0x06
    1482:	37 81       	ldd	r19, Z+7	; 0x07
    1484:	44 81       	ldd	r20, Z+4	; 0x04
    1486:	55 81       	ldd	r21, Z+5	; 0x05
    1488:	64 85       	ldd	r22, Z+12	; 0x0c
    148a:	75 85       	ldd	r23, Z+13	; 0x0d
    148c:	06 85       	ldd	r16, Z+14	; 0x0e
    148e:	89 de       	rcall	.-750    	; 0x11a2 <prvInitialiseNewStreamBuffer>
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	03 c0       	rjmp	.+6      	; 0x149a <xStreamBufferReset+0x34>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	01 c0       	rjmp	.+2      	; 0x149a <xStreamBufferReset+0x34>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <xStreamBufferSpacesAvailable>:
    14a2:	fc 01       	movw	r30, r24
    14a4:	24 81       	ldd	r18, Z+4	; 0x04
    14a6:	35 81       	ldd	r19, Z+5	; 0x05
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	42 81       	ldd	r20, Z+2	; 0x02
    14b2:	53 81       	ldd	r21, Z+3	; 0x03
    14b4:	84 1b       	sub	r24, r20
    14b6:	95 0b       	sbc	r25, r21
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	82 17       	cp	r24, r18
    14bc:	93 07       	cpc	r25, r19
    14be:	10 f0       	brcs	.+4      	; 0x14c4 <xStreamBufferSpacesAvailable+0x22>
    14c0:	82 1b       	sub	r24, r18
    14c2:	93 0b       	sbc	r25, r19
    14c4:	08 95       	ret

000014c6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    14c6:	2f 92       	push	r2
    14c8:	3f 92       	push	r3
    14ca:	4f 92       	push	r4
    14cc:	5f 92       	push	r5
    14ce:	6f 92       	push	r6
    14d0:	7f 92       	push	r7
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	cf 92       	push	r12
    14dc:	df 92       	push	r13
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	2b 97       	sbiw	r28, 0x0b	; 11
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	4c 01       	movw	r8, r24
    14fc:	7b 87       	std	Y+11, r23	; 0x0b
    14fe:	6a 87       	std	Y+10, r22	; 0x0a
    1500:	1a 01       	movw	r2, r20
    1502:	0e 83       	std	Y+6, r16	; 0x06
    1504:	1f 83       	std	Y+7, r17	; 0x07
    1506:	28 87       	std	Y+8, r18	; 0x08
    1508:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    150a:	fc 01       	movw	r30, r24
    150c:	84 81       	ldd	r24, Z+4	; 0x04
    150e:	95 81       	ldd	r25, Z+5	; 0x05
    1510:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1512:	26 85       	ldd	r18, Z+14	; 0x0e
    1514:	20 ff       	sbrs	r18, 0
    1516:	0c c0       	rjmp	.+24     	; 0x1530 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1518:	2a 01       	movw	r4, r20
    151a:	f2 e0       	ldi	r31, 0x02	; 2
    151c:	4f 0e       	add	r4, r31
    151e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1520:	84 15       	cp	r24, r4
    1522:	95 05       	cpc	r25, r5
    1524:	58 f4       	brcc	.+22     	; 0x153c <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1526:	1e 82       	std	Y+6, r1	; 0x06
    1528:	1f 82       	std	Y+7, r1	; 0x07
    152a:	18 86       	std	Y+8, r1	; 0x08
    152c:	19 86       	std	Y+9, r1	; 0x09
    152e:	06 c0       	rjmp	.+12     	; 0x153c <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1530:	84 17       	cp	r24, r20
    1532:	95 07       	cpc	r25, r21
    1534:	10 f0       	brcs	.+4      	; 0x153a <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1536:	2a 01       	movw	r4, r20
    1538:	01 c0       	rjmp	.+2      	; 0x153c <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    153a:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	a8 85       	ldd	r26, Y+8	; 0x08
    1542:	b9 85       	ldd	r27, Y+9	; 0x09
    1544:	89 2b       	or	r24, r25
    1546:	8a 2b       	or	r24, r26
    1548:	8b 2b       	or	r24, r27
    154a:	09 f4       	brne	.+2      	; 0x154e <xStreamBufferSend+0x88>
    154c:	38 c0       	rjmp	.+112    	; 0x15be <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	0e 94 77 13 	call	0x26ee	; 0x26ee <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    155c:	c4 01       	movw	r24, r8
    155e:	a1 df       	rcall	.-190    	; 0x14a2 <xStreamBufferSpacesAvailable>
    1560:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1562:	84 15       	cp	r24, r4
    1564:	95 05       	cpc	r25, r5
    1566:	40 f5       	brcc	.+80     	; 0x15b8 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1572:	0e 94 08 14 	call	0x2810	; 0x2810 <xTaskGetCurrentTaskHandle>
    1576:	f4 01       	movw	r30, r8
    1578:	93 87       	std	Z+11, r25	; 0x0b
    157a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1580:	ae 80       	ldd	r10, Y+6	; 0x06
    1582:	bf 80       	ldd	r11, Y+7	; 0x07
    1584:	c8 84       	ldd	r12, Y+8	; 0x08
    1586:	d9 84       	ldd	r13, Y+9	; 0x09
    1588:	e1 2c       	mov	r14, r1
    158a:	f1 2c       	mov	r15, r1
    158c:	00 e0       	ldi	r16, 0x00	; 0
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	98 01       	movw	r18, r16
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	ba 01       	movw	r22, r20
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	0e 94 a0 14 	call	0x2940	; 0x2940 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    159e:	f4 01       	movw	r30, r8
    15a0:	13 86       	std	Z+11, r1	; 0x0b
    15a2:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    15a4:	be 01       	movw	r22, r28
    15a6:	6a 5f       	subi	r22, 0xFA	; 250
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	0e 94 9e 13 	call	0x273c	; 0x273c <xTaskCheckForTimeOut>
    15b2:	88 23       	and	r24, r24
    15b4:	81 f2       	breq	.-96     	; 0x1556 <xStreamBufferSend+0x90>
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
                    break;
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    15be:	61 2c       	mov	r6, r1
    15c0:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    15c2:	61 14       	cp	r6, r1
    15c4:	71 04       	cpc	r7, r1
    15c6:	19 f4       	brne	.+6      	; 0x15ce <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15c8:	c4 01       	movw	r24, r8
    15ca:	6b df       	rcall	.-298    	; 0x14a2 <xStreamBufferSpacesAvailable>
    15cc:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15ce:	82 01       	movw	r16, r4
    15d0:	93 01       	movw	r18, r6
    15d2:	a1 01       	movw	r20, r2
    15d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    15d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    15d8:	c4 01       	movw	r24, r8
    15da:	3c de       	rcall	.-904    	; 0x1254 <prvWriteMessageToBuffer>
    15dc:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    15de:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    15e0:	e9 f0       	breq	.+58     	; 0x161c <xStreamBufferSend+0x156>
    15e2:	c4 01       	movw	r24, r8
    15e4:	cb dd       	rcall	.-1130   	; 0x117c <prvBytesInBuffer>
    15e6:	f4 01       	movw	r30, r8
    15e8:	26 81       	ldd	r18, Z+6	; 0x06
    15ea:	37 81       	ldd	r19, Z+7	; 0x07
    15ec:	82 17       	cp	r24, r18
    15ee:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    15f0:	a8 f0       	brcs	.+42     	; 0x161c <xStreamBufferSend+0x156>
    15f2:	90 d3       	rcall	.+1824   	; 0x1d14 <vTaskSuspendAll>
    15f4:	f4 01       	movw	r30, r8
    15f6:	80 85       	ldd	r24, Z+8	; 0x08
    15f8:	91 85       	ldd	r25, Z+9	; 0x09
    15fa:	89 2b       	or	r24, r25
    15fc:	71 f0       	breq	.+28     	; 0x161a <xStreamBufferSend+0x154>
    15fe:	80 85       	ldd	r24, Z+8	; 0x08
    1600:	91 85       	ldd	r25, Z+9	; 0x09
    1602:	e1 2c       	mov	r14, r1
    1604:	f1 2c       	mov	r15, r1
    1606:	00 e0       	ldi	r16, 0x00	; 0
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <xTaskGenericNotify>
    1614:	f4 01       	movw	r30, r8
    1616:	11 86       	std	Z+9, r1	; 0x09
    1618:	10 86       	std	Z+8, r1	; 0x08
    161a:	bc d4       	rcall	.+2424   	; 0x1f94 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    161c:	c6 01       	movw	r24, r12
    161e:	2b 96       	adiw	r28, 0x0b	; 11
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	3f 90       	pop	r3
    164c:	2f 90       	pop	r2
    164e:	08 95       	ret

00001650 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	ec 01       	movw	r28, r24
    1666:	7b 01       	movw	r14, r22
    1668:	5a 01       	movw	r10, r20
    166a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    166c:	8e 85       	ldd	r24, Y+14	; 0x0e
    166e:	80 ff       	sbrs	r24, 0
    1670:	04 c0       	rjmp	.+8      	; 0x167a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1672:	8a 01       	movw	r16, r20
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	01 c0       	rjmp	.+2      	; 0x167c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    167a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    167c:	ce 01       	movw	r24, r28
    167e:	11 df       	rcall	.-478    	; 0x14a2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1680:	9c 01       	movw	r18, r24
    1682:	a5 01       	movw	r20, r10
    1684:	b7 01       	movw	r22, r14
    1686:	ce 01       	movw	r24, r28
    1688:	e5 dd       	rcall	.-1078   	; 0x1254 <prvWriteMessageToBuffer>
    168a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    168c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    168e:	c1 f0       	breq	.+48     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
    1690:	ce 01       	movw	r24, r28
    1692:	74 dd       	rcall	.-1304   	; 0x117c <prvBytesInBuffer>
    1694:	2e 81       	ldd	r18, Y+6	; 0x06
    1696:	3f 81       	ldd	r19, Y+7	; 0x07
    1698:	82 17       	cp	r24, r18
    169a:	93 07       	cpc	r25, r19
    169c:	88 f0       	brcs	.+34     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    169e:	88 85       	ldd	r24, Y+8	; 0x08
    16a0:	99 85       	ldd	r25, Y+9	; 0x09
    16a2:	89 2b       	or	r24, r25
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
    16a6:	88 85       	ldd	r24, Y+8	; 0x08
    16a8:	99 85       	ldd	r25, Y+9	; 0x09
    16aa:	e1 2c       	mov	r14, r1
    16ac:	f1 2c       	mov	r15, r1
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <xTaskGenericNotifyFromISR>
    16bc:	19 86       	std	Y+9, r1	; 0x09
    16be:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    16c0:	c5 01       	movw	r24, r10
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	08 95       	ret

000016d8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    16d8:	4f 92       	push	r4
    16da:	5f 92       	push	r5
    16dc:	6f 92       	push	r6
    16de:	7f 92       	push	r7
    16e0:	8f 92       	push	r8
    16e2:	9f 92       	push	r9
    16e4:	af 92       	push	r10
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
    16fa:	2b 01       	movw	r4, r22
    16fc:	3a 01       	movw	r6, r20
    16fe:	58 01       	movw	r10, r16
    1700:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1702:	8e 85       	ldd	r24, Y+14	; 0x0e
    1704:	80 ff       	sbrs	r24, 0
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1708:	68 94       	set
    170a:	88 24       	eor	r8, r8
    170c:	81 f8       	bld	r8, 1
    170e:	91 2c       	mov	r9, r1
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1712:	81 2c       	mov	r8, r1
    1714:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1716:	a1 14       	cp	r10, r1
    1718:	b1 04       	cpc	r11, r1
    171a:	c1 04       	cpc	r12, r1
    171c:	d1 04       	cpc	r13, r1
    171e:	41 f1       	breq	.+80     	; 0x1770 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1726:	ce 01       	movw	r24, r28
    1728:	29 dd       	rcall	.-1454   	; 0x117c <prvBytesInBuffer>
    172a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    172c:	88 16       	cp	r8, r24
    172e:	99 06       	cpc	r9, r25
    1730:	48 f0       	brcs	.+18     	; 0x1744 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    173c:	0e 94 08 14 	call	0x2810	; 0x2810 <xTaskGetCurrentTaskHandle>
    1740:	99 87       	std	Y+9, r25	; 0x09
    1742:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1748:	8e 14       	cp	r8, r14
    174a:	9f 04       	cpc	r9, r15
    174c:	a0 f0       	brcs	.+40     	; 0x1776 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    174e:	e1 2c       	mov	r14, r1
    1750:	f1 2c       	mov	r15, r1
    1752:	00 e0       	ldi	r16, 0x00	; 0
    1754:	10 e0       	ldi	r17, 0x00	; 0
    1756:	98 01       	movw	r18, r16
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	ba 01       	movw	r22, r20
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0e 94 a0 14 	call	0x2940	; 0x2940 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1764:	19 86       	std	Y+9, r1	; 0x09
    1766:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1768:	ce 01       	movw	r24, r28
    176a:	08 dd       	rcall	.-1520   	; 0x117c <prvBytesInBuffer>
    176c:	7c 01       	movw	r14, r24
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1770:	ce 01       	movw	r24, r28
    1772:	04 dd       	rcall	.-1528   	; 0x117c <prvBytesInBuffer>
    1774:	7c 01       	movw	r14, r24
    1776:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1778:	9f 04       	cpc	r9, r15
    177a:	e8 f4       	brcc	.+58     	; 0x17b6 <xStreamBufferReceive+0xde>
    177c:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    177e:	97 01       	movw	r18, r14
    1780:	a3 01       	movw	r20, r6
    1782:	b2 01       	movw	r22, r4
    1784:	ce 01       	movw	r24, r28
    1786:	f8 dd       	rcall	.-1040   	; 0x1378 <prvReadMessageFromBuffer>
    1788:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    178a:	89 2b       	or	r24, r25
    178c:	b1 f0       	breq	.+44     	; 0x17ba <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    178e:	c2 d2       	rcall	.+1412   	; 0x1d14 <vTaskSuspendAll>
    1790:	8a 85       	ldd	r24, Y+10	; 0x0a
    1792:	9b 85       	ldd	r25, Y+11	; 0x0b
    1794:	89 2b       	or	r24, r25
    1796:	69 f0       	breq	.+26     	; 0x17b2 <xStreamBufferReceive+0xda>
    1798:	8a 85       	ldd	r24, Y+10	; 0x0a
    179a:	9b 85       	ldd	r25, Y+11	; 0x0b
    179c:	e1 2c       	mov	r14, r1
    179e:	f1 2c       	mov	r15, r1
    17a0:	00 e0       	ldi	r16, 0x00	; 0
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <xTaskGenericNotify>
    17ae:	1b 86       	std	Y+11, r1	; 0x0b
    17b0:	1a 86       	std	Y+10, r1	; 0x0a
    17b2:	f0 d3       	rcall	.+2016   	; 0x1f94 <xTaskResumeAll>
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <xStreamBufferReceive+0xe2>
    17b6:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    17b8:	d1 2c       	mov	r13, r1
    17ba:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	08 95       	ret

000017de <prvResetNextTaskUnblockTime>:
    17de:	e0 91 a5 15 	lds	r30, 0x15A5	; 0x8015a5 <pxDelayedTaskList>
    17e2:	f0 91 a6 15 	lds	r31, 0x15A6	; 0x8015a6 <pxDelayedTaskList+0x1>
    17e6:	80 81       	ld	r24, Z
    17e8:	81 11       	cpse	r24, r1
    17ea:	0c c0       	rjmp	.+24     	; 0x1804 <prvResetNextTaskUnblockTime+0x26>
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	dc 01       	movw	r26, r24
    17f2:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <xNextTaskUnblockTime>
    17f6:	90 93 70 15 	sts	0x1570, r25	; 0x801570 <xNextTaskUnblockTime+0x1>
    17fa:	a0 93 71 15 	sts	0x1571, r26	; 0x801571 <xNextTaskUnblockTime+0x2>
    17fe:	b0 93 72 15 	sts	0x1572, r27	; 0x801572 <xNextTaskUnblockTime+0x3>
    1802:	08 95       	ret
    1804:	e0 91 a5 15 	lds	r30, 0x15A5	; 0x8015a5 <pxDelayedTaskList>
    1808:	f0 91 a6 15 	lds	r31, 0x15A6	; 0x8015a6 <pxDelayedTaskList+0x1>
    180c:	07 80       	ldd	r0, Z+7	; 0x07
    180e:	f0 85       	ldd	r31, Z+8	; 0x08
    1810:	e0 2d       	mov	r30, r0
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	a2 81       	ldd	r26, Z+2	; 0x02
    1818:	b3 81       	ldd	r27, Z+3	; 0x03
    181a:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <xNextTaskUnblockTime>
    181e:	90 93 70 15 	sts	0x1570, r25	; 0x801570 <xNextTaskUnblockTime+0x1>
    1822:	a0 93 71 15 	sts	0x1571, r26	; 0x801571 <xNextTaskUnblockTime+0x2>
    1826:	b0 93 72 15 	sts	0x1572, r27	; 0x801572 <xNextTaskUnblockTime+0x3>
    182a:	08 95       	ret

0000182c <prvDeleteTCB>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1836:	0e 94 15 04 	call	0x82a	; 0x82a <vPortFree>
    183a:	ce 01       	movw	r24, r28
    183c:	0e 94 15 04 	call	0x82a	; 0x82a <vPortFree>
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <prvInitialiseNewTask>:
    1846:	4f 92       	push	r4
    1848:	5f 92       	push	r5
    184a:	6f 92       	push	r6
    184c:	7f 92       	push	r7
    184e:	8f 92       	push	r8
    1850:	9f 92       	push	r9
    1852:	af 92       	push	r10
    1854:	bf 92       	push	r11
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	2c 01       	movw	r4, r24
    1866:	5b 01       	movw	r10, r22
    1868:	4a 01       	movw	r8, r20
    186a:	39 01       	movw	r6, r18
    186c:	e6 01       	movw	r28, r12
    186e:	65 ea       	ldi	r22, 0xA5	; 165
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1876:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <memset>
    187a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187e:	21 e0       	ldi	r18, 0x01	; 1
    1880:	82 1a       	sub	r8, r18
    1882:	91 08       	sbc	r9, r1
    1884:	88 0e       	add	r8, r24
    1886:	99 1e       	adc	r9, r25
    1888:	a1 14       	cp	r10, r1
    188a:	b1 04       	cpc	r11, r1
    188c:	89 f4       	brne	.+34     	; 0x18b0 <prvInitialiseNewTask+0x6a>
    188e:	15 c0       	rjmp	.+42     	; 0x18ba <prvInitialiseNewTask+0x74>
    1890:	82 2f       	mov	r24, r18
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	f5 01       	movw	r30, r10
    1896:	e8 0f       	add	r30, r24
    1898:	f9 1f       	adc	r31, r25
    189a:	30 81       	ld	r19, Z
    189c:	de 01       	movw	r26, r28
    189e:	a8 0f       	add	r26, r24
    18a0:	b9 1f       	adc	r27, r25
    18a2:	5d 96       	adiw	r26, 0x1d	; 29
    18a4:	3c 93       	st	X, r19
    18a6:	80 81       	ld	r24, Z
    18a8:	88 23       	and	r24, r24
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <prvInitialiseNewTask+0x70>
    18ac:	2f 5f       	subi	r18, 0xFF	; 255
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <prvInitialiseNewTask+0x6c>
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	20 31       	cpi	r18, 0x10	; 16
    18b4:	68 f3       	brcs	.-38     	; 0x1890 <prvInitialiseNewTask+0x4a>
    18b6:	1c a6       	std	Y+44, r1	; 0x2c
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <prvInitialiseNewTask+0x76>
    18ba:	1d 8e       	std	Y+29, r1	; 0x1d
    18bc:	0a 30       	cpi	r16, 0x0A	; 10
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <prvInitialiseNewTask+0x7c>
    18c0:	09 e0       	ldi	r16, 0x09	; 9
    18c2:	0a 8f       	std	Y+26, r16	; 0x1a
    18c4:	0d a7       	std	Y+45, r16	; 0x2d
    18c6:	1e a6       	std	Y+46, r1	; 0x2e
    18c8:	ce 01       	movw	r24, r28
    18ca:	02 96       	adiw	r24, 0x02	; 2
    18cc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <vListInitialiseItem>
    18d0:	ce 01       	movw	r24, r28
    18d2:	0e 96       	adiw	r24, 0x0e	; 14
    18d4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <vListInitialiseItem>
    18d8:	db 87       	std	Y+11, r29	; 0x0b
    18da:	ca 87       	std	Y+10, r28	; 0x0a
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	80 1b       	sub	r24, r16
    18e6:	91 09       	sbc	r25, r1
    18e8:	a1 09       	sbc	r26, r1
    18ea:	b1 09       	sbc	r27, r1
    18ec:	8e 87       	std	Y+14, r24	; 0x0e
    18ee:	9f 87       	std	Y+15, r25	; 0x0f
    18f0:	a8 8b       	std	Y+16, r26	; 0x10
    18f2:	b9 8b       	std	Y+17, r27	; 0x11
    18f4:	df 8b       	std	Y+23, r29	; 0x17
    18f6:	ce 8b       	std	Y+22, r28	; 0x16
    18f8:	84 e0       	ldi	r24, 0x04	; 4
    18fa:	fe 01       	movw	r30, r28
    18fc:	bf 96       	adiw	r30, 0x2f	; 47
    18fe:	df 01       	movw	r26, r30
    1900:	1d 92       	st	X+, r1
    1902:	8a 95       	dec	r24
    1904:	e9 f7       	brne	.-6      	; 0x1900 <prvInitialiseNewTask+0xba>
    1906:	1b aa       	std	Y+51, r1	; 0x33
    1908:	a3 01       	movw	r20, r6
    190a:	b2 01       	movw	r22, r4
    190c:	c4 01       	movw	r24, r8
    190e:	4f d8       	rcall	.-3938   	; 0x9ae <pxPortInitialiseStack>
    1910:	99 83       	std	Y+1, r25	; 0x01
    1912:	88 83       	st	Y, r24
    1914:	e1 14       	cp	r14, r1
    1916:	f1 04       	cpc	r15, r1
    1918:	19 f0       	breq	.+6      	; 0x1920 <prvInitialiseNewTask+0xda>
    191a:	f7 01       	movw	r30, r14
    191c:	d1 83       	std	Z+1, r29	; 0x01
    191e:	c0 83       	st	Z, r28
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	9f 90       	pop	r9
    1934:	8f 90       	pop	r8
    1936:	7f 90       	pop	r7
    1938:	6f 90       	pop	r6
    193a:	5f 90       	pop	r5
    193c:	4f 90       	pop	r4
    193e:	08 95       	ret

00001940 <prvInitialiseTaskLists>:
    1940:	cf 93       	push	r28
    1942:	c0 e0       	ldi	r28, 0x00	; 0
    1944:	09 c0       	rjmp	.+18     	; 0x1958 <prvInitialiseTaskLists+0x18>
    1946:	2b e0       	ldi	r18, 0x0B	; 11
    1948:	c2 9f       	mul	r28, r18
    194a:	c0 01       	movw	r24, r0
    194c:	11 24       	eor	r1, r1
    194e:	83 54       	subi	r24, 0x43	; 67
    1950:	9a 4e       	sbci	r25, 0xEA	; 234
    1952:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    1956:	cf 5f       	subi	r28, 0xFF	; 255
    1958:	ca 30       	cpi	r28, 0x0A	; 10
    195a:	a8 f3       	brcs	.-22     	; 0x1946 <prvInitialiseTaskLists+0x6>
    195c:	82 eb       	ldi	r24, 0xB2	; 178
    195e:	95 e1       	ldi	r25, 0x15	; 21
    1960:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    1964:	87 ea       	ldi	r24, 0xA7	; 167
    1966:	95 e1       	ldi	r25, 0x15	; 21
    1968:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    196c:	88 e9       	ldi	r24, 0x98	; 152
    196e:	95 e1       	ldi	r25, 0x15	; 21
    1970:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    1974:	8d e8       	ldi	r24, 0x8D	; 141
    1976:	95 e1       	ldi	r25, 0x15	; 21
    1978:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    197c:	81 e8       	ldi	r24, 0x81	; 129
    197e:	95 e1       	ldi	r25, 0x15	; 21
    1980:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    1984:	82 eb       	ldi	r24, 0xB2	; 178
    1986:	95 e1       	ldi	r25, 0x15	; 21
    1988:	90 93 a6 15 	sts	0x15A6, r25	; 0x8015a6 <pxDelayedTaskList+0x1>
    198c:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <pxDelayedTaskList>
    1990:	87 ea       	ldi	r24, 0xA7	; 167
    1992:	95 e1       	ldi	r25, 0x15	; 21
    1994:	90 93 a4 15 	sts	0x15A4, r25	; 0x8015a4 <pxOverflowDelayedTaskList+0x1>
    1998:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <pxOverflowDelayedTaskList>
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <prvAddNewTaskToReadyList>:
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	0f 92       	push	r0
    19ac:	80 91 80 15 	lds	r24, 0x1580	; 0x801580 <uxCurrentNumberOfTasks>
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	80 93 80 15 	sts	0x1580, r24	; 0x801580 <uxCurrentNumberOfTasks>
    19b6:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    19ba:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    19be:	89 2b       	or	r24, r25
    19c0:	51 f4       	brne	.+20     	; 0x19d6 <prvAddNewTaskToReadyList+0x36>
    19c2:	d0 93 2c 16 	sts	0x162C, r29	; 0x80162c <pxCurrentTCB+0x1>
    19c6:	c0 93 2b 16 	sts	0x162B, r28	; 0x80162b <pxCurrentTCB>
    19ca:	80 91 80 15 	lds	r24, 0x1580	; 0x801580 <uxCurrentNumberOfTasks>
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 f4       	brne	.+36     	; 0x19f6 <prvAddNewTaskToReadyList+0x56>
    19d2:	b6 df       	rcall	.-148    	; 0x1940 <prvInitialiseTaskLists>
    19d4:	10 c0       	rjmp	.+32     	; 0x19f6 <prvAddNewTaskToReadyList+0x56>
    19d6:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <xSchedulerRunning>
    19da:	81 11       	cpse	r24, r1
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <prvAddNewTaskToReadyList+0x56>
    19de:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    19e2:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    19e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    19e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ea:	89 17       	cp	r24, r25
    19ec:	20 f0       	brcs	.+8      	; 0x19f6 <prvAddNewTaskToReadyList+0x56>
    19ee:	d0 93 2c 16 	sts	0x162C, r29	; 0x80162c <pxCurrentTCB+0x1>
    19f2:	c0 93 2b 16 	sts	0x162B, r28	; 0x80162b <pxCurrentTCB>
    19f6:	80 91 73 15 	lds	r24, 0x1573	; 0x801573 <uxTaskNumber>
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	80 93 73 15 	sts	0x1573, r24	; 0x801573 <uxTaskNumber>
    1a00:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a02:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    1a06:	8e 17       	cp	r24, r30
    1a08:	10 f4       	brcc	.+4      	; 0x1a0e <prvAddNewTaskToReadyList+0x6e>
    1a0a:	e0 93 7b 15 	sts	0x157B, r30	; 0x80157b <uxTopReadyPriority>
    1a0e:	8b e0       	ldi	r24, 0x0B	; 11
    1a10:	8e 9f       	mul	r24, r30
    1a12:	f0 01       	movw	r30, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	e3 54       	subi	r30, 0x43	; 67
    1a18:	fa 4e       	sbci	r31, 0xEA	; 234
    1a1a:	01 80       	ldd	r0, Z+1	; 0x01
    1a1c:	f2 81       	ldd	r31, Z+2	; 0x02
    1a1e:	e0 2d       	mov	r30, r0
    1a20:	ff 83       	std	Y+7, r31	; 0x07
    1a22:	ee 83       	std	Y+6, r30	; 0x06
    1a24:	26 81       	ldd	r18, Z+6	; 0x06
    1a26:	37 81       	ldd	r19, Z+7	; 0x07
    1a28:	39 87       	std	Y+9, r19	; 0x09
    1a2a:	28 87       	std	Y+8, r18	; 0x08
    1a2c:	a6 81       	ldd	r26, Z+6	; 0x06
    1a2e:	b7 81       	ldd	r27, Z+7	; 0x07
    1a30:	9e 01       	movw	r18, r28
    1a32:	2e 5f       	subi	r18, 0xFE	; 254
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	15 96       	adiw	r26, 0x05	; 5
    1a38:	3c 93       	st	X, r19
    1a3a:	2e 93       	st	-X, r18
    1a3c:	14 97       	sbiw	r26, 0x04	; 4
    1a3e:	37 83       	std	Z+7, r19	; 0x07
    1a40:	26 83       	std	Z+6, r18	; 0x06
    1a42:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a44:	8e 9f       	mul	r24, r30
    1a46:	f0 01       	movw	r30, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	e3 54       	subi	r30, 0x43	; 67
    1a4c:	fa 4e       	sbci	r31, 0xEA	; 234
    1a4e:	fd 87       	std	Y+13, r31	; 0x0d
    1a50:	ec 87       	std	Y+12, r30	; 0x0c
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	80 83       	st	Z, r24
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <xSchedulerRunning>
    1a60:	88 23       	and	r24, r24
    1a62:	51 f0       	breq	.+20     	; 0x1a78 <prvAddNewTaskToReadyList+0xd8>
    1a64:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    1a68:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1a6c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a70:	98 17       	cp	r25, r24
    1a72:	10 f4       	brcc	.+4      	; 0x1a78 <prvAddNewTaskToReadyList+0xd8>
    1a74:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	08 95       	ret

00001a7e <prvCheckTasksWaitingTermination>:
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	1b c0       	rjmp	.+54     	; 0x1aba <prvCheckTasksWaitingTermination+0x3c>
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	0f 92       	push	r0
    1a8a:	e0 91 94 15 	lds	r30, 0x1594	; 0x801594 <xTasksWaitingTermination+0x7>
    1a8e:	f0 91 95 15 	lds	r31, 0x1595	; 0x801595 <xTasksWaitingTermination+0x8>
    1a92:	c0 85       	ldd	r28, Z+8	; 0x08
    1a94:	d1 85       	ldd	r29, Z+9	; 0x09
    1a96:	ce 01       	movw	r24, r28
    1a98:	02 96       	adiw	r24, 0x02	; 2
    1a9a:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
    1a9e:	80 91 80 15 	lds	r24, 0x1580	; 0x801580 <uxCurrentNumberOfTasks>
    1aa2:	81 50       	subi	r24, 0x01	; 1
    1aa4:	80 93 80 15 	sts	0x1580, r24	; 0x801580 <uxCurrentNumberOfTasks>
    1aa8:	80 91 8c 15 	lds	r24, 0x158C	; 0x80158c <uxDeletedTasksWaitingCleanUp>
    1aac:	81 50       	subi	r24, 0x01	; 1
    1aae:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <uxDeletedTasksWaitingCleanUp>
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	b9 de       	rcall	.-654    	; 0x182c <prvDeleteTCB>
    1aba:	80 91 8c 15 	lds	r24, 0x158C	; 0x80158c <uxDeletedTasksWaitingCleanUp>
    1abe:	81 11       	cpse	r24, r1
    1ac0:	e1 cf       	rjmp	.-62     	; 0x1a84 <prvCheckTasksWaitingTermination+0x6>
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <prvAddCurrentTaskToDelayedList>:
    1ac8:	8f 92       	push	r8
    1aca:	9f 92       	push	r9
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	6b 01       	movw	r12, r22
    1ade:	7c 01       	movw	r14, r24
    1ae0:	c4 2f       	mov	r28, r20
    1ae2:	80 90 7c 15 	lds	r8, 0x157C	; 0x80157c <xTickCount>
    1ae6:	90 90 7d 15 	lds	r9, 0x157D	; 0x80157d <xTickCount+0x1>
    1aea:	a0 90 7e 15 	lds	r10, 0x157E	; 0x80157e <xTickCount+0x2>
    1aee:	b0 90 7f 15 	lds	r11, 0x157F	; 0x80157f <xTickCount+0x3>
    1af2:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    1af6:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1afa:	02 96       	adiw	r24, 0x02	; 2
    1afc:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	c8 16       	cp	r12, r24
    1b04:	d8 06       	cpc	r13, r24
    1b06:	e8 06       	cpc	r14, r24
    1b08:	f8 06       	cpc	r15, r24
    1b0a:	b1 f5       	brne	.+108    	; 0x1b78 <prvAddCurrentTaskToDelayedList+0xb0>
    1b0c:	cc 23       	and	r28, r28
    1b0e:	a1 f1       	breq	.+104    	; 0x1b78 <prvAddCurrentTaskToDelayedList+0xb0>
    1b10:	e1 e8       	ldi	r30, 0x81	; 129
    1b12:	f5 e1       	ldi	r31, 0x15	; 21
    1b14:	a1 81       	ldd	r26, Z+1	; 0x01
    1b16:	b2 81       	ldd	r27, Z+2	; 0x02
    1b18:	c0 91 2b 16 	lds	r28, 0x162B	; 0x80162b <pxCurrentTCB>
    1b1c:	d0 91 2c 16 	lds	r29, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1b20:	bf 83       	std	Y+7, r27	; 0x07
    1b22:	ae 83       	std	Y+6, r26	; 0x06
    1b24:	c0 91 2b 16 	lds	r28, 0x162B	; 0x80162b <pxCurrentTCB>
    1b28:	d0 91 2c 16 	lds	r29, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1b2c:	16 96       	adiw	r26, 0x06	; 6
    1b2e:	8d 91       	ld	r24, X+
    1b30:	9c 91       	ld	r25, X
    1b32:	17 97       	sbiw	r26, 0x07	; 7
    1b34:	99 87       	std	Y+9, r25	; 0x09
    1b36:	88 87       	std	Y+8, r24	; 0x08
    1b38:	16 96       	adiw	r26, 0x06	; 6
    1b3a:	cd 91       	ld	r28, X+
    1b3c:	dc 91       	ld	r29, X
    1b3e:	17 97       	sbiw	r26, 0x07	; 7
    1b40:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    1b44:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1b48:	02 96       	adiw	r24, 0x02	; 2
    1b4a:	9d 83       	std	Y+5, r25	; 0x05
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
    1b4e:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    1b52:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1b56:	02 96       	adiw	r24, 0x02	; 2
    1b58:	17 96       	adiw	r26, 0x07	; 7
    1b5a:	9c 93       	st	X, r25
    1b5c:	8e 93       	st	-X, r24
    1b5e:	16 97       	sbiw	r26, 0x06	; 6
    1b60:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
    1b64:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1b68:	1d 96       	adiw	r26, 0x0d	; 13
    1b6a:	fc 93       	st	X, r31
    1b6c:	ee 93       	st	-X, r30
    1b6e:	1c 97       	sbiw	r26, 0x0c	; 12
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 5f       	subi	r24, 0xFF	; 255
    1b74:	80 83       	st	Z, r24
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <prvAddCurrentTaskToDelayedList+0x12e>
    1b78:	c8 0c       	add	r12, r8
    1b7a:	d9 1c       	adc	r13, r9
    1b7c:	ea 1c       	adc	r14, r10
    1b7e:	fb 1c       	adc	r15, r11
    1b80:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    1b84:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1b88:	c2 82       	std	Z+2, r12	; 0x02
    1b8a:	d3 82       	std	Z+3, r13	; 0x03
    1b8c:	e4 82       	std	Z+4, r14	; 0x04
    1b8e:	f5 82       	std	Z+5, r15	; 0x05
    1b90:	c8 14       	cp	r12, r8
    1b92:	d9 04       	cpc	r13, r9
    1b94:	ea 04       	cpc	r14, r10
    1b96:	fb 04       	cpc	r15, r11
    1b98:	68 f4       	brcc	.+26     	; 0x1bb4 <prvAddCurrentTaskToDelayedList+0xec>
    1b9a:	60 91 2b 16 	lds	r22, 0x162B	; 0x80162b <pxCurrentTCB>
    1b9e:	70 91 2c 16 	lds	r23, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1ba2:	80 91 a3 15 	lds	r24, 0x15A3	; 0x8015a3 <pxOverflowDelayedTaskList>
    1ba6:	90 91 a4 15 	lds	r25, 0x15A4	; 0x8015a4 <pxOverflowDelayedTaskList+0x1>
    1baa:	6e 5f       	subi	r22, 0xFE	; 254
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    1bb2:	21 c0       	rjmp	.+66     	; 0x1bf6 <prvAddCurrentTaskToDelayedList+0x12e>
    1bb4:	60 91 2b 16 	lds	r22, 0x162B	; 0x80162b <pxCurrentTCB>
    1bb8:	70 91 2c 16 	lds	r23, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1bbc:	80 91 a5 15 	lds	r24, 0x15A5	; 0x8015a5 <pxDelayedTaskList>
    1bc0:	90 91 a6 15 	lds	r25, 0x15A6	; 0x8015a6 <pxDelayedTaskList+0x1>
    1bc4:	6e 5f       	subi	r22, 0xFE	; 254
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    1bcc:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <xNextTaskUnblockTime>
    1bd0:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <xNextTaskUnblockTime+0x1>
    1bd4:	a0 91 71 15 	lds	r26, 0x1571	; 0x801571 <xNextTaskUnblockTime+0x2>
    1bd8:	b0 91 72 15 	lds	r27, 0x1572	; 0x801572 <xNextTaskUnblockTime+0x3>
    1bdc:	c8 16       	cp	r12, r24
    1bde:	d9 06       	cpc	r13, r25
    1be0:	ea 06       	cpc	r14, r26
    1be2:	fb 06       	cpc	r15, r27
    1be4:	40 f4       	brcc	.+16     	; 0x1bf6 <prvAddCurrentTaskToDelayedList+0x12e>
    1be6:	c0 92 6f 15 	sts	0x156F, r12	; 0x80156f <xNextTaskUnblockTime>
    1bea:	d0 92 70 15 	sts	0x1570, r13	; 0x801570 <xNextTaskUnblockTime+0x1>
    1bee:	e0 92 71 15 	sts	0x1571, r14	; 0x801571 <xNextTaskUnblockTime+0x2>
    1bf2:	f0 92 72 15 	sts	0x1572, r15	; 0x801572 <xNextTaskUnblockTime+0x3>
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	08 95       	ret

00001c0c <xTaskCreate>:
    1c0c:	2f 92       	push	r2
    1c0e:	3f 92       	push	r3
    1c10:	4f 92       	push	r4
    1c12:	5f 92       	push	r5
    1c14:	6f 92       	push	r6
    1c16:	7f 92       	push	r7
    1c18:	8f 92       	push	r8
    1c1a:	9f 92       	push	r9
    1c1c:	af 92       	push	r10
    1c1e:	bf 92       	push	r11
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	3c 01       	movw	r6, r24
    1c30:	1b 01       	movw	r2, r22
    1c32:	4a 01       	movw	r8, r20
    1c34:	29 01       	movw	r4, r18
    1c36:	ca 01       	movw	r24, r20
    1c38:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <pvPortMalloc>
    1c3c:	6c 01       	movw	r12, r24
    1c3e:	89 2b       	or	r24, r25
    1c40:	71 f0       	breq	.+28     	; 0x1c5e <xTaskCreate+0x52>
    1c42:	84 e3       	ldi	r24, 0x34	; 52
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <pvPortMalloc>
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	89 2b       	or	r24, r25
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <xTaskCreate+0x4a>
    1c50:	dc 8e       	std	Y+28, r13	; 0x1c
    1c52:	cb 8e       	std	Y+27, r12	; 0x1b
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <xTaskCreate+0x56>
    1c56:	c6 01       	movw	r24, r12
    1c58:	0e 94 15 04 	call	0x82a	; 0x82a <vPortFree>
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <xTaskCreate+0x56>
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
    1c60:	d0 e0       	ldi	r29, 0x00	; 0
    1c62:	20 97       	sbiw	r28, 0x00	; 0
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <xTaskCreate+0x72>
    1c66:	a1 2c       	mov	r10, r1
    1c68:	b1 2c       	mov	r11, r1
    1c6a:	6e 01       	movw	r12, r28
    1c6c:	92 01       	movw	r18, r4
    1c6e:	a4 01       	movw	r20, r8
    1c70:	b1 01       	movw	r22, r2
    1c72:	c3 01       	movw	r24, r6
    1c74:	e8 dd       	rcall	.-1072   	; 0x1846 <prvInitialiseNewTask>
    1c76:	ce 01       	movw	r24, r28
    1c78:	93 de       	rcall	.-730    	; 0x19a0 <prvAddNewTaskToReadyList>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <xTaskCreate+0x74>
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	cf 90       	pop	r12
    1c8e:	bf 90       	pop	r11
    1c90:	af 90       	pop	r10
    1c92:	9f 90       	pop	r9
    1c94:	8f 90       	pop	r8
    1c96:	7f 90       	pop	r7
    1c98:	6f 90       	pop	r6
    1c9a:	5f 90       	pop	r5
    1c9c:	4f 90       	pop	r4
    1c9e:	3f 90       	pop	r3
    1ca0:	2f 90       	pop	r2
    1ca2:	08 95       	ret

00001ca4 <vTaskStartScheduler>:
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	0f 2e       	mov	r0, r31
    1cac:	fd e6       	ldi	r31, 0x6D	; 109
    1cae:	ef 2e       	mov	r14, r31
    1cb0:	f5 e1       	ldi	r31, 0x15	; 21
    1cb2:	ff 2e       	mov	r15, r31
    1cb4:	f0 2d       	mov	r31, r0
    1cb6:	00 e0       	ldi	r16, 0x00	; 0
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 ec       	ldi	r20, 0xC0	; 192
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	61 ea       	ldi	r22, 0xA1	; 161
    1cc2:	72 e0       	ldi	r23, 0x02	; 2
    1cc4:	8d ec       	ldi	r24, 0xCD	; 205
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a1 df       	rcall	.-190    	; 0x1c0c <xTaskCreate>
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	11 f4       	brne	.+4      	; 0x1cd2 <vTaskStartScheduler+0x2e>
    1cce:	0e 94 04 18 	call	0x3008	; 0x3008 <xTimerCreateTimerTask>
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	c9 f4       	brne	.+50     	; 0x1d08 <vTaskStartScheduler+0x64>
    1cd6:	f8 94       	cli
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	9f ef       	ldi	r25, 0xFF	; 255
    1cdc:	dc 01       	movw	r26, r24
    1cde:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <xNextTaskUnblockTime>
    1ce2:	90 93 70 15 	sts	0x1570, r25	; 0x801570 <xNextTaskUnblockTime+0x1>
    1ce6:	a0 93 71 15 	sts	0x1571, r26	; 0x801571 <xNextTaskUnblockTime+0x2>
    1cea:	b0 93 72 15 	sts	0x1572, r27	; 0x801572 <xNextTaskUnblockTime+0x3>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 93 7a 15 	sts	0x157A, r24	; 0x80157a <xSchedulerRunning>
    1cf4:	10 92 7c 15 	sts	0x157C, r1	; 0x80157c <xTickCount>
    1cf8:	10 92 7d 15 	sts	0x157D, r1	; 0x80157d <xTickCount+0x1>
    1cfc:	10 92 7e 15 	sts	0x157E, r1	; 0x80157e <xTickCount+0x2>
    1d00:	10 92 7f 15 	sts	0x157F, r1	; 0x80157f <xTickCount+0x3>
    1d04:	0e 94 ee 04 	call	0x9dc	; 0x9dc <xPortStartScheduler>
    1d08:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uxTopUsedPriority>
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	08 95       	ret

00001d14 <vTaskSuspendAll>:
    1d14:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	80 93 6c 15 	sts	0x156C, r24	; 0x80156c <uxSchedulerSuspended>
    1d1e:	08 95       	ret

00001d20 <xTaskGetTickCount>:
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	0f 92       	push	r0
    1d26:	60 91 7c 15 	lds	r22, 0x157C	; 0x80157c <xTickCount>
    1d2a:	70 91 7d 15 	lds	r23, 0x157D	; 0x80157d <xTickCount+0x1>
    1d2e:	80 91 7e 15 	lds	r24, 0x157E	; 0x80157e <xTickCount+0x2>
    1d32:	90 91 7f 15 	lds	r25, 0x157F	; 0x80157f <xTickCount+0x3>
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	08 95       	ret

00001d3c <xTaskIncrementTick>:
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	05 c1       	rjmp	.+522    	; 0x1f5a <xTaskIncrementTick+0x21e>
    1d50:	c0 90 7c 15 	lds	r12, 0x157C	; 0x80157c <xTickCount>
    1d54:	d0 90 7d 15 	lds	r13, 0x157D	; 0x80157d <xTickCount+0x1>
    1d58:	e0 90 7e 15 	lds	r14, 0x157E	; 0x80157e <xTickCount+0x2>
    1d5c:	f0 90 7f 15 	lds	r15, 0x157F	; 0x80157f <xTickCount+0x3>
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
    1d62:	c8 1a       	sub	r12, r24
    1d64:	d8 0a       	sbc	r13, r24
    1d66:	e8 0a       	sbc	r14, r24
    1d68:	f8 0a       	sbc	r15, r24
    1d6a:	c0 92 7c 15 	sts	0x157C, r12	; 0x80157c <xTickCount>
    1d6e:	d0 92 7d 15 	sts	0x157D, r13	; 0x80157d <xTickCount+0x1>
    1d72:	e0 92 7e 15 	sts	0x157E, r14	; 0x80157e <xTickCount+0x2>
    1d76:	f0 92 7f 15 	sts	0x157F, r15	; 0x80157f <xTickCount+0x3>
    1d7a:	c1 14       	cp	r12, r1
    1d7c:	d1 04       	cpc	r13, r1
    1d7e:	e1 04       	cpc	r14, r1
    1d80:	f1 04       	cpc	r15, r1
    1d82:	b1 f4       	brne	.+44     	; 0x1db0 <xTaskIncrementTick+0x74>
    1d84:	80 91 a5 15 	lds	r24, 0x15A5	; 0x8015a5 <pxDelayedTaskList>
    1d88:	90 91 a6 15 	lds	r25, 0x15A6	; 0x8015a6 <pxDelayedTaskList+0x1>
    1d8c:	20 91 a3 15 	lds	r18, 0x15A3	; 0x8015a3 <pxOverflowDelayedTaskList>
    1d90:	30 91 a4 15 	lds	r19, 0x15A4	; 0x8015a4 <pxOverflowDelayedTaskList+0x1>
    1d94:	30 93 a6 15 	sts	0x15A6, r19	; 0x8015a6 <pxDelayedTaskList+0x1>
    1d98:	20 93 a5 15 	sts	0x15A5, r18	; 0x8015a5 <pxDelayedTaskList>
    1d9c:	90 93 a4 15 	sts	0x15A4, r25	; 0x8015a4 <pxOverflowDelayedTaskList+0x1>
    1da0:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <pxOverflowDelayedTaskList>
    1da4:	80 91 74 15 	lds	r24, 0x1574	; 0x801574 <xNumOfOverflows>
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	80 93 74 15 	sts	0x1574, r24	; 0x801574 <xNumOfOverflows>
    1dae:	17 dd       	rcall	.-1490   	; 0x17de <prvResetNextTaskUnblockTime>
    1db0:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <xNextTaskUnblockTime>
    1db4:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <xNextTaskUnblockTime+0x1>
    1db8:	a0 91 71 15 	lds	r26, 0x1571	; 0x801571 <xNextTaskUnblockTime+0x2>
    1dbc:	b0 91 72 15 	lds	r27, 0x1572	; 0x801572 <xNextTaskUnblockTime+0x3>
    1dc0:	c8 16       	cp	r12, r24
    1dc2:	d9 06       	cpc	r13, r25
    1dc4:	ea 06       	cpc	r14, r26
    1dc6:	fb 06       	cpc	r15, r27
    1dc8:	20 f4       	brcc	.+8      	; 0x1dd2 <xTaskIncrementTick+0x96>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	b2 c0       	rjmp	.+356    	; 0x1f32 <xTaskIncrementTick+0x1f6>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <xTaskIncrementTick+0x98>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	e0 91 a5 15 	lds	r30, 0x15A5	; 0x8015a5 <pxDelayedTaskList>
    1dd8:	f0 91 a6 15 	lds	r31, 0x15A6	; 0x8015a6 <pxDelayedTaskList+0x1>
    1ddc:	90 81       	ld	r25, Z
    1dde:	91 11       	cpse	r25, r1
    1de0:	0c c0       	rjmp	.+24     	; 0x1dfa <xTaskIncrementTick+0xbe>
    1de2:	4f ef       	ldi	r20, 0xFF	; 255
    1de4:	5f ef       	ldi	r21, 0xFF	; 255
    1de6:	ba 01       	movw	r22, r20
    1de8:	40 93 6f 15 	sts	0x156F, r20	; 0x80156f <xNextTaskUnblockTime>
    1dec:	50 93 70 15 	sts	0x1570, r21	; 0x801570 <xNextTaskUnblockTime+0x1>
    1df0:	60 93 71 15 	sts	0x1571, r22	; 0x801571 <xNextTaskUnblockTime+0x2>
    1df4:	70 93 72 15 	sts	0x1572, r23	; 0x801572 <xNextTaskUnblockTime+0x3>
    1df8:	9c c0       	rjmp	.+312    	; 0x1f32 <xTaskIncrementTick+0x1f6>
    1dfa:	e0 91 a5 15 	lds	r30, 0x15A5	; 0x8015a5 <pxDelayedTaskList>
    1dfe:	f0 91 a6 15 	lds	r31, 0x15A6	; 0x8015a6 <pxDelayedTaskList+0x1>
    1e02:	07 80       	ldd	r0, Z+7	; 0x07
    1e04:	f0 85       	ldd	r31, Z+8	; 0x08
    1e06:	e0 2d       	mov	r30, r0
    1e08:	00 84       	ldd	r0, Z+8	; 0x08
    1e0a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e0c:	e0 2d       	mov	r30, r0
    1e0e:	42 81       	ldd	r20, Z+2	; 0x02
    1e10:	53 81       	ldd	r21, Z+3	; 0x03
    1e12:	64 81       	ldd	r22, Z+4	; 0x04
    1e14:	75 81       	ldd	r23, Z+5	; 0x05
    1e16:	c4 16       	cp	r12, r20
    1e18:	d5 06       	cpc	r13, r21
    1e1a:	e6 06       	cpc	r14, r22
    1e1c:	f7 06       	cpc	r15, r23
    1e1e:	48 f4       	brcc	.+18     	; 0x1e32 <xTaskIncrementTick+0xf6>
    1e20:	40 93 6f 15 	sts	0x156F, r20	; 0x80156f <xNextTaskUnblockTime>
    1e24:	50 93 70 15 	sts	0x1570, r21	; 0x801570 <xNextTaskUnblockTime+0x1>
    1e28:	60 93 71 15 	sts	0x1571, r22	; 0x801571 <xNextTaskUnblockTime+0x2>
    1e2c:	70 93 72 15 	sts	0x1572, r23	; 0x801572 <xNextTaskUnblockTime+0x3>
    1e30:	80 c0       	rjmp	.+256    	; 0x1f32 <xTaskIncrementTick+0x1f6>
    1e32:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e34:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e36:	c6 81       	ldd	r28, Z+6	; 0x06
    1e38:	d7 81       	ldd	r29, Z+7	; 0x07
    1e3a:	20 85       	ldd	r18, Z+8	; 0x08
    1e3c:	31 85       	ldd	r19, Z+9	; 0x09
    1e3e:	3f 83       	std	Y+7, r19	; 0x07
    1e40:	2e 83       	std	Y+6, r18	; 0x06
    1e42:	c0 85       	ldd	r28, Z+8	; 0x08
    1e44:	d1 85       	ldd	r29, Z+9	; 0x09
    1e46:	26 81       	ldd	r18, Z+6	; 0x06
    1e48:	37 81       	ldd	r19, Z+7	; 0x07
    1e4a:	3d 83       	std	Y+5, r19	; 0x05
    1e4c:	2c 83       	std	Y+4, r18	; 0x04
    1e4e:	11 96       	adiw	r26, 0x01	; 1
    1e50:	4d 91       	ld	r20, X+
    1e52:	5c 91       	ld	r21, X
    1e54:	12 97       	sbiw	r26, 0x02	; 2
    1e56:	9f 01       	movw	r18, r30
    1e58:	2e 5f       	subi	r18, 0xFE	; 254
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	42 17       	cp	r20, r18
    1e5e:	53 07       	cpc	r21, r19
    1e60:	31 f4       	brne	.+12     	; 0x1e6e <xTaskIncrementTick+0x132>
    1e62:	40 85       	ldd	r20, Z+8	; 0x08
    1e64:	51 85       	ldd	r21, Z+9	; 0x09
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	5c 93       	st	X, r21
    1e6a:	4e 93       	st	-X, r20
    1e6c:	11 97       	sbiw	r26, 0x01	; 1
    1e6e:	15 86       	std	Z+13, r1	; 0x0d
    1e70:	14 86       	std	Z+12, r1	; 0x0c
    1e72:	9c 91       	ld	r25, X
    1e74:	91 50       	subi	r25, 0x01	; 1
    1e76:	9c 93       	st	X, r25
    1e78:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e7a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e7c:	10 97       	sbiw	r26, 0x00	; 0
    1e7e:	09 f1       	breq	.+66     	; 0x1ec2 <xTaskIncrementTick+0x186>
    1e80:	c2 89       	ldd	r28, Z+18	; 0x12
    1e82:	d3 89       	ldd	r29, Z+19	; 0x13
    1e84:	44 89       	ldd	r20, Z+20	; 0x14
    1e86:	55 89       	ldd	r21, Z+21	; 0x15
    1e88:	5f 83       	std	Y+7, r21	; 0x07
    1e8a:	4e 83       	std	Y+6, r20	; 0x06
    1e8c:	c4 89       	ldd	r28, Z+20	; 0x14
    1e8e:	d5 89       	ldd	r29, Z+21	; 0x15
    1e90:	42 89       	ldd	r20, Z+18	; 0x12
    1e92:	53 89       	ldd	r21, Z+19	; 0x13
    1e94:	5d 83       	std	Y+5, r21	; 0x05
    1e96:	4c 83       	std	Y+4, r20	; 0x04
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	6d 91       	ld	r22, X+
    1e9c:	7c 91       	ld	r23, X
    1e9e:	12 97       	sbiw	r26, 0x02	; 2
    1ea0:	af 01       	movw	r20, r30
    1ea2:	42 5f       	subi	r20, 0xF2	; 242
    1ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea6:	64 17       	cp	r22, r20
    1ea8:	75 07       	cpc	r23, r21
    1eaa:	31 f4       	brne	.+12     	; 0x1eb8 <xTaskIncrementTick+0x17c>
    1eac:	44 89       	ldd	r20, Z+20	; 0x14
    1eae:	55 89       	ldd	r21, Z+21	; 0x15
    1eb0:	12 96       	adiw	r26, 0x02	; 2
    1eb2:	5c 93       	st	X, r21
    1eb4:	4e 93       	st	-X, r20
    1eb6:	11 97       	sbiw	r26, 0x01	; 1
    1eb8:	11 8e       	std	Z+25, r1	; 0x19
    1eba:	10 8e       	std	Z+24, r1	; 0x18
    1ebc:	9c 91       	ld	r25, X
    1ebe:	91 50       	subi	r25, 0x01	; 1
    1ec0:	9c 93       	st	X, r25
    1ec2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ec4:	90 91 7b 15 	lds	r25, 0x157B	; 0x80157b <uxTopReadyPriority>
    1ec8:	9a 17       	cp	r25, r26
    1eca:	10 f4       	brcc	.+4      	; 0x1ed0 <xTaskIncrementTick+0x194>
    1ecc:	a0 93 7b 15 	sts	0x157B, r26	; 0x80157b <uxTopReadyPriority>
    1ed0:	9b e0       	ldi	r25, 0x0B	; 11
    1ed2:	9a 9f       	mul	r25, r26
    1ed4:	d0 01       	movw	r26, r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	a3 54       	subi	r26, 0x43	; 67
    1eda:	ba 4e       	sbci	r27, 0xEA	; 234
    1edc:	11 96       	adiw	r26, 0x01	; 1
    1ede:	0d 90       	ld	r0, X+
    1ee0:	bc 91       	ld	r27, X
    1ee2:	a0 2d       	mov	r26, r0
    1ee4:	b7 83       	std	Z+7, r27	; 0x07
    1ee6:	a6 83       	std	Z+6, r26	; 0x06
    1ee8:	16 96       	adiw	r26, 0x06	; 6
    1eea:	4d 91       	ld	r20, X+
    1eec:	5c 91       	ld	r21, X
    1eee:	17 97       	sbiw	r26, 0x07	; 7
    1ef0:	51 87       	std	Z+9, r21	; 0x09
    1ef2:	40 87       	std	Z+8, r20	; 0x08
    1ef4:	16 96       	adiw	r26, 0x06	; 6
    1ef6:	cd 91       	ld	r28, X+
    1ef8:	dc 91       	ld	r29, X
    1efa:	17 97       	sbiw	r26, 0x07	; 7
    1efc:	3d 83       	std	Y+5, r19	; 0x05
    1efe:	2c 83       	std	Y+4, r18	; 0x04
    1f00:	17 96       	adiw	r26, 0x07	; 7
    1f02:	3c 93       	st	X, r19
    1f04:	2e 93       	st	-X, r18
    1f06:	16 97       	sbiw	r26, 0x06	; 6
    1f08:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f0a:	9a 9f       	mul	r25, r26
    1f0c:	d0 01       	movw	r26, r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	a3 54       	subi	r26, 0x43	; 67
    1f12:	ba 4e       	sbci	r27, 0xEA	; 234
    1f14:	b5 87       	std	Z+13, r27	; 0x0d
    1f16:	a4 87       	std	Z+12, r26	; 0x0c
    1f18:	9c 91       	ld	r25, X
    1f1a:	9f 5f       	subi	r25, 0xFF	; 255
    1f1c:	9c 93       	st	X, r25
    1f1e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f20:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    1f24:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1f28:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f2a:	29 17       	cp	r18, r25
    1f2c:	08 f0       	brcs	.+2      	; 0x1f30 <xTaskIncrementTick+0x1f4>
    1f2e:	4f cf       	rjmp	.-354    	; 0x1dce <xTaskIncrementTick+0x92>
    1f30:	51 cf       	rjmp	.-350    	; 0x1dd4 <xTaskIncrementTick+0x98>
    1f32:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    1f36:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    1f3a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1f3c:	9b e0       	ldi	r25, 0x0B	; 11
    1f3e:	e9 9f       	mul	r30, r25
    1f40:	f0 01       	movw	r30, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	e3 54       	subi	r30, 0x43	; 67
    1f46:	fa 4e       	sbci	r31, 0xEA	; 234
    1f48:	90 81       	ld	r25, Z
    1f4a:	92 30       	cpi	r25, 0x02	; 2
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <xTaskIncrementTick+0x214>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 91 75 15 	lds	r25, 0x1575	; 0x801575 <xYieldPending>
    1f54:	91 11       	cpse	r25, r1
    1f56:	16 c0       	rjmp	.+44     	; 0x1f84 <xTaskIncrementTick+0x248>
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <xTaskIncrementTick+0x24a>
    1f5a:	80 91 76 15 	lds	r24, 0x1576	; 0x801576 <xPendedTicks>
    1f5e:	90 91 77 15 	lds	r25, 0x1577	; 0x801577 <xPendedTicks+0x1>
    1f62:	a0 91 78 15 	lds	r26, 0x1578	; 0x801578 <xPendedTicks+0x2>
    1f66:	b0 91 79 15 	lds	r27, 0x1579	; 0x801579 <xPendedTicks+0x3>
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	a1 1d       	adc	r26, r1
    1f6e:	b1 1d       	adc	r27, r1
    1f70:	80 93 76 15 	sts	0x1576, r24	; 0x801576 <xPendedTicks>
    1f74:	90 93 77 15 	sts	0x1577, r25	; 0x801577 <xPendedTicks+0x1>
    1f78:	a0 93 78 15 	sts	0x1578, r26	; 0x801578 <xPendedTicks+0x2>
    1f7c:	b0 93 79 15 	sts	0x1579, r27	; 0x801579 <xPendedTicks+0x3>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <xTaskIncrementTick+0x24a>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	08 95       	ret

00001f94 <xTaskResumeAll>:
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	0f 92       	push	r0
    1fa6:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    1faa:	81 50       	subi	r24, 0x01	; 1
    1fac:	80 93 6c 15 	sts	0x156C, r24	; 0x80156c <uxSchedulerSuspended>
    1fb0:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	be c0       	rjmp	.+380    	; 0x2134 <__DATA_REGION_LENGTH__+0x134>
    1fb8:	80 91 80 15 	lds	r24, 0x1580	; 0x801580 <uxCurrentNumberOfTasks>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	88 c0       	rjmp	.+272    	; 0x20d0 <__DATA_REGION_LENGTH__+0xd0>
    1fc0:	bc c0       	rjmp	.+376    	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    1fc2:	e0 91 9f 15 	lds	r30, 0x159F	; 0x80159f <xPendingReadyList+0x7>
    1fc6:	f0 91 a0 15 	lds	r31, 0x15A0	; 0x8015a0 <xPendingReadyList+0x8>
    1fca:	00 84       	ldd	r0, Z+8	; 0x08
    1fcc:	f1 85       	ldd	r31, Z+9	; 0x09
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	a0 8d       	ldd	r26, Z+24	; 0x18
    1fd2:	b1 8d       	ldd	r27, Z+25	; 0x19
    1fd4:	c2 89       	ldd	r28, Z+18	; 0x12
    1fd6:	d3 89       	ldd	r29, Z+19	; 0x13
    1fd8:	84 89       	ldd	r24, Z+20	; 0x14
    1fda:	95 89       	ldd	r25, Z+21	; 0x15
    1fdc:	9f 83       	std	Y+7, r25	; 0x07
    1fde:	8e 83       	std	Y+6, r24	; 0x06
    1fe0:	c4 89       	ldd	r28, Z+20	; 0x14
    1fe2:	d5 89       	ldd	r29, Z+21	; 0x15
    1fe4:	82 89       	ldd	r24, Z+18	; 0x12
    1fe6:	93 89       	ldd	r25, Z+19	; 0x13
    1fe8:	9d 83       	std	Y+5, r25	; 0x05
    1fea:	8c 83       	std	Y+4, r24	; 0x04
    1fec:	11 96       	adiw	r26, 0x01	; 1
    1fee:	2d 91       	ld	r18, X+
    1ff0:	3c 91       	ld	r19, X
    1ff2:	12 97       	sbiw	r26, 0x02	; 2
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	0e 96       	adiw	r24, 0x0e	; 14
    1ff8:	28 17       	cp	r18, r24
    1ffa:	39 07       	cpc	r19, r25
    1ffc:	31 f4       	brne	.+12     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ffe:	84 89       	ldd	r24, Z+20	; 0x14
    2000:	95 89       	ldd	r25, Z+21	; 0x15
    2002:	12 96       	adiw	r26, 0x02	; 2
    2004:	9c 93       	st	X, r25
    2006:	8e 93       	st	-X, r24
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	11 8e       	std	Z+25, r1	; 0x19
    200c:	10 8e       	std	Z+24, r1	; 0x18
    200e:	8c 91       	ld	r24, X
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	8c 93       	st	X, r24
    2014:	a4 85       	ldd	r26, Z+12	; 0x0c
    2016:	b5 85       	ldd	r27, Z+13	; 0x0d
    2018:	c6 81       	ldd	r28, Z+6	; 0x06
    201a:	d7 81       	ldd	r29, Z+7	; 0x07
    201c:	80 85       	ldd	r24, Z+8	; 0x08
    201e:	91 85       	ldd	r25, Z+9	; 0x09
    2020:	9f 83       	std	Y+7, r25	; 0x07
    2022:	8e 83       	std	Y+6, r24	; 0x06
    2024:	c0 85       	ldd	r28, Z+8	; 0x08
    2026:	d1 85       	ldd	r29, Z+9	; 0x09
    2028:	86 81       	ldd	r24, Z+6	; 0x06
    202a:	97 81       	ldd	r25, Z+7	; 0x07
    202c:	9d 83       	std	Y+5, r25	; 0x05
    202e:	8c 83       	std	Y+4, r24	; 0x04
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	12 97       	sbiw	r26, 0x02	; 2
    2038:	9f 01       	movw	r18, r30
    203a:	2e 5f       	subi	r18, 0xFE	; 254
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	82 17       	cp	r24, r18
    2040:	93 07       	cpc	r25, r19
    2042:	31 f4       	brne	.+12     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    2044:	80 85       	ldd	r24, Z+8	; 0x08
    2046:	91 85       	ldd	r25, Z+9	; 0x09
    2048:	12 96       	adiw	r26, 0x02	; 2
    204a:	9c 93       	st	X, r25
    204c:	8e 93       	st	-X, r24
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	15 86       	std	Z+13, r1	; 0x0d
    2052:	14 86       	std	Z+12, r1	; 0x0c
    2054:	8c 91       	ld	r24, X
    2056:	81 50       	subi	r24, 0x01	; 1
    2058:	8c 93       	st	X, r24
    205a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    205c:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    2060:	8a 17       	cp	r24, r26
    2062:	10 f4       	brcc	.+4      	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2064:	a0 93 7b 15 	sts	0x157B, r26	; 0x80157b <uxTopReadyPriority>
    2068:	8b e0       	ldi	r24, 0x0B	; 11
    206a:	8a 9f       	mul	r24, r26
    206c:	d0 01       	movw	r26, r0
    206e:	11 24       	eor	r1, r1
    2070:	a3 54       	subi	r26, 0x43	; 67
    2072:	ba 4e       	sbci	r27, 0xEA	; 234
    2074:	11 96       	adiw	r26, 0x01	; 1
    2076:	0d 90       	ld	r0, X+
    2078:	bc 91       	ld	r27, X
    207a:	a0 2d       	mov	r26, r0
    207c:	b7 83       	std	Z+7, r27	; 0x07
    207e:	a6 83       	std	Z+6, r26	; 0x06
    2080:	16 96       	adiw	r26, 0x06	; 6
    2082:	4d 91       	ld	r20, X+
    2084:	5c 91       	ld	r21, X
    2086:	17 97       	sbiw	r26, 0x07	; 7
    2088:	51 87       	std	Z+9, r21	; 0x09
    208a:	40 87       	std	Z+8, r20	; 0x08
    208c:	16 96       	adiw	r26, 0x06	; 6
    208e:	cd 91       	ld	r28, X+
    2090:	dc 91       	ld	r29, X
    2092:	17 97       	sbiw	r26, 0x07	; 7
    2094:	3d 83       	std	Y+5, r19	; 0x05
    2096:	2c 83       	std	Y+4, r18	; 0x04
    2098:	17 96       	adiw	r26, 0x07	; 7
    209a:	3c 93       	st	X, r19
    209c:	2e 93       	st	-X, r18
    209e:	16 97       	sbiw	r26, 0x06	; 6
    20a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20a2:	8a 9f       	mul	r24, r26
    20a4:	d0 01       	movw	r26, r0
    20a6:	11 24       	eor	r1, r1
    20a8:	a3 54       	subi	r26, 0x43	; 67
    20aa:	ba 4e       	sbci	r27, 0xEA	; 234
    20ac:	b5 87       	std	Z+13, r27	; 0x0d
    20ae:	a4 87       	std	Z+12, r26	; 0x0c
    20b0:	8c 91       	ld	r24, X
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	8c 93       	st	X, r24
    20b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    20b8:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
    20bc:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    20c0:	5a 96       	adiw	r26, 0x1a	; 26
    20c2:	8c 91       	ld	r24, X
    20c4:	98 17       	cp	r25, r24
    20c6:	30 f0       	brcs	.+12     	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xYieldPending>
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20d0:	e0 e0       	ldi	r30, 0x00	; 0
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 91 98 15 	lds	r24, 0x1598	; 0x801598 <xPendingReadyList>
    20d8:	81 11       	cpse	r24, r1
    20da:	73 cf       	rjmp	.-282    	; 0x1fc2 <xTaskResumeAll+0x2e>
    20dc:	ef 2b       	or	r30, r31
    20de:	09 f0       	breq	.+2      	; 0x20e2 <__DATA_REGION_LENGTH__+0xe2>
    20e0:	7e db       	rcall	.-2308   	; 0x17de <prvResetNextTaskUnblockTime>
    20e2:	c0 90 76 15 	lds	r12, 0x1576	; 0x801576 <xPendedTicks>
    20e6:	d0 90 77 15 	lds	r13, 0x1577	; 0x801577 <xPendedTicks+0x1>
    20ea:	e0 90 78 15 	lds	r14, 0x1578	; 0x801578 <xPendedTicks+0x2>
    20ee:	f0 90 79 15 	lds	r15, 0x1579	; 0x801579 <xPendedTicks+0x3>
    20f2:	c1 14       	cp	r12, r1
    20f4:	d1 04       	cpc	r13, r1
    20f6:	e1 04       	cpc	r14, r1
    20f8:	f1 04       	cpc	r15, r1
    20fa:	a1 f0       	breq	.+40     	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    20fc:	1f de       	rcall	.-962    	; 0x1d3c <xTaskIncrementTick>
    20fe:	88 23       	and	r24, r24
    2100:	19 f0       	breq	.+6      	; 0x2108 <__DATA_REGION_LENGTH__+0x108>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xYieldPending>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	c8 1a       	sub	r12, r24
    210c:	d1 08       	sbc	r13, r1
    210e:	e1 08       	sbc	r14, r1
    2110:	f1 08       	sbc	r15, r1
    2112:	a1 f7       	brne	.-24     	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
    2114:	10 92 76 15 	sts	0x1576, r1	; 0x801576 <xPendedTicks>
    2118:	10 92 77 15 	sts	0x1577, r1	; 0x801577 <xPendedTicks+0x1>
    211c:	10 92 78 15 	sts	0x1578, r1	; 0x801578 <xPendedTicks+0x2>
    2120:	10 92 79 15 	sts	0x1579, r1	; 0x801579 <xPendedTicks+0x3>
    2124:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xYieldPending>
    2128:	88 23       	and	r24, r24
    212a:	31 f0       	breq	.+12     	; 0x2138 <__DATA_REGION_LENGTH__+0x138>
    212c:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	03 c0       	rjmp	.+6      	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	01 c0       	rjmp	.+2      	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	df 90       	pop	r13
    2148:	cf 90       	pop	r12
    214a:	08 95       	ret

0000214c <xTaskDelayUntil>:
    214c:	8f 92       	push	r8
    214e:	9f 92       	push	r9
    2150:	af 92       	push	r10
    2152:	bf 92       	push	r11
    2154:	cf 92       	push	r12
    2156:	df 92       	push	r13
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	ec 01       	movw	r28, r24
    2164:	6a 01       	movw	r12, r20
    2166:	7b 01       	movw	r14, r22
    2168:	d5 dd       	rcall	.-1110   	; 0x1d14 <vTaskSuspendAll>
    216a:	80 90 7c 15 	lds	r8, 0x157C	; 0x80157c <xTickCount>
    216e:	90 90 7d 15 	lds	r9, 0x157D	; 0x80157d <xTickCount+0x1>
    2172:	a0 90 7e 15 	lds	r10, 0x157E	; 0x80157e <xTickCount+0x2>
    2176:	b0 90 7f 15 	lds	r11, 0x157F	; 0x80157f <xTickCount+0x3>
    217a:	88 81       	ld	r24, Y
    217c:	99 81       	ldd	r25, Y+1	; 0x01
    217e:	aa 81       	ldd	r26, Y+2	; 0x02
    2180:	bb 81       	ldd	r27, Y+3	; 0x03
    2182:	ac 01       	movw	r20, r24
    2184:	bd 01       	movw	r22, r26
    2186:	4c 0d       	add	r20, r12
    2188:	5d 1d       	adc	r21, r13
    218a:	6e 1d       	adc	r22, r14
    218c:	7f 1d       	adc	r23, r15
    218e:	88 16       	cp	r8, r24
    2190:	99 06       	cpc	r9, r25
    2192:	aa 06       	cpc	r10, r26
    2194:	bb 06       	cpc	r11, r27
    2196:	60 f4       	brcc	.+24     	; 0x21b0 <xTaskDelayUntil+0x64>
    2198:	48 17       	cp	r20, r24
    219a:	59 07       	cpc	r21, r25
    219c:	6a 07       	cpc	r22, r26
    219e:	7b 07       	cpc	r23, r27
    21a0:	98 f4       	brcc	.+38     	; 0x21c8 <xTaskDelayUntil+0x7c>
    21a2:	84 16       	cp	r8, r20
    21a4:	95 06       	cpc	r9, r21
    21a6:	a6 06       	cpc	r10, r22
    21a8:	b7 06       	cpc	r11, r23
    21aa:	80 f0       	brcs	.+32     	; 0x21cc <xTaskDelayUntil+0x80>
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <xTaskDelayUntil+0x8a>
    21b0:	48 17       	cp	r20, r24
    21b2:	59 07       	cpc	r21, r25
    21b4:	6a 07       	cpc	r22, r26
    21b6:	7b 07       	cpc	r23, r27
    21b8:	58 f0       	brcs	.+22     	; 0x21d0 <xTaskDelayUntil+0x84>
    21ba:	84 16       	cp	r8, r20
    21bc:	95 06       	cpc	r9, r21
    21be:	a6 06       	cpc	r10, r22
    21c0:	b7 06       	cpc	r11, r23
    21c2:	40 f0       	brcs	.+16     	; 0x21d4 <xTaskDelayUntil+0x88>
    21c4:	10 e0       	ldi	r17, 0x00	; 0
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <xTaskDelayUntil+0x8a>
    21c8:	10 e0       	ldi	r17, 0x00	; 0
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <xTaskDelayUntil+0x8a>
    21cc:	11 e0       	ldi	r17, 0x01	; 1
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <xTaskDelayUntil+0x8a>
    21d0:	11 e0       	ldi	r17, 0x01	; 1
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <xTaskDelayUntil+0x8a>
    21d4:	11 e0       	ldi	r17, 0x01	; 1
    21d6:	48 83       	st	Y, r20
    21d8:	59 83       	std	Y+1, r21	; 0x01
    21da:	6a 83       	std	Y+2, r22	; 0x02
    21dc:	7b 83       	std	Y+3, r23	; 0x03
    21de:	11 23       	and	r17, r17
    21e0:	41 f0       	breq	.+16     	; 0x21f2 <xTaskDelayUntil+0xa6>
    21e2:	cb 01       	movw	r24, r22
    21e4:	ba 01       	movw	r22, r20
    21e6:	68 19       	sub	r22, r8
    21e8:	79 09       	sbc	r23, r9
    21ea:	8a 09       	sbc	r24, r10
    21ec:	9b 09       	sbc	r25, r11
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	6b dc       	rcall	.-1834   	; 0x1ac8 <prvAddCurrentTaskToDelayedList>
    21f2:	d0 de       	rcall	.-608    	; 0x1f94 <xTaskResumeAll>
    21f4:	81 11       	cpse	r24, r1
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <xTaskDelayUntil+0xb0>
    21f8:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    21fc:	81 2f       	mov	r24, r17
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	bf 90       	pop	r11
    220e:	af 90       	pop	r10
    2210:	9f 90       	pop	r9
    2212:	8f 90       	pop	r8
    2214:	08 95       	ret

00002216 <vTaskDelay>:
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	6b 01       	movw	r12, r22
    2220:	7c 01       	movw	r14, r24
    2222:	67 2b       	or	r22, r23
    2224:	68 2b       	or	r22, r24
    2226:	69 2b       	or	r22, r25
    2228:	39 f0       	breq	.+14     	; 0x2238 <vTaskDelay+0x22>
    222a:	74 dd       	rcall	.-1304   	; 0x1d14 <vTaskSuspendAll>
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	c7 01       	movw	r24, r14
    2230:	b6 01       	movw	r22, r12
    2232:	4a dc       	rcall	.-1900   	; 0x1ac8 <prvAddCurrentTaskToDelayedList>
    2234:	af de       	rcall	.-674    	; 0x1f94 <xTaskResumeAll>
    2236:	01 c0       	rjmp	.+2      	; 0x223a <vTaskDelay+0x24>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	81 11       	cpse	r24, r1
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <vTaskDelay+0x2c>
    223e:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	08 95       	ret

0000224c <vTaskSwitchContext>:
    224c:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    2250:	88 23       	and	r24, r24
    2252:	21 f0       	breq	.+8      	; 0x225c <vTaskSwitchContext+0x10>
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xYieldPending>
    225a:	08 95       	ret
    225c:	10 92 75 15 	sts	0x1575, r1	; 0x801575 <xYieldPending>
    2260:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2264:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2268:	20 81       	ld	r18, Z
    226a:	31 81       	ldd	r19, Z+1	; 0x01
    226c:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2270:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2274:	83 8d       	ldd	r24, Z+27	; 0x1b
    2276:	94 8d       	ldd	r25, Z+28	; 0x1c
    2278:	82 17       	cp	r24, r18
    227a:	93 07       	cpc	r25, r19
    227c:	60 f0       	brcs	.+24     	; 0x2296 <vTaskSwitchContext+0x4a>
    227e:	60 91 2b 16 	lds	r22, 0x162B	; 0x80162b <pxCurrentTCB>
    2282:	70 91 2c 16 	lds	r23, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2286:	63 5e       	subi	r22, 0xE3	; 227
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    228e:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2292:	0e 94 92 1a 	call	0x3524	; 0x3524 <vApplicationStackOverflowHook>
    2296:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    229a:	01 c0       	rjmp	.+2      	; 0x229e <vTaskSwitchContext+0x52>
    229c:	81 50       	subi	r24, 0x01	; 1
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	9b e0       	ldi	r25, 0x0B	; 11
    22a4:	92 9f       	mul	r25, r18
    22a6:	f0 01       	movw	r30, r0
    22a8:	93 9f       	mul	r25, r19
    22aa:	f0 0d       	add	r31, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	e3 54       	subi	r30, 0x43	; 67
    22b0:	fa 4e       	sbci	r31, 0xEA	; 234
    22b2:	90 81       	ld	r25, Z
    22b4:	99 23       	and	r25, r25
    22b6:	91 f3       	breq	.-28     	; 0x229c <vTaskSwitchContext+0x50>
    22b8:	9b e0       	ldi	r25, 0x0B	; 11
    22ba:	92 9f       	mul	r25, r18
    22bc:	a0 01       	movw	r20, r0
    22be:	93 9f       	mul	r25, r19
    22c0:	50 0d       	add	r21, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	df 01       	movw	r26, r30
    22c6:	01 80       	ldd	r0, Z+1	; 0x01
    22c8:	f2 81       	ldd	r31, Z+2	; 0x02
    22ca:	e0 2d       	mov	r30, r0
    22cc:	04 80       	ldd	r0, Z+4	; 0x04
    22ce:	f5 81       	ldd	r31, Z+5	; 0x05
    22d0:	e0 2d       	mov	r30, r0
    22d2:	12 96       	adiw	r26, 0x02	; 2
    22d4:	fc 93       	st	X, r31
    22d6:	ee 93       	st	-X, r30
    22d8:	11 97       	sbiw	r26, 0x01	; 1
    22da:	40 54       	subi	r20, 0x40	; 64
    22dc:	5a 4e       	sbci	r21, 0xEA	; 234
    22de:	e4 17       	cp	r30, r20
    22e0:	f5 07       	cpc	r31, r21
    22e2:	29 f4       	brne	.+10     	; 0x22ee <vTaskSwitchContext+0xa2>
    22e4:	44 81       	ldd	r20, Z+4	; 0x04
    22e6:	55 81       	ldd	r21, Z+5	; 0x05
    22e8:	fd 01       	movw	r30, r26
    22ea:	52 83       	std	Z+2, r21	; 0x02
    22ec:	41 83       	std	Z+1, r20	; 0x01
    22ee:	9b e0       	ldi	r25, 0x0B	; 11
    22f0:	92 9f       	mul	r25, r18
    22f2:	f0 01       	movw	r30, r0
    22f4:	93 9f       	mul	r25, r19
    22f6:	f0 0d       	add	r31, r0
    22f8:	11 24       	eor	r1, r1
    22fa:	e3 54       	subi	r30, 0x43	; 67
    22fc:	fa 4e       	sbci	r31, 0xEA	; 234
    22fe:	01 80       	ldd	r0, Z+1	; 0x01
    2300:	f2 81       	ldd	r31, Z+2	; 0x02
    2302:	e0 2d       	mov	r30, r0
    2304:	20 85       	ldd	r18, Z+8	; 0x08
    2306:	31 85       	ldd	r19, Z+9	; 0x09
    2308:	30 93 2c 16 	sts	0x162C, r19	; 0x80162c <pxCurrentTCB+0x1>
    230c:	20 93 2b 16 	sts	0x162B, r18	; 0x80162b <pxCurrentTCB>
    2310:	80 93 7b 15 	sts	0x157B, r24	; 0x80157b <uxTopReadyPriority>
    2314:	08 95       	ret

00002316 <vTaskPlaceOnEventList>:
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	6a 01       	movw	r12, r20
    2320:	7b 01       	movw	r14, r22
    2322:	60 91 2b 16 	lds	r22, 0x162B	; 0x80162b <pxCurrentTCB>
    2326:	70 91 2c 16 	lds	r23, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    232a:	62 5f       	subi	r22, 0xF2	; 242
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	c7 01       	movw	r24, r14
    2336:	b6 01       	movw	r22, r12
    2338:	c7 db       	rcall	.-2162   	; 0x1ac8 <prvAddCurrentTaskToDelayedList>
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	08 95       	ret

00002344 <vTaskPlaceOnUnorderedEventList>:
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	fc 01       	movw	r30, r24
    234e:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
    2352:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2356:	70 68       	ori	r23, 0x80	; 128
    2358:	1e 96       	adiw	r26, 0x0e	; 14
    235a:	4d 93       	st	X+, r20
    235c:	5d 93       	st	X+, r21
    235e:	6d 93       	st	X+, r22
    2360:	7c 93       	st	X, r23
    2362:	51 97       	sbiw	r26, 0x11	; 17
    2364:	a1 81       	ldd	r26, Z+1	; 0x01
    2366:	b2 81       	ldd	r27, Z+2	; 0x02
    2368:	c0 91 2b 16 	lds	r28, 0x162B	; 0x80162b <pxCurrentTCB>
    236c:	d0 91 2c 16 	lds	r29, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2370:	bb 8b       	std	Y+19, r27	; 0x13
    2372:	aa 8b       	std	Y+18, r26	; 0x12
    2374:	c0 91 2b 16 	lds	r28, 0x162B	; 0x80162b <pxCurrentTCB>
    2378:	d0 91 2c 16 	lds	r29, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    237c:	16 96       	adiw	r26, 0x06	; 6
    237e:	8d 91       	ld	r24, X+
    2380:	9c 91       	ld	r25, X
    2382:	17 97       	sbiw	r26, 0x07	; 7
    2384:	9d 8b       	std	Y+21, r25	; 0x15
    2386:	8c 8b       	std	Y+20, r24	; 0x14
    2388:	16 96       	adiw	r26, 0x06	; 6
    238a:	cd 91       	ld	r28, X+
    238c:	dc 91       	ld	r29, X
    238e:	17 97       	sbiw	r26, 0x07	; 7
    2390:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    2394:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2398:	0e 96       	adiw	r24, 0x0e	; 14
    239a:	9d 83       	std	Y+5, r25	; 0x05
    239c:	8c 83       	std	Y+4, r24	; 0x04
    239e:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    23a2:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    23a6:	0e 96       	adiw	r24, 0x0e	; 14
    23a8:	17 96       	adiw	r26, 0x07	; 7
    23aa:	9c 93       	st	X, r25
    23ac:	8e 93       	st	-X, r24
    23ae:	16 97       	sbiw	r26, 0x06	; 6
    23b0:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
    23b4:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    23b8:	59 96       	adiw	r26, 0x19	; 25
    23ba:	fc 93       	st	X, r31
    23bc:	ee 93       	st	-X, r30
    23be:	58 97       	sbiw	r26, 0x18	; 24
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 83       	st	Z, r24
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	c9 01       	movw	r24, r18
    23ca:	b8 01       	movw	r22, r16
    23cc:	7d db       	rcall	.-2310   	; 0x1ac8 <prvAddCurrentTaskToDelayedList>
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <vTaskPlaceOnEventListRestricted>:
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	fc 01       	movw	r30, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	ba 01       	movw	r22, r20
    23e2:	a1 81       	ldd	r26, Z+1	; 0x01
    23e4:	b2 81       	ldd	r27, Z+2	; 0x02
    23e6:	c0 91 2b 16 	lds	r28, 0x162B	; 0x80162b <pxCurrentTCB>
    23ea:	d0 91 2c 16 	lds	r29, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    23ee:	bb 8b       	std	Y+19, r27	; 0x13
    23f0:	aa 8b       	std	Y+18, r26	; 0x12
    23f2:	c0 91 2b 16 	lds	r28, 0x162B	; 0x80162b <pxCurrentTCB>
    23f6:	d0 91 2c 16 	lds	r29, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    23fa:	16 96       	adiw	r26, 0x06	; 6
    23fc:	4d 91       	ld	r20, X+
    23fe:	5c 91       	ld	r21, X
    2400:	17 97       	sbiw	r26, 0x07	; 7
    2402:	5d 8b       	std	Y+21, r21	; 0x15
    2404:	4c 8b       	std	Y+20, r20	; 0x14
    2406:	16 96       	adiw	r26, 0x06	; 6
    2408:	cd 91       	ld	r28, X+
    240a:	dc 91       	ld	r29, X
    240c:	17 97       	sbiw	r26, 0x07	; 7
    240e:	40 91 2b 16 	lds	r20, 0x162B	; 0x80162b <pxCurrentTCB>
    2412:	50 91 2c 16 	lds	r21, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2416:	42 5f       	subi	r20, 0xF2	; 242
    2418:	5f 4f       	sbci	r21, 0xFF	; 255
    241a:	5d 83       	std	Y+5, r21	; 0x05
    241c:	4c 83       	std	Y+4, r20	; 0x04
    241e:	40 91 2b 16 	lds	r20, 0x162B	; 0x80162b <pxCurrentTCB>
    2422:	50 91 2c 16 	lds	r21, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2426:	42 5f       	subi	r20, 0xF2	; 242
    2428:	5f 4f       	sbci	r21, 0xFF	; 255
    242a:	17 96       	adiw	r26, 0x07	; 7
    242c:	5c 93       	st	X, r21
    242e:	4e 93       	st	-X, r20
    2430:	16 97       	sbiw	r26, 0x06	; 6
    2432:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
    2436:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    243a:	59 96       	adiw	r26, 0x19	; 25
    243c:	fc 93       	st	X, r31
    243e:	ee 93       	st	-X, r30
    2440:	58 97       	sbiw	r26, 0x18	; 24
    2442:	30 81       	ld	r19, Z
    2444:	3f 5f       	subi	r19, 0xFF	; 255
    2446:	30 83       	st	Z, r19
    2448:	22 23       	and	r18, r18
    244a:	19 f0       	breq	.+6      	; 0x2452 <vTaskPlaceOnEventListRestricted+0x7a>
    244c:	6f ef       	ldi	r22, 0xFF	; 255
    244e:	7f ef       	ldi	r23, 0xFF	; 255
    2450:	cb 01       	movw	r24, r22
    2452:	42 2f       	mov	r20, r18
    2454:	39 db       	rcall	.-2446   	; 0x1ac8 <prvAddCurrentTaskToDelayedList>
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <xTaskRemoveFromEventList>:
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	dc 01       	movw	r26, r24
    2462:	17 96       	adiw	r26, 0x07	; 7
    2464:	ed 91       	ld	r30, X+
    2466:	fc 91       	ld	r31, X
    2468:	18 97       	sbiw	r26, 0x08	; 8
    246a:	00 84       	ldd	r0, Z+8	; 0x08
    246c:	f1 85       	ldd	r31, Z+9	; 0x09
    246e:	e0 2d       	mov	r30, r0
    2470:	a0 8d       	ldd	r26, Z+24	; 0x18
    2472:	b1 8d       	ldd	r27, Z+25	; 0x19
    2474:	c2 89       	ldd	r28, Z+18	; 0x12
    2476:	d3 89       	ldd	r29, Z+19	; 0x13
    2478:	84 89       	ldd	r24, Z+20	; 0x14
    247a:	95 89       	ldd	r25, Z+21	; 0x15
    247c:	9f 83       	std	Y+7, r25	; 0x07
    247e:	8e 83       	std	Y+6, r24	; 0x06
    2480:	c4 89       	ldd	r28, Z+20	; 0x14
    2482:	d5 89       	ldd	r29, Z+21	; 0x15
    2484:	82 89       	ldd	r24, Z+18	; 0x12
    2486:	93 89       	ldd	r25, Z+19	; 0x13
    2488:	9d 83       	std	Y+5, r25	; 0x05
    248a:	8c 83       	std	Y+4, r24	; 0x04
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	8d 91       	ld	r24, X+
    2490:	9c 91       	ld	r25, X
    2492:	12 97       	sbiw	r26, 0x02	; 2
    2494:	9f 01       	movw	r18, r30
    2496:	22 5f       	subi	r18, 0xF2	; 242
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	82 17       	cp	r24, r18
    249c:	93 07       	cpc	r25, r19
    249e:	31 f4       	brne	.+12     	; 0x24ac <xTaskRemoveFromEventList+0x50>
    24a0:	84 89       	ldd	r24, Z+20	; 0x14
    24a2:	95 89       	ldd	r25, Z+21	; 0x15
    24a4:	12 96       	adiw	r26, 0x02	; 2
    24a6:	9c 93       	st	X, r25
    24a8:	8e 93       	st	-X, r24
    24aa:	11 97       	sbiw	r26, 0x01	; 1
    24ac:	11 8e       	std	Z+25, r1	; 0x19
    24ae:	10 8e       	std	Z+24, r1	; 0x18
    24b0:	8c 91       	ld	r24, X
    24b2:	81 50       	subi	r24, 0x01	; 1
    24b4:	8c 93       	st	X, r24
    24b6:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    24ba:	81 11       	cpse	r24, r1
    24bc:	52 c0       	rjmp	.+164    	; 0x2562 <xTaskRemoveFromEventList+0x106>
    24be:	a4 85       	ldd	r26, Z+12	; 0x0c
    24c0:	b5 85       	ldd	r27, Z+13	; 0x0d
    24c2:	c6 81       	ldd	r28, Z+6	; 0x06
    24c4:	d7 81       	ldd	r29, Z+7	; 0x07
    24c6:	80 85       	ldd	r24, Z+8	; 0x08
    24c8:	91 85       	ldd	r25, Z+9	; 0x09
    24ca:	9f 83       	std	Y+7, r25	; 0x07
    24cc:	8e 83       	std	Y+6, r24	; 0x06
    24ce:	c0 85       	ldd	r28, Z+8	; 0x08
    24d0:	d1 85       	ldd	r29, Z+9	; 0x09
    24d2:	86 81       	ldd	r24, Z+6	; 0x06
    24d4:	97 81       	ldd	r25, Z+7	; 0x07
    24d6:	9d 83       	std	Y+5, r25	; 0x05
    24d8:	8c 83       	std	Y+4, r24	; 0x04
    24da:	11 96       	adiw	r26, 0x01	; 1
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	12 97       	sbiw	r26, 0x02	; 2
    24e2:	9f 01       	movw	r18, r30
    24e4:	2e 5f       	subi	r18, 0xFE	; 254
    24e6:	3f 4f       	sbci	r19, 0xFF	; 255
    24e8:	82 17       	cp	r24, r18
    24ea:	93 07       	cpc	r25, r19
    24ec:	31 f4       	brne	.+12     	; 0x24fa <xTaskRemoveFromEventList+0x9e>
    24ee:	80 85       	ldd	r24, Z+8	; 0x08
    24f0:	91 85       	ldd	r25, Z+9	; 0x09
    24f2:	12 96       	adiw	r26, 0x02	; 2
    24f4:	9c 93       	st	X, r25
    24f6:	8e 93       	st	-X, r24
    24f8:	11 97       	sbiw	r26, 0x01	; 1
    24fa:	15 86       	std	Z+13, r1	; 0x0d
    24fc:	14 86       	std	Z+12, r1	; 0x0c
    24fe:	8c 91       	ld	r24, X
    2500:	81 50       	subi	r24, 0x01	; 1
    2502:	8c 93       	st	X, r24
    2504:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2506:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    250a:	8a 17       	cp	r24, r26
    250c:	10 f4       	brcc	.+4      	; 0x2512 <xTaskRemoveFromEventList+0xb6>
    250e:	a0 93 7b 15 	sts	0x157B, r26	; 0x80157b <uxTopReadyPriority>
    2512:	8b e0       	ldi	r24, 0x0B	; 11
    2514:	8a 9f       	mul	r24, r26
    2516:	d0 01       	movw	r26, r0
    2518:	11 24       	eor	r1, r1
    251a:	a3 54       	subi	r26, 0x43	; 67
    251c:	ba 4e       	sbci	r27, 0xEA	; 234
    251e:	11 96       	adiw	r26, 0x01	; 1
    2520:	0d 90       	ld	r0, X+
    2522:	bc 91       	ld	r27, X
    2524:	a0 2d       	mov	r26, r0
    2526:	b7 83       	std	Z+7, r27	; 0x07
    2528:	a6 83       	std	Z+6, r26	; 0x06
    252a:	16 96       	adiw	r26, 0x06	; 6
    252c:	4d 91       	ld	r20, X+
    252e:	5c 91       	ld	r21, X
    2530:	17 97       	sbiw	r26, 0x07	; 7
    2532:	51 87       	std	Z+9, r21	; 0x09
    2534:	40 87       	std	Z+8, r20	; 0x08
    2536:	16 96       	adiw	r26, 0x06	; 6
    2538:	cd 91       	ld	r28, X+
    253a:	dc 91       	ld	r29, X
    253c:	17 97       	sbiw	r26, 0x07	; 7
    253e:	3d 83       	std	Y+5, r19	; 0x05
    2540:	2c 83       	std	Y+4, r18	; 0x04
    2542:	17 96       	adiw	r26, 0x07	; 7
    2544:	3c 93       	st	X, r19
    2546:	2e 93       	st	-X, r18
    2548:	16 97       	sbiw	r26, 0x06	; 6
    254a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    254c:	8a 9f       	mul	r24, r26
    254e:	d0 01       	movw	r26, r0
    2550:	11 24       	eor	r1, r1
    2552:	a3 54       	subi	r26, 0x43	; 67
    2554:	ba 4e       	sbci	r27, 0xEA	; 234
    2556:	b5 87       	std	Z+13, r27	; 0x0d
    2558:	a4 87       	std	Z+12, r26	; 0x0c
    255a:	8c 91       	ld	r24, X
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	8c 93       	st	X, r24
    2560:	1c c0       	rjmp	.+56     	; 0x259a <xTaskRemoveFromEventList+0x13e>
    2562:	48 e9       	ldi	r20, 0x98	; 152
    2564:	55 e1       	ldi	r21, 0x15	; 21
    2566:	da 01       	movw	r26, r20
    2568:	11 96       	adiw	r26, 0x01	; 1
    256a:	cd 91       	ld	r28, X+
    256c:	dc 91       	ld	r29, X
    256e:	12 97       	sbiw	r26, 0x02	; 2
    2570:	d3 8b       	std	Z+19, r29	; 0x13
    2572:	c2 8b       	std	Z+18, r28	; 0x12
    2574:	8e 81       	ldd	r24, Y+6	; 0x06
    2576:	9f 81       	ldd	r25, Y+7	; 0x07
    2578:	95 8b       	std	Z+21, r25	; 0x15
    257a:	84 8b       	std	Z+20, r24	; 0x14
    257c:	8e 81       	ldd	r24, Y+6	; 0x06
    257e:	9f 81       	ldd	r25, Y+7	; 0x07
    2580:	dc 01       	movw	r26, r24
    2582:	15 96       	adiw	r26, 0x05	; 5
    2584:	3c 93       	st	X, r19
    2586:	2e 93       	st	-X, r18
    2588:	14 97       	sbiw	r26, 0x04	; 4
    258a:	3f 83       	std	Y+7, r19	; 0x07
    258c:	2e 83       	std	Y+6, r18	; 0x06
    258e:	51 8f       	std	Z+25, r21	; 0x19
    2590:	40 8f       	std	Z+24, r20	; 0x18
    2592:	da 01       	movw	r26, r20
    2594:	8c 91       	ld	r24, X
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	8c 93       	st	X, r24
    259a:	92 8d       	ldd	r25, Z+26	; 0x1a
    259c:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    25a0:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    25a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    25a6:	89 17       	cp	r24, r25
    25a8:	20 f4       	brcc	.+8      	; 0x25b2 <xTaskRemoveFromEventList+0x156>
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xYieldPending>
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <xTaskRemoveFromEventList+0x158>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <vTaskRemoveFromUnorderedEventList>:
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	dc 01       	movw	r26, r24
    25c0:	70 68       	ori	r23, 0x80	; 128
    25c2:	4d 93       	st	X+, r20
    25c4:	5d 93       	st	X+, r21
    25c6:	6d 93       	st	X+, r22
    25c8:	7c 93       	st	X, r23
    25ca:	13 97       	sbiw	r26, 0x03	; 3
    25cc:	18 96       	adiw	r26, 0x08	; 8
    25ce:	ed 91       	ld	r30, X+
    25d0:	fc 91       	ld	r31, X
    25d2:	19 97       	sbiw	r26, 0x09	; 9
    25d4:	1a 96       	adiw	r26, 0x0a	; 10
    25d6:	4d 91       	ld	r20, X+
    25d8:	5c 91       	ld	r21, X
    25da:	1b 97       	sbiw	r26, 0x0b	; 11
    25dc:	14 96       	adiw	r26, 0x04	; 4
    25de:	8d 91       	ld	r24, X+
    25e0:	9c 91       	ld	r25, X
    25e2:	15 97       	sbiw	r26, 0x05	; 5
    25e4:	16 96       	adiw	r26, 0x06	; 6
    25e6:	2d 91       	ld	r18, X+
    25e8:	3c 91       	ld	r19, X
    25ea:	17 97       	sbiw	r26, 0x07	; 7
    25ec:	ec 01       	movw	r28, r24
    25ee:	3f 83       	std	Y+7, r19	; 0x07
    25f0:	2e 83       	std	Y+6, r18	; 0x06
    25f2:	16 96       	adiw	r26, 0x06	; 6
    25f4:	8d 91       	ld	r24, X+
    25f6:	9c 91       	ld	r25, X
    25f8:	17 97       	sbiw	r26, 0x07	; 7
    25fa:	14 96       	adiw	r26, 0x04	; 4
    25fc:	2d 91       	ld	r18, X+
    25fe:	3c 91       	ld	r19, X
    2600:	15 97       	sbiw	r26, 0x05	; 5
    2602:	ec 01       	movw	r28, r24
    2604:	3d 83       	std	Y+5, r19	; 0x05
    2606:	2c 83       	std	Y+4, r18	; 0x04
    2608:	ea 01       	movw	r28, r20
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	a8 17       	cp	r26, r24
    2610:	b9 07       	cpc	r27, r25
    2612:	31 f4       	brne	.+12     	; 0x2620 <vTaskRemoveFromUnorderedEventList+0x66>
    2614:	16 96       	adiw	r26, 0x06	; 6
    2616:	8d 91       	ld	r24, X+
    2618:	9c 91       	ld	r25, X
    261a:	17 97       	sbiw	r26, 0x07	; 7
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	1b 96       	adiw	r26, 0x0b	; 11
    2622:	1c 92       	st	X, r1
    2624:	1e 92       	st	-X, r1
    2626:	1a 97       	sbiw	r26, 0x0a	; 10
    2628:	da 01       	movw	r26, r20
    262a:	8c 91       	ld	r24, X
    262c:	81 50       	subi	r24, 0x01	; 1
    262e:	8c 93       	st	X, r24
    2630:	a4 85       	ldd	r26, Z+12	; 0x0c
    2632:	b5 85       	ldd	r27, Z+13	; 0x0d
    2634:	c6 81       	ldd	r28, Z+6	; 0x06
    2636:	d7 81       	ldd	r29, Z+7	; 0x07
    2638:	80 85       	ldd	r24, Z+8	; 0x08
    263a:	91 85       	ldd	r25, Z+9	; 0x09
    263c:	9f 83       	std	Y+7, r25	; 0x07
    263e:	8e 83       	std	Y+6, r24	; 0x06
    2640:	c0 85       	ldd	r28, Z+8	; 0x08
    2642:	d1 85       	ldd	r29, Z+9	; 0x09
    2644:	86 81       	ldd	r24, Z+6	; 0x06
    2646:	97 81       	ldd	r25, Z+7	; 0x07
    2648:	9d 83       	std	Y+5, r25	; 0x05
    264a:	8c 83       	std	Y+4, r24	; 0x04
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	8d 91       	ld	r24, X+
    2650:	9c 91       	ld	r25, X
    2652:	12 97       	sbiw	r26, 0x02	; 2
    2654:	9f 01       	movw	r18, r30
    2656:	2e 5f       	subi	r18, 0xFE	; 254
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
    265a:	82 17       	cp	r24, r18
    265c:	93 07       	cpc	r25, r19
    265e:	31 f4       	brne	.+12     	; 0x266c <vTaskRemoveFromUnorderedEventList+0xb2>
    2660:	80 85       	ldd	r24, Z+8	; 0x08
    2662:	91 85       	ldd	r25, Z+9	; 0x09
    2664:	12 96       	adiw	r26, 0x02	; 2
    2666:	9c 93       	st	X, r25
    2668:	8e 93       	st	-X, r24
    266a:	11 97       	sbiw	r26, 0x01	; 1
    266c:	15 86       	std	Z+13, r1	; 0x0d
    266e:	14 86       	std	Z+12, r1	; 0x0c
    2670:	8c 91       	ld	r24, X
    2672:	81 50       	subi	r24, 0x01	; 1
    2674:	8c 93       	st	X, r24
    2676:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2678:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    267c:	8a 17       	cp	r24, r26
    267e:	10 f4       	brcc	.+4      	; 0x2684 <vTaskRemoveFromUnorderedEventList+0xca>
    2680:	a0 93 7b 15 	sts	0x157B, r26	; 0x80157b <uxTopReadyPriority>
    2684:	8b e0       	ldi	r24, 0x0B	; 11
    2686:	8a 9f       	mul	r24, r26
    2688:	d0 01       	movw	r26, r0
    268a:	11 24       	eor	r1, r1
    268c:	a3 54       	subi	r26, 0x43	; 67
    268e:	ba 4e       	sbci	r27, 0xEA	; 234
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	0d 90       	ld	r0, X+
    2694:	bc 91       	ld	r27, X
    2696:	a0 2d       	mov	r26, r0
    2698:	b7 83       	std	Z+7, r27	; 0x07
    269a:	a6 83       	std	Z+6, r26	; 0x06
    269c:	16 96       	adiw	r26, 0x06	; 6
    269e:	4d 91       	ld	r20, X+
    26a0:	5c 91       	ld	r21, X
    26a2:	17 97       	sbiw	r26, 0x07	; 7
    26a4:	51 87       	std	Z+9, r21	; 0x09
    26a6:	40 87       	std	Z+8, r20	; 0x08
    26a8:	16 96       	adiw	r26, 0x06	; 6
    26aa:	cd 91       	ld	r28, X+
    26ac:	dc 91       	ld	r29, X
    26ae:	17 97       	sbiw	r26, 0x07	; 7
    26b0:	3d 83       	std	Y+5, r19	; 0x05
    26b2:	2c 83       	std	Y+4, r18	; 0x04
    26b4:	17 96       	adiw	r26, 0x07	; 7
    26b6:	3c 93       	st	X, r19
    26b8:	2e 93       	st	-X, r18
    26ba:	16 97       	sbiw	r26, 0x06	; 6
    26bc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26be:	8a 9f       	mul	r24, r26
    26c0:	d0 01       	movw	r26, r0
    26c2:	11 24       	eor	r1, r1
    26c4:	a3 54       	subi	r26, 0x43	; 67
    26c6:	ba 4e       	sbci	r27, 0xEA	; 234
    26c8:	b5 87       	std	Z+13, r27	; 0x0d
    26ca:	a4 87       	std	Z+12, r26	; 0x0c
    26cc:	8c 91       	ld	r24, X
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	8c 93       	st	X, r24
    26d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    26d4:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    26d8:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    26dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    26de:	89 17       	cp	r24, r25
    26e0:	18 f4       	brcc	.+6      	; 0x26e8 <vTaskRemoveFromUnorderedEventList+0x12e>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xYieldPending>
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <vTaskSetTimeOutState>:
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	0f 92       	push	r0
    26f4:	20 91 74 15 	lds	r18, 0x1574	; 0x801574 <xNumOfOverflows>
    26f8:	fc 01       	movw	r30, r24
    26fa:	20 83       	st	Z, r18
    26fc:	40 91 7c 15 	lds	r20, 0x157C	; 0x80157c <xTickCount>
    2700:	50 91 7d 15 	lds	r21, 0x157D	; 0x80157d <xTickCount+0x1>
    2704:	60 91 7e 15 	lds	r22, 0x157E	; 0x80157e <xTickCount+0x2>
    2708:	70 91 7f 15 	lds	r23, 0x157F	; 0x80157f <xTickCount+0x3>
    270c:	41 83       	std	Z+1, r20	; 0x01
    270e:	52 83       	std	Z+2, r21	; 0x02
    2710:	63 83       	std	Z+3, r22	; 0x03
    2712:	74 83       	std	Z+4, r23	; 0x04
    2714:	0f 90       	pop	r0
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	08 95       	ret

0000271a <vTaskInternalSetTimeOutState>:
    271a:	20 91 74 15 	lds	r18, 0x1574	; 0x801574 <xNumOfOverflows>
    271e:	fc 01       	movw	r30, r24
    2720:	20 83       	st	Z, r18
    2722:	40 91 7c 15 	lds	r20, 0x157C	; 0x80157c <xTickCount>
    2726:	50 91 7d 15 	lds	r21, 0x157D	; 0x80157d <xTickCount+0x1>
    272a:	60 91 7e 15 	lds	r22, 0x157E	; 0x80157e <xTickCount+0x2>
    272e:	70 91 7f 15 	lds	r23, 0x157F	; 0x80157f <xTickCount+0x3>
    2732:	41 83       	std	Z+1, r20	; 0x01
    2734:	52 83       	std	Z+2, r21	; 0x02
    2736:	63 83       	std	Z+3, r22	; 0x03
    2738:	74 83       	std	Z+4, r23	; 0x04
    273a:	08 95       	ret

0000273c <xTaskCheckForTimeOut>:
    273c:	8f 92       	push	r8
    273e:	9f 92       	push	r9
    2740:	af 92       	push	r10
    2742:	bf 92       	push	r11
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	fb 01       	movw	r30, r22
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	0f 92       	push	r0
    275c:	c0 90 7c 15 	lds	r12, 0x157C	; 0x80157c <xTickCount>
    2760:	d0 90 7d 15 	lds	r13, 0x157D	; 0x80157d <xTickCount+0x1>
    2764:	e0 90 7e 15 	lds	r14, 0x157E	; 0x80157e <xTickCount+0x2>
    2768:	f0 90 7f 15 	lds	r15, 0x157F	; 0x80157f <xTickCount+0x3>
    276c:	dc 01       	movw	r26, r24
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	0d 91       	ld	r16, X+
    2772:	1d 91       	ld	r17, X+
    2774:	2d 91       	ld	r18, X+
    2776:	3c 91       	ld	r19, X
    2778:	14 97       	sbiw	r26, 0x04	; 4
    277a:	46 01       	movw	r8, r12
    277c:	57 01       	movw	r10, r14
    277e:	80 1a       	sub	r8, r16
    2780:	91 0a       	sbc	r9, r17
    2782:	a2 0a       	sbc	r10, r18
    2784:	b3 0a       	sbc	r11, r19
    2786:	40 81       	ld	r20, Z
    2788:	51 81       	ldd	r21, Z+1	; 0x01
    278a:	62 81       	ldd	r22, Z+2	; 0x02
    278c:	73 81       	ldd	r23, Z+3	; 0x03
    278e:	4f 3f       	cpi	r20, 0xFF	; 255
    2790:	bf ef       	ldi	r27, 0xFF	; 255
    2792:	5b 07       	cpc	r21, r27
    2794:	6b 07       	cpc	r22, r27
    2796:	7b 07       	cpc	r23, r27
    2798:	39 f1       	breq	.+78     	; 0x27e8 <xTaskCheckForTimeOut+0xac>
    279a:	ec 01       	movw	r28, r24
    279c:	b8 81       	ld	r27, Y
    279e:	a0 91 74 15 	lds	r26, 0x1574	; 0x801574 <xNumOfOverflows>
    27a2:	ba 17       	cp	r27, r26
    27a4:	59 f0       	breq	.+22     	; 0x27bc <xTaskCheckForTimeOut+0x80>
    27a6:	c0 16       	cp	r12, r16
    27a8:	d1 06       	cpc	r13, r17
    27aa:	e2 06       	cpc	r14, r18
    27ac:	f3 06       	cpc	r15, r19
    27ae:	30 f0       	brcs	.+12     	; 0x27bc <xTaskCheckForTimeOut+0x80>
    27b0:	10 82       	st	Z, r1
    27b2:	11 82       	std	Z+1, r1	; 0x01
    27b4:	12 82       	std	Z+2, r1	; 0x02
    27b6:	13 82       	std	Z+3, r1	; 0x03
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	17 c0       	rjmp	.+46     	; 0x27ea <xTaskCheckForTimeOut+0xae>
    27bc:	84 16       	cp	r8, r20
    27be:	95 06       	cpc	r9, r21
    27c0:	a6 06       	cpc	r10, r22
    27c2:	b7 06       	cpc	r11, r23
    27c4:	58 f4       	brcc	.+22     	; 0x27dc <xTaskCheckForTimeOut+0xa0>
    27c6:	48 19       	sub	r20, r8
    27c8:	59 09       	sbc	r21, r9
    27ca:	6a 09       	sbc	r22, r10
    27cc:	7b 09       	sbc	r23, r11
    27ce:	40 83       	st	Z, r20
    27d0:	51 83       	std	Z+1, r21	; 0x01
    27d2:	62 83       	std	Z+2, r22	; 0x02
    27d4:	73 83       	std	Z+3, r23	; 0x03
    27d6:	a1 df       	rcall	.-190    	; 0x271a <vTaskInternalSetTimeOutState>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <xTaskCheckForTimeOut+0xae>
    27dc:	10 82       	st	Z, r1
    27de:	11 82       	std	Z+1, r1	; 0x01
    27e0:	12 82       	std	Z+2, r1	; 0x02
    27e2:	13 82       	std	Z+3, r1	; 0x03
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <xTaskCheckForTimeOut+0xae>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
    27f8:	ef 90       	pop	r14
    27fa:	df 90       	pop	r13
    27fc:	cf 90       	pop	r12
    27fe:	bf 90       	pop	r11
    2800:	af 90       	pop	r10
    2802:	9f 90       	pop	r9
    2804:	8f 90       	pop	r8
    2806:	08 95       	ret

00002808 <vTaskMissedYield>:
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xYieldPending>
    280e:	08 95       	ret

00002810 <xTaskGetCurrentTaskHandle>:
    2810:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    2814:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2818:	08 95       	ret

0000281a <xTaskGetSchedulerState>:
    281a:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <xSchedulerRunning>
    281e:	88 23       	and	r24, r24
    2820:	31 f0       	breq	.+12     	; 0x282e <xTaskGetSchedulerState+0x14>
    2822:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <uxSchedulerSuspended>
    2826:	81 11       	cpse	r24, r1
    2828:	04 c0       	rjmp	.+8      	; 0x2832 <xTaskGetSchedulerState+0x18>
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	08 95       	ret
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	08 95       	ret
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	08 95       	ret

00002836 <xTaskPriorityDisinherit>:
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	fc 01       	movw	r30, r24
    2840:	89 2b       	or	r24, r25
    2842:	09 f4       	brne	.+2      	; 0x2846 <xTaskPriorityDisinherit+0x10>
    2844:	49 c0       	rjmp	.+146    	; 0x28d8 <xTaskPriorityDisinherit+0xa2>
    2846:	86 a5       	ldd	r24, Z+46	; 0x2e
    2848:	81 50       	subi	r24, 0x01	; 1
    284a:	86 a7       	std	Z+46, r24	; 0x2e
    284c:	22 8d       	ldd	r18, Z+26	; 0x1a
    284e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2850:	29 17       	cp	r18, r25
    2852:	09 f4       	brne	.+2      	; 0x2856 <xTaskPriorityDisinherit+0x20>
    2854:	43 c0       	rjmp	.+134    	; 0x28dc <xTaskPriorityDisinherit+0xa6>
    2856:	81 11       	cpse	r24, r1
    2858:	43 c0       	rjmp	.+134    	; 0x28e0 <xTaskPriorityDisinherit+0xaa>
    285a:	ef 01       	movw	r28, r30
    285c:	8f 01       	movw	r16, r30
    285e:	0e 5f       	subi	r16, 0xFE	; 254
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	c8 01       	movw	r24, r16
    2864:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
    2868:	ed a5       	ldd	r30, Y+45	; 0x2d
    286a:	ea 8f       	std	Y+26, r30	; 0x1a
    286c:	8a e0       	ldi	r24, 0x0A	; 10
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e0       	ldi	r26, 0x00	; 0
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	8e 1b       	sub	r24, r30
    2876:	91 09       	sbc	r25, r1
    2878:	a1 09       	sbc	r26, r1
    287a:	b1 09       	sbc	r27, r1
    287c:	8e 87       	std	Y+14, r24	; 0x0e
    287e:	9f 87       	std	Y+15, r25	; 0x0f
    2880:	a8 8b       	std	Y+16, r26	; 0x10
    2882:	b9 8b       	std	Y+17, r27	; 0x11
    2884:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    2888:	8e 17       	cp	r24, r30
    288a:	10 f4       	brcc	.+4      	; 0x2890 <xTaskPriorityDisinherit+0x5a>
    288c:	e0 93 7b 15 	sts	0x157B, r30	; 0x80157b <uxTopReadyPriority>
    2890:	8b e0       	ldi	r24, 0x0B	; 11
    2892:	8e 9f       	mul	r24, r30
    2894:	f0 01       	movw	r30, r0
    2896:	11 24       	eor	r1, r1
    2898:	e3 54       	subi	r30, 0x43	; 67
    289a:	fa 4e       	sbci	r31, 0xEA	; 234
    289c:	01 80       	ldd	r0, Z+1	; 0x01
    289e:	f2 81       	ldd	r31, Z+2	; 0x02
    28a0:	e0 2d       	mov	r30, r0
    28a2:	ff 83       	std	Y+7, r31	; 0x07
    28a4:	ee 83       	std	Y+6, r30	; 0x06
    28a6:	26 81       	ldd	r18, Z+6	; 0x06
    28a8:	37 81       	ldd	r19, Z+7	; 0x07
    28aa:	39 87       	std	Y+9, r19	; 0x09
    28ac:	28 87       	std	Y+8, r18	; 0x08
    28ae:	a6 81       	ldd	r26, Z+6	; 0x06
    28b0:	b7 81       	ldd	r27, Z+7	; 0x07
    28b2:	15 96       	adiw	r26, 0x05	; 5
    28b4:	1c 93       	st	X, r17
    28b6:	0e 93       	st	-X, r16
    28b8:	14 97       	sbiw	r26, 0x04	; 4
    28ba:	17 83       	std	Z+7, r17	; 0x07
    28bc:	06 83       	std	Z+6, r16	; 0x06
    28be:	ea 8d       	ldd	r30, Y+26	; 0x1a
    28c0:	8e 9f       	mul	r24, r30
    28c2:	f0 01       	movw	r30, r0
    28c4:	11 24       	eor	r1, r1
    28c6:	e3 54       	subi	r30, 0x43	; 67
    28c8:	fa 4e       	sbci	r31, 0xEA	; 234
    28ca:	fd 87       	std	Y+13, r31	; 0x0d
    28cc:	ec 87       	std	Y+12, r30	; 0x0c
    28ce:	80 81       	ld	r24, Z
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	80 83       	st	Z, r24
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	05 c0       	rjmp	.+10     	; 0x28e2 <xTaskPriorityDisinherit+0xac>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	03 c0       	rjmp	.+6      	; 0x28e2 <xTaskPriorityDisinherit+0xac>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <xTaskPriorityDisinherit+0xac>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	08 95       	ret

000028ec <uxTaskResetEventItemValue>:
    28ec:	cf 92       	push	r12
    28ee:	df 92       	push	r13
    28f0:	ef 92       	push	r14
    28f2:	ff 92       	push	r15
    28f4:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    28f8:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    28fc:	66 85       	ldd	r22, Z+14	; 0x0e
    28fe:	77 85       	ldd	r23, Z+15	; 0x0f
    2900:	80 89       	ldd	r24, Z+16	; 0x10
    2902:	91 89       	ldd	r25, Z+17	; 0x11
    2904:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2908:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    290c:	a0 91 2b 16 	lds	r26, 0x162B	; 0x80162b <pxCurrentTCB>
    2910:	b0 91 2c 16 	lds	r27, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2914:	5a 96       	adiw	r26, 0x1a	; 26
    2916:	2c 91       	ld	r18, X
    2918:	0f 2e       	mov	r0, r31
    291a:	fa e0       	ldi	r31, 0x0A	; 10
    291c:	cf 2e       	mov	r12, r31
    291e:	d1 2c       	mov	r13, r1
    2920:	e1 2c       	mov	r14, r1
    2922:	f1 2c       	mov	r15, r1
    2924:	f0 2d       	mov	r31, r0
    2926:	c2 1a       	sub	r12, r18
    2928:	d1 08       	sbc	r13, r1
    292a:	e1 08       	sbc	r14, r1
    292c:	f1 08       	sbc	r15, r1
    292e:	c6 86       	std	Z+14, r12	; 0x0e
    2930:	d7 86       	std	Z+15, r13	; 0x0f
    2932:	e0 8a       	std	Z+16, r14	; 0x10
    2934:	f1 8a       	std	Z+17, r15	; 0x11
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14
    293a:	df 90       	pop	r13
    293c:	cf 90       	pop	r12
    293e:	08 95       	ret

00002940 <xTaskGenericNotifyWait>:
    2940:	4f 92       	push	r4
    2942:	5f 92       	push	r5
    2944:	6f 92       	push	r6
    2946:	7f 92       	push	r7
    2948:	af 92       	push	r10
    294a:	bf 92       	push	r11
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	28 01       	movw	r4, r16
    295e:	39 01       	movw	r6, r18
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	0f 92       	push	r0
    2966:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    296a:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    296e:	c8 2f       	mov	r28, r24
    2970:	d0 e0       	ldi	r29, 0x00	; 0
    2972:	ec 0f       	add	r30, r28
    2974:	fd 1f       	adc	r31, r29
    2976:	83 a9       	ldd	r24, Z+51	; 0x33
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	71 f1       	breq	.+92     	; 0x29d8 <xTaskGenericNotifyWait+0x98>
    297c:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2980:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2984:	ce 01       	movw	r24, r28
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	e8 0f       	add	r30, r24
    2990:	f9 1f       	adc	r31, r25
    2992:	87 a5       	ldd	r24, Z+47	; 0x2f
    2994:	90 a9       	ldd	r25, Z+48	; 0x30
    2996:	a1 a9       	ldd	r26, Z+49	; 0x31
    2998:	b2 a9       	ldd	r27, Z+50	; 0x32
    299a:	40 95       	com	r20
    299c:	50 95       	com	r21
    299e:	60 95       	com	r22
    29a0:	70 95       	com	r23
    29a2:	48 23       	and	r20, r24
    29a4:	59 23       	and	r21, r25
    29a6:	6a 23       	and	r22, r26
    29a8:	7b 23       	and	r23, r27
    29aa:	47 a7       	std	Z+47, r20	; 0x2f
    29ac:	50 ab       	std	Z+48, r21	; 0x30
    29ae:	61 ab       	std	Z+49, r22	; 0x31
    29b0:	72 ab       	std	Z+50, r23	; 0x32
    29b2:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    29b6:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    29ba:	ec 0f       	add	r30, r28
    29bc:	fd 1f       	adc	r31, r29
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	83 ab       	std	Z+51, r24	; 0x33
    29c2:	a1 14       	cp	r10, r1
    29c4:	b1 04       	cpc	r11, r1
    29c6:	c1 04       	cpc	r12, r1
    29c8:	d1 04       	cpc	r13, r1
    29ca:	31 f0       	breq	.+12     	; 0x29d8 <xTaskGenericNotifyWait+0x98>
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	c6 01       	movw	r24, r12
    29d0:	b5 01       	movw	r22, r10
    29d2:	7a d8       	rcall	.-3852   	; 0x1ac8 <prvAddCurrentTaskToDelayedList>
    29d4:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	0f 92       	push	r0
    29e2:	e1 14       	cp	r14, r1
    29e4:	f1 04       	cpc	r15, r1
    29e6:	a1 f0       	breq	.+40     	; 0x2a10 <xTaskGenericNotifyWait+0xd0>
    29e8:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    29ec:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    29f0:	ce 01       	movw	r24, r28
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	e8 0f       	add	r30, r24
    29fc:	f9 1f       	adc	r31, r25
    29fe:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a00:	90 a9       	ldd	r25, Z+48	; 0x30
    2a02:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a04:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a06:	f7 01       	movw	r30, r14
    2a08:	80 83       	st	Z, r24
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	a2 83       	std	Z+2, r26	; 0x02
    2a0e:	b3 83       	std	Z+3, r27	; 0x03
    2a10:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2a14:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2a18:	ec 0f       	add	r30, r28
    2a1a:	fd 1f       	adc	r31, r29
    2a1c:	83 a9       	ldd	r24, Z+51	; 0x33
    2a1e:	82 30       	cpi	r24, 0x02	; 2
    2a20:	e9 f4       	brne	.+58     	; 0x2a5c <xTaskGenericNotifyWait+0x11c>
    2a22:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2a26:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	e8 0f       	add	r30, r24
    2a36:	f9 1f       	adc	r31, r25
    2a38:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a3a:	90 a9       	ldd	r25, Z+48	; 0x30
    2a3c:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a3e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a40:	40 94       	com	r4
    2a42:	50 94       	com	r5
    2a44:	60 94       	com	r6
    2a46:	70 94       	com	r7
    2a48:	48 22       	and	r4, r24
    2a4a:	59 22       	and	r5, r25
    2a4c:	6a 22       	and	r6, r26
    2a4e:	7b 22       	and	r7, r27
    2a50:	47 a6       	std	Z+47, r4	; 0x2f
    2a52:	50 aa       	std	Z+48, r5	; 0x30
    2a54:	61 aa       	std	Z+49, r6	; 0x31
    2a56:	72 aa       	std	Z+50, r7	; 0x32
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	01 c0       	rjmp	.+2      	; 0x2a5e <xTaskGenericNotifyWait+0x11e>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	20 91 2b 16 	lds	r18, 0x162B	; 0x80162b <pxCurrentTCB>
    2a62:	30 91 2c 16 	lds	r19, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2a66:	c2 0f       	add	r28, r18
    2a68:	d3 1f       	adc	r29, r19
    2a6a:	1b aa       	std	Y+51, r1	; 0x33
    2a6c:	0f 90       	pop	r0
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	7f 90       	pop	r7
    2a86:	6f 90       	pop	r6
    2a88:	5f 90       	pop	r5
    2a8a:	4f 90       	pop	r4
    2a8c:	08 95       	ret

00002a8e <xTaskGenericNotify>:
    2a8e:	8f 92       	push	r8
    2a90:	9f 92       	push	r9
    2a92:	af 92       	push	r10
    2a94:	bf 92       	push	r11
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	0f 92       	push	r0
    2aa8:	e1 14       	cp	r14, r1
    2aaa:	f1 04       	cpc	r15, r1
    2aac:	89 f0       	breq	.+34     	; 0x2ad0 <xTaskGenericNotify+0x42>
    2aae:	e6 2f       	mov	r30, r22
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	ee 0f       	add	r30, r30
    2ab8:	ff 1f       	adc	r31, r31
    2aba:	e8 0f       	add	r30, r24
    2abc:	f9 1f       	adc	r31, r25
    2abe:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ac0:	90 a8       	ldd	r9, Z+48	; 0x30
    2ac2:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ac4:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ac6:	f7 01       	movw	r30, r14
    2ac8:	80 82       	st	Z, r8
    2aca:	91 82       	std	Z+1, r9	; 0x01
    2acc:	a2 82       	std	Z+2, r10	; 0x02
    2ace:	b3 82       	std	Z+3, r11	; 0x03
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	fd 01       	movw	r30, r26
    2ad4:	e6 0f       	add	r30, r22
    2ad6:	f7 1f       	adc	r31, r23
    2ad8:	83 a9       	ldd	r24, Z+51	; 0x33
    2ada:	92 e0       	ldi	r25, 0x02	; 2
    2adc:	93 ab       	std	Z+51, r25	; 0x33
    2ade:	02 30       	cpi	r16, 0x02	; 2
    2ae0:	01 f1       	breq	.+64     	; 0x2b22 <xTaskGenericNotify+0x94>
    2ae2:	18 f4       	brcc	.+6      	; 0x2aea <xTaskGenericNotify+0x5c>
    2ae4:	01 30       	cpi	r16, 0x01	; 1
    2ae6:	31 f0       	breq	.+12     	; 0x2af4 <xTaskGenericNotify+0x66>
    2ae8:	4d c0       	rjmp	.+154    	; 0x2b84 <xTaskGenericNotify+0xf6>
    2aea:	03 30       	cpi	r16, 0x03	; 3
    2aec:	79 f1       	breq	.+94     	; 0x2b4c <xTaskGenericNotify+0xbe>
    2aee:	04 30       	cpi	r16, 0x04	; 4
    2af0:	d1 f1       	breq	.+116    	; 0x2b66 <xTaskGenericNotify+0xd8>
    2af2:	48 c0       	rjmp	.+144    	; 0x2b84 <xTaskGenericNotify+0xf6>
    2af4:	66 0f       	add	r22, r22
    2af6:	77 1f       	adc	r23, r23
    2af8:	66 0f       	add	r22, r22
    2afa:	77 1f       	adc	r23, r23
    2afc:	fd 01       	movw	r30, r26
    2afe:	e6 0f       	add	r30, r22
    2b00:	f7 1f       	adc	r31, r23
    2b02:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b04:	90 a8       	ldd	r9, Z+48	; 0x30
    2b06:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b08:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b0a:	ba 01       	movw	r22, r20
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	48 29       	or	r20, r8
    2b10:	59 29       	or	r21, r9
    2b12:	6a 29       	or	r22, r10
    2b14:	7b 29       	or	r23, r11
    2b16:	47 a7       	std	Z+47, r20	; 0x2f
    2b18:	50 ab       	std	Z+48, r21	; 0x30
    2b1a:	61 ab       	std	Z+49, r22	; 0x31
    2b1c:	72 ab       	std	Z+50, r23	; 0x32
    2b1e:	01 e0       	ldi	r16, 0x01	; 1
    2b20:	34 c0       	rjmp	.+104    	; 0x2b8a <xTaskGenericNotify+0xfc>
    2b22:	66 0f       	add	r22, r22
    2b24:	77 1f       	adc	r23, r23
    2b26:	66 0f       	add	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	fd 01       	movw	r30, r26
    2b2c:	e6 0f       	add	r30, r22
    2b2e:	f7 1f       	adc	r31, r23
    2b30:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b32:	50 a9       	ldd	r21, Z+48	; 0x30
    2b34:	61 a9       	ldd	r22, Z+49	; 0x31
    2b36:	72 a9       	ldd	r23, Z+50	; 0x32
    2b38:	4f 5f       	subi	r20, 0xFF	; 255
    2b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3c:	6f 4f       	sbci	r22, 0xFF	; 255
    2b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b40:	47 a7       	std	Z+47, r20	; 0x2f
    2b42:	50 ab       	std	Z+48, r21	; 0x30
    2b44:	61 ab       	std	Z+49, r22	; 0x31
    2b46:	72 ab       	std	Z+50, r23	; 0x32
    2b48:	01 e0       	ldi	r16, 0x01	; 1
    2b4a:	1f c0       	rjmp	.+62     	; 0x2b8a <xTaskGenericNotify+0xfc>
    2b4c:	66 0f       	add	r22, r22
    2b4e:	77 1f       	adc	r23, r23
    2b50:	66 0f       	add	r22, r22
    2b52:	77 1f       	adc	r23, r23
    2b54:	fd 01       	movw	r30, r26
    2b56:	e6 0f       	add	r30, r22
    2b58:	f7 1f       	adc	r31, r23
    2b5a:	27 a7       	std	Z+47, r18	; 0x2f
    2b5c:	30 ab       	std	Z+48, r19	; 0x30
    2b5e:	41 ab       	std	Z+49, r20	; 0x31
    2b60:	52 ab       	std	Z+50, r21	; 0x32
    2b62:	01 e0       	ldi	r16, 0x01	; 1
    2b64:	12 c0       	rjmp	.+36     	; 0x2b8a <xTaskGenericNotify+0xfc>
    2b66:	82 30       	cpi	r24, 0x02	; 2
    2b68:	79 f0       	breq	.+30     	; 0x2b88 <xTaskGenericNotify+0xfa>
    2b6a:	66 0f       	add	r22, r22
    2b6c:	77 1f       	adc	r23, r23
    2b6e:	66 0f       	add	r22, r22
    2b70:	77 1f       	adc	r23, r23
    2b72:	fd 01       	movw	r30, r26
    2b74:	e6 0f       	add	r30, r22
    2b76:	f7 1f       	adc	r31, r23
    2b78:	27 a7       	std	Z+47, r18	; 0x2f
    2b7a:	30 ab       	std	Z+48, r19	; 0x30
    2b7c:	41 ab       	std	Z+49, r20	; 0x31
    2b7e:	52 ab       	std	Z+50, r21	; 0x32
    2b80:	01 e0       	ldi	r16, 0x01	; 1
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <xTaskGenericNotify+0xfc>
    2b84:	01 e0       	ldi	r16, 0x01	; 1
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <xTaskGenericNotify+0xfc>
    2b88:	00 e0       	ldi	r16, 0x00	; 0
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <xTaskGenericNotify+0x102>
    2b8e:	69 c0       	rjmp	.+210    	; 0x2c62 <xTaskGenericNotify+0x1d4>
    2b90:	1c 96       	adiw	r26, 0x0c	; 12
    2b92:	ed 91       	ld	r30, X+
    2b94:	fc 91       	ld	r31, X
    2b96:	1d 97       	sbiw	r26, 0x0d	; 13
    2b98:	16 96       	adiw	r26, 0x06	; 6
    2b9a:	cd 91       	ld	r28, X+
    2b9c:	dc 91       	ld	r29, X
    2b9e:	17 97       	sbiw	r26, 0x07	; 7
    2ba0:	18 96       	adiw	r26, 0x08	; 8
    2ba2:	8d 91       	ld	r24, X+
    2ba4:	9c 91       	ld	r25, X
    2ba6:	19 97       	sbiw	r26, 0x09	; 9
    2ba8:	9f 83       	std	Y+7, r25	; 0x07
    2baa:	8e 83       	std	Y+6, r24	; 0x06
    2bac:	18 96       	adiw	r26, 0x08	; 8
    2bae:	cd 91       	ld	r28, X+
    2bb0:	dc 91       	ld	r29, X
    2bb2:	19 97       	sbiw	r26, 0x09	; 9
    2bb4:	16 96       	adiw	r26, 0x06	; 6
    2bb6:	8d 91       	ld	r24, X+
    2bb8:	9c 91       	ld	r25, X
    2bba:	17 97       	sbiw	r26, 0x07	; 7
    2bbc:	9d 83       	std	Y+5, r25	; 0x05
    2bbe:	8c 83       	std	Y+4, r24	; 0x04
    2bc0:	81 81       	ldd	r24, Z+1	; 0x01
    2bc2:	92 81       	ldd	r25, Z+2	; 0x02
    2bc4:	9d 01       	movw	r18, r26
    2bc6:	2e 5f       	subi	r18, 0xFE	; 254
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	82 17       	cp	r24, r18
    2bcc:	93 07       	cpc	r25, r19
    2bce:	31 f4       	brne	.+12     	; 0x2bdc <xTaskGenericNotify+0x14e>
    2bd0:	18 96       	adiw	r26, 0x08	; 8
    2bd2:	8d 91       	ld	r24, X+
    2bd4:	9c 91       	ld	r25, X
    2bd6:	19 97       	sbiw	r26, 0x09	; 9
    2bd8:	92 83       	std	Z+2, r25	; 0x02
    2bda:	81 83       	std	Z+1, r24	; 0x01
    2bdc:	1d 96       	adiw	r26, 0x0d	; 13
    2bde:	1c 92       	st	X, r1
    2be0:	1e 92       	st	-X, r1
    2be2:	1c 97       	sbiw	r26, 0x0c	; 12
    2be4:	80 81       	ld	r24, Z
    2be6:	81 50       	subi	r24, 0x01	; 1
    2be8:	80 83       	st	Z, r24
    2bea:	5a 96       	adiw	r26, 0x1a	; 26
    2bec:	ec 91       	ld	r30, X
    2bee:	5a 97       	sbiw	r26, 0x1a	; 26
    2bf0:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <uxTopReadyPriority>
    2bf4:	8e 17       	cp	r24, r30
    2bf6:	10 f4       	brcc	.+4      	; 0x2bfc <xTaskGenericNotify+0x16e>
    2bf8:	e0 93 7b 15 	sts	0x157B, r30	; 0x80157b <uxTopReadyPriority>
    2bfc:	8b e0       	ldi	r24, 0x0B	; 11
    2bfe:	8e 9f       	mul	r24, r30
    2c00:	f0 01       	movw	r30, r0
    2c02:	11 24       	eor	r1, r1
    2c04:	e3 54       	subi	r30, 0x43	; 67
    2c06:	fa 4e       	sbci	r31, 0xEA	; 234
    2c08:	01 80       	ldd	r0, Z+1	; 0x01
    2c0a:	f2 81       	ldd	r31, Z+2	; 0x02
    2c0c:	e0 2d       	mov	r30, r0
    2c0e:	17 96       	adiw	r26, 0x07	; 7
    2c10:	fc 93       	st	X, r31
    2c12:	ee 93       	st	-X, r30
    2c14:	16 97       	sbiw	r26, 0x06	; 6
    2c16:	46 81       	ldd	r20, Z+6	; 0x06
    2c18:	57 81       	ldd	r21, Z+7	; 0x07
    2c1a:	19 96       	adiw	r26, 0x09	; 9
    2c1c:	5c 93       	st	X, r21
    2c1e:	4e 93       	st	-X, r20
    2c20:	18 97       	sbiw	r26, 0x08	; 8
    2c22:	c6 81       	ldd	r28, Z+6	; 0x06
    2c24:	d7 81       	ldd	r29, Z+7	; 0x07
    2c26:	3d 83       	std	Y+5, r19	; 0x05
    2c28:	2c 83       	std	Y+4, r18	; 0x04
    2c2a:	37 83       	std	Z+7, r19	; 0x07
    2c2c:	26 83       	std	Z+6, r18	; 0x06
    2c2e:	5a 96       	adiw	r26, 0x1a	; 26
    2c30:	ec 91       	ld	r30, X
    2c32:	5a 97       	sbiw	r26, 0x1a	; 26
    2c34:	8e 9f       	mul	r24, r30
    2c36:	f0 01       	movw	r30, r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	e3 54       	subi	r30, 0x43	; 67
    2c3c:	fa 4e       	sbci	r31, 0xEA	; 234
    2c3e:	1d 96       	adiw	r26, 0x0d	; 13
    2c40:	fc 93       	st	X, r31
    2c42:	ee 93       	st	-X, r30
    2c44:	1c 97       	sbiw	r26, 0x0c	; 12
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	80 83       	st	Z, r24
    2c4c:	5a 96       	adiw	r26, 0x1a	; 26
    2c4e:	9c 91       	ld	r25, X
    2c50:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2c54:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2c58:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c5a:	89 17       	cp	r24, r25
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <xTaskGenericNotify+0x1d4>
    2c5e:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    2c62:	0f 90       	pop	r0
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	80 2f       	mov	r24, r16
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	bf 90       	pop	r11
    2c74:	af 90       	pop	r10
    2c76:	9f 90       	pop	r9
    2c78:	8f 90       	pop	r8
    2c7a:	08 95       	ret

00002c7c <xTaskGenericNotifyFromISR>:
    2c7c:	8f 92       	push	r8
    2c7e:	9f 92       	push	r9
    2c80:	af 92       	push	r10
    2c82:	bf 92       	push	r11
    2c84:	cf 92       	push	r12
    2c86:	df 92       	push	r13
    2c88:	ef 92       	push	r14
    2c8a:	ff 92       	push	r15
    2c8c:	0f 93       	push	r16
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	dc 01       	movw	r26, r24
    2c94:	e1 14       	cp	r14, r1
    2c96:	f1 04       	cpc	r15, r1
    2c98:	89 f0       	breq	.+34     	; 0x2cbc <xTaskGenericNotifyFromISR+0x40>
    2c9a:	e6 2f       	mov	r30, r22
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31
    2ca2:	ee 0f       	add	r30, r30
    2ca4:	ff 1f       	adc	r31, r31
    2ca6:	e8 0f       	add	r30, r24
    2ca8:	f9 1f       	adc	r31, r25
    2caa:	87 a4       	ldd	r8, Z+47	; 0x2f
    2cac:	90 a8       	ldd	r9, Z+48	; 0x30
    2cae:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cb0:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cb2:	f7 01       	movw	r30, r14
    2cb4:	80 82       	st	Z, r8
    2cb6:	91 82       	std	Z+1, r9	; 0x01
    2cb8:	a2 82       	std	Z+2, r10	; 0x02
    2cba:	b3 82       	std	Z+3, r11	; 0x03
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	fd 01       	movw	r30, r26
    2cc0:	e6 0f       	add	r30, r22
    2cc2:	f7 1f       	adc	r31, r23
    2cc4:	93 a9       	ldd	r25, Z+51	; 0x33
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	83 ab       	std	Z+51, r24	; 0x33
    2cca:	02 30       	cpi	r16, 0x02	; 2
    2ccc:	01 f1       	breq	.+64     	; 0x2d0e <xTaskGenericNotifyFromISR+0x92>
    2cce:	18 f4       	brcc	.+6      	; 0x2cd6 <xTaskGenericNotifyFromISR+0x5a>
    2cd0:	01 30       	cpi	r16, 0x01	; 1
    2cd2:	31 f0       	breq	.+12     	; 0x2ce0 <xTaskGenericNotifyFromISR+0x64>
    2cd4:	4d c0       	rjmp	.+154    	; 0x2d70 <xTaskGenericNotifyFromISR+0xf4>
    2cd6:	03 30       	cpi	r16, 0x03	; 3
    2cd8:	79 f1       	breq	.+94     	; 0x2d38 <xTaskGenericNotifyFromISR+0xbc>
    2cda:	04 30       	cpi	r16, 0x04	; 4
    2cdc:	d1 f1       	breq	.+116    	; 0x2d52 <xTaskGenericNotifyFromISR+0xd6>
    2cde:	48 c0       	rjmp	.+144    	; 0x2d70 <xTaskGenericNotifyFromISR+0xf4>
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	66 0f       	add	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	fd 01       	movw	r30, r26
    2cea:	e6 0f       	add	r30, r22
    2cec:	f7 1f       	adc	r31, r23
    2cee:	87 a4       	ldd	r8, Z+47	; 0x2f
    2cf0:	90 a8       	ldd	r9, Z+48	; 0x30
    2cf2:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cf4:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cf6:	ba 01       	movw	r22, r20
    2cf8:	a9 01       	movw	r20, r18
    2cfa:	48 29       	or	r20, r8
    2cfc:	59 29       	or	r21, r9
    2cfe:	6a 29       	or	r22, r10
    2d00:	7b 29       	or	r23, r11
    2d02:	47 a7       	std	Z+47, r20	; 0x2f
    2d04:	50 ab       	std	Z+48, r21	; 0x30
    2d06:	61 ab       	std	Z+49, r22	; 0x31
    2d08:	72 ab       	std	Z+50, r23	; 0x32
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	34 c0       	rjmp	.+104    	; 0x2d76 <xTaskGenericNotifyFromISR+0xfa>
    2d0e:	66 0f       	add	r22, r22
    2d10:	77 1f       	adc	r23, r23
    2d12:	66 0f       	add	r22, r22
    2d14:	77 1f       	adc	r23, r23
    2d16:	fd 01       	movw	r30, r26
    2d18:	e6 0f       	add	r30, r22
    2d1a:	f7 1f       	adc	r31, r23
    2d1c:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d1e:	50 a9       	ldd	r21, Z+48	; 0x30
    2d20:	61 a9       	ldd	r22, Z+49	; 0x31
    2d22:	72 a9       	ldd	r23, Z+50	; 0x32
    2d24:	4f 5f       	subi	r20, 0xFF	; 255
    2d26:	5f 4f       	sbci	r21, 0xFF	; 255
    2d28:	6f 4f       	sbci	r22, 0xFF	; 255
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	47 a7       	std	Z+47, r20	; 0x2f
    2d2e:	50 ab       	std	Z+48, r21	; 0x30
    2d30:	61 ab       	std	Z+49, r22	; 0x31
    2d32:	72 ab       	std	Z+50, r23	; 0x32
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	1f c0       	rjmp	.+62     	; 0x2d76 <xTaskGenericNotifyFromISR+0xfa>
    2d38:	66 0f       	add	r22, r22
    2d3a:	77 1f       	adc	r23, r23
    2d3c:	66 0f       	add	r22, r22
    2d3e:	77 1f       	adc	r23, r23
    2d40:	fd 01       	movw	r30, r26
    2d42:	e6 0f       	add	r30, r22
    2d44:	f7 1f       	adc	r31, r23
    2d46:	27 a7       	std	Z+47, r18	; 0x2f
    2d48:	30 ab       	std	Z+48, r19	; 0x30
    2d4a:	41 ab       	std	Z+49, r20	; 0x31
    2d4c:	52 ab       	std	Z+50, r21	; 0x32
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	12 c0       	rjmp	.+36     	; 0x2d76 <xTaskGenericNotifyFromISR+0xfa>
    2d52:	92 30       	cpi	r25, 0x02	; 2
    2d54:	79 f0       	breq	.+30     	; 0x2d74 <xTaskGenericNotifyFromISR+0xf8>
    2d56:	66 0f       	add	r22, r22
    2d58:	77 1f       	adc	r23, r23
    2d5a:	66 0f       	add	r22, r22
    2d5c:	77 1f       	adc	r23, r23
    2d5e:	fd 01       	movw	r30, r26
    2d60:	e6 0f       	add	r30, r22
    2d62:	f7 1f       	adc	r31, r23
    2d64:	27 a7       	std	Z+47, r18	; 0x2f
    2d66:	30 ab       	std	Z+48, r19	; 0x30
    2d68:	41 ab       	std	Z+49, r20	; 0x31
    2d6a:	52 ab       	std	Z+50, r21	; 0x32
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <xTaskGenericNotifyFromISR+0xfa>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <xTaskGenericNotifyFromISR+0xfa>
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	91 30       	cpi	r25, 0x01	; 1
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <xTaskGenericNotifyFromISR+0x100>
    2d7a:	96 c0       	rjmp	.+300    	; 0x2ea8 <xTaskGenericNotifyFromISR+0x22c>
    2d7c:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <uxSchedulerSuspended>
    2d80:	91 11       	cpse	r25, r1
    2d82:	5f c0       	rjmp	.+190    	; 0x2e42 <xTaskGenericNotifyFromISR+0x1c6>
    2d84:	1c 96       	adiw	r26, 0x0c	; 12
    2d86:	ed 91       	ld	r30, X+
    2d88:	fc 91       	ld	r31, X
    2d8a:	1d 97       	sbiw	r26, 0x0d	; 13
    2d8c:	16 96       	adiw	r26, 0x06	; 6
    2d8e:	cd 91       	ld	r28, X+
    2d90:	dc 91       	ld	r29, X
    2d92:	17 97       	sbiw	r26, 0x07	; 7
    2d94:	18 96       	adiw	r26, 0x08	; 8
    2d96:	2d 91       	ld	r18, X+
    2d98:	3c 91       	ld	r19, X
    2d9a:	19 97       	sbiw	r26, 0x09	; 9
    2d9c:	3f 83       	std	Y+7, r19	; 0x07
    2d9e:	2e 83       	std	Y+6, r18	; 0x06
    2da0:	18 96       	adiw	r26, 0x08	; 8
    2da2:	cd 91       	ld	r28, X+
    2da4:	dc 91       	ld	r29, X
    2da6:	19 97       	sbiw	r26, 0x09	; 9
    2da8:	16 96       	adiw	r26, 0x06	; 6
    2daa:	2d 91       	ld	r18, X+
    2dac:	3c 91       	ld	r19, X
    2dae:	17 97       	sbiw	r26, 0x07	; 7
    2db0:	3d 83       	std	Y+5, r19	; 0x05
    2db2:	2c 83       	std	Y+4, r18	; 0x04
    2db4:	41 81       	ldd	r20, Z+1	; 0x01
    2db6:	52 81       	ldd	r21, Z+2	; 0x02
    2db8:	9d 01       	movw	r18, r26
    2dba:	2e 5f       	subi	r18, 0xFE	; 254
    2dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbe:	42 17       	cp	r20, r18
    2dc0:	53 07       	cpc	r21, r19
    2dc2:	31 f4       	brne	.+12     	; 0x2dd0 <xTaskGenericNotifyFromISR+0x154>
    2dc4:	18 96       	adiw	r26, 0x08	; 8
    2dc6:	4d 91       	ld	r20, X+
    2dc8:	5c 91       	ld	r21, X
    2dca:	19 97       	sbiw	r26, 0x09	; 9
    2dcc:	52 83       	std	Z+2, r21	; 0x02
    2dce:	41 83       	std	Z+1, r20	; 0x01
    2dd0:	1d 96       	adiw	r26, 0x0d	; 13
    2dd2:	1c 92       	st	X, r1
    2dd4:	1e 92       	st	-X, r1
    2dd6:	1c 97       	sbiw	r26, 0x0c	; 12
    2dd8:	90 81       	ld	r25, Z
    2dda:	91 50       	subi	r25, 0x01	; 1
    2ddc:	90 83       	st	Z, r25
    2dde:	5a 96       	adiw	r26, 0x1a	; 26
    2de0:	ec 91       	ld	r30, X
    2de2:	5a 97       	sbiw	r26, 0x1a	; 26
    2de4:	90 91 7b 15 	lds	r25, 0x157B	; 0x80157b <uxTopReadyPriority>
    2de8:	9e 17       	cp	r25, r30
    2dea:	10 f4       	brcc	.+4      	; 0x2df0 <xTaskGenericNotifyFromISR+0x174>
    2dec:	e0 93 7b 15 	sts	0x157B, r30	; 0x80157b <uxTopReadyPriority>
    2df0:	9b e0       	ldi	r25, 0x0B	; 11
    2df2:	9e 9f       	mul	r25, r30
    2df4:	f0 01       	movw	r30, r0
    2df6:	11 24       	eor	r1, r1
    2df8:	e3 54       	subi	r30, 0x43	; 67
    2dfa:	fa 4e       	sbci	r31, 0xEA	; 234
    2dfc:	01 80       	ldd	r0, Z+1	; 0x01
    2dfe:	f2 81       	ldd	r31, Z+2	; 0x02
    2e00:	e0 2d       	mov	r30, r0
    2e02:	17 96       	adiw	r26, 0x07	; 7
    2e04:	fc 93       	st	X, r31
    2e06:	ee 93       	st	-X, r30
    2e08:	16 97       	sbiw	r26, 0x06	; 6
    2e0a:	46 81       	ldd	r20, Z+6	; 0x06
    2e0c:	57 81       	ldd	r21, Z+7	; 0x07
    2e0e:	19 96       	adiw	r26, 0x09	; 9
    2e10:	5c 93       	st	X, r21
    2e12:	4e 93       	st	-X, r20
    2e14:	18 97       	sbiw	r26, 0x08	; 8
    2e16:	c6 81       	ldd	r28, Z+6	; 0x06
    2e18:	d7 81       	ldd	r29, Z+7	; 0x07
    2e1a:	3d 83       	std	Y+5, r19	; 0x05
    2e1c:	2c 83       	std	Y+4, r18	; 0x04
    2e1e:	37 83       	std	Z+7, r19	; 0x07
    2e20:	26 83       	std	Z+6, r18	; 0x06
    2e22:	5a 96       	adiw	r26, 0x1a	; 26
    2e24:	ec 91       	ld	r30, X
    2e26:	5a 97       	sbiw	r26, 0x1a	; 26
    2e28:	9e 9f       	mul	r25, r30
    2e2a:	f0 01       	movw	r30, r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	e3 54       	subi	r30, 0x43	; 67
    2e30:	fa 4e       	sbci	r31, 0xEA	; 234
    2e32:	1d 96       	adiw	r26, 0x0d	; 13
    2e34:	fc 93       	st	X, r31
    2e36:	ee 93       	st	-X, r30
    2e38:	1c 97       	sbiw	r26, 0x0c	; 12
    2e3a:	90 81       	ld	r25, Z
    2e3c:	9f 5f       	subi	r25, 0xFF	; 255
    2e3e:	90 83       	st	Z, r25
    2e40:	21 c0       	rjmp	.+66     	; 0x2e84 <xTaskGenericNotifyFromISR+0x208>
    2e42:	68 e9       	ldi	r22, 0x98	; 152
    2e44:	75 e1       	ldi	r23, 0x15	; 21
    2e46:	fb 01       	movw	r30, r22
    2e48:	c1 81       	ldd	r28, Z+1	; 0x01
    2e4a:	d2 81       	ldd	r29, Z+2	; 0x02
    2e4c:	53 96       	adiw	r26, 0x13	; 19
    2e4e:	dc 93       	st	X, r29
    2e50:	ce 93       	st	-X, r28
    2e52:	52 97       	sbiw	r26, 0x12	; 18
    2e54:	2e 81       	ldd	r18, Y+6	; 0x06
    2e56:	3f 81       	ldd	r19, Y+7	; 0x07
    2e58:	55 96       	adiw	r26, 0x15	; 21
    2e5a:	3c 93       	st	X, r19
    2e5c:	2e 93       	st	-X, r18
    2e5e:	54 97       	sbiw	r26, 0x14	; 20
    2e60:	4e 81       	ldd	r20, Y+6	; 0x06
    2e62:	5f 81       	ldd	r21, Y+7	; 0x07
    2e64:	9d 01       	movw	r18, r26
    2e66:	22 5f       	subi	r18, 0xF2	; 242
    2e68:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6a:	fa 01       	movw	r30, r20
    2e6c:	35 83       	std	Z+5, r19	; 0x05
    2e6e:	24 83       	std	Z+4, r18	; 0x04
    2e70:	3f 83       	std	Y+7, r19	; 0x07
    2e72:	2e 83       	std	Y+6, r18	; 0x06
    2e74:	59 96       	adiw	r26, 0x19	; 25
    2e76:	7c 93       	st	X, r23
    2e78:	6e 93       	st	-X, r22
    2e7a:	58 97       	sbiw	r26, 0x18	; 24
    2e7c:	fb 01       	movw	r30, r22
    2e7e:	90 81       	ld	r25, Z
    2e80:	9f 5f       	subi	r25, 0xFF	; 255
    2e82:	90 83       	st	Z, r25
    2e84:	5a 96       	adiw	r26, 0x1a	; 26
    2e86:	2c 91       	ld	r18, X
    2e88:	e0 91 2b 16 	lds	r30, 0x162B	; 0x80162b <pxCurrentTCB>
    2e8c:	f0 91 2c 16 	lds	r31, 0x162C	; 0x80162c <pxCurrentTCB+0x1>
    2e90:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e92:	92 17       	cp	r25, r18
    2e94:	48 f4       	brcc	.+18     	; 0x2ea8 <xTaskGenericNotifyFromISR+0x22c>
    2e96:	c1 14       	cp	r12, r1
    2e98:	d1 04       	cpc	r13, r1
    2e9a:	19 f0       	breq	.+6      	; 0x2ea2 <xTaskGenericNotifyFromISR+0x226>
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	f6 01       	movw	r30, r12
    2ea0:	90 83       	st	Z, r25
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	90 93 75 15 	sts	0x1575, r25	; 0x801575 <xYieldPending>
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	0f 91       	pop	r16
    2eae:	ff 90       	pop	r15
    2eb0:	ef 90       	pop	r14
    2eb2:	df 90       	pop	r13
    2eb4:	cf 90       	pop	r12
    2eb6:	bf 90       	pop	r11
    2eb8:	af 90       	pop	r10
    2eba:	9f 90       	pop	r9
    2ebc:	8f 90       	pop	r8
    2ebe:	08 95       	ret

00002ec0 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	21 f4       	brne	.+8      	; 0x2ecc <xTaskGenericNotifyStateClear+0xc>
    2ec4:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxCurrentTCB>
    2ec8:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	e6 0f       	add	r30, r22
    2ed8:	f7 1f       	adc	r31, r23
    2eda:	23 a9       	ldd	r18, Z+51	; 0x33
    2edc:	22 30       	cpi	r18, 0x02	; 2
    2ede:	31 f4       	brne	.+12     	; 0x2eec <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e6 0f       	add	r30, r22
    2ee4:	f7 1f       	adc	r31, r23
    2ee6:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2eec:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2eee:	0f 90       	pop	r0
    2ef0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2ef2:	08 95       	ret

00002ef4 <prvGetNextExpireTime>:
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	e0 91 37 16 	lds	r30, 0x1637	; 0x801637 <pxCurrentTimerList>
    2efa:	f0 91 38 16 	lds	r31, 0x1638	; 0x801638 <pxCurrentTimerList+0x1>
    2efe:	80 81       	ld	r24, Z
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	81 11       	cpse	r24, r1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9c 93       	st	X, r25
    2f08:	91 11       	cpse	r25, r1
    2f0a:	08 c0       	rjmp	.+16     	; 0x2f1c <prvGetNextExpireTime+0x28>
    2f0c:	07 80       	ldd	r0, Z+7	; 0x07
    2f0e:	f0 85       	ldd	r31, Z+8	; 0x08
    2f10:	e0 2d       	mov	r30, r0
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	08 95       	ret
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	cb 01       	movw	r24, r22
    2f22:	08 95       	ret

00002f24 <prvInsertTimerInActiveList>:
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	fc 01       	movw	r30, r24
    2f32:	42 83       	std	Z+2, r20	; 0x02
    2f34:	53 83       	std	Z+3, r21	; 0x03
    2f36:	64 83       	std	Z+4, r22	; 0x04
    2f38:	75 83       	std	Z+5, r23	; 0x05
    2f3a:	93 87       	std	Z+11, r25	; 0x0b
    2f3c:	82 87       	std	Z+10, r24	; 0x0a
    2f3e:	04 17       	cp	r16, r20
    2f40:	15 07       	cpc	r17, r21
    2f42:	26 07       	cpc	r18, r22
    2f44:	37 07       	cpc	r19, r23
    2f46:	c0 f0       	brcs	.+48     	; 0x2f78 <prvInsertTimerInActiveList+0x54>
    2f48:	0c 19       	sub	r16, r12
    2f4a:	1d 09       	sbc	r17, r13
    2f4c:	2e 09       	sbc	r18, r14
    2f4e:	3f 09       	sbc	r19, r15
    2f50:	86 85       	ldd	r24, Z+14	; 0x0e
    2f52:	97 85       	ldd	r25, Z+15	; 0x0f
    2f54:	a0 89       	ldd	r26, Z+16	; 0x10
    2f56:	b1 89       	ldd	r27, Z+17	; 0x11
    2f58:	08 17       	cp	r16, r24
    2f5a:	19 07       	cpc	r17, r25
    2f5c:	2a 07       	cpc	r18, r26
    2f5e:	3b 07       	cpc	r19, r27
    2f60:	00 f5       	brcc	.+64     	; 0x2fa2 <prvInsertTimerInActiveList+0x7e>
    2f62:	bf 01       	movw	r22, r30
    2f64:	6e 5f       	subi	r22, 0xFE	; 254
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255
    2f68:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <pxOverflowTimerList>
    2f6c:	90 91 36 16 	lds	r25, 0x1636	; 0x801636 <pxOverflowTimerList+0x1>
    2f70:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	18 c0       	rjmp	.+48     	; 0x2fa8 <prvInsertTimerInActiveList+0x84>
    2f78:	0c 15       	cp	r16, r12
    2f7a:	1d 05       	cpc	r17, r13
    2f7c:	2e 05       	cpc	r18, r14
    2f7e:	3f 05       	cpc	r19, r15
    2f80:	28 f4       	brcc	.+10     	; 0x2f8c <prvInsertTimerInActiveList+0x68>
    2f82:	4c 15       	cp	r20, r12
    2f84:	5d 05       	cpc	r21, r13
    2f86:	6e 05       	cpc	r22, r14
    2f88:	7f 05       	cpc	r23, r15
    2f8a:	68 f4       	brcc	.+26     	; 0x2fa6 <prvInsertTimerInActiveList+0x82>
    2f8c:	bf 01       	movw	r22, r30
    2f8e:	6e 5f       	subi	r22, 0xFE	; 254
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255
    2f92:	80 91 37 16 	lds	r24, 0x1637	; 0x801637 <pxCurrentTimerList>
    2f96:	90 91 38 16 	lds	r25, 0x1638	; 0x801638 <pxCurrentTimerList+0x1>
    2f9a:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <prvInsertTimerInActiveList+0x84>
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <prvInsertTimerInActiveList+0x84>
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
    2fb4:	08 95       	ret

00002fb6 <prvCheckForValidListAndQueue>:
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	0f 92       	push	r0
    2fbc:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <xTimerQueue>
    2fc0:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <xTimerQueue+0x1>
    2fc4:	89 2b       	or	r24, r25
    2fc6:	e9 f4       	brne	.+58     	; 0x3002 <prvCheckForValidListAndQueue+0x4c>
    2fc8:	84 e4       	ldi	r24, 0x44	; 68
    2fca:	96 e1       	ldi	r25, 0x16	; 22
    2fcc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    2fd0:	89 e3       	ldi	r24, 0x39	; 57
    2fd2:	96 e1       	ldi	r25, 0x16	; 22
    2fd4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    2fd8:	84 e4       	ldi	r24, 0x44	; 68
    2fda:	96 e1       	ldi	r25, 0x16	; 22
    2fdc:	90 93 38 16 	sts	0x1638, r25	; 0x801638 <pxCurrentTimerList+0x1>
    2fe0:	80 93 37 16 	sts	0x1637, r24	; 0x801637 <pxCurrentTimerList>
    2fe4:	89 e3       	ldi	r24, 0x39	; 57
    2fe6:	96 e1       	ldi	r25, 0x16	; 22
    2fe8:	90 93 36 16 	sts	0x1636, r25	; 0x801636 <pxOverflowTimerList+0x1>
    2fec:	80 93 35 16 	sts	0x1635, r24	; 0x801635 <pxOverflowTimerList>
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	67 e0       	ldi	r22, 0x07	; 7
    2ff4:	8a e0       	ldi	r24, 0x0A	; 10
    2ff6:	0e 94 05 07 	call	0xe0a	; 0xe0a <xQueueGenericCreate>
    2ffa:	90 93 34 16 	sts	0x1634, r25	; 0x801634 <xTimerQueue+0x1>
    2ffe:	80 93 33 16 	sts	0x1633, r24	; 0x801633 <xTimerQueue>
    3002:	0f 90       	pop	r0
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	08 95       	ret

00003008 <xTimerCreateTimerTask>:
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	0f 93       	push	r16
    300e:	d3 df       	rcall	.-90     	; 0x2fb6 <prvCheckForValidListAndQueue>
    3010:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <xTimerQueue>
    3014:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <xTimerQueue+0x1>
    3018:	89 2b       	or	r24, r25
    301a:	91 f0       	breq	.+36     	; 0x3040 <xTimerCreateTimerTask+0x38>
    301c:	0f 2e       	mov	r0, r31
    301e:	f1 e3       	ldi	r31, 0x31	; 49
    3020:	ef 2e       	mov	r14, r31
    3022:	f6 e1       	ldi	r31, 0x16	; 22
    3024:	ff 2e       	mov	r15, r31
    3026:	f0 2d       	mov	r31, r0
    3028:	03 e0       	ldi	r16, 0x03	; 3
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 ec       	ldi	r20, 0xC0	; 192
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	66 ea       	ldi	r22, 0xA6	; 166
    3034:	72 e0       	ldi	r23, 0x02	; 2
    3036:	87 ed       	ldi	r24, 0xD7	; 215
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <xTaskCreate>
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <xTimerCreateTimerTask+0x3a>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	0f 91       	pop	r16
    3044:	ff 90       	pop	r15
    3046:	ef 90       	pop	r14
    3048:	08 95       	ret

0000304a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	27 97       	sbiw	r28, 0x07	; 7
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3072:	e0 91 33 16 	lds	r30, 0x1633	; 0x801633 <xTimerQueue>
    3076:	f0 91 34 16 	lds	r31, 0x1634	; 0x801634 <xTimerQueue+0x1>
    307a:	30 97       	sbiw	r30, 0x00	; 0
    307c:	81 f1       	breq	.+96     	; 0x30de <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    307e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3080:	2a 83       	std	Y+2, r18	; 0x02
    3082:	3b 83       	std	Y+3, r19	; 0x03
    3084:	4c 83       	std	Y+4, r20	; 0x04
    3086:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3088:	9f 83       	std	Y+7, r25	; 0x07
    308a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    308c:	66 30       	cpi	r22, 0x06	; 6
    308e:	f4 f4       	brge	.+60     	; 0x30cc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3090:	c4 db       	rcall	.-2168   	; 0x281a <xTaskGetSchedulerState>
    3092:	82 30       	cpi	r24, 0x02	; 2
    3094:	69 f4       	brne	.+26     	; 0x30b0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3096:	00 e0       	ldi	r16, 0x00	; 0
    3098:	a7 01       	movw	r20, r14
    309a:	96 01       	movw	r18, r12
    309c:	be 01       	movw	r22, r28
    309e:	6f 5f       	subi	r22, 0xFF	; 255
    30a0:	7f 4f       	sbci	r23, 0xFF	; 255
    30a2:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <xTimerQueue>
    30a6:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <xTimerQueue+0x1>
    30aa:	0e 94 28 07 	call	0xe50	; 0xe50 <xQueueGenericSend>
    30ae:	18 c0       	rjmp	.+48     	; 0x30e0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    30b0:	00 e0       	ldi	r16, 0x00	; 0
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	a9 01       	movw	r20, r18
    30b8:	be 01       	movw	r22, r28
    30ba:	6f 5f       	subi	r22, 0xFF	; 255
    30bc:	7f 4f       	sbci	r23, 0xFF	; 255
    30be:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <xTimerQueue>
    30c2:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <xTimerQueue+0x1>
    30c6:	0e 94 28 07 	call	0xe50	; 0xe50 <xQueueGenericSend>
    30ca:	0a c0       	rjmp	.+20     	; 0x30e0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	a8 01       	movw	r20, r16
    30d0:	be 01       	movw	r22, r28
    30d2:	6f 5f       	subi	r22, 0xFF	; 255
    30d4:	7f 4f       	sbci	r23, 0xFF	; 255
    30d6:	cf 01       	movw	r24, r30
    30d8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <xQueueGenericSendFromISR>
    30dc:	01 c0       	rjmp	.+2      	; 0x30e0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    30de:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    30e0:	27 96       	adiw	r28, 0x07	; 7
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	ff 90       	pop	r15
    30f6:	ef 90       	pop	r14
    30f8:	df 90       	pop	r13
    30fa:	cf 90       	pop	r12
    30fc:	bf 90       	pop	r11
    30fe:	af 90       	pop	r10
    3100:	9f 90       	pop	r9
    3102:	8f 90       	pop	r8
    3104:	08 95       	ret

00003106 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    311e:	3b c0       	rjmp	.+118    	; 0x3196 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3120:	07 80       	ldd	r0, Z+7	; 0x07
    3122:	f0 85       	ldd	r31, Z+8	; 0x08
    3124:	e0 2d       	mov	r30, r0
    3126:	80 80       	ld	r8, Z
    3128:	91 80       	ldd	r9, Z+1	; 0x01
    312a:	a2 80       	ldd	r10, Z+2	; 0x02
    312c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    312e:	c0 85       	ldd	r28, Z+8	; 0x08
    3130:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3132:	8e 01       	movw	r16, r28
    3134:	0e 5f       	subi	r16, 0xFE	; 254
    3136:	1f 4f       	sbci	r17, 0xFF	; 255
    3138:	c8 01       	movw	r24, r16
    313a:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    313e:	ec 89       	ldd	r30, Y+20	; 0x14
    3140:	fd 89       	ldd	r31, Y+21	; 0x15
    3142:	ce 01       	movw	r24, r28
    3144:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3146:	8e 89       	ldd	r24, Y+22	; 0x16
    3148:	82 ff       	sbrs	r24, 2
    314a:	25 c0       	rjmp	.+74     	; 0x3196 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    314c:	8e 85       	ldd	r24, Y+14	; 0x0e
    314e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3150:	a8 89       	ldd	r26, Y+16	; 0x10
    3152:	b9 89       	ldd	r27, Y+17	; 0x11
    3154:	88 0d       	add	r24, r8
    3156:	99 1d       	adc	r25, r9
    3158:	aa 1d       	adc	r26, r10
    315a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    315c:	88 16       	cp	r8, r24
    315e:	99 06       	cpc	r9, r25
    3160:	aa 06       	cpc	r10, r26
    3162:	bb 06       	cpc	r11, r27
    3164:	70 f4       	brcc	.+28     	; 0x3182 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3166:	8a 83       	std	Y+2, r24	; 0x02
    3168:	9b 83       	std	Y+3, r25	; 0x03
    316a:	ac 83       	std	Y+4, r26	; 0x04
    316c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    316e:	db 87       	std	Y+11, r29	; 0x0b
    3170:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3172:	b8 01       	movw	r22, r16
    3174:	80 91 37 16 	lds	r24, 0x1637	; 0x801637 <pxCurrentTimerList>
    3178:	90 91 38 16 	lds	r25, 0x1638	; 0x801638 <pxCurrentTimerList+0x1>
    317c:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    3180:	0a c0       	rjmp	.+20     	; 0x3196 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3182:	c1 2c       	mov	r12, r1
    3184:	d1 2c       	mov	r13, r1
    3186:	76 01       	movw	r14, r12
    3188:	00 e0       	ldi	r16, 0x00	; 0
    318a:	10 e0       	ldi	r17, 0x00	; 0
    318c:	a5 01       	movw	r20, r10
    318e:	94 01       	movw	r18, r8
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	ce 01       	movw	r24, r28
    3194:	5a df       	rcall	.-332    	; 0x304a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3196:	e0 91 37 16 	lds	r30, 0x1637	; 0x801637 <pxCurrentTimerList>
    319a:	f0 91 38 16 	lds	r31, 0x1638	; 0x801638 <pxCurrentTimerList+0x1>
    319e:	80 81       	ld	r24, Z
    31a0:	81 11       	cpse	r24, r1
    31a2:	be cf       	rjmp	.-132    	; 0x3120 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    31a4:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <pxOverflowTimerList>
    31a8:	90 91 36 16 	lds	r25, 0x1636	; 0x801636 <pxOverflowTimerList+0x1>
    31ac:	90 93 38 16 	sts	0x1638, r25	; 0x801638 <pxCurrentTimerList+0x1>
    31b0:	80 93 37 16 	sts	0x1637, r24	; 0x801637 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    31b4:	f0 93 36 16 	sts	0x1636, r31	; 0x801636 <pxOverflowTimerList+0x1>
    31b8:	e0 93 35 16 	sts	0x1635, r30	; 0x801635 <pxOverflowTimerList>
    }
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	1f 91       	pop	r17
    31c2:	0f 91       	pop	r16
    31c4:	ff 90       	pop	r15
    31c6:	ef 90       	pop	r14
    31c8:	df 90       	pop	r13
    31ca:	cf 90       	pop	r12
    31cc:	bf 90       	pop	r11
    31ce:	af 90       	pop	r10
    31d0:	9f 90       	pop	r9
    31d2:	8f 90       	pop	r8
    31d4:	08 95       	ret

000031d6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    31d6:	cf 92       	push	r12
    31d8:	df 92       	push	r13
    31da:	ef 92       	push	r14
    31dc:	ff 92       	push	r15
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    31e4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xTaskGetTickCount>
    31e8:	6b 01       	movw	r12, r22
    31ea:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    31ec:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <xLastTime.2436>
    31f0:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <xLastTime.2436+0x1>
    31f4:	a0 91 2f 16 	lds	r26, 0x162F	; 0x80162f <xLastTime.2436+0x2>
    31f8:	b0 91 30 16 	lds	r27, 0x1630	; 0x801630 <xLastTime.2436+0x3>
    31fc:	c8 16       	cp	r12, r24
    31fe:	d9 06       	cpc	r13, r25
    3200:	ea 06       	cpc	r14, r26
    3202:	fb 06       	cpc	r15, r27
    3204:	20 f4       	brcc	.+8      	; 0x320e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3206:	7f df       	rcall	.-258    	; 0x3106 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	88 83       	st	Y, r24
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    320e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3210:	c0 92 2d 16 	sts	0x162D, r12	; 0x80162d <xLastTime.2436>
    3214:	d0 92 2e 16 	sts	0x162E, r13	; 0x80162e <xLastTime.2436+0x1>
    3218:	e0 92 2f 16 	sts	0x162F, r14	; 0x80162f <xLastTime.2436+0x2>
    321c:	f0 92 30 16 	sts	0x1630, r15	; 0x801630 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3220:	c7 01       	movw	r24, r14
    3222:	b6 01       	movw	r22, r12
    3224:	df 91       	pop	r29
    3226:	cf 91       	pop	r28
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	cf 90       	pop	r12
    3230:	08 95       	ret

00003232 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3232:	4f 92       	push	r4
    3234:	5f 92       	push	r5
    3236:	6f 92       	push	r6
    3238:	7f 92       	push	r7
    323a:	8f 92       	push	r8
    323c:	9f 92       	push	r9
    323e:	af 92       	push	r10
    3240:	bf 92       	push	r11
    3242:	cf 92       	push	r12
    3244:	df 92       	push	r13
    3246:	ef 92       	push	r14
    3248:	ff 92       	push	r15
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	4b 01       	movw	r8, r22
    3254:	5c 01       	movw	r10, r24
    3256:	29 01       	movw	r4, r18
    3258:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    325a:	e0 91 37 16 	lds	r30, 0x1637	; 0x801637 <pxCurrentTimerList>
    325e:	f0 91 38 16 	lds	r31, 0x1638	; 0x801638 <pxCurrentTimerList+0x1>
    3262:	07 80       	ldd	r0, Z+7	; 0x07
    3264:	f0 85       	ldd	r31, Z+8	; 0x08
    3266:	e0 2d       	mov	r30, r0
    3268:	c0 85       	ldd	r28, Z+8	; 0x08
    326a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    326c:	ce 01       	movw	r24, r28
    326e:	02 96       	adiw	r24, 0x02	; 2
    3270:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3274:	8e 89       	ldd	r24, Y+22	; 0x16
    3276:	82 ff       	sbrs	r24, 2
    3278:	1b c0       	rjmp	.+54     	; 0x32b0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    327a:	4e 85       	ldd	r20, Y+14	; 0x0e
    327c:	5f 85       	ldd	r21, Y+15	; 0x0f
    327e:	68 89       	ldd	r22, Y+16	; 0x10
    3280:	79 89       	ldd	r23, Y+17	; 0x11
    3282:	48 0d       	add	r20, r8
    3284:	59 1d       	adc	r21, r9
    3286:	6a 1d       	adc	r22, r10
    3288:	7b 1d       	adc	r23, r11
    328a:	75 01       	movw	r14, r10
    328c:	64 01       	movw	r12, r8
    328e:	93 01       	movw	r18, r6
    3290:	82 01       	movw	r16, r4
    3292:	ce 01       	movw	r24, r28
    3294:	47 de       	rcall	.-882    	; 0x2f24 <prvInsertTimerInActiveList>
    3296:	88 23       	and	r24, r24
    3298:	69 f0       	breq	.+26     	; 0x32b4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    329a:	c1 2c       	mov	r12, r1
    329c:	d1 2c       	mov	r13, r1
    329e:	76 01       	movw	r14, r12
    32a0:	00 e0       	ldi	r16, 0x00	; 0
    32a2:	10 e0       	ldi	r17, 0x00	; 0
    32a4:	a5 01       	movw	r20, r10
    32a6:	94 01       	movw	r18, r8
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	ce 01       	movw	r24, r28
    32ac:	ce de       	rcall	.-612    	; 0x304a <xTimerGenericCommand>
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32b0:	8e 7f       	andi	r24, 0xFE	; 254
    32b2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32b4:	ec 89       	ldd	r30, Y+20	; 0x14
    32b6:	fd 89       	ldd	r31, Y+21	; 0x15
    32b8:	ce 01       	movw	r24, r28
    32ba:	19 95       	eicall
    }
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	ff 90       	pop	r15
    32c6:	ef 90       	pop	r14
    32c8:	df 90       	pop	r13
    32ca:	cf 90       	pop	r12
    32cc:	bf 90       	pop	r11
    32ce:	af 90       	pop	r10
    32d0:	9f 90       	pop	r9
    32d2:	8f 90       	pop	r8
    32d4:	7f 90       	pop	r7
    32d6:	6f 90       	pop	r6
    32d8:	5f 90       	pop	r5
    32da:	4f 90       	pop	r4
    32dc:	08 95       	ret

000032de <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    32de:	8f 92       	push	r8
    32e0:	9f 92       	push	r9
    32e2:	af 92       	push	r10
    32e4:	bf 92       	push	r11
    32e6:	cf 92       	push	r12
    32e8:	df 92       	push	r13
    32ea:	ef 92       	push	r14
    32ec:	ff 92       	push	r15
    32ee:	1f 93       	push	r17
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	1f 92       	push	r1
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	6b 01       	movw	r12, r22
    32fc:	7c 01       	movw	r14, r24
    32fe:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3300:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3304:	ce 01       	movw	r24, r28
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	66 df       	rcall	.-308    	; 0x31d6 <prvSampleTimeNow>
    330a:	4b 01       	movw	r8, r22
    330c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	81 11       	cpse	r24, r1
    3312:	2d c0       	rjmp	.+90     	; 0x336e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3314:	11 11       	cpse	r17, r1
    3316:	0d c0       	rjmp	.+26     	; 0x3332 <prvProcessTimerOrBlockTask+0x54>
    3318:	8c 14       	cp	r8, r12
    331a:	9d 04       	cpc	r9, r13
    331c:	ae 04       	cpc	r10, r14
    331e:	bf 04       	cpc	r11, r15
    3320:	40 f0       	brcs	.+16     	; 0x3332 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3322:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3326:	a5 01       	movw	r20, r10
    3328:	94 01       	movw	r18, r8
    332a:	c7 01       	movw	r24, r14
    332c:	b6 01       	movw	r22, r12
    332e:	81 df       	rcall	.-254    	; 0x3232 <prvProcessExpiredTimer>
    3330:	20 c0       	rjmp	.+64     	; 0x3372 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3332:	11 23       	and	r17, r17
    3334:	41 f0       	breq	.+16     	; 0x3346 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3336:	e0 91 35 16 	lds	r30, 0x1635	; 0x801635 <pxOverflowTimerList>
    333a:	f0 91 36 16 	lds	r31, 0x1636	; 0x801636 <pxOverflowTimerList+0x1>
    333e:	80 81       	ld	r24, Z
    3340:	11 e0       	ldi	r17, 0x01	; 1
    3342:	81 11       	cpse	r24, r1
    3344:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3346:	b7 01       	movw	r22, r14
    3348:	a6 01       	movw	r20, r12
    334a:	48 19       	sub	r20, r8
    334c:	59 09       	sbc	r21, r9
    334e:	6a 09       	sbc	r22, r10
    3350:	7b 09       	sbc	r23, r11
    3352:	21 2f       	mov	r18, r17
    3354:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <xTimerQueue>
    3358:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <xTimerQueue+0x1>
    335c:	0e 94 a2 08 	call	0x1144	; 0x1144 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3360:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
    3364:	81 11       	cpse	r24, r1
    3366:	05 c0       	rjmp	.+10     	; 0x3372 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3368:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    336e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
            }
        }
    }
    3372:	0f 90       	pop	r0
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	ff 90       	pop	r15
    337c:	ef 90       	pop	r14
    337e:	df 90       	pop	r13
    3380:	cf 90       	pop	r12
    3382:	bf 90       	pop	r11
    3384:	af 90       	pop	r10
    3386:	9f 90       	pop	r9
    3388:	8f 90       	pop	r8
    338a:	08 95       	ret

0000338c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    338c:	af 92       	push	r10
    338e:	bf 92       	push	r11
    3390:	cf 92       	push	r12
    3392:	df 92       	push	r13
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	28 97       	sbiw	r28, 0x08	; 8
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    33b0:	82 c0       	rjmp	.+260    	; 0x34b6 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	88 23       	and	r24, r24
    33b6:	0c f4       	brge	.+2      	; 0x33ba <prvProcessReceivedCommands+0x2e>
    33b8:	7e c0       	rjmp	.+252    	; 0x34b6 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    33ba:	ae 80       	ldd	r10, Y+6	; 0x06
    33bc:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    33be:	d5 01       	movw	r26, r10
    33c0:	1c 96       	adiw	r26, 0x0c	; 12
    33c2:	8d 91       	ld	r24, X+
    33c4:	9c 91       	ld	r25, X
    33c6:	1d 97       	sbiw	r26, 0x0d	; 13
    33c8:	89 2b       	or	r24, r25
    33ca:	21 f0       	breq	.+8      	; 0x33d4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33cc:	c5 01       	movw	r24, r10
    33ce:	02 96       	adiw	r24, 0x02	; 2
    33d0:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    33d4:	ce 01       	movw	r24, r28
    33d6:	08 96       	adiw	r24, 0x08	; 8
    33d8:	fe de       	rcall	.-516    	; 0x31d6 <prvSampleTimeNow>
    33da:	8b 01       	movw	r16, r22
    33dc:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    33de:	e9 81       	ldd	r30, Y+1	; 0x01
    33e0:	0e 2e       	mov	r0, r30
    33e2:	00 0c       	add	r0, r0
    33e4:	ff 0b       	sbc	r31, r31
    33e6:	ea 30       	cpi	r30, 0x0A	; 10
    33e8:	f1 05       	cpc	r31, r1
    33ea:	08 f0       	brcs	.+2      	; 0x33ee <prvProcessReceivedCommands+0x62>
    33ec:	64 c0       	rjmp	.+200    	; 0x34b6 <prvProcessReceivedCommands+0x12a>
    33ee:	88 27       	eor	r24, r24
    33f0:	ee 58       	subi	r30, 0x8E	; 142
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	8f 4f       	sbci	r24, 0xFF	; 255
    33f6:	0c 94 9c 2c 	jmp	0x5938	; 0x5938 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    33fa:	f5 01       	movw	r30, r10
    33fc:	86 89       	ldd	r24, Z+22	; 0x16
    33fe:	81 60       	ori	r24, 0x01	; 1
    3400:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3402:	ca 80       	ldd	r12, Y+2	; 0x02
    3404:	db 80       	ldd	r13, Y+3	; 0x03
    3406:	ec 80       	ldd	r14, Y+4	; 0x04
    3408:	fd 80       	ldd	r15, Y+5	; 0x05
    340a:	46 85       	ldd	r20, Z+14	; 0x0e
    340c:	57 85       	ldd	r21, Z+15	; 0x0f
    340e:	60 89       	ldd	r22, Z+16	; 0x10
    3410:	71 89       	ldd	r23, Z+17	; 0x11
    3412:	4c 0d       	add	r20, r12
    3414:	5d 1d       	adc	r21, r13
    3416:	6e 1d       	adc	r22, r14
    3418:	7f 1d       	adc	r23, r15
    341a:	c5 01       	movw	r24, r10
    341c:	83 dd       	rcall	.-1274   	; 0x2f24 <prvInsertTimerInActiveList>
    341e:	88 23       	and	r24, r24
    3420:	09 f4       	brne	.+2      	; 0x3424 <prvProcessReceivedCommands+0x98>
    3422:	49 c0       	rjmp	.+146    	; 0x34b6 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3424:	d5 01       	movw	r26, r10
    3426:	54 96       	adiw	r26, 0x14	; 20
    3428:	ed 91       	ld	r30, X+
    342a:	fc 91       	ld	r31, X
    342c:	55 97       	sbiw	r26, 0x15	; 21
    342e:	c5 01       	movw	r24, r10
    3430:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3432:	f5 01       	movw	r30, r10
    3434:	86 89       	ldd	r24, Z+22	; 0x16
    3436:	82 ff       	sbrs	r24, 2
    3438:	3e c0       	rjmp	.+124    	; 0x34b6 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    343a:	4a 81       	ldd	r20, Y+2	; 0x02
    343c:	5b 81       	ldd	r21, Y+3	; 0x03
    343e:	6c 81       	ldd	r22, Y+4	; 0x04
    3440:	7d 81       	ldd	r23, Y+5	; 0x05
    3442:	86 85       	ldd	r24, Z+14	; 0x0e
    3444:	97 85       	ldd	r25, Z+15	; 0x0f
    3446:	a0 89       	ldd	r26, Z+16	; 0x10
    3448:	b1 89       	ldd	r27, Z+17	; 0x11
    344a:	9a 01       	movw	r18, r20
    344c:	ab 01       	movw	r20, r22
    344e:	28 0f       	add	r18, r24
    3450:	39 1f       	adc	r19, r25
    3452:	4a 1f       	adc	r20, r26
    3454:	5b 1f       	adc	r21, r27
    3456:	c1 2c       	mov	r12, r1
    3458:	d1 2c       	mov	r13, r1
    345a:	76 01       	movw	r14, r12
    345c:	00 e0       	ldi	r16, 0x00	; 0
    345e:	10 e0       	ldi	r17, 0x00	; 0
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	c5 01       	movw	r24, r10
    3464:	f2 dd       	rcall	.-1052   	; 0x304a <xTimerGenericCommand>
    3466:	27 c0       	rjmp	.+78     	; 0x34b6 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3468:	d5 01       	movw	r26, r10
    346a:	56 96       	adiw	r26, 0x16	; 22
    346c:	8c 91       	ld	r24, X
    346e:	56 97       	sbiw	r26, 0x16	; 22
    3470:	8e 7f       	andi	r24, 0xFE	; 254
    3472:	56 96       	adiw	r26, 0x16	; 22
    3474:	8c 93       	st	X, r24
                        break;
    3476:	1f c0       	rjmp	.+62     	; 0x34b6 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3478:	f5 01       	movw	r30, r10
    347a:	86 89       	ldd	r24, Z+22	; 0x16
    347c:	81 60       	ori	r24, 0x01	; 1
    347e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3480:	4a 81       	ldd	r20, Y+2	; 0x02
    3482:	5b 81       	ldd	r21, Y+3	; 0x03
    3484:	6c 81       	ldd	r22, Y+4	; 0x04
    3486:	7d 81       	ldd	r23, Y+5	; 0x05
    3488:	46 87       	std	Z+14, r20	; 0x0e
    348a:	57 87       	std	Z+15, r21	; 0x0f
    348c:	60 8b       	std	Z+16, r22	; 0x10
    348e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3490:	40 0f       	add	r20, r16
    3492:	51 1f       	adc	r21, r17
    3494:	62 1f       	adc	r22, r18
    3496:	73 1f       	adc	r23, r19
    3498:	68 01       	movw	r12, r16
    349a:	79 01       	movw	r14, r18
    349c:	c5 01       	movw	r24, r10
    349e:	42 dd       	rcall	.-1404   	; 0x2f24 <prvInsertTimerInActiveList>
                        break;
    34a0:	0a c0       	rjmp	.+20     	; 0x34b6 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    34a2:	f5 01       	movw	r30, r10
    34a4:	86 89       	ldd	r24, Z+22	; 0x16
    34a6:	81 fd       	sbrc	r24, 1
    34a8:	04 c0       	rjmp	.+8      	; 0x34b2 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    34aa:	c5 01       	movw	r24, r10
    34ac:	0e 94 15 04 	call	0x82a	; 0x82a <vPortFree>
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    34b2:	8e 7f       	andi	r24, 0xFE	; 254
    34b4:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	a9 01       	movw	r20, r18
    34bc:	be 01       	movw	r22, r28
    34be:	6f 5f       	subi	r22, 0xFF	; 255
    34c0:	7f 4f       	sbci	r23, 0xFF	; 255
    34c2:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <xTimerQueue>
    34c6:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <xTimerQueue+0x1>
    34ca:	0e 94 13 08 	call	0x1026	; 0x1026 <xQueueReceive>
    34ce:	81 11       	cpse	r24, r1
    34d0:	70 cf       	rjmp	.-288    	; 0x33b2 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    34d2:	28 96       	adiw	r28, 0x08	; 8
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	1f 91       	pop	r17
    34e4:	0f 91       	pop	r16
    34e6:	ff 90       	pop	r15
    34e8:	ef 90       	pop	r14
    34ea:	df 90       	pop	r13
    34ec:	cf 90       	pop	r12
    34ee:	bf 90       	pop	r11
    34f0:	af 90       	pop	r10
    34f2:	08 95       	ret

000034f4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    34f4:	08 95       	ret

000034f6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    34f6:	84 b1       	in	r24, 0x04	; 4
    34f8:	80 68       	ori	r24, 0x80	; 128
    34fa:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    34fc:	85 b1       	in	r24, 0x05	; 5
    34fe:	80 68       	ori	r24, 0x80	; 128
    3500:	85 b9       	out	0x05, r24	; 5
    3502:	08 95       	ret

00003504 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3504:	83 b1       	in	r24, 0x03	; 3
    3506:	80 68       	ori	r24, 0x80	; 128
    3508:	83 b9       	out	0x03, r24	; 3
    350a:	08 95       	ret

0000350c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    350c:	f4 df       	rcall	.-24     	; 0x34f6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    350e:	2f ef       	ldi	r18, 0xFF	; 255
    3510:	80 e7       	ldi	r24, 0x70	; 112
    3512:	92 e0       	ldi	r25, 0x02	; 2
    3514:	21 50       	subi	r18, 0x01	; 1
    3516:	80 40       	sbci	r24, 0x00	; 0
    3518:	90 40       	sbci	r25, 0x00	; 0
    351a:	e1 f7       	brne	.-8      	; 0x3514 <vApplicationMallocFailedHook+0x8>
    351c:	00 c0       	rjmp	.+0      	; 0x351e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    351e:	00 00       	nop
    3520:	f1 df       	rcall	.-30     	; 0x3504 <prvBlinkMainLed>
    3522:	f5 cf       	rjmp	.-22     	; 0x350e <vApplicationMallocFailedHook+0x2>

00003524 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3524:	e8 df       	rcall	.-48     	; 0x34f6 <prvSetMainLedOn>
    3526:	2f ef       	ldi	r18, 0xFF	; 255
    3528:	87 ea       	ldi	r24, 0xA7	; 167
    352a:	91 e6       	ldi	r25, 0x61	; 97
    352c:	21 50       	subi	r18, 0x01	; 1
    352e:	80 40       	sbci	r24, 0x00	; 0
    3530:	90 40       	sbci	r25, 0x00	; 0
    3532:	e1 f7       	brne	.-8      	; 0x352c <vApplicationStackOverflowHook+0x8>
    3534:	00 c0       	rjmp	.+0      	; 0x3536 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3536:	00 00       	nop
    3538:	e5 df       	rcall	.-54     	; 0x3504 <prvBlinkMainLed>
    353a:	f5 cf       	rjmp	.-22     	; 0x3526 <vApplicationStackOverflowHook+0x2>

0000353c <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    353c:	86 e0       	ldi	r24, 0x06	; 6
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <pvPortMalloc>
    3544:	90 93 bb 17 	sts	0x17BB, r25	; 0x8017bb <packet+0x1>
    3548:	80 93 ba 17 	sts	0x17BA, r24	; 0x8017ba <packet>
	
	if (NULL == packet){
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	69 f0       	breq	.+26     	; 0x356a <SensorDataPackage_create+0x2e>
		return NULL;
	}
	packet->co2Ppm=0;
    3550:	fc 01       	movw	r30, r24
    3552:	11 82       	std	Z+1, r1	; 0x01
    3554:	10 82       	st	Z, r1
	packet->humidityData=0;
    3556:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <packet>
    355a:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <packet+0x1>
    355e:	fc 01       	movw	r30, r24
    3560:	15 82       	std	Z+5, r1	; 0x05
    3562:	14 82       	std	Z+4, r1	; 0x04
	packet->temperatureData=0;
    3564:	13 82       	std	Z+3, r1	; 0x03
    3566:	12 82       	std	Z+2, r1	; 0x02
	
	return packet;
    3568:	08 95       	ret

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
	
	if (NULL == packet){
		return NULL;
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
	packet->co2Ppm=0;
	packet->humidityData=0;
	packet->temperatureData=0;
	
	return packet;
}
    356e:	08 95       	ret

00003570 <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3570:	e0 91 ba 17 	lds	r30, 0x17BA	; 0x8017ba <packet>
    3574:	f0 91 bb 17 	lds	r31, 0x17BB	; 0x8017bb <packet+0x1>
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
    357c:	08 95       	ret

0000357e <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    357e:	e0 91 ba 17 	lds	r30, 0x17BA	; 0x8017ba <packet>
    3582:	f0 91 bb 17 	lds	r31, 0x17BB	; 0x8017bb <packet+0x1>
    3586:	93 83       	std	Z+3, r25	; 0x03
    3588:	82 83       	std	Z+2, r24	; 0x02
    358a:	08 95       	ret

0000358c <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    358c:	e0 91 ba 17 	lds	r30, 0x17BA	; 0x8017ba <packet>
    3590:	f0 91 bb 17 	lds	r31, 0x17BB	; 0x8017bb <packet+0x1>
    3594:	95 83       	std	Z+5, r25	; 0x05
    3596:	84 83       	std	Z+4, r24	; 0x04
    3598:	08 95       	ret

0000359a <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    359a:	ef e4       	ldi	r30, 0x4F	; 79
    359c:	f6 e1       	ldi	r31, 0x16	; 22
    359e:	26 e0       	ldi	r18, 0x06	; 6
    35a0:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    35a2:	60 83       	st	Z, r22
	
	

	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    35a4:	a0 91 ba 17 	lds	r26, 0x17BA	; 0x8017ba <packet>
    35a8:	b0 91 bb 17 	lds	r27, 0x17BB	; 0x8017bb <packet+0x1>
    35ac:	2c 91       	ld	r18, X
    35ae:	11 96       	adiw	r26, 0x01	; 1
    35b0:	3c 91       	ld	r19, X
    35b2:	11 97       	sbiw	r26, 0x01	; 1
    35b4:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    35b6:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    35b8:	12 96       	adiw	r26, 0x02	; 2
    35ba:	2c 91       	ld	r18, X
    35bc:	12 97       	sbiw	r26, 0x02	; 2
    35be:	13 96       	adiw	r26, 0x03	; 3
    35c0:	3c 91       	ld	r19, X
    35c2:	13 97       	sbiw	r26, 0x03	; 3
    35c4:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    35c6:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    35c8:	14 96       	adiw	r26, 0x04	; 4
    35ca:	2c 91       	ld	r18, X
    35cc:	14 97       	sbiw	r26, 0x04	; 4
    35ce:	15 96       	adiw	r26, 0x05	; 5
    35d0:	3c 91       	ld	r19, X
    35d2:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    35d4:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    35d6:	26 e1       	ldi	r18, 0x16	; 22
    35d8:	dc 01       	movw	r26, r24
    35da:	01 90       	ld	r0, Z+
    35dc:	0d 92       	st	X+, r0
    35de:	2a 95       	dec	r18
    35e0:	e1 f7       	brne	.-8      	; 0x35da <getLoRaPayload+0x40>
	};
    35e2:	08 95       	ret

000035e4 <Temp_Humidty_sensor_create>:
}Temp_Humidity_Sensor;

//-------Constructor-------------------

void Temp_Humidty_sensor_create(EventGroupHandle_t event1,EventGroupHandle_t event2)
{
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	8c 01       	movw	r16, r24
    35ee:	eb 01       	movw	r28, r22
	temperature_humdity_sensor_t new_temperature_humidty = pvPortMalloc(sizeof(Temp_Humidity_Sensor));
    35f0:	88 e0       	ldi	r24, 0x08	; 8
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <pvPortMalloc>
	if(NULL == new_temperature_humidty)
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	09 f1       	breq	.+66     	; 0x363e <Temp_Humidty_sensor_create+0x5a>
	{
		return NULL;
	}
	_meassureEventGroup=event1;
    35fc:	10 93 bd 17 	sts	0x17BD, r17	; 0x8017bd <_meassureEventGroup+0x1>
    3600:	00 93 bc 17 	sts	0x17BC, r16	; 0x8017bc <_meassureEventGroup>
	_dataReadyEventGroup=event2;
    3604:	d0 93 bf 17 	sts	0x17BF, r29	; 0x8017bf <_dataReadyEventGroup+0x1>
    3608:	c0 93 be 17 	sts	0x17BE, r28	; 0x8017be <_dataReadyEventGroup>
	new_temperature_humidty->humidity_data=humidity;
    360c:	40 91 65 16 	lds	r20, 0x1665	; 0x801665 <humidity>
    3610:	50 91 66 16 	lds	r21, 0x1666	; 0x801666 <humidity+0x1>
    3614:	60 91 67 16 	lds	r22, 0x1667	; 0x801667 <humidity+0x2>
    3618:	70 91 68 16 	lds	r23, 0x1668	; 0x801668 <humidity+0x3>
    361c:	fc 01       	movw	r30, r24
    361e:	44 83       	std	Z+4, r20	; 0x04
    3620:	55 83       	std	Z+5, r21	; 0x05
    3622:	66 83       	std	Z+6, r22	; 0x06
    3624:	77 83       	std	Z+7, r23	; 0x07
	new_temperature_humidty->temperature_data=temperature;
    3626:	40 91 69 16 	lds	r20, 0x1669	; 0x801669 <temperature>
    362a:	50 91 6a 16 	lds	r21, 0x166A	; 0x80166a <temperature+0x1>
    362e:	60 91 6b 16 	lds	r22, 0x166B	; 0x80166b <temperature+0x2>
    3632:	70 91 6c 16 	lds	r23, 0x166C	; 0x80166c <temperature+0x3>
    3636:	40 83       	st	Z, r20
    3638:	51 83       	std	Z+1, r21	; 0x01
    363a:	62 83       	std	Z+2, r22	; 0x02
    363c:	73 83       	std	Z+3, r23	; 0x03
	
}
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	08 95       	ret

00003648 <get_temperature_data>:
//------Get temperature data-----------

uint16_t get_temperature_data()
{
		return (uint16_t)temperature;
    3648:	60 91 69 16 	lds	r22, 0x1669	; 0x801669 <temperature>
    364c:	70 91 6a 16 	lds	r23, 0x166A	; 0x80166a <temperature+0x1>
    3650:	80 91 6b 16 	lds	r24, 0x166B	; 0x80166b <temperature+0x2>
    3654:	90 91 6c 16 	lds	r25, 0x166C	; 0x80166c <temperature+0x3>
    3658:	c7 d2       	rcall	.+1422   	; 0x3be8 <__fixunssfsi>
}
    365a:	cb 01       	movw	r24, r22
    365c:	08 95       	ret

0000365e <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
		return (uint16_t)humidity;	
    365e:	60 91 65 16 	lds	r22, 0x1665	; 0x801665 <humidity>
    3662:	70 91 66 16 	lds	r23, 0x1666	; 0x801666 <humidity+0x1>
    3666:	80 91 67 16 	lds	r24, 0x1667	; 0x801667 <humidity+0x2>
    366a:	90 91 68 16 	lds	r25, 0x1668	; 0x801668 <humidity+0x3>
    366e:	bc d2       	rcall	.+1400   	; 0x3be8 <__fixunssfsi>
}
    3670:	cb 01       	movw	r24, r22
    3672:	08 95       	ret

00003674 <tempHum_init>:
TickType_t xLastWakeTime;
TickType_t xFrequency;

/* Task to run for the sensors to work */
void tempHum_init() {
	if ( HIH8120_OK == hih8120_initialise() )
    3674:	3b d3       	rcall	.+1654   	; 0x3cec <hih8120_initialise>
    3676:	88 23       	and	r24, r24
    3678:	41 f0       	breq	.+16     	; 0x368a <tempHum_init+0x16>
	{
		// Driver initialized OK
		// Always check what hih8120_initialise() returns
	}	else printf("Driver doesn't start");
    367a:	8e ea       	ldi	r24, 0xAE	; 174
    367c:	92 e0       	ldi	r25, 0x02	; 2
    367e:	9f 93       	push	r25
    3680:	8f 93       	push	r24
    3682:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	08 95       	ret

0000368c <tempHum_getDataFromTempHumSensorTask>:
	
	for(;;)
	{
		
		//Wait for Event bits to be set in Group
		event_measure = xEventGroupWaitBits(
    368c:	cc 24       	eor	r12, r12
    368e:	ca 94       	dec	r12
    3690:	dc 2c       	mov	r13, r12
    3692:	76 01       	movw	r14, r12
    3694:	01 e0       	ldi	r16, 0x01	; 1
    3696:	21 e0       	ldi	r18, 0x01	; 1
    3698:	42 e0       	ldi	r20, 0x02	; 2
    369a:	50 e0       	ldi	r21, 0x00	; 0
    369c:	60 e0       	ldi	r22, 0x00	; 0
    369e:	70 e0       	ldi	r23, 0x00	; 0
    36a0:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <_meassureEventGroup>
    36a4:	90 91 bd 17 	lds	r25, 0x17BD	; 0x8017bd <_meassureEventGroup+0x1>
    36a8:	0e 94 cb 01 	call	0x396	; 0x396 <xEventGroupWaitBits>
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		 
		
		if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    36ac:	61 ff       	sbrs	r22, 1
    36ae:	4e c0       	rjmp	.+156    	; 0x374c <tempHum_getDataFromTempHumSensorTask+0xc0>
		{
			
			vTaskDelay( pdMS_TO_TICKS(100UL));
    36b0:	66 e0       	ldi	r22, 0x06	; 6
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    36bc:	2f d3       	rcall	.+1630   	; 0x3d1c <hih8120_wakeup>
    36be:	88 23       	and	r24, r24
    36c0:	c1 f0       	breq	.+48     	; 0x36f2 <tempHum_getDataFromTempHumSensorTask+0x66>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    36c2:	66 e0       	ldi	r22, 0x06	; 6
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    36ce:	83 ec       	ldi	r24, 0xC3	; 195
    36d0:	92 e0       	ldi	r25, 0x02	; 2
    36d2:	9f 93       	push	r25
    36d4:	8f 93       	push	r24
    36d6:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
			while(HIH8120_OK == hih8120_wakeup())
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	06 c0       	rjmp	.+12     	; 0x36ec <tempHum_getDataFromTempHumSensorTask+0x60>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    36e0:	63 e0       	ldi	r22, 0x03	; 3
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    36ec:	17 d3       	rcall	.+1582   	; 0x3d1c <hih8120_wakeup>
    36ee:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    36f0:	b9 f3       	breq	.-18     	; 0x36e0 <tempHum_getDataFromTempHumSensorTask+0x54>
    36f2:	29 d3       	rcall	.+1618   	; 0x3d46 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(50UL));
    36f4:	63 e0       	ldi	r22, 0x03	; 3
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    3700:	22 d3       	rcall	.+1604   	; 0x3d46 <hih8120_measure>
    3702:	81 11       	cpse	r24, r1
    3704:	c3 cf       	rjmp	.-122    	; 0x368c <tempHum_getDataFromTempHumSensorTask>
		{
		
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3706:	66 e0       	ldi	r22, 0x06	; 6
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
			humidity =  hih8120_getHumidity();
    3712:	2a d3       	rcall	.+1620   	; 0x3d68 <hih8120_getHumidity>
    3714:	60 93 65 16 	sts	0x1665, r22	; 0x801665 <humidity>
    3718:	70 93 66 16 	sts	0x1666, r23	; 0x801666 <humidity+0x1>
    371c:	80 93 67 16 	sts	0x1667, r24	; 0x801667 <humidity+0x2>
    3720:	90 93 68 16 	sts	0x1668, r25	; 0x801668 <humidity+0x3>
			temperature = hih8120_getTemperature();
    3724:	36 d3       	rcall	.+1644   	; 0x3d92 <hih8120_getTemperature>
    3726:	60 93 69 16 	sts	0x1669, r22	; 0x801669 <temperature>
    372a:	70 93 6a 16 	sts	0x166A, r23	; 0x80166a <temperature+0x1>
    372e:	80 93 6b 16 	sts	0x166B, r24	; 0x80166b <temperature+0x2>
    3732:	90 93 6c 16 	sts	0x166C, r25	; 0x80166c <temperature+0x3>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3736:	41 e0       	ldi	r20, 0x01	; 1
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	70 e0       	ldi	r23, 0x00	; 0
    373e:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_dataReadyEventGroup>
    3742:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_dataReadyEventGroup+0x1>
    3746:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <xEventGroupSetBits>
    374a:	a0 cf       	rjmp	.-192    	; 0x368c <tempHum_getDataFromTempHumSensorTask>
			
		}
	}	
		else{
			puts("hahah");
    374c:	8d ef       	ldi	r24, 0xFD	; 253
    374e:	92 e0       	ldi	r25, 0x02	; 2
    3750:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
    3754:	9b cf       	rjmp	.-202    	; 0x368c <tempHum_getDataFromTempHumSensorTask>

00003756 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{	puts("Try to join");
    3756:	0f 93       	push	r16
    3758:	1f 93       	push	r17
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	64 97       	sbiw	r28, 0x14	; 20
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	83 e0       	ldi	r24, 0x03	; 3
    3770:	93 e0       	ldi	r25, 0x03	; 3
    3772:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	0e 94 9c 28 	call	0x5138	; 0x5138 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    377c:	92 d4       	rcall	.+2340   	; 0x40a2 <lora_driver_rn2483FactoryReset>
    377e:	0e d7       	rcall	.+3612   	; 0x459c <lora_driver_mapReturnCodeToText>
    3780:	9f 93       	push	r25
    3782:	8f 93       	push	r24
    3784:	8f e0       	ldi	r24, 0x0F	; 15
    3786:	93 e0       	ldi	r25, 0x03	; 3
    3788:	9f 93       	push	r25
    378a:	8f 93       	push	r24
    378c:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3790:	06 d6       	rcall	.+3084   	; 0x439e <lora_driver_configureToEu868>
    3792:	04 d7       	rcall	.+3592   	; 0x459c <lora_driver_mapReturnCodeToText>
    3794:	9f 93       	push	r25
    3796:	8f 93       	push	r24
    3798:	82 e2       	ldi	r24, 0x22	; 34
    379a:	93 e0       	ldi	r25, 0x03	; 3
    379c:	9f 93       	push	r25
    379e:	8f 93       	push	r24
    37a0:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
    37a4:	8b e3       	ldi	r24, 0x3B	; 59
    37a6:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join1");
    37a8:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
    37ac:	8e 01       	movw	r16, r28
    37ae:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	c8 01       	movw	r24, r16
    37b4:	88 d4       	rcall	.+2320   	; 0x40c6 <lora_driver_getRn2483Hweui>
    37b6:	f2 d6       	rcall	.+3556   	; 0x459c <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    37b8:	1f 93       	push	r17
    37ba:	0f 93       	push	r16
    37bc:	9f 93       	push	r25
    37be:	8f 93       	push	r24
    37c0:	88 e4       	ldi	r24, 0x48	; 72
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	9f 93       	push	r25
    37c6:	8f 93       	push	r24
    37c8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    37cc:	c8 01       	movw	r24, r16
    37ce:	97 d4       	rcall	.+2350   	; 0x40fe <lora_driver_setDeviceIdentifier>
    37d0:	e5 d6       	rcall	.+3530   	; 0x459c <lora_driver_mapReturnCodeToText>
    37d2:	9f 93       	push	r25
    37d4:	8f 93       	push	r24
    37d6:	1f 93       	push	r17
    37d8:	0f 93       	push	r16
    37da:	8c e5       	ldi	r24, 0x5C	; 92
    37dc:	93 e0       	ldi	r25, 0x03	; 3
    37de:	9f 93       	push	r25
    37e0:	8f 93       	push	r24
    37e2:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
    37e6:	81 e7       	ldi	r24, 0x71	; 113
    37e8:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join2");
    37ea:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    37ee:	a8 01       	movw	r20, r16
    37f0:	6e e7       	ldi	r22, 0x7E	; 126
    37f2:	73 e0       	ldi	r23, 0x03	; 3
    37f4:	8f e9       	ldi	r24, 0x9F	; 159
    37f6:	93 e0       	ldi	r25, 0x03	; 3
    37f8:	b0 d6       	rcall	.+3424   	; 0x455a <lora_driver_setOtaaIdentity>
    37fa:	d0 d6       	rcall	.+3488   	; 0x459c <lora_driver_mapReturnCodeToText>
    37fc:	9f 93       	push	r25
    37fe:	8f 93       	push	r24
    3800:	1f 93       	push	r17
    3802:	0f 93       	push	r16
    3804:	8e e7       	ldi	r24, 0x7E	; 126
    3806:	93 e0       	ldi	r25, 0x03	; 3
    3808:	9f 93       	push	r25
    380a:	8f 93       	push	r24
    380c:	8f e9       	ldi	r24, 0x9F	; 159
    380e:	93 e0       	ldi	r25, 0x03	; 3
    3810:	9f 93       	push	r25
    3812:	8f 93       	push	r24
    3814:	80 eb       	ldi	r24, 0xB0	; 176
    3816:	93 e0       	ldi	r25, 0x03	; 3
    3818:	9f 93       	push	r25
    381a:	8f 93       	push	r24
    381c:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3820:	a1 d4       	rcall	.+2370   	; 0x4164 <lora_driver_saveMac>
    3822:	bc d6       	rcall	.+3448   	; 0x459c <lora_driver_mapReturnCodeToText>
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	86 ee       	ldi	r24, 0xE6	; 230
    382a:	93 e0       	ldi	r25, 0x03	; 3
    382c:	9f 93       	push	r25
    382e:	8f 93       	push	r24
    3830:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	8b d5       	rcall	.+2838   	; 0x4358 <lora_driver_setAdaptiveDataRate>
    3842:	ac d6       	rcall	.+3416   	; 0x459c <lora_driver_mapReturnCodeToText>
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	85 ef       	ldi	r24, 0xF5	; 245
    384a:	93 e0       	ldi	r25, 0x03	; 3
    384c:	9f 93       	push	r25
    384e:	8f 93       	push	r24
    3850:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
	puts("Try to join3");
    3854:	86 e1       	ldi	r24, 0x16	; 22
    3856:	94 e0       	ldi	r25, 0x04	; 4
    3858:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    385c:	84 ef       	ldi	r24, 0xF4	; 244
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	86 d5       	rcall	.+2828   	; 0x436e <lora_driver_setReceiveDelay>
    3862:	9c d6       	rcall	.+3384   	; 0x459c <lora_driver_mapReturnCodeToText>
    3864:	9f 93       	push	r25
    3866:	8f 93       	push	r24
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	8f 93       	push	r24
    386c:	84 ef       	ldi	r24, 0xF4	; 244
    386e:	8f 93       	push	r24
    3870:	83 e2       	ldi	r24, 0x23	; 35
    3872:	94 e0       	ldi	r25, 0x04	; 4
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	puts("Try to join");
    387c:	83 e0       	ldi	r24, 0x03	; 3
    387e:	93 e0       	ldi	r25, 0x03	; 3
    3880:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
	puts("Try to join3");
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    388e:	1a e0       	ldi	r17, 0x0A	; 10
	
	puts("Try to join");
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	6e d4       	rcall	.+2268   	; 0x4170 <lora_driver_join>
    3894:	08 2f       	mov	r16, r24
    3896:	82 d6       	rcall	.+3332   	; 0x459c <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3898:	9f 93       	push	r25
    389a:	8f 93       	push	r24
    389c:	1f 92       	push	r1
    389e:	1f 93       	push	r17
    38a0:	83 e4       	ldi	r24, 0x43	; 67
    38a2:	94 e0       	ldi	r25, 0x04	; 4
    38a4:	9f 93       	push	r25
    38a6:	8f 93       	push	r24
    38a8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	08 30       	cpi	r16, 0x08	; 8
    38ba:	59 f0       	breq	.+22     	; 0x38d2 <uplink_lora_setup+0x17c>
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	0e 94 00 29 	call	0x5200	; 0x5200 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    38c2:	66 e3       	ldi	r22, 0x36	; 54
    38c4:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
    38ce:	11 50       	subi	r17, 0x01	; 1
    38d0:	f9 f6       	brne	.-66     	; 0x3890 <uplink_lora_setup+0x13a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    38d2:	08 30       	cpi	r16, 0x08	; 8
    38d4:	21 f4       	brne	.+8      	; 0x38de <uplink_lora_setup+0x188>

	if (rc == LORA_ACCEPTED)
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    38dc:	0d c0       	rjmp	.+26     	; 0x38f8 <uplink_lora_setup+0x1a2>
    38de:	83 e6       	ldi	r24, 0x63	; 99
		while (1)
		{
			taskYIELD();
		}
	}
}
    38e0:	94 e0       	ldi	r25, 0x04	; 4
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    38e2:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	0e 94 bf 28 	call	0x517e	; 0x517e <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    38f2:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    38f6:	fd cf       	rjmp	.-6      	; 0x38f2 <uplink_lora_setup+0x19c>
    38f8:	64 96       	adiw	r28, 0x14	; 20
    38fa:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	08 95       	ret

0000390e <upLink_create>:
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority, MessageBufferHandle_t mBuffer)
{
    3912:	0f 93       	push	r16
    3914:	9b 01       	movw	r18, r22
	messageBuffer = mBuffer;
    3916:	70 93 6e 16 	sts	0x166E, r23	; 0x80166e <messageBuffer+0x1>
    391a:	60 93 6d 16 	sts	0x166D, r22	; 0x80166d <messageBuffer>
	
	xTaskCreate(
    391e:	e1 2c       	mov	r14, r1
    3920:	f1 2c       	mov	r15, r1
    3922:	08 2f       	mov	r16, r24
    3924:	48 e8       	ldi	r20, 0x88	; 136
    3926:	51 e0       	ldi	r21, 0x01	; 1
    3928:	6e e6       	ldi	r22, 0x6E	; 110
    392a:	74 e0       	ldi	r23, 0x04	; 4
    392c:	8c ef       	ldi	r24, 0xFC	; 252
    392e:	9c e1       	ldi	r25, 0x1C	; 28
    3930:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)mBuffer,
	priority,
	NULL );
}
    3934:	0f 91       	pop	r16
    3936:	ff 90       	pop	r15
    3938:	ef 90       	pop	r14
    393a:	08 95       	ret

0000393c <lora_Handler_task>:
}



void lora_Handler_task()
{
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	00 d0       	rcall	.+0      	; 0x3942 <lora_Handler_task+0x6>
    3942:	1f 92       	push	r1
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	9d d3       	rcall	.+1850   	; 0x4086 <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    394c:	62 e0       	ldi	r22, 0x02	; 2
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	95 d3       	rcall	.+1834   	; 0x4086 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    395c:	66 e9       	ldi	r22, 0x96	; 150
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
	puts("Start1");
    3968:	89 e7       	ldi	r24, 0x79	; 121
    396a:	94 e0       	ldi	r25, 0x04	; 4
    396c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3970:	43 d3       	rcall	.+1670   	; 0x3ff8 <lora_driver_flushBuffers>
	uplink_lora_setup();
    3972:	f1 de       	rcall	.-542    	; 0x3756 <uplink_lora_setup>
    3974:	ef e6       	ldi	r30, 0x6F	; 111
	_uplink_payload.len = 6;
    3976:	f6 e1       	ldi	r31, 0x16	; 22
    3978:	86 e0       	ldi	r24, 0x06	; 6
    397a:	81 83       	std	Z+1, r24	; 0x01
    397c:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    397e:	80 83       	st	Z, r24
    3980:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3984:	69 83       	std	Y+1, r22	; 0x01
    3986:	7a 83       	std	Y+2, r23	; 0x02
    3988:	8b 83       	std	Y+3, r24	; 0x03
    398a:	9c 83       	std	Y+4, r25	; 0x04
    398c:	80 e8       	ldi	r24, 0x80	; 128
	
	size_t xBytesSent;
	
	puts("Waiting");
    398e:	94 e0       	ldi	r25, 0x04	; 4
    3990:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
    3994:	0f ef       	ldi	r16, 0xFF	; 255
	xBytesSent = xMessageBufferReceive(
    3996:	1f ef       	ldi	r17, 0xFF	; 255
    3998:	98 01       	movw	r18, r16
    399a:	46 e1       	ldi	r20, 0x16	; 22
    399c:	50 e0       	ldi	r21, 0x00	; 0
    399e:	6f e6       	ldi	r22, 0x6F	; 111
    39a0:	76 e1       	ldi	r23, 0x16	; 22
    39a2:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <messageBuffer>
    39a6:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <messageBuffer+0x1>
    39aa:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    39ae:	8c 01       	movw	r16, r24
    39b0:	88 e8       	ldi	r24, 0x88	; 136
	messageBuffer,
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(lora_driver_payload_t),	// Size of object
	portMAX_DELAY);			// Block until space in buffer

	puts("Received");
    39b2:	94 e0       	ldi	r25, 0x04	; 4
    39b4:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
    39b8:	44 e4       	ldi	r20, 0x44	; 68
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    39ba:	57 e0       	ldi	r21, 0x07	; 7
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	ce 01       	movw	r24, r28
    39c2:	01 96       	adiw	r24, 0x01	; 1
    39c4:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskDelayUntil>
    39c8:	01 15       	cp	r16, r1
		
		if (xBytesSent>0)
    39ca:	11 05       	cpc	r17, r1
    39cc:	a9 f3       	breq	.-22     	; 0x39b8 <lora_Handler_task+0x7c>
    39ce:	83 e0       	ldi	r24, 0x03	; 3
		{
			//strcpy(_uplink_payload.bytes, xBytesSent);
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    39d0:	0e 94 12 29 	call	0x5224	; 0x5224 <status_leds_shortPuls>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    39d4:	6f e6       	ldi	r22, 0x6F	; 111
    39d6:	76 e1       	ldi	r23, 0x16	; 22
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	f3 d3       	rcall	.+2022   	; 0x41c2 <lora_driver_sendUploadMessage>
    39dc:	df d5       	rcall	.+3006   	; 0x459c <lora_driver_mapReturnCodeToText>
    39de:	9f 93       	push	r25
    39e0:	8f 93       	push	r24
    39e2:	81 e9       	ldi	r24, 0x91	; 145
    39e4:	94 e0       	ldi	r25, 0x04	; 4
    39e6:	9f 93       	push	r25
    39e8:	8f 93       	push	r24
    39ea:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	e0 cf       	rjmp	.-64     	; 0x39b8 <lora_Handler_task+0x7c>

000039f8 <upLinkHandler_StartTask>:
    39f8:	a1 df       	rcall	.-190    	; 0x393c <lora_Handler_task>

000039fa <Temperature_Humidity_Task>:
//
///*-----------------------------------------------------------*/


void Temperature_Humidity_Task( void *pvParameters )
{
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
    39fe:	ec 01       	movw	r28, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms
	//
	//// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3a00:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xTaskGetTickCount>
		
		tempHum_getDataFromTempHumSensorTask(pvParameters);
    3a04:	ce 01       	movw	r24, r28
    3a06:	42 de       	rcall	.-892    	; 0x368c <tempHum_getDataFromTempHumSensorTask>
		
		
	
}
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	08 95       	ret

00003a0e <Application_Task>:
/*-----------------------------------------------------------*/
void Application_Task(void* pvParameters)
{
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	ac 97       	sbiw	r28, 0x2c	; 44
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
	EventBits_t dataReadyEventBits;
	
	
	for (;;)
	{
		xEventGroupSetBits(measureEventGroup,ALL_READY_BITS);
    3a22:	42 e0       	ldi	r20, 0x02	; 2
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	60 e0       	ldi	r22, 0x00	; 0
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <measureEventGroup>
    3a2e:	90 91 c3 17 	lds	r25, 0x17C3	; 0x8017c3 <measureEventGroup+0x1>
    3a32:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <xEventGroupSetBits>
		dataReadyEventBits=xEventGroupWaitBits(dataReadyEventGroup,ALL_MEASURE_BITS,pdTRUE,pdFALSE,portMAX_DELAY);
    3a36:	cc 24       	eor	r12, r12
    3a38:	ca 94       	dec	r12
    3a3a:	dc 2c       	mov	r13, r12
    3a3c:	76 01       	movw	r14, r12
    3a3e:	00 e0       	ldi	r16, 0x00	; 0
    3a40:	21 e0       	ldi	r18, 0x01	; 1
    3a42:	41 e0       	ldi	r20, 0x01	; 1
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dataReadyEventGroup>
    3a4e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dataReadyEventGroup+0x1>
    3a52:	0e 94 cb 01 	call	0x396	; 0x396 <xEventGroupWaitBits>
		if ((dataReadyEventBits & ALL_MEASURE_BITS  )==ALL_MEASURE_BITS)
    3a56:	60 ff       	sbrs	r22, 0
    3a58:	1e c0       	rjmp	.+60     	; 0x3a96 <Application_Task+0x88>
		{
			setCO2Ppm(1050);
    3a5a:	8a e1       	ldi	r24, 0x1A	; 26
    3a5c:	94 e0       	ldi	r25, 0x04	; 4
    3a5e:	88 dd       	rcall	.-1264   	; 0x3570 <setCO2Ppm>
			setTemperatureData(get_temperature_data());
    3a60:	f3 dd       	rcall	.-1050   	; 0x3648 <get_temperature_data>
    3a62:	8d dd       	rcall	.-1254   	; 0x357e <setTemperatureData>
			printf("Task data %d",get_temperature_data());
    3a64:	f1 dd       	rcall	.-1054   	; 0x3648 <get_temperature_data>
    3a66:	9f 93       	push	r25
    3a68:	8f 93       	push	r24
    3a6a:	87 ea       	ldi	r24, 0xA7	; 167
    3a6c:	94 e0       	ldi	r25, 0x04	; 4
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
			setHumidityData(get_humidity_data());
    3a76:	f3 dd       	rcall	.-1050   	; 0x365e <get_humidity_data>
    3a78:	89 dd       	rcall	.-1262   	; 0x358c <setHumidityData>
    3a7a:	f1 dd       	rcall	.-1054   	; 0x365e <get_humidity_data>
			printf(" Task data %d",get_humidity_data());
    3a7c:	9f 93       	push	r25
    3a7e:	8f 93       	push	r24
    3a80:	86 ea       	ldi	r24, 0xA6	; 166
    3a82:	94 e0       	ldi	r25, 0x04	; 4
    3a84:	9f 93       	push	r25
    3a86:	8f 93       	push	r24
    3a88:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <printf>
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	62 e0       	ldi	r22, 0x02	; 2
		}

		payload=getLoRaPayload((uint8_t)2);
    3a98:	ce 01       	movw	r24, r28
    3a9a:	47 96       	adiw	r24, 0x17	; 23
    3a9c:	7e dd       	rcall	.-1284   	; 0x359a <getLoRaPayload>
    3a9e:	86 e1       	ldi	r24, 0x16	; 22
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	77 96       	adiw	r30, 0x17	; 23
    3aa4:	de 01       	movw	r26, r28
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	01 90       	ld	r0, Z+
    3aaa:	0d 92       	st	X+, r0
    3aac:	8a 95       	dec	r24
    3aae:	e1 f7       	brne	.-8      	; 0x3aa8 <Application_Task+0x9a>
    3ab0:	63 e0       	ldi	r22, 0x03	; 3
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
    3abc:	0f ef       	ldi	r16, 0xFF	; 255
    3abe:	1f ef       	ldi	r17, 0xFF	; 255
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    3ac0:	98 01       	movw	r18, r16
    3ac2:	46 e1       	ldi	r20, 0x16	; 22
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	be 01       	movw	r22, r28
    3ac8:	6f 5f       	subi	r22, 0xFF	; 255
    3aca:	7f 4f       	sbci	r23, 0xFF	; 255
    3acc:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <xMessageBuffer>
    3ad0:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <xMessageBuffer+0x1>
    3ad4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <xStreamBufferSend>
    3ad8:	a4 cf       	rjmp	.-184    	; 0x3a22 <Application_Task+0x14>

00003ada <create_tasks_and_semaphores>:
    3ada:	ef 92       	push	r14
	}
    3adc:	ff 92       	push	r15
 EventBits_t measureEventGroup;
EventBits_t dataReadyEventGroup;
/*-----------------------------------------------------------*/

void create_tasks_and_semaphores(void)
{
    3ade:	0f 93       	push	r16
	xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3ae0:	41 e0       	ldi	r20, 0x01	; 1
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	84 e6       	ldi	r24, 0x64	; 100
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	0e 94 01 0a 	call	0x1402	; 0x1402 <xStreamBufferGenericCreate>
    3aee:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <xMessageBuffer+0x1>
    3af2:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <xMessageBuffer>
	
	CO2_Sensor_Task();
    3af6:	0e 94 76 01 	call	0x2ec	; 0x2ec <CO2_Sensor_Task>
	SensorDataPackage_create();
    3afa:	20 dd       	rcall	.-1472   	; 0x353c <SensorDataPackage_create>
	measureEventGroup=xEventGroupCreate();
    3afc:	0e 94 b8 01 	call	0x370	; 0x370 <xEventGroupCreate>
    3b00:	09 2e       	mov	r0, r25
    3b02:	00 0c       	add	r0, r0
    3b04:	aa 0b       	sbc	r26, r26
    3b06:	bb 0b       	sbc	r27, r27
    3b08:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <measureEventGroup>
    3b0c:	90 93 c3 17 	sts	0x17C3, r25	; 0x8017c3 <measureEventGroup+0x1>
    3b10:	a0 93 c4 17 	sts	0x17C4, r26	; 0x8017c4 <measureEventGroup+0x2>
    3b14:	b0 93 c5 17 	sts	0x17C5, r27	; 0x8017c5 <measureEventGroup+0x3>
	dataReadyEventGroup=xEventGroupCreate();
    3b18:	0e 94 b8 01 	call	0x370	; 0x370 <xEventGroupCreate>
    3b1c:	ac 01       	movw	r20, r24
    3b1e:	09 2e       	mov	r0, r25
    3b20:	00 0c       	add	r0, r0
    3b22:	66 0b       	sbc	r22, r22
    3b24:	77 0b       	sbc	r23, r23
    3b26:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <dataReadyEventGroup>
    3b2a:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <dataReadyEventGroup+0x1>
    3b2e:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <uxTopUsedPriority>
    3b32:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <_temp>
	Temp_Humidty_sensor_create(measureEventGroup,dataReadyEventGroup);
    3b36:	bc 01       	movw	r22, r24
    3b38:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <measureEventGroup>
    3b3c:	90 91 c3 17 	lds	r25, 0x17C3	; 0x8017c3 <measureEventGroup+0x1>
    3b40:	51 dd       	rcall	.-1374   	; 0x35e4 <Temp_Humidty_sensor_create>
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3b42:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <xTestSemaphore>
    3b46:	90 91 c7 17 	lds	r25, 0x17C7	; 0x8017c7 <xTestSemaphore+0x1>
    3b4a:	89 2b       	or	r24, r25
    3b4c:	89 f4       	brne	.+34     	; 0x3b70 <create_tasks_and_semaphores+0x96>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	0e 94 cc 07 	call	0xf98	; 0xf98 <xQueueCreateMutex>
    3b54:	90 93 c7 17 	sts	0x17C7, r25	; 0x8017c7 <xTestSemaphore+0x1>
    3b58:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	41 f0       	breq	.+16     	; 0x3b70 <create_tasks_and_semaphores+0x96>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3b60:	00 e0       	ldi	r16, 0x00	; 0
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	a9 01       	movw	r20, r18
    3b68:	60 e0       	ldi	r22, 0x00	; 0
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	0e 94 28 07 	call	0xe50	; 0xe50 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    3b70:	e1 2c       	mov	r14, r1
    3b72:	f1 2c       	mov	r15, r1
    3b74:	03 e0       	ldi	r16, 0x03	; 3
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 ec       	ldi	r20, 0xC0	; 192
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	64 eb       	ldi	r22, 0xB4	; 180
    3b80:	74 e0       	ldi	r23, 0x04	; 4
    3b82:	87 e0       	ldi	r24, 0x07	; 7
    3b84:	9d e1       	ldi	r25, 0x1D	; 29
    3b86:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
xTaskCreate(
    3b8a:	01 e0       	ldi	r16, 0x01	; 1
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 ec       	ldi	r20, 0xC0	; 192
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	60 ec       	ldi	r22, 0xC0	; 192
    3b96:	74 e0       	ldi	r23, 0x04	; 4
    3b98:	8d ef       	ldi	r24, 0xFD	; 253
    3b9a:	9c e1       	ldi	r25, 0x1C	; 28
    3b9c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <xTaskCreate>
	,  1 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	
	
}
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	08 95       	ret

00003ba8 <initialiseSystem>:
	
}
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3ba8:	81 b1       	in	r24, 0x01	; 1
    3baa:	81 68       	ori	r24, 0x81	; 129
    3bac:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <stdio_initialise>
	// Let's create some tasks
	
    tempHum_init();
    3bb4:	5f dd       	rcall	.-1346   	; 0x3674 <tempHum_init>
	puts("Task0");
    3bb6:	85 ed       	ldi	r24, 0xD5	; 213
    3bb8:	94 e0       	ldi	r25, 0x04	; 4
    3bba:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <puts>
	create_tasks_and_semaphores();
    3bbe:	8d df       	rcall	.-230    	; 0x3ada <create_tasks_and_semaphores>
       // Always check what hih8120_initialise() returns
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3bc0:	85 e0       	ldi	r24, 0x05	; 5
    3bc2:	0e 94 4e 28 	call	0x509c	; 0x509c <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	1c d2       	rcall	.+1080   	; 0x4006 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
upLink_create(4,xMessageBuffer);
    3bce:	60 91 c0 17 	lds	r22, 0x17C0	; 0x8017c0 <xMessageBuffer>
    3bd2:	70 91 c1 17 	lds	r23, 0x17C1	; 0x8017c1 <xMessageBuffer+0x1>
    3bd6:	84 e0       	ldi	r24, 0x04	; 4
    3bd8:	9a ce       	rjmp	.-716    	; 0x390e <upLink_create>
    3bda:	08 95       	ret

00003bdc <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3bdc:	e5 df       	rcall	.-54     	; 0x3ba8 <initialiseSystem>
	//printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3bde:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskStartScheduler>

	/* Replace with your application code */
	
}
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	08 95       	ret

00003be8 <__fixunssfsi>:
    3be8:	33 d0       	rcall	.+102    	; 0x3c50 <__fp_splitA>
    3bea:	88 f0       	brcs	.+34     	; 0x3c0e <__fixunssfsi+0x26>
    3bec:	9f 57       	subi	r25, 0x7F	; 127
    3bee:	90 f0       	brcs	.+36     	; 0x3c14 <__fixunssfsi+0x2c>
    3bf0:	b9 2f       	mov	r27, r25
    3bf2:	99 27       	eor	r25, r25
    3bf4:	b7 51       	subi	r27, 0x17	; 23
    3bf6:	a0 f0       	brcs	.+40     	; 0x3c20 <__fixunssfsi+0x38>
    3bf8:	d1 f0       	breq	.+52     	; 0x3c2e <__fixunssfsi+0x46>
    3bfa:	66 0f       	add	r22, r22
    3bfc:	77 1f       	adc	r23, r23
    3bfe:	88 1f       	adc	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	1a f0       	brmi	.+6      	; 0x3c0a <__fixunssfsi+0x22>
    3c04:	ba 95       	dec	r27
    3c06:	c9 f7       	brne	.-14     	; 0x3bfa <__fixunssfsi+0x12>
    3c08:	12 c0       	rjmp	.+36     	; 0x3c2e <__fixunssfsi+0x46>
    3c0a:	b1 30       	cpi	r27, 0x01	; 1
    3c0c:	81 f0       	breq	.+32     	; 0x3c2e <__fixunssfsi+0x46>
    3c0e:	3a d0       	rcall	.+116    	; 0x3c84 <__fp_zero>
    3c10:	b1 e0       	ldi	r27, 0x01	; 1
    3c12:	08 95       	ret
    3c14:	37 c0       	rjmp	.+110    	; 0x3c84 <__fp_zero>
    3c16:	67 2f       	mov	r22, r23
    3c18:	78 2f       	mov	r23, r24
    3c1a:	88 27       	eor	r24, r24
    3c1c:	b8 5f       	subi	r27, 0xF8	; 248
    3c1e:	39 f0       	breq	.+14     	; 0x3c2e <__fixunssfsi+0x46>
    3c20:	b9 3f       	cpi	r27, 0xF9	; 249
    3c22:	cc f3       	brlt	.-14     	; 0x3c16 <__fixunssfsi+0x2e>
    3c24:	86 95       	lsr	r24
    3c26:	77 95       	ror	r23
    3c28:	67 95       	ror	r22
    3c2a:	b3 95       	inc	r27
    3c2c:	d9 f7       	brne	.-10     	; 0x3c24 <__fixunssfsi+0x3c>
    3c2e:	3e f4       	brtc	.+14     	; 0x3c3e <__fixunssfsi+0x56>
    3c30:	90 95       	com	r25
    3c32:	80 95       	com	r24
    3c34:	70 95       	com	r23
    3c36:	61 95       	neg	r22
    3c38:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3e:	08 95       	ret

00003c40 <__fp_split3>:
    3c40:	57 fd       	sbrc	r21, 7
    3c42:	90 58       	subi	r25, 0x80	; 128
    3c44:	44 0f       	add	r20, r20
    3c46:	55 1f       	adc	r21, r21
    3c48:	59 f0       	breq	.+22     	; 0x3c60 <__fp_splitA+0x10>
    3c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3c4c:	71 f0       	breq	.+28     	; 0x3c6a <__fp_splitA+0x1a>
    3c4e:	47 95       	ror	r20

00003c50 <__fp_splitA>:
    3c50:	88 0f       	add	r24, r24
    3c52:	97 fb       	bst	r25, 7
    3c54:	99 1f       	adc	r25, r25
    3c56:	61 f0       	breq	.+24     	; 0x3c70 <__fp_splitA+0x20>
    3c58:	9f 3f       	cpi	r25, 0xFF	; 255
    3c5a:	79 f0       	breq	.+30     	; 0x3c7a <__fp_splitA+0x2a>
    3c5c:	87 95       	ror	r24
    3c5e:	08 95       	ret
    3c60:	12 16       	cp	r1, r18
    3c62:	13 06       	cpc	r1, r19
    3c64:	14 06       	cpc	r1, r20
    3c66:	55 1f       	adc	r21, r21
    3c68:	f2 cf       	rjmp	.-28     	; 0x3c4e <__fp_split3+0xe>
    3c6a:	46 95       	lsr	r20
    3c6c:	f1 df       	rcall	.-30     	; 0x3c50 <__fp_splitA>
    3c6e:	08 c0       	rjmp	.+16     	; 0x3c80 <__fp_splitA+0x30>
    3c70:	16 16       	cp	r1, r22
    3c72:	17 06       	cpc	r1, r23
    3c74:	18 06       	cpc	r1, r24
    3c76:	99 1f       	adc	r25, r25
    3c78:	f1 cf       	rjmp	.-30     	; 0x3c5c <__fp_splitA+0xc>
    3c7a:	86 95       	lsr	r24
    3c7c:	71 05       	cpc	r23, r1
    3c7e:	61 05       	cpc	r22, r1
    3c80:	08 94       	sec
    3c82:	08 95       	ret

00003c84 <__fp_zero>:
    3c84:	e8 94       	clt

00003c86 <__fp_szero>:
    3c86:	bb 27       	eor	r27, r27
    3c88:	66 27       	eor	r22, r22
    3c8a:	77 27       	eor	r23, r23
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	97 f9       	bld	r25, 7
    3c90:	08 95       	ret

00003c92 <_hihTwiCallback>:
    3c92:	65 30       	cpi	r22, 0x05	; 5
    3c94:	f1 f4       	brne	.+60     	; 0x3cd2 <_hihTwiCallback+0x40>
    3c96:	fa 01       	movw	r30, r20
    3c98:	80 81       	ld	r24, Z
    3c9a:	8f 73       	andi	r24, 0x3F	; 63
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	98 2f       	mov	r25, r24
    3ca0:	88 27       	eor	r24, r24
    3ca2:	21 81       	ldd	r18, Z+1	; 0x01
    3ca4:	82 2b       	or	r24, r18
    3ca6:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <_hum+0x1>
    3caa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <_hum>
    3cae:	82 81       	ldd	r24, Z+2	; 0x02
    3cb0:	f0 e4       	ldi	r31, 0x40	; 64
    3cb2:	8f 9f       	mul	r24, r31
    3cb4:	c0 01       	movw	r24, r0
    3cb6:	11 24       	eor	r1, r1
    3cb8:	fa 01       	movw	r30, r20
    3cba:	23 81       	ldd	r18, Z+3	; 0x03
    3cbc:	26 95       	lsr	r18
    3cbe:	26 95       	lsr	r18
    3cc0:	82 2b       	or	r24, r18
    3cc2:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_temp+0x1>
    3cc6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_temp>
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	80 93 85 16 	sts	0x1685, r24	; 0x801685 <_measuringIsReady>
    3cd0:	08 95       	ret
    3cd2:	64 30       	cpi	r22, 0x04	; 4
    3cd4:	51 f0       	breq	.+20     	; 0x3cea <_hihTwiCallback+0x58>
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	90 e4       	ldi	r25, 0x40	; 64
    3cda:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_temp+0x1>
    3cde:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_temp>
    3ce2:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <_hum+0x1>
    3ce6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <_hum>
    3cea:	08 95       	ret

00003cec <hih8120_initialise>:
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	09 e4       	ldi	r16, 0x49	; 73
    3cf2:	1e e1       	ldi	r17, 0x1E	; 30
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	34 e2       	ldi	r19, 0x24	; 36
    3cf8:	44 ef       	ldi	r20, 0xF4	; 244
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	87 e2       	ldi	r24, 0x27	; 39
    3d00:	0e 94 34 29 	call	0x5268	; 0x5268 <twiCreate>
    3d04:	90 93 87 16 	sts	0x1687, r25	; 0x801687 <_hih8120Handler+0x1>
    3d08:	80 93 86 16 	sts	0x1686, r24	; 0x801686 <_hih8120Handler>
    3d0c:	21 e0       	ldi	r18, 0x01	; 1
    3d0e:	89 2b       	or	r24, r25
    3d10:	09 f0       	breq	.+2      	; 0x3d14 <hih8120_initialise+0x28>
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	82 2f       	mov	r24, r18
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	08 95       	ret

00003d1c <hih8120_wakeup>:
    3d1c:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_hih8120Handler>
    3d20:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_hih8120Handler+0x1>
    3d24:	00 97       	sbiw	r24, 0x00	; 0
    3d26:	59 f0       	breq	.+22     	; 0x3d3e <hih8120_wakeup+0x22>
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	0e 94 85 29 	call	0x530a	; 0x530a <twiTransmit>
    3d32:	84 30       	cpi	r24, 0x04	; 4
    3d34:	31 f4       	brne	.+12     	; 0x3d42 <hih8120_wakeup+0x26>
    3d36:	10 92 85 16 	sts	0x1685, r1	; 0x801685 <_measuringIsReady>
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	08 95       	ret
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	08 95       	ret
    3d42:	83 e0       	ldi	r24, 0x03	; 3
    3d44:	08 95       	ret

00003d46 <hih8120_measure>:
    3d46:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_hih8120Handler>
    3d4a:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_hih8120Handler+0x1>
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	39 f0       	breq	.+14     	; 0x3d60 <hih8120_measure+0x1a>
    3d52:	64 e0       	ldi	r22, 0x04	; 4
    3d54:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <twiReceive>
    3d58:	85 30       	cpi	r24, 0x05	; 5
    3d5a:	21 f0       	breq	.+8      	; 0x3d64 <hih8120_measure+0x1e>
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	08 95       	ret
    3d60:	82 e0       	ldi	r24, 0x02	; 2
    3d62:	08 95       	ret
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	08 95       	ret

00003d68 <hih8120_getHumidity>:
    3d68:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_hum>
    3d6c:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <_hum+0x1>
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	0e 94 af 2b 	call	0x575e	; 0x575e <__floatunsisf>
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	48 ec       	ldi	r20, 0xC8	; 200
    3d7e:	52 e4       	ldi	r21, 0x42	; 66
    3d80:	0e 94 14 2c 	call	0x5828	; 0x5828 <__mulsf3>
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	38 ef       	ldi	r19, 0xF8	; 248
    3d88:	4f e7       	ldi	r20, 0x7F	; 127
    3d8a:	56 e4       	ldi	r21, 0x46	; 70
    3d8c:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__divsf3>
    3d90:	08 95       	ret

00003d92 <hih8120_getTemperature>:
    3d92:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <_temp>
    3d96:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <_temp+0x1>
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	0e 94 af 2b 	call	0x575e	; 0x575e <__floatunsisf>
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	45 e2       	ldi	r20, 0x25	; 37
    3da8:	53 e4       	ldi	r21, 0x43	; 67
    3daa:	0e 94 14 2c 	call	0x5828	; 0x5828 <__mulsf3>
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	38 ef       	ldi	r19, 0xF8	; 248
    3db2:	4f e7       	ldi	r20, 0x7F	; 127
    3db4:	56 e4       	ldi	r21, 0x46	; 70
    3db6:	0e 94 44 2b 	call	0x5688	; 0x5688 <__divsf3>
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	40 e2       	ldi	r20, 0x20	; 32
    3dc0:	52 e4       	ldi	r21, 0x42	; 66
    3dc2:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__subsf3>
    3dc6:	08 95       	ret

00003dc8 <_serialCallBack>:
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	1f 92       	push	r1
    3dd2:	1f 92       	push	r1
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	8c 01       	movw	r16, r24
    3dda:	19 82       	std	Y+1, r1	; 0x01
    3ddc:	2d c0       	rjmp	.+90     	; 0x3e38 <_serialCallBack+0x70>
    3dde:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <rec_buf_inp.2878>
    3de2:	ec 32       	cpi	r30, 0x2C	; 44
    3de4:	50 f4       	brcc	.+20     	; 0x3dfa <_serialCallBack+0x32>
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	8e 0f       	add	r24, r30
    3dea:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <rec_buf_inp.2878>
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	ef 50       	subi	r30, 0x0F	; 15
    3df2:	f9 4e       	sbci	r31, 0xE9	; 233
    3df4:	8a 81       	ldd	r24, Y+2	; 0x02
    3df6:	80 83       	st	Z, r24
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <_serialCallBack+0x36>
    3dfa:	10 92 bf 16 	sts	0x16BF, r1	; 0x8016bf <rec_buf_inp.2878>
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	8a 30       	cpi	r24, 0x0A	; 10
    3e02:	d1 f4       	brne	.+52     	; 0x3e38 <_serialCallBack+0x70>
    3e04:	40 91 bf 16 	lds	r20, 0x16BF	; 0x8016bf <rec_buf_inp.2878>
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	fa 01       	movw	r30, r20
    3e0c:	e1 51       	subi	r30, 0x11	; 17
    3e0e:	f9 4e       	sbci	r31, 0xE9	; 233
    3e10:	10 82       	st	Z, r1
    3e12:	41 50       	subi	r20, 0x01	; 1
    3e14:	51 09       	sbc	r21, r1
    3e16:	9e 01       	movw	r18, r28
    3e18:	2f 5f       	subi	r18, 0xFF	; 255
    3e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1c:	61 ef       	ldi	r22, 0xF1	; 241
    3e1e:	76 e1       	ldi	r23, 0x16	; 22
    3e20:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_serialReplyBufferHandle>
    3e24:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    3e28:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferSendFromISR>
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	81 11       	cpse	r24, r1
    3e30:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    3e34:	10 92 bf 16 	sts	0x16BF, r1	; 0x8016bf <rec_buf_inp.2878>
    3e38:	be 01       	movw	r22, r28
    3e3a:	6e 5f       	subi	r22, 0xFE	; 254
    3e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3e:	c8 01       	movw	r24, r16
    3e40:	90 d5       	rcall	.+2848   	; 0x4962 <serial_getByte>
    3e42:	88 23       	and	r24, r24
    3e44:	61 f2       	breq	.-104    	; 0x3dde <_serialCallBack+0x16>
    3e46:	0f 90       	pop	r0
    3e48:	0f 90       	pop	r0
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	0f 91       	pop	r16
    3e52:	08 95       	ret

00003e54 <_uploadMessage>:
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	8c 01       	movw	r16, r24
    3e5e:	eb 01       	movw	r28, r22
    3e60:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_serialReplyBufferHandle>
    3e64:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    3e68:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferReset>
    3e6c:	b8 01       	movw	r22, r16
    3e6e:	88 e8       	ldi	r24, 0x88	; 136
    3e70:	96 e1       	ldi	r25, 0x16	; 22
    3e72:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strcpy>
    3e76:	20 97       	sbiw	r28, 0x00	; 0
    3e78:	79 f0       	breq	.+30     	; 0x3e98 <_uploadMessage+0x44>
    3e7a:	e8 e8       	ldi	r30, 0x88	; 136
    3e7c:	f6 e1       	ldi	r31, 0x16	; 22
    3e7e:	01 90       	ld	r0, Z+
    3e80:	00 20       	and	r0, r0
    3e82:	e9 f7       	brne	.-6      	; 0x3e7e <_uploadMessage+0x2a>
    3e84:	31 97       	sbiw	r30, 0x01	; 1
    3e86:	80 e2       	ldi	r24, 0x20	; 32
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	80 83       	st	Z, r24
    3e8e:	be 01       	movw	r22, r28
    3e90:	88 e8       	ldi	r24, 0x88	; 136
    3e92:	96 e1       	ldi	r25, 0x16	; 22
    3e94:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <strcat>
    3e98:	e8 e8       	ldi	r30, 0x88	; 136
    3e9a:	f6 e1       	ldi	r31, 0x16	; 22
    3e9c:	df 01       	movw	r26, r30
    3e9e:	0d 90       	ld	r0, X+
    3ea0:	00 20       	and	r0, r0
    3ea2:	e9 f7       	brne	.-6      	; 0x3e9e <_uploadMessage+0x4a>
    3ea4:	11 97       	sbiw	r26, 0x01	; 1
    3ea6:	8d e0       	ldi	r24, 0x0D	; 13
    3ea8:	9a e0       	ldi	r25, 0x0A	; 10
    3eaa:	11 96       	adiw	r26, 0x01	; 1
    3eac:	9c 93       	st	X, r25
    3eae:	8e 93       	st	-X, r24
    3eb0:	12 96       	adiw	r26, 0x02	; 2
    3eb2:	1c 92       	st	X, r1
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	00 20       	and	r0, r0
    3eb8:	e9 f7       	brne	.-6      	; 0x3eb4 <_uploadMessage+0x60>
    3eba:	31 97       	sbiw	r30, 0x01	; 1
    3ebc:	e8 58       	subi	r30, 0x88	; 136
    3ebe:	f6 41       	sbci	r31, 0x16	; 22
    3ec0:	ae 2f       	mov	r26, r30
    3ec2:	88 e8       	ldi	r24, 0x88	; 136
    3ec4:	96 e1       	ldi	r25, 0x16	; 22
    3ec6:	ac 01       	movw	r20, r24
    3ec8:	6a 2f       	mov	r22, r26
    3eca:	80 91 c4 16 	lds	r24, 0x16C4	; 0x8016c4 <_rn2483_serial>
    3ece:	90 91 c5 16 	lds	r25, 0x16C5	; 0x8016c5 <_rn2483_serial+0x1>
    3ed2:	f2 d4       	rcall	.+2532   	; 0x48b8 <serial_sendBytes>
    3ed4:	81 11       	cpse	r24, r1
    3ed6:	11 c0       	rjmp	.+34     	; 0x3efa <_uploadMessage+0xa6>
    3ed8:	08 e2       	ldi	r16, 0x28	; 40
    3eda:	15 e0       	ldi	r17, 0x05	; 5
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	4d e2       	ldi	r20, 0x2D	; 45
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	6b e4       	ldi	r22, 0x4B	; 75
    3ee6:	77 e1       	ldi	r23, 0x17	; 23
    3ee8:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_serialReplyBufferHandle>
    3eec:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    3ef0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    3ef4:	8b e4       	ldi	r24, 0x4B	; 75
    3ef6:	97 e1       	ldi	r25, 0x17	; 23
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <_uploadMessage+0xaa>
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	1f 91       	pop	r17
    3f04:	0f 91       	pop	r16
    3f06:	08 95       	ret

00003f08 <_reply2ReturnCode>:
    3f08:	2f 92       	push	r2
    3f0a:	3f 92       	push	r3
    3f0c:	4f 92       	push	r4
    3f0e:	5f 92       	push	r5
    3f10:	6f 92       	push	r6
    3f12:	7f 92       	push	r7
    3f14:	8f 92       	push	r8
    3f16:	9f 92       	push	r9
    3f18:	af 92       	push	r10
    3f1a:	bf 92       	push	r11
    3f1c:	cf 92       	push	r12
    3f1e:	df 92       	push	r13
    3f20:	ef 92       	push	r14
    3f22:	ff 92       	push	r15
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	5c 01       	movw	r10, r24
    3f2e:	fc 01       	movw	r30, r24
    3f30:	01 90       	ld	r0, Z+
    3f32:	00 20       	and	r0, r0
    3f34:	e9 f7       	brne	.-6      	; 0x3f30 <_reply2ReturnCode+0x28>
    3f36:	31 97       	sbiw	r30, 0x01	; 1
    3f38:	6f 01       	movw	r12, r30
    3f3a:	c8 1a       	sub	r12, r24
    3f3c:	d9 0a       	sbc	r13, r25
    3f3e:	5c 2c       	mov	r5, r12
    3f40:	0f 2e       	mov	r0, r31
    3f42:	f4 e7       	ldi	r31, 0x74	; 116
    3f44:	8f 2e       	mov	r8, r31
    3f46:	f7 e0       	ldi	r31, 0x07	; 7
    3f48:	9f 2e       	mov	r9, r31
    3f4a:	f0 2d       	mov	r31, r0
    3f4c:	e1 2c       	mov	r14, r1
    3f4e:	f1 2c       	mov	r15, r1
    3f50:	4c 2c       	mov	r4, r12
    3f52:	37 01       	movw	r6, r14
    3f54:	f4 01       	movw	r30, r8
    3f56:	01 81       	ldd	r16, Z+1	; 0x01
    3f58:	12 81       	ldd	r17, Z+2	; 0x02
    3f5a:	e8 01       	movw	r28, r16
    3f5c:	09 90       	ld	r0, Y+
    3f5e:	00 20       	and	r0, r0
    3f60:	e9 f7       	brne	.-6      	; 0x3f5c <_reply2ReturnCode+0x54>
    3f62:	21 97       	sbiw	r28, 0x01	; 1
    3f64:	c0 1b       	sub	r28, r16
    3f66:	d1 0b       	sbc	r29, r17
    3f68:	3c 2e       	mov	r3, r28
    3f6a:	f9 e0       	ldi	r31, 0x09	; 9
    3f6c:	cf 16       	cp	r12, r31
    3f6e:	d1 04       	cpc	r13, r1
    3f70:	58 f0       	brcs	.+22     	; 0x3f88 <_reply2ReturnCode+0x80>
    3f72:	f4 01       	movw	r30, r8
    3f74:	20 80       	ld	r2, Z
    3f76:	fe e0       	ldi	r31, 0x0E	; 14
    3f78:	2f 12       	cpse	r2, r31
    3f7a:	06 c0       	rjmp	.+12     	; 0x3f88 <_reply2ReturnCode+0x80>
    3f7c:	b8 01       	movw	r22, r16
    3f7e:	c5 01       	movw	r24, r10
    3f80:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <strcasestr>
    3f84:	89 2b       	or	r24, r25
    3f86:	09 f5       	brne	.+66     	; 0x3fca <_reply2ReturnCode+0xc2>
    3f88:	44 2d       	mov	r20, r4
    3f8a:	35 14       	cp	r3, r5
    3f8c:	08 f4       	brcc	.+2      	; 0x3f90 <_reply2ReturnCode+0x88>
    3f8e:	4c 2f       	mov	r20, r28
    3f90:	50 e0       	ldi	r21, 0x00	; 0
    3f92:	b8 01       	movw	r22, r16
    3f94:	c5 01       	movw	r24, r10
    3f96:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <strncasecmp>
    3f9a:	89 2b       	or	r24, r25
    3f9c:	49 f4       	brne	.+18     	; 0x3fb0 <_reply2ReturnCode+0xa8>
    3f9e:	f3 01       	movw	r30, r6
    3fa0:	ee 0f       	add	r30, r30
    3fa2:	ff 1f       	adc	r31, r31
    3fa4:	e6 0d       	add	r30, r6
    3fa6:	f7 1d       	adc	r31, r7
    3fa8:	ec 58       	subi	r30, 0x8C	; 140
    3faa:	f8 4f       	sbci	r31, 0xF8	; 248
    3fac:	20 80       	ld	r2, Z
    3fae:	0d c0       	rjmp	.+26     	; 0x3fca <_reply2ReturnCode+0xc2>
    3fb0:	8f ef       	ldi	r24, 0xFF	; 255
    3fb2:	e8 1a       	sub	r14, r24
    3fb4:	f8 0a       	sbc	r15, r24
    3fb6:	e3 e0       	ldi	r30, 0x03	; 3
    3fb8:	8e 0e       	add	r8, r30
    3fba:	91 1c       	adc	r9, r1
    3fbc:	f1 e1       	ldi	r31, 0x11	; 17
    3fbe:	ef 16       	cp	r14, r31
    3fc0:	f1 04       	cpc	r15, r1
    3fc2:	39 f6       	brne	.-114    	; 0x3f52 <_reply2ReturnCode+0x4a>
    3fc4:	68 94       	set
    3fc6:	22 24       	eor	r2, r2
    3fc8:	24 f8       	bld	r2, 4
    3fca:	82 2d       	mov	r24, r2
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	ff 90       	pop	r15
    3fd6:	ef 90       	pop	r14
    3fd8:	df 90       	pop	r13
    3fda:	cf 90       	pop	r12
    3fdc:	bf 90       	pop	r11
    3fde:	af 90       	pop	r10
    3fe0:	9f 90       	pop	r9
    3fe2:	8f 90       	pop	r8
    3fe4:	7f 90       	pop	r7
    3fe6:	6f 90       	pop	r6
    3fe8:	5f 90       	pop	r5
    3fea:	4f 90       	pop	r4
    3fec:	3f 90       	pop	r3
    3fee:	2f 90       	pop	r2
    3ff0:	08 95       	ret

00003ff2 <_uploadMessageRc>:
    3ff2:	30 df       	rcall	.-416    	; 0x3e54 <_uploadMessage>
    3ff4:	89 cf       	rjmp	.-238    	; 0x3f08 <_reply2ReturnCode>
    3ff6:	08 95       	ret

00003ff8 <lora_driver_flushBuffers>:
    3ff8:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_serialReplyBufferHandle>
    3ffc:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    4000:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <xStreamBufferReset>
    4004:	08 95       	ret

00004006 <lora_driver_initialise>:
    4006:	8f 92       	push	r8
    4008:	9f 92       	push	r9
    400a:	af 92       	push	r10
    400c:	cf 92       	push	r12
    400e:	ef 92       	push	r14
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	c8 2f       	mov	r28, r24
    4018:	8b 01       	movw	r16, r22
    401a:	41 e0       	ldi	r20, 0x01	; 1
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	88 ec       	ldi	r24, 0xC8	; 200
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 01 0a 	call	0x1402	; 0x1402 <xStreamBufferGenericCreate>
    4028:	90 93 c3 16 	sts	0x16C3, r25	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    402c:	80 93 c2 16 	sts	0x16C2, r24	; 0x8016c2 <_serialReplyBufferHandle>
    4030:	10 93 c1 16 	sts	0x16C1, r17	; 0x8016c1 <_downlinkMessageBuffer+0x1>
    4034:	00 93 c0 16 	sts	0x16C0, r16	; 0x8016c0 <_downlinkMessageBuffer>
    4038:	0f 2e       	mov	r0, r31
    403a:	f4 ee       	ldi	r31, 0xE4	; 228
    403c:	8f 2e       	mov	r8, r31
    403e:	fe e1       	ldi	r31, 0x1E	; 30
    4040:	9f 2e       	mov	r9, r31
    4042:	f0 2d       	mov	r31, r0
    4044:	68 94       	set
    4046:	aa 24       	eor	r10, r10
    4048:	a6 f8       	bld	r10, 6
    404a:	68 94       	set
    404c:	cc 24       	eor	r12, r12
    404e:	c6 f8       	bld	r12, 6
    4050:	e1 2c       	mov	r14, r1
    4052:	00 e0       	ldi	r16, 0x00	; 0
    4054:	23 e0       	ldi	r18, 0x03	; 3
    4056:	40 e0       	ldi	r20, 0x00	; 0
    4058:	51 ee       	ldi	r21, 0xE1	; 225
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	70 e0       	ldi	r23, 0x00	; 0
    405e:	8c 2f       	mov	r24, r28
    4060:	5e d3       	rcall	.+1724   	; 0x471e <serial_create>
    4062:	90 93 c5 16 	sts	0x16C5, r25	; 0x8016c5 <_rn2483_serial+0x1>
    4066:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <_rn2483_serial>
    406a:	e7 e0       	ldi	r30, 0x07	; 7
    406c:	f1 e0       	ldi	r31, 0x01	; 1
    406e:	80 81       	ld	r24, Z
    4070:	80 61       	ori	r24, 0x10	; 16
    4072:	80 83       	st	Z, r24
    4074:	cf 91       	pop	r28
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	ef 90       	pop	r14
    407c:	cf 90       	pop	r12
    407e:	af 90       	pop	r10
    4080:	9f 90       	pop	r9
    4082:	8f 90       	pop	r8
    4084:	08 95       	ret

00004086 <lora_driver_resetRn2483>:
    4086:	88 23       	and	r24, r24
    4088:	31 f0       	breq	.+12     	; 0x4096 <lora_driver_resetRn2483+0x10>
    408a:	e8 e0       	ldi	r30, 0x08	; 8
    408c:	f1 e0       	ldi	r31, 0x01	; 1
    408e:	80 81       	ld	r24, Z
    4090:	8f 7e       	andi	r24, 0xEF	; 239
    4092:	80 83       	st	Z, r24
    4094:	08 95       	ret
    4096:	e8 e0       	ldi	r30, 0x08	; 8
    4098:	f1 e0       	ldi	r31, 0x01	; 1
    409a:	80 81       	ld	r24, Z
    409c:	80 61       	ori	r24, 0x10	; 16
    409e:	80 83       	st	Z, r24
    40a0:	08 95       	ret

000040a2 <lora_driver_rn2483FactoryReset>:
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	8a ef       	ldi	r24, 0xFA	; 250
    40a8:	94 e0       	ldi	r25, 0x04	; 4
    40aa:	d4 de       	rcall	.-600    	; 0x3e54 <_uploadMessage>
    40ac:	eb e4       	ldi	r30, 0x4B	; 75
    40ae:	f7 e1       	ldi	r31, 0x17	; 23
    40b0:	01 90       	ld	r0, Z+
    40b2:	00 20       	and	r0, r0
    40b4:	e9 f7       	brne	.-6      	; 0x40b0 <lora_driver_rn2483FactoryReset+0xe>
    40b6:	31 97       	sbiw	r30, 0x01	; 1
    40b8:	eb 54       	subi	r30, 0x4B	; 75
    40ba:	f7 41       	sbci	r31, 0x17	; 23
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	75 97       	sbiw	r30, 0x15	; 21
    40c0:	08 f0       	brcs	.+2      	; 0x40c4 <lora_driver_rn2483FactoryReset+0x22>
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	08 95       	ret

000040c6 <lora_driver_getRn2483Hweui>:
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	ec 01       	movw	r28, r24
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	70 e0       	ldi	r23, 0x00	; 0
    40d0:	8b e0       	ldi	r24, 0x0B	; 11
    40d2:	95 e0       	ldi	r25, 0x05	; 5
    40d4:	bf de       	rcall	.-642    	; 0x3e54 <_uploadMessage>
    40d6:	eb e4       	ldi	r30, 0x4B	; 75
    40d8:	f7 e1       	ldi	r31, 0x17	; 23
    40da:	01 90       	ld	r0, Z+
    40dc:	00 20       	and	r0, r0
    40de:	e9 f7       	brne	.-6      	; 0x40da <lora_driver_getRn2483Hweui+0x14>
    40e0:	ec 55       	subi	r30, 0x5C	; 92
    40e2:	f7 41       	sbci	r31, 0x17	; 23
    40e4:	39 f4       	brne	.+14     	; 0x40f4 <lora_driver_getRn2483Hweui+0x2e>
    40e6:	6b e4       	ldi	r22, 0x4B	; 75
    40e8:	77 e1       	ldi	r23, 0x17	; 23
    40ea:	ce 01       	movw	r24, r28
    40ec:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strcpy>
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <lora_driver_getRn2483Hweui+0x32>
    40f4:	18 82       	st	Y, r1
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	08 95       	ret

000040fe <lora_driver_setDeviceIdentifier>:
    40fe:	fc 01       	movw	r30, r24
    4100:	01 90       	ld	r0, Z+
    4102:	00 20       	and	r0, r0
    4104:	e9 f7       	brne	.-6      	; 0x4100 <lora_driver_setDeviceIdentifier+0x2>
    4106:	9f 01       	movw	r18, r30
    4108:	21 51       	subi	r18, 0x11	; 17
    410a:	31 09       	sbc	r19, r1
    410c:	28 17       	cp	r18, r24
    410e:	39 07       	cpc	r19, r25
    4110:	29 f4       	brne	.+10     	; 0x411c <lora_driver_setDeviceIdentifier+0x1e>
    4112:	bc 01       	movw	r22, r24
    4114:	89 e3       	ldi	r24, 0x39	; 57
    4116:	95 e0       	ldi	r25, 0x05	; 5
    4118:	6c cf       	rjmp	.-296    	; 0x3ff2 <_uploadMessageRc>
    411a:	08 95       	ret
    411c:	89 e0       	ldi	r24, 0x09	; 9
    411e:	08 95       	ret

00004120 <lora_driver_setApplicationIdentifier>:
    4120:	fc 01       	movw	r30, r24
    4122:	01 90       	ld	r0, Z+
    4124:	00 20       	and	r0, r0
    4126:	e9 f7       	brne	.-6      	; 0x4122 <lora_driver_setApplicationIdentifier+0x2>
    4128:	9f 01       	movw	r18, r30
    412a:	21 51       	subi	r18, 0x11	; 17
    412c:	31 09       	sbc	r19, r1
    412e:	28 17       	cp	r18, r24
    4130:	39 07       	cpc	r19, r25
    4132:	29 f4       	brne	.+10     	; 0x413e <lora_driver_setApplicationIdentifier+0x1e>
    4134:	bc 01       	movw	r22, r24
    4136:	88 e4       	ldi	r24, 0x48	; 72
    4138:	95 e0       	ldi	r25, 0x05	; 5
    413a:	5b cf       	rjmp	.-330    	; 0x3ff2 <_uploadMessageRc>
    413c:	08 95       	ret
    413e:	89 e0       	ldi	r24, 0x09	; 9
    4140:	08 95       	ret

00004142 <lora_driver_setApplicationKey>:
    4142:	fc 01       	movw	r30, r24
    4144:	01 90       	ld	r0, Z+
    4146:	00 20       	and	r0, r0
    4148:	e9 f7       	brne	.-6      	; 0x4144 <lora_driver_setApplicationKey+0x2>
    414a:	9f 01       	movw	r18, r30
    414c:	21 52       	subi	r18, 0x21	; 33
    414e:	31 09       	sbc	r19, r1
    4150:	28 17       	cp	r18, r24
    4152:	39 07       	cpc	r19, r25
    4154:	29 f4       	brne	.+10     	; 0x4160 <lora_driver_setApplicationKey+0x1e>
    4156:	bc 01       	movw	r22, r24
    4158:	87 e5       	ldi	r24, 0x57	; 87
    415a:	95 e0       	ldi	r25, 0x05	; 5
    415c:	4a cf       	rjmp	.-364    	; 0x3ff2 <_uploadMessageRc>
    415e:	08 95       	ret
    4160:	89 e0       	ldi	r24, 0x09	; 9
    4162:	08 95       	ret

00004164 <lora_driver_saveMac>:
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	86 e9       	ldi	r24, 0x96	; 150
    416a:	95 e0       	ldi	r25, 0x05	; 5
    416c:	42 cf       	rjmp	.-380    	; 0x3ff2 <_uploadMessageRc>
    416e:	08 95       	ret

00004170 <lora_driver_join>:
    4170:	0f 93       	push	r16
    4172:	1f 93       	push	r17
    4174:	e8 2f       	mov	r30, r24
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	ee 0f       	add	r30, r30
    417a:	ff 1f       	adc	r31, r31
    417c:	e0 59       	subi	r30, 0x90	; 144
    417e:	f8 4f       	sbci	r31, 0xF8	; 248
    4180:	60 81       	ld	r22, Z
    4182:	71 81       	ldd	r23, Z+1	; 0x01
    4184:	8f e9       	ldi	r24, 0x9F	; 159
    4186:	95 e0       	ldi	r25, 0x05	; 5
    4188:	34 df       	rcall	.-408    	; 0x3ff2 <_uploadMessageRc>
    418a:	81 11       	cpse	r24, r1
    418c:	14 c0       	rjmp	.+40     	; 0x41b6 <lora_driver_join+0x46>
    418e:	08 e2       	ldi	r16, 0x28	; 40
    4190:	15 e0       	ldi	r17, 0x05	; 5
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	4d e2       	ldi	r20, 0x2D	; 45
    4198:	50 e0       	ldi	r21, 0x00	; 0
    419a:	6b e4       	ldi	r22, 0x4B	; 75
    419c:	77 e1       	ldi	r23, 0x17	; 23
    419e:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_serialReplyBufferHandle>
    41a2:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    41a6:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    41aa:	88 23       	and	r24, r24
    41ac:	21 f0       	breq	.+8      	; 0x41b6 <lora_driver_join+0x46>
    41ae:	8b e4       	ldi	r24, 0x4B	; 75
    41b0:	97 e1       	ldi	r25, 0x17	; 23
    41b2:	aa de       	rcall	.-684    	; 0x3f08 <_reply2ReturnCode>
    41b4:	03 c0       	rjmp	.+6      	; 0x41bc <lora_driver_join+0x4c>
    41b6:	8b e4       	ldi	r24, 0x4B	; 75
    41b8:	97 e1       	ldi	r25, 0x17	; 23
    41ba:	a6 de       	rcall	.-692    	; 0x3f08 <_reply2ReturnCode>
    41bc:	1f 91       	pop	r17
    41be:	0f 91       	pop	r16
    41c0:	08 95       	ret

000041c2 <lora_driver_sendUploadMessage>:
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	1f 92       	push	r1
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    41d0:	db 01       	movw	r26, r22
    41d2:	11 96       	adiw	r26, 0x01	; 1
    41d4:	9c 91       	ld	r25, X
    41d6:	11 97       	sbiw	r26, 0x01	; 1
    41d8:	95 31       	cpi	r25, 0x15	; 21
    41da:	08 f0       	brcs	.+2      	; 0x41de <lora_driver_sendUploadMessage+0x1c>
    41dc:	b4 c0       	rjmp	.+360    	; 0x4346 <lora_driver_sendUploadMessage+0x184>
    41de:	99 23       	and	r25, r25
    41e0:	81 f1       	breq	.+96     	; 0x4242 <lora_driver_sendUploadMessage+0x80>
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	27 2f       	mov	r18, r23
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	46 2f       	mov	r20, r22
    41ec:	50 e0       	ldi	r21, 0x00	; 0
    41ee:	fd 01       	movw	r30, r26
    41f0:	e4 0f       	add	r30, r20
    41f2:	f5 1f       	adc	r31, r21
    41f4:	92 81       	ldd	r25, Z+2	; 0x02
    41f6:	92 95       	swap	r25
    41f8:	9f 70       	andi	r25, 0x0F	; 15
    41fa:	9a 30       	cpi	r25, 0x0A	; 10
    41fc:	10 f0       	brcs	.+4      	; 0x4202 <lora_driver_sendUploadMessage+0x40>
    41fe:	99 5c       	subi	r25, 0xC9	; 201
    4200:	01 c0       	rjmp	.+2      	; 0x4204 <lora_driver_sendUploadMessage+0x42>
    4202:	90 5d       	subi	r25, 0xD0	; 208
    4204:	f9 01       	movw	r30, r18
    4206:	e4 52       	subi	r30, 0x24	; 36
    4208:	f9 4e       	sbci	r31, 0xE9	; 233
    420a:	90 83       	st	Z, r25
    420c:	2f 5f       	subi	r18, 0xFF	; 255
    420e:	3f 4f       	sbci	r19, 0xFF	; 255
    4210:	fd 01       	movw	r30, r26
    4212:	e4 0f       	add	r30, r20
    4214:	f5 1f       	adc	r31, r21
    4216:	92 81       	ldd	r25, Z+2	; 0x02
    4218:	9f 70       	andi	r25, 0x0F	; 15
    421a:	49 2f       	mov	r20, r25
    421c:	50 e0       	ldi	r21, 0x00	; 0
    421e:	4a 30       	cpi	r20, 0x0A	; 10
    4220:	51 05       	cpc	r21, r1
    4222:	14 f0       	brlt	.+4      	; 0x4228 <lora_driver_sendUploadMessage+0x66>
    4224:	99 5c       	subi	r25, 0xC9	; 201
    4226:	01 c0       	rjmp	.+2      	; 0x422a <lora_driver_sendUploadMessage+0x68>
    4228:	90 5d       	subi	r25, 0xD0	; 208
    422a:	f9 01       	movw	r30, r18
    422c:	e4 52       	subi	r30, 0x24	; 36
    422e:	f9 4e       	sbci	r31, 0xE9	; 233
    4230:	90 83       	st	Z, r25
    4232:	7e 5f       	subi	r23, 0xFE	; 254
    4234:	6f 5f       	subi	r22, 0xFF	; 255
    4236:	11 96       	adiw	r26, 0x01	; 1
    4238:	9c 91       	ld	r25, X
    423a:	11 97       	sbiw	r26, 0x01	; 1
    423c:	69 17       	cp	r22, r25
    423e:	98 f2       	brcs	.-90     	; 0x41e6 <lora_driver_sendUploadMessage+0x24>
    4240:	01 c0       	rjmp	.+2      	; 0x4244 <lora_driver_sendUploadMessage+0x82>
    4242:	70 e0       	ldi	r23, 0x00	; 0
    4244:	e7 2f       	mov	r30, r23
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	e4 52       	subi	r30, 0x24	; 36
    424a:	f9 4e       	sbci	r31, 0xE9	; 233
    424c:	10 82       	st	Z, r1
    424e:	4c 91       	ld	r20, X
    4250:	81 11       	cpse	r24, r1
    4252:	03 c0       	rjmp	.+6      	; 0x425a <lora_driver_sendUploadMessage+0x98>
    4254:	88 ea       	ldi	r24, 0xA8	; 168
    4256:	95 e0       	ldi	r25, 0x05	; 5
    4258:	02 c0       	rjmp	.+4      	; 0x425e <lora_driver_sendUploadMessage+0x9c>
    425a:	8a ea       	ldi	r24, 0xAA	; 170
    425c:	95 e0       	ldi	r25, 0x05	; 5
    425e:	2c ed       	ldi	r18, 0xDC	; 220
    4260:	36 e1       	ldi	r19, 0x16	; 22
    4262:	3f 93       	push	r19
    4264:	2f 93       	push	r18
    4266:	1f 92       	push	r1
    4268:	4f 93       	push	r20
    426a:	9f 93       	push	r25
    426c:	8f 93       	push	r24
    426e:	8e ea       	ldi	r24, 0xAE	; 174
    4270:	95 e0       	ldi	r25, 0x05	; 5
    4272:	9f 93       	push	r25
    4274:	8f 93       	push	r24
    4276:	8e e1       	ldi	r24, 0x1E	; 30
    4278:	97 e1       	ldi	r25, 0x17	; 23
    427a:	9f 93       	push	r25
    427c:	8f 93       	push	r24
    427e:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <sprintf>
    4282:	60 e0       	ldi	r22, 0x00	; 0
    4284:	70 e0       	ldi	r23, 0x00	; 0
    4286:	8e e1       	ldi	r24, 0x1E	; 30
    4288:	97 e1       	ldi	r25, 0x17	; 23
    428a:	b3 de       	rcall	.-666    	; 0x3ff2 <_uploadMessageRc>
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	81 11       	cpse	r24, r1
    4298:	59 c0       	rjmp	.+178    	; 0x434c <lora_driver_sendUploadMessage+0x18a>
    429a:	08 e2       	ldi	r16, 0x28	; 40
    429c:	15 e0       	ldi	r17, 0x05	; 5
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	4d e2       	ldi	r20, 0x2D	; 45
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	6b e4       	ldi	r22, 0x4B	; 75
    42a8:	77 e1       	ldi	r23, 0x17	; 23
    42aa:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <_serialReplyBufferHandle>
    42ae:	90 91 c3 16 	lds	r25, 0x16C3	; 0x8016c3 <_serialReplyBufferHandle+0x1>
    42b2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    42b6:	88 23       	and	r24, r24
    42b8:	09 f4       	brne	.+2      	; 0x42bc <lora_driver_sendUploadMessage+0xfa>
    42ba:	47 c0       	rjmp	.+142    	; 0x434a <lora_driver_sendUploadMessage+0x188>
    42bc:	8b e4       	ldi	r24, 0x4B	; 75
    42be:	97 e1       	ldi	r25, 0x17	; 23
    42c0:	23 de       	rcall	.-954    	; 0x3f08 <_reply2ReturnCode>
    42c2:	8e 30       	cpi	r24, 0x0E	; 14
    42c4:	09 f0       	breq	.+2      	; 0x42c8 <lora_driver_sendUploadMessage+0x106>
    42c6:	42 c0       	rjmp	.+132    	; 0x434c <lora_driver_sendUploadMessage+0x18a>
    42c8:	87 e0       	ldi	r24, 0x07	; 7
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <_downlinkMessageBuffer>
    42d0:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <_downlinkMessageBuffer+0x1>
    42d4:	89 2b       	or	r24, r25
    42d6:	a9 f1       	breq	.+106    	; 0x4342 <lora_driver_sendUploadMessage+0x180>
    42d8:	be 01       	movw	r22, r28
    42da:	6f 5f       	subi	r22, 0xFF	; 255
    42dc:	7f 4f       	sbci	r23, 0xFF	; 255
    42de:	8b e4       	ldi	r24, 0x4B	; 75
    42e0:	97 e1       	ldi	r25, 0x17	; 23
    42e2:	68 d1       	rcall	.+720    	; 0x45b4 <decode_port_no>
    42e4:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <_downlinkPayload>
    42e8:	e9 81       	ldd	r30, Y+1	; 0x01
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	e5 5b       	subi	r30, 0xB5	; 181
    42ee:	f8 4e       	sbci	r31, 0xE8	; 232
    42f0:	df 01       	movw	r26, r30
    42f2:	0d 90       	ld	r0, X+
    42f4:	00 20       	and	r0, r0
    42f6:	e9 f7       	brne	.-6      	; 0x42f2 <lora_driver_sendUploadMessage+0x130>
    42f8:	11 97       	sbiw	r26, 0x01	; 1
    42fa:	ae 1b       	sub	r26, r30
    42fc:	bf 0b       	sbc	r27, r31
    42fe:	aa 23       	and	r26, r26
    4300:	91 f0       	breq	.+36     	; 0x4326 <lora_driver_sendUploadMessage+0x164>
    4302:	bb 27       	eor	r27, r27
    4304:	cd 01       	movw	r24, r26
    4306:	01 97       	sbiw	r24, 0x01	; 1
    4308:	9c 01       	movw	r18, r24
    430a:	12 f4       	brpl	.+4      	; 0x4310 <lora_driver_sendUploadMessage+0x14e>
    430c:	2f 5f       	subi	r18, 0xFF	; 255
    430e:	3f 4f       	sbci	r19, 0xFF	; 255
    4310:	35 95       	asr	r19
    4312:	27 95       	ror	r18
    4314:	20 93 c7 16 	sts	0x16C7, r18	; 0x8016c7 <_downlinkPayload+0x1>
    4318:	af 01       	movw	r20, r30
    431a:	4f 5f       	subi	r20, 0xFF	; 255
    431c:	5f 4f       	sbci	r21, 0xFF	; 255
    431e:	64 e1       	ldi	r22, 0x14	; 20
    4320:	88 ec       	ldi	r24, 0xC8	; 200
    4322:	96 e1       	ldi	r25, 0x16	; 22
    4324:	73 d1       	rcall	.+742    	; 0x460c <decode_hexadecimal_string_bytes>
    4326:	01 e0       	ldi	r16, 0x01	; 1
    4328:	10 e0       	ldi	r17, 0x00	; 0
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	46 e1       	ldi	r20, 0x16	; 22
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	66 ec       	ldi	r22, 0xC6	; 198
    4334:	76 e1       	ldi	r23, 0x16	; 22
    4336:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <_downlinkMessageBuffer>
    433a:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <_downlinkMessageBuffer+0x1>
    433e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <xStreamBufferSend>
    4342:	8e e0       	ldi	r24, 0x0E	; 14
    4344:	03 c0       	rjmp	.+6      	; 0x434c <lora_driver_sendUploadMessage+0x18a>
    4346:	84 e1       	ldi	r24, 0x14	; 20
    4348:	01 c0       	rjmp	.+2      	; 0x434c <lora_driver_sendUploadMessage+0x18a>
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	0f 90       	pop	r0
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	08 95       	ret

00004358 <lora_driver_setAdaptiveDataRate>:
    4358:	81 30       	cpi	r24, 0x01	; 1
    435a:	19 f0       	breq	.+6      	; 0x4362 <lora_driver_setAdaptiveDataRate+0xa>
    435c:	6e eb       	ldi	r22, 0xBE	; 190
    435e:	75 e0       	ldi	r23, 0x05	; 5
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <lora_driver_setAdaptiveDataRate+0xe>
    4362:	67 e9       	ldi	r22, 0x97	; 151
    4364:	76 e0       	ldi	r23, 0x06	; 6
    4366:	82 ec       	ldi	r24, 0xC2	; 194
    4368:	95 e0       	ldi	r25, 0x05	; 5
    436a:	43 ce       	rjmp	.-890    	; 0x3ff2 <_uploadMessageRc>
    436c:	08 95       	ret

0000436e <lora_driver_setReceiveDelay>:
    436e:	9f 93       	push	r25
    4370:	8f 93       	push	r24
    4372:	83 ef       	ldi	r24, 0xF3	; 243
    4374:	95 e0       	ldi	r25, 0x05	; 5
    4376:	9f 93       	push	r25
    4378:	8f 93       	push	r24
    437a:	8e e1       	ldi	r24, 0x1E	; 30
    437c:	97 e1       	ldi	r25, 0x17	; 23
    437e:	9f 93       	push	r25
    4380:	8f 93       	push	r24
    4382:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <sprintf>
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	8e e1       	ldi	r24, 0x1E	; 30
    438c:	97 e1       	ldi	r25, 0x17	; 23
    438e:	31 de       	rcall	.-926    	; 0x3ff2 <_uploadMessageRc>
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0
    439c:	08 95       	ret

0000439e <lora_driver_configureToEu868>:
    439e:	2f 92       	push	r2
    43a0:	3f 92       	push	r3
    43a2:	4f 92       	push	r4
    43a4:	5f 92       	push	r5
    43a6:	6f 92       	push	r6
    43a8:	7f 92       	push	r7
    43aa:	8f 92       	push	r8
    43ac:	9f 92       	push	r9
    43ae:	af 92       	push	r10
    43b0:	bf 92       	push	r11
    43b2:	cf 92       	push	r12
    43b4:	df 92       	push	r13
    43b6:	ef 92       	push	r14
    43b8:	ff 92       	push	r15
    43ba:	0f 93       	push	r16
    43bc:	1f 93       	push	r17
    43be:	cf 93       	push	r28
    43c0:	df 93       	push	r29
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
    43c6:	a0 97       	sbiw	r28, 0x20	; 32
    43c8:	0f b6       	in	r0, 0x3f	; 63
    43ca:	f8 94       	cli
    43cc:	de bf       	out	0x3e, r29	; 62
    43ce:	0f be       	out	0x3f, r0	; 63
    43d0:	cd bf       	out	0x3d, r28	; 61
    43d2:	60 e2       	ldi	r22, 0x20	; 32
    43d4:	76 e0       	ldi	r23, 0x06	; 6
    43d6:	8c e2       	ldi	r24, 0x2C	; 44
    43d8:	96 e0       	ldi	r25, 0x06	; 6
    43da:	3c dd       	rcall	.-1416   	; 0x3e54 <_uploadMessage>
    43dc:	95 dd       	rcall	.-1238   	; 0x3f08 <_reply2ReturnCode>
    43de:	81 11       	cpse	r24, r1
    43e0:	a3 c0       	rjmp	.+326    	; 0x4528 <lora_driver_configureToEu868+0x18a>
    43e2:	80 e2       	ldi	r24, 0x20	; 32
    43e4:	e6 e2       	ldi	r30, 0x26	; 38
    43e6:	f2 e0       	ldi	r31, 0x02	; 2
    43e8:	de 01       	movw	r26, r28
    43ea:	11 96       	adiw	r26, 0x01	; 1
    43ec:	01 90       	ld	r0, Z+
    43ee:	0d 92       	st	X+, r0
    43f0:	8a 95       	dec	r24
    43f2:	e1 f7       	brne	.-8      	; 0x43ec <lora_driver_configureToEu868+0x4e>
    43f4:	9e 01       	movw	r18, r28
    43f6:	2f 5f       	subi	r18, 0xFF	; 255
    43f8:	3f 4f       	sbci	r19, 0xFF	; 255
    43fa:	69 01       	movw	r12, r18
    43fc:	e1 2c       	mov	r14, r1
    43fe:	f1 2c       	mov	r15, r1
    4400:	0f 2e       	mov	r0, r31
    4402:	f8 e3       	ldi	r31, 0x38	; 56
    4404:	af 2e       	mov	r10, r31
    4406:	f6 e0       	ldi	r31, 0x06	; 6
    4408:	bf 2e       	mov	r11, r31
    440a:	f0 2d       	mov	r31, r0
    440c:	0e e1       	ldi	r16, 0x1E	; 30
    440e:	17 e1       	ldi	r17, 0x17	; 23
    4410:	0f 2e       	mov	r0, r31
    4412:	f1 e5       	ldi	r31, 0x51	; 81
    4414:	4f 2e       	mov	r4, r31
    4416:	f6 e0       	ldi	r31, 0x06	; 6
    4418:	5f 2e       	mov	r5, r31
    441a:	f0 2d       	mov	r31, r0
    441c:	0f 2e       	mov	r0, r31
    441e:	f8 e6       	ldi	r31, 0x68	; 104
    4420:	8f 2e       	mov	r8, r31
    4422:	f6 e0       	ldi	r31, 0x06	; 6
    4424:	9f 2e       	mov	r9, r31
    4426:	f0 2d       	mov	r31, r0
    4428:	0f 2e       	mov	r0, r31
    442a:	f2 e8       	ldi	r31, 0x82	; 130
    442c:	6f 2e       	mov	r6, r31
    442e:	f6 e0       	ldi	r31, 0x06	; 6
    4430:	7f 2e       	mov	r7, r31
    4432:	f0 2d       	mov	r31, r0
    4434:	3e 2c       	mov	r3, r14
    4436:	2f 2c       	mov	r2, r15
    4438:	ff 92       	push	r15
    443a:	ef 92       	push	r14
    443c:	bf 92       	push	r11
    443e:	af 92       	push	r10
    4440:	1f 93       	push	r17
    4442:	0f 93       	push	r16
    4444:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <sprintf>
    4448:	60 e0       	ldi	r22, 0x00	; 0
    444a:	70 e0       	ldi	r23, 0x00	; 0
    444c:	c8 01       	movw	r24, r16
    444e:	02 dd       	rcall	.-1532   	; 0x3e54 <_uploadMessage>
    4450:	5b dd       	rcall	.-1354   	; 0x3f08 <_reply2ReturnCode>
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	81 11       	cpse	r24, r1
    4460:	63 c0       	rjmp	.+198    	; 0x4528 <lora_driver_configureToEu868+0x18a>
    4462:	32 e0       	ldi	r19, 0x02	; 2
    4464:	3e 15       	cp	r19, r14
    4466:	e8 f4       	brcc	.+58     	; 0x44a2 <lora_driver_configureToEu868+0x104>
    4468:	f6 01       	movw	r30, r12
    446a:	83 81       	ldd	r24, Z+3	; 0x03
    446c:	8f 93       	push	r24
    446e:	82 81       	ldd	r24, Z+2	; 0x02
    4470:	8f 93       	push	r24
    4472:	81 81       	ldd	r24, Z+1	; 0x01
    4474:	8f 93       	push	r24
    4476:	80 81       	ld	r24, Z
    4478:	8f 93       	push	r24
    447a:	ff 92       	push	r15
    447c:	ef 92       	push	r14
    447e:	5f 92       	push	r5
    4480:	4f 92       	push	r4
    4482:	1f 93       	push	r17
    4484:	0f 93       	push	r16
    4486:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <sprintf>
    448a:	60 e0       	ldi	r22, 0x00	; 0
    448c:	70 e0       	ldi	r23, 0x00	; 0
    448e:	c8 01       	movw	r24, r16
    4490:	e1 dc       	rcall	.-1598   	; 0x3e54 <_uploadMessage>
    4492:	3a dd       	rcall	.-1420   	; 0x3f08 <_reply2ReturnCode>
    4494:	0f b6       	in	r0, 0x3f	; 63
    4496:	f8 94       	cli
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	0f be       	out	0x3f, r0	; 63
    449c:	cd bf       	out	0x3d, r28	; 61
    449e:	81 11       	cpse	r24, r1
    44a0:	43 c0       	rjmp	.+134    	; 0x4528 <lora_driver_configureToEu868+0x18a>
    44a2:	2f 92       	push	r2
    44a4:	3f 92       	push	r3
    44a6:	9f 92       	push	r9
    44a8:	8f 92       	push	r8
    44aa:	1f 93       	push	r17
    44ac:	0f 93       	push	r16
    44ae:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <sprintf>
    44b2:	60 e0       	ldi	r22, 0x00	; 0
    44b4:	70 e0       	ldi	r23, 0x00	; 0
    44b6:	c8 01       	movw	r24, r16
    44b8:	cd dc       	rcall	.-1638   	; 0x3e54 <_uploadMessage>
    44ba:	26 dd       	rcall	.-1460   	; 0x3f08 <_reply2ReturnCode>
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	81 11       	cpse	r24, r1
    44ca:	2e c0       	rjmp	.+92     	; 0x4528 <lora_driver_configureToEu868+0x18a>
    44cc:	2f 92       	push	r2
    44ce:	3f 92       	push	r3
    44d0:	7f 92       	push	r7
    44d2:	6f 92       	push	r6
    44d4:	1f 93       	push	r17
    44d6:	0f 93       	push	r16
    44d8:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <sprintf>
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	c8 01       	movw	r24, r16
    44e2:	b8 dc       	rcall	.-1680   	; 0x3e54 <_uploadMessage>
    44e4:	11 dd       	rcall	.-1502   	; 0x3f08 <_reply2ReturnCode>
    44e6:	0f 90       	pop	r0
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	81 11       	cpse	r24, r1
    44f4:	19 c0       	rjmp	.+50     	; 0x4528 <lora_driver_configureToEu868+0x18a>
    44f6:	3f ef       	ldi	r19, 0xFF	; 255
    44f8:	e3 1a       	sub	r14, r19
    44fa:	f3 0a       	sbc	r15, r19
    44fc:	84 e0       	ldi	r24, 0x04	; 4
    44fe:	c8 0e       	add	r12, r24
    4500:	d1 1c       	adc	r13, r1
    4502:	98 e0       	ldi	r25, 0x08	; 8
    4504:	e9 16       	cp	r14, r25
    4506:	f1 04       	cpc	r15, r1
    4508:	09 f0       	breq	.+2      	; 0x450c <lora_driver_configureToEu868+0x16e>
    450a:	94 cf       	rjmp	.-216    	; 0x4434 <lora_driver_configureToEu868+0x96>
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	70 e0       	ldi	r23, 0x00	; 0
    4510:	8a e9       	ldi	r24, 0x9A	; 154
    4512:	96 e0       	ldi	r25, 0x06	; 6
    4514:	9f dc       	rcall	.-1730   	; 0x3e54 <_uploadMessage>
    4516:	f8 dc       	rcall	.-1552   	; 0x3f08 <_reply2ReturnCode>
    4518:	81 11       	cpse	r24, r1
    451a:	06 c0       	rjmp	.+12     	; 0x4528 <lora_driver_configureToEu868+0x18a>
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	70 e0       	ldi	r23, 0x00	; 0
    4520:	8b ea       	ldi	r24, 0xAB	; 171
    4522:	96 e0       	ldi	r25, 0x06	; 6
    4524:	97 dc       	rcall	.-1746   	; 0x3e54 <_uploadMessage>
    4526:	f0 dc       	rcall	.-1568   	; 0x3f08 <_reply2ReturnCode>
    4528:	a0 96       	adiw	r28, 0x20	; 32
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	ff 90       	pop	r15
    453e:	ef 90       	pop	r14
    4540:	df 90       	pop	r13
    4542:	cf 90       	pop	r12
    4544:	bf 90       	pop	r11
    4546:	af 90       	pop	r10
    4548:	9f 90       	pop	r9
    454a:	8f 90       	pop	r8
    454c:	7f 90       	pop	r7
    454e:	6f 90       	pop	r6
    4550:	5f 90       	pop	r5
    4552:	4f 90       	pop	r4
    4554:	3f 90       	pop	r3
    4556:	2f 90       	pop	r2
    4558:	08 95       	ret

0000455a <lora_driver_setOtaaIdentity>:
    455a:	ef 92       	push	r14
    455c:	ff 92       	push	r15
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	ec 01       	movw	r28, r24
    4568:	8b 01       	movw	r16, r22
    456a:	7a 01       	movw	r14, r20
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	f4 de       	rcall	.-536    	; 0x4358 <lora_driver_setAdaptiveDataRate>
    4570:	81 11       	cpse	r24, r1
    4572:	0d c0       	rjmp	.+26     	; 0x458e <lora_driver_setOtaaIdentity+0x34>
    4574:	ce 01       	movw	r24, r28
    4576:	d4 dd       	rcall	.-1112   	; 0x4120 <lora_driver_setApplicationIdentifier>
    4578:	81 11       	cpse	r24, r1
    457a:	09 c0       	rjmp	.+18     	; 0x458e <lora_driver_setOtaaIdentity+0x34>
    457c:	c8 01       	movw	r24, r16
    457e:	e1 dd       	rcall	.-1086   	; 0x4142 <lora_driver_setApplicationKey>
    4580:	81 11       	cpse	r24, r1
    4582:	05 c0       	rjmp	.+10     	; 0x458e <lora_driver_setOtaaIdentity+0x34>
    4584:	c7 01       	movw	r24, r14
    4586:	bb dd       	rcall	.-1162   	; 0x40fe <lora_driver_setDeviceIdentifier>
    4588:	81 11       	cpse	r24, r1
    458a:	01 c0       	rjmp	.+2      	; 0x458e <lora_driver_setOtaaIdentity+0x34>
    458c:	eb dd       	rcall	.-1066   	; 0x4164 <lora_driver_saveMac>
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	08 95       	ret

0000459c <lora_driver_mapReturnCodeToText>:
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	fc 01       	movw	r30, r24
    45a0:	ee 0f       	add	r30, r30
    45a2:	ff 1f       	adc	r31, r31
    45a4:	8e 0f       	add	r24, r30
    45a6:	9f 1f       	adc	r25, r31
    45a8:	fc 01       	movw	r30, r24
    45aa:	ec 58       	subi	r30, 0x8C	; 140
    45ac:	f8 4f       	sbci	r31, 0xF8	; 248
    45ae:	81 81       	ldd	r24, Z+1	; 0x01
    45b0:	92 81       	ldd	r25, Z+2	; 0x02
    45b2:	08 95       	ret

000045b4 <decode_port_no>:
    45b4:	dc 01       	movw	r26, r24
    45b6:	00 97       	sbiw	r24, 0x00	; 0
    45b8:	29 f1       	breq	.+74     	; 0x4604 <decode_port_no+0x50>
    45ba:	fb 01       	movw	r30, r22
    45bc:	20 81       	ld	r18, Z
    45be:	fc 01       	movw	r30, r24
    45c0:	01 90       	ld	r0, Z+
    45c2:	00 20       	and	r0, r0
    45c4:	e9 f7       	brne	.-6      	; 0x45c0 <decode_port_no+0xc>
    45c6:	31 97       	sbiw	r30, 0x01	; 1
    45c8:	e8 1b       	sub	r30, r24
    45ca:	f9 0b       	sbc	r31, r25
    45cc:	82 2f       	mov	r24, r18
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	e8 17       	cp	r30, r24
    45d2:	f9 07       	cpc	r31, r25
    45d4:	c8 f0       	brcs	.+50     	; 0x4608 <decode_port_no+0x54>
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	08 c0       	rjmp	.+16     	; 0x45ea <decode_port_no+0x36>
    45da:	88 0f       	add	r24, r24
    45dc:	38 2f       	mov	r19, r24
    45de:	33 0f       	add	r19, r19
    45e0:	33 0f       	add	r19, r19
    45e2:	83 0f       	add	r24, r19
    45e4:	80 53       	subi	r24, 0x30	; 48
    45e6:	89 0f       	add	r24, r25
    45e8:	2f 5f       	subi	r18, 0xFF	; 255
    45ea:	fd 01       	movw	r30, r26
    45ec:	e2 0f       	add	r30, r18
    45ee:	f1 1d       	adc	r31, r1
    45f0:	90 81       	ld	r25, Z
    45f2:	30 ed       	ldi	r19, 0xD0	; 208
    45f4:	39 0f       	add	r19, r25
    45f6:	3a 30       	cpi	r19, 0x0A	; 10
    45f8:	10 f4       	brcc	.+4      	; 0x45fe <decode_port_no+0x4a>
    45fa:	91 11       	cpse	r25, r1
    45fc:	ee cf       	rjmp	.-36     	; 0x45da <decode_port_no+0x26>
    45fe:	fb 01       	movw	r30, r22
    4600:	20 83       	st	Z, r18
    4602:	08 95       	ret
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	08 95       	ret
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	08 95       	ret

0000460c <decode_hexadecimal_string_bytes>:
    460c:	0f 93       	push	r16
    460e:	1f 93       	push	r17
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	dc 01       	movw	r26, r24
    4616:	ea 01       	movw	r28, r20
    4618:	20 97       	sbiw	r28, 0x00	; 0
    461a:	e1 f1       	breq	.+120    	; 0x4694 <decode_hexadecimal_string_bytes+0x88>
    461c:	fa 01       	movw	r30, r20
    461e:	01 90       	ld	r0, Z+
    4620:	00 20       	and	r0, r0
    4622:	e9 f7       	brne	.-6      	; 0x461e <decode_hexadecimal_string_bytes+0x12>
    4624:	31 97       	sbiw	r30, 0x01	; 1
    4626:	e4 1b       	sub	r30, r20
    4628:	f5 0b       	sbc	r31, r21
    462a:	32 97       	sbiw	r30, 0x02	; 2
    462c:	10 f5       	brcc	.+68     	; 0x4672 <decode_hexadecimal_string_bytes+0x66>
    462e:	32 c0       	rjmp	.+100    	; 0x4694 <decode_hexadecimal_string_bytes+0x88>
    4630:	8d 01       	movw	r16, r26
    4632:	04 0f       	add	r16, r20
    4634:	15 1f       	adc	r17, r21
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	ae 01       	movw	r20, r28
    463a:	42 0f       	add	r20, r18
    463c:	53 1f       	adc	r21, r19
    463e:	fa 01       	movw	r30, r20
    4640:	90 81       	ld	r25, Z
    4642:	91 34       	cpi	r25, 0x41	; 65
    4644:	28 f0       	brcs	.+10     	; 0x4650 <decode_hexadecimal_string_bytes+0x44>
    4646:	97 53       	subi	r25, 0x37	; 55
    4648:	59 2f       	mov	r21, r25
    464a:	52 95       	swap	r21
    464c:	50 7f       	andi	r21, 0xF0	; 240
    464e:	03 c0       	rjmp	.+6      	; 0x4656 <decode_hexadecimal_string_bytes+0x4a>
    4650:	59 2f       	mov	r21, r25
    4652:	52 95       	swap	r21
    4654:	50 7f       	andi	r21, 0xF0	; 240
    4656:	2c 0f       	add	r18, r28
    4658:	3d 1f       	adc	r19, r29
    465a:	f9 01       	movw	r30, r18
    465c:	91 81       	ldd	r25, Z+1	; 0x01
    465e:	91 34       	cpi	r25, 0x41	; 65
    4660:	10 f0       	brcs	.+4      	; 0x4666 <decode_hexadecimal_string_bytes+0x5a>
    4662:	97 53       	subi	r25, 0x37	; 55
    4664:	01 c0       	rjmp	.+2      	; 0x4668 <decode_hexadecimal_string_bytes+0x5c>
    4666:	90 53       	subi	r25, 0x30	; 48
    4668:	95 0f       	add	r25, r21
    466a:	f8 01       	movw	r30, r16
    466c:	90 83       	st	Z, r25
    466e:	8f 5f       	subi	r24, 0xFF	; 255
    4670:	01 c0       	rjmp	.+2      	; 0x4674 <decode_hexadecimal_string_bytes+0x68>
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	28 2f       	mov	r18, r24
    4676:	22 0f       	add	r18, r18
    4678:	48 2f       	mov	r20, r24
    467a:	50 e0       	ldi	r21, 0x00	; 0
    467c:	fe 01       	movw	r30, r28
    467e:	01 90       	ld	r0, Z+
    4680:	00 20       	and	r0, r0
    4682:	e9 f7       	brne	.-6      	; 0x467e <decode_hexadecimal_string_bytes+0x72>
    4684:	31 97       	sbiw	r30, 0x01	; 1
    4686:	ec 1b       	sub	r30, r28
    4688:	fd 0b       	sbc	r31, r29
    468a:	4e 17       	cp	r20, r30
    468c:	5f 07       	cpc	r21, r31
    468e:	10 f4       	brcc	.+4      	; 0x4694 <decode_hexadecimal_string_bytes+0x88>
    4690:	86 13       	cpse	r24, r22
    4692:	ce cf       	rjmp	.-100    	; 0x4630 <decode_hexadecimal_string_bytes+0x24>
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	1f 91       	pop	r17
    469a:	0f 91       	pop	r16
    469c:	08 95       	ret

0000469e <mh_z19_takeMeassuring>:
    469e:	cf 93       	push	r28
    46a0:	df 93       	push	r29
    46a2:	cd b7       	in	r28, 0x3d	; 61
    46a4:	de b7       	in	r29, 0x3e	; 62
    46a6:	29 97       	sbiw	r28, 0x09	; 9
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	f8 94       	cli
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	0f be       	out	0x3f, r0	; 63
    46b0:	cd bf       	out	0x3d, r28	; 61
    46b2:	89 e0       	ldi	r24, 0x09	; 9
    46b4:	e6 e4       	ldi	r30, 0x46	; 70
    46b6:	f2 e0       	ldi	r31, 0x02	; 2
    46b8:	9e 01       	movw	r18, r28
    46ba:	2f 5f       	subi	r18, 0xFF	; 255
    46bc:	3f 4f       	sbci	r19, 0xFF	; 255
    46be:	d9 01       	movw	r26, r18
    46c0:	01 90       	ld	r0, Z+
    46c2:	0d 92       	st	X+, r0
    46c4:	8a 95       	dec	r24
    46c6:	e1 f7       	brne	.-8      	; 0x46c0 <mh_z19_takeMeassuring+0x22>
    46c8:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <_ppm+0x1>
    46cc:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <_ppm>
    46d0:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serial>
    46d4:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serial+0x1>
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	31 f0       	breq	.+12     	; 0x46e8 <mh_z19_takeMeassuring+0x4a>
    46dc:	42 2f       	mov	r20, r18
    46de:	53 2f       	mov	r21, r19
    46e0:	69 e0       	ldi	r22, 0x09	; 9
    46e2:	ea d0       	rcall	.+468    	; 0x48b8 <serial_sendBytes>
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	01 c0       	rjmp	.+2      	; 0x46ea <mh_z19_takeMeassuring+0x4c>
    46e8:	82 e0       	ldi	r24, 0x02	; 2
    46ea:	29 96       	adiw	r28, 0x09	; 9
    46ec:	0f b6       	in	r0, 0x3f	; 63
    46ee:	f8 94       	cli
    46f0:	de bf       	out	0x3e, r29	; 62
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	df 91       	pop	r29
    46f8:	cf 91       	pop	r28
    46fa:	08 95       	ret

000046fc <mh_z19_getCo2Ppm>:
    46fc:	20 91 78 17 	lds	r18, 0x1778	; 0x801778 <_ppm>
    4700:	30 91 79 17 	lds	r19, 0x1779	; 0x801779 <_ppm+0x1>
    4704:	21 15       	cp	r18, r1
    4706:	31 05       	cpc	r19, r1
    4708:	29 f4       	brne	.+10     	; 0x4714 <mh_z19_getCo2Ppm+0x18>
    470a:	fc 01       	movw	r30, r24
    470c:	11 82       	std	Z+1, r1	; 0x01
    470e:	10 82       	st	Z, r1
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	08 95       	ret
    4714:	fc 01       	movw	r30, r24
    4716:	31 83       	std	Z+1, r19	; 0x01
    4718:	20 83       	st	Z, r18
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	08 95       	ret

0000471e <serial_create>:
    471e:	2f 92       	push	r2
    4720:	3f 92       	push	r3
    4722:	4f 92       	push	r4
    4724:	5f 92       	push	r5
    4726:	6f 92       	push	r6
    4728:	7f 92       	push	r7
    472a:	8f 92       	push	r8
    472c:	9f 92       	push	r9
    472e:	af 92       	push	r10
    4730:	cf 92       	push	r12
    4732:	ef 92       	push	r14
    4734:	ff 92       	push	r15
    4736:	0f 93       	push	r16
    4738:	1f 93       	push	r17
    473a:	cf 93       	push	r28
    473c:	df 93       	push	r29
    473e:	cd b7       	in	r28, 0x3d	; 61
    4740:	de b7       	in	r29, 0x3e	; 62
    4742:	f8 2e       	mov	r15, r24
    4744:	2a 01       	movw	r4, r20
    4746:	3b 01       	movw	r6, r22
    4748:	88 e0       	ldi	r24, 0x08	; 8
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <malloc>
    4750:	8c 01       	movw	r16, r24
    4752:	8f 2d       	mov	r24, r15
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	fc 01       	movw	r30, r24
    4758:	ee 0f       	add	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	e4 58       	subi	r30, 0x84	; 132
    475e:	f8 4e       	sbci	r31, 0xE8	; 232
    4760:	11 83       	std	Z+1, r17	; 0x01
    4762:	00 83       	st	Z, r16
    4764:	01 15       	cp	r16, r1
    4766:	11 05       	cpc	r17, r1
    4768:	09 f4       	brne	.+2      	; 0x476c <serial_create+0x4e>
    476a:	69 c0       	rjmp	.+210    	; 0x483e <serial_create+0x120>
    476c:	88 0f       	add	r24, r24
    476e:	99 1f       	adc	r25, r25
    4770:	fc 01       	movw	r30, r24
    4772:	e1 5f       	subi	r30, 0xF1	; 241
    4774:	fd 4f       	sbci	r31, 0xFD	; 253
    4776:	80 81       	ld	r24, Z
    4778:	91 81       	ldd	r25, Z+1	; 0x01
    477a:	d8 01       	movw	r26, r16
    477c:	8d 93       	st	X+, r24
    477e:	9c 93       	st	X, r25
    4780:	8c 2d       	mov	r24, r12
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	88 0f       	add	r24, r24
    4786:	99 1f       	adc	r25, r25
    4788:	88 0f       	add	r24, r24
    478a:	99 1f       	adc	r25, r25
    478c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <malloc>
    4790:	1c 01       	movw	r2, r24
    4792:	86 e0       	ldi	r24, 0x06	; 6
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 a4 2c 	call	0x5948	; 0x5948 <malloc>
    479a:	7c 01       	movw	r14, r24
    479c:	4c 2d       	mov	r20, r12
    479e:	b1 01       	movw	r22, r2
    47a0:	f0 d6       	rcall	.+3552   	; 0x5582 <fifo_init>
    47a2:	f8 01       	movw	r30, r16
    47a4:	f5 82       	std	Z+5, r15	; 0x05
    47a6:	e4 82       	std	Z+4, r14	; 0x04
    47a8:	8a 2d       	mov	r24, r10
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	88 0f       	add	r24, r24
    47ae:	99 1f       	adc	r25, r25
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	0e 94 a4 2c 	call	0x5948	; 0x5948 <malloc>
    47b8:	1c 01       	movw	r2, r24
    47ba:	86 e0       	ldi	r24, 0x06	; 6
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	0e 94 a4 2c 	call	0x5948	; 0x5948 <malloc>
    47c2:	7c 01       	movw	r14, r24
    47c4:	4a 2d       	mov	r20, r10
    47c6:	b1 01       	movw	r22, r2
    47c8:	dc d6       	rcall	.+3512   	; 0x5582 <fifo_init>
    47ca:	d8 01       	movw	r26, r16
    47cc:	13 96       	adiw	r26, 0x03	; 3
    47ce:	fc 92       	st	X, r15
    47d0:	ee 92       	st	-X, r14
    47d2:	12 97       	sbiw	r26, 0x02	; 2
    47d4:	17 96       	adiw	r26, 0x07	; 7
    47d6:	9c 92       	st	X, r9
    47d8:	8e 92       	st	-X, r8
    47da:	16 97       	sbiw	r26, 0x06	; 6
    47dc:	ff b6       	in	r15, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	ed 91       	ld	r30, X+
    47e2:	fc 91       	ld	r31, X
    47e4:	11 97       	sbiw	r26, 0x01	; 1
    47e6:	36 97       	sbiw	r30, 0x06	; 6
    47e8:	80 81       	ld	r24, Z
    47ea:	82 60       	ori	r24, 0x02	; 2
    47ec:	80 83       	st	Z, r24
    47ee:	8d 90       	ld	r8, X+
    47f0:	9c 90       	ld	r9, X
    47f2:	c3 01       	movw	r24, r6
    47f4:	b2 01       	movw	r22, r4
    47f6:	b3 d7       	rcall	.+3942   	; 0x575e <__floatunsisf>
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e0       	ldi	r20, 0x00	; 0
    47fe:	51 e4       	ldi	r21, 0x41	; 65
    4800:	0e 94 14 2c 	call	0x5828	; 0x5828 <__mulsf3>
    4804:	9b 01       	movw	r18, r22
    4806:	ac 01       	movw	r20, r24
    4808:	60 e0       	ldi	r22, 0x00	; 0
    480a:	74 e2       	ldi	r23, 0x24	; 36
    480c:	84 e7       	ldi	r24, 0x74	; 116
    480e:	9b e4       	ldi	r25, 0x4B	; 75
    4810:	3b d7       	rcall	.+3702   	; 0x5688 <__divsf3>
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e8       	ldi	r20, 0x80	; 128
    4818:	5f e3       	ldi	r21, 0x3F	; 63
    481a:	cf d6       	rcall	.+3486   	; 0x55ba <__subsf3>
    481c:	e5 d9       	rcall	.-3126   	; 0x3be8 <__fixunssfsi>
    481e:	f4 01       	movw	r30, r8
    4820:	32 97       	sbiw	r30, 0x02	; 2
    4822:	60 83       	st	Z, r22
    4824:	d8 01       	movw	r26, r16
    4826:	ed 91       	ld	r30, X+
    4828:	fc 91       	ld	r31, X
    482a:	11 97       	sbiw	r26, 0x01	; 1
    482c:	35 97       	sbiw	r30, 0x05	; 5
    482e:	88 e9       	ldi	r24, 0x98	; 152
    4830:	80 83       	st	Z, r24
    4832:	ed 91       	ld	r30, X+
    4834:	fc 91       	ld	r31, X
    4836:	34 97       	sbiw	r30, 0x04	; 4
    4838:	86 e0       	ldi	r24, 0x06	; 6
    483a:	80 83       	st	Z, r24
    483c:	ff be       	out	0x3f, r15	; 63
    483e:	c8 01       	movw	r24, r16
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	1f 91       	pop	r17
    4846:	0f 91       	pop	r16
    4848:	ff 90       	pop	r15
    484a:	ef 90       	pop	r14
    484c:	cf 90       	pop	r12
    484e:	af 90       	pop	r10
    4850:	9f 90       	pop	r9
    4852:	8f 90       	pop	r8
    4854:	7f 90       	pop	r7
    4856:	6f 90       	pop	r6
    4858:	5f 90       	pop	r5
    485a:	4f 90       	pop	r4
    485c:	3f 90       	pop	r3
    485e:	2f 90       	pop	r2
    4860:	08 95       	ret

00004862 <serial_sendByte>:
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    4866:	dc 01       	movw	r26, r24
    4868:	89 2b       	or	r24, r25
    486a:	01 f1       	breq	.+64     	; 0x48ac <serial_sendByte+0x4a>
    486c:	12 96       	adiw	r26, 0x02	; 2
    486e:	ed 91       	ld	r30, X+
    4870:	fc 91       	ld	r31, X
    4872:	13 97       	sbiw	r26, 0x03	; 3
    4874:	93 81       	ldd	r25, Z+3	; 0x03
    4876:	82 81       	ldd	r24, Z+2	; 0x02
    4878:	25 81       	ldd	r18, Z+5	; 0x05
    487a:	98 1b       	sub	r25, r24
    487c:	92 23       	and	r25, r18
    487e:	84 81       	ldd	r24, Z+4	; 0x04
    4880:	98 17       	cp	r25, r24
    4882:	b1 f0       	breq	.+44     	; 0x48b0 <serial_sendByte+0x4e>
    4884:	83 81       	ldd	r24, Z+3	; 0x03
    4886:	26 95       	lsr	r18
    4888:	28 23       	and	r18, r24
    488a:	c0 81       	ld	r28, Z
    488c:	d1 81       	ldd	r29, Z+1	; 0x01
    488e:	c2 0f       	add	r28, r18
    4890:	d1 1d       	adc	r29, r1
    4892:	68 83       	st	Y, r22
    4894:	8f 5f       	subi	r24, 0xFF	; 255
    4896:	95 81       	ldd	r25, Z+5	; 0x05
    4898:	89 23       	and	r24, r25
    489a:	83 83       	std	Z+3, r24	; 0x03
    489c:	ed 91       	ld	r30, X+
    489e:	fc 91       	ld	r31, X
    48a0:	35 97       	sbiw	r30, 0x05	; 5
    48a2:	80 81       	ld	r24, Z
    48a4:	80 62       	ori	r24, 0x20	; 32
    48a6:	80 83       	st	Z, r24
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	03 c0       	rjmp	.+6      	; 0x48b2 <serial_sendByte+0x50>
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	01 c0       	rjmp	.+2      	; 0x48b2 <serial_sendByte+0x50>
    48b0:	82 e0       	ldi	r24, 0x02	; 2
    48b2:	df 91       	pop	r29
    48b4:	cf 91       	pop	r28
    48b6:	08 95       	ret

000048b8 <serial_sendBytes>:
    48b8:	ef 92       	push	r14
    48ba:	ff 92       	push	r15
    48bc:	0f 93       	push	r16
    48be:	1f 93       	push	r17
    48c0:	cf 93       	push	r28
    48c2:	df 93       	push	r29
    48c4:	7c 01       	movw	r14, r24
    48c6:	00 97       	sbiw	r24, 0x00	; 0
    48c8:	09 f4       	brne	.+2      	; 0x48cc <serial_sendBytes+0x14>
    48ca:	41 c0       	rjmp	.+130    	; 0x494e <serial_sendBytes+0x96>
    48cc:	dc 01       	movw	r26, r24
    48ce:	12 96       	adiw	r26, 0x02	; 2
    48d0:	ed 91       	ld	r30, X+
    48d2:	fc 91       	ld	r31, X
    48d4:	13 97       	sbiw	r26, 0x03	; 3
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	82 81       	ldd	r24, Z+2	; 0x02
    48da:	98 1b       	sub	r25, r24
    48dc:	85 81       	ldd	r24, Z+5	; 0x05
    48de:	98 23       	and	r25, r24
    48e0:	84 81       	ldd	r24, Z+4	; 0x04
    48e2:	89 1b       	sub	r24, r25
    48e4:	86 17       	cp	r24, r22
    48e6:	a8 f1       	brcs	.+106    	; 0x4952 <serial_sendBytes+0x9a>
    48e8:	66 23       	and	r22, r22
    48ea:	41 f1       	breq	.+80     	; 0x493c <serial_sendBytes+0x84>
    48ec:	84 2f       	mov	r24, r20
    48ee:	95 2f       	mov	r25, r21
    48f0:	dc 01       	movw	r26, r24
    48f2:	61 50       	subi	r22, 0x01	; 1
    48f4:	46 2f       	mov	r20, r22
    48f6:	50 e0       	ldi	r21, 0x00	; 0
    48f8:	4f 5f       	subi	r20, 0xFF	; 255
    48fa:	5f 4f       	sbci	r21, 0xFF	; 255
    48fc:	48 0f       	add	r20, r24
    48fe:	59 1f       	adc	r21, r25
    4900:	e7 01       	movw	r28, r14
    4902:	ea 81       	ldd	r30, Y+2	; 0x02
    4904:	fb 81       	ldd	r31, Y+3	; 0x03
    4906:	93 81       	ldd	r25, Z+3	; 0x03
    4908:	82 81       	ldd	r24, Z+2	; 0x02
    490a:	25 81       	ldd	r18, Z+5	; 0x05
    490c:	98 1b       	sub	r25, r24
    490e:	92 23       	and	r25, r18
    4910:	84 81       	ldd	r24, Z+4	; 0x04
    4912:	98 17       	cp	r25, r24
    4914:	79 f0       	breq	.+30     	; 0x4934 <serial_sendBytes+0x7c>
    4916:	8c 91       	ld	r24, X
    4918:	93 81       	ldd	r25, Z+3	; 0x03
    491a:	26 95       	lsr	r18
    491c:	29 23       	and	r18, r25
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	8b 01       	movw	r16, r22
    4924:	02 0f       	add	r16, r18
    4926:	11 1d       	adc	r17, r1
    4928:	e8 01       	movw	r28, r16
    492a:	88 83       	st	Y, r24
    492c:	9f 5f       	subi	r25, 0xFF	; 255
    492e:	85 81       	ldd	r24, Z+5	; 0x05
    4930:	98 23       	and	r25, r24
    4932:	93 83       	std	Z+3, r25	; 0x03
    4934:	11 96       	adiw	r26, 0x01	; 1
    4936:	a4 17       	cp	r26, r20
    4938:	b5 07       	cpc	r27, r21
    493a:	11 f7       	brne	.-60     	; 0x4900 <serial_sendBytes+0x48>
    493c:	d7 01       	movw	r26, r14
    493e:	ed 91       	ld	r30, X+
    4940:	fc 91       	ld	r31, X
    4942:	35 97       	sbiw	r30, 0x05	; 5
    4944:	80 81       	ld	r24, Z
    4946:	80 62       	ori	r24, 0x20	; 32
    4948:	80 83       	st	Z, r24
    494a:	80 e0       	ldi	r24, 0x00	; 0
    494c:	03 c0       	rjmp	.+6      	; 0x4954 <serial_sendBytes+0x9c>
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <serial_sendBytes+0x9c>
    4952:	82 e0       	ldi	r24, 0x02	; 2
    4954:	df 91       	pop	r29
    4956:	cf 91       	pop	r28
    4958:	1f 91       	pop	r17
    495a:	0f 91       	pop	r16
    495c:	ff 90       	pop	r15
    495e:	ef 90       	pop	r14
    4960:	08 95       	ret

00004962 <serial_getByte>:
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	d1 f0       	breq	.+52     	; 0x499a <serial_getByte+0x38>
    4966:	dc 01       	movw	r26, r24
    4968:	14 96       	adiw	r26, 0x04	; 4
    496a:	ed 91       	ld	r30, X+
    496c:	fc 91       	ld	r31, X
    496e:	15 97       	sbiw	r26, 0x05	; 5
    4970:	93 81       	ldd	r25, Z+3	; 0x03
    4972:	82 81       	ldd	r24, Z+2	; 0x02
    4974:	98 17       	cp	r25, r24
    4976:	99 f0       	breq	.+38     	; 0x499e <serial_getByte+0x3c>
    4978:	92 81       	ldd	r25, Z+2	; 0x02
    497a:	85 81       	ldd	r24, Z+5	; 0x05
    497c:	86 95       	lsr	r24
    497e:	89 23       	and	r24, r25
    4980:	a0 81       	ld	r26, Z
    4982:	b1 81       	ldd	r27, Z+1	; 0x01
    4984:	a8 0f       	add	r26, r24
    4986:	b1 1d       	adc	r27, r1
    4988:	8c 91       	ld	r24, X
    498a:	db 01       	movw	r26, r22
    498c:	8c 93       	st	X, r24
    498e:	9f 5f       	subi	r25, 0xFF	; 255
    4990:	85 81       	ldd	r24, Z+5	; 0x05
    4992:	98 23       	and	r25, r24
    4994:	92 83       	std	Z+2, r25	; 0x02
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	08 95       	ret
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	08 95       	ret
    499e:	83 e0       	ldi	r24, 0x03	; 3
    49a0:	08 95       	ret

000049a2 <__vector_25>:
    49a2:	1f 92       	push	r1
    49a4:	0f 92       	push	r0
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	0f 92       	push	r0
    49aa:	11 24       	eor	r1, r1
    49ac:	0b b6       	in	r0, 0x3b	; 59
    49ae:	0f 92       	push	r0
    49b0:	2f 93       	push	r18
    49b2:	3f 93       	push	r19
    49b4:	4f 93       	push	r20
    49b6:	5f 93       	push	r21
    49b8:	6f 93       	push	r22
    49ba:	7f 93       	push	r23
    49bc:	8f 93       	push	r24
    49be:	9f 93       	push	r25
    49c0:	af 93       	push	r26
    49c2:	bf 93       	push	r27
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	ef 93       	push	r30
    49ca:	ff 93       	push	r31
    49cc:	a0 91 7c 17 	lds	r26, 0x177C	; 0x80177c <_ser_handle>
    49d0:	b0 91 7d 17 	lds	r27, 0x177D	; 0x80177d <_ser_handle+0x1>
    49d4:	10 97       	sbiw	r26, 0x00	; 0
    49d6:	11 f1       	breq	.+68     	; 0x4a1c <__vector_25+0x7a>
    49d8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    49dc:	14 96       	adiw	r26, 0x04	; 4
    49de:	ed 91       	ld	r30, X+
    49e0:	fc 91       	ld	r31, X
    49e2:	15 97       	sbiw	r26, 0x05	; 5
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	82 81       	ldd	r24, Z+2	; 0x02
    49e8:	25 81       	ldd	r18, Z+5	; 0x05
    49ea:	98 1b       	sub	r25, r24
    49ec:	92 23       	and	r25, r18
    49ee:	84 81       	ldd	r24, Z+4	; 0x04
    49f0:	98 17       	cp	r25, r24
    49f2:	61 f0       	breq	.+24     	; 0x4a0c <__vector_25+0x6a>
    49f4:	83 81       	ldd	r24, Z+3	; 0x03
    49f6:	26 95       	lsr	r18
    49f8:	28 23       	and	r18, r24
    49fa:	c0 81       	ld	r28, Z
    49fc:	d1 81       	ldd	r29, Z+1	; 0x01
    49fe:	c2 0f       	add	r28, r18
    4a00:	d1 1d       	adc	r29, r1
    4a02:	68 83       	st	Y, r22
    4a04:	8f 5f       	subi	r24, 0xFF	; 255
    4a06:	95 81       	ldd	r25, Z+5	; 0x05
    4a08:	89 23       	and	r24, r25
    4a0a:	83 83       	std	Z+3, r24	; 0x03
    4a0c:	16 96       	adiw	r26, 0x06	; 6
    4a0e:	ed 91       	ld	r30, X+
    4a10:	fc 91       	ld	r31, X
    4a12:	17 97       	sbiw	r26, 0x07	; 7
    4a14:	30 97       	sbiw	r30, 0x00	; 0
    4a16:	11 f0       	breq	.+4      	; 0x4a1c <__vector_25+0x7a>
    4a18:	cd 01       	movw	r24, r26
    4a1a:	19 95       	eicall
    4a1c:	ff 91       	pop	r31
    4a1e:	ef 91       	pop	r30
    4a20:	df 91       	pop	r29
    4a22:	cf 91       	pop	r28
    4a24:	bf 91       	pop	r27
    4a26:	af 91       	pop	r26
    4a28:	9f 91       	pop	r25
    4a2a:	8f 91       	pop	r24
    4a2c:	7f 91       	pop	r23
    4a2e:	6f 91       	pop	r22
    4a30:	5f 91       	pop	r21
    4a32:	4f 91       	pop	r20
    4a34:	3f 91       	pop	r19
    4a36:	2f 91       	pop	r18
    4a38:	0f 90       	pop	r0
    4a3a:	0b be       	out	0x3b, r0	; 59
    4a3c:	0f 90       	pop	r0
    4a3e:	0f be       	out	0x3f, r0	; 63
    4a40:	0f 90       	pop	r0
    4a42:	1f 90       	pop	r1
    4a44:	18 95       	reti

00004a46 <__vector_26>:
    4a46:	1f 92       	push	r1
    4a48:	0f 92       	push	r0
    4a4a:	0f b6       	in	r0, 0x3f	; 63
    4a4c:	0f 92       	push	r0
    4a4e:	11 24       	eor	r1, r1
    4a50:	0b b6       	in	r0, 0x3b	; 59
    4a52:	0f 92       	push	r0
    4a54:	2f 93       	push	r18
    4a56:	8f 93       	push	r24
    4a58:	9f 93       	push	r25
    4a5a:	af 93       	push	r26
    4a5c:	bf 93       	push	r27
    4a5e:	ef 93       	push	r30
    4a60:	ff 93       	push	r31
    4a62:	e0 91 7c 17 	lds	r30, 0x177C	; 0x80177c <_ser_handle>
    4a66:	f0 91 7d 17 	lds	r31, 0x177D	; 0x80177d <_ser_handle+0x1>
    4a6a:	30 97       	sbiw	r30, 0x00	; 0
    4a6c:	b9 f0       	breq	.+46     	; 0x4a9c <__vector_26+0x56>
    4a6e:	02 80       	ldd	r0, Z+2	; 0x02
    4a70:	f3 81       	ldd	r31, Z+3	; 0x03
    4a72:	e0 2d       	mov	r30, r0
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	82 81       	ldd	r24, Z+2	; 0x02
    4a78:	98 17       	cp	r25, r24
    4a7a:	b1 f0       	breq	.+44     	; 0x4aa8 <__vector_26+0x62>
    4a7c:	92 81       	ldd	r25, Z+2	; 0x02
    4a7e:	85 81       	ldd	r24, Z+5	; 0x05
    4a80:	28 2f       	mov	r18, r24
    4a82:	26 95       	lsr	r18
    4a84:	29 23       	and	r18, r25
    4a86:	a0 81       	ld	r26, Z
    4a88:	b1 81       	ldd	r27, Z+1	; 0x01
    4a8a:	a2 0f       	add	r26, r18
    4a8c:	b1 1d       	adc	r27, r1
    4a8e:	2c 91       	ld	r18, X
    4a90:	9f 5f       	subi	r25, 0xFF	; 255
    4a92:	89 23       	and	r24, r25
    4a94:	82 83       	std	Z+2, r24	; 0x02
    4a96:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4a9a:	0b c0       	rjmp	.+22     	; 0x4ab2 <__vector_26+0x6c>
    4a9c:	e1 ec       	ldi	r30, 0xC1	; 193
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	80 81       	ld	r24, Z
    4aa2:	8f 7d       	andi	r24, 0xDF	; 223
    4aa4:	80 83       	st	Z, r24
    4aa6:	05 c0       	rjmp	.+10     	; 0x4ab2 <__vector_26+0x6c>
    4aa8:	e1 ec       	ldi	r30, 0xC1	; 193
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	80 81       	ld	r24, Z
    4aae:	8f 7d       	andi	r24, 0xDF	; 223
    4ab0:	80 83       	st	Z, r24
    4ab2:	ff 91       	pop	r31
    4ab4:	ef 91       	pop	r30
    4ab6:	bf 91       	pop	r27
    4ab8:	af 91       	pop	r26
    4aba:	9f 91       	pop	r25
    4abc:	8f 91       	pop	r24
    4abe:	2f 91       	pop	r18
    4ac0:	0f 90       	pop	r0
    4ac2:	0b be       	out	0x3b, r0	; 59
    4ac4:	0f 90       	pop	r0
    4ac6:	0f be       	out	0x3f, r0	; 63
    4ac8:	0f 90       	pop	r0
    4aca:	1f 90       	pop	r1
    4acc:	18 95       	reti

00004ace <__vector_36>:
    4ace:	1f 92       	push	r1
    4ad0:	0f 92       	push	r0
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	0f 92       	push	r0
    4ad6:	11 24       	eor	r1, r1
    4ad8:	0b b6       	in	r0, 0x3b	; 59
    4ada:	0f 92       	push	r0
    4adc:	2f 93       	push	r18
    4ade:	3f 93       	push	r19
    4ae0:	4f 93       	push	r20
    4ae2:	5f 93       	push	r21
    4ae4:	6f 93       	push	r22
    4ae6:	7f 93       	push	r23
    4ae8:	8f 93       	push	r24
    4aea:	9f 93       	push	r25
    4aec:	af 93       	push	r26
    4aee:	bf 93       	push	r27
    4af0:	cf 93       	push	r28
    4af2:	df 93       	push	r29
    4af4:	ef 93       	push	r30
    4af6:	ff 93       	push	r31
    4af8:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <_ser_handle+0x2>
    4afc:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <_ser_handle+0x3>
    4b00:	10 97       	sbiw	r26, 0x00	; 0
    4b02:	11 f1       	breq	.+68     	; 0x4b48 <__vector_36+0x7a>
    4b04:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b08:	14 96       	adiw	r26, 0x04	; 4
    4b0a:	ed 91       	ld	r30, X+
    4b0c:	fc 91       	ld	r31, X
    4b0e:	15 97       	sbiw	r26, 0x05	; 5
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	82 81       	ldd	r24, Z+2	; 0x02
    4b14:	25 81       	ldd	r18, Z+5	; 0x05
    4b16:	98 1b       	sub	r25, r24
    4b18:	92 23       	and	r25, r18
    4b1a:	84 81       	ldd	r24, Z+4	; 0x04
    4b1c:	98 17       	cp	r25, r24
    4b1e:	61 f0       	breq	.+24     	; 0x4b38 <__vector_36+0x6a>
    4b20:	83 81       	ldd	r24, Z+3	; 0x03
    4b22:	26 95       	lsr	r18
    4b24:	28 23       	and	r18, r24
    4b26:	c0 81       	ld	r28, Z
    4b28:	d1 81       	ldd	r29, Z+1	; 0x01
    4b2a:	c2 0f       	add	r28, r18
    4b2c:	d1 1d       	adc	r29, r1
    4b2e:	68 83       	st	Y, r22
    4b30:	8f 5f       	subi	r24, 0xFF	; 255
    4b32:	95 81       	ldd	r25, Z+5	; 0x05
    4b34:	89 23       	and	r24, r25
    4b36:	83 83       	std	Z+3, r24	; 0x03
    4b38:	16 96       	adiw	r26, 0x06	; 6
    4b3a:	ed 91       	ld	r30, X+
    4b3c:	fc 91       	ld	r31, X
    4b3e:	17 97       	sbiw	r26, 0x07	; 7
    4b40:	30 97       	sbiw	r30, 0x00	; 0
    4b42:	11 f0       	breq	.+4      	; 0x4b48 <__vector_36+0x7a>
    4b44:	cd 01       	movw	r24, r26
    4b46:	19 95       	eicall
    4b48:	ff 91       	pop	r31
    4b4a:	ef 91       	pop	r30
    4b4c:	df 91       	pop	r29
    4b4e:	cf 91       	pop	r28
    4b50:	bf 91       	pop	r27
    4b52:	af 91       	pop	r26
    4b54:	9f 91       	pop	r25
    4b56:	8f 91       	pop	r24
    4b58:	7f 91       	pop	r23
    4b5a:	6f 91       	pop	r22
    4b5c:	5f 91       	pop	r21
    4b5e:	4f 91       	pop	r20
    4b60:	3f 91       	pop	r19
    4b62:	2f 91       	pop	r18
    4b64:	0f 90       	pop	r0
    4b66:	0b be       	out	0x3b, r0	; 59
    4b68:	0f 90       	pop	r0
    4b6a:	0f be       	out	0x3f, r0	; 63
    4b6c:	0f 90       	pop	r0
    4b6e:	1f 90       	pop	r1
    4b70:	18 95       	reti

00004b72 <__vector_37>:
    4b72:	1f 92       	push	r1
    4b74:	0f 92       	push	r0
    4b76:	0f b6       	in	r0, 0x3f	; 63
    4b78:	0f 92       	push	r0
    4b7a:	11 24       	eor	r1, r1
    4b7c:	0b b6       	in	r0, 0x3b	; 59
    4b7e:	0f 92       	push	r0
    4b80:	2f 93       	push	r18
    4b82:	8f 93       	push	r24
    4b84:	9f 93       	push	r25
    4b86:	af 93       	push	r26
    4b88:	bf 93       	push	r27
    4b8a:	ef 93       	push	r30
    4b8c:	ff 93       	push	r31
    4b8e:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <_ser_handle+0x2>
    4b92:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <_ser_handle+0x3>
    4b96:	30 97       	sbiw	r30, 0x00	; 0
    4b98:	b9 f0       	breq	.+46     	; 0x4bc8 <__vector_37+0x56>
    4b9a:	02 80       	ldd	r0, Z+2	; 0x02
    4b9c:	f3 81       	ldd	r31, Z+3	; 0x03
    4b9e:	e0 2d       	mov	r30, r0
    4ba0:	93 81       	ldd	r25, Z+3	; 0x03
    4ba2:	82 81       	ldd	r24, Z+2	; 0x02
    4ba4:	98 17       	cp	r25, r24
    4ba6:	b1 f0       	breq	.+44     	; 0x4bd4 <__vector_37+0x62>
    4ba8:	92 81       	ldd	r25, Z+2	; 0x02
    4baa:	85 81       	ldd	r24, Z+5	; 0x05
    4bac:	28 2f       	mov	r18, r24
    4bae:	26 95       	lsr	r18
    4bb0:	29 23       	and	r18, r25
    4bb2:	a0 81       	ld	r26, Z
    4bb4:	b1 81       	ldd	r27, Z+1	; 0x01
    4bb6:	a2 0f       	add	r26, r18
    4bb8:	b1 1d       	adc	r27, r1
    4bba:	2c 91       	ld	r18, X
    4bbc:	9f 5f       	subi	r25, 0xFF	; 255
    4bbe:	89 23       	and	r24, r25
    4bc0:	82 83       	std	Z+2, r24	; 0x02
    4bc2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4bc6:	0b c0       	rjmp	.+22     	; 0x4bde <__vector_37+0x6c>
    4bc8:	e9 ec       	ldi	r30, 0xC9	; 201
    4bca:	f0 e0       	ldi	r31, 0x00	; 0
    4bcc:	80 81       	ld	r24, Z
    4bce:	8f 7d       	andi	r24, 0xDF	; 223
    4bd0:	80 83       	st	Z, r24
    4bd2:	05 c0       	rjmp	.+10     	; 0x4bde <__vector_37+0x6c>
    4bd4:	e9 ec       	ldi	r30, 0xC9	; 201
    4bd6:	f0 e0       	ldi	r31, 0x00	; 0
    4bd8:	80 81       	ld	r24, Z
    4bda:	8f 7d       	andi	r24, 0xDF	; 223
    4bdc:	80 83       	st	Z, r24
    4bde:	ff 91       	pop	r31
    4be0:	ef 91       	pop	r30
    4be2:	bf 91       	pop	r27
    4be4:	af 91       	pop	r26
    4be6:	9f 91       	pop	r25
    4be8:	8f 91       	pop	r24
    4bea:	2f 91       	pop	r18
    4bec:	0f 90       	pop	r0
    4bee:	0b be       	out	0x3b, r0	; 59
    4bf0:	0f 90       	pop	r0
    4bf2:	0f be       	out	0x3f, r0	; 63
    4bf4:	0f 90       	pop	r0
    4bf6:	1f 90       	pop	r1
    4bf8:	18 95       	reti

00004bfa <__vector_51>:
    4bfa:	1f 92       	push	r1
    4bfc:	0f 92       	push	r0
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	0f 92       	push	r0
    4c02:	11 24       	eor	r1, r1
    4c04:	0b b6       	in	r0, 0x3b	; 59
    4c06:	0f 92       	push	r0
    4c08:	2f 93       	push	r18
    4c0a:	3f 93       	push	r19
    4c0c:	4f 93       	push	r20
    4c0e:	5f 93       	push	r21
    4c10:	6f 93       	push	r22
    4c12:	7f 93       	push	r23
    4c14:	8f 93       	push	r24
    4c16:	9f 93       	push	r25
    4c18:	af 93       	push	r26
    4c1a:	bf 93       	push	r27
    4c1c:	cf 93       	push	r28
    4c1e:	df 93       	push	r29
    4c20:	ef 93       	push	r30
    4c22:	ff 93       	push	r31
    4c24:	a0 91 80 17 	lds	r26, 0x1780	; 0x801780 <_ser_handle+0x4>
    4c28:	b0 91 81 17 	lds	r27, 0x1781	; 0x801781 <_ser_handle+0x5>
    4c2c:	10 97       	sbiw	r26, 0x00	; 0
    4c2e:	11 f1       	breq	.+68     	; 0x4c74 <__vector_51+0x7a>
    4c30:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c34:	14 96       	adiw	r26, 0x04	; 4
    4c36:	ed 91       	ld	r30, X+
    4c38:	fc 91       	ld	r31, X
    4c3a:	15 97       	sbiw	r26, 0x05	; 5
    4c3c:	93 81       	ldd	r25, Z+3	; 0x03
    4c3e:	82 81       	ldd	r24, Z+2	; 0x02
    4c40:	25 81       	ldd	r18, Z+5	; 0x05
    4c42:	98 1b       	sub	r25, r24
    4c44:	92 23       	and	r25, r18
    4c46:	84 81       	ldd	r24, Z+4	; 0x04
    4c48:	98 17       	cp	r25, r24
    4c4a:	61 f0       	breq	.+24     	; 0x4c64 <__vector_51+0x6a>
    4c4c:	83 81       	ldd	r24, Z+3	; 0x03
    4c4e:	26 95       	lsr	r18
    4c50:	28 23       	and	r18, r24
    4c52:	c0 81       	ld	r28, Z
    4c54:	d1 81       	ldd	r29, Z+1	; 0x01
    4c56:	c2 0f       	add	r28, r18
    4c58:	d1 1d       	adc	r29, r1
    4c5a:	68 83       	st	Y, r22
    4c5c:	8f 5f       	subi	r24, 0xFF	; 255
    4c5e:	95 81       	ldd	r25, Z+5	; 0x05
    4c60:	89 23       	and	r24, r25
    4c62:	83 83       	std	Z+3, r24	; 0x03
    4c64:	16 96       	adiw	r26, 0x06	; 6
    4c66:	ed 91       	ld	r30, X+
    4c68:	fc 91       	ld	r31, X
    4c6a:	17 97       	sbiw	r26, 0x07	; 7
    4c6c:	30 97       	sbiw	r30, 0x00	; 0
    4c6e:	11 f0       	breq	.+4      	; 0x4c74 <__vector_51+0x7a>
    4c70:	cd 01       	movw	r24, r26
    4c72:	19 95       	eicall
    4c74:	ff 91       	pop	r31
    4c76:	ef 91       	pop	r30
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	bf 91       	pop	r27
    4c7e:	af 91       	pop	r26
    4c80:	9f 91       	pop	r25
    4c82:	8f 91       	pop	r24
    4c84:	7f 91       	pop	r23
    4c86:	6f 91       	pop	r22
    4c88:	5f 91       	pop	r21
    4c8a:	4f 91       	pop	r20
    4c8c:	3f 91       	pop	r19
    4c8e:	2f 91       	pop	r18
    4c90:	0f 90       	pop	r0
    4c92:	0b be       	out	0x3b, r0	; 59
    4c94:	0f 90       	pop	r0
    4c96:	0f be       	out	0x3f, r0	; 63
    4c98:	0f 90       	pop	r0
    4c9a:	1f 90       	pop	r1
    4c9c:	18 95       	reti

00004c9e <__vector_52>:
    4c9e:	1f 92       	push	r1
    4ca0:	0f 92       	push	r0
    4ca2:	0f b6       	in	r0, 0x3f	; 63
    4ca4:	0f 92       	push	r0
    4ca6:	11 24       	eor	r1, r1
    4ca8:	0b b6       	in	r0, 0x3b	; 59
    4caa:	0f 92       	push	r0
    4cac:	2f 93       	push	r18
    4cae:	8f 93       	push	r24
    4cb0:	9f 93       	push	r25
    4cb2:	af 93       	push	r26
    4cb4:	bf 93       	push	r27
    4cb6:	ef 93       	push	r30
    4cb8:	ff 93       	push	r31
    4cba:	e0 91 80 17 	lds	r30, 0x1780	; 0x801780 <_ser_handle+0x4>
    4cbe:	f0 91 81 17 	lds	r31, 0x1781	; 0x801781 <_ser_handle+0x5>
    4cc2:	30 97       	sbiw	r30, 0x00	; 0
    4cc4:	b9 f0       	breq	.+46     	; 0x4cf4 <__vector_52+0x56>
    4cc6:	02 80       	ldd	r0, Z+2	; 0x02
    4cc8:	f3 81       	ldd	r31, Z+3	; 0x03
    4cca:	e0 2d       	mov	r30, r0
    4ccc:	93 81       	ldd	r25, Z+3	; 0x03
    4cce:	82 81       	ldd	r24, Z+2	; 0x02
    4cd0:	98 17       	cp	r25, r24
    4cd2:	b1 f0       	breq	.+44     	; 0x4d00 <__vector_52+0x62>
    4cd4:	92 81       	ldd	r25, Z+2	; 0x02
    4cd6:	85 81       	ldd	r24, Z+5	; 0x05
    4cd8:	28 2f       	mov	r18, r24
    4cda:	26 95       	lsr	r18
    4cdc:	29 23       	and	r18, r25
    4cde:	a0 81       	ld	r26, Z
    4ce0:	b1 81       	ldd	r27, Z+1	; 0x01
    4ce2:	a2 0f       	add	r26, r18
    4ce4:	b1 1d       	adc	r27, r1
    4ce6:	2c 91       	ld	r18, X
    4ce8:	9f 5f       	subi	r25, 0xFF	; 255
    4cea:	89 23       	and	r24, r25
    4cec:	82 83       	std	Z+2, r24	; 0x02
    4cee:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4cf2:	0b c0       	rjmp	.+22     	; 0x4d0a <__vector_52+0x6c>
    4cf4:	e1 ed       	ldi	r30, 0xD1	; 209
    4cf6:	f0 e0       	ldi	r31, 0x00	; 0
    4cf8:	80 81       	ld	r24, Z
    4cfa:	8f 7d       	andi	r24, 0xDF	; 223
    4cfc:	80 83       	st	Z, r24
    4cfe:	05 c0       	rjmp	.+10     	; 0x4d0a <__vector_52+0x6c>
    4d00:	e1 ed       	ldi	r30, 0xD1	; 209
    4d02:	f0 e0       	ldi	r31, 0x00	; 0
    4d04:	80 81       	ld	r24, Z
    4d06:	8f 7d       	andi	r24, 0xDF	; 223
    4d08:	80 83       	st	Z, r24
    4d0a:	ff 91       	pop	r31
    4d0c:	ef 91       	pop	r30
    4d0e:	bf 91       	pop	r27
    4d10:	af 91       	pop	r26
    4d12:	9f 91       	pop	r25
    4d14:	8f 91       	pop	r24
    4d16:	2f 91       	pop	r18
    4d18:	0f 90       	pop	r0
    4d1a:	0b be       	out	0x3b, r0	; 59
    4d1c:	0f 90       	pop	r0
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	0f 90       	pop	r0
    4d22:	1f 90       	pop	r1
    4d24:	18 95       	reti

00004d26 <__vector_54>:
    4d26:	1f 92       	push	r1
    4d28:	0f 92       	push	r0
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	0f 92       	push	r0
    4d2e:	11 24       	eor	r1, r1
    4d30:	0b b6       	in	r0, 0x3b	; 59
    4d32:	0f 92       	push	r0
    4d34:	2f 93       	push	r18
    4d36:	3f 93       	push	r19
    4d38:	4f 93       	push	r20
    4d3a:	5f 93       	push	r21
    4d3c:	6f 93       	push	r22
    4d3e:	7f 93       	push	r23
    4d40:	8f 93       	push	r24
    4d42:	9f 93       	push	r25
    4d44:	af 93       	push	r26
    4d46:	bf 93       	push	r27
    4d48:	cf 93       	push	r28
    4d4a:	df 93       	push	r29
    4d4c:	ef 93       	push	r30
    4d4e:	ff 93       	push	r31
    4d50:	a0 91 82 17 	lds	r26, 0x1782	; 0x801782 <_ser_handle+0x6>
    4d54:	b0 91 83 17 	lds	r27, 0x1783	; 0x801783 <_ser_handle+0x7>
    4d58:	10 97       	sbiw	r26, 0x00	; 0
    4d5a:	11 f1       	breq	.+68     	; 0x4da0 <__vector_54+0x7a>
    4d5c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4d60:	14 96       	adiw	r26, 0x04	; 4
    4d62:	ed 91       	ld	r30, X+
    4d64:	fc 91       	ld	r31, X
    4d66:	15 97       	sbiw	r26, 0x05	; 5
    4d68:	93 81       	ldd	r25, Z+3	; 0x03
    4d6a:	82 81       	ldd	r24, Z+2	; 0x02
    4d6c:	25 81       	ldd	r18, Z+5	; 0x05
    4d6e:	98 1b       	sub	r25, r24
    4d70:	92 23       	and	r25, r18
    4d72:	84 81       	ldd	r24, Z+4	; 0x04
    4d74:	98 17       	cp	r25, r24
    4d76:	61 f0       	breq	.+24     	; 0x4d90 <__vector_54+0x6a>
    4d78:	83 81       	ldd	r24, Z+3	; 0x03
    4d7a:	26 95       	lsr	r18
    4d7c:	28 23       	and	r18, r24
    4d7e:	c0 81       	ld	r28, Z
    4d80:	d1 81       	ldd	r29, Z+1	; 0x01
    4d82:	c2 0f       	add	r28, r18
    4d84:	d1 1d       	adc	r29, r1
    4d86:	68 83       	st	Y, r22
    4d88:	8f 5f       	subi	r24, 0xFF	; 255
    4d8a:	95 81       	ldd	r25, Z+5	; 0x05
    4d8c:	89 23       	and	r24, r25
    4d8e:	83 83       	std	Z+3, r24	; 0x03
    4d90:	16 96       	adiw	r26, 0x06	; 6
    4d92:	ed 91       	ld	r30, X+
    4d94:	fc 91       	ld	r31, X
    4d96:	17 97       	sbiw	r26, 0x07	; 7
    4d98:	30 97       	sbiw	r30, 0x00	; 0
    4d9a:	11 f0       	breq	.+4      	; 0x4da0 <__vector_54+0x7a>
    4d9c:	cd 01       	movw	r24, r26
    4d9e:	19 95       	eicall
    4da0:	ff 91       	pop	r31
    4da2:	ef 91       	pop	r30
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	bf 91       	pop	r27
    4daa:	af 91       	pop	r26
    4dac:	9f 91       	pop	r25
    4dae:	8f 91       	pop	r24
    4db0:	7f 91       	pop	r23
    4db2:	6f 91       	pop	r22
    4db4:	5f 91       	pop	r21
    4db6:	4f 91       	pop	r20
    4db8:	3f 91       	pop	r19
    4dba:	2f 91       	pop	r18
    4dbc:	0f 90       	pop	r0
    4dbe:	0b be       	out	0x3b, r0	; 59
    4dc0:	0f 90       	pop	r0
    4dc2:	0f be       	out	0x3f, r0	; 63
    4dc4:	0f 90       	pop	r0
    4dc6:	1f 90       	pop	r1
    4dc8:	18 95       	reti

00004dca <__vector_55>:
    4dca:	1f 92       	push	r1
    4dcc:	0f 92       	push	r0
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	0f 92       	push	r0
    4dd2:	11 24       	eor	r1, r1
    4dd4:	0b b6       	in	r0, 0x3b	; 59
    4dd6:	0f 92       	push	r0
    4dd8:	2f 93       	push	r18
    4dda:	8f 93       	push	r24
    4ddc:	9f 93       	push	r25
    4dde:	af 93       	push	r26
    4de0:	bf 93       	push	r27
    4de2:	ef 93       	push	r30
    4de4:	ff 93       	push	r31
    4de6:	e0 91 82 17 	lds	r30, 0x1782	; 0x801782 <_ser_handle+0x6>
    4dea:	f0 91 83 17 	lds	r31, 0x1783	; 0x801783 <_ser_handle+0x7>
    4dee:	30 97       	sbiw	r30, 0x00	; 0
    4df0:	b9 f0       	breq	.+46     	; 0x4e20 <__vector_55+0x56>
    4df2:	02 80       	ldd	r0, Z+2	; 0x02
    4df4:	f3 81       	ldd	r31, Z+3	; 0x03
    4df6:	e0 2d       	mov	r30, r0
    4df8:	93 81       	ldd	r25, Z+3	; 0x03
    4dfa:	82 81       	ldd	r24, Z+2	; 0x02
    4dfc:	98 17       	cp	r25, r24
    4dfe:	b1 f0       	breq	.+44     	; 0x4e2c <__vector_55+0x62>
    4e00:	92 81       	ldd	r25, Z+2	; 0x02
    4e02:	85 81       	ldd	r24, Z+5	; 0x05
    4e04:	28 2f       	mov	r18, r24
    4e06:	26 95       	lsr	r18
    4e08:	29 23       	and	r18, r25
    4e0a:	a0 81       	ld	r26, Z
    4e0c:	b1 81       	ldd	r27, Z+1	; 0x01
    4e0e:	a2 0f       	add	r26, r18
    4e10:	b1 1d       	adc	r27, r1
    4e12:	2c 91       	ld	r18, X
    4e14:	9f 5f       	subi	r25, 0xFF	; 255
    4e16:	89 23       	and	r24, r25
    4e18:	82 83       	std	Z+2, r24	; 0x02
    4e1a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e1e:	0b c0       	rjmp	.+22     	; 0x4e36 <__vector_55+0x6c>
    4e20:	e1 e3       	ldi	r30, 0x31	; 49
    4e22:	f1 e0       	ldi	r31, 0x01	; 1
    4e24:	80 81       	ld	r24, Z
    4e26:	8f 7d       	andi	r24, 0xDF	; 223
    4e28:	80 83       	st	Z, r24
    4e2a:	05 c0       	rjmp	.+10     	; 0x4e36 <__vector_55+0x6c>
    4e2c:	e1 e3       	ldi	r30, 0x31	; 49
    4e2e:	f1 e0       	ldi	r31, 0x01	; 1
    4e30:	80 81       	ld	r24, Z
    4e32:	8f 7d       	andi	r24, 0xDF	; 223
    4e34:	80 83       	st	Z, r24
    4e36:	ff 91       	pop	r31
    4e38:	ef 91       	pop	r30
    4e3a:	bf 91       	pop	r27
    4e3c:	af 91       	pop	r26
    4e3e:	9f 91       	pop	r25
    4e40:	8f 91       	pop	r24
    4e42:	2f 91       	pop	r18
    4e44:	0f 90       	pop	r0
    4e46:	0b be       	out	0x3b, r0	; 59
    4e48:	0f 90       	pop	r0
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	0f 90       	pop	r0
    4e4e:	1f 90       	pop	r1
    4e50:	18 95       	reti

00004e52 <usart_getchar>:
    4e52:	cf 93       	push	r28
    4e54:	df 93       	push	r29
    4e56:	1f 92       	push	r1
    4e58:	cd b7       	in	r28, 0x3d	; 61
    4e5a:	de b7       	in	r29, 0x3e	; 62
    4e5c:	be 01       	movw	r22, r28
    4e5e:	6f 5f       	subi	r22, 0xFF	; 255
    4e60:	7f 4f       	sbci	r23, 0xFF	; 255
    4e62:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <_com_serial_instance>
    4e66:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <_com_serial_instance+0x1>
    4e6a:	7b dd       	rcall	.-1290   	; 0x4962 <serial_getByte>
    4e6c:	81 11       	cpse	r24, r1
    4e6e:	f6 cf       	rjmp	.-20     	; 0x4e5c <usart_getchar+0xa>
    4e70:	89 81       	ldd	r24, Y+1	; 0x01
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	0f 90       	pop	r0
    4e76:	df 91       	pop	r29
    4e78:	cf 91       	pop	r28
    4e7a:	08 95       	ret

00004e7c <usart_putchar>:
    4e7c:	68 2f       	mov	r22, r24
    4e7e:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <_com_serial_instance>
    4e82:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <_com_serial_instance+0x1>
    4e86:	ed dc       	rcall	.-1574   	; 0x4862 <serial_sendByte>
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	08 95       	ret

00004e8e <stdio_initialise>:
    4e8e:	8f 92       	push	r8
    4e90:	9f 92       	push	r9
    4e92:	af 92       	push	r10
    4e94:	cf 92       	push	r12
    4e96:	ef 92       	push	r14
    4e98:	0f 93       	push	r16
    4e9a:	81 2c       	mov	r8, r1
    4e9c:	91 2c       	mov	r9, r1
    4e9e:	68 94       	set
    4ea0:	aa 24       	eor	r10, r10
    4ea2:	a7 f8       	bld	r10, 7
    4ea4:	68 94       	set
    4ea6:	cc 24       	eor	r12, r12
    4ea8:	c7 f8       	bld	r12, 7
    4eaa:	e1 2c       	mov	r14, r1
    4eac:	00 e0       	ldi	r16, 0x00	; 0
    4eae:	23 e0       	ldi	r18, 0x03	; 3
    4eb0:	40 e0       	ldi	r20, 0x00	; 0
    4eb2:	51 ee       	ldi	r21, 0xE1	; 225
    4eb4:	60 e0       	ldi	r22, 0x00	; 0
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	32 dc       	rcall	.-1948   	; 0x471e <serial_create>
    4eba:	90 93 85 17 	sts	0x1785, r25	; 0x801785 <_com_serial_instance+0x1>
    4ebe:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <_com_serial_instance>
    4ec2:	ec ec       	ldi	r30, 0xCC	; 204
    4ec4:	f7 e1       	ldi	r31, 0x17	; 23
    4ec6:	87 e1       	ldi	r24, 0x17	; 23
    4ec8:	92 e0       	ldi	r25, 0x02	; 2
    4eca:	91 83       	std	Z+1, r25	; 0x01
    4ecc:	80 83       	st	Z, r24
    4ece:	93 83       	std	Z+3, r25	; 0x03
    4ed0:	82 83       	std	Z+2, r24	; 0x02
    4ed2:	0f 91       	pop	r16
    4ed4:	ef 90       	pop	r14
    4ed6:	cf 90       	pop	r12
    4ed8:	af 90       	pop	r10
    4eda:	9f 90       	pop	r9
    4edc:	8f 90       	pop	r8
    4ede:	08 95       	ret

00004ee0 <_turn_off>:
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	ee 0f       	add	r30, r30
    4ee6:	ff 1f       	adc	r31, r31
    4ee8:	e8 0f       	add	r30, r24
    4eea:	f9 1f       	adc	r31, r25
    4eec:	ee 0f       	add	r30, r30
    4eee:	ff 1f       	adc	r31, r31
    4ef0:	ea 57       	subi	r30, 0x7A	; 122
    4ef2:	f8 4e       	sbci	r31, 0xE8	; 232
    4ef4:	23 81       	ldd	r18, Z+3	; 0x03
    4ef6:	21 11       	cpse	r18, r1
    4ef8:	1f c0       	rjmp	.+62     	; 0x4f38 <_turn_off+0x58>
    4efa:	9c 01       	movw	r18, r24
    4efc:	22 0f       	add	r18, r18
    4efe:	33 1f       	adc	r19, r19
    4f00:	f9 01       	movw	r30, r18
    4f02:	e8 0f       	add	r30, r24
    4f04:	f9 1f       	adc	r31, r25
    4f06:	ee 0f       	add	r30, r30
    4f08:	ff 1f       	adc	r31, r31
    4f0a:	ea 57       	subi	r30, 0x7A	; 122
    4f0c:	f8 4e       	sbci	r31, 0xE8	; 232
    4f0e:	a0 81       	ld	r26, Z
    4f10:	b1 81       	ldd	r27, Z+1	; 0x01
    4f12:	4c 91       	ld	r20, X
    4f14:	f9 01       	movw	r30, r18
    4f16:	e8 0f       	add	r30, r24
    4f18:	f9 1f       	adc	r31, r25
    4f1a:	ee 0f       	add	r30, r30
    4f1c:	ff 1f       	adc	r31, r31
    4f1e:	ea 57       	subi	r30, 0x7A	; 122
    4f20:	f8 4e       	sbci	r31, 0xE8	; 232
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	02 80       	ldd	r0, Z+2	; 0x02
    4f28:	02 c0       	rjmp	.+4      	; 0x4f2e <_turn_off+0x4e>
    4f2a:	88 0f       	add	r24, r24
    4f2c:	99 1f       	adc	r25, r25
    4f2e:	0a 94       	dec	r0
    4f30:	e2 f7       	brpl	.-8      	; 0x4f2a <_turn_off+0x4a>
    4f32:	84 2b       	or	r24, r20
    4f34:	8c 93       	st	X, r24
    4f36:	08 95       	ret
    4f38:	fc 01       	movw	r30, r24
    4f3a:	ee 0f       	add	r30, r30
    4f3c:	ff 1f       	adc	r31, r31
    4f3e:	df 01       	movw	r26, r30
    4f40:	a8 0f       	add	r26, r24
    4f42:	b9 1f       	adc	r27, r25
    4f44:	aa 0f       	add	r26, r26
    4f46:	bb 1f       	adc	r27, r27
    4f48:	aa 57       	subi	r26, 0x7A	; 122
    4f4a:	b8 4e       	sbci	r27, 0xE8	; 232
    4f4c:	0d 90       	ld	r0, X+
    4f4e:	bc 91       	ld	r27, X
    4f50:	a0 2d       	mov	r26, r0
    4f52:	2c 91       	ld	r18, X
    4f54:	e8 0f       	add	r30, r24
    4f56:	f9 1f       	adc	r31, r25
    4f58:	ee 0f       	add	r30, r30
    4f5a:	ff 1f       	adc	r31, r31
    4f5c:	ea 57       	subi	r30, 0x7A	; 122
    4f5e:	f8 4e       	sbci	r31, 0xE8	; 232
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	02 80       	ldd	r0, Z+2	; 0x02
    4f66:	02 c0       	rjmp	.+4      	; 0x4f6c <_turn_off+0x8c>
    4f68:	88 0f       	add	r24, r24
    4f6a:	99 1f       	adc	r25, r25
    4f6c:	0a 94       	dec	r0
    4f6e:	e2 f7       	brpl	.-8      	; 0x4f68 <_turn_off+0x88>
    4f70:	80 95       	com	r24
    4f72:	82 23       	and	r24, r18
    4f74:	8c 93       	st	X, r24
    4f76:	08 95       	ret

00004f78 <_turn_on>:
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	ee 0f       	add	r30, r30
    4f7e:	ff 1f       	adc	r31, r31
    4f80:	e8 0f       	add	r30, r24
    4f82:	f9 1f       	adc	r31, r25
    4f84:	ee 0f       	add	r30, r30
    4f86:	ff 1f       	adc	r31, r31
    4f88:	ea 57       	subi	r30, 0x7A	; 122
    4f8a:	f8 4e       	sbci	r31, 0xE8	; 232
    4f8c:	23 81       	ldd	r18, Z+3	; 0x03
    4f8e:	21 11       	cpse	r18, r1
    4f90:	20 c0       	rjmp	.+64     	; 0x4fd2 <_turn_on+0x5a>
    4f92:	9c 01       	movw	r18, r24
    4f94:	22 0f       	add	r18, r18
    4f96:	33 1f       	adc	r19, r19
    4f98:	f9 01       	movw	r30, r18
    4f9a:	e8 0f       	add	r30, r24
    4f9c:	f9 1f       	adc	r31, r25
    4f9e:	ee 0f       	add	r30, r30
    4fa0:	ff 1f       	adc	r31, r31
    4fa2:	ea 57       	subi	r30, 0x7A	; 122
    4fa4:	f8 4e       	sbci	r31, 0xE8	; 232
    4fa6:	a0 81       	ld	r26, Z
    4fa8:	b1 81       	ldd	r27, Z+1	; 0x01
    4faa:	4c 91       	ld	r20, X
    4fac:	f9 01       	movw	r30, r18
    4fae:	e8 0f       	add	r30, r24
    4fb0:	f9 1f       	adc	r31, r25
    4fb2:	ee 0f       	add	r30, r30
    4fb4:	ff 1f       	adc	r31, r31
    4fb6:	ea 57       	subi	r30, 0x7A	; 122
    4fb8:	f8 4e       	sbci	r31, 0xE8	; 232
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	02 80       	ldd	r0, Z+2	; 0x02
    4fc0:	02 c0       	rjmp	.+4      	; 0x4fc6 <_turn_on+0x4e>
    4fc2:	88 0f       	add	r24, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	0a 94       	dec	r0
    4fc8:	e2 f7       	brpl	.-8      	; 0x4fc2 <_turn_on+0x4a>
    4fca:	80 95       	com	r24
    4fcc:	84 23       	and	r24, r20
    4fce:	8c 93       	st	X, r24
    4fd0:	08 95       	ret
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	ee 0f       	add	r30, r30
    4fd6:	ff 1f       	adc	r31, r31
    4fd8:	df 01       	movw	r26, r30
    4fda:	a8 0f       	add	r26, r24
    4fdc:	b9 1f       	adc	r27, r25
    4fde:	aa 0f       	add	r26, r26
    4fe0:	bb 1f       	adc	r27, r27
    4fe2:	aa 57       	subi	r26, 0x7A	; 122
    4fe4:	b8 4e       	sbci	r27, 0xE8	; 232
    4fe6:	0d 90       	ld	r0, X+
    4fe8:	bc 91       	ld	r27, X
    4fea:	a0 2d       	mov	r26, r0
    4fec:	2c 91       	ld	r18, X
    4fee:	e8 0f       	add	r30, r24
    4ff0:	f9 1f       	adc	r31, r25
    4ff2:	ee 0f       	add	r30, r30
    4ff4:	ff 1f       	adc	r31, r31
    4ff6:	ea 57       	subi	r30, 0x7A	; 122
    4ff8:	f8 4e       	sbci	r31, 0xE8	; 232
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	02 80       	ldd	r0, Z+2	; 0x02
    5000:	02 c0       	rjmp	.+4      	; 0x5006 <_turn_on+0x8e>
    5002:	88 0f       	add	r24, r24
    5004:	99 1f       	adc	r25, r25
    5006:	0a 94       	dec	r0
    5008:	e2 f7       	brpl	.-8      	; 0x5002 <_turn_on+0x8a>
    500a:	82 2b       	or	r24, r18
    500c:	8c 93       	st	X, r24
    500e:	08 95       	ret

00005010 <_hal_led_task>:
    5010:	cc 24       	eor	r12, r12
    5012:	c3 94       	inc	r12
    5014:	d1 2c       	mov	r13, r1
    5016:	68 94       	set
    5018:	bb 24       	eor	r11, r11
    501a:	b2 f8       	bld	r11, 2
    501c:	c6 e8       	ldi	r28, 0x86	; 134
    501e:	d7 e1       	ldi	r29, 0x17	; 23
    5020:	10 e0       	ldi	r17, 0x00	; 0
    5022:	8c 81       	ldd	r24, Y+4	; 0x04
    5024:	81 30       	cpi	r24, 0x01	; 1
    5026:	81 f0       	breq	.+32     	; 0x5048 <_hal_led_task+0x38>
    5028:	18 f1       	brcs	.+70     	; 0x5070 <_hal_led_task+0x60>
    502a:	82 30       	cpi	r24, 0x02	; 2
    502c:	61 f5       	brne	.+88     	; 0x5086 <_hal_led_task+0x76>
    502e:	e8 81       	ld	r30, Y
    5030:	f9 81       	ldd	r31, Y+1	; 0x01
    5032:	20 81       	ld	r18, Z
    5034:	c6 01       	movw	r24, r12
    5036:	0a 80       	ldd	r0, Y+2	; 0x02
    5038:	02 c0       	rjmp	.+4      	; 0x503e <_hal_led_task+0x2e>
    503a:	88 0f       	add	r24, r24
    503c:	99 1f       	adc	r25, r25
    503e:	0a 94       	dec	r0
    5040:	e2 f7       	brpl	.-8      	; 0x503a <_hal_led_task+0x2a>
    5042:	82 27       	eor	r24, r18
    5044:	80 83       	st	Z, r24
    5046:	1f c0       	rjmp	.+62     	; 0x5086 <_hal_led_task+0x76>
    5048:	8d 81       	ldd	r24, Y+5	; 0x05
    504a:	8f 5f       	subi	r24, 0xFF	; 255
    504c:	86 30       	cpi	r24, 0x06	; 6
    504e:	10 f4       	brcc	.+4      	; 0x5054 <_hal_led_task+0x44>
    5050:	8d 83       	std	Y+5, r24	; 0x05
    5052:	19 c0       	rjmp	.+50     	; 0x5086 <_hal_led_task+0x76>
    5054:	1d 82       	std	Y+5, r1	; 0x05
    5056:	e8 81       	ld	r30, Y
    5058:	f9 81       	ldd	r31, Y+1	; 0x01
    505a:	20 81       	ld	r18, Z
    505c:	c6 01       	movw	r24, r12
    505e:	0a 80       	ldd	r0, Y+2	; 0x02
    5060:	02 c0       	rjmp	.+4      	; 0x5066 <_hal_led_task+0x56>
    5062:	88 0f       	add	r24, r24
    5064:	99 1f       	adc	r25, r25
    5066:	0a 94       	dec	r0
    5068:	e2 f7       	brpl	.-8      	; 0x5062 <_hal_led_task+0x52>
    506a:	82 27       	eor	r24, r18
    506c:	80 83       	st	Z, r24
    506e:	0b c0       	rjmp	.+22     	; 0x5086 <_hal_led_task+0x76>
    5070:	0d 81       	ldd	r16, Y+5	; 0x05
    5072:	00 23       	and	r16, r16
    5074:	29 f0       	breq	.+10     	; 0x5080 <_hal_led_task+0x70>
    5076:	81 2f       	mov	r24, r17
    5078:	7f df       	rcall	.-258    	; 0x4f78 <_turn_on>
    507a:	01 50       	subi	r16, 0x01	; 1
    507c:	0d 83       	std	Y+5, r16	; 0x05
    507e:	03 c0       	rjmp	.+6      	; 0x5086 <_hal_led_task+0x76>
    5080:	bc 82       	std	Y+4, r11	; 0x04
    5082:	81 2f       	mov	r24, r17
    5084:	2d df       	rcall	.-422    	; 0x4ee0 <_turn_off>
    5086:	1f 5f       	subi	r17, 0xFF	; 255
    5088:	26 96       	adiw	r28, 0x06	; 6
    508a:	14 30       	cpi	r17, 0x04	; 4
    508c:	51 f6       	brne	.-108    	; 0x5022 <_hal_led_task+0x12>
    508e:	6c e0       	ldi	r22, 0x0C	; 12
    5090:	70 e0       	ldi	r23, 0x00	; 0
    5092:	80 e0       	ldi	r24, 0x00	; 0
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	0e 94 0b 11 	call	0x2216	; 0x2216 <vTaskDelay>
    509a:	c0 cf       	rjmp	.-128    	; 0x501c <_hal_led_task+0xc>

0000509c <status_leds_initialise>:
    509c:	ef 92       	push	r14
    509e:	ff 92       	push	r15
    50a0:	0f 93       	push	r16
    50a2:	1f 93       	push	r17
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	08 2f       	mov	r16, r24
    50aa:	80 e4       	ldi	r24, 0x40	; 64
    50ac:	87 b9       	out	0x07, r24	; 7
    50ae:	c6 e8       	ldi	r28, 0x86	; 134
    50b0:	d7 e1       	ldi	r29, 0x17	; 23
    50b2:	0f 2e       	mov	r0, r31
    50b4:	f8 e2       	ldi	r31, 0x28	; 40
    50b6:	ef 2e       	mov	r14, r31
    50b8:	f1 2c       	mov	r15, r1
    50ba:	f0 2d       	mov	r31, r0
    50bc:	f9 82       	std	Y+1, r15	; 0x01
    50be:	e8 82       	st	Y, r14
    50c0:	86 e0       	ldi	r24, 0x06	; 6
    50c2:	8a 83       	std	Y+2, r24	; 0x02
    50c4:	1b 82       	std	Y+3, r1	; 0x03
    50c6:	14 e0       	ldi	r17, 0x04	; 4
    50c8:	1c 83       	std	Y+4, r17	; 0x04
    50ca:	80 e0       	ldi	r24, 0x00	; 0
    50cc:	09 df       	rcall	.-494    	; 0x4ee0 <_turn_off>
    50ce:	80 e8       	ldi	r24, 0x80	; 128
    50d0:	87 b9       	out	0x07, r24	; 7
    50d2:	ff 82       	std	Y+7, r15	; 0x07
    50d4:	ee 82       	std	Y+6, r14	; 0x06
    50d6:	87 e0       	ldi	r24, 0x07	; 7
    50d8:	88 87       	std	Y+8, r24	; 0x08
    50da:	19 86       	std	Y+9, r1	; 0x09
    50dc:	1a 87       	std	Y+10, r17	; 0x0a
    50de:	81 e0       	ldi	r24, 0x01	; 1
    50e0:	ff de       	rcall	.-514    	; 0x4ee0 <_turn_off>
    50e2:	80 e2       	ldi	r24, 0x20	; 32
    50e4:	83 bb       	out	0x13, r24	; 19
    50e6:	84 e3       	ldi	r24, 0x34	; 52
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	9d 87       	std	Y+13, r25	; 0x0d
    50ec:	8c 87       	std	Y+12, r24	; 0x0c
    50ee:	85 e0       	ldi	r24, 0x05	; 5
    50f0:	8e 87       	std	Y+14, r24	; 0x0e
    50f2:	1f 86       	std	Y+15, r1	; 0x0f
    50f4:	18 8b       	std	Y+16, r17	; 0x10
    50f6:	82 e0       	ldi	r24, 0x02	; 2
    50f8:	f3 de       	rcall	.-538    	; 0x4ee0 <_turn_off>
    50fa:	80 e1       	ldi	r24, 0x10	; 16
    50fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5100:	82 e0       	ldi	r24, 0x02	; 2
    5102:	91 e0       	ldi	r25, 0x01	; 1
    5104:	9b 8b       	std	Y+19, r25	; 0x13
    5106:	8a 8b       	std	Y+18, r24	; 0x12
    5108:	1c 8b       	std	Y+20, r17	; 0x14
    510a:	1d 8a       	std	Y+21, r1	; 0x15
    510c:	1e 8b       	std	Y+22, r17	; 0x16
    510e:	83 e0       	ldi	r24, 0x03	; 3
    5110:	e7 de       	rcall	.-562    	; 0x4ee0 <_turn_off>
    5112:	e1 2c       	mov	r14, r1
    5114:	f1 2c       	mov	r15, r1
    5116:	20 e0       	ldi	r18, 0x00	; 0
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	40 ec       	ldi	r20, 0xC0	; 192
    511c:	50 e0       	ldi	r21, 0x00	; 0
    511e:	67 ea       	ldi	r22, 0xA7	; 167
    5120:	77 e0       	ldi	r23, 0x07	; 7
    5122:	88 e0       	ldi	r24, 0x08	; 8
    5124:	98 e2       	ldi	r25, 0x28	; 40
    5126:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <xTaskCreate>
    512a:	df 91       	pop	r29
    512c:	cf 91       	pop	r28
    512e:	1f 91       	pop	r17
    5130:	0f 91       	pop	r16
    5132:	ff 90       	pop	r15
    5134:	ef 90       	pop	r14
    5136:	08 95       	ret

00005138 <status_leds_slowBlink>:
    5138:	cf 93       	push	r28
    513a:	df 93       	push	r29
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	fc 01       	movw	r30, r24
    5140:	ee 0f       	add	r30, r30
    5142:	ff 1f       	adc	r31, r31
    5144:	df 01       	movw	r26, r30
    5146:	a8 0f       	add	r26, r24
    5148:	b9 1f       	adc	r27, r25
    514a:	aa 0f       	add	r26, r26
    514c:	bb 1f       	adc	r27, r27
    514e:	aa 57       	subi	r26, 0x7A	; 122
    5150:	b8 4e       	sbci	r27, 0xE8	; 232
    5152:	cd 91       	ld	r28, X+
    5154:	dc 91       	ld	r29, X
    5156:	11 97       	sbiw	r26, 0x01	; 1
    5158:	48 81       	ld	r20, Y
    515a:	21 e0       	ldi	r18, 0x01	; 1
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	12 96       	adiw	r26, 0x02	; 2
    5160:	0c 90       	ld	r0, X
    5162:	12 97       	sbiw	r26, 0x02	; 2
    5164:	02 c0       	rjmp	.+4      	; 0x516a <status_leds_slowBlink+0x32>
    5166:	22 0f       	add	r18, r18
    5168:	33 1f       	adc	r19, r19
    516a:	0a 94       	dec	r0
    516c:	e2 f7       	brpl	.-8      	; 0x5166 <status_leds_slowBlink+0x2e>
    516e:	24 27       	eor	r18, r20
    5170:	28 83       	st	Y, r18
    5172:	fd 01       	movw	r30, r26
    5174:	81 e0       	ldi	r24, 0x01	; 1
    5176:	84 83       	std	Z+4, r24	; 0x04
    5178:	df 91       	pop	r29
    517a:	cf 91       	pop	r28
    517c:	08 95       	ret

0000517e <status_leds_fastBlink>:
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	fc 01       	movw	r30, r24
    5186:	ee 0f       	add	r30, r30
    5188:	ff 1f       	adc	r31, r31
    518a:	df 01       	movw	r26, r30
    518c:	a8 0f       	add	r26, r24
    518e:	b9 1f       	adc	r27, r25
    5190:	aa 0f       	add	r26, r26
    5192:	bb 1f       	adc	r27, r27
    5194:	aa 57       	subi	r26, 0x7A	; 122
    5196:	b8 4e       	sbci	r27, 0xE8	; 232
    5198:	cd 91       	ld	r28, X+
    519a:	dc 91       	ld	r29, X
    519c:	11 97       	sbiw	r26, 0x01	; 1
    519e:	48 81       	ld	r20, Y
    51a0:	21 e0       	ldi	r18, 0x01	; 1
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	12 96       	adiw	r26, 0x02	; 2
    51a6:	0c 90       	ld	r0, X
    51a8:	12 97       	sbiw	r26, 0x02	; 2
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <status_leds_fastBlink+0x32>
    51ac:	22 0f       	add	r18, r18
    51ae:	33 1f       	adc	r19, r19
    51b0:	0a 94       	dec	r0
    51b2:	e2 f7       	brpl	.-8      	; 0x51ac <status_leds_fastBlink+0x2e>
    51b4:	24 27       	eor	r18, r20
    51b6:	28 83       	st	Y, r18
    51b8:	fd 01       	movw	r30, r26
    51ba:	82 e0       	ldi	r24, 0x02	; 2
    51bc:	84 83       	std	Z+4, r24	; 0x04
    51be:	df 91       	pop	r29
    51c0:	cf 91       	pop	r28
    51c2:	08 95       	ret

000051c4 <status_leds_ledOn>:
    51c4:	28 2f       	mov	r18, r24
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	f9 01       	movw	r30, r18
    51ca:	ee 0f       	add	r30, r30
    51cc:	ff 1f       	adc	r31, r31
    51ce:	e2 0f       	add	r30, r18
    51d0:	f3 1f       	adc	r31, r19
    51d2:	ee 0f       	add	r30, r30
    51d4:	ff 1f       	adc	r31, r31
    51d6:	ea 57       	subi	r30, 0x7A	; 122
    51d8:	f8 4e       	sbci	r31, 0xE8	; 232
    51da:	93 e0       	ldi	r25, 0x03	; 3
    51dc:	94 83       	std	Z+4, r25	; 0x04
    51de:	cc ce       	rjmp	.-616    	; 0x4f78 <_turn_on>
    51e0:	08 95       	ret

000051e2 <status_leds_ledOff>:
    51e2:	28 2f       	mov	r18, r24
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	f9 01       	movw	r30, r18
    51e8:	ee 0f       	add	r30, r30
    51ea:	ff 1f       	adc	r31, r31
    51ec:	e2 0f       	add	r30, r18
    51ee:	f3 1f       	adc	r31, r19
    51f0:	ee 0f       	add	r30, r30
    51f2:	ff 1f       	adc	r31, r31
    51f4:	ea 57       	subi	r30, 0x7A	; 122
    51f6:	f8 4e       	sbci	r31, 0xE8	; 232
    51f8:	94 e0       	ldi	r25, 0x04	; 4
    51fa:	94 83       	std	Z+4, r25	; 0x04
    51fc:	71 ce       	rjmp	.-798    	; 0x4ee0 <_turn_off>
    51fe:	08 95       	ret

00005200 <status_leds_longPuls>:
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	fc 01       	movw	r30, r24
    5204:	ee 0f       	add	r30, r30
    5206:	ff 1f       	adc	r31, r31
    5208:	df 01       	movw	r26, r30
    520a:	a8 0f       	add	r26, r24
    520c:	b9 1f       	adc	r27, r25
    520e:	aa 0f       	add	r26, r26
    5210:	bb 1f       	adc	r27, r27
    5212:	aa 57       	subi	r26, 0x7A	; 122
    5214:	b8 4e       	sbci	r27, 0xE8	; 232
    5216:	26 e0       	ldi	r18, 0x06	; 6
    5218:	15 96       	adiw	r26, 0x05	; 5
    521a:	2c 93       	st	X, r18
    521c:	15 97       	sbiw	r26, 0x05	; 5
    521e:	fd 01       	movw	r30, r26
    5220:	14 82       	std	Z+4, r1	; 0x04
    5222:	08 95       	ret

00005224 <status_leds_shortPuls>:
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	fc 01       	movw	r30, r24
    5228:	ee 0f       	add	r30, r30
    522a:	ff 1f       	adc	r31, r31
    522c:	df 01       	movw	r26, r30
    522e:	a8 0f       	add	r26, r24
    5230:	b9 1f       	adc	r27, r25
    5232:	aa 0f       	add	r26, r26
    5234:	bb 1f       	adc	r27, r27
    5236:	aa 57       	subi	r26, 0x7A	; 122
    5238:	b8 4e       	sbci	r27, 0xE8	; 232
    523a:	15 96       	adiw	r26, 0x05	; 5
    523c:	1c 92       	st	X, r1
    523e:	15 97       	sbiw	r26, 0x05	; 5
    5240:	fd 01       	movw	r30, r26
    5242:	14 82       	std	Z+4, r1	; 0x04
    5244:	08 95       	ret

00005246 <_initTwiInterface>:
    5246:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <_twiIsInitiated>
    524a:	81 11       	cpse	r24, r1
    524c:	0c c0       	rjmp	.+24     	; 0x5266 <_initTwiInterface+0x20>
    524e:	8c e0       	ldi	r24, 0x0C	; 12
    5250:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5254:	8f ef       	ldi	r24, 0xFF	; 255
    5256:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    525a:	84 e0       	ldi	r24, 0x04	; 4
    525c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_twiIsInitiated>
    5266:	08 95       	ret

00005268 <twiCreate>:
    5268:	af 92       	push	r10
    526a:	bf 92       	push	r11
    526c:	cf 92       	push	r12
    526e:	df 92       	push	r13
    5270:	ef 92       	push	r14
    5272:	ff 92       	push	r15
    5274:	0f 93       	push	r16
    5276:	1f 93       	push	r17
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
    527c:	a8 2e       	mov	r10, r24
    527e:	b6 2e       	mov	r11, r22
    5280:	69 01       	movw	r12, r18
    5282:	7a 01       	movw	r14, r20
    5284:	84 e0       	ldi	r24, 0x04	; 4
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	5f d3       	rcall	.+1726   	; 0x5948 <malloc>
    528a:	ec 01       	movw	r28, r24
    528c:	89 2b       	or	r24, r25
    528e:	61 f1       	breq	.+88     	; 0x52e8 <twiCreate+0x80>
    5290:	a8 82       	st	Y, r10
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	b8 12       	cpse	r11, r24
    5296:	12 c0       	rjmp	.+36     	; 0x52bc <twiCreate+0x54>
    5298:	c7 01       	movw	r24, r14
    529a:	b6 01       	movw	r22, r12
    529c:	20 ea       	ldi	r18, 0xA0	; 160
    529e:	36 e8       	ldi	r19, 0x86	; 134
    52a0:	41 e0       	ldi	r20, 0x01	; 1
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	27 d3       	rcall	.+1614   	; 0x58f4 <__udivmodsi4>
    52a6:	da 01       	movw	r26, r20
    52a8:	c9 01       	movw	r24, r18
    52aa:	40 97       	sbiw	r24, 0x10	; 16
    52ac:	a1 09       	sbc	r26, r1
    52ae:	b1 09       	sbc	r27, r1
    52b0:	b6 95       	lsr	r27
    52b2:	a7 95       	ror	r26
    52b4:	97 95       	ror	r25
    52b6:	87 95       	ror	r24
    52b8:	89 83       	std	Y+1, r24	; 0x01
    52ba:	11 c0       	rjmp	.+34     	; 0x52de <twiCreate+0x76>
    52bc:	c7 01       	movw	r24, r14
    52be:	b6 01       	movw	r22, r12
    52c0:	20 e8       	ldi	r18, 0x80	; 128
    52c2:	3a e1       	ldi	r19, 0x1A	; 26
    52c4:	46 e0       	ldi	r20, 0x06	; 6
    52c6:	50 e0       	ldi	r21, 0x00	; 0
    52c8:	15 d3       	rcall	.+1578   	; 0x58f4 <__udivmodsi4>
    52ca:	da 01       	movw	r26, r20
    52cc:	c9 01       	movw	r24, r18
    52ce:	40 97       	sbiw	r24, 0x10	; 16
    52d0:	a1 09       	sbc	r26, r1
    52d2:	b1 09       	sbc	r27, r1
    52d4:	b6 95       	lsr	r27
    52d6:	a7 95       	ror	r26
    52d8:	97 95       	ror	r25
    52da:	87 95       	ror	r24
    52dc:	89 83       	std	Y+1, r24	; 0x01
    52de:	1b 83       	std	Y+3, r17	; 0x03
    52e0:	0a 83       	std	Y+2, r16	; 0x02
    52e2:	8c 2f       	mov	r24, r28
    52e4:	9d 2f       	mov	r25, r29
    52e6:	02 c0       	rjmp	.+4      	; 0x52ec <twiCreate+0x84>
    52e8:	80 e0       	ldi	r24, 0x00	; 0
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	1f 91       	pop	r17
    52f2:	0f 91       	pop	r16
    52f4:	ff 90       	pop	r15
    52f6:	ef 90       	pop	r14
    52f8:	df 90       	pop	r13
    52fa:	cf 90       	pop	r12
    52fc:	bf 90       	pop	r11
    52fe:	af 90       	pop	r10
    5300:	08 95       	ret

00005302 <twiIsBusy>:
    5302:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5306:	81 70       	andi	r24, 0x01	; 1
    5308:	08 95       	ret

0000530a <twiTransmit>:
    530a:	ff 92       	push	r15
    530c:	0f 93       	push	r16
    530e:	1f 93       	push	r17
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29
    5314:	00 97       	sbiw	r24, 0x00	; 0
    5316:	d1 f1       	breq	.+116    	; 0x538c <twiTransmit+0x82>
    5318:	4a 30       	cpi	r20, 0x0A	; 10
    531a:	d0 f5       	brcc	.+116    	; 0x5390 <twiTransmit+0x86>
    531c:	f4 2e       	mov	r15, r20
    531e:	8b 01       	movw	r16, r22
    5320:	ec 01       	movw	r28, r24
    5322:	ef df       	rcall	.-34     	; 0x5302 <twiIsBusy>
    5324:	81 11       	cpse	r24, r1
    5326:	36 c0       	rjmp	.+108    	; 0x5394 <twiTransmit+0x8a>
    5328:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_twiCurrentHandler>
    532c:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_twiCurrentHandler+0x1>
    5330:	c8 17       	cp	r28, r24
    5332:	d9 07       	cpc	r29, r25
    5334:	41 f0       	breq	.+16     	; 0x5346 <twiTransmit+0x3c>
    5336:	87 df       	rcall	.-242    	; 0x5246 <_initTwiInterface>
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    533e:	d0 93 a0 17 	sts	0x17A0, r29	; 0x8017a0 <_twiCurrentHandler+0x1>
    5342:	c0 93 9f 17 	sts	0x179F, r28	; 0x80179f <_twiCurrentHandler>
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	8f 0d       	add	r24, r15
    534a:	80 93 a1 17 	sts	0x17A1, r24	; 0x8017a1 <_twiMessageLen>
    534e:	88 81       	ld	r24, Y
    5350:	88 0f       	add	r24, r24
    5352:	80 93 a2 17 	sts	0x17A2, r24	; 0x8017a2 <_twiMessageBuffer>
    5356:	ff 20       	and	r15, r15
    5358:	89 f0       	breq	.+34     	; 0x537c <twiTransmit+0x72>
    535a:	f8 01       	movw	r30, r16
    535c:	a3 ea       	ldi	r26, 0xA3	; 163
    535e:	b7 e1       	ldi	r27, 0x17	; 23
    5360:	4f ef       	ldi	r20, 0xFF	; 255
    5362:	4f 0d       	add	r20, r15
    5364:	64 2f       	mov	r22, r20
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	cb 01       	movw	r24, r22
    536a:	01 96       	adiw	r24, 0x01	; 1
    536c:	b8 01       	movw	r22, r16
    536e:	68 0f       	add	r22, r24
    5370:	79 1f       	adc	r23, r25
    5372:	81 91       	ld	r24, Z+
    5374:	8d 93       	st	X+, r24
    5376:	e6 17       	cp	r30, r22
    5378:	f7 07       	cpc	r31, r23
    537a:	d9 f7       	brne	.-10     	; 0x5372 <twiTransmit+0x68>
    537c:	88 ef       	ldi	r24, 0xF8	; 248
    537e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_twiCurrentState>
    5382:	85 ea       	ldi	r24, 0xA5	; 165
    5384:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5388:	84 e0       	ldi	r24, 0x04	; 4
    538a:	05 c0       	rjmp	.+10     	; 0x5396 <twiTransmit+0x8c>
    538c:	86 e0       	ldi	r24, 0x06	; 6
    538e:	03 c0       	rjmp	.+6      	; 0x5396 <twiTransmit+0x8c>
    5390:	87 e0       	ldi	r24, 0x07	; 7
    5392:	01 c0       	rjmp	.+2      	; 0x5396 <twiTransmit+0x8c>
    5394:	82 e0       	ldi	r24, 0x02	; 2
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	1f 91       	pop	r17
    539c:	0f 91       	pop	r16
    539e:	ff 90       	pop	r15
    53a0:	08 95       	ret

000053a2 <twiReceive>:
    53a2:	1f 93       	push	r17
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	00 97       	sbiw	r24, 0x00	; 0
    53aa:	29 f1       	breq	.+74     	; 0x53f6 <twiReceive+0x54>
    53ac:	6b 30       	cpi	r22, 0x0B	; 11
    53ae:	28 f5       	brcc	.+74     	; 0x53fa <twiReceive+0x58>
    53b0:	16 2f       	mov	r17, r22
    53b2:	ec 01       	movw	r28, r24
    53b4:	a6 df       	rcall	.-180    	; 0x5302 <twiIsBusy>
    53b6:	81 11       	cpse	r24, r1
    53b8:	22 c0       	rjmp	.+68     	; 0x53fe <twiReceive+0x5c>
    53ba:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_twiCurrentHandler>
    53be:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_twiCurrentHandler+0x1>
    53c2:	c8 17       	cp	r28, r24
    53c4:	d9 07       	cpc	r29, r25
    53c6:	41 f0       	breq	.+16     	; 0x53d8 <twiReceive+0x36>
    53c8:	3e df       	rcall	.-388    	; 0x5246 <_initTwiInterface>
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    53d0:	d0 93 a0 17 	sts	0x17A0, r29	; 0x8017a0 <_twiCurrentHandler+0x1>
    53d4:	c0 93 9f 17 	sts	0x179F, r28	; 0x80179f <_twiCurrentHandler>
    53d8:	10 93 a1 17 	sts	0x17A1, r17	; 0x8017a1 <_twiMessageLen>
    53dc:	88 81       	ld	r24, Y
    53de:	88 0f       	add	r24, r24
    53e0:	81 60       	ori	r24, 0x01	; 1
    53e2:	80 93 a2 17 	sts	0x17A2, r24	; 0x8017a2 <_twiMessageBuffer>
    53e6:	88 ef       	ldi	r24, 0xF8	; 248
    53e8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_twiCurrentState>
    53ec:	85 ea       	ldi	r24, 0xA5	; 165
    53ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53f2:	85 e0       	ldi	r24, 0x05	; 5
    53f4:	05 c0       	rjmp	.+10     	; 0x5400 <twiReceive+0x5e>
    53f6:	86 e0       	ldi	r24, 0x06	; 6
    53f8:	03 c0       	rjmp	.+6      	; 0x5400 <twiReceive+0x5e>
    53fa:	87 e0       	ldi	r24, 0x07	; 7
    53fc:	01 c0       	rjmp	.+2      	; 0x5400 <twiReceive+0x5e>
    53fe:	82 e0       	ldi	r24, 0x02	; 2
    5400:	df 91       	pop	r29
    5402:	cf 91       	pop	r28
    5404:	1f 91       	pop	r17
    5406:	08 95       	ret

00005408 <__vector_39>:
    5408:	1f 92       	push	r1
    540a:	0f 92       	push	r0
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	0f 92       	push	r0
    5410:	11 24       	eor	r1, r1
    5412:	0b b6       	in	r0, 0x3b	; 59
    5414:	0f 92       	push	r0
    5416:	2f 93       	push	r18
    5418:	3f 93       	push	r19
    541a:	4f 93       	push	r20
    541c:	5f 93       	push	r21
    541e:	6f 93       	push	r22
    5420:	7f 93       	push	r23
    5422:	8f 93       	push	r24
    5424:	9f 93       	push	r25
    5426:	af 93       	push	r26
    5428:	bf 93       	push	r27
    542a:	ef 93       	push	r30
    542c:	ff 93       	push	r31
    542e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5432:	8e 2f       	mov	r24, r30
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	fc 01       	movw	r30, r24
    5438:	38 97       	sbiw	r30, 0x08	; 8
    543a:	e1 35       	cpi	r30, 0x51	; 81
    543c:	f1 05       	cpc	r31, r1
    543e:	08 f0       	brcs	.+2      	; 0x5442 <__vector_39+0x3a>
    5440:	75 c0       	rjmp	.+234    	; 0x552c <__vector_39+0x124>
    5442:	88 27       	eor	r24, r24
    5444:	e4 58       	subi	r30, 0x84	; 132
    5446:	ff 4f       	sbci	r31, 0xFF	; 255
    5448:	8f 4f       	sbci	r24, 0xFF	; 255
    544a:	76 c2       	rjmp	.+1260   	; 0x5938 <__tablejump2__>
    544c:	10 92 9e 17 	sts	0x179E, r1	; 0x80179e <_index.1885>
    5450:	e0 91 9e 17 	lds	r30, 0x179E	; 0x80179e <_index.1885>
    5454:	80 91 a1 17 	lds	r24, 0x17A1	; 0x8017a1 <_twiMessageLen>
    5458:	e8 17       	cp	r30, r24
    545a:	70 f4       	brcc	.+28     	; 0x5478 <__vector_39+0x70>
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	8e 0f       	add	r24, r30
    5460:	80 93 9e 17 	sts	0x179E, r24	; 0x80179e <_index.1885>
    5464:	f0 e0       	ldi	r31, 0x00	; 0
    5466:	ee 55       	subi	r30, 0x5E	; 94
    5468:	f8 4e       	sbci	r31, 0xE8	; 232
    546a:	80 81       	ld	r24, Z
    546c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5470:	85 e8       	ldi	r24, 0x85	; 133
    5472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5476:	72 c0       	rjmp	.+228    	; 0x555c <__vector_39+0x154>
    5478:	84 e9       	ldi	r24, 0x94	; 148
    547a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    547e:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_twiCurrentHandler>
    5482:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_twiCurrentHandler+0x1>
    5486:	dc 01       	movw	r26, r24
    5488:	12 96       	adiw	r26, 0x02	; 2
    548a:	ed 91       	ld	r30, X+
    548c:	fc 91       	ld	r31, X
    548e:	13 97       	sbiw	r26, 0x03	; 3
    5490:	30 97       	sbiw	r30, 0x00	; 0
    5492:	09 f4       	brne	.+2      	; 0x5496 <__vector_39+0x8e>
    5494:	63 c0       	rjmp	.+198    	; 0x555c <__vector_39+0x154>
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	40 e0       	ldi	r20, 0x00	; 0
    549a:	50 e0       	ldi	r21, 0x00	; 0
    549c:	64 e0       	ldi	r22, 0x04	; 4
    549e:	19 95       	eicall
    54a0:	5d c0       	rjmp	.+186    	; 0x555c <__vector_39+0x154>
    54a2:	e0 91 9e 17 	lds	r30, 0x179E	; 0x80179e <_index.1885>
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	8e 0f       	add	r24, r30
    54aa:	80 93 9e 17 	sts	0x179E, r24	; 0x80179e <_index.1885>
    54ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54b2:	f0 e0       	ldi	r31, 0x00	; 0
    54b4:	ee 55       	subi	r30, 0x5E	; 94
    54b6:	f8 4e       	sbci	r31, 0xE8	; 232
    54b8:	80 83       	st	Z, r24
    54ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54be:	80 34       	cpi	r24, 0x40	; 64
    54c0:	11 f4       	brne	.+4      	; 0x54c6 <__vector_39+0xbe>
    54c2:	10 92 9e 17 	sts	0x179E, r1	; 0x80179e <_index.1885>
    54c6:	20 91 9e 17 	lds	r18, 0x179E	; 0x80179e <_index.1885>
    54ca:	30 e0       	ldi	r19, 0x00	; 0
    54cc:	80 91 a1 17 	lds	r24, 0x17A1	; 0x8017a1 <_twiMessageLen>
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	01 97       	sbiw	r24, 0x01	; 1
    54d4:	28 17       	cp	r18, r24
    54d6:	39 07       	cpc	r19, r25
    54d8:	24 f4       	brge	.+8      	; 0x54e2 <__vector_39+0xda>
    54da:	85 ec       	ldi	r24, 0xC5	; 197
    54dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e0:	3d c0       	rjmp	.+122    	; 0x555c <__vector_39+0x154>
    54e2:	85 e8       	ldi	r24, 0x85	; 133
    54e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e8:	39 c0       	rjmp	.+114    	; 0x555c <__vector_39+0x154>
    54ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54ee:	e0 91 9e 17 	lds	r30, 0x179E	; 0x80179e <_index.1885>
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	ee 55       	subi	r30, 0x5E	; 94
    54f6:	f8 4e       	sbci	r31, 0xE8	; 232
    54f8:	80 83       	st	Z, r24
    54fa:	84 e9       	ldi	r24, 0x94	; 148
    54fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5500:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_twiCurrentHandler>
    5504:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_twiCurrentHandler+0x1>
    5508:	dc 01       	movw	r26, r24
    550a:	12 96       	adiw	r26, 0x02	; 2
    550c:	ed 91       	ld	r30, X+
    550e:	fc 91       	ld	r31, X
    5510:	13 97       	sbiw	r26, 0x03	; 3
    5512:	30 97       	sbiw	r30, 0x00	; 0
    5514:	19 f1       	breq	.+70     	; 0x555c <__vector_39+0x154>
    5516:	20 91 a1 17 	lds	r18, 0x17A1	; 0x8017a1 <_twiMessageLen>
    551a:	42 ea       	ldi	r20, 0xA2	; 162
    551c:	57 e1       	ldi	r21, 0x17	; 23
    551e:	65 e0       	ldi	r22, 0x05	; 5
    5520:	19 95       	eicall
    5522:	1c c0       	rjmp	.+56     	; 0x555c <__vector_39+0x154>
    5524:	85 ea       	ldi	r24, 0xA5	; 165
    5526:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    552a:	18 c0       	rjmp	.+48     	; 0x555c <__vector_39+0x154>
    552c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5530:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_twiCurrentState>
    5534:	84 e0       	ldi	r24, 0x04	; 4
    5536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    553a:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_twiCurrentHandler>
    553e:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_twiCurrentHandler+0x1>
    5542:	dc 01       	movw	r26, r24
    5544:	12 96       	adiw	r26, 0x02	; 2
    5546:	ed 91       	ld	r30, X+
    5548:	fc 91       	ld	r31, X
    554a:	13 97       	sbiw	r26, 0x03	; 3
    554c:	30 97       	sbiw	r30, 0x00	; 0
    554e:	31 f0       	breq	.+12     	; 0x555c <__vector_39+0x154>
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	40 e0       	ldi	r20, 0x00	; 0
    5554:	50 e0       	ldi	r21, 0x00	; 0
    5556:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <_twiCurrentState>
    555a:	19 95       	eicall
    555c:	ff 91       	pop	r31
    555e:	ef 91       	pop	r30
    5560:	bf 91       	pop	r27
    5562:	af 91       	pop	r26
    5564:	9f 91       	pop	r25
    5566:	8f 91       	pop	r24
    5568:	7f 91       	pop	r23
    556a:	6f 91       	pop	r22
    556c:	5f 91       	pop	r21
    556e:	4f 91       	pop	r20
    5570:	3f 91       	pop	r19
    5572:	2f 91       	pop	r18
    5574:	0f 90       	pop	r0
    5576:	0b be       	out	0x3b, r0	; 59
    5578:	0f 90       	pop	r0
    557a:	0f be       	out	0x3f, r0	; 63
    557c:	0f 90       	pop	r0
    557e:	1f 90       	pop	r1
    5580:	18 95       	reti

00005582 <fifo_init>:
    5582:	fc 01       	movw	r30, r24
    5584:	41 11       	cpse	r20, r1
    5586:	01 c0       	rjmp	.+2      	; 0x558a <fifo_init+0x8>
    5588:	00 d3       	rcall	.+1536   	; 0x5b8a <abort>
    558a:	84 2f       	mov	r24, r20
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	9c 01       	movw	r18, r24
    5590:	21 50       	subi	r18, 0x01	; 1
    5592:	31 09       	sbc	r19, r1
    5594:	82 23       	and	r24, r18
    5596:	93 23       	and	r25, r19
    5598:	89 2b       	or	r24, r25
    559a:	09 f0       	breq	.+2      	; 0x559e <fifo_init+0x1c>
    559c:	f6 d2       	rcall	.+1516   	; 0x5b8a <abort>
    559e:	41 38       	cpi	r20, 0x81	; 129
    55a0:	08 f0       	brcs	.+2      	; 0x55a4 <fifo_init+0x22>
    55a2:	f3 d2       	rcall	.+1510   	; 0x5b8a <abort>
    55a4:	12 82       	std	Z+2, r1	; 0x02
    55a6:	13 82       	std	Z+3, r1	; 0x03
    55a8:	44 83       	std	Z+4, r20	; 0x04
    55aa:	44 0f       	add	r20, r20
    55ac:	41 50       	subi	r20, 0x01	; 1
    55ae:	45 83       	std	Z+5, r20	; 0x05
    55b0:	71 83       	std	Z+1, r23	; 0x01
    55b2:	60 83       	st	Z, r22
    55b4:	80 e0       	ldi	r24, 0x00	; 0
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	08 95       	ret

000055ba <__subsf3>:
    55ba:	50 58       	subi	r21, 0x80	; 128

000055bc <__addsf3>:
    55bc:	bb 27       	eor	r27, r27
    55be:	aa 27       	eor	r26, r26
    55c0:	0e d0       	rcall	.+28     	; 0x55de <__addsf3x>
    55c2:	21 c1       	rjmp	.+578    	; 0x5806 <__fp_round>
    55c4:	12 d1       	rcall	.+548    	; 0x57ea <__fp_pscA>
    55c6:	30 f0       	brcs	.+12     	; 0x55d4 <__addsf3+0x18>
    55c8:	17 d1       	rcall	.+558    	; 0x57f8 <__fp_pscB>
    55ca:	20 f0       	brcs	.+8      	; 0x55d4 <__addsf3+0x18>
    55cc:	31 f4       	brne	.+12     	; 0x55da <__addsf3+0x1e>
    55ce:	9f 3f       	cpi	r25, 0xFF	; 255
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <__addsf3+0x1a>
    55d2:	1e f4       	brtc	.+6      	; 0x55da <__addsf3+0x1e>
    55d4:	07 c1       	rjmp	.+526    	; 0x57e4 <__fp_nan>
    55d6:	0e f4       	brtc	.+2      	; 0x55da <__addsf3+0x1e>
    55d8:	e0 95       	com	r30
    55da:	e7 fb       	bst	r30, 7
    55dc:	fd c0       	rjmp	.+506    	; 0x57d8 <__fp_inf>

000055de <__addsf3x>:
    55de:	e9 2f       	mov	r30, r25
    55e0:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__fp_split3>
    55e4:	78 f3       	brcs	.-34     	; 0x55c4 <__addsf3+0x8>
    55e6:	ba 17       	cp	r27, r26
    55e8:	62 07       	cpc	r22, r18
    55ea:	73 07       	cpc	r23, r19
    55ec:	84 07       	cpc	r24, r20
    55ee:	95 07       	cpc	r25, r21
    55f0:	20 f0       	brcs	.+8      	; 0x55fa <__addsf3x+0x1c>
    55f2:	79 f4       	brne	.+30     	; 0x5612 <__addsf3x+0x34>
    55f4:	a6 f5       	brtc	.+104    	; 0x565e <__addsf3x+0x80>
    55f6:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__fp_zero>
    55fa:	0e f4       	brtc	.+2      	; 0x55fe <__addsf3x+0x20>
    55fc:	e0 95       	com	r30
    55fe:	0b 2e       	mov	r0, r27
    5600:	ba 2f       	mov	r27, r26
    5602:	a0 2d       	mov	r26, r0
    5604:	0b 01       	movw	r0, r22
    5606:	b9 01       	movw	r22, r18
    5608:	90 01       	movw	r18, r0
    560a:	0c 01       	movw	r0, r24
    560c:	ca 01       	movw	r24, r20
    560e:	a0 01       	movw	r20, r0
    5610:	11 24       	eor	r1, r1
    5612:	ff 27       	eor	r31, r31
    5614:	59 1b       	sub	r21, r25
    5616:	99 f0       	breq	.+38     	; 0x563e <__addsf3x+0x60>
    5618:	59 3f       	cpi	r21, 0xF9	; 249
    561a:	50 f4       	brcc	.+20     	; 0x5630 <__addsf3x+0x52>
    561c:	50 3e       	cpi	r21, 0xE0	; 224
    561e:	68 f1       	brcs	.+90     	; 0x567a <__addsf3x+0x9c>
    5620:	1a 16       	cp	r1, r26
    5622:	f0 40       	sbci	r31, 0x00	; 0
    5624:	a2 2f       	mov	r26, r18
    5626:	23 2f       	mov	r18, r19
    5628:	34 2f       	mov	r19, r20
    562a:	44 27       	eor	r20, r20
    562c:	58 5f       	subi	r21, 0xF8	; 248
    562e:	f3 cf       	rjmp	.-26     	; 0x5616 <__addsf3x+0x38>
    5630:	46 95       	lsr	r20
    5632:	37 95       	ror	r19
    5634:	27 95       	ror	r18
    5636:	a7 95       	ror	r26
    5638:	f0 40       	sbci	r31, 0x00	; 0
    563a:	53 95       	inc	r21
    563c:	c9 f7       	brne	.-14     	; 0x5630 <__addsf3x+0x52>
    563e:	7e f4       	brtc	.+30     	; 0x565e <__addsf3x+0x80>
    5640:	1f 16       	cp	r1, r31
    5642:	ba 0b       	sbc	r27, r26
    5644:	62 0b       	sbc	r22, r18
    5646:	73 0b       	sbc	r23, r19
    5648:	84 0b       	sbc	r24, r20
    564a:	ba f0       	brmi	.+46     	; 0x567a <__addsf3x+0x9c>
    564c:	91 50       	subi	r25, 0x01	; 1
    564e:	a1 f0       	breq	.+40     	; 0x5678 <__addsf3x+0x9a>
    5650:	ff 0f       	add	r31, r31
    5652:	bb 1f       	adc	r27, r27
    5654:	66 1f       	adc	r22, r22
    5656:	77 1f       	adc	r23, r23
    5658:	88 1f       	adc	r24, r24
    565a:	c2 f7       	brpl	.-16     	; 0x564c <__addsf3x+0x6e>
    565c:	0e c0       	rjmp	.+28     	; 0x567a <__addsf3x+0x9c>
    565e:	ba 0f       	add	r27, r26
    5660:	62 1f       	adc	r22, r18
    5662:	73 1f       	adc	r23, r19
    5664:	84 1f       	adc	r24, r20
    5666:	48 f4       	brcc	.+18     	; 0x567a <__addsf3x+0x9c>
    5668:	87 95       	ror	r24
    566a:	77 95       	ror	r23
    566c:	67 95       	ror	r22
    566e:	b7 95       	ror	r27
    5670:	f7 95       	ror	r31
    5672:	9e 3f       	cpi	r25, 0xFE	; 254
    5674:	08 f0       	brcs	.+2      	; 0x5678 <__addsf3x+0x9a>
    5676:	b1 cf       	rjmp	.-158    	; 0x55da <__addsf3+0x1e>
    5678:	93 95       	inc	r25
    567a:	88 0f       	add	r24, r24
    567c:	08 f0       	brcs	.+2      	; 0x5680 <__addsf3x+0xa2>
    567e:	99 27       	eor	r25, r25
    5680:	ee 0f       	add	r30, r30
    5682:	97 95       	ror	r25
    5684:	87 95       	ror	r24
    5686:	08 95       	ret

00005688 <__divsf3>:
    5688:	0d d0       	rcall	.+26     	; 0x56a4 <__divsf3x>
    568a:	bd c0       	rjmp	.+378    	; 0x5806 <__fp_round>
    568c:	b5 d0       	rcall	.+362    	; 0x57f8 <__fp_pscB>
    568e:	48 f0       	brcs	.+18     	; 0x56a2 <__divsf3+0x1a>
    5690:	ac d0       	rcall	.+344    	; 0x57ea <__fp_pscA>
    5692:	38 f0       	brcs	.+14     	; 0x56a2 <__divsf3+0x1a>
    5694:	21 f4       	brne	.+8      	; 0x569e <__divsf3+0x16>
    5696:	5f 3f       	cpi	r21, 0xFF	; 255
    5698:	21 f0       	breq	.+8      	; 0x56a2 <__divsf3+0x1a>
    569a:	9e c0       	rjmp	.+316    	; 0x57d8 <__fp_inf>
    569c:	51 11       	cpse	r21, r1
    569e:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_szero>
    56a2:	a0 c0       	rjmp	.+320    	; 0x57e4 <__fp_nan>

000056a4 <__divsf3x>:
    56a4:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__fp_split3>
    56a8:	88 f3       	brcs	.-30     	; 0x568c <__divsf3+0x4>

000056aa <__divsf3_pse>:
    56aa:	99 23       	and	r25, r25
    56ac:	b9 f3       	breq	.-18     	; 0x569c <__divsf3+0x14>
    56ae:	55 23       	and	r21, r21
    56b0:	a1 f3       	breq	.-24     	; 0x569a <__divsf3+0x12>
    56b2:	95 1b       	sub	r25, r21
    56b4:	55 0b       	sbc	r21, r21
    56b6:	bb 27       	eor	r27, r27
    56b8:	aa 27       	eor	r26, r26
    56ba:	62 17       	cp	r22, r18
    56bc:	73 07       	cpc	r23, r19
    56be:	84 07       	cpc	r24, r20
    56c0:	38 f0       	brcs	.+14     	; 0x56d0 <__divsf3_pse+0x26>
    56c2:	9f 5f       	subi	r25, 0xFF	; 255
    56c4:	5f 4f       	sbci	r21, 0xFF	; 255
    56c6:	22 0f       	add	r18, r18
    56c8:	33 1f       	adc	r19, r19
    56ca:	44 1f       	adc	r20, r20
    56cc:	aa 1f       	adc	r26, r26
    56ce:	a9 f3       	breq	.-22     	; 0x56ba <__divsf3_pse+0x10>
    56d0:	34 d0       	rcall	.+104    	; 0x573a <__divsf3_pse+0x90>
    56d2:	0e 2e       	mov	r0, r30
    56d4:	3a f0       	brmi	.+14     	; 0x56e4 <__divsf3_pse+0x3a>
    56d6:	e0 e8       	ldi	r30, 0x80	; 128
    56d8:	31 d0       	rcall	.+98     	; 0x573c <__divsf3_pse+0x92>
    56da:	91 50       	subi	r25, 0x01	; 1
    56dc:	50 40       	sbci	r21, 0x00	; 0
    56de:	e6 95       	lsr	r30
    56e0:	00 1c       	adc	r0, r0
    56e2:	ca f7       	brpl	.-14     	; 0x56d6 <__divsf3_pse+0x2c>
    56e4:	2a d0       	rcall	.+84     	; 0x573a <__divsf3_pse+0x90>
    56e6:	fe 2f       	mov	r31, r30
    56e8:	28 d0       	rcall	.+80     	; 0x573a <__divsf3_pse+0x90>
    56ea:	66 0f       	add	r22, r22
    56ec:	77 1f       	adc	r23, r23
    56ee:	88 1f       	adc	r24, r24
    56f0:	bb 1f       	adc	r27, r27
    56f2:	26 17       	cp	r18, r22
    56f4:	37 07       	cpc	r19, r23
    56f6:	48 07       	cpc	r20, r24
    56f8:	ab 07       	cpc	r26, r27
    56fa:	b0 e8       	ldi	r27, 0x80	; 128
    56fc:	09 f0       	breq	.+2      	; 0x5700 <__divsf3_pse+0x56>
    56fe:	bb 0b       	sbc	r27, r27
    5700:	80 2d       	mov	r24, r0
    5702:	bf 01       	movw	r22, r30
    5704:	ff 27       	eor	r31, r31
    5706:	93 58       	subi	r25, 0x83	; 131
    5708:	5f 4f       	sbci	r21, 0xFF	; 255
    570a:	32 f0       	brmi	.+12     	; 0x5718 <__divsf3_pse+0x6e>
    570c:	9e 3f       	cpi	r25, 0xFE	; 254
    570e:	51 05       	cpc	r21, r1
    5710:	70 f0       	brcs	.+28     	; 0x572e <__divsf3_pse+0x84>
    5712:	62 c0       	rjmp	.+196    	; 0x57d8 <__fp_inf>
    5714:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_szero>
    5718:	5f 3f       	cpi	r21, 0xFF	; 255
    571a:	e4 f3       	brlt	.-8      	; 0x5714 <__divsf3_pse+0x6a>
    571c:	98 3e       	cpi	r25, 0xE8	; 232
    571e:	d4 f3       	brlt	.-12     	; 0x5714 <__divsf3_pse+0x6a>
    5720:	86 95       	lsr	r24
    5722:	77 95       	ror	r23
    5724:	67 95       	ror	r22
    5726:	b7 95       	ror	r27
    5728:	f7 95       	ror	r31
    572a:	9f 5f       	subi	r25, 0xFF	; 255
    572c:	c9 f7       	brne	.-14     	; 0x5720 <__divsf3_pse+0x76>
    572e:	88 0f       	add	r24, r24
    5730:	91 1d       	adc	r25, r1
    5732:	96 95       	lsr	r25
    5734:	87 95       	ror	r24
    5736:	97 f9       	bld	r25, 7
    5738:	08 95       	ret
    573a:	e1 e0       	ldi	r30, 0x01	; 1
    573c:	66 0f       	add	r22, r22
    573e:	77 1f       	adc	r23, r23
    5740:	88 1f       	adc	r24, r24
    5742:	bb 1f       	adc	r27, r27
    5744:	62 17       	cp	r22, r18
    5746:	73 07       	cpc	r23, r19
    5748:	84 07       	cpc	r24, r20
    574a:	ba 07       	cpc	r27, r26
    574c:	20 f0       	brcs	.+8      	; 0x5756 <__divsf3_pse+0xac>
    574e:	62 1b       	sub	r22, r18
    5750:	73 0b       	sbc	r23, r19
    5752:	84 0b       	sbc	r24, r20
    5754:	ba 0b       	sbc	r27, r26
    5756:	ee 1f       	adc	r30, r30
    5758:	88 f7       	brcc	.-30     	; 0x573c <__divsf3_pse+0x92>
    575a:	e0 95       	com	r30
    575c:	08 95       	ret

0000575e <__floatunsisf>:
    575e:	e8 94       	clt
    5760:	09 c0       	rjmp	.+18     	; 0x5774 <__floatsisf+0x12>

00005762 <__floatsisf>:
    5762:	97 fb       	bst	r25, 7
    5764:	3e f4       	brtc	.+14     	; 0x5774 <__floatsisf+0x12>
    5766:	90 95       	com	r25
    5768:	80 95       	com	r24
    576a:	70 95       	com	r23
    576c:	61 95       	neg	r22
    576e:	7f 4f       	sbci	r23, 0xFF	; 255
    5770:	8f 4f       	sbci	r24, 0xFF	; 255
    5772:	9f 4f       	sbci	r25, 0xFF	; 255
    5774:	99 23       	and	r25, r25
    5776:	a9 f0       	breq	.+42     	; 0x57a2 <__floatsisf+0x40>
    5778:	f9 2f       	mov	r31, r25
    577a:	96 e9       	ldi	r25, 0x96	; 150
    577c:	bb 27       	eor	r27, r27
    577e:	93 95       	inc	r25
    5780:	f6 95       	lsr	r31
    5782:	87 95       	ror	r24
    5784:	77 95       	ror	r23
    5786:	67 95       	ror	r22
    5788:	b7 95       	ror	r27
    578a:	f1 11       	cpse	r31, r1
    578c:	f8 cf       	rjmp	.-16     	; 0x577e <__floatsisf+0x1c>
    578e:	fa f4       	brpl	.+62     	; 0x57ce <__floatsisf+0x6c>
    5790:	bb 0f       	add	r27, r27
    5792:	11 f4       	brne	.+4      	; 0x5798 <__floatsisf+0x36>
    5794:	60 ff       	sbrs	r22, 0
    5796:	1b c0       	rjmp	.+54     	; 0x57ce <__floatsisf+0x6c>
    5798:	6f 5f       	subi	r22, 0xFF	; 255
    579a:	7f 4f       	sbci	r23, 0xFF	; 255
    579c:	8f 4f       	sbci	r24, 0xFF	; 255
    579e:	9f 4f       	sbci	r25, 0xFF	; 255
    57a0:	16 c0       	rjmp	.+44     	; 0x57ce <__floatsisf+0x6c>
    57a2:	88 23       	and	r24, r24
    57a4:	11 f0       	breq	.+4      	; 0x57aa <__floatsisf+0x48>
    57a6:	96 e9       	ldi	r25, 0x96	; 150
    57a8:	11 c0       	rjmp	.+34     	; 0x57cc <__floatsisf+0x6a>
    57aa:	77 23       	and	r23, r23
    57ac:	21 f0       	breq	.+8      	; 0x57b6 <__floatsisf+0x54>
    57ae:	9e e8       	ldi	r25, 0x8E	; 142
    57b0:	87 2f       	mov	r24, r23
    57b2:	76 2f       	mov	r23, r22
    57b4:	05 c0       	rjmp	.+10     	; 0x57c0 <__floatsisf+0x5e>
    57b6:	66 23       	and	r22, r22
    57b8:	71 f0       	breq	.+28     	; 0x57d6 <__floatsisf+0x74>
    57ba:	96 e8       	ldi	r25, 0x86	; 134
    57bc:	86 2f       	mov	r24, r22
    57be:	70 e0       	ldi	r23, 0x00	; 0
    57c0:	60 e0       	ldi	r22, 0x00	; 0
    57c2:	2a f0       	brmi	.+10     	; 0x57ce <__floatsisf+0x6c>
    57c4:	9a 95       	dec	r25
    57c6:	66 0f       	add	r22, r22
    57c8:	77 1f       	adc	r23, r23
    57ca:	88 1f       	adc	r24, r24
    57cc:	da f7       	brpl	.-10     	; 0x57c4 <__floatsisf+0x62>
    57ce:	88 0f       	add	r24, r24
    57d0:	96 95       	lsr	r25
    57d2:	87 95       	ror	r24
    57d4:	97 f9       	bld	r25, 7
    57d6:	08 95       	ret

000057d8 <__fp_inf>:
    57d8:	97 f9       	bld	r25, 7
    57da:	9f 67       	ori	r25, 0x7F	; 127
    57dc:	80 e8       	ldi	r24, 0x80	; 128
    57de:	70 e0       	ldi	r23, 0x00	; 0
    57e0:	60 e0       	ldi	r22, 0x00	; 0
    57e2:	08 95       	ret

000057e4 <__fp_nan>:
    57e4:	9f ef       	ldi	r25, 0xFF	; 255
    57e6:	80 ec       	ldi	r24, 0xC0	; 192
    57e8:	08 95       	ret

000057ea <__fp_pscA>:
    57ea:	00 24       	eor	r0, r0
    57ec:	0a 94       	dec	r0
    57ee:	16 16       	cp	r1, r22
    57f0:	17 06       	cpc	r1, r23
    57f2:	18 06       	cpc	r1, r24
    57f4:	09 06       	cpc	r0, r25
    57f6:	08 95       	ret

000057f8 <__fp_pscB>:
    57f8:	00 24       	eor	r0, r0
    57fa:	0a 94       	dec	r0
    57fc:	12 16       	cp	r1, r18
    57fe:	13 06       	cpc	r1, r19
    5800:	14 06       	cpc	r1, r20
    5802:	05 06       	cpc	r0, r21
    5804:	08 95       	ret

00005806 <__fp_round>:
    5806:	09 2e       	mov	r0, r25
    5808:	03 94       	inc	r0
    580a:	00 0c       	add	r0, r0
    580c:	11 f4       	brne	.+4      	; 0x5812 <__fp_round+0xc>
    580e:	88 23       	and	r24, r24
    5810:	52 f0       	brmi	.+20     	; 0x5826 <__fp_round+0x20>
    5812:	bb 0f       	add	r27, r27
    5814:	40 f4       	brcc	.+16     	; 0x5826 <__fp_round+0x20>
    5816:	bf 2b       	or	r27, r31
    5818:	11 f4       	brne	.+4      	; 0x581e <__fp_round+0x18>
    581a:	60 ff       	sbrs	r22, 0
    581c:	04 c0       	rjmp	.+8      	; 0x5826 <__fp_round+0x20>
    581e:	6f 5f       	subi	r22, 0xFF	; 255
    5820:	7f 4f       	sbci	r23, 0xFF	; 255
    5822:	8f 4f       	sbci	r24, 0xFF	; 255
    5824:	9f 4f       	sbci	r25, 0xFF	; 255
    5826:	08 95       	ret

00005828 <__mulsf3>:
    5828:	0c d0       	rcall	.+24     	; 0x5842 <__mulsf3x>
    582a:	ed cf       	rjmp	.-38     	; 0x5806 <__fp_round>
    582c:	de df       	rcall	.-68     	; 0x57ea <__fp_pscA>
    582e:	28 f0       	brcs	.+10     	; 0x583a <__mulsf3+0x12>
    5830:	e3 df       	rcall	.-58     	; 0x57f8 <__fp_pscB>
    5832:	18 f0       	brcs	.+6      	; 0x583a <__mulsf3+0x12>
    5834:	95 23       	and	r25, r21
    5836:	09 f0       	breq	.+2      	; 0x583a <__mulsf3+0x12>
    5838:	cf cf       	rjmp	.-98     	; 0x57d8 <__fp_inf>
    583a:	d4 cf       	rjmp	.-88     	; 0x57e4 <__fp_nan>
    583c:	11 24       	eor	r1, r1
    583e:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_szero>

00005842 <__mulsf3x>:
    5842:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__fp_split3>
    5846:	90 f3       	brcs	.-28     	; 0x582c <__mulsf3+0x4>

00005848 <__mulsf3_pse>:
    5848:	95 9f       	mul	r25, r21
    584a:	c1 f3       	breq	.-16     	; 0x583c <__mulsf3+0x14>
    584c:	95 0f       	add	r25, r21
    584e:	50 e0       	ldi	r21, 0x00	; 0
    5850:	55 1f       	adc	r21, r21
    5852:	62 9f       	mul	r22, r18
    5854:	f0 01       	movw	r30, r0
    5856:	72 9f       	mul	r23, r18
    5858:	bb 27       	eor	r27, r27
    585a:	f0 0d       	add	r31, r0
    585c:	b1 1d       	adc	r27, r1
    585e:	63 9f       	mul	r22, r19
    5860:	aa 27       	eor	r26, r26
    5862:	f0 0d       	add	r31, r0
    5864:	b1 1d       	adc	r27, r1
    5866:	aa 1f       	adc	r26, r26
    5868:	64 9f       	mul	r22, r20
    586a:	66 27       	eor	r22, r22
    586c:	b0 0d       	add	r27, r0
    586e:	a1 1d       	adc	r26, r1
    5870:	66 1f       	adc	r22, r22
    5872:	82 9f       	mul	r24, r18
    5874:	22 27       	eor	r18, r18
    5876:	b0 0d       	add	r27, r0
    5878:	a1 1d       	adc	r26, r1
    587a:	62 1f       	adc	r22, r18
    587c:	73 9f       	mul	r23, r19
    587e:	b0 0d       	add	r27, r0
    5880:	a1 1d       	adc	r26, r1
    5882:	62 1f       	adc	r22, r18
    5884:	83 9f       	mul	r24, r19
    5886:	a0 0d       	add	r26, r0
    5888:	61 1d       	adc	r22, r1
    588a:	22 1f       	adc	r18, r18
    588c:	74 9f       	mul	r23, r20
    588e:	33 27       	eor	r19, r19
    5890:	a0 0d       	add	r26, r0
    5892:	61 1d       	adc	r22, r1
    5894:	23 1f       	adc	r18, r19
    5896:	84 9f       	mul	r24, r20
    5898:	60 0d       	add	r22, r0
    589a:	21 1d       	adc	r18, r1
    589c:	82 2f       	mov	r24, r18
    589e:	76 2f       	mov	r23, r22
    58a0:	6a 2f       	mov	r22, r26
    58a2:	11 24       	eor	r1, r1
    58a4:	9f 57       	subi	r25, 0x7F	; 127
    58a6:	50 40       	sbci	r21, 0x00	; 0
    58a8:	92 f0       	brmi	.+36     	; 0x58ce <__mulsf3_pse+0x86>
    58aa:	e9 f0       	breq	.+58     	; 0x58e6 <__mulsf3_pse+0x9e>
    58ac:	88 23       	and	r24, r24
    58ae:	4a f0       	brmi	.+18     	; 0x58c2 <__mulsf3_pse+0x7a>
    58b0:	ee 0f       	add	r30, r30
    58b2:	ff 1f       	adc	r31, r31
    58b4:	bb 1f       	adc	r27, r27
    58b6:	66 1f       	adc	r22, r22
    58b8:	77 1f       	adc	r23, r23
    58ba:	88 1f       	adc	r24, r24
    58bc:	91 50       	subi	r25, 0x01	; 1
    58be:	50 40       	sbci	r21, 0x00	; 0
    58c0:	a9 f7       	brne	.-22     	; 0x58ac <__mulsf3_pse+0x64>
    58c2:	9e 3f       	cpi	r25, 0xFE	; 254
    58c4:	51 05       	cpc	r21, r1
    58c6:	78 f0       	brcs	.+30     	; 0x58e6 <__mulsf3_pse+0x9e>
    58c8:	87 cf       	rjmp	.-242    	; 0x57d8 <__fp_inf>
    58ca:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_szero>
    58ce:	5f 3f       	cpi	r21, 0xFF	; 255
    58d0:	e4 f3       	brlt	.-8      	; 0x58ca <__mulsf3_pse+0x82>
    58d2:	98 3e       	cpi	r25, 0xE8	; 232
    58d4:	d4 f3       	brlt	.-12     	; 0x58ca <__mulsf3_pse+0x82>
    58d6:	86 95       	lsr	r24
    58d8:	77 95       	ror	r23
    58da:	67 95       	ror	r22
    58dc:	b7 95       	ror	r27
    58de:	f7 95       	ror	r31
    58e0:	e7 95       	ror	r30
    58e2:	9f 5f       	subi	r25, 0xFF	; 255
    58e4:	c1 f7       	brne	.-16     	; 0x58d6 <__mulsf3_pse+0x8e>
    58e6:	fe 2b       	or	r31, r30
    58e8:	88 0f       	add	r24, r24
    58ea:	91 1d       	adc	r25, r1
    58ec:	96 95       	lsr	r25
    58ee:	87 95       	ror	r24
    58f0:	97 f9       	bld	r25, 7
    58f2:	08 95       	ret

000058f4 <__udivmodsi4>:
    58f4:	a1 e2       	ldi	r26, 0x21	; 33
    58f6:	1a 2e       	mov	r1, r26
    58f8:	aa 1b       	sub	r26, r26
    58fa:	bb 1b       	sub	r27, r27
    58fc:	fd 01       	movw	r30, r26
    58fe:	0d c0       	rjmp	.+26     	; 0x591a <__udivmodsi4_ep>

00005900 <__udivmodsi4_loop>:
    5900:	aa 1f       	adc	r26, r26
    5902:	bb 1f       	adc	r27, r27
    5904:	ee 1f       	adc	r30, r30
    5906:	ff 1f       	adc	r31, r31
    5908:	a2 17       	cp	r26, r18
    590a:	b3 07       	cpc	r27, r19
    590c:	e4 07       	cpc	r30, r20
    590e:	f5 07       	cpc	r31, r21
    5910:	20 f0       	brcs	.+8      	; 0x591a <__udivmodsi4_ep>
    5912:	a2 1b       	sub	r26, r18
    5914:	b3 0b       	sbc	r27, r19
    5916:	e4 0b       	sbc	r30, r20
    5918:	f5 0b       	sbc	r31, r21

0000591a <__udivmodsi4_ep>:
    591a:	66 1f       	adc	r22, r22
    591c:	77 1f       	adc	r23, r23
    591e:	88 1f       	adc	r24, r24
    5920:	99 1f       	adc	r25, r25
    5922:	1a 94       	dec	r1
    5924:	69 f7       	brne	.-38     	; 0x5900 <__udivmodsi4_loop>
    5926:	60 95       	com	r22
    5928:	70 95       	com	r23
    592a:	80 95       	com	r24
    592c:	90 95       	com	r25
    592e:	9b 01       	movw	r18, r22
    5930:	ac 01       	movw	r20, r24
    5932:	bd 01       	movw	r22, r26
    5934:	cf 01       	movw	r24, r30
    5936:	08 95       	ret

00005938 <__tablejump2__>:
    5938:	ee 0f       	add	r30, r30
    593a:	ff 1f       	adc	r31, r31
    593c:	88 1f       	adc	r24, r24
    593e:	8b bf       	out	0x3b, r24	; 59
    5940:	07 90       	elpm	r0, Z+
    5942:	f6 91       	elpm	r31, Z
    5944:	e0 2d       	mov	r30, r0
    5946:	19 94       	eijmp

00005948 <malloc>:
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	82 30       	cpi	r24, 0x02	; 2
    5952:	91 05       	cpc	r25, r1
    5954:	10 f4       	brcc	.+4      	; 0x595a <malloc+0x12>
    5956:	82 e0       	ldi	r24, 0x02	; 2
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <__flp>
    595e:	f0 91 cb 17 	lds	r31, 0x17CB	; 0x8017cb <__flp+0x1>
    5962:	20 e0       	ldi	r18, 0x00	; 0
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	a0 e0       	ldi	r26, 0x00	; 0
    5968:	b0 e0       	ldi	r27, 0x00	; 0
    596a:	30 97       	sbiw	r30, 0x00	; 0
    596c:	19 f1       	breq	.+70     	; 0x59b4 <malloc+0x6c>
    596e:	40 81       	ld	r20, Z
    5970:	51 81       	ldd	r21, Z+1	; 0x01
    5972:	02 81       	ldd	r16, Z+2	; 0x02
    5974:	13 81       	ldd	r17, Z+3	; 0x03
    5976:	48 17       	cp	r20, r24
    5978:	59 07       	cpc	r21, r25
    597a:	c8 f0       	brcs	.+50     	; 0x59ae <malloc+0x66>
    597c:	84 17       	cp	r24, r20
    597e:	95 07       	cpc	r25, r21
    5980:	69 f4       	brne	.+26     	; 0x599c <malloc+0x54>
    5982:	10 97       	sbiw	r26, 0x00	; 0
    5984:	31 f0       	breq	.+12     	; 0x5992 <malloc+0x4a>
    5986:	12 96       	adiw	r26, 0x02	; 2
    5988:	0c 93       	st	X, r16
    598a:	12 97       	sbiw	r26, 0x02	; 2
    598c:	13 96       	adiw	r26, 0x03	; 3
    598e:	1c 93       	st	X, r17
    5990:	27 c0       	rjmp	.+78     	; 0x59e0 <malloc+0x98>
    5992:	00 93 ca 17 	sts	0x17CA, r16	; 0x8017ca <__flp>
    5996:	10 93 cb 17 	sts	0x17CB, r17	; 0x8017cb <__flp+0x1>
    599a:	22 c0       	rjmp	.+68     	; 0x59e0 <malloc+0x98>
    599c:	21 15       	cp	r18, r1
    599e:	31 05       	cpc	r19, r1
    59a0:	19 f0       	breq	.+6      	; 0x59a8 <malloc+0x60>
    59a2:	42 17       	cp	r20, r18
    59a4:	53 07       	cpc	r21, r19
    59a6:	18 f4       	brcc	.+6      	; 0x59ae <malloc+0x66>
    59a8:	9a 01       	movw	r18, r20
    59aa:	bd 01       	movw	r22, r26
    59ac:	ef 01       	movw	r28, r30
    59ae:	df 01       	movw	r26, r30
    59b0:	f8 01       	movw	r30, r16
    59b2:	db cf       	rjmp	.-74     	; 0x596a <malloc+0x22>
    59b4:	21 15       	cp	r18, r1
    59b6:	31 05       	cpc	r19, r1
    59b8:	f9 f0       	breq	.+62     	; 0x59f8 <malloc+0xb0>
    59ba:	28 1b       	sub	r18, r24
    59bc:	39 0b       	sbc	r19, r25
    59be:	24 30       	cpi	r18, 0x04	; 4
    59c0:	31 05       	cpc	r19, r1
    59c2:	80 f4       	brcc	.+32     	; 0x59e4 <malloc+0x9c>
    59c4:	8a 81       	ldd	r24, Y+2	; 0x02
    59c6:	9b 81       	ldd	r25, Y+3	; 0x03
    59c8:	61 15       	cp	r22, r1
    59ca:	71 05       	cpc	r23, r1
    59cc:	21 f0       	breq	.+8      	; 0x59d6 <malloc+0x8e>
    59ce:	fb 01       	movw	r30, r22
    59d0:	93 83       	std	Z+3, r25	; 0x03
    59d2:	82 83       	std	Z+2, r24	; 0x02
    59d4:	04 c0       	rjmp	.+8      	; 0x59de <malloc+0x96>
    59d6:	90 93 cb 17 	sts	0x17CB, r25	; 0x8017cb <__flp+0x1>
    59da:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <__flp>
    59de:	fe 01       	movw	r30, r28
    59e0:	32 96       	adiw	r30, 0x02	; 2
    59e2:	44 c0       	rjmp	.+136    	; 0x5a6c <malloc+0x124>
    59e4:	fe 01       	movw	r30, r28
    59e6:	e2 0f       	add	r30, r18
    59e8:	f3 1f       	adc	r31, r19
    59ea:	81 93       	st	Z+, r24
    59ec:	91 93       	st	Z+, r25
    59ee:	22 50       	subi	r18, 0x02	; 2
    59f0:	31 09       	sbc	r19, r1
    59f2:	39 83       	std	Y+1, r19	; 0x01
    59f4:	28 83       	st	Y, r18
    59f6:	3a c0       	rjmp	.+116    	; 0x5a6c <malloc+0x124>
    59f8:	20 91 c8 17 	lds	r18, 0x17C8	; 0x8017c8 <__brkval>
    59fc:	30 91 c9 17 	lds	r19, 0x17C9	; 0x8017c9 <__brkval+0x1>
    5a00:	23 2b       	or	r18, r19
    5a02:	41 f4       	brne	.+16     	; 0x5a14 <malloc+0xcc>
    5a04:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5a08:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5a0c:	30 93 c9 17 	sts	0x17C9, r19	; 0x8017c9 <__brkval+0x1>
    5a10:	20 93 c8 17 	sts	0x17C8, r18	; 0x8017c8 <__brkval>
    5a14:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5a18:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5a1c:	21 15       	cp	r18, r1
    5a1e:	31 05       	cpc	r19, r1
    5a20:	41 f4       	brne	.+16     	; 0x5a32 <malloc+0xea>
    5a22:	2d b7       	in	r18, 0x3d	; 61
    5a24:	3e b7       	in	r19, 0x3e	; 62
    5a26:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5a2a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5a2e:	24 1b       	sub	r18, r20
    5a30:	35 0b       	sbc	r19, r21
    5a32:	e0 91 c8 17 	lds	r30, 0x17C8	; 0x8017c8 <__brkval>
    5a36:	f0 91 c9 17 	lds	r31, 0x17C9	; 0x8017c9 <__brkval+0x1>
    5a3a:	e2 17       	cp	r30, r18
    5a3c:	f3 07       	cpc	r31, r19
    5a3e:	a0 f4       	brcc	.+40     	; 0x5a68 <malloc+0x120>
    5a40:	2e 1b       	sub	r18, r30
    5a42:	3f 0b       	sbc	r19, r31
    5a44:	28 17       	cp	r18, r24
    5a46:	39 07       	cpc	r19, r25
    5a48:	78 f0       	brcs	.+30     	; 0x5a68 <malloc+0x120>
    5a4a:	ac 01       	movw	r20, r24
    5a4c:	4e 5f       	subi	r20, 0xFE	; 254
    5a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a50:	24 17       	cp	r18, r20
    5a52:	35 07       	cpc	r19, r21
    5a54:	48 f0       	brcs	.+18     	; 0x5a68 <malloc+0x120>
    5a56:	4e 0f       	add	r20, r30
    5a58:	5f 1f       	adc	r21, r31
    5a5a:	50 93 c9 17 	sts	0x17C9, r21	; 0x8017c9 <__brkval+0x1>
    5a5e:	40 93 c8 17 	sts	0x17C8, r20	; 0x8017c8 <__brkval>
    5a62:	81 93       	st	Z+, r24
    5a64:	91 93       	st	Z+, r25
    5a66:	02 c0       	rjmp	.+4      	; 0x5a6c <malloc+0x124>
    5a68:	e0 e0       	ldi	r30, 0x00	; 0
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	cf 01       	movw	r24, r30
    5a6e:	df 91       	pop	r29
    5a70:	cf 91       	pop	r28
    5a72:	1f 91       	pop	r17
    5a74:	0f 91       	pop	r16
    5a76:	08 95       	ret

00005a78 <free>:
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
    5a7c:	00 97       	sbiw	r24, 0x00	; 0
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <free+0xa>
    5a80:	81 c0       	rjmp	.+258    	; 0x5b84 <free+0x10c>
    5a82:	fc 01       	movw	r30, r24
    5a84:	32 97       	sbiw	r30, 0x02	; 2
    5a86:	13 82       	std	Z+3, r1	; 0x03
    5a88:	12 82       	std	Z+2, r1	; 0x02
    5a8a:	a0 91 ca 17 	lds	r26, 0x17CA	; 0x8017ca <__flp>
    5a8e:	b0 91 cb 17 	lds	r27, 0x17CB	; 0x8017cb <__flp+0x1>
    5a92:	10 97       	sbiw	r26, 0x00	; 0
    5a94:	81 f4       	brne	.+32     	; 0x5ab6 <free+0x3e>
    5a96:	20 81       	ld	r18, Z
    5a98:	31 81       	ldd	r19, Z+1	; 0x01
    5a9a:	82 0f       	add	r24, r18
    5a9c:	93 1f       	adc	r25, r19
    5a9e:	20 91 c8 17 	lds	r18, 0x17C8	; 0x8017c8 <__brkval>
    5aa2:	30 91 c9 17 	lds	r19, 0x17C9	; 0x8017c9 <__brkval+0x1>
    5aa6:	28 17       	cp	r18, r24
    5aa8:	39 07       	cpc	r19, r25
    5aaa:	51 f5       	brne	.+84     	; 0x5b00 <free+0x88>
    5aac:	f0 93 c9 17 	sts	0x17C9, r31	; 0x8017c9 <__brkval+0x1>
    5ab0:	e0 93 c8 17 	sts	0x17C8, r30	; 0x8017c8 <__brkval>
    5ab4:	67 c0       	rjmp	.+206    	; 0x5b84 <free+0x10c>
    5ab6:	ed 01       	movw	r28, r26
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	ce 17       	cp	r28, r30
    5abe:	df 07       	cpc	r29, r31
    5ac0:	40 f4       	brcc	.+16     	; 0x5ad2 <free+0x5a>
    5ac2:	4a 81       	ldd	r20, Y+2	; 0x02
    5ac4:	5b 81       	ldd	r21, Y+3	; 0x03
    5ac6:	9e 01       	movw	r18, r28
    5ac8:	41 15       	cp	r20, r1
    5aca:	51 05       	cpc	r21, r1
    5acc:	f1 f0       	breq	.+60     	; 0x5b0a <free+0x92>
    5ace:	ea 01       	movw	r28, r20
    5ad0:	f5 cf       	rjmp	.-22     	; 0x5abc <free+0x44>
    5ad2:	d3 83       	std	Z+3, r29	; 0x03
    5ad4:	c2 83       	std	Z+2, r28	; 0x02
    5ad6:	40 81       	ld	r20, Z
    5ad8:	51 81       	ldd	r21, Z+1	; 0x01
    5ada:	84 0f       	add	r24, r20
    5adc:	95 1f       	adc	r25, r21
    5ade:	c8 17       	cp	r28, r24
    5ae0:	d9 07       	cpc	r29, r25
    5ae2:	59 f4       	brne	.+22     	; 0x5afa <free+0x82>
    5ae4:	88 81       	ld	r24, Y
    5ae6:	99 81       	ldd	r25, Y+1	; 0x01
    5ae8:	84 0f       	add	r24, r20
    5aea:	95 1f       	adc	r25, r21
    5aec:	02 96       	adiw	r24, 0x02	; 2
    5aee:	91 83       	std	Z+1, r25	; 0x01
    5af0:	80 83       	st	Z, r24
    5af2:	8a 81       	ldd	r24, Y+2	; 0x02
    5af4:	9b 81       	ldd	r25, Y+3	; 0x03
    5af6:	93 83       	std	Z+3, r25	; 0x03
    5af8:	82 83       	std	Z+2, r24	; 0x02
    5afa:	21 15       	cp	r18, r1
    5afc:	31 05       	cpc	r19, r1
    5afe:	29 f4       	brne	.+10     	; 0x5b0a <free+0x92>
    5b00:	f0 93 cb 17 	sts	0x17CB, r31	; 0x8017cb <__flp+0x1>
    5b04:	e0 93 ca 17 	sts	0x17CA, r30	; 0x8017ca <__flp>
    5b08:	3d c0       	rjmp	.+122    	; 0x5b84 <free+0x10c>
    5b0a:	e9 01       	movw	r28, r18
    5b0c:	fb 83       	std	Y+3, r31	; 0x03
    5b0e:	ea 83       	std	Y+2, r30	; 0x02
    5b10:	49 91       	ld	r20, Y+
    5b12:	59 91       	ld	r21, Y+
    5b14:	c4 0f       	add	r28, r20
    5b16:	d5 1f       	adc	r29, r21
    5b18:	ec 17       	cp	r30, r28
    5b1a:	fd 07       	cpc	r31, r29
    5b1c:	61 f4       	brne	.+24     	; 0x5b36 <free+0xbe>
    5b1e:	80 81       	ld	r24, Z
    5b20:	91 81       	ldd	r25, Z+1	; 0x01
    5b22:	84 0f       	add	r24, r20
    5b24:	95 1f       	adc	r25, r21
    5b26:	02 96       	adiw	r24, 0x02	; 2
    5b28:	e9 01       	movw	r28, r18
    5b2a:	99 83       	std	Y+1, r25	; 0x01
    5b2c:	88 83       	st	Y, r24
    5b2e:	82 81       	ldd	r24, Z+2	; 0x02
    5b30:	93 81       	ldd	r25, Z+3	; 0x03
    5b32:	9b 83       	std	Y+3, r25	; 0x03
    5b34:	8a 83       	std	Y+2, r24	; 0x02
    5b36:	e0 e0       	ldi	r30, 0x00	; 0
    5b38:	f0 e0       	ldi	r31, 0x00	; 0
    5b3a:	12 96       	adiw	r26, 0x02	; 2
    5b3c:	8d 91       	ld	r24, X+
    5b3e:	9c 91       	ld	r25, X
    5b40:	13 97       	sbiw	r26, 0x03	; 3
    5b42:	00 97       	sbiw	r24, 0x00	; 0
    5b44:	19 f0       	breq	.+6      	; 0x5b4c <free+0xd4>
    5b46:	fd 01       	movw	r30, r26
    5b48:	dc 01       	movw	r26, r24
    5b4a:	f7 cf       	rjmp	.-18     	; 0x5b3a <free+0xc2>
    5b4c:	8d 91       	ld	r24, X+
    5b4e:	9c 91       	ld	r25, X
    5b50:	11 97       	sbiw	r26, 0x01	; 1
    5b52:	9d 01       	movw	r18, r26
    5b54:	2e 5f       	subi	r18, 0xFE	; 254
    5b56:	3f 4f       	sbci	r19, 0xFF	; 255
    5b58:	82 0f       	add	r24, r18
    5b5a:	93 1f       	adc	r25, r19
    5b5c:	20 91 c8 17 	lds	r18, 0x17C8	; 0x8017c8 <__brkval>
    5b60:	30 91 c9 17 	lds	r19, 0x17C9	; 0x8017c9 <__brkval+0x1>
    5b64:	28 17       	cp	r18, r24
    5b66:	39 07       	cpc	r19, r25
    5b68:	69 f4       	brne	.+26     	; 0x5b84 <free+0x10c>
    5b6a:	30 97       	sbiw	r30, 0x00	; 0
    5b6c:	29 f4       	brne	.+10     	; 0x5b78 <free+0x100>
    5b6e:	10 92 cb 17 	sts	0x17CB, r1	; 0x8017cb <__flp+0x1>
    5b72:	10 92 ca 17 	sts	0x17CA, r1	; 0x8017ca <__flp>
    5b76:	02 c0       	rjmp	.+4      	; 0x5b7c <free+0x104>
    5b78:	13 82       	std	Z+3, r1	; 0x03
    5b7a:	12 82       	std	Z+2, r1	; 0x02
    5b7c:	b0 93 c9 17 	sts	0x17C9, r27	; 0x8017c9 <__brkval+0x1>
    5b80:	a0 93 c8 17 	sts	0x17C8, r26	; 0x8017c8 <__brkval>
    5b84:	df 91       	pop	r29
    5b86:	cf 91       	pop	r28
    5b88:	08 95       	ret

00005b8a <abort>:
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	f8 94       	cli
    5b90:	7d c3       	rjmp	.+1786   	; 0x628c <_exit>

00005b92 <memcpy>:
    5b92:	fb 01       	movw	r30, r22
    5b94:	dc 01       	movw	r26, r24
    5b96:	02 c0       	rjmp	.+4      	; 0x5b9c <memcpy+0xa>
    5b98:	01 90       	ld	r0, Z+
    5b9a:	0d 92       	st	X+, r0
    5b9c:	41 50       	subi	r20, 0x01	; 1
    5b9e:	50 40       	sbci	r21, 0x00	; 0
    5ba0:	d8 f7       	brcc	.-10     	; 0x5b98 <memcpy+0x6>
    5ba2:	08 95       	ret

00005ba4 <memset>:
    5ba4:	dc 01       	movw	r26, r24
    5ba6:	01 c0       	rjmp	.+2      	; 0x5baa <memset+0x6>
    5ba8:	6d 93       	st	X+, r22
    5baa:	41 50       	subi	r20, 0x01	; 1
    5bac:	50 40       	sbci	r21, 0x00	; 0
    5bae:	e0 f7       	brcc	.-8      	; 0x5ba8 <memset+0x4>
    5bb0:	08 95       	ret

00005bb2 <strcasestr>:
    5bb2:	fb 01       	movw	r30, r22
    5bb4:	51 91       	ld	r21, Z+
    5bb6:	55 23       	and	r21, r21
    5bb8:	b1 f0       	breq	.+44     	; 0x5be6 <strcasestr+0x34>
    5bba:	bf 01       	movw	r22, r30
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	05 2e       	mov	r0, r21
    5bc0:	4d 91       	ld	r20, X+
    5bc2:	44 23       	and	r20, r20
    5bc4:	69 f0       	breq	.+26     	; 0x5be0 <strcasestr+0x2e>
    5bc6:	10 d0       	rcall	.+32     	; 0x5be8 <strcasestr+0x36>
    5bc8:	d9 f7       	brne	.-10     	; 0x5bc0 <strcasestr+0xe>
    5bca:	cd 01       	movw	r24, r26
    5bcc:	01 90       	ld	r0, Z+
    5bce:	00 20       	and	r0, r0
    5bd0:	49 f0       	breq	.+18     	; 0x5be4 <strcasestr+0x32>
    5bd2:	4d 91       	ld	r20, X+
    5bd4:	41 11       	cpse	r20, r1
    5bd6:	08 d0       	rcall	.+16     	; 0x5be8 <strcasestr+0x36>
    5bd8:	c9 f3       	breq	.-14     	; 0x5bcc <strcasestr+0x1a>
    5bda:	fb 01       	movw	r30, r22
    5bdc:	41 11       	cpse	r20, r1
    5bde:	ee cf       	rjmp	.-36     	; 0x5bbc <strcasestr+0xa>
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	01 97       	sbiw	r24, 0x01	; 1
    5be6:	08 95       	ret
    5be8:	40 25       	eor	r20, r0
    5bea:	39 f0       	breq	.+14     	; 0x5bfa <strcasestr+0x48>
    5bec:	40 32       	cpi	r20, 0x20	; 32
    5bee:	29 f4       	brne	.+10     	; 0x5bfa <strcasestr+0x48>
    5bf0:	40 29       	or	r20, r0
    5bf2:	4b 57       	subi	r20, 0x7B	; 123
    5bf4:	46 5e       	subi	r20, 0xE6	; 230
    5bf6:	08 f0       	brcs	.+2      	; 0x5bfa <strcasestr+0x48>
    5bf8:	18 94       	sez
    5bfa:	08 95       	ret

00005bfc <strcat>:
    5bfc:	fb 01       	movw	r30, r22
    5bfe:	dc 01       	movw	r26, r24
    5c00:	0d 90       	ld	r0, X+
    5c02:	00 20       	and	r0, r0
    5c04:	e9 f7       	brne	.-6      	; 0x5c00 <strcat+0x4>
    5c06:	11 97       	sbiw	r26, 0x01	; 1
    5c08:	01 90       	ld	r0, Z+
    5c0a:	0d 92       	st	X+, r0
    5c0c:	00 20       	and	r0, r0
    5c0e:	e1 f7       	brne	.-8      	; 0x5c08 <strcat+0xc>
    5c10:	08 95       	ret

00005c12 <strcpy>:
    5c12:	fb 01       	movw	r30, r22
    5c14:	dc 01       	movw	r26, r24
    5c16:	01 90       	ld	r0, Z+
    5c18:	0d 92       	st	X+, r0
    5c1a:	00 20       	and	r0, r0
    5c1c:	e1 f7       	brne	.-8      	; 0x5c16 <strcpy+0x4>
    5c1e:	08 95       	ret

00005c20 <strncasecmp>:
    5c20:	fb 01       	movw	r30, r22
    5c22:	dc 01       	movw	r26, r24
    5c24:	41 50       	subi	r20, 0x01	; 1
    5c26:	50 40       	sbci	r21, 0x00	; 0
    5c28:	88 f0       	brcs	.+34     	; 0x5c4c <strncasecmp+0x2c>
    5c2a:	8d 91       	ld	r24, X+
    5c2c:	81 34       	cpi	r24, 0x41	; 65
    5c2e:	1c f0       	brlt	.+6      	; 0x5c36 <strncasecmp+0x16>
    5c30:	8b 35       	cpi	r24, 0x5B	; 91
    5c32:	0c f4       	brge	.+2      	; 0x5c36 <strncasecmp+0x16>
    5c34:	80 5e       	subi	r24, 0xE0	; 224
    5c36:	61 91       	ld	r22, Z+
    5c38:	61 34       	cpi	r22, 0x41	; 65
    5c3a:	1c f0       	brlt	.+6      	; 0x5c42 <strncasecmp+0x22>
    5c3c:	6b 35       	cpi	r22, 0x5B	; 91
    5c3e:	0c f4       	brge	.+2      	; 0x5c42 <strncasecmp+0x22>
    5c40:	60 5e       	subi	r22, 0xE0	; 224
    5c42:	86 1b       	sub	r24, r22
    5c44:	61 11       	cpse	r22, r1
    5c46:	71 f3       	breq	.-36     	; 0x5c24 <strncasecmp+0x4>
    5c48:	99 0b       	sbc	r25, r25
    5c4a:	08 95       	ret
    5c4c:	88 1b       	sub	r24, r24
    5c4e:	fc cf       	rjmp	.-8      	; 0x5c48 <strncasecmp+0x28>

00005c50 <printf>:
    5c50:	cf 93       	push	r28
    5c52:	df 93       	push	r29
    5c54:	cd b7       	in	r28, 0x3d	; 61
    5c56:	de b7       	in	r29, 0x3e	; 62
    5c58:	ae 01       	movw	r20, r28
    5c5a:	4a 5f       	subi	r20, 0xFA	; 250
    5c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c5e:	fa 01       	movw	r30, r20
    5c60:	61 91       	ld	r22, Z+
    5c62:	71 91       	ld	r23, Z+
    5c64:	af 01       	movw	r20, r30
    5c66:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <__iob+0x2>
    5c6a:	90 91 cf 17 	lds	r25, 0x17CF	; 0x8017cf <__iob+0x3>
    5c6e:	61 d0       	rcall	.+194    	; 0x5d32 <vfprintf>
    5c70:	df 91       	pop	r29
    5c72:	cf 91       	pop	r28
    5c74:	08 95       	ret

00005c76 <puts>:
    5c76:	0f 93       	push	r16
    5c78:	1f 93       	push	r17
    5c7a:	cf 93       	push	r28
    5c7c:	df 93       	push	r29
    5c7e:	e0 91 ce 17 	lds	r30, 0x17CE	; 0x8017ce <__iob+0x2>
    5c82:	f0 91 cf 17 	lds	r31, 0x17CF	; 0x8017cf <__iob+0x3>
    5c86:	23 81       	ldd	r18, Z+3	; 0x03
    5c88:	21 ff       	sbrs	r18, 1
    5c8a:	1b c0       	rjmp	.+54     	; 0x5cc2 <puts+0x4c>
    5c8c:	8c 01       	movw	r16, r24
    5c8e:	d0 e0       	ldi	r29, 0x00	; 0
    5c90:	c0 e0       	ldi	r28, 0x00	; 0
    5c92:	f8 01       	movw	r30, r16
    5c94:	81 91       	ld	r24, Z+
    5c96:	8f 01       	movw	r16, r30
    5c98:	60 91 ce 17 	lds	r22, 0x17CE	; 0x8017ce <__iob+0x2>
    5c9c:	70 91 cf 17 	lds	r23, 0x17CF	; 0x8017cf <__iob+0x3>
    5ca0:	db 01       	movw	r26, r22
    5ca2:	18 96       	adiw	r26, 0x08	; 8
    5ca4:	ed 91       	ld	r30, X+
    5ca6:	fc 91       	ld	r31, X
    5ca8:	19 97       	sbiw	r26, 0x09	; 9
    5caa:	88 23       	and	r24, r24
    5cac:	31 f0       	breq	.+12     	; 0x5cba <puts+0x44>
    5cae:	19 95       	eicall
    5cb0:	89 2b       	or	r24, r25
    5cb2:	79 f3       	breq	.-34     	; 0x5c92 <puts+0x1c>
    5cb4:	df ef       	ldi	r29, 0xFF	; 255
    5cb6:	cf ef       	ldi	r28, 0xFF	; 255
    5cb8:	ec cf       	rjmp	.-40     	; 0x5c92 <puts+0x1c>
    5cba:	8a e0       	ldi	r24, 0x0A	; 10
    5cbc:	19 95       	eicall
    5cbe:	89 2b       	or	r24, r25
    5cc0:	19 f0       	breq	.+6      	; 0x5cc8 <puts+0x52>
    5cc2:	8f ef       	ldi	r24, 0xFF	; 255
    5cc4:	9f ef       	ldi	r25, 0xFF	; 255
    5cc6:	02 c0       	rjmp	.+4      	; 0x5ccc <puts+0x56>
    5cc8:	8d 2f       	mov	r24, r29
    5cca:	9c 2f       	mov	r25, r28
    5ccc:	df 91       	pop	r29
    5cce:	cf 91       	pop	r28
    5cd0:	1f 91       	pop	r17
    5cd2:	0f 91       	pop	r16
    5cd4:	08 95       	ret

00005cd6 <sprintf>:
    5cd6:	0f 93       	push	r16
    5cd8:	1f 93       	push	r17
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	cd b7       	in	r28, 0x3d	; 61
    5ce0:	de b7       	in	r29, 0x3e	; 62
    5ce2:	2e 97       	sbiw	r28, 0x0e	; 14
    5ce4:	0f b6       	in	r0, 0x3f	; 63
    5ce6:	f8 94       	cli
    5ce8:	de bf       	out	0x3e, r29	; 62
    5cea:	0f be       	out	0x3f, r0	; 63
    5cec:	cd bf       	out	0x3d, r28	; 61
    5cee:	0e 89       	ldd	r16, Y+22	; 0x16
    5cf0:	1f 89       	ldd	r17, Y+23	; 0x17
    5cf2:	86 e0       	ldi	r24, 0x06	; 6
    5cf4:	8c 83       	std	Y+4, r24	; 0x04
    5cf6:	1a 83       	std	Y+2, r17	; 0x02
    5cf8:	09 83       	std	Y+1, r16	; 0x01
    5cfa:	8f ef       	ldi	r24, 0xFF	; 255
    5cfc:	9f e7       	ldi	r25, 0x7F	; 127
    5cfe:	9e 83       	std	Y+6, r25	; 0x06
    5d00:	8d 83       	std	Y+5, r24	; 0x05
    5d02:	ae 01       	movw	r20, r28
    5d04:	46 5e       	subi	r20, 0xE6	; 230
    5d06:	5f 4f       	sbci	r21, 0xFF	; 255
    5d08:	68 8d       	ldd	r22, Y+24	; 0x18
    5d0a:	79 8d       	ldd	r23, Y+25	; 0x19
    5d0c:	ce 01       	movw	r24, r28
    5d0e:	01 96       	adiw	r24, 0x01	; 1
    5d10:	10 d0       	rcall	.+32     	; 0x5d32 <vfprintf>
    5d12:	ef 81       	ldd	r30, Y+7	; 0x07
    5d14:	f8 85       	ldd	r31, Y+8	; 0x08
    5d16:	e0 0f       	add	r30, r16
    5d18:	f1 1f       	adc	r31, r17
    5d1a:	10 82       	st	Z, r1
    5d1c:	2e 96       	adiw	r28, 0x0e	; 14
    5d1e:	0f b6       	in	r0, 0x3f	; 63
    5d20:	f8 94       	cli
    5d22:	de bf       	out	0x3e, r29	; 62
    5d24:	0f be       	out	0x3f, r0	; 63
    5d26:	cd bf       	out	0x3d, r28	; 61
    5d28:	df 91       	pop	r29
    5d2a:	cf 91       	pop	r28
    5d2c:	1f 91       	pop	r17
    5d2e:	0f 91       	pop	r16
    5d30:	08 95       	ret

00005d32 <vfprintf>:
    5d32:	2f 92       	push	r2
    5d34:	3f 92       	push	r3
    5d36:	4f 92       	push	r4
    5d38:	5f 92       	push	r5
    5d3a:	6f 92       	push	r6
    5d3c:	7f 92       	push	r7
    5d3e:	8f 92       	push	r8
    5d40:	9f 92       	push	r9
    5d42:	af 92       	push	r10
    5d44:	bf 92       	push	r11
    5d46:	cf 92       	push	r12
    5d48:	df 92       	push	r13
    5d4a:	ef 92       	push	r14
    5d4c:	ff 92       	push	r15
    5d4e:	0f 93       	push	r16
    5d50:	1f 93       	push	r17
    5d52:	cf 93       	push	r28
    5d54:	df 93       	push	r29
    5d56:	cd b7       	in	r28, 0x3d	; 61
    5d58:	de b7       	in	r29, 0x3e	; 62
    5d5a:	2b 97       	sbiw	r28, 0x0b	; 11
    5d5c:	0f b6       	in	r0, 0x3f	; 63
    5d5e:	f8 94       	cli
    5d60:	de bf       	out	0x3e, r29	; 62
    5d62:	0f be       	out	0x3f, r0	; 63
    5d64:	cd bf       	out	0x3d, r28	; 61
    5d66:	6c 01       	movw	r12, r24
    5d68:	7b 01       	movw	r14, r22
    5d6a:	8a 01       	movw	r16, r20
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	17 82       	std	Z+7, r1	; 0x07
    5d70:	16 82       	std	Z+6, r1	; 0x06
    5d72:	83 81       	ldd	r24, Z+3	; 0x03
    5d74:	81 ff       	sbrs	r24, 1
    5d76:	bf c1       	rjmp	.+894    	; 0x60f6 <vfprintf+0x3c4>
    5d78:	ce 01       	movw	r24, r28
    5d7a:	01 96       	adiw	r24, 0x01	; 1
    5d7c:	3c 01       	movw	r6, r24
    5d7e:	f6 01       	movw	r30, r12
    5d80:	93 81       	ldd	r25, Z+3	; 0x03
    5d82:	f7 01       	movw	r30, r14
    5d84:	93 fd       	sbrc	r25, 3
    5d86:	85 91       	lpm	r24, Z+
    5d88:	93 ff       	sbrs	r25, 3
    5d8a:	81 91       	ld	r24, Z+
    5d8c:	7f 01       	movw	r14, r30
    5d8e:	88 23       	and	r24, r24
    5d90:	09 f4       	brne	.+2      	; 0x5d94 <vfprintf+0x62>
    5d92:	ad c1       	rjmp	.+858    	; 0x60ee <vfprintf+0x3bc>
    5d94:	85 32       	cpi	r24, 0x25	; 37
    5d96:	39 f4       	brne	.+14     	; 0x5da6 <vfprintf+0x74>
    5d98:	93 fd       	sbrc	r25, 3
    5d9a:	85 91       	lpm	r24, Z+
    5d9c:	93 ff       	sbrs	r25, 3
    5d9e:	81 91       	ld	r24, Z+
    5da0:	7f 01       	movw	r14, r30
    5da2:	85 32       	cpi	r24, 0x25	; 37
    5da4:	21 f4       	brne	.+8      	; 0x5dae <vfprintf+0x7c>
    5da6:	b6 01       	movw	r22, r12
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	d6 d1       	rcall	.+940    	; 0x6158 <fputc>
    5dac:	e8 cf       	rjmp	.-48     	; 0x5d7e <vfprintf+0x4c>
    5dae:	91 2c       	mov	r9, r1
    5db0:	21 2c       	mov	r2, r1
    5db2:	31 2c       	mov	r3, r1
    5db4:	ff e1       	ldi	r31, 0x1F	; 31
    5db6:	f3 15       	cp	r31, r3
    5db8:	d8 f0       	brcs	.+54     	; 0x5df0 <vfprintf+0xbe>
    5dba:	8b 32       	cpi	r24, 0x2B	; 43
    5dbc:	79 f0       	breq	.+30     	; 0x5ddc <vfprintf+0xaa>
    5dbe:	38 f4       	brcc	.+14     	; 0x5dce <vfprintf+0x9c>
    5dc0:	80 32       	cpi	r24, 0x20	; 32
    5dc2:	79 f0       	breq	.+30     	; 0x5de2 <vfprintf+0xb0>
    5dc4:	83 32       	cpi	r24, 0x23	; 35
    5dc6:	a1 f4       	brne	.+40     	; 0x5df0 <vfprintf+0xbe>
    5dc8:	23 2d       	mov	r18, r3
    5dca:	20 61       	ori	r18, 0x10	; 16
    5dcc:	1d c0       	rjmp	.+58     	; 0x5e08 <vfprintf+0xd6>
    5dce:	8d 32       	cpi	r24, 0x2D	; 45
    5dd0:	61 f0       	breq	.+24     	; 0x5dea <vfprintf+0xb8>
    5dd2:	80 33       	cpi	r24, 0x30	; 48
    5dd4:	69 f4       	brne	.+26     	; 0x5df0 <vfprintf+0xbe>
    5dd6:	23 2d       	mov	r18, r3
    5dd8:	21 60       	ori	r18, 0x01	; 1
    5dda:	16 c0       	rjmp	.+44     	; 0x5e08 <vfprintf+0xd6>
    5ddc:	83 2d       	mov	r24, r3
    5dde:	82 60       	ori	r24, 0x02	; 2
    5de0:	38 2e       	mov	r3, r24
    5de2:	e3 2d       	mov	r30, r3
    5de4:	e4 60       	ori	r30, 0x04	; 4
    5de6:	3e 2e       	mov	r3, r30
    5de8:	2a c0       	rjmp	.+84     	; 0x5e3e <vfprintf+0x10c>
    5dea:	f3 2d       	mov	r31, r3
    5dec:	f8 60       	ori	r31, 0x08	; 8
    5dee:	1d c0       	rjmp	.+58     	; 0x5e2a <vfprintf+0xf8>
    5df0:	37 fc       	sbrc	r3, 7
    5df2:	2d c0       	rjmp	.+90     	; 0x5e4e <vfprintf+0x11c>
    5df4:	20 ed       	ldi	r18, 0xD0	; 208
    5df6:	28 0f       	add	r18, r24
    5df8:	2a 30       	cpi	r18, 0x0A	; 10
    5dfa:	40 f0       	brcs	.+16     	; 0x5e0c <vfprintf+0xda>
    5dfc:	8e 32       	cpi	r24, 0x2E	; 46
    5dfe:	b9 f4       	brne	.+46     	; 0x5e2e <vfprintf+0xfc>
    5e00:	36 fc       	sbrc	r3, 6
    5e02:	75 c1       	rjmp	.+746    	; 0x60ee <vfprintf+0x3bc>
    5e04:	23 2d       	mov	r18, r3
    5e06:	20 64       	ori	r18, 0x40	; 64
    5e08:	32 2e       	mov	r3, r18
    5e0a:	19 c0       	rjmp	.+50     	; 0x5e3e <vfprintf+0x10c>
    5e0c:	36 fe       	sbrs	r3, 6
    5e0e:	06 c0       	rjmp	.+12     	; 0x5e1c <vfprintf+0xea>
    5e10:	8a e0       	ldi	r24, 0x0A	; 10
    5e12:	98 9e       	mul	r9, r24
    5e14:	20 0d       	add	r18, r0
    5e16:	11 24       	eor	r1, r1
    5e18:	92 2e       	mov	r9, r18
    5e1a:	11 c0       	rjmp	.+34     	; 0x5e3e <vfprintf+0x10c>
    5e1c:	ea e0       	ldi	r30, 0x0A	; 10
    5e1e:	2e 9e       	mul	r2, r30
    5e20:	20 0d       	add	r18, r0
    5e22:	11 24       	eor	r1, r1
    5e24:	22 2e       	mov	r2, r18
    5e26:	f3 2d       	mov	r31, r3
    5e28:	f0 62       	ori	r31, 0x20	; 32
    5e2a:	3f 2e       	mov	r3, r31
    5e2c:	08 c0       	rjmp	.+16     	; 0x5e3e <vfprintf+0x10c>
    5e2e:	8c 36       	cpi	r24, 0x6C	; 108
    5e30:	21 f4       	brne	.+8      	; 0x5e3a <vfprintf+0x108>
    5e32:	83 2d       	mov	r24, r3
    5e34:	80 68       	ori	r24, 0x80	; 128
    5e36:	38 2e       	mov	r3, r24
    5e38:	02 c0       	rjmp	.+4      	; 0x5e3e <vfprintf+0x10c>
    5e3a:	88 36       	cpi	r24, 0x68	; 104
    5e3c:	41 f4       	brne	.+16     	; 0x5e4e <vfprintf+0x11c>
    5e3e:	f7 01       	movw	r30, r14
    5e40:	93 fd       	sbrc	r25, 3
    5e42:	85 91       	lpm	r24, Z+
    5e44:	93 ff       	sbrs	r25, 3
    5e46:	81 91       	ld	r24, Z+
    5e48:	7f 01       	movw	r14, r30
    5e4a:	81 11       	cpse	r24, r1
    5e4c:	b3 cf       	rjmp	.-154    	; 0x5db4 <vfprintf+0x82>
    5e4e:	98 2f       	mov	r25, r24
    5e50:	9f 7d       	andi	r25, 0xDF	; 223
    5e52:	95 54       	subi	r25, 0x45	; 69
    5e54:	93 30       	cpi	r25, 0x03	; 3
    5e56:	28 f4       	brcc	.+10     	; 0x5e62 <vfprintf+0x130>
    5e58:	0c 5f       	subi	r16, 0xFC	; 252
    5e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e5c:	9f e3       	ldi	r25, 0x3F	; 63
    5e5e:	99 83       	std	Y+1, r25	; 0x01
    5e60:	0d c0       	rjmp	.+26     	; 0x5e7c <vfprintf+0x14a>
    5e62:	83 36       	cpi	r24, 0x63	; 99
    5e64:	31 f0       	breq	.+12     	; 0x5e72 <vfprintf+0x140>
    5e66:	83 37       	cpi	r24, 0x73	; 115
    5e68:	71 f0       	breq	.+28     	; 0x5e86 <vfprintf+0x154>
    5e6a:	83 35       	cpi	r24, 0x53	; 83
    5e6c:	09 f0       	breq	.+2      	; 0x5e70 <vfprintf+0x13e>
    5e6e:	55 c0       	rjmp	.+170    	; 0x5f1a <vfprintf+0x1e8>
    5e70:	20 c0       	rjmp	.+64     	; 0x5eb2 <vfprintf+0x180>
    5e72:	f8 01       	movw	r30, r16
    5e74:	80 81       	ld	r24, Z
    5e76:	89 83       	std	Y+1, r24	; 0x01
    5e78:	0e 5f       	subi	r16, 0xFE	; 254
    5e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7c:	88 24       	eor	r8, r8
    5e7e:	83 94       	inc	r8
    5e80:	91 2c       	mov	r9, r1
    5e82:	53 01       	movw	r10, r6
    5e84:	12 c0       	rjmp	.+36     	; 0x5eaa <vfprintf+0x178>
    5e86:	28 01       	movw	r4, r16
    5e88:	f2 e0       	ldi	r31, 0x02	; 2
    5e8a:	4f 0e       	add	r4, r31
    5e8c:	51 1c       	adc	r5, r1
    5e8e:	f8 01       	movw	r30, r16
    5e90:	a0 80       	ld	r10, Z
    5e92:	b1 80       	ldd	r11, Z+1	; 0x01
    5e94:	36 fe       	sbrs	r3, 6
    5e96:	03 c0       	rjmp	.+6      	; 0x5e9e <vfprintf+0x16c>
    5e98:	69 2d       	mov	r22, r9
    5e9a:	70 e0       	ldi	r23, 0x00	; 0
    5e9c:	02 c0       	rjmp	.+4      	; 0x5ea2 <vfprintf+0x170>
    5e9e:	6f ef       	ldi	r22, 0xFF	; 255
    5ea0:	7f ef       	ldi	r23, 0xFF	; 255
    5ea2:	c5 01       	movw	r24, r10
    5ea4:	4e d1       	rcall	.+668    	; 0x6142 <strnlen>
    5ea6:	4c 01       	movw	r8, r24
    5ea8:	82 01       	movw	r16, r4
    5eaa:	f3 2d       	mov	r31, r3
    5eac:	ff 77       	andi	r31, 0x7F	; 127
    5eae:	3f 2e       	mov	r3, r31
    5eb0:	15 c0       	rjmp	.+42     	; 0x5edc <vfprintf+0x1aa>
    5eb2:	28 01       	movw	r4, r16
    5eb4:	22 e0       	ldi	r18, 0x02	; 2
    5eb6:	42 0e       	add	r4, r18
    5eb8:	51 1c       	adc	r5, r1
    5eba:	f8 01       	movw	r30, r16
    5ebc:	a0 80       	ld	r10, Z
    5ebe:	b1 80       	ldd	r11, Z+1	; 0x01
    5ec0:	36 fe       	sbrs	r3, 6
    5ec2:	03 c0       	rjmp	.+6      	; 0x5eca <vfprintf+0x198>
    5ec4:	69 2d       	mov	r22, r9
    5ec6:	70 e0       	ldi	r23, 0x00	; 0
    5ec8:	02 c0       	rjmp	.+4      	; 0x5ece <vfprintf+0x19c>
    5eca:	6f ef       	ldi	r22, 0xFF	; 255
    5ecc:	7f ef       	ldi	r23, 0xFF	; 255
    5ece:	c5 01       	movw	r24, r10
    5ed0:	2d d1       	rcall	.+602    	; 0x612c <strnlen_P>
    5ed2:	4c 01       	movw	r8, r24
    5ed4:	f3 2d       	mov	r31, r3
    5ed6:	f0 68       	ori	r31, 0x80	; 128
    5ed8:	3f 2e       	mov	r3, r31
    5eda:	82 01       	movw	r16, r4
    5edc:	33 fc       	sbrc	r3, 3
    5ede:	19 c0       	rjmp	.+50     	; 0x5f12 <vfprintf+0x1e0>
    5ee0:	82 2d       	mov	r24, r2
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	88 16       	cp	r8, r24
    5ee6:	99 06       	cpc	r9, r25
    5ee8:	a0 f4       	brcc	.+40     	; 0x5f12 <vfprintf+0x1e0>
    5eea:	b6 01       	movw	r22, r12
    5eec:	80 e2       	ldi	r24, 0x20	; 32
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	33 d1       	rcall	.+614    	; 0x6158 <fputc>
    5ef2:	2a 94       	dec	r2
    5ef4:	f5 cf       	rjmp	.-22     	; 0x5ee0 <vfprintf+0x1ae>
    5ef6:	f5 01       	movw	r30, r10
    5ef8:	37 fc       	sbrc	r3, 7
    5efa:	85 91       	lpm	r24, Z+
    5efc:	37 fe       	sbrs	r3, 7
    5efe:	81 91       	ld	r24, Z+
    5f00:	5f 01       	movw	r10, r30
    5f02:	b6 01       	movw	r22, r12
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	28 d1       	rcall	.+592    	; 0x6158 <fputc>
    5f08:	21 10       	cpse	r2, r1
    5f0a:	2a 94       	dec	r2
    5f0c:	21 e0       	ldi	r18, 0x01	; 1
    5f0e:	82 1a       	sub	r8, r18
    5f10:	91 08       	sbc	r9, r1
    5f12:	81 14       	cp	r8, r1
    5f14:	91 04       	cpc	r9, r1
    5f16:	79 f7       	brne	.-34     	; 0x5ef6 <vfprintf+0x1c4>
    5f18:	e1 c0       	rjmp	.+450    	; 0x60dc <vfprintf+0x3aa>
    5f1a:	84 36       	cpi	r24, 0x64	; 100
    5f1c:	11 f0       	breq	.+4      	; 0x5f22 <vfprintf+0x1f0>
    5f1e:	89 36       	cpi	r24, 0x69	; 105
    5f20:	39 f5       	brne	.+78     	; 0x5f70 <vfprintf+0x23e>
    5f22:	f8 01       	movw	r30, r16
    5f24:	37 fe       	sbrs	r3, 7
    5f26:	07 c0       	rjmp	.+14     	; 0x5f36 <vfprintf+0x204>
    5f28:	60 81       	ld	r22, Z
    5f2a:	71 81       	ldd	r23, Z+1	; 0x01
    5f2c:	82 81       	ldd	r24, Z+2	; 0x02
    5f2e:	93 81       	ldd	r25, Z+3	; 0x03
    5f30:	0c 5f       	subi	r16, 0xFC	; 252
    5f32:	1f 4f       	sbci	r17, 0xFF	; 255
    5f34:	08 c0       	rjmp	.+16     	; 0x5f46 <vfprintf+0x214>
    5f36:	60 81       	ld	r22, Z
    5f38:	71 81       	ldd	r23, Z+1	; 0x01
    5f3a:	07 2e       	mov	r0, r23
    5f3c:	00 0c       	add	r0, r0
    5f3e:	88 0b       	sbc	r24, r24
    5f40:	99 0b       	sbc	r25, r25
    5f42:	0e 5f       	subi	r16, 0xFE	; 254
    5f44:	1f 4f       	sbci	r17, 0xFF	; 255
    5f46:	f3 2d       	mov	r31, r3
    5f48:	ff 76       	andi	r31, 0x6F	; 111
    5f4a:	3f 2e       	mov	r3, r31
    5f4c:	97 ff       	sbrs	r25, 7
    5f4e:	09 c0       	rjmp	.+18     	; 0x5f62 <vfprintf+0x230>
    5f50:	90 95       	com	r25
    5f52:	80 95       	com	r24
    5f54:	70 95       	com	r23
    5f56:	61 95       	neg	r22
    5f58:	7f 4f       	sbci	r23, 0xFF	; 255
    5f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5e:	f0 68       	ori	r31, 0x80	; 128
    5f60:	3f 2e       	mov	r3, r31
    5f62:	2a e0       	ldi	r18, 0x0A	; 10
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	a3 01       	movw	r20, r6
    5f68:	33 d1       	rcall	.+614    	; 0x61d0 <__ultoa_invert>
    5f6a:	88 2e       	mov	r8, r24
    5f6c:	86 18       	sub	r8, r6
    5f6e:	44 c0       	rjmp	.+136    	; 0x5ff8 <vfprintf+0x2c6>
    5f70:	85 37       	cpi	r24, 0x75	; 117
    5f72:	31 f4       	brne	.+12     	; 0x5f80 <vfprintf+0x24e>
    5f74:	23 2d       	mov	r18, r3
    5f76:	2f 7e       	andi	r18, 0xEF	; 239
    5f78:	b2 2e       	mov	r11, r18
    5f7a:	2a e0       	ldi	r18, 0x0A	; 10
    5f7c:	30 e0       	ldi	r19, 0x00	; 0
    5f7e:	25 c0       	rjmp	.+74     	; 0x5fca <vfprintf+0x298>
    5f80:	93 2d       	mov	r25, r3
    5f82:	99 7f       	andi	r25, 0xF9	; 249
    5f84:	b9 2e       	mov	r11, r25
    5f86:	8f 36       	cpi	r24, 0x6F	; 111
    5f88:	c1 f0       	breq	.+48     	; 0x5fba <vfprintf+0x288>
    5f8a:	18 f4       	brcc	.+6      	; 0x5f92 <vfprintf+0x260>
    5f8c:	88 35       	cpi	r24, 0x58	; 88
    5f8e:	79 f0       	breq	.+30     	; 0x5fae <vfprintf+0x27c>
    5f90:	ae c0       	rjmp	.+348    	; 0x60ee <vfprintf+0x3bc>
    5f92:	80 37       	cpi	r24, 0x70	; 112
    5f94:	19 f0       	breq	.+6      	; 0x5f9c <vfprintf+0x26a>
    5f96:	88 37       	cpi	r24, 0x78	; 120
    5f98:	21 f0       	breq	.+8      	; 0x5fa2 <vfprintf+0x270>
    5f9a:	a9 c0       	rjmp	.+338    	; 0x60ee <vfprintf+0x3bc>
    5f9c:	e9 2f       	mov	r30, r25
    5f9e:	e0 61       	ori	r30, 0x10	; 16
    5fa0:	be 2e       	mov	r11, r30
    5fa2:	b4 fe       	sbrs	r11, 4
    5fa4:	0d c0       	rjmp	.+26     	; 0x5fc0 <vfprintf+0x28e>
    5fa6:	fb 2d       	mov	r31, r11
    5fa8:	f4 60       	ori	r31, 0x04	; 4
    5faa:	bf 2e       	mov	r11, r31
    5fac:	09 c0       	rjmp	.+18     	; 0x5fc0 <vfprintf+0x28e>
    5fae:	34 fe       	sbrs	r3, 4
    5fb0:	0a c0       	rjmp	.+20     	; 0x5fc6 <vfprintf+0x294>
    5fb2:	29 2f       	mov	r18, r25
    5fb4:	26 60       	ori	r18, 0x06	; 6
    5fb6:	b2 2e       	mov	r11, r18
    5fb8:	06 c0       	rjmp	.+12     	; 0x5fc6 <vfprintf+0x294>
    5fba:	28 e0       	ldi	r18, 0x08	; 8
    5fbc:	30 e0       	ldi	r19, 0x00	; 0
    5fbe:	05 c0       	rjmp	.+10     	; 0x5fca <vfprintf+0x298>
    5fc0:	20 e1       	ldi	r18, 0x10	; 16
    5fc2:	30 e0       	ldi	r19, 0x00	; 0
    5fc4:	02 c0       	rjmp	.+4      	; 0x5fca <vfprintf+0x298>
    5fc6:	20 e1       	ldi	r18, 0x10	; 16
    5fc8:	32 e0       	ldi	r19, 0x02	; 2
    5fca:	f8 01       	movw	r30, r16
    5fcc:	b7 fe       	sbrs	r11, 7
    5fce:	07 c0       	rjmp	.+14     	; 0x5fde <vfprintf+0x2ac>
    5fd0:	60 81       	ld	r22, Z
    5fd2:	71 81       	ldd	r23, Z+1	; 0x01
    5fd4:	82 81       	ldd	r24, Z+2	; 0x02
    5fd6:	93 81       	ldd	r25, Z+3	; 0x03
    5fd8:	0c 5f       	subi	r16, 0xFC	; 252
    5fda:	1f 4f       	sbci	r17, 0xFF	; 255
    5fdc:	06 c0       	rjmp	.+12     	; 0x5fea <vfprintf+0x2b8>
    5fde:	60 81       	ld	r22, Z
    5fe0:	71 81       	ldd	r23, Z+1	; 0x01
    5fe2:	80 e0       	ldi	r24, 0x00	; 0
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	0e 5f       	subi	r16, 0xFE	; 254
    5fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    5fea:	a3 01       	movw	r20, r6
    5fec:	f1 d0       	rcall	.+482    	; 0x61d0 <__ultoa_invert>
    5fee:	88 2e       	mov	r8, r24
    5ff0:	86 18       	sub	r8, r6
    5ff2:	fb 2d       	mov	r31, r11
    5ff4:	ff 77       	andi	r31, 0x7F	; 127
    5ff6:	3f 2e       	mov	r3, r31
    5ff8:	36 fe       	sbrs	r3, 6
    5ffa:	0d c0       	rjmp	.+26     	; 0x6016 <vfprintf+0x2e4>
    5ffc:	23 2d       	mov	r18, r3
    5ffe:	2e 7f       	andi	r18, 0xFE	; 254
    6000:	a2 2e       	mov	r10, r18
    6002:	89 14       	cp	r8, r9
    6004:	58 f4       	brcc	.+22     	; 0x601c <vfprintf+0x2ea>
    6006:	34 fe       	sbrs	r3, 4
    6008:	0b c0       	rjmp	.+22     	; 0x6020 <vfprintf+0x2ee>
    600a:	32 fc       	sbrc	r3, 2
    600c:	09 c0       	rjmp	.+18     	; 0x6020 <vfprintf+0x2ee>
    600e:	83 2d       	mov	r24, r3
    6010:	8e 7e       	andi	r24, 0xEE	; 238
    6012:	a8 2e       	mov	r10, r24
    6014:	05 c0       	rjmp	.+10     	; 0x6020 <vfprintf+0x2ee>
    6016:	b8 2c       	mov	r11, r8
    6018:	a3 2c       	mov	r10, r3
    601a:	03 c0       	rjmp	.+6      	; 0x6022 <vfprintf+0x2f0>
    601c:	b8 2c       	mov	r11, r8
    601e:	01 c0       	rjmp	.+2      	; 0x6022 <vfprintf+0x2f0>
    6020:	b9 2c       	mov	r11, r9
    6022:	a4 fe       	sbrs	r10, 4
    6024:	0f c0       	rjmp	.+30     	; 0x6044 <vfprintf+0x312>
    6026:	fe 01       	movw	r30, r28
    6028:	e8 0d       	add	r30, r8
    602a:	f1 1d       	adc	r31, r1
    602c:	80 81       	ld	r24, Z
    602e:	80 33       	cpi	r24, 0x30	; 48
    6030:	21 f4       	brne	.+8      	; 0x603a <vfprintf+0x308>
    6032:	9a 2d       	mov	r25, r10
    6034:	99 7e       	andi	r25, 0xE9	; 233
    6036:	a9 2e       	mov	r10, r25
    6038:	09 c0       	rjmp	.+18     	; 0x604c <vfprintf+0x31a>
    603a:	a2 fe       	sbrs	r10, 2
    603c:	06 c0       	rjmp	.+12     	; 0x604a <vfprintf+0x318>
    603e:	b3 94       	inc	r11
    6040:	b3 94       	inc	r11
    6042:	04 c0       	rjmp	.+8      	; 0x604c <vfprintf+0x31a>
    6044:	8a 2d       	mov	r24, r10
    6046:	86 78       	andi	r24, 0x86	; 134
    6048:	09 f0       	breq	.+2      	; 0x604c <vfprintf+0x31a>
    604a:	b3 94       	inc	r11
    604c:	a3 fc       	sbrc	r10, 3
    604e:	10 c0       	rjmp	.+32     	; 0x6070 <vfprintf+0x33e>
    6050:	a0 fe       	sbrs	r10, 0
    6052:	06 c0       	rjmp	.+12     	; 0x6060 <vfprintf+0x32e>
    6054:	b2 14       	cp	r11, r2
    6056:	80 f4       	brcc	.+32     	; 0x6078 <vfprintf+0x346>
    6058:	28 0c       	add	r2, r8
    605a:	92 2c       	mov	r9, r2
    605c:	9b 18       	sub	r9, r11
    605e:	0d c0       	rjmp	.+26     	; 0x607a <vfprintf+0x348>
    6060:	b2 14       	cp	r11, r2
    6062:	58 f4       	brcc	.+22     	; 0x607a <vfprintf+0x348>
    6064:	b6 01       	movw	r22, r12
    6066:	80 e2       	ldi	r24, 0x20	; 32
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	76 d0       	rcall	.+236    	; 0x6158 <fputc>
    606c:	b3 94       	inc	r11
    606e:	f8 cf       	rjmp	.-16     	; 0x6060 <vfprintf+0x32e>
    6070:	b2 14       	cp	r11, r2
    6072:	18 f4       	brcc	.+6      	; 0x607a <vfprintf+0x348>
    6074:	2b 18       	sub	r2, r11
    6076:	02 c0       	rjmp	.+4      	; 0x607c <vfprintf+0x34a>
    6078:	98 2c       	mov	r9, r8
    607a:	21 2c       	mov	r2, r1
    607c:	a4 fe       	sbrs	r10, 4
    607e:	0f c0       	rjmp	.+30     	; 0x609e <vfprintf+0x36c>
    6080:	b6 01       	movw	r22, r12
    6082:	80 e3       	ldi	r24, 0x30	; 48
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	68 d0       	rcall	.+208    	; 0x6158 <fputc>
    6088:	a2 fe       	sbrs	r10, 2
    608a:	16 c0       	rjmp	.+44     	; 0x60b8 <vfprintf+0x386>
    608c:	a1 fc       	sbrc	r10, 1
    608e:	03 c0       	rjmp	.+6      	; 0x6096 <vfprintf+0x364>
    6090:	88 e7       	ldi	r24, 0x78	; 120
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	02 c0       	rjmp	.+4      	; 0x609a <vfprintf+0x368>
    6096:	88 e5       	ldi	r24, 0x58	; 88
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	b6 01       	movw	r22, r12
    609c:	0c c0       	rjmp	.+24     	; 0x60b6 <vfprintf+0x384>
    609e:	8a 2d       	mov	r24, r10
    60a0:	86 78       	andi	r24, 0x86	; 134
    60a2:	51 f0       	breq	.+20     	; 0x60b8 <vfprintf+0x386>
    60a4:	a1 fe       	sbrs	r10, 1
    60a6:	02 c0       	rjmp	.+4      	; 0x60ac <vfprintf+0x37a>
    60a8:	8b e2       	ldi	r24, 0x2B	; 43
    60aa:	01 c0       	rjmp	.+2      	; 0x60ae <vfprintf+0x37c>
    60ac:	80 e2       	ldi	r24, 0x20	; 32
    60ae:	a7 fc       	sbrc	r10, 7
    60b0:	8d e2       	ldi	r24, 0x2D	; 45
    60b2:	b6 01       	movw	r22, r12
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	50 d0       	rcall	.+160    	; 0x6158 <fputc>
    60b8:	89 14       	cp	r8, r9
    60ba:	30 f4       	brcc	.+12     	; 0x60c8 <vfprintf+0x396>
    60bc:	b6 01       	movw	r22, r12
    60be:	80 e3       	ldi	r24, 0x30	; 48
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	4a d0       	rcall	.+148    	; 0x6158 <fputc>
    60c4:	9a 94       	dec	r9
    60c6:	f8 cf       	rjmp	.-16     	; 0x60b8 <vfprintf+0x386>
    60c8:	8a 94       	dec	r8
    60ca:	f3 01       	movw	r30, r6
    60cc:	e8 0d       	add	r30, r8
    60ce:	f1 1d       	adc	r31, r1
    60d0:	80 81       	ld	r24, Z
    60d2:	b6 01       	movw	r22, r12
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	40 d0       	rcall	.+128    	; 0x6158 <fputc>
    60d8:	81 10       	cpse	r8, r1
    60da:	f6 cf       	rjmp	.-20     	; 0x60c8 <vfprintf+0x396>
    60dc:	22 20       	and	r2, r2
    60de:	09 f4       	brne	.+2      	; 0x60e2 <vfprintf+0x3b0>
    60e0:	4e ce       	rjmp	.-868    	; 0x5d7e <vfprintf+0x4c>
    60e2:	b6 01       	movw	r22, r12
    60e4:	80 e2       	ldi	r24, 0x20	; 32
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	37 d0       	rcall	.+110    	; 0x6158 <fputc>
    60ea:	2a 94       	dec	r2
    60ec:	f7 cf       	rjmp	.-18     	; 0x60dc <vfprintf+0x3aa>
    60ee:	f6 01       	movw	r30, r12
    60f0:	86 81       	ldd	r24, Z+6	; 0x06
    60f2:	97 81       	ldd	r25, Z+7	; 0x07
    60f4:	02 c0       	rjmp	.+4      	; 0x60fa <vfprintf+0x3c8>
    60f6:	8f ef       	ldi	r24, 0xFF	; 255
    60f8:	9f ef       	ldi	r25, 0xFF	; 255
    60fa:	2b 96       	adiw	r28, 0x0b	; 11
    60fc:	0f b6       	in	r0, 0x3f	; 63
    60fe:	f8 94       	cli
    6100:	de bf       	out	0x3e, r29	; 62
    6102:	0f be       	out	0x3f, r0	; 63
    6104:	cd bf       	out	0x3d, r28	; 61
    6106:	df 91       	pop	r29
    6108:	cf 91       	pop	r28
    610a:	1f 91       	pop	r17
    610c:	0f 91       	pop	r16
    610e:	ff 90       	pop	r15
    6110:	ef 90       	pop	r14
    6112:	df 90       	pop	r13
    6114:	cf 90       	pop	r12
    6116:	bf 90       	pop	r11
    6118:	af 90       	pop	r10
    611a:	9f 90       	pop	r9
    611c:	8f 90       	pop	r8
    611e:	7f 90       	pop	r7
    6120:	6f 90       	pop	r6
    6122:	5f 90       	pop	r5
    6124:	4f 90       	pop	r4
    6126:	3f 90       	pop	r3
    6128:	2f 90       	pop	r2
    612a:	08 95       	ret

0000612c <strnlen_P>:
    612c:	fc 01       	movw	r30, r24
    612e:	05 90       	lpm	r0, Z+
    6130:	61 50       	subi	r22, 0x01	; 1
    6132:	70 40       	sbci	r23, 0x00	; 0
    6134:	01 10       	cpse	r0, r1
    6136:	d8 f7       	brcc	.-10     	; 0x612e <strnlen_P+0x2>
    6138:	80 95       	com	r24
    613a:	90 95       	com	r25
    613c:	8e 0f       	add	r24, r30
    613e:	9f 1f       	adc	r25, r31
    6140:	08 95       	ret

00006142 <strnlen>:
    6142:	fc 01       	movw	r30, r24
    6144:	61 50       	subi	r22, 0x01	; 1
    6146:	70 40       	sbci	r23, 0x00	; 0
    6148:	01 90       	ld	r0, Z+
    614a:	01 10       	cpse	r0, r1
    614c:	d8 f7       	brcc	.-10     	; 0x6144 <strnlen+0x2>
    614e:	80 95       	com	r24
    6150:	90 95       	com	r25
    6152:	8e 0f       	add	r24, r30
    6154:	9f 1f       	adc	r25, r31
    6156:	08 95       	ret

00006158 <fputc>:
    6158:	0f 93       	push	r16
    615a:	1f 93       	push	r17
    615c:	cf 93       	push	r28
    615e:	df 93       	push	r29
    6160:	fb 01       	movw	r30, r22
    6162:	23 81       	ldd	r18, Z+3	; 0x03
    6164:	21 fd       	sbrc	r18, 1
    6166:	03 c0       	rjmp	.+6      	; 0x616e <fputc+0x16>
    6168:	8f ef       	ldi	r24, 0xFF	; 255
    616a:	9f ef       	ldi	r25, 0xFF	; 255
    616c:	2c c0       	rjmp	.+88     	; 0x61c6 <fputc+0x6e>
    616e:	22 ff       	sbrs	r18, 2
    6170:	16 c0       	rjmp	.+44     	; 0x619e <fputc+0x46>
    6172:	46 81       	ldd	r20, Z+6	; 0x06
    6174:	57 81       	ldd	r21, Z+7	; 0x07
    6176:	24 81       	ldd	r18, Z+4	; 0x04
    6178:	35 81       	ldd	r19, Z+5	; 0x05
    617a:	42 17       	cp	r20, r18
    617c:	53 07       	cpc	r21, r19
    617e:	44 f4       	brge	.+16     	; 0x6190 <fputc+0x38>
    6180:	a0 81       	ld	r26, Z
    6182:	b1 81       	ldd	r27, Z+1	; 0x01
    6184:	9d 01       	movw	r18, r26
    6186:	2f 5f       	subi	r18, 0xFF	; 255
    6188:	3f 4f       	sbci	r19, 0xFF	; 255
    618a:	31 83       	std	Z+1, r19	; 0x01
    618c:	20 83       	st	Z, r18
    618e:	8c 93       	st	X, r24
    6190:	26 81       	ldd	r18, Z+6	; 0x06
    6192:	37 81       	ldd	r19, Z+7	; 0x07
    6194:	2f 5f       	subi	r18, 0xFF	; 255
    6196:	3f 4f       	sbci	r19, 0xFF	; 255
    6198:	37 83       	std	Z+7, r19	; 0x07
    619a:	26 83       	std	Z+6, r18	; 0x06
    619c:	14 c0       	rjmp	.+40     	; 0x61c6 <fputc+0x6e>
    619e:	8b 01       	movw	r16, r22
    61a0:	ec 01       	movw	r28, r24
    61a2:	fb 01       	movw	r30, r22
    61a4:	00 84       	ldd	r0, Z+8	; 0x08
    61a6:	f1 85       	ldd	r31, Z+9	; 0x09
    61a8:	e0 2d       	mov	r30, r0
    61aa:	19 95       	eicall
    61ac:	89 2b       	or	r24, r25
    61ae:	e1 f6       	brne	.-72     	; 0x6168 <fputc+0x10>
    61b0:	d8 01       	movw	r26, r16
    61b2:	16 96       	adiw	r26, 0x06	; 6
    61b4:	8d 91       	ld	r24, X+
    61b6:	9c 91       	ld	r25, X
    61b8:	17 97       	sbiw	r26, 0x07	; 7
    61ba:	01 96       	adiw	r24, 0x01	; 1
    61bc:	17 96       	adiw	r26, 0x07	; 7
    61be:	9c 93       	st	X, r25
    61c0:	8e 93       	st	-X, r24
    61c2:	16 97       	sbiw	r26, 0x06	; 6
    61c4:	ce 01       	movw	r24, r28
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	1f 91       	pop	r17
    61cc:	0f 91       	pop	r16
    61ce:	08 95       	ret

000061d0 <__ultoa_invert>:
    61d0:	fa 01       	movw	r30, r20
    61d2:	aa 27       	eor	r26, r26
    61d4:	28 30       	cpi	r18, 0x08	; 8
    61d6:	51 f1       	breq	.+84     	; 0x622c <__ultoa_invert+0x5c>
    61d8:	20 31       	cpi	r18, 0x10	; 16
    61da:	81 f1       	breq	.+96     	; 0x623c <__ultoa_invert+0x6c>
    61dc:	e8 94       	clt
    61de:	6f 93       	push	r22
    61e0:	6e 7f       	andi	r22, 0xFE	; 254
    61e2:	6e 5f       	subi	r22, 0xFE	; 254
    61e4:	7f 4f       	sbci	r23, 0xFF	; 255
    61e6:	8f 4f       	sbci	r24, 0xFF	; 255
    61e8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ea:	af 4f       	sbci	r26, 0xFF	; 255
    61ec:	b1 e0       	ldi	r27, 0x01	; 1
    61ee:	3e d0       	rcall	.+124    	; 0x626c <__ultoa_invert+0x9c>
    61f0:	b4 e0       	ldi	r27, 0x04	; 4
    61f2:	3c d0       	rcall	.+120    	; 0x626c <__ultoa_invert+0x9c>
    61f4:	67 0f       	add	r22, r23
    61f6:	78 1f       	adc	r23, r24
    61f8:	89 1f       	adc	r24, r25
    61fa:	9a 1f       	adc	r25, r26
    61fc:	a1 1d       	adc	r26, r1
    61fe:	68 0f       	add	r22, r24
    6200:	79 1f       	adc	r23, r25
    6202:	8a 1f       	adc	r24, r26
    6204:	91 1d       	adc	r25, r1
    6206:	a1 1d       	adc	r26, r1
    6208:	6a 0f       	add	r22, r26
    620a:	71 1d       	adc	r23, r1
    620c:	81 1d       	adc	r24, r1
    620e:	91 1d       	adc	r25, r1
    6210:	a1 1d       	adc	r26, r1
    6212:	20 d0       	rcall	.+64     	; 0x6254 <__ultoa_invert+0x84>
    6214:	09 f4       	brne	.+2      	; 0x6218 <__ultoa_invert+0x48>
    6216:	68 94       	set
    6218:	3f 91       	pop	r19
    621a:	2a e0       	ldi	r18, 0x0A	; 10
    621c:	26 9f       	mul	r18, r22
    621e:	11 24       	eor	r1, r1
    6220:	30 19       	sub	r19, r0
    6222:	30 5d       	subi	r19, 0xD0	; 208
    6224:	31 93       	st	Z+, r19
    6226:	de f6       	brtc	.-74     	; 0x61de <__ultoa_invert+0xe>
    6228:	cf 01       	movw	r24, r30
    622a:	08 95       	ret
    622c:	46 2f       	mov	r20, r22
    622e:	47 70       	andi	r20, 0x07	; 7
    6230:	40 5d       	subi	r20, 0xD0	; 208
    6232:	41 93       	st	Z+, r20
    6234:	b3 e0       	ldi	r27, 0x03	; 3
    6236:	0f d0       	rcall	.+30     	; 0x6256 <__ultoa_invert+0x86>
    6238:	c9 f7       	brne	.-14     	; 0x622c <__ultoa_invert+0x5c>
    623a:	f6 cf       	rjmp	.-20     	; 0x6228 <__ultoa_invert+0x58>
    623c:	46 2f       	mov	r20, r22
    623e:	4f 70       	andi	r20, 0x0F	; 15
    6240:	40 5d       	subi	r20, 0xD0	; 208
    6242:	4a 33       	cpi	r20, 0x3A	; 58
    6244:	18 f0       	brcs	.+6      	; 0x624c <__ultoa_invert+0x7c>
    6246:	49 5d       	subi	r20, 0xD9	; 217
    6248:	31 fd       	sbrc	r19, 1
    624a:	40 52       	subi	r20, 0x20	; 32
    624c:	41 93       	st	Z+, r20
    624e:	02 d0       	rcall	.+4      	; 0x6254 <__ultoa_invert+0x84>
    6250:	a9 f7       	brne	.-22     	; 0x623c <__ultoa_invert+0x6c>
    6252:	ea cf       	rjmp	.-44     	; 0x6228 <__ultoa_invert+0x58>
    6254:	b4 e0       	ldi	r27, 0x04	; 4
    6256:	a6 95       	lsr	r26
    6258:	97 95       	ror	r25
    625a:	87 95       	ror	r24
    625c:	77 95       	ror	r23
    625e:	67 95       	ror	r22
    6260:	ba 95       	dec	r27
    6262:	c9 f7       	brne	.-14     	; 0x6256 <__ultoa_invert+0x86>
    6264:	00 97       	sbiw	r24, 0x00	; 0
    6266:	61 05       	cpc	r22, r1
    6268:	71 05       	cpc	r23, r1
    626a:	08 95       	ret
    626c:	9b 01       	movw	r18, r22
    626e:	ac 01       	movw	r20, r24
    6270:	0a 2e       	mov	r0, r26
    6272:	06 94       	lsr	r0
    6274:	57 95       	ror	r21
    6276:	47 95       	ror	r20
    6278:	37 95       	ror	r19
    627a:	27 95       	ror	r18
    627c:	ba 95       	dec	r27
    627e:	c9 f7       	brne	.-14     	; 0x6272 <__ultoa_invert+0xa2>
    6280:	62 0f       	add	r22, r18
    6282:	73 1f       	adc	r23, r19
    6284:	84 1f       	adc	r24, r20
    6286:	95 1f       	adc	r25, r21
    6288:	a0 1d       	adc	r26, r0
    628a:	08 95       	ret

0000628c <_exit>:
    628c:	f8 94       	cli

0000628e <__stop_program>:
    628e:	ff cf       	rjmp	.-2      	; 0x628e <__stop_program>
