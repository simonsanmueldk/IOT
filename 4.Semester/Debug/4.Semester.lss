
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b4  00800200  00006a9c  00006b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001067  008008b4  008008b4  000071e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  00007280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eb43  00000000  00000000  00007ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c39  00000000  00000000  00016a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073d4  00000000  00000000  0001a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a48  00000000  00000000  00021a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004692  00000000  00000000  00024458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c879  00000000  00000000  00028aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b40  00000000  00000000  00035363  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c7       	rjmp	.+4082   	; 0x1024 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d7 28 	jmp	0x51ae	; 0x51ae <__vector_25>
      68:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__vector_36>
      94:	0c 94 bf 29 	jmp	0x537e	; 0x537e <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <__vector_51>
      d0:	0c 94 55 2a 	jmp	0x54aa	; 0x54aa <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__vector_54>
      dc:	0c 94 eb 2a 	jmp	0x55d6	; 0x55d6 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ec 1d       	adc	r30, r12
      e6:	ec 1d       	adc	r30, r12
      e8:	ec 1d       	adc	r30, r12
      ea:	23 1e       	adc	r2, r19
      ec:	2b 1e       	adc	r2, r27
      ee:	40 1e       	adc	r4, r16
      f0:	ec 1d       	adc	r30, r12
      f2:	ec 1d       	adc	r30, r12
      f4:	23 1e       	adc	r2, r19
      f6:	2b 1e       	adc	r2, r27
      f8:	2c 2e       	mov	r2, r28
      fa:	9c 2e       	mov	r9, r28
      fc:	9c 2e       	mov	r9, r28
      fe:	9c 2e       	mov	r9, r28
     100:	9c 2e       	mov	r9, r28
     102:	9c 2e       	mov	r9, r28
     104:	9c 2e       	mov	r9, r28
     106:	9c 2e       	mov	r9, r28
     108:	2c 2e       	mov	r2, r28
     10a:	9c 2e       	mov	r9, r28
     10c:	9c 2e       	mov	r9, r28
     10e:	9c 2e       	mov	r9, r28
     110:	9c 2e       	mov	r9, r28
     112:	9c 2e       	mov	r9, r28
     114:	9c 2e       	mov	r9, r28
     116:	9c 2e       	mov	r9, r28
     118:	2e 2e       	mov	r2, r30
     11a:	9c 2e       	mov	r9, r28
     11c:	9c 2e       	mov	r9, r28
     11e:	9c 2e       	mov	r9, r28
     120:	9c 2e       	mov	r9, r28
     122:	9c 2e       	mov	r9, r28
     124:	9c 2e       	mov	r9, r28
     126:	9c 2e       	mov	r9, r28
     128:	9c 2e       	mov	r9, r28
     12a:	9c 2e       	mov	r9, r28
     12c:	9c 2e       	mov	r9, r28
     12e:	9c 2e       	mov	r9, r28
     130:	9c 2e       	mov	r9, r28
     132:	9c 2e       	mov	r9, r28
     134:	9c 2e       	mov	r9, r28
     136:	9c 2e       	mov	r9, r28
     138:	2e 2e       	mov	r2, r30
     13a:	9c 2e       	mov	r9, r28
     13c:	9c 2e       	mov	r9, r28
     13e:	9c 2e       	mov	r9, r28
     140:	9c 2e       	mov	r9, r28
     142:	9c 2e       	mov	r9, r28
     144:	9c 2e       	mov	r9, r28
     146:	9c 2e       	mov	r9, r28
     148:	9c 2e       	mov	r9, r28
     14a:	9c 2e       	mov	r9, r28
     14c:	9c 2e       	mov	r9, r28
     14e:	9c 2e       	mov	r9, r28
     150:	9c 2e       	mov	r9, r28
     152:	9c 2e       	mov	r9, r28
     154:	9c 2e       	mov	r9, r28
     156:	9c 2e       	mov	r9, r28
     158:	98 2e       	mov	r9, r24
     15a:	9c 2e       	mov	r9, r28
     15c:	9c 2e       	mov	r9, r28
     15e:	9c 2e       	mov	r9, r28
     160:	9c 2e       	mov	r9, r28
     162:	9c 2e       	mov	r9, r28
     164:	9c 2e       	mov	r9, r28
     166:	9c 2e       	mov	r9, r28
     168:	63 2e       	mov	r6, r19
     16a:	9c 2e       	mov	r9, r28
     16c:	9c 2e       	mov	r9, r28
     16e:	9c 2e       	mov	r9, r28
     170:	9c 2e       	mov	r9, r28
     172:	9c 2e       	mov	r9, r28
     174:	9c 2e       	mov	r9, r28
     176:	9c 2e       	mov	r9, r28
     178:	9c 2e       	mov	r9, r28
     17a:	9c 2e       	mov	r9, r28
     17c:	9c 2e       	mov	r9, r28
     17e:	9c 2e       	mov	r9, r28
     180:	9c 2e       	mov	r9, r28
     182:	9c 2e       	mov	r9, r28
     184:	9c 2e       	mov	r9, r28
     186:	9c 2e       	mov	r9, r28
     188:	57 2e       	mov	r5, r23
     18a:	9c 2e       	mov	r9, r28
     18c:	9c 2e       	mov	r9, r28
     18e:	9c 2e       	mov	r9, r28
     190:	9c 2e       	mov	r9, r28
     192:	9c 2e       	mov	r9, r28
     194:	9c 2e       	mov	r9, r28
     196:	9c 2e       	mov	r9, r28
     198:	7b 2e       	mov	r7, r27

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 2d 10 	call	0x205a	; 0x205a <prvCheckTasksWaitingTermination>
     19e:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	78 d6       	rcall	.+3312   	; 0xe98 <vPortYield>
     1a8:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <prvProcessTimerOrBlockTask>
     1c6:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec e9       	ldi	r30, 0x9C	; 156
     1e4:	fa e6       	ldi	r31, 0x6A	; 106
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 3b       	cpi	r26, 0xB4	; 180
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	29 e1       	ldi	r18, 0x19	; 25
     1f8:	a4 eb       	ldi	r26, 0xB4	; 180
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ab 31       	cpi	r26, 0x1B	; 27
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 48 21 	call	0x4290	; 0x4290 <main>
     20a:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <application_task_create>:
	{
		application_run(&xLastWakeTime,xFrequency);
	}
}
void application_task_create(UBaseType_t task_priority)
{
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
	xTaskCreate(
     216:	e1 2c       	mov	r14, r1
     218:	f1 2c       	mov	r15, r1
     21a:	08 2f       	mov	r16, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 ec       	ldi	r20, 0xC0	; 192
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6f e6       	ldi	r22, 0x6F	; 111
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	88 ec       	ldi	r24, 0xC8	; 200
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  task_priority  // Priority.
	,  NULL );
	
}
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <application_run>:
void application_run(TickType_t* xLastWakeTime,TickType_t xFrequency)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	66 97       	sbiw	r28, 0x16	; 22
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	5c 01       	movw	r10, r24
     266:	2a 01       	movw	r4, r20
     268:	3b 01       	movw	r6, r22
	xEventGroupSetBits(_meassureEventGroup, CO2_BIT | TEMPERATURE_HUMIDITY_BIT);
     26a:	43 e0       	ldi	r20, 0x03	; 3
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <_meassureEventGroup>
     276:	90 91 cf 18 	lds	r25, 0x18CF	; 0x8018cf <_meassureEventGroup+0x1>
     27a:	59 d3       	rcall	.+1714   	; 0x92e <xEventGroupSetBits>
	dataReadyEventBits=xEventGroupWaitBits(_dataReadyEventGroup,CO2_BIT | TEMPERATURE_HUMIDITY_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     27c:	cc 24       	eor	r12, r12
     27e:	ca 94       	dec	r12
     280:	dc 2c       	mov	r13, r12
     282:	76 01       	movw	r14, r12
     284:	01 e0       	ldi	r16, 0x01	; 1
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	43 e0       	ldi	r20, 0x03	; 3
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 91 ec 18 	lds	r24, 0x18EC	; 0x8018ec <_dataReadyEventGroup>
     294:	90 91 ed 18 	lds	r25, 0x18ED	; 0x8018ed <_dataReadyEventGroup+0x1>
     298:	aa d2       	rcall	.+1364   	; 0x7ee <xEventGroupWaitBits>
     29a:	60 93 d2 18 	sts	0x18D2, r22	; 0x8018d2 <dataReadyEventBits>
     29e:	70 93 d3 18 	sts	0x18D3, r23	; 0x8018d3 <dataReadyEventBits+0x1>
     2a2:	80 93 d4 18 	sts	0x18D4, r24	; 0x8018d4 <dataReadyEventBits+0x2>
     2a6:	90 93 d5 18 	sts	0x18D5, r25	; 0x8018d5 <dataReadyEventBits+0x3>
	if ((dataReadyEventBits & (CO2_BIT | TEMPERATURE_HUMIDITY_BIT) ) == (CO2_BIT | TEMPERATURE_HUMIDITY_BIT))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <application_run+0x88>
     2be:	53 c0       	rjmp	.+166    	; 0x366 <application_run+0x12e>
	{
		setTemperatureData(get_temperature_data());
     2c0:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <get_temperature_data>
     2c4:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <setTemperatureData>
		printf("Temperature data ---> %d ",get_temperature_data());
     2c8:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <get_temperature_data>
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	8b e7       	ldi	r24, 0x7B	; 123
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
		setHumidityData(get_humidity_data());
     2dc:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <get_humidity_data>
     2e0:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <setHumidityData>
		printf(" Humidity data ---> %d ",get_humidity_data());
     2e4:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <get_humidity_data>
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	85 e9       	ldi	r24, 0x95	; 149
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
		setCO2Ppm(get_CO2_data());
     2f8:	81 d0       	rcall	.+258    	; 0x3fc <get_CO2_data>
     2fa:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <setCO2Ppm>
		printf("CO2 data ---> %i ",get_CO2_data());
     2fe:	7e d0       	rcall	.+252    	; 0x3fc <get_CO2_data>
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	8d ea       	ldi	r24, 0xAD	; 173
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
		
		payload=getLoRaPayload((uint8_t)2);
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <getLoRaPayload>
     31a:	86 e1       	ldi	r24, 0x16	; 22
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	a6 ed       	ldi	r26, 0xD6	; 214
     322:	b8 e1       	ldi	r27, 0x18	; 24
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <application_run+0xec>
		vTaskDelay(pdMS_TO_TICKS(50UL));
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
     338:	0f ef       	ldi	r16, 0xFF	; 255
     33a:	1f ef       	ldi	r17, 0xFF	; 255
     33c:	98 01       	movw	r18, r16
     33e:	46 e1       	ldi	r20, 0x16	; 22
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	66 ed       	ldi	r22, 0xD6	; 214
     344:	78 e1       	ldi	r23, 0x18	; 24
     346:	80 91 cc 18 	lds	r24, 0x18CC	; 0x8018cc <xMessageBuffer>
     34a:	90 91 cd 18 	lds	r25, 0x18CD	; 0x8018cd <xMessageBuffer+0x1>
     34e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <xStreamBufferSend>
		xTaskDelayUntil(xLastWakeTime, xFrequency );
     352:	b3 01       	movw	r22, r6
     354:	a2 01       	movw	r20, r4
     356:	c5 01       	movw	r24, r10
     358:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskDelayUntil>
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	}
	
     366:	66 96       	adiw	r28, 0x16	; 22
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	7f 90       	pop	r7
     388:	6f 90       	pop	r6
     38a:	5f 90       	pop	r5
     38c:	4f 90       	pop	r4
     38e:	08 95       	ret

00000390 <Application_Task>:
extern EventGroupHandle_t _meassureEventGroup ;
extern EventGroupHandle_t _dataReadyEventGroup;


void Application_Task(void* pvParameters)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <Application_Task+0x6>
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     39c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <xTaskGetTickCount>
     3a0:	69 83       	std	Y+1, r22	; 0x01
     3a2:	7a 83       	std	Y+2, r23	; 0x02
     3a4:	8b 83       	std	Y+3, r24	; 0x03
     3a6:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		application_run(&xLastWakeTime,xFrequency);
     3a8:	48 e8       	ldi	r20, 0x88	; 136
     3aa:	5e e0       	ldi	r21, 0x0E	; 14
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	41 df       	rcall	.-382    	; 0x238 <application_run>
     3b6:	f8 cf       	rjmp	.-16     	; 0x3a8 <Application_Task+0x18>

000003b8 <myCo2CallBack>:
	co2_sensor_t new_co2_data = pvPortMalloc(sizeof(CO2_Sensor));
	if(NULL == new_co2_data)
	{
		return NULL;
	}
	new_co2_data->co2_Data=co2_data;
     3b8:	90 93 f0 18 	sts	0x18F0, r25	; 0x8018f0 <co2_data+0x1>
     3bc:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <co2_data>
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 ec 18 	lds	r24, 0x18EC	; 0x8018ec <_dataReadyEventGroup>
     3cc:	90 91 ed 18 	lds	r25, 0x18ED	; 0x8018ed <_dataReadyEventGroup+0x1>
     3d0:	ae c2       	rjmp	.+1372   	; 0x92e <xEventGroupSetBits>
     3d2:	08 95       	ret

000003d4 <co2_task_create>:

}
void co2_task_create(UBaseType_t task_priority)
{
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
	
	xTaskCreate(
     3da:	e1 2c       	mov	r14, r1
     3dc:	f1 2c       	mov	r15, r1
     3de:	08 2f       	mov	r16, r24
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 ec       	ldi	r20, 0xC0	; 192
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	6f eb       	ldi	r22, 0xBF	; 191
     3ea:	72 e0       	ldi	r23, 0x02	; 2
     3ec:	8b e3       	ldi	r24, 0x3B	; 59
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
	,  "CO2 Task" 
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  task_priority 
	,  NULL );
}
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <get_CO2_data>:


uint16_t get_CO2_data(){
	
	return (uint16_t)co2_data;
}
     3fc:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <co2_data>
     400:	90 91 f0 18 	lds	r25, 0x18F0	; 0x8018f0 <co2_data+0x1>
     404:	08 95       	ret

00000406 <CO2_taskRun>:


void CO2_taskRun() {
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
	
	
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     410:	cc 24       	eor	r12, r12
     412:	ca 94       	dec	r12
     414:	dc 2c       	mov	r13, r12
     416:	76 01       	movw	r14, r12
     418:	01 e0       	ldi	r16, 0x01	; 1
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	42 e0       	ldi	r20, 0x02	; 2
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <_meassureEventGroup>
     428:	90 91 cf 18 	lds	r25, 0x18CF	; 0x8018cf <_meassureEventGroup+0x1>
     42c:	e0 d1       	rcall	.+960    	; 0x7ee <xEventGroupWaitBits>
	CO2_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	
	if ((event_measure & CO2_BIT)==CO2_BIT)
     42e:	61 ff       	sbrs	r22, 1
     430:	1c c0       	rjmp	.+56     	; 0x46a <CO2_taskRun+0x64>
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
     432:	66 e0       	ldi	r22, 0x06	; 6
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
		rc = mh_z19_takeMeassuring();
     43e:	0e 94 32 27 	call	0x4e64	; 0x4e64 <mh_z19_takeMeassuring>
     442:	80 93 ee 18 	sts	0x18EE, r24	; 0x8018ee <rc>
		if (rc != MHZ19_OK)
     446:	88 23       	and	r24, r24
     448:	41 f0       	breq	.+16     	; 0x45a <CO2_taskRun+0x54>
		{
			printf("task got wrong");
     44a:	88 ec       	ldi	r24, 0xC8	; 200
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
		}
		printf("<<CO2 task set>>");		
     45a:	87 ed       	ldi	r24, 0xD7	; 215
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	9f 93       	push	r25
     460:	8f 93       	push	r24
     462:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
	}		
}
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	df 90       	pop	r13
     472:	cf 90       	pop	r12
     474:	08 95       	ret

00000476 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	mh_z19_injectCallBack(myCo2CallBack);
     476:	8c ed       	ldi	r24, 0xDC	; 220
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <mh_z19_injectCallBack>
	for(;;)
	{
		CO2_taskRun();
     47e:	c3 df       	rcall	.-122    	; 0x406 <CO2_taskRun>
     480:	fe cf       	rjmp	.-4      	; 0x47e <CO2_Sensor_Task+0x8>

00000482 <Configuration_create>:
}
ConfigurationReturnCode Configuration_destroy(Configuration_t self)
{
	vPortFree(self);
	return GOOD;
}
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	c5 d7       	rcall	.+3978   	; 0x1410 <xQueueCreateMutex>
     486:	90 93 fc 18 	sts	0x18FC, r25	; 0x8018fc <mutex+0x1>
     48a:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <mutex>
     48e:	88 e0       	ldi	r24, 0x08	; 8
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	4e d3       	rcall	.+1692   	; 0xb30 <pvPortMalloc>
     494:	fc 01       	movw	r30, r24
     496:	90 93 fa 18 	sts	0x18FA, r25	; 0x8018fa <conf+0x1>
     49a:	80 93 f9 18 	sts	0x18F9, r24	; 0x8018f9 <conf>
     49e:	89 2b       	or	r24, r25
     4a0:	69 f0       	breq	.+26     	; 0x4bc <Configuration_create+0x3a>
     4a2:	17 82       	std	Z+7, r1	; 0x07
     4a4:	16 82       	std	Z+6, r1	; 0x06
     4a6:	13 82       	std	Z+3, r1	; 0x03
     4a8:	12 82       	std	Z+2, r1	; 0x02
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	14 82       	std	Z+4, r1	; 0x04
     4ae:	11 82       	std	Z+1, r1	; 0x01
     4b0:	10 82       	st	Z, r1
     4b2:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <conf>
     4b6:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <conf+0x1>
     4ba:	08 95       	ret
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <Configuration_SetMinTemperature>:


void Configuration_SetMinTemperature(int16_t temperature_data)
{
     4c2:	0f 93       	push	r16
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     4ca:	4c e0       	ldi	r20, 0x0C	; 12
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     4d6:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     4da:	0e 94 de 0a 	call	0x15bc	; 0x15bc <xQueueSemaphoreTake>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	19 f5       	brne	.+70     	; 0x528 <Configuration_SetMinTemperature+0x66>
	{
		conf->min_temperature_data=temperature_data;
     4e2:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <conf>
     4e6:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <conf+0x1>
     4ea:	d1 83       	std	Z+1, r29	; 0x01
     4ec:	c0 83       	st	Z, r28
		printf("CONFIGURATION MIN TEMP-->%i",conf->min_temperature_data);
     4ee:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <conf>
     4f2:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <conf+0x1>
     4f6:	81 81       	ldd	r24, Z+1	; 0x01
     4f8:	8f 93       	push	r24
     4fa:	80 81       	ld	r24, Z
     4fc:	8f 93       	push	r24
     4fe:	88 ee       	ldi	r24, 0xE8	; 232
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
		xSemaphoreGive(mutex);
     50a:	00 e0       	ldi	r16, 0x00	; 0
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	a9 01       	movw	r20, r18
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     51a:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     51e:	d4 d6       	rcall	.+3496   	; 0x12c8 <xQueueGenericSend>
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
	}
	
	puts("HAHA");
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	93 e0       	ldi	r25, 0x03	; 3
     52c:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	0f 91       	pop	r16
     536:	08 95       	ret

00000538 <Configuration_SetMaxTemperature>:
void Configuration_SetMaxTemperature(int16_t temperature_data)
{
     538:	0f 93       	push	r16
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     540:	4c e0       	ldi	r20, 0x0C	; 12
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     54c:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     550:	0e 94 de 0a 	call	0x15bc	; 0x15bc <xQueueSemaphoreTake>
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	89 f4       	brne	.+34     	; 0x57a <Configuration_SetMaxTemperature+0x42>
	{
		conf->max_temperature_data=temperature_data;
     558:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <conf>
     55c:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <conf+0x1>
     560:	d3 83       	std	Z+3, r29	; 0x03
     562:	c2 83       	std	Z+2, r28	; 0x02
		//printf("CONFIGURATION MAX TEMP-->%i",conf->max_temperature_data);
		xSemaphoreGive(mutex);
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     574:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     578:	a7 d6       	rcall	.+3406   	; 0x12c8 <xQueueGenericSend>
	}
	
	puts("HAHA1");
     57a:	89 e0       	ldi	r24, 0x09	; 9
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>

}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <Configuration_SetMinHumidity>:
void Configuration_SetMinHumidity(uint16_t humidity_data)
{
     58a:	0f 93       	push	r16
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     592:	4c e0       	ldi	r20, 0x0C	; 12
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     59e:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     5a2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <xQueueSemaphoreTake>
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	89 f4       	brne	.+34     	; 0x5cc <Configuration_SetMinHumidity+0x42>
	{
	conf->min_humidity_data=humidity_data;
     5aa:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <conf>
     5ae:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <conf+0x1>
     5b2:	d5 83       	std	Z+5, r29	; 0x05
     5b4:	c4 83       	std	Z+4, r28	; 0x04
	//printf("CONFIGURATION MIN HUM-->%i",conf->min_humidity_data);
		xSemaphoreGive(mutex);
     5b6:	00 e0       	ldi	r16, 0x00	; 0
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     5c6:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     5ca:	7e d6       	rcall	.+3324   	; 0x12c8 <xQueueGenericSend>
	}

puts("HAHA2");
     5cc:	8f e0       	ldi	r24, 0x0F	; 15
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>

}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <Configuration_SetMaxHumidity>:


void Configuration_SetMaxHumidity(uint16_t humidity_data)
{
     5dc:	0f 93       	push	r16
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     5e4:	4c e0       	ldi	r20, 0x0C	; 12
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     5f0:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     5f4:	e3 d7       	rcall	.+4038   	; 0x15bc <xQueueSemaphoreTake>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	89 f4       	brne	.+34     	; 0x61c <Configuration_SetMaxHumidity+0x40>
	{

	conf->max_humidity_data=humidity_data;
     5fa:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <conf>
     5fe:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <conf+0x1>
     602:	d7 83       	std	Z+7, r29	; 0x07
     604:	c6 83       	std	Z+6, r28	; 0x06
	//printf("CONFIGURATION MAX HUM-->%i",conf->max_humidity_data);
	xSemaphoreGive(mutex);
     606:	00 e0       	ldi	r16, 0x00	; 0
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	a9 01       	movw	r20, r18
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <mutex>
     616:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <mutex+0x1>
     61a:	56 d6       	rcall	.+3244   	; 0x12c8 <xQueueGenericSend>
	}

puts("HAHA3");
     61c:	85 e1       	ldi	r24, 0x15	; 21
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task();
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority)
{
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
	xTaskCreate(
     632:	20 91 d0 18 	lds	r18, 0x18D0	; 0x8018d0 <downlinkMessageBuffer>
     636:	30 91 d1 18 	lds	r19, 0x18D1	; 0x8018d1 <downlinkMessageBuffer+0x1>
     63a:	e1 2c       	mov	r14, r1
     63c:	f1 2c       	mov	r15, r1
     63e:	08 2f       	mov	r16, r24
     640:	48 e8       	ldi	r20, 0x88	; 136
     642:	51 e0       	ldi	r21, 0x01	; 1
     644:	6d e2       	ldi	r22, 0x2D	; 45
     646:	73 e0       	ldi	r23, 0x03	; 3
     648:	81 ec       	ldi	r24, 0xC1	; 193
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
	"LoraWanDownlink",
	configMINIMAL_STACK_SIZE+200,
	(void*)downlinkMessageBuffer,
	priority,
	NULL );
}
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	08 95       	ret

00000658 <lora_DownLinkHandler_task>:

void lora_DownLinkHandler_task()
{     
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
	size_t xReceivedBytes;
	
	xReceivedBytes=xMessageBufferReceive(
     66c:	0f ef       	ldi	r16, 0xFF	; 255
     66e:	1f ef       	ldi	r17, 0xFF	; 255
     670:	98 01       	movw	r18, r16
     672:	46 e1       	ldi	r20, 0x16	; 22
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	64 eb       	ldi	r22, 0xB4	; 180
     678:	78 e0       	ldi	r23, 0x08	; 8
     67a:	80 91 d0 18 	lds	r24, 0x18D0	; 0x8018d0 <downlinkMessageBuffer>
     67e:	90 91 d1 18 	lds	r25, 0x18D1	; 0x8018d1 <downlinkMessageBuffer+0x1>
     682:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xStreamBufferReceive>
	(void*)&_downlink_payload,
	sizeof(lora_driver_payload_t),
	portMAX_DELAY);
	
	
	if (xReceivedBytes>0)
     686:	89 2b       	or	r24, r25
     688:	09 f4       	brne	.+2      	; 0x68c <lora_DownLinkHandler_task+0x34>
     68a:	70 c0       	rjmp	.+224    	; 0x76c <lora_DownLinkHandler_task+0x114>
	{	
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len);
     68c:	c4 eb       	ldi	r28, 0xB4	; 180
     68e:	d8 e0       	ldi	r29, 0x08	; 8
     690:	99 81       	ldd	r25, Y+1	; 0x01
     692:	88 81       	ld	r24, Y
     694:	1f 92       	push	r1
     696:	9f 93       	push	r25
     698:	1f 92       	push	r1
     69a:	8f 93       	push	r24
     69c:	8d e3       	ldi	r24, 0x3D	; 61
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
		
			if (8==_downlink_payload.len )
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	88 30       	cpi	r24, 0x08	; 8
     6b8:	09 f0       	breq	.+2      	; 0x6bc <lora_DownLinkHandler_task+0x64>
     6ba:	52 c0       	rjmp	.+164    	; 0x760 <lora_DownLinkHandler_task+0x108>
			{
				
				uint16_t minHumidity = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     6bc:	5e 01       	movw	r10, r28
     6be:	0a 81       	ldd	r16, Y+2	; 0x02
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	10 2f       	mov	r17, r16
     6c4:	00 27       	eor	r16, r16
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	08 0f       	add	r16, r24
     6ca:	11 1d       	adc	r17, r1
				printf("MINHumidity %d", minHumidity);
     6cc:	1f 93       	push	r17
     6ce:	0f 93       	push	r16
     6d0:	8f e6       	ldi	r24, 0x6F	; 111
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
				
				uint16_t minTemperature = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     6dc:	cc 80       	ldd	r12, Y+4	; 0x04
     6de:	d1 2c       	mov	r13, r1
     6e0:	dc 2c       	mov	r13, r12
     6e2:	cc 24       	eor	r12, r12
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	c8 0e       	add	r12, r24
     6e8:	d1 1c       	adc	r13, r1
				printf("MINTemperature %d", minTemperature);
     6ea:	df 92       	push	r13
     6ec:	cf 92       	push	r12
     6ee:	8e e7       	ldi	r24, 0x7E	; 126
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
				
				uint16_t maxHumidity = (_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
     6fa:	fe 01       	movw	r30, r28
     6fc:	ce 81       	ldd	r28, Y+6	; 0x06
     6fe:	d0 e0       	ldi	r29, 0x00	; 0
     700:	dc 2f       	mov	r29, r28
     702:	cc 27       	eor	r28, r28
     704:	87 81       	ldd	r24, Z+7	; 0x07
     706:	c8 0f       	add	r28, r24
     708:	d1 1d       	adc	r29, r1
				printf("MAXHumidity %d", maxHumidity);
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	80 e9       	ldi	r24, 0x90	; 144
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
				
				uint16_t maxTemperature = (_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
     71a:	f5 01       	movw	r30, r10
     71c:	e0 84       	ldd	r14, Z+8	; 0x08
     71e:	f1 2c       	mov	r15, r1
     720:	fe 2c       	mov	r15, r14
     722:	ee 24       	eor	r14, r14
     724:	81 85       	ldd	r24, Z+9	; 0x09
     726:	e8 0e       	add	r14, r24
     728:	f1 1c       	adc	r15, r1
				printf("MAXTemperature %d", maxTemperature);
     72a:	ff 92       	push	r15
     72c:	ef 92       	push	r14
     72e:	8f e9       	ldi	r24, 0x9F	; 159
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
				
				Configuration_SetMinTemperature(minTemperature);
     73a:	c6 01       	movw	r24, r12
     73c:	c2 de       	rcall	.-636    	; 0x4c2 <Configuration_SetMinTemperature>
				Configuration_SetMinHumidity(minHumidity);
     73e:	80 2f       	mov	r24, r16
     740:	91 2f       	mov	r25, r17
     742:	23 df       	rcall	.-442    	; 0x58a <Configuration_SetMinHumidity>
				Configuration_SetMaxTemperature(maxTemperature);
     744:	c7 01       	movw	r24, r14
     746:	f8 de       	rcall	.-528    	; 0x538 <Configuration_SetMaxTemperature>
				Configuration_SetMaxHumidity(maxHumidity);
     748:	8c 2f       	mov	r24, r28
     74a:	9d 2f       	mov	r25, r29
     74c:	47 df       	rcall	.-370    	; 0x5dc <Configuration_SetMaxHumidity>
     74e:	8d b7       	in	r24, 0x3d	; 61
     750:	9e b7       	in	r25, 0x3e	; 62
     752:	40 96       	adiw	r24, 0x10	; 16
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	9e bf       	out	0x3e, r25	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	8d bf       	out	0x3d, r24	; 61
     75e:	06 c0       	rjmp	.+12     	; 0x76c <lora_DownLinkHandler_task+0x114>
     760:	64 e5       	ldi	r22, 0x54	; 84
			}
			else
			{
				// Retry in 2.5 minutes
				vTaskDelay(pdMS_TO_TICKS(150000)); 			}
     762:	74 e2       	ldi	r23, 0x24	; 36
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
     76c:	df 91       	pop	r29
			
		
	}
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	08 95       	ret

00000782 <lora_DownLinkHandler_startTask>:
     782:	6a df       	rcall	.-300    	; 0x658 <lora_DownLinkHandler_task>

void lora_DownLinkHandler_startTask(){
	
	for(;;)
	{
		lora_DownLinkHandler_task();
     784:	fe cf       	rjmp	.-4      	; 0x782 <lora_DownLinkHandler_startTask>

00000786 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     786:	0f 93       	push	r16
     788:	01 11       	cpse	r16, r1
     78a:	0c c0       	rjmp	.+24     	; 0x7a4 <prvTestWaitCondition+0x1e>
     78c:	dc 01       	movw	r26, r24
     78e:	cb 01       	movw	r24, r22
     790:	82 23       	and	r24, r18
     792:	93 23       	and	r25, r19
     794:	a4 23       	and	r26, r20
     796:	b5 23       	and	r27, r21
     798:	89 2b       	or	r24, r25
     79a:	8a 2b       	or	r24, r26
     79c:	8b 2b       	or	r24, r27
     79e:	79 f4       	brne	.+30     	; 0x7be <prvTestWaitCondition+0x38>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	10 c0       	rjmp	.+32     	; 0x7c4 <prvTestWaitCondition+0x3e>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	82 23       	and	r24, r18
     7aa:	93 23       	and	r25, r19
     7ac:	a4 23       	and	r26, r20
     7ae:	b5 23       	and	r27, r21
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	4a 07       	cpc	r20, r26
     7b6:	5b 07       	cpc	r21, r27
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <prvTestWaitCondition+0x3c>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <prvTestWaitCondition+0x3e>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <prvTestWaitCondition+0x3e>
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <xEventGroupCreate>:
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	8f e0       	ldi	r24, 0x0F	; 15
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	af d1       	rcall	.+862    	; 0xb30 <pvPortMalloc>
     7d2:	ec 01       	movw	r28, r24
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <xEventGroupCreate+0x1e>
     7d8:	fc 01       	movw	r30, r24
     7da:	11 92       	st	Z+, r1
     7dc:	11 92       	st	Z+, r1
     7de:	11 92       	st	Z+, r1
     7e0:	11 92       	st	Z+, r1
     7e2:	cf 01       	movw	r24, r30
     7e4:	8b d2       	rcall	.+1302   	; 0xcfc <vListInitialise>
     7e6:	ce 01       	movw	r24, r28
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <xEventGroupWaitBits>:
     7ee:	2f 92       	push	r2
     7f0:	3f 92       	push	r3
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	8f 92       	push	r8
     7fc:	9f 92       	push	r9
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
     814:	4a 01       	movw	r8, r20
     816:	5b 01       	movw	r10, r22
     818:	62 2e       	mov	r6, r18
     81a:	70 2e       	mov	r7, r16
     81c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSuspendAll>
     820:	28 80       	ld	r2, Y
     822:	39 80       	ldd	r3, Y+1	; 0x01
     824:	4a 80       	ldd	r4, Y+2	; 0x02
     826:	5b 80       	ldd	r5, Y+3	; 0x03
     828:	a5 01       	movw	r20, r10
     82a:	94 01       	movw	r18, r8
     82c:	c2 01       	movw	r24, r4
     82e:	b1 01       	movw	r22, r2
     830:	aa df       	rcall	.-172    	; 0x786 <prvTestWaitCondition>
     832:	88 23       	and	r24, r24
     834:	a1 f0       	breq	.+40     	; 0x85e <xEventGroupWaitBits+0x70>
     836:	66 20       	and	r6, r6
     838:	89 f1       	breq	.+98     	; 0x89c <xEventGroupWaitBits+0xae>
     83a:	d5 01       	movw	r26, r10
     83c:	c4 01       	movw	r24, r8
     83e:	80 95       	com	r24
     840:	90 95       	com	r25
     842:	a0 95       	com	r26
     844:	b0 95       	com	r27
     846:	82 21       	and	r24, r2
     848:	93 21       	and	r25, r3
     84a:	a4 21       	and	r26, r4
     84c:	b5 21       	and	r27, r5
     84e:	88 83       	st	Y, r24
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	aa 83       	std	Y+2, r26	; 0x02
     854:	bb 83       	std	Y+3, r27	; 0x03
     856:	c1 2c       	mov	r12, r1
     858:	d1 2c       	mov	r13, r1
     85a:	76 01       	movw	r14, r12
     85c:	22 c0       	rjmp	.+68     	; 0x8a2 <xEventGroupWaitBits+0xb4>
     85e:	c1 14       	cp	r12, r1
     860:	d1 04       	cpc	r13, r1
     862:	e1 04       	cpc	r14, r1
     864:	f1 04       	cpc	r15, r1
     866:	e9 f0       	breq	.+58     	; 0x8a2 <xEventGroupWaitBits+0xb4>
     868:	61 10       	cpse	r6, r1
     86a:	04 c0       	rjmp	.+8      	; 0x874 <xEventGroupWaitBits+0x86>
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	ba 01       	movw	r22, r20
     872:	04 c0       	rjmp	.+8      	; 0x87c <xEventGroupWaitBits+0x8e>
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	71 10       	cpse	r7, r1
     87e:	74 60       	ori	r23, 0x04	; 4
     880:	48 29       	or	r20, r8
     882:	59 29       	or	r21, r9
     884:	6a 29       	or	r22, r10
     886:	7b 29       	or	r23, r11
     888:	97 01       	movw	r18, r14
     88a:	86 01       	movw	r16, r12
     88c:	ce 01       	movw	r24, r28
     88e:	04 96       	adiw	r24, 0x04	; 4
     890:	0e 94 90 14 	call	0x2920	; 0x2920 <vTaskPlaceOnUnorderedEventList>
     894:	21 2c       	mov	r2, r1
     896:	31 2c       	mov	r3, r1
     898:	21 01       	movw	r4, r2
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <xEventGroupWaitBits+0xb4>
     89c:	c1 2c       	mov	r12, r1
     89e:	d1 2c       	mov	r13, r1
     8a0:	76 01       	movw	r14, r12
     8a2:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
     8a6:	cd 28       	or	r12, r13
     8a8:	ce 28       	or	r12, r14
     8aa:	cf 28       	or	r12, r15
     8ac:	59 f1       	breq	.+86     	; 0x904 <xEventGroupWaitBits+0x116>
     8ae:	81 11       	cpse	r24, r1
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <xEventGroupWaitBits+0xc6>
     8b2:	f2 d2       	rcall	.+1508   	; 0xe98 <vPortYield>
     8b4:	0e 94 52 18 	call	0x30a4	; 0x30a4 <uxTaskResetEventItemValue>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	91 fd       	sbrc	r25, 1
     8be:	1f c0       	rjmp	.+62     	; 0x8fe <xEventGroupWaitBits+0x110>
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	0f 92       	push	r0
     8c6:	c8 80       	ld	r12, Y
     8c8:	d9 80       	ldd	r13, Y+1	; 0x01
     8ca:	ea 80       	ldd	r14, Y+2	; 0x02
     8cc:	fb 80       	ldd	r15, Y+3	; 0x03
     8ce:	07 2d       	mov	r16, r7
     8d0:	a5 01       	movw	r20, r10
     8d2:	94 01       	movw	r18, r8
     8d4:	c7 01       	movw	r24, r14
     8d6:	b6 01       	movw	r22, r12
     8d8:	56 df       	rcall	.-340    	; 0x786 <prvTestWaitCondition>
     8da:	88 23       	and	r24, r24
     8dc:	71 f0       	breq	.+28     	; 0x8fa <xEventGroupWaitBits+0x10c>
     8de:	66 20       	and	r6, r6
     8e0:	61 f0       	breq	.+24     	; 0x8fa <xEventGroupWaitBits+0x10c>
     8e2:	80 94       	com	r8
     8e4:	90 94       	com	r9
     8e6:	a0 94       	com	r10
     8e8:	b0 94       	com	r11
     8ea:	8c 20       	and	r8, r12
     8ec:	9d 20       	and	r9, r13
     8ee:	ae 20       	and	r10, r14
     8f0:	bf 20       	and	r11, r15
     8f2:	88 82       	st	Y, r8
     8f4:	99 82       	std	Y+1, r9	; 0x01
     8f6:	aa 82       	std	Y+2, r10	; 0x02
     8f8:	bb 82       	std	Y+3, r11	; 0x03
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	16 01       	movw	r2, r12
     900:	27 01       	movw	r4, r14
     902:	55 24       	eor	r5, r5
     904:	c2 01       	movw	r24, r4
     906:	b1 01       	movw	r22, r2
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	08 95       	ret

0000092e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     92e:	4f 92       	push	r4
     930:	5f 92       	push	r5
     932:	6f 92       	push	r6
     934:	7f 92       	push	r7
     936:	af 92       	push	r10
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	6a 01       	movw	r12, r20
     94e:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     950:	8c 01       	movw	r16, r24
     952:	09 5f       	subi	r16, 0xF9	; 249
     954:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     956:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     95a:	eb 85       	ldd	r30, Y+11	; 0x0b
     95c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     95e:	88 81       	ld	r24, Y
     960:	99 81       	ldd	r25, Y+1	; 0x01
     962:	aa 81       	ldd	r26, Y+2	; 0x02
     964:	bb 81       	ldd	r27, Y+3	; 0x03
     966:	c8 2a       	or	r12, r24
     968:	d9 2a       	or	r13, r25
     96a:	ea 2a       	or	r14, r26
     96c:	fb 2a       	or	r15, r27
     96e:	c8 82       	st	Y, r12
     970:	d9 82       	std	Y+1, r13	; 0x01
     972:	ea 82       	std	Y+2, r14	; 0x02
     974:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     976:	c1 2c       	mov	r12, r1
     978:	d1 2c       	mov	r13, r1
     97a:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     97c:	3d c0       	rjmp	.+122    	; 0x9f8 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     97e:	a4 80       	ldd	r10, Z+4	; 0x04
     980:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	a2 81       	ldd	r26, Z+2	; 0x02
     988:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     98a:	ac 01       	movw	r20, r24
     98c:	bd 01       	movw	r22, r26
     98e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     990:	b2 fd       	sbrc	r27, 2
     992:	0e c0       	rjmp	.+28     	; 0x9b0 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     994:	48 80       	ld	r4, Y
     996:	59 80       	ldd	r5, Y+1	; 0x01
     998:	6a 80       	ldd	r6, Y+2	; 0x02
     99a:	7b 80       	ldd	r7, Y+3	; 0x03
     99c:	44 22       	and	r4, r20
     99e:	55 22       	and	r5, r21
     9a0:	66 22       	and	r6, r22
     9a2:	77 22       	and	r7, r23
     9a4:	45 28       	or	r4, r5
     9a6:	46 28       	or	r4, r6
     9a8:	47 28       	or	r4, r7
     9aa:	89 f4       	brne	.+34     	; 0x9ce <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	12 c0       	rjmp	.+36     	; 0x9d4 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     9b0:	48 80       	ld	r4, Y
     9b2:	59 80       	ldd	r5, Y+1	; 0x01
     9b4:	6a 80       	ldd	r6, Y+2	; 0x02
     9b6:	7b 80       	ldd	r7, Y+3	; 0x03
     9b8:	44 22       	and	r4, r20
     9ba:	55 22       	and	r5, r21
     9bc:	66 22       	and	r6, r22
     9be:	77 22       	and	r7, r23
     9c0:	44 15       	cp	r20, r4
     9c2:	55 05       	cpc	r21, r5
     9c4:	66 05       	cpc	r22, r6
     9c6:	77 05       	cpc	r23, r7
     9c8:	21 f0       	breq	.+8      	; 0x9d2 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     9d2:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     9d4:	22 23       	and	r18, r18
     9d6:	71 f0       	breq	.+28     	; 0x9f4 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     9d8:	b0 ff       	sbrs	r27, 0
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     9dc:	c4 2a       	or	r12, r20
     9de:	d5 2a       	or	r13, r21
     9e0:	e6 2a       	or	r14, r22
     9e2:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     9e4:	48 81       	ld	r20, Y
     9e6:	59 81       	ldd	r21, Y+1	; 0x01
     9e8:	6a 81       	ldd	r22, Y+2	; 0x02
     9ea:	7b 81       	ldd	r23, Y+3	; 0x03
     9ec:	72 60       	ori	r23, 0x02	; 2
     9ee:	cf 01       	movw	r24, r30
     9f0:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     9f4:	ea 2d       	mov	r30, r10
     9f6:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     9f8:	e0 17       	cp	r30, r16
     9fa:	f1 07       	cpc	r31, r17
     9fc:	09 f0       	breq	.+2      	; 0xa00 <xEventGroupSetBits+0xd2>
     9fe:	bf cf       	rjmp	.-130    	; 0x97e <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     a00:	c0 94       	com	r12
     a02:	d0 94       	com	r13
     a04:	e0 94       	com	r14
     a06:	f0 94       	com	r15
     a08:	88 81       	ld	r24, Y
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	aa 81       	ldd	r26, Y+2	; 0x02
     a0e:	bb 81       	ldd	r27, Y+3	; 0x03
     a10:	c8 22       	and	r12, r24
     a12:	d9 22       	and	r13, r25
     a14:	ea 22       	and	r14, r26
     a16:	fb 22       	and	r15, r27
     a18:	c8 82       	st	Y, r12
     a1a:	d9 82       	std	Y+1, r13	; 0x01
     a1c:	ea 82       	std	Y+2, r14	; 0x02
     a1e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     a20:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     a24:	68 81       	ld	r22, Y
     a26:	79 81       	ldd	r23, Y+1	; 0x01
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	7f 90       	pop	r7
     a42:	6f 90       	pop	r6
     a44:	5f 90       	pop	r5
     a46:	4f 90       	pop	r4
     a48:	08 95       	ret

00000a4a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     a4a:	e6 ed       	ldi	r30, 0xD6	; 214
     a4c:	f8 e0       	ldi	r31, 0x08	; 8
     a4e:	aa ed       	ldi	r26, 0xDA	; 218
     a50:	b8 e0       	ldi	r27, 0x08	; 8
     a52:	b1 83       	std	Z+1, r27	; 0x01
     a54:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     a56:	13 82       	std	Z+3, r1	; 0x03
     a58:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     a5a:	e2 e8       	ldi	r30, 0x82	; 130
     a5c:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     a5e:	f0 93 d5 08 	sts	0x08D5, r31	; 0x8008d5 <pxEnd+0x1>
     a62:	e0 93 d4 08 	sts	0x08D4, r30	; 0x8008d4 <pxEnd>
    pxEnd->xBlockSize = 0;
     a66:	13 82       	std	Z+3, r1	; 0x03
     a68:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     a6a:	11 82       	std	Z+1, r1	; 0x01
     a6c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     a6e:	88 ea       	ldi	r24, 0xA8	; 168
     a70:	9d e0       	ldi	r25, 0x0D	; 13
     a72:	13 96       	adiw	r26, 0x03	; 3
     a74:	9c 93       	st	X, r25
     a76:	8e 93       	st	-X, r24
     a78:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     a7a:	ed 93       	st	X+, r30
     a7c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a7e:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <xMinimumEverFreeBytesRemaining+0x1>
     a82:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a86:	90 93 d3 08 	sts	0x08D3, r25	; 0x8008d3 <xFreeBytesRemaining+0x1>
     a8a:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e8       	ldi	r25, 0x80	; 128
     a92:	90 93 cb 08 	sts	0x08CB, r25	; 0x8008cb <xBlockAllocatedBit+0x1>
     a96:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <xBlockAllocatedBit>
     a9a:	08 95       	ret

00000a9c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     aa2:	a6 ed       	ldi	r26, 0xD6	; 214
     aa4:	b8 e0       	ldi	r27, 0x08	; 8
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <prvInsertBlockIntoFreeList+0xe>
     aa8:	df 01       	movw	r26, r30
     aaa:	ed 91       	ld	r30, X+
     aac:	fc 91       	ld	r31, X
     aae:	11 97       	sbiw	r26, 0x01	; 1
     ab0:	ec 17       	cp	r30, r28
     ab2:	fd 07       	cpc	r31, r29
     ab4:	c8 f3       	brcs	.-14     	; 0xaa8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     ab6:	12 96       	adiw	r26, 0x02	; 2
     ab8:	8d 91       	ld	r24, X+
     aba:	9c 91       	ld	r25, X
     abc:	13 97       	sbiw	r26, 0x03	; 3
     abe:	9d 01       	movw	r18, r26
     ac0:	28 0f       	add	r18, r24
     ac2:	39 1f       	adc	r19, r25
     ac4:	c2 17       	cp	r28, r18
     ac6:	d3 07       	cpc	r29, r19
     ac8:	49 f4       	brne	.+18     	; 0xadc <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     aca:	2a 81       	ldd	r18, Y+2	; 0x02
     acc:	3b 81       	ldd	r19, Y+3	; 0x03
     ace:	82 0f       	add	r24, r18
     ad0:	93 1f       	adc	r25, r19
     ad2:	13 96       	adiw	r26, 0x03	; 3
     ad4:	9c 93       	st	X, r25
     ad6:	8e 93       	st	-X, r24
     ad8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     ada:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	9b 81       	ldd	r25, Y+3	; 0x03
     ae0:	9e 01       	movw	r18, r28
     ae2:	28 0f       	add	r18, r24
     ae4:	39 1f       	adc	r19, r25
     ae6:	e2 17       	cp	r30, r18
     ae8:	f3 07       	cpc	r31, r19
     aea:	c1 f4       	brne	.+48     	; 0xb1c <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     aec:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <pxEnd>
     af0:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <pxEnd+0x1>
     af4:	e2 17       	cp	r30, r18
     af6:	f3 07       	cpc	r31, r19
     af8:	71 f0       	breq	.+28     	; 0xb16 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     afa:	22 81       	ldd	r18, Z+2	; 0x02
     afc:	33 81       	ldd	r19, Z+3	; 0x03
     afe:	82 0f       	add	r24, r18
     b00:	93 1f       	adc	r25, r19
     b02:	9b 83       	std	Y+3, r25	; 0x03
     b04:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     b06:	ed 91       	ld	r30, X+
     b08:	fc 91       	ld	r31, X
     b0a:	11 97       	sbiw	r26, 0x01	; 1
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	99 83       	std	Y+1, r25	; 0x01
     b12:	88 83       	st	Y, r24
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     b16:	39 83       	std	Y+1, r19	; 0x01
     b18:	28 83       	st	Y, r18
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     b1c:	f9 83       	std	Y+1, r31	; 0x01
     b1e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     b20:	ca 17       	cp	r28, r26
     b22:	db 07       	cpc	r29, r27
     b24:	11 f0       	breq	.+4      	; 0xb2a <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     b26:	cd 93       	st	X+, r28
     b28:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     b3e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     b42:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxEnd>
     b46:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxEnd+0x1>
     b4a:	89 2b       	or	r24, r25
     b4c:	09 f4       	brne	.+2      	; 0xb50 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     b4e:	7d df       	rcall	.-262    	; 0xa4a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     b50:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xBlockAllocatedBit>
     b54:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xBlockAllocatedBit+0x1>
     b58:	80 23       	and	r24, r16
     b5a:	91 23       	and	r25, r17
     b5c:	89 2b       	or	r24, r25
     b5e:	09 f0       	breq	.+2      	; 0xb62 <pvPortMalloc+0x32>
     b60:	76 c0       	rjmp	.+236    	; 0xc4e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     b62:	01 15       	cp	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	49 f0       	breq	.+18     	; 0xb7a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     b68:	c8 01       	movw	r24, r16
     b6a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     b6c:	08 17       	cp	r16, r24
     b6e:	19 07       	cpc	r17, r25
     b70:	18 f0       	brcs	.+6      	; 0xb78 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     b78:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     b7a:	01 15       	cp	r16, r1
     b7c:	11 05       	cpc	r17, r1
     b7e:	09 f4       	brne	.+2      	; 0xb82 <pvPortMalloc+0x52>
     b80:	69 c0       	rjmp	.+210    	; 0xc54 <pvPortMalloc+0x124>
     b82:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <xFreeBytesRemaining>
     b86:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <xFreeBytesRemaining+0x1>
     b8a:	80 17       	cp	r24, r16
     b8c:	91 07       	cpc	r25, r17
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <pvPortMalloc+0x62>
     b90:	64 c0       	rjmp	.+200    	; 0xc5a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     b92:	c0 91 d6 08 	lds	r28, 0x08D6	; 0x8008d6 <xStart>
     b96:	d0 91 d7 08 	lds	r29, 0x08D7	; 0x8008d7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     b9a:	e6 ed       	ldi	r30, 0xD6	; 214
     b9c:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     ba0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     ba2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	9b 81       	ldd	r25, Y+3	; 0x03
     ba8:	80 17       	cp	r24, r16
     baa:	91 07       	cpc	r25, r17
     bac:	20 f4       	brcc	.+8      	; 0xbb6 <pvPortMalloc+0x86>
     bae:	88 81       	ld	r24, Y
     bb0:	99 81       	ldd	r25, Y+1	; 0x01
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	a9 f7       	brne	.-22     	; 0xba0 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     bb6:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxEnd>
     bba:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxEnd+0x1>
     bbe:	c8 17       	cp	r28, r24
     bc0:	d9 07       	cpc	r29, r25
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <pvPortMalloc+0x96>
     bc4:	4d c0       	rjmp	.+154    	; 0xc60 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     bc6:	e0 80       	ld	r14, Z
     bc8:	f1 80       	ldd	r15, Z+1	; 0x01
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	e8 0e       	add	r14, r24
     bce:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     bd0:	88 81       	ld	r24, Y
     bd2:	99 81       	ldd	r25, Y+1	; 0x01
     bd4:	91 83       	std	Z+1, r25	; 0x01
     bd6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     bd8:	2a 81       	ldd	r18, Y+2	; 0x02
     bda:	3b 81       	ldd	r19, Y+3	; 0x03
     bdc:	20 1b       	sub	r18, r16
     bde:	31 0b       	sbc	r19, r17
     be0:	29 30       	cpi	r18, 0x09	; 9
     be2:	31 05       	cpc	r19, r1
     be4:	48 f0       	brcs	.+18     	; 0xbf8 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     be6:	ce 01       	movw	r24, r28
     be8:	80 0f       	add	r24, r16
     bea:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     bec:	fc 01       	movw	r30, r24
     bee:	33 83       	std	Z+3, r19	; 0x03
     bf0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     bf2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     bf4:	0a 83       	std	Y+2, r16	; 0x02
     bf6:	52 df       	rcall	.-348    	; 0xa9c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     bf8:	2a 81       	ldd	r18, Y+2	; 0x02
     bfa:	3b 81       	ldd	r19, Y+3	; 0x03
     bfc:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <xFreeBytesRemaining>
     c00:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <xFreeBytesRemaining+0x1>
     c04:	82 1b       	sub	r24, r18
     c06:	93 0b       	sbc	r25, r19
     c08:	90 93 d3 08 	sts	0x08D3, r25	; 0x8008d3 <xFreeBytesRemaining+0x1>
     c0c:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     c10:	40 91 d0 08 	lds	r20, 0x08D0	; 0x8008d0 <xMinimumEverFreeBytesRemaining>
     c14:	50 91 d1 08 	lds	r21, 0x08D1	; 0x8008d1 <xMinimumEverFreeBytesRemaining+0x1>
     c18:	84 17       	cp	r24, r20
     c1a:	95 07       	cpc	r25, r21
     c1c:	20 f4       	brcc	.+8      	; 0xc26 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     c1e:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <xMinimumEverFreeBytesRemaining+0x1>
     c22:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     c26:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xBlockAllocatedBit>
     c2a:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xBlockAllocatedBit+0x1>
     c2e:	28 2b       	or	r18, r24
     c30:	39 2b       	or	r19, r25
     c32:	3b 83       	std	Y+3, r19	; 0x03
     c34:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     c3a:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <xNumberOfSuccessfulAllocations>
     c3e:	90 91 cf 08 	lds	r25, 0x08CF	; 0x8008cf <xNumberOfSuccessfulAllocations+0x1>
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	90 93 cf 08 	sts	0x08CF, r25	; 0x8008cf <xNumberOfSuccessfulAllocations+0x1>
     c48:	80 93 ce 08 	sts	0x08CE, r24	; 0x8008ce <xNumberOfSuccessfulAllocations>
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     c4e:	e1 2c       	mov	r14, r1
     c50:	f1 2c       	mov	r15, r1
     c52:	08 c0       	rjmp	.+16     	; 0xc64 <pvPortMalloc+0x134>
     c54:	e1 2c       	mov	r14, r1
     c56:	f1 2c       	mov	r15, r1
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <pvPortMalloc+0x134>
     c5a:	e1 2c       	mov	r14, r1
     c5c:	f1 2c       	mov	r15, r1
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <pvPortMalloc+0x134>
     c60:	e1 2c       	mov	r14, r1
     c62:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     c64:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     c68:	e1 14       	cp	r14, r1
     c6a:	f1 04       	cpc	r15, r1
     c6c:	11 f4       	brne	.+4      	; 0xc72 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     c6e:	0e 94 75 1e 	call	0x3cea	; 0x3cea <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     c72:	c7 01       	movw	r24, r14
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	91 f1       	breq	.+100    	; 0xcf2 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     c8e:	ec 01       	movw	r28, r24
     c90:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     c92:	4a 81       	ldd	r20, Y+2	; 0x02
     c94:	5b 81       	ldd	r21, Y+3	; 0x03
     c96:	20 91 ca 08 	lds	r18, 0x08CA	; 0x8008ca <xBlockAllocatedBit>
     c9a:	30 91 cb 08 	lds	r19, 0x08CB	; 0x8008cb <xBlockAllocatedBit+0x1>
     c9e:	ba 01       	movw	r22, r20
     ca0:	62 23       	and	r22, r18
     ca2:	73 23       	and	r23, r19
     ca4:	67 2b       	or	r22, r23
     ca6:	29 f1       	breq	.+74     	; 0xcf2 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     ca8:	68 81       	ld	r22, Y
     caa:	79 81       	ldd	r23, Y+1	; 0x01
     cac:	67 2b       	or	r22, r23
     cae:	09 f5       	brne	.+66     	; 0xcf2 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     cb0:	20 95       	com	r18
     cb2:	30 95       	com	r19
     cb4:	24 23       	and	r18, r20
     cb6:	35 23       	and	r19, r21
     cb8:	3b 83       	std	Y+3, r19	; 0x03
     cba:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     cbc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <xFreeBytesRemaining>
     cc8:	30 91 d3 08 	lds	r19, 0x08D3	; 0x8008d3 <xFreeBytesRemaining+0x1>
     ccc:	82 0f       	add	r24, r18
     cce:	93 1f       	adc	r25, r19
     cd0:	90 93 d3 08 	sts	0x08D3, r25	; 0x8008d3 <xFreeBytesRemaining+0x1>
     cd4:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     cd8:	ce 01       	movw	r24, r28
     cda:	e0 de       	rcall	.-576    	; 0xa9c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     cdc:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <xNumberOfSuccessfulFrees>
     ce0:	90 91 cd 08 	lds	r25, 0x08CD	; 0x8008cd <xNumberOfSuccessfulFrees+0x1>
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	90 93 cd 08 	sts	0x08CD, r25	; 0x8008cd <xNumberOfSuccessfulFrees+0x1>
     cea:	80 93 cc 08 	sts	0x08CC, r24	; 0x8008cc <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     cee:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     cfc:	fc 01       	movw	r30, r24
     cfe:	03 96       	adiw	r24, 0x03	; 3
     d00:	92 83       	std	Z+2, r25	; 0x02
     d02:	81 83       	std	Z+1, r24	; 0x01
     d04:	4f ef       	ldi	r20, 0xFF	; 255
     d06:	5f ef       	ldi	r21, 0xFF	; 255
     d08:	ba 01       	movw	r22, r20
     d0a:	43 83       	std	Z+3, r20	; 0x03
     d0c:	54 83       	std	Z+4, r21	; 0x04
     d0e:	65 83       	std	Z+5, r22	; 0x05
     d10:	76 83       	std	Z+6, r23	; 0x06
     d12:	90 87       	std	Z+8, r25	; 0x08
     d14:	87 83       	std	Z+7, r24	; 0x07
     d16:	92 87       	std	Z+10, r25	; 0x0a
     d18:	81 87       	std	Z+9, r24	; 0x09
     d1a:	10 82       	st	Z, r1
     d1c:	08 95       	ret

00000d1e <vListInitialiseItem>:
     d1e:	fc 01       	movw	r30, r24
     d20:	13 86       	std	Z+11, r1	; 0x0b
     d22:	12 86       	std	Z+10, r1	; 0x0a
     d24:	08 95       	ret

00000d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d30:	08 81       	ld	r16, Y
     d32:	19 81       	ldd	r17, Y+1	; 0x01
     d34:	2a 81       	ldd	r18, Y+2	; 0x02
     d36:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     d38:	0f 3f       	cpi	r16, 0xFF	; 255
     d3a:	4f ef       	ldi	r20, 0xFF	; 255
     d3c:	14 07       	cpc	r17, r20
     d3e:	24 07       	cpc	r18, r20
     d40:	34 07       	cpc	r19, r20
     d42:	21 f4       	brne	.+8      	; 0xd4c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     d44:	fc 01       	movw	r30, r24
     d46:	a1 85       	ldd	r26, Z+9	; 0x09
     d48:	b2 85       	ldd	r27, Z+10	; 0x0a
     d4a:	11 c0       	rjmp	.+34     	; 0xd6e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     d4c:	dc 01       	movw	r26, r24
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <vListInsert+0x2e>
     d52:	df 01       	movw	r26, r30
     d54:	14 96       	adiw	r26, 0x04	; 4
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	15 97       	sbiw	r26, 0x05	; 5
     d5c:	40 81       	ld	r20, Z
     d5e:	51 81       	ldd	r21, Z+1	; 0x01
     d60:	62 81       	ldd	r22, Z+2	; 0x02
     d62:	73 81       	ldd	r23, Z+3	; 0x03
     d64:	04 17       	cp	r16, r20
     d66:	15 07       	cpc	r17, r21
     d68:	26 07       	cpc	r18, r22
     d6a:	37 07       	cpc	r19, r23
     d6c:	90 f7       	brcc	.-28     	; 0xd52 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	ed 91       	ld	r30, X+
     d72:	fc 91       	ld	r31, X
     d74:	15 97       	sbiw	r26, 0x05	; 5
     d76:	fd 83       	std	Y+5, r31	; 0x05
     d78:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d7a:	d7 83       	std	Z+7, r29	; 0x07
     d7c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     d7e:	bf 83       	std	Y+7, r27	; 0x07
     d80:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     d82:	15 96       	adiw	r26, 0x05	; 5
     d84:	dc 93       	st	X, r29
     d86:	ce 93       	st	-X, r28
     d88:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d8a:	9b 87       	std	Y+11, r25	; 0x0b
     d8c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     d8e:	fc 01       	movw	r30, r24
     d90:	20 81       	ld	r18, Z
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	20 83       	st	Z, r18
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     da6:	a2 85       	ldd	r26, Z+10	; 0x0a
     da8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     daa:	c4 81       	ldd	r28, Z+4	; 0x04
     dac:	d5 81       	ldd	r29, Z+5	; 0x05
     dae:	86 81       	ldd	r24, Z+6	; 0x06
     db0:	97 81       	ldd	r25, Z+7	; 0x07
     db2:	9f 83       	std	Y+7, r25	; 0x07
     db4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     db6:	c6 81       	ldd	r28, Z+6	; 0x06
     db8:	d7 81       	ldd	r29, Z+7	; 0x07
     dba:	84 81       	ldd	r24, Z+4	; 0x04
     dbc:	95 81       	ldd	r25, Z+5	; 0x05
     dbe:	9d 83       	std	Y+5, r25	; 0x05
     dc0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	8d 91       	ld	r24, X+
     dc6:	9c 91       	ld	r25, X
     dc8:	12 97       	sbiw	r26, 0x02	; 2
     dca:	e8 17       	cp	r30, r24
     dcc:	f9 07       	cpc	r31, r25
     dce:	31 f4       	brne	.+12     	; 0xddc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     dd0:	86 81       	ldd	r24, Z+6	; 0x06
     dd2:	97 81       	ldd	r25, Z+7	; 0x07
     dd4:	12 96       	adiw	r26, 0x02	; 2
     dd6:	9c 93       	st	X, r25
     dd8:	8e 93       	st	-X, r24
     dda:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ddc:	13 86       	std	Z+11, r1	; 0x0b
     dde:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     de0:	8c 91       	ld	r24, X
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     de6:	8c 91       	ld	r24, X
}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     dee:	a8 95       	wdr
     df0:	90 ec       	ldi	r25, 0xC0	; 192
     df2:	88 e1       	ldi	r24, 0x18	; 24
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	a8 95       	wdr
     dfa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     e04:	08 95       	ret

00000e06 <pxPortInitialiseStack>:
     e06:	fc 01       	movw	r30, r24
     e08:	60 83       	st	Z, r22
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	70 83       	st	Z, r23
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	10 82       	st	Z, r1
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	10 82       	st	Z, r1
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	20 e8       	ldi	r18, 0x80	; 128
     e1a:	20 83       	st	Z, r18
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	10 82       	st	Z, r1
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	10 82       	st	Z, r1
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	10 82       	st	Z, r1
     e28:	77 97       	sbiw	r30, 0x17	; 23
     e2a:	40 83       	st	Z, r20
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	50 83       	st	Z, r21
     e30:	86 97       	sbiw	r24, 0x26	; 38
     e32:	08 95       	ret

00000e34 <xPortStartScheduler>:
     e34:	dc df       	rcall	.-72     	; 0xdee <prvSetupTimerInterrupt>
     e36:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
     e3a:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
     e3e:	cd 91       	ld	r28, X+
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	dd 91       	ld	r29, X+
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	7f 90       	pop	r7
     e78:	6f 90       	pop	r6
     e7a:	5f 90       	pop	r5
     e7c:	4f 90       	pop	r4
     e7e:	3f 90       	pop	r3
     e80:	2f 90       	pop	r2
     e82:	1f 90       	pop	r1
     e84:	0f 90       	pop	r0
     e86:	0c be       	out	0x3c, r0	; 60
     e88:	0f 90       	pop	r0
     e8a:	0b be       	out	0x3b, r0	; 59
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	08 95       	ret
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret

00000e98 <vPortYield>:
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	0f 92       	push	r0
     ea0:	0b b6       	in	r0, 0x3b	; 59
     ea2:	0f 92       	push	r0
     ea4:	0c b6       	in	r0, 0x3c	; 60
     ea6:	0f 92       	push	r0
     ea8:	1f 92       	push	r1
     eaa:	11 24       	eor	r1, r1
     eac:	2f 92       	push	r2
     eae:	3f 92       	push	r3
     eb0:	4f 92       	push	r4
     eb2:	5f 92       	push	r5
     eb4:	6f 92       	push	r6
     eb6:	7f 92       	push	r7
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	2f 93       	push	r18
     ece:	3f 93       	push	r19
     ed0:	4f 93       	push	r20
     ed2:	5f 93       	push	r21
     ed4:	6f 93       	push	r22
     ed6:	7f 93       	push	r23
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	af 93       	push	r26
     ede:	bf 93       	push	r27
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
     ee8:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
     eec:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
     ef0:	0d b6       	in	r0, 0x3d	; 61
     ef2:	0d 92       	st	X+, r0
     ef4:	0e b6       	in	r0, 0x3e	; 62
     ef6:	0d 92       	st	X+, r0
     ef8:	0e 94 14 14 	call	0x2828	; 0x2828 <vTaskSwitchContext>
     efc:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
     f00:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
     f04:	cd 91       	ld	r28, X+
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	dd 91       	ld	r29, X+
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	6f 90       	pop	r6
     f40:	5f 90       	pop	r5
     f42:	4f 90       	pop	r4
     f44:	3f 90       	pop	r3
     f46:	2f 90       	pop	r2
     f48:	1f 90       	pop	r1
     f4a:	0f 90       	pop	r0
     f4c:	0c be       	out	0x3c, r0	; 60
     f4e:	0f 90       	pop	r0
     f50:	0b be       	out	0x3b, r0	; 59
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	08 95       	ret

00000f5a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	0f 92       	push	r0
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	0c b6       	in	r0, 0x3c	; 60
     f68:	0f 92       	push	r0
     f6a:	1f 92       	push	r1
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 92       	push	r2
     f70:	3f 92       	push	r3
     f72:	4f 92       	push	r4
     f74:	5f 92       	push	r5
     f76:	6f 92       	push	r6
     f78:	7f 92       	push	r7
     f7a:	8f 92       	push	r8
     f7c:	9f 92       	push	r9
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
     faa:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
     fae:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
     fb2:	0d b6       	in	r0, 0x3d	; 61
     fb4:	0d 92       	st	X+, r0
     fb6:	0e b6       	in	r0, 0x3e	; 62
     fb8:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     fba:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     fbc:	0e 94 8c 11 	call	0x2318	; 0x2318 <xTaskIncrementTick>
     fc0:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     fc2:	0e 94 14 14 	call	0x2828	; 0x2828 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     fc6:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
     fca:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
     fce:	cd 91       	ld	r28, X+
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	dd 91       	ld	r29, X+
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	7f 90       	pop	r7
    1008:	6f 90       	pop	r6
    100a:	5f 90       	pop	r5
    100c:	4f 90       	pop	r4
    100e:	3f 90       	pop	r3
    1010:	2f 90       	pop	r2
    1012:	1f 90       	pop	r1
    1014:	0f 90       	pop	r0
    1016:	0c be       	out	0x3c, r0	; 60
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1022:	08 95       	ret

00001024 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1024:	9a df       	rcall	.-204    	; 0xf5a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1026:	18 95       	reti

00001028 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1028:	dc 01       	movw	r26, r24
    102a:	53 96       	adiw	r26, 0x13	; 19
    102c:	2c 91       	ld	r18, X
    102e:	53 97       	sbiw	r26, 0x13	; 19
    1030:	22 23       	and	r18, r18
    1032:	41 f0       	breq	.+16     	; 0x1044 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1034:	5a 96       	adiw	r26, 0x1a	; 26
    1036:	ed 91       	ld	r30, X+
    1038:	fc 91       	ld	r31, X
    103a:	5b 97       	sbiw	r26, 0x1b	; 27
    103c:	90 81       	ld	r25, Z
    103e:	8a e0       	ldi	r24, 0x0A	; 10
    1040:	89 1b       	sub	r24, r25
    1042:	08 95       	ret
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret

00001048 <prvIsQueueEmpty>:
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	0f 92       	push	r0
    104e:	fc 01       	movw	r30, r24
    1050:	86 8d       	ldd	r24, Z+30	; 0x1e
    1052:	81 11       	cpse	r24, r1
    1054:	02 c0       	rjmp	.+4      	; 0x105a <prvIsQueueEmpty+0x12>
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	01 c0       	rjmp	.+2      	; 0x105c <prvIsQueueEmpty+0x14>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	08 95       	ret

00001062 <prvIsQueueFull>:
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	0f 92       	push	r0
    1068:	fc 01       	movw	r30, r24
    106a:	26 8d       	ldd	r18, Z+30	; 0x1e
    106c:	87 8d       	ldd	r24, Z+31	; 0x1f
    106e:	28 13       	cpse	r18, r24
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <prvIsQueueFull+0x14>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <prvIsQueueFull+0x16>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	08 95       	ret

0000107e <prvCopyDataToQueue>:
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	ec 01       	movw	r28, r24
    1088:	04 2f       	mov	r16, r20
    108a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    108c:	48 a1       	ldd	r20, Y+32	; 0x20
    108e:	41 11       	cpse	r20, r1
    1090:	0c c0       	rjmp	.+24     	; 0x10aa <prvCopyDataToQueue+0x2c>
    1092:	88 81       	ld	r24, Y
    1094:	99 81       	ldd	r25, Y+1	; 0x01
    1096:	89 2b       	or	r24, r25
    1098:	09 f0       	breq	.+2      	; 0x109c <prvCopyDataToQueue+0x1e>
    109a:	42 c0       	rjmp	.+132    	; 0x1120 <prvCopyDataToQueue+0xa2>
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	9d 81       	ldd	r25, Y+5	; 0x05
    10a0:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskPriorityDisinherit>
    10a4:	1d 82       	std	Y+5, r1	; 0x05
    10a6:	1c 82       	std	Y+4, r1	; 0x04
    10a8:	42 c0       	rjmp	.+132    	; 0x112e <prvCopyDataToQueue+0xb0>
    10aa:	01 11       	cpse	r16, r1
    10ac:	17 c0       	rjmp	.+46     	; 0x10dc <prvCopyDataToQueue+0x5e>
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	0e 94 cf 31 	call	0x639e	; 0x639e <memcpy>
    10b8:	28 a1       	ldd	r18, Y+32	; 0x20
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	82 0f       	add	r24, r18
    10c0:	91 1d       	adc	r25, r1
    10c2:	9b 83       	std	Y+3, r25	; 0x03
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	2c 81       	ldd	r18, Y+4	; 0x04
    10c8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ca:	82 17       	cp	r24, r18
    10cc:	93 07       	cpc	r25, r19
    10ce:	50 f1       	brcs	.+84     	; 0x1124 <prvCopyDataToQueue+0xa6>
    10d0:	88 81       	ld	r24, Y
    10d2:	99 81       	ldd	r25, Y+1	; 0x01
    10d4:	9b 83       	std	Y+3, r25	; 0x03
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	29 c0       	rjmp	.+82     	; 0x112e <prvCopyDataToQueue+0xb0>
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	9f 81       	ldd	r25, Y+7	; 0x07
    10e2:	0e 94 cf 31 	call	0x639e	; 0x639e <memcpy>
    10e6:	88 a1       	ldd	r24, Y+32	; 0x20
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	91 95       	neg	r25
    10ec:	81 95       	neg	r24
    10ee:	91 09       	sbc	r25, r1
    10f0:	2e 81       	ldd	r18, Y+6	; 0x06
    10f2:	3f 81       	ldd	r19, Y+7	; 0x07
    10f4:	28 0f       	add	r18, r24
    10f6:	39 1f       	adc	r19, r25
    10f8:	3f 83       	std	Y+7, r19	; 0x07
    10fa:	2e 83       	std	Y+6, r18	; 0x06
    10fc:	48 81       	ld	r20, Y
    10fe:	59 81       	ldd	r21, Y+1	; 0x01
    1100:	24 17       	cp	r18, r20
    1102:	35 07       	cpc	r19, r21
    1104:	30 f4       	brcc	.+12     	; 0x1112 <prvCopyDataToQueue+0x94>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	9f 83       	std	Y+7, r25	; 0x07
    1110:	8e 83       	std	Y+6, r24	; 0x06
    1112:	02 30       	cpi	r16, 0x02	; 2
    1114:	49 f4       	brne	.+18     	; 0x1128 <prvCopyDataToQueue+0xaa>
    1116:	11 23       	and	r17, r17
    1118:	49 f0       	breq	.+18     	; 0x112c <prvCopyDataToQueue+0xae>
    111a:	11 50       	subi	r17, 0x01	; 1
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	07 c0       	rjmp	.+14     	; 0x112e <prvCopyDataToQueue+0xb0>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	05 c0       	rjmp	.+10     	; 0x112e <prvCopyDataToQueue+0xb0>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	03 c0       	rjmp	.+6      	; 0x112e <prvCopyDataToQueue+0xb0>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	01 c0       	rjmp	.+2      	; 0x112e <prvCopyDataToQueue+0xb0>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	1f 5f       	subi	r17, 0xFF	; 255
    1130:	1e 8f       	std	Y+30, r17	; 0x1e
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <prvCopyDataFromQueue>:
    113c:	fc 01       	movw	r30, r24
    113e:	40 a1       	ldd	r20, Z+32	; 0x20
    1140:	44 23       	and	r20, r20
    1142:	a9 f0       	breq	.+42     	; 0x116e <prvCopyDataFromQueue+0x32>
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	26 81       	ldd	r18, Z+6	; 0x06
    1148:	37 81       	ldd	r19, Z+7	; 0x07
    114a:	24 0f       	add	r18, r20
    114c:	35 1f       	adc	r19, r21
    114e:	37 83       	std	Z+7, r19	; 0x07
    1150:	26 83       	std	Z+6, r18	; 0x06
    1152:	84 81       	ldd	r24, Z+4	; 0x04
    1154:	95 81       	ldd	r25, Z+5	; 0x05
    1156:	28 17       	cp	r18, r24
    1158:	39 07       	cpc	r19, r25
    115a:	20 f0       	brcs	.+8      	; 0x1164 <prvCopyDataFromQueue+0x28>
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	97 83       	std	Z+7, r25	; 0x07
    1162:	86 83       	std	Z+6, r24	; 0x06
    1164:	cb 01       	movw	r24, r22
    1166:	66 81       	ldd	r22, Z+6	; 0x06
    1168:	77 81       	ldd	r23, Z+7	; 0x07
    116a:	0c 94 cf 31 	jmp	0x639e	; 0x639e <memcpy>
    116e:	08 95       	ret

00001170 <prvUnlockQueue>:
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	0f 92       	push	r0
    117e:	1a a1       	ldd	r17, Y+34	; 0x22
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <prvUnlockQueue+0x28>
    1182:	8b 89       	ldd	r24, Y+19	; 0x13
    1184:	88 23       	and	r24, r24
    1186:	51 f0       	breq	.+20     	; 0x119c <prvUnlockQueue+0x2c>
    1188:	ce 01       	movw	r24, r28
    118a:	43 96       	adiw	r24, 0x13	; 19
    118c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    1190:	81 11       	cpse	r24, r1
    1192:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <vTaskMissedYield>
    1196:	11 50       	subi	r17, 0x01	; 1
    1198:	11 16       	cp	r1, r17
    119a:	9c f3       	brlt	.-26     	; 0x1182 <prvUnlockQueue+0x12>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	8a a3       	std	Y+34, r24	; 0x22
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	0f 92       	push	r0
    11aa:	19 a1       	ldd	r17, Y+33	; 0x21
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <prvUnlockQueue+0x54>
    11ae:	88 85       	ldd	r24, Y+8	; 0x08
    11b0:	88 23       	and	r24, r24
    11b2:	51 f0       	breq	.+20     	; 0x11c8 <prvUnlockQueue+0x58>
    11b4:	ce 01       	movw	r24, r28
    11b6:	08 96       	adiw	r24, 0x08	; 8
    11b8:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    11bc:	81 11       	cpse	r24, r1
    11be:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <vTaskMissedYield>
    11c2:	11 50       	subi	r17, 0x01	; 1
    11c4:	11 16       	cp	r1, r17
    11c6:	9c f3       	brlt	.-26     	; 0x11ae <prvUnlockQueue+0x3e>
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	89 a3       	std	Y+33, r24	; 0x21
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	08 95       	ret

000011d8 <xQueueGenericReset>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	0f 92       	push	r0
    11e4:	e8 81       	ld	r30, Y
    11e6:	f9 81       	ldd	r31, Y+1	; 0x01
    11e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ea:	28 a1       	ldd	r18, Y+32	; 0x20
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	82 9f       	mul	r24, r18
    11f2:	a0 01       	movw	r20, r0
    11f4:	83 9f       	mul	r24, r19
    11f6:	50 0d       	add	r21, r0
    11f8:	92 9f       	mul	r25, r18
    11fa:	50 0d       	add	r21, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	4e 0f       	add	r20, r30
    1200:	5f 1f       	adc	r21, r31
    1202:	5d 83       	std	Y+5, r21	; 0x05
    1204:	4c 83       	std	Y+4, r20	; 0x04
    1206:	1e 8e       	std	Y+30, r1	; 0x1e
    1208:	fb 83       	std	Y+3, r31	; 0x03
    120a:	ea 83       	std	Y+2, r30	; 0x02
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	28 9f       	mul	r18, r24
    1210:	a0 01       	movw	r20, r0
    1212:	29 9f       	mul	r18, r25
    1214:	50 0d       	add	r21, r0
    1216:	38 9f       	mul	r19, r24
    1218:	50 0d       	add	r21, r0
    121a:	11 24       	eor	r1, r1
    121c:	cf 01       	movw	r24, r30
    121e:	84 0f       	add	r24, r20
    1220:	95 1f       	adc	r25, r21
    1222:	9f 83       	std	Y+7, r25	; 0x07
    1224:	8e 83       	std	Y+6, r24	; 0x06
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	89 a3       	std	Y+33, r24	; 0x21
    122a:	8a a3       	std	Y+34, r24	; 0x22
    122c:	61 11       	cpse	r22, r1
    122e:	0b c0       	rjmp	.+22     	; 0x1246 <xQueueGenericReset+0x6e>
    1230:	88 85       	ldd	r24, Y+8	; 0x08
    1232:	88 23       	and	r24, r24
    1234:	71 f0       	breq	.+28     	; 0x1252 <xQueueGenericReset+0x7a>
    1236:	ce 01       	movw	r24, r28
    1238:	08 96       	adiw	r24, 0x08	; 8
    123a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    123e:	88 23       	and	r24, r24
    1240:	41 f0       	breq	.+16     	; 0x1252 <xQueueGenericReset+0x7a>
    1242:	2a de       	rcall	.-940    	; 0xe98 <vPortYield>
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <xQueueGenericReset+0x7a>
    1246:	ce 01       	movw	r24, r28
    1248:	08 96       	adiw	r24, 0x08	; 8
    124a:	58 dd       	rcall	.-1360   	; 0xcfc <vListInitialise>
    124c:	ce 01       	movw	r24, r28
    124e:	43 96       	adiw	r24, 0x13	; 19
    1250:	55 dd       	rcall	.-1366   	; 0xcfc <vListInitialise>
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <prvInitialiseNewQueue>:
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	f8 01       	movw	r30, r16
    1264:	61 11       	cpse	r22, r1
    1266:	03 c0       	rjmp	.+6      	; 0x126e <prvInitialiseNewQueue+0x10>
    1268:	11 83       	std	Z+1, r17	; 0x01
    126a:	00 83       	st	Z, r16
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <prvInitialiseNewQueue+0x14>
    126e:	51 83       	std	Z+1, r21	; 0x01
    1270:	40 83       	st	Z, r20
    1272:	87 8f       	std	Z+31, r24	; 0x1f
    1274:	60 a3       	std	Z+32, r22	; 0x20
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	cf 01       	movw	r24, r30
    127a:	ae df       	rcall	.-164    	; 0x11d8 <xQueueGenericReset>
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <xQueueGenericCreate>:
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	f8 2e       	mov	r15, r24
    1292:	e6 2e       	mov	r14, r22
    1294:	d4 2e       	mov	r13, r20
    1296:	86 9f       	mul	r24, r22
    1298:	c0 01       	movw	r24, r0
    129a:	11 24       	eor	r1, r1
    129c:	83 96       	adiw	r24, 0x23	; 35
    129e:	48 dc       	rcall	.-1904   	; 0xb30 <pvPortMalloc>
    12a0:	ec 01       	movw	r28, r24
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	41 f0       	breq	.+16     	; 0x12b6 <xQueueGenericCreate+0x34>
    12a6:	8c 01       	movw	r16, r24
    12a8:	2d 2d       	mov	r18, r13
    12aa:	ac 01       	movw	r20, r24
    12ac:	4d 5d       	subi	r20, 0xDD	; 221
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	6e 2d       	mov	r22, r14
    12b2:	8f 2d       	mov	r24, r15
    12b4:	d4 df       	rcall	.-88     	; 0x125e <prvInitialiseNewQueue>
    12b6:	ce 01       	movw	r24, r28
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	08 95       	ret

000012c8 <xQueueGenericSend>:
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	29 97       	sbiw	r28, 0x09	; 9
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	7c 01       	movw	r14, r24
    12ea:	6b 01       	movw	r12, r22
    12ec:	2e 83       	std	Y+6, r18	; 0x06
    12ee:	3f 83       	std	Y+7, r19	; 0x07
    12f0:	48 87       	std	Y+8, r20	; 0x08
    12f2:	59 87       	std	Y+9, r21	; 0x09
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	0f 92       	push	r0
    12fc:	f7 01       	movw	r30, r14
    12fe:	96 8d       	ldd	r25, Z+30	; 0x1e
    1300:	87 8d       	ldd	r24, Z+31	; 0x1f
    1302:	98 17       	cp	r25, r24
    1304:	10 f0       	brcs	.+4      	; 0x130a <xQueueGenericSend+0x42>
    1306:	02 30       	cpi	r16, 0x02	; 2
    1308:	b1 f4       	brne	.+44     	; 0x1336 <xQueueGenericSend+0x6e>
    130a:	40 2f       	mov	r20, r16
    130c:	b6 01       	movw	r22, r12
    130e:	c7 01       	movw	r24, r14
    1310:	b6 de       	rcall	.-660    	; 0x107e <prvCopyDataToQueue>
    1312:	f7 01       	movw	r30, r14
    1314:	93 89       	ldd	r25, Z+19	; 0x13
    1316:	99 23       	and	r25, r25
    1318:	41 f0       	breq	.+16     	; 0x132a <xQueueGenericSend+0x62>
    131a:	c7 01       	movw	r24, r14
    131c:	43 96       	adiw	r24, 0x13	; 19
    131e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    1322:	88 23       	and	r24, r24
    1324:	21 f0       	breq	.+8      	; 0x132e <xQueueGenericSend+0x66>
    1326:	b8 dd       	rcall	.-1168   	; 0xe98 <vPortYield>
    1328:	02 c0       	rjmp	.+4      	; 0x132e <xQueueGenericSend+0x66>
    132a:	81 11       	cpse	r24, r1
    132c:	b5 dd       	rcall	.-1174   	; 0xe98 <vPortYield>
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	4c c0       	rjmp	.+152    	; 0x13ce <xQueueGenericSend+0x106>
    1336:	8e 81       	ldd	r24, Y+6	; 0x06
    1338:	9f 81       	ldd	r25, Y+7	; 0x07
    133a:	a8 85       	ldd	r26, Y+8	; 0x08
    133c:	b9 85       	ldd	r27, Y+9	; 0x09
    133e:	89 2b       	or	r24, r25
    1340:	8a 2b       	or	r24, r26
    1342:	8b 2b       	or	r24, r27
    1344:	21 f4       	brne	.+8      	; 0x134e <xQueueGenericSend+0x86>
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	40 c0       	rjmp	.+128    	; 0x13ce <xQueueGenericSend+0x106>
    134e:	11 11       	cpse	r17, r1
    1350:	05 c0       	rjmp	.+10     	; 0x135c <xQueueGenericSend+0x94>
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskInternalSetTimeOutState>
    135a:	11 e0       	ldi	r17, 0x01	; 1
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	c7 d7       	rcall	.+3982   	; 0x22f0 <vTaskSuspendAll>
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	0f 92       	push	r0
    1368:	f7 01       	movw	r30, r14
    136a:	81 a1       	ldd	r24, Z+33	; 0x21
    136c:	8f 3f       	cpi	r24, 0xFF	; 255
    136e:	09 f4       	brne	.+2      	; 0x1372 <xQueueGenericSend+0xaa>
    1370:	11 a2       	std	Z+33, r1	; 0x21
    1372:	f7 01       	movw	r30, r14
    1374:	82 a1       	ldd	r24, Z+34	; 0x22
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <xQueueGenericSend+0xb4>
    137a:	12 a2       	std	Z+34, r1	; 0x22
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	be 01       	movw	r22, r28
    1382:	6a 5f       	subi	r22, 0xFA	; 250
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <xTaskCheckForTimeOut>
    138e:	81 11       	cpse	r24, r1
    1390:	19 c0       	rjmp	.+50     	; 0x13c4 <xQueueGenericSend+0xfc>
    1392:	c7 01       	movw	r24, r14
    1394:	66 de       	rcall	.-820    	; 0x1062 <prvIsQueueFull>
    1396:	88 23       	and	r24, r24
    1398:	81 f0       	breq	.+32     	; 0x13ba <xQueueGenericSend+0xf2>
    139a:	4e 81       	ldd	r20, Y+6	; 0x06
    139c:	5f 81       	ldd	r21, Y+7	; 0x07
    139e:	68 85       	ldd	r22, Y+8	; 0x08
    13a0:	79 85       	ldd	r23, Y+9	; 0x09
    13a2:	c7 01       	movw	r24, r14
    13a4:	08 96       	adiw	r24, 0x08	; 8
    13a6:	0e 94 79 14 	call	0x28f2	; 0x28f2 <vTaskPlaceOnEventList>
    13aa:	c7 01       	movw	r24, r14
    13ac:	e1 de       	rcall	.-574    	; 0x1170 <prvUnlockQueue>
    13ae:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
    13b2:	81 11       	cpse	r24, r1
    13b4:	a0 cf       	rjmp	.-192    	; 0x12f6 <xQueueGenericSend+0x2e>
    13b6:	70 dd       	rcall	.-1312   	; 0xe98 <vPortYield>
    13b8:	9e cf       	rjmp	.-196    	; 0x12f6 <xQueueGenericSend+0x2e>
    13ba:	c7 01       	movw	r24, r14
    13bc:	d9 de       	rcall	.-590    	; 0x1170 <prvUnlockQueue>
    13be:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
    13c2:	99 cf       	rjmp	.-206    	; 0x12f6 <xQueueGenericSend+0x2e>
    13c4:	c7 01       	movw	r24, r14
    13c6:	d4 de       	rcall	.-600    	; 0x1170 <prvUnlockQueue>
    13c8:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	29 96       	adiw	r28, 0x09	; 9
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	08 95       	ret

000013ec <prvInitialiseMutex>:
    13ec:	0f 93       	push	r16
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	69 f0       	breq	.+26     	; 0x140c <prvInitialiseMutex+0x20>
    13f2:	fc 01       	movw	r30, r24
    13f4:	15 82       	std	Z+5, r1	; 0x05
    13f6:	14 82       	std	Z+4, r1	; 0x04
    13f8:	11 82       	std	Z+1, r1	; 0x01
    13fa:	10 82       	st	Z, r1
    13fc:	16 82       	std	Z+6, r1	; 0x06
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	5e df       	rcall	.-324    	; 0x12c8 <xQueueGenericSend>
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <xQueueCreateMutex>:
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	48 2f       	mov	r20, r24
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	33 df       	rcall	.-410    	; 0x1282 <xQueueGenericCreate>
    141c:	ec 01       	movw	r28, r24
    141e:	e6 df       	rcall	.-52     	; 0x13ec <prvInitialiseMutex>
    1420:	ce 01       	movw	r24, r28
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <xQueueGenericSendFromISR>:
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	8a 01       	movw	r16, r20
    1436:	fc 01       	movw	r30, r24
    1438:	56 8d       	ldd	r21, Z+30	; 0x1e
    143a:	37 8d       	ldd	r19, Z+31	; 0x1f
    143c:	53 17       	cp	r21, r19
    143e:	10 f0       	brcs	.+4      	; 0x1444 <xQueueGenericSendFromISR+0x1c>
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	f9 f4       	brne	.+62     	; 0x1482 <xQueueGenericSendFromISR+0x5a>
    1444:	42 2f       	mov	r20, r18
    1446:	78 01       	movw	r14, r16
    1448:	ec 01       	movw	r28, r24
    144a:	1a a1       	ldd	r17, Y+34	; 0x22
    144c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    144e:	ce 01       	movw	r24, r28
    1450:	16 de       	rcall	.-980    	; 0x107e <prvCopyDataToQueue>
    1452:	1f 3f       	cpi	r17, 0xFF	; 255
    1454:	81 f4       	brne	.+32     	; 0x1476 <xQueueGenericSendFromISR+0x4e>
    1456:	8b 89       	ldd	r24, Y+19	; 0x13
    1458:	88 23       	and	r24, r24
    145a:	a9 f0       	breq	.+42     	; 0x1486 <xQueueGenericSendFromISR+0x5e>
    145c:	ce 01       	movw	r24, r28
    145e:	43 96       	adiw	r24, 0x13	; 19
    1460:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    1464:	88 23       	and	r24, r24
    1466:	89 f0       	breq	.+34     	; 0x148a <xQueueGenericSendFromISR+0x62>
    1468:	e1 14       	cp	r14, r1
    146a:	f1 04       	cpc	r15, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <xQueueGenericSendFromISR+0x66>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	f7 01       	movw	r30, r14
    1472:	80 83       	st	Z, r24
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <xQueueGenericSendFromISR+0x68>
    1476:	ff 24       	eor	r15, r15
    1478:	f3 94       	inc	r15
    147a:	f1 0e       	add	r15, r17
    147c:	fa a2       	std	Y+34, r15	; 0x22
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <xQueueGenericSendFromISR+0x68>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <xQueueGenericSendFromISR+0x68>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <xQueueGenericSendFromISR+0x68>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <xQueueGenericSendFromISR+0x68>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	08 95       	ret

0000149e <xQueueReceive>:
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	29 97       	sbiw	r28, 0x09	; 9
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	8c 01       	movw	r16, r24
    14c0:	6b 01       	movw	r12, r22
    14c2:	2e 83       	std	Y+6, r18	; 0x06
    14c4:	3f 83       	std	Y+7, r19	; 0x07
    14c6:	48 87       	std	Y+8, r20	; 0x08
    14c8:	59 87       	std	Y+9, r21	; 0x09
    14ca:	e1 2c       	mov	r14, r1
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	0f 92       	push	r0
    14d2:	f8 01       	movw	r30, r16
    14d4:	f6 8c       	ldd	r15, Z+30	; 0x1e
    14d6:	ff 20       	and	r15, r15
    14d8:	99 f0       	breq	.+38     	; 0x1500 <xQueueReceive+0x62>
    14da:	b6 01       	movw	r22, r12
    14dc:	c8 01       	movw	r24, r16
    14de:	2e de       	rcall	.-932    	; 0x113c <prvCopyDataFromQueue>
    14e0:	fa 94       	dec	r15
    14e2:	f8 01       	movw	r30, r16
    14e4:	f6 8e       	std	Z+30, r15	; 0x1e
    14e6:	80 85       	ldd	r24, Z+8	; 0x08
    14e8:	88 23       	and	r24, r24
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <xQueueReceive+0x5a>
    14ec:	c8 01       	movw	r24, r16
    14ee:	08 96       	adiw	r24, 0x08	; 8
    14f0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    14f4:	81 11       	cpse	r24, r1
    14f6:	d0 dc       	rcall	.-1632   	; 0xe98 <vPortYield>
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	4f c0       	rjmp	.+158    	; 0x159e <xQueueReceive+0x100>
    1500:	8e 81       	ldd	r24, Y+6	; 0x06
    1502:	9f 81       	ldd	r25, Y+7	; 0x07
    1504:	a8 85       	ldd	r26, Y+8	; 0x08
    1506:	b9 85       	ldd	r27, Y+9	; 0x09
    1508:	89 2b       	or	r24, r25
    150a:	8a 2b       	or	r24, r26
    150c:	8b 2b       	or	r24, r27
    150e:	21 f4       	brne	.+8      	; 0x1518 <xQueueReceive+0x7a>
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	43 c0       	rjmp	.+134    	; 0x159e <xQueueReceive+0x100>
    1518:	e1 10       	cpse	r14, r1
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <xQueueReceive+0x8a>
    151c:	ce 01       	movw	r24, r28
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskInternalSetTimeOutState>
    1524:	ee 24       	eor	r14, r14
    1526:	e3 94       	inc	r14
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	e1 d6       	rcall	.+3522   	; 0x22f0 <vTaskSuspendAll>
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	0f 92       	push	r0
    1534:	f8 01       	movw	r30, r16
    1536:	81 a1       	ldd	r24, Z+33	; 0x21
    1538:	8f 3f       	cpi	r24, 0xFF	; 255
    153a:	09 f4       	brne	.+2      	; 0x153e <xQueueReceive+0xa0>
    153c:	11 a2       	std	Z+33, r1	; 0x21
    153e:	f8 01       	movw	r30, r16
    1540:	82 a1       	ldd	r24, Z+34	; 0x22
    1542:	8f 3f       	cpi	r24, 0xFF	; 255
    1544:	09 f4       	brne	.+2      	; 0x1548 <xQueueReceive+0xaa>
    1546:	12 a2       	std	Z+34, r1	; 0x22
    1548:	0f 90       	pop	r0
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	be 01       	movw	r22, r28
    154e:	6a 5f       	subi	r22, 0xFA	; 250
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <xTaskCheckForTimeOut>
    155a:	81 11       	cpse	r24, r1
    155c:	17 c0       	rjmp	.+46     	; 0x158c <xQueueReceive+0xee>
    155e:	c8 01       	movw	r24, r16
    1560:	73 dd       	rcall	.-1306   	; 0x1048 <prvIsQueueEmpty>
    1562:	88 23       	and	r24, r24
    1564:	79 f0       	breq	.+30     	; 0x1584 <xQueueReceive+0xe6>
    1566:	4e 81       	ldd	r20, Y+6	; 0x06
    1568:	5f 81       	ldd	r21, Y+7	; 0x07
    156a:	68 85       	ldd	r22, Y+8	; 0x08
    156c:	79 85       	ldd	r23, Y+9	; 0x09
    156e:	c8 01       	movw	r24, r16
    1570:	43 96       	adiw	r24, 0x13	; 19
    1572:	0e 94 79 14 	call	0x28f2	; 0x28f2 <vTaskPlaceOnEventList>
    1576:	c8 01       	movw	r24, r16
    1578:	fb dd       	rcall	.-1034   	; 0x1170 <prvUnlockQueue>
    157a:	fa d7       	rcall	.+4084   	; 0x2570 <xTaskResumeAll>
    157c:	81 11       	cpse	r24, r1
    157e:	a6 cf       	rjmp	.-180    	; 0x14cc <xQueueReceive+0x2e>
    1580:	8b dc       	rcall	.-1770   	; 0xe98 <vPortYield>
    1582:	a4 cf       	rjmp	.-184    	; 0x14cc <xQueueReceive+0x2e>
    1584:	c8 01       	movw	r24, r16
    1586:	f4 dd       	rcall	.-1048   	; 0x1170 <prvUnlockQueue>
    1588:	f3 d7       	rcall	.+4070   	; 0x2570 <xTaskResumeAll>
    158a:	a0 cf       	rjmp	.-192    	; 0x14cc <xQueueReceive+0x2e>
    158c:	c8 01       	movw	r24, r16
    158e:	f0 dd       	rcall	.-1056   	; 0x1170 <prvUnlockQueue>
    1590:	ef d7       	rcall	.+4062   	; 0x2570 <xTaskResumeAll>
    1592:	c8 01       	movw	r24, r16
    1594:	59 dd       	rcall	.-1358   	; 0x1048 <prvIsQueueEmpty>
    1596:	88 23       	and	r24, r24
    1598:	09 f4       	brne	.+2      	; 0x159c <xQueueReceive+0xfe>
    159a:	98 cf       	rjmp	.-208    	; 0x14cc <xQueueReceive+0x2e>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	29 96       	adiw	r28, 0x09	; 9
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	08 95       	ret

000015bc <xQueueSemaphoreTake>:
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	29 97       	sbiw	r28, 0x09	; 9
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	8c 01       	movw	r16, r24
    15da:	4e 83       	std	Y+6, r20	; 0x06
    15dc:	5f 83       	std	Y+7, r21	; 0x07
    15de:	68 87       	std	Y+8, r22	; 0x08
    15e0:	79 87       	std	Y+9, r23	; 0x09
    15e2:	e1 2c       	mov	r14, r1
    15e4:	f1 2c       	mov	r15, r1
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	0f 92       	push	r0
    15ec:	f8 01       	movw	r30, r16
    15ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    15f0:	88 23       	and	r24, r24
    15f2:	c9 f0       	breq	.+50     	; 0x1626 <xQueueSemaphoreTake+0x6a>
    15f4:	81 50       	subi	r24, 0x01	; 1
    15f6:	86 8f       	std	Z+30, r24	; 0x1e
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	89 2b       	or	r24, r25
    15fe:	29 f4       	brne	.+10     	; 0x160a <xQueueSemaphoreTake+0x4e>
    1600:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <pvTaskIncrementMutexHeldCount>
    1604:	f8 01       	movw	r30, r16
    1606:	95 83       	std	Z+5, r25	; 0x05
    1608:	84 83       	std	Z+4, r24	; 0x04
    160a:	f8 01       	movw	r30, r16
    160c:	80 85       	ldd	r24, Z+8	; 0x08
    160e:	88 23       	and	r24, r24
    1610:	31 f0       	breq	.+12     	; 0x161e <xQueueSemaphoreTake+0x62>
    1612:	c8 01       	movw	r24, r16
    1614:	08 96       	adiw	r24, 0x08	; 8
    1616:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <xTaskRemoveFromEventList>
    161a:	81 11       	cpse	r24, r1
    161c:	3d dc       	rcall	.-1926   	; 0xe98 <vPortYield>
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	6f c0       	rjmp	.+222    	; 0x1704 <xQueueSemaphoreTake+0x148>
    1626:	8e 81       	ldd	r24, Y+6	; 0x06
    1628:	9f 81       	ldd	r25, Y+7	; 0x07
    162a:	a8 85       	ldd	r26, Y+8	; 0x08
    162c:	b9 85       	ldd	r27, Y+9	; 0x09
    162e:	89 2b       	or	r24, r25
    1630:	8a 2b       	or	r24, r26
    1632:	8b 2b       	or	r24, r27
    1634:	21 f4       	brne	.+8      	; 0x163e <xQueueSemaphoreTake+0x82>
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	63 c0       	rjmp	.+198    	; 0x1704 <xQueueSemaphoreTake+0x148>
    163e:	f1 10       	cpse	r15, r1
    1640:	06 c0       	rjmp	.+12     	; 0x164e <xQueueSemaphoreTake+0x92>
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskInternalSetTimeOutState>
    164a:	ff 24       	eor	r15, r15
    164c:	f3 94       	inc	r15
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	4e d6       	rcall	.+3228   	; 0x22f0 <vTaskSuspendAll>
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	0f 92       	push	r0
    165a:	f8 01       	movw	r30, r16
    165c:	81 a1       	ldd	r24, Z+33	; 0x21
    165e:	8f 3f       	cpi	r24, 0xFF	; 255
    1660:	09 f4       	brne	.+2      	; 0x1664 <xQueueSemaphoreTake+0xa8>
    1662:	11 a2       	std	Z+33, r1	; 0x21
    1664:	f8 01       	movw	r30, r16
    1666:	82 a1       	ldd	r24, Z+34	; 0x22
    1668:	8f 3f       	cpi	r24, 0xFF	; 255
    166a:	09 f4       	brne	.+2      	; 0x166e <xQueueSemaphoreTake+0xb2>
    166c:	12 a2       	std	Z+34, r1	; 0x22
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	be 01       	movw	r22, r28
    1674:	6a 5f       	subi	r22, 0xFA	; 250
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <xTaskCheckForTimeOut>
    1680:	81 11       	cpse	r24, r1
    1682:	26 c0       	rjmp	.+76     	; 0x16d0 <xQueueSemaphoreTake+0x114>
    1684:	c8 01       	movw	r24, r16
    1686:	e0 dc       	rcall	.-1600   	; 0x1048 <prvIsQueueEmpty>
    1688:	88 23       	and	r24, r24
    168a:	f1 f0       	breq	.+60     	; 0x16c8 <xQueueSemaphoreTake+0x10c>
    168c:	f8 01       	movw	r30, r16
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	89 2b       	or	r24, r25
    1694:	51 f4       	brne	.+20     	; 0x16aa <xQueueSemaphoreTake+0xee>
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	0f 92       	push	r0
    169c:	84 81       	ldd	r24, Z+4	; 0x04
    169e:	95 81       	ldd	r25, Z+5	; 0x05
    16a0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <xTaskPriorityInherit>
    16a4:	e8 2e       	mov	r14, r24
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	4e 81       	ldd	r20, Y+6	; 0x06
    16ac:	5f 81       	ldd	r21, Y+7	; 0x07
    16ae:	68 85       	ldd	r22, Y+8	; 0x08
    16b0:	79 85       	ldd	r23, Y+9	; 0x09
    16b2:	c8 01       	movw	r24, r16
    16b4:	43 96       	adiw	r24, 0x13	; 19
    16b6:	0e 94 79 14 	call	0x28f2	; 0x28f2 <vTaskPlaceOnEventList>
    16ba:	c8 01       	movw	r24, r16
    16bc:	59 dd       	rcall	.-1358   	; 0x1170 <prvUnlockQueue>
    16be:	58 d7       	rcall	.+3760   	; 0x2570 <xTaskResumeAll>
    16c0:	81 11       	cpse	r24, r1
    16c2:	91 cf       	rjmp	.-222    	; 0x15e6 <xQueueSemaphoreTake+0x2a>
    16c4:	e9 db       	rcall	.-2094   	; 0xe98 <vPortYield>
    16c6:	8f cf       	rjmp	.-226    	; 0x15e6 <xQueueSemaphoreTake+0x2a>
    16c8:	c8 01       	movw	r24, r16
    16ca:	52 dd       	rcall	.-1372   	; 0x1170 <prvUnlockQueue>
    16cc:	51 d7       	rcall	.+3746   	; 0x2570 <xTaskResumeAll>
    16ce:	8b cf       	rjmp	.-234    	; 0x15e6 <xQueueSemaphoreTake+0x2a>
    16d0:	c8 01       	movw	r24, r16
    16d2:	4e dd       	rcall	.-1380   	; 0x1170 <prvUnlockQueue>
    16d4:	4d d7       	rcall	.+3738   	; 0x2570 <xTaskResumeAll>
    16d6:	c8 01       	movw	r24, r16
    16d8:	b7 dc       	rcall	.-1682   	; 0x1048 <prvIsQueueEmpty>
    16da:	88 23       	and	r24, r24
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <xQueueSemaphoreTake+0x124>
    16de:	83 cf       	rjmp	.-250    	; 0x15e6 <xQueueSemaphoreTake+0x2a>
    16e0:	ee 20       	and	r14, r14
    16e2:	79 f0       	breq	.+30     	; 0x1702 <xQueueSemaphoreTake+0x146>
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	0f 92       	push	r0
    16ea:	c8 01       	movw	r24, r16
    16ec:	9d dc       	rcall	.-1734   	; 0x1028 <prvGetDisinheritPriorityAfterTimeout>
    16ee:	68 2f       	mov	r22, r24
    16f0:	f8 01       	movw	r30, r16
    16f2:	84 81       	ldd	r24, Z+4	; 0x04
    16f4:	95 81       	ldd	r25, Z+5	; 0x05
    16f6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskPriorityDisinheritAfterTimeout>
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <xQueueSemaphoreTake+0x148>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	29 96       	adiw	r28, 0x09	; 9
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	ef 90       	pop	r14
    171c:	08 95       	ret

0000171e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	0f 92       	push	r0
    172a:	89 a1       	ldd	r24, Y+33	; 0x21
    172c:	8f 3f       	cpi	r24, 0xFF	; 255
    172e:	09 f4       	brne	.+2      	; 0x1732 <vQueueWaitForMessageRestricted+0x14>
    1730:	19 a2       	std	Y+33, r1	; 0x21
    1732:	8a a1       	ldd	r24, Y+34	; 0x22
    1734:	8f 3f       	cpi	r24, 0xFF	; 255
    1736:	09 f4       	brne	.+2      	; 0x173a <vQueueWaitForMessageRestricted+0x1c>
    1738:	1a a2       	std	Y+34, r1	; 0x22
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    173e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1740:	81 11       	cpse	r24, r1
    1742:	04 c0       	rjmp	.+8      	; 0x174c <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1744:	ce 01       	movw	r24, r28
    1746:	43 96       	adiw	r24, 0x13	; 19
    1748:	0e 94 da 14 	call	0x29b4	; 0x29b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    174c:	ce 01       	movw	r24, r28
    174e:	10 dd       	rcall	.-1504   	; 0x1170 <prvUnlockQueue>
    }
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1756:	fc 01       	movw	r30, r24
    1758:	44 81       	ldd	r20, Z+4	; 0x04
    175a:	55 81       	ldd	r21, Z+5	; 0x05
    175c:	22 81       	ldd	r18, Z+2	; 0x02
    175e:	33 81       	ldd	r19, Z+3	; 0x03
    1760:	24 0f       	add	r18, r20
    1762:	35 1f       	adc	r19, r21
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	b9 01       	movw	r22, r18
    176a:	68 1b       	sub	r22, r24
    176c:	79 0b       	sbc	r23, r25
    176e:	cb 01       	movw	r24, r22
    1770:	64 17       	cp	r22, r20
    1772:	75 07       	cpc	r23, r21
    1774:	10 f0       	brcs	.+4      	; 0x177a <prvBytesInBuffer+0x24>
    1776:	84 1b       	sub	r24, r20
    1778:	95 0b       	sbc	r25, r21
    177a:	08 95       	ret

0000177c <prvInitialiseNewStreamBuffer>:
    177c:	0f 93       	push	r16
    177e:	fc 01       	movw	r30, r24
    1780:	8f e0       	ldi	r24, 0x0F	; 15
    1782:	df 01       	movw	r26, r30
    1784:	1d 92       	st	X+, r1
    1786:	8a 95       	dec	r24
    1788:	e9 f7       	brne	.-6      	; 0x1784 <prvInitialiseNewStreamBuffer+0x8>
    178a:	75 87       	std	Z+13, r23	; 0x0d
    178c:	64 87       	std	Z+12, r22	; 0x0c
    178e:	55 83       	std	Z+5, r21	; 0x05
    1790:	44 83       	std	Z+4, r20	; 0x04
    1792:	37 83       	std	Z+7, r19	; 0x07
    1794:	26 83       	std	Z+6, r18	; 0x06
    1796:	06 87       	std	Z+14, r16	; 0x0e
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <prvWriteBytesToBuffer>:
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	6c 01       	movw	r12, r24
    17b2:	5b 01       	movw	r10, r22
    17b4:	7a 01       	movw	r14, r20
    17b6:	fc 01       	movw	r30, r24
    17b8:	c2 81       	ldd	r28, Z+2	; 0x02
    17ba:	d3 81       	ldd	r29, Z+3	; 0x03
    17bc:	04 81       	ldd	r16, Z+4	; 0x04
    17be:	15 81       	ldd	r17, Z+5	; 0x05
    17c0:	0c 1b       	sub	r16, r28
    17c2:	1d 0b       	sbc	r17, r29
    17c4:	40 17       	cp	r20, r16
    17c6:	51 07       	cpc	r21, r17
    17c8:	08 f4       	brcc	.+2      	; 0x17cc <prvWriteBytesToBuffer+0x30>
    17ca:	8a 01       	movw	r16, r20
    17cc:	f6 01       	movw	r30, r12
    17ce:	84 85       	ldd	r24, Z+12	; 0x0c
    17d0:	95 85       	ldd	r25, Z+13	; 0x0d
    17d2:	a8 01       	movw	r20, r16
    17d4:	b5 01       	movw	r22, r10
    17d6:	8c 0f       	add	r24, r28
    17d8:	9d 1f       	adc	r25, r29
    17da:	0e 94 cf 31 	call	0x639e	; 0x639e <memcpy>
    17de:	0e 15       	cp	r16, r14
    17e0:	1f 05       	cpc	r17, r15
    17e2:	58 f4       	brcc	.+22     	; 0x17fa <prvWriteBytesToBuffer+0x5e>
    17e4:	a7 01       	movw	r20, r14
    17e6:	40 1b       	sub	r20, r16
    17e8:	51 0b       	sbc	r21, r17
    17ea:	b5 01       	movw	r22, r10
    17ec:	60 0f       	add	r22, r16
    17ee:	71 1f       	adc	r23, r17
    17f0:	f6 01       	movw	r30, r12
    17f2:	84 85       	ldd	r24, Z+12	; 0x0c
    17f4:	95 85       	ldd	r25, Z+13	; 0x0d
    17f6:	0e 94 cf 31 	call	0x639e	; 0x639e <memcpy>
    17fa:	ce 01       	movw	r24, r28
    17fc:	8e 0d       	add	r24, r14
    17fe:	9f 1d       	adc	r25, r15
    1800:	f6 01       	movw	r30, r12
    1802:	24 81       	ldd	r18, Z+4	; 0x04
    1804:	35 81       	ldd	r19, Z+5	; 0x05
    1806:	82 17       	cp	r24, r18
    1808:	93 07       	cpc	r25, r19
    180a:	10 f0       	brcs	.+4      	; 0x1810 <prvWriteBytesToBuffer+0x74>
    180c:	82 1b       	sub	r24, r18
    180e:	93 0b       	sbc	r25, r19
    1810:	f6 01       	movw	r30, r12
    1812:	93 83       	std	Z+3, r25	; 0x03
    1814:	82 83       	std	Z+2, r24	; 0x02
    1816:	c7 01       	movw	r24, r14
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	08 95       	ret

0000182e <prvWriteMessageToBuffer>:
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	1f 92       	push	r1
    1840:	1f 92       	push	r1
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	7c 01       	movw	r14, r24
    1848:	6b 01       	movw	r12, r22
    184a:	5a 83       	std	Y+2, r21	; 0x02
    184c:	49 83       	std	Y+1, r20	; 0x01
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	c1 f0       	breq	.+48     	; 0x1884 <prvWriteMessageToBuffer+0x56>
    1854:	fc 01       	movw	r30, r24
    1856:	86 85       	ldd	r24, Z+14	; 0x0e
    1858:	80 fd       	sbrc	r24, 0
    185a:	08 c0       	rjmp	.+16     	; 0x186c <prvWriteMessageToBuffer+0x3e>
    185c:	42 17       	cp	r20, r18
    185e:	53 07       	cpc	r21, r19
    1860:	08 f4       	brcc	.+2      	; 0x1864 <prvWriteMessageToBuffer+0x36>
    1862:	9a 01       	movw	r18, r20
    1864:	3a 83       	std	Y+2, r19	; 0x02
    1866:	29 83       	std	Y+1, r18	; 0x01
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	0f c0       	rjmp	.+30     	; 0x188a <prvWriteMessageToBuffer+0x5c>
    186c:	20 17       	cp	r18, r16
    186e:	31 07       	cpc	r19, r17
    1870:	58 f0       	brcs	.+22     	; 0x1888 <prvWriteMessageToBuffer+0x5a>
    1872:	42 e0       	ldi	r20, 0x02	; 2
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	be 01       	movw	r22, r28
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	c7 01       	movw	r24, r14
    187e:	8e df       	rcall	.-228    	; 0x179c <prvWriteBytesToBuffer>
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <prvWriteMessageToBuffer+0x5c>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	01 c0       	rjmp	.+2      	; 0x188a <prvWriteMessageToBuffer+0x5c>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	88 23       	and	r24, r24
    188c:	31 f0       	breq	.+12     	; 0x189a <prvWriteMessageToBuffer+0x6c>
    188e:	49 81       	ldd	r20, Y+1	; 0x01
    1890:	5a 81       	ldd	r21, Y+2	; 0x02
    1892:	b6 01       	movw	r22, r12
    1894:	c7 01       	movw	r24, r14
    1896:	82 df       	rcall	.-252    	; 0x179c <prvWriteBytesToBuffer>
    1898:	02 c0       	rjmp	.+4      	; 0x189e <prvWriteMessageToBuffer+0x70>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	08 95       	ret

000018b4 <prvReadBytesFromBuffer>:
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	7c 01       	movw	r14, r24
    18ca:	5b 01       	movw	r10, r22
    18cc:	e9 01       	movw	r28, r18
    18ce:	42 17       	cp	r20, r18
    18d0:	53 07       	cpc	r21, r19
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <prvReadBytesFromBuffer+0x22>
    18d4:	ea 01       	movw	r28, r20
    18d6:	20 97       	sbiw	r28, 0x00	; 0
    18d8:	81 f1       	breq	.+96     	; 0x193a <prvReadBytesFromBuffer+0x86>
    18da:	f7 01       	movw	r30, r14
    18dc:	00 81       	ld	r16, Z
    18de:	11 81       	ldd	r17, Z+1	; 0x01
    18e0:	84 81       	ldd	r24, Z+4	; 0x04
    18e2:	95 81       	ldd	r25, Z+5	; 0x05
    18e4:	80 1b       	sub	r24, r16
    18e6:	91 0b       	sbc	r25, r17
    18e8:	6e 01       	movw	r12, r28
    18ea:	8c 17       	cp	r24, r28
    18ec:	9d 07       	cpc	r25, r29
    18ee:	08 f4       	brcc	.+2      	; 0x18f2 <prvReadBytesFromBuffer+0x3e>
    18f0:	6c 01       	movw	r12, r24
    18f2:	f7 01       	movw	r30, r14
    18f4:	64 85       	ldd	r22, Z+12	; 0x0c
    18f6:	75 85       	ldd	r23, Z+13	; 0x0d
    18f8:	60 0f       	add	r22, r16
    18fa:	71 1f       	adc	r23, r17
    18fc:	a6 01       	movw	r20, r12
    18fe:	c5 01       	movw	r24, r10
    1900:	0e 94 cf 31 	call	0x639e	; 0x639e <memcpy>
    1904:	cc 16       	cp	r12, r28
    1906:	dd 06       	cpc	r13, r29
    1908:	58 f4       	brcc	.+22     	; 0x1920 <prvReadBytesFromBuffer+0x6c>
    190a:	ae 01       	movw	r20, r28
    190c:	4c 19       	sub	r20, r12
    190e:	5d 09       	sbc	r21, r13
    1910:	f7 01       	movw	r30, r14
    1912:	64 85       	ldd	r22, Z+12	; 0x0c
    1914:	75 85       	ldd	r23, Z+13	; 0x0d
    1916:	c5 01       	movw	r24, r10
    1918:	8c 0d       	add	r24, r12
    191a:	9d 1d       	adc	r25, r13
    191c:	0e 94 cf 31 	call	0x639e	; 0x639e <memcpy>
    1920:	0c 0f       	add	r16, r28
    1922:	1d 1f       	adc	r17, r29
    1924:	f7 01       	movw	r30, r14
    1926:	84 81       	ldd	r24, Z+4	; 0x04
    1928:	95 81       	ldd	r25, Z+5	; 0x05
    192a:	08 17       	cp	r16, r24
    192c:	19 07       	cpc	r17, r25
    192e:	10 f0       	brcs	.+4      	; 0x1934 <prvReadBytesFromBuffer+0x80>
    1930:	08 1b       	sub	r16, r24
    1932:	19 0b       	sbc	r17, r25
    1934:	f7 01       	movw	r30, r14
    1936:	11 83       	std	Z+1, r17	; 0x01
    1938:	00 83       	st	Z, r16
    193a:	ce 01       	movw	r24, r28
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	08 95       	ret

00001952 <prvReadMessageFromBuffer>:
    1952:	6f 92       	push	r6
    1954:	7f 92       	push	r7
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	1f 92       	push	r1
    1970:	1f 92       	push	r1
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	6c 01       	movw	r12, r24
    1978:	4b 01       	movw	r8, r22
    197a:	5a 01       	movw	r10, r20
    197c:	79 01       	movw	r14, r18
    197e:	01 15       	cp	r16, r1
    1980:	11 05       	cpc	r17, r1
    1982:	b1 f0       	breq	.+44     	; 0x19b0 <prvReadMessageFromBuffer+0x5e>
    1984:	fc 01       	movw	r30, r24
    1986:	60 80       	ld	r6, Z
    1988:	71 80       	ldd	r7, Z+1	; 0x01
    198a:	a8 01       	movw	r20, r16
    198c:	be 01       	movw	r22, r28
    198e:	6f 5f       	subi	r22, 0xFF	; 255
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	90 df       	rcall	.-224    	; 0x18b4 <prvReadBytesFromBuffer>
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	e0 1a       	sub	r14, r16
    199a:	f1 0a       	sbc	r15, r17
    199c:	a8 16       	cp	r10, r24
    199e:	b9 06       	cpc	r11, r25
    19a0:	30 f4       	brcc	.+12     	; 0x19ae <prvReadMessageFromBuffer+0x5c>
    19a2:	f6 01       	movw	r30, r12
    19a4:	71 82       	std	Z+1, r7	; 0x01
    19a6:	60 82       	st	Z, r6
    19a8:	a1 2c       	mov	r10, r1
    19aa:	b1 2c       	mov	r11, r1
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <prvReadMessageFromBuffer+0x5e>
    19ae:	5c 01       	movw	r10, r24
    19b0:	97 01       	movw	r18, r14
    19b2:	a5 01       	movw	r20, r10
    19b4:	b4 01       	movw	r22, r8
    19b6:	c6 01       	movw	r24, r12
    19b8:	7d df       	rcall	.-262    	; 0x18b4 <prvReadBytesFromBuffer>
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	08 95       	ret

000019dc <xStreamBufferGenericCreate>:
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ec 01       	movw	r28, r24
    19ec:	6b 01       	movw	r12, r22
    19ee:	41 30       	cpi	r20, 0x01	; 1
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <xStreamBufferGenericCreate+0x1a>
    19f2:	01 e0       	ldi	r16, 0x01	; 1
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <xStreamBufferGenericCreate+0x1c>
    19f6:	00 e0       	ldi	r16, 0x00	; 0
    19f8:	c1 14       	cp	r12, r1
    19fa:	d1 04       	cpc	r13, r1
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <xStreamBufferGenericCreate+0x28>
    19fe:	cc 24       	eor	r12, r12
    1a00:	c3 94       	inc	r12
    1a02:	d1 2c       	mov	r13, r1
    1a04:	ce 01       	movw	r24, r28
    1a06:	40 96       	adiw	r24, 0x10	; 16
    1a08:	c8 17       	cp	r28, r24
    1a0a:	d9 07       	cpc	r29, r25
    1a0c:	20 f4       	brcc	.+8      	; 0x1a16 <xStreamBufferGenericCreate+0x3a>
    1a0e:	21 96       	adiw	r28, 0x01	; 1
    1a10:	8f d8       	rcall	.-3810   	; 0xb30 <pvPortMalloc>
    1a12:	7c 01       	movw	r14, r24
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <xStreamBufferGenericCreate+0x3e>
    1a16:	e1 2c       	mov	r14, r1
    1a18:	f1 2c       	mov	r15, r1
    1a1a:	e1 14       	cp	r14, r1
    1a1c:	f1 04       	cpc	r15, r1
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <xStreamBufferGenericCreate+0x52>
    1a20:	96 01       	movw	r18, r12
    1a22:	ae 01       	movw	r20, r28
    1a24:	b7 01       	movw	r22, r14
    1a26:	61 5f       	subi	r22, 0xF1	; 241
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	a7 de       	rcall	.-690    	; 0x177c <prvInitialiseNewStreamBuffer>
    1a2e:	c7 01       	movw	r24, r14
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
    1a3e:	08 95       	ret

00001a40 <xStreamBufferReset>:
    1a40:	0f 93       	push	r16
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	0f 92       	push	r0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 85       	ldd	r18, Z+8	; 0x08
    1a4c:	31 85       	ldd	r19, Z+9	; 0x09
    1a4e:	23 2b       	or	r18, r19
    1a50:	71 f4       	brne	.+28     	; 0x1a6e <xStreamBufferReset+0x2e>
    1a52:	22 85       	ldd	r18, Z+10	; 0x0a
    1a54:	33 85       	ldd	r19, Z+11	; 0x0b
    1a56:	23 2b       	or	r18, r19
    1a58:	61 f4       	brne	.+24     	; 0x1a72 <xStreamBufferReset+0x32>
    1a5a:	26 81       	ldd	r18, Z+6	; 0x06
    1a5c:	37 81       	ldd	r19, Z+7	; 0x07
    1a5e:	44 81       	ldd	r20, Z+4	; 0x04
    1a60:	55 81       	ldd	r21, Z+5	; 0x05
    1a62:	64 85       	ldd	r22, Z+12	; 0x0c
    1a64:	75 85       	ldd	r23, Z+13	; 0x0d
    1a66:	06 85       	ldd	r16, Z+14	; 0x0e
    1a68:	89 de       	rcall	.-750    	; 0x177c <prvInitialiseNewStreamBuffer>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <xStreamBufferReset+0x34>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <xStreamBufferReset+0x34>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <xStreamBufferSpacesAvailable>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	24 81       	ldd	r18, Z+4	; 0x04
    1a80:	35 81       	ldd	r19, Z+5	; 0x05
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	82 0f       	add	r24, r18
    1a88:	93 1f       	adc	r25, r19
    1a8a:	42 81       	ldd	r20, Z+2	; 0x02
    1a8c:	53 81       	ldd	r21, Z+3	; 0x03
    1a8e:	84 1b       	sub	r24, r20
    1a90:	95 0b       	sbc	r25, r21
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	82 17       	cp	r24, r18
    1a96:	93 07       	cpc	r25, r19
    1a98:	10 f0       	brcs	.+4      	; 0x1a9e <xStreamBufferSpacesAvailable+0x22>
    1a9a:	82 1b       	sub	r24, r18
    1a9c:	93 0b       	sbc	r25, r19
    1a9e:	08 95       	ret

00001aa0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1aa0:	2f 92       	push	r2
    1aa2:	3f 92       	push	r3
    1aa4:	4f 92       	push	r4
    1aa6:	5f 92       	push	r5
    1aa8:	6f 92       	push	r6
    1aaa:	7f 92       	push	r7
    1aac:	8f 92       	push	r8
    1aae:	9f 92       	push	r9
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	2b 97       	sbiw	r28, 0x0b	; 11
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	4c 01       	movw	r8, r24
    1ad6:	7b 87       	std	Y+11, r23	; 0x0b
    1ad8:	6a 87       	std	Y+10, r22	; 0x0a
    1ada:	1a 01       	movw	r2, r20
    1adc:	0e 83       	std	Y+6, r16	; 0x06
    1ade:	1f 83       	std	Y+7, r17	; 0x07
    1ae0:	28 87       	std	Y+8, r18	; 0x08
    1ae2:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	84 81       	ldd	r24, Z+4	; 0x04
    1ae8:	95 81       	ldd	r25, Z+5	; 0x05
    1aea:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1aec:	26 85       	ldd	r18, Z+14	; 0x0e
    1aee:	20 ff       	sbrs	r18, 0
    1af0:	0c c0       	rjmp	.+24     	; 0x1b0a <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1af2:	2a 01       	movw	r4, r20
    1af4:	f2 e0       	ldi	r31, 0x02	; 2
    1af6:	4f 0e       	add	r4, r31
    1af8:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1afa:	84 15       	cp	r24, r4
    1afc:	95 05       	cpc	r25, r5
    1afe:	58 f4       	brcc	.+22     	; 0x1b16 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1b00:	1e 82       	std	Y+6, r1	; 0x06
    1b02:	1f 82       	std	Y+7, r1	; 0x07
    1b04:	18 86       	std	Y+8, r1	; 0x08
    1b06:	19 86       	std	Y+9, r1	; 0x09
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1b0a:	84 17       	cp	r24, r20
    1b0c:	95 07       	cpc	r25, r21
    1b0e:	10 f0       	brcs	.+4      	; 0x1b14 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1b10:	2a 01       	movw	r4, r20
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1b14:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1b16:	8e 81       	ldd	r24, Y+6	; 0x06
    1b18:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1a:	a8 85       	ldd	r26, Y+8	; 0x08
    1b1c:	b9 85       	ldd	r27, Y+9	; 0x09
    1b1e:	89 2b       	or	r24, r25
    1b20:	8a 2b       	or	r24, r26
    1b22:	8b 2b       	or	r24, r27
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <xStreamBufferSend+0x88>
    1b26:	38 c0       	rjmp	.+112    	; 0x1b98 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1b28:	ce 01       	movw	r24, r28
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	0e 94 65 16 	call	0x2cca	; 0x2cca <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b36:	c4 01       	movw	r24, r8
    1b38:	a1 df       	rcall	.-190    	; 0x1a7c <xStreamBufferSpacesAvailable>
    1b3a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1b3c:	84 15       	cp	r24, r4
    1b3e:	95 05       	cpc	r25, r5
    1b40:	40 f5       	brcc	.+80     	; 0x1b92 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1b4c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <xTaskGetCurrentTaskHandle>
    1b50:	f4 01       	movw	r30, r8
    1b52:	93 87       	std	Z+11, r25	; 0x0b
    1b54:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1b5a:	ae 80       	ldd	r10, Y+6	; 0x06
    1b5c:	bf 80       	ldd	r11, Y+7	; 0x07
    1b5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b60:	d9 84       	ldd	r13, Y+9	; 0x09
    1b62:	e1 2c       	mov	r14, r1
    1b64:	f1 2c       	mov	r15, r1
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	98 01       	movw	r18, r16
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	ba 01       	movw	r22, r20
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	0e 94 8e 18 	call	0x311c	; 0x311c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1b78:	f4 01       	movw	r30, r8
    1b7a:	13 86       	std	Z+11, r1	; 0x0b
    1b7c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1b7e:	be 01       	movw	r22, r28
    1b80:	6a 5f       	subi	r22, 0xFA	; 250
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <xTaskCheckForTimeOut>
    1b8c:	88 23       	and	r24, r24
    1b8e:	81 f2       	breq	.-96     	; 0x1b30 <xStreamBufferSend+0x90>
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
                    break;
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1b98:	61 2c       	mov	r6, r1
    1b9a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1b9c:	61 14       	cp	r6, r1
    1b9e:	71 04       	cpc	r7, r1
    1ba0:	19 f4       	brne	.+6      	; 0x1ba8 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ba2:	c4 01       	movw	r24, r8
    1ba4:	6b df       	rcall	.-298    	; 0x1a7c <xStreamBufferSpacesAvailable>
    1ba6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ba8:	82 01       	movw	r16, r4
    1baa:	93 01       	movw	r18, r6
    1bac:	a1 01       	movw	r20, r2
    1bae:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bb0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bb2:	c4 01       	movw	r24, r8
    1bb4:	3c de       	rcall	.-904    	; 0x182e <prvWriteMessageToBuffer>
    1bb6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1bb8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1bba:	e9 f0       	breq	.+58     	; 0x1bf6 <xStreamBufferSend+0x156>
    1bbc:	c4 01       	movw	r24, r8
    1bbe:	cb dd       	rcall	.-1130   	; 0x1756 <prvBytesInBuffer>
    1bc0:	f4 01       	movw	r30, r8
    1bc2:	26 81       	ldd	r18, Z+6	; 0x06
    1bc4:	37 81       	ldd	r19, Z+7	; 0x07
    1bc6:	82 17       	cp	r24, r18
    1bc8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1bca:	a8 f0       	brcs	.+42     	; 0x1bf6 <xStreamBufferSend+0x156>
    1bcc:	91 d3       	rcall	.+1826   	; 0x22f0 <vTaskSuspendAll>
    1bce:	f4 01       	movw	r30, r8
    1bd0:	80 85       	ldd	r24, Z+8	; 0x08
    1bd2:	91 85       	ldd	r25, Z+9	; 0x09
    1bd4:	89 2b       	or	r24, r25
    1bd6:	71 f0       	breq	.+28     	; 0x1bf4 <xStreamBufferSend+0x154>
    1bd8:	80 85       	ldd	r24, Z+8	; 0x08
    1bda:	91 85       	ldd	r25, Z+9	; 0x09
    1bdc:	e1 2c       	mov	r14, r1
    1bde:	f1 2c       	mov	r15, r1
    1be0:	00 e0       	ldi	r16, 0x00	; 0
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	0e 94 36 19 	call	0x326c	; 0x326c <xTaskGenericNotify>
    1bee:	f4 01       	movw	r30, r8
    1bf0:	11 86       	std	Z+9, r1	; 0x09
    1bf2:	10 86       	std	Z+8, r1	; 0x08
    1bf4:	bd d4       	rcall	.+2426   	; 0x2570 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1bf6:	c6 01       	movw	r24, r12
    1bf8:	2b 96       	adiw	r28, 0x0b	; 11
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	bf 90       	pop	r11
    1c16:	af 90       	pop	r10
    1c18:	9f 90       	pop	r9
    1c1a:	8f 90       	pop	r8
    1c1c:	7f 90       	pop	r7
    1c1e:	6f 90       	pop	r6
    1c20:	5f 90       	pop	r5
    1c22:	4f 90       	pop	r4
    1c24:	3f 90       	pop	r3
    1c26:	2f 90       	pop	r2
    1c28:	08 95       	ret

00001c2a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1c2a:	af 92       	push	r10
    1c2c:	bf 92       	push	r11
    1c2e:	cf 92       	push	r12
    1c30:	df 92       	push	r13
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	ec 01       	movw	r28, r24
    1c40:	7b 01       	movw	r14, r22
    1c42:	5a 01       	movw	r10, r20
    1c44:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c48:	80 ff       	sbrs	r24, 0
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c4c:	8a 01       	movw	r16, r20
    1c4e:	0e 5f       	subi	r16, 0xFE	; 254
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1c54:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c56:	ce 01       	movw	r24, r28
    1c58:	11 df       	rcall	.-478    	; 0x1a7c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	a5 01       	movw	r20, r10
    1c5e:	b7 01       	movw	r22, r14
    1c60:	ce 01       	movw	r24, r28
    1c62:	e5 dd       	rcall	.-1078   	; 0x182e <prvWriteMessageToBuffer>
    1c64:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1c66:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1c68:	c1 f0       	breq	.+48     	; 0x1c9a <xStreamBufferSendFromISR+0x70>
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	74 dd       	rcall	.-1304   	; 0x1756 <prvBytesInBuffer>
    1c6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c70:	3f 81       	ldd	r19, Y+7	; 0x07
    1c72:	82 17       	cp	r24, r18
    1c74:	93 07       	cpc	r25, r19
    1c76:	88 f0       	brcs	.+34     	; 0x1c9a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1c78:	88 85       	ldd	r24, Y+8	; 0x08
    1c7a:	99 85       	ldd	r25, Y+9	; 0x09
    1c7c:	89 2b       	or	r24, r25
    1c7e:	69 f0       	breq	.+26     	; 0x1c9a <xStreamBufferSendFromISR+0x70>
    1c80:	88 85       	ldd	r24, Y+8	; 0x08
    1c82:	99 85       	ldd	r25, Y+9	; 0x09
    1c84:	e1 2c       	mov	r14, r1
    1c86:	f1 2c       	mov	r15, r1
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	a9 01       	movw	r20, r18
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	0e 94 2d 1a 	call	0x345a	; 0x345a <xTaskGenericNotifyFromISR>
    1c96:	19 86       	std	Y+9, r1	; 0x09
    1c98:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1c9a:	c5 01       	movw	r24, r10
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	bf 90       	pop	r11
    1cae:	af 90       	pop	r10
    1cb0:	08 95       	ret

00001cb2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1cb2:	4f 92       	push	r4
    1cb4:	5f 92       	push	r5
    1cb6:	6f 92       	push	r6
    1cb8:	7f 92       	push	r7
    1cba:	8f 92       	push	r8
    1cbc:	9f 92       	push	r9
    1cbe:	af 92       	push	r10
    1cc0:	bf 92       	push	r11
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	ec 01       	movw	r28, r24
    1cd4:	2b 01       	movw	r4, r22
    1cd6:	3a 01       	movw	r6, r20
    1cd8:	58 01       	movw	r10, r16
    1cda:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1cdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cde:	80 ff       	sbrs	r24, 0
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ce2:	68 94       	set
    1ce4:	88 24       	eor	r8, r8
    1ce6:	81 f8       	bld	r8, 1
    1ce8:	91 2c       	mov	r9, r1
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1cec:	81 2c       	mov	r8, r1
    1cee:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1cf0:	a1 14       	cp	r10, r1
    1cf2:	b1 04       	cpc	r11, r1
    1cf4:	c1 04       	cpc	r12, r1
    1cf6:	d1 04       	cpc	r13, r1
    1cf8:	41 f1       	breq	.+80     	; 0x1d4a <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d00:	ce 01       	movw	r24, r28
    1d02:	29 dd       	rcall	.-1454   	; 0x1756 <prvBytesInBuffer>
    1d04:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1d06:	88 16       	cp	r8, r24
    1d08:	99 06       	cpc	r9, r25
    1d0a:	48 f0       	brcs	.+18     	; 0x1d1e <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1d16:	0e 94 f6 16 	call	0x2dec	; 0x2dec <xTaskGetCurrentTaskHandle>
    1d1a:	99 87       	std	Y+9, r25	; 0x09
    1d1c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1d22:	8e 14       	cp	r8, r14
    1d24:	9f 04       	cpc	r9, r15
    1d26:	a0 f0       	brcs	.+40     	; 0x1d50 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1d28:	e1 2c       	mov	r14, r1
    1d2a:	f1 2c       	mov	r15, r1
    1d2c:	00 e0       	ldi	r16, 0x00	; 0
    1d2e:	10 e0       	ldi	r17, 0x00	; 0
    1d30:	98 01       	movw	r18, r16
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	ba 01       	movw	r22, r20
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	0e 94 8e 18 	call	0x311c	; 0x311c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1d3e:	19 86       	std	Y+9, r1	; 0x09
    1d40:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d42:	ce 01       	movw	r24, r28
    1d44:	08 dd       	rcall	.-1520   	; 0x1756 <prvBytesInBuffer>
    1d46:	7c 01       	movw	r14, r24
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	04 dd       	rcall	.-1528   	; 0x1756 <prvBytesInBuffer>
    1d4e:	7c 01       	movw	r14, r24
    1d50:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1d52:	9f 04       	cpc	r9, r15
    1d54:	e8 f4       	brcc	.+58     	; 0x1d90 <xStreamBufferReceive+0xde>
    1d56:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1d58:	97 01       	movw	r18, r14
    1d5a:	a3 01       	movw	r20, r6
    1d5c:	b2 01       	movw	r22, r4
    1d5e:	ce 01       	movw	r24, r28
    1d60:	f8 dd       	rcall	.-1040   	; 0x1952 <prvReadMessageFromBuffer>
    1d62:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1d64:	89 2b       	or	r24, r25
    1d66:	b1 f0       	breq	.+44     	; 0x1d94 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1d68:	c3 d2       	rcall	.+1414   	; 0x22f0 <vTaskSuspendAll>
    1d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6e:	89 2b       	or	r24, r25
    1d70:	69 f0       	breq	.+26     	; 0x1d8c <xStreamBufferReceive+0xda>
    1d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d76:	e1 2c       	mov	r14, r1
    1d78:	f1 2c       	mov	r15, r1
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	a9 01       	movw	r20, r18
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 36 19 	call	0x326c	; 0x326c <xTaskGenericNotify>
    1d88:	1b 86       	std	Y+11, r1	; 0x0b
    1d8a:	1a 86       	std	Y+10, r1	; 0x0a
    1d8c:	f1 d3       	rcall	.+2018   	; 0x2570 <xTaskResumeAll>
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <xStreamBufferReceive+0xe2>
    1d90:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1d92:	d1 2c       	mov	r13, r1
    1d94:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	bf 90       	pop	r11
    1da8:	af 90       	pop	r10
    1daa:	9f 90       	pop	r9
    1dac:	8f 90       	pop	r8
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	5f 90       	pop	r5
    1db4:	4f 90       	pop	r4
    1db6:	08 95       	ret

00001db8 <prvResetNextTaskUnblockTime>:
    1db8:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxDelayedTaskList>
    1dbc:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxDelayedTaskList+0x1>
    1dc0:	80 81       	ld	r24, Z
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	0c c0       	rjmp	.+24     	; 0x1dde <prvResetNextTaskUnblockTime+0x26>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	9f ef       	ldi	r25, 0xFF	; 255
    1dca:	dc 01       	movw	r26, r24
    1dcc:	80 93 89 16 	sts	0x1689, r24	; 0x801689 <xNextTaskUnblockTime>
    1dd0:	90 93 8a 16 	sts	0x168A, r25	; 0x80168a <xNextTaskUnblockTime+0x1>
    1dd4:	a0 93 8b 16 	sts	0x168B, r26	; 0x80168b <xNextTaskUnblockTime+0x2>
    1dd8:	b0 93 8c 16 	sts	0x168C, r27	; 0x80168c <xNextTaskUnblockTime+0x3>
    1ddc:	08 95       	ret
    1dde:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxDelayedTaskList>
    1de2:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxDelayedTaskList+0x1>
    1de6:	07 80       	ldd	r0, Z+7	; 0x07
    1de8:	f0 85       	ldd	r31, Z+8	; 0x08
    1dea:	e0 2d       	mov	r30, r0
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	a2 81       	ldd	r26, Z+2	; 0x02
    1df2:	b3 81       	ldd	r27, Z+3	; 0x03
    1df4:	80 93 89 16 	sts	0x1689, r24	; 0x801689 <xNextTaskUnblockTime>
    1df8:	90 93 8a 16 	sts	0x168A, r25	; 0x80168a <xNextTaskUnblockTime+0x1>
    1dfc:	a0 93 8b 16 	sts	0x168B, r26	; 0x80168b <xNextTaskUnblockTime+0x2>
    1e00:	b0 93 8c 16 	sts	0x168C, r27	; 0x80168c <xNextTaskUnblockTime+0x3>
    1e04:	08 95       	ret

00001e06 <prvDeleteTCB>:
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	ec 01       	movw	r28, r24
    1e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e10:	0e 94 41 06 	call	0xc82	; 0xc82 <vPortFree>
    1e14:	ce 01       	movw	r24, r28
    1e16:	0e 94 41 06 	call	0xc82	; 0xc82 <vPortFree>
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <prvInitialiseNewTask>:
    1e20:	4f 92       	push	r4
    1e22:	5f 92       	push	r5
    1e24:	6f 92       	push	r6
    1e26:	7f 92       	push	r7
    1e28:	8f 92       	push	r8
    1e2a:	9f 92       	push	r9
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	2c 01       	movw	r4, r24
    1e40:	5b 01       	movw	r10, r22
    1e42:	4a 01       	movw	r8, r20
    1e44:	39 01       	movw	r6, r18
    1e46:	e6 01       	movw	r28, r12
    1e48:	65 ea       	ldi	r22, 0xA5	; 165
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e50:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <memset>
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e58:	21 e0       	ldi	r18, 0x01	; 1
    1e5a:	82 1a       	sub	r8, r18
    1e5c:	91 08       	sbc	r9, r1
    1e5e:	88 0e       	add	r8, r24
    1e60:	99 1e       	adc	r9, r25
    1e62:	a1 14       	cp	r10, r1
    1e64:	b1 04       	cpc	r11, r1
    1e66:	89 f4       	brne	.+34     	; 0x1e8a <prvInitialiseNewTask+0x6a>
    1e68:	15 c0       	rjmp	.+42     	; 0x1e94 <prvInitialiseNewTask+0x74>
    1e6a:	82 2f       	mov	r24, r18
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	f5 01       	movw	r30, r10
    1e70:	e8 0f       	add	r30, r24
    1e72:	f9 1f       	adc	r31, r25
    1e74:	30 81       	ld	r19, Z
    1e76:	de 01       	movw	r26, r28
    1e78:	a8 0f       	add	r26, r24
    1e7a:	b9 1f       	adc	r27, r25
    1e7c:	5d 96       	adiw	r26, 0x1d	; 29
    1e7e:	3c 93       	st	X, r19
    1e80:	80 81       	ld	r24, Z
    1e82:	88 23       	and	r24, r24
    1e84:	29 f0       	breq	.+10     	; 0x1e90 <prvInitialiseNewTask+0x70>
    1e86:	2f 5f       	subi	r18, 0xFF	; 255
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <prvInitialiseNewTask+0x6c>
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	20 31       	cpi	r18, 0x10	; 16
    1e8e:	68 f3       	brcs	.-38     	; 0x1e6a <prvInitialiseNewTask+0x4a>
    1e90:	1c a6       	std	Y+44, r1	; 0x2c
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <prvInitialiseNewTask+0x76>
    1e94:	1d 8e       	std	Y+29, r1	; 0x1d
    1e96:	0a 30       	cpi	r16, 0x0A	; 10
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <prvInitialiseNewTask+0x7c>
    1e9a:	09 e0       	ldi	r16, 0x09	; 9
    1e9c:	0a 8f       	std	Y+26, r16	; 0x1a
    1e9e:	0d a7       	std	Y+45, r16	; 0x2d
    1ea0:	1e a6       	std	Y+46, r1	; 0x2e
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	02 96       	adiw	r24, 0x02	; 2
    1ea6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <vListInitialiseItem>
    1eaa:	ce 01       	movw	r24, r28
    1eac:	0e 96       	adiw	r24, 0x0e	; 14
    1eae:	0e 94 8f 06 	call	0xd1e	; 0xd1e <vListInitialiseItem>
    1eb2:	db 87       	std	Y+11, r29	; 0x0b
    1eb4:	ca 87       	std	Y+10, r28	; 0x0a
    1eb6:	8a e0       	ldi	r24, 0x0A	; 10
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a0 e0       	ldi	r26, 0x00	; 0
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	80 1b       	sub	r24, r16
    1ec0:	91 09       	sbc	r25, r1
    1ec2:	a1 09       	sbc	r26, r1
    1ec4:	b1 09       	sbc	r27, r1
    1ec6:	8e 87       	std	Y+14, r24	; 0x0e
    1ec8:	9f 87       	std	Y+15, r25	; 0x0f
    1eca:	a8 8b       	std	Y+16, r26	; 0x10
    1ecc:	b9 8b       	std	Y+17, r27	; 0x11
    1ece:	df 8b       	std	Y+23, r29	; 0x17
    1ed0:	ce 8b       	std	Y+22, r28	; 0x16
    1ed2:	84 e0       	ldi	r24, 0x04	; 4
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	bf 96       	adiw	r30, 0x2f	; 47
    1ed8:	df 01       	movw	r26, r30
    1eda:	1d 92       	st	X+, r1
    1edc:	8a 95       	dec	r24
    1ede:	e9 f7       	brne	.-6      	; 0x1eda <prvInitialiseNewTask+0xba>
    1ee0:	1b aa       	std	Y+51, r1	; 0x33
    1ee2:	a3 01       	movw	r20, r6
    1ee4:	b2 01       	movw	r22, r4
    1ee6:	c4 01       	movw	r24, r8
    1ee8:	0e 94 03 07 	call	0xe06	; 0xe06 <pxPortInitialiseStack>
    1eec:	99 83       	std	Y+1, r25	; 0x01
    1eee:	88 83       	st	Y, r24
    1ef0:	e1 14       	cp	r14, r1
    1ef2:	f1 04       	cpc	r15, r1
    1ef4:	19 f0       	breq	.+6      	; 0x1efc <prvInitialiseNewTask+0xdc>
    1ef6:	f7 01       	movw	r30, r14
    1ef8:	d1 83       	std	Z+1, r29	; 0x01
    1efa:	c0 83       	st	Z, r28
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	bf 90       	pop	r11
    1f0c:	af 90       	pop	r10
    1f0e:	9f 90       	pop	r9
    1f10:	8f 90       	pop	r8
    1f12:	7f 90       	pop	r7
    1f14:	6f 90       	pop	r6
    1f16:	5f 90       	pop	r5
    1f18:	4f 90       	pop	r4
    1f1a:	08 95       	ret

00001f1c <prvInitialiseTaskLists>:
    1f1c:	cf 93       	push	r28
    1f1e:	c0 e0       	ldi	r28, 0x00	; 0
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <prvInitialiseTaskLists+0x18>
    1f22:	2b e0       	ldi	r18, 0x0B	; 11
    1f24:	c2 9f       	mul	r28, r18
    1f26:	c0 01       	movw	r24, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	89 52       	subi	r24, 0x29	; 41
    1f2c:	99 4e       	sbci	r25, 0xE9	; 233
    1f2e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    1f32:	cf 5f       	subi	r28, 0xFF	; 255
    1f34:	ca 30       	cpi	r28, 0x0A	; 10
    1f36:	a8 f3       	brcs	.-22     	; 0x1f22 <prvInitialiseTaskLists+0x6>
    1f38:	8c ec       	ldi	r24, 0xCC	; 204
    1f3a:	96 e1       	ldi	r25, 0x16	; 22
    1f3c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    1f40:	81 ec       	ldi	r24, 0xC1	; 193
    1f42:	96 e1       	ldi	r25, 0x16	; 22
    1f44:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    1f48:	82 eb       	ldi	r24, 0xB2	; 178
    1f4a:	96 e1       	ldi	r25, 0x16	; 22
    1f4c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    1f50:	87 ea       	ldi	r24, 0xA7	; 167
    1f52:	96 e1       	ldi	r25, 0x16	; 22
    1f54:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    1f58:	8b e9       	ldi	r24, 0x9B	; 155
    1f5a:	96 e1       	ldi	r25, 0x16	; 22
    1f5c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    1f60:	8c ec       	ldi	r24, 0xCC	; 204
    1f62:	96 e1       	ldi	r25, 0x16	; 22
    1f64:	90 93 c0 16 	sts	0x16C0, r25	; 0x8016c0 <pxDelayedTaskList+0x1>
    1f68:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <pxDelayedTaskList>
    1f6c:	81 ec       	ldi	r24, 0xC1	; 193
    1f6e:	96 e1       	ldi	r25, 0x16	; 22
    1f70:	90 93 be 16 	sts	0x16BE, r25	; 0x8016be <pxOverflowDelayedTaskList+0x1>
    1f74:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <pxOverflowDelayedTaskList>
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <prvAddNewTaskToReadyList>:
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	0f 92       	push	r0
    1f88:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <uxCurrentNumberOfTasks>
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <uxCurrentNumberOfTasks>
    1f92:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    1f96:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    1f9a:	89 2b       	or	r24, r25
    1f9c:	51 f4       	brne	.+20     	; 0x1fb2 <prvAddNewTaskToReadyList+0x36>
    1f9e:	d0 93 46 17 	sts	0x1746, r29	; 0x801746 <pxCurrentTCB+0x1>
    1fa2:	c0 93 45 17 	sts	0x1745, r28	; 0x801745 <pxCurrentTCB>
    1fa6:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <uxCurrentNumberOfTasks>
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 f4       	brne	.+36     	; 0x1fd2 <prvAddNewTaskToReadyList+0x56>
    1fae:	b6 df       	rcall	.-148    	; 0x1f1c <prvInitialiseTaskLists>
    1fb0:	10 c0       	rjmp	.+32     	; 0x1fd2 <prvAddNewTaskToReadyList+0x56>
    1fb2:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <xSchedulerRunning>
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	0c c0       	rjmp	.+24     	; 0x1fd2 <prvAddNewTaskToReadyList+0x56>
    1fba:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    1fbe:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    1fc2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc6:	89 17       	cp	r24, r25
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <prvAddNewTaskToReadyList+0x56>
    1fca:	d0 93 46 17 	sts	0x1746, r29	; 0x801746 <pxCurrentTCB+0x1>
    1fce:	c0 93 45 17 	sts	0x1745, r28	; 0x801745 <pxCurrentTCB>
    1fd2:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <uxTaskNumber>
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <uxTaskNumber>
    1fdc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1fde:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    1fe2:	8e 17       	cp	r24, r30
    1fe4:	10 f4       	brcc	.+4      	; 0x1fea <prvAddNewTaskToReadyList+0x6e>
    1fe6:	e0 93 95 16 	sts	0x1695, r30	; 0x801695 <uxTopReadyPriority>
    1fea:	8b e0       	ldi	r24, 0x0B	; 11
    1fec:	8e 9f       	mul	r24, r30
    1fee:	f0 01       	movw	r30, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	e9 52       	subi	r30, 0x29	; 41
    1ff4:	f9 4e       	sbci	r31, 0xE9	; 233
    1ff6:	01 80       	ldd	r0, Z+1	; 0x01
    1ff8:	f2 81       	ldd	r31, Z+2	; 0x02
    1ffa:	e0 2d       	mov	r30, r0
    1ffc:	ff 83       	std	Y+7, r31	; 0x07
    1ffe:	ee 83       	std	Y+6, r30	; 0x06
    2000:	26 81       	ldd	r18, Z+6	; 0x06
    2002:	37 81       	ldd	r19, Z+7	; 0x07
    2004:	39 87       	std	Y+9, r19	; 0x09
    2006:	28 87       	std	Y+8, r18	; 0x08
    2008:	a6 81       	ldd	r26, Z+6	; 0x06
    200a:	b7 81       	ldd	r27, Z+7	; 0x07
    200c:	9e 01       	movw	r18, r28
    200e:	2e 5f       	subi	r18, 0xFE	; 254
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	15 96       	adiw	r26, 0x05	; 5
    2014:	3c 93       	st	X, r19
    2016:	2e 93       	st	-X, r18
    2018:	14 97       	sbiw	r26, 0x04	; 4
    201a:	37 83       	std	Z+7, r19	; 0x07
    201c:	26 83       	std	Z+6, r18	; 0x06
    201e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2020:	8e 9f       	mul	r24, r30
    2022:	f0 01       	movw	r30, r0
    2024:	11 24       	eor	r1, r1
    2026:	e9 52       	subi	r30, 0x29	; 41
    2028:	f9 4e       	sbci	r31, 0xE9	; 233
    202a:	fd 87       	std	Y+13, r31	; 0x0d
    202c:	ec 87       	std	Y+12, r30	; 0x0c
    202e:	80 81       	ld	r24, Z
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	80 83       	st	Z, r24
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <xSchedulerRunning>
    203c:	88 23       	and	r24, r24
    203e:	51 f0       	breq	.+20     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2040:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2044:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2048:	92 8d       	ldd	r25, Z+26	; 0x1a
    204a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    204c:	98 17       	cp	r25, r24
    204e:	10 f4       	brcc	.+4      	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2050:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	08 95       	ret

0000205a <prvCheckTasksWaitingTermination>:
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	1b c0       	rjmp	.+54     	; 0x2096 <prvCheckTasksWaitingTermination+0x3c>
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	0f 92       	push	r0
    2066:	e0 91 ae 16 	lds	r30, 0x16AE	; 0x8016ae <xTasksWaitingTermination+0x7>
    206a:	f0 91 af 16 	lds	r31, 0x16AF	; 0x8016af <xTasksWaitingTermination+0x8>
    206e:	c0 85       	ldd	r28, Z+8	; 0x08
    2070:	d1 85       	ldd	r29, Z+9	; 0x09
    2072:	ce 01       	movw	r24, r28
    2074:	02 96       	adiw	r24, 0x02	; 2
    2076:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
    207a:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <uxCurrentNumberOfTasks>
    207e:	81 50       	subi	r24, 0x01	; 1
    2080:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <uxCurrentNumberOfTasks>
    2084:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <uxDeletedTasksWaitingCleanUp>
    2088:	81 50       	subi	r24, 0x01	; 1
    208a:	80 93 a6 16 	sts	0x16A6, r24	; 0x8016a6 <uxDeletedTasksWaitingCleanUp>
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	ce 01       	movw	r24, r28
    2094:	b8 de       	rcall	.-656    	; 0x1e06 <prvDeleteTCB>
    2096:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <uxDeletedTasksWaitingCleanUp>
    209a:	81 11       	cpse	r24, r1
    209c:	e1 cf       	rjmp	.-62     	; 0x2060 <prvCheckTasksWaitingTermination+0x6>
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <prvAddCurrentTaskToDelayedList>:
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	6b 01       	movw	r12, r22
    20ba:	7c 01       	movw	r14, r24
    20bc:	c4 2f       	mov	r28, r20
    20be:	80 90 96 16 	lds	r8, 0x1696	; 0x801696 <xTickCount>
    20c2:	90 90 97 16 	lds	r9, 0x1697	; 0x801697 <xTickCount+0x1>
    20c6:	a0 90 98 16 	lds	r10, 0x1698	; 0x801698 <xTickCount+0x2>
    20ca:	b0 90 99 16 	lds	r11, 0x1699	; 0x801699 <xTickCount+0x3>
    20ce:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    20d2:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    20d6:	02 96       	adiw	r24, 0x02	; 2
    20d8:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
    20dc:	8f ef       	ldi	r24, 0xFF	; 255
    20de:	c8 16       	cp	r12, r24
    20e0:	d8 06       	cpc	r13, r24
    20e2:	e8 06       	cpc	r14, r24
    20e4:	f8 06       	cpc	r15, r24
    20e6:	b1 f5       	brne	.+108    	; 0x2154 <prvAddCurrentTaskToDelayedList+0xb0>
    20e8:	cc 23       	and	r28, r28
    20ea:	a1 f1       	breq	.+104    	; 0x2154 <prvAddCurrentTaskToDelayedList+0xb0>
    20ec:	eb e9       	ldi	r30, 0x9B	; 155
    20ee:	f6 e1       	ldi	r31, 0x16	; 22
    20f0:	a1 81       	ldd	r26, Z+1	; 0x01
    20f2:	b2 81       	ldd	r27, Z+2	; 0x02
    20f4:	c0 91 45 17 	lds	r28, 0x1745	; 0x801745 <pxCurrentTCB>
    20f8:	d0 91 46 17 	lds	r29, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    20fc:	bf 83       	std	Y+7, r27	; 0x07
    20fe:	ae 83       	std	Y+6, r26	; 0x06
    2100:	c0 91 45 17 	lds	r28, 0x1745	; 0x801745 <pxCurrentTCB>
    2104:	d0 91 46 17 	lds	r29, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2108:	16 96       	adiw	r26, 0x06	; 6
    210a:	8d 91       	ld	r24, X+
    210c:	9c 91       	ld	r25, X
    210e:	17 97       	sbiw	r26, 0x07	; 7
    2110:	99 87       	std	Y+9, r25	; 0x09
    2112:	88 87       	std	Y+8, r24	; 0x08
    2114:	16 96       	adiw	r26, 0x06	; 6
    2116:	cd 91       	ld	r28, X+
    2118:	dc 91       	ld	r29, X
    211a:	17 97       	sbiw	r26, 0x07	; 7
    211c:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    2120:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2124:	02 96       	adiw	r24, 0x02	; 2
    2126:	9d 83       	std	Y+5, r25	; 0x05
    2128:	8c 83       	std	Y+4, r24	; 0x04
    212a:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    212e:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2132:	02 96       	adiw	r24, 0x02	; 2
    2134:	17 96       	adiw	r26, 0x07	; 7
    2136:	9c 93       	st	X, r25
    2138:	8e 93       	st	-X, r24
    213a:	16 97       	sbiw	r26, 0x06	; 6
    213c:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2140:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2144:	1d 96       	adiw	r26, 0x0d	; 13
    2146:	fc 93       	st	X, r31
    2148:	ee 93       	st	-X, r30
    214a:	1c 97       	sbiw	r26, 0x0c	; 12
    214c:	80 81       	ld	r24, Z
    214e:	8f 5f       	subi	r24, 0xFF	; 255
    2150:	80 83       	st	Z, r24
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <prvAddCurrentTaskToDelayedList+0x12e>
    2154:	c8 0c       	add	r12, r8
    2156:	d9 1c       	adc	r13, r9
    2158:	ea 1c       	adc	r14, r10
    215a:	fb 1c       	adc	r15, r11
    215c:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2160:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2164:	c2 82       	std	Z+2, r12	; 0x02
    2166:	d3 82       	std	Z+3, r13	; 0x03
    2168:	e4 82       	std	Z+4, r14	; 0x04
    216a:	f5 82       	std	Z+5, r15	; 0x05
    216c:	c8 14       	cp	r12, r8
    216e:	d9 04       	cpc	r13, r9
    2170:	ea 04       	cpc	r14, r10
    2172:	fb 04       	cpc	r15, r11
    2174:	68 f4       	brcc	.+26     	; 0x2190 <prvAddCurrentTaskToDelayedList+0xec>
    2176:	60 91 45 17 	lds	r22, 0x1745	; 0x801745 <pxCurrentTCB>
    217a:	70 91 46 17 	lds	r23, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    217e:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <pxOverflowDelayedTaskList>
    2182:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <pxOverflowDelayedTaskList+0x1>
    2186:	6e 5f       	subi	r22, 0xFE	; 254
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	0e 94 93 06 	call	0xd26	; 0xd26 <vListInsert>
    218e:	21 c0       	rjmp	.+66     	; 0x21d2 <prvAddCurrentTaskToDelayedList+0x12e>
    2190:	60 91 45 17 	lds	r22, 0x1745	; 0x801745 <pxCurrentTCB>
    2194:	70 91 46 17 	lds	r23, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2198:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <pxDelayedTaskList>
    219c:	90 91 c0 16 	lds	r25, 0x16C0	; 0x8016c0 <pxDelayedTaskList+0x1>
    21a0:	6e 5f       	subi	r22, 0xFE	; 254
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	0e 94 93 06 	call	0xd26	; 0xd26 <vListInsert>
    21a8:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xNextTaskUnblockTime>
    21ac:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xNextTaskUnblockTime+0x1>
    21b0:	a0 91 8b 16 	lds	r26, 0x168B	; 0x80168b <xNextTaskUnblockTime+0x2>
    21b4:	b0 91 8c 16 	lds	r27, 0x168C	; 0x80168c <xNextTaskUnblockTime+0x3>
    21b8:	c8 16       	cp	r12, r24
    21ba:	d9 06       	cpc	r13, r25
    21bc:	ea 06       	cpc	r14, r26
    21be:	fb 06       	cpc	r15, r27
    21c0:	40 f4       	brcc	.+16     	; 0x21d2 <prvAddCurrentTaskToDelayedList+0x12e>
    21c2:	c0 92 89 16 	sts	0x1689, r12	; 0x801689 <xNextTaskUnblockTime>
    21c6:	d0 92 8a 16 	sts	0x168A, r13	; 0x80168a <xNextTaskUnblockTime+0x1>
    21ca:	e0 92 8b 16 	sts	0x168B, r14	; 0x80168b <xNextTaskUnblockTime+0x2>
    21ce:	f0 92 8c 16 	sts	0x168C, r15	; 0x80168c <xNextTaskUnblockTime+0x3>
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	08 95       	ret

000021e8 <xTaskCreate>:
    21e8:	2f 92       	push	r2
    21ea:	3f 92       	push	r3
    21ec:	4f 92       	push	r4
    21ee:	5f 92       	push	r5
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	3c 01       	movw	r6, r24
    220c:	1b 01       	movw	r2, r22
    220e:	4a 01       	movw	r8, r20
    2210:	29 01       	movw	r4, r18
    2212:	ca 01       	movw	r24, r20
    2214:	0e 94 98 05 	call	0xb30	; 0xb30 <pvPortMalloc>
    2218:	6c 01       	movw	r12, r24
    221a:	89 2b       	or	r24, r25
    221c:	71 f0       	breq	.+28     	; 0x223a <__stack+0x3b>
    221e:	84 e3       	ldi	r24, 0x34	; 52
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 98 05 	call	0xb30	; 0xb30 <pvPortMalloc>
    2226:	ec 01       	movw	r28, r24
    2228:	89 2b       	or	r24, r25
    222a:	19 f0       	breq	.+6      	; 0x2232 <__stack+0x33>
    222c:	dc 8e       	std	Y+28, r13	; 0x1c
    222e:	cb 8e       	std	Y+27, r12	; 0x1b
    2230:	06 c0       	rjmp	.+12     	; 0x223e <__stack+0x3f>
    2232:	c6 01       	movw	r24, r12
    2234:	0e 94 41 06 	call	0xc82	; 0xc82 <vPortFree>
    2238:	02 c0       	rjmp	.+4      	; 0x223e <__stack+0x3f>
    223a:	c0 e0       	ldi	r28, 0x00	; 0
    223c:	d0 e0       	ldi	r29, 0x00	; 0
    223e:	20 97       	sbiw	r28, 0x00	; 0
    2240:	61 f0       	breq	.+24     	; 0x225a <__stack+0x5b>
    2242:	a1 2c       	mov	r10, r1
    2244:	b1 2c       	mov	r11, r1
    2246:	6e 01       	movw	r12, r28
    2248:	92 01       	movw	r18, r4
    224a:	a4 01       	movw	r20, r8
    224c:	b1 01       	movw	r22, r2
    224e:	c3 01       	movw	r24, r6
    2250:	e7 dd       	rcall	.-1074   	; 0x1e20 <prvInitialiseNewTask>
    2252:	ce 01       	movw	r24, r28
    2254:	93 de       	rcall	.-730    	; 0x1f7c <prvAddNewTaskToReadyList>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	01 c0       	rjmp	.+2      	; 0x225c <__stack+0x5d>
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	7f 90       	pop	r7
    2274:	6f 90       	pop	r6
    2276:	5f 90       	pop	r5
    2278:	4f 90       	pop	r4
    227a:	3f 90       	pop	r3
    227c:	2f 90       	pop	r2
    227e:	08 95       	ret

00002280 <vTaskStartScheduler>:
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	0f 2e       	mov	r0, r31
    2288:	f7 e8       	ldi	r31, 0x87	; 135
    228a:	ef 2e       	mov	r14, r31
    228c:	f6 e1       	ldi	r31, 0x16	; 22
    228e:	ff 2e       	mov	r15, r31
    2290:	f0 2d       	mov	r31, r0
    2292:	00 e0       	ldi	r16, 0x00	; 0
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 ec       	ldi	r20, 0xC0	; 192
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	61 eb       	ldi	r22, 0xB1	; 177
    229e:	73 e0       	ldi	r23, 0x03	; 3
    22a0:	8d ec       	ldi	r24, 0xCD	; 205
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a1 df       	rcall	.-190    	; 0x21e8 <xTaskCreate>
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	11 f4       	brne	.+4      	; 0x22ae <vTaskStartScheduler+0x2e>
    22aa:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <xTimerCreateTimerTask>
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	c9 f4       	brne	.+50     	; 0x22e4 <vTaskStartScheduler+0x64>
    22b2:	f8 94       	cli
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	9f ef       	ldi	r25, 0xFF	; 255
    22b8:	dc 01       	movw	r26, r24
    22ba:	80 93 89 16 	sts	0x1689, r24	; 0x801689 <xNextTaskUnblockTime>
    22be:	90 93 8a 16 	sts	0x168A, r25	; 0x80168a <xNextTaskUnblockTime+0x1>
    22c2:	a0 93 8b 16 	sts	0x168B, r26	; 0x80168b <xNextTaskUnblockTime+0x2>
    22c6:	b0 93 8c 16 	sts	0x168C, r27	; 0x80168c <xNextTaskUnblockTime+0x3>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	80 93 94 16 	sts	0x1694, r24	; 0x801694 <xSchedulerRunning>
    22d0:	10 92 96 16 	sts	0x1696, r1	; 0x801696 <xTickCount>
    22d4:	10 92 97 16 	sts	0x1697, r1	; 0x801697 <xTickCount+0x1>
    22d8:	10 92 98 16 	sts	0x1698, r1	; 0x801698 <xTickCount+0x2>
    22dc:	10 92 99 16 	sts	0x1699, r1	; 0x801699 <xTickCount+0x3>
    22e0:	0e 94 1a 07 	call	0xe34	; 0xe34 <xPortStartScheduler>
    22e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    22e8:	0f 91       	pop	r16
    22ea:	ff 90       	pop	r15
    22ec:	ef 90       	pop	r14
    22ee:	08 95       	ret

000022f0 <vTaskSuspendAll>:
    22f0:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	80 93 86 16 	sts	0x1686, r24	; 0x801686 <uxSchedulerSuspended>
    22fa:	08 95       	ret

000022fc <xTaskGetTickCount>:
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	0f 92       	push	r0
    2302:	60 91 96 16 	lds	r22, 0x1696	; 0x801696 <xTickCount>
    2306:	70 91 97 16 	lds	r23, 0x1697	; 0x801697 <xTickCount+0x1>
    230a:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <xTickCount+0x2>
    230e:	90 91 99 16 	lds	r25, 0x1699	; 0x801699 <xTickCount+0x3>
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	08 95       	ret

00002318 <xTaskIncrementTick>:
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    2328:	81 11       	cpse	r24, r1
    232a:	05 c1       	rjmp	.+522    	; 0x2536 <xTaskIncrementTick+0x21e>
    232c:	c0 90 96 16 	lds	r12, 0x1696	; 0x801696 <xTickCount>
    2330:	d0 90 97 16 	lds	r13, 0x1697	; 0x801697 <xTickCount+0x1>
    2334:	e0 90 98 16 	lds	r14, 0x1698	; 0x801698 <xTickCount+0x2>
    2338:	f0 90 99 16 	lds	r15, 0x1699	; 0x801699 <xTickCount+0x3>
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	c8 1a       	sub	r12, r24
    2340:	d8 0a       	sbc	r13, r24
    2342:	e8 0a       	sbc	r14, r24
    2344:	f8 0a       	sbc	r15, r24
    2346:	c0 92 96 16 	sts	0x1696, r12	; 0x801696 <xTickCount>
    234a:	d0 92 97 16 	sts	0x1697, r13	; 0x801697 <xTickCount+0x1>
    234e:	e0 92 98 16 	sts	0x1698, r14	; 0x801698 <xTickCount+0x2>
    2352:	f0 92 99 16 	sts	0x1699, r15	; 0x801699 <xTickCount+0x3>
    2356:	c1 14       	cp	r12, r1
    2358:	d1 04       	cpc	r13, r1
    235a:	e1 04       	cpc	r14, r1
    235c:	f1 04       	cpc	r15, r1
    235e:	b1 f4       	brne	.+44     	; 0x238c <xTaskIncrementTick+0x74>
    2360:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <pxDelayedTaskList>
    2364:	90 91 c0 16 	lds	r25, 0x16C0	; 0x8016c0 <pxDelayedTaskList+0x1>
    2368:	20 91 bd 16 	lds	r18, 0x16BD	; 0x8016bd <pxOverflowDelayedTaskList>
    236c:	30 91 be 16 	lds	r19, 0x16BE	; 0x8016be <pxOverflowDelayedTaskList+0x1>
    2370:	30 93 c0 16 	sts	0x16C0, r19	; 0x8016c0 <pxDelayedTaskList+0x1>
    2374:	20 93 bf 16 	sts	0x16BF, r18	; 0x8016bf <pxDelayedTaskList>
    2378:	90 93 be 16 	sts	0x16BE, r25	; 0x8016be <pxOverflowDelayedTaskList+0x1>
    237c:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <pxOverflowDelayedTaskList>
    2380:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <xNumOfOverflows>
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <xNumOfOverflows>
    238a:	16 dd       	rcall	.-1492   	; 0x1db8 <prvResetNextTaskUnblockTime>
    238c:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xNextTaskUnblockTime>
    2390:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xNextTaskUnblockTime+0x1>
    2394:	a0 91 8b 16 	lds	r26, 0x168B	; 0x80168b <xNextTaskUnblockTime+0x2>
    2398:	b0 91 8c 16 	lds	r27, 0x168C	; 0x80168c <xNextTaskUnblockTime+0x3>
    239c:	c8 16       	cp	r12, r24
    239e:	d9 06       	cpc	r13, r25
    23a0:	ea 06       	cpc	r14, r26
    23a2:	fb 06       	cpc	r15, r27
    23a4:	20 f4       	brcc	.+8      	; 0x23ae <xTaskIncrementTick+0x96>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	b2 c0       	rjmp	.+356    	; 0x250e <xTaskIncrementTick+0x1f6>
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <xTaskIncrementTick+0x98>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxDelayedTaskList>
    23b4:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxDelayedTaskList+0x1>
    23b8:	90 81       	ld	r25, Z
    23ba:	91 11       	cpse	r25, r1
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <xTaskIncrementTick+0xbe>
    23be:	4f ef       	ldi	r20, 0xFF	; 255
    23c0:	5f ef       	ldi	r21, 0xFF	; 255
    23c2:	ba 01       	movw	r22, r20
    23c4:	40 93 89 16 	sts	0x1689, r20	; 0x801689 <xNextTaskUnblockTime>
    23c8:	50 93 8a 16 	sts	0x168A, r21	; 0x80168a <xNextTaskUnblockTime+0x1>
    23cc:	60 93 8b 16 	sts	0x168B, r22	; 0x80168b <xNextTaskUnblockTime+0x2>
    23d0:	70 93 8c 16 	sts	0x168C, r23	; 0x80168c <xNextTaskUnblockTime+0x3>
    23d4:	9c c0       	rjmp	.+312    	; 0x250e <xTaskIncrementTick+0x1f6>
    23d6:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxDelayedTaskList>
    23da:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxDelayedTaskList+0x1>
    23de:	07 80       	ldd	r0, Z+7	; 0x07
    23e0:	f0 85       	ldd	r31, Z+8	; 0x08
    23e2:	e0 2d       	mov	r30, r0
    23e4:	00 84       	ldd	r0, Z+8	; 0x08
    23e6:	f1 85       	ldd	r31, Z+9	; 0x09
    23e8:	e0 2d       	mov	r30, r0
    23ea:	42 81       	ldd	r20, Z+2	; 0x02
    23ec:	53 81       	ldd	r21, Z+3	; 0x03
    23ee:	64 81       	ldd	r22, Z+4	; 0x04
    23f0:	75 81       	ldd	r23, Z+5	; 0x05
    23f2:	c4 16       	cp	r12, r20
    23f4:	d5 06       	cpc	r13, r21
    23f6:	e6 06       	cpc	r14, r22
    23f8:	f7 06       	cpc	r15, r23
    23fa:	48 f4       	brcc	.+18     	; 0x240e <xTaskIncrementTick+0xf6>
    23fc:	40 93 89 16 	sts	0x1689, r20	; 0x801689 <xNextTaskUnblockTime>
    2400:	50 93 8a 16 	sts	0x168A, r21	; 0x80168a <xNextTaskUnblockTime+0x1>
    2404:	60 93 8b 16 	sts	0x168B, r22	; 0x80168b <xNextTaskUnblockTime+0x2>
    2408:	70 93 8c 16 	sts	0x168C, r23	; 0x80168c <xNextTaskUnblockTime+0x3>
    240c:	80 c0       	rjmp	.+256    	; 0x250e <xTaskIncrementTick+0x1f6>
    240e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2410:	b5 85       	ldd	r27, Z+13	; 0x0d
    2412:	c6 81       	ldd	r28, Z+6	; 0x06
    2414:	d7 81       	ldd	r29, Z+7	; 0x07
    2416:	20 85       	ldd	r18, Z+8	; 0x08
    2418:	31 85       	ldd	r19, Z+9	; 0x09
    241a:	3f 83       	std	Y+7, r19	; 0x07
    241c:	2e 83       	std	Y+6, r18	; 0x06
    241e:	c0 85       	ldd	r28, Z+8	; 0x08
    2420:	d1 85       	ldd	r29, Z+9	; 0x09
    2422:	26 81       	ldd	r18, Z+6	; 0x06
    2424:	37 81       	ldd	r19, Z+7	; 0x07
    2426:	3d 83       	std	Y+5, r19	; 0x05
    2428:	2c 83       	std	Y+4, r18	; 0x04
    242a:	11 96       	adiw	r26, 0x01	; 1
    242c:	4d 91       	ld	r20, X+
    242e:	5c 91       	ld	r21, X
    2430:	12 97       	sbiw	r26, 0x02	; 2
    2432:	9f 01       	movw	r18, r30
    2434:	2e 5f       	subi	r18, 0xFE	; 254
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	42 17       	cp	r20, r18
    243a:	53 07       	cpc	r21, r19
    243c:	31 f4       	brne	.+12     	; 0x244a <xTaskIncrementTick+0x132>
    243e:	40 85       	ldd	r20, Z+8	; 0x08
    2440:	51 85       	ldd	r21, Z+9	; 0x09
    2442:	12 96       	adiw	r26, 0x02	; 2
    2444:	5c 93       	st	X, r21
    2446:	4e 93       	st	-X, r20
    2448:	11 97       	sbiw	r26, 0x01	; 1
    244a:	15 86       	std	Z+13, r1	; 0x0d
    244c:	14 86       	std	Z+12, r1	; 0x0c
    244e:	9c 91       	ld	r25, X
    2450:	91 50       	subi	r25, 0x01	; 1
    2452:	9c 93       	st	X, r25
    2454:	a0 8d       	ldd	r26, Z+24	; 0x18
    2456:	b1 8d       	ldd	r27, Z+25	; 0x19
    2458:	10 97       	sbiw	r26, 0x00	; 0
    245a:	09 f1       	breq	.+66     	; 0x249e <xTaskIncrementTick+0x186>
    245c:	c2 89       	ldd	r28, Z+18	; 0x12
    245e:	d3 89       	ldd	r29, Z+19	; 0x13
    2460:	44 89       	ldd	r20, Z+20	; 0x14
    2462:	55 89       	ldd	r21, Z+21	; 0x15
    2464:	5f 83       	std	Y+7, r21	; 0x07
    2466:	4e 83       	std	Y+6, r20	; 0x06
    2468:	c4 89       	ldd	r28, Z+20	; 0x14
    246a:	d5 89       	ldd	r29, Z+21	; 0x15
    246c:	42 89       	ldd	r20, Z+18	; 0x12
    246e:	53 89       	ldd	r21, Z+19	; 0x13
    2470:	5d 83       	std	Y+5, r21	; 0x05
    2472:	4c 83       	std	Y+4, r20	; 0x04
    2474:	11 96       	adiw	r26, 0x01	; 1
    2476:	6d 91       	ld	r22, X+
    2478:	7c 91       	ld	r23, X
    247a:	12 97       	sbiw	r26, 0x02	; 2
    247c:	af 01       	movw	r20, r30
    247e:	42 5f       	subi	r20, 0xF2	; 242
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	64 17       	cp	r22, r20
    2484:	75 07       	cpc	r23, r21
    2486:	31 f4       	brne	.+12     	; 0x2494 <xTaskIncrementTick+0x17c>
    2488:	44 89       	ldd	r20, Z+20	; 0x14
    248a:	55 89       	ldd	r21, Z+21	; 0x15
    248c:	12 96       	adiw	r26, 0x02	; 2
    248e:	5c 93       	st	X, r21
    2490:	4e 93       	st	-X, r20
    2492:	11 97       	sbiw	r26, 0x01	; 1
    2494:	11 8e       	std	Z+25, r1	; 0x19
    2496:	10 8e       	std	Z+24, r1	; 0x18
    2498:	9c 91       	ld	r25, X
    249a:	91 50       	subi	r25, 0x01	; 1
    249c:	9c 93       	st	X, r25
    249e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24a0:	90 91 95 16 	lds	r25, 0x1695	; 0x801695 <uxTopReadyPriority>
    24a4:	9a 17       	cp	r25, r26
    24a6:	10 f4       	brcc	.+4      	; 0x24ac <xTaskIncrementTick+0x194>
    24a8:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <uxTopReadyPriority>
    24ac:	9b e0       	ldi	r25, 0x0B	; 11
    24ae:	9a 9f       	mul	r25, r26
    24b0:	d0 01       	movw	r26, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	a9 52       	subi	r26, 0x29	; 41
    24b6:	b9 4e       	sbci	r27, 0xE9	; 233
    24b8:	11 96       	adiw	r26, 0x01	; 1
    24ba:	0d 90       	ld	r0, X+
    24bc:	bc 91       	ld	r27, X
    24be:	a0 2d       	mov	r26, r0
    24c0:	b7 83       	std	Z+7, r27	; 0x07
    24c2:	a6 83       	std	Z+6, r26	; 0x06
    24c4:	16 96       	adiw	r26, 0x06	; 6
    24c6:	4d 91       	ld	r20, X+
    24c8:	5c 91       	ld	r21, X
    24ca:	17 97       	sbiw	r26, 0x07	; 7
    24cc:	51 87       	std	Z+9, r21	; 0x09
    24ce:	40 87       	std	Z+8, r20	; 0x08
    24d0:	16 96       	adiw	r26, 0x06	; 6
    24d2:	cd 91       	ld	r28, X+
    24d4:	dc 91       	ld	r29, X
    24d6:	17 97       	sbiw	r26, 0x07	; 7
    24d8:	3d 83       	std	Y+5, r19	; 0x05
    24da:	2c 83       	std	Y+4, r18	; 0x04
    24dc:	17 96       	adiw	r26, 0x07	; 7
    24de:	3c 93       	st	X, r19
    24e0:	2e 93       	st	-X, r18
    24e2:	16 97       	sbiw	r26, 0x06	; 6
    24e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24e6:	9a 9f       	mul	r25, r26
    24e8:	d0 01       	movw	r26, r0
    24ea:	11 24       	eor	r1, r1
    24ec:	a9 52       	subi	r26, 0x29	; 41
    24ee:	b9 4e       	sbci	r27, 0xE9	; 233
    24f0:	b5 87       	std	Z+13, r27	; 0x0d
    24f2:	a4 87       	std	Z+12, r26	; 0x0c
    24f4:	9c 91       	ld	r25, X
    24f6:	9f 5f       	subi	r25, 0xFF	; 255
    24f8:	9c 93       	st	X, r25
    24fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    24fc:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2500:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2504:	92 8d       	ldd	r25, Z+26	; 0x1a
    2506:	29 17       	cp	r18, r25
    2508:	08 f0       	brcs	.+2      	; 0x250c <xTaskIncrementTick+0x1f4>
    250a:	4f cf       	rjmp	.-354    	; 0x23aa <xTaskIncrementTick+0x92>
    250c:	51 cf       	rjmp	.-350    	; 0x23b0 <xTaskIncrementTick+0x98>
    250e:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2512:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2516:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2518:	9b e0       	ldi	r25, 0x0B	; 11
    251a:	e9 9f       	mul	r30, r25
    251c:	f0 01       	movw	r30, r0
    251e:	11 24       	eor	r1, r1
    2520:	e9 52       	subi	r30, 0x29	; 41
    2522:	f9 4e       	sbci	r31, 0xE9	; 233
    2524:	90 81       	ld	r25, Z
    2526:	92 30       	cpi	r25, 0x02	; 2
    2528:	08 f0       	brcs	.+2      	; 0x252c <xTaskIncrementTick+0x214>
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 91 8f 16 	lds	r25, 0x168F	; 0x80168f <xYieldPending>
    2530:	91 11       	cpse	r25, r1
    2532:	16 c0       	rjmp	.+44     	; 0x2560 <xTaskIncrementTick+0x248>
    2534:	16 c0       	rjmp	.+44     	; 0x2562 <xTaskIncrementTick+0x24a>
    2536:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <xPendedTicks>
    253a:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <xPendedTicks+0x1>
    253e:	a0 91 92 16 	lds	r26, 0x1692	; 0x801692 <xPendedTicks+0x2>
    2542:	b0 91 93 16 	lds	r27, 0x1693	; 0x801693 <xPendedTicks+0x3>
    2546:	01 96       	adiw	r24, 0x01	; 1
    2548:	a1 1d       	adc	r26, r1
    254a:	b1 1d       	adc	r27, r1
    254c:	80 93 90 16 	sts	0x1690, r24	; 0x801690 <xPendedTicks>
    2550:	90 93 91 16 	sts	0x1691, r25	; 0x801691 <xPendedTicks+0x1>
    2554:	a0 93 92 16 	sts	0x1692, r26	; 0x801692 <xPendedTicks+0x2>
    2558:	b0 93 93 16 	sts	0x1693, r27	; 0x801693 <xPendedTicks+0x3>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	01 c0       	rjmp	.+2      	; 0x2562 <xTaskIncrementTick+0x24a>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	08 95       	ret

00002570 <xTaskResumeAll>:
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	0f 92       	push	r0
    2582:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    2586:	81 50       	subi	r24, 0x01	; 1
    2588:	80 93 86 16 	sts	0x1686, r24	; 0x801686 <uxSchedulerSuspended>
    258c:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    2590:	81 11       	cpse	r24, r1
    2592:	be c0       	rjmp	.+380    	; 0x2710 <xTaskResumeAll+0x1a0>
    2594:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <uxCurrentNumberOfTasks>
    2598:	81 11       	cpse	r24, r1
    259a:	88 c0       	rjmp	.+272    	; 0x26ac <xTaskResumeAll+0x13c>
    259c:	bc c0       	rjmp	.+376    	; 0x2716 <xTaskResumeAll+0x1a6>
    259e:	e0 91 b9 16 	lds	r30, 0x16B9	; 0x8016b9 <xPendingReadyList+0x7>
    25a2:	f0 91 ba 16 	lds	r31, 0x16BA	; 0x8016ba <xPendingReadyList+0x8>
    25a6:	00 84       	ldd	r0, Z+8	; 0x08
    25a8:	f1 85       	ldd	r31, Z+9	; 0x09
    25aa:	e0 2d       	mov	r30, r0
    25ac:	a0 8d       	ldd	r26, Z+24	; 0x18
    25ae:	b1 8d       	ldd	r27, Z+25	; 0x19
    25b0:	c2 89       	ldd	r28, Z+18	; 0x12
    25b2:	d3 89       	ldd	r29, Z+19	; 0x13
    25b4:	84 89       	ldd	r24, Z+20	; 0x14
    25b6:	95 89       	ldd	r25, Z+21	; 0x15
    25b8:	9f 83       	std	Y+7, r25	; 0x07
    25ba:	8e 83       	std	Y+6, r24	; 0x06
    25bc:	c4 89       	ldd	r28, Z+20	; 0x14
    25be:	d5 89       	ldd	r29, Z+21	; 0x15
    25c0:	82 89       	ldd	r24, Z+18	; 0x12
    25c2:	93 89       	ldd	r25, Z+19	; 0x13
    25c4:	9d 83       	std	Y+5, r25	; 0x05
    25c6:	8c 83       	std	Y+4, r24	; 0x04
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	2d 91       	ld	r18, X+
    25cc:	3c 91       	ld	r19, X
    25ce:	12 97       	sbiw	r26, 0x02	; 2
    25d0:	cf 01       	movw	r24, r30
    25d2:	0e 96       	adiw	r24, 0x0e	; 14
    25d4:	28 17       	cp	r18, r24
    25d6:	39 07       	cpc	r19, r25
    25d8:	31 f4       	brne	.+12     	; 0x25e6 <xTaskResumeAll+0x76>
    25da:	84 89       	ldd	r24, Z+20	; 0x14
    25dc:	95 89       	ldd	r25, Z+21	; 0x15
    25de:	12 96       	adiw	r26, 0x02	; 2
    25e0:	9c 93       	st	X, r25
    25e2:	8e 93       	st	-X, r24
    25e4:	11 97       	sbiw	r26, 0x01	; 1
    25e6:	11 8e       	std	Z+25, r1	; 0x19
    25e8:	10 8e       	std	Z+24, r1	; 0x18
    25ea:	8c 91       	ld	r24, X
    25ec:	81 50       	subi	r24, 0x01	; 1
    25ee:	8c 93       	st	X, r24
    25f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f4:	c6 81       	ldd	r28, Z+6	; 0x06
    25f6:	d7 81       	ldd	r29, Z+7	; 0x07
    25f8:	80 85       	ldd	r24, Z+8	; 0x08
    25fa:	91 85       	ldd	r25, Z+9	; 0x09
    25fc:	9f 83       	std	Y+7, r25	; 0x07
    25fe:	8e 83       	std	Y+6, r24	; 0x06
    2600:	c0 85       	ldd	r28, Z+8	; 0x08
    2602:	d1 85       	ldd	r29, Z+9	; 0x09
    2604:	86 81       	ldd	r24, Z+6	; 0x06
    2606:	97 81       	ldd	r25, Z+7	; 0x07
    2608:	9d 83       	std	Y+5, r25	; 0x05
    260a:	8c 83       	std	Y+4, r24	; 0x04
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	8d 91       	ld	r24, X+
    2610:	9c 91       	ld	r25, X
    2612:	12 97       	sbiw	r26, 0x02	; 2
    2614:	9f 01       	movw	r18, r30
    2616:	2e 5f       	subi	r18, 0xFE	; 254
    2618:	3f 4f       	sbci	r19, 0xFF	; 255
    261a:	82 17       	cp	r24, r18
    261c:	93 07       	cpc	r25, r19
    261e:	31 f4       	brne	.+12     	; 0x262c <xTaskResumeAll+0xbc>
    2620:	80 85       	ldd	r24, Z+8	; 0x08
    2622:	91 85       	ldd	r25, Z+9	; 0x09
    2624:	12 96       	adiw	r26, 0x02	; 2
    2626:	9c 93       	st	X, r25
    2628:	8e 93       	st	-X, r24
    262a:	11 97       	sbiw	r26, 0x01	; 1
    262c:	15 86       	std	Z+13, r1	; 0x0d
    262e:	14 86       	std	Z+12, r1	; 0x0c
    2630:	8c 91       	ld	r24, X
    2632:	81 50       	subi	r24, 0x01	; 1
    2634:	8c 93       	st	X, r24
    2636:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2638:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    263c:	8a 17       	cp	r24, r26
    263e:	10 f4       	brcc	.+4      	; 0x2644 <xTaskResumeAll+0xd4>
    2640:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <uxTopReadyPriority>
    2644:	8b e0       	ldi	r24, 0x0B	; 11
    2646:	8a 9f       	mul	r24, r26
    2648:	d0 01       	movw	r26, r0
    264a:	11 24       	eor	r1, r1
    264c:	a9 52       	subi	r26, 0x29	; 41
    264e:	b9 4e       	sbci	r27, 0xE9	; 233
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	0d 90       	ld	r0, X+
    2654:	bc 91       	ld	r27, X
    2656:	a0 2d       	mov	r26, r0
    2658:	b7 83       	std	Z+7, r27	; 0x07
    265a:	a6 83       	std	Z+6, r26	; 0x06
    265c:	16 96       	adiw	r26, 0x06	; 6
    265e:	4d 91       	ld	r20, X+
    2660:	5c 91       	ld	r21, X
    2662:	17 97       	sbiw	r26, 0x07	; 7
    2664:	51 87       	std	Z+9, r21	; 0x09
    2666:	40 87       	std	Z+8, r20	; 0x08
    2668:	16 96       	adiw	r26, 0x06	; 6
    266a:	cd 91       	ld	r28, X+
    266c:	dc 91       	ld	r29, X
    266e:	17 97       	sbiw	r26, 0x07	; 7
    2670:	3d 83       	std	Y+5, r19	; 0x05
    2672:	2c 83       	std	Y+4, r18	; 0x04
    2674:	17 96       	adiw	r26, 0x07	; 7
    2676:	3c 93       	st	X, r19
    2678:	2e 93       	st	-X, r18
    267a:	16 97       	sbiw	r26, 0x06	; 6
    267c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    267e:	8a 9f       	mul	r24, r26
    2680:	d0 01       	movw	r26, r0
    2682:	11 24       	eor	r1, r1
    2684:	a9 52       	subi	r26, 0x29	; 41
    2686:	b9 4e       	sbci	r27, 0xE9	; 233
    2688:	b5 87       	std	Z+13, r27	; 0x0d
    268a:	a4 87       	std	Z+12, r26	; 0x0c
    268c:	8c 91       	ld	r24, X
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	8c 93       	st	X, r24
    2692:	92 8d       	ldd	r25, Z+26	; 0x1a
    2694:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2698:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    269c:	5a 96       	adiw	r26, 0x1a	; 26
    269e:	8c 91       	ld	r24, X
    26a0:	98 17       	cp	r25, r24
    26a2:	30 f0       	brcs	.+12     	; 0x26b0 <xTaskResumeAll+0x140>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <xYieldPending>
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <xTaskResumeAll+0x140>
    26ac:	e0 e0       	ldi	r30, 0x00	; 0
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <xPendingReadyList>
    26b4:	81 11       	cpse	r24, r1
    26b6:	73 cf       	rjmp	.-282    	; 0x259e <xTaskResumeAll+0x2e>
    26b8:	ef 2b       	or	r30, r31
    26ba:	09 f0       	breq	.+2      	; 0x26be <xTaskResumeAll+0x14e>
    26bc:	7d db       	rcall	.-2310   	; 0x1db8 <prvResetNextTaskUnblockTime>
    26be:	c0 90 90 16 	lds	r12, 0x1690	; 0x801690 <xPendedTicks>
    26c2:	d0 90 91 16 	lds	r13, 0x1691	; 0x801691 <xPendedTicks+0x1>
    26c6:	e0 90 92 16 	lds	r14, 0x1692	; 0x801692 <xPendedTicks+0x2>
    26ca:	f0 90 93 16 	lds	r15, 0x1693	; 0x801693 <xPendedTicks+0x3>
    26ce:	c1 14       	cp	r12, r1
    26d0:	d1 04       	cpc	r13, r1
    26d2:	e1 04       	cpc	r14, r1
    26d4:	f1 04       	cpc	r15, r1
    26d6:	a1 f0       	breq	.+40     	; 0x2700 <xTaskResumeAll+0x190>
    26d8:	1f de       	rcall	.-962    	; 0x2318 <xTaskIncrementTick>
    26da:	88 23       	and	r24, r24
    26dc:	19 f0       	breq	.+6      	; 0x26e4 <xTaskResumeAll+0x174>
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <xYieldPending>
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	c8 1a       	sub	r12, r24
    26e8:	d1 08       	sbc	r13, r1
    26ea:	e1 08       	sbc	r14, r1
    26ec:	f1 08       	sbc	r15, r1
    26ee:	a1 f7       	brne	.-24     	; 0x26d8 <xTaskResumeAll+0x168>
    26f0:	10 92 90 16 	sts	0x1690, r1	; 0x801690 <xPendedTicks>
    26f4:	10 92 91 16 	sts	0x1691, r1	; 0x801691 <xPendedTicks+0x1>
    26f8:	10 92 92 16 	sts	0x1692, r1	; 0x801692 <xPendedTicks+0x2>
    26fc:	10 92 93 16 	sts	0x1693, r1	; 0x801693 <xPendedTicks+0x3>
    2700:	80 91 8f 16 	lds	r24, 0x168F	; 0x80168f <xYieldPending>
    2704:	88 23       	and	r24, r24
    2706:	31 f0       	breq	.+12     	; 0x2714 <xTaskResumeAll+0x1a4>
    2708:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <xTaskResumeAll+0x1a6>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <xTaskResumeAll+0x1a6>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	0f 90       	pop	r0
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	df 90       	pop	r13
    2724:	cf 90       	pop	r12
    2726:	08 95       	ret

00002728 <xTaskDelayUntil>:
    2728:	8f 92       	push	r8
    272a:	9f 92       	push	r9
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	ec 01       	movw	r28, r24
    2740:	6a 01       	movw	r12, r20
    2742:	7b 01       	movw	r14, r22
    2744:	d5 dd       	rcall	.-1110   	; 0x22f0 <vTaskSuspendAll>
    2746:	80 90 96 16 	lds	r8, 0x1696	; 0x801696 <xTickCount>
    274a:	90 90 97 16 	lds	r9, 0x1697	; 0x801697 <xTickCount+0x1>
    274e:	a0 90 98 16 	lds	r10, 0x1698	; 0x801698 <xTickCount+0x2>
    2752:	b0 90 99 16 	lds	r11, 0x1699	; 0x801699 <xTickCount+0x3>
    2756:	88 81       	ld	r24, Y
    2758:	99 81       	ldd	r25, Y+1	; 0x01
    275a:	aa 81       	ldd	r26, Y+2	; 0x02
    275c:	bb 81       	ldd	r27, Y+3	; 0x03
    275e:	ac 01       	movw	r20, r24
    2760:	bd 01       	movw	r22, r26
    2762:	4c 0d       	add	r20, r12
    2764:	5d 1d       	adc	r21, r13
    2766:	6e 1d       	adc	r22, r14
    2768:	7f 1d       	adc	r23, r15
    276a:	88 16       	cp	r8, r24
    276c:	99 06       	cpc	r9, r25
    276e:	aa 06       	cpc	r10, r26
    2770:	bb 06       	cpc	r11, r27
    2772:	60 f4       	brcc	.+24     	; 0x278c <xTaskDelayUntil+0x64>
    2774:	48 17       	cp	r20, r24
    2776:	59 07       	cpc	r21, r25
    2778:	6a 07       	cpc	r22, r26
    277a:	7b 07       	cpc	r23, r27
    277c:	98 f4       	brcc	.+38     	; 0x27a4 <xTaskDelayUntil+0x7c>
    277e:	84 16       	cp	r8, r20
    2780:	95 06       	cpc	r9, r21
    2782:	a6 06       	cpc	r10, r22
    2784:	b7 06       	cpc	r11, r23
    2786:	80 f0       	brcs	.+32     	; 0x27a8 <xTaskDelayUntil+0x80>
    2788:	10 e0       	ldi	r17, 0x00	; 0
    278a:	13 c0       	rjmp	.+38     	; 0x27b2 <xTaskDelayUntil+0x8a>
    278c:	48 17       	cp	r20, r24
    278e:	59 07       	cpc	r21, r25
    2790:	6a 07       	cpc	r22, r26
    2792:	7b 07       	cpc	r23, r27
    2794:	58 f0       	brcs	.+22     	; 0x27ac <xTaskDelayUntil+0x84>
    2796:	84 16       	cp	r8, r20
    2798:	95 06       	cpc	r9, r21
    279a:	a6 06       	cpc	r10, r22
    279c:	b7 06       	cpc	r11, r23
    279e:	40 f0       	brcs	.+16     	; 0x27b0 <xTaskDelayUntil+0x88>
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	07 c0       	rjmp	.+14     	; 0x27b2 <xTaskDelayUntil+0x8a>
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	05 c0       	rjmp	.+10     	; 0x27b2 <xTaskDelayUntil+0x8a>
    27a8:	11 e0       	ldi	r17, 0x01	; 1
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <xTaskDelayUntil+0x8a>
    27ac:	11 e0       	ldi	r17, 0x01	; 1
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <xTaskDelayUntil+0x8a>
    27b0:	11 e0       	ldi	r17, 0x01	; 1
    27b2:	48 83       	st	Y, r20
    27b4:	59 83       	std	Y+1, r21	; 0x01
    27b6:	6a 83       	std	Y+2, r22	; 0x02
    27b8:	7b 83       	std	Y+3, r23	; 0x03
    27ba:	11 23       	and	r17, r17
    27bc:	41 f0       	breq	.+16     	; 0x27ce <xTaskDelayUntil+0xa6>
    27be:	cb 01       	movw	r24, r22
    27c0:	ba 01       	movw	r22, r20
    27c2:	68 19       	sub	r22, r8
    27c4:	79 09       	sbc	r23, r9
    27c6:	8a 09       	sbc	r24, r10
    27c8:	9b 09       	sbc	r25, r11
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	6b dc       	rcall	.-1834   	; 0x20a4 <prvAddCurrentTaskToDelayedList>
    27ce:	d0 de       	rcall	.-608    	; 0x2570 <xTaskResumeAll>
    27d0:	81 11       	cpse	r24, r1
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <xTaskDelayUntil+0xb0>
    27d4:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    27d8:	81 2f       	mov	r24, r17
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	df 90       	pop	r13
    27e6:	cf 90       	pop	r12
    27e8:	bf 90       	pop	r11
    27ea:	af 90       	pop	r10
    27ec:	9f 90       	pop	r9
    27ee:	8f 90       	pop	r8
    27f0:	08 95       	ret

000027f2 <vTaskDelay>:
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	6b 01       	movw	r12, r22
    27fc:	7c 01       	movw	r14, r24
    27fe:	67 2b       	or	r22, r23
    2800:	68 2b       	or	r22, r24
    2802:	69 2b       	or	r22, r25
    2804:	39 f0       	breq	.+14     	; 0x2814 <vTaskDelay+0x22>
    2806:	74 dd       	rcall	.-1304   	; 0x22f0 <vTaskSuspendAll>
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	c7 01       	movw	r24, r14
    280c:	b6 01       	movw	r22, r12
    280e:	4a dc       	rcall	.-1900   	; 0x20a4 <prvAddCurrentTaskToDelayedList>
    2810:	af de       	rcall	.-674    	; 0x2570 <xTaskResumeAll>
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <vTaskDelay+0x24>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	81 11       	cpse	r24, r1
    2818:	02 c0       	rjmp	.+4      	; 0x281e <vTaskDelay+0x2c>
    281a:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	df 90       	pop	r13
    2824:	cf 90       	pop	r12
    2826:	08 95       	ret

00002828 <vTaskSwitchContext>:
    2828:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    282c:	88 23       	and	r24, r24
    282e:	21 f0       	breq	.+8      	; 0x2838 <vTaskSwitchContext+0x10>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <xYieldPending>
    2836:	08 95       	ret
    2838:	10 92 8f 16 	sts	0x168F, r1	; 0x80168f <xYieldPending>
    283c:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2840:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2844:	20 81       	ld	r18, Z
    2846:	31 81       	ldd	r19, Z+1	; 0x01
    2848:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    284c:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2850:	83 8d       	ldd	r24, Z+27	; 0x1b
    2852:	94 8d       	ldd	r25, Z+28	; 0x1c
    2854:	82 17       	cp	r24, r18
    2856:	93 07       	cpc	r25, r19
    2858:	60 f0       	brcs	.+24     	; 0x2872 <vTaskSwitchContext+0x4a>
    285a:	60 91 45 17 	lds	r22, 0x1745	; 0x801745 <pxCurrentTCB>
    285e:	70 91 46 17 	lds	r23, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2862:	63 5e       	subi	r22, 0xE3	; 227
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    286a:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    286e:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <vApplicationStackOverflowHook>
    2872:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    2876:	01 c0       	rjmp	.+2      	; 0x287a <vTaskSwitchContext+0x52>
    2878:	81 50       	subi	r24, 0x01	; 1
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	9b e0       	ldi	r25, 0x0B	; 11
    2880:	92 9f       	mul	r25, r18
    2882:	f0 01       	movw	r30, r0
    2884:	93 9f       	mul	r25, r19
    2886:	f0 0d       	add	r31, r0
    2888:	11 24       	eor	r1, r1
    288a:	e9 52       	subi	r30, 0x29	; 41
    288c:	f9 4e       	sbci	r31, 0xE9	; 233
    288e:	90 81       	ld	r25, Z
    2890:	99 23       	and	r25, r25
    2892:	91 f3       	breq	.-28     	; 0x2878 <vTaskSwitchContext+0x50>
    2894:	9b e0       	ldi	r25, 0x0B	; 11
    2896:	92 9f       	mul	r25, r18
    2898:	a0 01       	movw	r20, r0
    289a:	93 9f       	mul	r25, r19
    289c:	50 0d       	add	r21, r0
    289e:	11 24       	eor	r1, r1
    28a0:	df 01       	movw	r26, r30
    28a2:	01 80       	ldd	r0, Z+1	; 0x01
    28a4:	f2 81       	ldd	r31, Z+2	; 0x02
    28a6:	e0 2d       	mov	r30, r0
    28a8:	04 80       	ldd	r0, Z+4	; 0x04
    28aa:	f5 81       	ldd	r31, Z+5	; 0x05
    28ac:	e0 2d       	mov	r30, r0
    28ae:	12 96       	adiw	r26, 0x02	; 2
    28b0:	fc 93       	st	X, r31
    28b2:	ee 93       	st	-X, r30
    28b4:	11 97       	sbiw	r26, 0x01	; 1
    28b6:	46 52       	subi	r20, 0x26	; 38
    28b8:	59 4e       	sbci	r21, 0xE9	; 233
    28ba:	e4 17       	cp	r30, r20
    28bc:	f5 07       	cpc	r31, r21
    28be:	29 f4       	brne	.+10     	; 0x28ca <vTaskSwitchContext+0xa2>
    28c0:	44 81       	ldd	r20, Z+4	; 0x04
    28c2:	55 81       	ldd	r21, Z+5	; 0x05
    28c4:	fd 01       	movw	r30, r26
    28c6:	52 83       	std	Z+2, r21	; 0x02
    28c8:	41 83       	std	Z+1, r20	; 0x01
    28ca:	9b e0       	ldi	r25, 0x0B	; 11
    28cc:	92 9f       	mul	r25, r18
    28ce:	f0 01       	movw	r30, r0
    28d0:	93 9f       	mul	r25, r19
    28d2:	f0 0d       	add	r31, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	e9 52       	subi	r30, 0x29	; 41
    28d8:	f9 4e       	sbci	r31, 0xE9	; 233
    28da:	01 80       	ldd	r0, Z+1	; 0x01
    28dc:	f2 81       	ldd	r31, Z+2	; 0x02
    28de:	e0 2d       	mov	r30, r0
    28e0:	20 85       	ldd	r18, Z+8	; 0x08
    28e2:	31 85       	ldd	r19, Z+9	; 0x09
    28e4:	30 93 46 17 	sts	0x1746, r19	; 0x801746 <pxCurrentTCB+0x1>
    28e8:	20 93 45 17 	sts	0x1745, r18	; 0x801745 <pxCurrentTCB>
    28ec:	80 93 95 16 	sts	0x1695, r24	; 0x801695 <uxTopReadyPriority>
    28f0:	08 95       	ret

000028f2 <vTaskPlaceOnEventList>:
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	6a 01       	movw	r12, r20
    28fc:	7b 01       	movw	r14, r22
    28fe:	60 91 45 17 	lds	r22, 0x1745	; 0x801745 <pxCurrentTCB>
    2902:	70 91 46 17 	lds	r23, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2906:	62 5f       	subi	r22, 0xF2	; 242
    2908:	7f 4f       	sbci	r23, 0xFF	; 255
    290a:	0e 94 93 06 	call	0xd26	; 0xd26 <vListInsert>
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	c7 01       	movw	r24, r14
    2912:	b6 01       	movw	r22, r12
    2914:	c7 db       	rcall	.-2162   	; 0x20a4 <prvAddCurrentTaskToDelayedList>
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	df 90       	pop	r13
    291c:	cf 90       	pop	r12
    291e:	08 95       	ret

00002920 <vTaskPlaceOnUnorderedEventList>:
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	fc 01       	movw	r30, r24
    292a:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    292e:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2932:	70 68       	ori	r23, 0x80	; 128
    2934:	1e 96       	adiw	r26, 0x0e	; 14
    2936:	4d 93       	st	X+, r20
    2938:	5d 93       	st	X+, r21
    293a:	6d 93       	st	X+, r22
    293c:	7c 93       	st	X, r23
    293e:	51 97       	sbiw	r26, 0x11	; 17
    2940:	a1 81       	ldd	r26, Z+1	; 0x01
    2942:	b2 81       	ldd	r27, Z+2	; 0x02
    2944:	c0 91 45 17 	lds	r28, 0x1745	; 0x801745 <pxCurrentTCB>
    2948:	d0 91 46 17 	lds	r29, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    294c:	bb 8b       	std	Y+19, r27	; 0x13
    294e:	aa 8b       	std	Y+18, r26	; 0x12
    2950:	c0 91 45 17 	lds	r28, 0x1745	; 0x801745 <pxCurrentTCB>
    2954:	d0 91 46 17 	lds	r29, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2958:	16 96       	adiw	r26, 0x06	; 6
    295a:	8d 91       	ld	r24, X+
    295c:	9c 91       	ld	r25, X
    295e:	17 97       	sbiw	r26, 0x07	; 7
    2960:	9d 8b       	std	Y+21, r25	; 0x15
    2962:	8c 8b       	std	Y+20, r24	; 0x14
    2964:	16 96       	adiw	r26, 0x06	; 6
    2966:	cd 91       	ld	r28, X+
    2968:	dc 91       	ld	r29, X
    296a:	17 97       	sbiw	r26, 0x07	; 7
    296c:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    2970:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2974:	0e 96       	adiw	r24, 0x0e	; 14
    2976:	9d 83       	std	Y+5, r25	; 0x05
    2978:	8c 83       	std	Y+4, r24	; 0x04
    297a:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    297e:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2982:	0e 96       	adiw	r24, 0x0e	; 14
    2984:	17 96       	adiw	r26, 0x07	; 7
    2986:	9c 93       	st	X, r25
    2988:	8e 93       	st	-X, r24
    298a:	16 97       	sbiw	r26, 0x06	; 6
    298c:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2990:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2994:	59 96       	adiw	r26, 0x19	; 25
    2996:	fc 93       	st	X, r31
    2998:	ee 93       	st	-X, r30
    299a:	58 97       	sbiw	r26, 0x18	; 24
    299c:	80 81       	ld	r24, Z
    299e:	8f 5f       	subi	r24, 0xFF	; 255
    29a0:	80 83       	st	Z, r24
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	c9 01       	movw	r24, r18
    29a6:	b8 01       	movw	r22, r16
    29a8:	7d db       	rcall	.-2310   	; 0x20a4 <prvAddCurrentTaskToDelayedList>
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <vTaskPlaceOnEventListRestricted>:
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	fc 01       	movw	r30, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	ba 01       	movw	r22, r20
    29be:	a1 81       	ldd	r26, Z+1	; 0x01
    29c0:	b2 81       	ldd	r27, Z+2	; 0x02
    29c2:	c0 91 45 17 	lds	r28, 0x1745	; 0x801745 <pxCurrentTCB>
    29c6:	d0 91 46 17 	lds	r29, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    29ca:	bb 8b       	std	Y+19, r27	; 0x13
    29cc:	aa 8b       	std	Y+18, r26	; 0x12
    29ce:	c0 91 45 17 	lds	r28, 0x1745	; 0x801745 <pxCurrentTCB>
    29d2:	d0 91 46 17 	lds	r29, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    29d6:	16 96       	adiw	r26, 0x06	; 6
    29d8:	4d 91       	ld	r20, X+
    29da:	5c 91       	ld	r21, X
    29dc:	17 97       	sbiw	r26, 0x07	; 7
    29de:	5d 8b       	std	Y+21, r21	; 0x15
    29e0:	4c 8b       	std	Y+20, r20	; 0x14
    29e2:	16 96       	adiw	r26, 0x06	; 6
    29e4:	cd 91       	ld	r28, X+
    29e6:	dc 91       	ld	r29, X
    29e8:	17 97       	sbiw	r26, 0x07	; 7
    29ea:	40 91 45 17 	lds	r20, 0x1745	; 0x801745 <pxCurrentTCB>
    29ee:	50 91 46 17 	lds	r21, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    29f2:	42 5f       	subi	r20, 0xF2	; 242
    29f4:	5f 4f       	sbci	r21, 0xFF	; 255
    29f6:	5d 83       	std	Y+5, r21	; 0x05
    29f8:	4c 83       	std	Y+4, r20	; 0x04
    29fa:	40 91 45 17 	lds	r20, 0x1745	; 0x801745 <pxCurrentTCB>
    29fe:	50 91 46 17 	lds	r21, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2a02:	42 5f       	subi	r20, 0xF2	; 242
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
    2a06:	17 96       	adiw	r26, 0x07	; 7
    2a08:	5c 93       	st	X, r21
    2a0a:	4e 93       	st	-X, r20
    2a0c:	16 97       	sbiw	r26, 0x06	; 6
    2a0e:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2a12:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2a16:	59 96       	adiw	r26, 0x19	; 25
    2a18:	fc 93       	st	X, r31
    2a1a:	ee 93       	st	-X, r30
    2a1c:	58 97       	sbiw	r26, 0x18	; 24
    2a1e:	30 81       	ld	r19, Z
    2a20:	3f 5f       	subi	r19, 0xFF	; 255
    2a22:	30 83       	st	Z, r19
    2a24:	22 23       	and	r18, r18
    2a26:	19 f0       	breq	.+6      	; 0x2a2e <vTaskPlaceOnEventListRestricted+0x7a>
    2a28:	6f ef       	ldi	r22, 0xFF	; 255
    2a2a:	7f ef       	ldi	r23, 0xFF	; 255
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	42 2f       	mov	r20, r18
    2a30:	39 db       	rcall	.-2446   	; 0x20a4 <prvAddCurrentTaskToDelayedList>
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	08 95       	ret

00002a38 <xTaskRemoveFromEventList>:
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	17 96       	adiw	r26, 0x07	; 7
    2a40:	ed 91       	ld	r30, X+
    2a42:	fc 91       	ld	r31, X
    2a44:	18 97       	sbiw	r26, 0x08	; 8
    2a46:	00 84       	ldd	r0, Z+8	; 0x08
    2a48:	f1 85       	ldd	r31, Z+9	; 0x09
    2a4a:	e0 2d       	mov	r30, r0
    2a4c:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a4e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a50:	c2 89       	ldd	r28, Z+18	; 0x12
    2a52:	d3 89       	ldd	r29, Z+19	; 0x13
    2a54:	84 89       	ldd	r24, Z+20	; 0x14
    2a56:	95 89       	ldd	r25, Z+21	; 0x15
    2a58:	9f 83       	std	Y+7, r25	; 0x07
    2a5a:	8e 83       	std	Y+6, r24	; 0x06
    2a5c:	c4 89       	ldd	r28, Z+20	; 0x14
    2a5e:	d5 89       	ldd	r29, Z+21	; 0x15
    2a60:	82 89       	ldd	r24, Z+18	; 0x12
    2a62:	93 89       	ldd	r25, Z+19	; 0x13
    2a64:	9d 83       	std	Y+5, r25	; 0x05
    2a66:	8c 83       	std	Y+4, r24	; 0x04
    2a68:	11 96       	adiw	r26, 0x01	; 1
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	12 97       	sbiw	r26, 0x02	; 2
    2a70:	9f 01       	movw	r18, r30
    2a72:	22 5f       	subi	r18, 0xF2	; 242
    2a74:	3f 4f       	sbci	r19, 0xFF	; 255
    2a76:	82 17       	cp	r24, r18
    2a78:	93 07       	cpc	r25, r19
    2a7a:	31 f4       	brne	.+12     	; 0x2a88 <xTaskRemoveFromEventList+0x50>
    2a7c:	84 89       	ldd	r24, Z+20	; 0x14
    2a7e:	95 89       	ldd	r25, Z+21	; 0x15
    2a80:	12 96       	adiw	r26, 0x02	; 2
    2a82:	9c 93       	st	X, r25
    2a84:	8e 93       	st	-X, r24
    2a86:	11 97       	sbiw	r26, 0x01	; 1
    2a88:	11 8e       	std	Z+25, r1	; 0x19
    2a8a:	10 8e       	std	Z+24, r1	; 0x18
    2a8c:	8c 91       	ld	r24, X
    2a8e:	81 50       	subi	r24, 0x01	; 1
    2a90:	8c 93       	st	X, r24
    2a92:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    2a96:	81 11       	cpse	r24, r1
    2a98:	52 c0       	rjmp	.+164    	; 0x2b3e <xTaskRemoveFromEventList+0x106>
    2a9a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a9c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a9e:	c6 81       	ldd	r28, Z+6	; 0x06
    2aa0:	d7 81       	ldd	r29, Z+7	; 0x07
    2aa2:	80 85       	ldd	r24, Z+8	; 0x08
    2aa4:	91 85       	ldd	r25, Z+9	; 0x09
    2aa6:	9f 83       	std	Y+7, r25	; 0x07
    2aa8:	8e 83       	std	Y+6, r24	; 0x06
    2aaa:	c0 85       	ldd	r28, Z+8	; 0x08
    2aac:	d1 85       	ldd	r29, Z+9	; 0x09
    2aae:	86 81       	ldd	r24, Z+6	; 0x06
    2ab0:	97 81       	ldd	r25, Z+7	; 0x07
    2ab2:	9d 83       	std	Y+5, r25	; 0x05
    2ab4:	8c 83       	std	Y+4, r24	; 0x04
    2ab6:	11 96       	adiw	r26, 0x01	; 1
    2ab8:	8d 91       	ld	r24, X+
    2aba:	9c 91       	ld	r25, X
    2abc:	12 97       	sbiw	r26, 0x02	; 2
    2abe:	9f 01       	movw	r18, r30
    2ac0:	2e 5f       	subi	r18, 0xFE	; 254
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	82 17       	cp	r24, r18
    2ac6:	93 07       	cpc	r25, r19
    2ac8:	31 f4       	brne	.+12     	; 0x2ad6 <xTaskRemoveFromEventList+0x9e>
    2aca:	80 85       	ldd	r24, Z+8	; 0x08
    2acc:	91 85       	ldd	r25, Z+9	; 0x09
    2ace:	12 96       	adiw	r26, 0x02	; 2
    2ad0:	9c 93       	st	X, r25
    2ad2:	8e 93       	st	-X, r24
    2ad4:	11 97       	sbiw	r26, 0x01	; 1
    2ad6:	15 86       	std	Z+13, r1	; 0x0d
    2ad8:	14 86       	std	Z+12, r1	; 0x0c
    2ada:	8c 91       	ld	r24, X
    2adc:	81 50       	subi	r24, 0x01	; 1
    2ade:	8c 93       	st	X, r24
    2ae0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2ae2:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    2ae6:	8a 17       	cp	r24, r26
    2ae8:	10 f4       	brcc	.+4      	; 0x2aee <xTaskRemoveFromEventList+0xb6>
    2aea:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <uxTopReadyPriority>
    2aee:	8b e0       	ldi	r24, 0x0B	; 11
    2af0:	8a 9f       	mul	r24, r26
    2af2:	d0 01       	movw	r26, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	a9 52       	subi	r26, 0x29	; 41
    2af8:	b9 4e       	sbci	r27, 0xE9	; 233
    2afa:	11 96       	adiw	r26, 0x01	; 1
    2afc:	0d 90       	ld	r0, X+
    2afe:	bc 91       	ld	r27, X
    2b00:	a0 2d       	mov	r26, r0
    2b02:	b7 83       	std	Z+7, r27	; 0x07
    2b04:	a6 83       	std	Z+6, r26	; 0x06
    2b06:	16 96       	adiw	r26, 0x06	; 6
    2b08:	4d 91       	ld	r20, X+
    2b0a:	5c 91       	ld	r21, X
    2b0c:	17 97       	sbiw	r26, 0x07	; 7
    2b0e:	51 87       	std	Z+9, r21	; 0x09
    2b10:	40 87       	std	Z+8, r20	; 0x08
    2b12:	16 96       	adiw	r26, 0x06	; 6
    2b14:	cd 91       	ld	r28, X+
    2b16:	dc 91       	ld	r29, X
    2b18:	17 97       	sbiw	r26, 0x07	; 7
    2b1a:	3d 83       	std	Y+5, r19	; 0x05
    2b1c:	2c 83       	std	Y+4, r18	; 0x04
    2b1e:	17 96       	adiw	r26, 0x07	; 7
    2b20:	3c 93       	st	X, r19
    2b22:	2e 93       	st	-X, r18
    2b24:	16 97       	sbiw	r26, 0x06	; 6
    2b26:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b28:	8a 9f       	mul	r24, r26
    2b2a:	d0 01       	movw	r26, r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	a9 52       	subi	r26, 0x29	; 41
    2b30:	b9 4e       	sbci	r27, 0xE9	; 233
    2b32:	b5 87       	std	Z+13, r27	; 0x0d
    2b34:	a4 87       	std	Z+12, r26	; 0x0c
    2b36:	8c 91       	ld	r24, X
    2b38:	8f 5f       	subi	r24, 0xFF	; 255
    2b3a:	8c 93       	st	X, r24
    2b3c:	1c c0       	rjmp	.+56     	; 0x2b76 <xTaskRemoveFromEventList+0x13e>
    2b3e:	42 eb       	ldi	r20, 0xB2	; 178
    2b40:	56 e1       	ldi	r21, 0x16	; 22
    2b42:	da 01       	movw	r26, r20
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	cd 91       	ld	r28, X+
    2b48:	dc 91       	ld	r29, X
    2b4a:	12 97       	sbiw	r26, 0x02	; 2
    2b4c:	d3 8b       	std	Z+19, r29	; 0x13
    2b4e:	c2 8b       	std	Z+18, r28	; 0x12
    2b50:	8e 81       	ldd	r24, Y+6	; 0x06
    2b52:	9f 81       	ldd	r25, Y+7	; 0x07
    2b54:	95 8b       	std	Z+21, r25	; 0x15
    2b56:	84 8b       	std	Z+20, r24	; 0x14
    2b58:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	15 96       	adiw	r26, 0x05	; 5
    2b60:	3c 93       	st	X, r19
    2b62:	2e 93       	st	-X, r18
    2b64:	14 97       	sbiw	r26, 0x04	; 4
    2b66:	3f 83       	std	Y+7, r19	; 0x07
    2b68:	2e 83       	std	Y+6, r18	; 0x06
    2b6a:	51 8f       	std	Z+25, r21	; 0x19
    2b6c:	40 8f       	std	Z+24, r20	; 0x18
    2b6e:	da 01       	movw	r26, r20
    2b70:	8c 91       	ld	r24, X
    2b72:	8f 5f       	subi	r24, 0xFF	; 255
    2b74:	8c 93       	st	X, r24
    2b76:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b78:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2b7c:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2b80:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b82:	89 17       	cp	r24, r25
    2b84:	20 f4       	brcc	.+8      	; 0x2b8e <xTaskRemoveFromEventList+0x156>
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <xYieldPending>
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <xTaskRemoveFromEventList+0x158>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <vTaskRemoveFromUnorderedEventList>:
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	70 68       	ori	r23, 0x80	; 128
    2b9e:	4d 93       	st	X+, r20
    2ba0:	5d 93       	st	X+, r21
    2ba2:	6d 93       	st	X+, r22
    2ba4:	7c 93       	st	X, r23
    2ba6:	13 97       	sbiw	r26, 0x03	; 3
    2ba8:	18 96       	adiw	r26, 0x08	; 8
    2baa:	ed 91       	ld	r30, X+
    2bac:	fc 91       	ld	r31, X
    2bae:	19 97       	sbiw	r26, 0x09	; 9
    2bb0:	1a 96       	adiw	r26, 0x0a	; 10
    2bb2:	4d 91       	ld	r20, X+
    2bb4:	5c 91       	ld	r21, X
    2bb6:	1b 97       	sbiw	r26, 0x0b	; 11
    2bb8:	14 96       	adiw	r26, 0x04	; 4
    2bba:	8d 91       	ld	r24, X+
    2bbc:	9c 91       	ld	r25, X
    2bbe:	15 97       	sbiw	r26, 0x05	; 5
    2bc0:	16 96       	adiw	r26, 0x06	; 6
    2bc2:	2d 91       	ld	r18, X+
    2bc4:	3c 91       	ld	r19, X
    2bc6:	17 97       	sbiw	r26, 0x07	; 7
    2bc8:	ec 01       	movw	r28, r24
    2bca:	3f 83       	std	Y+7, r19	; 0x07
    2bcc:	2e 83       	std	Y+6, r18	; 0x06
    2bce:	16 96       	adiw	r26, 0x06	; 6
    2bd0:	8d 91       	ld	r24, X+
    2bd2:	9c 91       	ld	r25, X
    2bd4:	17 97       	sbiw	r26, 0x07	; 7
    2bd6:	14 96       	adiw	r26, 0x04	; 4
    2bd8:	2d 91       	ld	r18, X+
    2bda:	3c 91       	ld	r19, X
    2bdc:	15 97       	sbiw	r26, 0x05	; 5
    2bde:	ec 01       	movw	r28, r24
    2be0:	3d 83       	std	Y+5, r19	; 0x05
    2be2:	2c 83       	std	Y+4, r18	; 0x04
    2be4:	ea 01       	movw	r28, r20
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	a8 17       	cp	r26, r24
    2bec:	b9 07       	cpc	r27, r25
    2bee:	31 f4       	brne	.+12     	; 0x2bfc <vTaskRemoveFromUnorderedEventList+0x66>
    2bf0:	16 96       	adiw	r26, 0x06	; 6
    2bf2:	8d 91       	ld	r24, X+
    2bf4:	9c 91       	ld	r25, X
    2bf6:	17 97       	sbiw	r26, 0x07	; 7
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
    2bfc:	1b 96       	adiw	r26, 0x0b	; 11
    2bfe:	1c 92       	st	X, r1
    2c00:	1e 92       	st	-X, r1
    2c02:	1a 97       	sbiw	r26, 0x0a	; 10
    2c04:	da 01       	movw	r26, r20
    2c06:	8c 91       	ld	r24, X
    2c08:	81 50       	subi	r24, 0x01	; 1
    2c0a:	8c 93       	st	X, r24
    2c0c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c0e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c10:	c6 81       	ldd	r28, Z+6	; 0x06
    2c12:	d7 81       	ldd	r29, Z+7	; 0x07
    2c14:	80 85       	ldd	r24, Z+8	; 0x08
    2c16:	91 85       	ldd	r25, Z+9	; 0x09
    2c18:	9f 83       	std	Y+7, r25	; 0x07
    2c1a:	8e 83       	std	Y+6, r24	; 0x06
    2c1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2c1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2c20:	86 81       	ldd	r24, Z+6	; 0x06
    2c22:	97 81       	ldd	r25, Z+7	; 0x07
    2c24:	9d 83       	std	Y+5, r25	; 0x05
    2c26:	8c 83       	std	Y+4, r24	; 0x04
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	8d 91       	ld	r24, X+
    2c2c:	9c 91       	ld	r25, X
    2c2e:	12 97       	sbiw	r26, 0x02	; 2
    2c30:	9f 01       	movw	r18, r30
    2c32:	2e 5f       	subi	r18, 0xFE	; 254
    2c34:	3f 4f       	sbci	r19, 0xFF	; 255
    2c36:	82 17       	cp	r24, r18
    2c38:	93 07       	cpc	r25, r19
    2c3a:	31 f4       	brne	.+12     	; 0x2c48 <vTaskRemoveFromUnorderedEventList+0xb2>
    2c3c:	80 85       	ldd	r24, Z+8	; 0x08
    2c3e:	91 85       	ldd	r25, Z+9	; 0x09
    2c40:	12 96       	adiw	r26, 0x02	; 2
    2c42:	9c 93       	st	X, r25
    2c44:	8e 93       	st	-X, r24
    2c46:	11 97       	sbiw	r26, 0x01	; 1
    2c48:	15 86       	std	Z+13, r1	; 0x0d
    2c4a:	14 86       	std	Z+12, r1	; 0x0c
    2c4c:	8c 91       	ld	r24, X
    2c4e:	81 50       	subi	r24, 0x01	; 1
    2c50:	8c 93       	st	X, r24
    2c52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c54:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    2c58:	8a 17       	cp	r24, r26
    2c5a:	10 f4       	brcc	.+4      	; 0x2c60 <vTaskRemoveFromUnorderedEventList+0xca>
    2c5c:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <uxTopReadyPriority>
    2c60:	8b e0       	ldi	r24, 0x0B	; 11
    2c62:	8a 9f       	mul	r24, r26
    2c64:	d0 01       	movw	r26, r0
    2c66:	11 24       	eor	r1, r1
    2c68:	a9 52       	subi	r26, 0x29	; 41
    2c6a:	b9 4e       	sbci	r27, 0xE9	; 233
    2c6c:	11 96       	adiw	r26, 0x01	; 1
    2c6e:	0d 90       	ld	r0, X+
    2c70:	bc 91       	ld	r27, X
    2c72:	a0 2d       	mov	r26, r0
    2c74:	b7 83       	std	Z+7, r27	; 0x07
    2c76:	a6 83       	std	Z+6, r26	; 0x06
    2c78:	16 96       	adiw	r26, 0x06	; 6
    2c7a:	4d 91       	ld	r20, X+
    2c7c:	5c 91       	ld	r21, X
    2c7e:	17 97       	sbiw	r26, 0x07	; 7
    2c80:	51 87       	std	Z+9, r21	; 0x09
    2c82:	40 87       	std	Z+8, r20	; 0x08
    2c84:	16 96       	adiw	r26, 0x06	; 6
    2c86:	cd 91       	ld	r28, X+
    2c88:	dc 91       	ld	r29, X
    2c8a:	17 97       	sbiw	r26, 0x07	; 7
    2c8c:	3d 83       	std	Y+5, r19	; 0x05
    2c8e:	2c 83       	std	Y+4, r18	; 0x04
    2c90:	17 96       	adiw	r26, 0x07	; 7
    2c92:	3c 93       	st	X, r19
    2c94:	2e 93       	st	-X, r18
    2c96:	16 97       	sbiw	r26, 0x06	; 6
    2c98:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c9a:	8a 9f       	mul	r24, r26
    2c9c:	d0 01       	movw	r26, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	a9 52       	subi	r26, 0x29	; 41
    2ca2:	b9 4e       	sbci	r27, 0xE9	; 233
    2ca4:	b5 87       	std	Z+13, r27	; 0x0d
    2ca6:	a4 87       	std	Z+12, r26	; 0x0c
    2ca8:	8c 91       	ld	r24, X
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	8c 93       	st	X, r24
    2cae:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cb0:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2cb4:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2cb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cba:	89 17       	cp	r24, r25
    2cbc:	18 f4       	brcc	.+6      	; 0x2cc4 <vTaskRemoveFromUnorderedEventList+0x12e>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <xYieldPending>
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <vTaskSetTimeOutState>:
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	0f 92       	push	r0
    2cd0:	20 91 8e 16 	lds	r18, 0x168E	; 0x80168e <xNumOfOverflows>
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	20 83       	st	Z, r18
    2cd8:	40 91 96 16 	lds	r20, 0x1696	; 0x801696 <xTickCount>
    2cdc:	50 91 97 16 	lds	r21, 0x1697	; 0x801697 <xTickCount+0x1>
    2ce0:	60 91 98 16 	lds	r22, 0x1698	; 0x801698 <xTickCount+0x2>
    2ce4:	70 91 99 16 	lds	r23, 0x1699	; 0x801699 <xTickCount+0x3>
    2ce8:	41 83       	std	Z+1, r20	; 0x01
    2cea:	52 83       	std	Z+2, r21	; 0x02
    2cec:	63 83       	std	Z+3, r22	; 0x03
    2cee:	74 83       	std	Z+4, r23	; 0x04
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	08 95       	ret

00002cf6 <vTaskInternalSetTimeOutState>:
    2cf6:	20 91 8e 16 	lds	r18, 0x168E	; 0x80168e <xNumOfOverflows>
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	20 83       	st	Z, r18
    2cfe:	40 91 96 16 	lds	r20, 0x1696	; 0x801696 <xTickCount>
    2d02:	50 91 97 16 	lds	r21, 0x1697	; 0x801697 <xTickCount+0x1>
    2d06:	60 91 98 16 	lds	r22, 0x1698	; 0x801698 <xTickCount+0x2>
    2d0a:	70 91 99 16 	lds	r23, 0x1699	; 0x801699 <xTickCount+0x3>
    2d0e:	41 83       	std	Z+1, r20	; 0x01
    2d10:	52 83       	std	Z+2, r21	; 0x02
    2d12:	63 83       	std	Z+3, r22	; 0x03
    2d14:	74 83       	std	Z+4, r23	; 0x04
    2d16:	08 95       	ret

00002d18 <xTaskCheckForTimeOut>:
    2d18:	8f 92       	push	r8
    2d1a:	9f 92       	push	r9
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	fb 01       	movw	r30, r22
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	0f 92       	push	r0
    2d38:	c0 90 96 16 	lds	r12, 0x1696	; 0x801696 <xTickCount>
    2d3c:	d0 90 97 16 	lds	r13, 0x1697	; 0x801697 <xTickCount+0x1>
    2d40:	e0 90 98 16 	lds	r14, 0x1698	; 0x801698 <xTickCount+0x2>
    2d44:	f0 90 99 16 	lds	r15, 0x1699	; 0x801699 <xTickCount+0x3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	11 96       	adiw	r26, 0x01	; 1
    2d4c:	0d 91       	ld	r16, X+
    2d4e:	1d 91       	ld	r17, X+
    2d50:	2d 91       	ld	r18, X+
    2d52:	3c 91       	ld	r19, X
    2d54:	14 97       	sbiw	r26, 0x04	; 4
    2d56:	46 01       	movw	r8, r12
    2d58:	57 01       	movw	r10, r14
    2d5a:	80 1a       	sub	r8, r16
    2d5c:	91 0a       	sbc	r9, r17
    2d5e:	a2 0a       	sbc	r10, r18
    2d60:	b3 0a       	sbc	r11, r19
    2d62:	40 81       	ld	r20, Z
    2d64:	51 81       	ldd	r21, Z+1	; 0x01
    2d66:	62 81       	ldd	r22, Z+2	; 0x02
    2d68:	73 81       	ldd	r23, Z+3	; 0x03
    2d6a:	4f 3f       	cpi	r20, 0xFF	; 255
    2d6c:	bf ef       	ldi	r27, 0xFF	; 255
    2d6e:	5b 07       	cpc	r21, r27
    2d70:	6b 07       	cpc	r22, r27
    2d72:	7b 07       	cpc	r23, r27
    2d74:	39 f1       	breq	.+78     	; 0x2dc4 <xTaskCheckForTimeOut+0xac>
    2d76:	ec 01       	movw	r28, r24
    2d78:	b8 81       	ld	r27, Y
    2d7a:	a0 91 8e 16 	lds	r26, 0x168E	; 0x80168e <xNumOfOverflows>
    2d7e:	ba 17       	cp	r27, r26
    2d80:	59 f0       	breq	.+22     	; 0x2d98 <xTaskCheckForTimeOut+0x80>
    2d82:	c0 16       	cp	r12, r16
    2d84:	d1 06       	cpc	r13, r17
    2d86:	e2 06       	cpc	r14, r18
    2d88:	f3 06       	cpc	r15, r19
    2d8a:	30 f0       	brcs	.+12     	; 0x2d98 <xTaskCheckForTimeOut+0x80>
    2d8c:	10 82       	st	Z, r1
    2d8e:	11 82       	std	Z+1, r1	; 0x01
    2d90:	12 82       	std	Z+2, r1	; 0x02
    2d92:	13 82       	std	Z+3, r1	; 0x03
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	17 c0       	rjmp	.+46     	; 0x2dc6 <xTaskCheckForTimeOut+0xae>
    2d98:	84 16       	cp	r8, r20
    2d9a:	95 06       	cpc	r9, r21
    2d9c:	a6 06       	cpc	r10, r22
    2d9e:	b7 06       	cpc	r11, r23
    2da0:	58 f4       	brcc	.+22     	; 0x2db8 <xTaskCheckForTimeOut+0xa0>
    2da2:	48 19       	sub	r20, r8
    2da4:	59 09       	sbc	r21, r9
    2da6:	6a 09       	sbc	r22, r10
    2da8:	7b 09       	sbc	r23, r11
    2daa:	40 83       	st	Z, r20
    2dac:	51 83       	std	Z+1, r21	; 0x01
    2dae:	62 83       	std	Z+2, r22	; 0x02
    2db0:	73 83       	std	Z+3, r23	; 0x03
    2db2:	a1 df       	rcall	.-190    	; 0x2cf6 <vTaskInternalSetTimeOutState>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <xTaskCheckForTimeOut+0xae>
    2db8:	10 82       	st	Z, r1
    2dba:	11 82       	std	Z+1, r1	; 0x01
    2dbc:	12 82       	std	Z+2, r1	; 0x02
    2dbe:	13 82       	std	Z+3, r1	; 0x03
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <xTaskCheckForTimeOut+0xae>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	bf 90       	pop	r11
    2ddc:	af 90       	pop	r10
    2dde:	9f 90       	pop	r9
    2de0:	8f 90       	pop	r8
    2de2:	08 95       	ret

00002de4 <vTaskMissedYield>:
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <xYieldPending>
    2dea:	08 95       	ret

00002dec <xTaskGetCurrentTaskHandle>:
    2dec:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    2df0:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2df4:	08 95       	ret

00002df6 <xTaskGetSchedulerState>:
    2df6:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <xSchedulerRunning>
    2dfa:	88 23       	and	r24, r24
    2dfc:	31 f0       	breq	.+12     	; 0x2e0a <xTaskGetSchedulerState+0x14>
    2dfe:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <uxSchedulerSuspended>
    2e02:	81 11       	cpse	r24, r1
    2e04:	04 c0       	rjmp	.+8      	; 0x2e0e <xTaskGetSchedulerState+0x18>
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	08 95       	ret
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	08 95       	ret
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	08 95       	ret

00002e12 <xTaskPriorityInherit>:
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	89 2b       	or	r24, r25
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <xTaskPriorityInherit+0x10>
    2e20:	77 c0       	rjmp	.+238    	; 0x2f10 <xTaskPriorityInherit+0xfe>
    2e22:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e24:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2e28:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2e2c:	5a 96       	adiw	r26, 0x1a	; 26
    2e2e:	9c 91       	ld	r25, X
    2e30:	89 17       	cp	r24, r25
    2e32:	08 f0       	brcs	.+2      	; 0x2e36 <xTaskPriorityInherit+0x24>
    2e34:	63 c0       	rjmp	.+198    	; 0x2efc <xTaskPriorityInherit+0xea>
    2e36:	46 85       	ldd	r20, Z+14	; 0x0e
    2e38:	57 85       	ldd	r21, Z+15	; 0x0f
    2e3a:	60 89       	ldd	r22, Z+16	; 0x10
    2e3c:	71 89       	ldd	r23, Z+17	; 0x11
    2e3e:	77 23       	and	r23, r23
    2e40:	94 f0       	brlt	.+36     	; 0x2e66 <xTaskPriorityInherit+0x54>
    2e42:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2e46:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2e4a:	5a 96       	adiw	r26, 0x1a	; 26
    2e4c:	9c 91       	ld	r25, X
    2e4e:	4a e0       	ldi	r20, 0x0A	; 10
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	49 1b       	sub	r20, r25
    2e58:	51 09       	sbc	r21, r1
    2e5a:	61 09       	sbc	r22, r1
    2e5c:	71 09       	sbc	r23, r1
    2e5e:	46 87       	std	Z+14, r20	; 0x0e
    2e60:	57 87       	std	Z+15, r21	; 0x0f
    2e62:	60 8b       	std	Z+16, r22	; 0x10
    2e64:	71 8b       	std	Z+17, r23	; 0x11
    2e66:	24 85       	ldd	r18, Z+12	; 0x0c
    2e68:	35 85       	ldd	r19, Z+13	; 0x0d
    2e6a:	4b e0       	ldi	r20, 0x0B	; 11
    2e6c:	84 9f       	mul	r24, r20
    2e6e:	c0 01       	movw	r24, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	89 52       	subi	r24, 0x29	; 41
    2e74:	99 4e       	sbci	r25, 0xE9	; 233
    2e76:	28 17       	cp	r18, r24
    2e78:	39 07       	cpc	r19, r25
    2e7a:	b9 f5       	brne	.+110    	; 0x2eea <xTaskPriorityInherit+0xd8>
    2e7c:	ef 01       	movw	r28, r30
    2e7e:	8f 01       	movw	r16, r30
    2e80:	0e 5f       	subi	r16, 0xFE	; 254
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	c8 01       	movw	r24, r16
    2e86:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
    2e8a:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2e8e:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2e92:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e94:	ea 8f       	std	Y+26, r30	; 0x1a
    2e96:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    2e9a:	8e 17       	cp	r24, r30
    2e9c:	10 f4       	brcc	.+4      	; 0x2ea2 <xTaskPriorityInherit+0x90>
    2e9e:	e0 93 95 16 	sts	0x1695, r30	; 0x801695 <uxTopReadyPriority>
    2ea2:	8b e0       	ldi	r24, 0x0B	; 11
    2ea4:	8e 9f       	mul	r24, r30
    2ea6:	f0 01       	movw	r30, r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	e9 52       	subi	r30, 0x29	; 41
    2eac:	f9 4e       	sbci	r31, 0xE9	; 233
    2eae:	01 80       	ldd	r0, Z+1	; 0x01
    2eb0:	f2 81       	ldd	r31, Z+2	; 0x02
    2eb2:	e0 2d       	mov	r30, r0
    2eb4:	ff 83       	std	Y+7, r31	; 0x07
    2eb6:	ee 83       	std	Y+6, r30	; 0x06
    2eb8:	26 81       	ldd	r18, Z+6	; 0x06
    2eba:	37 81       	ldd	r19, Z+7	; 0x07
    2ebc:	39 87       	std	Y+9, r19	; 0x09
    2ebe:	28 87       	std	Y+8, r18	; 0x08
    2ec0:	a6 81       	ldd	r26, Z+6	; 0x06
    2ec2:	b7 81       	ldd	r27, Z+7	; 0x07
    2ec4:	15 96       	adiw	r26, 0x05	; 5
    2ec6:	1c 93       	st	X, r17
    2ec8:	0e 93       	st	-X, r16
    2eca:	14 97       	sbiw	r26, 0x04	; 4
    2ecc:	17 83       	std	Z+7, r17	; 0x07
    2ece:	06 83       	std	Z+6, r16	; 0x06
    2ed0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ed2:	8e 9f       	mul	r24, r30
    2ed4:	f0 01       	movw	r30, r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	e9 52       	subi	r30, 0x29	; 41
    2eda:	f9 4e       	sbci	r31, 0xE9	; 233
    2edc:	fd 87       	std	Y+13, r31	; 0x0d
    2ede:	ec 87       	std	Y+12, r30	; 0x0c
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8f 5f       	subi	r24, 0xFF	; 255
    2ee4:	80 83       	st	Z, r24
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	16 c0       	rjmp	.+44     	; 0x2f16 <xTaskPriorityInherit+0x104>
    2eea:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    2eee:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2ef2:	5a 96       	adiw	r26, 0x1a	; 26
    2ef4:	8c 91       	ld	r24, X
    2ef6:	82 8f       	std	Z+26, r24	; 0x1a
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	0d c0       	rjmp	.+26     	; 0x2f16 <xTaskPriorityInherit+0x104>
    2efc:	95 a5       	ldd	r25, Z+45	; 0x2d
    2efe:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    2f02:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    2f06:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f08:	98 17       	cp	r25, r24
    2f0a:	20 f0       	brcs	.+8      	; 0x2f14 <xTaskPriorityInherit+0x102>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	03 c0       	rjmp	.+6      	; 0x2f16 <xTaskPriorityInherit+0x104>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <xTaskPriorityInherit+0x104>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <xTaskPriorityDisinherit>:
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	fc 01       	movw	r30, r24
    2f2a:	89 2b       	or	r24, r25
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <xTaskPriorityDisinherit+0x10>
    2f2e:	49 c0       	rjmp	.+146    	; 0x2fc2 <xTaskPriorityDisinherit+0xa2>
    2f30:	86 a5       	ldd	r24, Z+46	; 0x2e
    2f32:	81 50       	subi	r24, 0x01	; 1
    2f34:	86 a7       	std	Z+46, r24	; 0x2e
    2f36:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f38:	95 a5       	ldd	r25, Z+45	; 0x2d
    2f3a:	29 17       	cp	r18, r25
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <xTaskPriorityDisinherit+0x20>
    2f3e:	43 c0       	rjmp	.+134    	; 0x2fc6 <xTaskPriorityDisinherit+0xa6>
    2f40:	81 11       	cpse	r24, r1
    2f42:	43 c0       	rjmp	.+134    	; 0x2fca <xTaskPriorityDisinherit+0xaa>
    2f44:	ef 01       	movw	r28, r30
    2f46:	8f 01       	movw	r16, r30
    2f48:	0e 5f       	subi	r16, 0xFE	; 254
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	c8 01       	movw	r24, r16
    2f4e:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
    2f52:	ed a5       	ldd	r30, Y+45	; 0x2d
    2f54:	ea 8f       	std	Y+26, r30	; 0x1a
    2f56:	8a e0       	ldi	r24, 0x0A	; 10
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	a0 e0       	ldi	r26, 0x00	; 0
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	8e 1b       	sub	r24, r30
    2f60:	91 09       	sbc	r25, r1
    2f62:	a1 09       	sbc	r26, r1
    2f64:	b1 09       	sbc	r27, r1
    2f66:	8e 87       	std	Y+14, r24	; 0x0e
    2f68:	9f 87       	std	Y+15, r25	; 0x0f
    2f6a:	a8 8b       	std	Y+16, r26	; 0x10
    2f6c:	b9 8b       	std	Y+17, r27	; 0x11
    2f6e:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    2f72:	8e 17       	cp	r24, r30
    2f74:	10 f4       	brcc	.+4      	; 0x2f7a <xTaskPriorityDisinherit+0x5a>
    2f76:	e0 93 95 16 	sts	0x1695, r30	; 0x801695 <uxTopReadyPriority>
    2f7a:	8b e0       	ldi	r24, 0x0B	; 11
    2f7c:	8e 9f       	mul	r24, r30
    2f7e:	f0 01       	movw	r30, r0
    2f80:	11 24       	eor	r1, r1
    2f82:	e9 52       	subi	r30, 0x29	; 41
    2f84:	f9 4e       	sbci	r31, 0xE9	; 233
    2f86:	01 80       	ldd	r0, Z+1	; 0x01
    2f88:	f2 81       	ldd	r31, Z+2	; 0x02
    2f8a:	e0 2d       	mov	r30, r0
    2f8c:	ff 83       	std	Y+7, r31	; 0x07
    2f8e:	ee 83       	std	Y+6, r30	; 0x06
    2f90:	26 81       	ldd	r18, Z+6	; 0x06
    2f92:	37 81       	ldd	r19, Z+7	; 0x07
    2f94:	39 87       	std	Y+9, r19	; 0x09
    2f96:	28 87       	std	Y+8, r18	; 0x08
    2f98:	a6 81       	ldd	r26, Z+6	; 0x06
    2f9a:	b7 81       	ldd	r27, Z+7	; 0x07
    2f9c:	15 96       	adiw	r26, 0x05	; 5
    2f9e:	1c 93       	st	X, r17
    2fa0:	0e 93       	st	-X, r16
    2fa2:	14 97       	sbiw	r26, 0x04	; 4
    2fa4:	17 83       	std	Z+7, r17	; 0x07
    2fa6:	06 83       	std	Z+6, r16	; 0x06
    2fa8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2faa:	8e 9f       	mul	r24, r30
    2fac:	f0 01       	movw	r30, r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	e9 52       	subi	r30, 0x29	; 41
    2fb2:	f9 4e       	sbci	r31, 0xE9	; 233
    2fb4:	fd 87       	std	Y+13, r31	; 0x0d
    2fb6:	ec 87       	std	Y+12, r30	; 0x0c
    2fb8:	80 81       	ld	r24, Z
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	80 83       	st	Z, r24
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <xTaskPriorityDisinherit+0xac>
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	03 c0       	rjmp	.+6      	; 0x2fcc <xTaskPriorityDisinherit+0xac>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <xTaskPriorityDisinherit+0xac>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret

00002fd6 <vTaskPriorityDisinheritAfterTimeout>:
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	fc 01       	movw	r30, r24
    2fe0:	89 2b       	or	r24, r25
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2fe4:	5a c0       	rjmp	.+180    	; 0x309a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2fe6:	85 a5       	ldd	r24, Z+45	; 0x2d
    2fe8:	86 17       	cp	r24, r22
    2fea:	08 f4       	brcc	.+2      	; 0x2fee <vTaskPriorityDisinheritAfterTimeout+0x18>
    2fec:	86 2f       	mov	r24, r22
    2fee:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ff0:	89 17       	cp	r24, r25
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2ff4:	52 c0       	rjmp	.+164    	; 0x309a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ff6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ff8:	21 30       	cpi	r18, 0x01	; 1
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <vTaskPriorityDisinheritAfterTimeout+0x28>
    2ffc:	4e c0       	rjmp	.+156    	; 0x309a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ffe:	82 8f       	std	Z+26, r24	; 0x1a
    3000:	46 85       	ldd	r20, Z+14	; 0x0e
    3002:	57 85       	ldd	r21, Z+15	; 0x0f
    3004:	60 89       	ldd	r22, Z+16	; 0x10
    3006:	71 89       	ldd	r23, Z+17	; 0x11
    3008:	77 23       	and	r23, r23
    300a:	64 f0       	brlt	.+24     	; 0x3024 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    300c:	4a e0       	ldi	r20, 0x0A	; 10
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	48 1b       	sub	r20, r24
    3016:	51 09       	sbc	r21, r1
    3018:	61 09       	sbc	r22, r1
    301a:	71 09       	sbc	r23, r1
    301c:	46 87       	std	Z+14, r20	; 0x0e
    301e:	57 87       	std	Z+15, r21	; 0x0f
    3020:	60 8b       	std	Z+16, r22	; 0x10
    3022:	71 8b       	std	Z+17, r23	; 0x11
    3024:	24 85       	ldd	r18, Z+12	; 0x0c
    3026:	35 85       	ldd	r19, Z+13	; 0x0d
    3028:	4b e0       	ldi	r20, 0x0B	; 11
    302a:	94 9f       	mul	r25, r20
    302c:	c0 01       	movw	r24, r0
    302e:	11 24       	eor	r1, r1
    3030:	89 52       	subi	r24, 0x29	; 41
    3032:	99 4e       	sbci	r25, 0xE9	; 233
    3034:	28 17       	cp	r18, r24
    3036:	39 07       	cpc	r19, r25
    3038:	81 f5       	brne	.+96     	; 0x309a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    303a:	ef 01       	movw	r28, r30
    303c:	8f 01       	movw	r16, r30
    303e:	0e 5f       	subi	r16, 0xFE	; 254
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	c8 01       	movw	r24, r16
    3044:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
    3048:	ea 8d       	ldd	r30, Y+26	; 0x1a
    304a:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    304e:	8e 17       	cp	r24, r30
    3050:	10 f4       	brcc	.+4      	; 0x3056 <vTaskPriorityDisinheritAfterTimeout+0x80>
    3052:	e0 93 95 16 	sts	0x1695, r30	; 0x801695 <uxTopReadyPriority>
    3056:	8b e0       	ldi	r24, 0x0B	; 11
    3058:	8e 9f       	mul	r24, r30
    305a:	f0 01       	movw	r30, r0
    305c:	11 24       	eor	r1, r1
    305e:	e9 52       	subi	r30, 0x29	; 41
    3060:	f9 4e       	sbci	r31, 0xE9	; 233
    3062:	01 80       	ldd	r0, Z+1	; 0x01
    3064:	f2 81       	ldd	r31, Z+2	; 0x02
    3066:	e0 2d       	mov	r30, r0
    3068:	ff 83       	std	Y+7, r31	; 0x07
    306a:	ee 83       	std	Y+6, r30	; 0x06
    306c:	26 81       	ldd	r18, Z+6	; 0x06
    306e:	37 81       	ldd	r19, Z+7	; 0x07
    3070:	39 87       	std	Y+9, r19	; 0x09
    3072:	28 87       	std	Y+8, r18	; 0x08
    3074:	a6 81       	ldd	r26, Z+6	; 0x06
    3076:	b7 81       	ldd	r27, Z+7	; 0x07
    3078:	15 96       	adiw	r26, 0x05	; 5
    307a:	1c 93       	st	X, r17
    307c:	0e 93       	st	-X, r16
    307e:	14 97       	sbiw	r26, 0x04	; 4
    3080:	17 83       	std	Z+7, r17	; 0x07
    3082:	06 83       	std	Z+6, r16	; 0x06
    3084:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3086:	8e 9f       	mul	r24, r30
    3088:	f0 01       	movw	r30, r0
    308a:	11 24       	eor	r1, r1
    308c:	e9 52       	subi	r30, 0x29	; 41
    308e:	f9 4e       	sbci	r31, 0xE9	; 233
    3090:	fd 87       	std	Y+13, r31	; 0x0d
    3092:	ec 87       	std	Y+12, r30	; 0x0c
    3094:	80 81       	ld	r24, Z
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	80 83       	st	Z, r24
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <uxTaskResetEventItemValue>:
    30a4:	cf 92       	push	r12
    30a6:	df 92       	push	r13
    30a8:	ef 92       	push	r14
    30aa:	ff 92       	push	r15
    30ac:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    30b0:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    30b4:	66 85       	ldd	r22, Z+14	; 0x0e
    30b6:	77 85       	ldd	r23, Z+15	; 0x0f
    30b8:	80 89       	ldd	r24, Z+16	; 0x10
    30ba:	91 89       	ldd	r25, Z+17	; 0x11
    30bc:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    30c0:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    30c4:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <pxCurrentTCB>
    30c8:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    30cc:	5a 96       	adiw	r26, 0x1a	; 26
    30ce:	2c 91       	ld	r18, X
    30d0:	0f 2e       	mov	r0, r31
    30d2:	fa e0       	ldi	r31, 0x0A	; 10
    30d4:	cf 2e       	mov	r12, r31
    30d6:	d1 2c       	mov	r13, r1
    30d8:	e1 2c       	mov	r14, r1
    30da:	f1 2c       	mov	r15, r1
    30dc:	f0 2d       	mov	r31, r0
    30de:	c2 1a       	sub	r12, r18
    30e0:	d1 08       	sbc	r13, r1
    30e2:	e1 08       	sbc	r14, r1
    30e4:	f1 08       	sbc	r15, r1
    30e6:	c6 86       	std	Z+14, r12	; 0x0e
    30e8:	d7 86       	std	Z+15, r13	; 0x0f
    30ea:	e0 8a       	std	Z+16, r14	; 0x10
    30ec:	f1 8a       	std	Z+17, r15	; 0x11
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	df 90       	pop	r13
    30f4:	cf 90       	pop	r12
    30f6:	08 95       	ret

000030f8 <pvTaskIncrementMutexHeldCount>:
    30f8:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    30fc:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    3100:	89 2b       	or	r24, r25
    3102:	39 f0       	breq	.+14     	; 0x3112 <pvTaskIncrementMutexHeldCount+0x1a>
    3104:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    3108:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    310c:	86 a5       	ldd	r24, Z+46	; 0x2e
    310e:	8f 5f       	subi	r24, 0xFF	; 255
    3110:	86 a7       	std	Z+46, r24	; 0x2e
    3112:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    3116:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    311a:	08 95       	ret

0000311c <xTaskGenericNotifyWait>:
    311c:	4f 92       	push	r4
    311e:	5f 92       	push	r5
    3120:	6f 92       	push	r6
    3122:	7f 92       	push	r7
    3124:	af 92       	push	r10
    3126:	bf 92       	push	r11
    3128:	cf 92       	push	r12
    312a:	df 92       	push	r13
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	28 01       	movw	r4, r16
    313a:	39 01       	movw	r6, r18
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	0f 92       	push	r0
    3142:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    3146:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    314a:	c8 2f       	mov	r28, r24
    314c:	d0 e0       	ldi	r29, 0x00	; 0
    314e:	ec 0f       	add	r30, r28
    3150:	fd 1f       	adc	r31, r29
    3152:	83 a9       	ldd	r24, Z+51	; 0x33
    3154:	82 30       	cpi	r24, 0x02	; 2
    3156:	79 f1       	breq	.+94     	; 0x31b6 <xTaskGenericNotifyWait+0x9a>
    3158:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    315c:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    3160:	ce 01       	movw	r24, r28
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	e8 0f       	add	r30, r24
    316c:	f9 1f       	adc	r31, r25
    316e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3170:	90 a9       	ldd	r25, Z+48	; 0x30
    3172:	a1 a9       	ldd	r26, Z+49	; 0x31
    3174:	b2 a9       	ldd	r27, Z+50	; 0x32
    3176:	40 95       	com	r20
    3178:	50 95       	com	r21
    317a:	60 95       	com	r22
    317c:	70 95       	com	r23
    317e:	48 23       	and	r20, r24
    3180:	59 23       	and	r21, r25
    3182:	6a 23       	and	r22, r26
    3184:	7b 23       	and	r23, r27
    3186:	47 a7       	std	Z+47, r20	; 0x2f
    3188:	50 ab       	std	Z+48, r21	; 0x30
    318a:	61 ab       	std	Z+49, r22	; 0x31
    318c:	72 ab       	std	Z+50, r23	; 0x32
    318e:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    3192:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    3196:	ec 0f       	add	r30, r28
    3198:	fd 1f       	adc	r31, r29
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	83 ab       	std	Z+51, r24	; 0x33
    319e:	a1 14       	cp	r10, r1
    31a0:	b1 04       	cpc	r11, r1
    31a2:	c1 04       	cpc	r12, r1
    31a4:	d1 04       	cpc	r13, r1
    31a6:	39 f0       	breq	.+14     	; 0x31b6 <xTaskGenericNotifyWait+0x9a>
    31a8:	41 e0       	ldi	r20, 0x01	; 1
    31aa:	c6 01       	movw	r24, r12
    31ac:	b5 01       	movw	r22, r10
    31ae:	0e 94 52 10 	call	0x20a4	; 0x20a4 <prvAddCurrentTaskToDelayedList>
    31b2:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    31b6:	0f 90       	pop	r0
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	0f 92       	push	r0
    31c0:	e1 14       	cp	r14, r1
    31c2:	f1 04       	cpc	r15, r1
    31c4:	a1 f0       	breq	.+40     	; 0x31ee <xTaskGenericNotifyWait+0xd2>
    31c6:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    31ca:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    31ce:	ce 01       	movw	r24, r28
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	e8 0f       	add	r30, r24
    31da:	f9 1f       	adc	r31, r25
    31dc:	87 a5       	ldd	r24, Z+47	; 0x2f
    31de:	90 a9       	ldd	r25, Z+48	; 0x30
    31e0:	a1 a9       	ldd	r26, Z+49	; 0x31
    31e2:	b2 a9       	ldd	r27, Z+50	; 0x32
    31e4:	f7 01       	movw	r30, r14
    31e6:	80 83       	st	Z, r24
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	a2 83       	std	Z+2, r26	; 0x02
    31ec:	b3 83       	std	Z+3, r27	; 0x03
    31ee:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    31f2:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    31f6:	ec 0f       	add	r30, r28
    31f8:	fd 1f       	adc	r31, r29
    31fa:	83 a9       	ldd	r24, Z+51	; 0x33
    31fc:	82 30       	cpi	r24, 0x02	; 2
    31fe:	e9 f4       	brne	.+58     	; 0x323a <xTaskGenericNotifyWait+0x11e>
    3200:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    3204:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    3208:	ce 01       	movw	r24, r28
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	e8 0f       	add	r30, r24
    3214:	f9 1f       	adc	r31, r25
    3216:	87 a5       	ldd	r24, Z+47	; 0x2f
    3218:	90 a9       	ldd	r25, Z+48	; 0x30
    321a:	a1 a9       	ldd	r26, Z+49	; 0x31
    321c:	b2 a9       	ldd	r27, Z+50	; 0x32
    321e:	40 94       	com	r4
    3220:	50 94       	com	r5
    3222:	60 94       	com	r6
    3224:	70 94       	com	r7
    3226:	48 22       	and	r4, r24
    3228:	59 22       	and	r5, r25
    322a:	6a 22       	and	r6, r26
    322c:	7b 22       	and	r7, r27
    322e:	47 a6       	std	Z+47, r4	; 0x2f
    3230:	50 aa       	std	Z+48, r5	; 0x30
    3232:	61 aa       	std	Z+49, r6	; 0x31
    3234:	72 aa       	std	Z+50, r7	; 0x32
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	01 c0       	rjmp	.+2      	; 0x323c <xTaskGenericNotifyWait+0x120>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	20 91 45 17 	lds	r18, 0x1745	; 0x801745 <pxCurrentTCB>
    3240:	30 91 46 17 	lds	r19, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    3244:	c2 0f       	add	r28, r18
    3246:	d3 1f       	adc	r29, r19
    3248:	1b aa       	std	Y+51, r1	; 0x33
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
    325a:	df 90       	pop	r13
    325c:	cf 90       	pop	r12
    325e:	bf 90       	pop	r11
    3260:	af 90       	pop	r10
    3262:	7f 90       	pop	r7
    3264:	6f 90       	pop	r6
    3266:	5f 90       	pop	r5
    3268:	4f 90       	pop	r4
    326a:	08 95       	ret

0000326c <xTaskGenericNotify>:
    326c:	8f 92       	push	r8
    326e:	9f 92       	push	r9
    3270:	af 92       	push	r10
    3272:	bf 92       	push	r11
    3274:	ef 92       	push	r14
    3276:	ff 92       	push	r15
    3278:	0f 93       	push	r16
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	dc 01       	movw	r26, r24
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	0f 92       	push	r0
    3286:	e1 14       	cp	r14, r1
    3288:	f1 04       	cpc	r15, r1
    328a:	89 f0       	breq	.+34     	; 0x32ae <xTaskGenericNotify+0x42>
    328c:	e6 2f       	mov	r30, r22
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	ee 0f       	add	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	ee 0f       	add	r30, r30
    3296:	ff 1f       	adc	r31, r31
    3298:	e8 0f       	add	r30, r24
    329a:	f9 1f       	adc	r31, r25
    329c:	87 a4       	ldd	r8, Z+47	; 0x2f
    329e:	90 a8       	ldd	r9, Z+48	; 0x30
    32a0:	a1 a8       	ldd	r10, Z+49	; 0x31
    32a2:	b2 a8       	ldd	r11, Z+50	; 0x32
    32a4:	f7 01       	movw	r30, r14
    32a6:	80 82       	st	Z, r8
    32a8:	91 82       	std	Z+1, r9	; 0x01
    32aa:	a2 82       	std	Z+2, r10	; 0x02
    32ac:	b3 82       	std	Z+3, r11	; 0x03
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	fd 01       	movw	r30, r26
    32b2:	e6 0f       	add	r30, r22
    32b4:	f7 1f       	adc	r31, r23
    32b6:	83 a9       	ldd	r24, Z+51	; 0x33
    32b8:	92 e0       	ldi	r25, 0x02	; 2
    32ba:	93 ab       	std	Z+51, r25	; 0x33
    32bc:	02 30       	cpi	r16, 0x02	; 2
    32be:	01 f1       	breq	.+64     	; 0x3300 <xTaskGenericNotify+0x94>
    32c0:	18 f4       	brcc	.+6      	; 0x32c8 <xTaskGenericNotify+0x5c>
    32c2:	01 30       	cpi	r16, 0x01	; 1
    32c4:	31 f0       	breq	.+12     	; 0x32d2 <xTaskGenericNotify+0x66>
    32c6:	4d c0       	rjmp	.+154    	; 0x3362 <xTaskGenericNotify+0xf6>
    32c8:	03 30       	cpi	r16, 0x03	; 3
    32ca:	79 f1       	breq	.+94     	; 0x332a <xTaskGenericNotify+0xbe>
    32cc:	04 30       	cpi	r16, 0x04	; 4
    32ce:	d1 f1       	breq	.+116    	; 0x3344 <xTaskGenericNotify+0xd8>
    32d0:	48 c0       	rjmp	.+144    	; 0x3362 <xTaskGenericNotify+0xf6>
    32d2:	66 0f       	add	r22, r22
    32d4:	77 1f       	adc	r23, r23
    32d6:	66 0f       	add	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	fd 01       	movw	r30, r26
    32dc:	e6 0f       	add	r30, r22
    32de:	f7 1f       	adc	r31, r23
    32e0:	87 a4       	ldd	r8, Z+47	; 0x2f
    32e2:	90 a8       	ldd	r9, Z+48	; 0x30
    32e4:	a1 a8       	ldd	r10, Z+49	; 0x31
    32e6:	b2 a8       	ldd	r11, Z+50	; 0x32
    32e8:	ba 01       	movw	r22, r20
    32ea:	a9 01       	movw	r20, r18
    32ec:	48 29       	or	r20, r8
    32ee:	59 29       	or	r21, r9
    32f0:	6a 29       	or	r22, r10
    32f2:	7b 29       	or	r23, r11
    32f4:	47 a7       	std	Z+47, r20	; 0x2f
    32f6:	50 ab       	std	Z+48, r21	; 0x30
    32f8:	61 ab       	std	Z+49, r22	; 0x31
    32fa:	72 ab       	std	Z+50, r23	; 0x32
    32fc:	01 e0       	ldi	r16, 0x01	; 1
    32fe:	34 c0       	rjmp	.+104    	; 0x3368 <xTaskGenericNotify+0xfc>
    3300:	66 0f       	add	r22, r22
    3302:	77 1f       	adc	r23, r23
    3304:	66 0f       	add	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	fd 01       	movw	r30, r26
    330a:	e6 0f       	add	r30, r22
    330c:	f7 1f       	adc	r31, r23
    330e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3310:	50 a9       	ldd	r21, Z+48	; 0x30
    3312:	61 a9       	ldd	r22, Z+49	; 0x31
    3314:	72 a9       	ldd	r23, Z+50	; 0x32
    3316:	4f 5f       	subi	r20, 0xFF	; 255
    3318:	5f 4f       	sbci	r21, 0xFF	; 255
    331a:	6f 4f       	sbci	r22, 0xFF	; 255
    331c:	7f 4f       	sbci	r23, 0xFF	; 255
    331e:	47 a7       	std	Z+47, r20	; 0x2f
    3320:	50 ab       	std	Z+48, r21	; 0x30
    3322:	61 ab       	std	Z+49, r22	; 0x31
    3324:	72 ab       	std	Z+50, r23	; 0x32
    3326:	01 e0       	ldi	r16, 0x01	; 1
    3328:	1f c0       	rjmp	.+62     	; 0x3368 <xTaskGenericNotify+0xfc>
    332a:	66 0f       	add	r22, r22
    332c:	77 1f       	adc	r23, r23
    332e:	66 0f       	add	r22, r22
    3330:	77 1f       	adc	r23, r23
    3332:	fd 01       	movw	r30, r26
    3334:	e6 0f       	add	r30, r22
    3336:	f7 1f       	adc	r31, r23
    3338:	27 a7       	std	Z+47, r18	; 0x2f
    333a:	30 ab       	std	Z+48, r19	; 0x30
    333c:	41 ab       	std	Z+49, r20	; 0x31
    333e:	52 ab       	std	Z+50, r21	; 0x32
    3340:	01 e0       	ldi	r16, 0x01	; 1
    3342:	12 c0       	rjmp	.+36     	; 0x3368 <xTaskGenericNotify+0xfc>
    3344:	82 30       	cpi	r24, 0x02	; 2
    3346:	79 f0       	breq	.+30     	; 0x3366 <xTaskGenericNotify+0xfa>
    3348:	66 0f       	add	r22, r22
    334a:	77 1f       	adc	r23, r23
    334c:	66 0f       	add	r22, r22
    334e:	77 1f       	adc	r23, r23
    3350:	fd 01       	movw	r30, r26
    3352:	e6 0f       	add	r30, r22
    3354:	f7 1f       	adc	r31, r23
    3356:	27 a7       	std	Z+47, r18	; 0x2f
    3358:	30 ab       	std	Z+48, r19	; 0x30
    335a:	41 ab       	std	Z+49, r20	; 0x31
    335c:	52 ab       	std	Z+50, r21	; 0x32
    335e:	01 e0       	ldi	r16, 0x01	; 1
    3360:	03 c0       	rjmp	.+6      	; 0x3368 <xTaskGenericNotify+0xfc>
    3362:	01 e0       	ldi	r16, 0x01	; 1
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <xTaskGenericNotify+0xfc>
    3366:	00 e0       	ldi	r16, 0x00	; 0
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	09 f0       	breq	.+2      	; 0x336e <xTaskGenericNotify+0x102>
    336c:	69 c0       	rjmp	.+210    	; 0x3440 <xTaskGenericNotify+0x1d4>
    336e:	1c 96       	adiw	r26, 0x0c	; 12
    3370:	ed 91       	ld	r30, X+
    3372:	fc 91       	ld	r31, X
    3374:	1d 97       	sbiw	r26, 0x0d	; 13
    3376:	16 96       	adiw	r26, 0x06	; 6
    3378:	cd 91       	ld	r28, X+
    337a:	dc 91       	ld	r29, X
    337c:	17 97       	sbiw	r26, 0x07	; 7
    337e:	18 96       	adiw	r26, 0x08	; 8
    3380:	8d 91       	ld	r24, X+
    3382:	9c 91       	ld	r25, X
    3384:	19 97       	sbiw	r26, 0x09	; 9
    3386:	9f 83       	std	Y+7, r25	; 0x07
    3388:	8e 83       	std	Y+6, r24	; 0x06
    338a:	18 96       	adiw	r26, 0x08	; 8
    338c:	cd 91       	ld	r28, X+
    338e:	dc 91       	ld	r29, X
    3390:	19 97       	sbiw	r26, 0x09	; 9
    3392:	16 96       	adiw	r26, 0x06	; 6
    3394:	8d 91       	ld	r24, X+
    3396:	9c 91       	ld	r25, X
    3398:	17 97       	sbiw	r26, 0x07	; 7
    339a:	9d 83       	std	Y+5, r25	; 0x05
    339c:	8c 83       	std	Y+4, r24	; 0x04
    339e:	81 81       	ldd	r24, Z+1	; 0x01
    33a0:	92 81       	ldd	r25, Z+2	; 0x02
    33a2:	9d 01       	movw	r18, r26
    33a4:	2e 5f       	subi	r18, 0xFE	; 254
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	82 17       	cp	r24, r18
    33aa:	93 07       	cpc	r25, r19
    33ac:	31 f4       	brne	.+12     	; 0x33ba <xTaskGenericNotify+0x14e>
    33ae:	18 96       	adiw	r26, 0x08	; 8
    33b0:	8d 91       	ld	r24, X+
    33b2:	9c 91       	ld	r25, X
    33b4:	19 97       	sbiw	r26, 0x09	; 9
    33b6:	92 83       	std	Z+2, r25	; 0x02
    33b8:	81 83       	std	Z+1, r24	; 0x01
    33ba:	1d 96       	adiw	r26, 0x0d	; 13
    33bc:	1c 92       	st	X, r1
    33be:	1e 92       	st	-X, r1
    33c0:	1c 97       	sbiw	r26, 0x0c	; 12
    33c2:	80 81       	ld	r24, Z
    33c4:	81 50       	subi	r24, 0x01	; 1
    33c6:	80 83       	st	Z, r24
    33c8:	5a 96       	adiw	r26, 0x1a	; 26
    33ca:	ec 91       	ld	r30, X
    33cc:	5a 97       	sbiw	r26, 0x1a	; 26
    33ce:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTopReadyPriority>
    33d2:	8e 17       	cp	r24, r30
    33d4:	10 f4       	brcc	.+4      	; 0x33da <xTaskGenericNotify+0x16e>
    33d6:	e0 93 95 16 	sts	0x1695, r30	; 0x801695 <uxTopReadyPriority>
    33da:	8b e0       	ldi	r24, 0x0B	; 11
    33dc:	8e 9f       	mul	r24, r30
    33de:	f0 01       	movw	r30, r0
    33e0:	11 24       	eor	r1, r1
    33e2:	e9 52       	subi	r30, 0x29	; 41
    33e4:	f9 4e       	sbci	r31, 0xE9	; 233
    33e6:	01 80       	ldd	r0, Z+1	; 0x01
    33e8:	f2 81       	ldd	r31, Z+2	; 0x02
    33ea:	e0 2d       	mov	r30, r0
    33ec:	17 96       	adiw	r26, 0x07	; 7
    33ee:	fc 93       	st	X, r31
    33f0:	ee 93       	st	-X, r30
    33f2:	16 97       	sbiw	r26, 0x06	; 6
    33f4:	46 81       	ldd	r20, Z+6	; 0x06
    33f6:	57 81       	ldd	r21, Z+7	; 0x07
    33f8:	19 96       	adiw	r26, 0x09	; 9
    33fa:	5c 93       	st	X, r21
    33fc:	4e 93       	st	-X, r20
    33fe:	18 97       	sbiw	r26, 0x08	; 8
    3400:	c6 81       	ldd	r28, Z+6	; 0x06
    3402:	d7 81       	ldd	r29, Z+7	; 0x07
    3404:	3d 83       	std	Y+5, r19	; 0x05
    3406:	2c 83       	std	Y+4, r18	; 0x04
    3408:	37 83       	std	Z+7, r19	; 0x07
    340a:	26 83       	std	Z+6, r18	; 0x06
    340c:	5a 96       	adiw	r26, 0x1a	; 26
    340e:	ec 91       	ld	r30, X
    3410:	5a 97       	sbiw	r26, 0x1a	; 26
    3412:	8e 9f       	mul	r24, r30
    3414:	f0 01       	movw	r30, r0
    3416:	11 24       	eor	r1, r1
    3418:	e9 52       	subi	r30, 0x29	; 41
    341a:	f9 4e       	sbci	r31, 0xE9	; 233
    341c:	1d 96       	adiw	r26, 0x0d	; 13
    341e:	fc 93       	st	X, r31
    3420:	ee 93       	st	-X, r30
    3422:	1c 97       	sbiw	r26, 0x0c	; 12
    3424:	80 81       	ld	r24, Z
    3426:	8f 5f       	subi	r24, 0xFF	; 255
    3428:	80 83       	st	Z, r24
    342a:	5a 96       	adiw	r26, 0x1a	; 26
    342c:	9c 91       	ld	r25, X
    342e:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    3432:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    3436:	82 8d       	ldd	r24, Z+26	; 0x1a
    3438:	89 17       	cp	r24, r25
    343a:	10 f4       	brcc	.+4      	; 0x3440 <xTaskGenericNotify+0x1d4>
    343c:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    3440:	0f 90       	pop	r0
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	80 2f       	mov	r24, r16
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	0f 91       	pop	r16
    344c:	ff 90       	pop	r15
    344e:	ef 90       	pop	r14
    3450:	bf 90       	pop	r11
    3452:	af 90       	pop	r10
    3454:	9f 90       	pop	r9
    3456:	8f 90       	pop	r8
    3458:	08 95       	ret

0000345a <xTaskGenericNotifyFromISR>:
    345a:	8f 92       	push	r8
    345c:	9f 92       	push	r9
    345e:	af 92       	push	r10
    3460:	bf 92       	push	r11
    3462:	cf 92       	push	r12
    3464:	df 92       	push	r13
    3466:	ef 92       	push	r14
    3468:	ff 92       	push	r15
    346a:	0f 93       	push	r16
    346c:	cf 93       	push	r28
    346e:	df 93       	push	r29
    3470:	dc 01       	movw	r26, r24
    3472:	e1 14       	cp	r14, r1
    3474:	f1 04       	cpc	r15, r1
    3476:	89 f0       	breq	.+34     	; 0x349a <xTaskGenericNotifyFromISR+0x40>
    3478:	e6 2f       	mov	r30, r22
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	e8 0f       	add	r30, r24
    3486:	f9 1f       	adc	r31, r25
    3488:	87 a4       	ldd	r8, Z+47	; 0x2f
    348a:	90 a8       	ldd	r9, Z+48	; 0x30
    348c:	a1 a8       	ldd	r10, Z+49	; 0x31
    348e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3490:	f7 01       	movw	r30, r14
    3492:	80 82       	st	Z, r8
    3494:	91 82       	std	Z+1, r9	; 0x01
    3496:	a2 82       	std	Z+2, r10	; 0x02
    3498:	b3 82       	std	Z+3, r11	; 0x03
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	fd 01       	movw	r30, r26
    349e:	e6 0f       	add	r30, r22
    34a0:	f7 1f       	adc	r31, r23
    34a2:	93 a9       	ldd	r25, Z+51	; 0x33
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	83 ab       	std	Z+51, r24	; 0x33
    34a8:	02 30       	cpi	r16, 0x02	; 2
    34aa:	01 f1       	breq	.+64     	; 0x34ec <xTaskGenericNotifyFromISR+0x92>
    34ac:	18 f4       	brcc	.+6      	; 0x34b4 <xTaskGenericNotifyFromISR+0x5a>
    34ae:	01 30       	cpi	r16, 0x01	; 1
    34b0:	31 f0       	breq	.+12     	; 0x34be <xTaskGenericNotifyFromISR+0x64>
    34b2:	4d c0       	rjmp	.+154    	; 0x354e <xTaskGenericNotifyFromISR+0xf4>
    34b4:	03 30       	cpi	r16, 0x03	; 3
    34b6:	79 f1       	breq	.+94     	; 0x3516 <xTaskGenericNotifyFromISR+0xbc>
    34b8:	04 30       	cpi	r16, 0x04	; 4
    34ba:	d1 f1       	breq	.+116    	; 0x3530 <xTaskGenericNotifyFromISR+0xd6>
    34bc:	48 c0       	rjmp	.+144    	; 0x354e <xTaskGenericNotifyFromISR+0xf4>
    34be:	66 0f       	add	r22, r22
    34c0:	77 1f       	adc	r23, r23
    34c2:	66 0f       	add	r22, r22
    34c4:	77 1f       	adc	r23, r23
    34c6:	fd 01       	movw	r30, r26
    34c8:	e6 0f       	add	r30, r22
    34ca:	f7 1f       	adc	r31, r23
    34cc:	87 a4       	ldd	r8, Z+47	; 0x2f
    34ce:	90 a8       	ldd	r9, Z+48	; 0x30
    34d0:	a1 a8       	ldd	r10, Z+49	; 0x31
    34d2:	b2 a8       	ldd	r11, Z+50	; 0x32
    34d4:	ba 01       	movw	r22, r20
    34d6:	a9 01       	movw	r20, r18
    34d8:	48 29       	or	r20, r8
    34da:	59 29       	or	r21, r9
    34dc:	6a 29       	or	r22, r10
    34de:	7b 29       	or	r23, r11
    34e0:	47 a7       	std	Z+47, r20	; 0x2f
    34e2:	50 ab       	std	Z+48, r21	; 0x30
    34e4:	61 ab       	std	Z+49, r22	; 0x31
    34e6:	72 ab       	std	Z+50, r23	; 0x32
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	34 c0       	rjmp	.+104    	; 0x3554 <xTaskGenericNotifyFromISR+0xfa>
    34ec:	66 0f       	add	r22, r22
    34ee:	77 1f       	adc	r23, r23
    34f0:	66 0f       	add	r22, r22
    34f2:	77 1f       	adc	r23, r23
    34f4:	fd 01       	movw	r30, r26
    34f6:	e6 0f       	add	r30, r22
    34f8:	f7 1f       	adc	r31, r23
    34fa:	47 a5       	ldd	r20, Z+47	; 0x2f
    34fc:	50 a9       	ldd	r21, Z+48	; 0x30
    34fe:	61 a9       	ldd	r22, Z+49	; 0x31
    3500:	72 a9       	ldd	r23, Z+50	; 0x32
    3502:	4f 5f       	subi	r20, 0xFF	; 255
    3504:	5f 4f       	sbci	r21, 0xFF	; 255
    3506:	6f 4f       	sbci	r22, 0xFF	; 255
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	47 a7       	std	Z+47, r20	; 0x2f
    350c:	50 ab       	std	Z+48, r21	; 0x30
    350e:	61 ab       	std	Z+49, r22	; 0x31
    3510:	72 ab       	std	Z+50, r23	; 0x32
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	1f c0       	rjmp	.+62     	; 0x3554 <xTaskGenericNotifyFromISR+0xfa>
    3516:	66 0f       	add	r22, r22
    3518:	77 1f       	adc	r23, r23
    351a:	66 0f       	add	r22, r22
    351c:	77 1f       	adc	r23, r23
    351e:	fd 01       	movw	r30, r26
    3520:	e6 0f       	add	r30, r22
    3522:	f7 1f       	adc	r31, r23
    3524:	27 a7       	std	Z+47, r18	; 0x2f
    3526:	30 ab       	std	Z+48, r19	; 0x30
    3528:	41 ab       	std	Z+49, r20	; 0x31
    352a:	52 ab       	std	Z+50, r21	; 0x32
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	12 c0       	rjmp	.+36     	; 0x3554 <xTaskGenericNotifyFromISR+0xfa>
    3530:	92 30       	cpi	r25, 0x02	; 2
    3532:	79 f0       	breq	.+30     	; 0x3552 <xTaskGenericNotifyFromISR+0xf8>
    3534:	66 0f       	add	r22, r22
    3536:	77 1f       	adc	r23, r23
    3538:	66 0f       	add	r22, r22
    353a:	77 1f       	adc	r23, r23
    353c:	fd 01       	movw	r30, r26
    353e:	e6 0f       	add	r30, r22
    3540:	f7 1f       	adc	r31, r23
    3542:	27 a7       	std	Z+47, r18	; 0x2f
    3544:	30 ab       	std	Z+48, r19	; 0x30
    3546:	41 ab       	std	Z+49, r20	; 0x31
    3548:	52 ab       	std	Z+50, r21	; 0x32
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	03 c0       	rjmp	.+6      	; 0x3554 <xTaskGenericNotifyFromISR+0xfa>
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	01 c0       	rjmp	.+2      	; 0x3554 <xTaskGenericNotifyFromISR+0xfa>
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	91 30       	cpi	r25, 0x01	; 1
    3556:	09 f0       	breq	.+2      	; 0x355a <xTaskGenericNotifyFromISR+0x100>
    3558:	96 c0       	rjmp	.+300    	; 0x3686 <xTaskGenericNotifyFromISR+0x22c>
    355a:	90 91 86 16 	lds	r25, 0x1686	; 0x801686 <uxSchedulerSuspended>
    355e:	91 11       	cpse	r25, r1
    3560:	5f c0       	rjmp	.+190    	; 0x3620 <xTaskGenericNotifyFromISR+0x1c6>
    3562:	1c 96       	adiw	r26, 0x0c	; 12
    3564:	ed 91       	ld	r30, X+
    3566:	fc 91       	ld	r31, X
    3568:	1d 97       	sbiw	r26, 0x0d	; 13
    356a:	16 96       	adiw	r26, 0x06	; 6
    356c:	cd 91       	ld	r28, X+
    356e:	dc 91       	ld	r29, X
    3570:	17 97       	sbiw	r26, 0x07	; 7
    3572:	18 96       	adiw	r26, 0x08	; 8
    3574:	2d 91       	ld	r18, X+
    3576:	3c 91       	ld	r19, X
    3578:	19 97       	sbiw	r26, 0x09	; 9
    357a:	3f 83       	std	Y+7, r19	; 0x07
    357c:	2e 83       	std	Y+6, r18	; 0x06
    357e:	18 96       	adiw	r26, 0x08	; 8
    3580:	cd 91       	ld	r28, X+
    3582:	dc 91       	ld	r29, X
    3584:	19 97       	sbiw	r26, 0x09	; 9
    3586:	16 96       	adiw	r26, 0x06	; 6
    3588:	2d 91       	ld	r18, X+
    358a:	3c 91       	ld	r19, X
    358c:	17 97       	sbiw	r26, 0x07	; 7
    358e:	3d 83       	std	Y+5, r19	; 0x05
    3590:	2c 83       	std	Y+4, r18	; 0x04
    3592:	41 81       	ldd	r20, Z+1	; 0x01
    3594:	52 81       	ldd	r21, Z+2	; 0x02
    3596:	9d 01       	movw	r18, r26
    3598:	2e 5f       	subi	r18, 0xFE	; 254
    359a:	3f 4f       	sbci	r19, 0xFF	; 255
    359c:	42 17       	cp	r20, r18
    359e:	53 07       	cpc	r21, r19
    35a0:	31 f4       	brne	.+12     	; 0x35ae <xTaskGenericNotifyFromISR+0x154>
    35a2:	18 96       	adiw	r26, 0x08	; 8
    35a4:	4d 91       	ld	r20, X+
    35a6:	5c 91       	ld	r21, X
    35a8:	19 97       	sbiw	r26, 0x09	; 9
    35aa:	52 83       	std	Z+2, r21	; 0x02
    35ac:	41 83       	std	Z+1, r20	; 0x01
    35ae:	1d 96       	adiw	r26, 0x0d	; 13
    35b0:	1c 92       	st	X, r1
    35b2:	1e 92       	st	-X, r1
    35b4:	1c 97       	sbiw	r26, 0x0c	; 12
    35b6:	90 81       	ld	r25, Z
    35b8:	91 50       	subi	r25, 0x01	; 1
    35ba:	90 83       	st	Z, r25
    35bc:	5a 96       	adiw	r26, 0x1a	; 26
    35be:	ec 91       	ld	r30, X
    35c0:	5a 97       	sbiw	r26, 0x1a	; 26
    35c2:	90 91 95 16 	lds	r25, 0x1695	; 0x801695 <uxTopReadyPriority>
    35c6:	9e 17       	cp	r25, r30
    35c8:	10 f4       	brcc	.+4      	; 0x35ce <xTaskGenericNotifyFromISR+0x174>
    35ca:	e0 93 95 16 	sts	0x1695, r30	; 0x801695 <uxTopReadyPriority>
    35ce:	9b e0       	ldi	r25, 0x0B	; 11
    35d0:	9e 9f       	mul	r25, r30
    35d2:	f0 01       	movw	r30, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	e9 52       	subi	r30, 0x29	; 41
    35d8:	f9 4e       	sbci	r31, 0xE9	; 233
    35da:	01 80       	ldd	r0, Z+1	; 0x01
    35dc:	f2 81       	ldd	r31, Z+2	; 0x02
    35de:	e0 2d       	mov	r30, r0
    35e0:	17 96       	adiw	r26, 0x07	; 7
    35e2:	fc 93       	st	X, r31
    35e4:	ee 93       	st	-X, r30
    35e6:	16 97       	sbiw	r26, 0x06	; 6
    35e8:	46 81       	ldd	r20, Z+6	; 0x06
    35ea:	57 81       	ldd	r21, Z+7	; 0x07
    35ec:	19 96       	adiw	r26, 0x09	; 9
    35ee:	5c 93       	st	X, r21
    35f0:	4e 93       	st	-X, r20
    35f2:	18 97       	sbiw	r26, 0x08	; 8
    35f4:	c6 81       	ldd	r28, Z+6	; 0x06
    35f6:	d7 81       	ldd	r29, Z+7	; 0x07
    35f8:	3d 83       	std	Y+5, r19	; 0x05
    35fa:	2c 83       	std	Y+4, r18	; 0x04
    35fc:	37 83       	std	Z+7, r19	; 0x07
    35fe:	26 83       	std	Z+6, r18	; 0x06
    3600:	5a 96       	adiw	r26, 0x1a	; 26
    3602:	ec 91       	ld	r30, X
    3604:	5a 97       	sbiw	r26, 0x1a	; 26
    3606:	9e 9f       	mul	r25, r30
    3608:	f0 01       	movw	r30, r0
    360a:	11 24       	eor	r1, r1
    360c:	e9 52       	subi	r30, 0x29	; 41
    360e:	f9 4e       	sbci	r31, 0xE9	; 233
    3610:	1d 96       	adiw	r26, 0x0d	; 13
    3612:	fc 93       	st	X, r31
    3614:	ee 93       	st	-X, r30
    3616:	1c 97       	sbiw	r26, 0x0c	; 12
    3618:	90 81       	ld	r25, Z
    361a:	9f 5f       	subi	r25, 0xFF	; 255
    361c:	90 83       	st	Z, r25
    361e:	21 c0       	rjmp	.+66     	; 0x3662 <xTaskGenericNotifyFromISR+0x208>
    3620:	62 eb       	ldi	r22, 0xB2	; 178
    3622:	76 e1       	ldi	r23, 0x16	; 22
    3624:	fb 01       	movw	r30, r22
    3626:	c1 81       	ldd	r28, Z+1	; 0x01
    3628:	d2 81       	ldd	r29, Z+2	; 0x02
    362a:	53 96       	adiw	r26, 0x13	; 19
    362c:	dc 93       	st	X, r29
    362e:	ce 93       	st	-X, r28
    3630:	52 97       	sbiw	r26, 0x12	; 18
    3632:	2e 81       	ldd	r18, Y+6	; 0x06
    3634:	3f 81       	ldd	r19, Y+7	; 0x07
    3636:	55 96       	adiw	r26, 0x15	; 21
    3638:	3c 93       	st	X, r19
    363a:	2e 93       	st	-X, r18
    363c:	54 97       	sbiw	r26, 0x14	; 20
    363e:	4e 81       	ldd	r20, Y+6	; 0x06
    3640:	5f 81       	ldd	r21, Y+7	; 0x07
    3642:	9d 01       	movw	r18, r26
    3644:	22 5f       	subi	r18, 0xF2	; 242
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	fa 01       	movw	r30, r20
    364a:	35 83       	std	Z+5, r19	; 0x05
    364c:	24 83       	std	Z+4, r18	; 0x04
    364e:	3f 83       	std	Y+7, r19	; 0x07
    3650:	2e 83       	std	Y+6, r18	; 0x06
    3652:	59 96       	adiw	r26, 0x19	; 25
    3654:	7c 93       	st	X, r23
    3656:	6e 93       	st	-X, r22
    3658:	58 97       	sbiw	r26, 0x18	; 24
    365a:	fb 01       	movw	r30, r22
    365c:	90 81       	ld	r25, Z
    365e:	9f 5f       	subi	r25, 0xFF	; 255
    3660:	90 83       	st	Z, r25
    3662:	5a 96       	adiw	r26, 0x1a	; 26
    3664:	2c 91       	ld	r18, X
    3666:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTCB>
    366a:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTCB+0x1>
    366e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3670:	92 17       	cp	r25, r18
    3672:	48 f4       	brcc	.+18     	; 0x3686 <xTaskGenericNotifyFromISR+0x22c>
    3674:	c1 14       	cp	r12, r1
    3676:	d1 04       	cpc	r13, r1
    3678:	19 f0       	breq	.+6      	; 0x3680 <xTaskGenericNotifyFromISR+0x226>
    367a:	91 e0       	ldi	r25, 0x01	; 1
    367c:	f6 01       	movw	r30, r12
    367e:	90 83       	st	Z, r25
    3680:	91 e0       	ldi	r25, 0x01	; 1
    3682:	90 93 8f 16 	sts	0x168F, r25	; 0x80168f <xYieldPending>
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	0f 91       	pop	r16
    368c:	ff 90       	pop	r15
    368e:	ef 90       	pop	r14
    3690:	df 90       	pop	r13
    3692:	cf 90       	pop	r12
    3694:	bf 90       	pop	r11
    3696:	af 90       	pop	r10
    3698:	9f 90       	pop	r9
    369a:	8f 90       	pop	r8
    369c:	08 95       	ret

0000369e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	21 f4       	brne	.+8      	; 0x36aa <xTaskGenericNotifyStateClear+0xc>
    36a2:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTCB>
    36a6:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    36b0:	70 e0       	ldi	r23, 0x00	; 0
    36b2:	fc 01       	movw	r30, r24
    36b4:	e6 0f       	add	r30, r22
    36b6:	f7 1f       	adc	r31, r23
    36b8:	23 a9       	ldd	r18, Z+51	; 0x33
    36ba:	22 30       	cpi	r18, 0x02	; 2
    36bc:	31 f4       	brne	.+12     	; 0x36ca <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    36be:	fc 01       	movw	r30, r24
    36c0:	e6 0f       	add	r30, r22
    36c2:	f7 1f       	adc	r31, r23
    36c4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	01 c0       	rjmp	.+2      	; 0x36cc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    36ca:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    36cc:	0f 90       	pop	r0
    36ce:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    36d0:	08 95       	ret

000036d2 <prvGetNextExpireTime>:
    36d2:	dc 01       	movw	r26, r24
    36d4:	e0 91 51 17 	lds	r30, 0x1751	; 0x801751 <pxCurrentTimerList>
    36d8:	f0 91 52 17 	lds	r31, 0x1752	; 0x801752 <pxCurrentTimerList+0x1>
    36dc:	80 81       	ld	r24, Z
    36de:	91 e0       	ldi	r25, 0x01	; 1
    36e0:	81 11       	cpse	r24, r1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	9c 93       	st	X, r25
    36e6:	91 11       	cpse	r25, r1
    36e8:	08 c0       	rjmp	.+16     	; 0x36fa <prvGetNextExpireTime+0x28>
    36ea:	07 80       	ldd	r0, Z+7	; 0x07
    36ec:	f0 85       	ldd	r31, Z+8	; 0x08
    36ee:	e0 2d       	mov	r30, r0
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	08 95       	ret
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	cb 01       	movw	r24, r22
    3700:	08 95       	ret

00003702 <prvInsertTimerInActiveList>:
    3702:	cf 92       	push	r12
    3704:	df 92       	push	r13
    3706:	ef 92       	push	r14
    3708:	ff 92       	push	r15
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	fc 01       	movw	r30, r24
    3710:	42 83       	std	Z+2, r20	; 0x02
    3712:	53 83       	std	Z+3, r21	; 0x03
    3714:	64 83       	std	Z+4, r22	; 0x04
    3716:	75 83       	std	Z+5, r23	; 0x05
    3718:	93 87       	std	Z+11, r25	; 0x0b
    371a:	82 87       	std	Z+10, r24	; 0x0a
    371c:	04 17       	cp	r16, r20
    371e:	15 07       	cpc	r17, r21
    3720:	26 07       	cpc	r18, r22
    3722:	37 07       	cpc	r19, r23
    3724:	c0 f0       	brcs	.+48     	; 0x3756 <prvInsertTimerInActiveList+0x54>
    3726:	0c 19       	sub	r16, r12
    3728:	1d 09       	sbc	r17, r13
    372a:	2e 09       	sbc	r18, r14
    372c:	3f 09       	sbc	r19, r15
    372e:	86 85       	ldd	r24, Z+14	; 0x0e
    3730:	97 85       	ldd	r25, Z+15	; 0x0f
    3732:	a0 89       	ldd	r26, Z+16	; 0x10
    3734:	b1 89       	ldd	r27, Z+17	; 0x11
    3736:	08 17       	cp	r16, r24
    3738:	19 07       	cpc	r17, r25
    373a:	2a 07       	cpc	r18, r26
    373c:	3b 07       	cpc	r19, r27
    373e:	00 f5       	brcc	.+64     	; 0x3780 <prvInsertTimerInActiveList+0x7e>
    3740:	bf 01       	movw	r22, r30
    3742:	6e 5f       	subi	r22, 0xFE	; 254
    3744:	7f 4f       	sbci	r23, 0xFF	; 255
    3746:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxOverflowTimerList>
    374a:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxOverflowTimerList+0x1>
    374e:	0e 94 93 06 	call	0xd26	; 0xd26 <vListInsert>
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	18 c0       	rjmp	.+48     	; 0x3786 <prvInsertTimerInActiveList+0x84>
    3756:	0c 15       	cp	r16, r12
    3758:	1d 05       	cpc	r17, r13
    375a:	2e 05       	cpc	r18, r14
    375c:	3f 05       	cpc	r19, r15
    375e:	28 f4       	brcc	.+10     	; 0x376a <prvInsertTimerInActiveList+0x68>
    3760:	4c 15       	cp	r20, r12
    3762:	5d 05       	cpc	r21, r13
    3764:	6e 05       	cpc	r22, r14
    3766:	7f 05       	cpc	r23, r15
    3768:	68 f4       	brcc	.+26     	; 0x3784 <prvInsertTimerInActiveList+0x82>
    376a:	bf 01       	movw	r22, r30
    376c:	6e 5f       	subi	r22, 0xFE	; 254
    376e:	7f 4f       	sbci	r23, 0xFF	; 255
    3770:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <pxCurrentTimerList>
    3774:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <pxCurrentTimerList+0x1>
    3778:	0e 94 93 06 	call	0xd26	; 0xd26 <vListInsert>
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	03 c0       	rjmp	.+6      	; 0x3786 <prvInsertTimerInActiveList+0x84>
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	01 c0       	rjmp	.+2      	; 0x3786 <prvInsertTimerInActiveList+0x84>
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	df 90       	pop	r13
    3790:	cf 90       	pop	r12
    3792:	08 95       	ret

00003794 <prvCheckForValidListAndQueue>:
    3794:	0f b6       	in	r0, 0x3f	; 63
    3796:	f8 94       	cli
    3798:	0f 92       	push	r0
    379a:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <xTimerQueue>
    379e:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <xTimerQueue+0x1>
    37a2:	89 2b       	or	r24, r25
    37a4:	e9 f4       	brne	.+58     	; 0x37e0 <prvCheckForValidListAndQueue+0x4c>
    37a6:	8e e5       	ldi	r24, 0x5E	; 94
    37a8:	97 e1       	ldi	r25, 0x17	; 23
    37aa:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    37ae:	83 e5       	ldi	r24, 0x53	; 83
    37b0:	97 e1       	ldi	r25, 0x17	; 23
    37b2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vListInitialise>
    37b6:	8e e5       	ldi	r24, 0x5E	; 94
    37b8:	97 e1       	ldi	r25, 0x17	; 23
    37ba:	90 93 52 17 	sts	0x1752, r25	; 0x801752 <pxCurrentTimerList+0x1>
    37be:	80 93 51 17 	sts	0x1751, r24	; 0x801751 <pxCurrentTimerList>
    37c2:	83 e5       	ldi	r24, 0x53	; 83
    37c4:	97 e1       	ldi	r25, 0x17	; 23
    37c6:	90 93 50 17 	sts	0x1750, r25	; 0x801750 <pxOverflowTimerList+0x1>
    37ca:	80 93 4f 17 	sts	0x174F, r24	; 0x80174f <pxOverflowTimerList>
    37ce:	40 e0       	ldi	r20, 0x00	; 0
    37d0:	67 e0       	ldi	r22, 0x07	; 7
    37d2:	8a e0       	ldi	r24, 0x0A	; 10
    37d4:	0e 94 41 09 	call	0x1282	; 0x1282 <xQueueGenericCreate>
    37d8:	90 93 4e 17 	sts	0x174E, r25	; 0x80174e <xTimerQueue+0x1>
    37dc:	80 93 4d 17 	sts	0x174D, r24	; 0x80174d <xTimerQueue>
    37e0:	0f 90       	pop	r0
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	08 95       	ret

000037e6 <xTimerCreateTimerTask>:
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	d3 df       	rcall	.-90     	; 0x3794 <prvCheckForValidListAndQueue>
    37ee:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <xTimerQueue>
    37f2:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <xTimerQueue+0x1>
    37f6:	89 2b       	or	r24, r25
    37f8:	91 f0       	breq	.+36     	; 0x381e <xTimerCreateTimerTask+0x38>
    37fa:	0f 2e       	mov	r0, r31
    37fc:	fb e4       	ldi	r31, 0x4B	; 75
    37fe:	ef 2e       	mov	r14, r31
    3800:	f7 e1       	ldi	r31, 0x17	; 23
    3802:	ff 2e       	mov	r15, r31
    3804:	f0 2d       	mov	r31, r0
    3806:	03 e0       	ldi	r16, 0x03	; 3
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 ec       	ldi	r20, 0xC0	; 192
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	66 eb       	ldi	r22, 0xB6	; 182
    3812:	73 e0       	ldi	r23, 0x03	; 3
    3814:	87 ed       	ldi	r24, 0xD7	; 215
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
    381c:	01 c0       	rjmp	.+2      	; 0x3820 <xTimerCreateTimerTask+0x3a>
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	0f 91       	pop	r16
    3822:	ff 90       	pop	r15
    3824:	ef 90       	pop	r14
    3826:	08 95       	ret

00003828 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3828:	8f 92       	push	r8
    382a:	9f 92       	push	r9
    382c:	af 92       	push	r10
    382e:	bf 92       	push	r11
    3830:	cf 92       	push	r12
    3832:	df 92       	push	r13
    3834:	ef 92       	push	r14
    3836:	ff 92       	push	r15
    3838:	0f 93       	push	r16
    383a:	1f 93       	push	r17
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	27 97       	sbiw	r28, 0x07	; 7
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3850:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <xTimerQueue>
    3854:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <xTimerQueue+0x1>
    3858:	30 97       	sbiw	r30, 0x00	; 0
    385a:	81 f1       	breq	.+96     	; 0x38bc <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    385c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    385e:	2a 83       	std	Y+2, r18	; 0x02
    3860:	3b 83       	std	Y+3, r19	; 0x03
    3862:	4c 83       	std	Y+4, r20	; 0x04
    3864:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3866:	9f 83       	std	Y+7, r25	; 0x07
    3868:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    386a:	66 30       	cpi	r22, 0x06	; 6
    386c:	f4 f4       	brge	.+60     	; 0x38aa <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    386e:	c3 da       	rcall	.-2682   	; 0x2df6 <xTaskGetSchedulerState>
    3870:	82 30       	cpi	r24, 0x02	; 2
    3872:	69 f4       	brne	.+26     	; 0x388e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3874:	00 e0       	ldi	r16, 0x00	; 0
    3876:	a7 01       	movw	r20, r14
    3878:	96 01       	movw	r18, r12
    387a:	be 01       	movw	r22, r28
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <xTimerQueue>
    3884:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <xTimerQueue+0x1>
    3888:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSend>
    388c:	18 c0       	rjmp	.+48     	; 0x38be <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    388e:	00 e0       	ldi	r16, 0x00	; 0
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	a9 01       	movw	r20, r18
    3896:	be 01       	movw	r22, r28
    3898:	6f 5f       	subi	r22, 0xFF	; 255
    389a:	7f 4f       	sbci	r23, 0xFF	; 255
    389c:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <xTimerQueue>
    38a0:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <xTimerQueue+0x1>
    38a4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSend>
    38a8:	0a c0       	rjmp	.+20     	; 0x38be <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	a8 01       	movw	r20, r16
    38ae:	be 01       	movw	r22, r28
    38b0:	6f 5f       	subi	r22, 0xFF	; 255
    38b2:	7f 4f       	sbci	r23, 0xFF	; 255
    38b4:	cf 01       	movw	r24, r30
    38b6:	0e 94 14 0a 	call	0x1428	; 0x1428 <xQueueGenericSendFromISR>
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    38bc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    38be:	27 96       	adiw	r28, 0x07	; 7
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
    38ce:	1f 91       	pop	r17
    38d0:	0f 91       	pop	r16
    38d2:	ff 90       	pop	r15
    38d4:	ef 90       	pop	r14
    38d6:	df 90       	pop	r13
    38d8:	cf 90       	pop	r12
    38da:	bf 90       	pop	r11
    38dc:	af 90       	pop	r10
    38de:	9f 90       	pop	r9
    38e0:	8f 90       	pop	r8
    38e2:	08 95       	ret

000038e4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    38e4:	8f 92       	push	r8
    38e6:	9f 92       	push	r9
    38e8:	af 92       	push	r10
    38ea:	bf 92       	push	r11
    38ec:	cf 92       	push	r12
    38ee:	df 92       	push	r13
    38f0:	ef 92       	push	r14
    38f2:	ff 92       	push	r15
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    38fc:	3b c0       	rjmp	.+118    	; 0x3974 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    38fe:	07 80       	ldd	r0, Z+7	; 0x07
    3900:	f0 85       	ldd	r31, Z+8	; 0x08
    3902:	e0 2d       	mov	r30, r0
    3904:	80 80       	ld	r8, Z
    3906:	91 80       	ldd	r9, Z+1	; 0x01
    3908:	a2 80       	ldd	r10, Z+2	; 0x02
    390a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    390c:	c0 85       	ldd	r28, Z+8	; 0x08
    390e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3910:	8e 01       	movw	r16, r28
    3912:	0e 5f       	subi	r16, 0xFE	; 254
    3914:	1f 4f       	sbci	r17, 0xFF	; 255
    3916:	c8 01       	movw	r24, r16
    3918:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    391c:	ec 89       	ldd	r30, Y+20	; 0x14
    391e:	fd 89       	ldd	r31, Y+21	; 0x15
    3920:	ce 01       	movw	r24, r28
    3922:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3924:	8e 89       	ldd	r24, Y+22	; 0x16
    3926:	82 ff       	sbrs	r24, 2
    3928:	25 c0       	rjmp	.+74     	; 0x3974 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    392a:	8e 85       	ldd	r24, Y+14	; 0x0e
    392c:	9f 85       	ldd	r25, Y+15	; 0x0f
    392e:	a8 89       	ldd	r26, Y+16	; 0x10
    3930:	b9 89       	ldd	r27, Y+17	; 0x11
    3932:	88 0d       	add	r24, r8
    3934:	99 1d       	adc	r25, r9
    3936:	aa 1d       	adc	r26, r10
    3938:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    393a:	88 16       	cp	r8, r24
    393c:	99 06       	cpc	r9, r25
    393e:	aa 06       	cpc	r10, r26
    3940:	bb 06       	cpc	r11, r27
    3942:	70 f4       	brcc	.+28     	; 0x3960 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3944:	8a 83       	std	Y+2, r24	; 0x02
    3946:	9b 83       	std	Y+3, r25	; 0x03
    3948:	ac 83       	std	Y+4, r26	; 0x04
    394a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    394c:	db 87       	std	Y+11, r29	; 0x0b
    394e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3950:	b8 01       	movw	r22, r16
    3952:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <pxCurrentTimerList>
    3956:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <pxCurrentTimerList+0x1>
    395a:	0e 94 93 06 	call	0xd26	; 0xd26 <vListInsert>
    395e:	0a c0       	rjmp	.+20     	; 0x3974 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3960:	c1 2c       	mov	r12, r1
    3962:	d1 2c       	mov	r13, r1
    3964:	76 01       	movw	r14, r12
    3966:	00 e0       	ldi	r16, 0x00	; 0
    3968:	10 e0       	ldi	r17, 0x00	; 0
    396a:	a5 01       	movw	r20, r10
    396c:	94 01       	movw	r18, r8
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	ce 01       	movw	r24, r28
    3972:	5a df       	rcall	.-332    	; 0x3828 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3974:	e0 91 51 17 	lds	r30, 0x1751	; 0x801751 <pxCurrentTimerList>
    3978:	f0 91 52 17 	lds	r31, 0x1752	; 0x801752 <pxCurrentTimerList+0x1>
    397c:	80 81       	ld	r24, Z
    397e:	81 11       	cpse	r24, r1
    3980:	be cf       	rjmp	.-132    	; 0x38fe <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3982:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxOverflowTimerList>
    3986:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxOverflowTimerList+0x1>
    398a:	90 93 52 17 	sts	0x1752, r25	; 0x801752 <pxCurrentTimerList+0x1>
    398e:	80 93 51 17 	sts	0x1751, r24	; 0x801751 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3992:	f0 93 50 17 	sts	0x1750, r31	; 0x801750 <pxOverflowTimerList+0x1>
    3996:	e0 93 4f 17 	sts	0x174F, r30	; 0x80174f <pxOverflowTimerList>
    }
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	df 90       	pop	r13
    39a8:	cf 90       	pop	r12
    39aa:	bf 90       	pop	r11
    39ac:	af 90       	pop	r10
    39ae:	9f 90       	pop	r9
    39b0:	8f 90       	pop	r8
    39b2:	08 95       	ret

000039b4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    39b4:	cf 92       	push	r12
    39b6:	df 92       	push	r13
    39b8:	ef 92       	push	r14
    39ba:	ff 92       	push	r15
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    39c2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <xTaskGetTickCount>
    39c6:	6b 01       	movw	r12, r22
    39c8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    39ca:	80 91 47 17 	lds	r24, 0x1747	; 0x801747 <xLastTime.2436>
    39ce:	90 91 48 17 	lds	r25, 0x1748	; 0x801748 <xLastTime.2436+0x1>
    39d2:	a0 91 49 17 	lds	r26, 0x1749	; 0x801749 <xLastTime.2436+0x2>
    39d6:	b0 91 4a 17 	lds	r27, 0x174A	; 0x80174a <xLastTime.2436+0x3>
    39da:	c8 16       	cp	r12, r24
    39dc:	d9 06       	cpc	r13, r25
    39de:	ea 06       	cpc	r14, r26
    39e0:	fb 06       	cpc	r15, r27
    39e2:	20 f4       	brcc	.+8      	; 0x39ec <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    39e4:	7f df       	rcall	.-258    	; 0x38e4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	88 83       	st	Y, r24
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    39ec:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    39ee:	c0 92 47 17 	sts	0x1747, r12	; 0x801747 <xLastTime.2436>
    39f2:	d0 92 48 17 	sts	0x1748, r13	; 0x801748 <xLastTime.2436+0x1>
    39f6:	e0 92 49 17 	sts	0x1749, r14	; 0x801749 <xLastTime.2436+0x2>
    39fa:	f0 92 4a 17 	sts	0x174A, r15	; 0x80174a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    39fe:	c7 01       	movw	r24, r14
    3a00:	b6 01       	movw	r22, r12
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	ff 90       	pop	r15
    3a08:	ef 90       	pop	r14
    3a0a:	df 90       	pop	r13
    3a0c:	cf 90       	pop	r12
    3a0e:	08 95       	ret

00003a10 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3a10:	4f 92       	push	r4
    3a12:	5f 92       	push	r5
    3a14:	6f 92       	push	r6
    3a16:	7f 92       	push	r7
    3a18:	8f 92       	push	r8
    3a1a:	9f 92       	push	r9
    3a1c:	af 92       	push	r10
    3a1e:	bf 92       	push	r11
    3a20:	cf 92       	push	r12
    3a22:	df 92       	push	r13
    3a24:	ef 92       	push	r14
    3a26:	ff 92       	push	r15
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
    3a2c:	cf 93       	push	r28
    3a2e:	df 93       	push	r29
    3a30:	4b 01       	movw	r8, r22
    3a32:	5c 01       	movw	r10, r24
    3a34:	29 01       	movw	r4, r18
    3a36:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a38:	e0 91 51 17 	lds	r30, 0x1751	; 0x801751 <pxCurrentTimerList>
    3a3c:	f0 91 52 17 	lds	r31, 0x1752	; 0x801752 <pxCurrentTimerList+0x1>
    3a40:	07 80       	ldd	r0, Z+7	; 0x07
    3a42:	f0 85       	ldd	r31, Z+8	; 0x08
    3a44:	e0 2d       	mov	r30, r0
    3a46:	c0 85       	ldd	r28, Z+8	; 0x08
    3a48:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	02 96       	adiw	r24, 0x02	; 2
    3a4e:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a52:	8e 89       	ldd	r24, Y+22	; 0x16
    3a54:	82 ff       	sbrs	r24, 2
    3a56:	1b c0       	rjmp	.+54     	; 0x3a8e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3a58:	4e 85       	ldd	r20, Y+14	; 0x0e
    3a5a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3a5c:	68 89       	ldd	r22, Y+16	; 0x10
    3a5e:	79 89       	ldd	r23, Y+17	; 0x11
    3a60:	48 0d       	add	r20, r8
    3a62:	59 1d       	adc	r21, r9
    3a64:	6a 1d       	adc	r22, r10
    3a66:	7b 1d       	adc	r23, r11
    3a68:	75 01       	movw	r14, r10
    3a6a:	64 01       	movw	r12, r8
    3a6c:	93 01       	movw	r18, r6
    3a6e:	82 01       	movw	r16, r4
    3a70:	ce 01       	movw	r24, r28
    3a72:	47 de       	rcall	.-882    	; 0x3702 <prvInsertTimerInActiveList>
    3a74:	88 23       	and	r24, r24
    3a76:	69 f0       	breq	.+26     	; 0x3a92 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a78:	c1 2c       	mov	r12, r1
    3a7a:	d1 2c       	mov	r13, r1
    3a7c:	76 01       	movw	r14, r12
    3a7e:	00 e0       	ldi	r16, 0x00	; 0
    3a80:	10 e0       	ldi	r17, 0x00	; 0
    3a82:	a5 01       	movw	r20, r10
    3a84:	94 01       	movw	r18, r8
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	ce 01       	movw	r24, r28
    3a8a:	ce de       	rcall	.-612    	; 0x3828 <xTimerGenericCommand>
    3a8c:	02 c0       	rjmp	.+4      	; 0x3a92 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3a8e:	8e 7f       	andi	r24, 0xFE	; 254
    3a90:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a92:	ec 89       	ldd	r30, Y+20	; 0x14
    3a94:	fd 89       	ldd	r31, Y+21	; 0x15
    3a96:	ce 01       	movw	r24, r28
    3a98:	19 95       	eicall
    }
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	ff 90       	pop	r15
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	cf 90       	pop	r12
    3aaa:	bf 90       	pop	r11
    3aac:	af 90       	pop	r10
    3aae:	9f 90       	pop	r9
    3ab0:	8f 90       	pop	r8
    3ab2:	7f 90       	pop	r7
    3ab4:	6f 90       	pop	r6
    3ab6:	5f 90       	pop	r5
    3ab8:	4f 90       	pop	r4
    3aba:	08 95       	ret

00003abc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3abc:	8f 92       	push	r8
    3abe:	9f 92       	push	r9
    3ac0:	af 92       	push	r10
    3ac2:	bf 92       	push	r11
    3ac4:	cf 92       	push	r12
    3ac6:	df 92       	push	r13
    3ac8:	ef 92       	push	r14
    3aca:	ff 92       	push	r15
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	1f 92       	push	r1
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	6b 01       	movw	r12, r22
    3ada:	7c 01       	movw	r14, r24
    3adc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3ade:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	01 96       	adiw	r24, 0x01	; 1
    3ae6:	66 df       	rcall	.-308    	; 0x39b4 <prvSampleTimeNow>
    3ae8:	4b 01       	movw	r8, r22
    3aea:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	81 11       	cpse	r24, r1
    3af0:	2d c0       	rjmp	.+90     	; 0x3b4c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3af2:	11 11       	cpse	r17, r1
    3af4:	0d c0       	rjmp	.+26     	; 0x3b10 <prvProcessTimerOrBlockTask+0x54>
    3af6:	8c 14       	cp	r8, r12
    3af8:	9d 04       	cpc	r9, r13
    3afa:	ae 04       	cpc	r10, r14
    3afc:	bf 04       	cpc	r11, r15
    3afe:	40 f0       	brcs	.+16     	; 0x3b10 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3b00:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3b04:	a5 01       	movw	r20, r10
    3b06:	94 01       	movw	r18, r8
    3b08:	c7 01       	movw	r24, r14
    3b0a:	b6 01       	movw	r22, r12
    3b0c:	81 df       	rcall	.-254    	; 0x3a10 <prvProcessExpiredTimer>
    3b0e:	20 c0       	rjmp	.+64     	; 0x3b50 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3b10:	11 23       	and	r17, r17
    3b12:	41 f0       	breq	.+16     	; 0x3b24 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3b14:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxOverflowTimerList>
    3b18:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxOverflowTimerList+0x1>
    3b1c:	80 81       	ld	r24, Z
    3b1e:	11 e0       	ldi	r17, 0x01	; 1
    3b20:	81 11       	cpse	r24, r1
    3b22:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3b24:	b7 01       	movw	r22, r14
    3b26:	a6 01       	movw	r20, r12
    3b28:	48 19       	sub	r20, r8
    3b2a:	59 09       	sbc	r21, r9
    3b2c:	6a 09       	sbc	r22, r10
    3b2e:	7b 09       	sbc	r23, r11
    3b30:	21 2f       	mov	r18, r17
    3b32:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <xTimerQueue>
    3b36:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <xTimerQueue+0x1>
    3b3a:	0e 94 8f 0b 	call	0x171e	; 0x171e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3b3e:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
    3b42:	81 11       	cpse	r24, r1
    3b44:	05 c0       	rjmp	.+10     	; 0x3b50 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3b46:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3b4c:	0e 94 b8 12 	call	0x2570	; 0x2570 <xTaskResumeAll>
            }
        }
    }
    3b50:	0f 90       	pop	r0
    3b52:	df 91       	pop	r29
    3b54:	cf 91       	pop	r28
    3b56:	1f 91       	pop	r17
    3b58:	ff 90       	pop	r15
    3b5a:	ef 90       	pop	r14
    3b5c:	df 90       	pop	r13
    3b5e:	cf 90       	pop	r12
    3b60:	bf 90       	pop	r11
    3b62:	af 90       	pop	r10
    3b64:	9f 90       	pop	r9
    3b66:	8f 90       	pop	r8
    3b68:	08 95       	ret

00003b6a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	28 97       	sbiw	r28, 0x08	; 8
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b8e:	82 c0       	rjmp	.+260    	; 0x3c94 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	88 23       	and	r24, r24
    3b94:	0c f4       	brge	.+2      	; 0x3b98 <prvProcessReceivedCommands+0x2e>
    3b96:	7e c0       	rjmp	.+252    	; 0x3c94 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3b98:	ae 80       	ldd	r10, Y+6	; 0x06
    3b9a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3b9c:	d5 01       	movw	r26, r10
    3b9e:	1c 96       	adiw	r26, 0x0c	; 12
    3ba0:	8d 91       	ld	r24, X+
    3ba2:	9c 91       	ld	r25, X
    3ba4:	1d 97       	sbiw	r26, 0x0d	; 13
    3ba6:	89 2b       	or	r24, r25
    3ba8:	21 f0       	breq	.+8      	; 0x3bb2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3baa:	c5 01       	movw	r24, r10
    3bac:	02 96       	adiw	r24, 0x02	; 2
    3bae:	0e 94 d0 06 	call	0xda0	; 0xda0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	08 96       	adiw	r24, 0x08	; 8
    3bb6:	fe de       	rcall	.-516    	; 0x39b4 <prvSampleTimeNow>
    3bb8:	8b 01       	movw	r16, r22
    3bba:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    3bbe:	0e 2e       	mov	r0, r30
    3bc0:	00 0c       	add	r0, r0
    3bc2:	ff 0b       	sbc	r31, r31
    3bc4:	ea 30       	cpi	r30, 0x0A	; 10
    3bc6:	f1 05       	cpc	r31, r1
    3bc8:	08 f0       	brcs	.+2      	; 0x3bcc <prvProcessReceivedCommands+0x62>
    3bca:	64 c0       	rjmp	.+200    	; 0x3c94 <prvProcessReceivedCommands+0x12a>
    3bcc:	88 27       	eor	r24, r24
    3bce:	ee 58       	subi	r30, 0x8E	; 142
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd4:	0c 94 a2 30 	jmp	0x6144	; 0x6144 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3bd8:	f5 01       	movw	r30, r10
    3bda:	86 89       	ldd	r24, Z+22	; 0x16
    3bdc:	81 60       	ori	r24, 0x01	; 1
    3bde:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3be0:	ca 80       	ldd	r12, Y+2	; 0x02
    3be2:	db 80       	ldd	r13, Y+3	; 0x03
    3be4:	ec 80       	ldd	r14, Y+4	; 0x04
    3be6:	fd 80       	ldd	r15, Y+5	; 0x05
    3be8:	46 85       	ldd	r20, Z+14	; 0x0e
    3bea:	57 85       	ldd	r21, Z+15	; 0x0f
    3bec:	60 89       	ldd	r22, Z+16	; 0x10
    3bee:	71 89       	ldd	r23, Z+17	; 0x11
    3bf0:	4c 0d       	add	r20, r12
    3bf2:	5d 1d       	adc	r21, r13
    3bf4:	6e 1d       	adc	r22, r14
    3bf6:	7f 1d       	adc	r23, r15
    3bf8:	c5 01       	movw	r24, r10
    3bfa:	83 dd       	rcall	.-1274   	; 0x3702 <prvInsertTimerInActiveList>
    3bfc:	88 23       	and	r24, r24
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <prvProcessReceivedCommands+0x98>
    3c00:	49 c0       	rjmp	.+146    	; 0x3c94 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c02:	d5 01       	movw	r26, r10
    3c04:	54 96       	adiw	r26, 0x14	; 20
    3c06:	ed 91       	ld	r30, X+
    3c08:	fc 91       	ld	r31, X
    3c0a:	55 97       	sbiw	r26, 0x15	; 21
    3c0c:	c5 01       	movw	r24, r10
    3c0e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c10:	f5 01       	movw	r30, r10
    3c12:	86 89       	ldd	r24, Z+22	; 0x16
    3c14:	82 ff       	sbrs	r24, 2
    3c16:	3e c0       	rjmp	.+124    	; 0x3c94 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3c18:	4a 81       	ldd	r20, Y+2	; 0x02
    3c1a:	5b 81       	ldd	r21, Y+3	; 0x03
    3c1c:	6c 81       	ldd	r22, Y+4	; 0x04
    3c1e:	7d 81       	ldd	r23, Y+5	; 0x05
    3c20:	86 85       	ldd	r24, Z+14	; 0x0e
    3c22:	97 85       	ldd	r25, Z+15	; 0x0f
    3c24:	a0 89       	ldd	r26, Z+16	; 0x10
    3c26:	b1 89       	ldd	r27, Z+17	; 0x11
    3c28:	9a 01       	movw	r18, r20
    3c2a:	ab 01       	movw	r20, r22
    3c2c:	28 0f       	add	r18, r24
    3c2e:	39 1f       	adc	r19, r25
    3c30:	4a 1f       	adc	r20, r26
    3c32:	5b 1f       	adc	r21, r27
    3c34:	c1 2c       	mov	r12, r1
    3c36:	d1 2c       	mov	r13, r1
    3c38:	76 01       	movw	r14, r12
    3c3a:	00 e0       	ldi	r16, 0x00	; 0
    3c3c:	10 e0       	ldi	r17, 0x00	; 0
    3c3e:	60 e0       	ldi	r22, 0x00	; 0
    3c40:	c5 01       	movw	r24, r10
    3c42:	f2 dd       	rcall	.-1052   	; 0x3828 <xTimerGenericCommand>
    3c44:	27 c0       	rjmp	.+78     	; 0x3c94 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c46:	d5 01       	movw	r26, r10
    3c48:	56 96       	adiw	r26, 0x16	; 22
    3c4a:	8c 91       	ld	r24, X
    3c4c:	56 97       	sbiw	r26, 0x16	; 22
    3c4e:	8e 7f       	andi	r24, 0xFE	; 254
    3c50:	56 96       	adiw	r26, 0x16	; 22
    3c52:	8c 93       	st	X, r24
                        break;
    3c54:	1f c0       	rjmp	.+62     	; 0x3c94 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3c56:	f5 01       	movw	r30, r10
    3c58:	86 89       	ldd	r24, Z+22	; 0x16
    3c5a:	81 60       	ori	r24, 0x01	; 1
    3c5c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3c5e:	4a 81       	ldd	r20, Y+2	; 0x02
    3c60:	5b 81       	ldd	r21, Y+3	; 0x03
    3c62:	6c 81       	ldd	r22, Y+4	; 0x04
    3c64:	7d 81       	ldd	r23, Y+5	; 0x05
    3c66:	46 87       	std	Z+14, r20	; 0x0e
    3c68:	57 87       	std	Z+15, r21	; 0x0f
    3c6a:	60 8b       	std	Z+16, r22	; 0x10
    3c6c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3c6e:	40 0f       	add	r20, r16
    3c70:	51 1f       	adc	r21, r17
    3c72:	62 1f       	adc	r22, r18
    3c74:	73 1f       	adc	r23, r19
    3c76:	68 01       	movw	r12, r16
    3c78:	79 01       	movw	r14, r18
    3c7a:	c5 01       	movw	r24, r10
    3c7c:	42 dd       	rcall	.-1404   	; 0x3702 <prvInsertTimerInActiveList>
                        break;
    3c7e:	0a c0       	rjmp	.+20     	; 0x3c94 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3c80:	f5 01       	movw	r30, r10
    3c82:	86 89       	ldd	r24, Z+22	; 0x16
    3c84:	81 fd       	sbrc	r24, 1
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3c88:	c5 01       	movw	r24, r10
    3c8a:	0e 94 41 06 	call	0xc82	; 0xc82 <vPortFree>
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c90:	8e 7f       	andi	r24, 0xFE	; 254
    3c92:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	a9 01       	movw	r20, r18
    3c9a:	be 01       	movw	r22, r28
    3c9c:	6f 5f       	subi	r22, 0xFF	; 255
    3c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca0:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <xTimerQueue>
    3ca4:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <xTimerQueue+0x1>
    3ca8:	0e 94 4f 0a 	call	0x149e	; 0x149e <xQueueReceive>
    3cac:	81 11       	cpse	r24, r1
    3cae:	70 cf       	rjmp	.-288    	; 0x3b90 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3cb0:	28 96       	adiw	r28, 0x08	; 8
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	1f 91       	pop	r17
    3cc2:	0f 91       	pop	r16
    3cc4:	ff 90       	pop	r15
    3cc6:	ef 90       	pop	r14
    3cc8:	df 90       	pop	r13
    3cca:	cf 90       	pop	r12
    3ccc:	bf 90       	pop	r11
    3cce:	af 90       	pop	r10
    3cd0:	08 95       	ret

00003cd2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cd2:	08 95       	ret

00003cd4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cd4:	84 b1       	in	r24, 0x04	; 4
    3cd6:	80 68       	ori	r24, 0x80	; 128
    3cd8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cda:	85 b1       	in	r24, 0x05	; 5
    3cdc:	80 68       	ori	r24, 0x80	; 128
    3cde:	85 b9       	out	0x05, r24	; 5
    3ce0:	08 95       	ret

00003ce2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3ce2:	83 b1       	in	r24, 0x03	; 3
    3ce4:	80 68       	ori	r24, 0x80	; 128
    3ce6:	83 b9       	out	0x03, r24	; 3
    3ce8:	08 95       	ret

00003cea <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3cea:	f4 df       	rcall	.-24     	; 0x3cd4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cec:	2f ef       	ldi	r18, 0xFF	; 255
    3cee:	80 e7       	ldi	r24, 0x70	; 112
    3cf0:	92 e0       	ldi	r25, 0x02	; 2
    3cf2:	21 50       	subi	r18, 0x01	; 1
    3cf4:	80 40       	sbci	r24, 0x00	; 0
    3cf6:	90 40       	sbci	r25, 0x00	; 0
    3cf8:	e1 f7       	brne	.-8      	; 0x3cf2 <vApplicationMallocFailedHook+0x8>
    3cfa:	00 c0       	rjmp	.+0      	; 0x3cfc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3cfc:	00 00       	nop
    3cfe:	f1 df       	rcall	.-30     	; 0x3ce2 <prvBlinkMainLed>
    3d00:	f5 cf       	rjmp	.-22     	; 0x3cec <vApplicationMallocFailedHook+0x2>

00003d02 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3d02:	e8 df       	rcall	.-48     	; 0x3cd4 <prvSetMainLedOn>
    3d04:	2f ef       	ldi	r18, 0xFF	; 255
    3d06:	87 ea       	ldi	r24, 0xA7	; 167
    3d08:	91 e6       	ldi	r25, 0x61	; 97
    3d0a:	21 50       	subi	r18, 0x01	; 1
    3d0c:	80 40       	sbci	r24, 0x00	; 0
    3d0e:	90 40       	sbci	r25, 0x00	; 0
    3d10:	e1 f7       	brne	.-8      	; 0x3d0a <vApplicationStackOverflowHook+0x8>
    3d12:	00 c0       	rjmp	.+0      	; 0x3d14 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3d14:	00 00       	nop
    3d16:	e5 df       	rcall	.-54     	; 0x3ce2 <prvBlinkMainLed>
    3d18:	f5 cf       	rjmp	.-22     	; 0x3d04 <vApplicationStackOverflowHook+0x2>

00003d1a <conditioner_controller_create>:
uint16_t max_humidity;
uint16_t actuator;


void conditioner_controller_create(UBaseType_t priority)
{
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
	actuator=0;
    3d20:	10 92 08 19 	sts	0x1908, r1	; 0x801908 <actuator+0x1>
    3d24:	10 92 07 19 	sts	0x1907, r1	; 0x801907 <actuator>
	xTaskCreate(
    3d28:	e1 2c       	mov	r14, r1
    3d2a:	f1 2c       	mov	r15, r1
    3d2c:	08 2f       	mov	r16, r24
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	48 e8       	ldi	r20, 0x88	; 136
    3d34:	51 e0       	ldi	r21, 0x01	; 1
    3d36:	6e eb       	ldi	r22, 0xBE	; 190
    3d38:	73 e0       	ldi	r23, 0x03	; 3
    3d3a:	8d ed       	ldi	r24, 0xDD	; 221
    3d3c:	9e e1       	ldi	r25, 0x1E	; 30
    3d3e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
	configMINIMAL_STACK_SIZE+200,
	NULL,
	priority,
	NULL );
	
}
    3d42:	0f 91       	pop	r16
    3d44:	ff 90       	pop	r15
    3d46:	ef 90       	pop	r14
    3d48:	08 95       	ret

00003d4a <Conditioner_task>:
	}
}

void Conditioner_task()
{	
	vTaskDelay(6000);
    3d4a:	60 e7       	ldi	r22, 0x70	; 112
    3d4c:	77 e1       	ldi	r23, 0x17	; 23
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
	current_humiditiy=get_humidity_data();
    3d56:	a9 d0       	rcall	.+338    	; 0x3eaa <get_humidity_data>
    3d58:	90 93 00 19 	sts	0x1900, r25	; 0x801900 <current_humiditiy+0x1>
    3d5c:	80 93 ff 18 	sts	0x18FF, r24	; 0x8018ff <current_humiditiy>
	current_temperature=get_temperature_data();
    3d60:	99 d0       	rcall	.+306    	; 0x3e94 <get_temperature_data>
    3d62:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <current_temperature+0x1>
    3d66:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <current_temperature>
    3d6a:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <current_humiditiy+0x1>
	printf("CURRENT %i",current_humiditiy);
    3d6e:	8f 93       	push	r24
    3d70:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <current_humiditiy>
    3d74:	8f 93       	push	r24
    3d76:	84 ed       	ldi	r24, 0xD4	; 212
    3d78:	93 e0       	ldi	r25, 0x03	; 3
    3d7a:	9f 93       	push	r25
    3d7c:	8f 93       	push	r24
    3d7e:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
    3d82:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <current_humiditiy>
		actuator-=100;
		rc_servo_setPosition((uint8_t)0,actuator);
		actuator=0;
	}*/
	
	if (current_humiditiy>0)
    3d86:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <current_humiditiy+0x1>
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	89 2b       	or	r24, r25
    3d94:	89 f0       	breq	.+34     	; 0x3db8 <Conditioner_task+0x6e>
    3d96:	60 91 07 19 	lds	r22, 0x1907	; 0x801907 <actuator>
	{
		actuator+=100;
    3d9a:	70 91 08 19 	lds	r23, 0x1908	; 0x801908 <actuator+0x1>
    3d9e:	6c 59       	subi	r22, 0x9C	; 156
    3da0:	7f 4f       	sbci	r23, 0xFF	; 255
    3da2:	70 93 08 19 	sts	0x1908, r23	; 0x801908 <actuator+0x1>
    3da6:	60 93 07 19 	sts	0x1907, r22	; 0x801907 <actuator>
    3daa:	80 e0       	ldi	r24, 0x00	; 0
		rc_servo_setPosition((uint8_t)0,actuator);
    3dac:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <rc_servo_setPosition>
    3db0:	10 92 08 19 	sts	0x1908, r1	; 0x801908 <actuator+0x1>
		actuator=0;
    3db4:	10 92 07 19 	sts	0x1907, r1	; 0x801907 <actuator>
    3db8:	08 95       	ret

00003dba <Conditioner_Task_Run>:
    3dba:	c7 df       	rcall	.-114    	; 0x3d4a <Conditioner_task>
	
	(void)pvParameters;
	
	for (;;)
	{
		Conditioner_task();
    3dbc:	fe cf       	rjmp	.-4      	; 0x3dba <Conditioner_Task_Run>

00003dbe <create_message_buffer>:
 #include <lora_driver.h>
 const size_t xMessageBufferSizeBytes = 100;
 
 void create_message_buffer()
 {
	 xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3dbe:	41 e0       	ldi	r20, 0x01	; 1
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	70 e0       	ldi	r23, 0x00	; 0
    3dc4:	84 e6       	ldi	r24, 0x64	; 100
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <xStreamBufferGenericCreate>
    3dcc:	90 93 cd 18 	sts	0x18CD, r25	; 0x8018cd <xMessageBuffer+0x1>
    3dd0:	80 93 cc 18 	sts	0x18CC, r24	; 0x8018cc <xMessageBuffer>
	 downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);;
    3dd4:	41 e0       	ldi	r20, 0x01	; 1
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
    3dda:	8c e2       	ldi	r24, 0x2C	; 44
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <xStreamBufferGenericCreate>
    3de2:	90 93 d1 18 	sts	0x18D1, r25	; 0x8018d1 <downlinkMessageBuffer+0x1>
    3de6:	80 93 d0 18 	sts	0x18D0, r24	; 0x8018d0 <downlinkMessageBuffer>
    3dea:	08 95       	ret

00003dec <create_event_groups>:
 }
 
 
void create_event_groups()
{
	_meassureEventGroup=xEventGroupCreate();
    3dec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <xEventGroupCreate>
    3df0:	90 93 cf 18 	sts	0x18CF, r25	; 0x8018cf <_meassureEventGroup+0x1>
    3df4:	80 93 ce 18 	sts	0x18CE, r24	; 0x8018ce <_meassureEventGroup>
	_dataReadyEventGroup=xEventGroupCreate();
    3df8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <xEventGroupCreate>
    3dfc:	90 93 ed 18 	sts	0x18ED, r25	; 0x8018ed <_dataReadyEventGroup+0x1>
    3e00:	80 93 ec 18 	sts	0x18EC, r24	; 0x8018ec <_dataReadyEventGroup>
    3e04:	08 95       	ret

00003e06 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    3e06:	86 e0       	ldi	r24, 0x06	; 6
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 98 05 	call	0xb30	; 0xb30 <pvPortMalloc>
    3e0e:	90 93 0c 19 	sts	0x190C, r25	; 0x80190c <packet+0x1>
    3e12:	80 93 0b 19 	sts	0x190B, r24	; 0x80190b <packet>
	
	if (NULL == packet){
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	11 f4       	brne	.+4      	; 0x3e1e <SensorDataPackage_create+0x18>
		return NULL;
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return packet;
}
    3e1e:	08 95       	ret

00003e20 <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3e20:	e0 91 0b 19 	lds	r30, 0x190B	; 0x80190b <packet>
    3e24:	f0 91 0c 19 	lds	r31, 0x190C	; 0x80190c <packet+0x1>
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	80 83       	st	Z, r24
    3e2c:	08 95       	ret

00003e2e <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3e2e:	e0 91 0b 19 	lds	r30, 0x190B	; 0x80190b <packet>
    3e32:	f0 91 0c 19 	lds	r31, 0x190C	; 0x80190c <packet+0x1>
    3e36:	93 83       	std	Z+3, r25	; 0x03
    3e38:	82 83       	std	Z+2, r24	; 0x02
    3e3a:	08 95       	ret

00003e3c <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    3e3c:	e0 91 0b 19 	lds	r30, 0x190B	; 0x80190b <packet>
    3e40:	f0 91 0c 19 	lds	r31, 0x190C	; 0x80190c <packet+0x1>
    3e44:	95 83       	std	Z+5, r25	; 0x05
    3e46:	84 83       	std	Z+4, r24	; 0x04
    3e48:	08 95       	ret

00003e4a <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3e4a:	e9 e6       	ldi	r30, 0x69	; 105
    3e4c:	f7 e1       	ldi	r31, 0x17	; 23
    3e4e:	26 e0       	ldi	r18, 0x06	; 6
    3e50:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    3e52:	60 83       	st	Z, r22
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3e54:	a0 91 0b 19 	lds	r26, 0x190B	; 0x80190b <packet>
    3e58:	b0 91 0c 19 	lds	r27, 0x190C	; 0x80190c <packet+0x1>
    3e5c:	2c 91       	ld	r18, X
    3e5e:	11 96       	adiw	r26, 0x01	; 1
    3e60:	3c 91       	ld	r19, X
    3e62:	11 97       	sbiw	r26, 0x01	; 1
    3e64:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3e66:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3e68:	12 96       	adiw	r26, 0x02	; 2
    3e6a:	2c 91       	ld	r18, X
    3e6c:	12 97       	sbiw	r26, 0x02	; 2
    3e6e:	13 96       	adiw	r26, 0x03	; 3
    3e70:	3c 91       	ld	r19, X
    3e72:	13 97       	sbiw	r26, 0x03	; 3
    3e74:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3e76:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3e78:	14 96       	adiw	r26, 0x04	; 4
    3e7a:	2c 91       	ld	r18, X
    3e7c:	14 97       	sbiw	r26, 0x04	; 4
    3e7e:	15 96       	adiw	r26, 0x05	; 5
    3e80:	3c 91       	ld	r19, X
    3e82:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3e84:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    3e86:	26 e1       	ldi	r18, 0x16	; 22
    3e88:	dc 01       	movw	r26, r24
    3e8a:	01 90       	ld	r0, Z+
    3e8c:	0d 92       	st	X+, r0
    3e8e:	2a 95       	dec	r18
    3e90:	e1 f7       	brne	.-8      	; 0x3e8a <getLoRaPayload+0x40>
	};
    3e92:	08 95       	ret

00003e94 <get_temperature_data>:
}
//------Get temperature data-----------

uint16_t get_temperature_data()
{
	return (uint16_t)temperature;
    3e94:	60 91 83 17 	lds	r22, 0x1783	; 0x801783 <temperature>
    3e98:	70 91 84 17 	lds	r23, 0x1784	; 0x801784 <temperature+0x1>
    3e9c:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <temperature+0x2>
    3ea0:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <temperature+0x3>
    3ea4:	ff d1       	rcall	.+1022   	; 0x42a4 <__fixunssfsi>
}
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	08 95       	ret

00003eaa <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
	return (uint16_t)humidity;
    3eaa:	60 91 7f 17 	lds	r22, 0x177F	; 0x80177f <humidity>
    3eae:	70 91 80 17 	lds	r23, 0x1780	; 0x801780 <humidity+0x1>
    3eb2:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <humidity+0x2>
    3eb6:	90 91 82 17 	lds	r25, 0x1782	; 0x801782 <humidity+0x3>
    3eba:	f4 d1       	rcall	.+1000   	; 0x42a4 <__fixunssfsi>
}
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	08 95       	ret

00003ec0 <tempHum_taskCreate>:

void tempHum_taskCreate(UBaseType_t task_priority){
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	0f 93       	push	r16
	
	xTaskCreate(
    3ec6:	e1 2c       	mov	r14, r1
    3ec8:	f1 2c       	mov	r15, r1
    3eca:	08 2f       	mov	r16, r24
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 ec       	ldi	r20, 0xC0	; 192
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	6f ed       	ldi	r22, 0xDF	; 223
    3ed6:	73 e0       	ldi	r23, 0x03	; 3
    3ed8:	8e ee       	ldi	r24, 0xEE	; 238
    3eda:	9f e1       	ldi	r25, 0x1F	; 31
    3edc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  task_priority // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    3ee0:	0f 91       	pop	r16
    3ee2:	ff 90       	pop	r15
    3ee4:	ef 90       	pop	r14
    3ee6:	08 95       	ret

00003ee8 <tempHum_Run>:


/* Task to run for the sensors to work */
void tempHum_Run() {
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
	//Wait for Event bits to be set in Group
	
	event_measure = xEventGroupWaitBits(
    3ef2:	cc 24       	eor	r12, r12
    3ef4:	ca 94       	dec	r12
    3ef6:	dc 2c       	mov	r13, r12
    3ef8:	76 01       	movw	r14, r12
    3efa:	01 e0       	ldi	r16, 0x01	; 1
    3efc:	21 e0       	ldi	r18, 0x01	; 1
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <_meassureEventGroup>
    3f0a:	90 91 cf 18 	lds	r25, 0x18CF	; 0x8018cf <_meassureEventGroup+0x1>
    3f0e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <xEventGroupWaitBits>
    3f12:	60 93 0d 19 	sts	0x190D, r22	; 0x80190d <event_measure>
    3f16:	70 93 0e 19 	sts	0x190E, r23	; 0x80190e <event_measure+0x1>
    3f1a:	80 93 0f 19 	sts	0x190F, r24	; 0x80190f <event_measure+0x2>
    3f1e:	90 93 10 19 	sts	0x1910, r25	; 0x801910 <event_measure+0x3>
	TEMPERATURE_HUMIDITY_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
		
	if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    3f22:	60 ff       	sbrs	r22, 0
    3f24:	55 c0       	rjmp	.+170    	; 0x3fd0 <tempHum_Run+0xe8>
	{
		
		vTaskDelay( pdMS_TO_TICKS(100UL));
    3f26:	66 e0       	ldi	r22, 0x06	; 6
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    3f32:	52 d2       	rcall	.+1188   	; 0x43d8 <hih8120_wakeup>
    3f34:	88 23       	and	r24, r24
    3f36:	c1 f0       	breq	.+48     	; 0x3f68 <tempHum_Run+0x80>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f38:	66 e0       	ldi	r22, 0x06	; 6
    3f3a:	70 e0       	ldi	r23, 0x00	; 0
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    3f44:	84 ef       	ldi	r24, 0xF4	; 244
    3f46:	93 e0       	ldi	r25, 0x03	; 3
    3f48:	9f 93       	push	r25
    3f4a:	8f 93       	push	r24
    3f4c:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	06 c0       	rjmp	.+12     	; 0x3f62 <tempHum_Run+0x7a>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    3f56:	63 e0       	ldi	r22, 0x03	; 3
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3f62:	3a d2       	rcall	.+1140   	; 0x43d8 <hih8120_wakeup>
    3f64:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    3f66:	b9 f3       	breq	.-18     	; 0x3f56 <tempHum_Run+0x6e>
    3f68:	4c d2       	rcall	.+1176   	; 0x4402 <hih8120_measure>
		
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3f6a:	63 e0       	ldi	r22, 0x03	; 3
    3f6c:	70 e0       	ldi	r23, 0x00	; 0
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    3f76:	45 d2       	rcall	.+1162   	; 0x4402 <hih8120_measure>
    3f78:	81 11       	cpse	r24, r1
    3f7a:	2a c0       	rjmp	.+84     	; 0x3fd0 <tempHum_Run+0xe8>
		{
			
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f7c:	66 e0       	ldi	r22, 0x06	; 6
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
			humidity =  hih8120_getHumidity();
    3f88:	4d d2       	rcall	.+1178   	; 0x4424 <hih8120_getHumidity>
    3f8a:	60 93 7f 17 	sts	0x177F, r22	; 0x80177f <humidity>
    3f8e:	70 93 80 17 	sts	0x1780, r23	; 0x801780 <humidity+0x1>
    3f92:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <humidity+0x2>
    3f96:	90 93 82 17 	sts	0x1782, r25	; 0x801782 <humidity+0x3>
			temperature = hih8120_getTemperature();
    3f9a:	59 d2       	rcall	.+1202   	; 0x444e <hih8120_getTemperature>
    3f9c:	60 93 83 17 	sts	0x1783, r22	; 0x801783 <temperature>
    3fa0:	70 93 84 17 	sts	0x1784, r23	; 0x801784 <temperature+0x1>
    3fa4:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <temperature+0x2>
    3fa8:	90 93 86 17 	sts	0x1786, r25	; 0x801786 <temperature+0x3>
			printf("<<Temperature Humidity task set>>");
    3fac:	8e e2       	ldi	r24, 0x2E	; 46
    3fae:	94 e0       	ldi	r25, 0x04	; 4
    3fb0:	9f 93       	push	r25
    3fb2:	8f 93       	push	r24
    3fb4:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3fb8:	42 e0       	ldi	r20, 0x02	; 2
    3fba:	50 e0       	ldi	r21, 0x00	; 0
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	70 e0       	ldi	r23, 0x00	; 0
    3fc0:	80 91 ec 18 	lds	r24, 0x18EC	; 0x8018ec <_dataReadyEventGroup>
    3fc4:	90 91 ed 18 	lds	r25, 0x18ED	; 0x8018ed <_dataReadyEventGroup+0x1>
    3fc8:	0e 94 97 04 	call	0x92e	; 0x92e <xEventGroupSetBits>
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
		}
	}
	
}
    3fd0:	0f 91       	pop	r16
    3fd2:	ff 90       	pop	r15
    3fd4:	ef 90       	pop	r14
    3fd6:	df 90       	pop	r13
    3fd8:	cf 90       	pop	r12
    3fda:	08 95       	ret

00003fdc <tempHum_Task>:
void tempHum_Task( void *pvParameters )
{
	(void)pvParameters;
	for(;;)
	{
		tempHum_Run();
    3fdc:	85 df       	rcall	.-246    	; 0x3ee8 <tempHum_Run>
    3fde:	fe cf       	rjmp	.-4      	; 0x3fdc <tempHum_Task>

00003fe0 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{
    3fe0:	0f 93       	push	r16
    3fe2:	1f 93       	push	r17
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
    3fec:	64 97       	sbiw	r28, 0x14	; 20
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	f8 94       	cli
    3ff2:	de bf       	out	0x3e, r29	; 62
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	0e 94 a2 2c 	call	0x5944	; 0x5944 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ffe:	af d3       	rcall	.+1886   	; 0x475e <lora_driver_rn2483FactoryReset>
    4000:	2b d6       	rcall	.+3158   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    4002:	9f 93       	push	r25
    4004:	8f 93       	push	r24
    4006:	80 e5       	ldi	r24, 0x50	; 80
    4008:	94 e0       	ldi	r25, 0x04	; 4
    400a:	9f 93       	push	r25
    400c:	8f 93       	push	r24
    400e:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    4012:	23 d5       	rcall	.+2630   	; 0x4a5a <lora_driver_configureToEu868>
    4014:	21 d6       	rcall	.+3138   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    4016:	9f 93       	push	r25
    4018:	8f 93       	push	r24
    401a:	83 e6       	ldi	r24, 0x63	; 99
    401c:	94 e0       	ldi	r25, 0x04	; 4
    401e:	9f 93       	push	r25
    4020:	8f 93       	push	r24
    4022:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
    4026:	8c e7       	ldi	r24, 0x7C	; 124
    4028:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join1");
    402a:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
    402e:	8e 01       	movw	r16, r28
    4030:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    4032:	1f 4f       	sbci	r17, 0xFF	; 255
    4034:	c8 01       	movw	r24, r16
    4036:	a5 d3       	rcall	.+1866   	; 0x4782 <lora_driver_getRn2483Hweui>
    4038:	0f d6       	rcall	.+3102   	; 0x4c58 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    403a:	1f 93       	push	r17
    403c:	0f 93       	push	r16
    403e:	9f 93       	push	r25
    4040:	8f 93       	push	r24
    4042:	89 e8       	ldi	r24, 0x89	; 137
    4044:	94 e0       	ldi	r25, 0x04	; 4
    4046:	9f 93       	push	r25
    4048:	8f 93       	push	r24
    404a:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    404e:	c8 01       	movw	r24, r16
    4050:	b4 d3       	rcall	.+1896   	; 0x47ba <lora_driver_setDeviceIdentifier>
    4052:	02 d6       	rcall	.+3076   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    4054:	9f 93       	push	r25
    4056:	8f 93       	push	r24
    4058:	1f 93       	push	r17
    405a:	0f 93       	push	r16
    405c:	8d e9       	ldi	r24, 0x9D	; 157
    405e:	94 e0       	ldi	r25, 0x04	; 4
    4060:	9f 93       	push	r25
    4062:	8f 93       	push	r24
    4064:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
    4068:	82 eb       	ldi	r24, 0xB2	; 178
    406a:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join2");
    406c:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    4070:	a8 01       	movw	r20, r16
    4072:	6f eb       	ldi	r22, 0xBF	; 191
    4074:	74 e0       	ldi	r23, 0x04	; 4
    4076:	80 ee       	ldi	r24, 0xE0	; 224
    4078:	94 e0       	ldi	r25, 0x04	; 4
    407a:	cd d5       	rcall	.+2970   	; 0x4c16 <lora_driver_setOtaaIdentity>
    407c:	ed d5       	rcall	.+3034   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	1f 93       	push	r17
    4084:	0f 93       	push	r16
    4086:	8f eb       	ldi	r24, 0xBF	; 191
    4088:	94 e0       	ldi	r25, 0x04	; 4
    408a:	9f 93       	push	r25
    408c:	8f 93       	push	r24
    408e:	80 ee       	ldi	r24, 0xE0	; 224
    4090:	94 e0       	ldi	r25, 0x04	; 4
    4092:	9f 93       	push	r25
    4094:	8f 93       	push	r24
    4096:	81 ef       	ldi	r24, 0xF1	; 241
    4098:	94 e0       	ldi	r25, 0x04	; 4
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    40a2:	be d3       	rcall	.+1916   	; 0x4820 <lora_driver_saveMac>
    40a4:	d9 d5       	rcall	.+2994   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    40a6:	9f 93       	push	r25
    40a8:	8f 93       	push	r24
    40aa:	87 e2       	ldi	r24, 0x27	; 39
    40ac:	95 e0       	ldi	r25, 0x05	; 5
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	f8 94       	cli
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	0f be       	out	0x3f, r0	; 63
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	a8 d4       	rcall	.+2384   	; 0x4a14 <lora_driver_setAdaptiveDataRate>
    40c4:	c9 d5       	rcall	.+2962   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    40c6:	9f 93       	push	r25
    40c8:	8f 93       	push	r24
    40ca:	86 e3       	ldi	r24, 0x36	; 54
    40cc:	95 e0       	ldi	r25, 0x05	; 5
    40ce:	9f 93       	push	r25
    40d0:	8f 93       	push	r24
    40d2:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
	puts("Try to join3");
    40d6:	87 e5       	ldi	r24, 0x57	; 87
    40d8:	95 e0       	ldi	r25, 0x05	; 5
    40da:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    40de:	84 ef       	ldi	r24, 0xF4	; 244
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	a3 d4       	rcall	.+2374   	; 0x4a2a <lora_driver_setReceiveDelay>
    40e4:	b9 d5       	rcall	.+2930   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    40e6:	9f 93       	push	r25
    40e8:	8f 93       	push	r24
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	8f 93       	push	r24
    40ee:	84 ef       	ldi	r24, 0xF4	; 244
    40f0:	8f 93       	push	r24
    40f2:	84 e6       	ldi	r24, 0x64	; 100
    40f4:	95 e0       	ldi	r25, 0x05	; 5
    40f6:	9f 93       	push	r25
    40f8:	8f 93       	push	r24
    40fa:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    4108:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	8f d3       	rcall	.+1822   	; 0x482c <lora_driver_join>
    410e:	08 2f       	mov	r16, r24
    4110:	a3 d5       	rcall	.+2886   	; 0x4c58 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4112:	9f 93       	push	r25
    4114:	8f 93       	push	r24
    4116:	1f 92       	push	r1
    4118:	1f 93       	push	r17
    411a:	84 e8       	ldi	r24, 0x84	; 132
    411c:	95 e0       	ldi	r25, 0x05	; 5
    411e:	9f 93       	push	r25
    4120:	8f 93       	push	r24
    4122:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	08 30       	cpi	r16, 0x08	; 8
    4134:	59 f0       	breq	.+22     	; 0x414c <uplink_lora_setup+0x16c>
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    413c:	66 e3       	ldi	r22, 0x36	; 54
    413e:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
    4148:	11 50       	subi	r17, 0x01	; 1
    414a:	f9 f6       	brne	.-66     	; 0x410a <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    414c:	08 30       	cpi	r16, 0x08	; 8
    414e:	21 f4       	brne	.+8      	; 0x4158 <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    4156:	0d c0       	rjmp	.+26     	; 0x4172 <uplink_lora_setup+0x192>
    4158:	84 ea       	ldi	r24, 0xA4	; 164
		while (1)
		{
			taskYIELD();
		}
	}
}
    415a:	95 e0       	ldi	r25, 0x05	; 5
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    415c:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	0e 94 c5 2c 	call	0x598a	; 0x598a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    416c:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4170:	fd cf       	rjmp	.-6      	; 0x416c <uplink_lora_setup+0x18c>
    4172:	64 96       	adiw	r28, 0x14	; 20
    4174:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    4176:	f8 94       	cli
    4178:	de bf       	out	0x3e, r29	; 62
    417a:	0f be       	out	0x3f, r0	; 63
    417c:	cd bf       	out	0x3d, r28	; 61
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	08 95       	ret

00004188 <upLink_create>:
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority)
{
    418c:	0f 93       	push	r16
	
	
	xTaskCreate(
    418e:	20 91 cc 18 	lds	r18, 0x18CC	; 0x8018cc <xMessageBuffer>
    4192:	30 91 cd 18 	lds	r19, 0x18CD	; 0x8018cd <xMessageBuffer+0x1>
    4196:	e1 2c       	mov	r14, r1
    4198:	f1 2c       	mov	r15, r1
    419a:	08 2f       	mov	r16, r24
    419c:	48 e8       	ldi	r20, 0x88	; 136
    419e:	51 e0       	ldi	r21, 0x01	; 1
    41a0:	6f ea       	ldi	r22, 0xAF	; 175
    41a2:	75 e0       	ldi	r23, 0x05	; 5
    41a4:	88 e1       	ldi	r24, 0x18	; 24
    41a6:	91 e2       	ldi	r25, 0x21	; 33
    41a8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)xMessageBuffer,
	priority,
	NULL );
}
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	08 95       	ret

000041b4 <send>:
			taskYIELD();
		}
	}
}

void send(size_t xBytesSent){
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
	
	xBytesSent = xMessageBufferReceive(
    41b8:	0f ef       	ldi	r16, 0xFF	; 255
    41ba:	1f ef       	ldi	r17, 0xFF	; 255
    41bc:	98 01       	movw	r18, r16
    41be:	46 e1       	ldi	r20, 0x16	; 22
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	67 e8       	ldi	r22, 0x87	; 135
    41c4:	77 e1       	ldi	r23, 0x17	; 23
    41c6:	80 91 cc 18 	lds	r24, 0x18CC	; 0x8018cc <xMessageBuffer>
    41ca:	90 91 cd 18 	lds	r25, 0x18CD	; 0x8018cd <xMessageBuffer+0x1>
    41ce:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xStreamBufferReceive>
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(_uplink_payload),	// Size of object
	portMAX_DELAY);

	
	if (xBytesSent>0)
    41d2:	89 2b       	or	r24, r25
    41d4:	a1 f0       	breq	.+40     	; 0x41fe <send+0x4a>
	{
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    41d6:	83 e0       	ldi	r24, 0x03	; 3
    41d8:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    41dc:	67 e8       	ldi	r22, 0x87	; 135
    41de:	77 e1       	ldi	r23, 0x17	; 23
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	4d d3       	rcall	.+1690   	; 0x487e <lora_driver_sendUploadMessage>
    41e4:	39 d5       	rcall	.+2674   	; 0x4c58 <lora_driver_mapReturnCodeToText>
    41e6:	9f 93       	push	r25
    41e8:	8f 93       	push	r24
    41ea:	8a eb       	ldi	r24, 0xBA	; 186
    41ec:	95 e0       	ldi	r25, 0x05	; 5
    41ee:	9f 93       	push	r25
    41f0:	8f 93       	push	r24
    41f2:	0e 94 2e 32 	call	0x645c	; 0x645c <printf>
    41f6:	0f 90       	pop	r0
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
	}
}
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	08 95       	ret

00004204 <lora_Handler_task>:

void lora_Handler_task()
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	9d d2       	rcall	.+1338   	; 0x4742 <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    4208:	62 e0       	ldi	r22, 0x02	; 2
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	95 d2       	rcall	.+1322   	; 0x4742 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    4218:	66 e9       	ldi	r22, 0x96	; 150
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4224:	47 d2       	rcall	.+1166   	; 0x46b4 <lora_driver_flushBuffers>
	uplink_lora_setup();
    4226:	dc de       	rcall	.-584    	; 0x3fe0 <uplink_lora_setup>
	size_t xBytesSent;
	
	for(;;)
	{
		send(xBytesSent);
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	c3 df       	rcall	.-122    	; 0x41b4 <send>
    422e:	fc cf       	rjmp	.-8      	; 0x4228 <lora_Handler_task+0x24>

00004230 <upLinkHandler_StartTask>:
    4230:	e9 df       	rcall	.-46     	; 0x4204 <lora_Handler_task>

00004232 <create_tasks>:
extern MessageBufferHandle_t downlinkMessageBuffer;

void create_tasks()
{
	
	application_task_create(3);
    4232:	83 e0       	ldi	r24, 0x03	; 3
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0e 94 08 01 	call	0x210	; 0x210 <application_task_create>
	co2_task_create(1);
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <co2_task_create>
	tempHum_taskCreate(1);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	3e de       	rcall	.-900    	; 0x3ec0 <tempHum_taskCreate>
	//ToDo maybe to move inside the application task
	SensorDataPackage_create();
    4244:	e0 dd       	rcall	.-1088   	; 0x3e06 <SensorDataPackage_create>
	conditioner_controller_create(4);
    4246:	84 e0       	ldi	r24, 0x04	; 4
    4248:	68 dd       	rcall	.-1328   	; 0x3d1a <conditioner_controller_create>
    424a:	0c 94 41 02 	jmp	0x482	; 0x482 <Configuration_create>
	Configuration_create();
    424e:	08 95       	ret

00004250 <drivers_initialisation>:
    4250:	ab d0       	rcall	.+342    	; 0x43a8 <hih8120_initialise>

void drivers_initialisation()
{
	
	  hih8120_initialise();
	  mh_z19_initialise(ser_USART3);
    4252:	83 e0       	ldi	r24, 0x03	; 3
	  rc_servo_initialise();
    4254:	dd d5       	rcall	.+3002   	; 0x4e10 <mh_z19_initialise>
    4256:	4d c6       	rjmp	.+3226   	; 0x4ef2 <rc_servo_initialise>
    4258:	08 95       	ret

0000425a <createUtility>:
}

void createUtility()
{
	create_event_groups();
    425a:	c8 dd       	rcall	.-1136   	; 0x3dec <create_event_groups>
	create_message_buffer();
    425c:	b0 cd       	rjmp	.-1184   	; 0x3dbe <create_message_buffer>
    425e:	08 95       	ret

00004260 <initialiseSystem>:
    4260:	81 b1       	in	r24, 0x01	; 1
}

void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    4262:	81 68       	ori	r24, 0x81	; 129
    4264:	81 b9       	out	0x01, r24	; 1
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	0e 94 4d 2b 	call	0x569a	; 0x569a <stdio_initialise>
	
	drivers_initialisation();
    426c:	f1 df       	rcall	.-30     	; 0x4250 <drivers_initialisation>
	
	create_tasks();
    426e:	e1 df       	rcall	.-62     	; 0x4232 <create_tasks>
    4270:	85 e0       	ldi	r24, 0x05	; 5
	status_leds_initialise(5); // Priority 5 for internal task
    4272:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	createUtility();
    4276:	f1 df       	rcall	.-30     	; 0x425a <createUtility>
    4278:	60 91 d0 18 	lds	r22, 0x18D0	; 0x8018d0 <downlinkMessageBuffer>
	lora_driver_initialise(1, downlinkMessageBuffer);
    427c:	70 91 d1 18 	lds	r23, 0x18D1	; 0x8018d1 <downlinkMessageBuffer+0x1>
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	1f d2       	rcall	.+1086   	; 0x46c2 <lora_driver_initialise>
	// Create UpLinkTask and start it up with priority 4 and setup the LoRaWan
	upLink_create(4);
    4284:	84 e0       	ldi	r24, 0x04	; 4
    4286:	80 df       	rcall	.-256    	; 0x4188 <upLink_create>
    4288:	85 e0       	ldi	r24, 0x05	; 5
	
	// Create DownlinkTask and start it up with priority 5
	lora_DownLinkHandler_create(5);
    428a:	0c 94 16 03 	jmp	0x62c	; 0x62c <lora_DownLinkHandler_create>
    428e:	08 95       	ret

00004290 <main>:
    4290:	e7 df       	rcall	.-50     	; 0x4260 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	//printf("Program Started!!\n");
	printf("Program started \n");
    4292:	8f ec       	ldi	r24, 0xCF	; 207
    4294:	95 e0       	ldi	r25, 0x05	; 5
    4296:	0e 94 41 32 	call	0x6482	; 0x6482 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    429a:	0e 94 40 11 	call	0x2280	; 0x2280 <vTaskStartScheduler>
	/* Replace with your application code */
	
}
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	08 95       	ret

000042a4 <__fixunssfsi>:
    42a4:	33 d0       	rcall	.+102    	; 0x430c <__fp_splitA>
    42a6:	88 f0       	brcs	.+34     	; 0x42ca <__fixunssfsi+0x26>
    42a8:	9f 57       	subi	r25, 0x7F	; 127
    42aa:	90 f0       	brcs	.+36     	; 0x42d0 <__fixunssfsi+0x2c>
    42ac:	b9 2f       	mov	r27, r25
    42ae:	99 27       	eor	r25, r25
    42b0:	b7 51       	subi	r27, 0x17	; 23
    42b2:	a0 f0       	brcs	.+40     	; 0x42dc <__fixunssfsi+0x38>
    42b4:	d1 f0       	breq	.+52     	; 0x42ea <__fixunssfsi+0x46>
    42b6:	66 0f       	add	r22, r22
    42b8:	77 1f       	adc	r23, r23
    42ba:	88 1f       	adc	r24, r24
    42bc:	99 1f       	adc	r25, r25
    42be:	1a f0       	brmi	.+6      	; 0x42c6 <__fixunssfsi+0x22>
    42c0:	ba 95       	dec	r27
    42c2:	c9 f7       	brne	.-14     	; 0x42b6 <__fixunssfsi+0x12>
    42c4:	12 c0       	rjmp	.+36     	; 0x42ea <__fixunssfsi+0x46>
    42c6:	b1 30       	cpi	r27, 0x01	; 1
    42c8:	81 f0       	breq	.+32     	; 0x42ea <__fixunssfsi+0x46>
    42ca:	3a d0       	rcall	.+116    	; 0x4340 <__fp_zero>
    42cc:	b1 e0       	ldi	r27, 0x01	; 1
    42ce:	08 95       	ret
    42d0:	37 c0       	rjmp	.+110    	; 0x4340 <__fp_zero>
    42d2:	67 2f       	mov	r22, r23
    42d4:	78 2f       	mov	r23, r24
    42d6:	88 27       	eor	r24, r24
    42d8:	b8 5f       	subi	r27, 0xF8	; 248
    42da:	39 f0       	breq	.+14     	; 0x42ea <__fixunssfsi+0x46>
    42dc:	b9 3f       	cpi	r27, 0xF9	; 249
    42de:	cc f3       	brlt	.-14     	; 0x42d2 <__fixunssfsi+0x2e>
    42e0:	86 95       	lsr	r24
    42e2:	77 95       	ror	r23
    42e4:	67 95       	ror	r22
    42e6:	b3 95       	inc	r27
    42e8:	d9 f7       	brne	.-10     	; 0x42e0 <__fixunssfsi+0x3c>
    42ea:	3e f4       	brtc	.+14     	; 0x42fa <__fixunssfsi+0x56>
    42ec:	90 95       	com	r25
    42ee:	80 95       	com	r24
    42f0:	70 95       	com	r23
    42f2:	61 95       	neg	r22
    42f4:	7f 4f       	sbci	r23, 0xFF	; 255
    42f6:	8f 4f       	sbci	r24, 0xFF	; 255
    42f8:	9f 4f       	sbci	r25, 0xFF	; 255
    42fa:	08 95       	ret

000042fc <__fp_split3>:
    42fc:	57 fd       	sbrc	r21, 7
    42fe:	90 58       	subi	r25, 0x80	; 128
    4300:	44 0f       	add	r20, r20
    4302:	55 1f       	adc	r21, r21
    4304:	59 f0       	breq	.+22     	; 0x431c <__fp_splitA+0x10>
    4306:	5f 3f       	cpi	r21, 0xFF	; 255
    4308:	71 f0       	breq	.+28     	; 0x4326 <__fp_splitA+0x1a>
    430a:	47 95       	ror	r20

0000430c <__fp_splitA>:
    430c:	88 0f       	add	r24, r24
    430e:	97 fb       	bst	r25, 7
    4310:	99 1f       	adc	r25, r25
    4312:	61 f0       	breq	.+24     	; 0x432c <__fp_splitA+0x20>
    4314:	9f 3f       	cpi	r25, 0xFF	; 255
    4316:	79 f0       	breq	.+30     	; 0x4336 <__fp_splitA+0x2a>
    4318:	87 95       	ror	r24
    431a:	08 95       	ret
    431c:	12 16       	cp	r1, r18
    431e:	13 06       	cpc	r1, r19
    4320:	14 06       	cpc	r1, r20
    4322:	55 1f       	adc	r21, r21
    4324:	f2 cf       	rjmp	.-28     	; 0x430a <__fp_split3+0xe>
    4326:	46 95       	lsr	r20
    4328:	f1 df       	rcall	.-30     	; 0x430c <__fp_splitA>
    432a:	08 c0       	rjmp	.+16     	; 0x433c <__fp_splitA+0x30>
    432c:	16 16       	cp	r1, r22
    432e:	17 06       	cpc	r1, r23
    4330:	18 06       	cpc	r1, r24
    4332:	99 1f       	adc	r25, r25
    4334:	f1 cf       	rjmp	.-30     	; 0x4318 <__fp_splitA+0xc>
    4336:	86 95       	lsr	r24
    4338:	71 05       	cpc	r23, r1
    433a:	61 05       	cpc	r22, r1
    433c:	08 94       	sec
    433e:	08 95       	ret

00004340 <__fp_zero>:
    4340:	e8 94       	clt

00004342 <__fp_szero>:
    4342:	bb 27       	eor	r27, r27
    4344:	66 27       	eor	r22, r22
    4346:	77 27       	eor	r23, r23
    4348:	cb 01       	movw	r24, r22
    434a:	97 f9       	bld	r25, 7
    434c:	08 95       	ret

0000434e <_hihTwiCallback>:
    434e:	65 30       	cpi	r22, 0x05	; 5
    4350:	f1 f4       	brne	.+60     	; 0x438e <_hihTwiCallback+0x40>
    4352:	fa 01       	movw	r30, r20
    4354:	80 81       	ld	r24, Z
    4356:	8f 73       	andi	r24, 0x3F	; 63
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	98 2f       	mov	r25, r24
    435c:	88 27       	eor	r24, r24
    435e:	21 81       	ldd	r18, Z+1	; 0x01
    4360:	82 2b       	or	r24, r18
    4362:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4366:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    436a:	82 81       	ldd	r24, Z+2	; 0x02
    436c:	f0 e4       	ldi	r31, 0x40	; 64
    436e:	8f 9f       	mul	r24, r31
    4370:	c0 01       	movw	r24, r0
    4372:	11 24       	eor	r1, r1
    4374:	fa 01       	movw	r30, r20
    4376:	23 81       	ldd	r18, Z+3	; 0x03
    4378:	26 95       	lsr	r18
    437a:	26 95       	lsr	r18
    437c:	82 2b       	or	r24, r18
    437e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4382:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <_measuringIsReady>
    438c:	08 95       	ret
    438e:	64 30       	cpi	r22, 0x04	; 4
    4390:	51 f0       	breq	.+20     	; 0x43a6 <_hihTwiCallback+0x58>
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	90 e4       	ldi	r25, 0x40	; 64
    4396:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    439a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    439e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    43a2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    43a6:	08 95       	ret

000043a8 <hih8120_initialise>:
    43a8:	0f 93       	push	r16
    43aa:	1f 93       	push	r17
    43ac:	07 ea       	ldi	r16, 0xA7	; 167
    43ae:	11 e2       	ldi	r17, 0x21	; 33
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	34 e2       	ldi	r19, 0x24	; 36
    43b4:	44 ef       	ldi	r20, 0xF4	; 244
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	87 e2       	ldi	r24, 0x27	; 39
    43bc:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <twiCreate>
    43c0:	90 93 9f 17 	sts	0x179F, r25	; 0x80179f <_hih8120Handler+0x1>
    43c4:	80 93 9e 17 	sts	0x179E, r24	; 0x80179e <_hih8120Handler>
    43c8:	21 e0       	ldi	r18, 0x01	; 1
    43ca:	89 2b       	or	r24, r25
    43cc:	09 f0       	breq	.+2      	; 0x43d0 <hih8120_initialise+0x28>
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	82 2f       	mov	r24, r18
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <hih8120_wakeup>:
    43d8:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <_hih8120Handler>
    43dc:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <_hih8120Handler+0x1>
    43e0:	00 97       	sbiw	r24, 0x00	; 0
    43e2:	59 f0       	breq	.+22     	; 0x43fa <hih8120_wakeup+0x22>
    43e4:	40 e0       	ldi	r20, 0x00	; 0
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	70 e0       	ldi	r23, 0x00	; 0
    43ea:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <twiTransmit>
    43ee:	84 30       	cpi	r24, 0x04	; 4
    43f0:	31 f4       	brne	.+12     	; 0x43fe <hih8120_wakeup+0x26>
    43f2:	10 92 9d 17 	sts	0x179D, r1	; 0x80179d <_measuringIsReady>
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	08 95       	ret
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	08 95       	ret
    43fe:	83 e0       	ldi	r24, 0x03	; 3
    4400:	08 95       	ret

00004402 <hih8120_measure>:
    4402:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <_hih8120Handler>
    4406:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <_hih8120Handler+0x1>
    440a:	00 97       	sbiw	r24, 0x00	; 0
    440c:	39 f0       	breq	.+14     	; 0x441c <hih8120_measure+0x1a>
    440e:	64 e0       	ldi	r22, 0x04	; 4
    4410:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <twiReceive>
    4414:	85 30       	cpi	r24, 0x05	; 5
    4416:	21 f0       	breq	.+8      	; 0x4420 <hih8120_measure+0x1e>
    4418:	83 e0       	ldi	r24, 0x03	; 3
    441a:	08 95       	ret
    441c:	82 e0       	ldi	r24, 0x02	; 2
    441e:	08 95       	ret
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	08 95       	ret

00004424 <hih8120_getHumidity>:
    4424:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4428:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <__floatunsisf>
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	48 ec       	ldi	r20, 0xC8	; 200
    443a:	52 e4       	ldi	r21, 0x42	; 66
    443c:	0e 94 1a 30 	call	0x6034	; 0x6034 <__mulsf3>
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	38 ef       	ldi	r19, 0xF8	; 248
    4444:	4f e7       	ldi	r20, 0x7F	; 127
    4446:	56 e4       	ldi	r21, 0x46	; 70
    4448:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__divsf3>
    444c:	08 95       	ret

0000444e <hih8120_getTemperature>:
    444e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4452:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <__floatunsisf>
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	45 e2       	ldi	r20, 0x25	; 37
    4464:	53 e4       	ldi	r21, 0x43	; 67
    4466:	0e 94 1a 30 	call	0x6034	; 0x6034 <__mulsf3>
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	38 ef       	ldi	r19, 0xF8	; 248
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	56 e4       	ldi	r21, 0x46	; 70
    4472:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__divsf3>
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	40 e2       	ldi	r20, 0x20	; 32
    447c:	52 e4       	ldi	r21, 0x42	; 66
    447e:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__subsf3>
    4482:	08 95       	ret

00004484 <_serialCallBack>:
    4484:	0f 93       	push	r16
    4486:	1f 93       	push	r17
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	1f 92       	push	r1
    448e:	1f 92       	push	r1
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	8c 01       	movw	r16, r24
    4496:	19 82       	std	Y+1, r1	; 0x01
    4498:	2d c0       	rjmp	.+90     	; 0x44f4 <_serialCallBack+0x70>
    449a:	e0 91 d7 17 	lds	r30, 0x17D7	; 0x8017d7 <rec_buf_inp.2878>
    449e:	ec 32       	cpi	r30, 0x2C	; 44
    44a0:	50 f4       	brcc	.+20     	; 0x44b6 <_serialCallBack+0x32>
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	8e 0f       	add	r24, r30
    44a6:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <rec_buf_inp.2878>
    44aa:	f0 e0       	ldi	r31, 0x00	; 0
    44ac:	e7 5f       	subi	r30, 0xF7	; 247
    44ae:	f7 4e       	sbci	r31, 0xE7	; 231
    44b0:	8a 81       	ldd	r24, Y+2	; 0x02
    44b2:	80 83       	st	Z, r24
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <_serialCallBack+0x36>
    44b6:	10 92 d7 17 	sts	0x17D7, r1	; 0x8017d7 <rec_buf_inp.2878>
    44ba:	8a 81       	ldd	r24, Y+2	; 0x02
    44bc:	8a 30       	cpi	r24, 0x0A	; 10
    44be:	d1 f4       	brne	.+52     	; 0x44f4 <_serialCallBack+0x70>
    44c0:	40 91 d7 17 	lds	r20, 0x17D7	; 0x8017d7 <rec_buf_inp.2878>
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	fa 01       	movw	r30, r20
    44c8:	e9 5f       	subi	r30, 0xF9	; 249
    44ca:	f7 4e       	sbci	r31, 0xE7	; 231
    44cc:	10 82       	st	Z, r1
    44ce:	41 50       	subi	r20, 0x01	; 1
    44d0:	51 09       	sbc	r21, r1
    44d2:	9e 01       	movw	r18, r28
    44d4:	2f 5f       	subi	r18, 0xFF	; 255
    44d6:	3f 4f       	sbci	r19, 0xFF	; 255
    44d8:	69 e0       	ldi	r22, 0x09	; 9
    44da:	78 e1       	ldi	r23, 0x18	; 24
    44dc:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <_serialReplyBufferHandle>
    44e0:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <_serialReplyBufferHandle+0x1>
    44e4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xStreamBufferSendFromISR>
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	81 11       	cpse	r24, r1
    44ec:	0e 94 4c 07 	call	0xe98	; 0xe98 <vPortYield>
    44f0:	10 92 d7 17 	sts	0x17D7, r1	; 0x8017d7 <rec_buf_inp.2878>
    44f4:	be 01       	movw	r22, r28
    44f6:	6e 5f       	subi	r22, 0xFE	; 254
    44f8:	7f 4f       	sbci	r23, 0xFF	; 255
    44fa:	c8 01       	movw	r24, r16
    44fc:	38 d6       	rcall	.+3184   	; 0x516e <serial_getByte>
    44fe:	88 23       	and	r24, r24
    4500:	61 f2       	breq	.-104    	; 0x449a <_serialCallBack+0x16>
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	08 95       	ret

00004510 <_uploadMessage>:
    4510:	0f 93       	push	r16
    4512:	1f 93       	push	r17
    4514:	cf 93       	push	r28
    4516:	df 93       	push	r29
    4518:	8c 01       	movw	r16, r24
    451a:	eb 01       	movw	r28, r22
    451c:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <_serialReplyBufferHandle>
    4520:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <_serialReplyBufferHandle+0x1>
    4524:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <xStreamBufferReset>
    4528:	b8 01       	movw	r22, r16
    452a:	80 ea       	ldi	r24, 0xA0	; 160
    452c:	97 e1       	ldi	r25, 0x17	; 23
    452e:	0e 94 0f 32 	call	0x641e	; 0x641e <strcpy>
    4532:	20 97       	sbiw	r28, 0x00	; 0
    4534:	79 f0       	breq	.+30     	; 0x4554 <_uploadMessage+0x44>
    4536:	e0 ea       	ldi	r30, 0xA0	; 160
    4538:	f7 e1       	ldi	r31, 0x17	; 23
    453a:	01 90       	ld	r0, Z+
    453c:	00 20       	and	r0, r0
    453e:	e9 f7       	brne	.-6      	; 0x453a <_uploadMessage+0x2a>
    4540:	31 97       	sbiw	r30, 0x01	; 1
    4542:	80 e2       	ldi	r24, 0x20	; 32
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	91 83       	std	Z+1, r25	; 0x01
    4548:	80 83       	st	Z, r24
    454a:	be 01       	movw	r22, r28
    454c:	80 ea       	ldi	r24, 0xA0	; 160
    454e:	97 e1       	ldi	r25, 0x17	; 23
    4550:	0e 94 04 32 	call	0x6408	; 0x6408 <strcat>
    4554:	e0 ea       	ldi	r30, 0xA0	; 160
    4556:	f7 e1       	ldi	r31, 0x17	; 23
    4558:	df 01       	movw	r26, r30
    455a:	0d 90       	ld	r0, X+
    455c:	00 20       	and	r0, r0
    455e:	e9 f7       	brne	.-6      	; 0x455a <_uploadMessage+0x4a>
    4560:	11 97       	sbiw	r26, 0x01	; 1
    4562:	8d e0       	ldi	r24, 0x0D	; 13
    4564:	9a e0       	ldi	r25, 0x0A	; 10
    4566:	11 96       	adiw	r26, 0x01	; 1
    4568:	9c 93       	st	X, r25
    456a:	8e 93       	st	-X, r24
    456c:	12 96       	adiw	r26, 0x02	; 2
    456e:	1c 92       	st	X, r1
    4570:	01 90       	ld	r0, Z+
    4572:	00 20       	and	r0, r0
    4574:	e9 f7       	brne	.-6      	; 0x4570 <_uploadMessage+0x60>
    4576:	31 97       	sbiw	r30, 0x01	; 1
    4578:	e0 5a       	subi	r30, 0xA0	; 160
    457a:	f7 41       	sbci	r31, 0x17	; 23
    457c:	ae 2f       	mov	r26, r30
    457e:	80 ea       	ldi	r24, 0xA0	; 160
    4580:	97 e1       	ldi	r25, 0x17	; 23
    4582:	ac 01       	movw	r20, r24
    4584:	6a 2f       	mov	r22, r26
    4586:	80 91 dc 17 	lds	r24, 0x17DC	; 0x8017dc <_rn2483_serial>
    458a:	90 91 dd 17 	lds	r25, 0x17DD	; 0x8017dd <_rn2483_serial+0x1>
    458e:	9a d5       	rcall	.+2868   	; 0x50c4 <serial_sendBytes>
    4590:	81 11       	cpse	r24, r1
    4592:	11 c0       	rjmp	.+34     	; 0x45b6 <_uploadMessage+0xa6>
    4594:	08 e2       	ldi	r16, 0x28	; 40
    4596:	15 e0       	ldi	r17, 0x05	; 5
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	4d e2       	ldi	r20, 0x2D	; 45
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	63 e6       	ldi	r22, 0x63	; 99
    45a2:	78 e1       	ldi	r23, 0x18	; 24
    45a4:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <_serialReplyBufferHandle>
    45a8:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <_serialReplyBufferHandle+0x1>
    45ac:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xStreamBufferReceive>
    45b0:	83 e6       	ldi	r24, 0x63	; 99
    45b2:	98 e1       	ldi	r25, 0x18	; 24
    45b4:	02 c0       	rjmp	.+4      	; 0x45ba <_uploadMessage+0xaa>
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	1f 91       	pop	r17
    45c0:	0f 91       	pop	r16
    45c2:	08 95       	ret

000045c4 <_reply2ReturnCode>:
    45c4:	2f 92       	push	r2
    45c6:	3f 92       	push	r3
    45c8:	4f 92       	push	r4
    45ca:	5f 92       	push	r5
    45cc:	6f 92       	push	r6
    45ce:	7f 92       	push	r7
    45d0:	8f 92       	push	r8
    45d2:	9f 92       	push	r9
    45d4:	af 92       	push	r10
    45d6:	bf 92       	push	r11
    45d8:	cf 92       	push	r12
    45da:	df 92       	push	r13
    45dc:	ef 92       	push	r14
    45de:	ff 92       	push	r15
    45e0:	0f 93       	push	r16
    45e2:	1f 93       	push	r17
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	5c 01       	movw	r10, r24
    45ea:	fc 01       	movw	r30, r24
    45ec:	01 90       	ld	r0, Z+
    45ee:	00 20       	and	r0, r0
    45f0:	e9 f7       	brne	.-6      	; 0x45ec <_reply2ReturnCode+0x28>
    45f2:	31 97       	sbiw	r30, 0x01	; 1
    45f4:	6f 01       	movw	r12, r30
    45f6:	c8 1a       	sub	r12, r24
    45f8:	d9 0a       	sbc	r13, r25
    45fa:	5c 2c       	mov	r5, r12
    45fc:	0f 2e       	mov	r0, r31
    45fe:	f9 e7       	ldi	r31, 0x79	; 121
    4600:	8f 2e       	mov	r8, r31
    4602:	f8 e0       	ldi	r31, 0x08	; 8
    4604:	9f 2e       	mov	r9, r31
    4606:	f0 2d       	mov	r31, r0
    4608:	e1 2c       	mov	r14, r1
    460a:	f1 2c       	mov	r15, r1
    460c:	4c 2c       	mov	r4, r12
    460e:	37 01       	movw	r6, r14
    4610:	f4 01       	movw	r30, r8
    4612:	01 81       	ldd	r16, Z+1	; 0x01
    4614:	12 81       	ldd	r17, Z+2	; 0x02
    4616:	e8 01       	movw	r28, r16
    4618:	09 90       	ld	r0, Y+
    461a:	00 20       	and	r0, r0
    461c:	e9 f7       	brne	.-6      	; 0x4618 <_reply2ReturnCode+0x54>
    461e:	21 97       	sbiw	r28, 0x01	; 1
    4620:	c0 1b       	sub	r28, r16
    4622:	d1 0b       	sbc	r29, r17
    4624:	3c 2e       	mov	r3, r28
    4626:	f9 e0       	ldi	r31, 0x09	; 9
    4628:	cf 16       	cp	r12, r31
    462a:	d1 04       	cpc	r13, r1
    462c:	58 f0       	brcs	.+22     	; 0x4644 <_reply2ReturnCode+0x80>
    462e:	f4 01       	movw	r30, r8
    4630:	20 80       	ld	r2, Z
    4632:	fe e0       	ldi	r31, 0x0E	; 14
    4634:	2f 12       	cpse	r2, r31
    4636:	06 c0       	rjmp	.+12     	; 0x4644 <_reply2ReturnCode+0x80>
    4638:	b8 01       	movw	r22, r16
    463a:	c5 01       	movw	r24, r10
    463c:	0e 94 df 31 	call	0x63be	; 0x63be <strcasestr>
    4640:	89 2b       	or	r24, r25
    4642:	09 f5       	brne	.+66     	; 0x4686 <_reply2ReturnCode+0xc2>
    4644:	44 2d       	mov	r20, r4
    4646:	35 14       	cp	r3, r5
    4648:	08 f4       	brcc	.+2      	; 0x464c <_reply2ReturnCode+0x88>
    464a:	4c 2f       	mov	r20, r28
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	b8 01       	movw	r22, r16
    4650:	c5 01       	movw	r24, r10
    4652:	0e 94 16 32 	call	0x642c	; 0x642c <strncasecmp>
    4656:	89 2b       	or	r24, r25
    4658:	49 f4       	brne	.+18     	; 0x466c <_reply2ReturnCode+0xa8>
    465a:	f3 01       	movw	r30, r6
    465c:	ee 0f       	add	r30, r30
    465e:	ff 1f       	adc	r31, r31
    4660:	e6 0d       	add	r30, r6
    4662:	f7 1d       	adc	r31, r7
    4664:	e7 58       	subi	r30, 0x87	; 135
    4666:	f7 4f       	sbci	r31, 0xF7	; 247
    4668:	20 80       	ld	r2, Z
    466a:	0d c0       	rjmp	.+26     	; 0x4686 <_reply2ReturnCode+0xc2>
    466c:	8f ef       	ldi	r24, 0xFF	; 255
    466e:	e8 1a       	sub	r14, r24
    4670:	f8 0a       	sbc	r15, r24
    4672:	e3 e0       	ldi	r30, 0x03	; 3
    4674:	8e 0e       	add	r8, r30
    4676:	91 1c       	adc	r9, r1
    4678:	f1 e1       	ldi	r31, 0x11	; 17
    467a:	ef 16       	cp	r14, r31
    467c:	f1 04       	cpc	r15, r1
    467e:	39 f6       	brne	.-114    	; 0x460e <_reply2ReturnCode+0x4a>
    4680:	68 94       	set
    4682:	22 24       	eor	r2, r2
    4684:	24 f8       	bld	r2, 4
    4686:	82 2d       	mov	r24, r2
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	df 90       	pop	r13
    4696:	cf 90       	pop	r12
    4698:	bf 90       	pop	r11
    469a:	af 90       	pop	r10
    469c:	9f 90       	pop	r9
    469e:	8f 90       	pop	r8
    46a0:	7f 90       	pop	r7
    46a2:	6f 90       	pop	r6
    46a4:	5f 90       	pop	r5
    46a6:	4f 90       	pop	r4
    46a8:	3f 90       	pop	r3
    46aa:	2f 90       	pop	r2
    46ac:	08 95       	ret

000046ae <_uploadMessageRc>:
    46ae:	30 df       	rcall	.-416    	; 0x4510 <_uploadMessage>
    46b0:	89 cf       	rjmp	.-238    	; 0x45c4 <_reply2ReturnCode>
    46b2:	08 95       	ret

000046b4 <lora_driver_flushBuffers>:
    46b4:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <_serialReplyBufferHandle>
    46b8:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <_serialReplyBufferHandle+0x1>
    46bc:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <xStreamBufferReset>
    46c0:	08 95       	ret

000046c2 <lora_driver_initialise>:
    46c2:	8f 92       	push	r8
    46c4:	9f 92       	push	r9
    46c6:	af 92       	push	r10
    46c8:	cf 92       	push	r12
    46ca:	ef 92       	push	r14
    46cc:	0f 93       	push	r16
    46ce:	1f 93       	push	r17
    46d0:	cf 93       	push	r28
    46d2:	c8 2f       	mov	r28, r24
    46d4:	8b 01       	movw	r16, r22
    46d6:	41 e0       	ldi	r20, 0x01	; 1
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	70 e0       	ldi	r23, 0x00	; 0
    46dc:	88 ec       	ldi	r24, 0xC8	; 200
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <xStreamBufferGenericCreate>
    46e4:	90 93 db 17 	sts	0x17DB, r25	; 0x8017db <_serialReplyBufferHandle+0x1>
    46e8:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <_serialReplyBufferHandle>
    46ec:	10 93 d9 17 	sts	0x17D9, r17	; 0x8017d9 <_downlinkMessageBuffer+0x1>
    46f0:	00 93 d8 17 	sts	0x17D8, r16	; 0x8017d8 <_downlinkMessageBuffer>
    46f4:	0f 2e       	mov	r0, r31
    46f6:	f2 e4       	ldi	r31, 0x42	; 66
    46f8:	8f 2e       	mov	r8, r31
    46fa:	f2 e2       	ldi	r31, 0x22	; 34
    46fc:	9f 2e       	mov	r9, r31
    46fe:	f0 2d       	mov	r31, r0
    4700:	68 94       	set
    4702:	aa 24       	eor	r10, r10
    4704:	a6 f8       	bld	r10, 6
    4706:	68 94       	set
    4708:	cc 24       	eor	r12, r12
    470a:	c6 f8       	bld	r12, 6
    470c:	e1 2c       	mov	r14, r1
    470e:	00 e0       	ldi	r16, 0x00	; 0
    4710:	23 e0       	ldi	r18, 0x03	; 3
    4712:	40 e0       	ldi	r20, 0x00	; 0
    4714:	51 ee       	ldi	r21, 0xE1	; 225
    4716:	60 e0       	ldi	r22, 0x00	; 0
    4718:	70 e0       	ldi	r23, 0x00	; 0
    471a:	8c 2f       	mov	r24, r28
    471c:	06 d4       	rcall	.+2060   	; 0x4f2a <serial_create>
    471e:	90 93 dd 17 	sts	0x17DD, r25	; 0x8017dd <_rn2483_serial+0x1>
    4722:	80 93 dc 17 	sts	0x17DC, r24	; 0x8017dc <_rn2483_serial>
    4726:	e7 e0       	ldi	r30, 0x07	; 7
    4728:	f1 e0       	ldi	r31, 0x01	; 1
    472a:	80 81       	ld	r24, Z
    472c:	80 61       	ori	r24, 0x10	; 16
    472e:	80 83       	st	Z, r24
    4730:	cf 91       	pop	r28
    4732:	1f 91       	pop	r17
    4734:	0f 91       	pop	r16
    4736:	ef 90       	pop	r14
    4738:	cf 90       	pop	r12
    473a:	af 90       	pop	r10
    473c:	9f 90       	pop	r9
    473e:	8f 90       	pop	r8
    4740:	08 95       	ret

00004742 <lora_driver_resetRn2483>:
    4742:	88 23       	and	r24, r24
    4744:	31 f0       	breq	.+12     	; 0x4752 <lora_driver_resetRn2483+0x10>
    4746:	e8 e0       	ldi	r30, 0x08	; 8
    4748:	f1 e0       	ldi	r31, 0x01	; 1
    474a:	80 81       	ld	r24, Z
    474c:	8f 7e       	andi	r24, 0xEF	; 239
    474e:	80 83       	st	Z, r24
    4750:	08 95       	ret
    4752:	e8 e0       	ldi	r30, 0x08	; 8
    4754:	f1 e0       	ldi	r31, 0x01	; 1
    4756:	80 81       	ld	r24, Z
    4758:	80 61       	ori	r24, 0x10	; 16
    475a:	80 83       	st	Z, r24
    475c:	08 95       	ret

0000475e <lora_driver_rn2483FactoryReset>:
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	8f ef       	ldi	r24, 0xFF	; 255
    4764:	95 e0       	ldi	r25, 0x05	; 5
    4766:	d4 de       	rcall	.-600    	; 0x4510 <_uploadMessage>
    4768:	e3 e6       	ldi	r30, 0x63	; 99
    476a:	f8 e1       	ldi	r31, 0x18	; 24
    476c:	01 90       	ld	r0, Z+
    476e:	00 20       	and	r0, r0
    4770:	e9 f7       	brne	.-6      	; 0x476c <lora_driver_rn2483FactoryReset+0xe>
    4772:	31 97       	sbiw	r30, 0x01	; 1
    4774:	e3 56       	subi	r30, 0x63	; 99
    4776:	f8 41       	sbci	r31, 0x18	; 24
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	75 97       	sbiw	r30, 0x15	; 21
    477c:	08 f0       	brcs	.+2      	; 0x4780 <lora_driver_rn2483FactoryReset+0x22>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	08 95       	ret

00004782 <lora_driver_getRn2483Hweui>:
    4782:	cf 93       	push	r28
    4784:	df 93       	push	r29
    4786:	ec 01       	movw	r28, r24
    4788:	60 e0       	ldi	r22, 0x00	; 0
    478a:	70 e0       	ldi	r23, 0x00	; 0
    478c:	80 e1       	ldi	r24, 0x10	; 16
    478e:	96 e0       	ldi	r25, 0x06	; 6
    4790:	bf de       	rcall	.-642    	; 0x4510 <_uploadMessage>
    4792:	e3 e6       	ldi	r30, 0x63	; 99
    4794:	f8 e1       	ldi	r31, 0x18	; 24
    4796:	01 90       	ld	r0, Z+
    4798:	00 20       	and	r0, r0
    479a:	e9 f7       	brne	.-6      	; 0x4796 <lora_driver_getRn2483Hweui+0x14>
    479c:	e4 57       	subi	r30, 0x74	; 116
    479e:	f8 41       	sbci	r31, 0x18	; 24
    47a0:	39 f4       	brne	.+14     	; 0x47b0 <lora_driver_getRn2483Hweui+0x2e>
    47a2:	63 e6       	ldi	r22, 0x63	; 99
    47a4:	78 e1       	ldi	r23, 0x18	; 24
    47a6:	ce 01       	movw	r24, r28
    47a8:	0e 94 0f 32 	call	0x641e	; 0x641e <strcpy>
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <lora_driver_getRn2483Hweui+0x32>
    47b0:	18 82       	st	Y, r1
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	df 91       	pop	r29
    47b6:	cf 91       	pop	r28
    47b8:	08 95       	ret

000047ba <lora_driver_setDeviceIdentifier>:
    47ba:	fc 01       	movw	r30, r24
    47bc:	01 90       	ld	r0, Z+
    47be:	00 20       	and	r0, r0
    47c0:	e9 f7       	brne	.-6      	; 0x47bc <lora_driver_setDeviceIdentifier+0x2>
    47c2:	9f 01       	movw	r18, r30
    47c4:	21 51       	subi	r18, 0x11	; 17
    47c6:	31 09       	sbc	r19, r1
    47c8:	28 17       	cp	r18, r24
    47ca:	39 07       	cpc	r19, r25
    47cc:	29 f4       	brne	.+10     	; 0x47d8 <lora_driver_setDeviceIdentifier+0x1e>
    47ce:	bc 01       	movw	r22, r24
    47d0:	8e e3       	ldi	r24, 0x3E	; 62
    47d2:	96 e0       	ldi	r25, 0x06	; 6
    47d4:	6c cf       	rjmp	.-296    	; 0x46ae <_uploadMessageRc>
    47d6:	08 95       	ret
    47d8:	89 e0       	ldi	r24, 0x09	; 9
    47da:	08 95       	ret

000047dc <lora_driver_setApplicationIdentifier>:
    47dc:	fc 01       	movw	r30, r24
    47de:	01 90       	ld	r0, Z+
    47e0:	00 20       	and	r0, r0
    47e2:	e9 f7       	brne	.-6      	; 0x47de <lora_driver_setApplicationIdentifier+0x2>
    47e4:	9f 01       	movw	r18, r30
    47e6:	21 51       	subi	r18, 0x11	; 17
    47e8:	31 09       	sbc	r19, r1
    47ea:	28 17       	cp	r18, r24
    47ec:	39 07       	cpc	r19, r25
    47ee:	29 f4       	brne	.+10     	; 0x47fa <lora_driver_setApplicationIdentifier+0x1e>
    47f0:	bc 01       	movw	r22, r24
    47f2:	8d e4       	ldi	r24, 0x4D	; 77
    47f4:	96 e0       	ldi	r25, 0x06	; 6
    47f6:	5b cf       	rjmp	.-330    	; 0x46ae <_uploadMessageRc>
    47f8:	08 95       	ret
    47fa:	89 e0       	ldi	r24, 0x09	; 9
    47fc:	08 95       	ret

000047fe <lora_driver_setApplicationKey>:
    47fe:	fc 01       	movw	r30, r24
    4800:	01 90       	ld	r0, Z+
    4802:	00 20       	and	r0, r0
    4804:	e9 f7       	brne	.-6      	; 0x4800 <lora_driver_setApplicationKey+0x2>
    4806:	9f 01       	movw	r18, r30
    4808:	21 52       	subi	r18, 0x21	; 33
    480a:	31 09       	sbc	r19, r1
    480c:	28 17       	cp	r18, r24
    480e:	39 07       	cpc	r19, r25
    4810:	29 f4       	brne	.+10     	; 0x481c <lora_driver_setApplicationKey+0x1e>
    4812:	bc 01       	movw	r22, r24
    4814:	8c e5       	ldi	r24, 0x5C	; 92
    4816:	96 e0       	ldi	r25, 0x06	; 6
    4818:	4a cf       	rjmp	.-364    	; 0x46ae <_uploadMessageRc>
    481a:	08 95       	ret
    481c:	89 e0       	ldi	r24, 0x09	; 9
    481e:	08 95       	ret

00004820 <lora_driver_saveMac>:
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	70 e0       	ldi	r23, 0x00	; 0
    4824:	8b e9       	ldi	r24, 0x9B	; 155
    4826:	96 e0       	ldi	r25, 0x06	; 6
    4828:	42 cf       	rjmp	.-380    	; 0x46ae <_uploadMessageRc>
    482a:	08 95       	ret

0000482c <lora_driver_join>:
    482c:	0f 93       	push	r16
    482e:	1f 93       	push	r17
    4830:	e8 2f       	mov	r30, r24
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	ee 0f       	add	r30, r30
    4836:	ff 1f       	adc	r31, r31
    4838:	eb 58       	subi	r30, 0x8B	; 139
    483a:	f7 4f       	sbci	r31, 0xF7	; 247
    483c:	60 81       	ld	r22, Z
    483e:	71 81       	ldd	r23, Z+1	; 0x01
    4840:	84 ea       	ldi	r24, 0xA4	; 164
    4842:	96 e0       	ldi	r25, 0x06	; 6
    4844:	34 df       	rcall	.-408    	; 0x46ae <_uploadMessageRc>
    4846:	81 11       	cpse	r24, r1
    4848:	14 c0       	rjmp	.+40     	; 0x4872 <lora_driver_join+0x46>
    484a:	08 e2       	ldi	r16, 0x28	; 40
    484c:	15 e0       	ldi	r17, 0x05	; 5
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	4d e2       	ldi	r20, 0x2D	; 45
    4854:	50 e0       	ldi	r21, 0x00	; 0
    4856:	63 e6       	ldi	r22, 0x63	; 99
    4858:	78 e1       	ldi	r23, 0x18	; 24
    485a:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <_serialReplyBufferHandle>
    485e:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <_serialReplyBufferHandle+0x1>
    4862:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xStreamBufferReceive>
    4866:	88 23       	and	r24, r24
    4868:	21 f0       	breq	.+8      	; 0x4872 <lora_driver_join+0x46>
    486a:	83 e6       	ldi	r24, 0x63	; 99
    486c:	98 e1       	ldi	r25, 0x18	; 24
    486e:	aa de       	rcall	.-684    	; 0x45c4 <_reply2ReturnCode>
    4870:	03 c0       	rjmp	.+6      	; 0x4878 <lora_driver_join+0x4c>
    4872:	83 e6       	ldi	r24, 0x63	; 99
    4874:	98 e1       	ldi	r25, 0x18	; 24
    4876:	a6 de       	rcall	.-692    	; 0x45c4 <_reply2ReturnCode>
    4878:	1f 91       	pop	r17
    487a:	0f 91       	pop	r16
    487c:	08 95       	ret

0000487e <lora_driver_sendUploadMessage>:
    487e:	0f 93       	push	r16
    4880:	1f 93       	push	r17
    4882:	cf 93       	push	r28
    4884:	df 93       	push	r29
    4886:	1f 92       	push	r1
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	db 01       	movw	r26, r22
    488e:	11 96       	adiw	r26, 0x01	; 1
    4890:	9c 91       	ld	r25, X
    4892:	11 97       	sbiw	r26, 0x01	; 1
    4894:	95 31       	cpi	r25, 0x15	; 21
    4896:	08 f0       	brcs	.+2      	; 0x489a <lora_driver_sendUploadMessage+0x1c>
    4898:	b4 c0       	rjmp	.+360    	; 0x4a02 <lora_driver_sendUploadMessage+0x184>
    489a:	99 23       	and	r25, r25
    489c:	81 f1       	breq	.+96     	; 0x48fe <lora_driver_sendUploadMessage+0x80>
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	27 2f       	mov	r18, r23
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	46 2f       	mov	r20, r22
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	fd 01       	movw	r30, r26
    48ac:	e4 0f       	add	r30, r20
    48ae:	f5 1f       	adc	r31, r21
    48b0:	92 81       	ldd	r25, Z+2	; 0x02
    48b2:	92 95       	swap	r25
    48b4:	9f 70       	andi	r25, 0x0F	; 15
    48b6:	9a 30       	cpi	r25, 0x0A	; 10
    48b8:	10 f0       	brcs	.+4      	; 0x48be <lora_driver_sendUploadMessage+0x40>
    48ba:	99 5c       	subi	r25, 0xC9	; 201
    48bc:	01 c0       	rjmp	.+2      	; 0x48c0 <lora_driver_sendUploadMessage+0x42>
    48be:	90 5d       	subi	r25, 0xD0	; 208
    48c0:	f9 01       	movw	r30, r18
    48c2:	ec 50       	subi	r30, 0x0C	; 12
    48c4:	f8 4e       	sbci	r31, 0xE8	; 232
    48c6:	90 83       	st	Z, r25
    48c8:	2f 5f       	subi	r18, 0xFF	; 255
    48ca:	3f 4f       	sbci	r19, 0xFF	; 255
    48cc:	fd 01       	movw	r30, r26
    48ce:	e4 0f       	add	r30, r20
    48d0:	f5 1f       	adc	r31, r21
    48d2:	92 81       	ldd	r25, Z+2	; 0x02
    48d4:	9f 70       	andi	r25, 0x0F	; 15
    48d6:	49 2f       	mov	r20, r25
    48d8:	50 e0       	ldi	r21, 0x00	; 0
    48da:	4a 30       	cpi	r20, 0x0A	; 10
    48dc:	51 05       	cpc	r21, r1
    48de:	14 f0       	brlt	.+4      	; 0x48e4 <lora_driver_sendUploadMessage+0x66>
    48e0:	99 5c       	subi	r25, 0xC9	; 201
    48e2:	01 c0       	rjmp	.+2      	; 0x48e6 <lora_driver_sendUploadMessage+0x68>
    48e4:	90 5d       	subi	r25, 0xD0	; 208
    48e6:	f9 01       	movw	r30, r18
    48e8:	ec 50       	subi	r30, 0x0C	; 12
    48ea:	f8 4e       	sbci	r31, 0xE8	; 232
    48ec:	90 83       	st	Z, r25
    48ee:	7e 5f       	subi	r23, 0xFE	; 254
    48f0:	6f 5f       	subi	r22, 0xFF	; 255
    48f2:	11 96       	adiw	r26, 0x01	; 1
    48f4:	9c 91       	ld	r25, X
    48f6:	11 97       	sbiw	r26, 0x01	; 1
    48f8:	69 17       	cp	r22, r25
    48fa:	98 f2       	brcs	.-90     	; 0x48a2 <lora_driver_sendUploadMessage+0x24>
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <lora_driver_sendUploadMessage+0x82>
    48fe:	70 e0       	ldi	r23, 0x00	; 0
    4900:	e7 2f       	mov	r30, r23
    4902:	f0 e0       	ldi	r31, 0x00	; 0
    4904:	ec 50       	subi	r30, 0x0C	; 12
    4906:	f8 4e       	sbci	r31, 0xE8	; 232
    4908:	10 82       	st	Z, r1
    490a:	4c 91       	ld	r20, X
    490c:	81 11       	cpse	r24, r1
    490e:	03 c0       	rjmp	.+6      	; 0x4916 <lora_driver_sendUploadMessage+0x98>
    4910:	8d ea       	ldi	r24, 0xAD	; 173
    4912:	96 e0       	ldi	r25, 0x06	; 6
    4914:	02 c0       	rjmp	.+4      	; 0x491a <lora_driver_sendUploadMessage+0x9c>
    4916:	8f ea       	ldi	r24, 0xAF	; 175
    4918:	96 e0       	ldi	r25, 0x06	; 6
    491a:	24 ef       	ldi	r18, 0xF4	; 244
    491c:	37 e1       	ldi	r19, 0x17	; 23
    491e:	3f 93       	push	r19
    4920:	2f 93       	push	r18
    4922:	1f 92       	push	r1
    4924:	4f 93       	push	r20
    4926:	9f 93       	push	r25
    4928:	8f 93       	push	r24
    492a:	83 eb       	ldi	r24, 0xB3	; 179
    492c:	96 e0       	ldi	r25, 0x06	; 6
    492e:	9f 93       	push	r25
    4930:	8f 93       	push	r24
    4932:	86 e3       	ldi	r24, 0x36	; 54
    4934:	98 e1       	ldi	r25, 0x18	; 24
    4936:	9f 93       	push	r25
    4938:	8f 93       	push	r24
    493a:	0e 94 71 32 	call	0x64e2	; 0x64e2 <sprintf>
    493e:	60 e0       	ldi	r22, 0x00	; 0
    4940:	70 e0       	ldi	r23, 0x00	; 0
    4942:	86 e3       	ldi	r24, 0x36	; 54
    4944:	98 e1       	ldi	r25, 0x18	; 24
    4946:	b3 de       	rcall	.-666    	; 0x46ae <_uploadMessageRc>
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	de bf       	out	0x3e, r29	; 62
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	cd bf       	out	0x3d, r28	; 61
    4952:	81 11       	cpse	r24, r1
    4954:	59 c0       	rjmp	.+178    	; 0x4a08 <lora_driver_sendUploadMessage+0x18a>
    4956:	08 e2       	ldi	r16, 0x28	; 40
    4958:	15 e0       	ldi	r17, 0x05	; 5
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	4d e2       	ldi	r20, 0x2D	; 45
    4960:	50 e0       	ldi	r21, 0x00	; 0
    4962:	63 e6       	ldi	r22, 0x63	; 99
    4964:	78 e1       	ldi	r23, 0x18	; 24
    4966:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <_serialReplyBufferHandle>
    496a:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <_serialReplyBufferHandle+0x1>
    496e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xStreamBufferReceive>
    4972:	88 23       	and	r24, r24
    4974:	09 f4       	brne	.+2      	; 0x4978 <lora_driver_sendUploadMessage+0xfa>
    4976:	47 c0       	rjmp	.+142    	; 0x4a06 <lora_driver_sendUploadMessage+0x188>
    4978:	83 e6       	ldi	r24, 0x63	; 99
    497a:	98 e1       	ldi	r25, 0x18	; 24
    497c:	23 de       	rcall	.-954    	; 0x45c4 <_reply2ReturnCode>
    497e:	8e 30       	cpi	r24, 0x0E	; 14
    4980:	09 f0       	breq	.+2      	; 0x4984 <lora_driver_sendUploadMessage+0x106>
    4982:	42 c0       	rjmp	.+132    	; 0x4a08 <lora_driver_sendUploadMessage+0x18a>
    4984:	87 e0       	ldi	r24, 0x07	; 7
    4986:	89 83       	std	Y+1, r24	; 0x01
    4988:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <_downlinkMessageBuffer>
    498c:	90 91 d9 17 	lds	r25, 0x17D9	; 0x8017d9 <_downlinkMessageBuffer+0x1>
    4990:	89 2b       	or	r24, r25
    4992:	a9 f1       	breq	.+106    	; 0x49fe <lora_driver_sendUploadMessage+0x180>
    4994:	be 01       	movw	r22, r28
    4996:	6f 5f       	subi	r22, 0xFF	; 255
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	83 e6       	ldi	r24, 0x63	; 99
    499c:	98 e1       	ldi	r25, 0x18	; 24
    499e:	68 d1       	rcall	.+720    	; 0x4c70 <decode_port_no>
    49a0:	80 93 de 17 	sts	0x17DE, r24	; 0x8017de <_downlinkPayload>
    49a4:	e9 81       	ldd	r30, Y+1	; 0x01
    49a6:	f0 e0       	ldi	r31, 0x00	; 0
    49a8:	ed 59       	subi	r30, 0x9D	; 157
    49aa:	f7 4e       	sbci	r31, 0xE7	; 231
    49ac:	df 01       	movw	r26, r30
    49ae:	0d 90       	ld	r0, X+
    49b0:	00 20       	and	r0, r0
    49b2:	e9 f7       	brne	.-6      	; 0x49ae <lora_driver_sendUploadMessage+0x130>
    49b4:	11 97       	sbiw	r26, 0x01	; 1
    49b6:	ae 1b       	sub	r26, r30
    49b8:	bf 0b       	sbc	r27, r31
    49ba:	aa 23       	and	r26, r26
    49bc:	91 f0       	breq	.+36     	; 0x49e2 <lora_driver_sendUploadMessage+0x164>
    49be:	bb 27       	eor	r27, r27
    49c0:	cd 01       	movw	r24, r26
    49c2:	01 97       	sbiw	r24, 0x01	; 1
    49c4:	9c 01       	movw	r18, r24
    49c6:	12 f4       	brpl	.+4      	; 0x49cc <lora_driver_sendUploadMessage+0x14e>
    49c8:	2f 5f       	subi	r18, 0xFF	; 255
    49ca:	3f 4f       	sbci	r19, 0xFF	; 255
    49cc:	35 95       	asr	r19
    49ce:	27 95       	ror	r18
    49d0:	20 93 df 17 	sts	0x17DF, r18	; 0x8017df <_downlinkPayload+0x1>
    49d4:	af 01       	movw	r20, r30
    49d6:	4f 5f       	subi	r20, 0xFF	; 255
    49d8:	5f 4f       	sbci	r21, 0xFF	; 255
    49da:	64 e1       	ldi	r22, 0x14	; 20
    49dc:	80 ee       	ldi	r24, 0xE0	; 224
    49de:	97 e1       	ldi	r25, 0x17	; 23
    49e0:	73 d1       	rcall	.+742    	; 0x4cc8 <decode_hexadecimal_string_bytes>
    49e2:	01 e0       	ldi	r16, 0x01	; 1
    49e4:	10 e0       	ldi	r17, 0x00	; 0
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	46 e1       	ldi	r20, 0x16	; 22
    49ec:	50 e0       	ldi	r21, 0x00	; 0
    49ee:	6e ed       	ldi	r22, 0xDE	; 222
    49f0:	77 e1       	ldi	r23, 0x17	; 23
    49f2:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <_downlinkMessageBuffer>
    49f6:	90 91 d9 17 	lds	r25, 0x17D9	; 0x8017d9 <_downlinkMessageBuffer+0x1>
    49fa:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <xStreamBufferSend>
    49fe:	8e e0       	ldi	r24, 0x0E	; 14
    4a00:	03 c0       	rjmp	.+6      	; 0x4a08 <lora_driver_sendUploadMessage+0x18a>
    4a02:	84 e1       	ldi	r24, 0x14	; 20
    4a04:	01 c0       	rjmp	.+2      	; 0x4a08 <lora_driver_sendUploadMessage+0x18a>
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	0f 90       	pop	r0
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	1f 91       	pop	r17
    4a10:	0f 91       	pop	r16
    4a12:	08 95       	ret

00004a14 <lora_driver_setAdaptiveDataRate>:
    4a14:	81 30       	cpi	r24, 0x01	; 1
    4a16:	19 f0       	breq	.+6      	; 0x4a1e <lora_driver_setAdaptiveDataRate+0xa>
    4a18:	63 ec       	ldi	r22, 0xC3	; 195
    4a1a:	76 e0       	ldi	r23, 0x06	; 6
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <lora_driver_setAdaptiveDataRate+0xe>
    4a1e:	6c e9       	ldi	r22, 0x9C	; 156
    4a20:	77 e0       	ldi	r23, 0x07	; 7
    4a22:	87 ec       	ldi	r24, 0xC7	; 199
    4a24:	96 e0       	ldi	r25, 0x06	; 6
    4a26:	43 ce       	rjmp	.-890    	; 0x46ae <_uploadMessageRc>
    4a28:	08 95       	ret

00004a2a <lora_driver_setReceiveDelay>:
    4a2a:	9f 93       	push	r25
    4a2c:	8f 93       	push	r24
    4a2e:	88 ef       	ldi	r24, 0xF8	; 248
    4a30:	96 e0       	ldi	r25, 0x06	; 6
    4a32:	9f 93       	push	r25
    4a34:	8f 93       	push	r24
    4a36:	86 e3       	ldi	r24, 0x36	; 54
    4a38:	98 e1       	ldi	r25, 0x18	; 24
    4a3a:	9f 93       	push	r25
    4a3c:	8f 93       	push	r24
    4a3e:	0e 94 71 32 	call	0x64e2	; 0x64e2 <sprintf>
    4a42:	60 e0       	ldi	r22, 0x00	; 0
    4a44:	70 e0       	ldi	r23, 0x00	; 0
    4a46:	86 e3       	ldi	r24, 0x36	; 54
    4a48:	98 e1       	ldi	r25, 0x18	; 24
    4a4a:	31 de       	rcall	.-926    	; 0x46ae <_uploadMessageRc>
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
    4a54:	0f 90       	pop	r0
    4a56:	0f 90       	pop	r0
    4a58:	08 95       	ret

00004a5a <lora_driver_configureToEu868>:
    4a5a:	2f 92       	push	r2
    4a5c:	3f 92       	push	r3
    4a5e:	4f 92       	push	r4
    4a60:	5f 92       	push	r5
    4a62:	6f 92       	push	r6
    4a64:	7f 92       	push	r7
    4a66:	8f 92       	push	r8
    4a68:	9f 92       	push	r9
    4a6a:	af 92       	push	r10
    4a6c:	bf 92       	push	r11
    4a6e:	cf 92       	push	r12
    4a70:	df 92       	push	r13
    4a72:	ef 92       	push	r14
    4a74:	ff 92       	push	r15
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
    4a82:	a0 97       	sbiw	r28, 0x20	; 32
    4a84:	0f b6       	in	r0, 0x3f	; 63
    4a86:	f8 94       	cli
    4a88:	de bf       	out	0x3e, r29	; 62
    4a8a:	0f be       	out	0x3f, r0	; 63
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	65 e2       	ldi	r22, 0x25	; 37
    4a90:	77 e0       	ldi	r23, 0x07	; 7
    4a92:	81 e3       	ldi	r24, 0x31	; 49
    4a94:	97 e0       	ldi	r25, 0x07	; 7
    4a96:	3c dd       	rcall	.-1416   	; 0x4510 <_uploadMessage>
    4a98:	95 dd       	rcall	.-1238   	; 0x45c4 <_reply2ReturnCode>
    4a9a:	81 11       	cpse	r24, r1
    4a9c:	a3 c0       	rjmp	.+326    	; 0x4be4 <lora_driver_configureToEu868+0x18a>
    4a9e:	80 e2       	ldi	r24, 0x20	; 32
    4aa0:	e2 e2       	ldi	r30, 0x22	; 34
    4aa2:	f2 e0       	ldi	r31, 0x02	; 2
    4aa4:	de 01       	movw	r26, r28
    4aa6:	11 96       	adiw	r26, 0x01	; 1
    4aa8:	01 90       	ld	r0, Z+
    4aaa:	0d 92       	st	X+, r0
    4aac:	8a 95       	dec	r24
    4aae:	e1 f7       	brne	.-8      	; 0x4aa8 <lora_driver_configureToEu868+0x4e>
    4ab0:	9e 01       	movw	r18, r28
    4ab2:	2f 5f       	subi	r18, 0xFF	; 255
    4ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ab6:	69 01       	movw	r12, r18
    4ab8:	e1 2c       	mov	r14, r1
    4aba:	f1 2c       	mov	r15, r1
    4abc:	0f 2e       	mov	r0, r31
    4abe:	fd e3       	ldi	r31, 0x3D	; 61
    4ac0:	af 2e       	mov	r10, r31
    4ac2:	f7 e0       	ldi	r31, 0x07	; 7
    4ac4:	bf 2e       	mov	r11, r31
    4ac6:	f0 2d       	mov	r31, r0
    4ac8:	06 e3       	ldi	r16, 0x36	; 54
    4aca:	18 e1       	ldi	r17, 0x18	; 24
    4acc:	0f 2e       	mov	r0, r31
    4ace:	f6 e5       	ldi	r31, 0x56	; 86
    4ad0:	4f 2e       	mov	r4, r31
    4ad2:	f7 e0       	ldi	r31, 0x07	; 7
    4ad4:	5f 2e       	mov	r5, r31
    4ad6:	f0 2d       	mov	r31, r0
    4ad8:	0f 2e       	mov	r0, r31
    4ada:	fd e6       	ldi	r31, 0x6D	; 109
    4adc:	8f 2e       	mov	r8, r31
    4ade:	f7 e0       	ldi	r31, 0x07	; 7
    4ae0:	9f 2e       	mov	r9, r31
    4ae2:	f0 2d       	mov	r31, r0
    4ae4:	0f 2e       	mov	r0, r31
    4ae6:	f7 e8       	ldi	r31, 0x87	; 135
    4ae8:	6f 2e       	mov	r6, r31
    4aea:	f7 e0       	ldi	r31, 0x07	; 7
    4aec:	7f 2e       	mov	r7, r31
    4aee:	f0 2d       	mov	r31, r0
    4af0:	3e 2c       	mov	r3, r14
    4af2:	2f 2c       	mov	r2, r15
    4af4:	ff 92       	push	r15
    4af6:	ef 92       	push	r14
    4af8:	bf 92       	push	r11
    4afa:	af 92       	push	r10
    4afc:	1f 93       	push	r17
    4afe:	0f 93       	push	r16
    4b00:	0e 94 71 32 	call	0x64e2	; 0x64e2 <sprintf>
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	c8 01       	movw	r24, r16
    4b0a:	02 dd       	rcall	.-1532   	; 0x4510 <_uploadMessage>
    4b0c:	5b dd       	rcall	.-1354   	; 0x45c4 <_reply2ReturnCode>
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	81 11       	cpse	r24, r1
    4b1c:	63 c0       	rjmp	.+198    	; 0x4be4 <lora_driver_configureToEu868+0x18a>
    4b1e:	32 e0       	ldi	r19, 0x02	; 2
    4b20:	3e 15       	cp	r19, r14
    4b22:	e8 f4       	brcc	.+58     	; 0x4b5e <lora_driver_configureToEu868+0x104>
    4b24:	f6 01       	movw	r30, r12
    4b26:	83 81       	ldd	r24, Z+3	; 0x03
    4b28:	8f 93       	push	r24
    4b2a:	82 81       	ldd	r24, Z+2	; 0x02
    4b2c:	8f 93       	push	r24
    4b2e:	81 81       	ldd	r24, Z+1	; 0x01
    4b30:	8f 93       	push	r24
    4b32:	80 81       	ld	r24, Z
    4b34:	8f 93       	push	r24
    4b36:	ff 92       	push	r15
    4b38:	ef 92       	push	r14
    4b3a:	5f 92       	push	r5
    4b3c:	4f 92       	push	r4
    4b3e:	1f 93       	push	r17
    4b40:	0f 93       	push	r16
    4b42:	0e 94 71 32 	call	0x64e2	; 0x64e2 <sprintf>
    4b46:	60 e0       	ldi	r22, 0x00	; 0
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	c8 01       	movw	r24, r16
    4b4c:	e1 dc       	rcall	.-1598   	; 0x4510 <_uploadMessage>
    4b4e:	3a dd       	rcall	.-1420   	; 0x45c4 <_reply2ReturnCode>
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	81 11       	cpse	r24, r1
    4b5c:	43 c0       	rjmp	.+134    	; 0x4be4 <lora_driver_configureToEu868+0x18a>
    4b5e:	2f 92       	push	r2
    4b60:	3f 92       	push	r3
    4b62:	9f 92       	push	r9
    4b64:	8f 92       	push	r8
    4b66:	1f 93       	push	r17
    4b68:	0f 93       	push	r16
    4b6a:	0e 94 71 32 	call	0x64e2	; 0x64e2 <sprintf>
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	70 e0       	ldi	r23, 0x00	; 0
    4b72:	c8 01       	movw	r24, r16
    4b74:	cd dc       	rcall	.-1638   	; 0x4510 <_uploadMessage>
    4b76:	26 dd       	rcall	.-1460   	; 0x45c4 <_reply2ReturnCode>
    4b78:	0f 90       	pop	r0
    4b7a:	0f 90       	pop	r0
    4b7c:	0f 90       	pop	r0
    4b7e:	0f 90       	pop	r0
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	81 11       	cpse	r24, r1
    4b86:	2e c0       	rjmp	.+92     	; 0x4be4 <lora_driver_configureToEu868+0x18a>
    4b88:	2f 92       	push	r2
    4b8a:	3f 92       	push	r3
    4b8c:	7f 92       	push	r7
    4b8e:	6f 92       	push	r6
    4b90:	1f 93       	push	r17
    4b92:	0f 93       	push	r16
    4b94:	0e 94 71 32 	call	0x64e2	; 0x64e2 <sprintf>
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	70 e0       	ldi	r23, 0x00	; 0
    4b9c:	c8 01       	movw	r24, r16
    4b9e:	b8 dc       	rcall	.-1680   	; 0x4510 <_uploadMessage>
    4ba0:	11 dd       	rcall	.-1502   	; 0x45c4 <_reply2ReturnCode>
    4ba2:	0f 90       	pop	r0
    4ba4:	0f 90       	pop	r0
    4ba6:	0f 90       	pop	r0
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	0f 90       	pop	r0
    4bae:	81 11       	cpse	r24, r1
    4bb0:	19 c0       	rjmp	.+50     	; 0x4be4 <lora_driver_configureToEu868+0x18a>
    4bb2:	3f ef       	ldi	r19, 0xFF	; 255
    4bb4:	e3 1a       	sub	r14, r19
    4bb6:	f3 0a       	sbc	r15, r19
    4bb8:	84 e0       	ldi	r24, 0x04	; 4
    4bba:	c8 0e       	add	r12, r24
    4bbc:	d1 1c       	adc	r13, r1
    4bbe:	98 e0       	ldi	r25, 0x08	; 8
    4bc0:	e9 16       	cp	r14, r25
    4bc2:	f1 04       	cpc	r15, r1
    4bc4:	09 f0       	breq	.+2      	; 0x4bc8 <lora_driver_configureToEu868+0x16e>
    4bc6:	94 cf       	rjmp	.-216    	; 0x4af0 <lora_driver_configureToEu868+0x96>
    4bc8:	60 e0       	ldi	r22, 0x00	; 0
    4bca:	70 e0       	ldi	r23, 0x00	; 0
    4bcc:	8f e9       	ldi	r24, 0x9F	; 159
    4bce:	97 e0       	ldi	r25, 0x07	; 7
    4bd0:	9f dc       	rcall	.-1730   	; 0x4510 <_uploadMessage>
    4bd2:	f8 dc       	rcall	.-1552   	; 0x45c4 <_reply2ReturnCode>
    4bd4:	81 11       	cpse	r24, r1
    4bd6:	06 c0       	rjmp	.+12     	; 0x4be4 <lora_driver_configureToEu868+0x18a>
    4bd8:	60 e0       	ldi	r22, 0x00	; 0
    4bda:	70 e0       	ldi	r23, 0x00	; 0
    4bdc:	80 eb       	ldi	r24, 0xB0	; 176
    4bde:	97 e0       	ldi	r25, 0x07	; 7
    4be0:	97 dc       	rcall	.-1746   	; 0x4510 <_uploadMessage>
    4be2:	f0 dc       	rcall	.-1568   	; 0x45c4 <_reply2ReturnCode>
    4be4:	a0 96       	adiw	r28, 0x20	; 32
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	f8 94       	cli
    4bea:	de bf       	out	0x3e, r29	; 62
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	cd bf       	out	0x3d, r28	; 61
    4bf0:	df 91       	pop	r29
    4bf2:	cf 91       	pop	r28
    4bf4:	1f 91       	pop	r17
    4bf6:	0f 91       	pop	r16
    4bf8:	ff 90       	pop	r15
    4bfa:	ef 90       	pop	r14
    4bfc:	df 90       	pop	r13
    4bfe:	cf 90       	pop	r12
    4c00:	bf 90       	pop	r11
    4c02:	af 90       	pop	r10
    4c04:	9f 90       	pop	r9
    4c06:	8f 90       	pop	r8
    4c08:	7f 90       	pop	r7
    4c0a:	6f 90       	pop	r6
    4c0c:	5f 90       	pop	r5
    4c0e:	4f 90       	pop	r4
    4c10:	3f 90       	pop	r3
    4c12:	2f 90       	pop	r2
    4c14:	08 95       	ret

00004c16 <lora_driver_setOtaaIdentity>:
    4c16:	ef 92       	push	r14
    4c18:	ff 92       	push	r15
    4c1a:	0f 93       	push	r16
    4c1c:	1f 93       	push	r17
    4c1e:	cf 93       	push	r28
    4c20:	df 93       	push	r29
    4c22:	ec 01       	movw	r28, r24
    4c24:	8b 01       	movw	r16, r22
    4c26:	7a 01       	movw	r14, r20
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	f4 de       	rcall	.-536    	; 0x4a14 <lora_driver_setAdaptiveDataRate>
    4c2c:	81 11       	cpse	r24, r1
    4c2e:	0d c0       	rjmp	.+26     	; 0x4c4a <lora_driver_setOtaaIdentity+0x34>
    4c30:	ce 01       	movw	r24, r28
    4c32:	d4 dd       	rcall	.-1112   	; 0x47dc <lora_driver_setApplicationIdentifier>
    4c34:	81 11       	cpse	r24, r1
    4c36:	09 c0       	rjmp	.+18     	; 0x4c4a <lora_driver_setOtaaIdentity+0x34>
    4c38:	c8 01       	movw	r24, r16
    4c3a:	e1 dd       	rcall	.-1086   	; 0x47fe <lora_driver_setApplicationKey>
    4c3c:	81 11       	cpse	r24, r1
    4c3e:	05 c0       	rjmp	.+10     	; 0x4c4a <lora_driver_setOtaaIdentity+0x34>
    4c40:	c7 01       	movw	r24, r14
    4c42:	bb dd       	rcall	.-1162   	; 0x47ba <lora_driver_setDeviceIdentifier>
    4c44:	81 11       	cpse	r24, r1
    4c46:	01 c0       	rjmp	.+2      	; 0x4c4a <lora_driver_setOtaaIdentity+0x34>
    4c48:	eb dd       	rcall	.-1066   	; 0x4820 <lora_driver_saveMac>
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	ff 90       	pop	r15
    4c54:	ef 90       	pop	r14
    4c56:	08 95       	ret

00004c58 <lora_driver_mapReturnCodeToText>:
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	fc 01       	movw	r30, r24
    4c5c:	ee 0f       	add	r30, r30
    4c5e:	ff 1f       	adc	r31, r31
    4c60:	8e 0f       	add	r24, r30
    4c62:	9f 1f       	adc	r25, r31
    4c64:	fc 01       	movw	r30, r24
    4c66:	e7 58       	subi	r30, 0x87	; 135
    4c68:	f7 4f       	sbci	r31, 0xF7	; 247
    4c6a:	81 81       	ldd	r24, Z+1	; 0x01
    4c6c:	92 81       	ldd	r25, Z+2	; 0x02
    4c6e:	08 95       	ret

00004c70 <decode_port_no>:
    4c70:	dc 01       	movw	r26, r24
    4c72:	00 97       	sbiw	r24, 0x00	; 0
    4c74:	29 f1       	breq	.+74     	; 0x4cc0 <decode_port_no+0x50>
    4c76:	fb 01       	movw	r30, r22
    4c78:	20 81       	ld	r18, Z
    4c7a:	fc 01       	movw	r30, r24
    4c7c:	01 90       	ld	r0, Z+
    4c7e:	00 20       	and	r0, r0
    4c80:	e9 f7       	brne	.-6      	; 0x4c7c <decode_port_no+0xc>
    4c82:	31 97       	sbiw	r30, 0x01	; 1
    4c84:	e8 1b       	sub	r30, r24
    4c86:	f9 0b       	sbc	r31, r25
    4c88:	82 2f       	mov	r24, r18
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	e8 17       	cp	r30, r24
    4c8e:	f9 07       	cpc	r31, r25
    4c90:	c8 f0       	brcs	.+50     	; 0x4cc4 <decode_port_no+0x54>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	08 c0       	rjmp	.+16     	; 0x4ca6 <decode_port_no+0x36>
    4c96:	88 0f       	add	r24, r24
    4c98:	38 2f       	mov	r19, r24
    4c9a:	33 0f       	add	r19, r19
    4c9c:	33 0f       	add	r19, r19
    4c9e:	83 0f       	add	r24, r19
    4ca0:	80 53       	subi	r24, 0x30	; 48
    4ca2:	89 0f       	add	r24, r25
    4ca4:	2f 5f       	subi	r18, 0xFF	; 255
    4ca6:	fd 01       	movw	r30, r26
    4ca8:	e2 0f       	add	r30, r18
    4caa:	f1 1d       	adc	r31, r1
    4cac:	90 81       	ld	r25, Z
    4cae:	30 ed       	ldi	r19, 0xD0	; 208
    4cb0:	39 0f       	add	r19, r25
    4cb2:	3a 30       	cpi	r19, 0x0A	; 10
    4cb4:	10 f4       	brcc	.+4      	; 0x4cba <decode_port_no+0x4a>
    4cb6:	91 11       	cpse	r25, r1
    4cb8:	ee cf       	rjmp	.-36     	; 0x4c96 <decode_port_no+0x26>
    4cba:	fb 01       	movw	r30, r22
    4cbc:	20 83       	st	Z, r18
    4cbe:	08 95       	ret
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	08 95       	ret
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	08 95       	ret

00004cc8 <decode_hexadecimal_string_bytes>:
    4cc8:	0f 93       	push	r16
    4cca:	1f 93       	push	r17
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	ea 01       	movw	r28, r20
    4cd4:	20 97       	sbiw	r28, 0x00	; 0
    4cd6:	e1 f1       	breq	.+120    	; 0x4d50 <decode_hexadecimal_string_bytes+0x88>
    4cd8:	fa 01       	movw	r30, r20
    4cda:	01 90       	ld	r0, Z+
    4cdc:	00 20       	and	r0, r0
    4cde:	e9 f7       	brne	.-6      	; 0x4cda <decode_hexadecimal_string_bytes+0x12>
    4ce0:	31 97       	sbiw	r30, 0x01	; 1
    4ce2:	e4 1b       	sub	r30, r20
    4ce4:	f5 0b       	sbc	r31, r21
    4ce6:	32 97       	sbiw	r30, 0x02	; 2
    4ce8:	10 f5       	brcc	.+68     	; 0x4d2e <decode_hexadecimal_string_bytes+0x66>
    4cea:	32 c0       	rjmp	.+100    	; 0x4d50 <decode_hexadecimal_string_bytes+0x88>
    4cec:	8d 01       	movw	r16, r26
    4cee:	04 0f       	add	r16, r20
    4cf0:	15 1f       	adc	r17, r21
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	ae 01       	movw	r20, r28
    4cf6:	42 0f       	add	r20, r18
    4cf8:	53 1f       	adc	r21, r19
    4cfa:	fa 01       	movw	r30, r20
    4cfc:	90 81       	ld	r25, Z
    4cfe:	91 34       	cpi	r25, 0x41	; 65
    4d00:	28 f0       	brcs	.+10     	; 0x4d0c <decode_hexadecimal_string_bytes+0x44>
    4d02:	97 53       	subi	r25, 0x37	; 55
    4d04:	59 2f       	mov	r21, r25
    4d06:	52 95       	swap	r21
    4d08:	50 7f       	andi	r21, 0xF0	; 240
    4d0a:	03 c0       	rjmp	.+6      	; 0x4d12 <decode_hexadecimal_string_bytes+0x4a>
    4d0c:	59 2f       	mov	r21, r25
    4d0e:	52 95       	swap	r21
    4d10:	50 7f       	andi	r21, 0xF0	; 240
    4d12:	2c 0f       	add	r18, r28
    4d14:	3d 1f       	adc	r19, r29
    4d16:	f9 01       	movw	r30, r18
    4d18:	91 81       	ldd	r25, Z+1	; 0x01
    4d1a:	91 34       	cpi	r25, 0x41	; 65
    4d1c:	10 f0       	brcs	.+4      	; 0x4d22 <decode_hexadecimal_string_bytes+0x5a>
    4d1e:	97 53       	subi	r25, 0x37	; 55
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <decode_hexadecimal_string_bytes+0x5c>
    4d22:	90 53       	subi	r25, 0x30	; 48
    4d24:	95 0f       	add	r25, r21
    4d26:	f8 01       	movw	r30, r16
    4d28:	90 83       	st	Z, r25
    4d2a:	8f 5f       	subi	r24, 0xFF	; 255
    4d2c:	01 c0       	rjmp	.+2      	; 0x4d30 <decode_hexadecimal_string_bytes+0x68>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	28 2f       	mov	r18, r24
    4d32:	22 0f       	add	r18, r18
    4d34:	48 2f       	mov	r20, r24
    4d36:	50 e0       	ldi	r21, 0x00	; 0
    4d38:	fe 01       	movw	r30, r28
    4d3a:	01 90       	ld	r0, Z+
    4d3c:	00 20       	and	r0, r0
    4d3e:	e9 f7       	brne	.-6      	; 0x4d3a <decode_hexadecimal_string_bytes+0x72>
    4d40:	31 97       	sbiw	r30, 0x01	; 1
    4d42:	ec 1b       	sub	r30, r28
    4d44:	fd 0b       	sbc	r31, r29
    4d46:	4e 17       	cp	r20, r30
    4d48:	5f 07       	cpc	r21, r31
    4d4a:	10 f4       	brcc	.+4      	; 0x4d50 <decode_hexadecimal_string_bytes+0x88>
    4d4c:	86 13       	cpse	r24, r22
    4d4e:	ce cf       	rjmp	.-100    	; 0x4cec <decode_hexadecimal_string_bytes+0x24>
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	1f 91       	pop	r17
    4d56:	0f 91       	pop	r16
    4d58:	08 95       	ret

00004d5a <_serialCallBack>:
    4d5a:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <crc_sum.1945>
    4d5e:	86 0f       	add	r24, r22
    4d60:	80 93 93 18 	sts	0x1893, r24	; 0x801893 <crc_sum.1945>
    4d64:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_mh_state>
    4d68:	91 30       	cpi	r25, 0x01	; 1
    4d6a:	79 f0       	breq	.+30     	; 0x4d8a <_serialCallBack+0x30>
    4d6c:	28 f0       	brcs	.+10     	; 0x4d78 <_serialCallBack+0x1e>
    4d6e:	92 30       	cpi	r25, 0x02	; 2
    4d70:	a9 f0       	breq	.+42     	; 0x4d9c <_serialCallBack+0x42>
    4d72:	93 30       	cpi	r25, 0x03	; 3
    4d74:	19 f1       	breq	.+70     	; 0x4dbc <_serialCallBack+0x62>
    4d76:	08 95       	ret
    4d78:	6f 3f       	cpi	r22, 0xFF	; 255
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <_serialCallBack+0x24>
    4d7c:	48 c0       	rjmp	.+144    	; 0x4e0e <_serialCallBack+0xb4>
    4d7e:	10 92 93 18 	sts	0x1893, r1	; 0x801893 <crc_sum.1945>
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <_mh_state>
    4d88:	08 95       	ret
    4d8a:	66 38       	cpi	r22, 0x86	; 134
    4d8c:	09 f0       	breq	.+2      	; 0x4d90 <_serialCallBack+0x36>
    4d8e:	3f c0       	rjmp	.+126    	; 0x4e0e <_serialCallBack+0xb4>
    4d90:	10 92 92 18 	sts	0x1892, r1	; 0x801892 <inDex.1943>
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <_mh_state>
    4d9a:	08 95       	ret
    4d9c:	e0 91 92 18 	lds	r30, 0x1892	; 0x801892 <inDex.1943>
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	8e 0f       	add	r24, r30
    4da4:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <inDex.1943>
    4da8:	f0 e0       	ldi	r31, 0x00	; 0
    4daa:	e0 57       	subi	r30, 0x70	; 112
    4dac:	f7 4e       	sbci	r31, 0xE7	; 231
    4dae:	60 83       	st	Z, r22
    4db0:	82 30       	cpi	r24, 0x02	; 2
    4db2:	69 f5       	brne	.+90     	; 0x4e0e <_serialCallBack+0xb4>
    4db4:	83 e0       	ldi	r24, 0x03	; 3
    4db6:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <_mh_state>
    4dba:	08 95       	ret
    4dbc:	90 91 92 18 	lds	r25, 0x1892	; 0x801892 <inDex.1943>
    4dc0:	21 e0       	ldi	r18, 0x01	; 1
    4dc2:	29 0f       	add	r18, r25
    4dc4:	20 93 92 18 	sts	0x1892, r18	; 0x801892 <inDex.1943>
    4dc8:	96 30       	cpi	r25, 0x06	; 6
    4dca:	09 f5       	brne	.+66     	; 0x4e0e <_serialCallBack+0xb4>
    4dcc:	81 11       	cpse	r24, r1
    4dce:	0e c0       	rjmp	.+28     	; 0x4dec <_serialCallBack+0x92>
    4dd0:	e0 e9       	ldi	r30, 0x90	; 144
    4dd2:	f8 e1       	ldi	r31, 0x18	; 24
    4dd4:	80 81       	ld	r24, Z
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	98 2f       	mov	r25, r24
    4dda:	88 27       	eor	r24, r24
    4ddc:	21 81       	ldd	r18, Z+1	; 0x01
    4dde:	82 0f       	add	r24, r18
    4de0:	91 1d       	adc	r25, r1
    4de2:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <_ppm+0x1>
    4de6:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <_ppm>
    4dea:	04 c0       	rjmp	.+8      	; 0x4df4 <_serialCallBack+0x9a>
    4dec:	10 92 98 18 	sts	0x1898, r1	; 0x801898 <_ppm+0x1>
    4df0:	10 92 97 18 	sts	0x1897, r1	; 0x801897 <_ppm>
    4df4:	10 92 96 18 	sts	0x1896, r1	; 0x801896 <_mh_state>
    4df8:	e0 91 94 18 	lds	r30, 0x1894	; 0x801894 <_appCallBack>
    4dfc:	f0 91 95 18 	lds	r31, 0x1895	; 0x801895 <_appCallBack+0x1>
    4e00:	30 97       	sbiw	r30, 0x00	; 0
    4e02:	29 f0       	breq	.+10     	; 0x4e0e <_serialCallBack+0xb4>
    4e04:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <_ppm>
    4e08:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <_ppm+0x1>
    4e0c:	19 95       	eicall
    4e0e:	08 95       	ret

00004e10 <mh_z19_initialise>:
    4e10:	8f 92       	push	r8
    4e12:	9f 92       	push	r9
    4e14:	af 92       	push	r10
    4e16:	cf 92       	push	r12
    4e18:	ef 92       	push	r14
    4e1a:	0f 93       	push	r16
    4e1c:	0f 2e       	mov	r0, r31
    4e1e:	fd ea       	ldi	r31, 0xAD	; 173
    4e20:	8f 2e       	mov	r8, r31
    4e22:	f6 e2       	ldi	r31, 0x26	; 38
    4e24:	9f 2e       	mov	r9, r31
    4e26:	f0 2d       	mov	r31, r0
    4e28:	68 94       	set
    4e2a:	aa 24       	eor	r10, r10
    4e2c:	a4 f8       	bld	r10, 4
    4e2e:	68 94       	set
    4e30:	cc 24       	eor	r12, r12
    4e32:	c4 f8       	bld	r12, 4
    4e34:	e1 2c       	mov	r14, r1
    4e36:	00 e0       	ldi	r16, 0x00	; 0
    4e38:	23 e0       	ldi	r18, 0x03	; 3
    4e3a:	40 e8       	ldi	r20, 0x80	; 128
    4e3c:	55 e2       	ldi	r21, 0x25	; 37
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	70 e0       	ldi	r23, 0x00	; 0
    4e42:	73 d0       	rcall	.+230    	; 0x4f2a <serial_create>
    4e44:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <_serial+0x1>
    4e48:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <_serial>
    4e4c:	0f 91       	pop	r16
    4e4e:	ef 90       	pop	r14
    4e50:	cf 90       	pop	r12
    4e52:	af 90       	pop	r10
    4e54:	9f 90       	pop	r9
    4e56:	8f 90       	pop	r8
    4e58:	08 95       	ret

00004e5a <mh_z19_injectCallBack>:
    4e5a:	90 93 95 18 	sts	0x1895, r25	; 0x801895 <_appCallBack+0x1>
    4e5e:	80 93 94 18 	sts	0x1894, r24	; 0x801894 <_appCallBack>
    4e62:	08 95       	ret

00004e64 <mh_z19_takeMeassuring>:
    4e64:	cf 93       	push	r28
    4e66:	df 93       	push	r29
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62
    4e6c:	29 97       	sbiw	r28, 0x09	; 9
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	89 e0       	ldi	r24, 0x09	; 9
    4e7a:	e2 e4       	ldi	r30, 0x42	; 66
    4e7c:	f2 e0       	ldi	r31, 0x02	; 2
    4e7e:	9e 01       	movw	r18, r28
    4e80:	2f 5f       	subi	r18, 0xFF	; 255
    4e82:	3f 4f       	sbci	r19, 0xFF	; 255
    4e84:	d9 01       	movw	r26, r18
    4e86:	01 90       	ld	r0, Z+
    4e88:	0d 92       	st	X+, r0
    4e8a:	8a 95       	dec	r24
    4e8c:	e1 f7       	brne	.-8      	; 0x4e86 <mh_z19_takeMeassuring+0x22>
    4e8e:	10 92 98 18 	sts	0x1898, r1	; 0x801898 <_ppm+0x1>
    4e92:	10 92 97 18 	sts	0x1897, r1	; 0x801897 <_ppm>
    4e96:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <_serial>
    4e9a:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <_serial+0x1>
    4e9e:	00 97       	sbiw	r24, 0x00	; 0
    4ea0:	31 f0       	breq	.+12     	; 0x4eae <mh_z19_takeMeassuring+0x4a>
    4ea2:	42 2f       	mov	r20, r18
    4ea4:	53 2f       	mov	r21, r19
    4ea6:	69 e0       	ldi	r22, 0x09	; 9
    4ea8:	0d d1       	rcall	.+538    	; 0x50c4 <serial_sendBytes>
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	01 c0       	rjmp	.+2      	; 0x4eb0 <mh_z19_takeMeassuring+0x4c>
    4eae:	82 e0       	ldi	r24, 0x02	; 2
    4eb0:	29 96       	adiw	r28, 0x09	; 9
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	0f be       	out	0x3f, r0	; 63
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	08 95       	ret

00004ec2 <rc_servo_setPosition>:
    4ec2:	65 36       	cpi	r22, 0x65	; 101
    4ec4:	0c f0       	brlt	.+2      	; 0x4ec8 <rc_servo_setPosition+0x6>
    4ec6:	64 e6       	ldi	r22, 0x64	; 100
    4ec8:	6c 39       	cpi	r22, 0x9C	; 156
    4eca:	0c f4       	brge	.+2      	; 0x4ece <rc_servo_setPosition+0xc>
    4ecc:	6c e9       	ldi	r22, 0x9C	; 156
    4ece:	96 ef       	ldi	r25, 0xF6	; 246
    4ed0:	69 02       	muls	r22, r25
    4ed2:	b0 01       	movw	r22, r0
    4ed4:	11 24       	eor	r1, r1
    4ed6:	68 54       	subi	r22, 0x48	; 72
    4ed8:	74 4f       	sbci	r23, 0xF4	; 244
    4eda:	81 11       	cpse	r24, r1
    4edc:	05 c0       	rjmp	.+10     	; 0x4ee8 <rc_servo_setPosition+0x26>
    4ede:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4ee2:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4ee6:	08 95       	ret
    4ee8:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4eec:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4ef0:	08 95       	ret

00004ef2 <rc_servo_initialise>:
    4ef2:	ea e0       	ldi	r30, 0x0A	; 10
    4ef4:	f1 e0       	ldi	r31, 0x01	; 1
    4ef6:	80 81       	ld	r24, Z
    4ef8:	88 61       	ori	r24, 0x18	; 24
    4efa:	80 83       	st	Z, r24
    4efc:	8f e3       	ldi	r24, 0x3F	; 63
    4efe:	9c e9       	ldi	r25, 0x9C	; 156
    4f00:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4f04:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4f08:	60 e0       	ldi	r22, 0x00	; 0
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	da df       	rcall	.-76     	; 0x4ec2 <rc_servo_setPosition>
    4f0e:	60 e0       	ldi	r22, 0x00	; 0
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	d7 df       	rcall	.-82     	; 0x4ec2 <rc_servo_setPosition>
    4f14:	e0 e2       	ldi	r30, 0x20	; 32
    4f16:	f1 e0       	ldi	r31, 0x01	; 1
    4f18:	80 81       	ld	r24, Z
    4f1a:	82 6a       	ori	r24, 0xA2	; 162
    4f1c:	80 83       	st	Z, r24
    4f1e:	e1 e2       	ldi	r30, 0x21	; 33
    4f20:	f1 e0       	ldi	r31, 0x01	; 1
    4f22:	80 81       	ld	r24, Z
    4f24:	8a 61       	ori	r24, 0x1A	; 26
    4f26:	80 83       	st	Z, r24
    4f28:	08 95       	ret

00004f2a <serial_create>:
    4f2a:	2f 92       	push	r2
    4f2c:	3f 92       	push	r3
    4f2e:	4f 92       	push	r4
    4f30:	5f 92       	push	r5
    4f32:	6f 92       	push	r6
    4f34:	7f 92       	push	r7
    4f36:	8f 92       	push	r8
    4f38:	9f 92       	push	r9
    4f3a:	af 92       	push	r10
    4f3c:	cf 92       	push	r12
    4f3e:	ef 92       	push	r14
    4f40:	ff 92       	push	r15
    4f42:	0f 93       	push	r16
    4f44:	1f 93       	push	r17
    4f46:	cf 93       	push	r28
    4f48:	df 93       	push	r29
    4f4a:	cd b7       	in	r28, 0x3d	; 61
    4f4c:	de b7       	in	r29, 0x3e	; 62
    4f4e:	f8 2e       	mov	r15, r24
    4f50:	2a 01       	movw	r4, r20
    4f52:	3b 01       	movw	r6, r22
    4f54:	88 e0       	ldi	r24, 0x08	; 8
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	0e 94 aa 30 	call	0x6154	; 0x6154 <malloc>
    4f5c:	8c 01       	movw	r16, r24
    4f5e:	8f 2d       	mov	r24, r15
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	fc 01       	movw	r30, r24
    4f64:	ee 0f       	add	r30, r30
    4f66:	ff 1f       	adc	r31, r31
    4f68:	e5 56       	subi	r30, 0x65	; 101
    4f6a:	f7 4e       	sbci	r31, 0xE7	; 231
    4f6c:	11 83       	std	Z+1, r17	; 0x01
    4f6e:	00 83       	st	Z, r16
    4f70:	01 15       	cp	r16, r1
    4f72:	11 05       	cpc	r17, r1
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <serial_create+0x4e>
    4f76:	69 c0       	rjmp	.+210    	; 0x504a <serial_create+0x120>
    4f78:	88 0f       	add	r24, r24
    4f7a:	99 1f       	adc	r25, r25
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	e5 5f       	subi	r30, 0xF5	; 245
    4f80:	fd 4f       	sbci	r31, 0xFD	; 253
    4f82:	80 81       	ld	r24, Z
    4f84:	91 81       	ldd	r25, Z+1	; 0x01
    4f86:	d8 01       	movw	r26, r16
    4f88:	8d 93       	st	X+, r24
    4f8a:	9c 93       	st	X, r25
    4f8c:	8c 2d       	mov	r24, r12
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	88 0f       	add	r24, r24
    4f92:	99 1f       	adc	r25, r25
    4f94:	88 0f       	add	r24, r24
    4f96:	99 1f       	adc	r25, r25
    4f98:	0e 94 aa 30 	call	0x6154	; 0x6154 <malloc>
    4f9c:	1c 01       	movw	r2, r24
    4f9e:	86 e0       	ldi	r24, 0x06	; 6
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	0e 94 aa 30 	call	0x6154	; 0x6154 <malloc>
    4fa6:	7c 01       	movw	r14, r24
    4fa8:	4c 2d       	mov	r20, r12
    4faa:	b1 01       	movw	r22, r2
    4fac:	f0 d6       	rcall	.+3552   	; 0x5d8e <fifo_init>
    4fae:	f8 01       	movw	r30, r16
    4fb0:	f5 82       	std	Z+5, r15	; 0x05
    4fb2:	e4 82       	std	Z+4, r14	; 0x04
    4fb4:	8a 2d       	mov	r24, r10
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	88 0f       	add	r24, r24
    4fba:	99 1f       	adc	r25, r25
    4fbc:	88 0f       	add	r24, r24
    4fbe:	99 1f       	adc	r25, r25
    4fc0:	0e 94 aa 30 	call	0x6154	; 0x6154 <malloc>
    4fc4:	1c 01       	movw	r2, r24
    4fc6:	86 e0       	ldi	r24, 0x06	; 6
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0e 94 aa 30 	call	0x6154	; 0x6154 <malloc>
    4fce:	7c 01       	movw	r14, r24
    4fd0:	4a 2d       	mov	r20, r10
    4fd2:	b1 01       	movw	r22, r2
    4fd4:	dc d6       	rcall	.+3512   	; 0x5d8e <fifo_init>
    4fd6:	d8 01       	movw	r26, r16
    4fd8:	13 96       	adiw	r26, 0x03	; 3
    4fda:	fc 92       	st	X, r15
    4fdc:	ee 92       	st	-X, r14
    4fde:	12 97       	sbiw	r26, 0x02	; 2
    4fe0:	17 96       	adiw	r26, 0x07	; 7
    4fe2:	9c 92       	st	X, r9
    4fe4:	8e 92       	st	-X, r8
    4fe6:	16 97       	sbiw	r26, 0x06	; 6
    4fe8:	ff b6       	in	r15, 0x3f	; 63
    4fea:	f8 94       	cli
    4fec:	ed 91       	ld	r30, X+
    4fee:	fc 91       	ld	r31, X
    4ff0:	11 97       	sbiw	r26, 0x01	; 1
    4ff2:	36 97       	sbiw	r30, 0x06	; 6
    4ff4:	80 81       	ld	r24, Z
    4ff6:	82 60       	ori	r24, 0x02	; 2
    4ff8:	80 83       	st	Z, r24
    4ffa:	8d 90       	ld	r8, X+
    4ffc:	9c 90       	ld	r9, X
    4ffe:	c3 01       	movw	r24, r6
    5000:	b2 01       	movw	r22, r4
    5002:	b3 d7       	rcall	.+3942   	; 0x5f6a <__floatunsisf>
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	51 e4       	ldi	r21, 0x41	; 65
    500c:	0e 94 1a 30 	call	0x6034	; 0x6034 <__mulsf3>
    5010:	9b 01       	movw	r18, r22
    5012:	ac 01       	movw	r20, r24
    5014:	60 e0       	ldi	r22, 0x00	; 0
    5016:	74 e2       	ldi	r23, 0x24	; 36
    5018:	84 e7       	ldi	r24, 0x74	; 116
    501a:	9b e4       	ldi	r25, 0x4B	; 75
    501c:	3b d7       	rcall	.+3702   	; 0x5e94 <__divsf3>
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e8       	ldi	r20, 0x80	; 128
    5024:	5f e3       	ldi	r21, 0x3F	; 63
    5026:	cf d6       	rcall	.+3486   	; 0x5dc6 <__subsf3>
    5028:	3d d9       	rcall	.-3462   	; 0x42a4 <__fixunssfsi>
    502a:	f4 01       	movw	r30, r8
    502c:	32 97       	sbiw	r30, 0x02	; 2
    502e:	60 83       	st	Z, r22
    5030:	d8 01       	movw	r26, r16
    5032:	ed 91       	ld	r30, X+
    5034:	fc 91       	ld	r31, X
    5036:	11 97       	sbiw	r26, 0x01	; 1
    5038:	35 97       	sbiw	r30, 0x05	; 5
    503a:	88 e9       	ldi	r24, 0x98	; 152
    503c:	80 83       	st	Z, r24
    503e:	ed 91       	ld	r30, X+
    5040:	fc 91       	ld	r31, X
    5042:	34 97       	sbiw	r30, 0x04	; 4
    5044:	86 e0       	ldi	r24, 0x06	; 6
    5046:	80 83       	st	Z, r24
    5048:	ff be       	out	0x3f, r15	; 63
    504a:	c8 01       	movw	r24, r16
    504c:	df 91       	pop	r29
    504e:	cf 91       	pop	r28
    5050:	1f 91       	pop	r17
    5052:	0f 91       	pop	r16
    5054:	ff 90       	pop	r15
    5056:	ef 90       	pop	r14
    5058:	cf 90       	pop	r12
    505a:	af 90       	pop	r10
    505c:	9f 90       	pop	r9
    505e:	8f 90       	pop	r8
    5060:	7f 90       	pop	r7
    5062:	6f 90       	pop	r6
    5064:	5f 90       	pop	r5
    5066:	4f 90       	pop	r4
    5068:	3f 90       	pop	r3
    506a:	2f 90       	pop	r2
    506c:	08 95       	ret

0000506e <serial_sendByte>:
    506e:	cf 93       	push	r28
    5070:	df 93       	push	r29
    5072:	dc 01       	movw	r26, r24
    5074:	89 2b       	or	r24, r25
    5076:	01 f1       	breq	.+64     	; 0x50b8 <serial_sendByte+0x4a>
    5078:	12 96       	adiw	r26, 0x02	; 2
    507a:	ed 91       	ld	r30, X+
    507c:	fc 91       	ld	r31, X
    507e:	13 97       	sbiw	r26, 0x03	; 3
    5080:	93 81       	ldd	r25, Z+3	; 0x03
    5082:	82 81       	ldd	r24, Z+2	; 0x02
    5084:	25 81       	ldd	r18, Z+5	; 0x05
    5086:	98 1b       	sub	r25, r24
    5088:	92 23       	and	r25, r18
    508a:	84 81       	ldd	r24, Z+4	; 0x04
    508c:	98 17       	cp	r25, r24
    508e:	b1 f0       	breq	.+44     	; 0x50bc <serial_sendByte+0x4e>
    5090:	83 81       	ldd	r24, Z+3	; 0x03
    5092:	26 95       	lsr	r18
    5094:	28 23       	and	r18, r24
    5096:	c0 81       	ld	r28, Z
    5098:	d1 81       	ldd	r29, Z+1	; 0x01
    509a:	c2 0f       	add	r28, r18
    509c:	d1 1d       	adc	r29, r1
    509e:	68 83       	st	Y, r22
    50a0:	8f 5f       	subi	r24, 0xFF	; 255
    50a2:	95 81       	ldd	r25, Z+5	; 0x05
    50a4:	89 23       	and	r24, r25
    50a6:	83 83       	std	Z+3, r24	; 0x03
    50a8:	ed 91       	ld	r30, X+
    50aa:	fc 91       	ld	r31, X
    50ac:	35 97       	sbiw	r30, 0x05	; 5
    50ae:	80 81       	ld	r24, Z
    50b0:	80 62       	ori	r24, 0x20	; 32
    50b2:	80 83       	st	Z, r24
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	03 c0       	rjmp	.+6      	; 0x50be <serial_sendByte+0x50>
    50b8:	81 e0       	ldi	r24, 0x01	; 1
    50ba:	01 c0       	rjmp	.+2      	; 0x50be <serial_sendByte+0x50>
    50bc:	82 e0       	ldi	r24, 0x02	; 2
    50be:	df 91       	pop	r29
    50c0:	cf 91       	pop	r28
    50c2:	08 95       	ret

000050c4 <serial_sendBytes>:
    50c4:	ef 92       	push	r14
    50c6:	ff 92       	push	r15
    50c8:	0f 93       	push	r16
    50ca:	1f 93       	push	r17
    50cc:	cf 93       	push	r28
    50ce:	df 93       	push	r29
    50d0:	7c 01       	movw	r14, r24
    50d2:	00 97       	sbiw	r24, 0x00	; 0
    50d4:	09 f4       	brne	.+2      	; 0x50d8 <serial_sendBytes+0x14>
    50d6:	41 c0       	rjmp	.+130    	; 0x515a <serial_sendBytes+0x96>
    50d8:	dc 01       	movw	r26, r24
    50da:	12 96       	adiw	r26, 0x02	; 2
    50dc:	ed 91       	ld	r30, X+
    50de:	fc 91       	ld	r31, X
    50e0:	13 97       	sbiw	r26, 0x03	; 3
    50e2:	93 81       	ldd	r25, Z+3	; 0x03
    50e4:	82 81       	ldd	r24, Z+2	; 0x02
    50e6:	98 1b       	sub	r25, r24
    50e8:	85 81       	ldd	r24, Z+5	; 0x05
    50ea:	98 23       	and	r25, r24
    50ec:	84 81       	ldd	r24, Z+4	; 0x04
    50ee:	89 1b       	sub	r24, r25
    50f0:	86 17       	cp	r24, r22
    50f2:	a8 f1       	brcs	.+106    	; 0x515e <serial_sendBytes+0x9a>
    50f4:	66 23       	and	r22, r22
    50f6:	41 f1       	breq	.+80     	; 0x5148 <serial_sendBytes+0x84>
    50f8:	84 2f       	mov	r24, r20
    50fa:	95 2f       	mov	r25, r21
    50fc:	dc 01       	movw	r26, r24
    50fe:	61 50       	subi	r22, 0x01	; 1
    5100:	46 2f       	mov	r20, r22
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	4f 5f       	subi	r20, 0xFF	; 255
    5106:	5f 4f       	sbci	r21, 0xFF	; 255
    5108:	48 0f       	add	r20, r24
    510a:	59 1f       	adc	r21, r25
    510c:	e7 01       	movw	r28, r14
    510e:	ea 81       	ldd	r30, Y+2	; 0x02
    5110:	fb 81       	ldd	r31, Y+3	; 0x03
    5112:	93 81       	ldd	r25, Z+3	; 0x03
    5114:	82 81       	ldd	r24, Z+2	; 0x02
    5116:	25 81       	ldd	r18, Z+5	; 0x05
    5118:	98 1b       	sub	r25, r24
    511a:	92 23       	and	r25, r18
    511c:	84 81       	ldd	r24, Z+4	; 0x04
    511e:	98 17       	cp	r25, r24
    5120:	79 f0       	breq	.+30     	; 0x5140 <serial_sendBytes+0x7c>
    5122:	8c 91       	ld	r24, X
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	26 95       	lsr	r18
    5128:	29 23       	and	r18, r25
    512a:	60 81       	ld	r22, Z
    512c:	71 81       	ldd	r23, Z+1	; 0x01
    512e:	8b 01       	movw	r16, r22
    5130:	02 0f       	add	r16, r18
    5132:	11 1d       	adc	r17, r1
    5134:	e8 01       	movw	r28, r16
    5136:	88 83       	st	Y, r24
    5138:	9f 5f       	subi	r25, 0xFF	; 255
    513a:	85 81       	ldd	r24, Z+5	; 0x05
    513c:	98 23       	and	r25, r24
    513e:	93 83       	std	Z+3, r25	; 0x03
    5140:	11 96       	adiw	r26, 0x01	; 1
    5142:	a4 17       	cp	r26, r20
    5144:	b5 07       	cpc	r27, r21
    5146:	11 f7       	brne	.-60     	; 0x510c <serial_sendBytes+0x48>
    5148:	d7 01       	movw	r26, r14
    514a:	ed 91       	ld	r30, X+
    514c:	fc 91       	ld	r31, X
    514e:	35 97       	sbiw	r30, 0x05	; 5
    5150:	80 81       	ld	r24, Z
    5152:	80 62       	ori	r24, 0x20	; 32
    5154:	80 83       	st	Z, r24
    5156:	80 e0       	ldi	r24, 0x00	; 0
    5158:	03 c0       	rjmp	.+6      	; 0x5160 <serial_sendBytes+0x9c>
    515a:	81 e0       	ldi	r24, 0x01	; 1
    515c:	01 c0       	rjmp	.+2      	; 0x5160 <serial_sendBytes+0x9c>
    515e:	82 e0       	ldi	r24, 0x02	; 2
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	1f 91       	pop	r17
    5166:	0f 91       	pop	r16
    5168:	ff 90       	pop	r15
    516a:	ef 90       	pop	r14
    516c:	08 95       	ret

0000516e <serial_getByte>:
    516e:	00 97       	sbiw	r24, 0x00	; 0
    5170:	d1 f0       	breq	.+52     	; 0x51a6 <serial_getByte+0x38>
    5172:	dc 01       	movw	r26, r24
    5174:	14 96       	adiw	r26, 0x04	; 4
    5176:	ed 91       	ld	r30, X+
    5178:	fc 91       	ld	r31, X
    517a:	15 97       	sbiw	r26, 0x05	; 5
    517c:	93 81       	ldd	r25, Z+3	; 0x03
    517e:	82 81       	ldd	r24, Z+2	; 0x02
    5180:	98 17       	cp	r25, r24
    5182:	99 f0       	breq	.+38     	; 0x51aa <serial_getByte+0x3c>
    5184:	92 81       	ldd	r25, Z+2	; 0x02
    5186:	85 81       	ldd	r24, Z+5	; 0x05
    5188:	86 95       	lsr	r24
    518a:	89 23       	and	r24, r25
    518c:	a0 81       	ld	r26, Z
    518e:	b1 81       	ldd	r27, Z+1	; 0x01
    5190:	a8 0f       	add	r26, r24
    5192:	b1 1d       	adc	r27, r1
    5194:	8c 91       	ld	r24, X
    5196:	db 01       	movw	r26, r22
    5198:	8c 93       	st	X, r24
    519a:	9f 5f       	subi	r25, 0xFF	; 255
    519c:	85 81       	ldd	r24, Z+5	; 0x05
    519e:	98 23       	and	r25, r24
    51a0:	92 83       	std	Z+2, r25	; 0x02
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	08 95       	ret
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	08 95       	ret
    51aa:	83 e0       	ldi	r24, 0x03	; 3
    51ac:	08 95       	ret

000051ae <__vector_25>:
    51ae:	1f 92       	push	r1
    51b0:	0f 92       	push	r0
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	0f 92       	push	r0
    51b6:	11 24       	eor	r1, r1
    51b8:	0b b6       	in	r0, 0x3b	; 59
    51ba:	0f 92       	push	r0
    51bc:	2f 93       	push	r18
    51be:	3f 93       	push	r19
    51c0:	4f 93       	push	r20
    51c2:	5f 93       	push	r21
    51c4:	6f 93       	push	r22
    51c6:	7f 93       	push	r23
    51c8:	8f 93       	push	r24
    51ca:	9f 93       	push	r25
    51cc:	af 93       	push	r26
    51ce:	bf 93       	push	r27
    51d0:	cf 93       	push	r28
    51d2:	df 93       	push	r29
    51d4:	ef 93       	push	r30
    51d6:	ff 93       	push	r31
    51d8:	a0 91 9b 18 	lds	r26, 0x189B	; 0x80189b <_ser_handle>
    51dc:	b0 91 9c 18 	lds	r27, 0x189C	; 0x80189c <_ser_handle+0x1>
    51e0:	10 97       	sbiw	r26, 0x00	; 0
    51e2:	11 f1       	breq	.+68     	; 0x5228 <__vector_25+0x7a>
    51e4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    51e8:	14 96       	adiw	r26, 0x04	; 4
    51ea:	ed 91       	ld	r30, X+
    51ec:	fc 91       	ld	r31, X
    51ee:	15 97       	sbiw	r26, 0x05	; 5
    51f0:	93 81       	ldd	r25, Z+3	; 0x03
    51f2:	82 81       	ldd	r24, Z+2	; 0x02
    51f4:	25 81       	ldd	r18, Z+5	; 0x05
    51f6:	98 1b       	sub	r25, r24
    51f8:	92 23       	and	r25, r18
    51fa:	84 81       	ldd	r24, Z+4	; 0x04
    51fc:	98 17       	cp	r25, r24
    51fe:	61 f0       	breq	.+24     	; 0x5218 <__vector_25+0x6a>
    5200:	83 81       	ldd	r24, Z+3	; 0x03
    5202:	26 95       	lsr	r18
    5204:	28 23       	and	r18, r24
    5206:	c0 81       	ld	r28, Z
    5208:	d1 81       	ldd	r29, Z+1	; 0x01
    520a:	c2 0f       	add	r28, r18
    520c:	d1 1d       	adc	r29, r1
    520e:	68 83       	st	Y, r22
    5210:	8f 5f       	subi	r24, 0xFF	; 255
    5212:	95 81       	ldd	r25, Z+5	; 0x05
    5214:	89 23       	and	r24, r25
    5216:	83 83       	std	Z+3, r24	; 0x03
    5218:	16 96       	adiw	r26, 0x06	; 6
    521a:	ed 91       	ld	r30, X+
    521c:	fc 91       	ld	r31, X
    521e:	17 97       	sbiw	r26, 0x07	; 7
    5220:	30 97       	sbiw	r30, 0x00	; 0
    5222:	11 f0       	breq	.+4      	; 0x5228 <__vector_25+0x7a>
    5224:	cd 01       	movw	r24, r26
    5226:	19 95       	eicall
    5228:	ff 91       	pop	r31
    522a:	ef 91       	pop	r30
    522c:	df 91       	pop	r29
    522e:	cf 91       	pop	r28
    5230:	bf 91       	pop	r27
    5232:	af 91       	pop	r26
    5234:	9f 91       	pop	r25
    5236:	8f 91       	pop	r24
    5238:	7f 91       	pop	r23
    523a:	6f 91       	pop	r22
    523c:	5f 91       	pop	r21
    523e:	4f 91       	pop	r20
    5240:	3f 91       	pop	r19
    5242:	2f 91       	pop	r18
    5244:	0f 90       	pop	r0
    5246:	0b be       	out	0x3b, r0	; 59
    5248:	0f 90       	pop	r0
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	0f 90       	pop	r0
    524e:	1f 90       	pop	r1
    5250:	18 95       	reti

00005252 <__vector_26>:
    5252:	1f 92       	push	r1
    5254:	0f 92       	push	r0
    5256:	0f b6       	in	r0, 0x3f	; 63
    5258:	0f 92       	push	r0
    525a:	11 24       	eor	r1, r1
    525c:	0b b6       	in	r0, 0x3b	; 59
    525e:	0f 92       	push	r0
    5260:	2f 93       	push	r18
    5262:	8f 93       	push	r24
    5264:	9f 93       	push	r25
    5266:	af 93       	push	r26
    5268:	bf 93       	push	r27
    526a:	ef 93       	push	r30
    526c:	ff 93       	push	r31
    526e:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <_ser_handle>
    5272:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <_ser_handle+0x1>
    5276:	30 97       	sbiw	r30, 0x00	; 0
    5278:	b9 f0       	breq	.+46     	; 0x52a8 <__vector_26+0x56>
    527a:	02 80       	ldd	r0, Z+2	; 0x02
    527c:	f3 81       	ldd	r31, Z+3	; 0x03
    527e:	e0 2d       	mov	r30, r0
    5280:	93 81       	ldd	r25, Z+3	; 0x03
    5282:	82 81       	ldd	r24, Z+2	; 0x02
    5284:	98 17       	cp	r25, r24
    5286:	b1 f0       	breq	.+44     	; 0x52b4 <__vector_26+0x62>
    5288:	92 81       	ldd	r25, Z+2	; 0x02
    528a:	85 81       	ldd	r24, Z+5	; 0x05
    528c:	28 2f       	mov	r18, r24
    528e:	26 95       	lsr	r18
    5290:	29 23       	and	r18, r25
    5292:	a0 81       	ld	r26, Z
    5294:	b1 81       	ldd	r27, Z+1	; 0x01
    5296:	a2 0f       	add	r26, r18
    5298:	b1 1d       	adc	r27, r1
    529a:	2c 91       	ld	r18, X
    529c:	9f 5f       	subi	r25, 0xFF	; 255
    529e:	89 23       	and	r24, r25
    52a0:	82 83       	std	Z+2, r24	; 0x02
    52a2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    52a6:	0b c0       	rjmp	.+22     	; 0x52be <__vector_26+0x6c>
    52a8:	e1 ec       	ldi	r30, 0xC1	; 193
    52aa:	f0 e0       	ldi	r31, 0x00	; 0
    52ac:	80 81       	ld	r24, Z
    52ae:	8f 7d       	andi	r24, 0xDF	; 223
    52b0:	80 83       	st	Z, r24
    52b2:	05 c0       	rjmp	.+10     	; 0x52be <__vector_26+0x6c>
    52b4:	e1 ec       	ldi	r30, 0xC1	; 193
    52b6:	f0 e0       	ldi	r31, 0x00	; 0
    52b8:	80 81       	ld	r24, Z
    52ba:	8f 7d       	andi	r24, 0xDF	; 223
    52bc:	80 83       	st	Z, r24
    52be:	ff 91       	pop	r31
    52c0:	ef 91       	pop	r30
    52c2:	bf 91       	pop	r27
    52c4:	af 91       	pop	r26
    52c6:	9f 91       	pop	r25
    52c8:	8f 91       	pop	r24
    52ca:	2f 91       	pop	r18
    52cc:	0f 90       	pop	r0
    52ce:	0b be       	out	0x3b, r0	; 59
    52d0:	0f 90       	pop	r0
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	0f 90       	pop	r0
    52d6:	1f 90       	pop	r1
    52d8:	18 95       	reti

000052da <__vector_36>:
    52da:	1f 92       	push	r1
    52dc:	0f 92       	push	r0
    52de:	0f b6       	in	r0, 0x3f	; 63
    52e0:	0f 92       	push	r0
    52e2:	11 24       	eor	r1, r1
    52e4:	0b b6       	in	r0, 0x3b	; 59
    52e6:	0f 92       	push	r0
    52e8:	2f 93       	push	r18
    52ea:	3f 93       	push	r19
    52ec:	4f 93       	push	r20
    52ee:	5f 93       	push	r21
    52f0:	6f 93       	push	r22
    52f2:	7f 93       	push	r23
    52f4:	8f 93       	push	r24
    52f6:	9f 93       	push	r25
    52f8:	af 93       	push	r26
    52fa:	bf 93       	push	r27
    52fc:	cf 93       	push	r28
    52fe:	df 93       	push	r29
    5300:	ef 93       	push	r30
    5302:	ff 93       	push	r31
    5304:	a0 91 9d 18 	lds	r26, 0x189D	; 0x80189d <_ser_handle+0x2>
    5308:	b0 91 9e 18 	lds	r27, 0x189E	; 0x80189e <_ser_handle+0x3>
    530c:	10 97       	sbiw	r26, 0x00	; 0
    530e:	11 f1       	breq	.+68     	; 0x5354 <__vector_36+0x7a>
    5310:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5314:	14 96       	adiw	r26, 0x04	; 4
    5316:	ed 91       	ld	r30, X+
    5318:	fc 91       	ld	r31, X
    531a:	15 97       	sbiw	r26, 0x05	; 5
    531c:	93 81       	ldd	r25, Z+3	; 0x03
    531e:	82 81       	ldd	r24, Z+2	; 0x02
    5320:	25 81       	ldd	r18, Z+5	; 0x05
    5322:	98 1b       	sub	r25, r24
    5324:	92 23       	and	r25, r18
    5326:	84 81       	ldd	r24, Z+4	; 0x04
    5328:	98 17       	cp	r25, r24
    532a:	61 f0       	breq	.+24     	; 0x5344 <__vector_36+0x6a>
    532c:	83 81       	ldd	r24, Z+3	; 0x03
    532e:	26 95       	lsr	r18
    5330:	28 23       	and	r18, r24
    5332:	c0 81       	ld	r28, Z
    5334:	d1 81       	ldd	r29, Z+1	; 0x01
    5336:	c2 0f       	add	r28, r18
    5338:	d1 1d       	adc	r29, r1
    533a:	68 83       	st	Y, r22
    533c:	8f 5f       	subi	r24, 0xFF	; 255
    533e:	95 81       	ldd	r25, Z+5	; 0x05
    5340:	89 23       	and	r24, r25
    5342:	83 83       	std	Z+3, r24	; 0x03
    5344:	16 96       	adiw	r26, 0x06	; 6
    5346:	ed 91       	ld	r30, X+
    5348:	fc 91       	ld	r31, X
    534a:	17 97       	sbiw	r26, 0x07	; 7
    534c:	30 97       	sbiw	r30, 0x00	; 0
    534e:	11 f0       	breq	.+4      	; 0x5354 <__vector_36+0x7a>
    5350:	cd 01       	movw	r24, r26
    5352:	19 95       	eicall
    5354:	ff 91       	pop	r31
    5356:	ef 91       	pop	r30
    5358:	df 91       	pop	r29
    535a:	cf 91       	pop	r28
    535c:	bf 91       	pop	r27
    535e:	af 91       	pop	r26
    5360:	9f 91       	pop	r25
    5362:	8f 91       	pop	r24
    5364:	7f 91       	pop	r23
    5366:	6f 91       	pop	r22
    5368:	5f 91       	pop	r21
    536a:	4f 91       	pop	r20
    536c:	3f 91       	pop	r19
    536e:	2f 91       	pop	r18
    5370:	0f 90       	pop	r0
    5372:	0b be       	out	0x3b, r0	; 59
    5374:	0f 90       	pop	r0
    5376:	0f be       	out	0x3f, r0	; 63
    5378:	0f 90       	pop	r0
    537a:	1f 90       	pop	r1
    537c:	18 95       	reti

0000537e <__vector_37>:
    537e:	1f 92       	push	r1
    5380:	0f 92       	push	r0
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	0f 92       	push	r0
    5386:	11 24       	eor	r1, r1
    5388:	0b b6       	in	r0, 0x3b	; 59
    538a:	0f 92       	push	r0
    538c:	2f 93       	push	r18
    538e:	8f 93       	push	r24
    5390:	9f 93       	push	r25
    5392:	af 93       	push	r26
    5394:	bf 93       	push	r27
    5396:	ef 93       	push	r30
    5398:	ff 93       	push	r31
    539a:	e0 91 9d 18 	lds	r30, 0x189D	; 0x80189d <_ser_handle+0x2>
    539e:	f0 91 9e 18 	lds	r31, 0x189E	; 0x80189e <_ser_handle+0x3>
    53a2:	30 97       	sbiw	r30, 0x00	; 0
    53a4:	b9 f0       	breq	.+46     	; 0x53d4 <__vector_37+0x56>
    53a6:	02 80       	ldd	r0, Z+2	; 0x02
    53a8:	f3 81       	ldd	r31, Z+3	; 0x03
    53aa:	e0 2d       	mov	r30, r0
    53ac:	93 81       	ldd	r25, Z+3	; 0x03
    53ae:	82 81       	ldd	r24, Z+2	; 0x02
    53b0:	98 17       	cp	r25, r24
    53b2:	b1 f0       	breq	.+44     	; 0x53e0 <__vector_37+0x62>
    53b4:	92 81       	ldd	r25, Z+2	; 0x02
    53b6:	85 81       	ldd	r24, Z+5	; 0x05
    53b8:	28 2f       	mov	r18, r24
    53ba:	26 95       	lsr	r18
    53bc:	29 23       	and	r18, r25
    53be:	a0 81       	ld	r26, Z
    53c0:	b1 81       	ldd	r27, Z+1	; 0x01
    53c2:	a2 0f       	add	r26, r18
    53c4:	b1 1d       	adc	r27, r1
    53c6:	2c 91       	ld	r18, X
    53c8:	9f 5f       	subi	r25, 0xFF	; 255
    53ca:	89 23       	and	r24, r25
    53cc:	82 83       	std	Z+2, r24	; 0x02
    53ce:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    53d2:	0b c0       	rjmp	.+22     	; 0x53ea <__vector_37+0x6c>
    53d4:	e9 ec       	ldi	r30, 0xC9	; 201
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	80 81       	ld	r24, Z
    53da:	8f 7d       	andi	r24, 0xDF	; 223
    53dc:	80 83       	st	Z, r24
    53de:	05 c0       	rjmp	.+10     	; 0x53ea <__vector_37+0x6c>
    53e0:	e9 ec       	ldi	r30, 0xC9	; 201
    53e2:	f0 e0       	ldi	r31, 0x00	; 0
    53e4:	80 81       	ld	r24, Z
    53e6:	8f 7d       	andi	r24, 0xDF	; 223
    53e8:	80 83       	st	Z, r24
    53ea:	ff 91       	pop	r31
    53ec:	ef 91       	pop	r30
    53ee:	bf 91       	pop	r27
    53f0:	af 91       	pop	r26
    53f2:	9f 91       	pop	r25
    53f4:	8f 91       	pop	r24
    53f6:	2f 91       	pop	r18
    53f8:	0f 90       	pop	r0
    53fa:	0b be       	out	0x3b, r0	; 59
    53fc:	0f 90       	pop	r0
    53fe:	0f be       	out	0x3f, r0	; 63
    5400:	0f 90       	pop	r0
    5402:	1f 90       	pop	r1
    5404:	18 95       	reti

00005406 <__vector_51>:
    5406:	1f 92       	push	r1
    5408:	0f 92       	push	r0
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	0f 92       	push	r0
    540e:	11 24       	eor	r1, r1
    5410:	0b b6       	in	r0, 0x3b	; 59
    5412:	0f 92       	push	r0
    5414:	2f 93       	push	r18
    5416:	3f 93       	push	r19
    5418:	4f 93       	push	r20
    541a:	5f 93       	push	r21
    541c:	6f 93       	push	r22
    541e:	7f 93       	push	r23
    5420:	8f 93       	push	r24
    5422:	9f 93       	push	r25
    5424:	af 93       	push	r26
    5426:	bf 93       	push	r27
    5428:	cf 93       	push	r28
    542a:	df 93       	push	r29
    542c:	ef 93       	push	r30
    542e:	ff 93       	push	r31
    5430:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <_ser_handle+0x4>
    5434:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <_ser_handle+0x5>
    5438:	10 97       	sbiw	r26, 0x00	; 0
    543a:	11 f1       	breq	.+68     	; 0x5480 <__vector_51+0x7a>
    543c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5440:	14 96       	adiw	r26, 0x04	; 4
    5442:	ed 91       	ld	r30, X+
    5444:	fc 91       	ld	r31, X
    5446:	15 97       	sbiw	r26, 0x05	; 5
    5448:	93 81       	ldd	r25, Z+3	; 0x03
    544a:	82 81       	ldd	r24, Z+2	; 0x02
    544c:	25 81       	ldd	r18, Z+5	; 0x05
    544e:	98 1b       	sub	r25, r24
    5450:	92 23       	and	r25, r18
    5452:	84 81       	ldd	r24, Z+4	; 0x04
    5454:	98 17       	cp	r25, r24
    5456:	61 f0       	breq	.+24     	; 0x5470 <__vector_51+0x6a>
    5458:	83 81       	ldd	r24, Z+3	; 0x03
    545a:	26 95       	lsr	r18
    545c:	28 23       	and	r18, r24
    545e:	c0 81       	ld	r28, Z
    5460:	d1 81       	ldd	r29, Z+1	; 0x01
    5462:	c2 0f       	add	r28, r18
    5464:	d1 1d       	adc	r29, r1
    5466:	68 83       	st	Y, r22
    5468:	8f 5f       	subi	r24, 0xFF	; 255
    546a:	95 81       	ldd	r25, Z+5	; 0x05
    546c:	89 23       	and	r24, r25
    546e:	83 83       	std	Z+3, r24	; 0x03
    5470:	16 96       	adiw	r26, 0x06	; 6
    5472:	ed 91       	ld	r30, X+
    5474:	fc 91       	ld	r31, X
    5476:	17 97       	sbiw	r26, 0x07	; 7
    5478:	30 97       	sbiw	r30, 0x00	; 0
    547a:	11 f0       	breq	.+4      	; 0x5480 <__vector_51+0x7a>
    547c:	cd 01       	movw	r24, r26
    547e:	19 95       	eicall
    5480:	ff 91       	pop	r31
    5482:	ef 91       	pop	r30
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	bf 91       	pop	r27
    548a:	af 91       	pop	r26
    548c:	9f 91       	pop	r25
    548e:	8f 91       	pop	r24
    5490:	7f 91       	pop	r23
    5492:	6f 91       	pop	r22
    5494:	5f 91       	pop	r21
    5496:	4f 91       	pop	r20
    5498:	3f 91       	pop	r19
    549a:	2f 91       	pop	r18
    549c:	0f 90       	pop	r0
    549e:	0b be       	out	0x3b, r0	; 59
    54a0:	0f 90       	pop	r0
    54a2:	0f be       	out	0x3f, r0	; 63
    54a4:	0f 90       	pop	r0
    54a6:	1f 90       	pop	r1
    54a8:	18 95       	reti

000054aa <__vector_52>:
    54aa:	1f 92       	push	r1
    54ac:	0f 92       	push	r0
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	0f 92       	push	r0
    54b2:	11 24       	eor	r1, r1
    54b4:	0b b6       	in	r0, 0x3b	; 59
    54b6:	0f 92       	push	r0
    54b8:	2f 93       	push	r18
    54ba:	8f 93       	push	r24
    54bc:	9f 93       	push	r25
    54be:	af 93       	push	r26
    54c0:	bf 93       	push	r27
    54c2:	ef 93       	push	r30
    54c4:	ff 93       	push	r31
    54c6:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <_ser_handle+0x4>
    54ca:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <_ser_handle+0x5>
    54ce:	30 97       	sbiw	r30, 0x00	; 0
    54d0:	b9 f0       	breq	.+46     	; 0x5500 <__vector_52+0x56>
    54d2:	02 80       	ldd	r0, Z+2	; 0x02
    54d4:	f3 81       	ldd	r31, Z+3	; 0x03
    54d6:	e0 2d       	mov	r30, r0
    54d8:	93 81       	ldd	r25, Z+3	; 0x03
    54da:	82 81       	ldd	r24, Z+2	; 0x02
    54dc:	98 17       	cp	r25, r24
    54de:	b1 f0       	breq	.+44     	; 0x550c <__vector_52+0x62>
    54e0:	92 81       	ldd	r25, Z+2	; 0x02
    54e2:	85 81       	ldd	r24, Z+5	; 0x05
    54e4:	28 2f       	mov	r18, r24
    54e6:	26 95       	lsr	r18
    54e8:	29 23       	and	r18, r25
    54ea:	a0 81       	ld	r26, Z
    54ec:	b1 81       	ldd	r27, Z+1	; 0x01
    54ee:	a2 0f       	add	r26, r18
    54f0:	b1 1d       	adc	r27, r1
    54f2:	2c 91       	ld	r18, X
    54f4:	9f 5f       	subi	r25, 0xFF	; 255
    54f6:	89 23       	and	r24, r25
    54f8:	82 83       	std	Z+2, r24	; 0x02
    54fa:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    54fe:	0b c0       	rjmp	.+22     	; 0x5516 <__vector_52+0x6c>
    5500:	e1 ed       	ldi	r30, 0xD1	; 209
    5502:	f0 e0       	ldi	r31, 0x00	; 0
    5504:	80 81       	ld	r24, Z
    5506:	8f 7d       	andi	r24, 0xDF	; 223
    5508:	80 83       	st	Z, r24
    550a:	05 c0       	rjmp	.+10     	; 0x5516 <__vector_52+0x6c>
    550c:	e1 ed       	ldi	r30, 0xD1	; 209
    550e:	f0 e0       	ldi	r31, 0x00	; 0
    5510:	80 81       	ld	r24, Z
    5512:	8f 7d       	andi	r24, 0xDF	; 223
    5514:	80 83       	st	Z, r24
    5516:	ff 91       	pop	r31
    5518:	ef 91       	pop	r30
    551a:	bf 91       	pop	r27
    551c:	af 91       	pop	r26
    551e:	9f 91       	pop	r25
    5520:	8f 91       	pop	r24
    5522:	2f 91       	pop	r18
    5524:	0f 90       	pop	r0
    5526:	0b be       	out	0x3b, r0	; 59
    5528:	0f 90       	pop	r0
    552a:	0f be       	out	0x3f, r0	; 63
    552c:	0f 90       	pop	r0
    552e:	1f 90       	pop	r1
    5530:	18 95       	reti

00005532 <__vector_54>:
    5532:	1f 92       	push	r1
    5534:	0f 92       	push	r0
    5536:	0f b6       	in	r0, 0x3f	; 63
    5538:	0f 92       	push	r0
    553a:	11 24       	eor	r1, r1
    553c:	0b b6       	in	r0, 0x3b	; 59
    553e:	0f 92       	push	r0
    5540:	2f 93       	push	r18
    5542:	3f 93       	push	r19
    5544:	4f 93       	push	r20
    5546:	5f 93       	push	r21
    5548:	6f 93       	push	r22
    554a:	7f 93       	push	r23
    554c:	8f 93       	push	r24
    554e:	9f 93       	push	r25
    5550:	af 93       	push	r26
    5552:	bf 93       	push	r27
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	ef 93       	push	r30
    555a:	ff 93       	push	r31
    555c:	a0 91 a1 18 	lds	r26, 0x18A1	; 0x8018a1 <_ser_handle+0x6>
    5560:	b0 91 a2 18 	lds	r27, 0x18A2	; 0x8018a2 <_ser_handle+0x7>
    5564:	10 97       	sbiw	r26, 0x00	; 0
    5566:	11 f1       	breq	.+68     	; 0x55ac <__vector_54+0x7a>
    5568:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    556c:	14 96       	adiw	r26, 0x04	; 4
    556e:	ed 91       	ld	r30, X+
    5570:	fc 91       	ld	r31, X
    5572:	15 97       	sbiw	r26, 0x05	; 5
    5574:	93 81       	ldd	r25, Z+3	; 0x03
    5576:	82 81       	ldd	r24, Z+2	; 0x02
    5578:	25 81       	ldd	r18, Z+5	; 0x05
    557a:	98 1b       	sub	r25, r24
    557c:	92 23       	and	r25, r18
    557e:	84 81       	ldd	r24, Z+4	; 0x04
    5580:	98 17       	cp	r25, r24
    5582:	61 f0       	breq	.+24     	; 0x559c <__vector_54+0x6a>
    5584:	83 81       	ldd	r24, Z+3	; 0x03
    5586:	26 95       	lsr	r18
    5588:	28 23       	and	r18, r24
    558a:	c0 81       	ld	r28, Z
    558c:	d1 81       	ldd	r29, Z+1	; 0x01
    558e:	c2 0f       	add	r28, r18
    5590:	d1 1d       	adc	r29, r1
    5592:	68 83       	st	Y, r22
    5594:	8f 5f       	subi	r24, 0xFF	; 255
    5596:	95 81       	ldd	r25, Z+5	; 0x05
    5598:	89 23       	and	r24, r25
    559a:	83 83       	std	Z+3, r24	; 0x03
    559c:	16 96       	adiw	r26, 0x06	; 6
    559e:	ed 91       	ld	r30, X+
    55a0:	fc 91       	ld	r31, X
    55a2:	17 97       	sbiw	r26, 0x07	; 7
    55a4:	30 97       	sbiw	r30, 0x00	; 0
    55a6:	11 f0       	breq	.+4      	; 0x55ac <__vector_54+0x7a>
    55a8:	cd 01       	movw	r24, r26
    55aa:	19 95       	eicall
    55ac:	ff 91       	pop	r31
    55ae:	ef 91       	pop	r30
    55b0:	df 91       	pop	r29
    55b2:	cf 91       	pop	r28
    55b4:	bf 91       	pop	r27
    55b6:	af 91       	pop	r26
    55b8:	9f 91       	pop	r25
    55ba:	8f 91       	pop	r24
    55bc:	7f 91       	pop	r23
    55be:	6f 91       	pop	r22
    55c0:	5f 91       	pop	r21
    55c2:	4f 91       	pop	r20
    55c4:	3f 91       	pop	r19
    55c6:	2f 91       	pop	r18
    55c8:	0f 90       	pop	r0
    55ca:	0b be       	out	0x3b, r0	; 59
    55cc:	0f 90       	pop	r0
    55ce:	0f be       	out	0x3f, r0	; 63
    55d0:	0f 90       	pop	r0
    55d2:	1f 90       	pop	r1
    55d4:	18 95       	reti

000055d6 <__vector_55>:
    55d6:	1f 92       	push	r1
    55d8:	0f 92       	push	r0
    55da:	0f b6       	in	r0, 0x3f	; 63
    55dc:	0f 92       	push	r0
    55de:	11 24       	eor	r1, r1
    55e0:	0b b6       	in	r0, 0x3b	; 59
    55e2:	0f 92       	push	r0
    55e4:	2f 93       	push	r18
    55e6:	8f 93       	push	r24
    55e8:	9f 93       	push	r25
    55ea:	af 93       	push	r26
    55ec:	bf 93       	push	r27
    55ee:	ef 93       	push	r30
    55f0:	ff 93       	push	r31
    55f2:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <_ser_handle+0x6>
    55f6:	f0 91 a2 18 	lds	r31, 0x18A2	; 0x8018a2 <_ser_handle+0x7>
    55fa:	30 97       	sbiw	r30, 0x00	; 0
    55fc:	b9 f0       	breq	.+46     	; 0x562c <__vector_55+0x56>
    55fe:	02 80       	ldd	r0, Z+2	; 0x02
    5600:	f3 81       	ldd	r31, Z+3	; 0x03
    5602:	e0 2d       	mov	r30, r0
    5604:	93 81       	ldd	r25, Z+3	; 0x03
    5606:	82 81       	ldd	r24, Z+2	; 0x02
    5608:	98 17       	cp	r25, r24
    560a:	b1 f0       	breq	.+44     	; 0x5638 <__vector_55+0x62>
    560c:	92 81       	ldd	r25, Z+2	; 0x02
    560e:	85 81       	ldd	r24, Z+5	; 0x05
    5610:	28 2f       	mov	r18, r24
    5612:	26 95       	lsr	r18
    5614:	29 23       	and	r18, r25
    5616:	a0 81       	ld	r26, Z
    5618:	b1 81       	ldd	r27, Z+1	; 0x01
    561a:	a2 0f       	add	r26, r18
    561c:	b1 1d       	adc	r27, r1
    561e:	2c 91       	ld	r18, X
    5620:	9f 5f       	subi	r25, 0xFF	; 255
    5622:	89 23       	and	r24, r25
    5624:	82 83       	std	Z+2, r24	; 0x02
    5626:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    562a:	0b c0       	rjmp	.+22     	; 0x5642 <__vector_55+0x6c>
    562c:	e1 e3       	ldi	r30, 0x31	; 49
    562e:	f1 e0       	ldi	r31, 0x01	; 1
    5630:	80 81       	ld	r24, Z
    5632:	8f 7d       	andi	r24, 0xDF	; 223
    5634:	80 83       	st	Z, r24
    5636:	05 c0       	rjmp	.+10     	; 0x5642 <__vector_55+0x6c>
    5638:	e1 e3       	ldi	r30, 0x31	; 49
    563a:	f1 e0       	ldi	r31, 0x01	; 1
    563c:	80 81       	ld	r24, Z
    563e:	8f 7d       	andi	r24, 0xDF	; 223
    5640:	80 83       	st	Z, r24
    5642:	ff 91       	pop	r31
    5644:	ef 91       	pop	r30
    5646:	bf 91       	pop	r27
    5648:	af 91       	pop	r26
    564a:	9f 91       	pop	r25
    564c:	8f 91       	pop	r24
    564e:	2f 91       	pop	r18
    5650:	0f 90       	pop	r0
    5652:	0b be       	out	0x3b, r0	; 59
    5654:	0f 90       	pop	r0
    5656:	0f be       	out	0x3f, r0	; 63
    5658:	0f 90       	pop	r0
    565a:	1f 90       	pop	r1
    565c:	18 95       	reti

0000565e <usart_getchar>:
    565e:	cf 93       	push	r28
    5660:	df 93       	push	r29
    5662:	1f 92       	push	r1
    5664:	cd b7       	in	r28, 0x3d	; 61
    5666:	de b7       	in	r29, 0x3e	; 62
    5668:	be 01       	movw	r22, r28
    566a:	6f 5f       	subi	r22, 0xFF	; 255
    566c:	7f 4f       	sbci	r23, 0xFF	; 255
    566e:	80 91 a3 18 	lds	r24, 0x18A3	; 0x8018a3 <_com_serial_instance>
    5672:	90 91 a4 18 	lds	r25, 0x18A4	; 0x8018a4 <_com_serial_instance+0x1>
    5676:	7b dd       	rcall	.-1290   	; 0x516e <serial_getByte>
    5678:	81 11       	cpse	r24, r1
    567a:	f6 cf       	rjmp	.-20     	; 0x5668 <usart_getchar+0xa>
    567c:	89 81       	ldd	r24, Y+1	; 0x01
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	0f 90       	pop	r0
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	08 95       	ret

00005688 <usart_putchar>:
    5688:	68 2f       	mov	r22, r24
    568a:	80 91 a3 18 	lds	r24, 0x18A3	; 0x8018a3 <_com_serial_instance>
    568e:	90 91 a4 18 	lds	r25, 0x18A4	; 0x8018a4 <_com_serial_instance+0x1>
    5692:	ed dc       	rcall	.-1574   	; 0x506e <serial_sendByte>
    5694:	80 e0       	ldi	r24, 0x00	; 0
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	08 95       	ret

0000569a <stdio_initialise>:
    569a:	8f 92       	push	r8
    569c:	9f 92       	push	r9
    569e:	af 92       	push	r10
    56a0:	cf 92       	push	r12
    56a2:	ef 92       	push	r14
    56a4:	0f 93       	push	r16
    56a6:	81 2c       	mov	r8, r1
    56a8:	91 2c       	mov	r9, r1
    56aa:	68 94       	set
    56ac:	aa 24       	eor	r10, r10
    56ae:	a7 f8       	bld	r10, 7
    56b0:	68 94       	set
    56b2:	cc 24       	eor	r12, r12
    56b4:	c7 f8       	bld	r12, 7
    56b6:	e1 2c       	mov	r14, r1
    56b8:	00 e0       	ldi	r16, 0x00	; 0
    56ba:	23 e0       	ldi	r18, 0x03	; 3
    56bc:	40 e0       	ldi	r20, 0x00	; 0
    56be:	51 ee       	ldi	r21, 0xE1	; 225
    56c0:	60 e0       	ldi	r22, 0x00	; 0
    56c2:	70 e0       	ldi	r23, 0x00	; 0
    56c4:	32 dc       	rcall	.-1948   	; 0x4f2a <serial_create>
    56c6:	90 93 a4 18 	sts	0x18A4, r25	; 0x8018a4 <_com_serial_instance+0x1>
    56ca:	80 93 a3 18 	sts	0x18A3, r24	; 0x8018a3 <_com_serial_instance>
    56ce:	e5 e1       	ldi	r30, 0x15	; 21
    56d0:	f9 e1       	ldi	r31, 0x19	; 25
    56d2:	83 e1       	ldi	r24, 0x13	; 19
    56d4:	92 e0       	ldi	r25, 0x02	; 2
    56d6:	91 83       	std	Z+1, r25	; 0x01
    56d8:	80 83       	st	Z, r24
    56da:	93 83       	std	Z+3, r25	; 0x03
    56dc:	82 83       	std	Z+2, r24	; 0x02
    56de:	0f 91       	pop	r16
    56e0:	ef 90       	pop	r14
    56e2:	cf 90       	pop	r12
    56e4:	af 90       	pop	r10
    56e6:	9f 90       	pop	r9
    56e8:	8f 90       	pop	r8
    56ea:	08 95       	ret

000056ec <_turn_off>:
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	fc 01       	movw	r30, r24
    56f0:	ee 0f       	add	r30, r30
    56f2:	ff 1f       	adc	r31, r31
    56f4:	e8 0f       	add	r30, r24
    56f6:	f9 1f       	adc	r31, r25
    56f8:	ee 0f       	add	r30, r30
    56fa:	ff 1f       	adc	r31, r31
    56fc:	eb 55       	subi	r30, 0x5B	; 91
    56fe:	f7 4e       	sbci	r31, 0xE7	; 231
    5700:	23 81       	ldd	r18, Z+3	; 0x03
    5702:	21 11       	cpse	r18, r1
    5704:	1f c0       	rjmp	.+62     	; 0x5744 <_turn_off+0x58>
    5706:	9c 01       	movw	r18, r24
    5708:	22 0f       	add	r18, r18
    570a:	33 1f       	adc	r19, r19
    570c:	f9 01       	movw	r30, r18
    570e:	e8 0f       	add	r30, r24
    5710:	f9 1f       	adc	r31, r25
    5712:	ee 0f       	add	r30, r30
    5714:	ff 1f       	adc	r31, r31
    5716:	eb 55       	subi	r30, 0x5B	; 91
    5718:	f7 4e       	sbci	r31, 0xE7	; 231
    571a:	a0 81       	ld	r26, Z
    571c:	b1 81       	ldd	r27, Z+1	; 0x01
    571e:	4c 91       	ld	r20, X
    5720:	f9 01       	movw	r30, r18
    5722:	e8 0f       	add	r30, r24
    5724:	f9 1f       	adc	r31, r25
    5726:	ee 0f       	add	r30, r30
    5728:	ff 1f       	adc	r31, r31
    572a:	eb 55       	subi	r30, 0x5B	; 91
    572c:	f7 4e       	sbci	r31, 0xE7	; 231
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	02 80       	ldd	r0, Z+2	; 0x02
    5734:	02 c0       	rjmp	.+4      	; 0x573a <_turn_off+0x4e>
    5736:	88 0f       	add	r24, r24
    5738:	99 1f       	adc	r25, r25
    573a:	0a 94       	dec	r0
    573c:	e2 f7       	brpl	.-8      	; 0x5736 <_turn_off+0x4a>
    573e:	84 2b       	or	r24, r20
    5740:	8c 93       	st	X, r24
    5742:	08 95       	ret
    5744:	fc 01       	movw	r30, r24
    5746:	ee 0f       	add	r30, r30
    5748:	ff 1f       	adc	r31, r31
    574a:	df 01       	movw	r26, r30
    574c:	a8 0f       	add	r26, r24
    574e:	b9 1f       	adc	r27, r25
    5750:	aa 0f       	add	r26, r26
    5752:	bb 1f       	adc	r27, r27
    5754:	ab 55       	subi	r26, 0x5B	; 91
    5756:	b7 4e       	sbci	r27, 0xE7	; 231
    5758:	0d 90       	ld	r0, X+
    575a:	bc 91       	ld	r27, X
    575c:	a0 2d       	mov	r26, r0
    575e:	2c 91       	ld	r18, X
    5760:	e8 0f       	add	r30, r24
    5762:	f9 1f       	adc	r31, r25
    5764:	ee 0f       	add	r30, r30
    5766:	ff 1f       	adc	r31, r31
    5768:	eb 55       	subi	r30, 0x5B	; 91
    576a:	f7 4e       	sbci	r31, 0xE7	; 231
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	02 80       	ldd	r0, Z+2	; 0x02
    5772:	02 c0       	rjmp	.+4      	; 0x5778 <_turn_off+0x8c>
    5774:	88 0f       	add	r24, r24
    5776:	99 1f       	adc	r25, r25
    5778:	0a 94       	dec	r0
    577a:	e2 f7       	brpl	.-8      	; 0x5774 <_turn_off+0x88>
    577c:	80 95       	com	r24
    577e:	82 23       	and	r24, r18
    5780:	8c 93       	st	X, r24
    5782:	08 95       	ret

00005784 <_turn_on>:
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	fc 01       	movw	r30, r24
    5788:	ee 0f       	add	r30, r30
    578a:	ff 1f       	adc	r31, r31
    578c:	e8 0f       	add	r30, r24
    578e:	f9 1f       	adc	r31, r25
    5790:	ee 0f       	add	r30, r30
    5792:	ff 1f       	adc	r31, r31
    5794:	eb 55       	subi	r30, 0x5B	; 91
    5796:	f7 4e       	sbci	r31, 0xE7	; 231
    5798:	23 81       	ldd	r18, Z+3	; 0x03
    579a:	21 11       	cpse	r18, r1
    579c:	20 c0       	rjmp	.+64     	; 0x57de <_turn_on+0x5a>
    579e:	9c 01       	movw	r18, r24
    57a0:	22 0f       	add	r18, r18
    57a2:	33 1f       	adc	r19, r19
    57a4:	f9 01       	movw	r30, r18
    57a6:	e8 0f       	add	r30, r24
    57a8:	f9 1f       	adc	r31, r25
    57aa:	ee 0f       	add	r30, r30
    57ac:	ff 1f       	adc	r31, r31
    57ae:	eb 55       	subi	r30, 0x5B	; 91
    57b0:	f7 4e       	sbci	r31, 0xE7	; 231
    57b2:	a0 81       	ld	r26, Z
    57b4:	b1 81       	ldd	r27, Z+1	; 0x01
    57b6:	4c 91       	ld	r20, X
    57b8:	f9 01       	movw	r30, r18
    57ba:	e8 0f       	add	r30, r24
    57bc:	f9 1f       	adc	r31, r25
    57be:	ee 0f       	add	r30, r30
    57c0:	ff 1f       	adc	r31, r31
    57c2:	eb 55       	subi	r30, 0x5B	; 91
    57c4:	f7 4e       	sbci	r31, 0xE7	; 231
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	02 80       	ldd	r0, Z+2	; 0x02
    57cc:	02 c0       	rjmp	.+4      	; 0x57d2 <_turn_on+0x4e>
    57ce:	88 0f       	add	r24, r24
    57d0:	99 1f       	adc	r25, r25
    57d2:	0a 94       	dec	r0
    57d4:	e2 f7       	brpl	.-8      	; 0x57ce <_turn_on+0x4a>
    57d6:	80 95       	com	r24
    57d8:	84 23       	and	r24, r20
    57da:	8c 93       	st	X, r24
    57dc:	08 95       	ret
    57de:	fc 01       	movw	r30, r24
    57e0:	ee 0f       	add	r30, r30
    57e2:	ff 1f       	adc	r31, r31
    57e4:	df 01       	movw	r26, r30
    57e6:	a8 0f       	add	r26, r24
    57e8:	b9 1f       	adc	r27, r25
    57ea:	aa 0f       	add	r26, r26
    57ec:	bb 1f       	adc	r27, r27
    57ee:	ab 55       	subi	r26, 0x5B	; 91
    57f0:	b7 4e       	sbci	r27, 0xE7	; 231
    57f2:	0d 90       	ld	r0, X+
    57f4:	bc 91       	ld	r27, X
    57f6:	a0 2d       	mov	r26, r0
    57f8:	2c 91       	ld	r18, X
    57fa:	e8 0f       	add	r30, r24
    57fc:	f9 1f       	adc	r31, r25
    57fe:	ee 0f       	add	r30, r30
    5800:	ff 1f       	adc	r31, r31
    5802:	eb 55       	subi	r30, 0x5B	; 91
    5804:	f7 4e       	sbci	r31, 0xE7	; 231
    5806:	81 e0       	ldi	r24, 0x01	; 1
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	02 80       	ldd	r0, Z+2	; 0x02
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <_turn_on+0x8e>
    580e:	88 0f       	add	r24, r24
    5810:	99 1f       	adc	r25, r25
    5812:	0a 94       	dec	r0
    5814:	e2 f7       	brpl	.-8      	; 0x580e <_turn_on+0x8a>
    5816:	82 2b       	or	r24, r18
    5818:	8c 93       	st	X, r24
    581a:	08 95       	ret

0000581c <_hal_led_task>:
    581c:	cc 24       	eor	r12, r12
    581e:	c3 94       	inc	r12
    5820:	d1 2c       	mov	r13, r1
    5822:	68 94       	set
    5824:	bb 24       	eor	r11, r11
    5826:	b2 f8       	bld	r11, 2
    5828:	c5 ea       	ldi	r28, 0xA5	; 165
    582a:	d8 e1       	ldi	r29, 0x18	; 24
    582c:	10 e0       	ldi	r17, 0x00	; 0
    582e:	8c 81       	ldd	r24, Y+4	; 0x04
    5830:	81 30       	cpi	r24, 0x01	; 1
    5832:	81 f0       	breq	.+32     	; 0x5854 <_hal_led_task+0x38>
    5834:	18 f1       	brcs	.+70     	; 0x587c <_hal_led_task+0x60>
    5836:	82 30       	cpi	r24, 0x02	; 2
    5838:	61 f5       	brne	.+88     	; 0x5892 <_hal_led_task+0x76>
    583a:	e8 81       	ld	r30, Y
    583c:	f9 81       	ldd	r31, Y+1	; 0x01
    583e:	20 81       	ld	r18, Z
    5840:	c6 01       	movw	r24, r12
    5842:	0a 80       	ldd	r0, Y+2	; 0x02
    5844:	02 c0       	rjmp	.+4      	; 0x584a <_hal_led_task+0x2e>
    5846:	88 0f       	add	r24, r24
    5848:	99 1f       	adc	r25, r25
    584a:	0a 94       	dec	r0
    584c:	e2 f7       	brpl	.-8      	; 0x5846 <_hal_led_task+0x2a>
    584e:	82 27       	eor	r24, r18
    5850:	80 83       	st	Z, r24
    5852:	1f c0       	rjmp	.+62     	; 0x5892 <_hal_led_task+0x76>
    5854:	8d 81       	ldd	r24, Y+5	; 0x05
    5856:	8f 5f       	subi	r24, 0xFF	; 255
    5858:	86 30       	cpi	r24, 0x06	; 6
    585a:	10 f4       	brcc	.+4      	; 0x5860 <_hal_led_task+0x44>
    585c:	8d 83       	std	Y+5, r24	; 0x05
    585e:	19 c0       	rjmp	.+50     	; 0x5892 <_hal_led_task+0x76>
    5860:	1d 82       	std	Y+5, r1	; 0x05
    5862:	e8 81       	ld	r30, Y
    5864:	f9 81       	ldd	r31, Y+1	; 0x01
    5866:	20 81       	ld	r18, Z
    5868:	c6 01       	movw	r24, r12
    586a:	0a 80       	ldd	r0, Y+2	; 0x02
    586c:	02 c0       	rjmp	.+4      	; 0x5872 <_hal_led_task+0x56>
    586e:	88 0f       	add	r24, r24
    5870:	99 1f       	adc	r25, r25
    5872:	0a 94       	dec	r0
    5874:	e2 f7       	brpl	.-8      	; 0x586e <_hal_led_task+0x52>
    5876:	82 27       	eor	r24, r18
    5878:	80 83       	st	Z, r24
    587a:	0b c0       	rjmp	.+22     	; 0x5892 <_hal_led_task+0x76>
    587c:	0d 81       	ldd	r16, Y+5	; 0x05
    587e:	00 23       	and	r16, r16
    5880:	29 f0       	breq	.+10     	; 0x588c <_hal_led_task+0x70>
    5882:	81 2f       	mov	r24, r17
    5884:	7f df       	rcall	.-258    	; 0x5784 <_turn_on>
    5886:	01 50       	subi	r16, 0x01	; 1
    5888:	0d 83       	std	Y+5, r16	; 0x05
    588a:	03 c0       	rjmp	.+6      	; 0x5892 <_hal_led_task+0x76>
    588c:	bc 82       	std	Y+4, r11	; 0x04
    588e:	81 2f       	mov	r24, r17
    5890:	2d df       	rcall	.-422    	; 0x56ec <_turn_off>
    5892:	1f 5f       	subi	r17, 0xFF	; 255
    5894:	26 96       	adiw	r28, 0x06	; 6
    5896:	14 30       	cpi	r17, 0x04	; 4
    5898:	51 f6       	brne	.-108    	; 0x582e <_hal_led_task+0x12>
    589a:	6c e0       	ldi	r22, 0x0C	; 12
    589c:	70 e0       	ldi	r23, 0x00	; 0
    589e:	80 e0       	ldi	r24, 0x00	; 0
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskDelay>
    58a6:	c0 cf       	rjmp	.-128    	; 0x5828 <_hal_led_task+0xc>

000058a8 <status_leds_initialise>:
    58a8:	ef 92       	push	r14
    58aa:	ff 92       	push	r15
    58ac:	0f 93       	push	r16
    58ae:	1f 93       	push	r17
    58b0:	cf 93       	push	r28
    58b2:	df 93       	push	r29
    58b4:	08 2f       	mov	r16, r24
    58b6:	80 e4       	ldi	r24, 0x40	; 64
    58b8:	87 b9       	out	0x07, r24	; 7
    58ba:	c5 ea       	ldi	r28, 0xA5	; 165
    58bc:	d8 e1       	ldi	r29, 0x18	; 24
    58be:	0f 2e       	mov	r0, r31
    58c0:	f8 e2       	ldi	r31, 0x28	; 40
    58c2:	ef 2e       	mov	r14, r31
    58c4:	f1 2c       	mov	r15, r1
    58c6:	f0 2d       	mov	r31, r0
    58c8:	f9 82       	std	Y+1, r15	; 0x01
    58ca:	e8 82       	st	Y, r14
    58cc:	86 e0       	ldi	r24, 0x06	; 6
    58ce:	8a 83       	std	Y+2, r24	; 0x02
    58d0:	1b 82       	std	Y+3, r1	; 0x03
    58d2:	14 e0       	ldi	r17, 0x04	; 4
    58d4:	1c 83       	std	Y+4, r17	; 0x04
    58d6:	80 e0       	ldi	r24, 0x00	; 0
    58d8:	09 df       	rcall	.-494    	; 0x56ec <_turn_off>
    58da:	80 e8       	ldi	r24, 0x80	; 128
    58dc:	87 b9       	out	0x07, r24	; 7
    58de:	ff 82       	std	Y+7, r15	; 0x07
    58e0:	ee 82       	std	Y+6, r14	; 0x06
    58e2:	87 e0       	ldi	r24, 0x07	; 7
    58e4:	88 87       	std	Y+8, r24	; 0x08
    58e6:	19 86       	std	Y+9, r1	; 0x09
    58e8:	1a 87       	std	Y+10, r17	; 0x0a
    58ea:	81 e0       	ldi	r24, 0x01	; 1
    58ec:	ff de       	rcall	.-514    	; 0x56ec <_turn_off>
    58ee:	80 e2       	ldi	r24, 0x20	; 32
    58f0:	83 bb       	out	0x13, r24	; 19
    58f2:	84 e3       	ldi	r24, 0x34	; 52
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	9d 87       	std	Y+13, r25	; 0x0d
    58f8:	8c 87       	std	Y+12, r24	; 0x0c
    58fa:	85 e0       	ldi	r24, 0x05	; 5
    58fc:	8e 87       	std	Y+14, r24	; 0x0e
    58fe:	1f 86       	std	Y+15, r1	; 0x0f
    5900:	18 8b       	std	Y+16, r17	; 0x10
    5902:	82 e0       	ldi	r24, 0x02	; 2
    5904:	f3 de       	rcall	.-538    	; 0x56ec <_turn_off>
    5906:	80 e1       	ldi	r24, 0x10	; 16
    5908:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    590c:	82 e0       	ldi	r24, 0x02	; 2
    590e:	91 e0       	ldi	r25, 0x01	; 1
    5910:	9b 8b       	std	Y+19, r25	; 0x13
    5912:	8a 8b       	std	Y+18, r24	; 0x12
    5914:	1c 8b       	std	Y+20, r17	; 0x14
    5916:	1d 8a       	std	Y+21, r1	; 0x15
    5918:	1e 8b       	std	Y+22, r17	; 0x16
    591a:	83 e0       	ldi	r24, 0x03	; 3
    591c:	e7 de       	rcall	.-562    	; 0x56ec <_turn_off>
    591e:	e1 2c       	mov	r14, r1
    5920:	f1 2c       	mov	r15, r1
    5922:	20 e0       	ldi	r18, 0x00	; 0
    5924:	30 e0       	ldi	r19, 0x00	; 0
    5926:	40 ec       	ldi	r20, 0xC0	; 192
    5928:	50 e0       	ldi	r21, 0x00	; 0
    592a:	6c ea       	ldi	r22, 0xAC	; 172
    592c:	78 e0       	ldi	r23, 0x08	; 8
    592e:	8e e0       	ldi	r24, 0x0E	; 14
    5930:	9c e2       	ldi	r25, 0x2C	; 44
    5932:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCreate>
    5936:	df 91       	pop	r29
    5938:	cf 91       	pop	r28
    593a:	1f 91       	pop	r17
    593c:	0f 91       	pop	r16
    593e:	ff 90       	pop	r15
    5940:	ef 90       	pop	r14
    5942:	08 95       	ret

00005944 <status_leds_slowBlink>:
    5944:	cf 93       	push	r28
    5946:	df 93       	push	r29
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	fc 01       	movw	r30, r24
    594c:	ee 0f       	add	r30, r30
    594e:	ff 1f       	adc	r31, r31
    5950:	df 01       	movw	r26, r30
    5952:	a8 0f       	add	r26, r24
    5954:	b9 1f       	adc	r27, r25
    5956:	aa 0f       	add	r26, r26
    5958:	bb 1f       	adc	r27, r27
    595a:	ab 55       	subi	r26, 0x5B	; 91
    595c:	b7 4e       	sbci	r27, 0xE7	; 231
    595e:	cd 91       	ld	r28, X+
    5960:	dc 91       	ld	r29, X
    5962:	11 97       	sbiw	r26, 0x01	; 1
    5964:	48 81       	ld	r20, Y
    5966:	21 e0       	ldi	r18, 0x01	; 1
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	12 96       	adiw	r26, 0x02	; 2
    596c:	0c 90       	ld	r0, X
    596e:	12 97       	sbiw	r26, 0x02	; 2
    5970:	02 c0       	rjmp	.+4      	; 0x5976 <status_leds_slowBlink+0x32>
    5972:	22 0f       	add	r18, r18
    5974:	33 1f       	adc	r19, r19
    5976:	0a 94       	dec	r0
    5978:	e2 f7       	brpl	.-8      	; 0x5972 <status_leds_slowBlink+0x2e>
    597a:	24 27       	eor	r18, r20
    597c:	28 83       	st	Y, r18
    597e:	fd 01       	movw	r30, r26
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	84 83       	std	Z+4, r24	; 0x04
    5984:	df 91       	pop	r29
    5986:	cf 91       	pop	r28
    5988:	08 95       	ret

0000598a <status_leds_fastBlink>:
    598a:	cf 93       	push	r28
    598c:	df 93       	push	r29
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	fc 01       	movw	r30, r24
    5992:	ee 0f       	add	r30, r30
    5994:	ff 1f       	adc	r31, r31
    5996:	df 01       	movw	r26, r30
    5998:	a8 0f       	add	r26, r24
    599a:	b9 1f       	adc	r27, r25
    599c:	aa 0f       	add	r26, r26
    599e:	bb 1f       	adc	r27, r27
    59a0:	ab 55       	subi	r26, 0x5B	; 91
    59a2:	b7 4e       	sbci	r27, 0xE7	; 231
    59a4:	cd 91       	ld	r28, X+
    59a6:	dc 91       	ld	r29, X
    59a8:	11 97       	sbiw	r26, 0x01	; 1
    59aa:	48 81       	ld	r20, Y
    59ac:	21 e0       	ldi	r18, 0x01	; 1
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	12 96       	adiw	r26, 0x02	; 2
    59b2:	0c 90       	ld	r0, X
    59b4:	12 97       	sbiw	r26, 0x02	; 2
    59b6:	02 c0       	rjmp	.+4      	; 0x59bc <status_leds_fastBlink+0x32>
    59b8:	22 0f       	add	r18, r18
    59ba:	33 1f       	adc	r19, r19
    59bc:	0a 94       	dec	r0
    59be:	e2 f7       	brpl	.-8      	; 0x59b8 <status_leds_fastBlink+0x2e>
    59c0:	24 27       	eor	r18, r20
    59c2:	28 83       	st	Y, r18
    59c4:	fd 01       	movw	r30, r26
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	84 83       	std	Z+4, r24	; 0x04
    59ca:	df 91       	pop	r29
    59cc:	cf 91       	pop	r28
    59ce:	08 95       	ret

000059d0 <status_leds_ledOn>:
    59d0:	28 2f       	mov	r18, r24
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	f9 01       	movw	r30, r18
    59d6:	ee 0f       	add	r30, r30
    59d8:	ff 1f       	adc	r31, r31
    59da:	e2 0f       	add	r30, r18
    59dc:	f3 1f       	adc	r31, r19
    59de:	ee 0f       	add	r30, r30
    59e0:	ff 1f       	adc	r31, r31
    59e2:	eb 55       	subi	r30, 0x5B	; 91
    59e4:	f7 4e       	sbci	r31, 0xE7	; 231
    59e6:	93 e0       	ldi	r25, 0x03	; 3
    59e8:	94 83       	std	Z+4, r25	; 0x04
    59ea:	cc ce       	rjmp	.-616    	; 0x5784 <_turn_on>
    59ec:	08 95       	ret

000059ee <status_leds_ledOff>:
    59ee:	28 2f       	mov	r18, r24
    59f0:	30 e0       	ldi	r19, 0x00	; 0
    59f2:	f9 01       	movw	r30, r18
    59f4:	ee 0f       	add	r30, r30
    59f6:	ff 1f       	adc	r31, r31
    59f8:	e2 0f       	add	r30, r18
    59fa:	f3 1f       	adc	r31, r19
    59fc:	ee 0f       	add	r30, r30
    59fe:	ff 1f       	adc	r31, r31
    5a00:	eb 55       	subi	r30, 0x5B	; 91
    5a02:	f7 4e       	sbci	r31, 0xE7	; 231
    5a04:	94 e0       	ldi	r25, 0x04	; 4
    5a06:	94 83       	std	Z+4, r25	; 0x04
    5a08:	71 ce       	rjmp	.-798    	; 0x56ec <_turn_off>
    5a0a:	08 95       	ret

00005a0c <status_leds_longPuls>:
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	fc 01       	movw	r30, r24
    5a10:	ee 0f       	add	r30, r30
    5a12:	ff 1f       	adc	r31, r31
    5a14:	df 01       	movw	r26, r30
    5a16:	a8 0f       	add	r26, r24
    5a18:	b9 1f       	adc	r27, r25
    5a1a:	aa 0f       	add	r26, r26
    5a1c:	bb 1f       	adc	r27, r27
    5a1e:	ab 55       	subi	r26, 0x5B	; 91
    5a20:	b7 4e       	sbci	r27, 0xE7	; 231
    5a22:	26 e0       	ldi	r18, 0x06	; 6
    5a24:	15 96       	adiw	r26, 0x05	; 5
    5a26:	2c 93       	st	X, r18
    5a28:	15 97       	sbiw	r26, 0x05	; 5
    5a2a:	fd 01       	movw	r30, r26
    5a2c:	14 82       	std	Z+4, r1	; 0x04
    5a2e:	08 95       	ret

00005a30 <status_leds_shortPuls>:
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	fc 01       	movw	r30, r24
    5a34:	ee 0f       	add	r30, r30
    5a36:	ff 1f       	adc	r31, r31
    5a38:	df 01       	movw	r26, r30
    5a3a:	a8 0f       	add	r26, r24
    5a3c:	b9 1f       	adc	r27, r25
    5a3e:	aa 0f       	add	r26, r26
    5a40:	bb 1f       	adc	r27, r27
    5a42:	ab 55       	subi	r26, 0x5B	; 91
    5a44:	b7 4e       	sbci	r27, 0xE7	; 231
    5a46:	15 96       	adiw	r26, 0x05	; 5
    5a48:	1c 92       	st	X, r1
    5a4a:	15 97       	sbiw	r26, 0x05	; 5
    5a4c:	fd 01       	movw	r30, r26
    5a4e:	14 82       	std	Z+4, r1	; 0x04
    5a50:	08 95       	ret

00005a52 <_initTwiInterface>:
    5a52:	80 91 cb 18 	lds	r24, 0x18CB	; 0x8018cb <_twiIsInitiated>
    5a56:	81 11       	cpse	r24, r1
    5a58:	0c c0       	rjmp	.+24     	; 0x5a72 <_initTwiInterface+0x20>
    5a5a:	8c e0       	ldi	r24, 0x0C	; 12
    5a5c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a60:	8f ef       	ldi	r24, 0xFF	; 255
    5a62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a66:	84 e0       	ldi	r24, 0x04	; 4
    5a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a6c:	81 e0       	ldi	r24, 0x01	; 1
    5a6e:	80 93 cb 18 	sts	0x18CB, r24	; 0x8018cb <_twiIsInitiated>
    5a72:	08 95       	ret

00005a74 <twiCreate>:
    5a74:	af 92       	push	r10
    5a76:	bf 92       	push	r11
    5a78:	cf 92       	push	r12
    5a7a:	df 92       	push	r13
    5a7c:	ef 92       	push	r14
    5a7e:	ff 92       	push	r15
    5a80:	0f 93       	push	r16
    5a82:	1f 93       	push	r17
    5a84:	cf 93       	push	r28
    5a86:	df 93       	push	r29
    5a88:	a8 2e       	mov	r10, r24
    5a8a:	b6 2e       	mov	r11, r22
    5a8c:	69 01       	movw	r12, r18
    5a8e:	7a 01       	movw	r14, r20
    5a90:	84 e0       	ldi	r24, 0x04	; 4
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	5f d3       	rcall	.+1726   	; 0x6154 <malloc>
    5a96:	ec 01       	movw	r28, r24
    5a98:	89 2b       	or	r24, r25
    5a9a:	61 f1       	breq	.+88     	; 0x5af4 <twiCreate+0x80>
    5a9c:	a8 82       	st	Y, r10
    5a9e:	81 e0       	ldi	r24, 0x01	; 1
    5aa0:	b8 12       	cpse	r11, r24
    5aa2:	12 c0       	rjmp	.+36     	; 0x5ac8 <twiCreate+0x54>
    5aa4:	c7 01       	movw	r24, r14
    5aa6:	b6 01       	movw	r22, r12
    5aa8:	20 ea       	ldi	r18, 0xA0	; 160
    5aaa:	36 e8       	ldi	r19, 0x86	; 134
    5aac:	41 e0       	ldi	r20, 0x01	; 1
    5aae:	50 e0       	ldi	r21, 0x00	; 0
    5ab0:	27 d3       	rcall	.+1614   	; 0x6100 <__udivmodsi4>
    5ab2:	da 01       	movw	r26, r20
    5ab4:	c9 01       	movw	r24, r18
    5ab6:	40 97       	sbiw	r24, 0x10	; 16
    5ab8:	a1 09       	sbc	r26, r1
    5aba:	b1 09       	sbc	r27, r1
    5abc:	b6 95       	lsr	r27
    5abe:	a7 95       	ror	r26
    5ac0:	97 95       	ror	r25
    5ac2:	87 95       	ror	r24
    5ac4:	89 83       	std	Y+1, r24	; 0x01
    5ac6:	11 c0       	rjmp	.+34     	; 0x5aea <twiCreate+0x76>
    5ac8:	c7 01       	movw	r24, r14
    5aca:	b6 01       	movw	r22, r12
    5acc:	20 e8       	ldi	r18, 0x80	; 128
    5ace:	3a e1       	ldi	r19, 0x1A	; 26
    5ad0:	46 e0       	ldi	r20, 0x06	; 6
    5ad2:	50 e0       	ldi	r21, 0x00	; 0
    5ad4:	15 d3       	rcall	.+1578   	; 0x6100 <__udivmodsi4>
    5ad6:	da 01       	movw	r26, r20
    5ad8:	c9 01       	movw	r24, r18
    5ada:	40 97       	sbiw	r24, 0x10	; 16
    5adc:	a1 09       	sbc	r26, r1
    5ade:	b1 09       	sbc	r27, r1
    5ae0:	b6 95       	lsr	r27
    5ae2:	a7 95       	ror	r26
    5ae4:	97 95       	ror	r25
    5ae6:	87 95       	ror	r24
    5ae8:	89 83       	std	Y+1, r24	; 0x01
    5aea:	1b 83       	std	Y+3, r17	; 0x03
    5aec:	0a 83       	std	Y+2, r16	; 0x02
    5aee:	8c 2f       	mov	r24, r28
    5af0:	9d 2f       	mov	r25, r29
    5af2:	02 c0       	rjmp	.+4      	; 0x5af8 <twiCreate+0x84>
    5af4:	80 e0       	ldi	r24, 0x00	; 0
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	df 91       	pop	r29
    5afa:	cf 91       	pop	r28
    5afc:	1f 91       	pop	r17
    5afe:	0f 91       	pop	r16
    5b00:	ff 90       	pop	r15
    5b02:	ef 90       	pop	r14
    5b04:	df 90       	pop	r13
    5b06:	cf 90       	pop	r12
    5b08:	bf 90       	pop	r11
    5b0a:	af 90       	pop	r10
    5b0c:	08 95       	ret

00005b0e <twiIsBusy>:
    5b0e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b12:	81 70       	andi	r24, 0x01	; 1
    5b14:	08 95       	ret

00005b16 <twiTransmit>:
    5b16:	ff 92       	push	r15
    5b18:	0f 93       	push	r16
    5b1a:	1f 93       	push	r17
    5b1c:	cf 93       	push	r28
    5b1e:	df 93       	push	r29
    5b20:	00 97       	sbiw	r24, 0x00	; 0
    5b22:	d1 f1       	breq	.+116    	; 0x5b98 <twiTransmit+0x82>
    5b24:	4a 30       	cpi	r20, 0x0A	; 10
    5b26:	d0 f5       	brcc	.+116    	; 0x5b9c <twiTransmit+0x86>
    5b28:	f4 2e       	mov	r15, r20
    5b2a:	8b 01       	movw	r16, r22
    5b2c:	ec 01       	movw	r28, r24
    5b2e:	ef df       	rcall	.-34     	; 0x5b0e <twiIsBusy>
    5b30:	81 11       	cpse	r24, r1
    5b32:	36 c0       	rjmp	.+108    	; 0x5ba0 <twiTransmit+0x8a>
    5b34:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_twiCurrentHandler>
    5b38:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_twiCurrentHandler+0x1>
    5b3c:	c8 17       	cp	r28, r24
    5b3e:	d9 07       	cpc	r29, r25
    5b40:	41 f0       	breq	.+16     	; 0x5b52 <twiTransmit+0x3c>
    5b42:	87 df       	rcall	.-242    	; 0x5a52 <_initTwiInterface>
    5b44:	89 81       	ldd	r24, Y+1	; 0x01
    5b46:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b4a:	d0 93 bf 18 	sts	0x18BF, r29	; 0x8018bf <_twiCurrentHandler+0x1>
    5b4e:	c0 93 be 18 	sts	0x18BE, r28	; 0x8018be <_twiCurrentHandler>
    5b52:	81 e0       	ldi	r24, 0x01	; 1
    5b54:	8f 0d       	add	r24, r15
    5b56:	80 93 c0 18 	sts	0x18C0, r24	; 0x8018c0 <_twiMessageLen>
    5b5a:	88 81       	ld	r24, Y
    5b5c:	88 0f       	add	r24, r24
    5b5e:	80 93 c1 18 	sts	0x18C1, r24	; 0x8018c1 <_twiMessageBuffer>
    5b62:	ff 20       	and	r15, r15
    5b64:	89 f0       	breq	.+34     	; 0x5b88 <twiTransmit+0x72>
    5b66:	f8 01       	movw	r30, r16
    5b68:	a2 ec       	ldi	r26, 0xC2	; 194
    5b6a:	b8 e1       	ldi	r27, 0x18	; 24
    5b6c:	4f ef       	ldi	r20, 0xFF	; 255
    5b6e:	4f 0d       	add	r20, r15
    5b70:	64 2f       	mov	r22, r20
    5b72:	70 e0       	ldi	r23, 0x00	; 0
    5b74:	cb 01       	movw	r24, r22
    5b76:	01 96       	adiw	r24, 0x01	; 1
    5b78:	b8 01       	movw	r22, r16
    5b7a:	68 0f       	add	r22, r24
    5b7c:	79 1f       	adc	r23, r25
    5b7e:	81 91       	ld	r24, Z+
    5b80:	8d 93       	st	X+, r24
    5b82:	e6 17       	cp	r30, r22
    5b84:	f7 07       	cpc	r31, r23
    5b86:	d9 f7       	brne	.-10     	; 0x5b7e <twiTransmit+0x68>
    5b88:	88 ef       	ldi	r24, 0xF8	; 248
    5b8a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b8e:	85 ea       	ldi	r24, 0xA5	; 165
    5b90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b94:	84 e0       	ldi	r24, 0x04	; 4
    5b96:	05 c0       	rjmp	.+10     	; 0x5ba2 <twiTransmit+0x8c>
    5b98:	86 e0       	ldi	r24, 0x06	; 6
    5b9a:	03 c0       	rjmp	.+6      	; 0x5ba2 <twiTransmit+0x8c>
    5b9c:	87 e0       	ldi	r24, 0x07	; 7
    5b9e:	01 c0       	rjmp	.+2      	; 0x5ba2 <twiTransmit+0x8c>
    5ba0:	82 e0       	ldi	r24, 0x02	; 2
    5ba2:	df 91       	pop	r29
    5ba4:	cf 91       	pop	r28
    5ba6:	1f 91       	pop	r17
    5ba8:	0f 91       	pop	r16
    5baa:	ff 90       	pop	r15
    5bac:	08 95       	ret

00005bae <twiReceive>:
    5bae:	1f 93       	push	r17
    5bb0:	cf 93       	push	r28
    5bb2:	df 93       	push	r29
    5bb4:	00 97       	sbiw	r24, 0x00	; 0
    5bb6:	29 f1       	breq	.+74     	; 0x5c02 <twiReceive+0x54>
    5bb8:	6b 30       	cpi	r22, 0x0B	; 11
    5bba:	28 f5       	brcc	.+74     	; 0x5c06 <twiReceive+0x58>
    5bbc:	16 2f       	mov	r17, r22
    5bbe:	ec 01       	movw	r28, r24
    5bc0:	a6 df       	rcall	.-180    	; 0x5b0e <twiIsBusy>
    5bc2:	81 11       	cpse	r24, r1
    5bc4:	22 c0       	rjmp	.+68     	; 0x5c0a <twiReceive+0x5c>
    5bc6:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_twiCurrentHandler>
    5bca:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_twiCurrentHandler+0x1>
    5bce:	c8 17       	cp	r28, r24
    5bd0:	d9 07       	cpc	r29, r25
    5bd2:	41 f0       	breq	.+16     	; 0x5be4 <twiReceive+0x36>
    5bd4:	3e df       	rcall	.-388    	; 0x5a52 <_initTwiInterface>
    5bd6:	89 81       	ldd	r24, Y+1	; 0x01
    5bd8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5bdc:	d0 93 bf 18 	sts	0x18BF, r29	; 0x8018bf <_twiCurrentHandler+0x1>
    5be0:	c0 93 be 18 	sts	0x18BE, r28	; 0x8018be <_twiCurrentHandler>
    5be4:	10 93 c0 18 	sts	0x18C0, r17	; 0x8018c0 <_twiMessageLen>
    5be8:	88 81       	ld	r24, Y
    5bea:	88 0f       	add	r24, r24
    5bec:	81 60       	ori	r24, 0x01	; 1
    5bee:	80 93 c1 18 	sts	0x18C1, r24	; 0x8018c1 <_twiMessageBuffer>
    5bf2:	88 ef       	ldi	r24, 0xF8	; 248
    5bf4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5bf8:	85 ea       	ldi	r24, 0xA5	; 165
    5bfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5bfe:	85 e0       	ldi	r24, 0x05	; 5
    5c00:	05 c0       	rjmp	.+10     	; 0x5c0c <twiReceive+0x5e>
    5c02:	86 e0       	ldi	r24, 0x06	; 6
    5c04:	03 c0       	rjmp	.+6      	; 0x5c0c <twiReceive+0x5e>
    5c06:	87 e0       	ldi	r24, 0x07	; 7
    5c08:	01 c0       	rjmp	.+2      	; 0x5c0c <twiReceive+0x5e>
    5c0a:	82 e0       	ldi	r24, 0x02	; 2
    5c0c:	df 91       	pop	r29
    5c0e:	cf 91       	pop	r28
    5c10:	1f 91       	pop	r17
    5c12:	08 95       	ret

00005c14 <__vector_39>:
    5c14:	1f 92       	push	r1
    5c16:	0f 92       	push	r0
    5c18:	0f b6       	in	r0, 0x3f	; 63
    5c1a:	0f 92       	push	r0
    5c1c:	11 24       	eor	r1, r1
    5c1e:	0b b6       	in	r0, 0x3b	; 59
    5c20:	0f 92       	push	r0
    5c22:	2f 93       	push	r18
    5c24:	3f 93       	push	r19
    5c26:	4f 93       	push	r20
    5c28:	5f 93       	push	r21
    5c2a:	6f 93       	push	r22
    5c2c:	7f 93       	push	r23
    5c2e:	8f 93       	push	r24
    5c30:	9f 93       	push	r25
    5c32:	af 93       	push	r26
    5c34:	bf 93       	push	r27
    5c36:	ef 93       	push	r30
    5c38:	ff 93       	push	r31
    5c3a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5c3e:	8e 2f       	mov	r24, r30
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	fc 01       	movw	r30, r24
    5c44:	38 97       	sbiw	r30, 0x08	; 8
    5c46:	e1 35       	cpi	r30, 0x51	; 81
    5c48:	f1 05       	cpc	r31, r1
    5c4a:	08 f0       	brcs	.+2      	; 0x5c4e <__vector_39+0x3a>
    5c4c:	75 c0       	rjmp	.+234    	; 0x5d38 <__vector_39+0x124>
    5c4e:	88 27       	eor	r24, r24
    5c50:	e4 58       	subi	r30, 0x84	; 132
    5c52:	ff 4f       	sbci	r31, 0xFF	; 255
    5c54:	8f 4f       	sbci	r24, 0xFF	; 255
    5c56:	76 c2       	rjmp	.+1260   	; 0x6144 <__tablejump2__>
    5c58:	10 92 bd 18 	sts	0x18BD, r1	; 0x8018bd <_index.1885>
    5c5c:	e0 91 bd 18 	lds	r30, 0x18BD	; 0x8018bd <_index.1885>
    5c60:	80 91 c0 18 	lds	r24, 0x18C0	; 0x8018c0 <_twiMessageLen>
    5c64:	e8 17       	cp	r30, r24
    5c66:	70 f4       	brcc	.+28     	; 0x5c84 <__vector_39+0x70>
    5c68:	81 e0       	ldi	r24, 0x01	; 1
    5c6a:	8e 0f       	add	r24, r30
    5c6c:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <_index.1885>
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	ef 53       	subi	r30, 0x3F	; 63
    5c74:	f7 4e       	sbci	r31, 0xE7	; 231
    5c76:	80 81       	ld	r24, Z
    5c78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c7c:	85 e8       	ldi	r24, 0x85	; 133
    5c7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c82:	72 c0       	rjmp	.+228    	; 0x5d68 <__vector_39+0x154>
    5c84:	84 e9       	ldi	r24, 0x94	; 148
    5c86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c8a:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_twiCurrentHandler>
    5c8e:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_twiCurrentHandler+0x1>
    5c92:	dc 01       	movw	r26, r24
    5c94:	12 96       	adiw	r26, 0x02	; 2
    5c96:	ed 91       	ld	r30, X+
    5c98:	fc 91       	ld	r31, X
    5c9a:	13 97       	sbiw	r26, 0x03	; 3
    5c9c:	30 97       	sbiw	r30, 0x00	; 0
    5c9e:	09 f4       	brne	.+2      	; 0x5ca2 <__vector_39+0x8e>
    5ca0:	63 c0       	rjmp	.+198    	; 0x5d68 <__vector_39+0x154>
    5ca2:	20 e0       	ldi	r18, 0x00	; 0
    5ca4:	40 e0       	ldi	r20, 0x00	; 0
    5ca6:	50 e0       	ldi	r21, 0x00	; 0
    5ca8:	64 e0       	ldi	r22, 0x04	; 4
    5caa:	19 95       	eicall
    5cac:	5d c0       	rjmp	.+186    	; 0x5d68 <__vector_39+0x154>
    5cae:	e0 91 bd 18 	lds	r30, 0x18BD	; 0x8018bd <_index.1885>
    5cb2:	81 e0       	ldi	r24, 0x01	; 1
    5cb4:	8e 0f       	add	r24, r30
    5cb6:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <_index.1885>
    5cba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5cbe:	f0 e0       	ldi	r31, 0x00	; 0
    5cc0:	ef 53       	subi	r30, 0x3F	; 63
    5cc2:	f7 4e       	sbci	r31, 0xE7	; 231
    5cc4:	80 83       	st	Z, r24
    5cc6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5cca:	80 34       	cpi	r24, 0x40	; 64
    5ccc:	11 f4       	brne	.+4      	; 0x5cd2 <__vector_39+0xbe>
    5cce:	10 92 bd 18 	sts	0x18BD, r1	; 0x8018bd <_index.1885>
    5cd2:	20 91 bd 18 	lds	r18, 0x18BD	; 0x8018bd <_index.1885>
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	80 91 c0 18 	lds	r24, 0x18C0	; 0x8018c0 <_twiMessageLen>
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	01 97       	sbiw	r24, 0x01	; 1
    5ce0:	28 17       	cp	r18, r24
    5ce2:	39 07       	cpc	r19, r25
    5ce4:	24 f4       	brge	.+8      	; 0x5cee <__vector_39+0xda>
    5ce6:	85 ec       	ldi	r24, 0xC5	; 197
    5ce8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cec:	3d c0       	rjmp	.+122    	; 0x5d68 <__vector_39+0x154>
    5cee:	85 e8       	ldi	r24, 0x85	; 133
    5cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cf4:	39 c0       	rjmp	.+114    	; 0x5d68 <__vector_39+0x154>
    5cf6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5cfa:	e0 91 bd 18 	lds	r30, 0x18BD	; 0x8018bd <_index.1885>
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	ef 53       	subi	r30, 0x3F	; 63
    5d02:	f7 4e       	sbci	r31, 0xE7	; 231
    5d04:	80 83       	st	Z, r24
    5d06:	84 e9       	ldi	r24, 0x94	; 148
    5d08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d0c:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_twiCurrentHandler>
    5d10:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_twiCurrentHandler+0x1>
    5d14:	dc 01       	movw	r26, r24
    5d16:	12 96       	adiw	r26, 0x02	; 2
    5d18:	ed 91       	ld	r30, X+
    5d1a:	fc 91       	ld	r31, X
    5d1c:	13 97       	sbiw	r26, 0x03	; 3
    5d1e:	30 97       	sbiw	r30, 0x00	; 0
    5d20:	19 f1       	breq	.+70     	; 0x5d68 <__vector_39+0x154>
    5d22:	20 91 c0 18 	lds	r18, 0x18C0	; 0x8018c0 <_twiMessageLen>
    5d26:	41 ec       	ldi	r20, 0xC1	; 193
    5d28:	58 e1       	ldi	r21, 0x18	; 24
    5d2a:	65 e0       	ldi	r22, 0x05	; 5
    5d2c:	19 95       	eicall
    5d2e:	1c c0       	rjmp	.+56     	; 0x5d68 <__vector_39+0x154>
    5d30:	85 ea       	ldi	r24, 0xA5	; 165
    5d32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d36:	18 c0       	rjmp	.+48     	; 0x5d68 <__vector_39+0x154>
    5d38:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d3c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5d40:	84 e0       	ldi	r24, 0x04	; 4
    5d42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d46:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_twiCurrentHandler>
    5d4a:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_twiCurrentHandler+0x1>
    5d4e:	dc 01       	movw	r26, r24
    5d50:	12 96       	adiw	r26, 0x02	; 2
    5d52:	ed 91       	ld	r30, X+
    5d54:	fc 91       	ld	r31, X
    5d56:	13 97       	sbiw	r26, 0x03	; 3
    5d58:	30 97       	sbiw	r30, 0x00	; 0
    5d5a:	31 f0       	breq	.+12     	; 0x5d68 <__vector_39+0x154>
    5d5c:	20 e0       	ldi	r18, 0x00	; 0
    5d5e:	40 e0       	ldi	r20, 0x00	; 0
    5d60:	50 e0       	ldi	r21, 0x00	; 0
    5d62:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5d66:	19 95       	eicall
    5d68:	ff 91       	pop	r31
    5d6a:	ef 91       	pop	r30
    5d6c:	bf 91       	pop	r27
    5d6e:	af 91       	pop	r26
    5d70:	9f 91       	pop	r25
    5d72:	8f 91       	pop	r24
    5d74:	7f 91       	pop	r23
    5d76:	6f 91       	pop	r22
    5d78:	5f 91       	pop	r21
    5d7a:	4f 91       	pop	r20
    5d7c:	3f 91       	pop	r19
    5d7e:	2f 91       	pop	r18
    5d80:	0f 90       	pop	r0
    5d82:	0b be       	out	0x3b, r0	; 59
    5d84:	0f 90       	pop	r0
    5d86:	0f be       	out	0x3f, r0	; 63
    5d88:	0f 90       	pop	r0
    5d8a:	1f 90       	pop	r1
    5d8c:	18 95       	reti

00005d8e <fifo_init>:
    5d8e:	fc 01       	movw	r30, r24
    5d90:	41 11       	cpse	r20, r1
    5d92:	01 c0       	rjmp	.+2      	; 0x5d96 <fifo_init+0x8>
    5d94:	00 d3       	rcall	.+1536   	; 0x6396 <abort>
    5d96:	84 2f       	mov	r24, r20
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	9c 01       	movw	r18, r24
    5d9c:	21 50       	subi	r18, 0x01	; 1
    5d9e:	31 09       	sbc	r19, r1
    5da0:	82 23       	and	r24, r18
    5da2:	93 23       	and	r25, r19
    5da4:	89 2b       	or	r24, r25
    5da6:	09 f0       	breq	.+2      	; 0x5daa <fifo_init+0x1c>
    5da8:	f6 d2       	rcall	.+1516   	; 0x6396 <abort>
    5daa:	41 38       	cpi	r20, 0x81	; 129
    5dac:	08 f0       	brcs	.+2      	; 0x5db0 <fifo_init+0x22>
    5dae:	f3 d2       	rcall	.+1510   	; 0x6396 <abort>
    5db0:	12 82       	std	Z+2, r1	; 0x02
    5db2:	13 82       	std	Z+3, r1	; 0x03
    5db4:	44 83       	std	Z+4, r20	; 0x04
    5db6:	44 0f       	add	r20, r20
    5db8:	41 50       	subi	r20, 0x01	; 1
    5dba:	45 83       	std	Z+5, r20	; 0x05
    5dbc:	71 83       	std	Z+1, r23	; 0x01
    5dbe:	60 83       	st	Z, r22
    5dc0:	80 e0       	ldi	r24, 0x00	; 0
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	08 95       	ret

00005dc6 <__subsf3>:
    5dc6:	50 58       	subi	r21, 0x80	; 128

00005dc8 <__addsf3>:
    5dc8:	bb 27       	eor	r27, r27
    5dca:	aa 27       	eor	r26, r26
    5dcc:	0e d0       	rcall	.+28     	; 0x5dea <__addsf3x>
    5dce:	21 c1       	rjmp	.+578    	; 0x6012 <__fp_round>
    5dd0:	12 d1       	rcall	.+548    	; 0x5ff6 <__fp_pscA>
    5dd2:	30 f0       	brcs	.+12     	; 0x5de0 <__addsf3+0x18>
    5dd4:	17 d1       	rcall	.+558    	; 0x6004 <__fp_pscB>
    5dd6:	20 f0       	brcs	.+8      	; 0x5de0 <__addsf3+0x18>
    5dd8:	31 f4       	brne	.+12     	; 0x5de6 <__addsf3+0x1e>
    5dda:	9f 3f       	cpi	r25, 0xFF	; 255
    5ddc:	11 f4       	brne	.+4      	; 0x5de2 <__addsf3+0x1a>
    5dde:	1e f4       	brtc	.+6      	; 0x5de6 <__addsf3+0x1e>
    5de0:	07 c1       	rjmp	.+526    	; 0x5ff0 <__fp_nan>
    5de2:	0e f4       	brtc	.+2      	; 0x5de6 <__addsf3+0x1e>
    5de4:	e0 95       	com	r30
    5de6:	e7 fb       	bst	r30, 7
    5de8:	fd c0       	rjmp	.+506    	; 0x5fe4 <__fp_inf>

00005dea <__addsf3x>:
    5dea:	e9 2f       	mov	r30, r25
    5dec:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__fp_split3>
    5df0:	78 f3       	brcs	.-34     	; 0x5dd0 <__addsf3+0x8>
    5df2:	ba 17       	cp	r27, r26
    5df4:	62 07       	cpc	r22, r18
    5df6:	73 07       	cpc	r23, r19
    5df8:	84 07       	cpc	r24, r20
    5dfa:	95 07       	cpc	r25, r21
    5dfc:	20 f0       	brcs	.+8      	; 0x5e06 <__addsf3x+0x1c>
    5dfe:	79 f4       	brne	.+30     	; 0x5e1e <__addsf3x+0x34>
    5e00:	a6 f5       	brtc	.+104    	; 0x5e6a <__addsf3x+0x80>
    5e02:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__fp_zero>
    5e06:	0e f4       	brtc	.+2      	; 0x5e0a <__addsf3x+0x20>
    5e08:	e0 95       	com	r30
    5e0a:	0b 2e       	mov	r0, r27
    5e0c:	ba 2f       	mov	r27, r26
    5e0e:	a0 2d       	mov	r26, r0
    5e10:	0b 01       	movw	r0, r22
    5e12:	b9 01       	movw	r22, r18
    5e14:	90 01       	movw	r18, r0
    5e16:	0c 01       	movw	r0, r24
    5e18:	ca 01       	movw	r24, r20
    5e1a:	a0 01       	movw	r20, r0
    5e1c:	11 24       	eor	r1, r1
    5e1e:	ff 27       	eor	r31, r31
    5e20:	59 1b       	sub	r21, r25
    5e22:	99 f0       	breq	.+38     	; 0x5e4a <__addsf3x+0x60>
    5e24:	59 3f       	cpi	r21, 0xF9	; 249
    5e26:	50 f4       	brcc	.+20     	; 0x5e3c <__addsf3x+0x52>
    5e28:	50 3e       	cpi	r21, 0xE0	; 224
    5e2a:	68 f1       	brcs	.+90     	; 0x5e86 <__addsf3x+0x9c>
    5e2c:	1a 16       	cp	r1, r26
    5e2e:	f0 40       	sbci	r31, 0x00	; 0
    5e30:	a2 2f       	mov	r26, r18
    5e32:	23 2f       	mov	r18, r19
    5e34:	34 2f       	mov	r19, r20
    5e36:	44 27       	eor	r20, r20
    5e38:	58 5f       	subi	r21, 0xF8	; 248
    5e3a:	f3 cf       	rjmp	.-26     	; 0x5e22 <__addsf3x+0x38>
    5e3c:	46 95       	lsr	r20
    5e3e:	37 95       	ror	r19
    5e40:	27 95       	ror	r18
    5e42:	a7 95       	ror	r26
    5e44:	f0 40       	sbci	r31, 0x00	; 0
    5e46:	53 95       	inc	r21
    5e48:	c9 f7       	brne	.-14     	; 0x5e3c <__addsf3x+0x52>
    5e4a:	7e f4       	brtc	.+30     	; 0x5e6a <__addsf3x+0x80>
    5e4c:	1f 16       	cp	r1, r31
    5e4e:	ba 0b       	sbc	r27, r26
    5e50:	62 0b       	sbc	r22, r18
    5e52:	73 0b       	sbc	r23, r19
    5e54:	84 0b       	sbc	r24, r20
    5e56:	ba f0       	brmi	.+46     	; 0x5e86 <__addsf3x+0x9c>
    5e58:	91 50       	subi	r25, 0x01	; 1
    5e5a:	a1 f0       	breq	.+40     	; 0x5e84 <__addsf3x+0x9a>
    5e5c:	ff 0f       	add	r31, r31
    5e5e:	bb 1f       	adc	r27, r27
    5e60:	66 1f       	adc	r22, r22
    5e62:	77 1f       	adc	r23, r23
    5e64:	88 1f       	adc	r24, r24
    5e66:	c2 f7       	brpl	.-16     	; 0x5e58 <__addsf3x+0x6e>
    5e68:	0e c0       	rjmp	.+28     	; 0x5e86 <__addsf3x+0x9c>
    5e6a:	ba 0f       	add	r27, r26
    5e6c:	62 1f       	adc	r22, r18
    5e6e:	73 1f       	adc	r23, r19
    5e70:	84 1f       	adc	r24, r20
    5e72:	48 f4       	brcc	.+18     	; 0x5e86 <__addsf3x+0x9c>
    5e74:	87 95       	ror	r24
    5e76:	77 95       	ror	r23
    5e78:	67 95       	ror	r22
    5e7a:	b7 95       	ror	r27
    5e7c:	f7 95       	ror	r31
    5e7e:	9e 3f       	cpi	r25, 0xFE	; 254
    5e80:	08 f0       	brcs	.+2      	; 0x5e84 <__addsf3x+0x9a>
    5e82:	b1 cf       	rjmp	.-158    	; 0x5de6 <__addsf3+0x1e>
    5e84:	93 95       	inc	r25
    5e86:	88 0f       	add	r24, r24
    5e88:	08 f0       	brcs	.+2      	; 0x5e8c <__addsf3x+0xa2>
    5e8a:	99 27       	eor	r25, r25
    5e8c:	ee 0f       	add	r30, r30
    5e8e:	97 95       	ror	r25
    5e90:	87 95       	ror	r24
    5e92:	08 95       	ret

00005e94 <__divsf3>:
    5e94:	0d d0       	rcall	.+26     	; 0x5eb0 <__divsf3x>
    5e96:	bd c0       	rjmp	.+378    	; 0x6012 <__fp_round>
    5e98:	b5 d0       	rcall	.+362    	; 0x6004 <__fp_pscB>
    5e9a:	48 f0       	brcs	.+18     	; 0x5eae <__divsf3+0x1a>
    5e9c:	ac d0       	rcall	.+344    	; 0x5ff6 <__fp_pscA>
    5e9e:	38 f0       	brcs	.+14     	; 0x5eae <__divsf3+0x1a>
    5ea0:	21 f4       	brne	.+8      	; 0x5eaa <__divsf3+0x16>
    5ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ea4:	21 f0       	breq	.+8      	; 0x5eae <__divsf3+0x1a>
    5ea6:	9e c0       	rjmp	.+316    	; 0x5fe4 <__fp_inf>
    5ea8:	51 11       	cpse	r21, r1
    5eaa:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__fp_szero>
    5eae:	a0 c0       	rjmp	.+320    	; 0x5ff0 <__fp_nan>

00005eb0 <__divsf3x>:
    5eb0:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__fp_split3>
    5eb4:	88 f3       	brcs	.-30     	; 0x5e98 <__divsf3+0x4>

00005eb6 <__divsf3_pse>:
    5eb6:	99 23       	and	r25, r25
    5eb8:	b9 f3       	breq	.-18     	; 0x5ea8 <__divsf3+0x14>
    5eba:	55 23       	and	r21, r21
    5ebc:	a1 f3       	breq	.-24     	; 0x5ea6 <__divsf3+0x12>
    5ebe:	95 1b       	sub	r25, r21
    5ec0:	55 0b       	sbc	r21, r21
    5ec2:	bb 27       	eor	r27, r27
    5ec4:	aa 27       	eor	r26, r26
    5ec6:	62 17       	cp	r22, r18
    5ec8:	73 07       	cpc	r23, r19
    5eca:	84 07       	cpc	r24, r20
    5ecc:	38 f0       	brcs	.+14     	; 0x5edc <__divsf3_pse+0x26>
    5ece:	9f 5f       	subi	r25, 0xFF	; 255
    5ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ed2:	22 0f       	add	r18, r18
    5ed4:	33 1f       	adc	r19, r19
    5ed6:	44 1f       	adc	r20, r20
    5ed8:	aa 1f       	adc	r26, r26
    5eda:	a9 f3       	breq	.-22     	; 0x5ec6 <__divsf3_pse+0x10>
    5edc:	34 d0       	rcall	.+104    	; 0x5f46 <__divsf3_pse+0x90>
    5ede:	0e 2e       	mov	r0, r30
    5ee0:	3a f0       	brmi	.+14     	; 0x5ef0 <__divsf3_pse+0x3a>
    5ee2:	e0 e8       	ldi	r30, 0x80	; 128
    5ee4:	31 d0       	rcall	.+98     	; 0x5f48 <__divsf3_pse+0x92>
    5ee6:	91 50       	subi	r25, 0x01	; 1
    5ee8:	50 40       	sbci	r21, 0x00	; 0
    5eea:	e6 95       	lsr	r30
    5eec:	00 1c       	adc	r0, r0
    5eee:	ca f7       	brpl	.-14     	; 0x5ee2 <__divsf3_pse+0x2c>
    5ef0:	2a d0       	rcall	.+84     	; 0x5f46 <__divsf3_pse+0x90>
    5ef2:	fe 2f       	mov	r31, r30
    5ef4:	28 d0       	rcall	.+80     	; 0x5f46 <__divsf3_pse+0x90>
    5ef6:	66 0f       	add	r22, r22
    5ef8:	77 1f       	adc	r23, r23
    5efa:	88 1f       	adc	r24, r24
    5efc:	bb 1f       	adc	r27, r27
    5efe:	26 17       	cp	r18, r22
    5f00:	37 07       	cpc	r19, r23
    5f02:	48 07       	cpc	r20, r24
    5f04:	ab 07       	cpc	r26, r27
    5f06:	b0 e8       	ldi	r27, 0x80	; 128
    5f08:	09 f0       	breq	.+2      	; 0x5f0c <__divsf3_pse+0x56>
    5f0a:	bb 0b       	sbc	r27, r27
    5f0c:	80 2d       	mov	r24, r0
    5f0e:	bf 01       	movw	r22, r30
    5f10:	ff 27       	eor	r31, r31
    5f12:	93 58       	subi	r25, 0x83	; 131
    5f14:	5f 4f       	sbci	r21, 0xFF	; 255
    5f16:	32 f0       	brmi	.+12     	; 0x5f24 <__divsf3_pse+0x6e>
    5f18:	9e 3f       	cpi	r25, 0xFE	; 254
    5f1a:	51 05       	cpc	r21, r1
    5f1c:	70 f0       	brcs	.+28     	; 0x5f3a <__divsf3_pse+0x84>
    5f1e:	62 c0       	rjmp	.+196    	; 0x5fe4 <__fp_inf>
    5f20:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__fp_szero>
    5f24:	5f 3f       	cpi	r21, 0xFF	; 255
    5f26:	e4 f3       	brlt	.-8      	; 0x5f20 <__divsf3_pse+0x6a>
    5f28:	98 3e       	cpi	r25, 0xE8	; 232
    5f2a:	d4 f3       	brlt	.-12     	; 0x5f20 <__divsf3_pse+0x6a>
    5f2c:	86 95       	lsr	r24
    5f2e:	77 95       	ror	r23
    5f30:	67 95       	ror	r22
    5f32:	b7 95       	ror	r27
    5f34:	f7 95       	ror	r31
    5f36:	9f 5f       	subi	r25, 0xFF	; 255
    5f38:	c9 f7       	brne	.-14     	; 0x5f2c <__divsf3_pse+0x76>
    5f3a:	88 0f       	add	r24, r24
    5f3c:	91 1d       	adc	r25, r1
    5f3e:	96 95       	lsr	r25
    5f40:	87 95       	ror	r24
    5f42:	97 f9       	bld	r25, 7
    5f44:	08 95       	ret
    5f46:	e1 e0       	ldi	r30, 0x01	; 1
    5f48:	66 0f       	add	r22, r22
    5f4a:	77 1f       	adc	r23, r23
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	bb 1f       	adc	r27, r27
    5f50:	62 17       	cp	r22, r18
    5f52:	73 07       	cpc	r23, r19
    5f54:	84 07       	cpc	r24, r20
    5f56:	ba 07       	cpc	r27, r26
    5f58:	20 f0       	brcs	.+8      	; 0x5f62 <__divsf3_pse+0xac>
    5f5a:	62 1b       	sub	r22, r18
    5f5c:	73 0b       	sbc	r23, r19
    5f5e:	84 0b       	sbc	r24, r20
    5f60:	ba 0b       	sbc	r27, r26
    5f62:	ee 1f       	adc	r30, r30
    5f64:	88 f7       	brcc	.-30     	; 0x5f48 <__divsf3_pse+0x92>
    5f66:	e0 95       	com	r30
    5f68:	08 95       	ret

00005f6a <__floatunsisf>:
    5f6a:	e8 94       	clt
    5f6c:	09 c0       	rjmp	.+18     	; 0x5f80 <__floatsisf+0x12>

00005f6e <__floatsisf>:
    5f6e:	97 fb       	bst	r25, 7
    5f70:	3e f4       	brtc	.+14     	; 0x5f80 <__floatsisf+0x12>
    5f72:	90 95       	com	r25
    5f74:	80 95       	com	r24
    5f76:	70 95       	com	r23
    5f78:	61 95       	neg	r22
    5f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    5f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    5f80:	99 23       	and	r25, r25
    5f82:	a9 f0       	breq	.+42     	; 0x5fae <__floatsisf+0x40>
    5f84:	f9 2f       	mov	r31, r25
    5f86:	96 e9       	ldi	r25, 0x96	; 150
    5f88:	bb 27       	eor	r27, r27
    5f8a:	93 95       	inc	r25
    5f8c:	f6 95       	lsr	r31
    5f8e:	87 95       	ror	r24
    5f90:	77 95       	ror	r23
    5f92:	67 95       	ror	r22
    5f94:	b7 95       	ror	r27
    5f96:	f1 11       	cpse	r31, r1
    5f98:	f8 cf       	rjmp	.-16     	; 0x5f8a <__floatsisf+0x1c>
    5f9a:	fa f4       	brpl	.+62     	; 0x5fda <__floatsisf+0x6c>
    5f9c:	bb 0f       	add	r27, r27
    5f9e:	11 f4       	brne	.+4      	; 0x5fa4 <__floatsisf+0x36>
    5fa0:	60 ff       	sbrs	r22, 0
    5fa2:	1b c0       	rjmp	.+54     	; 0x5fda <__floatsisf+0x6c>
    5fa4:	6f 5f       	subi	r22, 0xFF	; 255
    5fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    5fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    5faa:	9f 4f       	sbci	r25, 0xFF	; 255
    5fac:	16 c0       	rjmp	.+44     	; 0x5fda <__floatsisf+0x6c>
    5fae:	88 23       	and	r24, r24
    5fb0:	11 f0       	breq	.+4      	; 0x5fb6 <__floatsisf+0x48>
    5fb2:	96 e9       	ldi	r25, 0x96	; 150
    5fb4:	11 c0       	rjmp	.+34     	; 0x5fd8 <__floatsisf+0x6a>
    5fb6:	77 23       	and	r23, r23
    5fb8:	21 f0       	breq	.+8      	; 0x5fc2 <__floatsisf+0x54>
    5fba:	9e e8       	ldi	r25, 0x8E	; 142
    5fbc:	87 2f       	mov	r24, r23
    5fbe:	76 2f       	mov	r23, r22
    5fc0:	05 c0       	rjmp	.+10     	; 0x5fcc <__floatsisf+0x5e>
    5fc2:	66 23       	and	r22, r22
    5fc4:	71 f0       	breq	.+28     	; 0x5fe2 <__floatsisf+0x74>
    5fc6:	96 e8       	ldi	r25, 0x86	; 134
    5fc8:	86 2f       	mov	r24, r22
    5fca:	70 e0       	ldi	r23, 0x00	; 0
    5fcc:	60 e0       	ldi	r22, 0x00	; 0
    5fce:	2a f0       	brmi	.+10     	; 0x5fda <__floatsisf+0x6c>
    5fd0:	9a 95       	dec	r25
    5fd2:	66 0f       	add	r22, r22
    5fd4:	77 1f       	adc	r23, r23
    5fd6:	88 1f       	adc	r24, r24
    5fd8:	da f7       	brpl	.-10     	; 0x5fd0 <__floatsisf+0x62>
    5fda:	88 0f       	add	r24, r24
    5fdc:	96 95       	lsr	r25
    5fde:	87 95       	ror	r24
    5fe0:	97 f9       	bld	r25, 7
    5fe2:	08 95       	ret

00005fe4 <__fp_inf>:
    5fe4:	97 f9       	bld	r25, 7
    5fe6:	9f 67       	ori	r25, 0x7F	; 127
    5fe8:	80 e8       	ldi	r24, 0x80	; 128
    5fea:	70 e0       	ldi	r23, 0x00	; 0
    5fec:	60 e0       	ldi	r22, 0x00	; 0
    5fee:	08 95       	ret

00005ff0 <__fp_nan>:
    5ff0:	9f ef       	ldi	r25, 0xFF	; 255
    5ff2:	80 ec       	ldi	r24, 0xC0	; 192
    5ff4:	08 95       	ret

00005ff6 <__fp_pscA>:
    5ff6:	00 24       	eor	r0, r0
    5ff8:	0a 94       	dec	r0
    5ffa:	16 16       	cp	r1, r22
    5ffc:	17 06       	cpc	r1, r23
    5ffe:	18 06       	cpc	r1, r24
    6000:	09 06       	cpc	r0, r25
    6002:	08 95       	ret

00006004 <__fp_pscB>:
    6004:	00 24       	eor	r0, r0
    6006:	0a 94       	dec	r0
    6008:	12 16       	cp	r1, r18
    600a:	13 06       	cpc	r1, r19
    600c:	14 06       	cpc	r1, r20
    600e:	05 06       	cpc	r0, r21
    6010:	08 95       	ret

00006012 <__fp_round>:
    6012:	09 2e       	mov	r0, r25
    6014:	03 94       	inc	r0
    6016:	00 0c       	add	r0, r0
    6018:	11 f4       	brne	.+4      	; 0x601e <__fp_round+0xc>
    601a:	88 23       	and	r24, r24
    601c:	52 f0       	brmi	.+20     	; 0x6032 <__fp_round+0x20>
    601e:	bb 0f       	add	r27, r27
    6020:	40 f4       	brcc	.+16     	; 0x6032 <__fp_round+0x20>
    6022:	bf 2b       	or	r27, r31
    6024:	11 f4       	brne	.+4      	; 0x602a <__fp_round+0x18>
    6026:	60 ff       	sbrs	r22, 0
    6028:	04 c0       	rjmp	.+8      	; 0x6032 <__fp_round+0x20>
    602a:	6f 5f       	subi	r22, 0xFF	; 255
    602c:	7f 4f       	sbci	r23, 0xFF	; 255
    602e:	8f 4f       	sbci	r24, 0xFF	; 255
    6030:	9f 4f       	sbci	r25, 0xFF	; 255
    6032:	08 95       	ret

00006034 <__mulsf3>:
    6034:	0c d0       	rcall	.+24     	; 0x604e <__mulsf3x>
    6036:	ed cf       	rjmp	.-38     	; 0x6012 <__fp_round>
    6038:	de df       	rcall	.-68     	; 0x5ff6 <__fp_pscA>
    603a:	28 f0       	brcs	.+10     	; 0x6046 <__mulsf3+0x12>
    603c:	e3 df       	rcall	.-58     	; 0x6004 <__fp_pscB>
    603e:	18 f0       	brcs	.+6      	; 0x6046 <__mulsf3+0x12>
    6040:	95 23       	and	r25, r21
    6042:	09 f0       	breq	.+2      	; 0x6046 <__mulsf3+0x12>
    6044:	cf cf       	rjmp	.-98     	; 0x5fe4 <__fp_inf>
    6046:	d4 cf       	rjmp	.-88     	; 0x5ff0 <__fp_nan>
    6048:	11 24       	eor	r1, r1
    604a:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__fp_szero>

0000604e <__mulsf3x>:
    604e:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__fp_split3>
    6052:	90 f3       	brcs	.-28     	; 0x6038 <__mulsf3+0x4>

00006054 <__mulsf3_pse>:
    6054:	95 9f       	mul	r25, r21
    6056:	c1 f3       	breq	.-16     	; 0x6048 <__mulsf3+0x14>
    6058:	95 0f       	add	r25, r21
    605a:	50 e0       	ldi	r21, 0x00	; 0
    605c:	55 1f       	adc	r21, r21
    605e:	62 9f       	mul	r22, r18
    6060:	f0 01       	movw	r30, r0
    6062:	72 9f       	mul	r23, r18
    6064:	bb 27       	eor	r27, r27
    6066:	f0 0d       	add	r31, r0
    6068:	b1 1d       	adc	r27, r1
    606a:	63 9f       	mul	r22, r19
    606c:	aa 27       	eor	r26, r26
    606e:	f0 0d       	add	r31, r0
    6070:	b1 1d       	adc	r27, r1
    6072:	aa 1f       	adc	r26, r26
    6074:	64 9f       	mul	r22, r20
    6076:	66 27       	eor	r22, r22
    6078:	b0 0d       	add	r27, r0
    607a:	a1 1d       	adc	r26, r1
    607c:	66 1f       	adc	r22, r22
    607e:	82 9f       	mul	r24, r18
    6080:	22 27       	eor	r18, r18
    6082:	b0 0d       	add	r27, r0
    6084:	a1 1d       	adc	r26, r1
    6086:	62 1f       	adc	r22, r18
    6088:	73 9f       	mul	r23, r19
    608a:	b0 0d       	add	r27, r0
    608c:	a1 1d       	adc	r26, r1
    608e:	62 1f       	adc	r22, r18
    6090:	83 9f       	mul	r24, r19
    6092:	a0 0d       	add	r26, r0
    6094:	61 1d       	adc	r22, r1
    6096:	22 1f       	adc	r18, r18
    6098:	74 9f       	mul	r23, r20
    609a:	33 27       	eor	r19, r19
    609c:	a0 0d       	add	r26, r0
    609e:	61 1d       	adc	r22, r1
    60a0:	23 1f       	adc	r18, r19
    60a2:	84 9f       	mul	r24, r20
    60a4:	60 0d       	add	r22, r0
    60a6:	21 1d       	adc	r18, r1
    60a8:	82 2f       	mov	r24, r18
    60aa:	76 2f       	mov	r23, r22
    60ac:	6a 2f       	mov	r22, r26
    60ae:	11 24       	eor	r1, r1
    60b0:	9f 57       	subi	r25, 0x7F	; 127
    60b2:	50 40       	sbci	r21, 0x00	; 0
    60b4:	92 f0       	brmi	.+36     	; 0x60da <__mulsf3_pse+0x86>
    60b6:	e9 f0       	breq	.+58     	; 0x60f2 <__mulsf3_pse+0x9e>
    60b8:	88 23       	and	r24, r24
    60ba:	4a f0       	brmi	.+18     	; 0x60ce <__mulsf3_pse+0x7a>
    60bc:	ee 0f       	add	r30, r30
    60be:	ff 1f       	adc	r31, r31
    60c0:	bb 1f       	adc	r27, r27
    60c2:	66 1f       	adc	r22, r22
    60c4:	77 1f       	adc	r23, r23
    60c6:	88 1f       	adc	r24, r24
    60c8:	91 50       	subi	r25, 0x01	; 1
    60ca:	50 40       	sbci	r21, 0x00	; 0
    60cc:	a9 f7       	brne	.-22     	; 0x60b8 <__mulsf3_pse+0x64>
    60ce:	9e 3f       	cpi	r25, 0xFE	; 254
    60d0:	51 05       	cpc	r21, r1
    60d2:	78 f0       	brcs	.+30     	; 0x60f2 <__mulsf3_pse+0x9e>
    60d4:	87 cf       	rjmp	.-242    	; 0x5fe4 <__fp_inf>
    60d6:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__fp_szero>
    60da:	5f 3f       	cpi	r21, 0xFF	; 255
    60dc:	e4 f3       	brlt	.-8      	; 0x60d6 <__mulsf3_pse+0x82>
    60de:	98 3e       	cpi	r25, 0xE8	; 232
    60e0:	d4 f3       	brlt	.-12     	; 0x60d6 <__mulsf3_pse+0x82>
    60e2:	86 95       	lsr	r24
    60e4:	77 95       	ror	r23
    60e6:	67 95       	ror	r22
    60e8:	b7 95       	ror	r27
    60ea:	f7 95       	ror	r31
    60ec:	e7 95       	ror	r30
    60ee:	9f 5f       	subi	r25, 0xFF	; 255
    60f0:	c1 f7       	brne	.-16     	; 0x60e2 <__mulsf3_pse+0x8e>
    60f2:	fe 2b       	or	r31, r30
    60f4:	88 0f       	add	r24, r24
    60f6:	91 1d       	adc	r25, r1
    60f8:	96 95       	lsr	r25
    60fa:	87 95       	ror	r24
    60fc:	97 f9       	bld	r25, 7
    60fe:	08 95       	ret

00006100 <__udivmodsi4>:
    6100:	a1 e2       	ldi	r26, 0x21	; 33
    6102:	1a 2e       	mov	r1, r26
    6104:	aa 1b       	sub	r26, r26
    6106:	bb 1b       	sub	r27, r27
    6108:	fd 01       	movw	r30, r26
    610a:	0d c0       	rjmp	.+26     	; 0x6126 <__udivmodsi4_ep>

0000610c <__udivmodsi4_loop>:
    610c:	aa 1f       	adc	r26, r26
    610e:	bb 1f       	adc	r27, r27
    6110:	ee 1f       	adc	r30, r30
    6112:	ff 1f       	adc	r31, r31
    6114:	a2 17       	cp	r26, r18
    6116:	b3 07       	cpc	r27, r19
    6118:	e4 07       	cpc	r30, r20
    611a:	f5 07       	cpc	r31, r21
    611c:	20 f0       	brcs	.+8      	; 0x6126 <__udivmodsi4_ep>
    611e:	a2 1b       	sub	r26, r18
    6120:	b3 0b       	sbc	r27, r19
    6122:	e4 0b       	sbc	r30, r20
    6124:	f5 0b       	sbc	r31, r21

00006126 <__udivmodsi4_ep>:
    6126:	66 1f       	adc	r22, r22
    6128:	77 1f       	adc	r23, r23
    612a:	88 1f       	adc	r24, r24
    612c:	99 1f       	adc	r25, r25
    612e:	1a 94       	dec	r1
    6130:	69 f7       	brne	.-38     	; 0x610c <__udivmodsi4_loop>
    6132:	60 95       	com	r22
    6134:	70 95       	com	r23
    6136:	80 95       	com	r24
    6138:	90 95       	com	r25
    613a:	9b 01       	movw	r18, r22
    613c:	ac 01       	movw	r20, r24
    613e:	bd 01       	movw	r22, r26
    6140:	cf 01       	movw	r24, r30
    6142:	08 95       	ret

00006144 <__tablejump2__>:
    6144:	ee 0f       	add	r30, r30
    6146:	ff 1f       	adc	r31, r31
    6148:	88 1f       	adc	r24, r24
    614a:	8b bf       	out	0x3b, r24	; 59
    614c:	07 90       	elpm	r0, Z+
    614e:	f6 91       	elpm	r31, Z
    6150:	e0 2d       	mov	r30, r0
    6152:	19 94       	eijmp

00006154 <malloc>:
    6154:	0f 93       	push	r16
    6156:	1f 93       	push	r17
    6158:	cf 93       	push	r28
    615a:	df 93       	push	r29
    615c:	82 30       	cpi	r24, 0x02	; 2
    615e:	91 05       	cpc	r25, r1
    6160:	10 f4       	brcc	.+4      	; 0x6166 <malloc+0x12>
    6162:	82 e0       	ldi	r24, 0x02	; 2
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	e0 91 13 19 	lds	r30, 0x1913	; 0x801913 <__flp>
    616a:	f0 91 14 19 	lds	r31, 0x1914	; 0x801914 <__flp+0x1>
    616e:	20 e0       	ldi	r18, 0x00	; 0
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	a0 e0       	ldi	r26, 0x00	; 0
    6174:	b0 e0       	ldi	r27, 0x00	; 0
    6176:	30 97       	sbiw	r30, 0x00	; 0
    6178:	19 f1       	breq	.+70     	; 0x61c0 <malloc+0x6c>
    617a:	40 81       	ld	r20, Z
    617c:	51 81       	ldd	r21, Z+1	; 0x01
    617e:	02 81       	ldd	r16, Z+2	; 0x02
    6180:	13 81       	ldd	r17, Z+3	; 0x03
    6182:	48 17       	cp	r20, r24
    6184:	59 07       	cpc	r21, r25
    6186:	c8 f0       	brcs	.+50     	; 0x61ba <malloc+0x66>
    6188:	84 17       	cp	r24, r20
    618a:	95 07       	cpc	r25, r21
    618c:	69 f4       	brne	.+26     	; 0x61a8 <malloc+0x54>
    618e:	10 97       	sbiw	r26, 0x00	; 0
    6190:	31 f0       	breq	.+12     	; 0x619e <malloc+0x4a>
    6192:	12 96       	adiw	r26, 0x02	; 2
    6194:	0c 93       	st	X, r16
    6196:	12 97       	sbiw	r26, 0x02	; 2
    6198:	13 96       	adiw	r26, 0x03	; 3
    619a:	1c 93       	st	X, r17
    619c:	27 c0       	rjmp	.+78     	; 0x61ec <malloc+0x98>
    619e:	00 93 13 19 	sts	0x1913, r16	; 0x801913 <__flp>
    61a2:	10 93 14 19 	sts	0x1914, r17	; 0x801914 <__flp+0x1>
    61a6:	22 c0       	rjmp	.+68     	; 0x61ec <malloc+0x98>
    61a8:	21 15       	cp	r18, r1
    61aa:	31 05       	cpc	r19, r1
    61ac:	19 f0       	breq	.+6      	; 0x61b4 <malloc+0x60>
    61ae:	42 17       	cp	r20, r18
    61b0:	53 07       	cpc	r21, r19
    61b2:	18 f4       	brcc	.+6      	; 0x61ba <malloc+0x66>
    61b4:	9a 01       	movw	r18, r20
    61b6:	bd 01       	movw	r22, r26
    61b8:	ef 01       	movw	r28, r30
    61ba:	df 01       	movw	r26, r30
    61bc:	f8 01       	movw	r30, r16
    61be:	db cf       	rjmp	.-74     	; 0x6176 <malloc+0x22>
    61c0:	21 15       	cp	r18, r1
    61c2:	31 05       	cpc	r19, r1
    61c4:	f9 f0       	breq	.+62     	; 0x6204 <malloc+0xb0>
    61c6:	28 1b       	sub	r18, r24
    61c8:	39 0b       	sbc	r19, r25
    61ca:	24 30       	cpi	r18, 0x04	; 4
    61cc:	31 05       	cpc	r19, r1
    61ce:	80 f4       	brcc	.+32     	; 0x61f0 <malloc+0x9c>
    61d0:	8a 81       	ldd	r24, Y+2	; 0x02
    61d2:	9b 81       	ldd	r25, Y+3	; 0x03
    61d4:	61 15       	cp	r22, r1
    61d6:	71 05       	cpc	r23, r1
    61d8:	21 f0       	breq	.+8      	; 0x61e2 <malloc+0x8e>
    61da:	fb 01       	movw	r30, r22
    61dc:	93 83       	std	Z+3, r25	; 0x03
    61de:	82 83       	std	Z+2, r24	; 0x02
    61e0:	04 c0       	rjmp	.+8      	; 0x61ea <malloc+0x96>
    61e2:	90 93 14 19 	sts	0x1914, r25	; 0x801914 <__flp+0x1>
    61e6:	80 93 13 19 	sts	0x1913, r24	; 0x801913 <__flp>
    61ea:	fe 01       	movw	r30, r28
    61ec:	32 96       	adiw	r30, 0x02	; 2
    61ee:	44 c0       	rjmp	.+136    	; 0x6278 <malloc+0x124>
    61f0:	fe 01       	movw	r30, r28
    61f2:	e2 0f       	add	r30, r18
    61f4:	f3 1f       	adc	r31, r19
    61f6:	81 93       	st	Z+, r24
    61f8:	91 93       	st	Z+, r25
    61fa:	22 50       	subi	r18, 0x02	; 2
    61fc:	31 09       	sbc	r19, r1
    61fe:	39 83       	std	Y+1, r19	; 0x01
    6200:	28 83       	st	Y, r18
    6202:	3a c0       	rjmp	.+116    	; 0x6278 <malloc+0x124>
    6204:	20 91 11 19 	lds	r18, 0x1911	; 0x801911 <__brkval>
    6208:	30 91 12 19 	lds	r19, 0x1912	; 0x801912 <__brkval+0x1>
    620c:	23 2b       	or	r18, r19
    620e:	41 f4       	brne	.+16     	; 0x6220 <malloc+0xcc>
    6210:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6214:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6218:	30 93 12 19 	sts	0x1912, r19	; 0x801912 <__brkval+0x1>
    621c:	20 93 11 19 	sts	0x1911, r18	; 0x801911 <__brkval>
    6220:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6224:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6228:	21 15       	cp	r18, r1
    622a:	31 05       	cpc	r19, r1
    622c:	41 f4       	brne	.+16     	; 0x623e <malloc+0xea>
    622e:	2d b7       	in	r18, 0x3d	; 61
    6230:	3e b7       	in	r19, 0x3e	; 62
    6232:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6236:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    623a:	24 1b       	sub	r18, r20
    623c:	35 0b       	sbc	r19, r21
    623e:	e0 91 11 19 	lds	r30, 0x1911	; 0x801911 <__brkval>
    6242:	f0 91 12 19 	lds	r31, 0x1912	; 0x801912 <__brkval+0x1>
    6246:	e2 17       	cp	r30, r18
    6248:	f3 07       	cpc	r31, r19
    624a:	a0 f4       	brcc	.+40     	; 0x6274 <malloc+0x120>
    624c:	2e 1b       	sub	r18, r30
    624e:	3f 0b       	sbc	r19, r31
    6250:	28 17       	cp	r18, r24
    6252:	39 07       	cpc	r19, r25
    6254:	78 f0       	brcs	.+30     	; 0x6274 <malloc+0x120>
    6256:	ac 01       	movw	r20, r24
    6258:	4e 5f       	subi	r20, 0xFE	; 254
    625a:	5f 4f       	sbci	r21, 0xFF	; 255
    625c:	24 17       	cp	r18, r20
    625e:	35 07       	cpc	r19, r21
    6260:	48 f0       	brcs	.+18     	; 0x6274 <malloc+0x120>
    6262:	4e 0f       	add	r20, r30
    6264:	5f 1f       	adc	r21, r31
    6266:	50 93 12 19 	sts	0x1912, r21	; 0x801912 <__brkval+0x1>
    626a:	40 93 11 19 	sts	0x1911, r20	; 0x801911 <__brkval>
    626e:	81 93       	st	Z+, r24
    6270:	91 93       	st	Z+, r25
    6272:	02 c0       	rjmp	.+4      	; 0x6278 <malloc+0x124>
    6274:	e0 e0       	ldi	r30, 0x00	; 0
    6276:	f0 e0       	ldi	r31, 0x00	; 0
    6278:	cf 01       	movw	r24, r30
    627a:	df 91       	pop	r29
    627c:	cf 91       	pop	r28
    627e:	1f 91       	pop	r17
    6280:	0f 91       	pop	r16
    6282:	08 95       	ret

00006284 <free>:
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	00 97       	sbiw	r24, 0x00	; 0
    628a:	09 f4       	brne	.+2      	; 0x628e <free+0xa>
    628c:	81 c0       	rjmp	.+258    	; 0x6390 <free+0x10c>
    628e:	fc 01       	movw	r30, r24
    6290:	32 97       	sbiw	r30, 0x02	; 2
    6292:	13 82       	std	Z+3, r1	; 0x03
    6294:	12 82       	std	Z+2, r1	; 0x02
    6296:	a0 91 13 19 	lds	r26, 0x1913	; 0x801913 <__flp>
    629a:	b0 91 14 19 	lds	r27, 0x1914	; 0x801914 <__flp+0x1>
    629e:	10 97       	sbiw	r26, 0x00	; 0
    62a0:	81 f4       	brne	.+32     	; 0x62c2 <free+0x3e>
    62a2:	20 81       	ld	r18, Z
    62a4:	31 81       	ldd	r19, Z+1	; 0x01
    62a6:	82 0f       	add	r24, r18
    62a8:	93 1f       	adc	r25, r19
    62aa:	20 91 11 19 	lds	r18, 0x1911	; 0x801911 <__brkval>
    62ae:	30 91 12 19 	lds	r19, 0x1912	; 0x801912 <__brkval+0x1>
    62b2:	28 17       	cp	r18, r24
    62b4:	39 07       	cpc	r19, r25
    62b6:	51 f5       	brne	.+84     	; 0x630c <free+0x88>
    62b8:	f0 93 12 19 	sts	0x1912, r31	; 0x801912 <__brkval+0x1>
    62bc:	e0 93 11 19 	sts	0x1911, r30	; 0x801911 <__brkval>
    62c0:	67 c0       	rjmp	.+206    	; 0x6390 <free+0x10c>
    62c2:	ed 01       	movw	r28, r26
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	ce 17       	cp	r28, r30
    62ca:	df 07       	cpc	r29, r31
    62cc:	40 f4       	brcc	.+16     	; 0x62de <free+0x5a>
    62ce:	4a 81       	ldd	r20, Y+2	; 0x02
    62d0:	5b 81       	ldd	r21, Y+3	; 0x03
    62d2:	9e 01       	movw	r18, r28
    62d4:	41 15       	cp	r20, r1
    62d6:	51 05       	cpc	r21, r1
    62d8:	f1 f0       	breq	.+60     	; 0x6316 <free+0x92>
    62da:	ea 01       	movw	r28, r20
    62dc:	f5 cf       	rjmp	.-22     	; 0x62c8 <free+0x44>
    62de:	d3 83       	std	Z+3, r29	; 0x03
    62e0:	c2 83       	std	Z+2, r28	; 0x02
    62e2:	40 81       	ld	r20, Z
    62e4:	51 81       	ldd	r21, Z+1	; 0x01
    62e6:	84 0f       	add	r24, r20
    62e8:	95 1f       	adc	r25, r21
    62ea:	c8 17       	cp	r28, r24
    62ec:	d9 07       	cpc	r29, r25
    62ee:	59 f4       	brne	.+22     	; 0x6306 <free+0x82>
    62f0:	88 81       	ld	r24, Y
    62f2:	99 81       	ldd	r25, Y+1	; 0x01
    62f4:	84 0f       	add	r24, r20
    62f6:	95 1f       	adc	r25, r21
    62f8:	02 96       	adiw	r24, 0x02	; 2
    62fa:	91 83       	std	Z+1, r25	; 0x01
    62fc:	80 83       	st	Z, r24
    62fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6300:	9b 81       	ldd	r25, Y+3	; 0x03
    6302:	93 83       	std	Z+3, r25	; 0x03
    6304:	82 83       	std	Z+2, r24	; 0x02
    6306:	21 15       	cp	r18, r1
    6308:	31 05       	cpc	r19, r1
    630a:	29 f4       	brne	.+10     	; 0x6316 <free+0x92>
    630c:	f0 93 14 19 	sts	0x1914, r31	; 0x801914 <__flp+0x1>
    6310:	e0 93 13 19 	sts	0x1913, r30	; 0x801913 <__flp>
    6314:	3d c0       	rjmp	.+122    	; 0x6390 <free+0x10c>
    6316:	e9 01       	movw	r28, r18
    6318:	fb 83       	std	Y+3, r31	; 0x03
    631a:	ea 83       	std	Y+2, r30	; 0x02
    631c:	49 91       	ld	r20, Y+
    631e:	59 91       	ld	r21, Y+
    6320:	c4 0f       	add	r28, r20
    6322:	d5 1f       	adc	r29, r21
    6324:	ec 17       	cp	r30, r28
    6326:	fd 07       	cpc	r31, r29
    6328:	61 f4       	brne	.+24     	; 0x6342 <free+0xbe>
    632a:	80 81       	ld	r24, Z
    632c:	91 81       	ldd	r25, Z+1	; 0x01
    632e:	84 0f       	add	r24, r20
    6330:	95 1f       	adc	r25, r21
    6332:	02 96       	adiw	r24, 0x02	; 2
    6334:	e9 01       	movw	r28, r18
    6336:	99 83       	std	Y+1, r25	; 0x01
    6338:	88 83       	st	Y, r24
    633a:	82 81       	ldd	r24, Z+2	; 0x02
    633c:	93 81       	ldd	r25, Z+3	; 0x03
    633e:	9b 83       	std	Y+3, r25	; 0x03
    6340:	8a 83       	std	Y+2, r24	; 0x02
    6342:	e0 e0       	ldi	r30, 0x00	; 0
    6344:	f0 e0       	ldi	r31, 0x00	; 0
    6346:	12 96       	adiw	r26, 0x02	; 2
    6348:	8d 91       	ld	r24, X+
    634a:	9c 91       	ld	r25, X
    634c:	13 97       	sbiw	r26, 0x03	; 3
    634e:	00 97       	sbiw	r24, 0x00	; 0
    6350:	19 f0       	breq	.+6      	; 0x6358 <free+0xd4>
    6352:	fd 01       	movw	r30, r26
    6354:	dc 01       	movw	r26, r24
    6356:	f7 cf       	rjmp	.-18     	; 0x6346 <free+0xc2>
    6358:	8d 91       	ld	r24, X+
    635a:	9c 91       	ld	r25, X
    635c:	11 97       	sbiw	r26, 0x01	; 1
    635e:	9d 01       	movw	r18, r26
    6360:	2e 5f       	subi	r18, 0xFE	; 254
    6362:	3f 4f       	sbci	r19, 0xFF	; 255
    6364:	82 0f       	add	r24, r18
    6366:	93 1f       	adc	r25, r19
    6368:	20 91 11 19 	lds	r18, 0x1911	; 0x801911 <__brkval>
    636c:	30 91 12 19 	lds	r19, 0x1912	; 0x801912 <__brkval+0x1>
    6370:	28 17       	cp	r18, r24
    6372:	39 07       	cpc	r19, r25
    6374:	69 f4       	brne	.+26     	; 0x6390 <free+0x10c>
    6376:	30 97       	sbiw	r30, 0x00	; 0
    6378:	29 f4       	brne	.+10     	; 0x6384 <free+0x100>
    637a:	10 92 14 19 	sts	0x1914, r1	; 0x801914 <__flp+0x1>
    637e:	10 92 13 19 	sts	0x1913, r1	; 0x801913 <__flp>
    6382:	02 c0       	rjmp	.+4      	; 0x6388 <free+0x104>
    6384:	13 82       	std	Z+3, r1	; 0x03
    6386:	12 82       	std	Z+2, r1	; 0x02
    6388:	b0 93 12 19 	sts	0x1912, r27	; 0x801912 <__brkval+0x1>
    638c:	a0 93 11 19 	sts	0x1911, r26	; 0x801911 <__brkval>
    6390:	df 91       	pop	r29
    6392:	cf 91       	pop	r28
    6394:	08 95       	ret

00006396 <abort>:
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	f8 94       	cli
    639c:	7d c3       	rjmp	.+1786   	; 0x6a98 <_exit>

0000639e <memcpy>:
    639e:	fb 01       	movw	r30, r22
    63a0:	dc 01       	movw	r26, r24
    63a2:	02 c0       	rjmp	.+4      	; 0x63a8 <memcpy+0xa>
    63a4:	01 90       	ld	r0, Z+
    63a6:	0d 92       	st	X+, r0
    63a8:	41 50       	subi	r20, 0x01	; 1
    63aa:	50 40       	sbci	r21, 0x00	; 0
    63ac:	d8 f7       	brcc	.-10     	; 0x63a4 <memcpy+0x6>
    63ae:	08 95       	ret

000063b0 <memset>:
    63b0:	dc 01       	movw	r26, r24
    63b2:	01 c0       	rjmp	.+2      	; 0x63b6 <memset+0x6>
    63b4:	6d 93       	st	X+, r22
    63b6:	41 50       	subi	r20, 0x01	; 1
    63b8:	50 40       	sbci	r21, 0x00	; 0
    63ba:	e0 f7       	brcc	.-8      	; 0x63b4 <memset+0x4>
    63bc:	08 95       	ret

000063be <strcasestr>:
    63be:	fb 01       	movw	r30, r22
    63c0:	51 91       	ld	r21, Z+
    63c2:	55 23       	and	r21, r21
    63c4:	b1 f0       	breq	.+44     	; 0x63f2 <strcasestr+0x34>
    63c6:	bf 01       	movw	r22, r30
    63c8:	dc 01       	movw	r26, r24
    63ca:	05 2e       	mov	r0, r21
    63cc:	4d 91       	ld	r20, X+
    63ce:	44 23       	and	r20, r20
    63d0:	69 f0       	breq	.+26     	; 0x63ec <strcasestr+0x2e>
    63d2:	10 d0       	rcall	.+32     	; 0x63f4 <strcasestr+0x36>
    63d4:	d9 f7       	brne	.-10     	; 0x63cc <strcasestr+0xe>
    63d6:	cd 01       	movw	r24, r26
    63d8:	01 90       	ld	r0, Z+
    63da:	00 20       	and	r0, r0
    63dc:	49 f0       	breq	.+18     	; 0x63f0 <strcasestr+0x32>
    63de:	4d 91       	ld	r20, X+
    63e0:	41 11       	cpse	r20, r1
    63e2:	08 d0       	rcall	.+16     	; 0x63f4 <strcasestr+0x36>
    63e4:	c9 f3       	breq	.-14     	; 0x63d8 <strcasestr+0x1a>
    63e6:	fb 01       	movw	r30, r22
    63e8:	41 11       	cpse	r20, r1
    63ea:	ee cf       	rjmp	.-36     	; 0x63c8 <strcasestr+0xa>
    63ec:	81 e0       	ldi	r24, 0x01	; 1
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	01 97       	sbiw	r24, 0x01	; 1
    63f2:	08 95       	ret
    63f4:	40 25       	eor	r20, r0
    63f6:	39 f0       	breq	.+14     	; 0x6406 <strcasestr+0x48>
    63f8:	40 32       	cpi	r20, 0x20	; 32
    63fa:	29 f4       	brne	.+10     	; 0x6406 <strcasestr+0x48>
    63fc:	40 29       	or	r20, r0
    63fe:	4b 57       	subi	r20, 0x7B	; 123
    6400:	46 5e       	subi	r20, 0xE6	; 230
    6402:	08 f0       	brcs	.+2      	; 0x6406 <strcasestr+0x48>
    6404:	18 94       	sez
    6406:	08 95       	ret

00006408 <strcat>:
    6408:	fb 01       	movw	r30, r22
    640a:	dc 01       	movw	r26, r24
    640c:	0d 90       	ld	r0, X+
    640e:	00 20       	and	r0, r0
    6410:	e9 f7       	brne	.-6      	; 0x640c <strcat+0x4>
    6412:	11 97       	sbiw	r26, 0x01	; 1
    6414:	01 90       	ld	r0, Z+
    6416:	0d 92       	st	X+, r0
    6418:	00 20       	and	r0, r0
    641a:	e1 f7       	brne	.-8      	; 0x6414 <strcat+0xc>
    641c:	08 95       	ret

0000641e <strcpy>:
    641e:	fb 01       	movw	r30, r22
    6420:	dc 01       	movw	r26, r24
    6422:	01 90       	ld	r0, Z+
    6424:	0d 92       	st	X+, r0
    6426:	00 20       	and	r0, r0
    6428:	e1 f7       	brne	.-8      	; 0x6422 <strcpy+0x4>
    642a:	08 95       	ret

0000642c <strncasecmp>:
    642c:	fb 01       	movw	r30, r22
    642e:	dc 01       	movw	r26, r24
    6430:	41 50       	subi	r20, 0x01	; 1
    6432:	50 40       	sbci	r21, 0x00	; 0
    6434:	88 f0       	brcs	.+34     	; 0x6458 <strncasecmp+0x2c>
    6436:	8d 91       	ld	r24, X+
    6438:	81 34       	cpi	r24, 0x41	; 65
    643a:	1c f0       	brlt	.+6      	; 0x6442 <strncasecmp+0x16>
    643c:	8b 35       	cpi	r24, 0x5B	; 91
    643e:	0c f4       	brge	.+2      	; 0x6442 <strncasecmp+0x16>
    6440:	80 5e       	subi	r24, 0xE0	; 224
    6442:	61 91       	ld	r22, Z+
    6444:	61 34       	cpi	r22, 0x41	; 65
    6446:	1c f0       	brlt	.+6      	; 0x644e <strncasecmp+0x22>
    6448:	6b 35       	cpi	r22, 0x5B	; 91
    644a:	0c f4       	brge	.+2      	; 0x644e <strncasecmp+0x22>
    644c:	60 5e       	subi	r22, 0xE0	; 224
    644e:	86 1b       	sub	r24, r22
    6450:	61 11       	cpse	r22, r1
    6452:	71 f3       	breq	.-36     	; 0x6430 <strncasecmp+0x4>
    6454:	99 0b       	sbc	r25, r25
    6456:	08 95       	ret
    6458:	88 1b       	sub	r24, r24
    645a:	fc cf       	rjmp	.-8      	; 0x6454 <strncasecmp+0x28>

0000645c <printf>:
    645c:	cf 93       	push	r28
    645e:	df 93       	push	r29
    6460:	cd b7       	in	r28, 0x3d	; 61
    6462:	de b7       	in	r29, 0x3e	; 62
    6464:	ae 01       	movw	r20, r28
    6466:	4a 5f       	subi	r20, 0xFA	; 250
    6468:	5f 4f       	sbci	r21, 0xFF	; 255
    646a:	fa 01       	movw	r30, r20
    646c:	61 91       	ld	r22, Z+
    646e:	71 91       	ld	r23, Z+
    6470:	af 01       	movw	r20, r30
    6472:	80 91 17 19 	lds	r24, 0x1917	; 0x801917 <__iob+0x2>
    6476:	90 91 18 19 	lds	r25, 0x1918	; 0x801918 <__iob+0x3>
    647a:	61 d0       	rcall	.+194    	; 0x653e <vfprintf>
    647c:	df 91       	pop	r29
    647e:	cf 91       	pop	r28
    6480:	08 95       	ret

00006482 <puts>:
    6482:	0f 93       	push	r16
    6484:	1f 93       	push	r17
    6486:	cf 93       	push	r28
    6488:	df 93       	push	r29
    648a:	e0 91 17 19 	lds	r30, 0x1917	; 0x801917 <__iob+0x2>
    648e:	f0 91 18 19 	lds	r31, 0x1918	; 0x801918 <__iob+0x3>
    6492:	23 81       	ldd	r18, Z+3	; 0x03
    6494:	21 ff       	sbrs	r18, 1
    6496:	1b c0       	rjmp	.+54     	; 0x64ce <puts+0x4c>
    6498:	8c 01       	movw	r16, r24
    649a:	d0 e0       	ldi	r29, 0x00	; 0
    649c:	c0 e0       	ldi	r28, 0x00	; 0
    649e:	f8 01       	movw	r30, r16
    64a0:	81 91       	ld	r24, Z+
    64a2:	8f 01       	movw	r16, r30
    64a4:	60 91 17 19 	lds	r22, 0x1917	; 0x801917 <__iob+0x2>
    64a8:	70 91 18 19 	lds	r23, 0x1918	; 0x801918 <__iob+0x3>
    64ac:	db 01       	movw	r26, r22
    64ae:	18 96       	adiw	r26, 0x08	; 8
    64b0:	ed 91       	ld	r30, X+
    64b2:	fc 91       	ld	r31, X
    64b4:	19 97       	sbiw	r26, 0x09	; 9
    64b6:	88 23       	and	r24, r24
    64b8:	31 f0       	breq	.+12     	; 0x64c6 <puts+0x44>
    64ba:	19 95       	eicall
    64bc:	89 2b       	or	r24, r25
    64be:	79 f3       	breq	.-34     	; 0x649e <puts+0x1c>
    64c0:	df ef       	ldi	r29, 0xFF	; 255
    64c2:	cf ef       	ldi	r28, 0xFF	; 255
    64c4:	ec cf       	rjmp	.-40     	; 0x649e <puts+0x1c>
    64c6:	8a e0       	ldi	r24, 0x0A	; 10
    64c8:	19 95       	eicall
    64ca:	89 2b       	or	r24, r25
    64cc:	19 f0       	breq	.+6      	; 0x64d4 <puts+0x52>
    64ce:	8f ef       	ldi	r24, 0xFF	; 255
    64d0:	9f ef       	ldi	r25, 0xFF	; 255
    64d2:	02 c0       	rjmp	.+4      	; 0x64d8 <puts+0x56>
    64d4:	8d 2f       	mov	r24, r29
    64d6:	9c 2f       	mov	r25, r28
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	1f 91       	pop	r17
    64de:	0f 91       	pop	r16
    64e0:	08 95       	ret

000064e2 <sprintf>:
    64e2:	0f 93       	push	r16
    64e4:	1f 93       	push	r17
    64e6:	cf 93       	push	r28
    64e8:	df 93       	push	r29
    64ea:	cd b7       	in	r28, 0x3d	; 61
    64ec:	de b7       	in	r29, 0x3e	; 62
    64ee:	2e 97       	sbiw	r28, 0x0e	; 14
    64f0:	0f b6       	in	r0, 0x3f	; 63
    64f2:	f8 94       	cli
    64f4:	de bf       	out	0x3e, r29	; 62
    64f6:	0f be       	out	0x3f, r0	; 63
    64f8:	cd bf       	out	0x3d, r28	; 61
    64fa:	0e 89       	ldd	r16, Y+22	; 0x16
    64fc:	1f 89       	ldd	r17, Y+23	; 0x17
    64fe:	86 e0       	ldi	r24, 0x06	; 6
    6500:	8c 83       	std	Y+4, r24	; 0x04
    6502:	1a 83       	std	Y+2, r17	; 0x02
    6504:	09 83       	std	Y+1, r16	; 0x01
    6506:	8f ef       	ldi	r24, 0xFF	; 255
    6508:	9f e7       	ldi	r25, 0x7F	; 127
    650a:	9e 83       	std	Y+6, r25	; 0x06
    650c:	8d 83       	std	Y+5, r24	; 0x05
    650e:	ae 01       	movw	r20, r28
    6510:	46 5e       	subi	r20, 0xE6	; 230
    6512:	5f 4f       	sbci	r21, 0xFF	; 255
    6514:	68 8d       	ldd	r22, Y+24	; 0x18
    6516:	79 8d       	ldd	r23, Y+25	; 0x19
    6518:	ce 01       	movw	r24, r28
    651a:	01 96       	adiw	r24, 0x01	; 1
    651c:	10 d0       	rcall	.+32     	; 0x653e <vfprintf>
    651e:	ef 81       	ldd	r30, Y+7	; 0x07
    6520:	f8 85       	ldd	r31, Y+8	; 0x08
    6522:	e0 0f       	add	r30, r16
    6524:	f1 1f       	adc	r31, r17
    6526:	10 82       	st	Z, r1
    6528:	2e 96       	adiw	r28, 0x0e	; 14
    652a:	0f b6       	in	r0, 0x3f	; 63
    652c:	f8 94       	cli
    652e:	de bf       	out	0x3e, r29	; 62
    6530:	0f be       	out	0x3f, r0	; 63
    6532:	cd bf       	out	0x3d, r28	; 61
    6534:	df 91       	pop	r29
    6536:	cf 91       	pop	r28
    6538:	1f 91       	pop	r17
    653a:	0f 91       	pop	r16
    653c:	08 95       	ret

0000653e <vfprintf>:
    653e:	2f 92       	push	r2
    6540:	3f 92       	push	r3
    6542:	4f 92       	push	r4
    6544:	5f 92       	push	r5
    6546:	6f 92       	push	r6
    6548:	7f 92       	push	r7
    654a:	8f 92       	push	r8
    654c:	9f 92       	push	r9
    654e:	af 92       	push	r10
    6550:	bf 92       	push	r11
    6552:	cf 92       	push	r12
    6554:	df 92       	push	r13
    6556:	ef 92       	push	r14
    6558:	ff 92       	push	r15
    655a:	0f 93       	push	r16
    655c:	1f 93       	push	r17
    655e:	cf 93       	push	r28
    6560:	df 93       	push	r29
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
    6566:	2b 97       	sbiw	r28, 0x0b	; 11
    6568:	0f b6       	in	r0, 0x3f	; 63
    656a:	f8 94       	cli
    656c:	de bf       	out	0x3e, r29	; 62
    656e:	0f be       	out	0x3f, r0	; 63
    6570:	cd bf       	out	0x3d, r28	; 61
    6572:	6c 01       	movw	r12, r24
    6574:	7b 01       	movw	r14, r22
    6576:	8a 01       	movw	r16, r20
    6578:	fc 01       	movw	r30, r24
    657a:	17 82       	std	Z+7, r1	; 0x07
    657c:	16 82       	std	Z+6, r1	; 0x06
    657e:	83 81       	ldd	r24, Z+3	; 0x03
    6580:	81 ff       	sbrs	r24, 1
    6582:	bf c1       	rjmp	.+894    	; 0x6902 <vfprintf+0x3c4>
    6584:	ce 01       	movw	r24, r28
    6586:	01 96       	adiw	r24, 0x01	; 1
    6588:	3c 01       	movw	r6, r24
    658a:	f6 01       	movw	r30, r12
    658c:	93 81       	ldd	r25, Z+3	; 0x03
    658e:	f7 01       	movw	r30, r14
    6590:	93 fd       	sbrc	r25, 3
    6592:	85 91       	lpm	r24, Z+
    6594:	93 ff       	sbrs	r25, 3
    6596:	81 91       	ld	r24, Z+
    6598:	7f 01       	movw	r14, r30
    659a:	88 23       	and	r24, r24
    659c:	09 f4       	brne	.+2      	; 0x65a0 <vfprintf+0x62>
    659e:	ad c1       	rjmp	.+858    	; 0x68fa <vfprintf+0x3bc>
    65a0:	85 32       	cpi	r24, 0x25	; 37
    65a2:	39 f4       	brne	.+14     	; 0x65b2 <vfprintf+0x74>
    65a4:	93 fd       	sbrc	r25, 3
    65a6:	85 91       	lpm	r24, Z+
    65a8:	93 ff       	sbrs	r25, 3
    65aa:	81 91       	ld	r24, Z+
    65ac:	7f 01       	movw	r14, r30
    65ae:	85 32       	cpi	r24, 0x25	; 37
    65b0:	21 f4       	brne	.+8      	; 0x65ba <vfprintf+0x7c>
    65b2:	b6 01       	movw	r22, r12
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	d6 d1       	rcall	.+940    	; 0x6964 <fputc>
    65b8:	e8 cf       	rjmp	.-48     	; 0x658a <vfprintf+0x4c>
    65ba:	91 2c       	mov	r9, r1
    65bc:	21 2c       	mov	r2, r1
    65be:	31 2c       	mov	r3, r1
    65c0:	ff e1       	ldi	r31, 0x1F	; 31
    65c2:	f3 15       	cp	r31, r3
    65c4:	d8 f0       	brcs	.+54     	; 0x65fc <vfprintf+0xbe>
    65c6:	8b 32       	cpi	r24, 0x2B	; 43
    65c8:	79 f0       	breq	.+30     	; 0x65e8 <vfprintf+0xaa>
    65ca:	38 f4       	brcc	.+14     	; 0x65da <vfprintf+0x9c>
    65cc:	80 32       	cpi	r24, 0x20	; 32
    65ce:	79 f0       	breq	.+30     	; 0x65ee <vfprintf+0xb0>
    65d0:	83 32       	cpi	r24, 0x23	; 35
    65d2:	a1 f4       	brne	.+40     	; 0x65fc <vfprintf+0xbe>
    65d4:	23 2d       	mov	r18, r3
    65d6:	20 61       	ori	r18, 0x10	; 16
    65d8:	1d c0       	rjmp	.+58     	; 0x6614 <vfprintf+0xd6>
    65da:	8d 32       	cpi	r24, 0x2D	; 45
    65dc:	61 f0       	breq	.+24     	; 0x65f6 <vfprintf+0xb8>
    65de:	80 33       	cpi	r24, 0x30	; 48
    65e0:	69 f4       	brne	.+26     	; 0x65fc <vfprintf+0xbe>
    65e2:	23 2d       	mov	r18, r3
    65e4:	21 60       	ori	r18, 0x01	; 1
    65e6:	16 c0       	rjmp	.+44     	; 0x6614 <vfprintf+0xd6>
    65e8:	83 2d       	mov	r24, r3
    65ea:	82 60       	ori	r24, 0x02	; 2
    65ec:	38 2e       	mov	r3, r24
    65ee:	e3 2d       	mov	r30, r3
    65f0:	e4 60       	ori	r30, 0x04	; 4
    65f2:	3e 2e       	mov	r3, r30
    65f4:	2a c0       	rjmp	.+84     	; 0x664a <vfprintf+0x10c>
    65f6:	f3 2d       	mov	r31, r3
    65f8:	f8 60       	ori	r31, 0x08	; 8
    65fa:	1d c0       	rjmp	.+58     	; 0x6636 <vfprintf+0xf8>
    65fc:	37 fc       	sbrc	r3, 7
    65fe:	2d c0       	rjmp	.+90     	; 0x665a <vfprintf+0x11c>
    6600:	20 ed       	ldi	r18, 0xD0	; 208
    6602:	28 0f       	add	r18, r24
    6604:	2a 30       	cpi	r18, 0x0A	; 10
    6606:	40 f0       	brcs	.+16     	; 0x6618 <vfprintf+0xda>
    6608:	8e 32       	cpi	r24, 0x2E	; 46
    660a:	b9 f4       	brne	.+46     	; 0x663a <vfprintf+0xfc>
    660c:	36 fc       	sbrc	r3, 6
    660e:	75 c1       	rjmp	.+746    	; 0x68fa <vfprintf+0x3bc>
    6610:	23 2d       	mov	r18, r3
    6612:	20 64       	ori	r18, 0x40	; 64
    6614:	32 2e       	mov	r3, r18
    6616:	19 c0       	rjmp	.+50     	; 0x664a <vfprintf+0x10c>
    6618:	36 fe       	sbrs	r3, 6
    661a:	06 c0       	rjmp	.+12     	; 0x6628 <vfprintf+0xea>
    661c:	8a e0       	ldi	r24, 0x0A	; 10
    661e:	98 9e       	mul	r9, r24
    6620:	20 0d       	add	r18, r0
    6622:	11 24       	eor	r1, r1
    6624:	92 2e       	mov	r9, r18
    6626:	11 c0       	rjmp	.+34     	; 0x664a <vfprintf+0x10c>
    6628:	ea e0       	ldi	r30, 0x0A	; 10
    662a:	2e 9e       	mul	r2, r30
    662c:	20 0d       	add	r18, r0
    662e:	11 24       	eor	r1, r1
    6630:	22 2e       	mov	r2, r18
    6632:	f3 2d       	mov	r31, r3
    6634:	f0 62       	ori	r31, 0x20	; 32
    6636:	3f 2e       	mov	r3, r31
    6638:	08 c0       	rjmp	.+16     	; 0x664a <vfprintf+0x10c>
    663a:	8c 36       	cpi	r24, 0x6C	; 108
    663c:	21 f4       	brne	.+8      	; 0x6646 <vfprintf+0x108>
    663e:	83 2d       	mov	r24, r3
    6640:	80 68       	ori	r24, 0x80	; 128
    6642:	38 2e       	mov	r3, r24
    6644:	02 c0       	rjmp	.+4      	; 0x664a <vfprintf+0x10c>
    6646:	88 36       	cpi	r24, 0x68	; 104
    6648:	41 f4       	brne	.+16     	; 0x665a <vfprintf+0x11c>
    664a:	f7 01       	movw	r30, r14
    664c:	93 fd       	sbrc	r25, 3
    664e:	85 91       	lpm	r24, Z+
    6650:	93 ff       	sbrs	r25, 3
    6652:	81 91       	ld	r24, Z+
    6654:	7f 01       	movw	r14, r30
    6656:	81 11       	cpse	r24, r1
    6658:	b3 cf       	rjmp	.-154    	; 0x65c0 <vfprintf+0x82>
    665a:	98 2f       	mov	r25, r24
    665c:	9f 7d       	andi	r25, 0xDF	; 223
    665e:	95 54       	subi	r25, 0x45	; 69
    6660:	93 30       	cpi	r25, 0x03	; 3
    6662:	28 f4       	brcc	.+10     	; 0x666e <vfprintf+0x130>
    6664:	0c 5f       	subi	r16, 0xFC	; 252
    6666:	1f 4f       	sbci	r17, 0xFF	; 255
    6668:	9f e3       	ldi	r25, 0x3F	; 63
    666a:	99 83       	std	Y+1, r25	; 0x01
    666c:	0d c0       	rjmp	.+26     	; 0x6688 <vfprintf+0x14a>
    666e:	83 36       	cpi	r24, 0x63	; 99
    6670:	31 f0       	breq	.+12     	; 0x667e <vfprintf+0x140>
    6672:	83 37       	cpi	r24, 0x73	; 115
    6674:	71 f0       	breq	.+28     	; 0x6692 <vfprintf+0x154>
    6676:	83 35       	cpi	r24, 0x53	; 83
    6678:	09 f0       	breq	.+2      	; 0x667c <vfprintf+0x13e>
    667a:	55 c0       	rjmp	.+170    	; 0x6726 <vfprintf+0x1e8>
    667c:	20 c0       	rjmp	.+64     	; 0x66be <vfprintf+0x180>
    667e:	f8 01       	movw	r30, r16
    6680:	80 81       	ld	r24, Z
    6682:	89 83       	std	Y+1, r24	; 0x01
    6684:	0e 5f       	subi	r16, 0xFE	; 254
    6686:	1f 4f       	sbci	r17, 0xFF	; 255
    6688:	88 24       	eor	r8, r8
    668a:	83 94       	inc	r8
    668c:	91 2c       	mov	r9, r1
    668e:	53 01       	movw	r10, r6
    6690:	12 c0       	rjmp	.+36     	; 0x66b6 <vfprintf+0x178>
    6692:	28 01       	movw	r4, r16
    6694:	f2 e0       	ldi	r31, 0x02	; 2
    6696:	4f 0e       	add	r4, r31
    6698:	51 1c       	adc	r5, r1
    669a:	f8 01       	movw	r30, r16
    669c:	a0 80       	ld	r10, Z
    669e:	b1 80       	ldd	r11, Z+1	; 0x01
    66a0:	36 fe       	sbrs	r3, 6
    66a2:	03 c0       	rjmp	.+6      	; 0x66aa <vfprintf+0x16c>
    66a4:	69 2d       	mov	r22, r9
    66a6:	70 e0       	ldi	r23, 0x00	; 0
    66a8:	02 c0       	rjmp	.+4      	; 0x66ae <vfprintf+0x170>
    66aa:	6f ef       	ldi	r22, 0xFF	; 255
    66ac:	7f ef       	ldi	r23, 0xFF	; 255
    66ae:	c5 01       	movw	r24, r10
    66b0:	4e d1       	rcall	.+668    	; 0x694e <strnlen>
    66b2:	4c 01       	movw	r8, r24
    66b4:	82 01       	movw	r16, r4
    66b6:	f3 2d       	mov	r31, r3
    66b8:	ff 77       	andi	r31, 0x7F	; 127
    66ba:	3f 2e       	mov	r3, r31
    66bc:	15 c0       	rjmp	.+42     	; 0x66e8 <vfprintf+0x1aa>
    66be:	28 01       	movw	r4, r16
    66c0:	22 e0       	ldi	r18, 0x02	; 2
    66c2:	42 0e       	add	r4, r18
    66c4:	51 1c       	adc	r5, r1
    66c6:	f8 01       	movw	r30, r16
    66c8:	a0 80       	ld	r10, Z
    66ca:	b1 80       	ldd	r11, Z+1	; 0x01
    66cc:	36 fe       	sbrs	r3, 6
    66ce:	03 c0       	rjmp	.+6      	; 0x66d6 <vfprintf+0x198>
    66d0:	69 2d       	mov	r22, r9
    66d2:	70 e0       	ldi	r23, 0x00	; 0
    66d4:	02 c0       	rjmp	.+4      	; 0x66da <vfprintf+0x19c>
    66d6:	6f ef       	ldi	r22, 0xFF	; 255
    66d8:	7f ef       	ldi	r23, 0xFF	; 255
    66da:	c5 01       	movw	r24, r10
    66dc:	2d d1       	rcall	.+602    	; 0x6938 <strnlen_P>
    66de:	4c 01       	movw	r8, r24
    66e0:	f3 2d       	mov	r31, r3
    66e2:	f0 68       	ori	r31, 0x80	; 128
    66e4:	3f 2e       	mov	r3, r31
    66e6:	82 01       	movw	r16, r4
    66e8:	33 fc       	sbrc	r3, 3
    66ea:	19 c0       	rjmp	.+50     	; 0x671e <vfprintf+0x1e0>
    66ec:	82 2d       	mov	r24, r2
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	88 16       	cp	r8, r24
    66f2:	99 06       	cpc	r9, r25
    66f4:	a0 f4       	brcc	.+40     	; 0x671e <vfprintf+0x1e0>
    66f6:	b6 01       	movw	r22, r12
    66f8:	80 e2       	ldi	r24, 0x20	; 32
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	33 d1       	rcall	.+614    	; 0x6964 <fputc>
    66fe:	2a 94       	dec	r2
    6700:	f5 cf       	rjmp	.-22     	; 0x66ec <vfprintf+0x1ae>
    6702:	f5 01       	movw	r30, r10
    6704:	37 fc       	sbrc	r3, 7
    6706:	85 91       	lpm	r24, Z+
    6708:	37 fe       	sbrs	r3, 7
    670a:	81 91       	ld	r24, Z+
    670c:	5f 01       	movw	r10, r30
    670e:	b6 01       	movw	r22, r12
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	28 d1       	rcall	.+592    	; 0x6964 <fputc>
    6714:	21 10       	cpse	r2, r1
    6716:	2a 94       	dec	r2
    6718:	21 e0       	ldi	r18, 0x01	; 1
    671a:	82 1a       	sub	r8, r18
    671c:	91 08       	sbc	r9, r1
    671e:	81 14       	cp	r8, r1
    6720:	91 04       	cpc	r9, r1
    6722:	79 f7       	brne	.-34     	; 0x6702 <vfprintf+0x1c4>
    6724:	e1 c0       	rjmp	.+450    	; 0x68e8 <vfprintf+0x3aa>
    6726:	84 36       	cpi	r24, 0x64	; 100
    6728:	11 f0       	breq	.+4      	; 0x672e <vfprintf+0x1f0>
    672a:	89 36       	cpi	r24, 0x69	; 105
    672c:	39 f5       	brne	.+78     	; 0x677c <vfprintf+0x23e>
    672e:	f8 01       	movw	r30, r16
    6730:	37 fe       	sbrs	r3, 7
    6732:	07 c0       	rjmp	.+14     	; 0x6742 <vfprintf+0x204>
    6734:	60 81       	ld	r22, Z
    6736:	71 81       	ldd	r23, Z+1	; 0x01
    6738:	82 81       	ldd	r24, Z+2	; 0x02
    673a:	93 81       	ldd	r25, Z+3	; 0x03
    673c:	0c 5f       	subi	r16, 0xFC	; 252
    673e:	1f 4f       	sbci	r17, 0xFF	; 255
    6740:	08 c0       	rjmp	.+16     	; 0x6752 <vfprintf+0x214>
    6742:	60 81       	ld	r22, Z
    6744:	71 81       	ldd	r23, Z+1	; 0x01
    6746:	07 2e       	mov	r0, r23
    6748:	00 0c       	add	r0, r0
    674a:	88 0b       	sbc	r24, r24
    674c:	99 0b       	sbc	r25, r25
    674e:	0e 5f       	subi	r16, 0xFE	; 254
    6750:	1f 4f       	sbci	r17, 0xFF	; 255
    6752:	f3 2d       	mov	r31, r3
    6754:	ff 76       	andi	r31, 0x6F	; 111
    6756:	3f 2e       	mov	r3, r31
    6758:	97 ff       	sbrs	r25, 7
    675a:	09 c0       	rjmp	.+18     	; 0x676e <vfprintf+0x230>
    675c:	90 95       	com	r25
    675e:	80 95       	com	r24
    6760:	70 95       	com	r23
    6762:	61 95       	neg	r22
    6764:	7f 4f       	sbci	r23, 0xFF	; 255
    6766:	8f 4f       	sbci	r24, 0xFF	; 255
    6768:	9f 4f       	sbci	r25, 0xFF	; 255
    676a:	f0 68       	ori	r31, 0x80	; 128
    676c:	3f 2e       	mov	r3, r31
    676e:	2a e0       	ldi	r18, 0x0A	; 10
    6770:	30 e0       	ldi	r19, 0x00	; 0
    6772:	a3 01       	movw	r20, r6
    6774:	33 d1       	rcall	.+614    	; 0x69dc <__ultoa_invert>
    6776:	88 2e       	mov	r8, r24
    6778:	86 18       	sub	r8, r6
    677a:	44 c0       	rjmp	.+136    	; 0x6804 <vfprintf+0x2c6>
    677c:	85 37       	cpi	r24, 0x75	; 117
    677e:	31 f4       	brne	.+12     	; 0x678c <vfprintf+0x24e>
    6780:	23 2d       	mov	r18, r3
    6782:	2f 7e       	andi	r18, 0xEF	; 239
    6784:	b2 2e       	mov	r11, r18
    6786:	2a e0       	ldi	r18, 0x0A	; 10
    6788:	30 e0       	ldi	r19, 0x00	; 0
    678a:	25 c0       	rjmp	.+74     	; 0x67d6 <vfprintf+0x298>
    678c:	93 2d       	mov	r25, r3
    678e:	99 7f       	andi	r25, 0xF9	; 249
    6790:	b9 2e       	mov	r11, r25
    6792:	8f 36       	cpi	r24, 0x6F	; 111
    6794:	c1 f0       	breq	.+48     	; 0x67c6 <vfprintf+0x288>
    6796:	18 f4       	brcc	.+6      	; 0x679e <vfprintf+0x260>
    6798:	88 35       	cpi	r24, 0x58	; 88
    679a:	79 f0       	breq	.+30     	; 0x67ba <vfprintf+0x27c>
    679c:	ae c0       	rjmp	.+348    	; 0x68fa <vfprintf+0x3bc>
    679e:	80 37       	cpi	r24, 0x70	; 112
    67a0:	19 f0       	breq	.+6      	; 0x67a8 <vfprintf+0x26a>
    67a2:	88 37       	cpi	r24, 0x78	; 120
    67a4:	21 f0       	breq	.+8      	; 0x67ae <vfprintf+0x270>
    67a6:	a9 c0       	rjmp	.+338    	; 0x68fa <vfprintf+0x3bc>
    67a8:	e9 2f       	mov	r30, r25
    67aa:	e0 61       	ori	r30, 0x10	; 16
    67ac:	be 2e       	mov	r11, r30
    67ae:	b4 fe       	sbrs	r11, 4
    67b0:	0d c0       	rjmp	.+26     	; 0x67cc <vfprintf+0x28e>
    67b2:	fb 2d       	mov	r31, r11
    67b4:	f4 60       	ori	r31, 0x04	; 4
    67b6:	bf 2e       	mov	r11, r31
    67b8:	09 c0       	rjmp	.+18     	; 0x67cc <vfprintf+0x28e>
    67ba:	34 fe       	sbrs	r3, 4
    67bc:	0a c0       	rjmp	.+20     	; 0x67d2 <vfprintf+0x294>
    67be:	29 2f       	mov	r18, r25
    67c0:	26 60       	ori	r18, 0x06	; 6
    67c2:	b2 2e       	mov	r11, r18
    67c4:	06 c0       	rjmp	.+12     	; 0x67d2 <vfprintf+0x294>
    67c6:	28 e0       	ldi	r18, 0x08	; 8
    67c8:	30 e0       	ldi	r19, 0x00	; 0
    67ca:	05 c0       	rjmp	.+10     	; 0x67d6 <vfprintf+0x298>
    67cc:	20 e1       	ldi	r18, 0x10	; 16
    67ce:	30 e0       	ldi	r19, 0x00	; 0
    67d0:	02 c0       	rjmp	.+4      	; 0x67d6 <vfprintf+0x298>
    67d2:	20 e1       	ldi	r18, 0x10	; 16
    67d4:	32 e0       	ldi	r19, 0x02	; 2
    67d6:	f8 01       	movw	r30, r16
    67d8:	b7 fe       	sbrs	r11, 7
    67da:	07 c0       	rjmp	.+14     	; 0x67ea <vfprintf+0x2ac>
    67dc:	60 81       	ld	r22, Z
    67de:	71 81       	ldd	r23, Z+1	; 0x01
    67e0:	82 81       	ldd	r24, Z+2	; 0x02
    67e2:	93 81       	ldd	r25, Z+3	; 0x03
    67e4:	0c 5f       	subi	r16, 0xFC	; 252
    67e6:	1f 4f       	sbci	r17, 0xFF	; 255
    67e8:	06 c0       	rjmp	.+12     	; 0x67f6 <vfprintf+0x2b8>
    67ea:	60 81       	ld	r22, Z
    67ec:	71 81       	ldd	r23, Z+1	; 0x01
    67ee:	80 e0       	ldi	r24, 0x00	; 0
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	0e 5f       	subi	r16, 0xFE	; 254
    67f4:	1f 4f       	sbci	r17, 0xFF	; 255
    67f6:	a3 01       	movw	r20, r6
    67f8:	f1 d0       	rcall	.+482    	; 0x69dc <__ultoa_invert>
    67fa:	88 2e       	mov	r8, r24
    67fc:	86 18       	sub	r8, r6
    67fe:	fb 2d       	mov	r31, r11
    6800:	ff 77       	andi	r31, 0x7F	; 127
    6802:	3f 2e       	mov	r3, r31
    6804:	36 fe       	sbrs	r3, 6
    6806:	0d c0       	rjmp	.+26     	; 0x6822 <vfprintf+0x2e4>
    6808:	23 2d       	mov	r18, r3
    680a:	2e 7f       	andi	r18, 0xFE	; 254
    680c:	a2 2e       	mov	r10, r18
    680e:	89 14       	cp	r8, r9
    6810:	58 f4       	brcc	.+22     	; 0x6828 <vfprintf+0x2ea>
    6812:	34 fe       	sbrs	r3, 4
    6814:	0b c0       	rjmp	.+22     	; 0x682c <vfprintf+0x2ee>
    6816:	32 fc       	sbrc	r3, 2
    6818:	09 c0       	rjmp	.+18     	; 0x682c <vfprintf+0x2ee>
    681a:	83 2d       	mov	r24, r3
    681c:	8e 7e       	andi	r24, 0xEE	; 238
    681e:	a8 2e       	mov	r10, r24
    6820:	05 c0       	rjmp	.+10     	; 0x682c <vfprintf+0x2ee>
    6822:	b8 2c       	mov	r11, r8
    6824:	a3 2c       	mov	r10, r3
    6826:	03 c0       	rjmp	.+6      	; 0x682e <vfprintf+0x2f0>
    6828:	b8 2c       	mov	r11, r8
    682a:	01 c0       	rjmp	.+2      	; 0x682e <vfprintf+0x2f0>
    682c:	b9 2c       	mov	r11, r9
    682e:	a4 fe       	sbrs	r10, 4
    6830:	0f c0       	rjmp	.+30     	; 0x6850 <vfprintf+0x312>
    6832:	fe 01       	movw	r30, r28
    6834:	e8 0d       	add	r30, r8
    6836:	f1 1d       	adc	r31, r1
    6838:	80 81       	ld	r24, Z
    683a:	80 33       	cpi	r24, 0x30	; 48
    683c:	21 f4       	brne	.+8      	; 0x6846 <vfprintf+0x308>
    683e:	9a 2d       	mov	r25, r10
    6840:	99 7e       	andi	r25, 0xE9	; 233
    6842:	a9 2e       	mov	r10, r25
    6844:	09 c0       	rjmp	.+18     	; 0x6858 <vfprintf+0x31a>
    6846:	a2 fe       	sbrs	r10, 2
    6848:	06 c0       	rjmp	.+12     	; 0x6856 <vfprintf+0x318>
    684a:	b3 94       	inc	r11
    684c:	b3 94       	inc	r11
    684e:	04 c0       	rjmp	.+8      	; 0x6858 <vfprintf+0x31a>
    6850:	8a 2d       	mov	r24, r10
    6852:	86 78       	andi	r24, 0x86	; 134
    6854:	09 f0       	breq	.+2      	; 0x6858 <vfprintf+0x31a>
    6856:	b3 94       	inc	r11
    6858:	a3 fc       	sbrc	r10, 3
    685a:	10 c0       	rjmp	.+32     	; 0x687c <vfprintf+0x33e>
    685c:	a0 fe       	sbrs	r10, 0
    685e:	06 c0       	rjmp	.+12     	; 0x686c <vfprintf+0x32e>
    6860:	b2 14       	cp	r11, r2
    6862:	80 f4       	brcc	.+32     	; 0x6884 <vfprintf+0x346>
    6864:	28 0c       	add	r2, r8
    6866:	92 2c       	mov	r9, r2
    6868:	9b 18       	sub	r9, r11
    686a:	0d c0       	rjmp	.+26     	; 0x6886 <vfprintf+0x348>
    686c:	b2 14       	cp	r11, r2
    686e:	58 f4       	brcc	.+22     	; 0x6886 <vfprintf+0x348>
    6870:	b6 01       	movw	r22, r12
    6872:	80 e2       	ldi	r24, 0x20	; 32
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	76 d0       	rcall	.+236    	; 0x6964 <fputc>
    6878:	b3 94       	inc	r11
    687a:	f8 cf       	rjmp	.-16     	; 0x686c <vfprintf+0x32e>
    687c:	b2 14       	cp	r11, r2
    687e:	18 f4       	brcc	.+6      	; 0x6886 <vfprintf+0x348>
    6880:	2b 18       	sub	r2, r11
    6882:	02 c0       	rjmp	.+4      	; 0x6888 <vfprintf+0x34a>
    6884:	98 2c       	mov	r9, r8
    6886:	21 2c       	mov	r2, r1
    6888:	a4 fe       	sbrs	r10, 4
    688a:	0f c0       	rjmp	.+30     	; 0x68aa <vfprintf+0x36c>
    688c:	b6 01       	movw	r22, r12
    688e:	80 e3       	ldi	r24, 0x30	; 48
    6890:	90 e0       	ldi	r25, 0x00	; 0
    6892:	68 d0       	rcall	.+208    	; 0x6964 <fputc>
    6894:	a2 fe       	sbrs	r10, 2
    6896:	16 c0       	rjmp	.+44     	; 0x68c4 <vfprintf+0x386>
    6898:	a1 fc       	sbrc	r10, 1
    689a:	03 c0       	rjmp	.+6      	; 0x68a2 <vfprintf+0x364>
    689c:	88 e7       	ldi	r24, 0x78	; 120
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	02 c0       	rjmp	.+4      	; 0x68a6 <vfprintf+0x368>
    68a2:	88 e5       	ldi	r24, 0x58	; 88
    68a4:	90 e0       	ldi	r25, 0x00	; 0
    68a6:	b6 01       	movw	r22, r12
    68a8:	0c c0       	rjmp	.+24     	; 0x68c2 <vfprintf+0x384>
    68aa:	8a 2d       	mov	r24, r10
    68ac:	86 78       	andi	r24, 0x86	; 134
    68ae:	51 f0       	breq	.+20     	; 0x68c4 <vfprintf+0x386>
    68b0:	a1 fe       	sbrs	r10, 1
    68b2:	02 c0       	rjmp	.+4      	; 0x68b8 <vfprintf+0x37a>
    68b4:	8b e2       	ldi	r24, 0x2B	; 43
    68b6:	01 c0       	rjmp	.+2      	; 0x68ba <vfprintf+0x37c>
    68b8:	80 e2       	ldi	r24, 0x20	; 32
    68ba:	a7 fc       	sbrc	r10, 7
    68bc:	8d e2       	ldi	r24, 0x2D	; 45
    68be:	b6 01       	movw	r22, r12
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	50 d0       	rcall	.+160    	; 0x6964 <fputc>
    68c4:	89 14       	cp	r8, r9
    68c6:	30 f4       	brcc	.+12     	; 0x68d4 <vfprintf+0x396>
    68c8:	b6 01       	movw	r22, r12
    68ca:	80 e3       	ldi	r24, 0x30	; 48
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	4a d0       	rcall	.+148    	; 0x6964 <fputc>
    68d0:	9a 94       	dec	r9
    68d2:	f8 cf       	rjmp	.-16     	; 0x68c4 <vfprintf+0x386>
    68d4:	8a 94       	dec	r8
    68d6:	f3 01       	movw	r30, r6
    68d8:	e8 0d       	add	r30, r8
    68da:	f1 1d       	adc	r31, r1
    68dc:	80 81       	ld	r24, Z
    68de:	b6 01       	movw	r22, r12
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	40 d0       	rcall	.+128    	; 0x6964 <fputc>
    68e4:	81 10       	cpse	r8, r1
    68e6:	f6 cf       	rjmp	.-20     	; 0x68d4 <vfprintf+0x396>
    68e8:	22 20       	and	r2, r2
    68ea:	09 f4       	brne	.+2      	; 0x68ee <vfprintf+0x3b0>
    68ec:	4e ce       	rjmp	.-868    	; 0x658a <vfprintf+0x4c>
    68ee:	b6 01       	movw	r22, r12
    68f0:	80 e2       	ldi	r24, 0x20	; 32
    68f2:	90 e0       	ldi	r25, 0x00	; 0
    68f4:	37 d0       	rcall	.+110    	; 0x6964 <fputc>
    68f6:	2a 94       	dec	r2
    68f8:	f7 cf       	rjmp	.-18     	; 0x68e8 <vfprintf+0x3aa>
    68fa:	f6 01       	movw	r30, r12
    68fc:	86 81       	ldd	r24, Z+6	; 0x06
    68fe:	97 81       	ldd	r25, Z+7	; 0x07
    6900:	02 c0       	rjmp	.+4      	; 0x6906 <vfprintf+0x3c8>
    6902:	8f ef       	ldi	r24, 0xFF	; 255
    6904:	9f ef       	ldi	r25, 0xFF	; 255
    6906:	2b 96       	adiw	r28, 0x0b	; 11
    6908:	0f b6       	in	r0, 0x3f	; 63
    690a:	f8 94       	cli
    690c:	de bf       	out	0x3e, r29	; 62
    690e:	0f be       	out	0x3f, r0	; 63
    6910:	cd bf       	out	0x3d, r28	; 61
    6912:	df 91       	pop	r29
    6914:	cf 91       	pop	r28
    6916:	1f 91       	pop	r17
    6918:	0f 91       	pop	r16
    691a:	ff 90       	pop	r15
    691c:	ef 90       	pop	r14
    691e:	df 90       	pop	r13
    6920:	cf 90       	pop	r12
    6922:	bf 90       	pop	r11
    6924:	af 90       	pop	r10
    6926:	9f 90       	pop	r9
    6928:	8f 90       	pop	r8
    692a:	7f 90       	pop	r7
    692c:	6f 90       	pop	r6
    692e:	5f 90       	pop	r5
    6930:	4f 90       	pop	r4
    6932:	3f 90       	pop	r3
    6934:	2f 90       	pop	r2
    6936:	08 95       	ret

00006938 <strnlen_P>:
    6938:	fc 01       	movw	r30, r24
    693a:	05 90       	lpm	r0, Z+
    693c:	61 50       	subi	r22, 0x01	; 1
    693e:	70 40       	sbci	r23, 0x00	; 0
    6940:	01 10       	cpse	r0, r1
    6942:	d8 f7       	brcc	.-10     	; 0x693a <strnlen_P+0x2>
    6944:	80 95       	com	r24
    6946:	90 95       	com	r25
    6948:	8e 0f       	add	r24, r30
    694a:	9f 1f       	adc	r25, r31
    694c:	08 95       	ret

0000694e <strnlen>:
    694e:	fc 01       	movw	r30, r24
    6950:	61 50       	subi	r22, 0x01	; 1
    6952:	70 40       	sbci	r23, 0x00	; 0
    6954:	01 90       	ld	r0, Z+
    6956:	01 10       	cpse	r0, r1
    6958:	d8 f7       	brcc	.-10     	; 0x6950 <strnlen+0x2>
    695a:	80 95       	com	r24
    695c:	90 95       	com	r25
    695e:	8e 0f       	add	r24, r30
    6960:	9f 1f       	adc	r25, r31
    6962:	08 95       	ret

00006964 <fputc>:
    6964:	0f 93       	push	r16
    6966:	1f 93       	push	r17
    6968:	cf 93       	push	r28
    696a:	df 93       	push	r29
    696c:	fb 01       	movw	r30, r22
    696e:	23 81       	ldd	r18, Z+3	; 0x03
    6970:	21 fd       	sbrc	r18, 1
    6972:	03 c0       	rjmp	.+6      	; 0x697a <fputc+0x16>
    6974:	8f ef       	ldi	r24, 0xFF	; 255
    6976:	9f ef       	ldi	r25, 0xFF	; 255
    6978:	2c c0       	rjmp	.+88     	; 0x69d2 <fputc+0x6e>
    697a:	22 ff       	sbrs	r18, 2
    697c:	16 c0       	rjmp	.+44     	; 0x69aa <fputc+0x46>
    697e:	46 81       	ldd	r20, Z+6	; 0x06
    6980:	57 81       	ldd	r21, Z+7	; 0x07
    6982:	24 81       	ldd	r18, Z+4	; 0x04
    6984:	35 81       	ldd	r19, Z+5	; 0x05
    6986:	42 17       	cp	r20, r18
    6988:	53 07       	cpc	r21, r19
    698a:	44 f4       	brge	.+16     	; 0x699c <fputc+0x38>
    698c:	a0 81       	ld	r26, Z
    698e:	b1 81       	ldd	r27, Z+1	; 0x01
    6990:	9d 01       	movw	r18, r26
    6992:	2f 5f       	subi	r18, 0xFF	; 255
    6994:	3f 4f       	sbci	r19, 0xFF	; 255
    6996:	31 83       	std	Z+1, r19	; 0x01
    6998:	20 83       	st	Z, r18
    699a:	8c 93       	st	X, r24
    699c:	26 81       	ldd	r18, Z+6	; 0x06
    699e:	37 81       	ldd	r19, Z+7	; 0x07
    69a0:	2f 5f       	subi	r18, 0xFF	; 255
    69a2:	3f 4f       	sbci	r19, 0xFF	; 255
    69a4:	37 83       	std	Z+7, r19	; 0x07
    69a6:	26 83       	std	Z+6, r18	; 0x06
    69a8:	14 c0       	rjmp	.+40     	; 0x69d2 <fputc+0x6e>
    69aa:	8b 01       	movw	r16, r22
    69ac:	ec 01       	movw	r28, r24
    69ae:	fb 01       	movw	r30, r22
    69b0:	00 84       	ldd	r0, Z+8	; 0x08
    69b2:	f1 85       	ldd	r31, Z+9	; 0x09
    69b4:	e0 2d       	mov	r30, r0
    69b6:	19 95       	eicall
    69b8:	89 2b       	or	r24, r25
    69ba:	e1 f6       	brne	.-72     	; 0x6974 <fputc+0x10>
    69bc:	d8 01       	movw	r26, r16
    69be:	16 96       	adiw	r26, 0x06	; 6
    69c0:	8d 91       	ld	r24, X+
    69c2:	9c 91       	ld	r25, X
    69c4:	17 97       	sbiw	r26, 0x07	; 7
    69c6:	01 96       	adiw	r24, 0x01	; 1
    69c8:	17 96       	adiw	r26, 0x07	; 7
    69ca:	9c 93       	st	X, r25
    69cc:	8e 93       	st	-X, r24
    69ce:	16 97       	sbiw	r26, 0x06	; 6
    69d0:	ce 01       	movw	r24, r28
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	1f 91       	pop	r17
    69d8:	0f 91       	pop	r16
    69da:	08 95       	ret

000069dc <__ultoa_invert>:
    69dc:	fa 01       	movw	r30, r20
    69de:	aa 27       	eor	r26, r26
    69e0:	28 30       	cpi	r18, 0x08	; 8
    69e2:	51 f1       	breq	.+84     	; 0x6a38 <__ultoa_invert+0x5c>
    69e4:	20 31       	cpi	r18, 0x10	; 16
    69e6:	81 f1       	breq	.+96     	; 0x6a48 <__ultoa_invert+0x6c>
    69e8:	e8 94       	clt
    69ea:	6f 93       	push	r22
    69ec:	6e 7f       	andi	r22, 0xFE	; 254
    69ee:	6e 5f       	subi	r22, 0xFE	; 254
    69f0:	7f 4f       	sbci	r23, 0xFF	; 255
    69f2:	8f 4f       	sbci	r24, 0xFF	; 255
    69f4:	9f 4f       	sbci	r25, 0xFF	; 255
    69f6:	af 4f       	sbci	r26, 0xFF	; 255
    69f8:	b1 e0       	ldi	r27, 0x01	; 1
    69fa:	3e d0       	rcall	.+124    	; 0x6a78 <__ultoa_invert+0x9c>
    69fc:	b4 e0       	ldi	r27, 0x04	; 4
    69fe:	3c d0       	rcall	.+120    	; 0x6a78 <__ultoa_invert+0x9c>
    6a00:	67 0f       	add	r22, r23
    6a02:	78 1f       	adc	r23, r24
    6a04:	89 1f       	adc	r24, r25
    6a06:	9a 1f       	adc	r25, r26
    6a08:	a1 1d       	adc	r26, r1
    6a0a:	68 0f       	add	r22, r24
    6a0c:	79 1f       	adc	r23, r25
    6a0e:	8a 1f       	adc	r24, r26
    6a10:	91 1d       	adc	r25, r1
    6a12:	a1 1d       	adc	r26, r1
    6a14:	6a 0f       	add	r22, r26
    6a16:	71 1d       	adc	r23, r1
    6a18:	81 1d       	adc	r24, r1
    6a1a:	91 1d       	adc	r25, r1
    6a1c:	a1 1d       	adc	r26, r1
    6a1e:	20 d0       	rcall	.+64     	; 0x6a60 <__ultoa_invert+0x84>
    6a20:	09 f4       	brne	.+2      	; 0x6a24 <__ultoa_invert+0x48>
    6a22:	68 94       	set
    6a24:	3f 91       	pop	r19
    6a26:	2a e0       	ldi	r18, 0x0A	; 10
    6a28:	26 9f       	mul	r18, r22
    6a2a:	11 24       	eor	r1, r1
    6a2c:	30 19       	sub	r19, r0
    6a2e:	30 5d       	subi	r19, 0xD0	; 208
    6a30:	31 93       	st	Z+, r19
    6a32:	de f6       	brtc	.-74     	; 0x69ea <__ultoa_invert+0xe>
    6a34:	cf 01       	movw	r24, r30
    6a36:	08 95       	ret
    6a38:	46 2f       	mov	r20, r22
    6a3a:	47 70       	andi	r20, 0x07	; 7
    6a3c:	40 5d       	subi	r20, 0xD0	; 208
    6a3e:	41 93       	st	Z+, r20
    6a40:	b3 e0       	ldi	r27, 0x03	; 3
    6a42:	0f d0       	rcall	.+30     	; 0x6a62 <__ultoa_invert+0x86>
    6a44:	c9 f7       	brne	.-14     	; 0x6a38 <__ultoa_invert+0x5c>
    6a46:	f6 cf       	rjmp	.-20     	; 0x6a34 <__ultoa_invert+0x58>
    6a48:	46 2f       	mov	r20, r22
    6a4a:	4f 70       	andi	r20, 0x0F	; 15
    6a4c:	40 5d       	subi	r20, 0xD0	; 208
    6a4e:	4a 33       	cpi	r20, 0x3A	; 58
    6a50:	18 f0       	brcs	.+6      	; 0x6a58 <__ultoa_invert+0x7c>
    6a52:	49 5d       	subi	r20, 0xD9	; 217
    6a54:	31 fd       	sbrc	r19, 1
    6a56:	40 52       	subi	r20, 0x20	; 32
    6a58:	41 93       	st	Z+, r20
    6a5a:	02 d0       	rcall	.+4      	; 0x6a60 <__ultoa_invert+0x84>
    6a5c:	a9 f7       	brne	.-22     	; 0x6a48 <__ultoa_invert+0x6c>
    6a5e:	ea cf       	rjmp	.-44     	; 0x6a34 <__ultoa_invert+0x58>
    6a60:	b4 e0       	ldi	r27, 0x04	; 4
    6a62:	a6 95       	lsr	r26
    6a64:	97 95       	ror	r25
    6a66:	87 95       	ror	r24
    6a68:	77 95       	ror	r23
    6a6a:	67 95       	ror	r22
    6a6c:	ba 95       	dec	r27
    6a6e:	c9 f7       	brne	.-14     	; 0x6a62 <__ultoa_invert+0x86>
    6a70:	00 97       	sbiw	r24, 0x00	; 0
    6a72:	61 05       	cpc	r22, r1
    6a74:	71 05       	cpc	r23, r1
    6a76:	08 95       	ret
    6a78:	9b 01       	movw	r18, r22
    6a7a:	ac 01       	movw	r20, r24
    6a7c:	0a 2e       	mov	r0, r26
    6a7e:	06 94       	lsr	r0
    6a80:	57 95       	ror	r21
    6a82:	47 95       	ror	r20
    6a84:	37 95       	ror	r19
    6a86:	27 95       	ror	r18
    6a88:	ba 95       	dec	r27
    6a8a:	c9 f7       	brne	.-14     	; 0x6a7e <__ultoa_invert+0xa2>
    6a8c:	62 0f       	add	r22, r18
    6a8e:	73 1f       	adc	r23, r19
    6a90:	84 1f       	adc	r24, r20
    6a92:	95 1f       	adc	r25, r21
    6a94:	a0 1d       	adc	r26, r0
    6a96:	08 95       	ret

00006a98 <_exit>:
    6a98:	f8 94       	cli

00006a9a <__stop_program>:
    6a9a:	ff cf       	rjmp	.-2      	; 0x6a9a <__stop_program>
