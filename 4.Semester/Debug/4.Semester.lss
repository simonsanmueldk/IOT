
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  0000681e  000068b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000681e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001061  008007b0  008007b0  00006e62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006e62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e730  00000000  00000000  00007ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a56  00000000  00000000  00016218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070b3  00000000  00000000  00019c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000293c  00000000  00000000  00020d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004577  00000000  00000000  00023660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c5d5  00000000  00000000  00027bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b08  00000000  00000000  000341ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c7       	rjmp	.+3798   	; 0xf08 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <__vector_25>
      68:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 2e 28 	jmp	0x505c	; 0x505c <__vector_36>
      94:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c4 28 	jmp	0x5188	; 0x5188 <__vector_51>
      d0:	0c 94 16 29 	jmp	0x522c	; 0x522c <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <__vector_54>
      dc:	0c 94 ac 29 	jmp	0x5358	; 0x5358 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 1d       	adc	r20, r0
      e6:	40 1d       	adc	r20, r0
      e8:	40 1d       	adc	r20, r0
      ea:	77 1d       	adc	r23, r7
      ec:	7f 1d       	adc	r23, r15
      ee:	94 1d       	adc	r25, r4
      f0:	40 1d       	adc	r20, r0
      f2:	40 1d       	adc	r20, r0
      f4:	77 1d       	adc	r23, r7
      f6:	7f 1d       	adc	r23, r15
      f8:	ed 2c       	mov	r14, r13
      fa:	5d 2d       	mov	r21, r13
      fc:	5d 2d       	mov	r21, r13
      fe:	5d 2d       	mov	r21, r13
     100:	5d 2d       	mov	r21, r13
     102:	5d 2d       	mov	r21, r13
     104:	5d 2d       	mov	r21, r13
     106:	5d 2d       	mov	r21, r13
     108:	ed 2c       	mov	r14, r13
     10a:	5d 2d       	mov	r21, r13
     10c:	5d 2d       	mov	r21, r13
     10e:	5d 2d       	mov	r21, r13
     110:	5d 2d       	mov	r21, r13
     112:	5d 2d       	mov	r21, r13
     114:	5d 2d       	mov	r21, r13
     116:	5d 2d       	mov	r21, r13
     118:	ef 2c       	mov	r14, r15
     11a:	5d 2d       	mov	r21, r13
     11c:	5d 2d       	mov	r21, r13
     11e:	5d 2d       	mov	r21, r13
     120:	5d 2d       	mov	r21, r13
     122:	5d 2d       	mov	r21, r13
     124:	5d 2d       	mov	r21, r13
     126:	5d 2d       	mov	r21, r13
     128:	5d 2d       	mov	r21, r13
     12a:	5d 2d       	mov	r21, r13
     12c:	5d 2d       	mov	r21, r13
     12e:	5d 2d       	mov	r21, r13
     130:	5d 2d       	mov	r21, r13
     132:	5d 2d       	mov	r21, r13
     134:	5d 2d       	mov	r21, r13
     136:	5d 2d       	mov	r21, r13
     138:	ef 2c       	mov	r14, r15
     13a:	5d 2d       	mov	r21, r13
     13c:	5d 2d       	mov	r21, r13
     13e:	5d 2d       	mov	r21, r13
     140:	5d 2d       	mov	r21, r13
     142:	5d 2d       	mov	r21, r13
     144:	5d 2d       	mov	r21, r13
     146:	5d 2d       	mov	r21, r13
     148:	5d 2d       	mov	r21, r13
     14a:	5d 2d       	mov	r21, r13
     14c:	5d 2d       	mov	r21, r13
     14e:	5d 2d       	mov	r21, r13
     150:	5d 2d       	mov	r21, r13
     152:	5d 2d       	mov	r21, r13
     154:	5d 2d       	mov	r21, r13
     156:	5d 2d       	mov	r21, r13
     158:	59 2d       	mov	r21, r9
     15a:	5d 2d       	mov	r21, r13
     15c:	5d 2d       	mov	r21, r13
     15e:	5d 2d       	mov	r21, r13
     160:	5d 2d       	mov	r21, r13
     162:	5d 2d       	mov	r21, r13
     164:	5d 2d       	mov	r21, r13
     166:	5d 2d       	mov	r21, r13
     168:	24 2d       	mov	r18, r4
     16a:	5d 2d       	mov	r21, r13
     16c:	5d 2d       	mov	r21, r13
     16e:	5d 2d       	mov	r21, r13
     170:	5d 2d       	mov	r21, r13
     172:	5d 2d       	mov	r21, r13
     174:	5d 2d       	mov	r21, r13
     176:	5d 2d       	mov	r21, r13
     178:	5d 2d       	mov	r21, r13
     17a:	5d 2d       	mov	r21, r13
     17c:	5d 2d       	mov	r21, r13
     17e:	5d 2d       	mov	r21, r13
     180:	5d 2d       	mov	r21, r13
     182:	5d 2d       	mov	r21, r13
     184:	5d 2d       	mov	r21, r13
     186:	5d 2d       	mov	r21, r13
     188:	18 2d       	mov	r17, r8
     18a:	5d 2d       	mov	r21, r13
     18c:	5d 2d       	mov	r21, r13
     18e:	5d 2d       	mov	r21, r13
     190:	5d 2d       	mov	r21, r13
     192:	5d 2d       	mov	r21, r13
     194:	5d 2d       	mov	r21, r13
     196:	5d 2d       	mov	r21, r13
     198:	3c 2d       	mov	r19, r12

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <prvCheckTasksWaitingTermination>
     19e:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	ea d5       	rcall	.+3028   	; 0xd7c <vPortYield>
     1a8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 bd 1a 	call	0x357a	; 0x357a <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 b2 1c 	call	0x3964	; 0x3964 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee e1       	ldi	r30, 0x1E	; 30
     1e4:	f8 e6       	ldi	r31, 0x68	; 104
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 3b       	cpi	r26, 0xB0	; 176
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a0 eb       	ldi	r26, 0xB0	; 176
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a1 31       	cpi	r26, 0x11	; 17
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 3d 20 	call	0x407a	; 0x407a <main>
     20a:	0c 94 0d 34 	jmp	0x681a	; 0x681a <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <application_task_create>:
	{
		application_run(&xLastWakeTime,xFrequency);
	}
}
void application_task_create(UBaseType_t task_priority)
{
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
	xTaskCreate(
     216:	e1 2c       	mov	r14, r1
     218:	f1 2c       	mov	r15, r1
     21a:	08 2f       	mov	r16, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 ec       	ldi	r20, 0xC0	; 192
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6f e6       	ldi	r22, 0x6F	; 111
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	85 ea       	ldi	r24, 0xA5	; 165
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  task_priority  // Priority.
	,  NULL );
	
}
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <application_run>:
void application_run(TickType_t* xLastWakeTime,TickType_t xFrequency)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	66 97       	sbiw	r28, 0x16	; 22
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	5c 01       	movw	r10, r24
     266:	2a 01       	movw	r4, r20
     268:	3b 01       	movw	r6, r22
	xEventGroupSetBits(_meassureEventGroup, CO2_BIT | TEMPERATURE_HUMIDITY_BIT);
     26a:	43 e0       	ldi	r20, 0x03	; 3
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_meassureEventGroup>
     276:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_meassureEventGroup+0x1>
     27a:	cb d2       	rcall	.+1430   	; 0x812 <xEventGroupSetBits>
	dataReadyEventBits=xEventGroupWaitBits(_dataReadyEventGroup,CO2_BIT | TEMPERATURE_HUMIDITY_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     27c:	cc 24       	eor	r12, r12
     27e:	ca 94       	dec	r12
     280:	dc 2c       	mov	r13, r12
     282:	76 01       	movw	r14, r12
     284:	01 e0       	ldi	r16, 0x01	; 1
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	43 e0       	ldi	r20, 0x03	; 3
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_dataReadyEventGroup>
     294:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_dataReadyEventGroup+0x1>
     298:	1c d2       	rcall	.+1080   	; 0x6d2 <xEventGroupWaitBits>
     29a:	60 93 ce 17 	sts	0x17CE, r22	; 0x8017ce <dataReadyEventBits>
     29e:	70 93 cf 17 	sts	0x17CF, r23	; 0x8017cf <dataReadyEventBits+0x1>
     2a2:	80 93 d0 17 	sts	0x17D0, r24	; 0x8017d0 <dataReadyEventBits+0x2>
     2a6:	90 93 d1 17 	sts	0x17D1, r25	; 0x8017d1 <dataReadyEventBits+0x3>
	if ((dataReadyEventBits & (CO2_BIT | TEMPERATURE_HUMIDITY_BIT) ) == (CO2_BIT | TEMPERATURE_HUMIDITY_BIT))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	89 f5       	brne	.+98     	; 0x320 <application_run+0xe8>
	{
		setTemperatureData(get_temperature_data());
     2be:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <get_temperature_data>
     2c2:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <setTemperatureData>
		//printf("Temperature data ---> %d ",get_temperature_data());
		setHumidityData(get_humidity_data());
     2c6:	0e 94 57 1e 	call	0x3cae	; 0x3cae <get_humidity_data>
     2ca:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <setHumidityData>
		//printf(" Humidity data ---> %d ",get_humidity_data());
		setCO2Ppm(get_CO2_data());
     2ce:	73 d0       	rcall	.+230    	; 0x3b6 <get_CO2_data>
     2d0:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <setCO2Ppm>
		//printf("CO2 data ---> %i ",get_CO2_data());
		
		payload=getLoRaPayload((uint8_t)2);
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	ce 01       	movw	r24, r28
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <getLoRaPayload>
     2de:	86 e1       	ldi	r24, 0x16	; 22
     2e0:	fe 01       	movw	r30, r28
     2e2:	31 96       	adiw	r30, 0x01	; 1
     2e4:	a2 ed       	ldi	r26, 0xD2	; 210
     2e6:	b7 e1       	ldi	r27, 0x17	; 23
     2e8:	01 90       	ld	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	8a 95       	dec	r24
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <application_run+0xb0>
		vTaskDelay(pdMS_TO_TICKS(50UL));
     2f0:	63 e0       	ldi	r22, 0x03	; 3
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
     2fc:	0f ef       	ldi	r16, 0xFF	; 255
     2fe:	1f ef       	ldi	r17, 0xFF	; 255
     300:	98 01       	movw	r18, r16
     302:	46 e1       	ldi	r20, 0x16	; 22
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	62 ed       	ldi	r22, 0xD2	; 210
     308:	77 e1       	ldi	r23, 0x17	; 23
     30a:	80 91 c8 17 	lds	r24, 0x17C8	; 0x8017c8 <xMessageBuffer>
     30e:	90 91 c9 17 	lds	r25, 0x17C9	; 0x8017c9 <xMessageBuffer+0x1>
     312:	0e 94 a4 0c 	call	0x1948	; 0x1948 <xStreamBufferSend>
		xTaskDelayUntil(xLastWakeTime, xFrequency );
     316:	b3 01       	movw	r22, r6
     318:	a2 01       	movw	r20, r4
     31a:	c5 01       	movw	r24, r10
     31c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <xTaskDelayUntil>
	}
	
     320:	66 96       	adiw	r28, 0x16	; 22
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	bf 90       	pop	r11
     33e:	af 90       	pop	r10
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	08 95       	ret

0000034a <Application_Task>:
extern EventGroupHandle_t _meassureEventGroup ;
extern EventGroupHandle_t _dataReadyEventGroup;


void Application_Task(void* pvParameters)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	00 d0       	rcall	.+0      	; 0x350 <Application_Task+0x6>
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     356:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <xTaskGetTickCount>
     35a:	69 83       	std	Y+1, r22	; 0x01
     35c:	7a 83       	std	Y+2, r23	; 0x02
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		application_run(&xLastWakeTime,xFrequency);
     362:	48 e3       	ldi	r20, 0x38	; 56
     364:	58 e1       	ldi	r21, 0x18	; 24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	ce 01       	movw	r24, r28
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	64 df       	rcall	.-312    	; 0x238 <application_run>
     370:	f8 cf       	rjmp	.-16     	; 0x362 <Application_Task+0x18>

00000372 <myCo2CallBack>:
	co2_sensor_t new_co2_data = pvPortMalloc(sizeof(CO2_Sensor));
	if(NULL == new_co2_data)
	{
		return NULL;
	}
	new_co2_data->co2_Data=co2_data;
     372:	90 93 ec 17 	sts	0x17EC, r25	; 0x8017ec <co2_data+0x1>
     376:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <co2_data>
     37a:	41 e0       	ldi	r20, 0x01	; 1
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_dataReadyEventGroup>
     386:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_dataReadyEventGroup+0x1>
     38a:	43 c2       	rjmp	.+1158   	; 0x812 <xEventGroupSetBits>
     38c:	08 95       	ret

0000038e <co2_task_create>:

}
void co2_task_create(UBaseType_t task_priority)
{
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
	
	xTaskCreate(
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	08 2f       	mov	r16, r24
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 ec       	ldi	r20, 0xC0	; 192
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	6b e7       	ldi	r22, 0x7B	; 123
     3a4:	72 e0       	ldi	r23, 0x02	; 2
     3a6:	88 e1       	ldi	r24, 0x18	; 24
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
	,  "CO2 Task" 
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  task_priority 
	,  NULL );
}
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	08 95       	ret

000003b6 <get_CO2_data>:


uint16_t get_CO2_data(){
	
	return (uint16_t)co2_data;
}
     3b6:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <co2_data>
     3ba:	90 91 ec 17 	lds	r25, 0x17EC	; 0x8017ec <co2_data+0x1>
     3be:	08 95       	ret

000003c0 <CO2_taskRun>:


void CO2_taskRun() {
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
	
	
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     3ca:	cc 24       	eor	r12, r12
     3cc:	ca 94       	dec	r12
     3ce:	dc 2c       	mov	r13, r12
     3d0:	76 01       	movw	r14, r12
     3d2:	01 e0       	ldi	r16, 0x01	; 1
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	42 e0       	ldi	r20, 0x02	; 2
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_meassureEventGroup>
     3e2:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_meassureEventGroup+0x1>
     3e6:	75 d1       	rcall	.+746    	; 0x6d2 <xEventGroupWaitBits>
	CO2_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	
	if ((event_measure & CO2_BIT)==CO2_BIT)
     3e8:	61 ff       	sbrs	r22, 1
     3ea:	1c c0       	rjmp	.+56     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
     3ec:	66 e0       	ldi	r22, 0x06	; 6
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
		rc = mh_z19_takeMeassuring();
     3f8:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <mh_z19_takeMeassuring>
     3fc:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <rc>
		if (rc != MHZ19_OK)
     400:	88 23       	and	r24, r24
     402:	41 f0       	breq	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
			printf("task got wrong");
     404:	84 e8       	ldi	r24, 0x84	; 132
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
		}
		printf("<<CO2 task set>>");		
     414:	83 e9       	ldi	r24, 0x93	; 147
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
	}		
}
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	mh_z19_injectCallBack(myCo2CallBack);
     430:	89 eb       	ldi	r24, 0xB9	; 185
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 22 26 	call	0x4c44	; 0x4c44 <mh_z19_injectCallBack>
	for(;;)
	{
		CO2_taskRun();
     438:	c3 df       	rcall	.-122    	; 0x3c0 <CO2_taskRun>
     43a:	fe cf       	rjmp	.-4      	; 0x438 <CO2_Sensor_Task+0x8>

0000043c <Configuration_SetMinTemperature>:
	return GOOD;
}


void Configuration_SetMinTemperature(int16_t temperature_data)
{
     43c:	0f 93       	push	r16
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
	
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     444:	4f ef       	ldi	r20, 0xFF	; 255
     446:	5f ef       	ldi	r21, 0xFF	; 255
     448:	ba 01       	movw	r22, r20
     44a:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     44e:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     452:	0e 94 32 0a 	call	0x1464	; 0x1464 <xQueueSemaphoreTake>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	31 f4       	brne	.+12     	; 0x466 <Configuration_SetMinTemperature+0x2a>
	{
		conf->min_temperature_data=temperature_data;
     45a:	e0 91 f5 17 	lds	r30, 0x17F5	; 0x8017f5 <conf>
     45e:	f0 91 f6 17 	lds	r31, 0x17F6	; 0x8017f6 <conf+0x1>
     462:	d1 83       	std	Z+1, r29	; 0x01
     464:	c0 83       	st	Z, r28
	}
	
	xSemaphoreGive(mutex);
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	a9 01       	movw	r20, r18
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     476:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     47a:	98 d6       	rcall	.+3376   	; 0x11ac <xQueueGenericSend>


}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <Configuration_SetMaxTemperature>:
void Configuration_SetMaxTemperature(int16_t temperature_data)
{
     484:	0f 93       	push	r16
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
	xSemaphoreTake(mutex, portMAX_DELAY);
     48c:	4f ef       	ldi	r20, 0xFF	; 255
     48e:	5f ef       	ldi	r21, 0xFF	; 255
     490:	ba 01       	movw	r22, r20
     492:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     496:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     49a:	e4 d7       	rcall	.+4040   	; 0x1464 <xQueueSemaphoreTake>
	conf->max_temperature_data=temperature_data;
     49c:	e0 91 f5 17 	lds	r30, 0x17F5	; 0x8017f5 <conf>
     4a0:	f0 91 f6 17 	lds	r31, 0x17F6	; 0x8017f6 <conf+0x1>
     4a4:	d3 83       	std	Z+3, r29	; 0x03
     4a6:	c2 83       	std	Z+2, r28	; 0x02
	xSemaphoreGive(mutex);
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	a9 01       	movw	r20, r18
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     4b8:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     4bc:	77 d6       	rcall	.+3310   	; 0x11ac <xQueueGenericSend>

}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <Configuration_SetMinHumidity>:
void Configuration_SetMinHumidity(uint16_t humidity_data)
{
     4c6:	0f 93       	push	r16
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
	xSemaphoreTake(mutex, portMAX_DELAY);
     4ce:	4f ef       	ldi	r20, 0xFF	; 255
     4d0:	5f ef       	ldi	r21, 0xFF	; 255
     4d2:	ba 01       	movw	r22, r20
     4d4:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     4d8:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     4dc:	c3 d7       	rcall	.+3974   	; 0x1464 <xQueueSemaphoreTake>
	conf->min_humidity_data=humidity_data;
     4de:	e0 91 f5 17 	lds	r30, 0x17F5	; 0x8017f5 <conf>
     4e2:	f0 91 f6 17 	lds	r31, 0x17F6	; 0x8017f6 <conf+0x1>
     4e6:	d5 83       	std	Z+5, r29	; 0x05
     4e8:	c4 83       	std	Z+4, r28	; 0x04
	xSemaphoreGive(mutex);
     4ea:	00 e0       	ldi	r16, 0x00	; 0
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	a9 01       	movw	r20, r18
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     4fa:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     4fe:	56 d6       	rcall	.+3244   	; 0x11ac <xQueueGenericSend>


}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <Configuration_SetMaxHumidity>:


void Configuration_SetMaxHumidity(uint16_t humidity_data)
{
     508:	0f 93       	push	r16
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
	xSemaphoreTake(mutex, portMAX_DELAY);
     510:	4f ef       	ldi	r20, 0xFF	; 255
     512:	5f ef       	ldi	r21, 0xFF	; 255
     514:	ba 01       	movw	r22, r20
     516:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     51a:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     51e:	a2 d7       	rcall	.+3908   	; 0x1464 <xQueueSemaphoreTake>
conf->max_humidity_data=humidity_data;
     520:	e0 91 f5 17 	lds	r30, 0x17F5	; 0x8017f5 <conf>
     524:	f0 91 f6 17 	lds	r31, 0x17F6	; 0x8017f6 <conf+0x1>
     528:	d7 83       	std	Z+7, r29	; 0x07
     52a:	c6 83       	std	Z+6, r28	; 0x06
xSemaphoreGive(mutex);
     52c:	00 e0       	ldi	r16, 0x00	; 0
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <mutex>
     53c:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <mutex+0x1>
     540:	35 d6       	rcall	.+3178   	; 0x11ac <xQueueGenericSend>

}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task();
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority)
{
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
	xTaskCreate(
     550:	20 91 cc 17 	lds	r18, 0x17CC	; 0x8017cc <downlinkMessageBuffer>
     554:	30 91 cd 17 	lds	r19, 0x17CD	; 0x8017cd <downlinkMessageBuffer+0x1>
     558:	e1 2c       	mov	r14, r1
     55a:	f1 2c       	mov	r15, r1
     55c:	08 2f       	mov	r16, r24
     55e:	48 e8       	ldi	r20, 0x88	; 136
     560:	51 e0       	ldi	r21, 0x01	; 1
     562:	64 ea       	ldi	r22, 0xA4	; 164
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	83 e3       	ldi	r24, 0x33	; 51
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
	"LoraWanDownlink",
	configMINIMAL_STACK_SIZE+200,
	(void*)downlinkMessageBuffer,
	priority,
	NULL );
}
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	08 95       	ret

00000576 <lora_DownLinkHandler_task>:

void lora_DownLinkHandler_task()
{     
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
	size_t xReceivedBytes;
	xReceivedBytes=xMessageBufferReceive(
     57e:	0f ef       	ldi	r16, 0xFF	; 255
     580:	1f ef       	ldi	r17, 0xFF	; 255
     582:	98 01       	movw	r18, r16
     584:	46 e1       	ldi	r20, 0x16	; 22
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	60 eb       	ldi	r22, 0xB0	; 176
     58a:	77 e0       	ldi	r23, 0x07	; 7
     58c:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <downlinkMessageBuffer>
     590:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <downlinkMessageBuffer+0x1>
     594:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
	downlinkMessageBuffer,
	&_downlink_payload,
	sizeof(lora_driver_payload_t),
	portMAX_DELAY);

	if (xReceivedBytes>0)
     598:	89 2b       	or	r24, r25
     59a:	09 f4       	brne	.+2      	; 0x59e <lora_DownLinkHandler_task+0x28>
     59c:	5f c0       	rjmp	.+190    	; 0x65c <lora_DownLinkHandler_task+0xe6>
	{	
		
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len);
     59e:	c0 eb       	ldi	r28, 0xB0	; 176
     5a0:	d7 e0       	ldi	r29, 0x07	; 7
     5a2:	99 81       	ldd	r25, Y+1	; 0x01
     5a4:	88 81       	ld	r24, Y
     5a6:	1f 92       	push	r1
     5a8:	9f 93       	push	r25
     5aa:	1f 92       	push	r1
     5ac:	8f 93       	push	r24
     5ae:	84 eb       	ldi	r24, 0xB4	; 180
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
		
			if (8==_downlink_payload.len )
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	88 30       	cpi	r24, 0x08	; 8
     5ca:	09 f0       	breq	.+2      	; 0x5ce <lora_DownLinkHandler_task+0x58>
     5cc:	3d c0       	rjmp	.+122    	; 0x648 <lora_DownLinkHandler_task+0xd2>
			{
				
				 minHumidity = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	98 2f       	mov	r25, r24
     5d4:	88 27       	eor	r24, r24
     5d6:	2b 81       	ldd	r18, Y+3	; 0x03
     5d8:	82 0f       	add	r24, r18
     5da:	91 1d       	adc	r25, r1
     5dc:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <minHumidity+0x1>
     5e0:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <minHumidity>
				 minTemperature = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     5e4:	8c 81       	ldd	r24, Y+4	; 0x04
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	98 2f       	mov	r25, r24
     5ea:	88 27       	eor	r24, r24
     5ec:	2d 81       	ldd	r18, Y+5	; 0x05
     5ee:	82 0f       	add	r24, r18
     5f0:	91 1d       	adc	r25, r1
     5f2:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <minTemperature+0x1>
     5f6:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <minTemperature>
				 maxHumidity = (_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
     5fa:	2e 81       	ldd	r18, Y+6	; 0x06
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	32 2f       	mov	r19, r18
     600:	22 27       	eor	r18, r18
     602:	4f 81       	ldd	r20, Y+7	; 0x07
     604:	24 0f       	add	r18, r20
     606:	31 1d       	adc	r19, r1
     608:	30 93 fe 17 	sts	0x17FE, r19	; 0x8017fe <maxHumidity+0x1>
     60c:	20 93 fd 17 	sts	0x17FD, r18	; 0x8017fd <maxHumidity>
				 maxTemperature = (_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
     610:	28 85       	ldd	r18, Y+8	; 0x08
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	32 2f       	mov	r19, r18
     616:	22 27       	eor	r18, r18
     618:	49 85       	ldd	r20, Y+9	; 0x09
     61a:	24 0f       	add	r18, r20
     61c:	31 1d       	adc	r19, r1
     61e:	30 93 fa 17 	sts	0x17FA, r19	; 0x8017fa <maxTemperature+0x1>
     622:	20 93 f9 17 	sts	0x17F9, r18	; 0x8017f9 <maxTemperature>
				Configuration_SetMinTemperature(minTemperature);
     626:	0a df       	rcall	.-492    	; 0x43c <Configuration_SetMinTemperature>
				Configuration_SetMinHumidity(minHumidity);
     628:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <minHumidity>
     62c:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <minHumidity+0x1>
     630:	4a df       	rcall	.-364    	; 0x4c6 <Configuration_SetMinHumidity>
				Configuration_SetMaxTemperature(maxTemperature);
     632:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <maxTemperature>
     636:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <maxTemperature+0x1>
     63a:	24 df       	rcall	.-440    	; 0x484 <Configuration_SetMaxTemperature>
				Configuration_SetMaxHumidity(maxHumidity);
     63c:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <maxHumidity>
     640:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <maxHumidity+0x1>
     644:	61 df       	rcall	.-318    	; 0x508 <Configuration_SetMaxHumidity>
     646:	06 c0       	rjmp	.+12     	; 0x654 <lora_DownLinkHandler_task+0xde>
			}
			else
			{
				// Retry in 2.5 minutes
				vTaskDelay(pdMS_TO_TICKS(150000)); 			}
     648:	64 e5       	ldi	r22, 0x54	; 84
     64a:	74 e2       	ldi	r23, 0x24	; 36
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
			
			puts("finished");
     654:	86 ee       	ldi	r24, 0xE6	; 230
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	0e 94 02 31 	call	0x6204	; 0x6204 <puts>
	
			
	
		

     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <lora_DownLinkHandler_startTask>:


void lora_DownLinkHandler_startTask(){
	for(;;)
	{
		lora_DownLinkHandler_task();
     666:	87 df       	rcall	.-242    	; 0x576 <lora_DownLinkHandler_task>
     668:	fe cf       	rjmp	.-4      	; 0x666 <lora_DownLinkHandler_startTask>

0000066a <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     66a:	0f 93       	push	r16
     66c:	01 11       	cpse	r16, r1
     66e:	0c c0       	rjmp	.+24     	; 0x688 <prvTestWaitCondition+0x1e>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	82 23       	and	r24, r18
     676:	93 23       	and	r25, r19
     678:	a4 23       	and	r26, r20
     67a:	b5 23       	and	r27, r21
     67c:	89 2b       	or	r24, r25
     67e:	8a 2b       	or	r24, r26
     680:	8b 2b       	or	r24, r27
     682:	79 f4       	brne	.+30     	; 0x6a2 <prvTestWaitCondition+0x38>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	10 c0       	rjmp	.+32     	; 0x6a8 <prvTestWaitCondition+0x3e>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	82 23       	and	r24, r18
     68e:	93 23       	and	r25, r19
     690:	a4 23       	and	r26, r20
     692:	b5 23       	and	r27, r21
     694:	28 17       	cp	r18, r24
     696:	39 07       	cpc	r19, r25
     698:	4a 07       	cpc	r20, r26
     69a:	5b 07       	cpc	r21, r27
     69c:	21 f0       	breq	.+8      	; 0x6a6 <prvTestWaitCondition+0x3c>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <prvTestWaitCondition+0x3e>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <prvTestWaitCondition+0x3e>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <xEventGroupCreate>:
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	8f e0       	ldi	r24, 0x0F	; 15
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	af d1       	rcall	.+862    	; 0xa14 <pvPortMalloc>
     6b6:	ec 01       	movw	r28, r24
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	39 f0       	breq	.+14     	; 0x6ca <xEventGroupCreate+0x1e>
     6bc:	fc 01       	movw	r30, r24
     6be:	11 92       	st	Z+, r1
     6c0:	11 92       	st	Z+, r1
     6c2:	11 92       	st	Z+, r1
     6c4:	11 92       	st	Z+, r1
     6c6:	cf 01       	movw	r24, r30
     6c8:	8b d2       	rcall	.+1302   	; 0xbe0 <vListInitialise>
     6ca:	ce 01       	movw	r24, r28
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <xEventGroupWaitBits>:
     6d2:	2f 92       	push	r2
     6d4:	3f 92       	push	r3
     6d6:	4f 92       	push	r4
     6d8:	5f 92       	push	r5
     6da:	6f 92       	push	r6
     6dc:	7f 92       	push	r7
     6de:	8f 92       	push	r8
     6e0:	9f 92       	push	r9
     6e2:	af 92       	push	r10
     6e4:	bf 92       	push	r11
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
     6f8:	4a 01       	movw	r8, r20
     6fa:	5b 01       	movw	r10, r22
     6fc:	62 2e       	mov	r6, r18
     6fe:	70 2e       	mov	r7, r16
     700:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskSuspendAll>
     704:	28 80       	ld	r2, Y
     706:	39 80       	ldd	r3, Y+1	; 0x01
     708:	4a 80       	ldd	r4, Y+2	; 0x02
     70a:	5b 80       	ldd	r5, Y+3	; 0x03
     70c:	a5 01       	movw	r20, r10
     70e:	94 01       	movw	r18, r8
     710:	c2 01       	movw	r24, r4
     712:	b1 01       	movw	r22, r2
     714:	aa df       	rcall	.-172    	; 0x66a <prvTestWaitCondition>
     716:	88 23       	and	r24, r24
     718:	a1 f0       	breq	.+40     	; 0x742 <xEventGroupWaitBits+0x70>
     71a:	66 20       	and	r6, r6
     71c:	89 f1       	breq	.+98     	; 0x780 <xEventGroupWaitBits+0xae>
     71e:	d5 01       	movw	r26, r10
     720:	c4 01       	movw	r24, r8
     722:	80 95       	com	r24
     724:	90 95       	com	r25
     726:	a0 95       	com	r26
     728:	b0 95       	com	r27
     72a:	82 21       	and	r24, r2
     72c:	93 21       	and	r25, r3
     72e:	a4 21       	and	r26, r4
     730:	b5 21       	and	r27, r5
     732:	88 83       	st	Y, r24
     734:	99 83       	std	Y+1, r25	; 0x01
     736:	aa 83       	std	Y+2, r26	; 0x02
     738:	bb 83       	std	Y+3, r27	; 0x03
     73a:	c1 2c       	mov	r12, r1
     73c:	d1 2c       	mov	r13, r1
     73e:	76 01       	movw	r14, r12
     740:	22 c0       	rjmp	.+68     	; 0x786 <xEventGroupWaitBits+0xb4>
     742:	c1 14       	cp	r12, r1
     744:	d1 04       	cpc	r13, r1
     746:	e1 04       	cpc	r14, r1
     748:	f1 04       	cpc	r15, r1
     74a:	e9 f0       	breq	.+58     	; 0x786 <xEventGroupWaitBits+0xb4>
     74c:	61 10       	cpse	r6, r1
     74e:	04 c0       	rjmp	.+8      	; 0x758 <xEventGroupWaitBits+0x86>
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	ba 01       	movw	r22, r20
     756:	04 c0       	rjmp	.+8      	; 0x760 <xEventGroupWaitBits+0x8e>
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	71 10       	cpse	r7, r1
     762:	74 60       	ori	r23, 0x04	; 4
     764:	48 29       	or	r20, r8
     766:	59 29       	or	r21, r9
     768:	6a 29       	or	r22, r10
     76a:	7b 29       	or	r23, r11
     76c:	97 01       	movw	r18, r14
     76e:	86 01       	movw	r16, r12
     770:	ce 01       	movw	r24, r28
     772:	04 96       	adiw	r24, 0x04	; 4
     774:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vTaskPlaceOnUnorderedEventList>
     778:	21 2c       	mov	r2, r1
     77a:	31 2c       	mov	r3, r1
     77c:	21 01       	movw	r4, r2
     77e:	03 c0       	rjmp	.+6      	; 0x786 <xEventGroupWaitBits+0xb4>
     780:	c1 2c       	mov	r12, r1
     782:	d1 2c       	mov	r13, r1
     784:	76 01       	movw	r14, r12
     786:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
     78a:	cd 28       	or	r12, r13
     78c:	ce 28       	or	r12, r14
     78e:	cf 28       	or	r12, r15
     790:	59 f1       	breq	.+86     	; 0x7e8 <xEventGroupWaitBits+0x116>
     792:	81 11       	cpse	r24, r1
     794:	01 c0       	rjmp	.+2      	; 0x798 <xEventGroupWaitBits+0xc6>
     796:	f2 d2       	rcall	.+1508   	; 0xd7c <vPortYield>
     798:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <uxTaskResetEventItemValue>
     79c:	6b 01       	movw	r12, r22
     79e:	7c 01       	movw	r14, r24
     7a0:	91 fd       	sbrc	r25, 1
     7a2:	1f c0       	rjmp	.+62     	; 0x7e2 <xEventGroupWaitBits+0x110>
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	0f 92       	push	r0
     7aa:	c8 80       	ld	r12, Y
     7ac:	d9 80       	ldd	r13, Y+1	; 0x01
     7ae:	ea 80       	ldd	r14, Y+2	; 0x02
     7b0:	fb 80       	ldd	r15, Y+3	; 0x03
     7b2:	07 2d       	mov	r16, r7
     7b4:	a5 01       	movw	r20, r10
     7b6:	94 01       	movw	r18, r8
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	56 df       	rcall	.-340    	; 0x66a <prvTestWaitCondition>
     7be:	88 23       	and	r24, r24
     7c0:	71 f0       	breq	.+28     	; 0x7de <xEventGroupWaitBits+0x10c>
     7c2:	66 20       	and	r6, r6
     7c4:	61 f0       	breq	.+24     	; 0x7de <xEventGroupWaitBits+0x10c>
     7c6:	80 94       	com	r8
     7c8:	90 94       	com	r9
     7ca:	a0 94       	com	r10
     7cc:	b0 94       	com	r11
     7ce:	8c 20       	and	r8, r12
     7d0:	9d 20       	and	r9, r13
     7d2:	ae 20       	and	r10, r14
     7d4:	bf 20       	and	r11, r15
     7d6:	88 82       	st	Y, r8
     7d8:	99 82       	std	Y+1, r9	; 0x01
     7da:	aa 82       	std	Y+2, r10	; 0x02
     7dc:	bb 82       	std	Y+3, r11	; 0x03
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	16 01       	movw	r2, r12
     7e4:	27 01       	movw	r4, r14
     7e6:	55 24       	eor	r5, r5
     7e8:	c2 01       	movw	r24, r4
     7ea:	b1 01       	movw	r22, r2
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	7f 90       	pop	r7
     806:	6f 90       	pop	r6
     808:	5f 90       	pop	r5
     80a:	4f 90       	pop	r4
     80c:	3f 90       	pop	r3
     80e:	2f 90       	pop	r2
     810:	08 95       	ret

00000812 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     812:	4f 92       	push	r4
     814:	5f 92       	push	r5
     816:	6f 92       	push	r6
     818:	7f 92       	push	r7
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	6a 01       	movw	r12, r20
     832:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     834:	8c 01       	movw	r16, r24
     836:	09 5f       	subi	r16, 0xF9	; 249
     838:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     83a:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     83e:	eb 85       	ldd	r30, Y+11	; 0x0b
     840:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     842:	88 81       	ld	r24, Y
     844:	99 81       	ldd	r25, Y+1	; 0x01
     846:	aa 81       	ldd	r26, Y+2	; 0x02
     848:	bb 81       	ldd	r27, Y+3	; 0x03
     84a:	c8 2a       	or	r12, r24
     84c:	d9 2a       	or	r13, r25
     84e:	ea 2a       	or	r14, r26
     850:	fb 2a       	or	r15, r27
     852:	c8 82       	st	Y, r12
     854:	d9 82       	std	Y+1, r13	; 0x01
     856:	ea 82       	std	Y+2, r14	; 0x02
     858:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     85a:	c1 2c       	mov	r12, r1
     85c:	d1 2c       	mov	r13, r1
     85e:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     860:	3d c0       	rjmp	.+122    	; 0x8dc <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     862:	a4 80       	ldd	r10, Z+4	; 0x04
     864:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	a2 81       	ldd	r26, Z+2	; 0x02
     86c:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     86e:	ac 01       	movw	r20, r24
     870:	bd 01       	movw	r22, r26
     872:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     874:	b2 fd       	sbrc	r27, 2
     876:	0e c0       	rjmp	.+28     	; 0x894 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     878:	48 80       	ld	r4, Y
     87a:	59 80       	ldd	r5, Y+1	; 0x01
     87c:	6a 80       	ldd	r6, Y+2	; 0x02
     87e:	7b 80       	ldd	r7, Y+3	; 0x03
     880:	44 22       	and	r4, r20
     882:	55 22       	and	r5, r21
     884:	66 22       	and	r6, r22
     886:	77 22       	and	r7, r23
     888:	45 28       	or	r4, r5
     88a:	46 28       	or	r4, r6
     88c:	47 28       	or	r4, r7
     88e:	89 f4       	brne	.+34     	; 0x8b2 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	12 c0       	rjmp	.+36     	; 0x8b8 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     894:	48 80       	ld	r4, Y
     896:	59 80       	ldd	r5, Y+1	; 0x01
     898:	6a 80       	ldd	r6, Y+2	; 0x02
     89a:	7b 80       	ldd	r7, Y+3	; 0x03
     89c:	44 22       	and	r4, r20
     89e:	55 22       	and	r5, r21
     8a0:	66 22       	and	r6, r22
     8a2:	77 22       	and	r7, r23
     8a4:	44 15       	cp	r20, r4
     8a6:	55 05       	cpc	r21, r5
     8a8:	66 05       	cpc	r22, r6
     8aa:	77 05       	cpc	r23, r7
     8ac:	21 f0       	breq	.+8      	; 0x8b6 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     8b6:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     8b8:	22 23       	and	r18, r18
     8ba:	71 f0       	breq	.+28     	; 0x8d8 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     8bc:	b0 ff       	sbrs	r27, 0
     8be:	04 c0       	rjmp	.+8      	; 0x8c8 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     8c0:	c4 2a       	or	r12, r20
     8c2:	d5 2a       	or	r13, r21
     8c4:	e6 2a       	or	r14, r22
     8c6:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8c8:	48 81       	ld	r20, Y
     8ca:	59 81       	ldd	r21, Y+1	; 0x01
     8cc:	6a 81       	ldd	r22, Y+2	; 0x02
     8ce:	7b 81       	ldd	r23, Y+3	; 0x03
     8d0:	72 60       	ori	r23, 0x02	; 2
     8d2:	cf 01       	movw	r24, r30
     8d4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8d8:	ea 2d       	mov	r30, r10
     8da:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8dc:	e0 17       	cp	r30, r16
     8de:	f1 07       	cpc	r31, r17
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <xEventGroupSetBits+0xd2>
     8e2:	bf cf       	rjmp	.-130    	; 0x862 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     8e4:	c0 94       	com	r12
     8e6:	d0 94       	com	r13
     8e8:	e0 94       	com	r14
     8ea:	f0 94       	com	r15
     8ec:	88 81       	ld	r24, Y
     8ee:	99 81       	ldd	r25, Y+1	; 0x01
     8f0:	aa 81       	ldd	r26, Y+2	; 0x02
     8f2:	bb 81       	ldd	r27, Y+3	; 0x03
     8f4:	c8 22       	and	r12, r24
     8f6:	d9 22       	and	r13, r25
     8f8:	ea 22       	and	r14, r26
     8fa:	fb 22       	and	r15, r27
     8fc:	c8 82       	st	Y, r12
     8fe:	d9 82       	std	Y+1, r13	; 0x01
     900:	ea 82       	std	Y+2, r14	; 0x02
     902:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     904:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     908:	68 81       	ld	r22, Y
     90a:	79 81       	ldd	r23, Y+1	; 0x01
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	7f 90       	pop	r7
     926:	6f 90       	pop	r6
     928:	5f 90       	pop	r5
     92a:	4f 90       	pop	r4
     92c:	08 95       	ret

0000092e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     92e:	e2 ed       	ldi	r30, 0xD2	; 210
     930:	f7 e0       	ldi	r31, 0x07	; 7
     932:	a6 ed       	ldi	r26, 0xD6	; 214
     934:	b7 e0       	ldi	r27, 0x07	; 7
     936:	b1 83       	std	Z+1, r27	; 0x01
     938:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     93a:	13 82       	std	Z+3, r1	; 0x03
     93c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     93e:	ee e7       	ldi	r30, 0x7E	; 126
     940:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     942:	f0 93 d1 07 	sts	0x07D1, r31	; 0x8007d1 <pxEnd+0x1>
     946:	e0 93 d0 07 	sts	0x07D0, r30	; 0x8007d0 <pxEnd>
    pxEnd->xBlockSize = 0;
     94a:	13 82       	std	Z+3, r1	; 0x03
     94c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     952:	88 ea       	ldi	r24, 0xA8	; 168
     954:	9d e0       	ldi	r25, 0x0D	; 13
     956:	13 96       	adiw	r26, 0x03	; 3
     958:	9c 93       	st	X, r25
     95a:	8e 93       	st	-X, r24
     95c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     95e:	ed 93       	st	X+, r30
     960:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     962:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <xMinimumEverFreeBytesRemaining+0x1>
     966:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     96a:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <xFreeBytesRemaining+0x1>
     96e:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e8       	ldi	r25, 0x80	; 128
     976:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <xBlockAllocatedBit+0x1>
     97a:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <xBlockAllocatedBit>
     97e:	08 95       	ret

00000980 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     986:	a2 ed       	ldi	r26, 0xD2	; 210
     988:	b7 e0       	ldi	r27, 0x07	; 7
     98a:	01 c0       	rjmp	.+2      	; 0x98e <prvInsertBlockIntoFreeList+0xe>
     98c:	df 01       	movw	r26, r30
     98e:	ed 91       	ld	r30, X+
     990:	fc 91       	ld	r31, X
     992:	11 97       	sbiw	r26, 0x01	; 1
     994:	ec 17       	cp	r30, r28
     996:	fd 07       	cpc	r31, r29
     998:	c8 f3       	brcs	.-14     	; 0x98c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     99a:	12 96       	adiw	r26, 0x02	; 2
     99c:	8d 91       	ld	r24, X+
     99e:	9c 91       	ld	r25, X
     9a0:	13 97       	sbiw	r26, 0x03	; 3
     9a2:	9d 01       	movw	r18, r26
     9a4:	28 0f       	add	r18, r24
     9a6:	39 1f       	adc	r19, r25
     9a8:	c2 17       	cp	r28, r18
     9aa:	d3 07       	cpc	r29, r19
     9ac:	49 f4       	brne	.+18     	; 0x9c0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9ae:	2a 81       	ldd	r18, Y+2	; 0x02
     9b0:	3b 81       	ldd	r19, Y+3	; 0x03
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	9c 93       	st	X, r25
     9ba:	8e 93       	st	-X, r24
     9bc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     9be:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
     9c4:	9e 01       	movw	r18, r28
     9c6:	28 0f       	add	r18, r24
     9c8:	39 1f       	adc	r19, r25
     9ca:	e2 17       	cp	r30, r18
     9cc:	f3 07       	cpc	r31, r19
     9ce:	c1 f4       	brne	.+48     	; 0xa00 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     9d0:	20 91 d0 07 	lds	r18, 0x07D0	; 0x8007d0 <pxEnd>
     9d4:	30 91 d1 07 	lds	r19, 0x07D1	; 0x8007d1 <pxEnd+0x1>
     9d8:	e2 17       	cp	r30, r18
     9da:	f3 07       	cpc	r31, r19
     9dc:	71 f0       	breq	.+28     	; 0x9fa <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9de:	22 81       	ldd	r18, Z+2	; 0x02
     9e0:	33 81       	ldd	r19, Z+3	; 0x03
     9e2:	82 0f       	add	r24, r18
     9e4:	93 1f       	adc	r25, r19
     9e6:	9b 83       	std	Y+3, r25	; 0x03
     9e8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9ea:	ed 91       	ld	r30, X+
     9ec:	fc 91       	ld	r31, X
     9ee:	11 97       	sbiw	r26, 0x01	; 1
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	99 83       	std	Y+1, r25	; 0x01
     9f6:	88 83       	st	Y, r24
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9fa:	39 83       	std	Y+1, r19	; 0x01
     9fc:	28 83       	st	Y, r18
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a00:	f9 83       	std	Y+1, r31	; 0x01
     a02:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a04:	ca 17       	cp	r28, r26
     a06:	db 07       	cpc	r29, r27
     a08:	11 f0       	breq	.+4      	; 0xa0e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a0a:	cd 93       	st	X+, r28
     a0c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a22:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a26:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pxEnd>
     a2a:	90 91 d1 07 	lds	r25, 0x07D1	; 0x8007d1 <pxEnd+0x1>
     a2e:	89 2b       	or	r24, r25
     a30:	09 f4       	brne	.+2      	; 0xa34 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a32:	7d df       	rcall	.-262    	; 0x92e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a34:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xBlockAllocatedBit>
     a38:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xBlockAllocatedBit+0x1>
     a3c:	80 23       	and	r24, r16
     a3e:	91 23       	and	r25, r17
     a40:	89 2b       	or	r24, r25
     a42:	09 f0       	breq	.+2      	; 0xa46 <pvPortMalloc+0x32>
     a44:	76 c0       	rjmp	.+236    	; 0xb32 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a46:	01 15       	cp	r16, r1
     a48:	11 05       	cpc	r17, r1
     a4a:	49 f0       	breq	.+18     	; 0xa5e <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a4c:	c8 01       	movw	r24, r16
     a4e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a50:	08 17       	cp	r16, r24
     a52:	19 07       	cpc	r17, r25
     a54:	18 f0       	brcs	.+6      	; 0xa5c <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a5c:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a5e:	01 15       	cp	r16, r1
     a60:	11 05       	cpc	r17, r1
     a62:	09 f4       	brne	.+2      	; 0xa66 <pvPortMalloc+0x52>
     a64:	69 c0       	rjmp	.+210    	; 0xb38 <pvPortMalloc+0x124>
     a66:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <xFreeBytesRemaining>
     a6a:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <xFreeBytesRemaining+0x1>
     a6e:	80 17       	cp	r24, r16
     a70:	91 07       	cpc	r25, r17
     a72:	08 f4       	brcc	.+2      	; 0xa76 <pvPortMalloc+0x62>
     a74:	64 c0       	rjmp	.+200    	; 0xb3e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a76:	c0 91 d2 07 	lds	r28, 0x07D2	; 0x8007d2 <xStart>
     a7a:	d0 91 d3 07 	lds	r29, 0x07D3	; 0x8007d3 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a7e:	e2 ed       	ldi	r30, 0xD2	; 210
     a80:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a84:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a86:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	9b 81       	ldd	r25, Y+3	; 0x03
     a8c:	80 17       	cp	r24, r16
     a8e:	91 07       	cpc	r25, r17
     a90:	20 f4       	brcc	.+8      	; 0xa9a <pvPortMalloc+0x86>
     a92:	88 81       	ld	r24, Y
     a94:	99 81       	ldd	r25, Y+1	; 0x01
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	a9 f7       	brne	.-22     	; 0xa84 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a9a:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pxEnd>
     a9e:	90 91 d1 07 	lds	r25, 0x07D1	; 0x8007d1 <pxEnd+0x1>
     aa2:	c8 17       	cp	r28, r24
     aa4:	d9 07       	cpc	r29, r25
     aa6:	09 f4       	brne	.+2      	; 0xaaa <pvPortMalloc+0x96>
     aa8:	4d c0       	rjmp	.+154    	; 0xb44 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     aaa:	e0 80       	ld	r14, Z
     aac:	f1 80       	ldd	r15, Z+1	; 0x01
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	e8 0e       	add	r14, r24
     ab2:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ab4:	88 81       	ld	r24, Y
     ab6:	99 81       	ldd	r25, Y+1	; 0x01
     ab8:	91 83       	std	Z+1, r25	; 0x01
     aba:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     abc:	2a 81       	ldd	r18, Y+2	; 0x02
     abe:	3b 81       	ldd	r19, Y+3	; 0x03
     ac0:	20 1b       	sub	r18, r16
     ac2:	31 0b       	sbc	r19, r17
     ac4:	29 30       	cpi	r18, 0x09	; 9
     ac6:	31 05       	cpc	r19, r1
     ac8:	48 f0       	brcs	.+18     	; 0xadc <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     aca:	ce 01       	movw	r24, r28
     acc:	80 0f       	add	r24, r16
     ace:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     ad0:	fc 01       	movw	r30, r24
     ad2:	33 83       	std	Z+3, r19	; 0x03
     ad4:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     ad6:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     ad8:	0a 83       	std	Y+2, r16	; 0x02
     ada:	52 df       	rcall	.-348    	; 0x980 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     adc:	2a 81       	ldd	r18, Y+2	; 0x02
     ade:	3b 81       	ldd	r19, Y+3	; 0x03
     ae0:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <xFreeBytesRemaining>
     ae4:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <xFreeBytesRemaining+0x1>
     ae8:	82 1b       	sub	r24, r18
     aea:	93 0b       	sbc	r25, r19
     aec:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <xFreeBytesRemaining+0x1>
     af0:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     af4:	40 91 cc 07 	lds	r20, 0x07CC	; 0x8007cc <xMinimumEverFreeBytesRemaining>
     af8:	50 91 cd 07 	lds	r21, 0x07CD	; 0x8007cd <xMinimumEverFreeBytesRemaining+0x1>
     afc:	84 17       	cp	r24, r20
     afe:	95 07       	cpc	r25, r21
     b00:	20 f4       	brcc	.+8      	; 0xb0a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b02:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <xMinimumEverFreeBytesRemaining+0x1>
     b06:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b0a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xBlockAllocatedBit>
     b0e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xBlockAllocatedBit+0x1>
     b12:	28 2b       	or	r18, r24
     b14:	39 2b       	or	r19, r25
     b16:	3b 83       	std	Y+3, r19	; 0x03
     b18:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b1a:	19 82       	std	Y+1, r1	; 0x01
     b1c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b1e:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xNumberOfSuccessfulAllocations>
     b22:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xNumberOfSuccessfulAllocations+0x1>
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <xNumberOfSuccessfulAllocations+0x1>
     b2c:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <xNumberOfSuccessfulAllocations>
     b30:	0b c0       	rjmp	.+22     	; 0xb48 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b32:	e1 2c       	mov	r14, r1
     b34:	f1 2c       	mov	r15, r1
     b36:	08 c0       	rjmp	.+16     	; 0xb48 <pvPortMalloc+0x134>
     b38:	e1 2c       	mov	r14, r1
     b3a:	f1 2c       	mov	r15, r1
     b3c:	05 c0       	rjmp	.+10     	; 0xb48 <pvPortMalloc+0x134>
     b3e:	e1 2c       	mov	r14, r1
     b40:	f1 2c       	mov	r15, r1
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <pvPortMalloc+0x134>
     b44:	e1 2c       	mov	r14, r1
     b46:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b48:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	11 f4       	brne	.+4      	; 0xb56 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b52:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b56:	c7 01       	movw	r24, r14
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	08 95       	ret

00000b66 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	91 f1       	breq	.+100    	; 0xbd6 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b72:	ec 01       	movw	r28, r24
     b74:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b76:	4a 81       	ldd	r20, Y+2	; 0x02
     b78:	5b 81       	ldd	r21, Y+3	; 0x03
     b7a:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <xBlockAllocatedBit>
     b7e:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <xBlockAllocatedBit+0x1>
     b82:	ba 01       	movw	r22, r20
     b84:	62 23       	and	r22, r18
     b86:	73 23       	and	r23, r19
     b88:	67 2b       	or	r22, r23
     b8a:	29 f1       	breq	.+74     	; 0xbd6 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b8c:	68 81       	ld	r22, Y
     b8e:	79 81       	ldd	r23, Y+1	; 0x01
     b90:	67 2b       	or	r22, r23
     b92:	09 f5       	brne	.+66     	; 0xbd6 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b94:	20 95       	com	r18
     b96:	30 95       	com	r19
     b98:	24 23       	and	r18, r20
     b9a:	35 23       	and	r19, r21
     b9c:	3b 83       	std	Y+3, r19	; 0x03
     b9e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     ba0:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	9b 81       	ldd	r25, Y+3	; 0x03
     ba8:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <xFreeBytesRemaining>
     bac:	30 91 cf 07 	lds	r19, 0x07CF	; 0x8007cf <xFreeBytesRemaining+0x1>
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <xFreeBytesRemaining+0x1>
     bb8:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     bbc:	ce 01       	movw	r24, r28
     bbe:	e0 de       	rcall	.-576    	; 0x980 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     bc0:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <xNumberOfSuccessfulFrees>
     bc4:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <xNumberOfSuccessfulFrees+0x1>
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	90 93 c9 07 	sts	0x07C9, r25	; 0x8007c9 <xNumberOfSuccessfulFrees+0x1>
     bce:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     bd2:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     be0:	fc 01       	movw	r30, r24
     be2:	03 96       	adiw	r24, 0x03	; 3
     be4:	92 83       	std	Z+2, r25	; 0x02
     be6:	81 83       	std	Z+1, r24	; 0x01
     be8:	4f ef       	ldi	r20, 0xFF	; 255
     bea:	5f ef       	ldi	r21, 0xFF	; 255
     bec:	ba 01       	movw	r22, r20
     bee:	43 83       	std	Z+3, r20	; 0x03
     bf0:	54 83       	std	Z+4, r21	; 0x04
     bf2:	65 83       	std	Z+5, r22	; 0x05
     bf4:	76 83       	std	Z+6, r23	; 0x06
     bf6:	90 87       	std	Z+8, r25	; 0x08
     bf8:	87 83       	std	Z+7, r24	; 0x07
     bfa:	92 87       	std	Z+10, r25	; 0x0a
     bfc:	81 87       	std	Z+9, r24	; 0x09
     bfe:	10 82       	st	Z, r1
     c00:	08 95       	ret

00000c02 <vListInitialiseItem>:
     c02:	fc 01       	movw	r30, r24
     c04:	13 86       	std	Z+11, r1	; 0x0b
     c06:	12 86       	std	Z+10, r1	; 0x0a
     c08:	08 95       	ret

00000c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c14:	08 81       	ld	r16, Y
     c16:	19 81       	ldd	r17, Y+1	; 0x01
     c18:	2a 81       	ldd	r18, Y+2	; 0x02
     c1a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c1c:	0f 3f       	cpi	r16, 0xFF	; 255
     c1e:	4f ef       	ldi	r20, 0xFF	; 255
     c20:	14 07       	cpc	r17, r20
     c22:	24 07       	cpc	r18, r20
     c24:	34 07       	cpc	r19, r20
     c26:	21 f4       	brne	.+8      	; 0xc30 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c28:	fc 01       	movw	r30, r24
     c2a:	a1 85       	ldd	r26, Z+9	; 0x09
     c2c:	b2 85       	ldd	r27, Z+10	; 0x0a
     c2e:	11 c0       	rjmp	.+34     	; 0xc52 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c30:	dc 01       	movw	r26, r24
     c32:	13 96       	adiw	r26, 0x03	; 3
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <vListInsert+0x2e>
     c36:	df 01       	movw	r26, r30
     c38:	14 96       	adiw	r26, 0x04	; 4
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	15 97       	sbiw	r26, 0x05	; 5
     c40:	40 81       	ld	r20, Z
     c42:	51 81       	ldd	r21, Z+1	; 0x01
     c44:	62 81       	ldd	r22, Z+2	; 0x02
     c46:	73 81       	ldd	r23, Z+3	; 0x03
     c48:	04 17       	cp	r16, r20
     c4a:	15 07       	cpc	r17, r21
     c4c:	26 07       	cpc	r18, r22
     c4e:	37 07       	cpc	r19, r23
     c50:	90 f7       	brcc	.-28     	; 0xc36 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c52:	14 96       	adiw	r26, 0x04	; 4
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	15 97       	sbiw	r26, 0x05	; 5
     c5a:	fd 83       	std	Y+5, r31	; 0x05
     c5c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c5e:	d7 83       	std	Z+7, r29	; 0x07
     c60:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c62:	bf 83       	std	Y+7, r27	; 0x07
     c64:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c66:	15 96       	adiw	r26, 0x05	; 5
     c68:	dc 93       	st	X, r29
     c6a:	ce 93       	st	-X, r28
     c6c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c6e:	9b 87       	std	Y+11, r25	; 0x0b
     c70:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c72:	fc 01       	movw	r30, r24
     c74:	20 81       	ld	r18, Z
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	20 83       	st	Z, r18
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c8a:	a2 85       	ldd	r26, Z+10	; 0x0a
     c8c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c8e:	c4 81       	ldd	r28, Z+4	; 0x04
     c90:	d5 81       	ldd	r29, Z+5	; 0x05
     c92:	86 81       	ldd	r24, Z+6	; 0x06
     c94:	97 81       	ldd	r25, Z+7	; 0x07
     c96:	9f 83       	std	Y+7, r25	; 0x07
     c98:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c9a:	c6 81       	ldd	r28, Z+6	; 0x06
     c9c:	d7 81       	ldd	r29, Z+7	; 0x07
     c9e:	84 81       	ldd	r24, Z+4	; 0x04
     ca0:	95 81       	ldd	r25, Z+5	; 0x05
     ca2:	9d 83       	std	Y+5, r25	; 0x05
     ca4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	e8 17       	cp	r30, r24
     cb0:	f9 07       	cpc	r31, r25
     cb2:	31 f4       	brne	.+12     	; 0xcc0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cb4:	86 81       	ldd	r24, Z+6	; 0x06
     cb6:	97 81       	ldd	r25, Z+7	; 0x07
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
     cbe:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     cc0:	13 86       	std	Z+11, r1	; 0x0b
     cc2:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     cc4:	8c 91       	ld	r24, X
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cca:	8c 91       	ld	r24, X
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     cd2:	a8 95       	wdr
     cd4:	90 ec       	ldi	r25, 0xC0	; 192
     cd6:	88 e1       	ldi	r24, 0x18	; 24
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	a8 95       	wdr
     cde:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ce8:	08 95       	ret

00000cea <pxPortInitialiseStack>:
     cea:	fc 01       	movw	r30, r24
     cec:	60 83       	st	Z, r22
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	70 83       	st	Z, r23
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	10 82       	st	Z, r1
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	10 82       	st	Z, r1
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	20 e8       	ldi	r18, 0x80	; 128
     cfe:	20 83       	st	Z, r18
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	10 82       	st	Z, r1
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	10 82       	st	Z, r1
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	10 82       	st	Z, r1
     d0c:	77 97       	sbiw	r30, 0x17	; 23
     d0e:	40 83       	st	Z, r20
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	50 83       	st	Z, r21
     d14:	86 97       	sbiw	r24, 0x26	; 38
     d16:	08 95       	ret

00000d18 <xPortStartScheduler>:
     d18:	dc df       	rcall	.-72     	; 0xcd2 <prvSetupTimerInterrupt>
     d1a:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
     d1e:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
     d22:	cd 91       	ld	r28, X+
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	dd 91       	ld	r29, X+
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	7f 90       	pop	r7
     d5c:	6f 90       	pop	r6
     d5e:	5f 90       	pop	r5
     d60:	4f 90       	pop	r4
     d62:	3f 90       	pop	r3
     d64:	2f 90       	pop	r2
     d66:	1f 90       	pop	r1
     d68:	0f 90       	pop	r0
     d6a:	0c be       	out	0x3c, r0	; 60
     d6c:	0f 90       	pop	r0
     d6e:	0b be       	out	0x3b, r0	; 59
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	08 95       	ret
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	08 95       	ret

00000d7c <vPortYield>:
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	0f 92       	push	r0
     d84:	0b b6       	in	r0, 0x3b	; 59
     d86:	0f 92       	push	r0
     d88:	0c b6       	in	r0, 0x3c	; 60
     d8a:	0f 92       	push	r0
     d8c:	1f 92       	push	r1
     d8e:	11 24       	eor	r1, r1
     d90:	2f 92       	push	r2
     d92:	3f 92       	push	r3
     d94:	4f 92       	push	r4
     d96:	5f 92       	push	r5
     d98:	6f 92       	push	r6
     d9a:	7f 92       	push	r7
     d9c:	8f 92       	push	r8
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
     dd0:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
     dd4:	0d b6       	in	r0, 0x3d	; 61
     dd6:	0d 92       	st	X+, r0
     dd8:	0e b6       	in	r0, 0x3e	; 62
     dda:	0d 92       	st	X+, r0
     ddc:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskSwitchContext>
     de0:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
     de4:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
     de8:	cd 91       	ld	r28, X+
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	dd 91       	ld	r29, X+
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	8f 90       	pop	r8
     e20:	7f 90       	pop	r7
     e22:	6f 90       	pop	r6
     e24:	5f 90       	pop	r5
     e26:	4f 90       	pop	r4
     e28:	3f 90       	pop	r3
     e2a:	2f 90       	pop	r2
     e2c:	1f 90       	pop	r1
     e2e:	0f 90       	pop	r0
     e30:	0c be       	out	0x3c, r0	; 60
     e32:	0f 90       	pop	r0
     e34:	0b be       	out	0x3b, r0	; 59
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	08 95       	ret

00000e3e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	0f 92       	push	r0
     e46:	0b b6       	in	r0, 0x3b	; 59
     e48:	0f 92       	push	r0
     e4a:	0c b6       	in	r0, 0x3c	; 60
     e4c:	0f 92       	push	r0
     e4e:	1f 92       	push	r1
     e50:	11 24       	eor	r1, r1
     e52:	2f 92       	push	r2
     e54:	3f 92       	push	r3
     e56:	4f 92       	push	r4
     e58:	5f 92       	push	r5
     e5a:	6f 92       	push	r6
     e5c:	7f 92       	push	r7
     e5e:	8f 92       	push	r8
     e60:	9f 92       	push	r9
     e62:	af 92       	push	r10
     e64:	bf 92       	push	r11
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	2f 93       	push	r18
     e74:	3f 93       	push	r19
     e76:	4f 93       	push	r20
     e78:	5f 93       	push	r21
     e7a:	6f 93       	push	r22
     e7c:	7f 93       	push	r23
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	af 93       	push	r26
     e84:	bf 93       	push	r27
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
     e8e:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
     e92:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
     e96:	0d b6       	in	r0, 0x3d	; 61
     e98:	0d 92       	st	X+, r0
     e9a:	0e b6       	in	r0, 0x3e	; 62
     e9c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e9e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ea0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <xTaskIncrementTick>
     ea4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ea6:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     eaa:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
     eae:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
     eb2:	cd 91       	ld	r28, X+
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	dd 91       	ld	r29, X+
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	7f 90       	pop	r7
     eec:	6f 90       	pop	r6
     eee:	5f 90       	pop	r5
     ef0:	4f 90       	pop	r4
     ef2:	3f 90       	pop	r3
     ef4:	2f 90       	pop	r2
     ef6:	1f 90       	pop	r1
     ef8:	0f 90       	pop	r0
     efa:	0c be       	out	0x3c, r0	; 60
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f06:	08 95       	ret

00000f08 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f08:	9a df       	rcall	.-204    	; 0xe3e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f0a:	18 95       	reti

00000f0c <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f0c:	dc 01       	movw	r26, r24
     f0e:	53 96       	adiw	r26, 0x13	; 19
     f10:	2c 91       	ld	r18, X
     f12:	53 97       	sbiw	r26, 0x13	; 19
     f14:	22 23       	and	r18, r18
     f16:	41 f0       	breq	.+16     	; 0xf28 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f18:	5a 96       	adiw	r26, 0x1a	; 26
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	5b 97       	sbiw	r26, 0x1b	; 27
     f20:	90 81       	ld	r25, Z
     f22:	8a e0       	ldi	r24, 0x0A	; 10
     f24:	89 1b       	sub	r24, r25
     f26:	08 95       	ret
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	08 95       	ret

00000f2c <prvIsQueueEmpty>:
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	0f 92       	push	r0
     f32:	fc 01       	movw	r30, r24
     f34:	86 8d       	ldd	r24, Z+30	; 0x1e
     f36:	81 11       	cpse	r24, r1
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <prvIsQueueEmpty+0x12>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <prvIsQueueEmpty+0x14>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	08 95       	ret

00000f46 <prvIsQueueFull>:
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	0f 92       	push	r0
     f4c:	fc 01       	movw	r30, r24
     f4e:	26 8d       	ldd	r18, Z+30	; 0x1e
     f50:	87 8d       	ldd	r24, Z+31	; 0x1f
     f52:	28 13       	cpse	r18, r24
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <prvIsQueueFull+0x14>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <prvIsQueueFull+0x16>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	08 95       	ret

00000f62 <prvCopyDataToQueue>:
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ec 01       	movw	r28, r24
     f6c:	04 2f       	mov	r16, r20
     f6e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f70:	48 a1       	ldd	r20, Y+32	; 0x20
     f72:	41 11       	cpse	r20, r1
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <prvCopyDataToQueue+0x2c>
     f76:	88 81       	ld	r24, Y
     f78:	99 81       	ldd	r25, Y+1	; 0x01
     f7a:	89 2b       	or	r24, r25
     f7c:	09 f0       	breq	.+2      	; 0xf80 <prvCopyDataToQueue+0x1e>
     f7e:	42 c0       	rjmp	.+132    	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskPriorityDisinherit>
     f88:	1d 82       	std	Y+5, r1	; 0x05
     f8a:	1c 82       	std	Y+4, r1	; 0x04
     f8c:	42 c0       	rjmp	.+132    	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     f8e:	01 11       	cpse	r16, r1
     f90:	17 c0       	rjmp	.+46     	; 0xfc0 <prvCopyDataToQueue+0x5e>
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	9b 81       	ldd	r25, Y+3	; 0x03
     f98:	0e 94 90 30 	call	0x6120	; 0x6120 <memcpy>
     f9c:	28 a1       	ldd	r18, Y+32	; 0x20
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	82 0f       	add	r24, r18
     fa4:	91 1d       	adc	r25, r1
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	82 17       	cp	r24, r18
     fb0:	93 07       	cpc	r25, r19
     fb2:	50 f1       	brcs	.+84     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     fb4:	88 81       	ld	r24, Y
     fb6:	99 81       	ldd	r25, Y+1	; 0x01
     fb8:	9b 83       	std	Y+3, r25	; 0x03
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	29 c0       	rjmp	.+82     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	0e 94 90 30 	call	0x6120	; 0x6120 <memcpy>
     fca:	88 a1       	ldd	r24, Y+32	; 0x20
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	91 95       	neg	r25
     fd0:	81 95       	neg	r24
     fd2:	91 09       	sbc	r25, r1
     fd4:	2e 81       	ldd	r18, Y+6	; 0x06
     fd6:	3f 81       	ldd	r19, Y+7	; 0x07
     fd8:	28 0f       	add	r18, r24
     fda:	39 1f       	adc	r19, r25
     fdc:	3f 83       	std	Y+7, r19	; 0x07
     fde:	2e 83       	std	Y+6, r18	; 0x06
     fe0:	48 81       	ld	r20, Y
     fe2:	59 81       	ldd	r21, Y+1	; 0x01
     fe4:	24 17       	cp	r18, r20
     fe6:	35 07       	cpc	r19, r21
     fe8:	30 f4       	brcc	.+12     	; 0xff6 <prvCopyDataToQueue+0x94>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	9f 83       	std	Y+7, r25	; 0x07
     ff4:	8e 83       	std	Y+6, r24	; 0x06
     ff6:	02 30       	cpi	r16, 0x02	; 2
     ff8:	49 f4       	brne	.+18     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
     ffa:	11 23       	and	r17, r17
     ffc:	49 f0       	breq	.+18     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     ffe:	11 50       	subi	r17, 0x01	; 1
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	1f 5f       	subi	r17, 0xFF	; 255
    1014:	1e 8f       	std	Y+30, r17	; 0x1e
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	08 95       	ret

00001020 <prvCopyDataFromQueue>:
    1020:	fc 01       	movw	r30, r24
    1022:	40 a1       	ldd	r20, Z+32	; 0x20
    1024:	44 23       	and	r20, r20
    1026:	a9 f0       	breq	.+42     	; 0x1052 <prvCopyDataFromQueue+0x32>
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	26 81       	ldd	r18, Z+6	; 0x06
    102c:	37 81       	ldd	r19, Z+7	; 0x07
    102e:	24 0f       	add	r18, r20
    1030:	35 1f       	adc	r19, r21
    1032:	37 83       	std	Z+7, r19	; 0x07
    1034:	26 83       	std	Z+6, r18	; 0x06
    1036:	84 81       	ldd	r24, Z+4	; 0x04
    1038:	95 81       	ldd	r25, Z+5	; 0x05
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	20 f0       	brcs	.+8      	; 0x1048 <prvCopyDataFromQueue+0x28>
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	97 83       	std	Z+7, r25	; 0x07
    1046:	86 83       	std	Z+6, r24	; 0x06
    1048:	cb 01       	movw	r24, r22
    104a:	66 81       	ldd	r22, Z+6	; 0x06
    104c:	77 81       	ldd	r23, Z+7	; 0x07
    104e:	0c 94 90 30 	jmp	0x6120	; 0x6120 <memcpy>
    1052:	08 95       	ret

00001054 <prvUnlockQueue>:
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	0f 92       	push	r0
    1062:	1a a1       	ldd	r17, Y+34	; 0x22
    1064:	0b c0       	rjmp	.+22     	; 0x107c <prvUnlockQueue+0x28>
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	88 23       	and	r24, r24
    106a:	51 f0       	breq	.+20     	; 0x1080 <prvUnlockQueue+0x2c>
    106c:	ce 01       	movw	r24, r28
    106e:	43 96       	adiw	r24, 0x13	; 19
    1070:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    1074:	81 11       	cpse	r24, r1
    1076:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <vTaskMissedYield>
    107a:	11 50       	subi	r17, 0x01	; 1
    107c:	11 16       	cp	r1, r17
    107e:	9c f3       	brlt	.-26     	; 0x1066 <prvUnlockQueue+0x12>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	8a a3       	std	Y+34, r24	; 0x22
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	0f 92       	push	r0
    108e:	19 a1       	ldd	r17, Y+33	; 0x21
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <prvUnlockQueue+0x54>
    1092:	88 85       	ldd	r24, Y+8	; 0x08
    1094:	88 23       	and	r24, r24
    1096:	51 f0       	breq	.+20     	; 0x10ac <prvUnlockQueue+0x58>
    1098:	ce 01       	movw	r24, r28
    109a:	08 96       	adiw	r24, 0x08	; 8
    109c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    10a0:	81 11       	cpse	r24, r1
    10a2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <vTaskMissedYield>
    10a6:	11 50       	subi	r17, 0x01	; 1
    10a8:	11 16       	cp	r1, r17
    10aa:	9c f3       	brlt	.-26     	; 0x1092 <prvUnlockQueue+0x3e>
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	89 a3       	std	Y+33, r24	; 0x21
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	08 95       	ret

000010bc <xQueueGenericReset>:
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	ec 01       	movw	r28, r24
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	0f 92       	push	r0
    10c8:	e8 81       	ld	r30, Y
    10ca:	f9 81       	ldd	r31, Y+1	; 0x01
    10cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ce:	28 a1       	ldd	r18, Y+32	; 0x20
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	82 9f       	mul	r24, r18
    10d6:	a0 01       	movw	r20, r0
    10d8:	83 9f       	mul	r24, r19
    10da:	50 0d       	add	r21, r0
    10dc:	92 9f       	mul	r25, r18
    10de:	50 0d       	add	r21, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	4e 0f       	add	r20, r30
    10e4:	5f 1f       	adc	r21, r31
    10e6:	5d 83       	std	Y+5, r21	; 0x05
    10e8:	4c 83       	std	Y+4, r20	; 0x04
    10ea:	1e 8e       	std	Y+30, r1	; 0x1e
    10ec:	fb 83       	std	Y+3, r31	; 0x03
    10ee:	ea 83       	std	Y+2, r30	; 0x02
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	28 9f       	mul	r18, r24
    10f4:	a0 01       	movw	r20, r0
    10f6:	29 9f       	mul	r18, r25
    10f8:	50 0d       	add	r21, r0
    10fa:	38 9f       	mul	r19, r24
    10fc:	50 0d       	add	r21, r0
    10fe:	11 24       	eor	r1, r1
    1100:	cf 01       	movw	r24, r30
    1102:	84 0f       	add	r24, r20
    1104:	95 1f       	adc	r25, r21
    1106:	9f 83       	std	Y+7, r25	; 0x07
    1108:	8e 83       	std	Y+6, r24	; 0x06
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	89 a3       	std	Y+33, r24	; 0x21
    110e:	8a a3       	std	Y+34, r24	; 0x22
    1110:	61 11       	cpse	r22, r1
    1112:	0b c0       	rjmp	.+22     	; 0x112a <xQueueGenericReset+0x6e>
    1114:	88 85       	ldd	r24, Y+8	; 0x08
    1116:	88 23       	and	r24, r24
    1118:	71 f0       	breq	.+28     	; 0x1136 <xQueueGenericReset+0x7a>
    111a:	ce 01       	movw	r24, r28
    111c:	08 96       	adiw	r24, 0x08	; 8
    111e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    1122:	88 23       	and	r24, r24
    1124:	41 f0       	breq	.+16     	; 0x1136 <xQueueGenericReset+0x7a>
    1126:	2a de       	rcall	.-940    	; 0xd7c <vPortYield>
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <xQueueGenericReset+0x7a>
    112a:	ce 01       	movw	r24, r28
    112c:	08 96       	adiw	r24, 0x08	; 8
    112e:	58 dd       	rcall	.-1360   	; 0xbe0 <vListInitialise>
    1130:	ce 01       	movw	r24, r28
    1132:	43 96       	adiw	r24, 0x13	; 19
    1134:	55 dd       	rcall	.-1366   	; 0xbe0 <vListInitialise>
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <prvInitialiseNewQueue>:
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	f8 01       	movw	r30, r16
    1148:	61 11       	cpse	r22, r1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <prvInitialiseNewQueue+0x10>
    114c:	11 83       	std	Z+1, r17	; 0x01
    114e:	00 83       	st	Z, r16
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <prvInitialiseNewQueue+0x14>
    1152:	51 83       	std	Z+1, r21	; 0x01
    1154:	40 83       	st	Z, r20
    1156:	87 8f       	std	Z+31, r24	; 0x1f
    1158:	60 a3       	std	Z+32, r22	; 0x20
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	cf 01       	movw	r24, r30
    115e:	ae df       	rcall	.-164    	; 0x10bc <xQueueGenericReset>
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <xQueueGenericCreate>:
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	f8 2e       	mov	r15, r24
    1176:	e6 2e       	mov	r14, r22
    1178:	d4 2e       	mov	r13, r20
    117a:	86 9f       	mul	r24, r22
    117c:	c0 01       	movw	r24, r0
    117e:	11 24       	eor	r1, r1
    1180:	83 96       	adiw	r24, 0x23	; 35
    1182:	48 dc       	rcall	.-1904   	; 0xa14 <pvPortMalloc>
    1184:	ec 01       	movw	r28, r24
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	41 f0       	breq	.+16     	; 0x119a <xQueueGenericCreate+0x34>
    118a:	8c 01       	movw	r16, r24
    118c:	2d 2d       	mov	r18, r13
    118e:	ac 01       	movw	r20, r24
    1190:	4d 5d       	subi	r20, 0xDD	; 221
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	6e 2d       	mov	r22, r14
    1196:	8f 2d       	mov	r24, r15
    1198:	d4 df       	rcall	.-88     	; 0x1142 <prvInitialiseNewQueue>
    119a:	ce 01       	movw	r24, r28
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	08 95       	ret

000011ac <xQueueGenericSend>:
    11ac:	cf 92       	push	r12
    11ae:	df 92       	push	r13
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	29 97       	sbiw	r28, 0x09	; 9
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	7c 01       	movw	r14, r24
    11ce:	6b 01       	movw	r12, r22
    11d0:	2e 83       	std	Y+6, r18	; 0x06
    11d2:	3f 83       	std	Y+7, r19	; 0x07
    11d4:	48 87       	std	Y+8, r20	; 0x08
    11d6:	59 87       	std	Y+9, r21	; 0x09
    11d8:	10 e0       	ldi	r17, 0x00	; 0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	0f 92       	push	r0
    11e0:	f7 01       	movw	r30, r14
    11e2:	96 8d       	ldd	r25, Z+30	; 0x1e
    11e4:	87 8d       	ldd	r24, Z+31	; 0x1f
    11e6:	98 17       	cp	r25, r24
    11e8:	10 f0       	brcs	.+4      	; 0x11ee <xQueueGenericSend+0x42>
    11ea:	02 30       	cpi	r16, 0x02	; 2
    11ec:	b1 f4       	brne	.+44     	; 0x121a <xQueueGenericSend+0x6e>
    11ee:	40 2f       	mov	r20, r16
    11f0:	b6 01       	movw	r22, r12
    11f2:	c7 01       	movw	r24, r14
    11f4:	b6 de       	rcall	.-660    	; 0xf62 <prvCopyDataToQueue>
    11f6:	f7 01       	movw	r30, r14
    11f8:	93 89       	ldd	r25, Z+19	; 0x13
    11fa:	99 23       	and	r25, r25
    11fc:	41 f0       	breq	.+16     	; 0x120e <xQueueGenericSend+0x62>
    11fe:	c7 01       	movw	r24, r14
    1200:	43 96       	adiw	r24, 0x13	; 19
    1202:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    1206:	88 23       	and	r24, r24
    1208:	21 f0       	breq	.+8      	; 0x1212 <xQueueGenericSend+0x66>
    120a:	b8 dd       	rcall	.-1168   	; 0xd7c <vPortYield>
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <xQueueGenericSend+0x66>
    120e:	81 11       	cpse	r24, r1
    1210:	b5 dd       	rcall	.-1174   	; 0xd7c <vPortYield>
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	4c c0       	rjmp	.+152    	; 0x12b2 <xQueueGenericSend+0x106>
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	a8 85       	ldd	r26, Y+8	; 0x08
    1220:	b9 85       	ldd	r27, Y+9	; 0x09
    1222:	89 2b       	or	r24, r25
    1224:	8a 2b       	or	r24, r26
    1226:	8b 2b       	or	r24, r27
    1228:	21 f4       	brne	.+8      	; 0x1232 <xQueueGenericSend+0x86>
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	40 c0       	rjmp	.+128    	; 0x12b2 <xQueueGenericSend+0x106>
    1232:	11 11       	cpse	r17, r1
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <xQueueGenericSend+0x94>
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <vTaskInternalSetTimeOutState>
    123e:	11 e0       	ldi	r17, 0x01	; 1
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	a9 d7       	rcall	.+3922   	; 0x2198 <vTaskSuspendAll>
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	0f 92       	push	r0
    124c:	f7 01       	movw	r30, r14
    124e:	81 a1       	ldd	r24, Z+33	; 0x21
    1250:	8f 3f       	cpi	r24, 0xFF	; 255
    1252:	09 f4       	brne	.+2      	; 0x1256 <xQueueGenericSend+0xaa>
    1254:	11 a2       	std	Z+33, r1	; 0x21
    1256:	f7 01       	movw	r30, r14
    1258:	82 a1       	ldd	r24, Z+34	; 0x22
    125a:	8f 3f       	cpi	r24, 0xFF	; 255
    125c:	09 f4       	brne	.+2      	; 0x1260 <xQueueGenericSend+0xb4>
    125e:	12 a2       	std	Z+34, r1	; 0x22
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	be 01       	movw	r22, r28
    1266:	6a 5f       	subi	r22, 0xFA	; 250
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1272:	81 11       	cpse	r24, r1
    1274:	19 c0       	rjmp	.+50     	; 0x12a8 <xQueueGenericSend+0xfc>
    1276:	c7 01       	movw	r24, r14
    1278:	66 de       	rcall	.-820    	; 0xf46 <prvIsQueueFull>
    127a:	88 23       	and	r24, r24
    127c:	81 f0       	breq	.+32     	; 0x129e <xQueueGenericSend+0xf2>
    127e:	4e 81       	ldd	r20, Y+6	; 0x06
    1280:	5f 81       	ldd	r21, Y+7	; 0x07
    1282:	68 85       	ldd	r22, Y+8	; 0x08
    1284:	79 85       	ldd	r23, Y+9	; 0x09
    1286:	c7 01       	movw	r24, r14
    1288:	08 96       	adiw	r24, 0x08	; 8
    128a:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskPlaceOnEventList>
    128e:	c7 01       	movw	r24, r14
    1290:	e1 de       	rcall	.-574    	; 0x1054 <prvUnlockQueue>
    1292:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
    1296:	81 11       	cpse	r24, r1
    1298:	a0 cf       	rjmp	.-192    	; 0x11da <xQueueGenericSend+0x2e>
    129a:	70 dd       	rcall	.-1312   	; 0xd7c <vPortYield>
    129c:	9e cf       	rjmp	.-196    	; 0x11da <xQueueGenericSend+0x2e>
    129e:	c7 01       	movw	r24, r14
    12a0:	d9 de       	rcall	.-590    	; 0x1054 <prvUnlockQueue>
    12a2:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
    12a6:	99 cf       	rjmp	.-206    	; 0x11da <xQueueGenericSend+0x2e>
    12a8:	c7 01       	movw	r24, r14
    12aa:	d4 de       	rcall	.-600    	; 0x1054 <prvUnlockQueue>
    12ac:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	29 96       	adiw	r28, 0x09	; 9
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	08 95       	ret

000012d0 <xQueueGenericSendFromISR>:
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	8a 01       	movw	r16, r20
    12de:	fc 01       	movw	r30, r24
    12e0:	56 8d       	ldd	r21, Z+30	; 0x1e
    12e2:	37 8d       	ldd	r19, Z+31	; 0x1f
    12e4:	53 17       	cp	r21, r19
    12e6:	10 f0       	brcs	.+4      	; 0x12ec <xQueueGenericSendFromISR+0x1c>
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	f9 f4       	brne	.+62     	; 0x132a <xQueueGenericSendFromISR+0x5a>
    12ec:	42 2f       	mov	r20, r18
    12ee:	78 01       	movw	r14, r16
    12f0:	ec 01       	movw	r28, r24
    12f2:	1a a1       	ldd	r17, Y+34	; 0x22
    12f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f6:	ce 01       	movw	r24, r28
    12f8:	34 de       	rcall	.-920    	; 0xf62 <prvCopyDataToQueue>
    12fa:	1f 3f       	cpi	r17, 0xFF	; 255
    12fc:	81 f4       	brne	.+32     	; 0x131e <xQueueGenericSendFromISR+0x4e>
    12fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1300:	88 23       	and	r24, r24
    1302:	a9 f0       	breq	.+42     	; 0x132e <xQueueGenericSendFromISR+0x5e>
    1304:	ce 01       	movw	r24, r28
    1306:	43 96       	adiw	r24, 0x13	; 19
    1308:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    130c:	88 23       	and	r24, r24
    130e:	89 f0       	breq	.+34     	; 0x1332 <xQueueGenericSendFromISR+0x62>
    1310:	e1 14       	cp	r14, r1
    1312:	f1 04       	cpc	r15, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <xQueueGenericSendFromISR+0x66>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	f7 01       	movw	r30, r14
    131a:	80 83       	st	Z, r24
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <xQueueGenericSendFromISR+0x68>
    131e:	ff 24       	eor	r15, r15
    1320:	f3 94       	inc	r15
    1322:	f1 0e       	add	r15, r17
    1324:	fa a2       	std	Y+34, r15	; 0x22
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <xQueueGenericSendFromISR+0x68>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <xQueueGenericSendFromISR+0x68>
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <xQueueGenericSendFromISR+0x68>
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <xQueueGenericSendFromISR+0x68>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <xQueueReceive>:
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	29 97       	sbiw	r28, 0x09	; 9
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	8c 01       	movw	r16, r24
    1368:	6b 01       	movw	r12, r22
    136a:	2e 83       	std	Y+6, r18	; 0x06
    136c:	3f 83       	std	Y+7, r19	; 0x07
    136e:	48 87       	std	Y+8, r20	; 0x08
    1370:	59 87       	std	Y+9, r21	; 0x09
    1372:	e1 2c       	mov	r14, r1
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	0f 92       	push	r0
    137a:	f8 01       	movw	r30, r16
    137c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    137e:	ff 20       	and	r15, r15
    1380:	99 f0       	breq	.+38     	; 0x13a8 <xQueueReceive+0x62>
    1382:	b6 01       	movw	r22, r12
    1384:	c8 01       	movw	r24, r16
    1386:	4c de       	rcall	.-872    	; 0x1020 <prvCopyDataFromQueue>
    1388:	fa 94       	dec	r15
    138a:	f8 01       	movw	r30, r16
    138c:	f6 8e       	std	Z+30, r15	; 0x1e
    138e:	80 85       	ldd	r24, Z+8	; 0x08
    1390:	88 23       	and	r24, r24
    1392:	31 f0       	breq	.+12     	; 0x13a0 <xQueueReceive+0x5a>
    1394:	c8 01       	movw	r24, r16
    1396:	08 96       	adiw	r24, 0x08	; 8
    1398:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    139c:	81 11       	cpse	r24, r1
    139e:	ee dc       	rcall	.-1572   	; 0xd7c <vPortYield>
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	4f c0       	rjmp	.+158    	; 0x1446 <xQueueReceive+0x100>
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	a8 85       	ldd	r26, Y+8	; 0x08
    13ae:	b9 85       	ldd	r27, Y+9	; 0x09
    13b0:	89 2b       	or	r24, r25
    13b2:	8a 2b       	or	r24, r26
    13b4:	8b 2b       	or	r24, r27
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <xQueueReceive+0x7a>
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	43 c0       	rjmp	.+134    	; 0x1446 <xQueueReceive+0x100>
    13c0:	e1 10       	cpse	r14, r1
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <xQueueReceive+0x8a>
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <vTaskInternalSetTimeOutState>
    13cc:	ee 24       	eor	r14, r14
    13ce:	e3 94       	inc	r14
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	e1 d6       	rcall	.+3522   	; 0x2198 <vTaskSuspendAll>
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	0f 92       	push	r0
    13dc:	f8 01       	movw	r30, r16
    13de:	81 a1       	ldd	r24, Z+33	; 0x21
    13e0:	8f 3f       	cpi	r24, 0xFF	; 255
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <xQueueReceive+0xa0>
    13e4:	11 a2       	std	Z+33, r1	; 0x21
    13e6:	f8 01       	movw	r30, r16
    13e8:	82 a1       	ldd	r24, Z+34	; 0x22
    13ea:	8f 3f       	cpi	r24, 0xFF	; 255
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <xQueueReceive+0xaa>
    13ee:	12 a2       	std	Z+34, r1	; 0x22
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	be 01       	movw	r22, r28
    13f6:	6a 5f       	subi	r22, 0xFA	; 250
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1402:	81 11       	cpse	r24, r1
    1404:	17 c0       	rjmp	.+46     	; 0x1434 <xQueueReceive+0xee>
    1406:	c8 01       	movw	r24, r16
    1408:	91 dd       	rcall	.-1246   	; 0xf2c <prvIsQueueEmpty>
    140a:	88 23       	and	r24, r24
    140c:	79 f0       	breq	.+30     	; 0x142c <xQueueReceive+0xe6>
    140e:	4e 81       	ldd	r20, Y+6	; 0x06
    1410:	5f 81       	ldd	r21, Y+7	; 0x07
    1412:	68 85       	ldd	r22, Y+8	; 0x08
    1414:	79 85       	ldd	r23, Y+9	; 0x09
    1416:	c8 01       	movw	r24, r16
    1418:	43 96       	adiw	r24, 0x13	; 19
    141a:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskPlaceOnEventList>
    141e:	c8 01       	movw	r24, r16
    1420:	19 de       	rcall	.-974    	; 0x1054 <prvUnlockQueue>
    1422:	fa d7       	rcall	.+4084   	; 0x2418 <xTaskResumeAll>
    1424:	81 11       	cpse	r24, r1
    1426:	a6 cf       	rjmp	.-180    	; 0x1374 <xQueueReceive+0x2e>
    1428:	a9 dc       	rcall	.-1710   	; 0xd7c <vPortYield>
    142a:	a4 cf       	rjmp	.-184    	; 0x1374 <xQueueReceive+0x2e>
    142c:	c8 01       	movw	r24, r16
    142e:	12 de       	rcall	.-988    	; 0x1054 <prvUnlockQueue>
    1430:	f3 d7       	rcall	.+4070   	; 0x2418 <xTaskResumeAll>
    1432:	a0 cf       	rjmp	.-192    	; 0x1374 <xQueueReceive+0x2e>
    1434:	c8 01       	movw	r24, r16
    1436:	0e de       	rcall	.-996    	; 0x1054 <prvUnlockQueue>
    1438:	ef d7       	rcall	.+4062   	; 0x2418 <xTaskResumeAll>
    143a:	c8 01       	movw	r24, r16
    143c:	77 dd       	rcall	.-1298   	; 0xf2c <prvIsQueueEmpty>
    143e:	88 23       	and	r24, r24
    1440:	09 f4       	brne	.+2      	; 0x1444 <xQueueReceive+0xfe>
    1442:	98 cf       	rjmp	.-208    	; 0x1374 <xQueueReceive+0x2e>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	29 96       	adiw	r28, 0x09	; 9
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	08 95       	ret

00001464 <xQueueSemaphoreTake>:
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	29 97       	sbiw	r28, 0x09	; 9
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	8c 01       	movw	r16, r24
    1482:	4e 83       	std	Y+6, r20	; 0x06
    1484:	5f 83       	std	Y+7, r21	; 0x07
    1486:	68 87       	std	Y+8, r22	; 0x08
    1488:	79 87       	std	Y+9, r23	; 0x09
    148a:	e1 2c       	mov	r14, r1
    148c:	f1 2c       	mov	r15, r1
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	0f 92       	push	r0
    1494:	f8 01       	movw	r30, r16
    1496:	86 8d       	ldd	r24, Z+30	; 0x1e
    1498:	88 23       	and	r24, r24
    149a:	c9 f0       	breq	.+50     	; 0x14ce <xQueueSemaphoreTake+0x6a>
    149c:	81 50       	subi	r24, 0x01	; 1
    149e:	86 8f       	std	Z+30, r24	; 0x1e
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	89 2b       	or	r24, r25
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <xQueueSemaphoreTake+0x4e>
    14a8:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <pvTaskIncrementMutexHeldCount>
    14ac:	f8 01       	movw	r30, r16
    14ae:	95 83       	std	Z+5, r25	; 0x05
    14b0:	84 83       	std	Z+4, r24	; 0x04
    14b2:	f8 01       	movw	r30, r16
    14b4:	80 85       	ldd	r24, Z+8	; 0x08
    14b6:	88 23       	and	r24, r24
    14b8:	31 f0       	breq	.+12     	; 0x14c6 <xQueueSemaphoreTake+0x62>
    14ba:	c8 01       	movw	r24, r16
    14bc:	08 96       	adiw	r24, 0x08	; 8
    14be:	0e 94 70 14 	call	0x28e0	; 0x28e0 <xTaskRemoveFromEventList>
    14c2:	81 11       	cpse	r24, r1
    14c4:	5b dc       	rcall	.-1866   	; 0xd7c <vPortYield>
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	6f c0       	rjmp	.+222    	; 0x15ac <xQueueSemaphoreTake+0x148>
    14ce:	8e 81       	ldd	r24, Y+6	; 0x06
    14d0:	9f 81       	ldd	r25, Y+7	; 0x07
    14d2:	a8 85       	ldd	r26, Y+8	; 0x08
    14d4:	b9 85       	ldd	r27, Y+9	; 0x09
    14d6:	89 2b       	or	r24, r25
    14d8:	8a 2b       	or	r24, r26
    14da:	8b 2b       	or	r24, r27
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <xQueueSemaphoreTake+0x82>
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	63 c0       	rjmp	.+198    	; 0x15ac <xQueueSemaphoreTake+0x148>
    14e6:	f1 10       	cpse	r15, r1
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <xQueueSemaphoreTake+0x92>
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <vTaskInternalSetTimeOutState>
    14f2:	ff 24       	eor	r15, r15
    14f4:	f3 94       	inc	r15
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	4e d6       	rcall	.+3228   	; 0x2198 <vTaskSuspendAll>
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	0f 92       	push	r0
    1502:	f8 01       	movw	r30, r16
    1504:	81 a1       	ldd	r24, Z+33	; 0x21
    1506:	8f 3f       	cpi	r24, 0xFF	; 255
    1508:	09 f4       	brne	.+2      	; 0x150c <xQueueSemaphoreTake+0xa8>
    150a:	11 a2       	std	Z+33, r1	; 0x21
    150c:	f8 01       	movw	r30, r16
    150e:	82 a1       	ldd	r24, Z+34	; 0x22
    1510:	8f 3f       	cpi	r24, 0xFF	; 255
    1512:	09 f4       	brne	.+2      	; 0x1516 <xQueueSemaphoreTake+0xb2>
    1514:	12 a2       	std	Z+34, r1	; 0x22
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	be 01       	movw	r22, r28
    151c:	6a 5f       	subi	r22, 0xFA	; 250
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1528:	81 11       	cpse	r24, r1
    152a:	26 c0       	rjmp	.+76     	; 0x1578 <xQueueSemaphoreTake+0x114>
    152c:	c8 01       	movw	r24, r16
    152e:	fe dc       	rcall	.-1540   	; 0xf2c <prvIsQueueEmpty>
    1530:	88 23       	and	r24, r24
    1532:	f1 f0       	breq	.+60     	; 0x1570 <xQueueSemaphoreTake+0x10c>
    1534:	f8 01       	movw	r30, r16
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	89 2b       	or	r24, r25
    153c:	51 f4       	brne	.+20     	; 0x1552 <xQueueSemaphoreTake+0xee>
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	0f 92       	push	r0
    1544:	84 81       	ldd	r24, Z+4	; 0x04
    1546:	95 81       	ldd	r25, Z+5	; 0x05
    1548:	0e 94 5d 16 	call	0x2cba	; 0x2cba <xTaskPriorityInherit>
    154c:	e8 2e       	mov	r14, r24
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	4e 81       	ldd	r20, Y+6	; 0x06
    1554:	5f 81       	ldd	r21, Y+7	; 0x07
    1556:	68 85       	ldd	r22, Y+8	; 0x08
    1558:	79 85       	ldd	r23, Y+9	; 0x09
    155a:	c8 01       	movw	r24, r16
    155c:	43 96       	adiw	r24, 0x13	; 19
    155e:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskPlaceOnEventList>
    1562:	c8 01       	movw	r24, r16
    1564:	77 dd       	rcall	.-1298   	; 0x1054 <prvUnlockQueue>
    1566:	58 d7       	rcall	.+3760   	; 0x2418 <xTaskResumeAll>
    1568:	81 11       	cpse	r24, r1
    156a:	91 cf       	rjmp	.-222    	; 0x148e <xQueueSemaphoreTake+0x2a>
    156c:	07 dc       	rcall	.-2034   	; 0xd7c <vPortYield>
    156e:	8f cf       	rjmp	.-226    	; 0x148e <xQueueSemaphoreTake+0x2a>
    1570:	c8 01       	movw	r24, r16
    1572:	70 dd       	rcall	.-1312   	; 0x1054 <prvUnlockQueue>
    1574:	51 d7       	rcall	.+3746   	; 0x2418 <xTaskResumeAll>
    1576:	8b cf       	rjmp	.-234    	; 0x148e <xQueueSemaphoreTake+0x2a>
    1578:	c8 01       	movw	r24, r16
    157a:	6c dd       	rcall	.-1320   	; 0x1054 <prvUnlockQueue>
    157c:	4d d7       	rcall	.+3738   	; 0x2418 <xTaskResumeAll>
    157e:	c8 01       	movw	r24, r16
    1580:	d5 dc       	rcall	.-1622   	; 0xf2c <prvIsQueueEmpty>
    1582:	88 23       	and	r24, r24
    1584:	09 f4       	brne	.+2      	; 0x1588 <xQueueSemaphoreTake+0x124>
    1586:	83 cf       	rjmp	.-250    	; 0x148e <xQueueSemaphoreTake+0x2a>
    1588:	ee 20       	and	r14, r14
    158a:	79 f0       	breq	.+30     	; 0x15aa <xQueueSemaphoreTake+0x146>
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	0f 92       	push	r0
    1592:	c8 01       	movw	r24, r16
    1594:	bb dc       	rcall	.-1674   	; 0xf0c <prvGetDisinheritPriorityAfterTimeout>
    1596:	68 2f       	mov	r22, r24
    1598:	f8 01       	movw	r30, r16
    159a:	84 81       	ldd	r24, Z+4	; 0x04
    159c:	95 81       	ldd	r25, Z+5	; 0x05
    159e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vTaskPriorityDisinheritAfterTimeout>
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <xQueueSemaphoreTake+0x148>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	29 96       	adiw	r28, 0x09	; 9
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	08 95       	ret

000015c6 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	0f 92       	push	r0
    15d2:	89 a1       	ldd	r24, Y+33	; 0x21
    15d4:	8f 3f       	cpi	r24, 0xFF	; 255
    15d6:	09 f4       	brne	.+2      	; 0x15da <vQueueWaitForMessageRestricted+0x14>
    15d8:	19 a2       	std	Y+33, r1	; 0x21
    15da:	8a a1       	ldd	r24, Y+34	; 0x22
    15dc:	8f 3f       	cpi	r24, 0xFF	; 255
    15de:	09 f4       	brne	.+2      	; 0x15e2 <vQueueWaitForMessageRestricted+0x1c>
    15e0:	1a a2       	std	Y+34, r1	; 0x22
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    15e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15e8:	81 11       	cpse	r24, r1
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    15ec:	ce 01       	movw	r24, r28
    15ee:	43 96       	adiw	r24, 0x13	; 19
    15f0:	0e 94 2e 14 	call	0x285c	; 0x285c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    15f4:	ce 01       	movw	r24, r28
    15f6:	2e dd       	rcall	.-1444   	; 0x1054 <prvUnlockQueue>
    }
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    15fe:	fc 01       	movw	r30, r24
    1600:	44 81       	ldd	r20, Z+4	; 0x04
    1602:	55 81       	ldd	r21, Z+5	; 0x05
    1604:	22 81       	ldd	r18, Z+2	; 0x02
    1606:	33 81       	ldd	r19, Z+3	; 0x03
    1608:	24 0f       	add	r18, r20
    160a:	35 1f       	adc	r19, r21
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	b9 01       	movw	r22, r18
    1612:	68 1b       	sub	r22, r24
    1614:	79 0b       	sbc	r23, r25
    1616:	cb 01       	movw	r24, r22
    1618:	64 17       	cp	r22, r20
    161a:	75 07       	cpc	r23, r21
    161c:	10 f0       	brcs	.+4      	; 0x1622 <prvBytesInBuffer+0x24>
    161e:	84 1b       	sub	r24, r20
    1620:	95 0b       	sbc	r25, r21
    1622:	08 95       	ret

00001624 <prvInitialiseNewStreamBuffer>:
    1624:	0f 93       	push	r16
    1626:	fc 01       	movw	r30, r24
    1628:	8f e0       	ldi	r24, 0x0F	; 15
    162a:	df 01       	movw	r26, r30
    162c:	1d 92       	st	X+, r1
    162e:	8a 95       	dec	r24
    1630:	e9 f7       	brne	.-6      	; 0x162c <prvInitialiseNewStreamBuffer+0x8>
    1632:	75 87       	std	Z+13, r23	; 0x0d
    1634:	64 87       	std	Z+12, r22	; 0x0c
    1636:	55 83       	std	Z+5, r21	; 0x05
    1638:	44 83       	std	Z+4, r20	; 0x04
    163a:	37 83       	std	Z+7, r19	; 0x07
    163c:	26 83       	std	Z+6, r18	; 0x06
    163e:	06 87       	std	Z+14, r16	; 0x0e
    1640:	0f 91       	pop	r16
    1642:	08 95       	ret

00001644 <prvWriteBytesToBuffer>:
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	6c 01       	movw	r12, r24
    165a:	5b 01       	movw	r10, r22
    165c:	7a 01       	movw	r14, r20
    165e:	fc 01       	movw	r30, r24
    1660:	c2 81       	ldd	r28, Z+2	; 0x02
    1662:	d3 81       	ldd	r29, Z+3	; 0x03
    1664:	04 81       	ldd	r16, Z+4	; 0x04
    1666:	15 81       	ldd	r17, Z+5	; 0x05
    1668:	0c 1b       	sub	r16, r28
    166a:	1d 0b       	sbc	r17, r29
    166c:	40 17       	cp	r20, r16
    166e:	51 07       	cpc	r21, r17
    1670:	08 f4       	brcc	.+2      	; 0x1674 <prvWriteBytesToBuffer+0x30>
    1672:	8a 01       	movw	r16, r20
    1674:	f6 01       	movw	r30, r12
    1676:	84 85       	ldd	r24, Z+12	; 0x0c
    1678:	95 85       	ldd	r25, Z+13	; 0x0d
    167a:	a8 01       	movw	r20, r16
    167c:	b5 01       	movw	r22, r10
    167e:	8c 0f       	add	r24, r28
    1680:	9d 1f       	adc	r25, r29
    1682:	0e 94 90 30 	call	0x6120	; 0x6120 <memcpy>
    1686:	0e 15       	cp	r16, r14
    1688:	1f 05       	cpc	r17, r15
    168a:	58 f4       	brcc	.+22     	; 0x16a2 <prvWriteBytesToBuffer+0x5e>
    168c:	a7 01       	movw	r20, r14
    168e:	40 1b       	sub	r20, r16
    1690:	51 0b       	sbc	r21, r17
    1692:	b5 01       	movw	r22, r10
    1694:	60 0f       	add	r22, r16
    1696:	71 1f       	adc	r23, r17
    1698:	f6 01       	movw	r30, r12
    169a:	84 85       	ldd	r24, Z+12	; 0x0c
    169c:	95 85       	ldd	r25, Z+13	; 0x0d
    169e:	0e 94 90 30 	call	0x6120	; 0x6120 <memcpy>
    16a2:	ce 01       	movw	r24, r28
    16a4:	8e 0d       	add	r24, r14
    16a6:	9f 1d       	adc	r25, r15
    16a8:	f6 01       	movw	r30, r12
    16aa:	24 81       	ldd	r18, Z+4	; 0x04
    16ac:	35 81       	ldd	r19, Z+5	; 0x05
    16ae:	82 17       	cp	r24, r18
    16b0:	93 07       	cpc	r25, r19
    16b2:	10 f0       	brcs	.+4      	; 0x16b8 <prvWriteBytesToBuffer+0x74>
    16b4:	82 1b       	sub	r24, r18
    16b6:	93 0b       	sbc	r25, r19
    16b8:	f6 01       	movw	r30, r12
    16ba:	93 83       	std	Z+3, r25	; 0x03
    16bc:	82 83       	std	Z+2, r24	; 0x02
    16be:	c7 01       	movw	r24, r14
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	08 95       	ret

000016d6 <prvWriteMessageToBuffer>:
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	1f 92       	push	r1
    16e8:	1f 92       	push	r1
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	7c 01       	movw	r14, r24
    16f0:	6b 01       	movw	r12, r22
    16f2:	5a 83       	std	Y+2, r21	; 0x02
    16f4:	49 83       	std	Y+1, r20	; 0x01
    16f6:	21 15       	cp	r18, r1
    16f8:	31 05       	cpc	r19, r1
    16fa:	c1 f0       	breq	.+48     	; 0x172c <prvWriteMessageToBuffer+0x56>
    16fc:	fc 01       	movw	r30, r24
    16fe:	86 85       	ldd	r24, Z+14	; 0x0e
    1700:	80 fd       	sbrc	r24, 0
    1702:	08 c0       	rjmp	.+16     	; 0x1714 <prvWriteMessageToBuffer+0x3e>
    1704:	42 17       	cp	r20, r18
    1706:	53 07       	cpc	r21, r19
    1708:	08 f4       	brcc	.+2      	; 0x170c <prvWriteMessageToBuffer+0x36>
    170a:	9a 01       	movw	r18, r20
    170c:	3a 83       	std	Y+2, r19	; 0x02
    170e:	29 83       	std	Y+1, r18	; 0x01
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <prvWriteMessageToBuffer+0x5c>
    1714:	20 17       	cp	r18, r16
    1716:	31 07       	cpc	r19, r17
    1718:	58 f0       	brcs	.+22     	; 0x1730 <prvWriteMessageToBuffer+0x5a>
    171a:	42 e0       	ldi	r20, 0x02	; 2
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	be 01       	movw	r22, r28
    1720:	6f 5f       	subi	r22, 0xFF	; 255
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	c7 01       	movw	r24, r14
    1726:	8e df       	rcall	.-228    	; 0x1644 <prvWriteBytesToBuffer>
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <prvWriteMessageToBuffer+0x5c>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <prvWriteMessageToBuffer+0x5c>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	88 23       	and	r24, r24
    1734:	31 f0       	breq	.+12     	; 0x1742 <prvWriteMessageToBuffer+0x6c>
    1736:	49 81       	ldd	r20, Y+1	; 0x01
    1738:	5a 81       	ldd	r21, Y+2	; 0x02
    173a:	b6 01       	movw	r22, r12
    173c:	c7 01       	movw	r24, r14
    173e:	82 df       	rcall	.-252    	; 0x1644 <prvWriteBytesToBuffer>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <prvWriteMessageToBuffer+0x70>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	08 95       	ret

0000175c <prvReadBytesFromBuffer>:
    175c:	af 92       	push	r10
    175e:	bf 92       	push	r11
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	7c 01       	movw	r14, r24
    1772:	5b 01       	movw	r10, r22
    1774:	e9 01       	movw	r28, r18
    1776:	42 17       	cp	r20, r18
    1778:	53 07       	cpc	r21, r19
    177a:	08 f4       	brcc	.+2      	; 0x177e <prvReadBytesFromBuffer+0x22>
    177c:	ea 01       	movw	r28, r20
    177e:	20 97       	sbiw	r28, 0x00	; 0
    1780:	81 f1       	breq	.+96     	; 0x17e2 <prvReadBytesFromBuffer+0x86>
    1782:	f7 01       	movw	r30, r14
    1784:	00 81       	ld	r16, Z
    1786:	11 81       	ldd	r17, Z+1	; 0x01
    1788:	84 81       	ldd	r24, Z+4	; 0x04
    178a:	95 81       	ldd	r25, Z+5	; 0x05
    178c:	80 1b       	sub	r24, r16
    178e:	91 0b       	sbc	r25, r17
    1790:	6e 01       	movw	r12, r28
    1792:	8c 17       	cp	r24, r28
    1794:	9d 07       	cpc	r25, r29
    1796:	08 f4       	brcc	.+2      	; 0x179a <prvReadBytesFromBuffer+0x3e>
    1798:	6c 01       	movw	r12, r24
    179a:	f7 01       	movw	r30, r14
    179c:	64 85       	ldd	r22, Z+12	; 0x0c
    179e:	75 85       	ldd	r23, Z+13	; 0x0d
    17a0:	60 0f       	add	r22, r16
    17a2:	71 1f       	adc	r23, r17
    17a4:	a6 01       	movw	r20, r12
    17a6:	c5 01       	movw	r24, r10
    17a8:	0e 94 90 30 	call	0x6120	; 0x6120 <memcpy>
    17ac:	cc 16       	cp	r12, r28
    17ae:	dd 06       	cpc	r13, r29
    17b0:	58 f4       	brcc	.+22     	; 0x17c8 <prvReadBytesFromBuffer+0x6c>
    17b2:	ae 01       	movw	r20, r28
    17b4:	4c 19       	sub	r20, r12
    17b6:	5d 09       	sbc	r21, r13
    17b8:	f7 01       	movw	r30, r14
    17ba:	64 85       	ldd	r22, Z+12	; 0x0c
    17bc:	75 85       	ldd	r23, Z+13	; 0x0d
    17be:	c5 01       	movw	r24, r10
    17c0:	8c 0d       	add	r24, r12
    17c2:	9d 1d       	adc	r25, r13
    17c4:	0e 94 90 30 	call	0x6120	; 0x6120 <memcpy>
    17c8:	0c 0f       	add	r16, r28
    17ca:	1d 1f       	adc	r17, r29
    17cc:	f7 01       	movw	r30, r14
    17ce:	84 81       	ldd	r24, Z+4	; 0x04
    17d0:	95 81       	ldd	r25, Z+5	; 0x05
    17d2:	08 17       	cp	r16, r24
    17d4:	19 07       	cpc	r17, r25
    17d6:	10 f0       	brcs	.+4      	; 0x17dc <prvReadBytesFromBuffer+0x80>
    17d8:	08 1b       	sub	r16, r24
    17da:	19 0b       	sbc	r17, r25
    17dc:	f7 01       	movw	r30, r14
    17de:	11 83       	std	Z+1, r17	; 0x01
    17e0:	00 83       	st	Z, r16
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	08 95       	ret

000017fa <prvReadMessageFromBuffer>:
    17fa:	6f 92       	push	r6
    17fc:	7f 92       	push	r7
    17fe:	8f 92       	push	r8
    1800:	9f 92       	push	r9
    1802:	af 92       	push	r10
    1804:	bf 92       	push	r11
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	1f 92       	push	r1
    1818:	1f 92       	push	r1
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	6c 01       	movw	r12, r24
    1820:	4b 01       	movw	r8, r22
    1822:	5a 01       	movw	r10, r20
    1824:	79 01       	movw	r14, r18
    1826:	01 15       	cp	r16, r1
    1828:	11 05       	cpc	r17, r1
    182a:	b1 f0       	breq	.+44     	; 0x1858 <prvReadMessageFromBuffer+0x5e>
    182c:	fc 01       	movw	r30, r24
    182e:	60 80       	ld	r6, Z
    1830:	71 80       	ldd	r7, Z+1	; 0x01
    1832:	a8 01       	movw	r20, r16
    1834:	be 01       	movw	r22, r28
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	90 df       	rcall	.-224    	; 0x175c <prvReadBytesFromBuffer>
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	e0 1a       	sub	r14, r16
    1842:	f1 0a       	sbc	r15, r17
    1844:	a8 16       	cp	r10, r24
    1846:	b9 06       	cpc	r11, r25
    1848:	30 f4       	brcc	.+12     	; 0x1856 <prvReadMessageFromBuffer+0x5c>
    184a:	f6 01       	movw	r30, r12
    184c:	71 82       	std	Z+1, r7	; 0x01
    184e:	60 82       	st	Z, r6
    1850:	a1 2c       	mov	r10, r1
    1852:	b1 2c       	mov	r11, r1
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <prvReadMessageFromBuffer+0x5e>
    1856:	5c 01       	movw	r10, r24
    1858:	97 01       	movw	r18, r14
    185a:	a5 01       	movw	r20, r10
    185c:	b4 01       	movw	r22, r8
    185e:	c6 01       	movw	r24, r12
    1860:	7d df       	rcall	.-262    	; 0x175c <prvReadBytesFromBuffer>
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
    187e:	7f 90       	pop	r7
    1880:	6f 90       	pop	r6
    1882:	08 95       	ret

00001884 <xStreamBufferGenericCreate>:
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	6b 01       	movw	r12, r22
    1896:	41 30       	cpi	r20, 0x01	; 1
    1898:	11 f4       	brne	.+4      	; 0x189e <xStreamBufferGenericCreate+0x1a>
    189a:	01 e0       	ldi	r16, 0x01	; 1
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <xStreamBufferGenericCreate+0x1c>
    189e:	00 e0       	ldi	r16, 0x00	; 0
    18a0:	c1 14       	cp	r12, r1
    18a2:	d1 04       	cpc	r13, r1
    18a4:	19 f4       	brne	.+6      	; 0x18ac <xStreamBufferGenericCreate+0x28>
    18a6:	cc 24       	eor	r12, r12
    18a8:	c3 94       	inc	r12
    18aa:	d1 2c       	mov	r13, r1
    18ac:	ce 01       	movw	r24, r28
    18ae:	40 96       	adiw	r24, 0x10	; 16
    18b0:	c8 17       	cp	r28, r24
    18b2:	d9 07       	cpc	r29, r25
    18b4:	20 f4       	brcc	.+8      	; 0x18be <xStreamBufferGenericCreate+0x3a>
    18b6:	21 96       	adiw	r28, 0x01	; 1
    18b8:	ad d8       	rcall	.-3750   	; 0xa14 <pvPortMalloc>
    18ba:	7c 01       	movw	r14, r24
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <xStreamBufferGenericCreate+0x3e>
    18be:	e1 2c       	mov	r14, r1
    18c0:	f1 2c       	mov	r15, r1
    18c2:	e1 14       	cp	r14, r1
    18c4:	f1 04       	cpc	r15, r1
    18c6:	39 f0       	breq	.+14     	; 0x18d6 <xStreamBufferGenericCreate+0x52>
    18c8:	96 01       	movw	r18, r12
    18ca:	ae 01       	movw	r20, r28
    18cc:	b7 01       	movw	r22, r14
    18ce:	61 5f       	subi	r22, 0xF1	; 241
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	c7 01       	movw	r24, r14
    18d4:	a7 de       	rcall	.-690    	; 0x1624 <prvInitialiseNewStreamBuffer>
    18d6:	c7 01       	movw	r24, r14
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	08 95       	ret

000018e8 <xStreamBufferReset>:
    18e8:	0f 93       	push	r16
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	0f 92       	push	r0
    18f0:	fc 01       	movw	r30, r24
    18f2:	20 85       	ldd	r18, Z+8	; 0x08
    18f4:	31 85       	ldd	r19, Z+9	; 0x09
    18f6:	23 2b       	or	r18, r19
    18f8:	71 f4       	brne	.+28     	; 0x1916 <xStreamBufferReset+0x2e>
    18fa:	22 85       	ldd	r18, Z+10	; 0x0a
    18fc:	33 85       	ldd	r19, Z+11	; 0x0b
    18fe:	23 2b       	or	r18, r19
    1900:	61 f4       	brne	.+24     	; 0x191a <xStreamBufferReset+0x32>
    1902:	26 81       	ldd	r18, Z+6	; 0x06
    1904:	37 81       	ldd	r19, Z+7	; 0x07
    1906:	44 81       	ldd	r20, Z+4	; 0x04
    1908:	55 81       	ldd	r21, Z+5	; 0x05
    190a:	64 85       	ldd	r22, Z+12	; 0x0c
    190c:	75 85       	ldd	r23, Z+13	; 0x0d
    190e:	06 85       	ldd	r16, Z+14	; 0x0e
    1910:	89 de       	rcall	.-750    	; 0x1624 <prvInitialiseNewStreamBuffer>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	03 c0       	rjmp	.+6      	; 0x191c <xStreamBufferReset+0x34>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	01 c0       	rjmp	.+2      	; 0x191c <xStreamBufferReset+0x34>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <xStreamBufferSpacesAvailable>:
    1924:	fc 01       	movw	r30, r24
    1926:	24 81       	ldd	r18, Z+4	; 0x04
    1928:	35 81       	ldd	r19, Z+5	; 0x05
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	42 81       	ldd	r20, Z+2	; 0x02
    1934:	53 81       	ldd	r21, Z+3	; 0x03
    1936:	84 1b       	sub	r24, r20
    1938:	95 0b       	sbc	r25, r21
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	82 17       	cp	r24, r18
    193e:	93 07       	cpc	r25, r19
    1940:	10 f0       	brcs	.+4      	; 0x1946 <xStreamBufferSpacesAvailable+0x22>
    1942:	82 1b       	sub	r24, r18
    1944:	93 0b       	sbc	r25, r19
    1946:	08 95       	ret

00001948 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1948:	2f 92       	push	r2
    194a:	3f 92       	push	r3
    194c:	4f 92       	push	r4
    194e:	5f 92       	push	r5
    1950:	6f 92       	push	r6
    1952:	7f 92       	push	r7
    1954:	8f 92       	push	r8
    1956:	9f 92       	push	r9
    1958:	af 92       	push	r10
    195a:	bf 92       	push	r11
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	2b 97       	sbiw	r28, 0x0b	; 11
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	4c 01       	movw	r8, r24
    197e:	7b 87       	std	Y+11, r23	; 0x0b
    1980:	6a 87       	std	Y+10, r22	; 0x0a
    1982:	1a 01       	movw	r2, r20
    1984:	0e 83       	std	Y+6, r16	; 0x06
    1986:	1f 83       	std	Y+7, r17	; 0x07
    1988:	28 87       	std	Y+8, r18	; 0x08
    198a:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    198c:	fc 01       	movw	r30, r24
    198e:	84 81       	ldd	r24, Z+4	; 0x04
    1990:	95 81       	ldd	r25, Z+5	; 0x05
    1992:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1994:	26 85       	ldd	r18, Z+14	; 0x0e
    1996:	20 ff       	sbrs	r18, 0
    1998:	0c c0       	rjmp	.+24     	; 0x19b2 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    199a:	2a 01       	movw	r4, r20
    199c:	f2 e0       	ldi	r31, 0x02	; 2
    199e:	4f 0e       	add	r4, r31
    19a0:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    19a2:	84 15       	cp	r24, r4
    19a4:	95 05       	cpc	r25, r5
    19a6:	58 f4       	brcc	.+22     	; 0x19be <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    19a8:	1e 82       	std	Y+6, r1	; 0x06
    19aa:	1f 82       	std	Y+7, r1	; 0x07
    19ac:	18 86       	std	Y+8, r1	; 0x08
    19ae:	19 86       	std	Y+9, r1	; 0x09
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19b2:	84 17       	cp	r24, r20
    19b4:	95 07       	cpc	r25, r21
    19b6:	10 f0       	brcs	.+4      	; 0x19bc <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    19b8:	2a 01       	movw	r4, r20
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    19bc:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	a8 85       	ldd	r26, Y+8	; 0x08
    19c4:	b9 85       	ldd	r27, Y+9	; 0x09
    19c6:	89 2b       	or	r24, r25
    19c8:	8a 2b       	or	r24, r26
    19ca:	8b 2b       	or	r24, r27
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <xStreamBufferSend+0x88>
    19ce:	38 c0       	rjmp	.+112    	; 0x1a40 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19de:	c4 01       	movw	r24, r8
    19e0:	a1 df       	rcall	.-190    	; 0x1924 <xStreamBufferSpacesAvailable>
    19e2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    19e4:	84 15       	cp	r24, r4
    19e6:	95 05       	cpc	r25, r5
    19e8:	40 f5       	brcc	.+80     	; 0x1a3a <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 a3 1a 	call	0x3546	; 0x3546 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    19f4:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <xTaskGetCurrentTaskHandle>
    19f8:	f4 01       	movw	r30, r8
    19fa:	93 87       	std	Z+11, r25	; 0x0b
    19fc:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a02:	ae 80       	ldd	r10, Y+6	; 0x06
    1a04:	bf 80       	ldd	r11, Y+7	; 0x07
    1a06:	c8 84       	ldd	r12, Y+8	; 0x08
    1a08:	d9 84       	ldd	r13, Y+9	; 0x09
    1a0a:	e1 2c       	mov	r14, r1
    1a0c:	f1 2c       	mov	r15, r1
    1a0e:	00 e0       	ldi	r16, 0x00	; 0
    1a10:	10 e0       	ldi	r17, 0x00	; 0
    1a12:	98 01       	movw	r18, r16
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	ba 01       	movw	r22, r20
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a20:	f4 01       	movw	r30, r8
    1a22:	13 86       	std	Z+11, r1	; 0x0b
    1a24:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a26:	be 01       	movw	r22, r28
    1a28:	6a 5f       	subi	r22, 0xFA	; 250
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1a34:	88 23       	and	r24, r24
    1a36:	81 f2       	breq	.-96     	; 0x19d8 <xStreamBufferSend+0x90>
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
                    break;
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a40:	61 2c       	mov	r6, r1
    1a42:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a44:	61 14       	cp	r6, r1
    1a46:	71 04       	cpc	r7, r1
    1a48:	19 f4       	brne	.+6      	; 0x1a50 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a4a:	c4 01       	movw	r24, r8
    1a4c:	6b df       	rcall	.-298    	; 0x1924 <xStreamBufferSpacesAvailable>
    1a4e:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a50:	82 01       	movw	r16, r4
    1a52:	93 01       	movw	r18, r6
    1a54:	a1 01       	movw	r20, r2
    1a56:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a58:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a5a:	c4 01       	movw	r24, r8
    1a5c:	3c de       	rcall	.-904    	; 0x16d6 <prvWriteMessageToBuffer>
    1a5e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1a60:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a62:	e9 f0       	breq	.+58     	; 0x1a9e <xStreamBufferSend+0x156>
    1a64:	c4 01       	movw	r24, r8
    1a66:	cb dd       	rcall	.-1130   	; 0x15fe <prvBytesInBuffer>
    1a68:	f4 01       	movw	r30, r8
    1a6a:	26 81       	ldd	r18, Z+6	; 0x06
    1a6c:	37 81       	ldd	r19, Z+7	; 0x07
    1a6e:	82 17       	cp	r24, r18
    1a70:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1a72:	a8 f0       	brcs	.+42     	; 0x1a9e <xStreamBufferSend+0x156>
    1a74:	91 d3       	rcall	.+1826   	; 0x2198 <vTaskSuspendAll>
    1a76:	f4 01       	movw	r30, r8
    1a78:	80 85       	ldd	r24, Z+8	; 0x08
    1a7a:	91 85       	ldd	r25, Z+9	; 0x09
    1a7c:	89 2b       	or	r24, r25
    1a7e:	71 f0       	breq	.+28     	; 0x1a9c <xStreamBufferSend+0x154>
    1a80:	80 85       	ldd	r24, Z+8	; 0x08
    1a82:	91 85       	ldd	r25, Z+9	; 0x09
    1a84:	e1 2c       	mov	r14, r1
    1a86:	f1 2c       	mov	r15, r1
    1a88:	00 e0       	ldi	r16, 0x00	; 0
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	a9 01       	movw	r20, r18
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 8a 18 	call	0x3114	; 0x3114 <xTaskGenericNotify>
    1a96:	f4 01       	movw	r30, r8
    1a98:	11 86       	std	Z+9, r1	; 0x09
    1a9a:	10 86       	std	Z+8, r1	; 0x08
    1a9c:	bd d4       	rcall	.+2426   	; 0x2418 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1a9e:	c6 01       	movw	r24, r12
    1aa0:	2b 96       	adiw	r28, 0x0b	; 11
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	5f 90       	pop	r5
    1aca:	4f 90       	pop	r4
    1acc:	3f 90       	pop	r3
    1ace:	2f 90       	pop	r2
    1ad0:	08 95       	ret

00001ad2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1ad2:	af 92       	push	r10
    1ad4:	bf 92       	push	r11
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	ec 01       	movw	r28, r24
    1ae8:	7b 01       	movw	r14, r22
    1aea:	5a 01       	movw	r10, r20
    1aec:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1aee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af0:	80 ff       	sbrs	r24, 0
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1af4:	8a 01       	movw	r16, r20
    1af6:	0e 5f       	subi	r16, 0xFE	; 254
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1afc:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1afe:	ce 01       	movw	r24, r28
    1b00:	11 df       	rcall	.-478    	; 0x1924 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b02:	9c 01       	movw	r18, r24
    1b04:	a5 01       	movw	r20, r10
    1b06:	b7 01       	movw	r22, r14
    1b08:	ce 01       	movw	r24, r28
    1b0a:	e5 dd       	rcall	.-1078   	; 0x16d6 <prvWriteMessageToBuffer>
    1b0c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b0e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b10:	c1 f0       	breq	.+48     	; 0x1b42 <xStreamBufferSendFromISR+0x70>
    1b12:	ce 01       	movw	r24, r28
    1b14:	74 dd       	rcall	.-1304   	; 0x15fe <prvBytesInBuffer>
    1b16:	2e 81       	ldd	r18, Y+6	; 0x06
    1b18:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1a:	82 17       	cp	r24, r18
    1b1c:	93 07       	cpc	r25, r19
    1b1e:	88 f0       	brcs	.+34     	; 0x1b42 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b20:	88 85       	ldd	r24, Y+8	; 0x08
    1b22:	99 85       	ldd	r25, Y+9	; 0x09
    1b24:	89 2b       	or	r24, r25
    1b26:	69 f0       	breq	.+26     	; 0x1b42 <xStreamBufferSendFromISR+0x70>
    1b28:	88 85       	ldd	r24, Y+8	; 0x08
    1b2a:	99 85       	ldd	r25, Y+9	; 0x09
    1b2c:	e1 2c       	mov	r14, r1
    1b2e:	f1 2c       	mov	r15, r1
    1b30:	00 e0       	ldi	r16, 0x00	; 0
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	0e 94 81 19 	call	0x3302	; 0x3302 <xTaskGenericNotifyFromISR>
    1b3e:	19 86       	std	Y+9, r1	; 0x09
    1b40:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b42:	c5 01       	movw	r24, r10
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	08 95       	ret

00001b5a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b5a:	4f 92       	push	r4
    1b5c:	5f 92       	push	r5
    1b5e:	6f 92       	push	r6
    1b60:	7f 92       	push	r7
    1b62:	8f 92       	push	r8
    1b64:	9f 92       	push	r9
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
    1b7c:	2b 01       	movw	r4, r22
    1b7e:	3a 01       	movw	r6, r20
    1b80:	58 01       	movw	r10, r16
    1b82:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b86:	80 ff       	sbrs	r24, 0
    1b88:	05 c0       	rjmp	.+10     	; 0x1b94 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b8a:	68 94       	set
    1b8c:	88 24       	eor	r8, r8
    1b8e:	81 f8       	bld	r8, 1
    1b90:	91 2c       	mov	r9, r1
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1b94:	81 2c       	mov	r8, r1
    1b96:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1b98:	a1 14       	cp	r10, r1
    1b9a:	b1 04       	cpc	r11, r1
    1b9c:	c1 04       	cpc	r12, r1
    1b9e:	d1 04       	cpc	r13, r1
    1ba0:	41 f1       	breq	.+80     	; 0x1bf2 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ba8:	ce 01       	movw	r24, r28
    1baa:	29 dd       	rcall	.-1454   	; 0x15fe <prvBytesInBuffer>
    1bac:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bae:	88 16       	cp	r8, r24
    1bb0:	99 06       	cpc	r9, r25
    1bb2:	48 f0       	brcs	.+18     	; 0x1bc6 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 a3 1a 	call	0x3546	; 0x3546 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1bbe:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <xTaskGetCurrentTaskHandle>
    1bc2:	99 87       	std	Y+9, r25	; 0x09
    1bc4:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bca:	8e 14       	cp	r8, r14
    1bcc:	9f 04       	cpc	r9, r15
    1bce:	a0 f0       	brcs	.+40     	; 0x1bf8 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1bd0:	e1 2c       	mov	r14, r1
    1bd2:	f1 2c       	mov	r15, r1
    1bd4:	00 e0       	ldi	r16, 0x00	; 0
    1bd6:	10 e0       	ldi	r17, 0x00	; 0
    1bd8:	98 01       	movw	r18, r16
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	ba 01       	movw	r22, r20
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1be6:	19 86       	std	Y+9, r1	; 0x09
    1be8:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bea:	ce 01       	movw	r24, r28
    1bec:	08 dd       	rcall	.-1520   	; 0x15fe <prvBytesInBuffer>
    1bee:	7c 01       	movw	r14, r24
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	04 dd       	rcall	.-1528   	; 0x15fe <prvBytesInBuffer>
    1bf6:	7c 01       	movw	r14, r24
    1bf8:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1bfa:	9f 04       	cpc	r9, r15
    1bfc:	e8 f4       	brcc	.+58     	; 0x1c38 <xStreamBufferReceive+0xde>
    1bfe:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c00:	97 01       	movw	r18, r14
    1c02:	a3 01       	movw	r20, r6
    1c04:	b2 01       	movw	r22, r4
    1c06:	ce 01       	movw	r24, r28
    1c08:	f8 dd       	rcall	.-1040   	; 0x17fa <prvReadMessageFromBuffer>
    1c0a:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c0c:	89 2b       	or	r24, r25
    1c0e:	b1 f0       	breq	.+44     	; 0x1c3c <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c10:	c3 d2       	rcall	.+1414   	; 0x2198 <vTaskSuspendAll>
    1c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c16:	89 2b       	or	r24, r25
    1c18:	69 f0       	breq	.+26     	; 0x1c34 <xStreamBufferReceive+0xda>
    1c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1e:	e1 2c       	mov	r14, r1
    1c20:	f1 2c       	mov	r15, r1
    1c22:	00 e0       	ldi	r16, 0x00	; 0
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	0e 94 8a 18 	call	0x3114	; 0x3114 <xTaskGenericNotify>
    1c30:	1b 86       	std	Y+11, r1	; 0x0b
    1c32:	1a 86       	std	Y+10, r1	; 0x0a
    1c34:	f1 d3       	rcall	.+2018   	; 0x2418 <xTaskResumeAll>
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <xStreamBufferReceive+0xe2>
    1c38:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c3a:	d1 2c       	mov	r13, r1
    1c3c:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	7f 90       	pop	r7
    1c58:	6f 90       	pop	r6
    1c5a:	5f 90       	pop	r5
    1c5c:	4f 90       	pop	r4
    1c5e:	08 95       	ret

00001c60 <prvResetNextTaskUnblockTime>:
    1c60:	e0 91 bb 15 	lds	r30, 0x15BB	; 0x8015bb <pxDelayedTaskList>
    1c64:	f0 91 bc 15 	lds	r31, 0x15BC	; 0x8015bc <pxDelayedTaskList+0x1>
    1c68:	80 81       	ld	r24, Z
    1c6a:	81 11       	cpse	r24, r1
    1c6c:	0c c0       	rjmp	.+24     	; 0x1c86 <prvResetNextTaskUnblockTime+0x26>
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	9f ef       	ldi	r25, 0xFF	; 255
    1c72:	dc 01       	movw	r26, r24
    1c74:	80 93 85 15 	sts	0x1585, r24	; 0x801585 <xNextTaskUnblockTime>
    1c78:	90 93 86 15 	sts	0x1586, r25	; 0x801586 <xNextTaskUnblockTime+0x1>
    1c7c:	a0 93 87 15 	sts	0x1587, r26	; 0x801587 <xNextTaskUnblockTime+0x2>
    1c80:	b0 93 88 15 	sts	0x1588, r27	; 0x801588 <xNextTaskUnblockTime+0x3>
    1c84:	08 95       	ret
    1c86:	e0 91 bb 15 	lds	r30, 0x15BB	; 0x8015bb <pxDelayedTaskList>
    1c8a:	f0 91 bc 15 	lds	r31, 0x15BC	; 0x8015bc <pxDelayedTaskList+0x1>
    1c8e:	07 80       	ldd	r0, Z+7	; 0x07
    1c90:	f0 85       	ldd	r31, Z+8	; 0x08
    1c92:	e0 2d       	mov	r30, r0
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	a2 81       	ldd	r26, Z+2	; 0x02
    1c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c9c:	80 93 85 15 	sts	0x1585, r24	; 0x801585 <xNextTaskUnblockTime>
    1ca0:	90 93 86 15 	sts	0x1586, r25	; 0x801586 <xNextTaskUnblockTime+0x1>
    1ca4:	a0 93 87 15 	sts	0x1587, r26	; 0x801587 <xNextTaskUnblockTime+0x2>
    1ca8:	b0 93 88 15 	sts	0x1588, r27	; 0x801588 <xNextTaskUnblockTime+0x3>
    1cac:	08 95       	ret

00001cae <prvDeleteTCB>:
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb8:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortFree>
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortFree>
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <prvInitialiseNewTask>:
    1cc8:	4f 92       	push	r4
    1cca:	5f 92       	push	r5
    1ccc:	6f 92       	push	r6
    1cce:	7f 92       	push	r7
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	2c 01       	movw	r4, r24
    1ce8:	5b 01       	movw	r10, r22
    1cea:	4a 01       	movw	r8, r20
    1cec:	39 01       	movw	r6, r18
    1cee:	e6 01       	movw	r28, r12
    1cf0:	65 ea       	ldi	r22, 0xA5	; 165
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf8:	0e 94 99 30 	call	0x6132	; 0x6132 <memset>
    1cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d00:	21 e0       	ldi	r18, 0x01	; 1
    1d02:	82 1a       	sub	r8, r18
    1d04:	91 08       	sbc	r9, r1
    1d06:	88 0e       	add	r8, r24
    1d08:	99 1e       	adc	r9, r25
    1d0a:	a1 14       	cp	r10, r1
    1d0c:	b1 04       	cpc	r11, r1
    1d0e:	89 f4       	brne	.+34     	; 0x1d32 <prvInitialiseNewTask+0x6a>
    1d10:	15 c0       	rjmp	.+42     	; 0x1d3c <prvInitialiseNewTask+0x74>
    1d12:	82 2f       	mov	r24, r18
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	f5 01       	movw	r30, r10
    1d18:	e8 0f       	add	r30, r24
    1d1a:	f9 1f       	adc	r31, r25
    1d1c:	30 81       	ld	r19, Z
    1d1e:	de 01       	movw	r26, r28
    1d20:	a8 0f       	add	r26, r24
    1d22:	b9 1f       	adc	r27, r25
    1d24:	5d 96       	adiw	r26, 0x1d	; 29
    1d26:	3c 93       	st	X, r19
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 23       	and	r24, r24
    1d2c:	29 f0       	breq	.+10     	; 0x1d38 <prvInitialiseNewTask+0x70>
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <prvInitialiseNewTask+0x6c>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	20 31       	cpi	r18, 0x10	; 16
    1d36:	68 f3       	brcs	.-38     	; 0x1d12 <prvInitialiseNewTask+0x4a>
    1d38:	1c a6       	std	Y+44, r1	; 0x2c
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <prvInitialiseNewTask+0x76>
    1d3c:	1d 8e       	std	Y+29, r1	; 0x1d
    1d3e:	0a 30       	cpi	r16, 0x0A	; 10
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <prvInitialiseNewTask+0x7c>
    1d42:	09 e0       	ldi	r16, 0x09	; 9
    1d44:	0a 8f       	std	Y+26, r16	; 0x1a
    1d46:	0d a7       	std	Y+45, r16	; 0x2d
    1d48:	1e a6       	std	Y+46, r1	; 0x2e
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	02 96       	adiw	r24, 0x02	; 2
    1d4e:	0e 94 01 06 	call	0xc02	; 0xc02 <vListInitialiseItem>
    1d52:	ce 01       	movw	r24, r28
    1d54:	0e 96       	adiw	r24, 0x0e	; 14
    1d56:	0e 94 01 06 	call	0xc02	; 0xc02 <vListInitialiseItem>
    1d5a:	db 87       	std	Y+11, r29	; 0x0b
    1d5c:	ca 87       	std	Y+10, r28	; 0x0a
    1d5e:	8a e0       	ldi	r24, 0x0A	; 10
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e0       	ldi	r26, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	80 1b       	sub	r24, r16
    1d68:	91 09       	sbc	r25, r1
    1d6a:	a1 09       	sbc	r26, r1
    1d6c:	b1 09       	sbc	r27, r1
    1d6e:	8e 87       	std	Y+14, r24	; 0x0e
    1d70:	9f 87       	std	Y+15, r25	; 0x0f
    1d72:	a8 8b       	std	Y+16, r26	; 0x10
    1d74:	b9 8b       	std	Y+17, r27	; 0x11
    1d76:	df 8b       	std	Y+23, r29	; 0x17
    1d78:	ce 8b       	std	Y+22, r28	; 0x16
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	bf 96       	adiw	r30, 0x2f	; 47
    1d80:	df 01       	movw	r26, r30
    1d82:	1d 92       	st	X+, r1
    1d84:	8a 95       	dec	r24
    1d86:	e9 f7       	brne	.-6      	; 0x1d82 <prvInitialiseNewTask+0xba>
    1d88:	1b aa       	std	Y+51, r1	; 0x33
    1d8a:	a3 01       	movw	r20, r6
    1d8c:	b2 01       	movw	r22, r4
    1d8e:	c4 01       	movw	r24, r8
    1d90:	0e 94 75 06 	call	0xcea	; 0xcea <pxPortInitialiseStack>
    1d94:	99 83       	std	Y+1, r25	; 0x01
    1d96:	88 83       	st	Y, r24
    1d98:	e1 14       	cp	r14, r1
    1d9a:	f1 04       	cpc	r15, r1
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <prvInitialiseNewTask+0xdc>
    1d9e:	f7 01       	movw	r30, r14
    1da0:	d1 83       	std	Z+1, r29	; 0x01
    1da2:	c0 83       	st	Z, r28
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	bf 90       	pop	r11
    1db4:	af 90       	pop	r10
    1db6:	9f 90       	pop	r9
    1db8:	8f 90       	pop	r8
    1dba:	7f 90       	pop	r7
    1dbc:	6f 90       	pop	r6
    1dbe:	5f 90       	pop	r5
    1dc0:	4f 90       	pop	r4
    1dc2:	08 95       	ret

00001dc4 <prvInitialiseTaskLists>:
    1dc4:	cf 93       	push	r28
    1dc6:	c0 e0       	ldi	r28, 0x00	; 0
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <prvInitialiseTaskLists+0x18>
    1dca:	2b e0       	ldi	r18, 0x0B	; 11
    1dcc:	c2 9f       	mul	r28, r18
    1dce:	c0 01       	movw	r24, r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	8d 52       	subi	r24, 0x2D	; 45
    1dd4:	9a 4e       	sbci	r25, 0xEA	; 234
    1dd6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    1dda:	cf 5f       	subi	r28, 0xFF	; 255
    1ddc:	ca 30       	cpi	r28, 0x0A	; 10
    1dde:	a8 f3       	brcs	.-22     	; 0x1dca <prvInitialiseTaskLists+0x6>
    1de0:	88 ec       	ldi	r24, 0xC8	; 200
    1de2:	95 e1       	ldi	r25, 0x15	; 21
    1de4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    1de8:	8d eb       	ldi	r24, 0xBD	; 189
    1dea:	95 e1       	ldi	r25, 0x15	; 21
    1dec:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    1df0:	8e ea       	ldi	r24, 0xAE	; 174
    1df2:	95 e1       	ldi	r25, 0x15	; 21
    1df4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    1df8:	83 ea       	ldi	r24, 0xA3	; 163
    1dfa:	95 e1       	ldi	r25, 0x15	; 21
    1dfc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    1e00:	87 e9       	ldi	r24, 0x97	; 151
    1e02:	95 e1       	ldi	r25, 0x15	; 21
    1e04:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    1e08:	88 ec       	ldi	r24, 0xC8	; 200
    1e0a:	95 e1       	ldi	r25, 0x15	; 21
    1e0c:	90 93 bc 15 	sts	0x15BC, r25	; 0x8015bc <pxDelayedTaskList+0x1>
    1e10:	80 93 bb 15 	sts	0x15BB, r24	; 0x8015bb <pxDelayedTaskList>
    1e14:	8d eb       	ldi	r24, 0xBD	; 189
    1e16:	95 e1       	ldi	r25, 0x15	; 21
    1e18:	90 93 ba 15 	sts	0x15BA, r25	; 0x8015ba <pxOverflowDelayedTaskList+0x1>
    1e1c:	80 93 b9 15 	sts	0x15B9, r24	; 0x8015b9 <pxOverflowDelayedTaskList>
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <prvAddNewTaskToReadyList>:
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	ec 01       	movw	r28, r24
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	0f 92       	push	r0
    1e30:	80 91 96 15 	lds	r24, 0x1596	; 0x801596 <uxCurrentNumberOfTasks>
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <uxCurrentNumberOfTasks>
    1e3a:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    1e3e:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1e42:	89 2b       	or	r24, r25
    1e44:	51 f4       	brne	.+20     	; 0x1e5a <prvAddNewTaskToReadyList+0x36>
    1e46:	d0 93 42 16 	sts	0x1642, r29	; 0x801642 <pxCurrentTCB+0x1>
    1e4a:	c0 93 41 16 	sts	0x1641, r28	; 0x801641 <pxCurrentTCB>
    1e4e:	80 91 96 15 	lds	r24, 0x1596	; 0x801596 <uxCurrentNumberOfTasks>
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	91 f4       	brne	.+36     	; 0x1e7a <prvAddNewTaskToReadyList+0x56>
    1e56:	b6 df       	rcall	.-148    	; 0x1dc4 <prvInitialiseTaskLists>
    1e58:	10 c0       	rjmp	.+32     	; 0x1e7a <prvAddNewTaskToReadyList+0x56>
    1e5a:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <xSchedulerRunning>
    1e5e:	81 11       	cpse	r24, r1
    1e60:	0c c0       	rjmp	.+24     	; 0x1e7a <prvAddNewTaskToReadyList+0x56>
    1e62:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    1e66:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1e6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6e:	89 17       	cp	r24, r25
    1e70:	20 f0       	brcs	.+8      	; 0x1e7a <prvAddNewTaskToReadyList+0x56>
    1e72:	d0 93 42 16 	sts	0x1642, r29	; 0x801642 <pxCurrentTCB+0x1>
    1e76:	c0 93 41 16 	sts	0x1641, r28	; 0x801641 <pxCurrentTCB>
    1e7a:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTaskNumber>
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	80 93 89 15 	sts	0x1589, r24	; 0x801589 <uxTaskNumber>
    1e84:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e86:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    1e8a:	8e 17       	cp	r24, r30
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <prvAddNewTaskToReadyList+0x6e>
    1e8e:	e0 93 91 15 	sts	0x1591, r30	; 0x801591 <uxTopReadyPriority>
    1e92:	8b e0       	ldi	r24, 0x0B	; 11
    1e94:	8e 9f       	mul	r24, r30
    1e96:	f0 01       	movw	r30, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	ed 52       	subi	r30, 0x2D	; 45
    1e9c:	fa 4e       	sbci	r31, 0xEA	; 234
    1e9e:	01 80       	ldd	r0, Z+1	; 0x01
    1ea0:	f2 81       	ldd	r31, Z+2	; 0x02
    1ea2:	e0 2d       	mov	r30, r0
    1ea4:	ff 83       	std	Y+7, r31	; 0x07
    1ea6:	ee 83       	std	Y+6, r30	; 0x06
    1ea8:	26 81       	ldd	r18, Z+6	; 0x06
    1eaa:	37 81       	ldd	r19, Z+7	; 0x07
    1eac:	39 87       	std	Y+9, r19	; 0x09
    1eae:	28 87       	std	Y+8, r18	; 0x08
    1eb0:	a6 81       	ldd	r26, Z+6	; 0x06
    1eb2:	b7 81       	ldd	r27, Z+7	; 0x07
    1eb4:	9e 01       	movw	r18, r28
    1eb6:	2e 5f       	subi	r18, 0xFE	; 254
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	15 96       	adiw	r26, 0x05	; 5
    1ebc:	3c 93       	st	X, r19
    1ebe:	2e 93       	st	-X, r18
    1ec0:	14 97       	sbiw	r26, 0x04	; 4
    1ec2:	37 83       	std	Z+7, r19	; 0x07
    1ec4:	26 83       	std	Z+6, r18	; 0x06
    1ec6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ec8:	8e 9f       	mul	r24, r30
    1eca:	f0 01       	movw	r30, r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	ed 52       	subi	r30, 0x2D	; 45
    1ed0:	fa 4e       	sbci	r31, 0xEA	; 234
    1ed2:	fd 87       	std	Y+13, r31	; 0x0d
    1ed4:	ec 87       	std	Y+12, r30	; 0x0c
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	80 83       	st	Z, r24
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <xSchedulerRunning>
    1ee4:	88 23       	and	r24, r24
    1ee6:	51 f0       	breq	.+20     	; 0x1efc <prvAddNewTaskToReadyList+0xd8>
    1ee8:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    1eec:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1ef0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ef2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ef4:	98 17       	cp	r25, r24
    1ef6:	10 f4       	brcc	.+4      	; 0x1efc <prvAddNewTaskToReadyList+0xd8>
    1ef8:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <prvCheckTasksWaitingTermination>:
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	1b c0       	rjmp	.+54     	; 0x1f3e <prvCheckTasksWaitingTermination+0x3c>
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	0f 92       	push	r0
    1f0e:	e0 91 aa 15 	lds	r30, 0x15AA	; 0x8015aa <xTasksWaitingTermination+0x7>
    1f12:	f0 91 ab 15 	lds	r31, 0x15AB	; 0x8015ab <xTasksWaitingTermination+0x8>
    1f16:	c0 85       	ldd	r28, Z+8	; 0x08
    1f18:	d1 85       	ldd	r29, Z+9	; 0x09
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	02 96       	adiw	r24, 0x02	; 2
    1f1e:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
    1f22:	80 91 96 15 	lds	r24, 0x1596	; 0x801596 <uxCurrentNumberOfTasks>
    1f26:	81 50       	subi	r24, 0x01	; 1
    1f28:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <uxCurrentNumberOfTasks>
    1f2c:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <uxDeletedTasksWaitingCleanUp>
    1f30:	81 50       	subi	r24, 0x01	; 1
    1f32:	80 93 a2 15 	sts	0x15A2, r24	; 0x8015a2 <uxDeletedTasksWaitingCleanUp>
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	b8 de       	rcall	.-656    	; 0x1cae <prvDeleteTCB>
    1f3e:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <uxDeletedTasksWaitingCleanUp>
    1f42:	81 11       	cpse	r24, r1
    1f44:	e1 cf       	rjmp	.-62     	; 0x1f08 <prvCheckTasksWaitingTermination+0x6>
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	08 95       	ret

00001f4c <prvAddCurrentTaskToDelayedList>:
    1f4c:	8f 92       	push	r8
    1f4e:	9f 92       	push	r9
    1f50:	af 92       	push	r10
    1f52:	bf 92       	push	r11
    1f54:	cf 92       	push	r12
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	6b 01       	movw	r12, r22
    1f62:	7c 01       	movw	r14, r24
    1f64:	c4 2f       	mov	r28, r20
    1f66:	80 90 92 15 	lds	r8, 0x1592	; 0x801592 <xTickCount>
    1f6a:	90 90 93 15 	lds	r9, 0x1593	; 0x801593 <xTickCount+0x1>
    1f6e:	a0 90 94 15 	lds	r10, 0x1594	; 0x801594 <xTickCount+0x2>
    1f72:	b0 90 95 15 	lds	r11, 0x1595	; 0x801595 <xTickCount+0x3>
    1f76:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    1f7a:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1f7e:	02 96       	adiw	r24, 0x02	; 2
    1f80:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	c8 16       	cp	r12, r24
    1f88:	d8 06       	cpc	r13, r24
    1f8a:	e8 06       	cpc	r14, r24
    1f8c:	f8 06       	cpc	r15, r24
    1f8e:	b1 f5       	brne	.+108    	; 0x1ffc <prvAddCurrentTaskToDelayedList+0xb0>
    1f90:	cc 23       	and	r28, r28
    1f92:	a1 f1       	breq	.+104    	; 0x1ffc <prvAddCurrentTaskToDelayedList+0xb0>
    1f94:	e7 e9       	ldi	r30, 0x97	; 151
    1f96:	f5 e1       	ldi	r31, 0x15	; 21
    1f98:	a1 81       	ldd	r26, Z+1	; 0x01
    1f9a:	b2 81       	ldd	r27, Z+2	; 0x02
    1f9c:	c0 91 41 16 	lds	r28, 0x1641	; 0x801641 <pxCurrentTCB>
    1fa0:	d0 91 42 16 	lds	r29, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1fa4:	bf 83       	std	Y+7, r27	; 0x07
    1fa6:	ae 83       	std	Y+6, r26	; 0x06
    1fa8:	c0 91 41 16 	lds	r28, 0x1641	; 0x801641 <pxCurrentTCB>
    1fac:	d0 91 42 16 	lds	r29, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1fb0:	16 96       	adiw	r26, 0x06	; 6
    1fb2:	8d 91       	ld	r24, X+
    1fb4:	9c 91       	ld	r25, X
    1fb6:	17 97       	sbiw	r26, 0x07	; 7
    1fb8:	99 87       	std	Y+9, r25	; 0x09
    1fba:	88 87       	std	Y+8, r24	; 0x08
    1fbc:	16 96       	adiw	r26, 0x06	; 6
    1fbe:	cd 91       	ld	r28, X+
    1fc0:	dc 91       	ld	r29, X
    1fc2:	17 97       	sbiw	r26, 0x07	; 7
    1fc4:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    1fc8:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1fcc:	02 96       	adiw	r24, 0x02	; 2
    1fce:	9d 83       	std	Y+5, r25	; 0x05
    1fd0:	8c 83       	std	Y+4, r24	; 0x04
    1fd2:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    1fd6:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1fda:	02 96       	adiw	r24, 0x02	; 2
    1fdc:	17 96       	adiw	r26, 0x07	; 7
    1fde:	9c 93       	st	X, r25
    1fe0:	8e 93       	st	-X, r24
    1fe2:	16 97       	sbiw	r26, 0x06	; 6
    1fe4:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    1fe8:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    1fec:	1d 96       	adiw	r26, 0x0d	; 13
    1fee:	fc 93       	st	X, r31
    1ff0:	ee 93       	st	-X, r30
    1ff2:	1c 97       	sbiw	r26, 0x0c	; 12
    1ff4:	80 81       	ld	r24, Z
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	80 83       	st	Z, r24
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    1ffc:	c8 0c       	add	r12, r8
    1ffe:	d9 1c       	adc	r13, r9
    2000:	ea 1c       	adc	r14, r10
    2002:	fb 1c       	adc	r15, r11
    2004:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2008:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    200c:	c2 82       	std	Z+2, r12	; 0x02
    200e:	d3 82       	std	Z+3, r13	; 0x03
    2010:	e4 82       	std	Z+4, r14	; 0x04
    2012:	f5 82       	std	Z+5, r15	; 0x05
    2014:	c8 14       	cp	r12, r8
    2016:	d9 04       	cpc	r13, r9
    2018:	ea 04       	cpc	r14, r10
    201a:	fb 04       	cpc	r15, r11
    201c:	68 f4       	brcc	.+26     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    201e:	60 91 41 16 	lds	r22, 0x1641	; 0x801641 <pxCurrentTCB>
    2022:	70 91 42 16 	lds	r23, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2026:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <pxOverflowDelayedTaskList>
    202a:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <pxOverflowDelayedTaskList+0x1>
    202e:	6e 5f       	subi	r22, 0xFE	; 254
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	0e 94 05 06 	call	0xc0a	; 0xc0a <vListInsert>
    2036:	21 c0       	rjmp	.+66     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    2038:	60 91 41 16 	lds	r22, 0x1641	; 0x801641 <pxCurrentTCB>
    203c:	70 91 42 16 	lds	r23, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2040:	80 91 bb 15 	lds	r24, 0x15BB	; 0x8015bb <pxDelayedTaskList>
    2044:	90 91 bc 15 	lds	r25, 0x15BC	; 0x8015bc <pxDelayedTaskList+0x1>
    2048:	6e 5f       	subi	r22, 0xFE	; 254
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	0e 94 05 06 	call	0xc0a	; 0xc0a <vListInsert>
    2050:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <xNextTaskUnblockTime>
    2054:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <xNextTaskUnblockTime+0x1>
    2058:	a0 91 87 15 	lds	r26, 0x1587	; 0x801587 <xNextTaskUnblockTime+0x2>
    205c:	b0 91 88 15 	lds	r27, 0x1588	; 0x801588 <xNextTaskUnblockTime+0x3>
    2060:	c8 16       	cp	r12, r24
    2062:	d9 06       	cpc	r13, r25
    2064:	ea 06       	cpc	r14, r26
    2066:	fb 06       	cpc	r15, r27
    2068:	40 f4       	brcc	.+16     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    206a:	c0 92 85 15 	sts	0x1585, r12	; 0x801585 <xNextTaskUnblockTime>
    206e:	d0 92 86 15 	sts	0x1586, r13	; 0x801586 <xNextTaskUnblockTime+0x1>
    2072:	e0 92 87 15 	sts	0x1587, r14	; 0x801587 <xNextTaskUnblockTime+0x2>
    2076:	f0 92 88 15 	sts	0x1588, r15	; 0x801588 <xNextTaskUnblockTime+0x3>
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	9f 90       	pop	r9
    208c:	8f 90       	pop	r8
    208e:	08 95       	ret

00002090 <xTaskCreate>:
    2090:	2f 92       	push	r2
    2092:	3f 92       	push	r3
    2094:	4f 92       	push	r4
    2096:	5f 92       	push	r5
    2098:	6f 92       	push	r6
    209a:	7f 92       	push	r7
    209c:	8f 92       	push	r8
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	3c 01       	movw	r6, r24
    20b4:	1b 01       	movw	r2, r22
    20b6:	4a 01       	movw	r8, r20
    20b8:	29 01       	movw	r4, r18
    20ba:	ca 01       	movw	r24, r20
    20bc:	0e 94 0a 05 	call	0xa14	; 0xa14 <pvPortMalloc>
    20c0:	6c 01       	movw	r12, r24
    20c2:	89 2b       	or	r24, r25
    20c4:	71 f0       	breq	.+28     	; 0x20e2 <xTaskCreate+0x52>
    20c6:	84 e3       	ldi	r24, 0x34	; 52
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 0a 05 	call	0xa14	; 0xa14 <pvPortMalloc>
    20ce:	ec 01       	movw	r28, r24
    20d0:	89 2b       	or	r24, r25
    20d2:	19 f0       	breq	.+6      	; 0x20da <xTaskCreate+0x4a>
    20d4:	dc 8e       	std	Y+28, r13	; 0x1c
    20d6:	cb 8e       	std	Y+27, r12	; 0x1b
    20d8:	06 c0       	rjmp	.+12     	; 0x20e6 <xTaskCreate+0x56>
    20da:	c6 01       	movw	r24, r12
    20dc:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortFree>
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <xTaskCreate+0x56>
    20e2:	c0 e0       	ldi	r28, 0x00	; 0
    20e4:	d0 e0       	ldi	r29, 0x00	; 0
    20e6:	20 97       	sbiw	r28, 0x00	; 0
    20e8:	61 f0       	breq	.+24     	; 0x2102 <xTaskCreate+0x72>
    20ea:	a1 2c       	mov	r10, r1
    20ec:	b1 2c       	mov	r11, r1
    20ee:	6e 01       	movw	r12, r28
    20f0:	92 01       	movw	r18, r4
    20f2:	a4 01       	movw	r20, r8
    20f4:	b1 01       	movw	r22, r2
    20f6:	c3 01       	movw	r24, r6
    20f8:	e7 dd       	rcall	.-1074   	; 0x1cc8 <prvInitialiseNewTask>
    20fa:	ce 01       	movw	r24, r28
    20fc:	93 de       	rcall	.-730    	; 0x1e24 <prvAddNewTaskToReadyList>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <xTaskCreate+0x74>
    2102:	8f ef       	ldi	r24, 0xFF	; 255
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	6f 90       	pop	r6
    211e:	5f 90       	pop	r5
    2120:	4f 90       	pop	r4
    2122:	3f 90       	pop	r3
    2124:	2f 90       	pop	r2
    2126:	08 95       	ret

00002128 <vTaskStartScheduler>:
    2128:	ef 92       	push	r14
    212a:	ff 92       	push	r15
    212c:	0f 93       	push	r16
    212e:	0f 2e       	mov	r0, r31
    2130:	f3 e8       	ldi	r31, 0x83	; 131
    2132:	ef 2e       	mov	r14, r31
    2134:	f5 e1       	ldi	r31, 0x15	; 21
    2136:	ff 2e       	mov	r15, r31
    2138:	f0 2d       	mov	r31, r0
    213a:	00 e0       	ldi	r16, 0x00	; 0
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 ec       	ldi	r20, 0xC0	; 192
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	6f ee       	ldi	r22, 0xEF	; 239
    2146:	72 e0       	ldi	r23, 0x02	; 2
    2148:	8d ec       	ldi	r24, 0xCD	; 205
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a1 df       	rcall	.-190    	; 0x2090 <xTaskCreate>
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	11 f4       	brne	.+4      	; 0x2156 <vTaskStartScheduler+0x2e>
    2152:	0e 94 47 1b 	call	0x368e	; 0x368e <xTimerCreateTimerTask>
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	c9 f4       	brne	.+50     	; 0x218c <vTaskStartScheduler+0x64>
    215a:	f8 94       	cli
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	9f ef       	ldi	r25, 0xFF	; 255
    2160:	dc 01       	movw	r26, r24
    2162:	80 93 85 15 	sts	0x1585, r24	; 0x801585 <xNextTaskUnblockTime>
    2166:	90 93 86 15 	sts	0x1586, r25	; 0x801586 <xNextTaskUnblockTime+0x1>
    216a:	a0 93 87 15 	sts	0x1587, r26	; 0x801587 <xNextTaskUnblockTime+0x2>
    216e:	b0 93 88 15 	sts	0x1588, r27	; 0x801588 <xNextTaskUnblockTime+0x3>
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	80 93 90 15 	sts	0x1590, r24	; 0x801590 <xSchedulerRunning>
    2178:	10 92 92 15 	sts	0x1592, r1	; 0x801592 <xTickCount>
    217c:	10 92 93 15 	sts	0x1593, r1	; 0x801593 <xTickCount+0x1>
    2180:	10 92 94 15 	sts	0x1594, r1	; 0x801594 <xTickCount+0x2>
    2184:	10 92 95 15 	sts	0x1595, r1	; 0x801595 <xTickCount+0x3>
    2188:	0e 94 8c 06 	call	0xd18	; 0xd18 <xPortStartScheduler>
    218c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2190:	0f 91       	pop	r16
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	08 95       	ret

00002198 <vTaskSuspendAll>:
    2198:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	80 93 82 15 	sts	0x1582, r24	; 0x801582 <uxSchedulerSuspended>
    21a2:	08 95       	ret

000021a4 <xTaskGetTickCount>:
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	0f 92       	push	r0
    21aa:	60 91 92 15 	lds	r22, 0x1592	; 0x801592 <xTickCount>
    21ae:	70 91 93 15 	lds	r23, 0x1593	; 0x801593 <xTickCount+0x1>
    21b2:	80 91 94 15 	lds	r24, 0x1594	; 0x801594 <xTickCount+0x2>
    21b6:	90 91 95 15 	lds	r25, 0x1595	; 0x801595 <xTickCount+0x3>
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	08 95       	ret

000021c0 <xTaskIncrementTick>:
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    21d0:	81 11       	cpse	r24, r1
    21d2:	05 c1       	rjmp	.+522    	; 0x23de <__stack+0x1df>
    21d4:	c0 90 92 15 	lds	r12, 0x1592	; 0x801592 <xTickCount>
    21d8:	d0 90 93 15 	lds	r13, 0x1593	; 0x801593 <xTickCount+0x1>
    21dc:	e0 90 94 15 	lds	r14, 0x1594	; 0x801594 <xTickCount+0x2>
    21e0:	f0 90 95 15 	lds	r15, 0x1595	; 0x801595 <xTickCount+0x3>
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	c8 1a       	sub	r12, r24
    21e8:	d8 0a       	sbc	r13, r24
    21ea:	e8 0a       	sbc	r14, r24
    21ec:	f8 0a       	sbc	r15, r24
    21ee:	c0 92 92 15 	sts	0x1592, r12	; 0x801592 <xTickCount>
    21f2:	d0 92 93 15 	sts	0x1593, r13	; 0x801593 <xTickCount+0x1>
    21f6:	e0 92 94 15 	sts	0x1594, r14	; 0x801594 <xTickCount+0x2>
    21fa:	f0 92 95 15 	sts	0x1595, r15	; 0x801595 <xTickCount+0x3>
    21fe:	c1 14       	cp	r12, r1
    2200:	d1 04       	cpc	r13, r1
    2202:	e1 04       	cpc	r14, r1
    2204:	f1 04       	cpc	r15, r1
    2206:	b1 f4       	brne	.+44     	; 0x2234 <__stack+0x35>
    2208:	80 91 bb 15 	lds	r24, 0x15BB	; 0x8015bb <pxDelayedTaskList>
    220c:	90 91 bc 15 	lds	r25, 0x15BC	; 0x8015bc <pxDelayedTaskList+0x1>
    2210:	20 91 b9 15 	lds	r18, 0x15B9	; 0x8015b9 <pxOverflowDelayedTaskList>
    2214:	30 91 ba 15 	lds	r19, 0x15BA	; 0x8015ba <pxOverflowDelayedTaskList+0x1>
    2218:	30 93 bc 15 	sts	0x15BC, r19	; 0x8015bc <pxDelayedTaskList+0x1>
    221c:	20 93 bb 15 	sts	0x15BB, r18	; 0x8015bb <pxDelayedTaskList>
    2220:	90 93 ba 15 	sts	0x15BA, r25	; 0x8015ba <pxOverflowDelayedTaskList+0x1>
    2224:	80 93 b9 15 	sts	0x15B9, r24	; 0x8015b9 <pxOverflowDelayedTaskList>
    2228:	80 91 8a 15 	lds	r24, 0x158A	; 0x80158a <xNumOfOverflows>
    222c:	8f 5f       	subi	r24, 0xFF	; 255
    222e:	80 93 8a 15 	sts	0x158A, r24	; 0x80158a <xNumOfOverflows>
    2232:	16 dd       	rcall	.-1492   	; 0x1c60 <prvResetNextTaskUnblockTime>
    2234:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <xNextTaskUnblockTime>
    2238:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <xNextTaskUnblockTime+0x1>
    223c:	a0 91 87 15 	lds	r26, 0x1587	; 0x801587 <xNextTaskUnblockTime+0x2>
    2240:	b0 91 88 15 	lds	r27, 0x1588	; 0x801588 <xNextTaskUnblockTime+0x3>
    2244:	c8 16       	cp	r12, r24
    2246:	d9 06       	cpc	r13, r25
    2248:	ea 06       	cpc	r14, r26
    224a:	fb 06       	cpc	r15, r27
    224c:	20 f4       	brcc	.+8      	; 0x2256 <__stack+0x57>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	b2 c0       	rjmp	.+356    	; 0x23b6 <__stack+0x1b7>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	01 c0       	rjmp	.+2      	; 0x2258 <__stack+0x59>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	e0 91 bb 15 	lds	r30, 0x15BB	; 0x8015bb <pxDelayedTaskList>
    225c:	f0 91 bc 15 	lds	r31, 0x15BC	; 0x8015bc <pxDelayedTaskList+0x1>
    2260:	90 81       	ld	r25, Z
    2262:	91 11       	cpse	r25, r1
    2264:	0c c0       	rjmp	.+24     	; 0x227e <__stack+0x7f>
    2266:	4f ef       	ldi	r20, 0xFF	; 255
    2268:	5f ef       	ldi	r21, 0xFF	; 255
    226a:	ba 01       	movw	r22, r20
    226c:	40 93 85 15 	sts	0x1585, r20	; 0x801585 <xNextTaskUnblockTime>
    2270:	50 93 86 15 	sts	0x1586, r21	; 0x801586 <xNextTaskUnblockTime+0x1>
    2274:	60 93 87 15 	sts	0x1587, r22	; 0x801587 <xNextTaskUnblockTime+0x2>
    2278:	70 93 88 15 	sts	0x1588, r23	; 0x801588 <xNextTaskUnblockTime+0x3>
    227c:	9c c0       	rjmp	.+312    	; 0x23b6 <__stack+0x1b7>
    227e:	e0 91 bb 15 	lds	r30, 0x15BB	; 0x8015bb <pxDelayedTaskList>
    2282:	f0 91 bc 15 	lds	r31, 0x15BC	; 0x8015bc <pxDelayedTaskList+0x1>
    2286:	07 80       	ldd	r0, Z+7	; 0x07
    2288:	f0 85       	ldd	r31, Z+8	; 0x08
    228a:	e0 2d       	mov	r30, r0
    228c:	00 84       	ldd	r0, Z+8	; 0x08
    228e:	f1 85       	ldd	r31, Z+9	; 0x09
    2290:	e0 2d       	mov	r30, r0
    2292:	42 81       	ldd	r20, Z+2	; 0x02
    2294:	53 81       	ldd	r21, Z+3	; 0x03
    2296:	64 81       	ldd	r22, Z+4	; 0x04
    2298:	75 81       	ldd	r23, Z+5	; 0x05
    229a:	c4 16       	cp	r12, r20
    229c:	d5 06       	cpc	r13, r21
    229e:	e6 06       	cpc	r14, r22
    22a0:	f7 06       	cpc	r15, r23
    22a2:	48 f4       	brcc	.+18     	; 0x22b6 <__stack+0xb7>
    22a4:	40 93 85 15 	sts	0x1585, r20	; 0x801585 <xNextTaskUnblockTime>
    22a8:	50 93 86 15 	sts	0x1586, r21	; 0x801586 <xNextTaskUnblockTime+0x1>
    22ac:	60 93 87 15 	sts	0x1587, r22	; 0x801587 <xNextTaskUnblockTime+0x2>
    22b0:	70 93 88 15 	sts	0x1588, r23	; 0x801588 <xNextTaskUnblockTime+0x3>
    22b4:	80 c0       	rjmp	.+256    	; 0x23b6 <__stack+0x1b7>
    22b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    22b8:	b5 85       	ldd	r27, Z+13	; 0x0d
    22ba:	c6 81       	ldd	r28, Z+6	; 0x06
    22bc:	d7 81       	ldd	r29, Z+7	; 0x07
    22be:	20 85       	ldd	r18, Z+8	; 0x08
    22c0:	31 85       	ldd	r19, Z+9	; 0x09
    22c2:	3f 83       	std	Y+7, r19	; 0x07
    22c4:	2e 83       	std	Y+6, r18	; 0x06
    22c6:	c0 85       	ldd	r28, Z+8	; 0x08
    22c8:	d1 85       	ldd	r29, Z+9	; 0x09
    22ca:	26 81       	ldd	r18, Z+6	; 0x06
    22cc:	37 81       	ldd	r19, Z+7	; 0x07
    22ce:	3d 83       	std	Y+5, r19	; 0x05
    22d0:	2c 83       	std	Y+4, r18	; 0x04
    22d2:	11 96       	adiw	r26, 0x01	; 1
    22d4:	4d 91       	ld	r20, X+
    22d6:	5c 91       	ld	r21, X
    22d8:	12 97       	sbiw	r26, 0x02	; 2
    22da:	9f 01       	movw	r18, r30
    22dc:	2e 5f       	subi	r18, 0xFE	; 254
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	42 17       	cp	r20, r18
    22e2:	53 07       	cpc	r21, r19
    22e4:	31 f4       	brne	.+12     	; 0x22f2 <__stack+0xf3>
    22e6:	40 85       	ldd	r20, Z+8	; 0x08
    22e8:	51 85       	ldd	r21, Z+9	; 0x09
    22ea:	12 96       	adiw	r26, 0x02	; 2
    22ec:	5c 93       	st	X, r21
    22ee:	4e 93       	st	-X, r20
    22f0:	11 97       	sbiw	r26, 0x01	; 1
    22f2:	15 86       	std	Z+13, r1	; 0x0d
    22f4:	14 86       	std	Z+12, r1	; 0x0c
    22f6:	9c 91       	ld	r25, X
    22f8:	91 50       	subi	r25, 0x01	; 1
    22fa:	9c 93       	st	X, r25
    22fc:	a0 8d       	ldd	r26, Z+24	; 0x18
    22fe:	b1 8d       	ldd	r27, Z+25	; 0x19
    2300:	10 97       	sbiw	r26, 0x00	; 0
    2302:	09 f1       	breq	.+66     	; 0x2346 <__stack+0x147>
    2304:	c2 89       	ldd	r28, Z+18	; 0x12
    2306:	d3 89       	ldd	r29, Z+19	; 0x13
    2308:	44 89       	ldd	r20, Z+20	; 0x14
    230a:	55 89       	ldd	r21, Z+21	; 0x15
    230c:	5f 83       	std	Y+7, r21	; 0x07
    230e:	4e 83       	std	Y+6, r20	; 0x06
    2310:	c4 89       	ldd	r28, Z+20	; 0x14
    2312:	d5 89       	ldd	r29, Z+21	; 0x15
    2314:	42 89       	ldd	r20, Z+18	; 0x12
    2316:	53 89       	ldd	r21, Z+19	; 0x13
    2318:	5d 83       	std	Y+5, r21	; 0x05
    231a:	4c 83       	std	Y+4, r20	; 0x04
    231c:	11 96       	adiw	r26, 0x01	; 1
    231e:	6d 91       	ld	r22, X+
    2320:	7c 91       	ld	r23, X
    2322:	12 97       	sbiw	r26, 0x02	; 2
    2324:	af 01       	movw	r20, r30
    2326:	42 5f       	subi	r20, 0xF2	; 242
    2328:	5f 4f       	sbci	r21, 0xFF	; 255
    232a:	64 17       	cp	r22, r20
    232c:	75 07       	cpc	r23, r21
    232e:	31 f4       	brne	.+12     	; 0x233c <__stack+0x13d>
    2330:	44 89       	ldd	r20, Z+20	; 0x14
    2332:	55 89       	ldd	r21, Z+21	; 0x15
    2334:	12 96       	adiw	r26, 0x02	; 2
    2336:	5c 93       	st	X, r21
    2338:	4e 93       	st	-X, r20
    233a:	11 97       	sbiw	r26, 0x01	; 1
    233c:	11 8e       	std	Z+25, r1	; 0x19
    233e:	10 8e       	std	Z+24, r1	; 0x18
    2340:	9c 91       	ld	r25, X
    2342:	91 50       	subi	r25, 0x01	; 1
    2344:	9c 93       	st	X, r25
    2346:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2348:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <uxTopReadyPriority>
    234c:	9a 17       	cp	r25, r26
    234e:	10 f4       	brcc	.+4      	; 0x2354 <__stack+0x155>
    2350:	a0 93 91 15 	sts	0x1591, r26	; 0x801591 <uxTopReadyPriority>
    2354:	9b e0       	ldi	r25, 0x0B	; 11
    2356:	9a 9f       	mul	r25, r26
    2358:	d0 01       	movw	r26, r0
    235a:	11 24       	eor	r1, r1
    235c:	ad 52       	subi	r26, 0x2D	; 45
    235e:	ba 4e       	sbci	r27, 0xEA	; 234
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	0d 90       	ld	r0, X+
    2364:	bc 91       	ld	r27, X
    2366:	a0 2d       	mov	r26, r0
    2368:	b7 83       	std	Z+7, r27	; 0x07
    236a:	a6 83       	std	Z+6, r26	; 0x06
    236c:	16 96       	adiw	r26, 0x06	; 6
    236e:	4d 91       	ld	r20, X+
    2370:	5c 91       	ld	r21, X
    2372:	17 97       	sbiw	r26, 0x07	; 7
    2374:	51 87       	std	Z+9, r21	; 0x09
    2376:	40 87       	std	Z+8, r20	; 0x08
    2378:	16 96       	adiw	r26, 0x06	; 6
    237a:	cd 91       	ld	r28, X+
    237c:	dc 91       	ld	r29, X
    237e:	17 97       	sbiw	r26, 0x07	; 7
    2380:	3d 83       	std	Y+5, r19	; 0x05
    2382:	2c 83       	std	Y+4, r18	; 0x04
    2384:	17 96       	adiw	r26, 0x07	; 7
    2386:	3c 93       	st	X, r19
    2388:	2e 93       	st	-X, r18
    238a:	16 97       	sbiw	r26, 0x06	; 6
    238c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    238e:	9a 9f       	mul	r25, r26
    2390:	d0 01       	movw	r26, r0
    2392:	11 24       	eor	r1, r1
    2394:	ad 52       	subi	r26, 0x2D	; 45
    2396:	ba 4e       	sbci	r27, 0xEA	; 234
    2398:	b5 87       	std	Z+13, r27	; 0x0d
    239a:	a4 87       	std	Z+12, r26	; 0x0c
    239c:	9c 91       	ld	r25, X
    239e:	9f 5f       	subi	r25, 0xFF	; 255
    23a0:	9c 93       	st	X, r25
    23a2:	22 8d       	ldd	r18, Z+26	; 0x1a
    23a4:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    23a8:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    23ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ae:	29 17       	cp	r18, r25
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <__stack+0x1b5>
    23b2:	4f cf       	rjmp	.-354    	; 0x2252 <__stack+0x53>
    23b4:	51 cf       	rjmp	.-350    	; 0x2258 <__stack+0x59>
    23b6:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    23ba:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    23be:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23c0:	9b e0       	ldi	r25, 0x0B	; 11
    23c2:	e9 9f       	mul	r30, r25
    23c4:	f0 01       	movw	r30, r0
    23c6:	11 24       	eor	r1, r1
    23c8:	ed 52       	subi	r30, 0x2D	; 45
    23ca:	fa 4e       	sbci	r31, 0xEA	; 234
    23cc:	90 81       	ld	r25, Z
    23ce:	92 30       	cpi	r25, 0x02	; 2
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <__stack+0x1d5>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 91 8b 15 	lds	r25, 0x158B	; 0x80158b <xYieldPending>
    23d8:	91 11       	cpse	r25, r1
    23da:	16 c0       	rjmp	.+44     	; 0x2408 <__stack+0x209>
    23dc:	16 c0       	rjmp	.+44     	; 0x240a <__stack+0x20b>
    23de:	80 91 8c 15 	lds	r24, 0x158C	; 0x80158c <xPendedTicks>
    23e2:	90 91 8d 15 	lds	r25, 0x158D	; 0x80158d <xPendedTicks+0x1>
    23e6:	a0 91 8e 15 	lds	r26, 0x158E	; 0x80158e <xPendedTicks+0x2>
    23ea:	b0 91 8f 15 	lds	r27, 0x158F	; 0x80158f <xPendedTicks+0x3>
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	a1 1d       	adc	r26, r1
    23f2:	b1 1d       	adc	r27, r1
    23f4:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <xPendedTicks>
    23f8:	90 93 8d 15 	sts	0x158D, r25	; 0x80158d <xPendedTicks+0x1>
    23fc:	a0 93 8e 15 	sts	0x158E, r26	; 0x80158e <xPendedTicks+0x2>
    2400:	b0 93 8f 15 	sts	0x158F, r27	; 0x80158f <xPendedTicks+0x3>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	01 c0       	rjmp	.+2      	; 0x240a <__stack+0x20b>
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
    2416:	08 95       	ret

00002418 <xTaskResumeAll>:
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	0f 92       	push	r0
    242a:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    242e:	81 50       	subi	r24, 0x01	; 1
    2430:	80 93 82 15 	sts	0x1582, r24	; 0x801582 <uxSchedulerSuspended>
    2434:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    2438:	81 11       	cpse	r24, r1
    243a:	be c0       	rjmp	.+380    	; 0x25b8 <xTaskResumeAll+0x1a0>
    243c:	80 91 96 15 	lds	r24, 0x1596	; 0x801596 <uxCurrentNumberOfTasks>
    2440:	81 11       	cpse	r24, r1
    2442:	88 c0       	rjmp	.+272    	; 0x2554 <xTaskResumeAll+0x13c>
    2444:	bc c0       	rjmp	.+376    	; 0x25be <xTaskResumeAll+0x1a6>
    2446:	e0 91 b5 15 	lds	r30, 0x15B5	; 0x8015b5 <xPendingReadyList+0x7>
    244a:	f0 91 b6 15 	lds	r31, 0x15B6	; 0x8015b6 <xPendingReadyList+0x8>
    244e:	00 84       	ldd	r0, Z+8	; 0x08
    2450:	f1 85       	ldd	r31, Z+9	; 0x09
    2452:	e0 2d       	mov	r30, r0
    2454:	a0 8d       	ldd	r26, Z+24	; 0x18
    2456:	b1 8d       	ldd	r27, Z+25	; 0x19
    2458:	c2 89       	ldd	r28, Z+18	; 0x12
    245a:	d3 89       	ldd	r29, Z+19	; 0x13
    245c:	84 89       	ldd	r24, Z+20	; 0x14
    245e:	95 89       	ldd	r25, Z+21	; 0x15
    2460:	9f 83       	std	Y+7, r25	; 0x07
    2462:	8e 83       	std	Y+6, r24	; 0x06
    2464:	c4 89       	ldd	r28, Z+20	; 0x14
    2466:	d5 89       	ldd	r29, Z+21	; 0x15
    2468:	82 89       	ldd	r24, Z+18	; 0x12
    246a:	93 89       	ldd	r25, Z+19	; 0x13
    246c:	9d 83       	std	Y+5, r25	; 0x05
    246e:	8c 83       	std	Y+4, r24	; 0x04
    2470:	11 96       	adiw	r26, 0x01	; 1
    2472:	2d 91       	ld	r18, X+
    2474:	3c 91       	ld	r19, X
    2476:	12 97       	sbiw	r26, 0x02	; 2
    2478:	cf 01       	movw	r24, r30
    247a:	0e 96       	adiw	r24, 0x0e	; 14
    247c:	28 17       	cp	r18, r24
    247e:	39 07       	cpc	r19, r25
    2480:	31 f4       	brne	.+12     	; 0x248e <xTaskResumeAll+0x76>
    2482:	84 89       	ldd	r24, Z+20	; 0x14
    2484:	95 89       	ldd	r25, Z+21	; 0x15
    2486:	12 96       	adiw	r26, 0x02	; 2
    2488:	9c 93       	st	X, r25
    248a:	8e 93       	st	-X, r24
    248c:	11 97       	sbiw	r26, 0x01	; 1
    248e:	11 8e       	std	Z+25, r1	; 0x19
    2490:	10 8e       	std	Z+24, r1	; 0x18
    2492:	8c 91       	ld	r24, X
    2494:	81 50       	subi	r24, 0x01	; 1
    2496:	8c 93       	st	X, r24
    2498:	a4 85       	ldd	r26, Z+12	; 0x0c
    249a:	b5 85       	ldd	r27, Z+13	; 0x0d
    249c:	c6 81       	ldd	r28, Z+6	; 0x06
    249e:	d7 81       	ldd	r29, Z+7	; 0x07
    24a0:	80 85       	ldd	r24, Z+8	; 0x08
    24a2:	91 85       	ldd	r25, Z+9	; 0x09
    24a4:	9f 83       	std	Y+7, r25	; 0x07
    24a6:	8e 83       	std	Y+6, r24	; 0x06
    24a8:	c0 85       	ldd	r28, Z+8	; 0x08
    24aa:	d1 85       	ldd	r29, Z+9	; 0x09
    24ac:	86 81       	ldd	r24, Z+6	; 0x06
    24ae:	97 81       	ldd	r25, Z+7	; 0x07
    24b0:	9d 83       	std	Y+5, r25	; 0x05
    24b2:	8c 83       	std	Y+4, r24	; 0x04
    24b4:	11 96       	adiw	r26, 0x01	; 1
    24b6:	8d 91       	ld	r24, X+
    24b8:	9c 91       	ld	r25, X
    24ba:	12 97       	sbiw	r26, 0x02	; 2
    24bc:	9f 01       	movw	r18, r30
    24be:	2e 5f       	subi	r18, 0xFE	; 254
    24c0:	3f 4f       	sbci	r19, 0xFF	; 255
    24c2:	82 17       	cp	r24, r18
    24c4:	93 07       	cpc	r25, r19
    24c6:	31 f4       	brne	.+12     	; 0x24d4 <xTaskResumeAll+0xbc>
    24c8:	80 85       	ldd	r24, Z+8	; 0x08
    24ca:	91 85       	ldd	r25, Z+9	; 0x09
    24cc:	12 96       	adiw	r26, 0x02	; 2
    24ce:	9c 93       	st	X, r25
    24d0:	8e 93       	st	-X, r24
    24d2:	11 97       	sbiw	r26, 0x01	; 1
    24d4:	15 86       	std	Z+13, r1	; 0x0d
    24d6:	14 86       	std	Z+12, r1	; 0x0c
    24d8:	8c 91       	ld	r24, X
    24da:	81 50       	subi	r24, 0x01	; 1
    24dc:	8c 93       	st	X, r24
    24de:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24e0:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    24e4:	8a 17       	cp	r24, r26
    24e6:	10 f4       	brcc	.+4      	; 0x24ec <xTaskResumeAll+0xd4>
    24e8:	a0 93 91 15 	sts	0x1591, r26	; 0x801591 <uxTopReadyPriority>
    24ec:	8b e0       	ldi	r24, 0x0B	; 11
    24ee:	8a 9f       	mul	r24, r26
    24f0:	d0 01       	movw	r26, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	ad 52       	subi	r26, 0x2D	; 45
    24f6:	ba 4e       	sbci	r27, 0xEA	; 234
    24f8:	11 96       	adiw	r26, 0x01	; 1
    24fa:	0d 90       	ld	r0, X+
    24fc:	bc 91       	ld	r27, X
    24fe:	a0 2d       	mov	r26, r0
    2500:	b7 83       	std	Z+7, r27	; 0x07
    2502:	a6 83       	std	Z+6, r26	; 0x06
    2504:	16 96       	adiw	r26, 0x06	; 6
    2506:	4d 91       	ld	r20, X+
    2508:	5c 91       	ld	r21, X
    250a:	17 97       	sbiw	r26, 0x07	; 7
    250c:	51 87       	std	Z+9, r21	; 0x09
    250e:	40 87       	std	Z+8, r20	; 0x08
    2510:	16 96       	adiw	r26, 0x06	; 6
    2512:	cd 91       	ld	r28, X+
    2514:	dc 91       	ld	r29, X
    2516:	17 97       	sbiw	r26, 0x07	; 7
    2518:	3d 83       	std	Y+5, r19	; 0x05
    251a:	2c 83       	std	Y+4, r18	; 0x04
    251c:	17 96       	adiw	r26, 0x07	; 7
    251e:	3c 93       	st	X, r19
    2520:	2e 93       	st	-X, r18
    2522:	16 97       	sbiw	r26, 0x06	; 6
    2524:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2526:	8a 9f       	mul	r24, r26
    2528:	d0 01       	movw	r26, r0
    252a:	11 24       	eor	r1, r1
    252c:	ad 52       	subi	r26, 0x2D	; 45
    252e:	ba 4e       	sbci	r27, 0xEA	; 234
    2530:	b5 87       	std	Z+13, r27	; 0x0d
    2532:	a4 87       	std	Z+12, r26	; 0x0c
    2534:	8c 91       	ld	r24, X
    2536:	8f 5f       	subi	r24, 0xFF	; 255
    2538:	8c 93       	st	X, r24
    253a:	92 8d       	ldd	r25, Z+26	; 0x1a
    253c:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    2540:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2544:	5a 96       	adiw	r26, 0x1a	; 26
    2546:	8c 91       	ld	r24, X
    2548:	98 17       	cp	r25, r24
    254a:	30 f0       	brcs	.+12     	; 0x2558 <xTaskResumeAll+0x140>
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <xYieldPending>
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <xTaskResumeAll+0x140>
    2554:	e0 e0       	ldi	r30, 0x00	; 0
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <xPendingReadyList>
    255c:	81 11       	cpse	r24, r1
    255e:	73 cf       	rjmp	.-282    	; 0x2446 <xTaskResumeAll+0x2e>
    2560:	ef 2b       	or	r30, r31
    2562:	09 f0       	breq	.+2      	; 0x2566 <xTaskResumeAll+0x14e>
    2564:	7d db       	rcall	.-2310   	; 0x1c60 <prvResetNextTaskUnblockTime>
    2566:	c0 90 8c 15 	lds	r12, 0x158C	; 0x80158c <xPendedTicks>
    256a:	d0 90 8d 15 	lds	r13, 0x158D	; 0x80158d <xPendedTicks+0x1>
    256e:	e0 90 8e 15 	lds	r14, 0x158E	; 0x80158e <xPendedTicks+0x2>
    2572:	f0 90 8f 15 	lds	r15, 0x158F	; 0x80158f <xPendedTicks+0x3>
    2576:	c1 14       	cp	r12, r1
    2578:	d1 04       	cpc	r13, r1
    257a:	e1 04       	cpc	r14, r1
    257c:	f1 04       	cpc	r15, r1
    257e:	a1 f0       	breq	.+40     	; 0x25a8 <xTaskResumeAll+0x190>
    2580:	1f de       	rcall	.-962    	; 0x21c0 <xTaskIncrementTick>
    2582:	88 23       	and	r24, r24
    2584:	19 f0       	breq	.+6      	; 0x258c <xTaskResumeAll+0x174>
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <xYieldPending>
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	c8 1a       	sub	r12, r24
    2590:	d1 08       	sbc	r13, r1
    2592:	e1 08       	sbc	r14, r1
    2594:	f1 08       	sbc	r15, r1
    2596:	a1 f7       	brne	.-24     	; 0x2580 <xTaskResumeAll+0x168>
    2598:	10 92 8c 15 	sts	0x158C, r1	; 0x80158c <xPendedTicks>
    259c:	10 92 8d 15 	sts	0x158D, r1	; 0x80158d <xPendedTicks+0x1>
    25a0:	10 92 8e 15 	sts	0x158E, r1	; 0x80158e <xPendedTicks+0x2>
    25a4:	10 92 8f 15 	sts	0x158F, r1	; 0x80158f <xPendedTicks+0x3>
    25a8:	80 91 8b 15 	lds	r24, 0x158B	; 0x80158b <xYieldPending>
    25ac:	88 23       	and	r24, r24
    25ae:	31 f0       	breq	.+12     	; 0x25bc <xTaskResumeAll+0x1a4>
    25b0:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <xTaskResumeAll+0x1a6>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <xTaskResumeAll+0x1a6>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	df 90       	pop	r13
    25cc:	cf 90       	pop	r12
    25ce:	08 95       	ret

000025d0 <xTaskDelayUntil>:
    25d0:	8f 92       	push	r8
    25d2:	9f 92       	push	r9
    25d4:	af 92       	push	r10
    25d6:	bf 92       	push	r11
    25d8:	cf 92       	push	r12
    25da:	df 92       	push	r13
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	ec 01       	movw	r28, r24
    25e8:	6a 01       	movw	r12, r20
    25ea:	7b 01       	movw	r14, r22
    25ec:	d5 dd       	rcall	.-1110   	; 0x2198 <vTaskSuspendAll>
    25ee:	80 90 92 15 	lds	r8, 0x1592	; 0x801592 <xTickCount>
    25f2:	90 90 93 15 	lds	r9, 0x1593	; 0x801593 <xTickCount+0x1>
    25f6:	a0 90 94 15 	lds	r10, 0x1594	; 0x801594 <xTickCount+0x2>
    25fa:	b0 90 95 15 	lds	r11, 0x1595	; 0x801595 <xTickCount+0x3>
    25fe:	88 81       	ld	r24, Y
    2600:	99 81       	ldd	r25, Y+1	; 0x01
    2602:	aa 81       	ldd	r26, Y+2	; 0x02
    2604:	bb 81       	ldd	r27, Y+3	; 0x03
    2606:	ac 01       	movw	r20, r24
    2608:	bd 01       	movw	r22, r26
    260a:	4c 0d       	add	r20, r12
    260c:	5d 1d       	adc	r21, r13
    260e:	6e 1d       	adc	r22, r14
    2610:	7f 1d       	adc	r23, r15
    2612:	88 16       	cp	r8, r24
    2614:	99 06       	cpc	r9, r25
    2616:	aa 06       	cpc	r10, r26
    2618:	bb 06       	cpc	r11, r27
    261a:	60 f4       	brcc	.+24     	; 0x2634 <xTaskDelayUntil+0x64>
    261c:	48 17       	cp	r20, r24
    261e:	59 07       	cpc	r21, r25
    2620:	6a 07       	cpc	r22, r26
    2622:	7b 07       	cpc	r23, r27
    2624:	98 f4       	brcc	.+38     	; 0x264c <xTaskDelayUntil+0x7c>
    2626:	84 16       	cp	r8, r20
    2628:	95 06       	cpc	r9, r21
    262a:	a6 06       	cpc	r10, r22
    262c:	b7 06       	cpc	r11, r23
    262e:	80 f0       	brcs	.+32     	; 0x2650 <xTaskDelayUntil+0x80>
    2630:	10 e0       	ldi	r17, 0x00	; 0
    2632:	13 c0       	rjmp	.+38     	; 0x265a <xTaskDelayUntil+0x8a>
    2634:	48 17       	cp	r20, r24
    2636:	59 07       	cpc	r21, r25
    2638:	6a 07       	cpc	r22, r26
    263a:	7b 07       	cpc	r23, r27
    263c:	58 f0       	brcs	.+22     	; 0x2654 <xTaskDelayUntil+0x84>
    263e:	84 16       	cp	r8, r20
    2640:	95 06       	cpc	r9, r21
    2642:	a6 06       	cpc	r10, r22
    2644:	b7 06       	cpc	r11, r23
    2646:	40 f0       	brcs	.+16     	; 0x2658 <xTaskDelayUntil+0x88>
    2648:	10 e0       	ldi	r17, 0x00	; 0
    264a:	07 c0       	rjmp	.+14     	; 0x265a <xTaskDelayUntil+0x8a>
    264c:	10 e0       	ldi	r17, 0x00	; 0
    264e:	05 c0       	rjmp	.+10     	; 0x265a <xTaskDelayUntil+0x8a>
    2650:	11 e0       	ldi	r17, 0x01	; 1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <xTaskDelayUntil+0x8a>
    2654:	11 e0       	ldi	r17, 0x01	; 1
    2656:	01 c0       	rjmp	.+2      	; 0x265a <xTaskDelayUntil+0x8a>
    2658:	11 e0       	ldi	r17, 0x01	; 1
    265a:	48 83       	st	Y, r20
    265c:	59 83       	std	Y+1, r21	; 0x01
    265e:	6a 83       	std	Y+2, r22	; 0x02
    2660:	7b 83       	std	Y+3, r23	; 0x03
    2662:	11 23       	and	r17, r17
    2664:	41 f0       	breq	.+16     	; 0x2676 <xTaskDelayUntil+0xa6>
    2666:	cb 01       	movw	r24, r22
    2668:	ba 01       	movw	r22, r20
    266a:	68 19       	sub	r22, r8
    266c:	79 09       	sbc	r23, r9
    266e:	8a 09       	sbc	r24, r10
    2670:	9b 09       	sbc	r25, r11
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	6b dc       	rcall	.-1834   	; 0x1f4c <prvAddCurrentTaskToDelayedList>
    2676:	d0 de       	rcall	.-608    	; 0x2418 <xTaskResumeAll>
    2678:	81 11       	cpse	r24, r1
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <xTaskDelayUntil+0xb0>
    267c:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    2680:	81 2f       	mov	r24, r17
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	9f 90       	pop	r9
    2696:	8f 90       	pop	r8
    2698:	08 95       	ret

0000269a <vTaskDelay>:
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	6b 01       	movw	r12, r22
    26a4:	7c 01       	movw	r14, r24
    26a6:	67 2b       	or	r22, r23
    26a8:	68 2b       	or	r22, r24
    26aa:	69 2b       	or	r22, r25
    26ac:	39 f0       	breq	.+14     	; 0x26bc <vTaskDelay+0x22>
    26ae:	74 dd       	rcall	.-1304   	; 0x2198 <vTaskSuspendAll>
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	c7 01       	movw	r24, r14
    26b4:	b6 01       	movw	r22, r12
    26b6:	4a dc       	rcall	.-1900   	; 0x1f4c <prvAddCurrentTaskToDelayedList>
    26b8:	af de       	rcall	.-674    	; 0x2418 <xTaskResumeAll>
    26ba:	01 c0       	rjmp	.+2      	; 0x26be <vTaskDelay+0x24>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	81 11       	cpse	r24, r1
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <vTaskDelay+0x2c>
    26c2:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
    26ce:	08 95       	ret

000026d0 <vTaskSwitchContext>:
    26d0:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    26d4:	88 23       	and	r24, r24
    26d6:	21 f0       	breq	.+8      	; 0x26e0 <vTaskSwitchContext+0x10>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <xYieldPending>
    26de:	08 95       	ret
    26e0:	10 92 8b 15 	sts	0x158B, r1	; 0x80158b <xYieldPending>
    26e4:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    26e8:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    26ec:	20 81       	ld	r18, Z
    26ee:	31 81       	ldd	r19, Z+1	; 0x01
    26f0:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    26f4:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    26f8:	83 8d       	ldd	r24, Z+27	; 0x1b
    26fa:	94 8d       	ldd	r25, Z+28	; 0x1c
    26fc:	82 17       	cp	r24, r18
    26fe:	93 07       	cpc	r25, r19
    2700:	60 f0       	brcs	.+24     	; 0x271a <vTaskSwitchContext+0x4a>
    2702:	60 91 41 16 	lds	r22, 0x1641	; 0x801641 <pxCurrentTCB>
    2706:	70 91 42 16 	lds	r23, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    270a:	63 5e       	subi	r22, 0xE3	; 227
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    2712:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2716:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <vApplicationStackOverflowHook>
    271a:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <vTaskSwitchContext+0x52>
    2720:	81 50       	subi	r24, 0x01	; 1
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	9b e0       	ldi	r25, 0x0B	; 11
    2728:	92 9f       	mul	r25, r18
    272a:	f0 01       	movw	r30, r0
    272c:	93 9f       	mul	r25, r19
    272e:	f0 0d       	add	r31, r0
    2730:	11 24       	eor	r1, r1
    2732:	ed 52       	subi	r30, 0x2D	; 45
    2734:	fa 4e       	sbci	r31, 0xEA	; 234
    2736:	90 81       	ld	r25, Z
    2738:	99 23       	and	r25, r25
    273a:	91 f3       	breq	.-28     	; 0x2720 <vTaskSwitchContext+0x50>
    273c:	9b e0       	ldi	r25, 0x0B	; 11
    273e:	92 9f       	mul	r25, r18
    2740:	a0 01       	movw	r20, r0
    2742:	93 9f       	mul	r25, r19
    2744:	50 0d       	add	r21, r0
    2746:	11 24       	eor	r1, r1
    2748:	df 01       	movw	r26, r30
    274a:	01 80       	ldd	r0, Z+1	; 0x01
    274c:	f2 81       	ldd	r31, Z+2	; 0x02
    274e:	e0 2d       	mov	r30, r0
    2750:	04 80       	ldd	r0, Z+4	; 0x04
    2752:	f5 81       	ldd	r31, Z+5	; 0x05
    2754:	e0 2d       	mov	r30, r0
    2756:	12 96       	adiw	r26, 0x02	; 2
    2758:	fc 93       	st	X, r31
    275a:	ee 93       	st	-X, r30
    275c:	11 97       	sbiw	r26, 0x01	; 1
    275e:	4a 52       	subi	r20, 0x2A	; 42
    2760:	5a 4e       	sbci	r21, 0xEA	; 234
    2762:	e4 17       	cp	r30, r20
    2764:	f5 07       	cpc	r31, r21
    2766:	29 f4       	brne	.+10     	; 0x2772 <vTaskSwitchContext+0xa2>
    2768:	44 81       	ldd	r20, Z+4	; 0x04
    276a:	55 81       	ldd	r21, Z+5	; 0x05
    276c:	fd 01       	movw	r30, r26
    276e:	52 83       	std	Z+2, r21	; 0x02
    2770:	41 83       	std	Z+1, r20	; 0x01
    2772:	9b e0       	ldi	r25, 0x0B	; 11
    2774:	92 9f       	mul	r25, r18
    2776:	f0 01       	movw	r30, r0
    2778:	93 9f       	mul	r25, r19
    277a:	f0 0d       	add	r31, r0
    277c:	11 24       	eor	r1, r1
    277e:	ed 52       	subi	r30, 0x2D	; 45
    2780:	fa 4e       	sbci	r31, 0xEA	; 234
    2782:	01 80       	ldd	r0, Z+1	; 0x01
    2784:	f2 81       	ldd	r31, Z+2	; 0x02
    2786:	e0 2d       	mov	r30, r0
    2788:	20 85       	ldd	r18, Z+8	; 0x08
    278a:	31 85       	ldd	r19, Z+9	; 0x09
    278c:	30 93 42 16 	sts	0x1642, r19	; 0x801642 <pxCurrentTCB+0x1>
    2790:	20 93 41 16 	sts	0x1641, r18	; 0x801641 <pxCurrentTCB>
    2794:	80 93 91 15 	sts	0x1591, r24	; 0x801591 <uxTopReadyPriority>
    2798:	08 95       	ret

0000279a <vTaskPlaceOnEventList>:
    279a:	cf 92       	push	r12
    279c:	df 92       	push	r13
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	6a 01       	movw	r12, r20
    27a4:	7b 01       	movw	r14, r22
    27a6:	60 91 41 16 	lds	r22, 0x1641	; 0x801641 <pxCurrentTCB>
    27aa:	70 91 42 16 	lds	r23, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    27ae:	62 5f       	subi	r22, 0xF2	; 242
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	0e 94 05 06 	call	0xc0a	; 0xc0a <vListInsert>
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	c7 01       	movw	r24, r14
    27ba:	b6 01       	movw	r22, r12
    27bc:	c7 db       	rcall	.-2162   	; 0x1f4c <prvAddCurrentTaskToDelayedList>
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	08 95       	ret

000027c8 <vTaskPlaceOnUnorderedEventList>:
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	fc 01       	movw	r30, r24
    27d2:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    27d6:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    27da:	70 68       	ori	r23, 0x80	; 128
    27dc:	1e 96       	adiw	r26, 0x0e	; 14
    27de:	4d 93       	st	X+, r20
    27e0:	5d 93       	st	X+, r21
    27e2:	6d 93       	st	X+, r22
    27e4:	7c 93       	st	X, r23
    27e6:	51 97       	sbiw	r26, 0x11	; 17
    27e8:	a1 81       	ldd	r26, Z+1	; 0x01
    27ea:	b2 81       	ldd	r27, Z+2	; 0x02
    27ec:	c0 91 41 16 	lds	r28, 0x1641	; 0x801641 <pxCurrentTCB>
    27f0:	d0 91 42 16 	lds	r29, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    27f4:	bb 8b       	std	Y+19, r27	; 0x13
    27f6:	aa 8b       	std	Y+18, r26	; 0x12
    27f8:	c0 91 41 16 	lds	r28, 0x1641	; 0x801641 <pxCurrentTCB>
    27fc:	d0 91 42 16 	lds	r29, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2800:	16 96       	adiw	r26, 0x06	; 6
    2802:	8d 91       	ld	r24, X+
    2804:	9c 91       	ld	r25, X
    2806:	17 97       	sbiw	r26, 0x07	; 7
    2808:	9d 8b       	std	Y+21, r25	; 0x15
    280a:	8c 8b       	std	Y+20, r24	; 0x14
    280c:	16 96       	adiw	r26, 0x06	; 6
    280e:	cd 91       	ld	r28, X+
    2810:	dc 91       	ld	r29, X
    2812:	17 97       	sbiw	r26, 0x07	; 7
    2814:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    2818:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    281c:	0e 96       	adiw	r24, 0x0e	; 14
    281e:	9d 83       	std	Y+5, r25	; 0x05
    2820:	8c 83       	std	Y+4, r24	; 0x04
    2822:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    2826:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    282a:	0e 96       	adiw	r24, 0x0e	; 14
    282c:	17 96       	adiw	r26, 0x07	; 7
    282e:	9c 93       	st	X, r25
    2830:	8e 93       	st	-X, r24
    2832:	16 97       	sbiw	r26, 0x06	; 6
    2834:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    2838:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    283c:	59 96       	adiw	r26, 0x19	; 25
    283e:	fc 93       	st	X, r31
    2840:	ee 93       	st	-X, r30
    2842:	58 97       	sbiw	r26, 0x18	; 24
    2844:	80 81       	ld	r24, Z
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	80 83       	st	Z, r24
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	c9 01       	movw	r24, r18
    284e:	b8 01       	movw	r22, r16
    2850:	7d db       	rcall	.-2310   	; 0x1f4c <prvAddCurrentTaskToDelayedList>
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	08 95       	ret

0000285c <vTaskPlaceOnEventListRestricted>:
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	fc 01       	movw	r30, r24
    2862:	cb 01       	movw	r24, r22
    2864:	ba 01       	movw	r22, r20
    2866:	a1 81       	ldd	r26, Z+1	; 0x01
    2868:	b2 81       	ldd	r27, Z+2	; 0x02
    286a:	c0 91 41 16 	lds	r28, 0x1641	; 0x801641 <pxCurrentTCB>
    286e:	d0 91 42 16 	lds	r29, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2872:	bb 8b       	std	Y+19, r27	; 0x13
    2874:	aa 8b       	std	Y+18, r26	; 0x12
    2876:	c0 91 41 16 	lds	r28, 0x1641	; 0x801641 <pxCurrentTCB>
    287a:	d0 91 42 16 	lds	r29, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    287e:	16 96       	adiw	r26, 0x06	; 6
    2880:	4d 91       	ld	r20, X+
    2882:	5c 91       	ld	r21, X
    2884:	17 97       	sbiw	r26, 0x07	; 7
    2886:	5d 8b       	std	Y+21, r21	; 0x15
    2888:	4c 8b       	std	Y+20, r20	; 0x14
    288a:	16 96       	adiw	r26, 0x06	; 6
    288c:	cd 91       	ld	r28, X+
    288e:	dc 91       	ld	r29, X
    2890:	17 97       	sbiw	r26, 0x07	; 7
    2892:	40 91 41 16 	lds	r20, 0x1641	; 0x801641 <pxCurrentTCB>
    2896:	50 91 42 16 	lds	r21, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    289a:	42 5f       	subi	r20, 0xF2	; 242
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	5d 83       	std	Y+5, r21	; 0x05
    28a0:	4c 83       	std	Y+4, r20	; 0x04
    28a2:	40 91 41 16 	lds	r20, 0x1641	; 0x801641 <pxCurrentTCB>
    28a6:	50 91 42 16 	lds	r21, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    28aa:	42 5f       	subi	r20, 0xF2	; 242
    28ac:	5f 4f       	sbci	r21, 0xFF	; 255
    28ae:	17 96       	adiw	r26, 0x07	; 7
    28b0:	5c 93       	st	X, r21
    28b2:	4e 93       	st	-X, r20
    28b4:	16 97       	sbiw	r26, 0x06	; 6
    28b6:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    28ba:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    28be:	59 96       	adiw	r26, 0x19	; 25
    28c0:	fc 93       	st	X, r31
    28c2:	ee 93       	st	-X, r30
    28c4:	58 97       	sbiw	r26, 0x18	; 24
    28c6:	30 81       	ld	r19, Z
    28c8:	3f 5f       	subi	r19, 0xFF	; 255
    28ca:	30 83       	st	Z, r19
    28cc:	22 23       	and	r18, r18
    28ce:	19 f0       	breq	.+6      	; 0x28d6 <vTaskPlaceOnEventListRestricted+0x7a>
    28d0:	6f ef       	ldi	r22, 0xFF	; 255
    28d2:	7f ef       	ldi	r23, 0xFF	; 255
    28d4:	cb 01       	movw	r24, r22
    28d6:	42 2f       	mov	r20, r18
    28d8:	39 db       	rcall	.-2446   	; 0x1f4c <prvAddCurrentTaskToDelayedList>
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	08 95       	ret

000028e0 <xTaskRemoveFromEventList>:
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	dc 01       	movw	r26, r24
    28e6:	17 96       	adiw	r26, 0x07	; 7
    28e8:	ed 91       	ld	r30, X+
    28ea:	fc 91       	ld	r31, X
    28ec:	18 97       	sbiw	r26, 0x08	; 8
    28ee:	00 84       	ldd	r0, Z+8	; 0x08
    28f0:	f1 85       	ldd	r31, Z+9	; 0x09
    28f2:	e0 2d       	mov	r30, r0
    28f4:	a0 8d       	ldd	r26, Z+24	; 0x18
    28f6:	b1 8d       	ldd	r27, Z+25	; 0x19
    28f8:	c2 89       	ldd	r28, Z+18	; 0x12
    28fa:	d3 89       	ldd	r29, Z+19	; 0x13
    28fc:	84 89       	ldd	r24, Z+20	; 0x14
    28fe:	95 89       	ldd	r25, Z+21	; 0x15
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	c4 89       	ldd	r28, Z+20	; 0x14
    2906:	d5 89       	ldd	r29, Z+21	; 0x15
    2908:	82 89       	ldd	r24, Z+18	; 0x12
    290a:	93 89       	ldd	r25, Z+19	; 0x13
    290c:	9d 83       	std	Y+5, r25	; 0x05
    290e:	8c 83       	std	Y+4, r24	; 0x04
    2910:	11 96       	adiw	r26, 0x01	; 1
    2912:	8d 91       	ld	r24, X+
    2914:	9c 91       	ld	r25, X
    2916:	12 97       	sbiw	r26, 0x02	; 2
    2918:	9f 01       	movw	r18, r30
    291a:	22 5f       	subi	r18, 0xF2	; 242
    291c:	3f 4f       	sbci	r19, 0xFF	; 255
    291e:	82 17       	cp	r24, r18
    2920:	93 07       	cpc	r25, r19
    2922:	31 f4       	brne	.+12     	; 0x2930 <xTaskRemoveFromEventList+0x50>
    2924:	84 89       	ldd	r24, Z+20	; 0x14
    2926:	95 89       	ldd	r25, Z+21	; 0x15
    2928:	12 96       	adiw	r26, 0x02	; 2
    292a:	9c 93       	st	X, r25
    292c:	8e 93       	st	-X, r24
    292e:	11 97       	sbiw	r26, 0x01	; 1
    2930:	11 8e       	std	Z+25, r1	; 0x19
    2932:	10 8e       	std	Z+24, r1	; 0x18
    2934:	8c 91       	ld	r24, X
    2936:	81 50       	subi	r24, 0x01	; 1
    2938:	8c 93       	st	X, r24
    293a:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    293e:	81 11       	cpse	r24, r1
    2940:	52 c0       	rjmp	.+164    	; 0x29e6 <xTaskRemoveFromEventList+0x106>
    2942:	a4 85       	ldd	r26, Z+12	; 0x0c
    2944:	b5 85       	ldd	r27, Z+13	; 0x0d
    2946:	c6 81       	ldd	r28, Z+6	; 0x06
    2948:	d7 81       	ldd	r29, Z+7	; 0x07
    294a:	80 85       	ldd	r24, Z+8	; 0x08
    294c:	91 85       	ldd	r25, Z+9	; 0x09
    294e:	9f 83       	std	Y+7, r25	; 0x07
    2950:	8e 83       	std	Y+6, r24	; 0x06
    2952:	c0 85       	ldd	r28, Z+8	; 0x08
    2954:	d1 85       	ldd	r29, Z+9	; 0x09
    2956:	86 81       	ldd	r24, Z+6	; 0x06
    2958:	97 81       	ldd	r25, Z+7	; 0x07
    295a:	9d 83       	std	Y+5, r25	; 0x05
    295c:	8c 83       	std	Y+4, r24	; 0x04
    295e:	11 96       	adiw	r26, 0x01	; 1
    2960:	8d 91       	ld	r24, X+
    2962:	9c 91       	ld	r25, X
    2964:	12 97       	sbiw	r26, 0x02	; 2
    2966:	9f 01       	movw	r18, r30
    2968:	2e 5f       	subi	r18, 0xFE	; 254
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
    296c:	82 17       	cp	r24, r18
    296e:	93 07       	cpc	r25, r19
    2970:	31 f4       	brne	.+12     	; 0x297e <xTaskRemoveFromEventList+0x9e>
    2972:	80 85       	ldd	r24, Z+8	; 0x08
    2974:	91 85       	ldd	r25, Z+9	; 0x09
    2976:	12 96       	adiw	r26, 0x02	; 2
    2978:	9c 93       	st	X, r25
    297a:	8e 93       	st	-X, r24
    297c:	11 97       	sbiw	r26, 0x01	; 1
    297e:	15 86       	std	Z+13, r1	; 0x0d
    2980:	14 86       	std	Z+12, r1	; 0x0c
    2982:	8c 91       	ld	r24, X
    2984:	81 50       	subi	r24, 0x01	; 1
    2986:	8c 93       	st	X, r24
    2988:	a2 8d       	ldd	r26, Z+26	; 0x1a
    298a:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    298e:	8a 17       	cp	r24, r26
    2990:	10 f4       	brcc	.+4      	; 0x2996 <xTaskRemoveFromEventList+0xb6>
    2992:	a0 93 91 15 	sts	0x1591, r26	; 0x801591 <uxTopReadyPriority>
    2996:	8b e0       	ldi	r24, 0x0B	; 11
    2998:	8a 9f       	mul	r24, r26
    299a:	d0 01       	movw	r26, r0
    299c:	11 24       	eor	r1, r1
    299e:	ad 52       	subi	r26, 0x2D	; 45
    29a0:	ba 4e       	sbci	r27, 0xEA	; 234
    29a2:	11 96       	adiw	r26, 0x01	; 1
    29a4:	0d 90       	ld	r0, X+
    29a6:	bc 91       	ld	r27, X
    29a8:	a0 2d       	mov	r26, r0
    29aa:	b7 83       	std	Z+7, r27	; 0x07
    29ac:	a6 83       	std	Z+6, r26	; 0x06
    29ae:	16 96       	adiw	r26, 0x06	; 6
    29b0:	4d 91       	ld	r20, X+
    29b2:	5c 91       	ld	r21, X
    29b4:	17 97       	sbiw	r26, 0x07	; 7
    29b6:	51 87       	std	Z+9, r21	; 0x09
    29b8:	40 87       	std	Z+8, r20	; 0x08
    29ba:	16 96       	adiw	r26, 0x06	; 6
    29bc:	cd 91       	ld	r28, X+
    29be:	dc 91       	ld	r29, X
    29c0:	17 97       	sbiw	r26, 0x07	; 7
    29c2:	3d 83       	std	Y+5, r19	; 0x05
    29c4:	2c 83       	std	Y+4, r18	; 0x04
    29c6:	17 96       	adiw	r26, 0x07	; 7
    29c8:	3c 93       	st	X, r19
    29ca:	2e 93       	st	-X, r18
    29cc:	16 97       	sbiw	r26, 0x06	; 6
    29ce:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29d0:	8a 9f       	mul	r24, r26
    29d2:	d0 01       	movw	r26, r0
    29d4:	11 24       	eor	r1, r1
    29d6:	ad 52       	subi	r26, 0x2D	; 45
    29d8:	ba 4e       	sbci	r27, 0xEA	; 234
    29da:	b5 87       	std	Z+13, r27	; 0x0d
    29dc:	a4 87       	std	Z+12, r26	; 0x0c
    29de:	8c 91       	ld	r24, X
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	8c 93       	st	X, r24
    29e4:	1c c0       	rjmp	.+56     	; 0x2a1e <xTaskRemoveFromEventList+0x13e>
    29e6:	4e ea       	ldi	r20, 0xAE	; 174
    29e8:	55 e1       	ldi	r21, 0x15	; 21
    29ea:	da 01       	movw	r26, r20
    29ec:	11 96       	adiw	r26, 0x01	; 1
    29ee:	cd 91       	ld	r28, X+
    29f0:	dc 91       	ld	r29, X
    29f2:	12 97       	sbiw	r26, 0x02	; 2
    29f4:	d3 8b       	std	Z+19, r29	; 0x13
    29f6:	c2 8b       	std	Z+18, r28	; 0x12
    29f8:	8e 81       	ldd	r24, Y+6	; 0x06
    29fa:	9f 81       	ldd	r25, Y+7	; 0x07
    29fc:	95 8b       	std	Z+21, r25	; 0x15
    29fe:	84 8b       	std	Z+20, r24	; 0x14
    2a00:	8e 81       	ldd	r24, Y+6	; 0x06
    2a02:	9f 81       	ldd	r25, Y+7	; 0x07
    2a04:	dc 01       	movw	r26, r24
    2a06:	15 96       	adiw	r26, 0x05	; 5
    2a08:	3c 93       	st	X, r19
    2a0a:	2e 93       	st	-X, r18
    2a0c:	14 97       	sbiw	r26, 0x04	; 4
    2a0e:	3f 83       	std	Y+7, r19	; 0x07
    2a10:	2e 83       	std	Y+6, r18	; 0x06
    2a12:	51 8f       	std	Z+25, r21	; 0x19
    2a14:	40 8f       	std	Z+24, r20	; 0x18
    2a16:	da 01       	movw	r26, r20
    2a18:	8c 91       	ld	r24, X
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	8c 93       	st	X, r24
    2a1e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a20:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2a24:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2a28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a2a:	89 17       	cp	r24, r25
    2a2c:	20 f4       	brcc	.+8      	; 0x2a36 <xTaskRemoveFromEventList+0x156>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <xYieldPending>
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <xTaskRemoveFromEventList+0x158>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <vTaskRemoveFromUnorderedEventList>:
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	dc 01       	movw	r26, r24
    2a44:	70 68       	ori	r23, 0x80	; 128
    2a46:	4d 93       	st	X+, r20
    2a48:	5d 93       	st	X+, r21
    2a4a:	6d 93       	st	X+, r22
    2a4c:	7c 93       	st	X, r23
    2a4e:	13 97       	sbiw	r26, 0x03	; 3
    2a50:	18 96       	adiw	r26, 0x08	; 8
    2a52:	ed 91       	ld	r30, X+
    2a54:	fc 91       	ld	r31, X
    2a56:	19 97       	sbiw	r26, 0x09	; 9
    2a58:	1a 96       	adiw	r26, 0x0a	; 10
    2a5a:	4d 91       	ld	r20, X+
    2a5c:	5c 91       	ld	r21, X
    2a5e:	1b 97       	sbiw	r26, 0x0b	; 11
    2a60:	14 96       	adiw	r26, 0x04	; 4
    2a62:	8d 91       	ld	r24, X+
    2a64:	9c 91       	ld	r25, X
    2a66:	15 97       	sbiw	r26, 0x05	; 5
    2a68:	16 96       	adiw	r26, 0x06	; 6
    2a6a:	2d 91       	ld	r18, X+
    2a6c:	3c 91       	ld	r19, X
    2a6e:	17 97       	sbiw	r26, 0x07	; 7
    2a70:	ec 01       	movw	r28, r24
    2a72:	3f 83       	std	Y+7, r19	; 0x07
    2a74:	2e 83       	std	Y+6, r18	; 0x06
    2a76:	16 96       	adiw	r26, 0x06	; 6
    2a78:	8d 91       	ld	r24, X+
    2a7a:	9c 91       	ld	r25, X
    2a7c:	17 97       	sbiw	r26, 0x07	; 7
    2a7e:	14 96       	adiw	r26, 0x04	; 4
    2a80:	2d 91       	ld	r18, X+
    2a82:	3c 91       	ld	r19, X
    2a84:	15 97       	sbiw	r26, 0x05	; 5
    2a86:	ec 01       	movw	r28, r24
    2a88:	3d 83       	std	Y+5, r19	; 0x05
    2a8a:	2c 83       	std	Y+4, r18	; 0x04
    2a8c:	ea 01       	movw	r28, r20
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	a8 17       	cp	r26, r24
    2a94:	b9 07       	cpc	r27, r25
    2a96:	31 f4       	brne	.+12     	; 0x2aa4 <vTaskRemoveFromUnorderedEventList+0x66>
    2a98:	16 96       	adiw	r26, 0x06	; 6
    2a9a:	8d 91       	ld	r24, X+
    2a9c:	9c 91       	ld	r25, X
    2a9e:	17 97       	sbiw	r26, 0x07	; 7
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	1b 96       	adiw	r26, 0x0b	; 11
    2aa6:	1c 92       	st	X, r1
    2aa8:	1e 92       	st	-X, r1
    2aaa:	1a 97       	sbiw	r26, 0x0a	; 10
    2aac:	da 01       	movw	r26, r20
    2aae:	8c 91       	ld	r24, X
    2ab0:	81 50       	subi	r24, 0x01	; 1
    2ab2:	8c 93       	st	X, r24
    2ab4:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ab6:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ab8:	c6 81       	ldd	r28, Z+6	; 0x06
    2aba:	d7 81       	ldd	r29, Z+7	; 0x07
    2abc:	80 85       	ldd	r24, Z+8	; 0x08
    2abe:	91 85       	ldd	r25, Z+9	; 0x09
    2ac0:	9f 83       	std	Y+7, r25	; 0x07
    2ac2:	8e 83       	std	Y+6, r24	; 0x06
    2ac4:	c0 85       	ldd	r28, Z+8	; 0x08
    2ac6:	d1 85       	ldd	r29, Z+9	; 0x09
    2ac8:	86 81       	ldd	r24, Z+6	; 0x06
    2aca:	97 81       	ldd	r25, Z+7	; 0x07
    2acc:	9d 83       	std	Y+5, r25	; 0x05
    2ace:	8c 83       	std	Y+4, r24	; 0x04
    2ad0:	11 96       	adiw	r26, 0x01	; 1
    2ad2:	8d 91       	ld	r24, X+
    2ad4:	9c 91       	ld	r25, X
    2ad6:	12 97       	sbiw	r26, 0x02	; 2
    2ad8:	9f 01       	movw	r18, r30
    2ada:	2e 5f       	subi	r18, 0xFE	; 254
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	82 17       	cp	r24, r18
    2ae0:	93 07       	cpc	r25, r19
    2ae2:	31 f4       	brne	.+12     	; 0x2af0 <vTaskRemoveFromUnorderedEventList+0xb2>
    2ae4:	80 85       	ldd	r24, Z+8	; 0x08
    2ae6:	91 85       	ldd	r25, Z+9	; 0x09
    2ae8:	12 96       	adiw	r26, 0x02	; 2
    2aea:	9c 93       	st	X, r25
    2aec:	8e 93       	st	-X, r24
    2aee:	11 97       	sbiw	r26, 0x01	; 1
    2af0:	15 86       	std	Z+13, r1	; 0x0d
    2af2:	14 86       	std	Z+12, r1	; 0x0c
    2af4:	8c 91       	ld	r24, X
    2af6:	81 50       	subi	r24, 0x01	; 1
    2af8:	8c 93       	st	X, r24
    2afa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2afc:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    2b00:	8a 17       	cp	r24, r26
    2b02:	10 f4       	brcc	.+4      	; 0x2b08 <vTaskRemoveFromUnorderedEventList+0xca>
    2b04:	a0 93 91 15 	sts	0x1591, r26	; 0x801591 <uxTopReadyPriority>
    2b08:	8b e0       	ldi	r24, 0x0B	; 11
    2b0a:	8a 9f       	mul	r24, r26
    2b0c:	d0 01       	movw	r26, r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	ad 52       	subi	r26, 0x2D	; 45
    2b12:	ba 4e       	sbci	r27, 0xEA	; 234
    2b14:	11 96       	adiw	r26, 0x01	; 1
    2b16:	0d 90       	ld	r0, X+
    2b18:	bc 91       	ld	r27, X
    2b1a:	a0 2d       	mov	r26, r0
    2b1c:	b7 83       	std	Z+7, r27	; 0x07
    2b1e:	a6 83       	std	Z+6, r26	; 0x06
    2b20:	16 96       	adiw	r26, 0x06	; 6
    2b22:	4d 91       	ld	r20, X+
    2b24:	5c 91       	ld	r21, X
    2b26:	17 97       	sbiw	r26, 0x07	; 7
    2b28:	51 87       	std	Z+9, r21	; 0x09
    2b2a:	40 87       	std	Z+8, r20	; 0x08
    2b2c:	16 96       	adiw	r26, 0x06	; 6
    2b2e:	cd 91       	ld	r28, X+
    2b30:	dc 91       	ld	r29, X
    2b32:	17 97       	sbiw	r26, 0x07	; 7
    2b34:	3d 83       	std	Y+5, r19	; 0x05
    2b36:	2c 83       	std	Y+4, r18	; 0x04
    2b38:	17 96       	adiw	r26, 0x07	; 7
    2b3a:	3c 93       	st	X, r19
    2b3c:	2e 93       	st	-X, r18
    2b3e:	16 97       	sbiw	r26, 0x06	; 6
    2b40:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b42:	8a 9f       	mul	r24, r26
    2b44:	d0 01       	movw	r26, r0
    2b46:	11 24       	eor	r1, r1
    2b48:	ad 52       	subi	r26, 0x2D	; 45
    2b4a:	ba 4e       	sbci	r27, 0xEA	; 234
    2b4c:	b5 87       	std	Z+13, r27	; 0x0d
    2b4e:	a4 87       	std	Z+12, r26	; 0x0c
    2b50:	8c 91       	ld	r24, X
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	8c 93       	st	X, r24
    2b56:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b58:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2b5c:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2b60:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b62:	89 17       	cp	r24, r25
    2b64:	18 f4       	brcc	.+6      	; 0x2b6c <vTaskRemoveFromUnorderedEventList+0x12e>
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <xYieldPending>
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <vTaskSetTimeOutState>:
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	0f 92       	push	r0
    2b78:	20 91 8a 15 	lds	r18, 0x158A	; 0x80158a <xNumOfOverflows>
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	20 83       	st	Z, r18
    2b80:	40 91 92 15 	lds	r20, 0x1592	; 0x801592 <xTickCount>
    2b84:	50 91 93 15 	lds	r21, 0x1593	; 0x801593 <xTickCount+0x1>
    2b88:	60 91 94 15 	lds	r22, 0x1594	; 0x801594 <xTickCount+0x2>
    2b8c:	70 91 95 15 	lds	r23, 0x1595	; 0x801595 <xTickCount+0x3>
    2b90:	41 83       	std	Z+1, r20	; 0x01
    2b92:	52 83       	std	Z+2, r21	; 0x02
    2b94:	63 83       	std	Z+3, r22	; 0x03
    2b96:	74 83       	std	Z+4, r23	; 0x04
    2b98:	0f 90       	pop	r0
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	08 95       	ret

00002b9e <vTaskInternalSetTimeOutState>:
    2b9e:	20 91 8a 15 	lds	r18, 0x158A	; 0x80158a <xNumOfOverflows>
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	20 83       	st	Z, r18
    2ba6:	40 91 92 15 	lds	r20, 0x1592	; 0x801592 <xTickCount>
    2baa:	50 91 93 15 	lds	r21, 0x1593	; 0x801593 <xTickCount+0x1>
    2bae:	60 91 94 15 	lds	r22, 0x1594	; 0x801594 <xTickCount+0x2>
    2bb2:	70 91 95 15 	lds	r23, 0x1595	; 0x801595 <xTickCount+0x3>
    2bb6:	41 83       	std	Z+1, r20	; 0x01
    2bb8:	52 83       	std	Z+2, r21	; 0x02
    2bba:	63 83       	std	Z+3, r22	; 0x03
    2bbc:	74 83       	std	Z+4, r23	; 0x04
    2bbe:	08 95       	ret

00002bc0 <xTaskCheckForTimeOut>:
    2bc0:	8f 92       	push	r8
    2bc2:	9f 92       	push	r9
    2bc4:	af 92       	push	r10
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	fb 01       	movw	r30, r22
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	0f 92       	push	r0
    2be0:	c0 90 92 15 	lds	r12, 0x1592	; 0x801592 <xTickCount>
    2be4:	d0 90 93 15 	lds	r13, 0x1593	; 0x801593 <xTickCount+0x1>
    2be8:	e0 90 94 15 	lds	r14, 0x1594	; 0x801594 <xTickCount+0x2>
    2bec:	f0 90 95 15 	lds	r15, 0x1595	; 0x801595 <xTickCount+0x3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	11 96       	adiw	r26, 0x01	; 1
    2bf4:	0d 91       	ld	r16, X+
    2bf6:	1d 91       	ld	r17, X+
    2bf8:	2d 91       	ld	r18, X+
    2bfa:	3c 91       	ld	r19, X
    2bfc:	14 97       	sbiw	r26, 0x04	; 4
    2bfe:	46 01       	movw	r8, r12
    2c00:	57 01       	movw	r10, r14
    2c02:	80 1a       	sub	r8, r16
    2c04:	91 0a       	sbc	r9, r17
    2c06:	a2 0a       	sbc	r10, r18
    2c08:	b3 0a       	sbc	r11, r19
    2c0a:	40 81       	ld	r20, Z
    2c0c:	51 81       	ldd	r21, Z+1	; 0x01
    2c0e:	62 81       	ldd	r22, Z+2	; 0x02
    2c10:	73 81       	ldd	r23, Z+3	; 0x03
    2c12:	4f 3f       	cpi	r20, 0xFF	; 255
    2c14:	bf ef       	ldi	r27, 0xFF	; 255
    2c16:	5b 07       	cpc	r21, r27
    2c18:	6b 07       	cpc	r22, r27
    2c1a:	7b 07       	cpc	r23, r27
    2c1c:	39 f1       	breq	.+78     	; 0x2c6c <xTaskCheckForTimeOut+0xac>
    2c1e:	ec 01       	movw	r28, r24
    2c20:	b8 81       	ld	r27, Y
    2c22:	a0 91 8a 15 	lds	r26, 0x158A	; 0x80158a <xNumOfOverflows>
    2c26:	ba 17       	cp	r27, r26
    2c28:	59 f0       	breq	.+22     	; 0x2c40 <xTaskCheckForTimeOut+0x80>
    2c2a:	c0 16       	cp	r12, r16
    2c2c:	d1 06       	cpc	r13, r17
    2c2e:	e2 06       	cpc	r14, r18
    2c30:	f3 06       	cpc	r15, r19
    2c32:	30 f0       	brcs	.+12     	; 0x2c40 <xTaskCheckForTimeOut+0x80>
    2c34:	10 82       	st	Z, r1
    2c36:	11 82       	std	Z+1, r1	; 0x01
    2c38:	12 82       	std	Z+2, r1	; 0x02
    2c3a:	13 82       	std	Z+3, r1	; 0x03
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	17 c0       	rjmp	.+46     	; 0x2c6e <xTaskCheckForTimeOut+0xae>
    2c40:	84 16       	cp	r8, r20
    2c42:	95 06       	cpc	r9, r21
    2c44:	a6 06       	cpc	r10, r22
    2c46:	b7 06       	cpc	r11, r23
    2c48:	58 f4       	brcc	.+22     	; 0x2c60 <xTaskCheckForTimeOut+0xa0>
    2c4a:	48 19       	sub	r20, r8
    2c4c:	59 09       	sbc	r21, r9
    2c4e:	6a 09       	sbc	r22, r10
    2c50:	7b 09       	sbc	r23, r11
    2c52:	40 83       	st	Z, r20
    2c54:	51 83       	std	Z+1, r21	; 0x01
    2c56:	62 83       	std	Z+2, r22	; 0x02
    2c58:	73 83       	std	Z+3, r23	; 0x03
    2c5a:	a1 df       	rcall	.-190    	; 0x2b9e <vTaskInternalSetTimeOutState>
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	07 c0       	rjmp	.+14     	; 0x2c6e <xTaskCheckForTimeOut+0xae>
    2c60:	10 82       	st	Z, r1
    2c62:	11 82       	std	Z+1, r1	; 0x01
    2c64:	12 82       	std	Z+2, r1	; 0x02
    2c66:	13 82       	std	Z+3, r1	; 0x03
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <xTaskCheckForTimeOut+0xae>
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	bf 90       	pop	r11
    2c84:	af 90       	pop	r10
    2c86:	9f 90       	pop	r9
    2c88:	8f 90       	pop	r8
    2c8a:	08 95       	ret

00002c8c <vTaskMissedYield>:
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <xYieldPending>
    2c92:	08 95       	ret

00002c94 <xTaskGetCurrentTaskHandle>:
    2c94:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    2c98:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2c9c:	08 95       	ret

00002c9e <xTaskGetSchedulerState>:
    2c9e:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <xSchedulerRunning>
    2ca2:	88 23       	and	r24, r24
    2ca4:	31 f0       	breq	.+12     	; 0x2cb2 <xTaskGetSchedulerState+0x14>
    2ca6:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <uxSchedulerSuspended>
    2caa:	81 11       	cpse	r24, r1
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <xTaskGetSchedulerState+0x18>
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	08 95       	ret
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	08 95       	ret
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	08 95       	ret

00002cba <xTaskPriorityInherit>:
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	89 2b       	or	r24, r25
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <xTaskPriorityInherit+0x10>
    2cc8:	77 c0       	rjmp	.+238    	; 0x2db8 <xTaskPriorityInherit+0xfe>
    2cca:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ccc:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    2cd0:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2cd4:	5a 96       	adiw	r26, 0x1a	; 26
    2cd6:	9c 91       	ld	r25, X
    2cd8:	89 17       	cp	r24, r25
    2cda:	08 f0       	brcs	.+2      	; 0x2cde <xTaskPriorityInherit+0x24>
    2cdc:	63 c0       	rjmp	.+198    	; 0x2da4 <xTaskPriorityInherit+0xea>
    2cde:	46 85       	ldd	r20, Z+14	; 0x0e
    2ce0:	57 85       	ldd	r21, Z+15	; 0x0f
    2ce2:	60 89       	ldd	r22, Z+16	; 0x10
    2ce4:	71 89       	ldd	r23, Z+17	; 0x11
    2ce6:	77 23       	and	r23, r23
    2ce8:	94 f0       	brlt	.+36     	; 0x2d0e <xTaskPriorityInherit+0x54>
    2cea:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    2cee:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2cf2:	5a 96       	adiw	r26, 0x1a	; 26
    2cf4:	9c 91       	ld	r25, X
    2cf6:	4a e0       	ldi	r20, 0x0A	; 10
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	49 1b       	sub	r20, r25
    2d00:	51 09       	sbc	r21, r1
    2d02:	61 09       	sbc	r22, r1
    2d04:	71 09       	sbc	r23, r1
    2d06:	46 87       	std	Z+14, r20	; 0x0e
    2d08:	57 87       	std	Z+15, r21	; 0x0f
    2d0a:	60 8b       	std	Z+16, r22	; 0x10
    2d0c:	71 8b       	std	Z+17, r23	; 0x11
    2d0e:	24 85       	ldd	r18, Z+12	; 0x0c
    2d10:	35 85       	ldd	r19, Z+13	; 0x0d
    2d12:	4b e0       	ldi	r20, 0x0B	; 11
    2d14:	84 9f       	mul	r24, r20
    2d16:	c0 01       	movw	r24, r0
    2d18:	11 24       	eor	r1, r1
    2d1a:	8d 52       	subi	r24, 0x2D	; 45
    2d1c:	9a 4e       	sbci	r25, 0xEA	; 234
    2d1e:	28 17       	cp	r18, r24
    2d20:	39 07       	cpc	r19, r25
    2d22:	b9 f5       	brne	.+110    	; 0x2d92 <xTaskPriorityInherit+0xd8>
    2d24:	ef 01       	movw	r28, r30
    2d26:	8f 01       	movw	r16, r30
    2d28:	0e 5f       	subi	r16, 0xFE	; 254
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
    2d32:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2d36:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2d3a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d3c:	ea 8f       	std	Y+26, r30	; 0x1a
    2d3e:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    2d42:	8e 17       	cp	r24, r30
    2d44:	10 f4       	brcc	.+4      	; 0x2d4a <xTaskPriorityInherit+0x90>
    2d46:	e0 93 91 15 	sts	0x1591, r30	; 0x801591 <uxTopReadyPriority>
    2d4a:	8b e0       	ldi	r24, 0x0B	; 11
    2d4c:	8e 9f       	mul	r24, r30
    2d4e:	f0 01       	movw	r30, r0
    2d50:	11 24       	eor	r1, r1
    2d52:	ed 52       	subi	r30, 0x2D	; 45
    2d54:	fa 4e       	sbci	r31, 0xEA	; 234
    2d56:	01 80       	ldd	r0, Z+1	; 0x01
    2d58:	f2 81       	ldd	r31, Z+2	; 0x02
    2d5a:	e0 2d       	mov	r30, r0
    2d5c:	ff 83       	std	Y+7, r31	; 0x07
    2d5e:	ee 83       	std	Y+6, r30	; 0x06
    2d60:	26 81       	ldd	r18, Z+6	; 0x06
    2d62:	37 81       	ldd	r19, Z+7	; 0x07
    2d64:	39 87       	std	Y+9, r19	; 0x09
    2d66:	28 87       	std	Y+8, r18	; 0x08
    2d68:	a6 81       	ldd	r26, Z+6	; 0x06
    2d6a:	b7 81       	ldd	r27, Z+7	; 0x07
    2d6c:	15 96       	adiw	r26, 0x05	; 5
    2d6e:	1c 93       	st	X, r17
    2d70:	0e 93       	st	-X, r16
    2d72:	14 97       	sbiw	r26, 0x04	; 4
    2d74:	17 83       	std	Z+7, r17	; 0x07
    2d76:	06 83       	std	Z+6, r16	; 0x06
    2d78:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d7a:	8e 9f       	mul	r24, r30
    2d7c:	f0 01       	movw	r30, r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	ed 52       	subi	r30, 0x2D	; 45
    2d82:	fa 4e       	sbci	r31, 0xEA	; 234
    2d84:	fd 87       	std	Y+13, r31	; 0x0d
    2d86:	ec 87       	std	Y+12, r30	; 0x0c
    2d88:	80 81       	ld	r24, Z
    2d8a:	8f 5f       	subi	r24, 0xFF	; 255
    2d8c:	80 83       	st	Z, r24
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	16 c0       	rjmp	.+44     	; 0x2dbe <xTaskPriorityInherit+0x104>
    2d92:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    2d96:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2d9a:	5a 96       	adiw	r26, 0x1a	; 26
    2d9c:	8c 91       	ld	r24, X
    2d9e:	82 8f       	std	Z+26, r24	; 0x1a
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	0d c0       	rjmp	.+26     	; 0x2dbe <xTaskPriorityInherit+0x104>
    2da4:	95 a5       	ldd	r25, Z+45	; 0x2d
    2da6:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2daa:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2dae:	82 8d       	ldd	r24, Z+26	; 0x1a
    2db0:	98 17       	cp	r25, r24
    2db2:	20 f0       	brcs	.+8      	; 0x2dbc <xTaskPriorityInherit+0x102>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	03 c0       	rjmp	.+6      	; 0x2dbe <xTaskPriorityInherit+0x104>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <xTaskPriorityInherit+0x104>
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <xTaskPriorityDisinherit>:
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	89 2b       	or	r24, r25
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <xTaskPriorityDisinherit+0x10>
    2dd6:	49 c0       	rjmp	.+146    	; 0x2e6a <xTaskPriorityDisinherit+0xa2>
    2dd8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2dda:	81 50       	subi	r24, 0x01	; 1
    2ddc:	86 a7       	std	Z+46, r24	; 0x2e
    2dde:	22 8d       	ldd	r18, Z+26	; 0x1a
    2de0:	95 a5       	ldd	r25, Z+45	; 0x2d
    2de2:	29 17       	cp	r18, r25
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <xTaskPriorityDisinherit+0x20>
    2de6:	43 c0       	rjmp	.+134    	; 0x2e6e <xTaskPriorityDisinherit+0xa6>
    2de8:	81 11       	cpse	r24, r1
    2dea:	43 c0       	rjmp	.+134    	; 0x2e72 <xTaskPriorityDisinherit+0xaa>
    2dec:	ef 01       	movw	r28, r30
    2dee:	8f 01       	movw	r16, r30
    2df0:	0e 5f       	subi	r16, 0xFE	; 254
    2df2:	1f 4f       	sbci	r17, 0xFF	; 255
    2df4:	c8 01       	movw	r24, r16
    2df6:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
    2dfa:	ed a5       	ldd	r30, Y+45	; 0x2d
    2dfc:	ea 8f       	std	Y+26, r30	; 0x1a
    2dfe:	8a e0       	ldi	r24, 0x0A	; 10
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	8e 1b       	sub	r24, r30
    2e08:	91 09       	sbc	r25, r1
    2e0a:	a1 09       	sbc	r26, r1
    2e0c:	b1 09       	sbc	r27, r1
    2e0e:	8e 87       	std	Y+14, r24	; 0x0e
    2e10:	9f 87       	std	Y+15, r25	; 0x0f
    2e12:	a8 8b       	std	Y+16, r26	; 0x10
    2e14:	b9 8b       	std	Y+17, r27	; 0x11
    2e16:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    2e1a:	8e 17       	cp	r24, r30
    2e1c:	10 f4       	brcc	.+4      	; 0x2e22 <xTaskPriorityDisinherit+0x5a>
    2e1e:	e0 93 91 15 	sts	0x1591, r30	; 0x801591 <uxTopReadyPriority>
    2e22:	8b e0       	ldi	r24, 0x0B	; 11
    2e24:	8e 9f       	mul	r24, r30
    2e26:	f0 01       	movw	r30, r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	ed 52       	subi	r30, 0x2D	; 45
    2e2c:	fa 4e       	sbci	r31, 0xEA	; 234
    2e2e:	01 80       	ldd	r0, Z+1	; 0x01
    2e30:	f2 81       	ldd	r31, Z+2	; 0x02
    2e32:	e0 2d       	mov	r30, r0
    2e34:	ff 83       	std	Y+7, r31	; 0x07
    2e36:	ee 83       	std	Y+6, r30	; 0x06
    2e38:	26 81       	ldd	r18, Z+6	; 0x06
    2e3a:	37 81       	ldd	r19, Z+7	; 0x07
    2e3c:	39 87       	std	Y+9, r19	; 0x09
    2e3e:	28 87       	std	Y+8, r18	; 0x08
    2e40:	a6 81       	ldd	r26, Z+6	; 0x06
    2e42:	b7 81       	ldd	r27, Z+7	; 0x07
    2e44:	15 96       	adiw	r26, 0x05	; 5
    2e46:	1c 93       	st	X, r17
    2e48:	0e 93       	st	-X, r16
    2e4a:	14 97       	sbiw	r26, 0x04	; 4
    2e4c:	17 83       	std	Z+7, r17	; 0x07
    2e4e:	06 83       	std	Z+6, r16	; 0x06
    2e50:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e52:	8e 9f       	mul	r24, r30
    2e54:	f0 01       	movw	r30, r0
    2e56:	11 24       	eor	r1, r1
    2e58:	ed 52       	subi	r30, 0x2D	; 45
    2e5a:	fa 4e       	sbci	r31, 0xEA	; 234
    2e5c:	fd 87       	std	Y+13, r31	; 0x0d
    2e5e:	ec 87       	std	Y+12, r30	; 0x0c
    2e60:	80 81       	ld	r24, Z
    2e62:	8f 5f       	subi	r24, 0xFF	; 255
    2e64:	80 83       	st	Z, r24
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	05 c0       	rjmp	.+10     	; 0x2e74 <xTaskPriorityDisinherit+0xac>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	03 c0       	rjmp	.+6      	; 0x2e74 <xTaskPriorityDisinherit+0xac>
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <xTaskPriorityDisinherit+0xac>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	08 95       	ret

00002e7e <vTaskPriorityDisinheritAfterTimeout>:
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	fc 01       	movw	r30, r24
    2e88:	89 2b       	or	r24, r25
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e8c:	5a c0       	rjmp	.+180    	; 0x2f42 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e8e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2e90:	86 17       	cp	r24, r22
    2e92:	08 f4       	brcc	.+2      	; 0x2e96 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e94:	86 2f       	mov	r24, r22
    2e96:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e98:	89 17       	cp	r24, r25
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <vTaskPriorityDisinheritAfterTimeout+0x20>
    2e9c:	52 c0       	rjmp	.+164    	; 0x2f42 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e9e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ea0:	21 30       	cpi	r18, 0x01	; 1
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2ea4:	4e c0       	rjmp	.+156    	; 0x2f42 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ea6:	82 8f       	std	Z+26, r24	; 0x1a
    2ea8:	46 85       	ldd	r20, Z+14	; 0x0e
    2eaa:	57 85       	ldd	r21, Z+15	; 0x0f
    2eac:	60 89       	ldd	r22, Z+16	; 0x10
    2eae:	71 89       	ldd	r23, Z+17	; 0x11
    2eb0:	77 23       	and	r23, r23
    2eb2:	64 f0       	brlt	.+24     	; 0x2ecc <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2eb4:	4a e0       	ldi	r20, 0x0A	; 10
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	48 1b       	sub	r20, r24
    2ebe:	51 09       	sbc	r21, r1
    2ec0:	61 09       	sbc	r22, r1
    2ec2:	71 09       	sbc	r23, r1
    2ec4:	46 87       	std	Z+14, r20	; 0x0e
    2ec6:	57 87       	std	Z+15, r21	; 0x0f
    2ec8:	60 8b       	std	Z+16, r22	; 0x10
    2eca:	71 8b       	std	Z+17, r23	; 0x11
    2ecc:	24 85       	ldd	r18, Z+12	; 0x0c
    2ece:	35 85       	ldd	r19, Z+13	; 0x0d
    2ed0:	4b e0       	ldi	r20, 0x0B	; 11
    2ed2:	94 9f       	mul	r25, r20
    2ed4:	c0 01       	movw	r24, r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	8d 52       	subi	r24, 0x2D	; 45
    2eda:	9a 4e       	sbci	r25, 0xEA	; 234
    2edc:	28 17       	cp	r18, r24
    2ede:	39 07       	cpc	r19, r25
    2ee0:	81 f5       	brne	.+96     	; 0x2f42 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ee2:	ef 01       	movw	r28, r30
    2ee4:	8f 01       	movw	r16, r30
    2ee6:	0e 5f       	subi	r16, 0xFE	; 254
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	c8 01       	movw	r24, r16
    2eec:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
    2ef0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ef2:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    2ef6:	8e 17       	cp	r24, r30
    2ef8:	10 f4       	brcc	.+4      	; 0x2efe <vTaskPriorityDisinheritAfterTimeout+0x80>
    2efa:	e0 93 91 15 	sts	0x1591, r30	; 0x801591 <uxTopReadyPriority>
    2efe:	8b e0       	ldi	r24, 0x0B	; 11
    2f00:	8e 9f       	mul	r24, r30
    2f02:	f0 01       	movw	r30, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	ed 52       	subi	r30, 0x2D	; 45
    2f08:	fa 4e       	sbci	r31, 0xEA	; 234
    2f0a:	01 80       	ldd	r0, Z+1	; 0x01
    2f0c:	f2 81       	ldd	r31, Z+2	; 0x02
    2f0e:	e0 2d       	mov	r30, r0
    2f10:	ff 83       	std	Y+7, r31	; 0x07
    2f12:	ee 83       	std	Y+6, r30	; 0x06
    2f14:	26 81       	ldd	r18, Z+6	; 0x06
    2f16:	37 81       	ldd	r19, Z+7	; 0x07
    2f18:	39 87       	std	Y+9, r19	; 0x09
    2f1a:	28 87       	std	Y+8, r18	; 0x08
    2f1c:	a6 81       	ldd	r26, Z+6	; 0x06
    2f1e:	b7 81       	ldd	r27, Z+7	; 0x07
    2f20:	15 96       	adiw	r26, 0x05	; 5
    2f22:	1c 93       	st	X, r17
    2f24:	0e 93       	st	-X, r16
    2f26:	14 97       	sbiw	r26, 0x04	; 4
    2f28:	17 83       	std	Z+7, r17	; 0x07
    2f2a:	06 83       	std	Z+6, r16	; 0x06
    2f2c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f2e:	8e 9f       	mul	r24, r30
    2f30:	f0 01       	movw	r30, r0
    2f32:	11 24       	eor	r1, r1
    2f34:	ed 52       	subi	r30, 0x2D	; 45
    2f36:	fa 4e       	sbci	r31, 0xEA	; 234
    2f38:	fd 87       	std	Y+13, r31	; 0x0d
    2f3a:	ec 87       	std	Y+12, r30	; 0x0c
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	80 83       	st	Z, r24
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	08 95       	ret

00002f4c <uxTaskResetEventItemValue>:
    2f4c:	cf 92       	push	r12
    2f4e:	df 92       	push	r13
    2f50:	ef 92       	push	r14
    2f52:	ff 92       	push	r15
    2f54:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2f58:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2f5c:	66 85       	ldd	r22, Z+14	; 0x0e
    2f5e:	77 85       	ldd	r23, Z+15	; 0x0f
    2f60:	80 89       	ldd	r24, Z+16	; 0x10
    2f62:	91 89       	ldd	r25, Z+17	; 0x11
    2f64:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2f68:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2f6c:	a0 91 41 16 	lds	r26, 0x1641	; 0x801641 <pxCurrentTCB>
    2f70:	b0 91 42 16 	lds	r27, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2f74:	5a 96       	adiw	r26, 0x1a	; 26
    2f76:	2c 91       	ld	r18, X
    2f78:	0f 2e       	mov	r0, r31
    2f7a:	fa e0       	ldi	r31, 0x0A	; 10
    2f7c:	cf 2e       	mov	r12, r31
    2f7e:	d1 2c       	mov	r13, r1
    2f80:	e1 2c       	mov	r14, r1
    2f82:	f1 2c       	mov	r15, r1
    2f84:	f0 2d       	mov	r31, r0
    2f86:	c2 1a       	sub	r12, r18
    2f88:	d1 08       	sbc	r13, r1
    2f8a:	e1 08       	sbc	r14, r1
    2f8c:	f1 08       	sbc	r15, r1
    2f8e:	c6 86       	std	Z+14, r12	; 0x0e
    2f90:	d7 86       	std	Z+15, r13	; 0x0f
    2f92:	e0 8a       	std	Z+16, r14	; 0x10
    2f94:	f1 8a       	std	Z+17, r15	; 0x11
    2f96:	ff 90       	pop	r15
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	cf 90       	pop	r12
    2f9e:	08 95       	ret

00002fa0 <pvTaskIncrementMutexHeldCount>:
    2fa0:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    2fa4:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2fa8:	89 2b       	or	r24, r25
    2faa:	39 f0       	breq	.+14     	; 0x2fba <pvTaskIncrementMutexHeldCount+0x1a>
    2fac:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2fb0:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2fb4:	86 a5       	ldd	r24, Z+46	; 0x2e
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	86 a7       	std	Z+46, r24	; 0x2e
    2fba:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    2fbe:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2fc2:	08 95       	ret

00002fc4 <xTaskGenericNotifyWait>:
    2fc4:	4f 92       	push	r4
    2fc6:	5f 92       	push	r5
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	af 92       	push	r10
    2fce:	bf 92       	push	r11
    2fd0:	cf 92       	push	r12
    2fd2:	df 92       	push	r13
    2fd4:	ef 92       	push	r14
    2fd6:	ff 92       	push	r15
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	28 01       	movw	r4, r16
    2fe2:	39 01       	movw	r6, r18
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	0f 92       	push	r0
    2fea:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    2fee:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    2ff2:	c8 2f       	mov	r28, r24
    2ff4:	d0 e0       	ldi	r29, 0x00	; 0
    2ff6:	ec 0f       	add	r30, r28
    2ff8:	fd 1f       	adc	r31, r29
    2ffa:	83 a9       	ldd	r24, Z+51	; 0x33
    2ffc:	82 30       	cpi	r24, 0x02	; 2
    2ffe:	79 f1       	breq	.+94     	; 0x305e <xTaskGenericNotifyWait+0x9a>
    3000:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    3004:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    3008:	ce 01       	movw	r24, r28
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	e8 0f       	add	r30, r24
    3014:	f9 1f       	adc	r31, r25
    3016:	87 a5       	ldd	r24, Z+47	; 0x2f
    3018:	90 a9       	ldd	r25, Z+48	; 0x30
    301a:	a1 a9       	ldd	r26, Z+49	; 0x31
    301c:	b2 a9       	ldd	r27, Z+50	; 0x32
    301e:	40 95       	com	r20
    3020:	50 95       	com	r21
    3022:	60 95       	com	r22
    3024:	70 95       	com	r23
    3026:	48 23       	and	r20, r24
    3028:	59 23       	and	r21, r25
    302a:	6a 23       	and	r22, r26
    302c:	7b 23       	and	r23, r27
    302e:	47 a7       	std	Z+47, r20	; 0x2f
    3030:	50 ab       	std	Z+48, r21	; 0x30
    3032:	61 ab       	std	Z+49, r22	; 0x31
    3034:	72 ab       	std	Z+50, r23	; 0x32
    3036:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    303a:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    303e:	ec 0f       	add	r30, r28
    3040:	fd 1f       	adc	r31, r29
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	83 ab       	std	Z+51, r24	; 0x33
    3046:	a1 14       	cp	r10, r1
    3048:	b1 04       	cpc	r11, r1
    304a:	c1 04       	cpc	r12, r1
    304c:	d1 04       	cpc	r13, r1
    304e:	39 f0       	breq	.+14     	; 0x305e <xTaskGenericNotifyWait+0x9a>
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	c6 01       	movw	r24, r12
    3054:	b5 01       	movw	r22, r10
    3056:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <prvAddCurrentTaskToDelayedList>
    305a:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    305e:	0f 90       	pop	r0
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	0f 92       	push	r0
    3068:	e1 14       	cp	r14, r1
    306a:	f1 04       	cpc	r15, r1
    306c:	a1 f0       	breq	.+40     	; 0x3096 <xTaskGenericNotifyWait+0xd2>
    306e:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    3072:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    3076:	ce 01       	movw	r24, r28
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	e8 0f       	add	r30, r24
    3082:	f9 1f       	adc	r31, r25
    3084:	87 a5       	ldd	r24, Z+47	; 0x2f
    3086:	90 a9       	ldd	r25, Z+48	; 0x30
    3088:	a1 a9       	ldd	r26, Z+49	; 0x31
    308a:	b2 a9       	ldd	r27, Z+50	; 0x32
    308c:	f7 01       	movw	r30, r14
    308e:	80 83       	st	Z, r24
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	a2 83       	std	Z+2, r26	; 0x02
    3094:	b3 83       	std	Z+3, r27	; 0x03
    3096:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    309a:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    309e:	ec 0f       	add	r30, r28
    30a0:	fd 1f       	adc	r31, r29
    30a2:	83 a9       	ldd	r24, Z+51	; 0x33
    30a4:	82 30       	cpi	r24, 0x02	; 2
    30a6:	e9 f4       	brne	.+58     	; 0x30e2 <xTaskGenericNotifyWait+0x11e>
    30a8:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    30ac:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    30b0:	ce 01       	movw	r24, r28
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	e8 0f       	add	r30, r24
    30bc:	f9 1f       	adc	r31, r25
    30be:	87 a5       	ldd	r24, Z+47	; 0x2f
    30c0:	90 a9       	ldd	r25, Z+48	; 0x30
    30c2:	a1 a9       	ldd	r26, Z+49	; 0x31
    30c4:	b2 a9       	ldd	r27, Z+50	; 0x32
    30c6:	40 94       	com	r4
    30c8:	50 94       	com	r5
    30ca:	60 94       	com	r6
    30cc:	70 94       	com	r7
    30ce:	48 22       	and	r4, r24
    30d0:	59 22       	and	r5, r25
    30d2:	6a 22       	and	r6, r26
    30d4:	7b 22       	and	r7, r27
    30d6:	47 a6       	std	Z+47, r4	; 0x2f
    30d8:	50 aa       	std	Z+48, r5	; 0x30
    30da:	61 aa       	std	Z+49, r6	; 0x31
    30dc:	72 aa       	std	Z+50, r7	; 0x32
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <xTaskGenericNotifyWait+0x120>
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	20 91 41 16 	lds	r18, 0x1641	; 0x801641 <pxCurrentTCB>
    30e8:	30 91 42 16 	lds	r19, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    30ec:	c2 0f       	add	r28, r18
    30ee:	d3 1f       	adc	r29, r19
    30f0:	1b aa       	std	Y+51, r1	; 0x33
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	df 90       	pop	r13
    3104:	cf 90       	pop	r12
    3106:	bf 90       	pop	r11
    3108:	af 90       	pop	r10
    310a:	7f 90       	pop	r7
    310c:	6f 90       	pop	r6
    310e:	5f 90       	pop	r5
    3110:	4f 90       	pop	r4
    3112:	08 95       	ret

00003114 <xTaskGenericNotify>:
    3114:	8f 92       	push	r8
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	dc 01       	movw	r26, r24
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	0f 92       	push	r0
    312e:	e1 14       	cp	r14, r1
    3130:	f1 04       	cpc	r15, r1
    3132:	89 f0       	breq	.+34     	; 0x3156 <xTaskGenericNotify+0x42>
    3134:	e6 2f       	mov	r30, r22
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	ee 0f       	add	r30, r30
    313a:	ff 1f       	adc	r31, r31
    313c:	ee 0f       	add	r30, r30
    313e:	ff 1f       	adc	r31, r31
    3140:	e8 0f       	add	r30, r24
    3142:	f9 1f       	adc	r31, r25
    3144:	87 a4       	ldd	r8, Z+47	; 0x2f
    3146:	90 a8       	ldd	r9, Z+48	; 0x30
    3148:	a1 a8       	ldd	r10, Z+49	; 0x31
    314a:	b2 a8       	ldd	r11, Z+50	; 0x32
    314c:	f7 01       	movw	r30, r14
    314e:	80 82       	st	Z, r8
    3150:	91 82       	std	Z+1, r9	; 0x01
    3152:	a2 82       	std	Z+2, r10	; 0x02
    3154:	b3 82       	std	Z+3, r11	; 0x03
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	fd 01       	movw	r30, r26
    315a:	e6 0f       	add	r30, r22
    315c:	f7 1f       	adc	r31, r23
    315e:	83 a9       	ldd	r24, Z+51	; 0x33
    3160:	92 e0       	ldi	r25, 0x02	; 2
    3162:	93 ab       	std	Z+51, r25	; 0x33
    3164:	02 30       	cpi	r16, 0x02	; 2
    3166:	01 f1       	breq	.+64     	; 0x31a8 <xTaskGenericNotify+0x94>
    3168:	18 f4       	brcc	.+6      	; 0x3170 <xTaskGenericNotify+0x5c>
    316a:	01 30       	cpi	r16, 0x01	; 1
    316c:	31 f0       	breq	.+12     	; 0x317a <xTaskGenericNotify+0x66>
    316e:	4d c0       	rjmp	.+154    	; 0x320a <xTaskGenericNotify+0xf6>
    3170:	03 30       	cpi	r16, 0x03	; 3
    3172:	79 f1       	breq	.+94     	; 0x31d2 <xTaskGenericNotify+0xbe>
    3174:	04 30       	cpi	r16, 0x04	; 4
    3176:	d1 f1       	breq	.+116    	; 0x31ec <xTaskGenericNotify+0xd8>
    3178:	48 c0       	rjmp	.+144    	; 0x320a <xTaskGenericNotify+0xf6>
    317a:	66 0f       	add	r22, r22
    317c:	77 1f       	adc	r23, r23
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	fd 01       	movw	r30, r26
    3184:	e6 0f       	add	r30, r22
    3186:	f7 1f       	adc	r31, r23
    3188:	87 a4       	ldd	r8, Z+47	; 0x2f
    318a:	90 a8       	ldd	r9, Z+48	; 0x30
    318c:	a1 a8       	ldd	r10, Z+49	; 0x31
    318e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3190:	ba 01       	movw	r22, r20
    3192:	a9 01       	movw	r20, r18
    3194:	48 29       	or	r20, r8
    3196:	59 29       	or	r21, r9
    3198:	6a 29       	or	r22, r10
    319a:	7b 29       	or	r23, r11
    319c:	47 a7       	std	Z+47, r20	; 0x2f
    319e:	50 ab       	std	Z+48, r21	; 0x30
    31a0:	61 ab       	std	Z+49, r22	; 0x31
    31a2:	72 ab       	std	Z+50, r23	; 0x32
    31a4:	01 e0       	ldi	r16, 0x01	; 1
    31a6:	34 c0       	rjmp	.+104    	; 0x3210 <xTaskGenericNotify+0xfc>
    31a8:	66 0f       	add	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	66 0f       	add	r22, r22
    31ae:	77 1f       	adc	r23, r23
    31b0:	fd 01       	movw	r30, r26
    31b2:	e6 0f       	add	r30, r22
    31b4:	f7 1f       	adc	r31, r23
    31b6:	47 a5       	ldd	r20, Z+47	; 0x2f
    31b8:	50 a9       	ldd	r21, Z+48	; 0x30
    31ba:	61 a9       	ldd	r22, Z+49	; 0x31
    31bc:	72 a9       	ldd	r23, Z+50	; 0x32
    31be:	4f 5f       	subi	r20, 0xFF	; 255
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	6f 4f       	sbci	r22, 0xFF	; 255
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	47 a7       	std	Z+47, r20	; 0x2f
    31c8:	50 ab       	std	Z+48, r21	; 0x30
    31ca:	61 ab       	std	Z+49, r22	; 0x31
    31cc:	72 ab       	std	Z+50, r23	; 0x32
    31ce:	01 e0       	ldi	r16, 0x01	; 1
    31d0:	1f c0       	rjmp	.+62     	; 0x3210 <xTaskGenericNotify+0xfc>
    31d2:	66 0f       	add	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	66 0f       	add	r22, r22
    31d8:	77 1f       	adc	r23, r23
    31da:	fd 01       	movw	r30, r26
    31dc:	e6 0f       	add	r30, r22
    31de:	f7 1f       	adc	r31, r23
    31e0:	27 a7       	std	Z+47, r18	; 0x2f
    31e2:	30 ab       	std	Z+48, r19	; 0x30
    31e4:	41 ab       	std	Z+49, r20	; 0x31
    31e6:	52 ab       	std	Z+50, r21	; 0x32
    31e8:	01 e0       	ldi	r16, 0x01	; 1
    31ea:	12 c0       	rjmp	.+36     	; 0x3210 <xTaskGenericNotify+0xfc>
    31ec:	82 30       	cpi	r24, 0x02	; 2
    31ee:	79 f0       	breq	.+30     	; 0x320e <xTaskGenericNotify+0xfa>
    31f0:	66 0f       	add	r22, r22
    31f2:	77 1f       	adc	r23, r23
    31f4:	66 0f       	add	r22, r22
    31f6:	77 1f       	adc	r23, r23
    31f8:	fd 01       	movw	r30, r26
    31fa:	e6 0f       	add	r30, r22
    31fc:	f7 1f       	adc	r31, r23
    31fe:	27 a7       	std	Z+47, r18	; 0x2f
    3200:	30 ab       	std	Z+48, r19	; 0x30
    3202:	41 ab       	std	Z+49, r20	; 0x31
    3204:	52 ab       	std	Z+50, r21	; 0x32
    3206:	01 e0       	ldi	r16, 0x01	; 1
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <xTaskGenericNotify+0xfc>
    320a:	01 e0       	ldi	r16, 0x01	; 1
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <xTaskGenericNotify+0xfc>
    320e:	00 e0       	ldi	r16, 0x00	; 0
    3210:	81 30       	cpi	r24, 0x01	; 1
    3212:	09 f0       	breq	.+2      	; 0x3216 <xTaskGenericNotify+0x102>
    3214:	69 c0       	rjmp	.+210    	; 0x32e8 <xTaskGenericNotify+0x1d4>
    3216:	1c 96       	adiw	r26, 0x0c	; 12
    3218:	ed 91       	ld	r30, X+
    321a:	fc 91       	ld	r31, X
    321c:	1d 97       	sbiw	r26, 0x0d	; 13
    321e:	16 96       	adiw	r26, 0x06	; 6
    3220:	cd 91       	ld	r28, X+
    3222:	dc 91       	ld	r29, X
    3224:	17 97       	sbiw	r26, 0x07	; 7
    3226:	18 96       	adiw	r26, 0x08	; 8
    3228:	8d 91       	ld	r24, X+
    322a:	9c 91       	ld	r25, X
    322c:	19 97       	sbiw	r26, 0x09	; 9
    322e:	9f 83       	std	Y+7, r25	; 0x07
    3230:	8e 83       	std	Y+6, r24	; 0x06
    3232:	18 96       	adiw	r26, 0x08	; 8
    3234:	cd 91       	ld	r28, X+
    3236:	dc 91       	ld	r29, X
    3238:	19 97       	sbiw	r26, 0x09	; 9
    323a:	16 96       	adiw	r26, 0x06	; 6
    323c:	8d 91       	ld	r24, X+
    323e:	9c 91       	ld	r25, X
    3240:	17 97       	sbiw	r26, 0x07	; 7
    3242:	9d 83       	std	Y+5, r25	; 0x05
    3244:	8c 83       	std	Y+4, r24	; 0x04
    3246:	81 81       	ldd	r24, Z+1	; 0x01
    3248:	92 81       	ldd	r25, Z+2	; 0x02
    324a:	9d 01       	movw	r18, r26
    324c:	2e 5f       	subi	r18, 0xFE	; 254
    324e:	3f 4f       	sbci	r19, 0xFF	; 255
    3250:	82 17       	cp	r24, r18
    3252:	93 07       	cpc	r25, r19
    3254:	31 f4       	brne	.+12     	; 0x3262 <xTaskGenericNotify+0x14e>
    3256:	18 96       	adiw	r26, 0x08	; 8
    3258:	8d 91       	ld	r24, X+
    325a:	9c 91       	ld	r25, X
    325c:	19 97       	sbiw	r26, 0x09	; 9
    325e:	92 83       	std	Z+2, r25	; 0x02
    3260:	81 83       	std	Z+1, r24	; 0x01
    3262:	1d 96       	adiw	r26, 0x0d	; 13
    3264:	1c 92       	st	X, r1
    3266:	1e 92       	st	-X, r1
    3268:	1c 97       	sbiw	r26, 0x0c	; 12
    326a:	80 81       	ld	r24, Z
    326c:	81 50       	subi	r24, 0x01	; 1
    326e:	80 83       	st	Z, r24
    3270:	5a 96       	adiw	r26, 0x1a	; 26
    3272:	ec 91       	ld	r30, X
    3274:	5a 97       	sbiw	r26, 0x1a	; 26
    3276:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <uxTopReadyPriority>
    327a:	8e 17       	cp	r24, r30
    327c:	10 f4       	brcc	.+4      	; 0x3282 <xTaskGenericNotify+0x16e>
    327e:	e0 93 91 15 	sts	0x1591, r30	; 0x801591 <uxTopReadyPriority>
    3282:	8b e0       	ldi	r24, 0x0B	; 11
    3284:	8e 9f       	mul	r24, r30
    3286:	f0 01       	movw	r30, r0
    3288:	11 24       	eor	r1, r1
    328a:	ed 52       	subi	r30, 0x2D	; 45
    328c:	fa 4e       	sbci	r31, 0xEA	; 234
    328e:	01 80       	ldd	r0, Z+1	; 0x01
    3290:	f2 81       	ldd	r31, Z+2	; 0x02
    3292:	e0 2d       	mov	r30, r0
    3294:	17 96       	adiw	r26, 0x07	; 7
    3296:	fc 93       	st	X, r31
    3298:	ee 93       	st	-X, r30
    329a:	16 97       	sbiw	r26, 0x06	; 6
    329c:	46 81       	ldd	r20, Z+6	; 0x06
    329e:	57 81       	ldd	r21, Z+7	; 0x07
    32a0:	19 96       	adiw	r26, 0x09	; 9
    32a2:	5c 93       	st	X, r21
    32a4:	4e 93       	st	-X, r20
    32a6:	18 97       	sbiw	r26, 0x08	; 8
    32a8:	c6 81       	ldd	r28, Z+6	; 0x06
    32aa:	d7 81       	ldd	r29, Z+7	; 0x07
    32ac:	3d 83       	std	Y+5, r19	; 0x05
    32ae:	2c 83       	std	Y+4, r18	; 0x04
    32b0:	37 83       	std	Z+7, r19	; 0x07
    32b2:	26 83       	std	Z+6, r18	; 0x06
    32b4:	5a 96       	adiw	r26, 0x1a	; 26
    32b6:	ec 91       	ld	r30, X
    32b8:	5a 97       	sbiw	r26, 0x1a	; 26
    32ba:	8e 9f       	mul	r24, r30
    32bc:	f0 01       	movw	r30, r0
    32be:	11 24       	eor	r1, r1
    32c0:	ed 52       	subi	r30, 0x2D	; 45
    32c2:	fa 4e       	sbci	r31, 0xEA	; 234
    32c4:	1d 96       	adiw	r26, 0x0d	; 13
    32c6:	fc 93       	st	X, r31
    32c8:	ee 93       	st	-X, r30
    32ca:	1c 97       	sbiw	r26, 0x0c	; 12
    32cc:	80 81       	ld	r24, Z
    32ce:	8f 5f       	subi	r24, 0xFF	; 255
    32d0:	80 83       	st	Z, r24
    32d2:	5a 96       	adiw	r26, 0x1a	; 26
    32d4:	9c 91       	ld	r25, X
    32d6:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    32da:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    32de:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e0:	89 17       	cp	r24, r25
    32e2:	10 f4       	brcc	.+4      	; 0x32e8 <xTaskGenericNotify+0x1d4>
    32e4:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    32e8:	0f 90       	pop	r0
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	80 2f       	mov	r24, r16
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	bf 90       	pop	r11
    32fa:	af 90       	pop	r10
    32fc:	9f 90       	pop	r9
    32fe:	8f 90       	pop	r8
    3300:	08 95       	ret

00003302 <xTaskGenericNotifyFromISR>:
    3302:	8f 92       	push	r8
    3304:	9f 92       	push	r9
    3306:	af 92       	push	r10
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	0f 93       	push	r16
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	dc 01       	movw	r26, r24
    331a:	e1 14       	cp	r14, r1
    331c:	f1 04       	cpc	r15, r1
    331e:	89 f0       	breq	.+34     	; 0x3342 <xTaskGenericNotifyFromISR+0x40>
    3320:	e6 2f       	mov	r30, r22
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	ee 0f       	add	r30, r30
    3326:	ff 1f       	adc	r31, r31
    3328:	ee 0f       	add	r30, r30
    332a:	ff 1f       	adc	r31, r31
    332c:	e8 0f       	add	r30, r24
    332e:	f9 1f       	adc	r31, r25
    3330:	87 a4       	ldd	r8, Z+47	; 0x2f
    3332:	90 a8       	ldd	r9, Z+48	; 0x30
    3334:	a1 a8       	ldd	r10, Z+49	; 0x31
    3336:	b2 a8       	ldd	r11, Z+50	; 0x32
    3338:	f7 01       	movw	r30, r14
    333a:	80 82       	st	Z, r8
    333c:	91 82       	std	Z+1, r9	; 0x01
    333e:	a2 82       	std	Z+2, r10	; 0x02
    3340:	b3 82       	std	Z+3, r11	; 0x03
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	fd 01       	movw	r30, r26
    3346:	e6 0f       	add	r30, r22
    3348:	f7 1f       	adc	r31, r23
    334a:	93 a9       	ldd	r25, Z+51	; 0x33
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	83 ab       	std	Z+51, r24	; 0x33
    3350:	02 30       	cpi	r16, 0x02	; 2
    3352:	01 f1       	breq	.+64     	; 0x3394 <xTaskGenericNotifyFromISR+0x92>
    3354:	18 f4       	brcc	.+6      	; 0x335c <xTaskGenericNotifyFromISR+0x5a>
    3356:	01 30       	cpi	r16, 0x01	; 1
    3358:	31 f0       	breq	.+12     	; 0x3366 <xTaskGenericNotifyFromISR+0x64>
    335a:	4d c0       	rjmp	.+154    	; 0x33f6 <xTaskGenericNotifyFromISR+0xf4>
    335c:	03 30       	cpi	r16, 0x03	; 3
    335e:	79 f1       	breq	.+94     	; 0x33be <xTaskGenericNotifyFromISR+0xbc>
    3360:	04 30       	cpi	r16, 0x04	; 4
    3362:	d1 f1       	breq	.+116    	; 0x33d8 <xTaskGenericNotifyFromISR+0xd6>
    3364:	48 c0       	rjmp	.+144    	; 0x33f6 <xTaskGenericNotifyFromISR+0xf4>
    3366:	66 0f       	add	r22, r22
    3368:	77 1f       	adc	r23, r23
    336a:	66 0f       	add	r22, r22
    336c:	77 1f       	adc	r23, r23
    336e:	fd 01       	movw	r30, r26
    3370:	e6 0f       	add	r30, r22
    3372:	f7 1f       	adc	r31, r23
    3374:	87 a4       	ldd	r8, Z+47	; 0x2f
    3376:	90 a8       	ldd	r9, Z+48	; 0x30
    3378:	a1 a8       	ldd	r10, Z+49	; 0x31
    337a:	b2 a8       	ldd	r11, Z+50	; 0x32
    337c:	ba 01       	movw	r22, r20
    337e:	a9 01       	movw	r20, r18
    3380:	48 29       	or	r20, r8
    3382:	59 29       	or	r21, r9
    3384:	6a 29       	or	r22, r10
    3386:	7b 29       	or	r23, r11
    3388:	47 a7       	std	Z+47, r20	; 0x2f
    338a:	50 ab       	std	Z+48, r21	; 0x30
    338c:	61 ab       	std	Z+49, r22	; 0x31
    338e:	72 ab       	std	Z+50, r23	; 0x32
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	34 c0       	rjmp	.+104    	; 0x33fc <xTaskGenericNotifyFromISR+0xfa>
    3394:	66 0f       	add	r22, r22
    3396:	77 1f       	adc	r23, r23
    3398:	66 0f       	add	r22, r22
    339a:	77 1f       	adc	r23, r23
    339c:	fd 01       	movw	r30, r26
    339e:	e6 0f       	add	r30, r22
    33a0:	f7 1f       	adc	r31, r23
    33a2:	47 a5       	ldd	r20, Z+47	; 0x2f
    33a4:	50 a9       	ldd	r21, Z+48	; 0x30
    33a6:	61 a9       	ldd	r22, Z+49	; 0x31
    33a8:	72 a9       	ldd	r23, Z+50	; 0x32
    33aa:	4f 5f       	subi	r20, 0xFF	; 255
    33ac:	5f 4f       	sbci	r21, 0xFF	; 255
    33ae:	6f 4f       	sbci	r22, 0xFF	; 255
    33b0:	7f 4f       	sbci	r23, 0xFF	; 255
    33b2:	47 a7       	std	Z+47, r20	; 0x2f
    33b4:	50 ab       	std	Z+48, r21	; 0x30
    33b6:	61 ab       	std	Z+49, r22	; 0x31
    33b8:	72 ab       	std	Z+50, r23	; 0x32
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	1f c0       	rjmp	.+62     	; 0x33fc <xTaskGenericNotifyFromISR+0xfa>
    33be:	66 0f       	add	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	66 0f       	add	r22, r22
    33c4:	77 1f       	adc	r23, r23
    33c6:	fd 01       	movw	r30, r26
    33c8:	e6 0f       	add	r30, r22
    33ca:	f7 1f       	adc	r31, r23
    33cc:	27 a7       	std	Z+47, r18	; 0x2f
    33ce:	30 ab       	std	Z+48, r19	; 0x30
    33d0:	41 ab       	std	Z+49, r20	; 0x31
    33d2:	52 ab       	std	Z+50, r21	; 0x32
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	12 c0       	rjmp	.+36     	; 0x33fc <xTaskGenericNotifyFromISR+0xfa>
    33d8:	92 30       	cpi	r25, 0x02	; 2
    33da:	79 f0       	breq	.+30     	; 0x33fa <xTaskGenericNotifyFromISR+0xf8>
    33dc:	66 0f       	add	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	66 0f       	add	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	fd 01       	movw	r30, r26
    33e6:	e6 0f       	add	r30, r22
    33e8:	f7 1f       	adc	r31, r23
    33ea:	27 a7       	std	Z+47, r18	; 0x2f
    33ec:	30 ab       	std	Z+48, r19	; 0x30
    33ee:	41 ab       	std	Z+49, r20	; 0x31
    33f0:	52 ab       	std	Z+50, r21	; 0x32
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	03 c0       	rjmp	.+6      	; 0x33fc <xTaskGenericNotifyFromISR+0xfa>
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	01 c0       	rjmp	.+2      	; 0x33fc <xTaskGenericNotifyFromISR+0xfa>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	91 30       	cpi	r25, 0x01	; 1
    33fe:	09 f0       	breq	.+2      	; 0x3402 <xTaskGenericNotifyFromISR+0x100>
    3400:	96 c0       	rjmp	.+300    	; 0x352e <xTaskGenericNotifyFromISR+0x22c>
    3402:	90 91 82 15 	lds	r25, 0x1582	; 0x801582 <uxSchedulerSuspended>
    3406:	91 11       	cpse	r25, r1
    3408:	5f c0       	rjmp	.+190    	; 0x34c8 <xTaskGenericNotifyFromISR+0x1c6>
    340a:	1c 96       	adiw	r26, 0x0c	; 12
    340c:	ed 91       	ld	r30, X+
    340e:	fc 91       	ld	r31, X
    3410:	1d 97       	sbiw	r26, 0x0d	; 13
    3412:	16 96       	adiw	r26, 0x06	; 6
    3414:	cd 91       	ld	r28, X+
    3416:	dc 91       	ld	r29, X
    3418:	17 97       	sbiw	r26, 0x07	; 7
    341a:	18 96       	adiw	r26, 0x08	; 8
    341c:	2d 91       	ld	r18, X+
    341e:	3c 91       	ld	r19, X
    3420:	19 97       	sbiw	r26, 0x09	; 9
    3422:	3f 83       	std	Y+7, r19	; 0x07
    3424:	2e 83       	std	Y+6, r18	; 0x06
    3426:	18 96       	adiw	r26, 0x08	; 8
    3428:	cd 91       	ld	r28, X+
    342a:	dc 91       	ld	r29, X
    342c:	19 97       	sbiw	r26, 0x09	; 9
    342e:	16 96       	adiw	r26, 0x06	; 6
    3430:	2d 91       	ld	r18, X+
    3432:	3c 91       	ld	r19, X
    3434:	17 97       	sbiw	r26, 0x07	; 7
    3436:	3d 83       	std	Y+5, r19	; 0x05
    3438:	2c 83       	std	Y+4, r18	; 0x04
    343a:	41 81       	ldd	r20, Z+1	; 0x01
    343c:	52 81       	ldd	r21, Z+2	; 0x02
    343e:	9d 01       	movw	r18, r26
    3440:	2e 5f       	subi	r18, 0xFE	; 254
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	42 17       	cp	r20, r18
    3446:	53 07       	cpc	r21, r19
    3448:	31 f4       	brne	.+12     	; 0x3456 <xTaskGenericNotifyFromISR+0x154>
    344a:	18 96       	adiw	r26, 0x08	; 8
    344c:	4d 91       	ld	r20, X+
    344e:	5c 91       	ld	r21, X
    3450:	19 97       	sbiw	r26, 0x09	; 9
    3452:	52 83       	std	Z+2, r21	; 0x02
    3454:	41 83       	std	Z+1, r20	; 0x01
    3456:	1d 96       	adiw	r26, 0x0d	; 13
    3458:	1c 92       	st	X, r1
    345a:	1e 92       	st	-X, r1
    345c:	1c 97       	sbiw	r26, 0x0c	; 12
    345e:	90 81       	ld	r25, Z
    3460:	91 50       	subi	r25, 0x01	; 1
    3462:	90 83       	st	Z, r25
    3464:	5a 96       	adiw	r26, 0x1a	; 26
    3466:	ec 91       	ld	r30, X
    3468:	5a 97       	sbiw	r26, 0x1a	; 26
    346a:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <uxTopReadyPriority>
    346e:	9e 17       	cp	r25, r30
    3470:	10 f4       	brcc	.+4      	; 0x3476 <xTaskGenericNotifyFromISR+0x174>
    3472:	e0 93 91 15 	sts	0x1591, r30	; 0x801591 <uxTopReadyPriority>
    3476:	9b e0       	ldi	r25, 0x0B	; 11
    3478:	9e 9f       	mul	r25, r30
    347a:	f0 01       	movw	r30, r0
    347c:	11 24       	eor	r1, r1
    347e:	ed 52       	subi	r30, 0x2D	; 45
    3480:	fa 4e       	sbci	r31, 0xEA	; 234
    3482:	01 80       	ldd	r0, Z+1	; 0x01
    3484:	f2 81       	ldd	r31, Z+2	; 0x02
    3486:	e0 2d       	mov	r30, r0
    3488:	17 96       	adiw	r26, 0x07	; 7
    348a:	fc 93       	st	X, r31
    348c:	ee 93       	st	-X, r30
    348e:	16 97       	sbiw	r26, 0x06	; 6
    3490:	46 81       	ldd	r20, Z+6	; 0x06
    3492:	57 81       	ldd	r21, Z+7	; 0x07
    3494:	19 96       	adiw	r26, 0x09	; 9
    3496:	5c 93       	st	X, r21
    3498:	4e 93       	st	-X, r20
    349a:	18 97       	sbiw	r26, 0x08	; 8
    349c:	c6 81       	ldd	r28, Z+6	; 0x06
    349e:	d7 81       	ldd	r29, Z+7	; 0x07
    34a0:	3d 83       	std	Y+5, r19	; 0x05
    34a2:	2c 83       	std	Y+4, r18	; 0x04
    34a4:	37 83       	std	Z+7, r19	; 0x07
    34a6:	26 83       	std	Z+6, r18	; 0x06
    34a8:	5a 96       	adiw	r26, 0x1a	; 26
    34aa:	ec 91       	ld	r30, X
    34ac:	5a 97       	sbiw	r26, 0x1a	; 26
    34ae:	9e 9f       	mul	r25, r30
    34b0:	f0 01       	movw	r30, r0
    34b2:	11 24       	eor	r1, r1
    34b4:	ed 52       	subi	r30, 0x2D	; 45
    34b6:	fa 4e       	sbci	r31, 0xEA	; 234
    34b8:	1d 96       	adiw	r26, 0x0d	; 13
    34ba:	fc 93       	st	X, r31
    34bc:	ee 93       	st	-X, r30
    34be:	1c 97       	sbiw	r26, 0x0c	; 12
    34c0:	90 81       	ld	r25, Z
    34c2:	9f 5f       	subi	r25, 0xFF	; 255
    34c4:	90 83       	st	Z, r25
    34c6:	21 c0       	rjmp	.+66     	; 0x350a <xTaskGenericNotifyFromISR+0x208>
    34c8:	6e ea       	ldi	r22, 0xAE	; 174
    34ca:	75 e1       	ldi	r23, 0x15	; 21
    34cc:	fb 01       	movw	r30, r22
    34ce:	c1 81       	ldd	r28, Z+1	; 0x01
    34d0:	d2 81       	ldd	r29, Z+2	; 0x02
    34d2:	53 96       	adiw	r26, 0x13	; 19
    34d4:	dc 93       	st	X, r29
    34d6:	ce 93       	st	-X, r28
    34d8:	52 97       	sbiw	r26, 0x12	; 18
    34da:	2e 81       	ldd	r18, Y+6	; 0x06
    34dc:	3f 81       	ldd	r19, Y+7	; 0x07
    34de:	55 96       	adiw	r26, 0x15	; 21
    34e0:	3c 93       	st	X, r19
    34e2:	2e 93       	st	-X, r18
    34e4:	54 97       	sbiw	r26, 0x14	; 20
    34e6:	4e 81       	ldd	r20, Y+6	; 0x06
    34e8:	5f 81       	ldd	r21, Y+7	; 0x07
    34ea:	9d 01       	movw	r18, r26
    34ec:	22 5f       	subi	r18, 0xF2	; 242
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	fa 01       	movw	r30, r20
    34f2:	35 83       	std	Z+5, r19	; 0x05
    34f4:	24 83       	std	Z+4, r18	; 0x04
    34f6:	3f 83       	std	Y+7, r19	; 0x07
    34f8:	2e 83       	std	Y+6, r18	; 0x06
    34fa:	59 96       	adiw	r26, 0x19	; 25
    34fc:	7c 93       	st	X, r23
    34fe:	6e 93       	st	-X, r22
    3500:	58 97       	sbiw	r26, 0x18	; 24
    3502:	fb 01       	movw	r30, r22
    3504:	90 81       	ld	r25, Z
    3506:	9f 5f       	subi	r25, 0xFF	; 255
    3508:	90 83       	st	Z, r25
    350a:	5a 96       	adiw	r26, 0x1a	; 26
    350c:	2c 91       	ld	r18, X
    350e:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <pxCurrentTCB>
    3512:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <pxCurrentTCB+0x1>
    3516:	92 8d       	ldd	r25, Z+26	; 0x1a
    3518:	92 17       	cp	r25, r18
    351a:	48 f4       	brcc	.+18     	; 0x352e <xTaskGenericNotifyFromISR+0x22c>
    351c:	c1 14       	cp	r12, r1
    351e:	d1 04       	cpc	r13, r1
    3520:	19 f0       	breq	.+6      	; 0x3528 <xTaskGenericNotifyFromISR+0x226>
    3522:	91 e0       	ldi	r25, 0x01	; 1
    3524:	f6 01       	movw	r30, r12
    3526:	90 83       	st	Z, r25
    3528:	91 e0       	ldi	r25, 0x01	; 1
    352a:	90 93 8b 15 	sts	0x158B, r25	; 0x80158b <xYieldPending>
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	ef 90       	pop	r14
    3538:	df 90       	pop	r13
    353a:	cf 90       	pop	r12
    353c:	bf 90       	pop	r11
    353e:	af 90       	pop	r10
    3540:	9f 90       	pop	r9
    3542:	8f 90       	pop	r8
    3544:	08 95       	ret

00003546 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	21 f4       	brne	.+8      	; 0x3552 <xTaskGenericNotifyStateClear+0xc>
    354a:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxCurrentTCB>
    354e:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	fc 01       	movw	r30, r24
    355c:	e6 0f       	add	r30, r22
    355e:	f7 1f       	adc	r31, r23
    3560:	23 a9       	ldd	r18, Z+51	; 0x33
    3562:	22 30       	cpi	r18, 0x02	; 2
    3564:	31 f4       	brne	.+12     	; 0x3572 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3566:	fc 01       	movw	r30, r24
    3568:	e6 0f       	add	r30, r22
    356a:	f7 1f       	adc	r31, r23
    356c:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3572:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3574:	0f 90       	pop	r0
    3576:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3578:	08 95       	ret

0000357a <prvGetNextExpireTime>:
    357a:	dc 01       	movw	r26, r24
    357c:	e0 91 4d 16 	lds	r30, 0x164D	; 0x80164d <pxCurrentTimerList>
    3580:	f0 91 4e 16 	lds	r31, 0x164E	; 0x80164e <pxCurrentTimerList+0x1>
    3584:	80 81       	ld	r24, Z
    3586:	91 e0       	ldi	r25, 0x01	; 1
    3588:	81 11       	cpse	r24, r1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 93       	st	X, r25
    358e:	91 11       	cpse	r25, r1
    3590:	08 c0       	rjmp	.+16     	; 0x35a2 <prvGetNextExpireTime+0x28>
    3592:	07 80       	ldd	r0, Z+7	; 0x07
    3594:	f0 85       	ldd	r31, Z+8	; 0x08
    3596:	e0 2d       	mov	r30, r0
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	82 81       	ldd	r24, Z+2	; 0x02
    359e:	93 81       	ldd	r25, Z+3	; 0x03
    35a0:	08 95       	ret
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	70 e0       	ldi	r23, 0x00	; 0
    35a6:	cb 01       	movw	r24, r22
    35a8:	08 95       	ret

000035aa <prvInsertTimerInActiveList>:
    35aa:	cf 92       	push	r12
    35ac:	df 92       	push	r13
    35ae:	ef 92       	push	r14
    35b0:	ff 92       	push	r15
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	fc 01       	movw	r30, r24
    35b8:	42 83       	std	Z+2, r20	; 0x02
    35ba:	53 83       	std	Z+3, r21	; 0x03
    35bc:	64 83       	std	Z+4, r22	; 0x04
    35be:	75 83       	std	Z+5, r23	; 0x05
    35c0:	93 87       	std	Z+11, r25	; 0x0b
    35c2:	82 87       	std	Z+10, r24	; 0x0a
    35c4:	04 17       	cp	r16, r20
    35c6:	15 07       	cpc	r17, r21
    35c8:	26 07       	cpc	r18, r22
    35ca:	37 07       	cpc	r19, r23
    35cc:	c0 f0       	brcs	.+48     	; 0x35fe <prvInsertTimerInActiveList+0x54>
    35ce:	0c 19       	sub	r16, r12
    35d0:	1d 09       	sbc	r17, r13
    35d2:	2e 09       	sbc	r18, r14
    35d4:	3f 09       	sbc	r19, r15
    35d6:	86 85       	ldd	r24, Z+14	; 0x0e
    35d8:	97 85       	ldd	r25, Z+15	; 0x0f
    35da:	a0 89       	ldd	r26, Z+16	; 0x10
    35dc:	b1 89       	ldd	r27, Z+17	; 0x11
    35de:	08 17       	cp	r16, r24
    35e0:	19 07       	cpc	r17, r25
    35e2:	2a 07       	cpc	r18, r26
    35e4:	3b 07       	cpc	r19, r27
    35e6:	00 f5       	brcc	.+64     	; 0x3628 <prvInsertTimerInActiveList+0x7e>
    35e8:	bf 01       	movw	r22, r30
    35ea:	6e 5f       	subi	r22, 0xFE	; 254
    35ec:	7f 4f       	sbci	r23, 0xFF	; 255
    35ee:	80 91 4b 16 	lds	r24, 0x164B	; 0x80164b <pxOverflowTimerList>
    35f2:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <pxOverflowTimerList+0x1>
    35f6:	0e 94 05 06 	call	0xc0a	; 0xc0a <vListInsert>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	18 c0       	rjmp	.+48     	; 0x362e <prvInsertTimerInActiveList+0x84>
    35fe:	0c 15       	cp	r16, r12
    3600:	1d 05       	cpc	r17, r13
    3602:	2e 05       	cpc	r18, r14
    3604:	3f 05       	cpc	r19, r15
    3606:	28 f4       	brcc	.+10     	; 0x3612 <prvInsertTimerInActiveList+0x68>
    3608:	4c 15       	cp	r20, r12
    360a:	5d 05       	cpc	r21, r13
    360c:	6e 05       	cpc	r22, r14
    360e:	7f 05       	cpc	r23, r15
    3610:	68 f4       	brcc	.+26     	; 0x362c <prvInsertTimerInActiveList+0x82>
    3612:	bf 01       	movw	r22, r30
    3614:	6e 5f       	subi	r22, 0xFE	; 254
    3616:	7f 4f       	sbci	r23, 0xFF	; 255
    3618:	80 91 4d 16 	lds	r24, 0x164D	; 0x80164d <pxCurrentTimerList>
    361c:	90 91 4e 16 	lds	r25, 0x164E	; 0x80164e <pxCurrentTimerList+0x1>
    3620:	0e 94 05 06 	call	0xc0a	; 0xc0a <vListInsert>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	03 c0       	rjmp	.+6      	; 0x362e <prvInsertTimerInActiveList+0x84>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	01 c0       	rjmp	.+2      	; 0x362e <prvInsertTimerInActiveList+0x84>
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	1f 91       	pop	r17
    3630:	0f 91       	pop	r16
    3632:	ff 90       	pop	r15
    3634:	ef 90       	pop	r14
    3636:	df 90       	pop	r13
    3638:	cf 90       	pop	r12
    363a:	08 95       	ret

0000363c <prvCheckForValidListAndQueue>:
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	0f 92       	push	r0
    3642:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xTimerQueue>
    3646:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xTimerQueue+0x1>
    364a:	89 2b       	or	r24, r25
    364c:	e9 f4       	brne	.+58     	; 0x3688 <prvCheckForValidListAndQueue+0x4c>
    364e:	8a e5       	ldi	r24, 0x5A	; 90
    3650:	96 e1       	ldi	r25, 0x16	; 22
    3652:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    3656:	8f e4       	ldi	r24, 0x4F	; 79
    3658:	96 e1       	ldi	r25, 0x16	; 22
    365a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vListInitialise>
    365e:	8a e5       	ldi	r24, 0x5A	; 90
    3660:	96 e1       	ldi	r25, 0x16	; 22
    3662:	90 93 4e 16 	sts	0x164E, r25	; 0x80164e <pxCurrentTimerList+0x1>
    3666:	80 93 4d 16 	sts	0x164D, r24	; 0x80164d <pxCurrentTimerList>
    366a:	8f e4       	ldi	r24, 0x4F	; 79
    366c:	96 e1       	ldi	r25, 0x16	; 22
    366e:	90 93 4c 16 	sts	0x164C, r25	; 0x80164c <pxOverflowTimerList+0x1>
    3672:	80 93 4b 16 	sts	0x164B, r24	; 0x80164b <pxOverflowTimerList>
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	67 e0       	ldi	r22, 0x07	; 7
    367a:	8a e0       	ldi	r24, 0x0A	; 10
    367c:	0e 94 b3 08 	call	0x1166	; 0x1166 <xQueueGenericCreate>
    3680:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xTimerQueue+0x1>
    3684:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xTimerQueue>
    3688:	0f 90       	pop	r0
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	08 95       	ret

0000368e <xTimerCreateTimerTask>:
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	d3 df       	rcall	.-90     	; 0x363c <prvCheckForValidListAndQueue>
    3696:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xTimerQueue>
    369a:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xTimerQueue+0x1>
    369e:	89 2b       	or	r24, r25
    36a0:	91 f0       	breq	.+36     	; 0x36c6 <xTimerCreateTimerTask+0x38>
    36a2:	0f 2e       	mov	r0, r31
    36a4:	f7 e4       	ldi	r31, 0x47	; 71
    36a6:	ef 2e       	mov	r14, r31
    36a8:	f6 e1       	ldi	r31, 0x16	; 22
    36aa:	ff 2e       	mov	r15, r31
    36ac:	f0 2d       	mov	r31, r0
    36ae:	03 e0       	ldi	r16, 0x03	; 3
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 ec       	ldi	r20, 0xC0	; 192
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	64 ef       	ldi	r22, 0xF4	; 244
    36ba:	72 e0       	ldi	r23, 0x02	; 2
    36bc:	87 ed       	ldi	r24, 0xD7	; 215
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
    36c4:	01 c0       	rjmp	.+2      	; 0x36c8 <xTimerCreateTimerTask+0x3a>
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	0f 91       	pop	r16
    36ca:	ff 90       	pop	r15
    36cc:	ef 90       	pop	r14
    36ce:	08 95       	ret

000036d0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    36d0:	8f 92       	push	r8
    36d2:	9f 92       	push	r9
    36d4:	af 92       	push	r10
    36d6:	bf 92       	push	r11
    36d8:	cf 92       	push	r12
    36da:	df 92       	push	r13
    36dc:	ef 92       	push	r14
    36de:	ff 92       	push	r15
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	27 97       	sbiw	r28, 0x07	; 7
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    36f8:	e0 91 49 16 	lds	r30, 0x1649	; 0x801649 <xTimerQueue>
    36fc:	f0 91 4a 16 	lds	r31, 0x164A	; 0x80164a <xTimerQueue+0x1>
    3700:	30 97       	sbiw	r30, 0x00	; 0
    3702:	81 f1       	breq	.+96     	; 0x3764 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3704:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3706:	2a 83       	std	Y+2, r18	; 0x02
    3708:	3b 83       	std	Y+3, r19	; 0x03
    370a:	4c 83       	std	Y+4, r20	; 0x04
    370c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    370e:	9f 83       	std	Y+7, r25	; 0x07
    3710:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3712:	66 30       	cpi	r22, 0x06	; 6
    3714:	f4 f4       	brge	.+60     	; 0x3752 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3716:	c3 da       	rcall	.-2682   	; 0x2c9e <xTaskGetSchedulerState>
    3718:	82 30       	cpi	r24, 0x02	; 2
    371a:	69 f4       	brne	.+26     	; 0x3736 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    371c:	00 e0       	ldi	r16, 0x00	; 0
    371e:	a7 01       	movw	r20, r14
    3720:	96 01       	movw	r18, r12
    3722:	be 01       	movw	r22, r28
    3724:	6f 5f       	subi	r22, 0xFF	; 255
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xTimerQueue>
    372c:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xTimerQueue+0x1>
    3730:	0e 94 d6 08 	call	0x11ac	; 0x11ac <xQueueGenericSend>
    3734:	18 c0       	rjmp	.+48     	; 0x3766 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3736:	00 e0       	ldi	r16, 0x00	; 0
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	a9 01       	movw	r20, r18
    373e:	be 01       	movw	r22, r28
    3740:	6f 5f       	subi	r22, 0xFF	; 255
    3742:	7f 4f       	sbci	r23, 0xFF	; 255
    3744:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xTimerQueue>
    3748:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xTimerQueue+0x1>
    374c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <xQueueGenericSend>
    3750:	0a c0       	rjmp	.+20     	; 0x3766 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	a8 01       	movw	r20, r16
    3756:	be 01       	movw	r22, r28
    3758:	6f 5f       	subi	r22, 0xFF	; 255
    375a:	7f 4f       	sbci	r23, 0xFF	; 255
    375c:	cf 01       	movw	r24, r30
    375e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <xQueueGenericSendFromISR>
    3762:	01 c0       	rjmp	.+2      	; 0x3766 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3764:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3766:	27 96       	adiw	r28, 0x07	; 7
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	df 91       	pop	r29
    3774:	cf 91       	pop	r28
    3776:	1f 91       	pop	r17
    3778:	0f 91       	pop	r16
    377a:	ff 90       	pop	r15
    377c:	ef 90       	pop	r14
    377e:	df 90       	pop	r13
    3780:	cf 90       	pop	r12
    3782:	bf 90       	pop	r11
    3784:	af 90       	pop	r10
    3786:	9f 90       	pop	r9
    3788:	8f 90       	pop	r8
    378a:	08 95       	ret

0000378c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    378c:	8f 92       	push	r8
    378e:	9f 92       	push	r9
    3790:	af 92       	push	r10
    3792:	bf 92       	push	r11
    3794:	cf 92       	push	r12
    3796:	df 92       	push	r13
    3798:	ef 92       	push	r14
    379a:	ff 92       	push	r15
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37a4:	3b c0       	rjmp	.+118    	; 0x381c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37a6:	07 80       	ldd	r0, Z+7	; 0x07
    37a8:	f0 85       	ldd	r31, Z+8	; 0x08
    37aa:	e0 2d       	mov	r30, r0
    37ac:	80 80       	ld	r8, Z
    37ae:	91 80       	ldd	r9, Z+1	; 0x01
    37b0:	a2 80       	ldd	r10, Z+2	; 0x02
    37b2:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37b4:	c0 85       	ldd	r28, Z+8	; 0x08
    37b6:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37b8:	8e 01       	movw	r16, r28
    37ba:	0e 5f       	subi	r16, 0xFE	; 254
    37bc:	1f 4f       	sbci	r17, 0xFF	; 255
    37be:	c8 01       	movw	r24, r16
    37c0:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37c4:	ec 89       	ldd	r30, Y+20	; 0x14
    37c6:	fd 89       	ldd	r31, Y+21	; 0x15
    37c8:	ce 01       	movw	r24, r28
    37ca:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37cc:	8e 89       	ldd	r24, Y+22	; 0x16
    37ce:	82 ff       	sbrs	r24, 2
    37d0:	25 c0       	rjmp	.+74     	; 0x381c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    37d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    37d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    37d6:	a8 89       	ldd	r26, Y+16	; 0x10
    37d8:	b9 89       	ldd	r27, Y+17	; 0x11
    37da:	88 0d       	add	r24, r8
    37dc:	99 1d       	adc	r25, r9
    37de:	aa 1d       	adc	r26, r10
    37e0:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    37e2:	88 16       	cp	r8, r24
    37e4:	99 06       	cpc	r9, r25
    37e6:	aa 06       	cpc	r10, r26
    37e8:	bb 06       	cpc	r11, r27
    37ea:	70 f4       	brcc	.+28     	; 0x3808 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    37ec:	8a 83       	std	Y+2, r24	; 0x02
    37ee:	9b 83       	std	Y+3, r25	; 0x03
    37f0:	ac 83       	std	Y+4, r26	; 0x04
    37f2:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    37f4:	db 87       	std	Y+11, r29	; 0x0b
    37f6:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    37f8:	b8 01       	movw	r22, r16
    37fa:	80 91 4d 16 	lds	r24, 0x164D	; 0x80164d <pxCurrentTimerList>
    37fe:	90 91 4e 16 	lds	r25, 0x164E	; 0x80164e <pxCurrentTimerList+0x1>
    3802:	0e 94 05 06 	call	0xc0a	; 0xc0a <vListInsert>
    3806:	0a c0       	rjmp	.+20     	; 0x381c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3808:	c1 2c       	mov	r12, r1
    380a:	d1 2c       	mov	r13, r1
    380c:	76 01       	movw	r14, r12
    380e:	00 e0       	ldi	r16, 0x00	; 0
    3810:	10 e0       	ldi	r17, 0x00	; 0
    3812:	a5 01       	movw	r20, r10
    3814:	94 01       	movw	r18, r8
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	ce 01       	movw	r24, r28
    381a:	5a df       	rcall	.-332    	; 0x36d0 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    381c:	e0 91 4d 16 	lds	r30, 0x164D	; 0x80164d <pxCurrentTimerList>
    3820:	f0 91 4e 16 	lds	r31, 0x164E	; 0x80164e <pxCurrentTimerList+0x1>
    3824:	80 81       	ld	r24, Z
    3826:	81 11       	cpse	r24, r1
    3828:	be cf       	rjmp	.-132    	; 0x37a6 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    382a:	80 91 4b 16 	lds	r24, 0x164B	; 0x80164b <pxOverflowTimerList>
    382e:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <pxOverflowTimerList+0x1>
    3832:	90 93 4e 16 	sts	0x164E, r25	; 0x80164e <pxCurrentTimerList+0x1>
    3836:	80 93 4d 16 	sts	0x164D, r24	; 0x80164d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    383a:	f0 93 4c 16 	sts	0x164C, r31	; 0x80164c <pxOverflowTimerList+0x1>
    383e:	e0 93 4b 16 	sts	0x164B, r30	; 0x80164b <pxOverflowTimerList>
    }
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	df 90       	pop	r13
    3850:	cf 90       	pop	r12
    3852:	bf 90       	pop	r11
    3854:	af 90       	pop	r10
    3856:	9f 90       	pop	r9
    3858:	8f 90       	pop	r8
    385a:	08 95       	ret

0000385c <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    385c:	cf 92       	push	r12
    385e:	df 92       	push	r13
    3860:	ef 92       	push	r14
    3862:	ff 92       	push	r15
    3864:	cf 93       	push	r28
    3866:	df 93       	push	r29
    3868:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    386a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <xTaskGetTickCount>
    386e:	6b 01       	movw	r12, r22
    3870:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3872:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <xLastTime.2436>
    3876:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <xLastTime.2436+0x1>
    387a:	a0 91 45 16 	lds	r26, 0x1645	; 0x801645 <xLastTime.2436+0x2>
    387e:	b0 91 46 16 	lds	r27, 0x1646	; 0x801646 <xLastTime.2436+0x3>
    3882:	c8 16       	cp	r12, r24
    3884:	d9 06       	cpc	r13, r25
    3886:	ea 06       	cpc	r14, r26
    3888:	fb 06       	cpc	r15, r27
    388a:	20 f4       	brcc	.+8      	; 0x3894 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    388c:	7f df       	rcall	.-258    	; 0x378c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	88 83       	st	Y, r24
    3892:	01 c0       	rjmp	.+2      	; 0x3896 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3894:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3896:	c0 92 43 16 	sts	0x1643, r12	; 0x801643 <xLastTime.2436>
    389a:	d0 92 44 16 	sts	0x1644, r13	; 0x801644 <xLastTime.2436+0x1>
    389e:	e0 92 45 16 	sts	0x1645, r14	; 0x801645 <xLastTime.2436+0x2>
    38a2:	f0 92 46 16 	sts	0x1646, r15	; 0x801646 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    38a6:	c7 01       	movw	r24, r14
    38a8:	b6 01       	movw	r22, r12
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	ff 90       	pop	r15
    38b0:	ef 90       	pop	r14
    38b2:	df 90       	pop	r13
    38b4:	cf 90       	pop	r12
    38b6:	08 95       	ret

000038b8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    38b8:	4f 92       	push	r4
    38ba:	5f 92       	push	r5
    38bc:	6f 92       	push	r6
    38be:	7f 92       	push	r7
    38c0:	8f 92       	push	r8
    38c2:	9f 92       	push	r9
    38c4:	af 92       	push	r10
    38c6:	bf 92       	push	r11
    38c8:	cf 92       	push	r12
    38ca:	df 92       	push	r13
    38cc:	ef 92       	push	r14
    38ce:	ff 92       	push	r15
    38d0:	0f 93       	push	r16
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	4b 01       	movw	r8, r22
    38da:	5c 01       	movw	r10, r24
    38dc:	29 01       	movw	r4, r18
    38de:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    38e0:	e0 91 4d 16 	lds	r30, 0x164D	; 0x80164d <pxCurrentTimerList>
    38e4:	f0 91 4e 16 	lds	r31, 0x164E	; 0x80164e <pxCurrentTimerList+0x1>
    38e8:	07 80       	ldd	r0, Z+7	; 0x07
    38ea:	f0 85       	ldd	r31, Z+8	; 0x08
    38ec:	e0 2d       	mov	r30, r0
    38ee:	c0 85       	ldd	r28, Z+8	; 0x08
    38f0:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    38f2:	ce 01       	movw	r24, r28
    38f4:	02 96       	adiw	r24, 0x02	; 2
    38f6:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38fa:	8e 89       	ldd	r24, Y+22	; 0x16
    38fc:	82 ff       	sbrs	r24, 2
    38fe:	1b c0       	rjmp	.+54     	; 0x3936 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3900:	4e 85       	ldd	r20, Y+14	; 0x0e
    3902:	5f 85       	ldd	r21, Y+15	; 0x0f
    3904:	68 89       	ldd	r22, Y+16	; 0x10
    3906:	79 89       	ldd	r23, Y+17	; 0x11
    3908:	48 0d       	add	r20, r8
    390a:	59 1d       	adc	r21, r9
    390c:	6a 1d       	adc	r22, r10
    390e:	7b 1d       	adc	r23, r11
    3910:	75 01       	movw	r14, r10
    3912:	64 01       	movw	r12, r8
    3914:	93 01       	movw	r18, r6
    3916:	82 01       	movw	r16, r4
    3918:	ce 01       	movw	r24, r28
    391a:	47 de       	rcall	.-882    	; 0x35aa <prvInsertTimerInActiveList>
    391c:	88 23       	and	r24, r24
    391e:	69 f0       	breq	.+26     	; 0x393a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3920:	c1 2c       	mov	r12, r1
    3922:	d1 2c       	mov	r13, r1
    3924:	76 01       	movw	r14, r12
    3926:	00 e0       	ldi	r16, 0x00	; 0
    3928:	10 e0       	ldi	r17, 0x00	; 0
    392a:	a5 01       	movw	r20, r10
    392c:	94 01       	movw	r18, r8
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	ce 01       	movw	r24, r28
    3932:	ce de       	rcall	.-612    	; 0x36d0 <xTimerGenericCommand>
    3934:	02 c0       	rjmp	.+4      	; 0x393a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3936:	8e 7f       	andi	r24, 0xFE	; 254
    3938:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    393a:	ec 89       	ldd	r30, Y+20	; 0x14
    393c:	fd 89       	ldd	r31, Y+21	; 0x15
    393e:	ce 01       	movw	r24, r28
    3940:	19 95       	eicall
    }
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	ff 90       	pop	r15
    394c:	ef 90       	pop	r14
    394e:	df 90       	pop	r13
    3950:	cf 90       	pop	r12
    3952:	bf 90       	pop	r11
    3954:	af 90       	pop	r10
    3956:	9f 90       	pop	r9
    3958:	8f 90       	pop	r8
    395a:	7f 90       	pop	r7
    395c:	6f 90       	pop	r6
    395e:	5f 90       	pop	r5
    3960:	4f 90       	pop	r4
    3962:	08 95       	ret

00003964 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3964:	8f 92       	push	r8
    3966:	9f 92       	push	r9
    3968:	af 92       	push	r10
    396a:	bf 92       	push	r11
    396c:	cf 92       	push	r12
    396e:	df 92       	push	r13
    3970:	ef 92       	push	r14
    3972:	ff 92       	push	r15
    3974:	1f 93       	push	r17
    3976:	cf 93       	push	r28
    3978:	df 93       	push	r29
    397a:	1f 92       	push	r1
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	6b 01       	movw	r12, r22
    3982:	7c 01       	movw	r14, r24
    3984:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3986:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    398a:	ce 01       	movw	r24, r28
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	66 df       	rcall	.-308    	; 0x385c <prvSampleTimeNow>
    3990:	4b 01       	movw	r8, r22
    3992:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	81 11       	cpse	r24, r1
    3998:	2d c0       	rjmp	.+90     	; 0x39f4 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    399a:	11 11       	cpse	r17, r1
    399c:	0d c0       	rjmp	.+26     	; 0x39b8 <prvProcessTimerOrBlockTask+0x54>
    399e:	8c 14       	cp	r8, r12
    39a0:	9d 04       	cpc	r9, r13
    39a2:	ae 04       	cpc	r10, r14
    39a4:	bf 04       	cpc	r11, r15
    39a6:	40 f0       	brcs	.+16     	; 0x39b8 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    39a8:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39ac:	a5 01       	movw	r20, r10
    39ae:	94 01       	movw	r18, r8
    39b0:	c7 01       	movw	r24, r14
    39b2:	b6 01       	movw	r22, r12
    39b4:	81 df       	rcall	.-254    	; 0x38b8 <prvProcessExpiredTimer>
    39b6:	20 c0       	rjmp	.+64     	; 0x39f8 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    39b8:	11 23       	and	r17, r17
    39ba:	41 f0       	breq	.+16     	; 0x39cc <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    39bc:	e0 91 4b 16 	lds	r30, 0x164B	; 0x80164b <pxOverflowTimerList>
    39c0:	f0 91 4c 16 	lds	r31, 0x164C	; 0x80164c <pxOverflowTimerList+0x1>
    39c4:	80 81       	ld	r24, Z
    39c6:	11 e0       	ldi	r17, 0x01	; 1
    39c8:	81 11       	cpse	r24, r1
    39ca:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    39cc:	b7 01       	movw	r22, r14
    39ce:	a6 01       	movw	r20, r12
    39d0:	48 19       	sub	r20, r8
    39d2:	59 09       	sbc	r21, r9
    39d4:	6a 09       	sbc	r22, r10
    39d6:	7b 09       	sbc	r23, r11
    39d8:	21 2f       	mov	r18, r17
    39da:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xTimerQueue>
    39de:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xTimerQueue+0x1>
    39e2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    39e6:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
    39ea:	81 11       	cpse	r24, r1
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    39ee:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    39f4:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskResumeAll>
            }
        }
    }
    39f8:	0f 90       	pop	r0
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	df 90       	pop	r13
    3a06:	cf 90       	pop	r12
    3a08:	bf 90       	pop	r11
    3a0a:	af 90       	pop	r10
    3a0c:	9f 90       	pop	r9
    3a0e:	8f 90       	pop	r8
    3a10:	08 95       	ret

00003a12 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	cf 92       	push	r12
    3a18:	df 92       	push	r13
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	28 97       	sbiw	r28, 0x08	; 8
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a36:	82 c0       	rjmp	.+260    	; 0x3b3c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	88 23       	and	r24, r24
    3a3c:	0c f4       	brge	.+2      	; 0x3a40 <prvProcessReceivedCommands+0x2e>
    3a3e:	7e c0       	rjmp	.+252    	; 0x3b3c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a40:	ae 80       	ldd	r10, Y+6	; 0x06
    3a42:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a44:	d5 01       	movw	r26, r10
    3a46:	1c 96       	adiw	r26, 0x0c	; 12
    3a48:	8d 91       	ld	r24, X+
    3a4a:	9c 91       	ld	r25, X
    3a4c:	1d 97       	sbiw	r26, 0x0d	; 13
    3a4e:	89 2b       	or	r24, r25
    3a50:	21 f0       	breq	.+8      	; 0x3a5a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a52:	c5 01       	movw	r24, r10
    3a54:	02 96       	adiw	r24, 0x02	; 2
    3a56:	0e 94 42 06 	call	0xc84	; 0xc84 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	08 96       	adiw	r24, 0x08	; 8
    3a5e:	fe de       	rcall	.-516    	; 0x385c <prvSampleTimeNow>
    3a60:	8b 01       	movw	r16, r22
    3a62:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3a64:	e9 81       	ldd	r30, Y+1	; 0x01
    3a66:	0e 2e       	mov	r0, r30
    3a68:	00 0c       	add	r0, r0
    3a6a:	ff 0b       	sbc	r31, r31
    3a6c:	ea 30       	cpi	r30, 0x0A	; 10
    3a6e:	f1 05       	cpc	r31, r1
    3a70:	08 f0       	brcs	.+2      	; 0x3a74 <prvProcessReceivedCommands+0x62>
    3a72:	64 c0       	rjmp	.+200    	; 0x3b3c <prvProcessReceivedCommands+0x12a>
    3a74:	88 27       	eor	r24, r24
    3a76:	ee 58       	subi	r30, 0x8E	; 142
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7c:	0c 94 63 2f 	jmp	0x5ec6	; 0x5ec6 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3a80:	f5 01       	movw	r30, r10
    3a82:	86 89       	ldd	r24, Z+22	; 0x16
    3a84:	81 60       	ori	r24, 0x01	; 1
    3a86:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3a88:	ca 80       	ldd	r12, Y+2	; 0x02
    3a8a:	db 80       	ldd	r13, Y+3	; 0x03
    3a8c:	ec 80       	ldd	r14, Y+4	; 0x04
    3a8e:	fd 80       	ldd	r15, Y+5	; 0x05
    3a90:	46 85       	ldd	r20, Z+14	; 0x0e
    3a92:	57 85       	ldd	r21, Z+15	; 0x0f
    3a94:	60 89       	ldd	r22, Z+16	; 0x10
    3a96:	71 89       	ldd	r23, Z+17	; 0x11
    3a98:	4c 0d       	add	r20, r12
    3a9a:	5d 1d       	adc	r21, r13
    3a9c:	6e 1d       	adc	r22, r14
    3a9e:	7f 1d       	adc	r23, r15
    3aa0:	c5 01       	movw	r24, r10
    3aa2:	83 dd       	rcall	.-1274   	; 0x35aa <prvInsertTimerInActiveList>
    3aa4:	88 23       	and	r24, r24
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <prvProcessReceivedCommands+0x98>
    3aa8:	49 c0       	rjmp	.+146    	; 0x3b3c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3aaa:	d5 01       	movw	r26, r10
    3aac:	54 96       	adiw	r26, 0x14	; 20
    3aae:	ed 91       	ld	r30, X+
    3ab0:	fc 91       	ld	r31, X
    3ab2:	55 97       	sbiw	r26, 0x15	; 21
    3ab4:	c5 01       	movw	r24, r10
    3ab6:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3ab8:	f5 01       	movw	r30, r10
    3aba:	86 89       	ldd	r24, Z+22	; 0x16
    3abc:	82 ff       	sbrs	r24, 2
    3abe:	3e c0       	rjmp	.+124    	; 0x3b3c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3ac0:	4a 81       	ldd	r20, Y+2	; 0x02
    3ac2:	5b 81       	ldd	r21, Y+3	; 0x03
    3ac4:	6c 81       	ldd	r22, Y+4	; 0x04
    3ac6:	7d 81       	ldd	r23, Y+5	; 0x05
    3ac8:	86 85       	ldd	r24, Z+14	; 0x0e
    3aca:	97 85       	ldd	r25, Z+15	; 0x0f
    3acc:	a0 89       	ldd	r26, Z+16	; 0x10
    3ace:	b1 89       	ldd	r27, Z+17	; 0x11
    3ad0:	9a 01       	movw	r18, r20
    3ad2:	ab 01       	movw	r20, r22
    3ad4:	28 0f       	add	r18, r24
    3ad6:	39 1f       	adc	r19, r25
    3ad8:	4a 1f       	adc	r20, r26
    3ada:	5b 1f       	adc	r21, r27
    3adc:	c1 2c       	mov	r12, r1
    3ade:	d1 2c       	mov	r13, r1
    3ae0:	76 01       	movw	r14, r12
    3ae2:	00 e0       	ldi	r16, 0x00	; 0
    3ae4:	10 e0       	ldi	r17, 0x00	; 0
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	c5 01       	movw	r24, r10
    3aea:	f2 dd       	rcall	.-1052   	; 0x36d0 <xTimerGenericCommand>
    3aec:	27 c0       	rjmp	.+78     	; 0x3b3c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3aee:	d5 01       	movw	r26, r10
    3af0:	56 96       	adiw	r26, 0x16	; 22
    3af2:	8c 91       	ld	r24, X
    3af4:	56 97       	sbiw	r26, 0x16	; 22
    3af6:	8e 7f       	andi	r24, 0xFE	; 254
    3af8:	56 96       	adiw	r26, 0x16	; 22
    3afa:	8c 93       	st	X, r24
                        break;
    3afc:	1f c0       	rjmp	.+62     	; 0x3b3c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3afe:	f5 01       	movw	r30, r10
    3b00:	86 89       	ldd	r24, Z+22	; 0x16
    3b02:	81 60       	ori	r24, 0x01	; 1
    3b04:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b06:	4a 81       	ldd	r20, Y+2	; 0x02
    3b08:	5b 81       	ldd	r21, Y+3	; 0x03
    3b0a:	6c 81       	ldd	r22, Y+4	; 0x04
    3b0c:	7d 81       	ldd	r23, Y+5	; 0x05
    3b0e:	46 87       	std	Z+14, r20	; 0x0e
    3b10:	57 87       	std	Z+15, r21	; 0x0f
    3b12:	60 8b       	std	Z+16, r22	; 0x10
    3b14:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b16:	40 0f       	add	r20, r16
    3b18:	51 1f       	adc	r21, r17
    3b1a:	62 1f       	adc	r22, r18
    3b1c:	73 1f       	adc	r23, r19
    3b1e:	68 01       	movw	r12, r16
    3b20:	79 01       	movw	r14, r18
    3b22:	c5 01       	movw	r24, r10
    3b24:	42 dd       	rcall	.-1404   	; 0x35aa <prvInsertTimerInActiveList>
                        break;
    3b26:	0a c0       	rjmp	.+20     	; 0x3b3c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b28:	f5 01       	movw	r30, r10
    3b2a:	86 89       	ldd	r24, Z+22	; 0x16
    3b2c:	81 fd       	sbrc	r24, 1
    3b2e:	04 c0       	rjmp	.+8      	; 0x3b38 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b30:	c5 01       	movw	r24, r10
    3b32:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortFree>
    3b36:	02 c0       	rjmp	.+4      	; 0x3b3c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b38:	8e 7f       	andi	r24, 0xFE	; 254
    3b3a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	a9 01       	movw	r20, r18
    3b42:	be 01       	movw	r22, r28
    3b44:	6f 5f       	subi	r22, 0xFF	; 255
    3b46:	7f 4f       	sbci	r23, 0xFF	; 255
    3b48:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xTimerQueue>
    3b4c:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xTimerQueue+0x1>
    3b50:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueReceive>
    3b54:	81 11       	cpse	r24, r1
    3b56:	70 cf       	rjmp	.-288    	; 0x3a38 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3b58:	28 96       	adiw	r28, 0x08	; 8
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	bf 90       	pop	r11
    3b76:	af 90       	pop	r10
    3b78:	08 95       	ret

00003b7a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3b7a:	08 95       	ret

00003b7c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3b7c:	84 b1       	in	r24, 0x04	; 4
    3b7e:	80 68       	ori	r24, 0x80	; 128
    3b80:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3b82:	85 b1       	in	r24, 0x05	; 5
    3b84:	80 68       	ori	r24, 0x80	; 128
    3b86:	85 b9       	out	0x05, r24	; 5
    3b88:	08 95       	ret

00003b8a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3b8a:	83 b1       	in	r24, 0x03	; 3
    3b8c:	80 68       	ori	r24, 0x80	; 128
    3b8e:	83 b9       	out	0x03, r24	; 3
    3b90:	08 95       	ret

00003b92 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3b92:	f4 df       	rcall	.-24     	; 0x3b7c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b94:	2f ef       	ldi	r18, 0xFF	; 255
    3b96:	80 e7       	ldi	r24, 0x70	; 112
    3b98:	92 e0       	ldi	r25, 0x02	; 2
    3b9a:	21 50       	subi	r18, 0x01	; 1
    3b9c:	80 40       	sbci	r24, 0x00	; 0
    3b9e:	90 40       	sbci	r25, 0x00	; 0
    3ba0:	e1 f7       	brne	.-8      	; 0x3b9a <vApplicationMallocFailedHook+0x8>
    3ba2:	00 c0       	rjmp	.+0      	; 0x3ba4 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3ba4:	00 00       	nop
    3ba6:	f1 df       	rcall	.-30     	; 0x3b8a <prvBlinkMainLed>
    3ba8:	f5 cf       	rjmp	.-22     	; 0x3b94 <vApplicationMallocFailedHook+0x2>

00003baa <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3baa:	e8 df       	rcall	.-48     	; 0x3b7c <prvSetMainLedOn>
    3bac:	2f ef       	ldi	r18, 0xFF	; 255
    3bae:	87 ea       	ldi	r24, 0xA7	; 167
    3bb0:	91 e6       	ldi	r25, 0x61	; 97
    3bb2:	21 50       	subi	r18, 0x01	; 1
    3bb4:	80 40       	sbci	r24, 0x00	; 0
    3bb6:	90 40       	sbci	r25, 0x00	; 0
    3bb8:	e1 f7       	brne	.-8      	; 0x3bb2 <vApplicationStackOverflowHook+0x8>
    3bba:	00 c0       	rjmp	.+0      	; 0x3bbc <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3bbc:	00 00       	nop
    3bbe:	e5 df       	rcall	.-54     	; 0x3b8a <prvBlinkMainLed>
    3bc0:	f5 cf       	rjmp	.-22     	; 0x3bac <vApplicationStackOverflowHook+0x2>

00003bc2 <create_message_buffer>:
 #include "Utility.h"
 #include <lora_driver.h>
 const size_t xMessageBufferSizeBytes = 100;
 void create_message_buffer()
 {
	 xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3bc2:	41 e0       	ldi	r20, 0x01	; 1
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	84 e6       	ldi	r24, 0x64	; 100
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 42 0c 	call	0x1884	; 0x1884 <xStreamBufferGenericCreate>
    3bd0:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <xMessageBuffer+0x1>
    3bd4:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <xMessageBuffer>
	 downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);;
    3bd8:	41 e0       	ldi	r20, 0x01	; 1
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	70 e0       	ldi	r23, 0x00	; 0
    3bde:	8c e2       	ldi	r24, 0x2C	; 44
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 42 0c 	call	0x1884	; 0x1884 <xStreamBufferGenericCreate>
    3be6:	90 93 cd 17 	sts	0x17CD, r25	; 0x8017cd <downlinkMessageBuffer+0x1>
    3bea:	80 93 cc 17 	sts	0x17CC, r24	; 0x8017cc <downlinkMessageBuffer>
    3bee:	08 95       	ret

00003bf0 <create_event_groups>:
 }
 
 
void create_event_groups()
{
	_meassureEventGroup=xEventGroupCreate();
    3bf0:	0e 94 56 03 	call	0x6ac	; 0x6ac <xEventGroupCreate>
    3bf4:	90 93 cb 17 	sts	0x17CB, r25	; 0x8017cb <_meassureEventGroup+0x1>
    3bf8:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <_meassureEventGroup>
	_dataReadyEventGroup=xEventGroupCreate();
    3bfc:	0e 94 56 03 	call	0x6ac	; 0x6ac <xEventGroupCreate>
    3c00:	90 93 e9 17 	sts	0x17E9, r25	; 0x8017e9 <_dataReadyEventGroup+0x1>
    3c04:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <_dataReadyEventGroup>
    3c08:	08 95       	ret

00003c0a <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    3c0a:	86 e0       	ldi	r24, 0x06	; 6
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e 94 0a 05 	call	0xa14	; 0xa14 <pvPortMalloc>
    3c12:	90 93 02 18 	sts	0x1802, r25	; 0x801802 <packet+0x1>
    3c16:	80 93 01 18 	sts	0x1801, r24	; 0x801801 <packet>
	
	if (NULL == packet){
    3c1a:	00 97       	sbiw	r24, 0x00	; 0
    3c1c:	11 f4       	brne	.+4      	; 0x3c22 <SensorDataPackage_create+0x18>
		return NULL;
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return packet;
}
    3c22:	08 95       	ret

00003c24 <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3c24:	e0 91 01 18 	lds	r30, 0x1801	; 0x801801 <packet>
    3c28:	f0 91 02 18 	lds	r31, 0x1802	; 0x801802 <packet+0x1>
    3c2c:	91 83       	std	Z+1, r25	; 0x01
    3c2e:	80 83       	st	Z, r24
    3c30:	08 95       	ret

00003c32 <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3c32:	e0 91 01 18 	lds	r30, 0x1801	; 0x801801 <packet>
    3c36:	f0 91 02 18 	lds	r31, 0x1802	; 0x801802 <packet+0x1>
    3c3a:	93 83       	std	Z+3, r25	; 0x03
    3c3c:	82 83       	std	Z+2, r24	; 0x02
    3c3e:	08 95       	ret

00003c40 <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    3c40:	e0 91 01 18 	lds	r30, 0x1801	; 0x801801 <packet>
    3c44:	f0 91 02 18 	lds	r31, 0x1802	; 0x801802 <packet+0x1>
    3c48:	95 83       	std	Z+5, r25	; 0x05
    3c4a:	84 83       	std	Z+4, r24	; 0x04
    3c4c:	08 95       	ret

00003c4e <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3c4e:	e5 e6       	ldi	r30, 0x65	; 101
    3c50:	f6 e1       	ldi	r31, 0x16	; 22
    3c52:	26 e0       	ldi	r18, 0x06	; 6
    3c54:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    3c56:	60 83       	st	Z, r22
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3c58:	a0 91 01 18 	lds	r26, 0x1801	; 0x801801 <packet>
    3c5c:	b0 91 02 18 	lds	r27, 0x1802	; 0x801802 <packet+0x1>
    3c60:	2c 91       	ld	r18, X
    3c62:	11 96       	adiw	r26, 0x01	; 1
    3c64:	3c 91       	ld	r19, X
    3c66:	11 97       	sbiw	r26, 0x01	; 1
    3c68:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3c6a:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3c6c:	12 96       	adiw	r26, 0x02	; 2
    3c6e:	2c 91       	ld	r18, X
    3c70:	12 97       	sbiw	r26, 0x02	; 2
    3c72:	13 96       	adiw	r26, 0x03	; 3
    3c74:	3c 91       	ld	r19, X
    3c76:	13 97       	sbiw	r26, 0x03	; 3
    3c78:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3c7a:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3c7c:	14 96       	adiw	r26, 0x04	; 4
    3c7e:	2c 91       	ld	r18, X
    3c80:	14 97       	sbiw	r26, 0x04	; 4
    3c82:	15 96       	adiw	r26, 0x05	; 5
    3c84:	3c 91       	ld	r19, X
    3c86:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3c88:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    3c8a:	26 e1       	ldi	r18, 0x16	; 22
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	01 90       	ld	r0, Z+
    3c90:	0d 92       	st	X+, r0
    3c92:	2a 95       	dec	r18
    3c94:	e1 f7       	brne	.-8      	; 0x3c8e <getLoRaPayload+0x40>
	};
    3c96:	08 95       	ret

00003c98 <get_temperature_data>:
}
//------Get temperature data-----------

uint16_t get_temperature_data()
{
	return (uint16_t)temperature;
    3c98:	60 91 7f 16 	lds	r22, 0x167F	; 0x80167f <temperature>
    3c9c:	70 91 80 16 	lds	r23, 0x1680	; 0x801680 <temperature+0x1>
    3ca0:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <temperature+0x2>
    3ca4:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <temperature+0x3>
    3ca8:	f2 d1       	rcall	.+996    	; 0x408e <__fixunssfsi>
}
    3caa:	cb 01       	movw	r24, r22
    3cac:	08 95       	ret

00003cae <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
	return (uint16_t)humidity;
    3cae:	60 91 7b 16 	lds	r22, 0x167B	; 0x80167b <humidity>
    3cb2:	70 91 7c 16 	lds	r23, 0x167C	; 0x80167c <humidity+0x1>
    3cb6:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <humidity+0x2>
    3cba:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <humidity+0x3>
    3cbe:	e7 d1       	rcall	.+974    	; 0x408e <__fixunssfsi>
}
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	08 95       	ret

00003cc4 <tempHum_taskCreate>:

void tempHum_taskCreate(UBaseType_t task_priority){
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
	
	xTaskCreate(
    3cca:	e1 2c       	mov	r14, r1
    3ccc:	f1 2c       	mov	r15, r1
    3cce:	08 2f       	mov	r16, r24
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 ec       	ldi	r20, 0xC0	; 192
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	6c ef       	ldi	r22, 0xFC	; 252
    3cda:	72 e0       	ldi	r23, 0x02	; 2
    3cdc:	88 ee       	ldi	r24, 0xE8	; 232
    3cde:	9e e1       	ldi	r25, 0x1E	; 30
    3ce0:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  task_priority // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    3ce4:	0f 91       	pop	r16
    3ce6:	ff 90       	pop	r15
    3ce8:	ef 90       	pop	r14
    3cea:	08 95       	ret

00003cec <tempHum_Run>:


/* Task to run for the sensors to work */
void tempHum_Run() {
    3cec:	cf 92       	push	r12
    3cee:	df 92       	push	r13
    3cf0:	ef 92       	push	r14
    3cf2:	ff 92       	push	r15
    3cf4:	0f 93       	push	r16
	//Wait for Event bits to be set in Group
	
	event_measure = xEventGroupWaitBits(
    3cf6:	cc 24       	eor	r12, r12
    3cf8:	ca 94       	dec	r12
    3cfa:	dc 2c       	mov	r13, r12
    3cfc:	76 01       	movw	r14, r12
    3cfe:	01 e0       	ldi	r16, 0x01	; 1
    3d00:	21 e0       	ldi	r18, 0x01	; 1
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	50 e0       	ldi	r21, 0x00	; 0
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_meassureEventGroup>
    3d0e:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_meassureEventGroup+0x1>
    3d12:	0e 94 69 03 	call	0x6d2	; 0x6d2 <xEventGroupWaitBits>
    3d16:	60 93 03 18 	sts	0x1803, r22	; 0x801803 <event_measure>
    3d1a:	70 93 04 18 	sts	0x1804, r23	; 0x801804 <event_measure+0x1>
    3d1e:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <event_measure+0x2>
    3d22:	90 93 06 18 	sts	0x1806, r25	; 0x801806 <event_measure+0x3>
	TEMPERATURE_HUMIDITY_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
		
	if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    3d26:	60 ff       	sbrs	r22, 0
    3d28:	4d c0       	rjmp	.+154    	; 0x3dc4 <tempHum_Run+0xd8>
	{
		
		vTaskDelay( pdMS_TO_TICKS(100UL));
    3d2a:	66 e0       	ldi	r22, 0x06	; 6
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    3d36:	45 d2       	rcall	.+1162   	; 0x41c2 <hih8120_wakeup>
    3d38:	88 23       	and	r24, r24
    3d3a:	c1 f0       	breq	.+48     	; 0x3d6c <tempHum_Run+0x80>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3d3c:	66 e0       	ldi	r22, 0x06	; 6
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    3d48:	81 e1       	ldi	r24, 0x11	; 17
    3d4a:	93 e0       	ldi	r25, 0x03	; 3
    3d4c:	9f 93       	push	r25
    3d4e:	8f 93       	push	r24
    3d50:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	06 c0       	rjmp	.+12     	; 0x3d66 <tempHum_Run+0x7a>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    3d5a:	63 e0       	ldi	r22, 0x03	; 3
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3d66:	2d d2       	rcall	.+1114   	; 0x41c2 <hih8120_wakeup>
    3d68:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    3d6a:	b9 f3       	breq	.-18     	; 0x3d5a <tempHum_Run+0x6e>
    3d6c:	3f d2       	rcall	.+1150   	; 0x41ec <hih8120_measure>
		
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3d6e:	63 e0       	ldi	r22, 0x03	; 3
    3d70:	70 e0       	ldi	r23, 0x00	; 0
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    3d7a:	38 d2       	rcall	.+1136   	; 0x41ec <hih8120_measure>
    3d7c:	81 11       	cpse	r24, r1
    3d7e:	22 c0       	rjmp	.+68     	; 0x3dc4 <tempHum_Run+0xd8>
		{
			
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3d80:	66 e0       	ldi	r22, 0x06	; 6
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
			humidity =  hih8120_getHumidity();
    3d8c:	40 d2       	rcall	.+1152   	; 0x420e <hih8120_getHumidity>
    3d8e:	60 93 7b 16 	sts	0x167B, r22	; 0x80167b <humidity>
    3d92:	70 93 7c 16 	sts	0x167C, r23	; 0x80167c <humidity+0x1>
    3d96:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <humidity+0x2>
    3d9a:	90 93 7e 16 	sts	0x167E, r25	; 0x80167e <humidity+0x3>
			temperature = hih8120_getTemperature();
    3d9e:	4c d2       	rcall	.+1176   	; 0x4238 <hih8120_getTemperature>
    3da0:	60 93 7f 16 	sts	0x167F, r22	; 0x80167f <temperature>
    3da4:	70 93 80 16 	sts	0x1680, r23	; 0x801680 <temperature+0x1>
    3da8:	80 93 81 16 	sts	0x1681, r24	; 0x801681 <temperature+0x2>
    3dac:	90 93 82 16 	sts	0x1682, r25	; 0x801682 <temperature+0x3>
			//printf("<<Temperature Humidity task set>>");
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3db0:	42 e0       	ldi	r20, 0x02	; 2
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	60 e0       	ldi	r22, 0x00	; 0
    3db6:	70 e0       	ldi	r23, 0x00	; 0
    3db8:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_dataReadyEventGroup>
    3dbc:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_dataReadyEventGroup+0x1>
    3dc0:	0e 94 09 04 	call	0x812	; 0x812 <xEventGroupSetBits>
		}
	}
	
}
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	08 95       	ret

00003dd0 <tempHum_Task>:
void tempHum_Task( void *pvParameters )
{
	(void)pvParameters;
	for(;;)
	{
		tempHum_Run();
    3dd0:	8d df       	rcall	.-230    	; 0x3cec <tempHum_Run>
    3dd2:	fe cf       	rjmp	.-4      	; 0x3dd0 <tempHum_Task>

00003dd4 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	64 97       	sbiw	r28, 0x14	; 20
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	f8 94       	cli
    3de6:	de bf       	out	0x3e, r29	; 62
    3de8:	0f be       	out	0x3f, r0	; 63
    3dea:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3df2:	aa d3       	rcall	.+1876   	; 0x4548 <lora_driver_rn2483FactoryReset>
    3df4:	26 d6       	rcall	.+3148   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3df6:	9f 93       	push	r25
    3df8:	8f 93       	push	r24
    3dfa:	8b e4       	ldi	r24, 0x4B	; 75
    3dfc:	93 e0       	ldi	r25, 0x03	; 3
    3dfe:	9f 93       	push	r25
    3e00:	8f 93       	push	r24
    3e02:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3e06:	1e d5       	rcall	.+2620   	; 0x4844 <lora_driver_configureToEu868>
    3e08:	1c d6       	rcall	.+3128   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3e0a:	9f 93       	push	r25
    3e0c:	8f 93       	push	r24
    3e0e:	8e e5       	ldi	r24, 0x5E	; 94
    3e10:	93 e0       	ldi	r25, 0x03	; 3
    3e12:	9f 93       	push	r25
    3e14:	8f 93       	push	r24
    3e16:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
    3e1a:	87 e7       	ldi	r24, 0x77	; 119
    3e1c:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join1");
    3e1e:	0e 94 02 31 	call	0x6204	; 0x6204 <puts>
    3e22:	8e 01       	movw	r16, r28
    3e24:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3e26:	1f 4f       	sbci	r17, 0xFF	; 255
    3e28:	c8 01       	movw	r24, r16
    3e2a:	a0 d3       	rcall	.+1856   	; 0x456c <lora_driver_getRn2483Hweui>
    3e2c:	0a d6       	rcall	.+3092   	; 0x4a42 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3e2e:	1f 93       	push	r17
    3e30:	0f 93       	push	r16
    3e32:	9f 93       	push	r25
    3e34:	8f 93       	push	r24
    3e36:	84 e8       	ldi	r24, 0x84	; 132
    3e38:	93 e0       	ldi	r25, 0x03	; 3
    3e3a:	9f 93       	push	r25
    3e3c:	8f 93       	push	r24
    3e3e:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3e42:	c8 01       	movw	r24, r16
    3e44:	af d3       	rcall	.+1886   	; 0x45a4 <lora_driver_setDeviceIdentifier>
    3e46:	fd d5       	rcall	.+3066   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3e48:	9f 93       	push	r25
    3e4a:	8f 93       	push	r24
    3e4c:	1f 93       	push	r17
    3e4e:	0f 93       	push	r16
    3e50:	88 e9       	ldi	r24, 0x98	; 152
    3e52:	93 e0       	ldi	r25, 0x03	; 3
    3e54:	9f 93       	push	r25
    3e56:	8f 93       	push	r24
    3e58:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
    3e5c:	8d ea       	ldi	r24, 0xAD	; 173
    3e5e:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join2");
    3e60:	0e 94 02 31 	call	0x6204	; 0x6204 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3e64:	a8 01       	movw	r20, r16
    3e66:	6a eb       	ldi	r22, 0xBA	; 186
    3e68:	73 e0       	ldi	r23, 0x03	; 3
    3e6a:	8b ed       	ldi	r24, 0xDB	; 219
    3e6c:	93 e0       	ldi	r25, 0x03	; 3
    3e6e:	c8 d5       	rcall	.+2960   	; 0x4a00 <lora_driver_setOtaaIdentity>
    3e70:	e8 d5       	rcall	.+3024   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3e72:	9f 93       	push	r25
    3e74:	8f 93       	push	r24
    3e76:	1f 93       	push	r17
    3e78:	0f 93       	push	r16
    3e7a:	8a eb       	ldi	r24, 0xBA	; 186
    3e7c:	93 e0       	ldi	r25, 0x03	; 3
    3e7e:	9f 93       	push	r25
    3e80:	8f 93       	push	r24
    3e82:	8b ed       	ldi	r24, 0xDB	; 219
    3e84:	93 e0       	ldi	r25, 0x03	; 3
    3e86:	9f 93       	push	r25
    3e88:	8f 93       	push	r24
    3e8a:	8c ee       	ldi	r24, 0xEC	; 236
    3e8c:	93 e0       	ldi	r25, 0x03	; 3
    3e8e:	9f 93       	push	r25
    3e90:	8f 93       	push	r24
    3e92:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3e96:	b9 d3       	rcall	.+1906   	; 0x460a <lora_driver_saveMac>
    3e98:	d4 d5       	rcall	.+2984   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3e9a:	9f 93       	push	r25
    3e9c:	8f 93       	push	r24
    3e9e:	82 e2       	ldi	r24, 0x22	; 34
    3ea0:	94 e0       	ldi	r25, 0x04	; 4
    3ea2:	9f 93       	push	r25
    3ea4:	8f 93       	push	r24
    3ea6:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	a3 d4       	rcall	.+2374   	; 0x47fe <lora_driver_setAdaptiveDataRate>
    3eb8:	c4 d5       	rcall	.+2952   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3eba:	9f 93       	push	r25
    3ebc:	8f 93       	push	r24
    3ebe:	81 e3       	ldi	r24, 0x31	; 49
    3ec0:	94 e0       	ldi	r25, 0x04	; 4
    3ec2:	9f 93       	push	r25
    3ec4:	8f 93       	push	r24
    3ec6:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
	puts("Try to join3");
    3eca:	82 e5       	ldi	r24, 0x52	; 82
    3ecc:	94 e0       	ldi	r25, 0x04	; 4
    3ece:	0e 94 02 31 	call	0x6204	; 0x6204 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3ed2:	84 ef       	ldi	r24, 0xF4	; 244
    3ed4:	91 e0       	ldi	r25, 0x01	; 1
    3ed6:	9e d4       	rcall	.+2364   	; 0x4814 <lora_driver_setReceiveDelay>
    3ed8:	b4 d5       	rcall	.+2920   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3eda:	9f 93       	push	r25
    3edc:	8f 93       	push	r24
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	8f 93       	push	r24
    3ee2:	84 ef       	ldi	r24, 0xF4	; 244
    3ee4:	8f 93       	push	r24
    3ee6:	8f e5       	ldi	r24, 0x5F	; 95
    3ee8:	94 e0       	ldi	r25, 0x04	; 4
    3eea:	9f 93       	push	r25
    3eec:	8f 93       	push	r24
    3eee:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3efc:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	8a d3       	rcall	.+1812   	; 0x4616 <lora_driver_join>
    3f02:	08 2f       	mov	r16, r24
    3f04:	9e d5       	rcall	.+2876   	; 0x4a42 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3f06:	9f 93       	push	r25
    3f08:	8f 93       	push	r24
    3f0a:	1f 92       	push	r1
    3f0c:	1f 93       	push	r17
    3f0e:	8f e7       	ldi	r24, 0x7F	; 127
    3f10:	94 e0       	ldi	r25, 0x04	; 4
    3f12:	9f 93       	push	r25
    3f14:	8f 93       	push	r24
    3f16:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	08 30       	cpi	r16, 0x08	; 8
    3f28:	59 f0       	breq	.+22     	; 0x3f40 <uplink_lora_setup+0x16c>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	0e 94 c7 2b 	call	0x578e	; 0x578e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3f30:	66 e3       	ldi	r22, 0x36	; 54
    3f32:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
    3f3c:	11 50       	subi	r17, 0x01	; 1
    3f3e:	f9 f6       	brne	.-66     	; 0x3efe <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3f40:	08 30       	cpi	r16, 0x08	; 8
    3f42:	21 f4       	brne	.+8      	; 0x3f4c <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	0e 94 a9 2b 	call	0x5752	; 0x5752 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3f4a:	0d c0       	rjmp	.+26     	; 0x3f66 <uplink_lora_setup+0x192>
    3f4c:	8f e9       	ldi	r24, 0x9F	; 159
		while (1)
		{
			taskYIELD();
		}
	}
}
    3f4e:	94 e0       	ldi	r25, 0x04	; 4
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    3f50:	0e 94 02 31 	call	0x6204	; 0x6204 <puts>
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	0e 94 b8 2b 	call	0x5770	; 0x5770 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	0e 94 86 2b 	call	0x570c	; 0x570c <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3f60:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3f64:	fd cf       	rjmp	.-6      	; 0x3f60 <uplink_lora_setup+0x18c>
    3f66:	64 96       	adiw	r28, 0x14	; 20
    3f68:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3f6a:	f8 94       	cli
    3f6c:	de bf       	out	0x3e, r29	; 62
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0f 91       	pop	r16
    3f7a:	08 95       	ret

00003f7c <upLink_create>:
    3f7c:	ef 92       	push	r14
    3f7e:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority)
{
    3f80:	0f 93       	push	r16
	
	
	xTaskCreate(
    3f82:	20 91 c8 17 	lds	r18, 0x17C8	; 0x8017c8 <xMessageBuffer>
    3f86:	30 91 c9 17 	lds	r19, 0x17C9	; 0x8017c9 <xMessageBuffer+0x1>
    3f8a:	e1 2c       	mov	r14, r1
    3f8c:	f1 2c       	mov	r15, r1
    3f8e:	08 2f       	mov	r16, r24
    3f90:	48 e8       	ldi	r20, 0x88	; 136
    3f92:	51 e0       	ldi	r21, 0x01	; 1
    3f94:	6a ea       	ldi	r22, 0xAA	; 170
    3f96:	74 e0       	ldi	r23, 0x04	; 4
    3f98:	82 e1       	ldi	r24, 0x12	; 18
    3f9a:	90 e2       	ldi	r25, 0x20	; 32
    3f9c:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)xMessageBuffer,
	priority,
	NULL );
}
    3fa0:	0f 91       	pop	r16
    3fa2:	ff 90       	pop	r15
    3fa4:	ef 90       	pop	r14
    3fa6:	08 95       	ret

00003fa8 <send>:
			taskYIELD();
		}
	}
}

void send(size_t xBytesSent){
    3fa8:	0f 93       	push	r16
    3faa:	1f 93       	push	r17
	
	xBytesSent = xMessageBufferReceive(
    3fac:	0f ef       	ldi	r16, 0xFF	; 255
    3fae:	1f ef       	ldi	r17, 0xFF	; 255
    3fb0:	98 01       	movw	r18, r16
    3fb2:	46 e1       	ldi	r20, 0x16	; 22
    3fb4:	50 e0       	ldi	r21, 0x00	; 0
    3fb6:	63 e8       	ldi	r22, 0x83	; 131
    3fb8:	76 e1       	ldi	r23, 0x16	; 22
    3fba:	80 91 c8 17 	lds	r24, 0x17C8	; 0x8017c8 <xMessageBuffer>
    3fbe:	90 91 c9 17 	lds	r25, 0x17C9	; 0x8017c9 <xMessageBuffer+0x1>
    3fc2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(_uplink_payload),	// Size of object
	portMAX_DELAY);

	
	if (xBytesSent>0)
    3fc6:	89 2b       	or	r24, r25
    3fc8:	a1 f0       	breq	.+40     	; 0x3ff2 <send+0x4a>
	{
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3fca:	83 e0       	ldi	r24, 0x03	; 3
    3fcc:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3fd0:	63 e8       	ldi	r22, 0x83	; 131
    3fd2:	76 e1       	ldi	r23, 0x16	; 22
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	48 d3       	rcall	.+1680   	; 0x4668 <lora_driver_sendUploadMessage>
    3fd8:	34 d5       	rcall	.+2664   	; 0x4a42 <lora_driver_mapReturnCodeToText>
    3fda:	9f 93       	push	r25
    3fdc:	8f 93       	push	r24
    3fde:	85 eb       	ldi	r24, 0xB5	; 181
    3fe0:	94 e0       	ldi	r25, 0x04	; 4
    3fe2:	9f 93       	push	r25
    3fe4:	8f 93       	push	r24
    3fe6:	0e 94 ef 30 	call	0x61de	; 0x61de <printf>
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
	}
}
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	08 95       	ret

00003ff8 <lora_Handler_task>:

void lora_Handler_task()
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	98 d2       	rcall	.+1328   	; 0x452c <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    3ffc:	62 e0       	ldi	r22, 0x02	; 2
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
	lora_driver_resetRn2483(0);
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	90 d2       	rcall	.+1312   	; 0x452c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    400c:	66 e9       	ldi	r22, 0x96	; 150
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4018:	42 d2       	rcall	.+1156   	; 0x449e <lora_driver_flushBuffers>
	uplink_lora_setup();
    401a:	dc de       	rcall	.-584    	; 0x3dd4 <uplink_lora_setup>
	size_t xBytesSent;
	
	for(;;)
	{
		send(xBytesSent);
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	c3 df       	rcall	.-122    	; 0x3fa8 <send>
    4022:	fc cf       	rjmp	.-8      	; 0x401c <lora_Handler_task+0x24>

00004024 <upLinkHandler_StartTask>:
    4024:	e9 df       	rcall	.-46     	; 0x3ff8 <lora_Handler_task>

00004026 <create_tasks>:
extern MessageBufferHandle_t downlinkMessageBuffer;

void create_tasks()
{
	
	application_task_create(3);
    4026:	83 e0       	ldi	r24, 0x03	; 3
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 08 01 	call	0x210	; 0x210 <application_task_create>
	co2_task_create(1);
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	0e 94 c7 01 	call	0x38e	; 0x38e <co2_task_create>
	tempHum_taskCreate(1);
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	46 de       	rcall	.-884    	; 0x3cc4 <tempHum_taskCreate>
	//ToDo maybe to move inside the application task
	SensorDataPackage_create();
    4038:	e8 cd       	rjmp	.-1072   	; 0x3c0a <SensorDataPackage_create>
    403a:	08 95       	ret

0000403c <drivers_initialisation>:
    403c:	aa d0       	rcall	.+340    	; 0x4192 <hih8120_initialise>

void drivers_initialisation()
{
	
	  hih8120_initialise();
	  mh_z19_initialise(ser_USART3);
    403e:	83 e0       	ldi	r24, 0x03	; 3
    4040:	dc c5       	rjmp	.+3000   	; 0x4bfa <mh_z19_initialise>
    4042:	08 95       	ret

00004044 <createUtility>:
	  //rc_servo_initialise();
}

void createUtility()
{
	create_event_groups();
    4044:	d5 dd       	rcall	.-1110   	; 0x3bf0 <create_event_groups>
	create_message_buffer();
    4046:	bd cd       	rjmp	.-1158   	; 0x3bc2 <create_message_buffer>
    4048:	08 95       	ret

0000404a <initialiseSystem>:
    404a:	81 b1       	in	r24, 0x01	; 1
}

void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    404c:	81 68       	ori	r24, 0x81	; 129
    404e:	81 b9       	out	0x01, r24	; 1
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	0e 94 0e 2a 	call	0x541c	; 0x541c <stdio_initialise>
	
	drivers_initialisation();
    4056:	f2 df       	rcall	.-28     	; 0x403c <drivers_initialisation>
	
	create_tasks();
    4058:	e6 df       	rcall	.-52     	; 0x4026 <create_tasks>
    405a:	85 e0       	ldi	r24, 0x05	; 5
	status_leds_initialise(5); // Priority 5 for internal task
    405c:	0e 94 15 2b 	call	0x562a	; 0x562a <status_leds_initialise>
    4060:	60 91 cc 17 	lds	r22, 0x17CC	; 0x8017cc <downlinkMessageBuffer>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    4064:	70 91 cd 17 	lds	r23, 0x17CD	; 0x8017cd <downlinkMessageBuffer+0x1>
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	20 d2       	rcall	.+1088   	; 0x44ac <lora_driver_initialise>
	// Create UpLinkTask and start it up with priority 4 and setup the LoRaWan
	upLink_create(4);
    406c:	84 e0       	ldi	r24, 0x04	; 4
    406e:	86 df       	rcall	.-244    	; 0x3f7c <upLink_create>
	
	// Create DownlinkTask and start it up with priority 5
	lora_DownLinkHandler_create(5);
    4070:	85 e0       	ldi	r24, 0x05	; 5
    4072:	0e 94 a5 02 	call	0x54a	; 0x54a <lora_DownLinkHandler_create>

    createUtility();
    4076:	e6 cf       	rjmp	.-52     	; 0x4044 <createUtility>
    4078:	08 95       	ret

0000407a <main>:
    407a:	e7 df       	rcall	.-50     	; 0x404a <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	//printf("Program Started!!\n");
	printf("Program started \n");
    407c:	8a ec       	ldi	r24, 0xCA	; 202
    407e:	94 e0       	ldi	r25, 0x04	; 4
    4080:	0e 94 02 31 	call	0x6204	; 0x6204 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    4084:	0e 94 94 10 	call	0x2128	; 0x2128 <vTaskStartScheduler>
	/* Replace with your application code */
	
}
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	08 95       	ret

0000408e <__fixunssfsi>:
    408e:	33 d0       	rcall	.+102    	; 0x40f6 <__fp_splitA>
    4090:	88 f0       	brcs	.+34     	; 0x40b4 <__fixunssfsi+0x26>
    4092:	9f 57       	subi	r25, 0x7F	; 127
    4094:	90 f0       	brcs	.+36     	; 0x40ba <__fixunssfsi+0x2c>
    4096:	b9 2f       	mov	r27, r25
    4098:	99 27       	eor	r25, r25
    409a:	b7 51       	subi	r27, 0x17	; 23
    409c:	a0 f0       	brcs	.+40     	; 0x40c6 <__fixunssfsi+0x38>
    409e:	d1 f0       	breq	.+52     	; 0x40d4 <__fixunssfsi+0x46>
    40a0:	66 0f       	add	r22, r22
    40a2:	77 1f       	adc	r23, r23
    40a4:	88 1f       	adc	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	1a f0       	brmi	.+6      	; 0x40b0 <__fixunssfsi+0x22>
    40aa:	ba 95       	dec	r27
    40ac:	c9 f7       	brne	.-14     	; 0x40a0 <__fixunssfsi+0x12>
    40ae:	12 c0       	rjmp	.+36     	; 0x40d4 <__fixunssfsi+0x46>
    40b0:	b1 30       	cpi	r27, 0x01	; 1
    40b2:	81 f0       	breq	.+32     	; 0x40d4 <__fixunssfsi+0x46>
    40b4:	3a d0       	rcall	.+116    	; 0x412a <__fp_zero>
    40b6:	b1 e0       	ldi	r27, 0x01	; 1
    40b8:	08 95       	ret
    40ba:	37 c0       	rjmp	.+110    	; 0x412a <__fp_zero>
    40bc:	67 2f       	mov	r22, r23
    40be:	78 2f       	mov	r23, r24
    40c0:	88 27       	eor	r24, r24
    40c2:	b8 5f       	subi	r27, 0xF8	; 248
    40c4:	39 f0       	breq	.+14     	; 0x40d4 <__fixunssfsi+0x46>
    40c6:	b9 3f       	cpi	r27, 0xF9	; 249
    40c8:	cc f3       	brlt	.-14     	; 0x40bc <__fixunssfsi+0x2e>
    40ca:	86 95       	lsr	r24
    40cc:	77 95       	ror	r23
    40ce:	67 95       	ror	r22
    40d0:	b3 95       	inc	r27
    40d2:	d9 f7       	brne	.-10     	; 0x40ca <__fixunssfsi+0x3c>
    40d4:	3e f4       	brtc	.+14     	; 0x40e4 <__fixunssfsi+0x56>
    40d6:	90 95       	com	r25
    40d8:	80 95       	com	r24
    40da:	70 95       	com	r23
    40dc:	61 95       	neg	r22
    40de:	7f 4f       	sbci	r23, 0xFF	; 255
    40e0:	8f 4f       	sbci	r24, 0xFF	; 255
    40e2:	9f 4f       	sbci	r25, 0xFF	; 255
    40e4:	08 95       	ret

000040e6 <__fp_split3>:
    40e6:	57 fd       	sbrc	r21, 7
    40e8:	90 58       	subi	r25, 0x80	; 128
    40ea:	44 0f       	add	r20, r20
    40ec:	55 1f       	adc	r21, r21
    40ee:	59 f0       	breq	.+22     	; 0x4106 <__fp_splitA+0x10>
    40f0:	5f 3f       	cpi	r21, 0xFF	; 255
    40f2:	71 f0       	breq	.+28     	; 0x4110 <__fp_splitA+0x1a>
    40f4:	47 95       	ror	r20

000040f6 <__fp_splitA>:
    40f6:	88 0f       	add	r24, r24
    40f8:	97 fb       	bst	r25, 7
    40fa:	99 1f       	adc	r25, r25
    40fc:	61 f0       	breq	.+24     	; 0x4116 <__fp_splitA+0x20>
    40fe:	9f 3f       	cpi	r25, 0xFF	; 255
    4100:	79 f0       	breq	.+30     	; 0x4120 <__fp_splitA+0x2a>
    4102:	87 95       	ror	r24
    4104:	08 95       	ret
    4106:	12 16       	cp	r1, r18
    4108:	13 06       	cpc	r1, r19
    410a:	14 06       	cpc	r1, r20
    410c:	55 1f       	adc	r21, r21
    410e:	f2 cf       	rjmp	.-28     	; 0x40f4 <__fp_split3+0xe>
    4110:	46 95       	lsr	r20
    4112:	f1 df       	rcall	.-30     	; 0x40f6 <__fp_splitA>
    4114:	08 c0       	rjmp	.+16     	; 0x4126 <__fp_splitA+0x30>
    4116:	16 16       	cp	r1, r22
    4118:	17 06       	cpc	r1, r23
    411a:	18 06       	cpc	r1, r24
    411c:	99 1f       	adc	r25, r25
    411e:	f1 cf       	rjmp	.-30     	; 0x4102 <__fp_splitA+0xc>
    4120:	86 95       	lsr	r24
    4122:	71 05       	cpc	r23, r1
    4124:	61 05       	cpc	r22, r1
    4126:	08 94       	sec
    4128:	08 95       	ret

0000412a <__fp_zero>:
    412a:	e8 94       	clt

0000412c <__fp_szero>:
    412c:	bb 27       	eor	r27, r27
    412e:	66 27       	eor	r22, r22
    4130:	77 27       	eor	r23, r23
    4132:	cb 01       	movw	r24, r22
    4134:	97 f9       	bld	r25, 7
    4136:	08 95       	ret

00004138 <_hihTwiCallback>:
    4138:	65 30       	cpi	r22, 0x05	; 5
    413a:	f1 f4       	brne	.+60     	; 0x4178 <_hihTwiCallback+0x40>
    413c:	fa 01       	movw	r30, r20
    413e:	80 81       	ld	r24, Z
    4140:	8f 73       	andi	r24, 0x3F	; 63
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	98 2f       	mov	r25, r24
    4146:	88 27       	eor	r24, r24
    4148:	21 81       	ldd	r18, Z+1	; 0x01
    414a:	82 2b       	or	r24, r18
    414c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4150:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4154:	82 81       	ldd	r24, Z+2	; 0x02
    4156:	f0 e4       	ldi	r31, 0x40	; 64
    4158:	8f 9f       	mul	r24, r31
    415a:	c0 01       	movw	r24, r0
    415c:	11 24       	eor	r1, r1
    415e:	fa 01       	movw	r30, r20
    4160:	23 81       	ldd	r18, Z+3	; 0x03
    4162:	26 95       	lsr	r18
    4164:	26 95       	lsr	r18
    4166:	82 2b       	or	r24, r18
    4168:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    416c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <_measuringIsReady>
    4176:	08 95       	ret
    4178:	64 30       	cpi	r22, 0x04	; 4
    417a:	51 f0       	breq	.+20     	; 0x4190 <_hihTwiCallback+0x58>
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	90 e4       	ldi	r25, 0x40	; 64
    4180:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4184:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4188:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    418c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4190:	08 95       	ret

00004192 <hih8120_initialise>:
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	0c e9       	ldi	r16, 0x9C	; 156
    4198:	10 e2       	ldi	r17, 0x20	; 32
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	34 e2       	ldi	r19, 0x24	; 36
    419e:	44 ef       	ldi	r20, 0xF4	; 244
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	87 e2       	ldi	r24, 0x27	; 39
    41a6:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <twiCreate>
    41aa:	90 93 9b 16 	sts	0x169B, r25	; 0x80169b <_hih8120Handler+0x1>
    41ae:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <_hih8120Handler>
    41b2:	21 e0       	ldi	r18, 0x01	; 1
    41b4:	89 2b       	or	r24, r25
    41b6:	09 f0       	breq	.+2      	; 0x41ba <hih8120_initialise+0x28>
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	82 2f       	mov	r24, r18
    41bc:	1f 91       	pop	r17
    41be:	0f 91       	pop	r16
    41c0:	08 95       	ret

000041c2 <hih8120_wakeup>:
    41c2:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <_hih8120Handler>
    41c6:	90 91 9b 16 	lds	r25, 0x169B	; 0x80169b <_hih8120Handler+0x1>
    41ca:	00 97       	sbiw	r24, 0x00	; 0
    41cc:	59 f0       	breq	.+22     	; 0x41e4 <hih8120_wakeup+0x22>
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	0e 94 4c 2c 	call	0x5898	; 0x5898 <twiTransmit>
    41d8:	84 30       	cpi	r24, 0x04	; 4
    41da:	31 f4       	brne	.+12     	; 0x41e8 <hih8120_wakeup+0x26>
    41dc:	10 92 99 16 	sts	0x1699, r1	; 0x801699 <_measuringIsReady>
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	08 95       	ret
    41e4:	82 e0       	ldi	r24, 0x02	; 2
    41e6:	08 95       	ret
    41e8:	83 e0       	ldi	r24, 0x03	; 3
    41ea:	08 95       	ret

000041ec <hih8120_measure>:
    41ec:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <_hih8120Handler>
    41f0:	90 91 9b 16 	lds	r25, 0x169B	; 0x80169b <_hih8120Handler+0x1>
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	39 f0       	breq	.+14     	; 0x4206 <hih8120_measure+0x1a>
    41f8:	64 e0       	ldi	r22, 0x04	; 4
    41fa:	0e 94 98 2c 	call	0x5930	; 0x5930 <twiReceive>
    41fe:	85 30       	cpi	r24, 0x05	; 5
    4200:	21 f0       	breq	.+8      	; 0x420a <hih8120_measure+0x1e>
    4202:	83 e0       	ldi	r24, 0x03	; 3
    4204:	08 95       	ret
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	08 95       	ret
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	08 95       	ret

0000420e <hih8120_getHumidity>:
    420e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4212:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4216:	80 e0       	ldi	r24, 0x00	; 0
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__floatunsisf>
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	48 ec       	ldi	r20, 0xC8	; 200
    4224:	52 e4       	ldi	r21, 0x42	; 66
    4226:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <__mulsf3>
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	38 ef       	ldi	r19, 0xF8	; 248
    422e:	4f e7       	ldi	r20, 0x7F	; 127
    4230:	56 e4       	ldi	r21, 0x46	; 70
    4232:	0c 94 0b 2e 	jmp	0x5c16	; 0x5c16 <__divsf3>
    4236:	08 95       	ret

00004238 <hih8120_getTemperature>:
    4238:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    423c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__floatunsisf>
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	45 e2       	ldi	r20, 0x25	; 37
    424e:	53 e4       	ldi	r21, 0x43	; 67
    4250:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <__mulsf3>
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	38 ef       	ldi	r19, 0xF8	; 248
    4258:	4f e7       	ldi	r20, 0x7F	; 127
    425a:	56 e4       	ldi	r21, 0x46	; 70
    425c:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__divsf3>
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e2       	ldi	r20, 0x20	; 32
    4266:	52 e4       	ldi	r21, 0x42	; 66
    4268:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <__subsf3>
    426c:	08 95       	ret

0000426e <_serialCallBack>:
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
    4276:	1f 92       	push	r1
    4278:	1f 92       	push	r1
    427a:	cd b7       	in	r28, 0x3d	; 61
    427c:	de b7       	in	r29, 0x3e	; 62
    427e:	8c 01       	movw	r16, r24
    4280:	19 82       	std	Y+1, r1	; 0x01
    4282:	2d c0       	rjmp	.+90     	; 0x42de <_serialCallBack+0x70>
    4284:	e0 91 d3 16 	lds	r30, 0x16D3	; 0x8016d3 <rec_buf_inp.2878>
    4288:	ec 32       	cpi	r30, 0x2C	; 44
    428a:	50 f4       	brcc	.+20     	; 0x42a0 <_serialCallBack+0x32>
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	8e 0f       	add	r24, r30
    4290:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <rec_buf_inp.2878>
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	eb 5f       	subi	r30, 0xFB	; 251
    4298:	f8 4e       	sbci	r31, 0xE8	; 232
    429a:	8a 81       	ldd	r24, Y+2	; 0x02
    429c:	80 83       	st	Z, r24
    429e:	02 c0       	rjmp	.+4      	; 0x42a4 <_serialCallBack+0x36>
    42a0:	10 92 d3 16 	sts	0x16D3, r1	; 0x8016d3 <rec_buf_inp.2878>
    42a4:	8a 81       	ldd	r24, Y+2	; 0x02
    42a6:	8a 30       	cpi	r24, 0x0A	; 10
    42a8:	d1 f4       	brne	.+52     	; 0x42de <_serialCallBack+0x70>
    42aa:	40 91 d3 16 	lds	r20, 0x16D3	; 0x8016d3 <rec_buf_inp.2878>
    42ae:	50 e0       	ldi	r21, 0x00	; 0
    42b0:	fa 01       	movw	r30, r20
    42b2:	ed 5f       	subi	r30, 0xFD	; 253
    42b4:	f8 4e       	sbci	r31, 0xE8	; 232
    42b6:	10 82       	st	Z, r1
    42b8:	41 50       	subi	r20, 0x01	; 1
    42ba:	51 09       	sbc	r21, r1
    42bc:	9e 01       	movw	r18, r28
    42be:	2f 5f       	subi	r18, 0xFF	; 255
    42c0:	3f 4f       	sbci	r19, 0xFF	; 255
    42c2:	65 e0       	ldi	r22, 0x05	; 5
    42c4:	77 e1       	ldi	r23, 0x17	; 23
    42c6:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <_serialReplyBufferHandle>
    42ca:	90 91 d7 16 	lds	r25, 0x16D7	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    42ce:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <xStreamBufferSendFromISR>
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	81 11       	cpse	r24, r1
    42d6:	0e 94 be 06 	call	0xd7c	; 0xd7c <vPortYield>
    42da:	10 92 d3 16 	sts	0x16D3, r1	; 0x8016d3 <rec_buf_inp.2878>
    42de:	be 01       	movw	r22, r28
    42e0:	6e 5f       	subi	r22, 0xFE	; 254
    42e2:	7f 4f       	sbci	r23, 0xFF	; 255
    42e4:	c8 01       	movw	r24, r16
    42e6:	04 d6       	rcall	.+3080   	; 0x4ef0 <serial_getByte>
    42e8:	88 23       	and	r24, r24
    42ea:	61 f2       	breq	.-104    	; 0x4284 <_serialCallBack+0x16>
    42ec:	0f 90       	pop	r0
    42ee:	0f 90       	pop	r0
    42f0:	df 91       	pop	r29
    42f2:	cf 91       	pop	r28
    42f4:	1f 91       	pop	r17
    42f6:	0f 91       	pop	r16
    42f8:	08 95       	ret

000042fa <_uploadMessage>:
    42fa:	0f 93       	push	r16
    42fc:	1f 93       	push	r17
    42fe:	cf 93       	push	r28
    4300:	df 93       	push	r29
    4302:	8c 01       	movw	r16, r24
    4304:	eb 01       	movw	r28, r22
    4306:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <_serialReplyBufferHandle>
    430a:	90 91 d7 16 	lds	r25, 0x16D7	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    430e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xStreamBufferReset>
    4312:	b8 01       	movw	r22, r16
    4314:	8c e9       	ldi	r24, 0x9C	; 156
    4316:	96 e1       	ldi	r25, 0x16	; 22
    4318:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <strcpy>
    431c:	20 97       	sbiw	r28, 0x00	; 0
    431e:	79 f0       	breq	.+30     	; 0x433e <_uploadMessage+0x44>
    4320:	ec e9       	ldi	r30, 0x9C	; 156
    4322:	f6 e1       	ldi	r31, 0x16	; 22
    4324:	01 90       	ld	r0, Z+
    4326:	00 20       	and	r0, r0
    4328:	e9 f7       	brne	.-6      	; 0x4324 <_uploadMessage+0x2a>
    432a:	31 97       	sbiw	r30, 0x01	; 1
    432c:	80 e2       	ldi	r24, 0x20	; 32
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	80 83       	st	Z, r24
    4334:	be 01       	movw	r22, r28
    4336:	8c e9       	ldi	r24, 0x9C	; 156
    4338:	96 e1       	ldi	r25, 0x16	; 22
    433a:	0e 94 c5 30 	call	0x618a	; 0x618a <strcat>
    433e:	ec e9       	ldi	r30, 0x9C	; 156
    4340:	f6 e1       	ldi	r31, 0x16	; 22
    4342:	df 01       	movw	r26, r30
    4344:	0d 90       	ld	r0, X+
    4346:	00 20       	and	r0, r0
    4348:	e9 f7       	brne	.-6      	; 0x4344 <_uploadMessage+0x4a>
    434a:	11 97       	sbiw	r26, 0x01	; 1
    434c:	8d e0       	ldi	r24, 0x0D	; 13
    434e:	9a e0       	ldi	r25, 0x0A	; 10
    4350:	11 96       	adiw	r26, 0x01	; 1
    4352:	9c 93       	st	X, r25
    4354:	8e 93       	st	-X, r24
    4356:	12 96       	adiw	r26, 0x02	; 2
    4358:	1c 92       	st	X, r1
    435a:	01 90       	ld	r0, Z+
    435c:	00 20       	and	r0, r0
    435e:	e9 f7       	brne	.-6      	; 0x435a <_uploadMessage+0x60>
    4360:	31 97       	sbiw	r30, 0x01	; 1
    4362:	ec 59       	subi	r30, 0x9C	; 156
    4364:	f6 41       	sbci	r31, 0x16	; 22
    4366:	ae 2f       	mov	r26, r30
    4368:	8c e9       	ldi	r24, 0x9C	; 156
    436a:	96 e1       	ldi	r25, 0x16	; 22
    436c:	ac 01       	movw	r20, r24
    436e:	6a 2f       	mov	r22, r26
    4370:	80 91 d8 16 	lds	r24, 0x16D8	; 0x8016d8 <_rn2483_serial>
    4374:	90 91 d9 16 	lds	r25, 0x16D9	; 0x8016d9 <_rn2483_serial+0x1>
    4378:	66 d5       	rcall	.+2764   	; 0x4e46 <serial_sendBytes>
    437a:	81 11       	cpse	r24, r1
    437c:	11 c0       	rjmp	.+34     	; 0x43a0 <_uploadMessage+0xa6>
    437e:	08 e2       	ldi	r16, 0x28	; 40
    4380:	15 e0       	ldi	r17, 0x05	; 5
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	4d e2       	ldi	r20, 0x2D	; 45
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	6f e5       	ldi	r22, 0x5F	; 95
    438c:	77 e1       	ldi	r23, 0x17	; 23
    438e:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <_serialReplyBufferHandle>
    4392:	90 91 d7 16 	lds	r25, 0x16D7	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    4396:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
    439a:	8f e5       	ldi	r24, 0x5F	; 95
    439c:	97 e1       	ldi	r25, 0x17	; 23
    439e:	02 c0       	rjmp	.+4      	; 0x43a4 <_uploadMessage+0xaa>
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	08 95       	ret

000043ae <_reply2ReturnCode>:
    43ae:	2f 92       	push	r2
    43b0:	3f 92       	push	r3
    43b2:	4f 92       	push	r4
    43b4:	5f 92       	push	r5
    43b6:	6f 92       	push	r6
    43b8:	7f 92       	push	r7
    43ba:	8f 92       	push	r8
    43bc:	9f 92       	push	r9
    43be:	af 92       	push	r10
    43c0:	bf 92       	push	r11
    43c2:	cf 92       	push	r12
    43c4:	df 92       	push	r13
    43c6:	ef 92       	push	r14
    43c8:	ff 92       	push	r15
    43ca:	0f 93       	push	r16
    43cc:	1f 93       	push	r17
    43ce:	cf 93       	push	r28
    43d0:	df 93       	push	r29
    43d2:	5c 01       	movw	r10, r24
    43d4:	fc 01       	movw	r30, r24
    43d6:	01 90       	ld	r0, Z+
    43d8:	00 20       	and	r0, r0
    43da:	e9 f7       	brne	.-6      	; 0x43d6 <_reply2ReturnCode+0x28>
    43dc:	31 97       	sbiw	r30, 0x01	; 1
    43de:	6f 01       	movw	r12, r30
    43e0:	c8 1a       	sub	r12, r24
    43e2:	d9 0a       	sbc	r13, r25
    43e4:	5c 2c       	mov	r5, r12
    43e6:	0f 2e       	mov	r0, r31
    43e8:	f4 e7       	ldi	r31, 0x74	; 116
    43ea:	8f 2e       	mov	r8, r31
    43ec:	f7 e0       	ldi	r31, 0x07	; 7
    43ee:	9f 2e       	mov	r9, r31
    43f0:	f0 2d       	mov	r31, r0
    43f2:	e1 2c       	mov	r14, r1
    43f4:	f1 2c       	mov	r15, r1
    43f6:	4c 2c       	mov	r4, r12
    43f8:	37 01       	movw	r6, r14
    43fa:	f4 01       	movw	r30, r8
    43fc:	01 81       	ldd	r16, Z+1	; 0x01
    43fe:	12 81       	ldd	r17, Z+2	; 0x02
    4400:	e8 01       	movw	r28, r16
    4402:	09 90       	ld	r0, Y+
    4404:	00 20       	and	r0, r0
    4406:	e9 f7       	brne	.-6      	; 0x4402 <_reply2ReturnCode+0x54>
    4408:	21 97       	sbiw	r28, 0x01	; 1
    440a:	c0 1b       	sub	r28, r16
    440c:	d1 0b       	sbc	r29, r17
    440e:	3c 2e       	mov	r3, r28
    4410:	f9 e0       	ldi	r31, 0x09	; 9
    4412:	cf 16       	cp	r12, r31
    4414:	d1 04       	cpc	r13, r1
    4416:	58 f0       	brcs	.+22     	; 0x442e <_reply2ReturnCode+0x80>
    4418:	f4 01       	movw	r30, r8
    441a:	20 80       	ld	r2, Z
    441c:	fe e0       	ldi	r31, 0x0E	; 14
    441e:	2f 12       	cpse	r2, r31
    4420:	06 c0       	rjmp	.+12     	; 0x442e <_reply2ReturnCode+0x80>
    4422:	b8 01       	movw	r22, r16
    4424:	c5 01       	movw	r24, r10
    4426:	0e 94 a0 30 	call	0x6140	; 0x6140 <strcasestr>
    442a:	89 2b       	or	r24, r25
    442c:	09 f5       	brne	.+66     	; 0x4470 <_reply2ReturnCode+0xc2>
    442e:	44 2d       	mov	r20, r4
    4430:	35 14       	cp	r3, r5
    4432:	08 f4       	brcc	.+2      	; 0x4436 <_reply2ReturnCode+0x88>
    4434:	4c 2f       	mov	r20, r28
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	b8 01       	movw	r22, r16
    443a:	c5 01       	movw	r24, r10
    443c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <strncasecmp>
    4440:	89 2b       	or	r24, r25
    4442:	49 f4       	brne	.+18     	; 0x4456 <_reply2ReturnCode+0xa8>
    4444:	f3 01       	movw	r30, r6
    4446:	ee 0f       	add	r30, r30
    4448:	ff 1f       	adc	r31, r31
    444a:	e6 0d       	add	r30, r6
    444c:	f7 1d       	adc	r31, r7
    444e:	ec 58       	subi	r30, 0x8C	; 140
    4450:	f8 4f       	sbci	r31, 0xF8	; 248
    4452:	20 80       	ld	r2, Z
    4454:	0d c0       	rjmp	.+26     	; 0x4470 <_reply2ReturnCode+0xc2>
    4456:	8f ef       	ldi	r24, 0xFF	; 255
    4458:	e8 1a       	sub	r14, r24
    445a:	f8 0a       	sbc	r15, r24
    445c:	e3 e0       	ldi	r30, 0x03	; 3
    445e:	8e 0e       	add	r8, r30
    4460:	91 1c       	adc	r9, r1
    4462:	f1 e1       	ldi	r31, 0x11	; 17
    4464:	ef 16       	cp	r14, r31
    4466:	f1 04       	cpc	r15, r1
    4468:	39 f6       	brne	.-114    	; 0x43f8 <_reply2ReturnCode+0x4a>
    446a:	68 94       	set
    446c:	22 24       	eor	r2, r2
    446e:	24 f8       	bld	r2, 4
    4470:	82 2d       	mov	r24, r2
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	ff 90       	pop	r15
    447c:	ef 90       	pop	r14
    447e:	df 90       	pop	r13
    4480:	cf 90       	pop	r12
    4482:	bf 90       	pop	r11
    4484:	af 90       	pop	r10
    4486:	9f 90       	pop	r9
    4488:	8f 90       	pop	r8
    448a:	7f 90       	pop	r7
    448c:	6f 90       	pop	r6
    448e:	5f 90       	pop	r5
    4490:	4f 90       	pop	r4
    4492:	3f 90       	pop	r3
    4494:	2f 90       	pop	r2
    4496:	08 95       	ret

00004498 <_uploadMessageRc>:
    4498:	30 df       	rcall	.-416    	; 0x42fa <_uploadMessage>
    449a:	89 cf       	rjmp	.-238    	; 0x43ae <_reply2ReturnCode>
    449c:	08 95       	ret

0000449e <lora_driver_flushBuffers>:
    449e:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <_serialReplyBufferHandle>
    44a2:	90 91 d7 16 	lds	r25, 0x16D7	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    44a6:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <xStreamBufferReset>
    44aa:	08 95       	ret

000044ac <lora_driver_initialise>:
    44ac:	8f 92       	push	r8
    44ae:	9f 92       	push	r9
    44b0:	af 92       	push	r10
    44b2:	cf 92       	push	r12
    44b4:	ef 92       	push	r14
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	cf 93       	push	r28
    44bc:	c8 2f       	mov	r28, r24
    44be:	8b 01       	movw	r16, r22
    44c0:	41 e0       	ldi	r20, 0x01	; 1
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	70 e0       	ldi	r23, 0x00	; 0
    44c6:	88 ec       	ldi	r24, 0xC8	; 200
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	0e 94 42 0c 	call	0x1884	; 0x1884 <xStreamBufferGenericCreate>
    44ce:	90 93 d7 16 	sts	0x16D7, r25	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    44d2:	80 93 d6 16 	sts	0x16D6, r24	; 0x8016d6 <_serialReplyBufferHandle>
    44d6:	10 93 d5 16 	sts	0x16D5, r17	; 0x8016d5 <_downlinkMessageBuffer+0x1>
    44da:	00 93 d4 16 	sts	0x16D4, r16	; 0x8016d4 <_downlinkMessageBuffer>
    44de:	0f 2e       	mov	r0, r31
    44e0:	f7 e3       	ldi	r31, 0x37	; 55
    44e2:	8f 2e       	mov	r8, r31
    44e4:	f1 e2       	ldi	r31, 0x21	; 33
    44e6:	9f 2e       	mov	r9, r31
    44e8:	f0 2d       	mov	r31, r0
    44ea:	68 94       	set
    44ec:	aa 24       	eor	r10, r10
    44ee:	a6 f8       	bld	r10, 6
    44f0:	68 94       	set
    44f2:	cc 24       	eor	r12, r12
    44f4:	c6 f8       	bld	r12, 6
    44f6:	e1 2c       	mov	r14, r1
    44f8:	00 e0       	ldi	r16, 0x00	; 0
    44fa:	23 e0       	ldi	r18, 0x03	; 3
    44fc:	40 e0       	ldi	r20, 0x00	; 0
    44fe:	51 ee       	ldi	r21, 0xE1	; 225
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	70 e0       	ldi	r23, 0x00	; 0
    4504:	8c 2f       	mov	r24, r28
    4506:	d2 d3       	rcall	.+1956   	; 0x4cac <serial_create>
    4508:	90 93 d9 16 	sts	0x16D9, r25	; 0x8016d9 <_rn2483_serial+0x1>
    450c:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <_rn2483_serial>
    4510:	e7 e0       	ldi	r30, 0x07	; 7
    4512:	f1 e0       	ldi	r31, 0x01	; 1
    4514:	80 81       	ld	r24, Z
    4516:	80 61       	ori	r24, 0x10	; 16
    4518:	80 83       	st	Z, r24
    451a:	cf 91       	pop	r28
    451c:	1f 91       	pop	r17
    451e:	0f 91       	pop	r16
    4520:	ef 90       	pop	r14
    4522:	cf 90       	pop	r12
    4524:	af 90       	pop	r10
    4526:	9f 90       	pop	r9
    4528:	8f 90       	pop	r8
    452a:	08 95       	ret

0000452c <lora_driver_resetRn2483>:
    452c:	88 23       	and	r24, r24
    452e:	31 f0       	breq	.+12     	; 0x453c <lora_driver_resetRn2483+0x10>
    4530:	e8 e0       	ldi	r30, 0x08	; 8
    4532:	f1 e0       	ldi	r31, 0x01	; 1
    4534:	80 81       	ld	r24, Z
    4536:	8f 7e       	andi	r24, 0xEF	; 239
    4538:	80 83       	st	Z, r24
    453a:	08 95       	ret
    453c:	e8 e0       	ldi	r30, 0x08	; 8
    453e:	f1 e0       	ldi	r31, 0x01	; 1
    4540:	80 81       	ld	r24, Z
    4542:	80 61       	ori	r24, 0x10	; 16
    4544:	80 83       	st	Z, r24
    4546:	08 95       	ret

00004548 <lora_driver_rn2483FactoryReset>:
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	8a ef       	ldi	r24, 0xFA	; 250
    454e:	94 e0       	ldi	r25, 0x04	; 4
    4550:	d4 de       	rcall	.-600    	; 0x42fa <_uploadMessage>
    4552:	ef e5       	ldi	r30, 0x5F	; 95
    4554:	f7 e1       	ldi	r31, 0x17	; 23
    4556:	01 90       	ld	r0, Z+
    4558:	00 20       	and	r0, r0
    455a:	e9 f7       	brne	.-6      	; 0x4556 <lora_driver_rn2483FactoryReset+0xe>
    455c:	31 97       	sbiw	r30, 0x01	; 1
    455e:	ef 55       	subi	r30, 0x5F	; 95
    4560:	f7 41       	sbci	r31, 0x17	; 23
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	75 97       	sbiw	r30, 0x15	; 21
    4566:	08 f0       	brcs	.+2      	; 0x456a <lora_driver_rn2483FactoryReset+0x22>
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	08 95       	ret

0000456c <lora_driver_getRn2483Hweui>:
    456c:	cf 93       	push	r28
    456e:	df 93       	push	r29
    4570:	ec 01       	movw	r28, r24
    4572:	60 e0       	ldi	r22, 0x00	; 0
    4574:	70 e0       	ldi	r23, 0x00	; 0
    4576:	8b e0       	ldi	r24, 0x0B	; 11
    4578:	95 e0       	ldi	r25, 0x05	; 5
    457a:	bf de       	rcall	.-642    	; 0x42fa <_uploadMessage>
    457c:	ef e5       	ldi	r30, 0x5F	; 95
    457e:	f7 e1       	ldi	r31, 0x17	; 23
    4580:	01 90       	ld	r0, Z+
    4582:	00 20       	and	r0, r0
    4584:	e9 f7       	brne	.-6      	; 0x4580 <lora_driver_getRn2483Hweui+0x14>
    4586:	e0 57       	subi	r30, 0x70	; 112
    4588:	f7 41       	sbci	r31, 0x17	; 23
    458a:	39 f4       	brne	.+14     	; 0x459a <lora_driver_getRn2483Hweui+0x2e>
    458c:	6f e5       	ldi	r22, 0x5F	; 95
    458e:	77 e1       	ldi	r23, 0x17	; 23
    4590:	ce 01       	movw	r24, r28
    4592:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <strcpy>
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	02 c0       	rjmp	.+4      	; 0x459e <lora_driver_getRn2483Hweui+0x32>
    459a:	18 82       	st	Y, r1
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	df 91       	pop	r29
    45a0:	cf 91       	pop	r28
    45a2:	08 95       	ret

000045a4 <lora_driver_setDeviceIdentifier>:
    45a4:	fc 01       	movw	r30, r24
    45a6:	01 90       	ld	r0, Z+
    45a8:	00 20       	and	r0, r0
    45aa:	e9 f7       	brne	.-6      	; 0x45a6 <lora_driver_setDeviceIdentifier+0x2>
    45ac:	9f 01       	movw	r18, r30
    45ae:	21 51       	subi	r18, 0x11	; 17
    45b0:	31 09       	sbc	r19, r1
    45b2:	28 17       	cp	r18, r24
    45b4:	39 07       	cpc	r19, r25
    45b6:	29 f4       	brne	.+10     	; 0x45c2 <lora_driver_setDeviceIdentifier+0x1e>
    45b8:	bc 01       	movw	r22, r24
    45ba:	89 e3       	ldi	r24, 0x39	; 57
    45bc:	95 e0       	ldi	r25, 0x05	; 5
    45be:	6c cf       	rjmp	.-296    	; 0x4498 <_uploadMessageRc>
    45c0:	08 95       	ret
    45c2:	89 e0       	ldi	r24, 0x09	; 9
    45c4:	08 95       	ret

000045c6 <lora_driver_setApplicationIdentifier>:
    45c6:	fc 01       	movw	r30, r24
    45c8:	01 90       	ld	r0, Z+
    45ca:	00 20       	and	r0, r0
    45cc:	e9 f7       	brne	.-6      	; 0x45c8 <lora_driver_setApplicationIdentifier+0x2>
    45ce:	9f 01       	movw	r18, r30
    45d0:	21 51       	subi	r18, 0x11	; 17
    45d2:	31 09       	sbc	r19, r1
    45d4:	28 17       	cp	r18, r24
    45d6:	39 07       	cpc	r19, r25
    45d8:	29 f4       	brne	.+10     	; 0x45e4 <lora_driver_setApplicationIdentifier+0x1e>
    45da:	bc 01       	movw	r22, r24
    45dc:	88 e4       	ldi	r24, 0x48	; 72
    45de:	95 e0       	ldi	r25, 0x05	; 5
    45e0:	5b cf       	rjmp	.-330    	; 0x4498 <_uploadMessageRc>
    45e2:	08 95       	ret
    45e4:	89 e0       	ldi	r24, 0x09	; 9
    45e6:	08 95       	ret

000045e8 <lora_driver_setApplicationKey>:
    45e8:	fc 01       	movw	r30, r24
    45ea:	01 90       	ld	r0, Z+
    45ec:	00 20       	and	r0, r0
    45ee:	e9 f7       	brne	.-6      	; 0x45ea <lora_driver_setApplicationKey+0x2>
    45f0:	9f 01       	movw	r18, r30
    45f2:	21 52       	subi	r18, 0x21	; 33
    45f4:	31 09       	sbc	r19, r1
    45f6:	28 17       	cp	r18, r24
    45f8:	39 07       	cpc	r19, r25
    45fa:	29 f4       	brne	.+10     	; 0x4606 <lora_driver_setApplicationKey+0x1e>
    45fc:	bc 01       	movw	r22, r24
    45fe:	87 e5       	ldi	r24, 0x57	; 87
    4600:	95 e0       	ldi	r25, 0x05	; 5
    4602:	4a cf       	rjmp	.-364    	; 0x4498 <_uploadMessageRc>
    4604:	08 95       	ret
    4606:	89 e0       	ldi	r24, 0x09	; 9
    4608:	08 95       	ret

0000460a <lora_driver_saveMac>:
    460a:	60 e0       	ldi	r22, 0x00	; 0
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	86 e9       	ldi	r24, 0x96	; 150
    4610:	95 e0       	ldi	r25, 0x05	; 5
    4612:	42 cf       	rjmp	.-380    	; 0x4498 <_uploadMessageRc>
    4614:	08 95       	ret

00004616 <lora_driver_join>:
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	e8 2f       	mov	r30, r24
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	ee 0f       	add	r30, r30
    4620:	ff 1f       	adc	r31, r31
    4622:	e0 59       	subi	r30, 0x90	; 144
    4624:	f8 4f       	sbci	r31, 0xF8	; 248
    4626:	60 81       	ld	r22, Z
    4628:	71 81       	ldd	r23, Z+1	; 0x01
    462a:	8f e9       	ldi	r24, 0x9F	; 159
    462c:	95 e0       	ldi	r25, 0x05	; 5
    462e:	34 df       	rcall	.-408    	; 0x4498 <_uploadMessageRc>
    4630:	81 11       	cpse	r24, r1
    4632:	14 c0       	rjmp	.+40     	; 0x465c <lora_driver_join+0x46>
    4634:	08 e2       	ldi	r16, 0x28	; 40
    4636:	15 e0       	ldi	r17, 0x05	; 5
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	4d e2       	ldi	r20, 0x2D	; 45
    463e:	50 e0       	ldi	r21, 0x00	; 0
    4640:	6f e5       	ldi	r22, 0x5F	; 95
    4642:	77 e1       	ldi	r23, 0x17	; 23
    4644:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <_serialReplyBufferHandle>
    4648:	90 91 d7 16 	lds	r25, 0x16D7	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    464c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
    4650:	88 23       	and	r24, r24
    4652:	21 f0       	breq	.+8      	; 0x465c <lora_driver_join+0x46>
    4654:	8f e5       	ldi	r24, 0x5F	; 95
    4656:	97 e1       	ldi	r25, 0x17	; 23
    4658:	aa de       	rcall	.-684    	; 0x43ae <_reply2ReturnCode>
    465a:	03 c0       	rjmp	.+6      	; 0x4662 <lora_driver_join+0x4c>
    465c:	8f e5       	ldi	r24, 0x5F	; 95
    465e:	97 e1       	ldi	r25, 0x17	; 23
    4660:	a6 de       	rcall	.-692    	; 0x43ae <_reply2ReturnCode>
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	08 95       	ret

00004668 <lora_driver_sendUploadMessage>:
    4668:	0f 93       	push	r16
    466a:	1f 93       	push	r17
    466c:	cf 93       	push	r28
    466e:	df 93       	push	r29
    4670:	1f 92       	push	r1
    4672:	cd b7       	in	r28, 0x3d	; 61
    4674:	de b7       	in	r29, 0x3e	; 62
    4676:	db 01       	movw	r26, r22
    4678:	11 96       	adiw	r26, 0x01	; 1
    467a:	9c 91       	ld	r25, X
    467c:	11 97       	sbiw	r26, 0x01	; 1
    467e:	95 31       	cpi	r25, 0x15	; 21
    4680:	08 f0       	brcs	.+2      	; 0x4684 <lora_driver_sendUploadMessage+0x1c>
    4682:	b4 c0       	rjmp	.+360    	; 0x47ec <lora_driver_sendUploadMessage+0x184>
    4684:	99 23       	and	r25, r25
    4686:	81 f1       	breq	.+96     	; 0x46e8 <lora_driver_sendUploadMessage+0x80>
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	70 e0       	ldi	r23, 0x00	; 0
    468c:	27 2f       	mov	r18, r23
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	46 2f       	mov	r20, r22
    4692:	50 e0       	ldi	r21, 0x00	; 0
    4694:	fd 01       	movw	r30, r26
    4696:	e4 0f       	add	r30, r20
    4698:	f5 1f       	adc	r31, r21
    469a:	92 81       	ldd	r25, Z+2	; 0x02
    469c:	92 95       	swap	r25
    469e:	9f 70       	andi	r25, 0x0F	; 15
    46a0:	9a 30       	cpi	r25, 0x0A	; 10
    46a2:	10 f0       	brcs	.+4      	; 0x46a8 <lora_driver_sendUploadMessage+0x40>
    46a4:	99 5c       	subi	r25, 0xC9	; 201
    46a6:	01 c0       	rjmp	.+2      	; 0x46aa <lora_driver_sendUploadMessage+0x42>
    46a8:	90 5d       	subi	r25, 0xD0	; 208
    46aa:	f9 01       	movw	r30, r18
    46ac:	e0 51       	subi	r30, 0x10	; 16
    46ae:	f9 4e       	sbci	r31, 0xE9	; 233
    46b0:	90 83       	st	Z, r25
    46b2:	2f 5f       	subi	r18, 0xFF	; 255
    46b4:	3f 4f       	sbci	r19, 0xFF	; 255
    46b6:	fd 01       	movw	r30, r26
    46b8:	e4 0f       	add	r30, r20
    46ba:	f5 1f       	adc	r31, r21
    46bc:	92 81       	ldd	r25, Z+2	; 0x02
    46be:	9f 70       	andi	r25, 0x0F	; 15
    46c0:	49 2f       	mov	r20, r25
    46c2:	50 e0       	ldi	r21, 0x00	; 0
    46c4:	4a 30       	cpi	r20, 0x0A	; 10
    46c6:	51 05       	cpc	r21, r1
    46c8:	14 f0       	brlt	.+4      	; 0x46ce <lora_driver_sendUploadMessage+0x66>
    46ca:	99 5c       	subi	r25, 0xC9	; 201
    46cc:	01 c0       	rjmp	.+2      	; 0x46d0 <lora_driver_sendUploadMessage+0x68>
    46ce:	90 5d       	subi	r25, 0xD0	; 208
    46d0:	f9 01       	movw	r30, r18
    46d2:	e0 51       	subi	r30, 0x10	; 16
    46d4:	f9 4e       	sbci	r31, 0xE9	; 233
    46d6:	90 83       	st	Z, r25
    46d8:	7e 5f       	subi	r23, 0xFE	; 254
    46da:	6f 5f       	subi	r22, 0xFF	; 255
    46dc:	11 96       	adiw	r26, 0x01	; 1
    46de:	9c 91       	ld	r25, X
    46e0:	11 97       	sbiw	r26, 0x01	; 1
    46e2:	69 17       	cp	r22, r25
    46e4:	98 f2       	brcs	.-90     	; 0x468c <lora_driver_sendUploadMessage+0x24>
    46e6:	01 c0       	rjmp	.+2      	; 0x46ea <lora_driver_sendUploadMessage+0x82>
    46e8:	70 e0       	ldi	r23, 0x00	; 0
    46ea:	e7 2f       	mov	r30, r23
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	e0 51       	subi	r30, 0x10	; 16
    46f0:	f9 4e       	sbci	r31, 0xE9	; 233
    46f2:	10 82       	st	Z, r1
    46f4:	4c 91       	ld	r20, X
    46f6:	81 11       	cpse	r24, r1
    46f8:	03 c0       	rjmp	.+6      	; 0x4700 <lora_driver_sendUploadMessage+0x98>
    46fa:	88 ea       	ldi	r24, 0xA8	; 168
    46fc:	95 e0       	ldi	r25, 0x05	; 5
    46fe:	02 c0       	rjmp	.+4      	; 0x4704 <lora_driver_sendUploadMessage+0x9c>
    4700:	8a ea       	ldi	r24, 0xAA	; 170
    4702:	95 e0       	ldi	r25, 0x05	; 5
    4704:	20 ef       	ldi	r18, 0xF0	; 240
    4706:	36 e1       	ldi	r19, 0x16	; 22
    4708:	3f 93       	push	r19
    470a:	2f 93       	push	r18
    470c:	1f 92       	push	r1
    470e:	4f 93       	push	r20
    4710:	9f 93       	push	r25
    4712:	8f 93       	push	r24
    4714:	8e ea       	ldi	r24, 0xAE	; 174
    4716:	95 e0       	ldi	r25, 0x05	; 5
    4718:	9f 93       	push	r25
    471a:	8f 93       	push	r24
    471c:	82 e3       	ldi	r24, 0x32	; 50
    471e:	97 e1       	ldi	r25, 0x17	; 23
    4720:	9f 93       	push	r25
    4722:	8f 93       	push	r24
    4724:	0e 94 32 31 	call	0x6264	; 0x6264 <sprintf>
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	70 e0       	ldi	r23, 0x00	; 0
    472c:	82 e3       	ldi	r24, 0x32	; 50
    472e:	97 e1       	ldi	r25, 0x17	; 23
    4730:	b3 de       	rcall	.-666    	; 0x4498 <_uploadMessageRc>
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	81 11       	cpse	r24, r1
    473e:	59 c0       	rjmp	.+178    	; 0x47f2 <lora_driver_sendUploadMessage+0x18a>
    4740:	08 e2       	ldi	r16, 0x28	; 40
    4742:	15 e0       	ldi	r17, 0x05	; 5
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	4d e2       	ldi	r20, 0x2D	; 45
    474a:	50 e0       	ldi	r21, 0x00	; 0
    474c:	6f e5       	ldi	r22, 0x5F	; 95
    474e:	77 e1       	ldi	r23, 0x17	; 23
    4750:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <_serialReplyBufferHandle>
    4754:	90 91 d7 16 	lds	r25, 0x16D7	; 0x8016d7 <_serialReplyBufferHandle+0x1>
    4758:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <xStreamBufferReceive>
    475c:	88 23       	and	r24, r24
    475e:	09 f4       	brne	.+2      	; 0x4762 <lora_driver_sendUploadMessage+0xfa>
    4760:	47 c0       	rjmp	.+142    	; 0x47f0 <lora_driver_sendUploadMessage+0x188>
    4762:	8f e5       	ldi	r24, 0x5F	; 95
    4764:	97 e1       	ldi	r25, 0x17	; 23
    4766:	23 de       	rcall	.-954    	; 0x43ae <_reply2ReturnCode>
    4768:	8e 30       	cpi	r24, 0x0E	; 14
    476a:	09 f0       	breq	.+2      	; 0x476e <lora_driver_sendUploadMessage+0x106>
    476c:	42 c0       	rjmp	.+132    	; 0x47f2 <lora_driver_sendUploadMessage+0x18a>
    476e:	87 e0       	ldi	r24, 0x07	; 7
    4770:	89 83       	std	Y+1, r24	; 0x01
    4772:	80 91 d4 16 	lds	r24, 0x16D4	; 0x8016d4 <_downlinkMessageBuffer>
    4776:	90 91 d5 16 	lds	r25, 0x16D5	; 0x8016d5 <_downlinkMessageBuffer+0x1>
    477a:	89 2b       	or	r24, r25
    477c:	a9 f1       	breq	.+106    	; 0x47e8 <lora_driver_sendUploadMessage+0x180>
    477e:	be 01       	movw	r22, r28
    4780:	6f 5f       	subi	r22, 0xFF	; 255
    4782:	7f 4f       	sbci	r23, 0xFF	; 255
    4784:	8f e5       	ldi	r24, 0x5F	; 95
    4786:	97 e1       	ldi	r25, 0x17	; 23
    4788:	68 d1       	rcall	.+720    	; 0x4a5a <decode_port_no>
    478a:	80 93 da 16 	sts	0x16DA, r24	; 0x8016da <_downlinkPayload>
    478e:	e9 81       	ldd	r30, Y+1	; 0x01
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	e1 5a       	subi	r30, 0xA1	; 161
    4794:	f8 4e       	sbci	r31, 0xE8	; 232
    4796:	df 01       	movw	r26, r30
    4798:	0d 90       	ld	r0, X+
    479a:	00 20       	and	r0, r0
    479c:	e9 f7       	brne	.-6      	; 0x4798 <lora_driver_sendUploadMessage+0x130>
    479e:	11 97       	sbiw	r26, 0x01	; 1
    47a0:	ae 1b       	sub	r26, r30
    47a2:	bf 0b       	sbc	r27, r31
    47a4:	aa 23       	and	r26, r26
    47a6:	91 f0       	breq	.+36     	; 0x47cc <lora_driver_sendUploadMessage+0x164>
    47a8:	bb 27       	eor	r27, r27
    47aa:	cd 01       	movw	r24, r26
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	9c 01       	movw	r18, r24
    47b0:	12 f4       	brpl	.+4      	; 0x47b6 <lora_driver_sendUploadMessage+0x14e>
    47b2:	2f 5f       	subi	r18, 0xFF	; 255
    47b4:	3f 4f       	sbci	r19, 0xFF	; 255
    47b6:	35 95       	asr	r19
    47b8:	27 95       	ror	r18
    47ba:	20 93 db 16 	sts	0x16DB, r18	; 0x8016db <_downlinkPayload+0x1>
    47be:	af 01       	movw	r20, r30
    47c0:	4f 5f       	subi	r20, 0xFF	; 255
    47c2:	5f 4f       	sbci	r21, 0xFF	; 255
    47c4:	64 e1       	ldi	r22, 0x14	; 20
    47c6:	8c ed       	ldi	r24, 0xDC	; 220
    47c8:	96 e1       	ldi	r25, 0x16	; 22
    47ca:	73 d1       	rcall	.+742    	; 0x4ab2 <decode_hexadecimal_string_bytes>
    47cc:	01 e0       	ldi	r16, 0x01	; 1
    47ce:	10 e0       	ldi	r17, 0x00	; 0
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	46 e1       	ldi	r20, 0x16	; 22
    47d6:	50 e0       	ldi	r21, 0x00	; 0
    47d8:	6a ed       	ldi	r22, 0xDA	; 218
    47da:	76 e1       	ldi	r23, 0x16	; 22
    47dc:	80 91 d4 16 	lds	r24, 0x16D4	; 0x8016d4 <_downlinkMessageBuffer>
    47e0:	90 91 d5 16 	lds	r25, 0x16D5	; 0x8016d5 <_downlinkMessageBuffer+0x1>
    47e4:	0e 94 a4 0c 	call	0x1948	; 0x1948 <xStreamBufferSend>
    47e8:	8e e0       	ldi	r24, 0x0E	; 14
    47ea:	03 c0       	rjmp	.+6      	; 0x47f2 <lora_driver_sendUploadMessage+0x18a>
    47ec:	84 e1       	ldi	r24, 0x14	; 20
    47ee:	01 c0       	rjmp	.+2      	; 0x47f2 <lora_driver_sendUploadMessage+0x18a>
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	0f 90       	pop	r0
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	08 95       	ret

000047fe <lora_driver_setAdaptiveDataRate>:
    47fe:	81 30       	cpi	r24, 0x01	; 1
    4800:	19 f0       	breq	.+6      	; 0x4808 <lora_driver_setAdaptiveDataRate+0xa>
    4802:	6e eb       	ldi	r22, 0xBE	; 190
    4804:	75 e0       	ldi	r23, 0x05	; 5
    4806:	02 c0       	rjmp	.+4      	; 0x480c <lora_driver_setAdaptiveDataRate+0xe>
    4808:	67 e9       	ldi	r22, 0x97	; 151
    480a:	76 e0       	ldi	r23, 0x06	; 6
    480c:	82 ec       	ldi	r24, 0xC2	; 194
    480e:	95 e0       	ldi	r25, 0x05	; 5
    4810:	43 ce       	rjmp	.-890    	; 0x4498 <_uploadMessageRc>
    4812:	08 95       	ret

00004814 <lora_driver_setReceiveDelay>:
    4814:	9f 93       	push	r25
    4816:	8f 93       	push	r24
    4818:	83 ef       	ldi	r24, 0xF3	; 243
    481a:	95 e0       	ldi	r25, 0x05	; 5
    481c:	9f 93       	push	r25
    481e:	8f 93       	push	r24
    4820:	82 e3       	ldi	r24, 0x32	; 50
    4822:	97 e1       	ldi	r25, 0x17	; 23
    4824:	9f 93       	push	r25
    4826:	8f 93       	push	r24
    4828:	0e 94 32 31 	call	0x6264	; 0x6264 <sprintf>
    482c:	60 e0       	ldi	r22, 0x00	; 0
    482e:	70 e0       	ldi	r23, 0x00	; 0
    4830:	82 e3       	ldi	r24, 0x32	; 50
    4832:	97 e1       	ldi	r25, 0x17	; 23
    4834:	31 de       	rcall	.-926    	; 0x4498 <_uploadMessageRc>
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	08 95       	ret

00004844 <lora_driver_configureToEu868>:
    4844:	2f 92       	push	r2
    4846:	3f 92       	push	r3
    4848:	4f 92       	push	r4
    484a:	5f 92       	push	r5
    484c:	6f 92       	push	r6
    484e:	7f 92       	push	r7
    4850:	8f 92       	push	r8
    4852:	9f 92       	push	r9
    4854:	af 92       	push	r10
    4856:	bf 92       	push	r11
    4858:	cf 92       	push	r12
    485a:	df 92       	push	r13
    485c:	ef 92       	push	r14
    485e:	ff 92       	push	r15
    4860:	0f 93       	push	r16
    4862:	1f 93       	push	r17
    4864:	cf 93       	push	r28
    4866:	df 93       	push	r29
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
    486c:	a0 97       	sbiw	r28, 0x20	; 32
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	60 e2       	ldi	r22, 0x20	; 32
    487a:	76 e0       	ldi	r23, 0x06	; 6
    487c:	8c e2       	ldi	r24, 0x2C	; 44
    487e:	96 e0       	ldi	r25, 0x06	; 6
    4880:	3c dd       	rcall	.-1416   	; 0x42fa <_uploadMessage>
    4882:	95 dd       	rcall	.-1238   	; 0x43ae <_reply2ReturnCode>
    4884:	81 11       	cpse	r24, r1
    4886:	a3 c0       	rjmp	.+326    	; 0x49ce <lora_driver_configureToEu868+0x18a>
    4888:	80 e2       	ldi	r24, 0x20	; 32
    488a:	e2 e2       	ldi	r30, 0x22	; 34
    488c:	f2 e0       	ldi	r31, 0x02	; 2
    488e:	de 01       	movw	r26, r28
    4890:	11 96       	adiw	r26, 0x01	; 1
    4892:	01 90       	ld	r0, Z+
    4894:	0d 92       	st	X+, r0
    4896:	8a 95       	dec	r24
    4898:	e1 f7       	brne	.-8      	; 0x4892 <lora_driver_configureToEu868+0x4e>
    489a:	9e 01       	movw	r18, r28
    489c:	2f 5f       	subi	r18, 0xFF	; 255
    489e:	3f 4f       	sbci	r19, 0xFF	; 255
    48a0:	69 01       	movw	r12, r18
    48a2:	e1 2c       	mov	r14, r1
    48a4:	f1 2c       	mov	r15, r1
    48a6:	0f 2e       	mov	r0, r31
    48a8:	f8 e3       	ldi	r31, 0x38	; 56
    48aa:	af 2e       	mov	r10, r31
    48ac:	f6 e0       	ldi	r31, 0x06	; 6
    48ae:	bf 2e       	mov	r11, r31
    48b0:	f0 2d       	mov	r31, r0
    48b2:	02 e3       	ldi	r16, 0x32	; 50
    48b4:	17 e1       	ldi	r17, 0x17	; 23
    48b6:	0f 2e       	mov	r0, r31
    48b8:	f1 e5       	ldi	r31, 0x51	; 81
    48ba:	4f 2e       	mov	r4, r31
    48bc:	f6 e0       	ldi	r31, 0x06	; 6
    48be:	5f 2e       	mov	r5, r31
    48c0:	f0 2d       	mov	r31, r0
    48c2:	0f 2e       	mov	r0, r31
    48c4:	f8 e6       	ldi	r31, 0x68	; 104
    48c6:	8f 2e       	mov	r8, r31
    48c8:	f6 e0       	ldi	r31, 0x06	; 6
    48ca:	9f 2e       	mov	r9, r31
    48cc:	f0 2d       	mov	r31, r0
    48ce:	0f 2e       	mov	r0, r31
    48d0:	f2 e8       	ldi	r31, 0x82	; 130
    48d2:	6f 2e       	mov	r6, r31
    48d4:	f6 e0       	ldi	r31, 0x06	; 6
    48d6:	7f 2e       	mov	r7, r31
    48d8:	f0 2d       	mov	r31, r0
    48da:	3e 2c       	mov	r3, r14
    48dc:	2f 2c       	mov	r2, r15
    48de:	ff 92       	push	r15
    48e0:	ef 92       	push	r14
    48e2:	bf 92       	push	r11
    48e4:	af 92       	push	r10
    48e6:	1f 93       	push	r17
    48e8:	0f 93       	push	r16
    48ea:	0e 94 32 31 	call	0x6264	; 0x6264 <sprintf>
    48ee:	60 e0       	ldi	r22, 0x00	; 0
    48f0:	70 e0       	ldi	r23, 0x00	; 0
    48f2:	c8 01       	movw	r24, r16
    48f4:	02 dd       	rcall	.-1532   	; 0x42fa <_uploadMessage>
    48f6:	5b dd       	rcall	.-1354   	; 0x43ae <_reply2ReturnCode>
    48f8:	0f 90       	pop	r0
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	81 11       	cpse	r24, r1
    4906:	63 c0       	rjmp	.+198    	; 0x49ce <lora_driver_configureToEu868+0x18a>
    4908:	32 e0       	ldi	r19, 0x02	; 2
    490a:	3e 15       	cp	r19, r14
    490c:	e8 f4       	brcc	.+58     	; 0x4948 <lora_driver_configureToEu868+0x104>
    490e:	f6 01       	movw	r30, r12
    4910:	83 81       	ldd	r24, Z+3	; 0x03
    4912:	8f 93       	push	r24
    4914:	82 81       	ldd	r24, Z+2	; 0x02
    4916:	8f 93       	push	r24
    4918:	81 81       	ldd	r24, Z+1	; 0x01
    491a:	8f 93       	push	r24
    491c:	80 81       	ld	r24, Z
    491e:	8f 93       	push	r24
    4920:	ff 92       	push	r15
    4922:	ef 92       	push	r14
    4924:	5f 92       	push	r5
    4926:	4f 92       	push	r4
    4928:	1f 93       	push	r17
    492a:	0f 93       	push	r16
    492c:	0e 94 32 31 	call	0x6264	; 0x6264 <sprintf>
    4930:	60 e0       	ldi	r22, 0x00	; 0
    4932:	70 e0       	ldi	r23, 0x00	; 0
    4934:	c8 01       	movw	r24, r16
    4936:	e1 dc       	rcall	.-1598   	; 0x42fa <_uploadMessage>
    4938:	3a dd       	rcall	.-1420   	; 0x43ae <_reply2ReturnCode>
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	f8 94       	cli
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	cd bf       	out	0x3d, r28	; 61
    4944:	81 11       	cpse	r24, r1
    4946:	43 c0       	rjmp	.+134    	; 0x49ce <lora_driver_configureToEu868+0x18a>
    4948:	2f 92       	push	r2
    494a:	3f 92       	push	r3
    494c:	9f 92       	push	r9
    494e:	8f 92       	push	r8
    4950:	1f 93       	push	r17
    4952:	0f 93       	push	r16
    4954:	0e 94 32 31 	call	0x6264	; 0x6264 <sprintf>
    4958:	60 e0       	ldi	r22, 0x00	; 0
    495a:	70 e0       	ldi	r23, 0x00	; 0
    495c:	c8 01       	movw	r24, r16
    495e:	cd dc       	rcall	.-1638   	; 0x42fa <_uploadMessage>
    4960:	26 dd       	rcall	.-1460   	; 0x43ae <_reply2ReturnCode>
    4962:	0f 90       	pop	r0
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
    496c:	0f 90       	pop	r0
    496e:	81 11       	cpse	r24, r1
    4970:	2e c0       	rjmp	.+92     	; 0x49ce <lora_driver_configureToEu868+0x18a>
    4972:	2f 92       	push	r2
    4974:	3f 92       	push	r3
    4976:	7f 92       	push	r7
    4978:	6f 92       	push	r6
    497a:	1f 93       	push	r17
    497c:	0f 93       	push	r16
    497e:	0e 94 32 31 	call	0x6264	; 0x6264 <sprintf>
    4982:	60 e0       	ldi	r22, 0x00	; 0
    4984:	70 e0       	ldi	r23, 0x00	; 0
    4986:	c8 01       	movw	r24, r16
    4988:	b8 dc       	rcall	.-1680   	; 0x42fa <_uploadMessage>
    498a:	11 dd       	rcall	.-1502   	; 0x43ae <_reply2ReturnCode>
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	0f 90       	pop	r0
    4996:	0f 90       	pop	r0
    4998:	81 11       	cpse	r24, r1
    499a:	19 c0       	rjmp	.+50     	; 0x49ce <lora_driver_configureToEu868+0x18a>
    499c:	3f ef       	ldi	r19, 0xFF	; 255
    499e:	e3 1a       	sub	r14, r19
    49a0:	f3 0a       	sbc	r15, r19
    49a2:	84 e0       	ldi	r24, 0x04	; 4
    49a4:	c8 0e       	add	r12, r24
    49a6:	d1 1c       	adc	r13, r1
    49a8:	98 e0       	ldi	r25, 0x08	; 8
    49aa:	e9 16       	cp	r14, r25
    49ac:	f1 04       	cpc	r15, r1
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <lora_driver_configureToEu868+0x16e>
    49b0:	94 cf       	rjmp	.-216    	; 0x48da <lora_driver_configureToEu868+0x96>
    49b2:	60 e0       	ldi	r22, 0x00	; 0
    49b4:	70 e0       	ldi	r23, 0x00	; 0
    49b6:	8a e9       	ldi	r24, 0x9A	; 154
    49b8:	96 e0       	ldi	r25, 0x06	; 6
    49ba:	9f dc       	rcall	.-1730   	; 0x42fa <_uploadMessage>
    49bc:	f8 dc       	rcall	.-1552   	; 0x43ae <_reply2ReturnCode>
    49be:	81 11       	cpse	r24, r1
    49c0:	06 c0       	rjmp	.+12     	; 0x49ce <lora_driver_configureToEu868+0x18a>
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	70 e0       	ldi	r23, 0x00	; 0
    49c6:	8b ea       	ldi	r24, 0xAB	; 171
    49c8:	96 e0       	ldi	r25, 0x06	; 6
    49ca:	97 dc       	rcall	.-1746   	; 0x42fa <_uploadMessage>
    49cc:	f0 dc       	rcall	.-1568   	; 0x43ae <_reply2ReturnCode>
    49ce:	a0 96       	adiw	r28, 0x20	; 32
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	cd bf       	out	0x3d, r28	; 61
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	ff 90       	pop	r15
    49e4:	ef 90       	pop	r14
    49e6:	df 90       	pop	r13
    49e8:	cf 90       	pop	r12
    49ea:	bf 90       	pop	r11
    49ec:	af 90       	pop	r10
    49ee:	9f 90       	pop	r9
    49f0:	8f 90       	pop	r8
    49f2:	7f 90       	pop	r7
    49f4:	6f 90       	pop	r6
    49f6:	5f 90       	pop	r5
    49f8:	4f 90       	pop	r4
    49fa:	3f 90       	pop	r3
    49fc:	2f 90       	pop	r2
    49fe:	08 95       	ret

00004a00 <lora_driver_setOtaaIdentity>:
    4a00:	ef 92       	push	r14
    4a02:	ff 92       	push	r15
    4a04:	0f 93       	push	r16
    4a06:	1f 93       	push	r17
    4a08:	cf 93       	push	r28
    4a0a:	df 93       	push	r29
    4a0c:	ec 01       	movw	r28, r24
    4a0e:	8b 01       	movw	r16, r22
    4a10:	7a 01       	movw	r14, r20
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	f4 de       	rcall	.-536    	; 0x47fe <lora_driver_setAdaptiveDataRate>
    4a16:	81 11       	cpse	r24, r1
    4a18:	0d c0       	rjmp	.+26     	; 0x4a34 <lora_driver_setOtaaIdentity+0x34>
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	d4 dd       	rcall	.-1112   	; 0x45c6 <lora_driver_setApplicationIdentifier>
    4a1e:	81 11       	cpse	r24, r1
    4a20:	09 c0       	rjmp	.+18     	; 0x4a34 <lora_driver_setOtaaIdentity+0x34>
    4a22:	c8 01       	movw	r24, r16
    4a24:	e1 dd       	rcall	.-1086   	; 0x45e8 <lora_driver_setApplicationKey>
    4a26:	81 11       	cpse	r24, r1
    4a28:	05 c0       	rjmp	.+10     	; 0x4a34 <lora_driver_setOtaaIdentity+0x34>
    4a2a:	c7 01       	movw	r24, r14
    4a2c:	bb dd       	rcall	.-1162   	; 0x45a4 <lora_driver_setDeviceIdentifier>
    4a2e:	81 11       	cpse	r24, r1
    4a30:	01 c0       	rjmp	.+2      	; 0x4a34 <lora_driver_setOtaaIdentity+0x34>
    4a32:	eb dd       	rcall	.-1066   	; 0x460a <lora_driver_saveMac>
    4a34:	df 91       	pop	r29
    4a36:	cf 91       	pop	r28
    4a38:	1f 91       	pop	r17
    4a3a:	0f 91       	pop	r16
    4a3c:	ff 90       	pop	r15
    4a3e:	ef 90       	pop	r14
    4a40:	08 95       	ret

00004a42 <lora_driver_mapReturnCodeToText>:
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	fc 01       	movw	r30, r24
    4a46:	ee 0f       	add	r30, r30
    4a48:	ff 1f       	adc	r31, r31
    4a4a:	8e 0f       	add	r24, r30
    4a4c:	9f 1f       	adc	r25, r31
    4a4e:	fc 01       	movw	r30, r24
    4a50:	ec 58       	subi	r30, 0x8C	; 140
    4a52:	f8 4f       	sbci	r31, 0xF8	; 248
    4a54:	81 81       	ldd	r24, Z+1	; 0x01
    4a56:	92 81       	ldd	r25, Z+2	; 0x02
    4a58:	08 95       	ret

00004a5a <decode_port_no>:
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	00 97       	sbiw	r24, 0x00	; 0
    4a5e:	29 f1       	breq	.+74     	; 0x4aaa <decode_port_no+0x50>
    4a60:	fb 01       	movw	r30, r22
    4a62:	20 81       	ld	r18, Z
    4a64:	fc 01       	movw	r30, r24
    4a66:	01 90       	ld	r0, Z+
    4a68:	00 20       	and	r0, r0
    4a6a:	e9 f7       	brne	.-6      	; 0x4a66 <decode_port_no+0xc>
    4a6c:	31 97       	sbiw	r30, 0x01	; 1
    4a6e:	e8 1b       	sub	r30, r24
    4a70:	f9 0b       	sbc	r31, r25
    4a72:	82 2f       	mov	r24, r18
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	e8 17       	cp	r30, r24
    4a78:	f9 07       	cpc	r31, r25
    4a7a:	c8 f0       	brcs	.+50     	; 0x4aae <decode_port_no+0x54>
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	08 c0       	rjmp	.+16     	; 0x4a90 <decode_port_no+0x36>
    4a80:	88 0f       	add	r24, r24
    4a82:	38 2f       	mov	r19, r24
    4a84:	33 0f       	add	r19, r19
    4a86:	33 0f       	add	r19, r19
    4a88:	83 0f       	add	r24, r19
    4a8a:	80 53       	subi	r24, 0x30	; 48
    4a8c:	89 0f       	add	r24, r25
    4a8e:	2f 5f       	subi	r18, 0xFF	; 255
    4a90:	fd 01       	movw	r30, r26
    4a92:	e2 0f       	add	r30, r18
    4a94:	f1 1d       	adc	r31, r1
    4a96:	90 81       	ld	r25, Z
    4a98:	30 ed       	ldi	r19, 0xD0	; 208
    4a9a:	39 0f       	add	r19, r25
    4a9c:	3a 30       	cpi	r19, 0x0A	; 10
    4a9e:	10 f4       	brcc	.+4      	; 0x4aa4 <decode_port_no+0x4a>
    4aa0:	91 11       	cpse	r25, r1
    4aa2:	ee cf       	rjmp	.-36     	; 0x4a80 <decode_port_no+0x26>
    4aa4:	fb 01       	movw	r30, r22
    4aa6:	20 83       	st	Z, r18
    4aa8:	08 95       	ret
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	08 95       	ret
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	08 95       	ret

00004ab2 <decode_hexadecimal_string_bytes>:
    4ab2:	0f 93       	push	r16
    4ab4:	1f 93       	push	r17
    4ab6:	cf 93       	push	r28
    4ab8:	df 93       	push	r29
    4aba:	dc 01       	movw	r26, r24
    4abc:	ea 01       	movw	r28, r20
    4abe:	20 97       	sbiw	r28, 0x00	; 0
    4ac0:	e1 f1       	breq	.+120    	; 0x4b3a <decode_hexadecimal_string_bytes+0x88>
    4ac2:	fa 01       	movw	r30, r20
    4ac4:	01 90       	ld	r0, Z+
    4ac6:	00 20       	and	r0, r0
    4ac8:	e9 f7       	brne	.-6      	; 0x4ac4 <decode_hexadecimal_string_bytes+0x12>
    4aca:	31 97       	sbiw	r30, 0x01	; 1
    4acc:	e4 1b       	sub	r30, r20
    4ace:	f5 0b       	sbc	r31, r21
    4ad0:	32 97       	sbiw	r30, 0x02	; 2
    4ad2:	10 f5       	brcc	.+68     	; 0x4b18 <decode_hexadecimal_string_bytes+0x66>
    4ad4:	32 c0       	rjmp	.+100    	; 0x4b3a <decode_hexadecimal_string_bytes+0x88>
    4ad6:	8d 01       	movw	r16, r26
    4ad8:	04 0f       	add	r16, r20
    4ada:	15 1f       	adc	r17, r21
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	ae 01       	movw	r20, r28
    4ae0:	42 0f       	add	r20, r18
    4ae2:	53 1f       	adc	r21, r19
    4ae4:	fa 01       	movw	r30, r20
    4ae6:	90 81       	ld	r25, Z
    4ae8:	91 34       	cpi	r25, 0x41	; 65
    4aea:	28 f0       	brcs	.+10     	; 0x4af6 <decode_hexadecimal_string_bytes+0x44>
    4aec:	97 53       	subi	r25, 0x37	; 55
    4aee:	59 2f       	mov	r21, r25
    4af0:	52 95       	swap	r21
    4af2:	50 7f       	andi	r21, 0xF0	; 240
    4af4:	03 c0       	rjmp	.+6      	; 0x4afc <decode_hexadecimal_string_bytes+0x4a>
    4af6:	59 2f       	mov	r21, r25
    4af8:	52 95       	swap	r21
    4afa:	50 7f       	andi	r21, 0xF0	; 240
    4afc:	2c 0f       	add	r18, r28
    4afe:	3d 1f       	adc	r19, r29
    4b00:	f9 01       	movw	r30, r18
    4b02:	91 81       	ldd	r25, Z+1	; 0x01
    4b04:	91 34       	cpi	r25, 0x41	; 65
    4b06:	10 f0       	brcs	.+4      	; 0x4b0c <decode_hexadecimal_string_bytes+0x5a>
    4b08:	97 53       	subi	r25, 0x37	; 55
    4b0a:	01 c0       	rjmp	.+2      	; 0x4b0e <decode_hexadecimal_string_bytes+0x5c>
    4b0c:	90 53       	subi	r25, 0x30	; 48
    4b0e:	95 0f       	add	r25, r21
    4b10:	f8 01       	movw	r30, r16
    4b12:	90 83       	st	Z, r25
    4b14:	8f 5f       	subi	r24, 0xFF	; 255
    4b16:	01 c0       	rjmp	.+2      	; 0x4b1a <decode_hexadecimal_string_bytes+0x68>
    4b18:	80 e0       	ldi	r24, 0x00	; 0
    4b1a:	28 2f       	mov	r18, r24
    4b1c:	22 0f       	add	r18, r18
    4b1e:	48 2f       	mov	r20, r24
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	fe 01       	movw	r30, r28
    4b24:	01 90       	ld	r0, Z+
    4b26:	00 20       	and	r0, r0
    4b28:	e9 f7       	brne	.-6      	; 0x4b24 <decode_hexadecimal_string_bytes+0x72>
    4b2a:	31 97       	sbiw	r30, 0x01	; 1
    4b2c:	ec 1b       	sub	r30, r28
    4b2e:	fd 0b       	sbc	r31, r29
    4b30:	4e 17       	cp	r20, r30
    4b32:	5f 07       	cpc	r21, r31
    4b34:	10 f4       	brcc	.+4      	; 0x4b3a <decode_hexadecimal_string_bytes+0x88>
    4b36:	86 13       	cpse	r24, r22
    4b38:	ce cf       	rjmp	.-100    	; 0x4ad6 <decode_hexadecimal_string_bytes+0x24>
    4b3a:	df 91       	pop	r29
    4b3c:	cf 91       	pop	r28
    4b3e:	1f 91       	pop	r17
    4b40:	0f 91       	pop	r16
    4b42:	08 95       	ret

00004b44 <_serialCallBack>:
    4b44:	80 91 8f 17 	lds	r24, 0x178F	; 0x80178f <crc_sum.1945>
    4b48:	86 0f       	add	r24, r22
    4b4a:	80 93 8f 17 	sts	0x178F, r24	; 0x80178f <crc_sum.1945>
    4b4e:	90 91 92 17 	lds	r25, 0x1792	; 0x801792 <_mh_state>
    4b52:	91 30       	cpi	r25, 0x01	; 1
    4b54:	79 f0       	breq	.+30     	; 0x4b74 <_serialCallBack+0x30>
    4b56:	28 f0       	brcs	.+10     	; 0x4b62 <_serialCallBack+0x1e>
    4b58:	92 30       	cpi	r25, 0x02	; 2
    4b5a:	a9 f0       	breq	.+42     	; 0x4b86 <_serialCallBack+0x42>
    4b5c:	93 30       	cpi	r25, 0x03	; 3
    4b5e:	19 f1       	breq	.+70     	; 0x4ba6 <_serialCallBack+0x62>
    4b60:	08 95       	ret
    4b62:	6f 3f       	cpi	r22, 0xFF	; 255
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <_serialCallBack+0x24>
    4b66:	48 c0       	rjmp	.+144    	; 0x4bf8 <_serialCallBack+0xb4>
    4b68:	10 92 8f 17 	sts	0x178F, r1	; 0x80178f <crc_sum.1945>
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <_mh_state>
    4b72:	08 95       	ret
    4b74:	66 38       	cpi	r22, 0x86	; 134
    4b76:	09 f0       	breq	.+2      	; 0x4b7a <_serialCallBack+0x36>
    4b78:	3f c0       	rjmp	.+126    	; 0x4bf8 <_serialCallBack+0xb4>
    4b7a:	10 92 8e 17 	sts	0x178E, r1	; 0x80178e <inDex.1943>
    4b7e:	82 e0       	ldi	r24, 0x02	; 2
    4b80:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <_mh_state>
    4b84:	08 95       	ret
    4b86:	e0 91 8e 17 	lds	r30, 0x178E	; 0x80178e <inDex.1943>
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	8e 0f       	add	r24, r30
    4b8e:	80 93 8e 17 	sts	0x178E, r24	; 0x80178e <inDex.1943>
    4b92:	f0 e0       	ldi	r31, 0x00	; 0
    4b94:	e4 57       	subi	r30, 0x74	; 116
    4b96:	f8 4e       	sbci	r31, 0xE8	; 232
    4b98:	60 83       	st	Z, r22
    4b9a:	82 30       	cpi	r24, 0x02	; 2
    4b9c:	69 f5       	brne	.+90     	; 0x4bf8 <_serialCallBack+0xb4>
    4b9e:	83 e0       	ldi	r24, 0x03	; 3
    4ba0:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <_mh_state>
    4ba4:	08 95       	ret
    4ba6:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <inDex.1943>
    4baa:	21 e0       	ldi	r18, 0x01	; 1
    4bac:	29 0f       	add	r18, r25
    4bae:	20 93 8e 17 	sts	0x178E, r18	; 0x80178e <inDex.1943>
    4bb2:	96 30       	cpi	r25, 0x06	; 6
    4bb4:	09 f5       	brne	.+66     	; 0x4bf8 <_serialCallBack+0xb4>
    4bb6:	81 11       	cpse	r24, r1
    4bb8:	0e c0       	rjmp	.+28     	; 0x4bd6 <_serialCallBack+0x92>
    4bba:	ec e8       	ldi	r30, 0x8C	; 140
    4bbc:	f7 e1       	ldi	r31, 0x17	; 23
    4bbe:	80 81       	ld	r24, Z
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	98 2f       	mov	r25, r24
    4bc4:	88 27       	eor	r24, r24
    4bc6:	21 81       	ldd	r18, Z+1	; 0x01
    4bc8:	82 0f       	add	r24, r18
    4bca:	91 1d       	adc	r25, r1
    4bcc:	90 93 94 17 	sts	0x1794, r25	; 0x801794 <_ppm+0x1>
    4bd0:	80 93 93 17 	sts	0x1793, r24	; 0x801793 <_ppm>
    4bd4:	04 c0       	rjmp	.+8      	; 0x4bde <_serialCallBack+0x9a>
    4bd6:	10 92 94 17 	sts	0x1794, r1	; 0x801794 <_ppm+0x1>
    4bda:	10 92 93 17 	sts	0x1793, r1	; 0x801793 <_ppm>
    4bde:	10 92 92 17 	sts	0x1792, r1	; 0x801792 <_mh_state>
    4be2:	e0 91 90 17 	lds	r30, 0x1790	; 0x801790 <_appCallBack>
    4be6:	f0 91 91 17 	lds	r31, 0x1791	; 0x801791 <_appCallBack+0x1>
    4bea:	30 97       	sbiw	r30, 0x00	; 0
    4bec:	29 f0       	breq	.+10     	; 0x4bf8 <_serialCallBack+0xb4>
    4bee:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <_ppm>
    4bf2:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <_ppm+0x1>
    4bf6:	19 95       	eicall
    4bf8:	08 95       	ret

00004bfa <mh_z19_initialise>:
    4bfa:	8f 92       	push	r8
    4bfc:	9f 92       	push	r9
    4bfe:	af 92       	push	r10
    4c00:	cf 92       	push	r12
    4c02:	ef 92       	push	r14
    4c04:	0f 93       	push	r16
    4c06:	0f 2e       	mov	r0, r31
    4c08:	f2 ea       	ldi	r31, 0xA2	; 162
    4c0a:	8f 2e       	mov	r8, r31
    4c0c:	f5 e2       	ldi	r31, 0x25	; 37
    4c0e:	9f 2e       	mov	r9, r31
    4c10:	f0 2d       	mov	r31, r0
    4c12:	68 94       	set
    4c14:	aa 24       	eor	r10, r10
    4c16:	a4 f8       	bld	r10, 4
    4c18:	68 94       	set
    4c1a:	cc 24       	eor	r12, r12
    4c1c:	c4 f8       	bld	r12, 4
    4c1e:	e1 2c       	mov	r14, r1
    4c20:	00 e0       	ldi	r16, 0x00	; 0
    4c22:	23 e0       	ldi	r18, 0x03	; 3
    4c24:	40 e8       	ldi	r20, 0x80	; 128
    4c26:	55 e2       	ldi	r21, 0x25	; 37
    4c28:	60 e0       	ldi	r22, 0x00	; 0
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	3f d0       	rcall	.+126    	; 0x4cac <serial_create>
    4c2e:	90 93 96 17 	sts	0x1796, r25	; 0x801796 <_serial+0x1>
    4c32:	80 93 95 17 	sts	0x1795, r24	; 0x801795 <_serial>
    4c36:	0f 91       	pop	r16
    4c38:	ef 90       	pop	r14
    4c3a:	cf 90       	pop	r12
    4c3c:	af 90       	pop	r10
    4c3e:	9f 90       	pop	r9
    4c40:	8f 90       	pop	r8
    4c42:	08 95       	ret

00004c44 <mh_z19_injectCallBack>:
    4c44:	90 93 91 17 	sts	0x1791, r25	; 0x801791 <_appCallBack+0x1>
    4c48:	80 93 90 17 	sts	0x1790, r24	; 0x801790 <_appCallBack>
    4c4c:	08 95       	ret

00004c4e <mh_z19_takeMeassuring>:
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	cd b7       	in	r28, 0x3d	; 61
    4c54:	de b7       	in	r29, 0x3e	; 62
    4c56:	29 97       	sbiw	r28, 0x09	; 9
    4c58:	0f b6       	in	r0, 0x3f	; 63
    4c5a:	f8 94       	cli
    4c5c:	de bf       	out	0x3e, r29	; 62
    4c5e:	0f be       	out	0x3f, r0	; 63
    4c60:	cd bf       	out	0x3d, r28	; 61
    4c62:	89 e0       	ldi	r24, 0x09	; 9
    4c64:	e2 e4       	ldi	r30, 0x42	; 66
    4c66:	f2 e0       	ldi	r31, 0x02	; 2
    4c68:	9e 01       	movw	r18, r28
    4c6a:	2f 5f       	subi	r18, 0xFF	; 255
    4c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6e:	d9 01       	movw	r26, r18
    4c70:	01 90       	ld	r0, Z+
    4c72:	0d 92       	st	X+, r0
    4c74:	8a 95       	dec	r24
    4c76:	e1 f7       	brne	.-8      	; 0x4c70 <mh_z19_takeMeassuring+0x22>
    4c78:	10 92 94 17 	sts	0x1794, r1	; 0x801794 <_ppm+0x1>
    4c7c:	10 92 93 17 	sts	0x1793, r1	; 0x801793 <_ppm>
    4c80:	80 91 95 17 	lds	r24, 0x1795	; 0x801795 <_serial>
    4c84:	90 91 96 17 	lds	r25, 0x1796	; 0x801796 <_serial+0x1>
    4c88:	00 97       	sbiw	r24, 0x00	; 0
    4c8a:	31 f0       	breq	.+12     	; 0x4c98 <mh_z19_takeMeassuring+0x4a>
    4c8c:	42 2f       	mov	r20, r18
    4c8e:	53 2f       	mov	r21, r19
    4c90:	69 e0       	ldi	r22, 0x09	; 9
    4c92:	d9 d0       	rcall	.+434    	; 0x4e46 <serial_sendBytes>
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	01 c0       	rjmp	.+2      	; 0x4c9a <mh_z19_takeMeassuring+0x4c>
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	29 96       	adiw	r28, 0x09	; 9
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	08 95       	ret

00004cac <serial_create>:
    4cac:	2f 92       	push	r2
    4cae:	3f 92       	push	r3
    4cb0:	4f 92       	push	r4
    4cb2:	5f 92       	push	r5
    4cb4:	6f 92       	push	r6
    4cb6:	7f 92       	push	r7
    4cb8:	8f 92       	push	r8
    4cba:	9f 92       	push	r9
    4cbc:	af 92       	push	r10
    4cbe:	cf 92       	push	r12
    4cc0:	ef 92       	push	r14
    4cc2:	ff 92       	push	r15
    4cc4:	0f 93       	push	r16
    4cc6:	1f 93       	push	r17
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
    4cd0:	f8 2e       	mov	r15, r24
    4cd2:	2a 01       	movw	r4, r20
    4cd4:	3b 01       	movw	r6, r22
    4cd6:	88 e0       	ldi	r24, 0x08	; 8
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <malloc>
    4cde:	8c 01       	movw	r16, r24
    4ce0:	8f 2d       	mov	r24, r15
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	fc 01       	movw	r30, r24
    4ce6:	ee 0f       	add	r30, r30
    4ce8:	ff 1f       	adc	r31, r31
    4cea:	e9 56       	subi	r30, 0x69	; 105
    4cec:	f8 4e       	sbci	r31, 0xE8	; 232
    4cee:	11 83       	std	Z+1, r17	; 0x01
    4cf0:	00 83       	st	Z, r16
    4cf2:	01 15       	cp	r16, r1
    4cf4:	11 05       	cpc	r17, r1
    4cf6:	09 f4       	brne	.+2      	; 0x4cfa <serial_create+0x4e>
    4cf8:	69 c0       	rjmp	.+210    	; 0x4dcc <serial_create+0x120>
    4cfa:	88 0f       	add	r24, r24
    4cfc:	99 1f       	adc	r25, r25
    4cfe:	fc 01       	movw	r30, r24
    4d00:	e5 5f       	subi	r30, 0xF5	; 245
    4d02:	fd 4f       	sbci	r31, 0xFD	; 253
    4d04:	80 81       	ld	r24, Z
    4d06:	91 81       	ldd	r25, Z+1	; 0x01
    4d08:	d8 01       	movw	r26, r16
    4d0a:	8d 93       	st	X+, r24
    4d0c:	9c 93       	st	X, r25
    4d0e:	8c 2d       	mov	r24, r12
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	88 0f       	add	r24, r24
    4d14:	99 1f       	adc	r25, r25
    4d16:	88 0f       	add	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <malloc>
    4d1e:	1c 01       	movw	r2, r24
    4d20:	86 e0       	ldi	r24, 0x06	; 6
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <malloc>
    4d28:	7c 01       	movw	r14, r24
    4d2a:	4c 2d       	mov	r20, r12
    4d2c:	b1 01       	movw	r22, r2
    4d2e:	f0 d6       	rcall	.+3552   	; 0x5b10 <fifo_init>
    4d30:	f8 01       	movw	r30, r16
    4d32:	f5 82       	std	Z+5, r15	; 0x05
    4d34:	e4 82       	std	Z+4, r14	; 0x04
    4d36:	8a 2d       	mov	r24, r10
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <malloc>
    4d46:	1c 01       	movw	r2, r24
    4d48:	86 e0       	ldi	r24, 0x06	; 6
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <malloc>
    4d50:	7c 01       	movw	r14, r24
    4d52:	4a 2d       	mov	r20, r10
    4d54:	b1 01       	movw	r22, r2
    4d56:	dc d6       	rcall	.+3512   	; 0x5b10 <fifo_init>
    4d58:	d8 01       	movw	r26, r16
    4d5a:	13 96       	adiw	r26, 0x03	; 3
    4d5c:	fc 92       	st	X, r15
    4d5e:	ee 92       	st	-X, r14
    4d60:	12 97       	sbiw	r26, 0x02	; 2
    4d62:	17 96       	adiw	r26, 0x07	; 7
    4d64:	9c 92       	st	X, r9
    4d66:	8e 92       	st	-X, r8
    4d68:	16 97       	sbiw	r26, 0x06	; 6
    4d6a:	ff b6       	in	r15, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	ed 91       	ld	r30, X+
    4d70:	fc 91       	ld	r31, X
    4d72:	11 97       	sbiw	r26, 0x01	; 1
    4d74:	36 97       	sbiw	r30, 0x06	; 6
    4d76:	80 81       	ld	r24, Z
    4d78:	82 60       	ori	r24, 0x02	; 2
    4d7a:	80 83       	st	Z, r24
    4d7c:	8d 90       	ld	r8, X+
    4d7e:	9c 90       	ld	r9, X
    4d80:	c3 01       	movw	r24, r6
    4d82:	b2 01       	movw	r22, r4
    4d84:	b3 d7       	rcall	.+3942   	; 0x5cec <__floatunsisf>
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e0       	ldi	r20, 0x00	; 0
    4d8c:	51 e4       	ldi	r21, 0x41	; 65
    4d8e:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <__mulsf3>
    4d92:	9b 01       	movw	r18, r22
    4d94:	ac 01       	movw	r20, r24
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	74 e2       	ldi	r23, 0x24	; 36
    4d9a:	84 e7       	ldi	r24, 0x74	; 116
    4d9c:	9b e4       	ldi	r25, 0x4B	; 75
    4d9e:	3b d7       	rcall	.+3702   	; 0x5c16 <__divsf3>
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	40 e8       	ldi	r20, 0x80	; 128
    4da6:	5f e3       	ldi	r21, 0x3F	; 63
    4da8:	cf d6       	rcall	.+3486   	; 0x5b48 <__subsf3>
    4daa:	71 d9       	rcall	.-3358   	; 0x408e <__fixunssfsi>
    4dac:	f4 01       	movw	r30, r8
    4dae:	32 97       	sbiw	r30, 0x02	; 2
    4db0:	60 83       	st	Z, r22
    4db2:	d8 01       	movw	r26, r16
    4db4:	ed 91       	ld	r30, X+
    4db6:	fc 91       	ld	r31, X
    4db8:	11 97       	sbiw	r26, 0x01	; 1
    4dba:	35 97       	sbiw	r30, 0x05	; 5
    4dbc:	88 e9       	ldi	r24, 0x98	; 152
    4dbe:	80 83       	st	Z, r24
    4dc0:	ed 91       	ld	r30, X+
    4dc2:	fc 91       	ld	r31, X
    4dc4:	34 97       	sbiw	r30, 0x04	; 4
    4dc6:	86 e0       	ldi	r24, 0x06	; 6
    4dc8:	80 83       	st	Z, r24
    4dca:	ff be       	out	0x3f, r15	; 63
    4dcc:	c8 01       	movw	r24, r16
    4dce:	df 91       	pop	r29
    4dd0:	cf 91       	pop	r28
    4dd2:	1f 91       	pop	r17
    4dd4:	0f 91       	pop	r16
    4dd6:	ff 90       	pop	r15
    4dd8:	ef 90       	pop	r14
    4dda:	cf 90       	pop	r12
    4ddc:	af 90       	pop	r10
    4dde:	9f 90       	pop	r9
    4de0:	8f 90       	pop	r8
    4de2:	7f 90       	pop	r7
    4de4:	6f 90       	pop	r6
    4de6:	5f 90       	pop	r5
    4de8:	4f 90       	pop	r4
    4dea:	3f 90       	pop	r3
    4dec:	2f 90       	pop	r2
    4dee:	08 95       	ret

00004df0 <serial_sendByte>:
    4df0:	cf 93       	push	r28
    4df2:	df 93       	push	r29
    4df4:	dc 01       	movw	r26, r24
    4df6:	89 2b       	or	r24, r25
    4df8:	01 f1       	breq	.+64     	; 0x4e3a <serial_sendByte+0x4a>
    4dfa:	12 96       	adiw	r26, 0x02	; 2
    4dfc:	ed 91       	ld	r30, X+
    4dfe:	fc 91       	ld	r31, X
    4e00:	13 97       	sbiw	r26, 0x03	; 3
    4e02:	93 81       	ldd	r25, Z+3	; 0x03
    4e04:	82 81       	ldd	r24, Z+2	; 0x02
    4e06:	25 81       	ldd	r18, Z+5	; 0x05
    4e08:	98 1b       	sub	r25, r24
    4e0a:	92 23       	and	r25, r18
    4e0c:	84 81       	ldd	r24, Z+4	; 0x04
    4e0e:	98 17       	cp	r25, r24
    4e10:	b1 f0       	breq	.+44     	; 0x4e3e <serial_sendByte+0x4e>
    4e12:	83 81       	ldd	r24, Z+3	; 0x03
    4e14:	26 95       	lsr	r18
    4e16:	28 23       	and	r18, r24
    4e18:	c0 81       	ld	r28, Z
    4e1a:	d1 81       	ldd	r29, Z+1	; 0x01
    4e1c:	c2 0f       	add	r28, r18
    4e1e:	d1 1d       	adc	r29, r1
    4e20:	68 83       	st	Y, r22
    4e22:	8f 5f       	subi	r24, 0xFF	; 255
    4e24:	95 81       	ldd	r25, Z+5	; 0x05
    4e26:	89 23       	and	r24, r25
    4e28:	83 83       	std	Z+3, r24	; 0x03
    4e2a:	ed 91       	ld	r30, X+
    4e2c:	fc 91       	ld	r31, X
    4e2e:	35 97       	sbiw	r30, 0x05	; 5
    4e30:	80 81       	ld	r24, Z
    4e32:	80 62       	ori	r24, 0x20	; 32
    4e34:	80 83       	st	Z, r24
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	03 c0       	rjmp	.+6      	; 0x4e40 <serial_sendByte+0x50>
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	01 c0       	rjmp	.+2      	; 0x4e40 <serial_sendByte+0x50>
    4e3e:	82 e0       	ldi	r24, 0x02	; 2
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	08 95       	ret

00004e46 <serial_sendBytes>:
    4e46:	ef 92       	push	r14
    4e48:	ff 92       	push	r15
    4e4a:	0f 93       	push	r16
    4e4c:	1f 93       	push	r17
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	7c 01       	movw	r14, r24
    4e54:	00 97       	sbiw	r24, 0x00	; 0
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <serial_sendBytes+0x14>
    4e58:	41 c0       	rjmp	.+130    	; 0x4edc <serial_sendBytes+0x96>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	12 96       	adiw	r26, 0x02	; 2
    4e5e:	ed 91       	ld	r30, X+
    4e60:	fc 91       	ld	r31, X
    4e62:	13 97       	sbiw	r26, 0x03	; 3
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	98 1b       	sub	r25, r24
    4e6a:	85 81       	ldd	r24, Z+5	; 0x05
    4e6c:	98 23       	and	r25, r24
    4e6e:	84 81       	ldd	r24, Z+4	; 0x04
    4e70:	89 1b       	sub	r24, r25
    4e72:	86 17       	cp	r24, r22
    4e74:	a8 f1       	brcs	.+106    	; 0x4ee0 <serial_sendBytes+0x9a>
    4e76:	66 23       	and	r22, r22
    4e78:	41 f1       	breq	.+80     	; 0x4eca <serial_sendBytes+0x84>
    4e7a:	84 2f       	mov	r24, r20
    4e7c:	95 2f       	mov	r25, r21
    4e7e:	dc 01       	movw	r26, r24
    4e80:	61 50       	subi	r22, 0x01	; 1
    4e82:	46 2f       	mov	r20, r22
    4e84:	50 e0       	ldi	r21, 0x00	; 0
    4e86:	4f 5f       	subi	r20, 0xFF	; 255
    4e88:	5f 4f       	sbci	r21, 0xFF	; 255
    4e8a:	48 0f       	add	r20, r24
    4e8c:	59 1f       	adc	r21, r25
    4e8e:	e7 01       	movw	r28, r14
    4e90:	ea 81       	ldd	r30, Y+2	; 0x02
    4e92:	fb 81       	ldd	r31, Y+3	; 0x03
    4e94:	93 81       	ldd	r25, Z+3	; 0x03
    4e96:	82 81       	ldd	r24, Z+2	; 0x02
    4e98:	25 81       	ldd	r18, Z+5	; 0x05
    4e9a:	98 1b       	sub	r25, r24
    4e9c:	92 23       	and	r25, r18
    4e9e:	84 81       	ldd	r24, Z+4	; 0x04
    4ea0:	98 17       	cp	r25, r24
    4ea2:	79 f0       	breq	.+30     	; 0x4ec2 <serial_sendBytes+0x7c>
    4ea4:	8c 91       	ld	r24, X
    4ea6:	93 81       	ldd	r25, Z+3	; 0x03
    4ea8:	26 95       	lsr	r18
    4eaa:	29 23       	and	r18, r25
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	8b 01       	movw	r16, r22
    4eb2:	02 0f       	add	r16, r18
    4eb4:	11 1d       	adc	r17, r1
    4eb6:	e8 01       	movw	r28, r16
    4eb8:	88 83       	st	Y, r24
    4eba:	9f 5f       	subi	r25, 0xFF	; 255
    4ebc:	85 81       	ldd	r24, Z+5	; 0x05
    4ebe:	98 23       	and	r25, r24
    4ec0:	93 83       	std	Z+3, r25	; 0x03
    4ec2:	11 96       	adiw	r26, 0x01	; 1
    4ec4:	a4 17       	cp	r26, r20
    4ec6:	b5 07       	cpc	r27, r21
    4ec8:	11 f7       	brne	.-60     	; 0x4e8e <serial_sendBytes+0x48>
    4eca:	d7 01       	movw	r26, r14
    4ecc:	ed 91       	ld	r30, X+
    4ece:	fc 91       	ld	r31, X
    4ed0:	35 97       	sbiw	r30, 0x05	; 5
    4ed2:	80 81       	ld	r24, Z
    4ed4:	80 62       	ori	r24, 0x20	; 32
    4ed6:	80 83       	st	Z, r24
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	03 c0       	rjmp	.+6      	; 0x4ee2 <serial_sendBytes+0x9c>
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	01 c0       	rjmp	.+2      	; 0x4ee2 <serial_sendBytes+0x9c>
    4ee0:	82 e0       	ldi	r24, 0x02	; 2
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	1f 91       	pop	r17
    4ee8:	0f 91       	pop	r16
    4eea:	ff 90       	pop	r15
    4eec:	ef 90       	pop	r14
    4eee:	08 95       	ret

00004ef0 <serial_getByte>:
    4ef0:	00 97       	sbiw	r24, 0x00	; 0
    4ef2:	d1 f0       	breq	.+52     	; 0x4f28 <serial_getByte+0x38>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	14 96       	adiw	r26, 0x04	; 4
    4ef8:	ed 91       	ld	r30, X+
    4efa:	fc 91       	ld	r31, X
    4efc:	15 97       	sbiw	r26, 0x05	; 5
    4efe:	93 81       	ldd	r25, Z+3	; 0x03
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	98 17       	cp	r25, r24
    4f04:	99 f0       	breq	.+38     	; 0x4f2c <serial_getByte+0x3c>
    4f06:	92 81       	ldd	r25, Z+2	; 0x02
    4f08:	85 81       	ldd	r24, Z+5	; 0x05
    4f0a:	86 95       	lsr	r24
    4f0c:	89 23       	and	r24, r25
    4f0e:	a0 81       	ld	r26, Z
    4f10:	b1 81       	ldd	r27, Z+1	; 0x01
    4f12:	a8 0f       	add	r26, r24
    4f14:	b1 1d       	adc	r27, r1
    4f16:	8c 91       	ld	r24, X
    4f18:	db 01       	movw	r26, r22
    4f1a:	8c 93       	st	X, r24
    4f1c:	9f 5f       	subi	r25, 0xFF	; 255
    4f1e:	85 81       	ldd	r24, Z+5	; 0x05
    4f20:	98 23       	and	r25, r24
    4f22:	92 83       	std	Z+2, r25	; 0x02
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	08 95       	ret
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	08 95       	ret
    4f2c:	83 e0       	ldi	r24, 0x03	; 3
    4f2e:	08 95       	ret

00004f30 <__vector_25>:
    4f30:	1f 92       	push	r1
    4f32:	0f 92       	push	r0
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	0f 92       	push	r0
    4f38:	11 24       	eor	r1, r1
    4f3a:	0b b6       	in	r0, 0x3b	; 59
    4f3c:	0f 92       	push	r0
    4f3e:	2f 93       	push	r18
    4f40:	3f 93       	push	r19
    4f42:	4f 93       	push	r20
    4f44:	5f 93       	push	r21
    4f46:	6f 93       	push	r22
    4f48:	7f 93       	push	r23
    4f4a:	8f 93       	push	r24
    4f4c:	9f 93       	push	r25
    4f4e:	af 93       	push	r26
    4f50:	bf 93       	push	r27
    4f52:	cf 93       	push	r28
    4f54:	df 93       	push	r29
    4f56:	ef 93       	push	r30
    4f58:	ff 93       	push	r31
    4f5a:	a0 91 97 17 	lds	r26, 0x1797	; 0x801797 <_ser_handle>
    4f5e:	b0 91 98 17 	lds	r27, 0x1798	; 0x801798 <_ser_handle+0x1>
    4f62:	10 97       	sbiw	r26, 0x00	; 0
    4f64:	11 f1       	breq	.+68     	; 0x4faa <__vector_25+0x7a>
    4f66:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4f6a:	14 96       	adiw	r26, 0x04	; 4
    4f6c:	ed 91       	ld	r30, X+
    4f6e:	fc 91       	ld	r31, X
    4f70:	15 97       	sbiw	r26, 0x05	; 5
    4f72:	93 81       	ldd	r25, Z+3	; 0x03
    4f74:	82 81       	ldd	r24, Z+2	; 0x02
    4f76:	25 81       	ldd	r18, Z+5	; 0x05
    4f78:	98 1b       	sub	r25, r24
    4f7a:	92 23       	and	r25, r18
    4f7c:	84 81       	ldd	r24, Z+4	; 0x04
    4f7e:	98 17       	cp	r25, r24
    4f80:	61 f0       	breq	.+24     	; 0x4f9a <__vector_25+0x6a>
    4f82:	83 81       	ldd	r24, Z+3	; 0x03
    4f84:	26 95       	lsr	r18
    4f86:	28 23       	and	r18, r24
    4f88:	c0 81       	ld	r28, Z
    4f8a:	d1 81       	ldd	r29, Z+1	; 0x01
    4f8c:	c2 0f       	add	r28, r18
    4f8e:	d1 1d       	adc	r29, r1
    4f90:	68 83       	st	Y, r22
    4f92:	8f 5f       	subi	r24, 0xFF	; 255
    4f94:	95 81       	ldd	r25, Z+5	; 0x05
    4f96:	89 23       	and	r24, r25
    4f98:	83 83       	std	Z+3, r24	; 0x03
    4f9a:	16 96       	adiw	r26, 0x06	; 6
    4f9c:	ed 91       	ld	r30, X+
    4f9e:	fc 91       	ld	r31, X
    4fa0:	17 97       	sbiw	r26, 0x07	; 7
    4fa2:	30 97       	sbiw	r30, 0x00	; 0
    4fa4:	11 f0       	breq	.+4      	; 0x4faa <__vector_25+0x7a>
    4fa6:	cd 01       	movw	r24, r26
    4fa8:	19 95       	eicall
    4faa:	ff 91       	pop	r31
    4fac:	ef 91       	pop	r30
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	bf 91       	pop	r27
    4fb4:	af 91       	pop	r26
    4fb6:	9f 91       	pop	r25
    4fb8:	8f 91       	pop	r24
    4fba:	7f 91       	pop	r23
    4fbc:	6f 91       	pop	r22
    4fbe:	5f 91       	pop	r21
    4fc0:	4f 91       	pop	r20
    4fc2:	3f 91       	pop	r19
    4fc4:	2f 91       	pop	r18
    4fc6:	0f 90       	pop	r0
    4fc8:	0b be       	out	0x3b, r0	; 59
    4fca:	0f 90       	pop	r0
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	0f 90       	pop	r0
    4fd0:	1f 90       	pop	r1
    4fd2:	18 95       	reti

00004fd4 <__vector_26>:
    4fd4:	1f 92       	push	r1
    4fd6:	0f 92       	push	r0
    4fd8:	0f b6       	in	r0, 0x3f	; 63
    4fda:	0f 92       	push	r0
    4fdc:	11 24       	eor	r1, r1
    4fde:	0b b6       	in	r0, 0x3b	; 59
    4fe0:	0f 92       	push	r0
    4fe2:	2f 93       	push	r18
    4fe4:	8f 93       	push	r24
    4fe6:	9f 93       	push	r25
    4fe8:	af 93       	push	r26
    4fea:	bf 93       	push	r27
    4fec:	ef 93       	push	r30
    4fee:	ff 93       	push	r31
    4ff0:	e0 91 97 17 	lds	r30, 0x1797	; 0x801797 <_ser_handle>
    4ff4:	f0 91 98 17 	lds	r31, 0x1798	; 0x801798 <_ser_handle+0x1>
    4ff8:	30 97       	sbiw	r30, 0x00	; 0
    4ffa:	b9 f0       	breq	.+46     	; 0x502a <__vector_26+0x56>
    4ffc:	02 80       	ldd	r0, Z+2	; 0x02
    4ffe:	f3 81       	ldd	r31, Z+3	; 0x03
    5000:	e0 2d       	mov	r30, r0
    5002:	93 81       	ldd	r25, Z+3	; 0x03
    5004:	82 81       	ldd	r24, Z+2	; 0x02
    5006:	98 17       	cp	r25, r24
    5008:	b1 f0       	breq	.+44     	; 0x5036 <__vector_26+0x62>
    500a:	92 81       	ldd	r25, Z+2	; 0x02
    500c:	85 81       	ldd	r24, Z+5	; 0x05
    500e:	28 2f       	mov	r18, r24
    5010:	26 95       	lsr	r18
    5012:	29 23       	and	r18, r25
    5014:	a0 81       	ld	r26, Z
    5016:	b1 81       	ldd	r27, Z+1	; 0x01
    5018:	a2 0f       	add	r26, r18
    501a:	b1 1d       	adc	r27, r1
    501c:	2c 91       	ld	r18, X
    501e:	9f 5f       	subi	r25, 0xFF	; 255
    5020:	89 23       	and	r24, r25
    5022:	82 83       	std	Z+2, r24	; 0x02
    5024:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5028:	0b c0       	rjmp	.+22     	; 0x5040 <__vector_26+0x6c>
    502a:	e1 ec       	ldi	r30, 0xC1	; 193
    502c:	f0 e0       	ldi	r31, 0x00	; 0
    502e:	80 81       	ld	r24, Z
    5030:	8f 7d       	andi	r24, 0xDF	; 223
    5032:	80 83       	st	Z, r24
    5034:	05 c0       	rjmp	.+10     	; 0x5040 <__vector_26+0x6c>
    5036:	e1 ec       	ldi	r30, 0xC1	; 193
    5038:	f0 e0       	ldi	r31, 0x00	; 0
    503a:	80 81       	ld	r24, Z
    503c:	8f 7d       	andi	r24, 0xDF	; 223
    503e:	80 83       	st	Z, r24
    5040:	ff 91       	pop	r31
    5042:	ef 91       	pop	r30
    5044:	bf 91       	pop	r27
    5046:	af 91       	pop	r26
    5048:	9f 91       	pop	r25
    504a:	8f 91       	pop	r24
    504c:	2f 91       	pop	r18
    504e:	0f 90       	pop	r0
    5050:	0b be       	out	0x3b, r0	; 59
    5052:	0f 90       	pop	r0
    5054:	0f be       	out	0x3f, r0	; 63
    5056:	0f 90       	pop	r0
    5058:	1f 90       	pop	r1
    505a:	18 95       	reti

0000505c <__vector_36>:
    505c:	1f 92       	push	r1
    505e:	0f 92       	push	r0
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	0f 92       	push	r0
    5064:	11 24       	eor	r1, r1
    5066:	0b b6       	in	r0, 0x3b	; 59
    5068:	0f 92       	push	r0
    506a:	2f 93       	push	r18
    506c:	3f 93       	push	r19
    506e:	4f 93       	push	r20
    5070:	5f 93       	push	r21
    5072:	6f 93       	push	r22
    5074:	7f 93       	push	r23
    5076:	8f 93       	push	r24
    5078:	9f 93       	push	r25
    507a:	af 93       	push	r26
    507c:	bf 93       	push	r27
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	ef 93       	push	r30
    5084:	ff 93       	push	r31
    5086:	a0 91 99 17 	lds	r26, 0x1799	; 0x801799 <_ser_handle+0x2>
    508a:	b0 91 9a 17 	lds	r27, 0x179A	; 0x80179a <_ser_handle+0x3>
    508e:	10 97       	sbiw	r26, 0x00	; 0
    5090:	11 f1       	breq	.+68     	; 0x50d6 <__vector_36+0x7a>
    5092:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5096:	14 96       	adiw	r26, 0x04	; 4
    5098:	ed 91       	ld	r30, X+
    509a:	fc 91       	ld	r31, X
    509c:	15 97       	sbiw	r26, 0x05	; 5
    509e:	93 81       	ldd	r25, Z+3	; 0x03
    50a0:	82 81       	ldd	r24, Z+2	; 0x02
    50a2:	25 81       	ldd	r18, Z+5	; 0x05
    50a4:	98 1b       	sub	r25, r24
    50a6:	92 23       	and	r25, r18
    50a8:	84 81       	ldd	r24, Z+4	; 0x04
    50aa:	98 17       	cp	r25, r24
    50ac:	61 f0       	breq	.+24     	; 0x50c6 <__vector_36+0x6a>
    50ae:	83 81       	ldd	r24, Z+3	; 0x03
    50b0:	26 95       	lsr	r18
    50b2:	28 23       	and	r18, r24
    50b4:	c0 81       	ld	r28, Z
    50b6:	d1 81       	ldd	r29, Z+1	; 0x01
    50b8:	c2 0f       	add	r28, r18
    50ba:	d1 1d       	adc	r29, r1
    50bc:	68 83       	st	Y, r22
    50be:	8f 5f       	subi	r24, 0xFF	; 255
    50c0:	95 81       	ldd	r25, Z+5	; 0x05
    50c2:	89 23       	and	r24, r25
    50c4:	83 83       	std	Z+3, r24	; 0x03
    50c6:	16 96       	adiw	r26, 0x06	; 6
    50c8:	ed 91       	ld	r30, X+
    50ca:	fc 91       	ld	r31, X
    50cc:	17 97       	sbiw	r26, 0x07	; 7
    50ce:	30 97       	sbiw	r30, 0x00	; 0
    50d0:	11 f0       	breq	.+4      	; 0x50d6 <__vector_36+0x7a>
    50d2:	cd 01       	movw	r24, r26
    50d4:	19 95       	eicall
    50d6:	ff 91       	pop	r31
    50d8:	ef 91       	pop	r30
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	bf 91       	pop	r27
    50e0:	af 91       	pop	r26
    50e2:	9f 91       	pop	r25
    50e4:	8f 91       	pop	r24
    50e6:	7f 91       	pop	r23
    50e8:	6f 91       	pop	r22
    50ea:	5f 91       	pop	r21
    50ec:	4f 91       	pop	r20
    50ee:	3f 91       	pop	r19
    50f0:	2f 91       	pop	r18
    50f2:	0f 90       	pop	r0
    50f4:	0b be       	out	0x3b, r0	; 59
    50f6:	0f 90       	pop	r0
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	0f 90       	pop	r0
    50fc:	1f 90       	pop	r1
    50fe:	18 95       	reti

00005100 <__vector_37>:
    5100:	1f 92       	push	r1
    5102:	0f 92       	push	r0
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	0f 92       	push	r0
    5108:	11 24       	eor	r1, r1
    510a:	0b b6       	in	r0, 0x3b	; 59
    510c:	0f 92       	push	r0
    510e:	2f 93       	push	r18
    5110:	8f 93       	push	r24
    5112:	9f 93       	push	r25
    5114:	af 93       	push	r26
    5116:	bf 93       	push	r27
    5118:	ef 93       	push	r30
    511a:	ff 93       	push	r31
    511c:	e0 91 99 17 	lds	r30, 0x1799	; 0x801799 <_ser_handle+0x2>
    5120:	f0 91 9a 17 	lds	r31, 0x179A	; 0x80179a <_ser_handle+0x3>
    5124:	30 97       	sbiw	r30, 0x00	; 0
    5126:	b9 f0       	breq	.+46     	; 0x5156 <__vector_37+0x56>
    5128:	02 80       	ldd	r0, Z+2	; 0x02
    512a:	f3 81       	ldd	r31, Z+3	; 0x03
    512c:	e0 2d       	mov	r30, r0
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	82 81       	ldd	r24, Z+2	; 0x02
    5132:	98 17       	cp	r25, r24
    5134:	b1 f0       	breq	.+44     	; 0x5162 <__vector_37+0x62>
    5136:	92 81       	ldd	r25, Z+2	; 0x02
    5138:	85 81       	ldd	r24, Z+5	; 0x05
    513a:	28 2f       	mov	r18, r24
    513c:	26 95       	lsr	r18
    513e:	29 23       	and	r18, r25
    5140:	a0 81       	ld	r26, Z
    5142:	b1 81       	ldd	r27, Z+1	; 0x01
    5144:	a2 0f       	add	r26, r18
    5146:	b1 1d       	adc	r27, r1
    5148:	2c 91       	ld	r18, X
    514a:	9f 5f       	subi	r25, 0xFF	; 255
    514c:	89 23       	and	r24, r25
    514e:	82 83       	std	Z+2, r24	; 0x02
    5150:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5154:	0b c0       	rjmp	.+22     	; 0x516c <__vector_37+0x6c>
    5156:	e9 ec       	ldi	r30, 0xC9	; 201
    5158:	f0 e0       	ldi	r31, 0x00	; 0
    515a:	80 81       	ld	r24, Z
    515c:	8f 7d       	andi	r24, 0xDF	; 223
    515e:	80 83       	st	Z, r24
    5160:	05 c0       	rjmp	.+10     	; 0x516c <__vector_37+0x6c>
    5162:	e9 ec       	ldi	r30, 0xC9	; 201
    5164:	f0 e0       	ldi	r31, 0x00	; 0
    5166:	80 81       	ld	r24, Z
    5168:	8f 7d       	andi	r24, 0xDF	; 223
    516a:	80 83       	st	Z, r24
    516c:	ff 91       	pop	r31
    516e:	ef 91       	pop	r30
    5170:	bf 91       	pop	r27
    5172:	af 91       	pop	r26
    5174:	9f 91       	pop	r25
    5176:	8f 91       	pop	r24
    5178:	2f 91       	pop	r18
    517a:	0f 90       	pop	r0
    517c:	0b be       	out	0x3b, r0	; 59
    517e:	0f 90       	pop	r0
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	0f 90       	pop	r0
    5184:	1f 90       	pop	r1
    5186:	18 95       	reti

00005188 <__vector_51>:
    5188:	1f 92       	push	r1
    518a:	0f 92       	push	r0
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	0f 92       	push	r0
    5190:	11 24       	eor	r1, r1
    5192:	0b b6       	in	r0, 0x3b	; 59
    5194:	0f 92       	push	r0
    5196:	2f 93       	push	r18
    5198:	3f 93       	push	r19
    519a:	4f 93       	push	r20
    519c:	5f 93       	push	r21
    519e:	6f 93       	push	r22
    51a0:	7f 93       	push	r23
    51a2:	8f 93       	push	r24
    51a4:	9f 93       	push	r25
    51a6:	af 93       	push	r26
    51a8:	bf 93       	push	r27
    51aa:	cf 93       	push	r28
    51ac:	df 93       	push	r29
    51ae:	ef 93       	push	r30
    51b0:	ff 93       	push	r31
    51b2:	a0 91 9b 17 	lds	r26, 0x179B	; 0x80179b <_ser_handle+0x4>
    51b6:	b0 91 9c 17 	lds	r27, 0x179C	; 0x80179c <_ser_handle+0x5>
    51ba:	10 97       	sbiw	r26, 0x00	; 0
    51bc:	11 f1       	breq	.+68     	; 0x5202 <__vector_51+0x7a>
    51be:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    51c2:	14 96       	adiw	r26, 0x04	; 4
    51c4:	ed 91       	ld	r30, X+
    51c6:	fc 91       	ld	r31, X
    51c8:	15 97       	sbiw	r26, 0x05	; 5
    51ca:	93 81       	ldd	r25, Z+3	; 0x03
    51cc:	82 81       	ldd	r24, Z+2	; 0x02
    51ce:	25 81       	ldd	r18, Z+5	; 0x05
    51d0:	98 1b       	sub	r25, r24
    51d2:	92 23       	and	r25, r18
    51d4:	84 81       	ldd	r24, Z+4	; 0x04
    51d6:	98 17       	cp	r25, r24
    51d8:	61 f0       	breq	.+24     	; 0x51f2 <__vector_51+0x6a>
    51da:	83 81       	ldd	r24, Z+3	; 0x03
    51dc:	26 95       	lsr	r18
    51de:	28 23       	and	r18, r24
    51e0:	c0 81       	ld	r28, Z
    51e2:	d1 81       	ldd	r29, Z+1	; 0x01
    51e4:	c2 0f       	add	r28, r18
    51e6:	d1 1d       	adc	r29, r1
    51e8:	68 83       	st	Y, r22
    51ea:	8f 5f       	subi	r24, 0xFF	; 255
    51ec:	95 81       	ldd	r25, Z+5	; 0x05
    51ee:	89 23       	and	r24, r25
    51f0:	83 83       	std	Z+3, r24	; 0x03
    51f2:	16 96       	adiw	r26, 0x06	; 6
    51f4:	ed 91       	ld	r30, X+
    51f6:	fc 91       	ld	r31, X
    51f8:	17 97       	sbiw	r26, 0x07	; 7
    51fa:	30 97       	sbiw	r30, 0x00	; 0
    51fc:	11 f0       	breq	.+4      	; 0x5202 <__vector_51+0x7a>
    51fe:	cd 01       	movw	r24, r26
    5200:	19 95       	eicall
    5202:	ff 91       	pop	r31
    5204:	ef 91       	pop	r30
    5206:	df 91       	pop	r29
    5208:	cf 91       	pop	r28
    520a:	bf 91       	pop	r27
    520c:	af 91       	pop	r26
    520e:	9f 91       	pop	r25
    5210:	8f 91       	pop	r24
    5212:	7f 91       	pop	r23
    5214:	6f 91       	pop	r22
    5216:	5f 91       	pop	r21
    5218:	4f 91       	pop	r20
    521a:	3f 91       	pop	r19
    521c:	2f 91       	pop	r18
    521e:	0f 90       	pop	r0
    5220:	0b be       	out	0x3b, r0	; 59
    5222:	0f 90       	pop	r0
    5224:	0f be       	out	0x3f, r0	; 63
    5226:	0f 90       	pop	r0
    5228:	1f 90       	pop	r1
    522a:	18 95       	reti

0000522c <__vector_52>:
    522c:	1f 92       	push	r1
    522e:	0f 92       	push	r0
    5230:	0f b6       	in	r0, 0x3f	; 63
    5232:	0f 92       	push	r0
    5234:	11 24       	eor	r1, r1
    5236:	0b b6       	in	r0, 0x3b	; 59
    5238:	0f 92       	push	r0
    523a:	2f 93       	push	r18
    523c:	8f 93       	push	r24
    523e:	9f 93       	push	r25
    5240:	af 93       	push	r26
    5242:	bf 93       	push	r27
    5244:	ef 93       	push	r30
    5246:	ff 93       	push	r31
    5248:	e0 91 9b 17 	lds	r30, 0x179B	; 0x80179b <_ser_handle+0x4>
    524c:	f0 91 9c 17 	lds	r31, 0x179C	; 0x80179c <_ser_handle+0x5>
    5250:	30 97       	sbiw	r30, 0x00	; 0
    5252:	b9 f0       	breq	.+46     	; 0x5282 <__vector_52+0x56>
    5254:	02 80       	ldd	r0, Z+2	; 0x02
    5256:	f3 81       	ldd	r31, Z+3	; 0x03
    5258:	e0 2d       	mov	r30, r0
    525a:	93 81       	ldd	r25, Z+3	; 0x03
    525c:	82 81       	ldd	r24, Z+2	; 0x02
    525e:	98 17       	cp	r25, r24
    5260:	b1 f0       	breq	.+44     	; 0x528e <__vector_52+0x62>
    5262:	92 81       	ldd	r25, Z+2	; 0x02
    5264:	85 81       	ldd	r24, Z+5	; 0x05
    5266:	28 2f       	mov	r18, r24
    5268:	26 95       	lsr	r18
    526a:	29 23       	and	r18, r25
    526c:	a0 81       	ld	r26, Z
    526e:	b1 81       	ldd	r27, Z+1	; 0x01
    5270:	a2 0f       	add	r26, r18
    5272:	b1 1d       	adc	r27, r1
    5274:	2c 91       	ld	r18, X
    5276:	9f 5f       	subi	r25, 0xFF	; 255
    5278:	89 23       	and	r24, r25
    527a:	82 83       	std	Z+2, r24	; 0x02
    527c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5280:	0b c0       	rjmp	.+22     	; 0x5298 <__vector_52+0x6c>
    5282:	e1 ed       	ldi	r30, 0xD1	; 209
    5284:	f0 e0       	ldi	r31, 0x00	; 0
    5286:	80 81       	ld	r24, Z
    5288:	8f 7d       	andi	r24, 0xDF	; 223
    528a:	80 83       	st	Z, r24
    528c:	05 c0       	rjmp	.+10     	; 0x5298 <__vector_52+0x6c>
    528e:	e1 ed       	ldi	r30, 0xD1	; 209
    5290:	f0 e0       	ldi	r31, 0x00	; 0
    5292:	80 81       	ld	r24, Z
    5294:	8f 7d       	andi	r24, 0xDF	; 223
    5296:	80 83       	st	Z, r24
    5298:	ff 91       	pop	r31
    529a:	ef 91       	pop	r30
    529c:	bf 91       	pop	r27
    529e:	af 91       	pop	r26
    52a0:	9f 91       	pop	r25
    52a2:	8f 91       	pop	r24
    52a4:	2f 91       	pop	r18
    52a6:	0f 90       	pop	r0
    52a8:	0b be       	out	0x3b, r0	; 59
    52aa:	0f 90       	pop	r0
    52ac:	0f be       	out	0x3f, r0	; 63
    52ae:	0f 90       	pop	r0
    52b0:	1f 90       	pop	r1
    52b2:	18 95       	reti

000052b4 <__vector_54>:
    52b4:	1f 92       	push	r1
    52b6:	0f 92       	push	r0
    52b8:	0f b6       	in	r0, 0x3f	; 63
    52ba:	0f 92       	push	r0
    52bc:	11 24       	eor	r1, r1
    52be:	0b b6       	in	r0, 0x3b	; 59
    52c0:	0f 92       	push	r0
    52c2:	2f 93       	push	r18
    52c4:	3f 93       	push	r19
    52c6:	4f 93       	push	r20
    52c8:	5f 93       	push	r21
    52ca:	6f 93       	push	r22
    52cc:	7f 93       	push	r23
    52ce:	8f 93       	push	r24
    52d0:	9f 93       	push	r25
    52d2:	af 93       	push	r26
    52d4:	bf 93       	push	r27
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	ef 93       	push	r30
    52dc:	ff 93       	push	r31
    52de:	a0 91 9d 17 	lds	r26, 0x179D	; 0x80179d <_ser_handle+0x6>
    52e2:	b0 91 9e 17 	lds	r27, 0x179E	; 0x80179e <_ser_handle+0x7>
    52e6:	10 97       	sbiw	r26, 0x00	; 0
    52e8:	11 f1       	breq	.+68     	; 0x532e <__vector_54+0x7a>
    52ea:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    52ee:	14 96       	adiw	r26, 0x04	; 4
    52f0:	ed 91       	ld	r30, X+
    52f2:	fc 91       	ld	r31, X
    52f4:	15 97       	sbiw	r26, 0x05	; 5
    52f6:	93 81       	ldd	r25, Z+3	; 0x03
    52f8:	82 81       	ldd	r24, Z+2	; 0x02
    52fa:	25 81       	ldd	r18, Z+5	; 0x05
    52fc:	98 1b       	sub	r25, r24
    52fe:	92 23       	and	r25, r18
    5300:	84 81       	ldd	r24, Z+4	; 0x04
    5302:	98 17       	cp	r25, r24
    5304:	61 f0       	breq	.+24     	; 0x531e <__vector_54+0x6a>
    5306:	83 81       	ldd	r24, Z+3	; 0x03
    5308:	26 95       	lsr	r18
    530a:	28 23       	and	r18, r24
    530c:	c0 81       	ld	r28, Z
    530e:	d1 81       	ldd	r29, Z+1	; 0x01
    5310:	c2 0f       	add	r28, r18
    5312:	d1 1d       	adc	r29, r1
    5314:	68 83       	st	Y, r22
    5316:	8f 5f       	subi	r24, 0xFF	; 255
    5318:	95 81       	ldd	r25, Z+5	; 0x05
    531a:	89 23       	and	r24, r25
    531c:	83 83       	std	Z+3, r24	; 0x03
    531e:	16 96       	adiw	r26, 0x06	; 6
    5320:	ed 91       	ld	r30, X+
    5322:	fc 91       	ld	r31, X
    5324:	17 97       	sbiw	r26, 0x07	; 7
    5326:	30 97       	sbiw	r30, 0x00	; 0
    5328:	11 f0       	breq	.+4      	; 0x532e <__vector_54+0x7a>
    532a:	cd 01       	movw	r24, r26
    532c:	19 95       	eicall
    532e:	ff 91       	pop	r31
    5330:	ef 91       	pop	r30
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	bf 91       	pop	r27
    5338:	af 91       	pop	r26
    533a:	9f 91       	pop	r25
    533c:	8f 91       	pop	r24
    533e:	7f 91       	pop	r23
    5340:	6f 91       	pop	r22
    5342:	5f 91       	pop	r21
    5344:	4f 91       	pop	r20
    5346:	3f 91       	pop	r19
    5348:	2f 91       	pop	r18
    534a:	0f 90       	pop	r0
    534c:	0b be       	out	0x3b, r0	; 59
    534e:	0f 90       	pop	r0
    5350:	0f be       	out	0x3f, r0	; 63
    5352:	0f 90       	pop	r0
    5354:	1f 90       	pop	r1
    5356:	18 95       	reti

00005358 <__vector_55>:
    5358:	1f 92       	push	r1
    535a:	0f 92       	push	r0
    535c:	0f b6       	in	r0, 0x3f	; 63
    535e:	0f 92       	push	r0
    5360:	11 24       	eor	r1, r1
    5362:	0b b6       	in	r0, 0x3b	; 59
    5364:	0f 92       	push	r0
    5366:	2f 93       	push	r18
    5368:	8f 93       	push	r24
    536a:	9f 93       	push	r25
    536c:	af 93       	push	r26
    536e:	bf 93       	push	r27
    5370:	ef 93       	push	r30
    5372:	ff 93       	push	r31
    5374:	e0 91 9d 17 	lds	r30, 0x179D	; 0x80179d <_ser_handle+0x6>
    5378:	f0 91 9e 17 	lds	r31, 0x179E	; 0x80179e <_ser_handle+0x7>
    537c:	30 97       	sbiw	r30, 0x00	; 0
    537e:	b9 f0       	breq	.+46     	; 0x53ae <__vector_55+0x56>
    5380:	02 80       	ldd	r0, Z+2	; 0x02
    5382:	f3 81       	ldd	r31, Z+3	; 0x03
    5384:	e0 2d       	mov	r30, r0
    5386:	93 81       	ldd	r25, Z+3	; 0x03
    5388:	82 81       	ldd	r24, Z+2	; 0x02
    538a:	98 17       	cp	r25, r24
    538c:	b1 f0       	breq	.+44     	; 0x53ba <__vector_55+0x62>
    538e:	92 81       	ldd	r25, Z+2	; 0x02
    5390:	85 81       	ldd	r24, Z+5	; 0x05
    5392:	28 2f       	mov	r18, r24
    5394:	26 95       	lsr	r18
    5396:	29 23       	and	r18, r25
    5398:	a0 81       	ld	r26, Z
    539a:	b1 81       	ldd	r27, Z+1	; 0x01
    539c:	a2 0f       	add	r26, r18
    539e:	b1 1d       	adc	r27, r1
    53a0:	2c 91       	ld	r18, X
    53a2:	9f 5f       	subi	r25, 0xFF	; 255
    53a4:	89 23       	and	r24, r25
    53a6:	82 83       	std	Z+2, r24	; 0x02
    53a8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    53ac:	0b c0       	rjmp	.+22     	; 0x53c4 <__vector_55+0x6c>
    53ae:	e1 e3       	ldi	r30, 0x31	; 49
    53b0:	f1 e0       	ldi	r31, 0x01	; 1
    53b2:	80 81       	ld	r24, Z
    53b4:	8f 7d       	andi	r24, 0xDF	; 223
    53b6:	80 83       	st	Z, r24
    53b8:	05 c0       	rjmp	.+10     	; 0x53c4 <__vector_55+0x6c>
    53ba:	e1 e3       	ldi	r30, 0x31	; 49
    53bc:	f1 e0       	ldi	r31, 0x01	; 1
    53be:	80 81       	ld	r24, Z
    53c0:	8f 7d       	andi	r24, 0xDF	; 223
    53c2:	80 83       	st	Z, r24
    53c4:	ff 91       	pop	r31
    53c6:	ef 91       	pop	r30
    53c8:	bf 91       	pop	r27
    53ca:	af 91       	pop	r26
    53cc:	9f 91       	pop	r25
    53ce:	8f 91       	pop	r24
    53d0:	2f 91       	pop	r18
    53d2:	0f 90       	pop	r0
    53d4:	0b be       	out	0x3b, r0	; 59
    53d6:	0f 90       	pop	r0
    53d8:	0f be       	out	0x3f, r0	; 63
    53da:	0f 90       	pop	r0
    53dc:	1f 90       	pop	r1
    53de:	18 95       	reti

000053e0 <usart_getchar>:
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	1f 92       	push	r1
    53e6:	cd b7       	in	r28, 0x3d	; 61
    53e8:	de b7       	in	r29, 0x3e	; 62
    53ea:	be 01       	movw	r22, r28
    53ec:	6f 5f       	subi	r22, 0xFF	; 255
    53ee:	7f 4f       	sbci	r23, 0xFF	; 255
    53f0:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_com_serial_instance>
    53f4:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_com_serial_instance+0x1>
    53f8:	7b dd       	rcall	.-1290   	; 0x4ef0 <serial_getByte>
    53fa:	81 11       	cpse	r24, r1
    53fc:	f6 cf       	rjmp	.-20     	; 0x53ea <usart_getchar+0xa>
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	0f 90       	pop	r0
    5404:	df 91       	pop	r29
    5406:	cf 91       	pop	r28
    5408:	08 95       	ret

0000540a <usart_putchar>:
    540a:	68 2f       	mov	r22, r24
    540c:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <_com_serial_instance>
    5410:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_com_serial_instance+0x1>
    5414:	ed dc       	rcall	.-1574   	; 0x4df0 <serial_sendByte>
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	08 95       	ret

0000541c <stdio_initialise>:
    541c:	8f 92       	push	r8
    541e:	9f 92       	push	r9
    5420:	af 92       	push	r10
    5422:	cf 92       	push	r12
    5424:	ef 92       	push	r14
    5426:	0f 93       	push	r16
    5428:	81 2c       	mov	r8, r1
    542a:	91 2c       	mov	r9, r1
    542c:	68 94       	set
    542e:	aa 24       	eor	r10, r10
    5430:	a7 f8       	bld	r10, 7
    5432:	68 94       	set
    5434:	cc 24       	eor	r12, r12
    5436:	c7 f8       	bld	r12, 7
    5438:	e1 2c       	mov	r14, r1
    543a:	00 e0       	ldi	r16, 0x00	; 0
    543c:	23 e0       	ldi	r18, 0x03	; 3
    543e:	40 e0       	ldi	r20, 0x00	; 0
    5440:	51 ee       	ldi	r21, 0xE1	; 225
    5442:	60 e0       	ldi	r22, 0x00	; 0
    5444:	70 e0       	ldi	r23, 0x00	; 0
    5446:	32 dc       	rcall	.-1948   	; 0x4cac <serial_create>
    5448:	90 93 a0 17 	sts	0x17A0, r25	; 0x8017a0 <_com_serial_instance+0x1>
    544c:	80 93 9f 17 	sts	0x179F, r24	; 0x80179f <_com_serial_instance>
    5450:	eb e0       	ldi	r30, 0x0B	; 11
    5452:	f8 e1       	ldi	r31, 0x18	; 24
    5454:	83 e1       	ldi	r24, 0x13	; 19
    5456:	92 e0       	ldi	r25, 0x02	; 2
    5458:	91 83       	std	Z+1, r25	; 0x01
    545a:	80 83       	st	Z, r24
    545c:	93 83       	std	Z+3, r25	; 0x03
    545e:	82 83       	std	Z+2, r24	; 0x02
    5460:	0f 91       	pop	r16
    5462:	ef 90       	pop	r14
    5464:	cf 90       	pop	r12
    5466:	af 90       	pop	r10
    5468:	9f 90       	pop	r9
    546a:	8f 90       	pop	r8
    546c:	08 95       	ret

0000546e <_turn_off>:
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	fc 01       	movw	r30, r24
    5472:	ee 0f       	add	r30, r30
    5474:	ff 1f       	adc	r31, r31
    5476:	e8 0f       	add	r30, r24
    5478:	f9 1f       	adc	r31, r25
    547a:	ee 0f       	add	r30, r30
    547c:	ff 1f       	adc	r31, r31
    547e:	ef 55       	subi	r30, 0x5F	; 95
    5480:	f8 4e       	sbci	r31, 0xE8	; 232
    5482:	23 81       	ldd	r18, Z+3	; 0x03
    5484:	21 11       	cpse	r18, r1
    5486:	1f c0       	rjmp	.+62     	; 0x54c6 <_turn_off+0x58>
    5488:	9c 01       	movw	r18, r24
    548a:	22 0f       	add	r18, r18
    548c:	33 1f       	adc	r19, r19
    548e:	f9 01       	movw	r30, r18
    5490:	e8 0f       	add	r30, r24
    5492:	f9 1f       	adc	r31, r25
    5494:	ee 0f       	add	r30, r30
    5496:	ff 1f       	adc	r31, r31
    5498:	ef 55       	subi	r30, 0x5F	; 95
    549a:	f8 4e       	sbci	r31, 0xE8	; 232
    549c:	a0 81       	ld	r26, Z
    549e:	b1 81       	ldd	r27, Z+1	; 0x01
    54a0:	4c 91       	ld	r20, X
    54a2:	f9 01       	movw	r30, r18
    54a4:	e8 0f       	add	r30, r24
    54a6:	f9 1f       	adc	r31, r25
    54a8:	ee 0f       	add	r30, r30
    54aa:	ff 1f       	adc	r31, r31
    54ac:	ef 55       	subi	r30, 0x5F	; 95
    54ae:	f8 4e       	sbci	r31, 0xE8	; 232
    54b0:	81 e0       	ldi	r24, 0x01	; 1
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	02 80       	ldd	r0, Z+2	; 0x02
    54b6:	02 c0       	rjmp	.+4      	; 0x54bc <_turn_off+0x4e>
    54b8:	88 0f       	add	r24, r24
    54ba:	99 1f       	adc	r25, r25
    54bc:	0a 94       	dec	r0
    54be:	e2 f7       	brpl	.-8      	; 0x54b8 <_turn_off+0x4a>
    54c0:	84 2b       	or	r24, r20
    54c2:	8c 93       	st	X, r24
    54c4:	08 95       	ret
    54c6:	fc 01       	movw	r30, r24
    54c8:	ee 0f       	add	r30, r30
    54ca:	ff 1f       	adc	r31, r31
    54cc:	df 01       	movw	r26, r30
    54ce:	a8 0f       	add	r26, r24
    54d0:	b9 1f       	adc	r27, r25
    54d2:	aa 0f       	add	r26, r26
    54d4:	bb 1f       	adc	r27, r27
    54d6:	af 55       	subi	r26, 0x5F	; 95
    54d8:	b8 4e       	sbci	r27, 0xE8	; 232
    54da:	0d 90       	ld	r0, X+
    54dc:	bc 91       	ld	r27, X
    54de:	a0 2d       	mov	r26, r0
    54e0:	2c 91       	ld	r18, X
    54e2:	e8 0f       	add	r30, r24
    54e4:	f9 1f       	adc	r31, r25
    54e6:	ee 0f       	add	r30, r30
    54e8:	ff 1f       	adc	r31, r31
    54ea:	ef 55       	subi	r30, 0x5F	; 95
    54ec:	f8 4e       	sbci	r31, 0xE8	; 232
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	02 80       	ldd	r0, Z+2	; 0x02
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <_turn_off+0x8c>
    54f6:	88 0f       	add	r24, r24
    54f8:	99 1f       	adc	r25, r25
    54fa:	0a 94       	dec	r0
    54fc:	e2 f7       	brpl	.-8      	; 0x54f6 <_turn_off+0x88>
    54fe:	80 95       	com	r24
    5500:	82 23       	and	r24, r18
    5502:	8c 93       	st	X, r24
    5504:	08 95       	ret

00005506 <_turn_on>:
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	fc 01       	movw	r30, r24
    550a:	ee 0f       	add	r30, r30
    550c:	ff 1f       	adc	r31, r31
    550e:	e8 0f       	add	r30, r24
    5510:	f9 1f       	adc	r31, r25
    5512:	ee 0f       	add	r30, r30
    5514:	ff 1f       	adc	r31, r31
    5516:	ef 55       	subi	r30, 0x5F	; 95
    5518:	f8 4e       	sbci	r31, 0xE8	; 232
    551a:	23 81       	ldd	r18, Z+3	; 0x03
    551c:	21 11       	cpse	r18, r1
    551e:	20 c0       	rjmp	.+64     	; 0x5560 <_turn_on+0x5a>
    5520:	9c 01       	movw	r18, r24
    5522:	22 0f       	add	r18, r18
    5524:	33 1f       	adc	r19, r19
    5526:	f9 01       	movw	r30, r18
    5528:	e8 0f       	add	r30, r24
    552a:	f9 1f       	adc	r31, r25
    552c:	ee 0f       	add	r30, r30
    552e:	ff 1f       	adc	r31, r31
    5530:	ef 55       	subi	r30, 0x5F	; 95
    5532:	f8 4e       	sbci	r31, 0xE8	; 232
    5534:	a0 81       	ld	r26, Z
    5536:	b1 81       	ldd	r27, Z+1	; 0x01
    5538:	4c 91       	ld	r20, X
    553a:	f9 01       	movw	r30, r18
    553c:	e8 0f       	add	r30, r24
    553e:	f9 1f       	adc	r31, r25
    5540:	ee 0f       	add	r30, r30
    5542:	ff 1f       	adc	r31, r31
    5544:	ef 55       	subi	r30, 0x5F	; 95
    5546:	f8 4e       	sbci	r31, 0xE8	; 232
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	02 80       	ldd	r0, Z+2	; 0x02
    554e:	02 c0       	rjmp	.+4      	; 0x5554 <_turn_on+0x4e>
    5550:	88 0f       	add	r24, r24
    5552:	99 1f       	adc	r25, r25
    5554:	0a 94       	dec	r0
    5556:	e2 f7       	brpl	.-8      	; 0x5550 <_turn_on+0x4a>
    5558:	80 95       	com	r24
    555a:	84 23       	and	r24, r20
    555c:	8c 93       	st	X, r24
    555e:	08 95       	ret
    5560:	fc 01       	movw	r30, r24
    5562:	ee 0f       	add	r30, r30
    5564:	ff 1f       	adc	r31, r31
    5566:	df 01       	movw	r26, r30
    5568:	a8 0f       	add	r26, r24
    556a:	b9 1f       	adc	r27, r25
    556c:	aa 0f       	add	r26, r26
    556e:	bb 1f       	adc	r27, r27
    5570:	af 55       	subi	r26, 0x5F	; 95
    5572:	b8 4e       	sbci	r27, 0xE8	; 232
    5574:	0d 90       	ld	r0, X+
    5576:	bc 91       	ld	r27, X
    5578:	a0 2d       	mov	r26, r0
    557a:	2c 91       	ld	r18, X
    557c:	e8 0f       	add	r30, r24
    557e:	f9 1f       	adc	r31, r25
    5580:	ee 0f       	add	r30, r30
    5582:	ff 1f       	adc	r31, r31
    5584:	ef 55       	subi	r30, 0x5F	; 95
    5586:	f8 4e       	sbci	r31, 0xE8	; 232
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	02 80       	ldd	r0, Z+2	; 0x02
    558e:	02 c0       	rjmp	.+4      	; 0x5594 <_turn_on+0x8e>
    5590:	88 0f       	add	r24, r24
    5592:	99 1f       	adc	r25, r25
    5594:	0a 94       	dec	r0
    5596:	e2 f7       	brpl	.-8      	; 0x5590 <_turn_on+0x8a>
    5598:	82 2b       	or	r24, r18
    559a:	8c 93       	st	X, r24
    559c:	08 95       	ret

0000559e <_hal_led_task>:
    559e:	cc 24       	eor	r12, r12
    55a0:	c3 94       	inc	r12
    55a2:	d1 2c       	mov	r13, r1
    55a4:	68 94       	set
    55a6:	bb 24       	eor	r11, r11
    55a8:	b2 f8       	bld	r11, 2
    55aa:	c1 ea       	ldi	r28, 0xA1	; 161
    55ac:	d7 e1       	ldi	r29, 0x17	; 23
    55ae:	10 e0       	ldi	r17, 0x00	; 0
    55b0:	8c 81       	ldd	r24, Y+4	; 0x04
    55b2:	81 30       	cpi	r24, 0x01	; 1
    55b4:	81 f0       	breq	.+32     	; 0x55d6 <_hal_led_task+0x38>
    55b6:	18 f1       	brcs	.+70     	; 0x55fe <_hal_led_task+0x60>
    55b8:	82 30       	cpi	r24, 0x02	; 2
    55ba:	61 f5       	brne	.+88     	; 0x5614 <_hal_led_task+0x76>
    55bc:	e8 81       	ld	r30, Y
    55be:	f9 81       	ldd	r31, Y+1	; 0x01
    55c0:	20 81       	ld	r18, Z
    55c2:	c6 01       	movw	r24, r12
    55c4:	0a 80       	ldd	r0, Y+2	; 0x02
    55c6:	02 c0       	rjmp	.+4      	; 0x55cc <_hal_led_task+0x2e>
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	0a 94       	dec	r0
    55ce:	e2 f7       	brpl	.-8      	; 0x55c8 <_hal_led_task+0x2a>
    55d0:	82 27       	eor	r24, r18
    55d2:	80 83       	st	Z, r24
    55d4:	1f c0       	rjmp	.+62     	; 0x5614 <_hal_led_task+0x76>
    55d6:	8d 81       	ldd	r24, Y+5	; 0x05
    55d8:	8f 5f       	subi	r24, 0xFF	; 255
    55da:	86 30       	cpi	r24, 0x06	; 6
    55dc:	10 f4       	brcc	.+4      	; 0x55e2 <_hal_led_task+0x44>
    55de:	8d 83       	std	Y+5, r24	; 0x05
    55e0:	19 c0       	rjmp	.+50     	; 0x5614 <_hal_led_task+0x76>
    55e2:	1d 82       	std	Y+5, r1	; 0x05
    55e4:	e8 81       	ld	r30, Y
    55e6:	f9 81       	ldd	r31, Y+1	; 0x01
    55e8:	20 81       	ld	r18, Z
    55ea:	c6 01       	movw	r24, r12
    55ec:	0a 80       	ldd	r0, Y+2	; 0x02
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <_hal_led_task+0x56>
    55f0:	88 0f       	add	r24, r24
    55f2:	99 1f       	adc	r25, r25
    55f4:	0a 94       	dec	r0
    55f6:	e2 f7       	brpl	.-8      	; 0x55f0 <_hal_led_task+0x52>
    55f8:	82 27       	eor	r24, r18
    55fa:	80 83       	st	Z, r24
    55fc:	0b c0       	rjmp	.+22     	; 0x5614 <_hal_led_task+0x76>
    55fe:	0d 81       	ldd	r16, Y+5	; 0x05
    5600:	00 23       	and	r16, r16
    5602:	29 f0       	breq	.+10     	; 0x560e <_hal_led_task+0x70>
    5604:	81 2f       	mov	r24, r17
    5606:	7f df       	rcall	.-258    	; 0x5506 <_turn_on>
    5608:	01 50       	subi	r16, 0x01	; 1
    560a:	0d 83       	std	Y+5, r16	; 0x05
    560c:	03 c0       	rjmp	.+6      	; 0x5614 <_hal_led_task+0x76>
    560e:	bc 82       	std	Y+4, r11	; 0x04
    5610:	81 2f       	mov	r24, r17
    5612:	2d df       	rcall	.-422    	; 0x546e <_turn_off>
    5614:	1f 5f       	subi	r17, 0xFF	; 255
    5616:	26 96       	adiw	r28, 0x06	; 6
    5618:	14 30       	cpi	r17, 0x04	; 4
    561a:	51 f6       	brne	.-108    	; 0x55b0 <_hal_led_task+0x12>
    561c:	6c e0       	ldi	r22, 0x0C	; 12
    561e:	70 e0       	ldi	r23, 0x00	; 0
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskDelay>
    5628:	c0 cf       	rjmp	.-128    	; 0x55aa <_hal_led_task+0xc>

0000562a <status_leds_initialise>:
    562a:	ef 92       	push	r14
    562c:	ff 92       	push	r15
    562e:	0f 93       	push	r16
    5630:	1f 93       	push	r17
    5632:	cf 93       	push	r28
    5634:	df 93       	push	r29
    5636:	08 2f       	mov	r16, r24
    5638:	80 e4       	ldi	r24, 0x40	; 64
    563a:	87 b9       	out	0x07, r24	; 7
    563c:	c1 ea       	ldi	r28, 0xA1	; 161
    563e:	d7 e1       	ldi	r29, 0x17	; 23
    5640:	0f 2e       	mov	r0, r31
    5642:	f8 e2       	ldi	r31, 0x28	; 40
    5644:	ef 2e       	mov	r14, r31
    5646:	f1 2c       	mov	r15, r1
    5648:	f0 2d       	mov	r31, r0
    564a:	f9 82       	std	Y+1, r15	; 0x01
    564c:	e8 82       	st	Y, r14
    564e:	86 e0       	ldi	r24, 0x06	; 6
    5650:	8a 83       	std	Y+2, r24	; 0x02
    5652:	1b 82       	std	Y+3, r1	; 0x03
    5654:	14 e0       	ldi	r17, 0x04	; 4
    5656:	1c 83       	std	Y+4, r17	; 0x04
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	09 df       	rcall	.-494    	; 0x546e <_turn_off>
    565c:	80 e8       	ldi	r24, 0x80	; 128
    565e:	87 b9       	out	0x07, r24	; 7
    5660:	ff 82       	std	Y+7, r15	; 0x07
    5662:	ee 82       	std	Y+6, r14	; 0x06
    5664:	87 e0       	ldi	r24, 0x07	; 7
    5666:	88 87       	std	Y+8, r24	; 0x08
    5668:	19 86       	std	Y+9, r1	; 0x09
    566a:	1a 87       	std	Y+10, r17	; 0x0a
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	ff de       	rcall	.-514    	; 0x546e <_turn_off>
    5670:	80 e2       	ldi	r24, 0x20	; 32
    5672:	83 bb       	out	0x13, r24	; 19
    5674:	84 e3       	ldi	r24, 0x34	; 52
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	9d 87       	std	Y+13, r25	; 0x0d
    567a:	8c 87       	std	Y+12, r24	; 0x0c
    567c:	85 e0       	ldi	r24, 0x05	; 5
    567e:	8e 87       	std	Y+14, r24	; 0x0e
    5680:	1f 86       	std	Y+15, r1	; 0x0f
    5682:	18 8b       	std	Y+16, r17	; 0x10
    5684:	82 e0       	ldi	r24, 0x02	; 2
    5686:	f3 de       	rcall	.-538    	; 0x546e <_turn_off>
    5688:	80 e1       	ldi	r24, 0x10	; 16
    568a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    568e:	82 e0       	ldi	r24, 0x02	; 2
    5690:	91 e0       	ldi	r25, 0x01	; 1
    5692:	9b 8b       	std	Y+19, r25	; 0x13
    5694:	8a 8b       	std	Y+18, r24	; 0x12
    5696:	1c 8b       	std	Y+20, r17	; 0x14
    5698:	1d 8a       	std	Y+21, r1	; 0x15
    569a:	1e 8b       	std	Y+22, r17	; 0x16
    569c:	83 e0       	ldi	r24, 0x03	; 3
    569e:	e7 de       	rcall	.-562    	; 0x546e <_turn_off>
    56a0:	e1 2c       	mov	r14, r1
    56a2:	f1 2c       	mov	r15, r1
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	40 ec       	ldi	r20, 0xC0	; 192
    56aa:	50 e0       	ldi	r21, 0x00	; 0
    56ac:	67 ea       	ldi	r22, 0xA7	; 167
    56ae:	77 e0       	ldi	r23, 0x07	; 7
    56b0:	8f ec       	ldi	r24, 0xCF	; 207
    56b2:	9a e2       	ldi	r25, 0x2A	; 42
    56b4:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	1f 91       	pop	r17
    56be:	0f 91       	pop	r16
    56c0:	ff 90       	pop	r15
    56c2:	ef 90       	pop	r14
    56c4:	08 95       	ret

000056c6 <status_leds_slowBlink>:
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	fc 01       	movw	r30, r24
    56ce:	ee 0f       	add	r30, r30
    56d0:	ff 1f       	adc	r31, r31
    56d2:	df 01       	movw	r26, r30
    56d4:	a8 0f       	add	r26, r24
    56d6:	b9 1f       	adc	r27, r25
    56d8:	aa 0f       	add	r26, r26
    56da:	bb 1f       	adc	r27, r27
    56dc:	af 55       	subi	r26, 0x5F	; 95
    56de:	b8 4e       	sbci	r27, 0xE8	; 232
    56e0:	cd 91       	ld	r28, X+
    56e2:	dc 91       	ld	r29, X
    56e4:	11 97       	sbiw	r26, 0x01	; 1
    56e6:	48 81       	ld	r20, Y
    56e8:	21 e0       	ldi	r18, 0x01	; 1
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	12 96       	adiw	r26, 0x02	; 2
    56ee:	0c 90       	ld	r0, X
    56f0:	12 97       	sbiw	r26, 0x02	; 2
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <status_leds_slowBlink+0x32>
    56f4:	22 0f       	add	r18, r18
    56f6:	33 1f       	adc	r19, r19
    56f8:	0a 94       	dec	r0
    56fa:	e2 f7       	brpl	.-8      	; 0x56f4 <status_leds_slowBlink+0x2e>
    56fc:	24 27       	eor	r18, r20
    56fe:	28 83       	st	Y, r18
    5700:	fd 01       	movw	r30, r26
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	84 83       	std	Z+4, r24	; 0x04
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	08 95       	ret

0000570c <status_leds_fastBlink>:
    570c:	cf 93       	push	r28
    570e:	df 93       	push	r29
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	fc 01       	movw	r30, r24
    5714:	ee 0f       	add	r30, r30
    5716:	ff 1f       	adc	r31, r31
    5718:	df 01       	movw	r26, r30
    571a:	a8 0f       	add	r26, r24
    571c:	b9 1f       	adc	r27, r25
    571e:	aa 0f       	add	r26, r26
    5720:	bb 1f       	adc	r27, r27
    5722:	af 55       	subi	r26, 0x5F	; 95
    5724:	b8 4e       	sbci	r27, 0xE8	; 232
    5726:	cd 91       	ld	r28, X+
    5728:	dc 91       	ld	r29, X
    572a:	11 97       	sbiw	r26, 0x01	; 1
    572c:	48 81       	ld	r20, Y
    572e:	21 e0       	ldi	r18, 0x01	; 1
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	12 96       	adiw	r26, 0x02	; 2
    5734:	0c 90       	ld	r0, X
    5736:	12 97       	sbiw	r26, 0x02	; 2
    5738:	02 c0       	rjmp	.+4      	; 0x573e <status_leds_fastBlink+0x32>
    573a:	22 0f       	add	r18, r18
    573c:	33 1f       	adc	r19, r19
    573e:	0a 94       	dec	r0
    5740:	e2 f7       	brpl	.-8      	; 0x573a <status_leds_fastBlink+0x2e>
    5742:	24 27       	eor	r18, r20
    5744:	28 83       	st	Y, r18
    5746:	fd 01       	movw	r30, r26
    5748:	82 e0       	ldi	r24, 0x02	; 2
    574a:	84 83       	std	Z+4, r24	; 0x04
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	08 95       	ret

00005752 <status_leds_ledOn>:
    5752:	28 2f       	mov	r18, r24
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	f9 01       	movw	r30, r18
    5758:	ee 0f       	add	r30, r30
    575a:	ff 1f       	adc	r31, r31
    575c:	e2 0f       	add	r30, r18
    575e:	f3 1f       	adc	r31, r19
    5760:	ee 0f       	add	r30, r30
    5762:	ff 1f       	adc	r31, r31
    5764:	ef 55       	subi	r30, 0x5F	; 95
    5766:	f8 4e       	sbci	r31, 0xE8	; 232
    5768:	93 e0       	ldi	r25, 0x03	; 3
    576a:	94 83       	std	Z+4, r25	; 0x04
    576c:	cc ce       	rjmp	.-616    	; 0x5506 <_turn_on>
    576e:	08 95       	ret

00005770 <status_leds_ledOff>:
    5770:	28 2f       	mov	r18, r24
    5772:	30 e0       	ldi	r19, 0x00	; 0
    5774:	f9 01       	movw	r30, r18
    5776:	ee 0f       	add	r30, r30
    5778:	ff 1f       	adc	r31, r31
    577a:	e2 0f       	add	r30, r18
    577c:	f3 1f       	adc	r31, r19
    577e:	ee 0f       	add	r30, r30
    5780:	ff 1f       	adc	r31, r31
    5782:	ef 55       	subi	r30, 0x5F	; 95
    5784:	f8 4e       	sbci	r31, 0xE8	; 232
    5786:	94 e0       	ldi	r25, 0x04	; 4
    5788:	94 83       	std	Z+4, r25	; 0x04
    578a:	71 ce       	rjmp	.-798    	; 0x546e <_turn_off>
    578c:	08 95       	ret

0000578e <status_leds_longPuls>:
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	fc 01       	movw	r30, r24
    5792:	ee 0f       	add	r30, r30
    5794:	ff 1f       	adc	r31, r31
    5796:	df 01       	movw	r26, r30
    5798:	a8 0f       	add	r26, r24
    579a:	b9 1f       	adc	r27, r25
    579c:	aa 0f       	add	r26, r26
    579e:	bb 1f       	adc	r27, r27
    57a0:	af 55       	subi	r26, 0x5F	; 95
    57a2:	b8 4e       	sbci	r27, 0xE8	; 232
    57a4:	26 e0       	ldi	r18, 0x06	; 6
    57a6:	15 96       	adiw	r26, 0x05	; 5
    57a8:	2c 93       	st	X, r18
    57aa:	15 97       	sbiw	r26, 0x05	; 5
    57ac:	fd 01       	movw	r30, r26
    57ae:	14 82       	std	Z+4, r1	; 0x04
    57b0:	08 95       	ret

000057b2 <status_leds_shortPuls>:
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	fc 01       	movw	r30, r24
    57b6:	ee 0f       	add	r30, r30
    57b8:	ff 1f       	adc	r31, r31
    57ba:	df 01       	movw	r26, r30
    57bc:	a8 0f       	add	r26, r24
    57be:	b9 1f       	adc	r27, r25
    57c0:	aa 0f       	add	r26, r26
    57c2:	bb 1f       	adc	r27, r27
    57c4:	af 55       	subi	r26, 0x5F	; 95
    57c6:	b8 4e       	sbci	r27, 0xE8	; 232
    57c8:	15 96       	adiw	r26, 0x05	; 5
    57ca:	1c 92       	st	X, r1
    57cc:	15 97       	sbiw	r26, 0x05	; 5
    57ce:	fd 01       	movw	r30, r26
    57d0:	14 82       	std	Z+4, r1	; 0x04
    57d2:	08 95       	ret

000057d4 <_initTwiInterface>:
    57d4:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_twiIsInitiated>
    57d8:	81 11       	cpse	r24, r1
    57da:	0c c0       	rjmp	.+24     	; 0x57f4 <_initTwiInterface+0x20>
    57dc:	8c e0       	ldi	r24, 0x0C	; 12
    57de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    57e2:	8f ef       	ldi	r24, 0xFF	; 255
    57e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    57e8:	84 e0       	ldi	r24, 0x04	; 4
    57ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	80 93 c7 17 	sts	0x17C7, r24	; 0x8017c7 <_twiIsInitiated>
    57f4:	08 95       	ret

000057f6 <twiCreate>:
    57f6:	af 92       	push	r10
    57f8:	bf 92       	push	r11
    57fa:	cf 92       	push	r12
    57fc:	df 92       	push	r13
    57fe:	ef 92       	push	r14
    5800:	ff 92       	push	r15
    5802:	0f 93       	push	r16
    5804:	1f 93       	push	r17
    5806:	cf 93       	push	r28
    5808:	df 93       	push	r29
    580a:	a8 2e       	mov	r10, r24
    580c:	b6 2e       	mov	r11, r22
    580e:	69 01       	movw	r12, r18
    5810:	7a 01       	movw	r14, r20
    5812:	84 e0       	ldi	r24, 0x04	; 4
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	5f d3       	rcall	.+1726   	; 0x5ed6 <malloc>
    5818:	ec 01       	movw	r28, r24
    581a:	89 2b       	or	r24, r25
    581c:	61 f1       	breq	.+88     	; 0x5876 <twiCreate+0x80>
    581e:	a8 82       	st	Y, r10
    5820:	81 e0       	ldi	r24, 0x01	; 1
    5822:	b8 12       	cpse	r11, r24
    5824:	12 c0       	rjmp	.+36     	; 0x584a <twiCreate+0x54>
    5826:	c7 01       	movw	r24, r14
    5828:	b6 01       	movw	r22, r12
    582a:	20 ea       	ldi	r18, 0xA0	; 160
    582c:	36 e8       	ldi	r19, 0x86	; 134
    582e:	41 e0       	ldi	r20, 0x01	; 1
    5830:	50 e0       	ldi	r21, 0x00	; 0
    5832:	27 d3       	rcall	.+1614   	; 0x5e82 <__udivmodsi4>
    5834:	da 01       	movw	r26, r20
    5836:	c9 01       	movw	r24, r18
    5838:	40 97       	sbiw	r24, 0x10	; 16
    583a:	a1 09       	sbc	r26, r1
    583c:	b1 09       	sbc	r27, r1
    583e:	b6 95       	lsr	r27
    5840:	a7 95       	ror	r26
    5842:	97 95       	ror	r25
    5844:	87 95       	ror	r24
    5846:	89 83       	std	Y+1, r24	; 0x01
    5848:	11 c0       	rjmp	.+34     	; 0x586c <twiCreate+0x76>
    584a:	c7 01       	movw	r24, r14
    584c:	b6 01       	movw	r22, r12
    584e:	20 e8       	ldi	r18, 0x80	; 128
    5850:	3a e1       	ldi	r19, 0x1A	; 26
    5852:	46 e0       	ldi	r20, 0x06	; 6
    5854:	50 e0       	ldi	r21, 0x00	; 0
    5856:	15 d3       	rcall	.+1578   	; 0x5e82 <__udivmodsi4>
    5858:	da 01       	movw	r26, r20
    585a:	c9 01       	movw	r24, r18
    585c:	40 97       	sbiw	r24, 0x10	; 16
    585e:	a1 09       	sbc	r26, r1
    5860:	b1 09       	sbc	r27, r1
    5862:	b6 95       	lsr	r27
    5864:	a7 95       	ror	r26
    5866:	97 95       	ror	r25
    5868:	87 95       	ror	r24
    586a:	89 83       	std	Y+1, r24	; 0x01
    586c:	1b 83       	std	Y+3, r17	; 0x03
    586e:	0a 83       	std	Y+2, r16	; 0x02
    5870:	8c 2f       	mov	r24, r28
    5872:	9d 2f       	mov	r25, r29
    5874:	02 c0       	rjmp	.+4      	; 0x587a <twiCreate+0x84>
    5876:	80 e0       	ldi	r24, 0x00	; 0
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	1f 91       	pop	r17
    5880:	0f 91       	pop	r16
    5882:	ff 90       	pop	r15
    5884:	ef 90       	pop	r14
    5886:	df 90       	pop	r13
    5888:	cf 90       	pop	r12
    588a:	bf 90       	pop	r11
    588c:	af 90       	pop	r10
    588e:	08 95       	ret

00005890 <twiIsBusy>:
    5890:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5894:	81 70       	andi	r24, 0x01	; 1
    5896:	08 95       	ret

00005898 <twiTransmit>:
    5898:	ff 92       	push	r15
    589a:	0f 93       	push	r16
    589c:	1f 93       	push	r17
    589e:	cf 93       	push	r28
    58a0:	df 93       	push	r29
    58a2:	00 97       	sbiw	r24, 0x00	; 0
    58a4:	d1 f1       	breq	.+116    	; 0x591a <twiTransmit+0x82>
    58a6:	4a 30       	cpi	r20, 0x0A	; 10
    58a8:	d0 f5       	brcc	.+116    	; 0x591e <twiTransmit+0x86>
    58aa:	f4 2e       	mov	r15, r20
    58ac:	8b 01       	movw	r16, r22
    58ae:	ec 01       	movw	r28, r24
    58b0:	ef df       	rcall	.-34     	; 0x5890 <twiIsBusy>
    58b2:	81 11       	cpse	r24, r1
    58b4:	36 c0       	rjmp	.+108    	; 0x5922 <twiTransmit+0x8a>
    58b6:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiCurrentHandler>
    58ba:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <_twiCurrentHandler+0x1>
    58be:	c8 17       	cp	r28, r24
    58c0:	d9 07       	cpc	r29, r25
    58c2:	41 f0       	breq	.+16     	; 0x58d4 <twiTransmit+0x3c>
    58c4:	87 df       	rcall	.-242    	; 0x57d4 <_initTwiInterface>
    58c6:	89 81       	ldd	r24, Y+1	; 0x01
    58c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    58cc:	d0 93 bb 17 	sts	0x17BB, r29	; 0x8017bb <_twiCurrentHandler+0x1>
    58d0:	c0 93 ba 17 	sts	0x17BA, r28	; 0x8017ba <_twiCurrentHandler>
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	8f 0d       	add	r24, r15
    58d8:	80 93 bc 17 	sts	0x17BC, r24	; 0x8017bc <_twiMessageLen>
    58dc:	88 81       	ld	r24, Y
    58de:	88 0f       	add	r24, r24
    58e0:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <_twiMessageBuffer>
    58e4:	ff 20       	and	r15, r15
    58e6:	89 f0       	breq	.+34     	; 0x590a <twiTransmit+0x72>
    58e8:	f8 01       	movw	r30, r16
    58ea:	ae eb       	ldi	r26, 0xBE	; 190
    58ec:	b7 e1       	ldi	r27, 0x17	; 23
    58ee:	4f ef       	ldi	r20, 0xFF	; 255
    58f0:	4f 0d       	add	r20, r15
    58f2:	64 2f       	mov	r22, r20
    58f4:	70 e0       	ldi	r23, 0x00	; 0
    58f6:	cb 01       	movw	r24, r22
    58f8:	01 96       	adiw	r24, 0x01	; 1
    58fa:	b8 01       	movw	r22, r16
    58fc:	68 0f       	add	r22, r24
    58fe:	79 1f       	adc	r23, r25
    5900:	81 91       	ld	r24, Z+
    5902:	8d 93       	st	X+, r24
    5904:	e6 17       	cp	r30, r22
    5906:	f7 07       	cpc	r31, r23
    5908:	d9 f7       	brne	.-10     	; 0x5900 <twiTransmit+0x68>
    590a:	88 ef       	ldi	r24, 0xF8	; 248
    590c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5910:	85 ea       	ldi	r24, 0xA5	; 165
    5912:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5916:	84 e0       	ldi	r24, 0x04	; 4
    5918:	05 c0       	rjmp	.+10     	; 0x5924 <twiTransmit+0x8c>
    591a:	86 e0       	ldi	r24, 0x06	; 6
    591c:	03 c0       	rjmp	.+6      	; 0x5924 <twiTransmit+0x8c>
    591e:	87 e0       	ldi	r24, 0x07	; 7
    5920:	01 c0       	rjmp	.+2      	; 0x5924 <twiTransmit+0x8c>
    5922:	82 e0       	ldi	r24, 0x02	; 2
    5924:	df 91       	pop	r29
    5926:	cf 91       	pop	r28
    5928:	1f 91       	pop	r17
    592a:	0f 91       	pop	r16
    592c:	ff 90       	pop	r15
    592e:	08 95       	ret

00005930 <twiReceive>:
    5930:	1f 93       	push	r17
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	00 97       	sbiw	r24, 0x00	; 0
    5938:	29 f1       	breq	.+74     	; 0x5984 <twiReceive+0x54>
    593a:	6b 30       	cpi	r22, 0x0B	; 11
    593c:	28 f5       	brcc	.+74     	; 0x5988 <twiReceive+0x58>
    593e:	16 2f       	mov	r17, r22
    5940:	ec 01       	movw	r28, r24
    5942:	a6 df       	rcall	.-180    	; 0x5890 <twiIsBusy>
    5944:	81 11       	cpse	r24, r1
    5946:	22 c0       	rjmp	.+68     	; 0x598c <twiReceive+0x5c>
    5948:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiCurrentHandler>
    594c:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <_twiCurrentHandler+0x1>
    5950:	c8 17       	cp	r28, r24
    5952:	d9 07       	cpc	r29, r25
    5954:	41 f0       	breq	.+16     	; 0x5966 <twiReceive+0x36>
    5956:	3e df       	rcall	.-388    	; 0x57d4 <_initTwiInterface>
    5958:	89 81       	ldd	r24, Y+1	; 0x01
    595a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    595e:	d0 93 bb 17 	sts	0x17BB, r29	; 0x8017bb <_twiCurrentHandler+0x1>
    5962:	c0 93 ba 17 	sts	0x17BA, r28	; 0x8017ba <_twiCurrentHandler>
    5966:	10 93 bc 17 	sts	0x17BC, r17	; 0x8017bc <_twiMessageLen>
    596a:	88 81       	ld	r24, Y
    596c:	88 0f       	add	r24, r24
    596e:	81 60       	ori	r24, 0x01	; 1
    5970:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <_twiMessageBuffer>
    5974:	88 ef       	ldi	r24, 0xF8	; 248
    5976:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    597a:	85 ea       	ldi	r24, 0xA5	; 165
    597c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5980:	85 e0       	ldi	r24, 0x05	; 5
    5982:	05 c0       	rjmp	.+10     	; 0x598e <twiReceive+0x5e>
    5984:	86 e0       	ldi	r24, 0x06	; 6
    5986:	03 c0       	rjmp	.+6      	; 0x598e <twiReceive+0x5e>
    5988:	87 e0       	ldi	r24, 0x07	; 7
    598a:	01 c0       	rjmp	.+2      	; 0x598e <twiReceive+0x5e>
    598c:	82 e0       	ldi	r24, 0x02	; 2
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	1f 91       	pop	r17
    5994:	08 95       	ret

00005996 <__vector_39>:
    5996:	1f 92       	push	r1
    5998:	0f 92       	push	r0
    599a:	0f b6       	in	r0, 0x3f	; 63
    599c:	0f 92       	push	r0
    599e:	11 24       	eor	r1, r1
    59a0:	0b b6       	in	r0, 0x3b	; 59
    59a2:	0f 92       	push	r0
    59a4:	2f 93       	push	r18
    59a6:	3f 93       	push	r19
    59a8:	4f 93       	push	r20
    59aa:	5f 93       	push	r21
    59ac:	6f 93       	push	r22
    59ae:	7f 93       	push	r23
    59b0:	8f 93       	push	r24
    59b2:	9f 93       	push	r25
    59b4:	af 93       	push	r26
    59b6:	bf 93       	push	r27
    59b8:	ef 93       	push	r30
    59ba:	ff 93       	push	r31
    59bc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    59c0:	8e 2f       	mov	r24, r30
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	fc 01       	movw	r30, r24
    59c6:	38 97       	sbiw	r30, 0x08	; 8
    59c8:	e1 35       	cpi	r30, 0x51	; 81
    59ca:	f1 05       	cpc	r31, r1
    59cc:	08 f0       	brcs	.+2      	; 0x59d0 <__vector_39+0x3a>
    59ce:	75 c0       	rjmp	.+234    	; 0x5aba <__vector_39+0x124>
    59d0:	88 27       	eor	r24, r24
    59d2:	e4 58       	subi	r30, 0x84	; 132
    59d4:	ff 4f       	sbci	r31, 0xFF	; 255
    59d6:	8f 4f       	sbci	r24, 0xFF	; 255
    59d8:	76 c2       	rjmp	.+1260   	; 0x5ec6 <__tablejump2__>
    59da:	10 92 b9 17 	sts	0x17B9, r1	; 0x8017b9 <_index.1885>
    59de:	e0 91 b9 17 	lds	r30, 0x17B9	; 0x8017b9 <_index.1885>
    59e2:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <_twiMessageLen>
    59e6:	e8 17       	cp	r30, r24
    59e8:	70 f4       	brcc	.+28     	; 0x5a06 <__vector_39+0x70>
    59ea:	81 e0       	ldi	r24, 0x01	; 1
    59ec:	8e 0f       	add	r24, r30
    59ee:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <_index.1885>
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	e3 54       	subi	r30, 0x43	; 67
    59f6:	f8 4e       	sbci	r31, 0xE8	; 232
    59f8:	80 81       	ld	r24, Z
    59fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    59fe:	85 e8       	ldi	r24, 0x85	; 133
    5a00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a04:	72 c0       	rjmp	.+228    	; 0x5aea <__vector_39+0x154>
    5a06:	84 e9       	ldi	r24, 0x94	; 148
    5a08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a0c:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiCurrentHandler>
    5a10:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <_twiCurrentHandler+0x1>
    5a14:	dc 01       	movw	r26, r24
    5a16:	12 96       	adiw	r26, 0x02	; 2
    5a18:	ed 91       	ld	r30, X+
    5a1a:	fc 91       	ld	r31, X
    5a1c:	13 97       	sbiw	r26, 0x03	; 3
    5a1e:	30 97       	sbiw	r30, 0x00	; 0
    5a20:	09 f4       	brne	.+2      	; 0x5a24 <__vector_39+0x8e>
    5a22:	63 c0       	rjmp	.+198    	; 0x5aea <__vector_39+0x154>
    5a24:	20 e0       	ldi	r18, 0x00	; 0
    5a26:	40 e0       	ldi	r20, 0x00	; 0
    5a28:	50 e0       	ldi	r21, 0x00	; 0
    5a2a:	64 e0       	ldi	r22, 0x04	; 4
    5a2c:	19 95       	eicall
    5a2e:	5d c0       	rjmp	.+186    	; 0x5aea <__vector_39+0x154>
    5a30:	e0 91 b9 17 	lds	r30, 0x17B9	; 0x8017b9 <_index.1885>
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	8e 0f       	add	r24, r30
    5a38:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <_index.1885>
    5a3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a40:	f0 e0       	ldi	r31, 0x00	; 0
    5a42:	e3 54       	subi	r30, 0x43	; 67
    5a44:	f8 4e       	sbci	r31, 0xE8	; 232
    5a46:	80 83       	st	Z, r24
    5a48:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a4c:	80 34       	cpi	r24, 0x40	; 64
    5a4e:	11 f4       	brne	.+4      	; 0x5a54 <__vector_39+0xbe>
    5a50:	10 92 b9 17 	sts	0x17B9, r1	; 0x8017b9 <_index.1885>
    5a54:	20 91 b9 17 	lds	r18, 0x17B9	; 0x8017b9 <_index.1885>
    5a58:	30 e0       	ldi	r19, 0x00	; 0
    5a5a:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <_twiMessageLen>
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	01 97       	sbiw	r24, 0x01	; 1
    5a62:	28 17       	cp	r18, r24
    5a64:	39 07       	cpc	r19, r25
    5a66:	24 f4       	brge	.+8      	; 0x5a70 <__vector_39+0xda>
    5a68:	85 ec       	ldi	r24, 0xC5	; 197
    5a6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a6e:	3d c0       	rjmp	.+122    	; 0x5aea <__vector_39+0x154>
    5a70:	85 e8       	ldi	r24, 0x85	; 133
    5a72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a76:	39 c0       	rjmp	.+114    	; 0x5aea <__vector_39+0x154>
    5a78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a7c:	e0 91 b9 17 	lds	r30, 0x17B9	; 0x8017b9 <_index.1885>
    5a80:	f0 e0       	ldi	r31, 0x00	; 0
    5a82:	e3 54       	subi	r30, 0x43	; 67
    5a84:	f8 4e       	sbci	r31, 0xE8	; 232
    5a86:	80 83       	st	Z, r24
    5a88:	84 e9       	ldi	r24, 0x94	; 148
    5a8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a8e:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiCurrentHandler>
    5a92:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <_twiCurrentHandler+0x1>
    5a96:	dc 01       	movw	r26, r24
    5a98:	12 96       	adiw	r26, 0x02	; 2
    5a9a:	ed 91       	ld	r30, X+
    5a9c:	fc 91       	ld	r31, X
    5a9e:	13 97       	sbiw	r26, 0x03	; 3
    5aa0:	30 97       	sbiw	r30, 0x00	; 0
    5aa2:	19 f1       	breq	.+70     	; 0x5aea <__vector_39+0x154>
    5aa4:	20 91 bc 17 	lds	r18, 0x17BC	; 0x8017bc <_twiMessageLen>
    5aa8:	4d eb       	ldi	r20, 0xBD	; 189
    5aaa:	57 e1       	ldi	r21, 0x17	; 23
    5aac:	65 e0       	ldi	r22, 0x05	; 5
    5aae:	19 95       	eicall
    5ab0:	1c c0       	rjmp	.+56     	; 0x5aea <__vector_39+0x154>
    5ab2:	85 ea       	ldi	r24, 0xA5	; 165
    5ab4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ab8:	18 c0       	rjmp	.+48     	; 0x5aea <__vector_39+0x154>
    5aba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5abe:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5ac2:	84 e0       	ldi	r24, 0x04	; 4
    5ac4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ac8:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiCurrentHandler>
    5acc:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <_twiCurrentHandler+0x1>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	12 96       	adiw	r26, 0x02	; 2
    5ad4:	ed 91       	ld	r30, X+
    5ad6:	fc 91       	ld	r31, X
    5ad8:	13 97       	sbiw	r26, 0x03	; 3
    5ada:	30 97       	sbiw	r30, 0x00	; 0
    5adc:	31 f0       	breq	.+12     	; 0x5aea <__vector_39+0x154>
    5ade:	20 e0       	ldi	r18, 0x00	; 0
    5ae0:	40 e0       	ldi	r20, 0x00	; 0
    5ae2:	50 e0       	ldi	r21, 0x00	; 0
    5ae4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5ae8:	19 95       	eicall
    5aea:	ff 91       	pop	r31
    5aec:	ef 91       	pop	r30
    5aee:	bf 91       	pop	r27
    5af0:	af 91       	pop	r26
    5af2:	9f 91       	pop	r25
    5af4:	8f 91       	pop	r24
    5af6:	7f 91       	pop	r23
    5af8:	6f 91       	pop	r22
    5afa:	5f 91       	pop	r21
    5afc:	4f 91       	pop	r20
    5afe:	3f 91       	pop	r19
    5b00:	2f 91       	pop	r18
    5b02:	0f 90       	pop	r0
    5b04:	0b be       	out	0x3b, r0	; 59
    5b06:	0f 90       	pop	r0
    5b08:	0f be       	out	0x3f, r0	; 63
    5b0a:	0f 90       	pop	r0
    5b0c:	1f 90       	pop	r1
    5b0e:	18 95       	reti

00005b10 <fifo_init>:
    5b10:	fc 01       	movw	r30, r24
    5b12:	41 11       	cpse	r20, r1
    5b14:	01 c0       	rjmp	.+2      	; 0x5b18 <fifo_init+0x8>
    5b16:	00 d3       	rcall	.+1536   	; 0x6118 <abort>
    5b18:	84 2f       	mov	r24, r20
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	9c 01       	movw	r18, r24
    5b1e:	21 50       	subi	r18, 0x01	; 1
    5b20:	31 09       	sbc	r19, r1
    5b22:	82 23       	and	r24, r18
    5b24:	93 23       	and	r25, r19
    5b26:	89 2b       	or	r24, r25
    5b28:	09 f0       	breq	.+2      	; 0x5b2c <fifo_init+0x1c>
    5b2a:	f6 d2       	rcall	.+1516   	; 0x6118 <abort>
    5b2c:	41 38       	cpi	r20, 0x81	; 129
    5b2e:	08 f0       	brcs	.+2      	; 0x5b32 <fifo_init+0x22>
    5b30:	f3 d2       	rcall	.+1510   	; 0x6118 <abort>
    5b32:	12 82       	std	Z+2, r1	; 0x02
    5b34:	13 82       	std	Z+3, r1	; 0x03
    5b36:	44 83       	std	Z+4, r20	; 0x04
    5b38:	44 0f       	add	r20, r20
    5b3a:	41 50       	subi	r20, 0x01	; 1
    5b3c:	45 83       	std	Z+5, r20	; 0x05
    5b3e:	71 83       	std	Z+1, r23	; 0x01
    5b40:	60 83       	st	Z, r22
    5b42:	80 e0       	ldi	r24, 0x00	; 0
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	08 95       	ret

00005b48 <__subsf3>:
    5b48:	50 58       	subi	r21, 0x80	; 128

00005b4a <__addsf3>:
    5b4a:	bb 27       	eor	r27, r27
    5b4c:	aa 27       	eor	r26, r26
    5b4e:	0e d0       	rcall	.+28     	; 0x5b6c <__addsf3x>
    5b50:	21 c1       	rjmp	.+578    	; 0x5d94 <__fp_round>
    5b52:	12 d1       	rcall	.+548    	; 0x5d78 <__fp_pscA>
    5b54:	30 f0       	brcs	.+12     	; 0x5b62 <__addsf3+0x18>
    5b56:	17 d1       	rcall	.+558    	; 0x5d86 <__fp_pscB>
    5b58:	20 f0       	brcs	.+8      	; 0x5b62 <__addsf3+0x18>
    5b5a:	31 f4       	brne	.+12     	; 0x5b68 <__addsf3+0x1e>
    5b5c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b5e:	11 f4       	brne	.+4      	; 0x5b64 <__addsf3+0x1a>
    5b60:	1e f4       	brtc	.+6      	; 0x5b68 <__addsf3+0x1e>
    5b62:	07 c1       	rjmp	.+526    	; 0x5d72 <__fp_nan>
    5b64:	0e f4       	brtc	.+2      	; 0x5b68 <__addsf3+0x1e>
    5b66:	e0 95       	com	r30
    5b68:	e7 fb       	bst	r30, 7
    5b6a:	fd c0       	rjmp	.+506    	; 0x5d66 <__fp_inf>

00005b6c <__addsf3x>:
    5b6c:	e9 2f       	mov	r30, r25
    5b6e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fp_split3>
    5b72:	78 f3       	brcs	.-34     	; 0x5b52 <__addsf3+0x8>
    5b74:	ba 17       	cp	r27, r26
    5b76:	62 07       	cpc	r22, r18
    5b78:	73 07       	cpc	r23, r19
    5b7a:	84 07       	cpc	r24, r20
    5b7c:	95 07       	cpc	r25, r21
    5b7e:	20 f0       	brcs	.+8      	; 0x5b88 <__addsf3x+0x1c>
    5b80:	79 f4       	brne	.+30     	; 0x5ba0 <__addsf3x+0x34>
    5b82:	a6 f5       	brtc	.+104    	; 0x5bec <__addsf3x+0x80>
    5b84:	0c 94 95 20 	jmp	0x412a	; 0x412a <__fp_zero>
    5b88:	0e f4       	brtc	.+2      	; 0x5b8c <__addsf3x+0x20>
    5b8a:	e0 95       	com	r30
    5b8c:	0b 2e       	mov	r0, r27
    5b8e:	ba 2f       	mov	r27, r26
    5b90:	a0 2d       	mov	r26, r0
    5b92:	0b 01       	movw	r0, r22
    5b94:	b9 01       	movw	r22, r18
    5b96:	90 01       	movw	r18, r0
    5b98:	0c 01       	movw	r0, r24
    5b9a:	ca 01       	movw	r24, r20
    5b9c:	a0 01       	movw	r20, r0
    5b9e:	11 24       	eor	r1, r1
    5ba0:	ff 27       	eor	r31, r31
    5ba2:	59 1b       	sub	r21, r25
    5ba4:	99 f0       	breq	.+38     	; 0x5bcc <__addsf3x+0x60>
    5ba6:	59 3f       	cpi	r21, 0xF9	; 249
    5ba8:	50 f4       	brcc	.+20     	; 0x5bbe <__addsf3x+0x52>
    5baa:	50 3e       	cpi	r21, 0xE0	; 224
    5bac:	68 f1       	brcs	.+90     	; 0x5c08 <__addsf3x+0x9c>
    5bae:	1a 16       	cp	r1, r26
    5bb0:	f0 40       	sbci	r31, 0x00	; 0
    5bb2:	a2 2f       	mov	r26, r18
    5bb4:	23 2f       	mov	r18, r19
    5bb6:	34 2f       	mov	r19, r20
    5bb8:	44 27       	eor	r20, r20
    5bba:	58 5f       	subi	r21, 0xF8	; 248
    5bbc:	f3 cf       	rjmp	.-26     	; 0x5ba4 <__addsf3x+0x38>
    5bbe:	46 95       	lsr	r20
    5bc0:	37 95       	ror	r19
    5bc2:	27 95       	ror	r18
    5bc4:	a7 95       	ror	r26
    5bc6:	f0 40       	sbci	r31, 0x00	; 0
    5bc8:	53 95       	inc	r21
    5bca:	c9 f7       	brne	.-14     	; 0x5bbe <__addsf3x+0x52>
    5bcc:	7e f4       	brtc	.+30     	; 0x5bec <__addsf3x+0x80>
    5bce:	1f 16       	cp	r1, r31
    5bd0:	ba 0b       	sbc	r27, r26
    5bd2:	62 0b       	sbc	r22, r18
    5bd4:	73 0b       	sbc	r23, r19
    5bd6:	84 0b       	sbc	r24, r20
    5bd8:	ba f0       	brmi	.+46     	; 0x5c08 <__addsf3x+0x9c>
    5bda:	91 50       	subi	r25, 0x01	; 1
    5bdc:	a1 f0       	breq	.+40     	; 0x5c06 <__addsf3x+0x9a>
    5bde:	ff 0f       	add	r31, r31
    5be0:	bb 1f       	adc	r27, r27
    5be2:	66 1f       	adc	r22, r22
    5be4:	77 1f       	adc	r23, r23
    5be6:	88 1f       	adc	r24, r24
    5be8:	c2 f7       	brpl	.-16     	; 0x5bda <__addsf3x+0x6e>
    5bea:	0e c0       	rjmp	.+28     	; 0x5c08 <__addsf3x+0x9c>
    5bec:	ba 0f       	add	r27, r26
    5bee:	62 1f       	adc	r22, r18
    5bf0:	73 1f       	adc	r23, r19
    5bf2:	84 1f       	adc	r24, r20
    5bf4:	48 f4       	brcc	.+18     	; 0x5c08 <__addsf3x+0x9c>
    5bf6:	87 95       	ror	r24
    5bf8:	77 95       	ror	r23
    5bfa:	67 95       	ror	r22
    5bfc:	b7 95       	ror	r27
    5bfe:	f7 95       	ror	r31
    5c00:	9e 3f       	cpi	r25, 0xFE	; 254
    5c02:	08 f0       	brcs	.+2      	; 0x5c06 <__addsf3x+0x9a>
    5c04:	b1 cf       	rjmp	.-158    	; 0x5b68 <__addsf3+0x1e>
    5c06:	93 95       	inc	r25
    5c08:	88 0f       	add	r24, r24
    5c0a:	08 f0       	brcs	.+2      	; 0x5c0e <__addsf3x+0xa2>
    5c0c:	99 27       	eor	r25, r25
    5c0e:	ee 0f       	add	r30, r30
    5c10:	97 95       	ror	r25
    5c12:	87 95       	ror	r24
    5c14:	08 95       	ret

00005c16 <__divsf3>:
    5c16:	0d d0       	rcall	.+26     	; 0x5c32 <__divsf3x>
    5c18:	bd c0       	rjmp	.+378    	; 0x5d94 <__fp_round>
    5c1a:	b5 d0       	rcall	.+362    	; 0x5d86 <__fp_pscB>
    5c1c:	48 f0       	brcs	.+18     	; 0x5c30 <__divsf3+0x1a>
    5c1e:	ac d0       	rcall	.+344    	; 0x5d78 <__fp_pscA>
    5c20:	38 f0       	brcs	.+14     	; 0x5c30 <__divsf3+0x1a>
    5c22:	21 f4       	brne	.+8      	; 0x5c2c <__divsf3+0x16>
    5c24:	5f 3f       	cpi	r21, 0xFF	; 255
    5c26:	21 f0       	breq	.+8      	; 0x5c30 <__divsf3+0x1a>
    5c28:	9e c0       	rjmp	.+316    	; 0x5d66 <__fp_inf>
    5c2a:	51 11       	cpse	r21, r1
    5c2c:	0c 94 96 20 	jmp	0x412c	; 0x412c <__fp_szero>
    5c30:	a0 c0       	rjmp	.+320    	; 0x5d72 <__fp_nan>

00005c32 <__divsf3x>:
    5c32:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fp_split3>
    5c36:	88 f3       	brcs	.-30     	; 0x5c1a <__divsf3+0x4>

00005c38 <__divsf3_pse>:
    5c38:	99 23       	and	r25, r25
    5c3a:	b9 f3       	breq	.-18     	; 0x5c2a <__divsf3+0x14>
    5c3c:	55 23       	and	r21, r21
    5c3e:	a1 f3       	breq	.-24     	; 0x5c28 <__divsf3+0x12>
    5c40:	95 1b       	sub	r25, r21
    5c42:	55 0b       	sbc	r21, r21
    5c44:	bb 27       	eor	r27, r27
    5c46:	aa 27       	eor	r26, r26
    5c48:	62 17       	cp	r22, r18
    5c4a:	73 07       	cpc	r23, r19
    5c4c:	84 07       	cpc	r24, r20
    5c4e:	38 f0       	brcs	.+14     	; 0x5c5e <__divsf3_pse+0x26>
    5c50:	9f 5f       	subi	r25, 0xFF	; 255
    5c52:	5f 4f       	sbci	r21, 0xFF	; 255
    5c54:	22 0f       	add	r18, r18
    5c56:	33 1f       	adc	r19, r19
    5c58:	44 1f       	adc	r20, r20
    5c5a:	aa 1f       	adc	r26, r26
    5c5c:	a9 f3       	breq	.-22     	; 0x5c48 <__divsf3_pse+0x10>
    5c5e:	34 d0       	rcall	.+104    	; 0x5cc8 <__divsf3_pse+0x90>
    5c60:	0e 2e       	mov	r0, r30
    5c62:	3a f0       	brmi	.+14     	; 0x5c72 <__divsf3_pse+0x3a>
    5c64:	e0 e8       	ldi	r30, 0x80	; 128
    5c66:	31 d0       	rcall	.+98     	; 0x5cca <__divsf3_pse+0x92>
    5c68:	91 50       	subi	r25, 0x01	; 1
    5c6a:	50 40       	sbci	r21, 0x00	; 0
    5c6c:	e6 95       	lsr	r30
    5c6e:	00 1c       	adc	r0, r0
    5c70:	ca f7       	brpl	.-14     	; 0x5c64 <__divsf3_pse+0x2c>
    5c72:	2a d0       	rcall	.+84     	; 0x5cc8 <__divsf3_pse+0x90>
    5c74:	fe 2f       	mov	r31, r30
    5c76:	28 d0       	rcall	.+80     	; 0x5cc8 <__divsf3_pse+0x90>
    5c78:	66 0f       	add	r22, r22
    5c7a:	77 1f       	adc	r23, r23
    5c7c:	88 1f       	adc	r24, r24
    5c7e:	bb 1f       	adc	r27, r27
    5c80:	26 17       	cp	r18, r22
    5c82:	37 07       	cpc	r19, r23
    5c84:	48 07       	cpc	r20, r24
    5c86:	ab 07       	cpc	r26, r27
    5c88:	b0 e8       	ldi	r27, 0x80	; 128
    5c8a:	09 f0       	breq	.+2      	; 0x5c8e <__divsf3_pse+0x56>
    5c8c:	bb 0b       	sbc	r27, r27
    5c8e:	80 2d       	mov	r24, r0
    5c90:	bf 01       	movw	r22, r30
    5c92:	ff 27       	eor	r31, r31
    5c94:	93 58       	subi	r25, 0x83	; 131
    5c96:	5f 4f       	sbci	r21, 0xFF	; 255
    5c98:	32 f0       	brmi	.+12     	; 0x5ca6 <__divsf3_pse+0x6e>
    5c9a:	9e 3f       	cpi	r25, 0xFE	; 254
    5c9c:	51 05       	cpc	r21, r1
    5c9e:	70 f0       	brcs	.+28     	; 0x5cbc <__divsf3_pse+0x84>
    5ca0:	62 c0       	rjmp	.+196    	; 0x5d66 <__fp_inf>
    5ca2:	0c 94 96 20 	jmp	0x412c	; 0x412c <__fp_szero>
    5ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ca8:	e4 f3       	brlt	.-8      	; 0x5ca2 <__divsf3_pse+0x6a>
    5caa:	98 3e       	cpi	r25, 0xE8	; 232
    5cac:	d4 f3       	brlt	.-12     	; 0x5ca2 <__divsf3_pse+0x6a>
    5cae:	86 95       	lsr	r24
    5cb0:	77 95       	ror	r23
    5cb2:	67 95       	ror	r22
    5cb4:	b7 95       	ror	r27
    5cb6:	f7 95       	ror	r31
    5cb8:	9f 5f       	subi	r25, 0xFF	; 255
    5cba:	c9 f7       	brne	.-14     	; 0x5cae <__divsf3_pse+0x76>
    5cbc:	88 0f       	add	r24, r24
    5cbe:	91 1d       	adc	r25, r1
    5cc0:	96 95       	lsr	r25
    5cc2:	87 95       	ror	r24
    5cc4:	97 f9       	bld	r25, 7
    5cc6:	08 95       	ret
    5cc8:	e1 e0       	ldi	r30, 0x01	; 1
    5cca:	66 0f       	add	r22, r22
    5ccc:	77 1f       	adc	r23, r23
    5cce:	88 1f       	adc	r24, r24
    5cd0:	bb 1f       	adc	r27, r27
    5cd2:	62 17       	cp	r22, r18
    5cd4:	73 07       	cpc	r23, r19
    5cd6:	84 07       	cpc	r24, r20
    5cd8:	ba 07       	cpc	r27, r26
    5cda:	20 f0       	brcs	.+8      	; 0x5ce4 <__divsf3_pse+0xac>
    5cdc:	62 1b       	sub	r22, r18
    5cde:	73 0b       	sbc	r23, r19
    5ce0:	84 0b       	sbc	r24, r20
    5ce2:	ba 0b       	sbc	r27, r26
    5ce4:	ee 1f       	adc	r30, r30
    5ce6:	88 f7       	brcc	.-30     	; 0x5cca <__divsf3_pse+0x92>
    5ce8:	e0 95       	com	r30
    5cea:	08 95       	ret

00005cec <__floatunsisf>:
    5cec:	e8 94       	clt
    5cee:	09 c0       	rjmp	.+18     	; 0x5d02 <__floatsisf+0x12>

00005cf0 <__floatsisf>:
    5cf0:	97 fb       	bst	r25, 7
    5cf2:	3e f4       	brtc	.+14     	; 0x5d02 <__floatsisf+0x12>
    5cf4:	90 95       	com	r25
    5cf6:	80 95       	com	r24
    5cf8:	70 95       	com	r23
    5cfa:	61 95       	neg	r22
    5cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    5cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    5d00:	9f 4f       	sbci	r25, 0xFF	; 255
    5d02:	99 23       	and	r25, r25
    5d04:	a9 f0       	breq	.+42     	; 0x5d30 <__floatsisf+0x40>
    5d06:	f9 2f       	mov	r31, r25
    5d08:	96 e9       	ldi	r25, 0x96	; 150
    5d0a:	bb 27       	eor	r27, r27
    5d0c:	93 95       	inc	r25
    5d0e:	f6 95       	lsr	r31
    5d10:	87 95       	ror	r24
    5d12:	77 95       	ror	r23
    5d14:	67 95       	ror	r22
    5d16:	b7 95       	ror	r27
    5d18:	f1 11       	cpse	r31, r1
    5d1a:	f8 cf       	rjmp	.-16     	; 0x5d0c <__floatsisf+0x1c>
    5d1c:	fa f4       	brpl	.+62     	; 0x5d5c <__floatsisf+0x6c>
    5d1e:	bb 0f       	add	r27, r27
    5d20:	11 f4       	brne	.+4      	; 0x5d26 <__floatsisf+0x36>
    5d22:	60 ff       	sbrs	r22, 0
    5d24:	1b c0       	rjmp	.+54     	; 0x5d5c <__floatsisf+0x6c>
    5d26:	6f 5f       	subi	r22, 0xFF	; 255
    5d28:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d2e:	16 c0       	rjmp	.+44     	; 0x5d5c <__floatsisf+0x6c>
    5d30:	88 23       	and	r24, r24
    5d32:	11 f0       	breq	.+4      	; 0x5d38 <__floatsisf+0x48>
    5d34:	96 e9       	ldi	r25, 0x96	; 150
    5d36:	11 c0       	rjmp	.+34     	; 0x5d5a <__floatsisf+0x6a>
    5d38:	77 23       	and	r23, r23
    5d3a:	21 f0       	breq	.+8      	; 0x5d44 <__floatsisf+0x54>
    5d3c:	9e e8       	ldi	r25, 0x8E	; 142
    5d3e:	87 2f       	mov	r24, r23
    5d40:	76 2f       	mov	r23, r22
    5d42:	05 c0       	rjmp	.+10     	; 0x5d4e <__floatsisf+0x5e>
    5d44:	66 23       	and	r22, r22
    5d46:	71 f0       	breq	.+28     	; 0x5d64 <__floatsisf+0x74>
    5d48:	96 e8       	ldi	r25, 0x86	; 134
    5d4a:	86 2f       	mov	r24, r22
    5d4c:	70 e0       	ldi	r23, 0x00	; 0
    5d4e:	60 e0       	ldi	r22, 0x00	; 0
    5d50:	2a f0       	brmi	.+10     	; 0x5d5c <__floatsisf+0x6c>
    5d52:	9a 95       	dec	r25
    5d54:	66 0f       	add	r22, r22
    5d56:	77 1f       	adc	r23, r23
    5d58:	88 1f       	adc	r24, r24
    5d5a:	da f7       	brpl	.-10     	; 0x5d52 <__floatsisf+0x62>
    5d5c:	88 0f       	add	r24, r24
    5d5e:	96 95       	lsr	r25
    5d60:	87 95       	ror	r24
    5d62:	97 f9       	bld	r25, 7
    5d64:	08 95       	ret

00005d66 <__fp_inf>:
    5d66:	97 f9       	bld	r25, 7
    5d68:	9f 67       	ori	r25, 0x7F	; 127
    5d6a:	80 e8       	ldi	r24, 0x80	; 128
    5d6c:	70 e0       	ldi	r23, 0x00	; 0
    5d6e:	60 e0       	ldi	r22, 0x00	; 0
    5d70:	08 95       	ret

00005d72 <__fp_nan>:
    5d72:	9f ef       	ldi	r25, 0xFF	; 255
    5d74:	80 ec       	ldi	r24, 0xC0	; 192
    5d76:	08 95       	ret

00005d78 <__fp_pscA>:
    5d78:	00 24       	eor	r0, r0
    5d7a:	0a 94       	dec	r0
    5d7c:	16 16       	cp	r1, r22
    5d7e:	17 06       	cpc	r1, r23
    5d80:	18 06       	cpc	r1, r24
    5d82:	09 06       	cpc	r0, r25
    5d84:	08 95       	ret

00005d86 <__fp_pscB>:
    5d86:	00 24       	eor	r0, r0
    5d88:	0a 94       	dec	r0
    5d8a:	12 16       	cp	r1, r18
    5d8c:	13 06       	cpc	r1, r19
    5d8e:	14 06       	cpc	r1, r20
    5d90:	05 06       	cpc	r0, r21
    5d92:	08 95       	ret

00005d94 <__fp_round>:
    5d94:	09 2e       	mov	r0, r25
    5d96:	03 94       	inc	r0
    5d98:	00 0c       	add	r0, r0
    5d9a:	11 f4       	brne	.+4      	; 0x5da0 <__fp_round+0xc>
    5d9c:	88 23       	and	r24, r24
    5d9e:	52 f0       	brmi	.+20     	; 0x5db4 <__fp_round+0x20>
    5da0:	bb 0f       	add	r27, r27
    5da2:	40 f4       	brcc	.+16     	; 0x5db4 <__fp_round+0x20>
    5da4:	bf 2b       	or	r27, r31
    5da6:	11 f4       	brne	.+4      	; 0x5dac <__fp_round+0x18>
    5da8:	60 ff       	sbrs	r22, 0
    5daa:	04 c0       	rjmp	.+8      	; 0x5db4 <__fp_round+0x20>
    5dac:	6f 5f       	subi	r22, 0xFF	; 255
    5dae:	7f 4f       	sbci	r23, 0xFF	; 255
    5db0:	8f 4f       	sbci	r24, 0xFF	; 255
    5db2:	9f 4f       	sbci	r25, 0xFF	; 255
    5db4:	08 95       	ret

00005db6 <__mulsf3>:
    5db6:	0c d0       	rcall	.+24     	; 0x5dd0 <__mulsf3x>
    5db8:	ed cf       	rjmp	.-38     	; 0x5d94 <__fp_round>
    5dba:	de df       	rcall	.-68     	; 0x5d78 <__fp_pscA>
    5dbc:	28 f0       	brcs	.+10     	; 0x5dc8 <__mulsf3+0x12>
    5dbe:	e3 df       	rcall	.-58     	; 0x5d86 <__fp_pscB>
    5dc0:	18 f0       	brcs	.+6      	; 0x5dc8 <__mulsf3+0x12>
    5dc2:	95 23       	and	r25, r21
    5dc4:	09 f0       	breq	.+2      	; 0x5dc8 <__mulsf3+0x12>
    5dc6:	cf cf       	rjmp	.-98     	; 0x5d66 <__fp_inf>
    5dc8:	d4 cf       	rjmp	.-88     	; 0x5d72 <__fp_nan>
    5dca:	11 24       	eor	r1, r1
    5dcc:	0c 94 96 20 	jmp	0x412c	; 0x412c <__fp_szero>

00005dd0 <__mulsf3x>:
    5dd0:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fp_split3>
    5dd4:	90 f3       	brcs	.-28     	; 0x5dba <__mulsf3+0x4>

00005dd6 <__mulsf3_pse>:
    5dd6:	95 9f       	mul	r25, r21
    5dd8:	c1 f3       	breq	.-16     	; 0x5dca <__mulsf3+0x14>
    5dda:	95 0f       	add	r25, r21
    5ddc:	50 e0       	ldi	r21, 0x00	; 0
    5dde:	55 1f       	adc	r21, r21
    5de0:	62 9f       	mul	r22, r18
    5de2:	f0 01       	movw	r30, r0
    5de4:	72 9f       	mul	r23, r18
    5de6:	bb 27       	eor	r27, r27
    5de8:	f0 0d       	add	r31, r0
    5dea:	b1 1d       	adc	r27, r1
    5dec:	63 9f       	mul	r22, r19
    5dee:	aa 27       	eor	r26, r26
    5df0:	f0 0d       	add	r31, r0
    5df2:	b1 1d       	adc	r27, r1
    5df4:	aa 1f       	adc	r26, r26
    5df6:	64 9f       	mul	r22, r20
    5df8:	66 27       	eor	r22, r22
    5dfa:	b0 0d       	add	r27, r0
    5dfc:	a1 1d       	adc	r26, r1
    5dfe:	66 1f       	adc	r22, r22
    5e00:	82 9f       	mul	r24, r18
    5e02:	22 27       	eor	r18, r18
    5e04:	b0 0d       	add	r27, r0
    5e06:	a1 1d       	adc	r26, r1
    5e08:	62 1f       	adc	r22, r18
    5e0a:	73 9f       	mul	r23, r19
    5e0c:	b0 0d       	add	r27, r0
    5e0e:	a1 1d       	adc	r26, r1
    5e10:	62 1f       	adc	r22, r18
    5e12:	83 9f       	mul	r24, r19
    5e14:	a0 0d       	add	r26, r0
    5e16:	61 1d       	adc	r22, r1
    5e18:	22 1f       	adc	r18, r18
    5e1a:	74 9f       	mul	r23, r20
    5e1c:	33 27       	eor	r19, r19
    5e1e:	a0 0d       	add	r26, r0
    5e20:	61 1d       	adc	r22, r1
    5e22:	23 1f       	adc	r18, r19
    5e24:	84 9f       	mul	r24, r20
    5e26:	60 0d       	add	r22, r0
    5e28:	21 1d       	adc	r18, r1
    5e2a:	82 2f       	mov	r24, r18
    5e2c:	76 2f       	mov	r23, r22
    5e2e:	6a 2f       	mov	r22, r26
    5e30:	11 24       	eor	r1, r1
    5e32:	9f 57       	subi	r25, 0x7F	; 127
    5e34:	50 40       	sbci	r21, 0x00	; 0
    5e36:	92 f0       	brmi	.+36     	; 0x5e5c <__mulsf3_pse+0x86>
    5e38:	e9 f0       	breq	.+58     	; 0x5e74 <__mulsf3_pse+0x9e>
    5e3a:	88 23       	and	r24, r24
    5e3c:	4a f0       	brmi	.+18     	; 0x5e50 <__mulsf3_pse+0x7a>
    5e3e:	ee 0f       	add	r30, r30
    5e40:	ff 1f       	adc	r31, r31
    5e42:	bb 1f       	adc	r27, r27
    5e44:	66 1f       	adc	r22, r22
    5e46:	77 1f       	adc	r23, r23
    5e48:	88 1f       	adc	r24, r24
    5e4a:	91 50       	subi	r25, 0x01	; 1
    5e4c:	50 40       	sbci	r21, 0x00	; 0
    5e4e:	a9 f7       	brne	.-22     	; 0x5e3a <__mulsf3_pse+0x64>
    5e50:	9e 3f       	cpi	r25, 0xFE	; 254
    5e52:	51 05       	cpc	r21, r1
    5e54:	78 f0       	brcs	.+30     	; 0x5e74 <__mulsf3_pse+0x9e>
    5e56:	87 cf       	rjmp	.-242    	; 0x5d66 <__fp_inf>
    5e58:	0c 94 96 20 	jmp	0x412c	; 0x412c <__fp_szero>
    5e5c:	5f 3f       	cpi	r21, 0xFF	; 255
    5e5e:	e4 f3       	brlt	.-8      	; 0x5e58 <__mulsf3_pse+0x82>
    5e60:	98 3e       	cpi	r25, 0xE8	; 232
    5e62:	d4 f3       	brlt	.-12     	; 0x5e58 <__mulsf3_pse+0x82>
    5e64:	86 95       	lsr	r24
    5e66:	77 95       	ror	r23
    5e68:	67 95       	ror	r22
    5e6a:	b7 95       	ror	r27
    5e6c:	f7 95       	ror	r31
    5e6e:	e7 95       	ror	r30
    5e70:	9f 5f       	subi	r25, 0xFF	; 255
    5e72:	c1 f7       	brne	.-16     	; 0x5e64 <__mulsf3_pse+0x8e>
    5e74:	fe 2b       	or	r31, r30
    5e76:	88 0f       	add	r24, r24
    5e78:	91 1d       	adc	r25, r1
    5e7a:	96 95       	lsr	r25
    5e7c:	87 95       	ror	r24
    5e7e:	97 f9       	bld	r25, 7
    5e80:	08 95       	ret

00005e82 <__udivmodsi4>:
    5e82:	a1 e2       	ldi	r26, 0x21	; 33
    5e84:	1a 2e       	mov	r1, r26
    5e86:	aa 1b       	sub	r26, r26
    5e88:	bb 1b       	sub	r27, r27
    5e8a:	fd 01       	movw	r30, r26
    5e8c:	0d c0       	rjmp	.+26     	; 0x5ea8 <__udivmodsi4_ep>

00005e8e <__udivmodsi4_loop>:
    5e8e:	aa 1f       	adc	r26, r26
    5e90:	bb 1f       	adc	r27, r27
    5e92:	ee 1f       	adc	r30, r30
    5e94:	ff 1f       	adc	r31, r31
    5e96:	a2 17       	cp	r26, r18
    5e98:	b3 07       	cpc	r27, r19
    5e9a:	e4 07       	cpc	r30, r20
    5e9c:	f5 07       	cpc	r31, r21
    5e9e:	20 f0       	brcs	.+8      	; 0x5ea8 <__udivmodsi4_ep>
    5ea0:	a2 1b       	sub	r26, r18
    5ea2:	b3 0b       	sbc	r27, r19
    5ea4:	e4 0b       	sbc	r30, r20
    5ea6:	f5 0b       	sbc	r31, r21

00005ea8 <__udivmodsi4_ep>:
    5ea8:	66 1f       	adc	r22, r22
    5eaa:	77 1f       	adc	r23, r23
    5eac:	88 1f       	adc	r24, r24
    5eae:	99 1f       	adc	r25, r25
    5eb0:	1a 94       	dec	r1
    5eb2:	69 f7       	brne	.-38     	; 0x5e8e <__udivmodsi4_loop>
    5eb4:	60 95       	com	r22
    5eb6:	70 95       	com	r23
    5eb8:	80 95       	com	r24
    5eba:	90 95       	com	r25
    5ebc:	9b 01       	movw	r18, r22
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	bd 01       	movw	r22, r26
    5ec2:	cf 01       	movw	r24, r30
    5ec4:	08 95       	ret

00005ec6 <__tablejump2__>:
    5ec6:	ee 0f       	add	r30, r30
    5ec8:	ff 1f       	adc	r31, r31
    5eca:	88 1f       	adc	r24, r24
    5ecc:	8b bf       	out	0x3b, r24	; 59
    5ece:	07 90       	elpm	r0, Z+
    5ed0:	f6 91       	elpm	r31, Z
    5ed2:	e0 2d       	mov	r30, r0
    5ed4:	19 94       	eijmp

00005ed6 <malloc>:
    5ed6:	0f 93       	push	r16
    5ed8:	1f 93       	push	r17
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	82 30       	cpi	r24, 0x02	; 2
    5ee0:	91 05       	cpc	r25, r1
    5ee2:	10 f4       	brcc	.+4      	; 0x5ee8 <malloc+0x12>
    5ee4:	82 e0       	ldi	r24, 0x02	; 2
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	e0 91 09 18 	lds	r30, 0x1809	; 0x801809 <__flp>
    5eec:	f0 91 0a 18 	lds	r31, 0x180A	; 0x80180a <__flp+0x1>
    5ef0:	20 e0       	ldi	r18, 0x00	; 0
    5ef2:	30 e0       	ldi	r19, 0x00	; 0
    5ef4:	a0 e0       	ldi	r26, 0x00	; 0
    5ef6:	b0 e0       	ldi	r27, 0x00	; 0
    5ef8:	30 97       	sbiw	r30, 0x00	; 0
    5efa:	19 f1       	breq	.+70     	; 0x5f42 <malloc+0x6c>
    5efc:	40 81       	ld	r20, Z
    5efe:	51 81       	ldd	r21, Z+1	; 0x01
    5f00:	02 81       	ldd	r16, Z+2	; 0x02
    5f02:	13 81       	ldd	r17, Z+3	; 0x03
    5f04:	48 17       	cp	r20, r24
    5f06:	59 07       	cpc	r21, r25
    5f08:	c8 f0       	brcs	.+50     	; 0x5f3c <malloc+0x66>
    5f0a:	84 17       	cp	r24, r20
    5f0c:	95 07       	cpc	r25, r21
    5f0e:	69 f4       	brne	.+26     	; 0x5f2a <malloc+0x54>
    5f10:	10 97       	sbiw	r26, 0x00	; 0
    5f12:	31 f0       	breq	.+12     	; 0x5f20 <malloc+0x4a>
    5f14:	12 96       	adiw	r26, 0x02	; 2
    5f16:	0c 93       	st	X, r16
    5f18:	12 97       	sbiw	r26, 0x02	; 2
    5f1a:	13 96       	adiw	r26, 0x03	; 3
    5f1c:	1c 93       	st	X, r17
    5f1e:	27 c0       	rjmp	.+78     	; 0x5f6e <malloc+0x98>
    5f20:	00 93 09 18 	sts	0x1809, r16	; 0x801809 <__flp>
    5f24:	10 93 0a 18 	sts	0x180A, r17	; 0x80180a <__flp+0x1>
    5f28:	22 c0       	rjmp	.+68     	; 0x5f6e <malloc+0x98>
    5f2a:	21 15       	cp	r18, r1
    5f2c:	31 05       	cpc	r19, r1
    5f2e:	19 f0       	breq	.+6      	; 0x5f36 <malloc+0x60>
    5f30:	42 17       	cp	r20, r18
    5f32:	53 07       	cpc	r21, r19
    5f34:	18 f4       	brcc	.+6      	; 0x5f3c <malloc+0x66>
    5f36:	9a 01       	movw	r18, r20
    5f38:	bd 01       	movw	r22, r26
    5f3a:	ef 01       	movw	r28, r30
    5f3c:	df 01       	movw	r26, r30
    5f3e:	f8 01       	movw	r30, r16
    5f40:	db cf       	rjmp	.-74     	; 0x5ef8 <malloc+0x22>
    5f42:	21 15       	cp	r18, r1
    5f44:	31 05       	cpc	r19, r1
    5f46:	f9 f0       	breq	.+62     	; 0x5f86 <malloc+0xb0>
    5f48:	28 1b       	sub	r18, r24
    5f4a:	39 0b       	sbc	r19, r25
    5f4c:	24 30       	cpi	r18, 0x04	; 4
    5f4e:	31 05       	cpc	r19, r1
    5f50:	80 f4       	brcc	.+32     	; 0x5f72 <malloc+0x9c>
    5f52:	8a 81       	ldd	r24, Y+2	; 0x02
    5f54:	9b 81       	ldd	r25, Y+3	; 0x03
    5f56:	61 15       	cp	r22, r1
    5f58:	71 05       	cpc	r23, r1
    5f5a:	21 f0       	breq	.+8      	; 0x5f64 <malloc+0x8e>
    5f5c:	fb 01       	movw	r30, r22
    5f5e:	93 83       	std	Z+3, r25	; 0x03
    5f60:	82 83       	std	Z+2, r24	; 0x02
    5f62:	04 c0       	rjmp	.+8      	; 0x5f6c <malloc+0x96>
    5f64:	90 93 0a 18 	sts	0x180A, r25	; 0x80180a <__flp+0x1>
    5f68:	80 93 09 18 	sts	0x1809, r24	; 0x801809 <__flp>
    5f6c:	fe 01       	movw	r30, r28
    5f6e:	32 96       	adiw	r30, 0x02	; 2
    5f70:	44 c0       	rjmp	.+136    	; 0x5ffa <malloc+0x124>
    5f72:	fe 01       	movw	r30, r28
    5f74:	e2 0f       	add	r30, r18
    5f76:	f3 1f       	adc	r31, r19
    5f78:	81 93       	st	Z+, r24
    5f7a:	91 93       	st	Z+, r25
    5f7c:	22 50       	subi	r18, 0x02	; 2
    5f7e:	31 09       	sbc	r19, r1
    5f80:	39 83       	std	Y+1, r19	; 0x01
    5f82:	28 83       	st	Y, r18
    5f84:	3a c0       	rjmp	.+116    	; 0x5ffa <malloc+0x124>
    5f86:	20 91 07 18 	lds	r18, 0x1807	; 0x801807 <__brkval>
    5f8a:	30 91 08 18 	lds	r19, 0x1808	; 0x801808 <__brkval+0x1>
    5f8e:	23 2b       	or	r18, r19
    5f90:	41 f4       	brne	.+16     	; 0x5fa2 <malloc+0xcc>
    5f92:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5f96:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5f9a:	30 93 08 18 	sts	0x1808, r19	; 0x801808 <__brkval+0x1>
    5f9e:	20 93 07 18 	sts	0x1807, r18	; 0x801807 <__brkval>
    5fa2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5fa6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5faa:	21 15       	cp	r18, r1
    5fac:	31 05       	cpc	r19, r1
    5fae:	41 f4       	brne	.+16     	; 0x5fc0 <malloc+0xea>
    5fb0:	2d b7       	in	r18, 0x3d	; 61
    5fb2:	3e b7       	in	r19, 0x3e	; 62
    5fb4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5fb8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5fbc:	24 1b       	sub	r18, r20
    5fbe:	35 0b       	sbc	r19, r21
    5fc0:	e0 91 07 18 	lds	r30, 0x1807	; 0x801807 <__brkval>
    5fc4:	f0 91 08 18 	lds	r31, 0x1808	; 0x801808 <__brkval+0x1>
    5fc8:	e2 17       	cp	r30, r18
    5fca:	f3 07       	cpc	r31, r19
    5fcc:	a0 f4       	brcc	.+40     	; 0x5ff6 <malloc+0x120>
    5fce:	2e 1b       	sub	r18, r30
    5fd0:	3f 0b       	sbc	r19, r31
    5fd2:	28 17       	cp	r18, r24
    5fd4:	39 07       	cpc	r19, r25
    5fd6:	78 f0       	brcs	.+30     	; 0x5ff6 <malloc+0x120>
    5fd8:	ac 01       	movw	r20, r24
    5fda:	4e 5f       	subi	r20, 0xFE	; 254
    5fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5fde:	24 17       	cp	r18, r20
    5fe0:	35 07       	cpc	r19, r21
    5fe2:	48 f0       	brcs	.+18     	; 0x5ff6 <malloc+0x120>
    5fe4:	4e 0f       	add	r20, r30
    5fe6:	5f 1f       	adc	r21, r31
    5fe8:	50 93 08 18 	sts	0x1808, r21	; 0x801808 <__brkval+0x1>
    5fec:	40 93 07 18 	sts	0x1807, r20	; 0x801807 <__brkval>
    5ff0:	81 93       	st	Z+, r24
    5ff2:	91 93       	st	Z+, r25
    5ff4:	02 c0       	rjmp	.+4      	; 0x5ffa <malloc+0x124>
    5ff6:	e0 e0       	ldi	r30, 0x00	; 0
    5ff8:	f0 e0       	ldi	r31, 0x00	; 0
    5ffa:	cf 01       	movw	r24, r30
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	1f 91       	pop	r17
    6002:	0f 91       	pop	r16
    6004:	08 95       	ret

00006006 <free>:
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
    600a:	00 97       	sbiw	r24, 0x00	; 0
    600c:	09 f4       	brne	.+2      	; 0x6010 <free+0xa>
    600e:	81 c0       	rjmp	.+258    	; 0x6112 <free+0x10c>
    6010:	fc 01       	movw	r30, r24
    6012:	32 97       	sbiw	r30, 0x02	; 2
    6014:	13 82       	std	Z+3, r1	; 0x03
    6016:	12 82       	std	Z+2, r1	; 0x02
    6018:	a0 91 09 18 	lds	r26, 0x1809	; 0x801809 <__flp>
    601c:	b0 91 0a 18 	lds	r27, 0x180A	; 0x80180a <__flp+0x1>
    6020:	10 97       	sbiw	r26, 0x00	; 0
    6022:	81 f4       	brne	.+32     	; 0x6044 <free+0x3e>
    6024:	20 81       	ld	r18, Z
    6026:	31 81       	ldd	r19, Z+1	; 0x01
    6028:	82 0f       	add	r24, r18
    602a:	93 1f       	adc	r25, r19
    602c:	20 91 07 18 	lds	r18, 0x1807	; 0x801807 <__brkval>
    6030:	30 91 08 18 	lds	r19, 0x1808	; 0x801808 <__brkval+0x1>
    6034:	28 17       	cp	r18, r24
    6036:	39 07       	cpc	r19, r25
    6038:	51 f5       	brne	.+84     	; 0x608e <free+0x88>
    603a:	f0 93 08 18 	sts	0x1808, r31	; 0x801808 <__brkval+0x1>
    603e:	e0 93 07 18 	sts	0x1807, r30	; 0x801807 <__brkval>
    6042:	67 c0       	rjmp	.+206    	; 0x6112 <free+0x10c>
    6044:	ed 01       	movw	r28, r26
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	ce 17       	cp	r28, r30
    604c:	df 07       	cpc	r29, r31
    604e:	40 f4       	brcc	.+16     	; 0x6060 <free+0x5a>
    6050:	4a 81       	ldd	r20, Y+2	; 0x02
    6052:	5b 81       	ldd	r21, Y+3	; 0x03
    6054:	9e 01       	movw	r18, r28
    6056:	41 15       	cp	r20, r1
    6058:	51 05       	cpc	r21, r1
    605a:	f1 f0       	breq	.+60     	; 0x6098 <free+0x92>
    605c:	ea 01       	movw	r28, r20
    605e:	f5 cf       	rjmp	.-22     	; 0x604a <free+0x44>
    6060:	d3 83       	std	Z+3, r29	; 0x03
    6062:	c2 83       	std	Z+2, r28	; 0x02
    6064:	40 81       	ld	r20, Z
    6066:	51 81       	ldd	r21, Z+1	; 0x01
    6068:	84 0f       	add	r24, r20
    606a:	95 1f       	adc	r25, r21
    606c:	c8 17       	cp	r28, r24
    606e:	d9 07       	cpc	r29, r25
    6070:	59 f4       	brne	.+22     	; 0x6088 <free+0x82>
    6072:	88 81       	ld	r24, Y
    6074:	99 81       	ldd	r25, Y+1	; 0x01
    6076:	84 0f       	add	r24, r20
    6078:	95 1f       	adc	r25, r21
    607a:	02 96       	adiw	r24, 0x02	; 2
    607c:	91 83       	std	Z+1, r25	; 0x01
    607e:	80 83       	st	Z, r24
    6080:	8a 81       	ldd	r24, Y+2	; 0x02
    6082:	9b 81       	ldd	r25, Y+3	; 0x03
    6084:	93 83       	std	Z+3, r25	; 0x03
    6086:	82 83       	std	Z+2, r24	; 0x02
    6088:	21 15       	cp	r18, r1
    608a:	31 05       	cpc	r19, r1
    608c:	29 f4       	brne	.+10     	; 0x6098 <free+0x92>
    608e:	f0 93 0a 18 	sts	0x180A, r31	; 0x80180a <__flp+0x1>
    6092:	e0 93 09 18 	sts	0x1809, r30	; 0x801809 <__flp>
    6096:	3d c0       	rjmp	.+122    	; 0x6112 <free+0x10c>
    6098:	e9 01       	movw	r28, r18
    609a:	fb 83       	std	Y+3, r31	; 0x03
    609c:	ea 83       	std	Y+2, r30	; 0x02
    609e:	49 91       	ld	r20, Y+
    60a0:	59 91       	ld	r21, Y+
    60a2:	c4 0f       	add	r28, r20
    60a4:	d5 1f       	adc	r29, r21
    60a6:	ec 17       	cp	r30, r28
    60a8:	fd 07       	cpc	r31, r29
    60aa:	61 f4       	brne	.+24     	; 0x60c4 <free+0xbe>
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	84 0f       	add	r24, r20
    60b2:	95 1f       	adc	r25, r21
    60b4:	02 96       	adiw	r24, 0x02	; 2
    60b6:	e9 01       	movw	r28, r18
    60b8:	99 83       	std	Y+1, r25	; 0x01
    60ba:	88 83       	st	Y, r24
    60bc:	82 81       	ldd	r24, Z+2	; 0x02
    60be:	93 81       	ldd	r25, Z+3	; 0x03
    60c0:	9b 83       	std	Y+3, r25	; 0x03
    60c2:	8a 83       	std	Y+2, r24	; 0x02
    60c4:	e0 e0       	ldi	r30, 0x00	; 0
    60c6:	f0 e0       	ldi	r31, 0x00	; 0
    60c8:	12 96       	adiw	r26, 0x02	; 2
    60ca:	8d 91       	ld	r24, X+
    60cc:	9c 91       	ld	r25, X
    60ce:	13 97       	sbiw	r26, 0x03	; 3
    60d0:	00 97       	sbiw	r24, 0x00	; 0
    60d2:	19 f0       	breq	.+6      	; 0x60da <free+0xd4>
    60d4:	fd 01       	movw	r30, r26
    60d6:	dc 01       	movw	r26, r24
    60d8:	f7 cf       	rjmp	.-18     	; 0x60c8 <free+0xc2>
    60da:	8d 91       	ld	r24, X+
    60dc:	9c 91       	ld	r25, X
    60de:	11 97       	sbiw	r26, 0x01	; 1
    60e0:	9d 01       	movw	r18, r26
    60e2:	2e 5f       	subi	r18, 0xFE	; 254
    60e4:	3f 4f       	sbci	r19, 0xFF	; 255
    60e6:	82 0f       	add	r24, r18
    60e8:	93 1f       	adc	r25, r19
    60ea:	20 91 07 18 	lds	r18, 0x1807	; 0x801807 <__brkval>
    60ee:	30 91 08 18 	lds	r19, 0x1808	; 0x801808 <__brkval+0x1>
    60f2:	28 17       	cp	r18, r24
    60f4:	39 07       	cpc	r19, r25
    60f6:	69 f4       	brne	.+26     	; 0x6112 <free+0x10c>
    60f8:	30 97       	sbiw	r30, 0x00	; 0
    60fa:	29 f4       	brne	.+10     	; 0x6106 <free+0x100>
    60fc:	10 92 0a 18 	sts	0x180A, r1	; 0x80180a <__flp+0x1>
    6100:	10 92 09 18 	sts	0x1809, r1	; 0x801809 <__flp>
    6104:	02 c0       	rjmp	.+4      	; 0x610a <free+0x104>
    6106:	13 82       	std	Z+3, r1	; 0x03
    6108:	12 82       	std	Z+2, r1	; 0x02
    610a:	b0 93 08 18 	sts	0x1808, r27	; 0x801808 <__brkval+0x1>
    610e:	a0 93 07 18 	sts	0x1807, r26	; 0x801807 <__brkval>
    6112:	df 91       	pop	r29
    6114:	cf 91       	pop	r28
    6116:	08 95       	ret

00006118 <abort>:
    6118:	81 e0       	ldi	r24, 0x01	; 1
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	f8 94       	cli
    611e:	7d c3       	rjmp	.+1786   	; 0x681a <_exit>

00006120 <memcpy>:
    6120:	fb 01       	movw	r30, r22
    6122:	dc 01       	movw	r26, r24
    6124:	02 c0       	rjmp	.+4      	; 0x612a <memcpy+0xa>
    6126:	01 90       	ld	r0, Z+
    6128:	0d 92       	st	X+, r0
    612a:	41 50       	subi	r20, 0x01	; 1
    612c:	50 40       	sbci	r21, 0x00	; 0
    612e:	d8 f7       	brcc	.-10     	; 0x6126 <memcpy+0x6>
    6130:	08 95       	ret

00006132 <memset>:
    6132:	dc 01       	movw	r26, r24
    6134:	01 c0       	rjmp	.+2      	; 0x6138 <memset+0x6>
    6136:	6d 93       	st	X+, r22
    6138:	41 50       	subi	r20, 0x01	; 1
    613a:	50 40       	sbci	r21, 0x00	; 0
    613c:	e0 f7       	brcc	.-8      	; 0x6136 <memset+0x4>
    613e:	08 95       	ret

00006140 <strcasestr>:
    6140:	fb 01       	movw	r30, r22
    6142:	51 91       	ld	r21, Z+
    6144:	55 23       	and	r21, r21
    6146:	b1 f0       	breq	.+44     	; 0x6174 <strcasestr+0x34>
    6148:	bf 01       	movw	r22, r30
    614a:	dc 01       	movw	r26, r24
    614c:	05 2e       	mov	r0, r21
    614e:	4d 91       	ld	r20, X+
    6150:	44 23       	and	r20, r20
    6152:	69 f0       	breq	.+26     	; 0x616e <strcasestr+0x2e>
    6154:	10 d0       	rcall	.+32     	; 0x6176 <strcasestr+0x36>
    6156:	d9 f7       	brne	.-10     	; 0x614e <strcasestr+0xe>
    6158:	cd 01       	movw	r24, r26
    615a:	01 90       	ld	r0, Z+
    615c:	00 20       	and	r0, r0
    615e:	49 f0       	breq	.+18     	; 0x6172 <strcasestr+0x32>
    6160:	4d 91       	ld	r20, X+
    6162:	41 11       	cpse	r20, r1
    6164:	08 d0       	rcall	.+16     	; 0x6176 <strcasestr+0x36>
    6166:	c9 f3       	breq	.-14     	; 0x615a <strcasestr+0x1a>
    6168:	fb 01       	movw	r30, r22
    616a:	41 11       	cpse	r20, r1
    616c:	ee cf       	rjmp	.-36     	; 0x614a <strcasestr+0xa>
    616e:	81 e0       	ldi	r24, 0x01	; 1
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	01 97       	sbiw	r24, 0x01	; 1
    6174:	08 95       	ret
    6176:	40 25       	eor	r20, r0
    6178:	39 f0       	breq	.+14     	; 0x6188 <strcasestr+0x48>
    617a:	40 32       	cpi	r20, 0x20	; 32
    617c:	29 f4       	brne	.+10     	; 0x6188 <strcasestr+0x48>
    617e:	40 29       	or	r20, r0
    6180:	4b 57       	subi	r20, 0x7B	; 123
    6182:	46 5e       	subi	r20, 0xE6	; 230
    6184:	08 f0       	brcs	.+2      	; 0x6188 <strcasestr+0x48>
    6186:	18 94       	sez
    6188:	08 95       	ret

0000618a <strcat>:
    618a:	fb 01       	movw	r30, r22
    618c:	dc 01       	movw	r26, r24
    618e:	0d 90       	ld	r0, X+
    6190:	00 20       	and	r0, r0
    6192:	e9 f7       	brne	.-6      	; 0x618e <strcat+0x4>
    6194:	11 97       	sbiw	r26, 0x01	; 1
    6196:	01 90       	ld	r0, Z+
    6198:	0d 92       	st	X+, r0
    619a:	00 20       	and	r0, r0
    619c:	e1 f7       	brne	.-8      	; 0x6196 <strcat+0xc>
    619e:	08 95       	ret

000061a0 <strcpy>:
    61a0:	fb 01       	movw	r30, r22
    61a2:	dc 01       	movw	r26, r24
    61a4:	01 90       	ld	r0, Z+
    61a6:	0d 92       	st	X+, r0
    61a8:	00 20       	and	r0, r0
    61aa:	e1 f7       	brne	.-8      	; 0x61a4 <strcpy+0x4>
    61ac:	08 95       	ret

000061ae <strncasecmp>:
    61ae:	fb 01       	movw	r30, r22
    61b0:	dc 01       	movw	r26, r24
    61b2:	41 50       	subi	r20, 0x01	; 1
    61b4:	50 40       	sbci	r21, 0x00	; 0
    61b6:	88 f0       	brcs	.+34     	; 0x61da <strncasecmp+0x2c>
    61b8:	8d 91       	ld	r24, X+
    61ba:	81 34       	cpi	r24, 0x41	; 65
    61bc:	1c f0       	brlt	.+6      	; 0x61c4 <strncasecmp+0x16>
    61be:	8b 35       	cpi	r24, 0x5B	; 91
    61c0:	0c f4       	brge	.+2      	; 0x61c4 <strncasecmp+0x16>
    61c2:	80 5e       	subi	r24, 0xE0	; 224
    61c4:	61 91       	ld	r22, Z+
    61c6:	61 34       	cpi	r22, 0x41	; 65
    61c8:	1c f0       	brlt	.+6      	; 0x61d0 <strncasecmp+0x22>
    61ca:	6b 35       	cpi	r22, 0x5B	; 91
    61cc:	0c f4       	brge	.+2      	; 0x61d0 <strncasecmp+0x22>
    61ce:	60 5e       	subi	r22, 0xE0	; 224
    61d0:	86 1b       	sub	r24, r22
    61d2:	61 11       	cpse	r22, r1
    61d4:	71 f3       	breq	.-36     	; 0x61b2 <strncasecmp+0x4>
    61d6:	99 0b       	sbc	r25, r25
    61d8:	08 95       	ret
    61da:	88 1b       	sub	r24, r24
    61dc:	fc cf       	rjmp	.-8      	; 0x61d6 <strncasecmp+0x28>

000061de <printf>:
    61de:	cf 93       	push	r28
    61e0:	df 93       	push	r29
    61e2:	cd b7       	in	r28, 0x3d	; 61
    61e4:	de b7       	in	r29, 0x3e	; 62
    61e6:	ae 01       	movw	r20, r28
    61e8:	4a 5f       	subi	r20, 0xFA	; 250
    61ea:	5f 4f       	sbci	r21, 0xFF	; 255
    61ec:	fa 01       	movw	r30, r20
    61ee:	61 91       	ld	r22, Z+
    61f0:	71 91       	ld	r23, Z+
    61f2:	af 01       	movw	r20, r30
    61f4:	80 91 0d 18 	lds	r24, 0x180D	; 0x80180d <__iob+0x2>
    61f8:	90 91 0e 18 	lds	r25, 0x180E	; 0x80180e <__iob+0x3>
    61fc:	61 d0       	rcall	.+194    	; 0x62c0 <vfprintf>
    61fe:	df 91       	pop	r29
    6200:	cf 91       	pop	r28
    6202:	08 95       	ret

00006204 <puts>:
    6204:	0f 93       	push	r16
    6206:	1f 93       	push	r17
    6208:	cf 93       	push	r28
    620a:	df 93       	push	r29
    620c:	e0 91 0d 18 	lds	r30, 0x180D	; 0x80180d <__iob+0x2>
    6210:	f0 91 0e 18 	lds	r31, 0x180E	; 0x80180e <__iob+0x3>
    6214:	23 81       	ldd	r18, Z+3	; 0x03
    6216:	21 ff       	sbrs	r18, 1
    6218:	1b c0       	rjmp	.+54     	; 0x6250 <puts+0x4c>
    621a:	8c 01       	movw	r16, r24
    621c:	d0 e0       	ldi	r29, 0x00	; 0
    621e:	c0 e0       	ldi	r28, 0x00	; 0
    6220:	f8 01       	movw	r30, r16
    6222:	81 91       	ld	r24, Z+
    6224:	8f 01       	movw	r16, r30
    6226:	60 91 0d 18 	lds	r22, 0x180D	; 0x80180d <__iob+0x2>
    622a:	70 91 0e 18 	lds	r23, 0x180E	; 0x80180e <__iob+0x3>
    622e:	db 01       	movw	r26, r22
    6230:	18 96       	adiw	r26, 0x08	; 8
    6232:	ed 91       	ld	r30, X+
    6234:	fc 91       	ld	r31, X
    6236:	19 97       	sbiw	r26, 0x09	; 9
    6238:	88 23       	and	r24, r24
    623a:	31 f0       	breq	.+12     	; 0x6248 <puts+0x44>
    623c:	19 95       	eicall
    623e:	89 2b       	or	r24, r25
    6240:	79 f3       	breq	.-34     	; 0x6220 <puts+0x1c>
    6242:	df ef       	ldi	r29, 0xFF	; 255
    6244:	cf ef       	ldi	r28, 0xFF	; 255
    6246:	ec cf       	rjmp	.-40     	; 0x6220 <puts+0x1c>
    6248:	8a e0       	ldi	r24, 0x0A	; 10
    624a:	19 95       	eicall
    624c:	89 2b       	or	r24, r25
    624e:	19 f0       	breq	.+6      	; 0x6256 <puts+0x52>
    6250:	8f ef       	ldi	r24, 0xFF	; 255
    6252:	9f ef       	ldi	r25, 0xFF	; 255
    6254:	02 c0       	rjmp	.+4      	; 0x625a <puts+0x56>
    6256:	8d 2f       	mov	r24, r29
    6258:	9c 2f       	mov	r25, r28
    625a:	df 91       	pop	r29
    625c:	cf 91       	pop	r28
    625e:	1f 91       	pop	r17
    6260:	0f 91       	pop	r16
    6262:	08 95       	ret

00006264 <sprintf>:
    6264:	0f 93       	push	r16
    6266:	1f 93       	push	r17
    6268:	cf 93       	push	r28
    626a:	df 93       	push	r29
    626c:	cd b7       	in	r28, 0x3d	; 61
    626e:	de b7       	in	r29, 0x3e	; 62
    6270:	2e 97       	sbiw	r28, 0x0e	; 14
    6272:	0f b6       	in	r0, 0x3f	; 63
    6274:	f8 94       	cli
    6276:	de bf       	out	0x3e, r29	; 62
    6278:	0f be       	out	0x3f, r0	; 63
    627a:	cd bf       	out	0x3d, r28	; 61
    627c:	0e 89       	ldd	r16, Y+22	; 0x16
    627e:	1f 89       	ldd	r17, Y+23	; 0x17
    6280:	86 e0       	ldi	r24, 0x06	; 6
    6282:	8c 83       	std	Y+4, r24	; 0x04
    6284:	1a 83       	std	Y+2, r17	; 0x02
    6286:	09 83       	std	Y+1, r16	; 0x01
    6288:	8f ef       	ldi	r24, 0xFF	; 255
    628a:	9f e7       	ldi	r25, 0x7F	; 127
    628c:	9e 83       	std	Y+6, r25	; 0x06
    628e:	8d 83       	std	Y+5, r24	; 0x05
    6290:	ae 01       	movw	r20, r28
    6292:	46 5e       	subi	r20, 0xE6	; 230
    6294:	5f 4f       	sbci	r21, 0xFF	; 255
    6296:	68 8d       	ldd	r22, Y+24	; 0x18
    6298:	79 8d       	ldd	r23, Y+25	; 0x19
    629a:	ce 01       	movw	r24, r28
    629c:	01 96       	adiw	r24, 0x01	; 1
    629e:	10 d0       	rcall	.+32     	; 0x62c0 <vfprintf>
    62a0:	ef 81       	ldd	r30, Y+7	; 0x07
    62a2:	f8 85       	ldd	r31, Y+8	; 0x08
    62a4:	e0 0f       	add	r30, r16
    62a6:	f1 1f       	adc	r31, r17
    62a8:	10 82       	st	Z, r1
    62aa:	2e 96       	adiw	r28, 0x0e	; 14
    62ac:	0f b6       	in	r0, 0x3f	; 63
    62ae:	f8 94       	cli
    62b0:	de bf       	out	0x3e, r29	; 62
    62b2:	0f be       	out	0x3f, r0	; 63
    62b4:	cd bf       	out	0x3d, r28	; 61
    62b6:	df 91       	pop	r29
    62b8:	cf 91       	pop	r28
    62ba:	1f 91       	pop	r17
    62bc:	0f 91       	pop	r16
    62be:	08 95       	ret

000062c0 <vfprintf>:
    62c0:	2f 92       	push	r2
    62c2:	3f 92       	push	r3
    62c4:	4f 92       	push	r4
    62c6:	5f 92       	push	r5
    62c8:	6f 92       	push	r6
    62ca:	7f 92       	push	r7
    62cc:	8f 92       	push	r8
    62ce:	9f 92       	push	r9
    62d0:	af 92       	push	r10
    62d2:	bf 92       	push	r11
    62d4:	cf 92       	push	r12
    62d6:	df 92       	push	r13
    62d8:	ef 92       	push	r14
    62da:	ff 92       	push	r15
    62dc:	0f 93       	push	r16
    62de:	1f 93       	push	r17
    62e0:	cf 93       	push	r28
    62e2:	df 93       	push	r29
    62e4:	cd b7       	in	r28, 0x3d	; 61
    62e6:	de b7       	in	r29, 0x3e	; 62
    62e8:	2b 97       	sbiw	r28, 0x0b	; 11
    62ea:	0f b6       	in	r0, 0x3f	; 63
    62ec:	f8 94       	cli
    62ee:	de bf       	out	0x3e, r29	; 62
    62f0:	0f be       	out	0x3f, r0	; 63
    62f2:	cd bf       	out	0x3d, r28	; 61
    62f4:	6c 01       	movw	r12, r24
    62f6:	7b 01       	movw	r14, r22
    62f8:	8a 01       	movw	r16, r20
    62fa:	fc 01       	movw	r30, r24
    62fc:	17 82       	std	Z+7, r1	; 0x07
    62fe:	16 82       	std	Z+6, r1	; 0x06
    6300:	83 81       	ldd	r24, Z+3	; 0x03
    6302:	81 ff       	sbrs	r24, 1
    6304:	bf c1       	rjmp	.+894    	; 0x6684 <vfprintf+0x3c4>
    6306:	ce 01       	movw	r24, r28
    6308:	01 96       	adiw	r24, 0x01	; 1
    630a:	3c 01       	movw	r6, r24
    630c:	f6 01       	movw	r30, r12
    630e:	93 81       	ldd	r25, Z+3	; 0x03
    6310:	f7 01       	movw	r30, r14
    6312:	93 fd       	sbrc	r25, 3
    6314:	85 91       	lpm	r24, Z+
    6316:	93 ff       	sbrs	r25, 3
    6318:	81 91       	ld	r24, Z+
    631a:	7f 01       	movw	r14, r30
    631c:	88 23       	and	r24, r24
    631e:	09 f4       	brne	.+2      	; 0x6322 <vfprintf+0x62>
    6320:	ad c1       	rjmp	.+858    	; 0x667c <vfprintf+0x3bc>
    6322:	85 32       	cpi	r24, 0x25	; 37
    6324:	39 f4       	brne	.+14     	; 0x6334 <vfprintf+0x74>
    6326:	93 fd       	sbrc	r25, 3
    6328:	85 91       	lpm	r24, Z+
    632a:	93 ff       	sbrs	r25, 3
    632c:	81 91       	ld	r24, Z+
    632e:	7f 01       	movw	r14, r30
    6330:	85 32       	cpi	r24, 0x25	; 37
    6332:	21 f4       	brne	.+8      	; 0x633c <vfprintf+0x7c>
    6334:	b6 01       	movw	r22, r12
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	d6 d1       	rcall	.+940    	; 0x66e6 <fputc>
    633a:	e8 cf       	rjmp	.-48     	; 0x630c <vfprintf+0x4c>
    633c:	91 2c       	mov	r9, r1
    633e:	21 2c       	mov	r2, r1
    6340:	31 2c       	mov	r3, r1
    6342:	ff e1       	ldi	r31, 0x1F	; 31
    6344:	f3 15       	cp	r31, r3
    6346:	d8 f0       	brcs	.+54     	; 0x637e <vfprintf+0xbe>
    6348:	8b 32       	cpi	r24, 0x2B	; 43
    634a:	79 f0       	breq	.+30     	; 0x636a <vfprintf+0xaa>
    634c:	38 f4       	brcc	.+14     	; 0x635c <vfprintf+0x9c>
    634e:	80 32       	cpi	r24, 0x20	; 32
    6350:	79 f0       	breq	.+30     	; 0x6370 <vfprintf+0xb0>
    6352:	83 32       	cpi	r24, 0x23	; 35
    6354:	a1 f4       	brne	.+40     	; 0x637e <vfprintf+0xbe>
    6356:	23 2d       	mov	r18, r3
    6358:	20 61       	ori	r18, 0x10	; 16
    635a:	1d c0       	rjmp	.+58     	; 0x6396 <vfprintf+0xd6>
    635c:	8d 32       	cpi	r24, 0x2D	; 45
    635e:	61 f0       	breq	.+24     	; 0x6378 <vfprintf+0xb8>
    6360:	80 33       	cpi	r24, 0x30	; 48
    6362:	69 f4       	brne	.+26     	; 0x637e <vfprintf+0xbe>
    6364:	23 2d       	mov	r18, r3
    6366:	21 60       	ori	r18, 0x01	; 1
    6368:	16 c0       	rjmp	.+44     	; 0x6396 <vfprintf+0xd6>
    636a:	83 2d       	mov	r24, r3
    636c:	82 60       	ori	r24, 0x02	; 2
    636e:	38 2e       	mov	r3, r24
    6370:	e3 2d       	mov	r30, r3
    6372:	e4 60       	ori	r30, 0x04	; 4
    6374:	3e 2e       	mov	r3, r30
    6376:	2a c0       	rjmp	.+84     	; 0x63cc <vfprintf+0x10c>
    6378:	f3 2d       	mov	r31, r3
    637a:	f8 60       	ori	r31, 0x08	; 8
    637c:	1d c0       	rjmp	.+58     	; 0x63b8 <vfprintf+0xf8>
    637e:	37 fc       	sbrc	r3, 7
    6380:	2d c0       	rjmp	.+90     	; 0x63dc <vfprintf+0x11c>
    6382:	20 ed       	ldi	r18, 0xD0	; 208
    6384:	28 0f       	add	r18, r24
    6386:	2a 30       	cpi	r18, 0x0A	; 10
    6388:	40 f0       	brcs	.+16     	; 0x639a <vfprintf+0xda>
    638a:	8e 32       	cpi	r24, 0x2E	; 46
    638c:	b9 f4       	brne	.+46     	; 0x63bc <vfprintf+0xfc>
    638e:	36 fc       	sbrc	r3, 6
    6390:	75 c1       	rjmp	.+746    	; 0x667c <vfprintf+0x3bc>
    6392:	23 2d       	mov	r18, r3
    6394:	20 64       	ori	r18, 0x40	; 64
    6396:	32 2e       	mov	r3, r18
    6398:	19 c0       	rjmp	.+50     	; 0x63cc <vfprintf+0x10c>
    639a:	36 fe       	sbrs	r3, 6
    639c:	06 c0       	rjmp	.+12     	; 0x63aa <vfprintf+0xea>
    639e:	8a e0       	ldi	r24, 0x0A	; 10
    63a0:	98 9e       	mul	r9, r24
    63a2:	20 0d       	add	r18, r0
    63a4:	11 24       	eor	r1, r1
    63a6:	92 2e       	mov	r9, r18
    63a8:	11 c0       	rjmp	.+34     	; 0x63cc <vfprintf+0x10c>
    63aa:	ea e0       	ldi	r30, 0x0A	; 10
    63ac:	2e 9e       	mul	r2, r30
    63ae:	20 0d       	add	r18, r0
    63b0:	11 24       	eor	r1, r1
    63b2:	22 2e       	mov	r2, r18
    63b4:	f3 2d       	mov	r31, r3
    63b6:	f0 62       	ori	r31, 0x20	; 32
    63b8:	3f 2e       	mov	r3, r31
    63ba:	08 c0       	rjmp	.+16     	; 0x63cc <vfprintf+0x10c>
    63bc:	8c 36       	cpi	r24, 0x6C	; 108
    63be:	21 f4       	brne	.+8      	; 0x63c8 <vfprintf+0x108>
    63c0:	83 2d       	mov	r24, r3
    63c2:	80 68       	ori	r24, 0x80	; 128
    63c4:	38 2e       	mov	r3, r24
    63c6:	02 c0       	rjmp	.+4      	; 0x63cc <vfprintf+0x10c>
    63c8:	88 36       	cpi	r24, 0x68	; 104
    63ca:	41 f4       	brne	.+16     	; 0x63dc <vfprintf+0x11c>
    63cc:	f7 01       	movw	r30, r14
    63ce:	93 fd       	sbrc	r25, 3
    63d0:	85 91       	lpm	r24, Z+
    63d2:	93 ff       	sbrs	r25, 3
    63d4:	81 91       	ld	r24, Z+
    63d6:	7f 01       	movw	r14, r30
    63d8:	81 11       	cpse	r24, r1
    63da:	b3 cf       	rjmp	.-154    	; 0x6342 <vfprintf+0x82>
    63dc:	98 2f       	mov	r25, r24
    63de:	9f 7d       	andi	r25, 0xDF	; 223
    63e0:	95 54       	subi	r25, 0x45	; 69
    63e2:	93 30       	cpi	r25, 0x03	; 3
    63e4:	28 f4       	brcc	.+10     	; 0x63f0 <vfprintf+0x130>
    63e6:	0c 5f       	subi	r16, 0xFC	; 252
    63e8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ea:	9f e3       	ldi	r25, 0x3F	; 63
    63ec:	99 83       	std	Y+1, r25	; 0x01
    63ee:	0d c0       	rjmp	.+26     	; 0x640a <vfprintf+0x14a>
    63f0:	83 36       	cpi	r24, 0x63	; 99
    63f2:	31 f0       	breq	.+12     	; 0x6400 <vfprintf+0x140>
    63f4:	83 37       	cpi	r24, 0x73	; 115
    63f6:	71 f0       	breq	.+28     	; 0x6414 <vfprintf+0x154>
    63f8:	83 35       	cpi	r24, 0x53	; 83
    63fa:	09 f0       	breq	.+2      	; 0x63fe <vfprintf+0x13e>
    63fc:	55 c0       	rjmp	.+170    	; 0x64a8 <vfprintf+0x1e8>
    63fe:	20 c0       	rjmp	.+64     	; 0x6440 <vfprintf+0x180>
    6400:	f8 01       	movw	r30, r16
    6402:	80 81       	ld	r24, Z
    6404:	89 83       	std	Y+1, r24	; 0x01
    6406:	0e 5f       	subi	r16, 0xFE	; 254
    6408:	1f 4f       	sbci	r17, 0xFF	; 255
    640a:	88 24       	eor	r8, r8
    640c:	83 94       	inc	r8
    640e:	91 2c       	mov	r9, r1
    6410:	53 01       	movw	r10, r6
    6412:	12 c0       	rjmp	.+36     	; 0x6438 <vfprintf+0x178>
    6414:	28 01       	movw	r4, r16
    6416:	f2 e0       	ldi	r31, 0x02	; 2
    6418:	4f 0e       	add	r4, r31
    641a:	51 1c       	adc	r5, r1
    641c:	f8 01       	movw	r30, r16
    641e:	a0 80       	ld	r10, Z
    6420:	b1 80       	ldd	r11, Z+1	; 0x01
    6422:	36 fe       	sbrs	r3, 6
    6424:	03 c0       	rjmp	.+6      	; 0x642c <vfprintf+0x16c>
    6426:	69 2d       	mov	r22, r9
    6428:	70 e0       	ldi	r23, 0x00	; 0
    642a:	02 c0       	rjmp	.+4      	; 0x6430 <vfprintf+0x170>
    642c:	6f ef       	ldi	r22, 0xFF	; 255
    642e:	7f ef       	ldi	r23, 0xFF	; 255
    6430:	c5 01       	movw	r24, r10
    6432:	4e d1       	rcall	.+668    	; 0x66d0 <strnlen>
    6434:	4c 01       	movw	r8, r24
    6436:	82 01       	movw	r16, r4
    6438:	f3 2d       	mov	r31, r3
    643a:	ff 77       	andi	r31, 0x7F	; 127
    643c:	3f 2e       	mov	r3, r31
    643e:	15 c0       	rjmp	.+42     	; 0x646a <vfprintf+0x1aa>
    6440:	28 01       	movw	r4, r16
    6442:	22 e0       	ldi	r18, 0x02	; 2
    6444:	42 0e       	add	r4, r18
    6446:	51 1c       	adc	r5, r1
    6448:	f8 01       	movw	r30, r16
    644a:	a0 80       	ld	r10, Z
    644c:	b1 80       	ldd	r11, Z+1	; 0x01
    644e:	36 fe       	sbrs	r3, 6
    6450:	03 c0       	rjmp	.+6      	; 0x6458 <vfprintf+0x198>
    6452:	69 2d       	mov	r22, r9
    6454:	70 e0       	ldi	r23, 0x00	; 0
    6456:	02 c0       	rjmp	.+4      	; 0x645c <vfprintf+0x19c>
    6458:	6f ef       	ldi	r22, 0xFF	; 255
    645a:	7f ef       	ldi	r23, 0xFF	; 255
    645c:	c5 01       	movw	r24, r10
    645e:	2d d1       	rcall	.+602    	; 0x66ba <strnlen_P>
    6460:	4c 01       	movw	r8, r24
    6462:	f3 2d       	mov	r31, r3
    6464:	f0 68       	ori	r31, 0x80	; 128
    6466:	3f 2e       	mov	r3, r31
    6468:	82 01       	movw	r16, r4
    646a:	33 fc       	sbrc	r3, 3
    646c:	19 c0       	rjmp	.+50     	; 0x64a0 <vfprintf+0x1e0>
    646e:	82 2d       	mov	r24, r2
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	88 16       	cp	r8, r24
    6474:	99 06       	cpc	r9, r25
    6476:	a0 f4       	brcc	.+40     	; 0x64a0 <vfprintf+0x1e0>
    6478:	b6 01       	movw	r22, r12
    647a:	80 e2       	ldi	r24, 0x20	; 32
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	33 d1       	rcall	.+614    	; 0x66e6 <fputc>
    6480:	2a 94       	dec	r2
    6482:	f5 cf       	rjmp	.-22     	; 0x646e <vfprintf+0x1ae>
    6484:	f5 01       	movw	r30, r10
    6486:	37 fc       	sbrc	r3, 7
    6488:	85 91       	lpm	r24, Z+
    648a:	37 fe       	sbrs	r3, 7
    648c:	81 91       	ld	r24, Z+
    648e:	5f 01       	movw	r10, r30
    6490:	b6 01       	movw	r22, r12
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	28 d1       	rcall	.+592    	; 0x66e6 <fputc>
    6496:	21 10       	cpse	r2, r1
    6498:	2a 94       	dec	r2
    649a:	21 e0       	ldi	r18, 0x01	; 1
    649c:	82 1a       	sub	r8, r18
    649e:	91 08       	sbc	r9, r1
    64a0:	81 14       	cp	r8, r1
    64a2:	91 04       	cpc	r9, r1
    64a4:	79 f7       	brne	.-34     	; 0x6484 <vfprintf+0x1c4>
    64a6:	e1 c0       	rjmp	.+450    	; 0x666a <vfprintf+0x3aa>
    64a8:	84 36       	cpi	r24, 0x64	; 100
    64aa:	11 f0       	breq	.+4      	; 0x64b0 <vfprintf+0x1f0>
    64ac:	89 36       	cpi	r24, 0x69	; 105
    64ae:	39 f5       	brne	.+78     	; 0x64fe <vfprintf+0x23e>
    64b0:	f8 01       	movw	r30, r16
    64b2:	37 fe       	sbrs	r3, 7
    64b4:	07 c0       	rjmp	.+14     	; 0x64c4 <vfprintf+0x204>
    64b6:	60 81       	ld	r22, Z
    64b8:	71 81       	ldd	r23, Z+1	; 0x01
    64ba:	82 81       	ldd	r24, Z+2	; 0x02
    64bc:	93 81       	ldd	r25, Z+3	; 0x03
    64be:	0c 5f       	subi	r16, 0xFC	; 252
    64c0:	1f 4f       	sbci	r17, 0xFF	; 255
    64c2:	08 c0       	rjmp	.+16     	; 0x64d4 <vfprintf+0x214>
    64c4:	60 81       	ld	r22, Z
    64c6:	71 81       	ldd	r23, Z+1	; 0x01
    64c8:	07 2e       	mov	r0, r23
    64ca:	00 0c       	add	r0, r0
    64cc:	88 0b       	sbc	r24, r24
    64ce:	99 0b       	sbc	r25, r25
    64d0:	0e 5f       	subi	r16, 0xFE	; 254
    64d2:	1f 4f       	sbci	r17, 0xFF	; 255
    64d4:	f3 2d       	mov	r31, r3
    64d6:	ff 76       	andi	r31, 0x6F	; 111
    64d8:	3f 2e       	mov	r3, r31
    64da:	97 ff       	sbrs	r25, 7
    64dc:	09 c0       	rjmp	.+18     	; 0x64f0 <vfprintf+0x230>
    64de:	90 95       	com	r25
    64e0:	80 95       	com	r24
    64e2:	70 95       	com	r23
    64e4:	61 95       	neg	r22
    64e6:	7f 4f       	sbci	r23, 0xFF	; 255
    64e8:	8f 4f       	sbci	r24, 0xFF	; 255
    64ea:	9f 4f       	sbci	r25, 0xFF	; 255
    64ec:	f0 68       	ori	r31, 0x80	; 128
    64ee:	3f 2e       	mov	r3, r31
    64f0:	2a e0       	ldi	r18, 0x0A	; 10
    64f2:	30 e0       	ldi	r19, 0x00	; 0
    64f4:	a3 01       	movw	r20, r6
    64f6:	33 d1       	rcall	.+614    	; 0x675e <__ultoa_invert>
    64f8:	88 2e       	mov	r8, r24
    64fa:	86 18       	sub	r8, r6
    64fc:	44 c0       	rjmp	.+136    	; 0x6586 <vfprintf+0x2c6>
    64fe:	85 37       	cpi	r24, 0x75	; 117
    6500:	31 f4       	brne	.+12     	; 0x650e <vfprintf+0x24e>
    6502:	23 2d       	mov	r18, r3
    6504:	2f 7e       	andi	r18, 0xEF	; 239
    6506:	b2 2e       	mov	r11, r18
    6508:	2a e0       	ldi	r18, 0x0A	; 10
    650a:	30 e0       	ldi	r19, 0x00	; 0
    650c:	25 c0       	rjmp	.+74     	; 0x6558 <vfprintf+0x298>
    650e:	93 2d       	mov	r25, r3
    6510:	99 7f       	andi	r25, 0xF9	; 249
    6512:	b9 2e       	mov	r11, r25
    6514:	8f 36       	cpi	r24, 0x6F	; 111
    6516:	c1 f0       	breq	.+48     	; 0x6548 <vfprintf+0x288>
    6518:	18 f4       	brcc	.+6      	; 0x6520 <vfprintf+0x260>
    651a:	88 35       	cpi	r24, 0x58	; 88
    651c:	79 f0       	breq	.+30     	; 0x653c <vfprintf+0x27c>
    651e:	ae c0       	rjmp	.+348    	; 0x667c <vfprintf+0x3bc>
    6520:	80 37       	cpi	r24, 0x70	; 112
    6522:	19 f0       	breq	.+6      	; 0x652a <vfprintf+0x26a>
    6524:	88 37       	cpi	r24, 0x78	; 120
    6526:	21 f0       	breq	.+8      	; 0x6530 <vfprintf+0x270>
    6528:	a9 c0       	rjmp	.+338    	; 0x667c <vfprintf+0x3bc>
    652a:	e9 2f       	mov	r30, r25
    652c:	e0 61       	ori	r30, 0x10	; 16
    652e:	be 2e       	mov	r11, r30
    6530:	b4 fe       	sbrs	r11, 4
    6532:	0d c0       	rjmp	.+26     	; 0x654e <vfprintf+0x28e>
    6534:	fb 2d       	mov	r31, r11
    6536:	f4 60       	ori	r31, 0x04	; 4
    6538:	bf 2e       	mov	r11, r31
    653a:	09 c0       	rjmp	.+18     	; 0x654e <vfprintf+0x28e>
    653c:	34 fe       	sbrs	r3, 4
    653e:	0a c0       	rjmp	.+20     	; 0x6554 <vfprintf+0x294>
    6540:	29 2f       	mov	r18, r25
    6542:	26 60       	ori	r18, 0x06	; 6
    6544:	b2 2e       	mov	r11, r18
    6546:	06 c0       	rjmp	.+12     	; 0x6554 <vfprintf+0x294>
    6548:	28 e0       	ldi	r18, 0x08	; 8
    654a:	30 e0       	ldi	r19, 0x00	; 0
    654c:	05 c0       	rjmp	.+10     	; 0x6558 <vfprintf+0x298>
    654e:	20 e1       	ldi	r18, 0x10	; 16
    6550:	30 e0       	ldi	r19, 0x00	; 0
    6552:	02 c0       	rjmp	.+4      	; 0x6558 <vfprintf+0x298>
    6554:	20 e1       	ldi	r18, 0x10	; 16
    6556:	32 e0       	ldi	r19, 0x02	; 2
    6558:	f8 01       	movw	r30, r16
    655a:	b7 fe       	sbrs	r11, 7
    655c:	07 c0       	rjmp	.+14     	; 0x656c <vfprintf+0x2ac>
    655e:	60 81       	ld	r22, Z
    6560:	71 81       	ldd	r23, Z+1	; 0x01
    6562:	82 81       	ldd	r24, Z+2	; 0x02
    6564:	93 81       	ldd	r25, Z+3	; 0x03
    6566:	0c 5f       	subi	r16, 0xFC	; 252
    6568:	1f 4f       	sbci	r17, 0xFF	; 255
    656a:	06 c0       	rjmp	.+12     	; 0x6578 <vfprintf+0x2b8>
    656c:	60 81       	ld	r22, Z
    656e:	71 81       	ldd	r23, Z+1	; 0x01
    6570:	80 e0       	ldi	r24, 0x00	; 0
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	0e 5f       	subi	r16, 0xFE	; 254
    6576:	1f 4f       	sbci	r17, 0xFF	; 255
    6578:	a3 01       	movw	r20, r6
    657a:	f1 d0       	rcall	.+482    	; 0x675e <__ultoa_invert>
    657c:	88 2e       	mov	r8, r24
    657e:	86 18       	sub	r8, r6
    6580:	fb 2d       	mov	r31, r11
    6582:	ff 77       	andi	r31, 0x7F	; 127
    6584:	3f 2e       	mov	r3, r31
    6586:	36 fe       	sbrs	r3, 6
    6588:	0d c0       	rjmp	.+26     	; 0x65a4 <vfprintf+0x2e4>
    658a:	23 2d       	mov	r18, r3
    658c:	2e 7f       	andi	r18, 0xFE	; 254
    658e:	a2 2e       	mov	r10, r18
    6590:	89 14       	cp	r8, r9
    6592:	58 f4       	brcc	.+22     	; 0x65aa <vfprintf+0x2ea>
    6594:	34 fe       	sbrs	r3, 4
    6596:	0b c0       	rjmp	.+22     	; 0x65ae <vfprintf+0x2ee>
    6598:	32 fc       	sbrc	r3, 2
    659a:	09 c0       	rjmp	.+18     	; 0x65ae <vfprintf+0x2ee>
    659c:	83 2d       	mov	r24, r3
    659e:	8e 7e       	andi	r24, 0xEE	; 238
    65a0:	a8 2e       	mov	r10, r24
    65a2:	05 c0       	rjmp	.+10     	; 0x65ae <vfprintf+0x2ee>
    65a4:	b8 2c       	mov	r11, r8
    65a6:	a3 2c       	mov	r10, r3
    65a8:	03 c0       	rjmp	.+6      	; 0x65b0 <vfprintf+0x2f0>
    65aa:	b8 2c       	mov	r11, r8
    65ac:	01 c0       	rjmp	.+2      	; 0x65b0 <vfprintf+0x2f0>
    65ae:	b9 2c       	mov	r11, r9
    65b0:	a4 fe       	sbrs	r10, 4
    65b2:	0f c0       	rjmp	.+30     	; 0x65d2 <vfprintf+0x312>
    65b4:	fe 01       	movw	r30, r28
    65b6:	e8 0d       	add	r30, r8
    65b8:	f1 1d       	adc	r31, r1
    65ba:	80 81       	ld	r24, Z
    65bc:	80 33       	cpi	r24, 0x30	; 48
    65be:	21 f4       	brne	.+8      	; 0x65c8 <vfprintf+0x308>
    65c0:	9a 2d       	mov	r25, r10
    65c2:	99 7e       	andi	r25, 0xE9	; 233
    65c4:	a9 2e       	mov	r10, r25
    65c6:	09 c0       	rjmp	.+18     	; 0x65da <vfprintf+0x31a>
    65c8:	a2 fe       	sbrs	r10, 2
    65ca:	06 c0       	rjmp	.+12     	; 0x65d8 <vfprintf+0x318>
    65cc:	b3 94       	inc	r11
    65ce:	b3 94       	inc	r11
    65d0:	04 c0       	rjmp	.+8      	; 0x65da <vfprintf+0x31a>
    65d2:	8a 2d       	mov	r24, r10
    65d4:	86 78       	andi	r24, 0x86	; 134
    65d6:	09 f0       	breq	.+2      	; 0x65da <vfprintf+0x31a>
    65d8:	b3 94       	inc	r11
    65da:	a3 fc       	sbrc	r10, 3
    65dc:	10 c0       	rjmp	.+32     	; 0x65fe <vfprintf+0x33e>
    65de:	a0 fe       	sbrs	r10, 0
    65e0:	06 c0       	rjmp	.+12     	; 0x65ee <vfprintf+0x32e>
    65e2:	b2 14       	cp	r11, r2
    65e4:	80 f4       	brcc	.+32     	; 0x6606 <vfprintf+0x346>
    65e6:	28 0c       	add	r2, r8
    65e8:	92 2c       	mov	r9, r2
    65ea:	9b 18       	sub	r9, r11
    65ec:	0d c0       	rjmp	.+26     	; 0x6608 <vfprintf+0x348>
    65ee:	b2 14       	cp	r11, r2
    65f0:	58 f4       	brcc	.+22     	; 0x6608 <vfprintf+0x348>
    65f2:	b6 01       	movw	r22, r12
    65f4:	80 e2       	ldi	r24, 0x20	; 32
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	76 d0       	rcall	.+236    	; 0x66e6 <fputc>
    65fa:	b3 94       	inc	r11
    65fc:	f8 cf       	rjmp	.-16     	; 0x65ee <vfprintf+0x32e>
    65fe:	b2 14       	cp	r11, r2
    6600:	18 f4       	brcc	.+6      	; 0x6608 <vfprintf+0x348>
    6602:	2b 18       	sub	r2, r11
    6604:	02 c0       	rjmp	.+4      	; 0x660a <vfprintf+0x34a>
    6606:	98 2c       	mov	r9, r8
    6608:	21 2c       	mov	r2, r1
    660a:	a4 fe       	sbrs	r10, 4
    660c:	0f c0       	rjmp	.+30     	; 0x662c <vfprintf+0x36c>
    660e:	b6 01       	movw	r22, r12
    6610:	80 e3       	ldi	r24, 0x30	; 48
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	68 d0       	rcall	.+208    	; 0x66e6 <fputc>
    6616:	a2 fe       	sbrs	r10, 2
    6618:	16 c0       	rjmp	.+44     	; 0x6646 <vfprintf+0x386>
    661a:	a1 fc       	sbrc	r10, 1
    661c:	03 c0       	rjmp	.+6      	; 0x6624 <vfprintf+0x364>
    661e:	88 e7       	ldi	r24, 0x78	; 120
    6620:	90 e0       	ldi	r25, 0x00	; 0
    6622:	02 c0       	rjmp	.+4      	; 0x6628 <vfprintf+0x368>
    6624:	88 e5       	ldi	r24, 0x58	; 88
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	b6 01       	movw	r22, r12
    662a:	0c c0       	rjmp	.+24     	; 0x6644 <vfprintf+0x384>
    662c:	8a 2d       	mov	r24, r10
    662e:	86 78       	andi	r24, 0x86	; 134
    6630:	51 f0       	breq	.+20     	; 0x6646 <vfprintf+0x386>
    6632:	a1 fe       	sbrs	r10, 1
    6634:	02 c0       	rjmp	.+4      	; 0x663a <vfprintf+0x37a>
    6636:	8b e2       	ldi	r24, 0x2B	; 43
    6638:	01 c0       	rjmp	.+2      	; 0x663c <vfprintf+0x37c>
    663a:	80 e2       	ldi	r24, 0x20	; 32
    663c:	a7 fc       	sbrc	r10, 7
    663e:	8d e2       	ldi	r24, 0x2D	; 45
    6640:	b6 01       	movw	r22, r12
    6642:	90 e0       	ldi	r25, 0x00	; 0
    6644:	50 d0       	rcall	.+160    	; 0x66e6 <fputc>
    6646:	89 14       	cp	r8, r9
    6648:	30 f4       	brcc	.+12     	; 0x6656 <vfprintf+0x396>
    664a:	b6 01       	movw	r22, r12
    664c:	80 e3       	ldi	r24, 0x30	; 48
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	4a d0       	rcall	.+148    	; 0x66e6 <fputc>
    6652:	9a 94       	dec	r9
    6654:	f8 cf       	rjmp	.-16     	; 0x6646 <vfprintf+0x386>
    6656:	8a 94       	dec	r8
    6658:	f3 01       	movw	r30, r6
    665a:	e8 0d       	add	r30, r8
    665c:	f1 1d       	adc	r31, r1
    665e:	80 81       	ld	r24, Z
    6660:	b6 01       	movw	r22, r12
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	40 d0       	rcall	.+128    	; 0x66e6 <fputc>
    6666:	81 10       	cpse	r8, r1
    6668:	f6 cf       	rjmp	.-20     	; 0x6656 <vfprintf+0x396>
    666a:	22 20       	and	r2, r2
    666c:	09 f4       	brne	.+2      	; 0x6670 <vfprintf+0x3b0>
    666e:	4e ce       	rjmp	.-868    	; 0x630c <vfprintf+0x4c>
    6670:	b6 01       	movw	r22, r12
    6672:	80 e2       	ldi	r24, 0x20	; 32
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	37 d0       	rcall	.+110    	; 0x66e6 <fputc>
    6678:	2a 94       	dec	r2
    667a:	f7 cf       	rjmp	.-18     	; 0x666a <vfprintf+0x3aa>
    667c:	f6 01       	movw	r30, r12
    667e:	86 81       	ldd	r24, Z+6	; 0x06
    6680:	97 81       	ldd	r25, Z+7	; 0x07
    6682:	02 c0       	rjmp	.+4      	; 0x6688 <vfprintf+0x3c8>
    6684:	8f ef       	ldi	r24, 0xFF	; 255
    6686:	9f ef       	ldi	r25, 0xFF	; 255
    6688:	2b 96       	adiw	r28, 0x0b	; 11
    668a:	0f b6       	in	r0, 0x3f	; 63
    668c:	f8 94       	cli
    668e:	de bf       	out	0x3e, r29	; 62
    6690:	0f be       	out	0x3f, r0	; 63
    6692:	cd bf       	out	0x3d, r28	; 61
    6694:	df 91       	pop	r29
    6696:	cf 91       	pop	r28
    6698:	1f 91       	pop	r17
    669a:	0f 91       	pop	r16
    669c:	ff 90       	pop	r15
    669e:	ef 90       	pop	r14
    66a0:	df 90       	pop	r13
    66a2:	cf 90       	pop	r12
    66a4:	bf 90       	pop	r11
    66a6:	af 90       	pop	r10
    66a8:	9f 90       	pop	r9
    66aa:	8f 90       	pop	r8
    66ac:	7f 90       	pop	r7
    66ae:	6f 90       	pop	r6
    66b0:	5f 90       	pop	r5
    66b2:	4f 90       	pop	r4
    66b4:	3f 90       	pop	r3
    66b6:	2f 90       	pop	r2
    66b8:	08 95       	ret

000066ba <strnlen_P>:
    66ba:	fc 01       	movw	r30, r24
    66bc:	05 90       	lpm	r0, Z+
    66be:	61 50       	subi	r22, 0x01	; 1
    66c0:	70 40       	sbci	r23, 0x00	; 0
    66c2:	01 10       	cpse	r0, r1
    66c4:	d8 f7       	brcc	.-10     	; 0x66bc <strnlen_P+0x2>
    66c6:	80 95       	com	r24
    66c8:	90 95       	com	r25
    66ca:	8e 0f       	add	r24, r30
    66cc:	9f 1f       	adc	r25, r31
    66ce:	08 95       	ret

000066d0 <strnlen>:
    66d0:	fc 01       	movw	r30, r24
    66d2:	61 50       	subi	r22, 0x01	; 1
    66d4:	70 40       	sbci	r23, 0x00	; 0
    66d6:	01 90       	ld	r0, Z+
    66d8:	01 10       	cpse	r0, r1
    66da:	d8 f7       	brcc	.-10     	; 0x66d2 <strnlen+0x2>
    66dc:	80 95       	com	r24
    66de:	90 95       	com	r25
    66e0:	8e 0f       	add	r24, r30
    66e2:	9f 1f       	adc	r25, r31
    66e4:	08 95       	ret

000066e6 <fputc>:
    66e6:	0f 93       	push	r16
    66e8:	1f 93       	push	r17
    66ea:	cf 93       	push	r28
    66ec:	df 93       	push	r29
    66ee:	fb 01       	movw	r30, r22
    66f0:	23 81       	ldd	r18, Z+3	; 0x03
    66f2:	21 fd       	sbrc	r18, 1
    66f4:	03 c0       	rjmp	.+6      	; 0x66fc <fputc+0x16>
    66f6:	8f ef       	ldi	r24, 0xFF	; 255
    66f8:	9f ef       	ldi	r25, 0xFF	; 255
    66fa:	2c c0       	rjmp	.+88     	; 0x6754 <fputc+0x6e>
    66fc:	22 ff       	sbrs	r18, 2
    66fe:	16 c0       	rjmp	.+44     	; 0x672c <fputc+0x46>
    6700:	46 81       	ldd	r20, Z+6	; 0x06
    6702:	57 81       	ldd	r21, Z+7	; 0x07
    6704:	24 81       	ldd	r18, Z+4	; 0x04
    6706:	35 81       	ldd	r19, Z+5	; 0x05
    6708:	42 17       	cp	r20, r18
    670a:	53 07       	cpc	r21, r19
    670c:	44 f4       	brge	.+16     	; 0x671e <fputc+0x38>
    670e:	a0 81       	ld	r26, Z
    6710:	b1 81       	ldd	r27, Z+1	; 0x01
    6712:	9d 01       	movw	r18, r26
    6714:	2f 5f       	subi	r18, 0xFF	; 255
    6716:	3f 4f       	sbci	r19, 0xFF	; 255
    6718:	31 83       	std	Z+1, r19	; 0x01
    671a:	20 83       	st	Z, r18
    671c:	8c 93       	st	X, r24
    671e:	26 81       	ldd	r18, Z+6	; 0x06
    6720:	37 81       	ldd	r19, Z+7	; 0x07
    6722:	2f 5f       	subi	r18, 0xFF	; 255
    6724:	3f 4f       	sbci	r19, 0xFF	; 255
    6726:	37 83       	std	Z+7, r19	; 0x07
    6728:	26 83       	std	Z+6, r18	; 0x06
    672a:	14 c0       	rjmp	.+40     	; 0x6754 <fputc+0x6e>
    672c:	8b 01       	movw	r16, r22
    672e:	ec 01       	movw	r28, r24
    6730:	fb 01       	movw	r30, r22
    6732:	00 84       	ldd	r0, Z+8	; 0x08
    6734:	f1 85       	ldd	r31, Z+9	; 0x09
    6736:	e0 2d       	mov	r30, r0
    6738:	19 95       	eicall
    673a:	89 2b       	or	r24, r25
    673c:	e1 f6       	brne	.-72     	; 0x66f6 <fputc+0x10>
    673e:	d8 01       	movw	r26, r16
    6740:	16 96       	adiw	r26, 0x06	; 6
    6742:	8d 91       	ld	r24, X+
    6744:	9c 91       	ld	r25, X
    6746:	17 97       	sbiw	r26, 0x07	; 7
    6748:	01 96       	adiw	r24, 0x01	; 1
    674a:	17 96       	adiw	r26, 0x07	; 7
    674c:	9c 93       	st	X, r25
    674e:	8e 93       	st	-X, r24
    6750:	16 97       	sbiw	r26, 0x06	; 6
    6752:	ce 01       	movw	r24, r28
    6754:	df 91       	pop	r29
    6756:	cf 91       	pop	r28
    6758:	1f 91       	pop	r17
    675a:	0f 91       	pop	r16
    675c:	08 95       	ret

0000675e <__ultoa_invert>:
    675e:	fa 01       	movw	r30, r20
    6760:	aa 27       	eor	r26, r26
    6762:	28 30       	cpi	r18, 0x08	; 8
    6764:	51 f1       	breq	.+84     	; 0x67ba <__ultoa_invert+0x5c>
    6766:	20 31       	cpi	r18, 0x10	; 16
    6768:	81 f1       	breq	.+96     	; 0x67ca <__ultoa_invert+0x6c>
    676a:	e8 94       	clt
    676c:	6f 93       	push	r22
    676e:	6e 7f       	andi	r22, 0xFE	; 254
    6770:	6e 5f       	subi	r22, 0xFE	; 254
    6772:	7f 4f       	sbci	r23, 0xFF	; 255
    6774:	8f 4f       	sbci	r24, 0xFF	; 255
    6776:	9f 4f       	sbci	r25, 0xFF	; 255
    6778:	af 4f       	sbci	r26, 0xFF	; 255
    677a:	b1 e0       	ldi	r27, 0x01	; 1
    677c:	3e d0       	rcall	.+124    	; 0x67fa <__ultoa_invert+0x9c>
    677e:	b4 e0       	ldi	r27, 0x04	; 4
    6780:	3c d0       	rcall	.+120    	; 0x67fa <__ultoa_invert+0x9c>
    6782:	67 0f       	add	r22, r23
    6784:	78 1f       	adc	r23, r24
    6786:	89 1f       	adc	r24, r25
    6788:	9a 1f       	adc	r25, r26
    678a:	a1 1d       	adc	r26, r1
    678c:	68 0f       	add	r22, r24
    678e:	79 1f       	adc	r23, r25
    6790:	8a 1f       	adc	r24, r26
    6792:	91 1d       	adc	r25, r1
    6794:	a1 1d       	adc	r26, r1
    6796:	6a 0f       	add	r22, r26
    6798:	71 1d       	adc	r23, r1
    679a:	81 1d       	adc	r24, r1
    679c:	91 1d       	adc	r25, r1
    679e:	a1 1d       	adc	r26, r1
    67a0:	20 d0       	rcall	.+64     	; 0x67e2 <__ultoa_invert+0x84>
    67a2:	09 f4       	brne	.+2      	; 0x67a6 <__ultoa_invert+0x48>
    67a4:	68 94       	set
    67a6:	3f 91       	pop	r19
    67a8:	2a e0       	ldi	r18, 0x0A	; 10
    67aa:	26 9f       	mul	r18, r22
    67ac:	11 24       	eor	r1, r1
    67ae:	30 19       	sub	r19, r0
    67b0:	30 5d       	subi	r19, 0xD0	; 208
    67b2:	31 93       	st	Z+, r19
    67b4:	de f6       	brtc	.-74     	; 0x676c <__ultoa_invert+0xe>
    67b6:	cf 01       	movw	r24, r30
    67b8:	08 95       	ret
    67ba:	46 2f       	mov	r20, r22
    67bc:	47 70       	andi	r20, 0x07	; 7
    67be:	40 5d       	subi	r20, 0xD0	; 208
    67c0:	41 93       	st	Z+, r20
    67c2:	b3 e0       	ldi	r27, 0x03	; 3
    67c4:	0f d0       	rcall	.+30     	; 0x67e4 <__ultoa_invert+0x86>
    67c6:	c9 f7       	brne	.-14     	; 0x67ba <__ultoa_invert+0x5c>
    67c8:	f6 cf       	rjmp	.-20     	; 0x67b6 <__ultoa_invert+0x58>
    67ca:	46 2f       	mov	r20, r22
    67cc:	4f 70       	andi	r20, 0x0F	; 15
    67ce:	40 5d       	subi	r20, 0xD0	; 208
    67d0:	4a 33       	cpi	r20, 0x3A	; 58
    67d2:	18 f0       	brcs	.+6      	; 0x67da <__ultoa_invert+0x7c>
    67d4:	49 5d       	subi	r20, 0xD9	; 217
    67d6:	31 fd       	sbrc	r19, 1
    67d8:	40 52       	subi	r20, 0x20	; 32
    67da:	41 93       	st	Z+, r20
    67dc:	02 d0       	rcall	.+4      	; 0x67e2 <__ultoa_invert+0x84>
    67de:	a9 f7       	brne	.-22     	; 0x67ca <__ultoa_invert+0x6c>
    67e0:	ea cf       	rjmp	.-44     	; 0x67b6 <__ultoa_invert+0x58>
    67e2:	b4 e0       	ldi	r27, 0x04	; 4
    67e4:	a6 95       	lsr	r26
    67e6:	97 95       	ror	r25
    67e8:	87 95       	ror	r24
    67ea:	77 95       	ror	r23
    67ec:	67 95       	ror	r22
    67ee:	ba 95       	dec	r27
    67f0:	c9 f7       	brne	.-14     	; 0x67e4 <__ultoa_invert+0x86>
    67f2:	00 97       	sbiw	r24, 0x00	; 0
    67f4:	61 05       	cpc	r22, r1
    67f6:	71 05       	cpc	r23, r1
    67f8:	08 95       	ret
    67fa:	9b 01       	movw	r18, r22
    67fc:	ac 01       	movw	r20, r24
    67fe:	0a 2e       	mov	r0, r26
    6800:	06 94       	lsr	r0
    6802:	57 95       	ror	r21
    6804:	47 95       	ror	r20
    6806:	37 95       	ror	r19
    6808:	27 95       	ror	r18
    680a:	ba 95       	dec	r27
    680c:	c9 f7       	brne	.-14     	; 0x6800 <__ultoa_invert+0xa2>
    680e:	62 0f       	add	r22, r18
    6810:	73 1f       	adc	r23, r19
    6812:	84 1f       	adc	r24, r20
    6814:	95 1f       	adc	r25, r21
    6816:	a0 1d       	adc	r26, r0
    6818:	08 95       	ret

0000681a <_exit>:
    681a:	f8 94       	cli

0000681c <__stop_program>:
    681c:	ff cf       	rjmp	.-2      	; 0x681c <__stop_program>
