
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005de  00800200  000063be  00006452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001031  008007de  008007de  00006a30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b10  00000000  00000000  00006acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dbfc  00000000  00000000  000075dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000368f  00000000  00000000  000151d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a37  00000000  00000000  00018867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000271c  00000000  00000000  0001f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004334  00000000  00000000  000219bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c2ec  00000000  00000000  00025cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a60  00000000  00000000  00031fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	c8 c5       	rjmp	.+2960   	; 0xbc2 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__vector_25>
      68:	0c 94 ba 25 	jmp	0x4b74	; 0x4b74 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <__vector_36>
      94:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 94 26 	jmp	0x4d28	; 0x4d28 <__vector_51>
      d0:	0c 94 e6 26 	jmp	0x4dcc	; 0x4dcc <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <__vector_54>
      dc:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 19       	sub	r31, r8
      e6:	f8 19       	sub	r31, r8
      e8:	f8 19       	sub	r31, r8
      ea:	2f 1a       	sub	r2, r31
      ec:	37 1a       	sub	r3, r23
      ee:	4c 1a       	sub	r4, r28
      f0:	f8 19       	sub	r31, r8
      f2:	f8 19       	sub	r31, r8
      f4:	2f 1a       	sub	r2, r31
      f6:	37 1a       	sub	r3, r23
      f8:	bd 2a       	or	r11, r29
      fa:	2d 2b       	or	r18, r29
      fc:	2d 2b       	or	r18, r29
      fe:	2d 2b       	or	r18, r29
     100:	2d 2b       	or	r18, r29
     102:	2d 2b       	or	r18, r29
     104:	2d 2b       	or	r18, r29
     106:	2d 2b       	or	r18, r29
     108:	bd 2a       	or	r11, r29
     10a:	2d 2b       	or	r18, r29
     10c:	2d 2b       	or	r18, r29
     10e:	2d 2b       	or	r18, r29
     110:	2d 2b       	or	r18, r29
     112:	2d 2b       	or	r18, r29
     114:	2d 2b       	or	r18, r29
     116:	2d 2b       	or	r18, r29
     118:	bf 2a       	or	r11, r31
     11a:	2d 2b       	or	r18, r29
     11c:	2d 2b       	or	r18, r29
     11e:	2d 2b       	or	r18, r29
     120:	2d 2b       	or	r18, r29
     122:	2d 2b       	or	r18, r29
     124:	2d 2b       	or	r18, r29
     126:	2d 2b       	or	r18, r29
     128:	2d 2b       	or	r18, r29
     12a:	2d 2b       	or	r18, r29
     12c:	2d 2b       	or	r18, r29
     12e:	2d 2b       	or	r18, r29
     130:	2d 2b       	or	r18, r29
     132:	2d 2b       	or	r18, r29
     134:	2d 2b       	or	r18, r29
     136:	2d 2b       	or	r18, r29
     138:	bf 2a       	or	r11, r31
     13a:	2d 2b       	or	r18, r29
     13c:	2d 2b       	or	r18, r29
     13e:	2d 2b       	or	r18, r29
     140:	2d 2b       	or	r18, r29
     142:	2d 2b       	or	r18, r29
     144:	2d 2b       	or	r18, r29
     146:	2d 2b       	or	r18, r29
     148:	2d 2b       	or	r18, r29
     14a:	2d 2b       	or	r18, r29
     14c:	2d 2b       	or	r18, r29
     14e:	2d 2b       	or	r18, r29
     150:	2d 2b       	or	r18, r29
     152:	2d 2b       	or	r18, r29
     154:	2d 2b       	or	r18, r29
     156:	2d 2b       	or	r18, r29
     158:	29 2b       	or	r18, r25
     15a:	2d 2b       	or	r18, r29
     15c:	2d 2b       	or	r18, r29
     15e:	2d 2b       	or	r18, r29
     160:	2d 2b       	or	r18, r29
     162:	2d 2b       	or	r18, r29
     164:	2d 2b       	or	r18, r29
     166:	2d 2b       	or	r18, r29
     168:	f4 2a       	or	r15, r20
     16a:	2d 2b       	or	r18, r29
     16c:	2d 2b       	or	r18, r29
     16e:	2d 2b       	or	r18, r29
     170:	2d 2b       	or	r18, r29
     172:	2d 2b       	or	r18, r29
     174:	2d 2b       	or	r18, r29
     176:	2d 2b       	or	r18, r29
     178:	2d 2b       	or	r18, r29
     17a:	2d 2b       	or	r18, r29
     17c:	2d 2b       	or	r18, r29
     17e:	2d 2b       	or	r18, r29
     180:	2d 2b       	or	r18, r29
     182:	2d 2b       	or	r18, r29
     184:	2d 2b       	or	r18, r29
     186:	2d 2b       	or	r18, r29
     188:	e8 2a       	or	r14, r24
     18a:	2d 2b       	or	r18, r29
     18c:	2d 2b       	or	r18, r29
     18e:	2d 2b       	or	r18, r29
     190:	2d 2b       	or	r18, r29
     192:	2d 2b       	or	r18, r29
     194:	2d 2b       	or	r18, r29
     196:	2d 2b       	or	r18, r29
     198:	0c 2b       	or	r16, r28

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <prvCheckTasksWaitingTermination>
     19e:	80 91 eb 15 	lds	r24, 0x15EB	; 0x8015eb <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	47 d4       	rcall	.+2190   	; 0xa36 <vPortYield>
     1a8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 75 17 	call	0x2eea	; 0x2eea <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 c1 19 	call	0x3382	; 0x3382 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee eb       	ldi	r30, 0xBE	; 190
     1e4:	f3 e6       	ldi	r31, 0x63	; 99
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 3d       	cpi	r26, 0xDE	; 222
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	ae ed       	ldi	r26, 0xDE	; 222
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 30       	cpi	r26, 0x0F	; 15
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <main>
     20a:	0c 94 dd 31 	jmp	0x63ba	; 0x63ba <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <myCo2CallBack>:
	dataReadyEventGroup=event2;

}

void myCo2CallBack(uint16_t *data){
	co2_data = data;
     210:	90 93 e4 17 	sts	0x17E4, r25	; 0x8017e4 <co2_data+0x1>
     214:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <co2_data>
	xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <dataReadyEventGroup>
     224:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <dataReadyEventGroup+0x1>
     228:	51 c1       	rjmp	.+674    	; 0x4cc <xEventGroupSetBits>
     22a:	08 95       	ret

0000022c <CO2_sensor_create>:
}CO2_Sensor;



void CO2_sensor_create(EventGroupHandle_t event1,EventGroupHandle_t event2)
{
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	8c 01       	movw	r16, r24
     236:	eb 01       	movw	r28, r22
	
	co2_sensor_t new_co2_data = pvPortMalloc(sizeof(CO2_Sensor));
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	48 d2       	rcall	.+1168   	; 0x6ce <pvPortMalloc>
	if(NULL == new_co2_data)
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	79 f0       	breq	.+30     	; 0x260 <CO2_sensor_create+0x34>
	{
		return NULL;
	}
	new_co2_data->co2_Data=co2_data;
     242:	20 91 e3 17 	lds	r18, 0x17E3	; 0x8017e3 <co2_data>
     246:	30 91 e4 17 	lds	r19, 0x17E4	; 0x8017e4 <co2_data+0x1>
     24a:	fc 01       	movw	r30, r24
     24c:	31 83       	std	Z+1, r19	; 0x01
     24e:	20 83       	st	Z, r18
	meassureEventGroup=event1;
     250:	10 93 ea 17 	sts	0x17EA, r17	; 0x8017ea <meassureEventGroup+0x1>
     254:	00 93 e9 17 	sts	0x17E9, r16	; 0x8017e9 <meassureEventGroup>
	dataReadyEventGroup=event2;
     258:	d0 93 fa 17 	sts	0x17FA, r29	; 0x8017fa <dataReadyEventGroup+0x1>
     25c:	c0 93 f9 17 	sts	0x17F9, r28	; 0x8017f9 <dataReadyEventGroup>

}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <get_CO2_data>:


uint16_t get_CO2_data(){
	
	return (uint16_t)co2_data;
}
     26a:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <co2_data>
     26e:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <co2_data+0x1>
     272:	08 95       	ret

00000274 <CO2_taskRun>:


void CO2_taskRun() {
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
	
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     27e:	cc 24       	eor	r12, r12
     280:	ca 94       	dec	r12
     282:	dc 2c       	mov	r13, r12
     284:	76 01       	movw	r14, r12
     286:	01 e0       	ldi	r16, 0x01	; 1
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	42 e0       	ldi	r20, 0x02	; 2
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <meassureEventGroup>
     296:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <meassureEventGroup+0x1>
     29a:	78 d0       	rcall	.+240    	; 0x38c <xEventGroupWaitBits>
	CO2_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	
	if ((event_measure & CO2_BIT)==CO2_BIT)
     29c:	61 ff       	sbrs	r22, 1
     29e:	1c c0       	rjmp	.+56     	; 0x2d8 <CO2_taskRun+0x64>
	{
	
		
		vTaskDelay(pdMS_TO_TICKS(100UL));
     2a0:	66 e0       	ldi	r22, 0x06	; 6
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
		rc = mh_z19_takeMeassuring();
     2ac:	0e 94 c3 23 	call	0x4786	; 0x4786 <mh_z19_takeMeassuring>
     2b0:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <rc>
		
		if (rc != MHZ19_OK)
     2b4:	88 23       	and	r24, r24
     2b6:	41 f0       	breq	.+16     	; 0x2c8 <CO2_taskRun+0x54>
		{
			printf("task got wrong");
     2b8:	8f e6       	ldi	r24, 0x6F	; 111
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
		}
	
		printf("<<CO2 task set>>");		
     2c8:	8e e7       	ldi	r24, 0x7E	; 126
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
		
	}		
}
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	08 95       	ret

000002e4 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	puts("<<<CO2  1>>>>");
     2e4:	8f e8       	ldi	r24, 0x8F	; 143
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <puts>
	xFrequency = 3000/portTICK_PERIOD_MS;
     2ec:	8b eb       	ldi	r24, 0xBB	; 187
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <xFrequency>
     2f8:	90 93 ec 17 	sts	0x17EC, r25	; 0x8017ec <xFrequency+0x1>
     2fc:	a0 93 ed 17 	sts	0x17ED, r26	; 0x8017ed <xFrequency+0x2>
     300:	b0 93 ee 17 	sts	0x17EE, r27	; 0x8017ee <xFrequency+0x3>
	xLastWakeTime = xTaskGetTickCount();
     304:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <xTaskGetTickCount>
     308:	60 93 e5 17 	sts	0x17E5, r22	; 0x8017e5 <xLastWakeTime>
     30c:	70 93 e6 17 	sts	0x17E6, r23	; 0x8017e6 <xLastWakeTime+0x1>
     310:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <xLastWakeTime+0x2>
     314:	90 93 e8 17 	sts	0x17E8, r25	; 0x8017e8 <xLastWakeTime+0x3>
	mh_z19_injectCallBack(myCo2CallBack);
     318:	88 e0       	ldi	r24, 0x08	; 8
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 be 23 	call	0x477c	; 0x477c <mh_z19_injectCallBack>
	for(;;)
	{
		
		CO2_taskRun();
     320:	a9 df       	rcall	.-174    	; 0x274 <CO2_taskRun>
     322:	fe cf       	rjmp	.-4      	; 0x320 <CO2_Sensor_Task+0x3c>

00000324 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     324:	0f 93       	push	r16
     326:	01 11       	cpse	r16, r1
     328:	0c c0       	rjmp	.+24     	; 0x342 <prvTestWaitCondition+0x1e>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	82 23       	and	r24, r18
     330:	93 23       	and	r25, r19
     332:	a4 23       	and	r26, r20
     334:	b5 23       	and	r27, r21
     336:	89 2b       	or	r24, r25
     338:	8a 2b       	or	r24, r26
     33a:	8b 2b       	or	r24, r27
     33c:	79 f4       	brne	.+30     	; 0x35c <prvTestWaitCondition+0x38>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	10 c0       	rjmp	.+32     	; 0x362 <prvTestWaitCondition+0x3e>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	82 23       	and	r24, r18
     348:	93 23       	and	r25, r19
     34a:	a4 23       	and	r26, r20
     34c:	b5 23       	and	r27, r21
     34e:	28 17       	cp	r18, r24
     350:	39 07       	cpc	r19, r25
     352:	4a 07       	cpc	r20, r26
     354:	5b 07       	cpc	r21, r27
     356:	21 f0       	breq	.+8      	; 0x360 <prvTestWaitCondition+0x3c>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	03 c0       	rjmp	.+6      	; 0x362 <prvTestWaitCondition+0x3e>
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <prvTestWaitCondition+0x3e>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <xEventGroupCreate>:
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	8f e0       	ldi	r24, 0x0F	; 15
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	af d1       	rcall	.+862    	; 0x6ce <pvPortMalloc>
     370:	ec 01       	movw	r28, r24
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	39 f0       	breq	.+14     	; 0x384 <xEventGroupCreate+0x1e>
     376:	fc 01       	movw	r30, r24
     378:	11 92       	st	Z+, r1
     37a:	11 92       	st	Z+, r1
     37c:	11 92       	st	Z+, r1
     37e:	11 92       	st	Z+, r1
     380:	cf 01       	movw	r24, r30
     382:	8b d2       	rcall	.+1302   	; 0x89a <vListInitialise>
     384:	ce 01       	movw	r24, r28
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <xEventGroupWaitBits>:
     38c:	2f 92       	push	r2
     38e:	3f 92       	push	r3
     390:	4f 92       	push	r4
     392:	5f 92       	push	r5
     394:	6f 92       	push	r6
     396:	7f 92       	push	r7
     398:	8f 92       	push	r8
     39a:	9f 92       	push	r9
     39c:	af 92       	push	r10
     39e:	bf 92       	push	r11
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
     3b2:	4a 01       	movw	r8, r20
     3b4:	5b 01       	movw	r10, r22
     3b6:	62 2e       	mov	r6, r18
     3b8:	70 2e       	mov	r7, r16
     3ba:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskSuspendAll>
     3be:	28 80       	ld	r2, Y
     3c0:	39 80       	ldd	r3, Y+1	; 0x01
     3c2:	4a 80       	ldd	r4, Y+2	; 0x02
     3c4:	5b 80       	ldd	r5, Y+3	; 0x03
     3c6:	a5 01       	movw	r20, r10
     3c8:	94 01       	movw	r18, r8
     3ca:	c2 01       	movw	r24, r4
     3cc:	b1 01       	movw	r22, r2
     3ce:	aa df       	rcall	.-172    	; 0x324 <prvTestWaitCondition>
     3d0:	88 23       	and	r24, r24
     3d2:	a1 f0       	breq	.+40     	; 0x3fc <xEventGroupWaitBits+0x70>
     3d4:	66 20       	and	r6, r6
     3d6:	89 f1       	breq	.+98     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3d8:	d5 01       	movw	r26, r10
     3da:	c4 01       	movw	r24, r8
     3dc:	80 95       	com	r24
     3de:	90 95       	com	r25
     3e0:	a0 95       	com	r26
     3e2:	b0 95       	com	r27
     3e4:	82 21       	and	r24, r2
     3e6:	93 21       	and	r25, r3
     3e8:	a4 21       	and	r26, r4
     3ea:	b5 21       	and	r27, r5
     3ec:	88 83       	st	Y, r24
     3ee:	99 83       	std	Y+1, r25	; 0x01
     3f0:	aa 83       	std	Y+2, r26	; 0x02
     3f2:	bb 83       	std	Y+3, r27	; 0x03
     3f4:	c1 2c       	mov	r12, r1
     3f6:	d1 2c       	mov	r13, r1
     3f8:	76 01       	movw	r14, r12
     3fa:	22 c0       	rjmp	.+68     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3fc:	c1 14       	cp	r12, r1
     3fe:	d1 04       	cpc	r13, r1
     400:	e1 04       	cpc	r14, r1
     402:	f1 04       	cpc	r15, r1
     404:	e9 f0       	breq	.+58     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     406:	61 10       	cpse	r6, r1
     408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	ba 01       	movw	r22, r20
     410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	71 10       	cpse	r7, r1
     41c:	74 60       	ori	r23, 0x04	; 4
     41e:	48 29       	or	r20, r8
     420:	59 29       	or	r21, r9
     422:	6a 29       	or	r22, r10
     424:	7b 29       	or	r23, r11
     426:	97 01       	movw	r18, r14
     428:	86 01       	movw	r16, r12
     42a:	ce 01       	movw	r24, r28
     42c:	04 96       	adiw	r24, 0x04	; 4
     42e:	0e 94 9d 11 	call	0x233a	; 0x233a <vTaskPlaceOnUnorderedEventList>
     432:	21 2c       	mov	r2, r1
     434:	31 2c       	mov	r3, r1
     436:	21 01       	movw	r4, r2
     438:	03 c0       	rjmp	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43a:	c1 2c       	mov	r12, r1
     43c:	d1 2c       	mov	r13, r1
     43e:	76 01       	movw	r14, r12
     440:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
     444:	cd 28       	or	r12, r13
     446:	ce 28       	or	r12, r14
     448:	cf 28       	or	r12, r15
     44a:	59 f1       	breq	.+86     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     44c:	81 11       	cpse	r24, r1
     44e:	01 c0       	rjmp	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	f2 d2       	rcall	.+1508   	; 0xa36 <vPortYield>
     452:	0e 94 71 14 	call	0x28e2	; 0x28e2 <uxTaskResetEventItemValue>
     456:	6b 01       	movw	r12, r22
     458:	7c 01       	movw	r14, r24
     45a:	91 fd       	sbrc	r25, 1
     45c:	1f c0       	rjmp	.+62     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	0f 92       	push	r0
     464:	c8 80       	ld	r12, Y
     466:	d9 80       	ldd	r13, Y+1	; 0x01
     468:	ea 80       	ldd	r14, Y+2	; 0x02
     46a:	fb 80       	ldd	r15, Y+3	; 0x03
     46c:	07 2d       	mov	r16, r7
     46e:	a5 01       	movw	r20, r10
     470:	94 01       	movw	r18, r8
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	56 df       	rcall	.-340    	; 0x324 <prvTestWaitCondition>
     478:	88 23       	and	r24, r24
     47a:	71 f0       	breq	.+28     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     47c:	66 20       	and	r6, r6
     47e:	61 f0       	breq	.+24     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     480:	80 94       	com	r8
     482:	90 94       	com	r9
     484:	a0 94       	com	r10
     486:	b0 94       	com	r11
     488:	8c 20       	and	r8, r12
     48a:	9d 20       	and	r9, r13
     48c:	ae 20       	and	r10, r14
     48e:	bf 20       	and	r11, r15
     490:	88 82       	st	Y, r8
     492:	99 82       	std	Y+1, r9	; 0x01
     494:	aa 82       	std	Y+2, r10	; 0x02
     496:	bb 82       	std	Y+3, r11	; 0x03
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	16 01       	movw	r2, r12
     49e:	27 01       	movw	r4, r14
     4a0:	55 24       	eor	r5, r5
     4a2:	c2 01       	movw	r24, r4
     4a4:	b1 01       	movw	r22, r2
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	3f 90       	pop	r3
     4c8:	2f 90       	pop	r2
     4ca:	08 95       	ret

000004cc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     4cc:	4f 92       	push	r4
     4ce:	5f 92       	push	r5
     4d0:	6f 92       	push	r6
     4d2:	7f 92       	push	r7
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
     4ea:	6a 01       	movw	r12, r20
     4ec:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4ee:	8c 01       	movw	r16, r24
     4f0:	09 5f       	subi	r16, 0xF9	; 249
     4f2:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     4f4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     4f8:	eb 85       	ldd	r30, Y+11	; 0x0b
     4fa:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     4fc:	88 81       	ld	r24, Y
     4fe:	99 81       	ldd	r25, Y+1	; 0x01
     500:	aa 81       	ldd	r26, Y+2	; 0x02
     502:	bb 81       	ldd	r27, Y+3	; 0x03
     504:	c8 2a       	or	r12, r24
     506:	d9 2a       	or	r13, r25
     508:	ea 2a       	or	r14, r26
     50a:	fb 2a       	or	r15, r27
     50c:	c8 82       	st	Y, r12
     50e:	d9 82       	std	Y+1, r13	; 0x01
     510:	ea 82       	std	Y+2, r14	; 0x02
     512:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     514:	c1 2c       	mov	r12, r1
     516:	d1 2c       	mov	r13, r1
     518:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     51a:	3d c0       	rjmp	.+122    	; 0x596 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     51c:	a4 80       	ldd	r10, Z+4	; 0x04
     51e:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     520:	80 81       	ld	r24, Z
     522:	91 81       	ldd	r25, Z+1	; 0x01
     524:	a2 81       	ldd	r26, Z+2	; 0x02
     526:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     528:	ac 01       	movw	r20, r24
     52a:	bd 01       	movw	r22, r26
     52c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     52e:	b2 fd       	sbrc	r27, 2
     530:	0e c0       	rjmp	.+28     	; 0x54e <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     532:	48 80       	ld	r4, Y
     534:	59 80       	ldd	r5, Y+1	; 0x01
     536:	6a 80       	ldd	r6, Y+2	; 0x02
     538:	7b 80       	ldd	r7, Y+3	; 0x03
     53a:	44 22       	and	r4, r20
     53c:	55 22       	and	r5, r21
     53e:	66 22       	and	r6, r22
     540:	77 22       	and	r7, r23
     542:	45 28       	or	r4, r5
     544:	46 28       	or	r4, r6
     546:	47 28       	or	r4, r7
     548:	89 f4       	brne	.+34     	; 0x56c <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	12 c0       	rjmp	.+36     	; 0x572 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     54e:	48 80       	ld	r4, Y
     550:	59 80       	ldd	r5, Y+1	; 0x01
     552:	6a 80       	ldd	r6, Y+2	; 0x02
     554:	7b 80       	ldd	r7, Y+3	; 0x03
     556:	44 22       	and	r4, r20
     558:	55 22       	and	r5, r21
     55a:	66 22       	and	r6, r22
     55c:	77 22       	and	r7, r23
     55e:	44 15       	cp	r20, r4
     560:	55 05       	cpc	r21, r5
     562:	66 05       	cpc	r22, r6
     564:	77 05       	cpc	r23, r7
     566:	21 f0       	breq	.+8      	; 0x570 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	03 c0       	rjmp	.+6      	; 0x572 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     56c:	21 e0       	ldi	r18, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     570:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     572:	22 23       	and	r18, r18
     574:	71 f0       	breq	.+28     	; 0x592 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     576:	b0 ff       	sbrs	r27, 0
     578:	04 c0       	rjmp	.+8      	; 0x582 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     57a:	c4 2a       	or	r12, r20
     57c:	d5 2a       	or	r13, r21
     57e:	e6 2a       	or	r14, r22
     580:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     582:	48 81       	ld	r20, Y
     584:	59 81       	ldd	r21, Y+1	; 0x01
     586:	6a 81       	ldd	r22, Y+2	; 0x02
     588:	7b 81       	ldd	r23, Y+3	; 0x03
     58a:	72 60       	ori	r23, 0x02	; 2
     58c:	cf 01       	movw	r24, r30
     58e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     592:	ea 2d       	mov	r30, r10
     594:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     596:	e0 17       	cp	r30, r16
     598:	f1 07       	cpc	r31, r17
     59a:	09 f0       	breq	.+2      	; 0x59e <xEventGroupSetBits+0xd2>
     59c:	bf cf       	rjmp	.-130    	; 0x51c <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     59e:	c0 94       	com	r12
     5a0:	d0 94       	com	r13
     5a2:	e0 94       	com	r14
     5a4:	f0 94       	com	r15
     5a6:	88 81       	ld	r24, Y
     5a8:	99 81       	ldd	r25, Y+1	; 0x01
     5aa:	aa 81       	ldd	r26, Y+2	; 0x02
     5ac:	bb 81       	ldd	r27, Y+3	; 0x03
     5ae:	c8 22       	and	r12, r24
     5b0:	d9 22       	and	r13, r25
     5b2:	ea 22       	and	r14, r26
     5b4:	fb 22       	and	r15, r27
     5b6:	c8 82       	st	Y, r12
     5b8:	d9 82       	std	Y+1, r13	; 0x01
     5ba:	ea 82       	std	Y+2, r14	; 0x02
     5bc:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     5be:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     5c2:	68 81       	ld	r22, Y
     5c4:	79 81       	ldd	r23, Y+1	; 0x01
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	9b 81       	ldd	r25, Y+3	; 0x03
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	7f 90       	pop	r7
     5e0:	6f 90       	pop	r6
     5e2:	5f 90       	pop	r5
     5e4:	4f 90       	pop	r4
     5e6:	08 95       	ret

000005e8 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5e8:	ea ee       	ldi	r30, 0xEA	; 234
     5ea:	f7 e0       	ldi	r31, 0x07	; 7
     5ec:	ae ee       	ldi	r26, 0xEE	; 238
     5ee:	b7 e0       	ldi	r27, 0x07	; 7
     5f0:	b1 83       	std	Z+1, r27	; 0x01
     5f2:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     5f4:	13 82       	std	Z+3, r1	; 0x03
     5f6:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     5f8:	e6 e9       	ldi	r30, 0x96	; 150
     5fa:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     5fc:	f0 93 e9 07 	sts	0x07E9, r31	; 0x8007e9 <pxEnd+0x1>
     600:	e0 93 e8 07 	sts	0x07E8, r30	; 0x8007e8 <pxEnd>
    pxEnd->xBlockSize = 0;
     604:	13 82       	std	Z+3, r1	; 0x03
     606:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     608:	11 82       	std	Z+1, r1	; 0x01
     60a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     60c:	88 ea       	ldi	r24, 0xA8	; 168
     60e:	9d e0       	ldi	r25, 0x0D	; 13
     610:	13 96       	adiw	r26, 0x03	; 3
     612:	9c 93       	st	X, r25
     614:	8e 93       	st	-X, r24
     616:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     618:	ed 93       	st	X+, r30
     61a:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     61c:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <xMinimumEverFreeBytesRemaining+0x1>
     620:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     624:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xFreeBytesRemaining+0x1>
     628:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e8       	ldi	r25, 0x80	; 128
     630:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <__data_end+0x1>
     634:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <__data_end>
     638:	08 95       	ret

0000063a <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     640:	aa ee       	ldi	r26, 0xEA	; 234
     642:	b7 e0       	ldi	r27, 0x07	; 7
     644:	01 c0       	rjmp	.+2      	; 0x648 <prvInsertBlockIntoFreeList+0xe>
     646:	df 01       	movw	r26, r30
     648:	ed 91       	ld	r30, X+
     64a:	fc 91       	ld	r31, X
     64c:	11 97       	sbiw	r26, 0x01	; 1
     64e:	ec 17       	cp	r30, r28
     650:	fd 07       	cpc	r31, r29
     652:	c8 f3       	brcs	.-14     	; 0x646 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     654:	12 96       	adiw	r26, 0x02	; 2
     656:	8d 91       	ld	r24, X+
     658:	9c 91       	ld	r25, X
     65a:	13 97       	sbiw	r26, 0x03	; 3
     65c:	9d 01       	movw	r18, r26
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	c2 17       	cp	r28, r18
     664:	d3 07       	cpc	r29, r19
     666:	49 f4       	brne	.+18     	; 0x67a <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     668:	2a 81       	ldd	r18, Y+2	; 0x02
     66a:	3b 81       	ldd	r19, Y+3	; 0x03
     66c:	82 0f       	add	r24, r18
     66e:	93 1f       	adc	r25, r19
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	9c 93       	st	X, r25
     674:	8e 93       	st	-X, r24
     676:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     678:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	9b 81       	ldd	r25, Y+3	; 0x03
     67e:	9e 01       	movw	r18, r28
     680:	28 0f       	add	r18, r24
     682:	39 1f       	adc	r19, r25
     684:	e2 17       	cp	r30, r18
     686:	f3 07       	cpc	r31, r19
     688:	c1 f4       	brne	.+48     	; 0x6ba <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     68a:	20 91 e8 07 	lds	r18, 0x07E8	; 0x8007e8 <pxEnd>
     68e:	30 91 e9 07 	lds	r19, 0x07E9	; 0x8007e9 <pxEnd+0x1>
     692:	e2 17       	cp	r30, r18
     694:	f3 07       	cpc	r31, r19
     696:	71 f0       	breq	.+28     	; 0x6b4 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     698:	22 81       	ldd	r18, Z+2	; 0x02
     69a:	33 81       	ldd	r19, Z+3	; 0x03
     69c:	82 0f       	add	r24, r18
     69e:	93 1f       	adc	r25, r19
     6a0:	9b 83       	std	Y+3, r25	; 0x03
     6a2:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6a4:	ed 91       	ld	r30, X+
     6a6:	fc 91       	ld	r31, X
     6a8:	11 97       	sbiw	r26, 0x01	; 1
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
     6ae:	99 83       	std	Y+1, r25	; 0x01
     6b0:	88 83       	st	Y, r24
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6b4:	39 83       	std	Y+1, r19	; 0x01
     6b6:	28 83       	st	Y, r18
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6ba:	f9 83       	std	Y+1, r31	; 0x01
     6bc:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6be:	ca 17       	cp	r28, r26
     6c0:	db 07       	cpc	r29, r27
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     6c4:	cd 93       	st	X+, r28
     6c6:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     6dc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     6e0:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxEnd>
     6e4:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxEnd+0x1>
     6e8:	89 2b       	or	r24, r25
     6ea:	09 f4       	brne	.+2      	; 0x6ee <pvPortMalloc+0x20>
        {
            prvHeapInit();
     6ec:	7d df       	rcall	.-262    	; 0x5e8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     6ee:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <__data_end>
     6f2:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <__data_end+0x1>
     6f6:	80 23       	and	r24, r16
     6f8:	91 23       	and	r25, r17
     6fa:	89 2b       	or	r24, r25
     6fc:	09 f0       	breq	.+2      	; 0x700 <pvPortMalloc+0x32>
     6fe:	76 c0       	rjmp	.+236    	; 0x7ec <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     700:	01 15       	cp	r16, r1
     702:	11 05       	cpc	r17, r1
     704:	49 f0       	breq	.+18     	; 0x718 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     706:	c8 01       	movw	r24, r16
     708:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     70a:	08 17       	cp	r16, r24
     70c:	19 07       	cpc	r17, r25
     70e:	18 f0       	brcs	.+6      	; 0x716 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     710:	00 e0       	ldi	r16, 0x00	; 0
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	01 c0       	rjmp	.+2      	; 0x718 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     716:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     718:	01 15       	cp	r16, r1
     71a:	11 05       	cpc	r17, r1
     71c:	09 f4       	brne	.+2      	; 0x720 <pvPortMalloc+0x52>
     71e:	69 c0       	rjmp	.+210    	; 0x7f2 <pvPortMalloc+0x124>
     720:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <xFreeBytesRemaining>
     724:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <xFreeBytesRemaining+0x1>
     728:	80 17       	cp	r24, r16
     72a:	91 07       	cpc	r25, r17
     72c:	08 f4       	brcc	.+2      	; 0x730 <pvPortMalloc+0x62>
     72e:	64 c0       	rjmp	.+200    	; 0x7f8 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     730:	c0 91 ea 07 	lds	r28, 0x07EA	; 0x8007ea <xStart>
     734:	d0 91 eb 07 	lds	r29, 0x07EB	; 0x8007eb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     738:	ea ee       	ldi	r30, 0xEA	; 234
     73a:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     73c:	02 c0       	rjmp	.+4      	; 0x742 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     73e:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     740:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	80 17       	cp	r24, r16
     748:	91 07       	cpc	r25, r17
     74a:	20 f4       	brcc	.+8      	; 0x754 <pvPortMalloc+0x86>
     74c:	88 81       	ld	r24, Y
     74e:	99 81       	ldd	r25, Y+1	; 0x01
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	a9 f7       	brne	.-22     	; 0x73e <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     754:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxEnd>
     758:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxEnd+0x1>
     75c:	c8 17       	cp	r28, r24
     75e:	d9 07       	cpc	r29, r25
     760:	09 f4       	brne	.+2      	; 0x764 <pvPortMalloc+0x96>
     762:	4d c0       	rjmp	.+154    	; 0x7fe <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     764:	e0 80       	ld	r14, Z
     766:	f1 80       	ldd	r15, Z+1	; 0x01
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	e8 0e       	add	r14, r24
     76c:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     76e:	88 81       	ld	r24, Y
     770:	99 81       	ldd	r25, Y+1	; 0x01
     772:	91 83       	std	Z+1, r25	; 0x01
     774:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     776:	2a 81       	ldd	r18, Y+2	; 0x02
     778:	3b 81       	ldd	r19, Y+3	; 0x03
     77a:	20 1b       	sub	r18, r16
     77c:	31 0b       	sbc	r19, r17
     77e:	29 30       	cpi	r18, 0x09	; 9
     780:	31 05       	cpc	r19, r1
     782:	48 f0       	brcs	.+18     	; 0x796 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     784:	ce 01       	movw	r24, r28
     786:	80 0f       	add	r24, r16
     788:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     78a:	fc 01       	movw	r30, r24
     78c:	33 83       	std	Z+3, r19	; 0x03
     78e:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     790:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     792:	0a 83       	std	Y+2, r16	; 0x02
     794:	52 df       	rcall	.-348    	; 0x63a <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     796:	2a 81       	ldd	r18, Y+2	; 0x02
     798:	3b 81       	ldd	r19, Y+3	; 0x03
     79a:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <xFreeBytesRemaining>
     79e:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <xFreeBytesRemaining+0x1>
     7a2:	82 1b       	sub	r24, r18
     7a4:	93 0b       	sbc	r25, r19
     7a6:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xFreeBytesRemaining+0x1>
     7aa:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     7ae:	40 91 e4 07 	lds	r20, 0x07E4	; 0x8007e4 <xMinimumEverFreeBytesRemaining>
     7b2:	50 91 e5 07 	lds	r21, 0x07E5	; 0x8007e5 <xMinimumEverFreeBytesRemaining+0x1>
     7b6:	84 17       	cp	r24, r20
     7b8:	95 07       	cpc	r25, r21
     7ba:	20 f4       	brcc	.+8      	; 0x7c4 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     7bc:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <xMinimumEverFreeBytesRemaining+0x1>
     7c0:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     7c4:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <__data_end>
     7c8:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <__data_end+0x1>
     7cc:	28 2b       	or	r18, r24
     7ce:	39 2b       	or	r19, r25
     7d0:	3b 83       	std	Y+3, r19	; 0x03
     7d2:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     7d4:	19 82       	std	Y+1, r1	; 0x01
     7d6:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     7d8:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <xNumberOfSuccessfulAllocations>
     7dc:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <xNumberOfSuccessfulAllocations+0x1>
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <xNumberOfSuccessfulAllocations+0x1>
     7e6:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <xNumberOfSuccessfulAllocations>
     7ea:	0b c0       	rjmp	.+22     	; 0x802 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     7ec:	e1 2c       	mov	r14, r1
     7ee:	f1 2c       	mov	r15, r1
     7f0:	08 c0       	rjmp	.+16     	; 0x802 <pvPortMalloc+0x134>
     7f2:	e1 2c       	mov	r14, r1
     7f4:	f1 2c       	mov	r15, r1
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <pvPortMalloc+0x134>
     7f8:	e1 2c       	mov	r14, r1
     7fa:	f1 2c       	mov	r15, r1
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <pvPortMalloc+0x134>
     7fe:	e1 2c       	mov	r14, r1
     800:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     802:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     806:	e1 14       	cp	r14, r1
     808:	f1 04       	cpc	r15, r1
     80a:	11 f4       	brne	.+4      	; 0x810 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     80c:	0e 94 81 1a 	call	0x3502	; 0x3502 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     810:	c7 01       	movw	r24, r14
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	08 95       	ret

00000820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	91 f1       	breq	.+100    	; 0x890 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     82c:	ec 01       	movw	r28, r24
     82e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     830:	4a 81       	ldd	r20, Y+2	; 0x02
     832:	5b 81       	ldd	r21, Y+3	; 0x03
     834:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <__data_end>
     838:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <__data_end+0x1>
     83c:	ba 01       	movw	r22, r20
     83e:	62 23       	and	r22, r18
     840:	73 23       	and	r23, r19
     842:	67 2b       	or	r22, r23
     844:	29 f1       	breq	.+74     	; 0x890 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     846:	68 81       	ld	r22, Y
     848:	79 81       	ldd	r23, Y+1	; 0x01
     84a:	67 2b       	or	r22, r23
     84c:	09 f5       	brne	.+66     	; 0x890 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     84e:	20 95       	com	r18
     850:	30 95       	com	r19
     852:	24 23       	and	r18, r20
     854:	35 23       	and	r19, r21
     856:	3b 83       	std	Y+3, r19	; 0x03
     858:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     85a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	20 91 e6 07 	lds	r18, 0x07E6	; 0x8007e6 <xFreeBytesRemaining>
     866:	30 91 e7 07 	lds	r19, 0x07E7	; 0x8007e7 <xFreeBytesRemaining+0x1>
     86a:	82 0f       	add	r24, r18
     86c:	93 1f       	adc	r25, r19
     86e:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xFreeBytesRemaining+0x1>
     872:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     876:	ce 01       	movw	r24, r28
     878:	e0 de       	rcall	.-576    	; 0x63a <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     87a:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <xNumberOfSuccessfulFrees>
     87e:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <xNumberOfSuccessfulFrees+0x1>
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <xNumberOfSuccessfulFrees+0x1>
     888:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     88c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     89a:	fc 01       	movw	r30, r24
     89c:	03 96       	adiw	r24, 0x03	; 3
     89e:	92 83       	std	Z+2, r25	; 0x02
     8a0:	81 83       	std	Z+1, r24	; 0x01
     8a2:	4f ef       	ldi	r20, 0xFF	; 255
     8a4:	5f ef       	ldi	r21, 0xFF	; 255
     8a6:	ba 01       	movw	r22, r20
     8a8:	43 83       	std	Z+3, r20	; 0x03
     8aa:	54 83       	std	Z+4, r21	; 0x04
     8ac:	65 83       	std	Z+5, r22	; 0x05
     8ae:	76 83       	std	Z+6, r23	; 0x06
     8b0:	90 87       	std	Z+8, r25	; 0x08
     8b2:	87 83       	std	Z+7, r24	; 0x07
     8b4:	92 87       	std	Z+10, r25	; 0x0a
     8b6:	81 87       	std	Z+9, r24	; 0x09
     8b8:	10 82       	st	Z, r1
     8ba:	08 95       	ret

000008bc <vListInitialiseItem>:
     8bc:	fc 01       	movw	r30, r24
     8be:	13 86       	std	Z+11, r1	; 0x0b
     8c0:	12 86       	std	Z+10, r1	; 0x0a
     8c2:	08 95       	ret

000008c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8ce:	08 81       	ld	r16, Y
     8d0:	19 81       	ldd	r17, Y+1	; 0x01
     8d2:	2a 81       	ldd	r18, Y+2	; 0x02
     8d4:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     8d6:	0f 3f       	cpi	r16, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	14 07       	cpc	r17, r20
     8dc:	24 07       	cpc	r18, r20
     8de:	34 07       	cpc	r19, r20
     8e0:	21 f4       	brne	.+8      	; 0x8ea <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     8e2:	fc 01       	movw	r30, r24
     8e4:	a1 85       	ldd	r26, Z+9	; 0x09
     8e6:	b2 85       	ldd	r27, Z+10	; 0x0a
     8e8:	11 c0       	rjmp	.+34     	; 0x90c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     8ea:	dc 01       	movw	r26, r24
     8ec:	13 96       	adiw	r26, 0x03	; 3
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <vListInsert+0x2e>
     8f0:	df 01       	movw	r26, r30
     8f2:	14 96       	adiw	r26, 0x04	; 4
     8f4:	ed 91       	ld	r30, X+
     8f6:	fc 91       	ld	r31, X
     8f8:	15 97       	sbiw	r26, 0x05	; 5
     8fa:	40 81       	ld	r20, Z
     8fc:	51 81       	ldd	r21, Z+1	; 0x01
     8fe:	62 81       	ldd	r22, Z+2	; 0x02
     900:	73 81       	ldd	r23, Z+3	; 0x03
     902:	04 17       	cp	r16, r20
     904:	15 07       	cpc	r17, r21
     906:	26 07       	cpc	r18, r22
     908:	37 07       	cpc	r19, r23
     90a:	90 f7       	brcc	.-28     	; 0x8f0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     90c:	14 96       	adiw	r26, 0x04	; 4
     90e:	ed 91       	ld	r30, X+
     910:	fc 91       	ld	r31, X
     912:	15 97       	sbiw	r26, 0x05	; 5
     914:	fd 83       	std	Y+5, r31	; 0x05
     916:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     918:	d7 83       	std	Z+7, r29	; 0x07
     91a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     91c:	bf 83       	std	Y+7, r27	; 0x07
     91e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     920:	15 96       	adiw	r26, 0x05	; 5
     922:	dc 93       	st	X, r29
     924:	ce 93       	st	-X, r28
     926:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     928:	9b 87       	std	Y+11, r25	; 0x0b
     92a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     92c:	fc 01       	movw	r30, r24
     92e:	20 81       	ld	r18, Z
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	20 83       	st	Z, r18
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     944:	a2 85       	ldd	r26, Z+10	; 0x0a
     946:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     948:	c4 81       	ldd	r28, Z+4	; 0x04
     94a:	d5 81       	ldd	r29, Z+5	; 0x05
     94c:	86 81       	ldd	r24, Z+6	; 0x06
     94e:	97 81       	ldd	r25, Z+7	; 0x07
     950:	9f 83       	std	Y+7, r25	; 0x07
     952:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     954:	c6 81       	ldd	r28, Z+6	; 0x06
     956:	d7 81       	ldd	r29, Z+7	; 0x07
     958:	84 81       	ldd	r24, Z+4	; 0x04
     95a:	95 81       	ldd	r25, Z+5	; 0x05
     95c:	9d 83       	std	Y+5, r25	; 0x05
     95e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     960:	11 96       	adiw	r26, 0x01	; 1
     962:	8d 91       	ld	r24, X+
     964:	9c 91       	ld	r25, X
     966:	12 97       	sbiw	r26, 0x02	; 2
     968:	e8 17       	cp	r30, r24
     96a:	f9 07       	cpc	r31, r25
     96c:	31 f4       	brne	.+12     	; 0x97a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     96e:	86 81       	ldd	r24, Z+6	; 0x06
     970:	97 81       	ldd	r25, Z+7	; 0x07
     972:	12 96       	adiw	r26, 0x02	; 2
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
     978:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     97a:	13 86       	std	Z+11, r1	; 0x0b
     97c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     97e:	8c 91       	ld	r24, X
     980:	81 50       	subi	r24, 0x01	; 1
     982:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     984:	8c 91       	ld	r24, X
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     98c:	a8 95       	wdr
     98e:	90 ec       	ldi	r25, 0xC0	; 192
     990:	88 e1       	ldi	r24, 0x18	; 24
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	a8 95       	wdr
     998:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9a2:	08 95       	ret

000009a4 <pxPortInitialiseStack>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	60 83       	st	Z, r22
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	70 83       	st	Z, r23
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	10 82       	st	Z, r1
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	10 82       	st	Z, r1
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	20 e8       	ldi	r18, 0x80	; 128
     9b8:	20 83       	st	Z, r18
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	10 82       	st	Z, r1
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	10 82       	st	Z, r1
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	10 82       	st	Z, r1
     9c6:	77 97       	sbiw	r30, 0x17	; 23
     9c8:	40 83       	st	Z, r20
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	50 83       	st	Z, r21
     9ce:	86 97       	sbiw	r24, 0x26	; 38
     9d0:	08 95       	ret

000009d2 <xPortStartScheduler>:
     9d2:	dc df       	rcall	.-72     	; 0x98c <prvSetupTimerInterrupt>
     9d4:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
     9d8:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
     9dc:	cd 91       	ld	r28, X+
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	dd 91       	ld	r29, X+
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	6f 90       	pop	r6
     a18:	5f 90       	pop	r5
     a1a:	4f 90       	pop	r4
     a1c:	3f 90       	pop	r3
     a1e:	2f 90       	pop	r2
     a20:	1f 90       	pop	r1
     a22:	0f 90       	pop	r0
     a24:	0c be       	out	0x3c, r0	; 60
     a26:	0f 90       	pop	r0
     a28:	0b be       	out	0x3b, r0	; 59
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	08 95       	ret
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	08 95       	ret

00000a36 <vPortYield>:
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	0f 92       	push	r0
     a3e:	0b b6       	in	r0, 0x3b	; 59
     a40:	0f 92       	push	r0
     a42:	0c b6       	in	r0, 0x3c	; 60
     a44:	0f 92       	push	r0
     a46:	1f 92       	push	r1
     a48:	11 24       	eor	r1, r1
     a4a:	2f 92       	push	r2
     a4c:	3f 92       	push	r3
     a4e:	4f 92       	push	r4
     a50:	5f 92       	push	r5
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
     a8a:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
     a8e:	0d b6       	in	r0, 0x3d	; 61
     a90:	0d 92       	st	X+, r0
     a92:	0e b6       	in	r0, 0x3e	; 62
     a94:	0d 92       	st	X+, r0
     a96:	0e 94 21 11 	call	0x2242	; 0x2242 <vTaskSwitchContext>
     a9a:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
     a9e:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
     aa2:	cd 91       	ld	r28, X+
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	dd 91       	ld	r29, X+
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	bf 90       	pop	r11
     ad4:	af 90       	pop	r10
     ad6:	9f 90       	pop	r9
     ad8:	8f 90       	pop	r8
     ada:	7f 90       	pop	r7
     adc:	6f 90       	pop	r6
     ade:	5f 90       	pop	r5
     ae0:	4f 90       	pop	r4
     ae2:	3f 90       	pop	r3
     ae4:	2f 90       	pop	r2
     ae6:	1f 90       	pop	r1
     ae8:	0f 90       	pop	r0
     aea:	0c be       	out	0x3c, r0	; 60
     aec:	0f 90       	pop	r0
     aee:	0b be       	out	0x3b, r0	; 59
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	08 95       	ret

00000af8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	0f 92       	push	r0
     b00:	0b b6       	in	r0, 0x3b	; 59
     b02:	0f 92       	push	r0
     b04:	0c b6       	in	r0, 0x3c	; 60
     b06:	0f 92       	push	r0
     b08:	1f 92       	push	r1
     b0a:	11 24       	eor	r1, r1
     b0c:	2f 92       	push	r2
     b0e:	3f 92       	push	r3
     b10:	4f 92       	push	r4
     b12:	5f 92       	push	r5
     b14:	6f 92       	push	r6
     b16:	7f 92       	push	r7
     b18:	8f 92       	push	r8
     b1a:	9f 92       	push	r9
     b1c:	af 92       	push	r10
     b1e:	bf 92       	push	r11
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	2f 93       	push	r18
     b2e:	3f 93       	push	r19
     b30:	4f 93       	push	r20
     b32:	5f 93       	push	r21
     b34:	6f 93       	push	r22
     b36:	7f 93       	push	r23
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	af 93       	push	r26
     b3e:	bf 93       	push	r27
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
     b48:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
     b4c:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
     b50:	0d b6       	in	r0, 0x3d	; 61
     b52:	0d 92       	st	X+, r0
     b54:	0e b6       	in	r0, 0x3e	; 62
     b56:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b58:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     b5a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <xTaskIncrementTick>
     b5e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b60:	0e 94 21 11 	call	0x2242	; 0x2242 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     b64:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
     b68:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
     b6c:	cd 91       	ld	r28, X+
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	dd 91       	ld	r29, X+
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	bf 91       	pop	r27
     b7e:	af 91       	pop	r26
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	7f 91       	pop	r23
     b86:	6f 91       	pop	r22
     b88:	5f 91       	pop	r21
     b8a:	4f 91       	pop	r20
     b8c:	3f 91       	pop	r19
     b8e:	2f 91       	pop	r18
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	7f 90       	pop	r7
     ba6:	6f 90       	pop	r6
     ba8:	5f 90       	pop	r5
     baa:	4f 90       	pop	r4
     bac:	3f 90       	pop	r3
     bae:	2f 90       	pop	r2
     bb0:	1f 90       	pop	r1
     bb2:	0f 90       	pop	r0
     bb4:	0c be       	out	0x3c, r0	; 60
     bb6:	0f 90       	pop	r0
     bb8:	0b be       	out	0x3b, r0	; 59
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     bc0:	08 95       	ret

00000bc2 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     bc2:	9a df       	rcall	.-204    	; 0xaf8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     bc4:	18 95       	reti

00000bc6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	0f 92       	push	r0
     bcc:	fc 01       	movw	r30, r24
     bce:	86 8d       	ldd	r24, Z+30	; 0x1e
     bd0:	81 11       	cpse	r24, r1
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <prvIsQueueEmpty+0x12>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <prvIsQueueEmpty+0x14>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	08 95       	ret

00000be0 <prvIsQueueFull>:
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	0f 92       	push	r0
     be6:	fc 01       	movw	r30, r24
     be8:	26 8d       	ldd	r18, Z+30	; 0x1e
     bea:	87 8d       	ldd	r24, Z+31	; 0x1f
     bec:	28 13       	cpse	r18, r24
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <prvIsQueueFull+0x14>
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <prvIsQueueFull+0x16>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	08 95       	ret

00000bfc <prvCopyDataToQueue>:
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	04 2f       	mov	r16, r20
     c08:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c0a:	48 a1       	ldd	r20, Y+32	; 0x20
     c0c:	41 11       	cpse	r20, r1
     c0e:	0c c0       	rjmp	.+24     	; 0xc28 <prvCopyDataToQueue+0x2c>
     c10:	88 81       	ld	r24, Y
     c12:	99 81       	ldd	r25, Y+1	; 0x01
     c14:	89 2b       	or	r24, r25
     c16:	09 f0       	breq	.+2      	; 0xc1a <prvCopyDataToQueue+0x1e>
     c18:	42 c0       	rjmp	.+132    	; 0xc9e <prvCopyDataToQueue+0xa2>
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	0e 94 16 14 	call	0x282c	; 0x282c <xTaskPriorityDisinherit>
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	1c 82       	std	Y+4, r1	; 0x04
     c26:	42 c0       	rjmp	.+132    	; 0xcac <prvCopyDataToQueue+0xb0>
     c28:	01 11       	cpse	r16, r1
     c2a:	17 c0       	rjmp	.+46     	; 0xc5a <prvCopyDataToQueue+0x5e>
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <memcpy>
     c36:	28 a1       	ldd	r18, Y+32	; 0x20
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	82 0f       	add	r24, r18
     c3e:	91 1d       	adc	r25, r1
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
     c44:	2c 81       	ldd	r18, Y+4	; 0x04
     c46:	3d 81       	ldd	r19, Y+5	; 0x05
     c48:	82 17       	cp	r24, r18
     c4a:	93 07       	cpc	r25, r19
     c4c:	50 f1       	brcs	.+84     	; 0xca2 <prvCopyDataToQueue+0xa6>
     c4e:	88 81       	ld	r24, Y
     c50:	99 81       	ldd	r25, Y+1	; 0x01
     c52:	9b 83       	std	Y+3, r25	; 0x03
     c54:	8a 83       	std	Y+2, r24	; 0x02
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	29 c0       	rjmp	.+82     	; 0xcac <prvCopyDataToQueue+0xb0>
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	8e 81       	ldd	r24, Y+6	; 0x06
     c5e:	9f 81       	ldd	r25, Y+7	; 0x07
     c60:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <memcpy>
     c64:	88 a1       	ldd	r24, Y+32	; 0x20
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	91 95       	neg	r25
     c6a:	81 95       	neg	r24
     c6c:	91 09       	sbc	r25, r1
     c6e:	2e 81       	ldd	r18, Y+6	; 0x06
     c70:	3f 81       	ldd	r19, Y+7	; 0x07
     c72:	28 0f       	add	r18, r24
     c74:	39 1f       	adc	r19, r25
     c76:	3f 83       	std	Y+7, r19	; 0x07
     c78:	2e 83       	std	Y+6, r18	; 0x06
     c7a:	48 81       	ld	r20, Y
     c7c:	59 81       	ldd	r21, Y+1	; 0x01
     c7e:	24 17       	cp	r18, r20
     c80:	35 07       	cpc	r19, r21
     c82:	30 f4       	brcc	.+12     	; 0xc90 <prvCopyDataToQueue+0x94>
     c84:	2c 81       	ldd	r18, Y+4	; 0x04
     c86:	3d 81       	ldd	r19, Y+5	; 0x05
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	9f 83       	std	Y+7, r25	; 0x07
     c8e:	8e 83       	std	Y+6, r24	; 0x06
     c90:	02 30       	cpi	r16, 0x02	; 2
     c92:	49 f4       	brne	.+18     	; 0xca6 <prvCopyDataToQueue+0xaa>
     c94:	11 23       	and	r17, r17
     c96:	49 f0       	breq	.+18     	; 0xcaa <prvCopyDataToQueue+0xae>
     c98:	11 50       	subi	r17, 0x01	; 1
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	07 c0       	rjmp	.+14     	; 0xcac <prvCopyDataToQueue+0xb0>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <prvCopyDataToQueue+0xb0>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <prvCopyDataToQueue+0xb0>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <prvCopyDataToQueue+0xb0>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	1f 5f       	subi	r17, 0xFF	; 255
     cae:	1e 8f       	std	Y+30, r17	; 0x1e
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <prvCopyDataFromQueue>:
     cba:	fc 01       	movw	r30, r24
     cbc:	40 a1       	ldd	r20, Z+32	; 0x20
     cbe:	44 23       	and	r20, r20
     cc0:	a9 f0       	breq	.+42     	; 0xcec <prvCopyDataFromQueue+0x32>
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	26 81       	ldd	r18, Z+6	; 0x06
     cc6:	37 81       	ldd	r19, Z+7	; 0x07
     cc8:	24 0f       	add	r18, r20
     cca:	35 1f       	adc	r19, r21
     ccc:	37 83       	std	Z+7, r19	; 0x07
     cce:	26 83       	std	Z+6, r18	; 0x06
     cd0:	84 81       	ldd	r24, Z+4	; 0x04
     cd2:	95 81       	ldd	r25, Z+5	; 0x05
     cd4:	28 17       	cp	r18, r24
     cd6:	39 07       	cpc	r19, r25
     cd8:	20 f0       	brcs	.+8      	; 0xce2 <prvCopyDataFromQueue+0x28>
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	97 83       	std	Z+7, r25	; 0x07
     ce0:	86 83       	std	Z+6, r24	; 0x06
     ce2:	cb 01       	movw	r24, r22
     ce4:	66 81       	ldd	r22, Z+6	; 0x06
     ce6:	77 81       	ldd	r23, Z+7	; 0x07
     ce8:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <memcpy>
     cec:	08 95       	ret

00000cee <prvUnlockQueue>:
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	0f 92       	push	r0
     cfc:	1a a1       	ldd	r17, Y+34	; 0x22
     cfe:	0b c0       	rjmp	.+22     	; 0xd16 <prvUnlockQueue+0x28>
     d00:	8b 89       	ldd	r24, Y+19	; 0x13
     d02:	88 23       	and	r24, r24
     d04:	51 f0       	breq	.+20     	; 0xd1a <prvUnlockQueue+0x2c>
     d06:	ce 01       	movw	r24, r28
     d08:	43 96       	adiw	r24, 0x13	; 19
     d0a:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskRemoveFromEventList>
     d0e:	81 11       	cpse	r24, r1
     d10:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskMissedYield>
     d14:	11 50       	subi	r17, 0x01	; 1
     d16:	11 16       	cp	r1, r17
     d18:	9c f3       	brlt	.-26     	; 0xd00 <prvUnlockQueue+0x12>
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	8a a3       	std	Y+34, r24	; 0x22
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
     d28:	19 a1       	ldd	r17, Y+33	; 0x21
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <prvUnlockQueue+0x54>
     d2c:	88 85       	ldd	r24, Y+8	; 0x08
     d2e:	88 23       	and	r24, r24
     d30:	51 f0       	breq	.+20     	; 0xd46 <prvUnlockQueue+0x58>
     d32:	ce 01       	movw	r24, r28
     d34:	08 96       	adiw	r24, 0x08	; 8
     d36:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskRemoveFromEventList>
     d3a:	81 11       	cpse	r24, r1
     d3c:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskMissedYield>
     d40:	11 50       	subi	r17, 0x01	; 1
     d42:	11 16       	cp	r1, r17
     d44:	9c f3       	brlt	.-26     	; 0xd2c <prvUnlockQueue+0x3e>
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	89 a3       	std	Y+33, r24	; 0x21
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	08 95       	ret

00000d56 <xQueueGenericReset>:
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ec 01       	movw	r28, r24
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	0f 92       	push	r0
     d62:	e8 81       	ld	r30, Y
     d64:	f9 81       	ldd	r31, Y+1	; 0x01
     d66:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d68:	28 a1       	ldd	r18, Y+32	; 0x20
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	82 9f       	mul	r24, r18
     d70:	a0 01       	movw	r20, r0
     d72:	83 9f       	mul	r24, r19
     d74:	50 0d       	add	r21, r0
     d76:	92 9f       	mul	r25, r18
     d78:	50 0d       	add	r21, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	4e 0f       	add	r20, r30
     d7e:	5f 1f       	adc	r21, r31
     d80:	5d 83       	std	Y+5, r21	; 0x05
     d82:	4c 83       	std	Y+4, r20	; 0x04
     d84:	1e 8e       	std	Y+30, r1	; 0x1e
     d86:	fb 83       	std	Y+3, r31	; 0x03
     d88:	ea 83       	std	Y+2, r30	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	28 9f       	mul	r18, r24
     d8e:	a0 01       	movw	r20, r0
     d90:	29 9f       	mul	r18, r25
     d92:	50 0d       	add	r21, r0
     d94:	38 9f       	mul	r19, r24
     d96:	50 0d       	add	r21, r0
     d98:	11 24       	eor	r1, r1
     d9a:	cf 01       	movw	r24, r30
     d9c:	84 0f       	add	r24, r20
     d9e:	95 1f       	adc	r25, r21
     da0:	9f 83       	std	Y+7, r25	; 0x07
     da2:	8e 83       	std	Y+6, r24	; 0x06
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	89 a3       	std	Y+33, r24	; 0x21
     da8:	8a a3       	std	Y+34, r24	; 0x22
     daa:	61 11       	cpse	r22, r1
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <xQueueGenericReset+0x6e>
     dae:	88 85       	ldd	r24, Y+8	; 0x08
     db0:	88 23       	and	r24, r24
     db2:	71 f0       	breq	.+28     	; 0xdd0 <xQueueGenericReset+0x7a>
     db4:	ce 01       	movw	r24, r28
     db6:	08 96       	adiw	r24, 0x08	; 8
     db8:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskRemoveFromEventList>
     dbc:	88 23       	and	r24, r24
     dbe:	41 f0       	breq	.+16     	; 0xdd0 <xQueueGenericReset+0x7a>
     dc0:	3a de       	rcall	.-908    	; 0xa36 <vPortYield>
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <xQueueGenericReset+0x7a>
     dc4:	ce 01       	movw	r24, r28
     dc6:	08 96       	adiw	r24, 0x08	; 8
     dc8:	68 dd       	rcall	.-1328   	; 0x89a <vListInitialise>
     dca:	ce 01       	movw	r24, r28
     dcc:	43 96       	adiw	r24, 0x13	; 19
     dce:	65 dd       	rcall	.-1334   	; 0x89a <vListInitialise>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <prvInitialiseNewQueue>:
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	f8 01       	movw	r30, r16
     de2:	61 11       	cpse	r22, r1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <prvInitialiseNewQueue+0x10>
     de6:	11 83       	std	Z+1, r17	; 0x01
     de8:	00 83       	st	Z, r16
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <prvInitialiseNewQueue+0x14>
     dec:	51 83       	std	Z+1, r21	; 0x01
     dee:	40 83       	st	Z, r20
     df0:	87 8f       	std	Z+31, r24	; 0x1f
     df2:	60 a3       	std	Z+32, r22	; 0x20
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	cf 01       	movw	r24, r30
     df8:	ae df       	rcall	.-164    	; 0xd56 <xQueueGenericReset>
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	08 95       	ret

00000e00 <xQueueGenericCreate>:
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	f8 2e       	mov	r15, r24
     e10:	e6 2e       	mov	r14, r22
     e12:	d4 2e       	mov	r13, r20
     e14:	86 9f       	mul	r24, r22
     e16:	c0 01       	movw	r24, r0
     e18:	11 24       	eor	r1, r1
     e1a:	83 96       	adiw	r24, 0x23	; 35
     e1c:	58 dc       	rcall	.-1872   	; 0x6ce <pvPortMalloc>
     e1e:	ec 01       	movw	r28, r24
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	41 f0       	breq	.+16     	; 0xe34 <xQueueGenericCreate+0x34>
     e24:	8c 01       	movw	r16, r24
     e26:	2d 2d       	mov	r18, r13
     e28:	ac 01       	movw	r20, r24
     e2a:	4d 5d       	subi	r20, 0xDD	; 221
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255
     e2e:	6e 2d       	mov	r22, r14
     e30:	8f 2d       	mov	r24, r15
     e32:	d4 df       	rcall	.-88     	; 0xddc <prvInitialiseNewQueue>
     e34:	ce 01       	movw	r24, r28
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	08 95       	ret

00000e46 <xQueueGenericSend>:
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	29 97       	sbiw	r28, 0x09	; 9
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	7c 01       	movw	r14, r24
     e68:	6b 01       	movw	r12, r22
     e6a:	2e 83       	std	Y+6, r18	; 0x06
     e6c:	3f 83       	std	Y+7, r19	; 0x07
     e6e:	48 87       	std	Y+8, r20	; 0x08
     e70:	59 87       	std	Y+9, r21	; 0x09
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	0f 92       	push	r0
     e7a:	f7 01       	movw	r30, r14
     e7c:	96 8d       	ldd	r25, Z+30	; 0x1e
     e7e:	87 8d       	ldd	r24, Z+31	; 0x1f
     e80:	98 17       	cp	r25, r24
     e82:	10 f0       	brcs	.+4      	; 0xe88 <xQueueGenericSend+0x42>
     e84:	02 30       	cpi	r16, 0x02	; 2
     e86:	b1 f4       	brne	.+44     	; 0xeb4 <xQueueGenericSend+0x6e>
     e88:	40 2f       	mov	r20, r16
     e8a:	b6 01       	movw	r22, r12
     e8c:	c7 01       	movw	r24, r14
     e8e:	b6 de       	rcall	.-660    	; 0xbfc <prvCopyDataToQueue>
     e90:	f7 01       	movw	r30, r14
     e92:	93 89       	ldd	r25, Z+19	; 0x13
     e94:	99 23       	and	r25, r25
     e96:	41 f0       	breq	.+16     	; 0xea8 <xQueueGenericSend+0x62>
     e98:	c7 01       	movw	r24, r14
     e9a:	43 96       	adiw	r24, 0x13	; 19
     e9c:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskRemoveFromEventList>
     ea0:	88 23       	and	r24, r24
     ea2:	21 f0       	breq	.+8      	; 0xeac <xQueueGenericSend+0x66>
     ea4:	c8 dd       	rcall	.-1136   	; 0xa36 <vPortYield>
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <xQueueGenericSend+0x66>
     ea8:	81 11       	cpse	r24, r1
     eaa:	c5 dd       	rcall	.-1142   	; 0xa36 <vPortYield>
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	4c c0       	rjmp	.+152    	; 0xf4c <xQueueGenericSend+0x106>
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	a8 85       	ldd	r26, Y+8	; 0x08
     eba:	b9 85       	ldd	r27, Y+9	; 0x09
     ebc:	89 2b       	or	r24, r25
     ebe:	8a 2b       	or	r24, r26
     ec0:	8b 2b       	or	r24, r27
     ec2:	21 f4       	brne	.+8      	; 0xecc <xQueueGenericSend+0x86>
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	40 c0       	rjmp	.+128    	; 0xf4c <xQueueGenericSend+0x106>
     ecc:	11 11       	cpse	r17, r1
     ece:	05 c0       	rjmp	.+10     	; 0xeda <xQueueGenericSend+0x94>
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	0e 94 88 13 	call	0x2710	; 0x2710 <vTaskInternalSetTimeOutState>
     ed8:	11 e0       	ldi	r17, 0x01	; 1
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	15 d7       	rcall	.+3626   	; 0x1d0a <vTaskSuspendAll>
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	0f 92       	push	r0
     ee6:	f7 01       	movw	r30, r14
     ee8:	81 a1       	ldd	r24, Z+33	; 0x21
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	09 f4       	brne	.+2      	; 0xef0 <xQueueGenericSend+0xaa>
     eee:	11 a2       	std	Z+33, r1	; 0x21
     ef0:	f7 01       	movw	r30, r14
     ef2:	82 a1       	ldd	r24, Z+34	; 0x22
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueGenericSend+0xb4>
     ef8:	12 a2       	std	Z+34, r1	; 0x22
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	be 01       	movw	r22, r28
     f00:	6a 5f       	subi	r22, 0xFA	; 250
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCheckForTimeOut>
     f0c:	81 11       	cpse	r24, r1
     f0e:	19 c0       	rjmp	.+50     	; 0xf42 <xQueueGenericSend+0xfc>
     f10:	c7 01       	movw	r24, r14
     f12:	66 de       	rcall	.-820    	; 0xbe0 <prvIsQueueFull>
     f14:	88 23       	and	r24, r24
     f16:	81 f0       	breq	.+32     	; 0xf38 <xQueueGenericSend+0xf2>
     f18:	4e 81       	ldd	r20, Y+6	; 0x06
     f1a:	5f 81       	ldd	r21, Y+7	; 0x07
     f1c:	68 85       	ldd	r22, Y+8	; 0x08
     f1e:	79 85       	ldd	r23, Y+9	; 0x09
     f20:	c7 01       	movw	r24, r14
     f22:	08 96       	adiw	r24, 0x08	; 8
     f24:	0e 94 86 11 	call	0x230c	; 0x230c <vTaskPlaceOnEventList>
     f28:	c7 01       	movw	r24, r14
     f2a:	e1 de       	rcall	.-574    	; 0xcee <prvUnlockQueue>
     f2c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
     f30:	81 11       	cpse	r24, r1
     f32:	a0 cf       	rjmp	.-192    	; 0xe74 <xQueueGenericSend+0x2e>
     f34:	80 dd       	rcall	.-1280   	; 0xa36 <vPortYield>
     f36:	9e cf       	rjmp	.-196    	; 0xe74 <xQueueGenericSend+0x2e>
     f38:	c7 01       	movw	r24, r14
     f3a:	d9 de       	rcall	.-590    	; 0xcee <prvUnlockQueue>
     f3c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
     f40:	99 cf       	rjmp	.-206    	; 0xe74 <xQueueGenericSend+0x2e>
     f42:	c7 01       	movw	r24, r14
     f44:	d4 de       	rcall	.-600    	; 0xcee <prvUnlockQueue>
     f46:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	29 96       	adiw	r28, 0x09	; 9
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	08 95       	ret

00000f6a <prvInitialiseMutex>:
     f6a:	0f 93       	push	r16
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f0       	breq	.+26     	; 0xf8a <prvInitialiseMutex+0x20>
     f70:	fc 01       	movw	r30, r24
     f72:	15 82       	std	Z+5, r1	; 0x05
     f74:	14 82       	std	Z+4, r1	; 0x04
     f76:	11 82       	std	Z+1, r1	; 0x01
     f78:	10 82       	st	Z, r1
     f7a:	16 82       	std	Z+6, r1	; 0x06
     f7c:	00 e0       	ldi	r16, 0x00	; 0
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	a9 01       	movw	r20, r18
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	5e df       	rcall	.-324    	; 0xe46 <xQueueGenericSend>
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <xQueueCreateMutex>:
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	48 2f       	mov	r20, r24
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	33 df       	rcall	.-410    	; 0xe00 <xQueueGenericCreate>
     f9a:	ec 01       	movw	r28, r24
     f9c:	e6 df       	rcall	.-52     	; 0xf6a <prvInitialiseMutex>
     f9e:	ce 01       	movw	r24, r28
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <xQueueGenericSendFromISR>:
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	8a 01       	movw	r16, r20
     fb4:	fc 01       	movw	r30, r24
     fb6:	56 8d       	ldd	r21, Z+30	; 0x1e
     fb8:	37 8d       	ldd	r19, Z+31	; 0x1f
     fba:	53 17       	cp	r21, r19
     fbc:	10 f0       	brcs	.+4      	; 0xfc2 <xQueueGenericSendFromISR+0x1c>
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	f9 f4       	brne	.+62     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fc2:	42 2f       	mov	r20, r18
     fc4:	78 01       	movw	r14, r16
     fc6:	ec 01       	movw	r28, r24
     fc8:	1a a1       	ldd	r17, Y+34	; 0x22
     fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fcc:	ce 01       	movw	r24, r28
     fce:	16 de       	rcall	.-980    	; 0xbfc <prvCopyDataToQueue>
     fd0:	1f 3f       	cpi	r17, 0xFF	; 255
     fd2:	81 f4       	brne	.+32     	; 0xff4 <xQueueGenericSendFromISR+0x4e>
     fd4:	8b 89       	ldd	r24, Y+19	; 0x13
     fd6:	88 23       	and	r24, r24
     fd8:	a9 f0       	breq	.+42     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     fda:	ce 01       	movw	r24, r28
     fdc:	43 96       	adiw	r24, 0x13	; 19
     fde:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskRemoveFromEventList>
     fe2:	88 23       	and	r24, r24
     fe4:	89 f0       	breq	.+34     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     fe6:	e1 14       	cp	r14, r1
     fe8:	f1 04       	cpc	r15, r1
     fea:	81 f0       	breq	.+32     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	f7 01       	movw	r30, r14
     ff0:	80 83       	st	Z, r24
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     ff4:	ff 24       	eor	r15, r15
     ff6:	f3 94       	inc	r15
     ff8:	f1 0e       	add	r15, r17
     ffa:	fa a2       	std	Y+34, r15	; 0x22
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	05 c0       	rjmp	.+10     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	03 c0       	rjmp	.+6      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	01 c0       	rjmp	.+2      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	08 95       	ret

0000101c <xQueueReceive>:
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	29 97       	sbiw	r28, 0x09	; 9
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	8c 01       	movw	r16, r24
    103e:	6b 01       	movw	r12, r22
    1040:	2e 83       	std	Y+6, r18	; 0x06
    1042:	3f 83       	std	Y+7, r19	; 0x07
    1044:	48 87       	std	Y+8, r20	; 0x08
    1046:	59 87       	std	Y+9, r21	; 0x09
    1048:	e1 2c       	mov	r14, r1
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	0f 92       	push	r0
    1050:	f8 01       	movw	r30, r16
    1052:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1054:	ff 20       	and	r15, r15
    1056:	99 f0       	breq	.+38     	; 0x107e <xQueueReceive+0x62>
    1058:	b6 01       	movw	r22, r12
    105a:	c8 01       	movw	r24, r16
    105c:	2e de       	rcall	.-932    	; 0xcba <prvCopyDataFromQueue>
    105e:	fa 94       	dec	r15
    1060:	f8 01       	movw	r30, r16
    1062:	f6 8e       	std	Z+30, r15	; 0x1e
    1064:	80 85       	ldd	r24, Z+8	; 0x08
    1066:	88 23       	and	r24, r24
    1068:	31 f0       	breq	.+12     	; 0x1076 <xQueueReceive+0x5a>
    106a:	c8 01       	movw	r24, r16
    106c:	08 96       	adiw	r24, 0x08	; 8
    106e:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskRemoveFromEventList>
    1072:	81 11       	cpse	r24, r1
    1074:	e0 dc       	rcall	.-1600   	; 0xa36 <vPortYield>
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	4f c0       	rjmp	.+158    	; 0x111c <xQueueReceive+0x100>
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	a8 85       	ldd	r26, Y+8	; 0x08
    1084:	b9 85       	ldd	r27, Y+9	; 0x09
    1086:	89 2b       	or	r24, r25
    1088:	8a 2b       	or	r24, r26
    108a:	8b 2b       	or	r24, r27
    108c:	21 f4       	brne	.+8      	; 0x1096 <xQueueReceive+0x7a>
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	43 c0       	rjmp	.+134    	; 0x111c <xQueueReceive+0x100>
    1096:	e1 10       	cpse	r14, r1
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <xQueueReceive+0x8a>
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	0e 94 88 13 	call	0x2710	; 0x2710 <vTaskInternalSetTimeOutState>
    10a2:	ee 24       	eor	r14, r14
    10a4:	e3 94       	inc	r14
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	2f d6       	rcall	.+3166   	; 0x1d0a <vTaskSuspendAll>
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	0f 92       	push	r0
    10b2:	f8 01       	movw	r30, r16
    10b4:	81 a1       	ldd	r24, Z+33	; 0x21
    10b6:	8f 3f       	cpi	r24, 0xFF	; 255
    10b8:	09 f4       	brne	.+2      	; 0x10bc <xQueueReceive+0xa0>
    10ba:	11 a2       	std	Z+33, r1	; 0x21
    10bc:	f8 01       	movw	r30, r16
    10be:	82 a1       	ldd	r24, Z+34	; 0x22
    10c0:	8f 3f       	cpi	r24, 0xFF	; 255
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <xQueueReceive+0xaa>
    10c4:	12 a2       	std	Z+34, r1	; 0x22
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	be 01       	movw	r22, r28
    10cc:	6a 5f       	subi	r22, 0xFA	; 250
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCheckForTimeOut>
    10d8:	81 11       	cpse	r24, r1
    10da:	17 c0       	rjmp	.+46     	; 0x110a <xQueueReceive+0xee>
    10dc:	c8 01       	movw	r24, r16
    10de:	73 dd       	rcall	.-1306   	; 0xbc6 <prvIsQueueEmpty>
    10e0:	88 23       	and	r24, r24
    10e2:	79 f0       	breq	.+30     	; 0x1102 <xQueueReceive+0xe6>
    10e4:	4e 81       	ldd	r20, Y+6	; 0x06
    10e6:	5f 81       	ldd	r21, Y+7	; 0x07
    10e8:	68 85       	ldd	r22, Y+8	; 0x08
    10ea:	79 85       	ldd	r23, Y+9	; 0x09
    10ec:	c8 01       	movw	r24, r16
    10ee:	43 96       	adiw	r24, 0x13	; 19
    10f0:	0e 94 86 11 	call	0x230c	; 0x230c <vTaskPlaceOnEventList>
    10f4:	c8 01       	movw	r24, r16
    10f6:	fb dd       	rcall	.-1034   	; 0xcee <prvUnlockQueue>
    10f8:	48 d7       	rcall	.+3728   	; 0x1f8a <xTaskResumeAll>
    10fa:	81 11       	cpse	r24, r1
    10fc:	a6 cf       	rjmp	.-180    	; 0x104a <xQueueReceive+0x2e>
    10fe:	9b dc       	rcall	.-1738   	; 0xa36 <vPortYield>
    1100:	a4 cf       	rjmp	.-184    	; 0x104a <xQueueReceive+0x2e>
    1102:	c8 01       	movw	r24, r16
    1104:	f4 dd       	rcall	.-1048   	; 0xcee <prvUnlockQueue>
    1106:	41 d7       	rcall	.+3714   	; 0x1f8a <xTaskResumeAll>
    1108:	a0 cf       	rjmp	.-192    	; 0x104a <xQueueReceive+0x2e>
    110a:	c8 01       	movw	r24, r16
    110c:	f0 dd       	rcall	.-1056   	; 0xcee <prvUnlockQueue>
    110e:	3d d7       	rcall	.+3706   	; 0x1f8a <xTaskResumeAll>
    1110:	c8 01       	movw	r24, r16
    1112:	59 dd       	rcall	.-1358   	; 0xbc6 <prvIsQueueEmpty>
    1114:	88 23       	and	r24, r24
    1116:	09 f4       	brne	.+2      	; 0x111a <xQueueReceive+0xfe>
    1118:	98 cf       	rjmp	.-208    	; 0x104a <xQueueReceive+0x2e>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	29 96       	adiw	r28, 0x09	; 9
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	08 95       	ret

0000113a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	0f 92       	push	r0
    1146:	89 a1       	ldd	r24, Y+33	; 0x21
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	09 f4       	brne	.+2      	; 0x114e <vQueueWaitForMessageRestricted+0x14>
    114c:	19 a2       	std	Y+33, r1	; 0x21
    114e:	8a a1       	ldd	r24, Y+34	; 0x22
    1150:	8f 3f       	cpi	r24, 0xFF	; 255
    1152:	09 f4       	brne	.+2      	; 0x1156 <vQueueWaitForMessageRestricted+0x1c>
    1154:	1a a2       	std	Y+34, r1	; 0x22
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    115a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    115c:	81 11       	cpse	r24, r1
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1160:	ce 01       	movw	r24, r28
    1162:	43 96       	adiw	r24, 0x13	; 19
    1164:	0e 94 e7 11 	call	0x23ce	; 0x23ce <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1168:	ce 01       	movw	r24, r28
    116a:	c1 dd       	rcall	.-1150   	; 0xcee <prvUnlockQueue>
    }
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1172:	fc 01       	movw	r30, r24
    1174:	44 81       	ldd	r20, Z+4	; 0x04
    1176:	55 81       	ldd	r21, Z+5	; 0x05
    1178:	22 81       	ldd	r18, Z+2	; 0x02
    117a:	33 81       	ldd	r19, Z+3	; 0x03
    117c:	24 0f       	add	r18, r20
    117e:	35 1f       	adc	r19, r21
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	b9 01       	movw	r22, r18
    1186:	68 1b       	sub	r22, r24
    1188:	79 0b       	sbc	r23, r25
    118a:	cb 01       	movw	r24, r22
    118c:	64 17       	cp	r22, r20
    118e:	75 07       	cpc	r23, r21
    1190:	10 f0       	brcs	.+4      	; 0x1196 <prvBytesInBuffer+0x24>
    1192:	84 1b       	sub	r24, r20
    1194:	95 0b       	sbc	r25, r21
    1196:	08 95       	ret

00001198 <prvInitialiseNewStreamBuffer>:
    1198:	0f 93       	push	r16
    119a:	fc 01       	movw	r30, r24
    119c:	8f e0       	ldi	r24, 0x0F	; 15
    119e:	df 01       	movw	r26, r30
    11a0:	1d 92       	st	X+, r1
    11a2:	8a 95       	dec	r24
    11a4:	e9 f7       	brne	.-6      	; 0x11a0 <prvInitialiseNewStreamBuffer+0x8>
    11a6:	75 87       	std	Z+13, r23	; 0x0d
    11a8:	64 87       	std	Z+12, r22	; 0x0c
    11aa:	55 83       	std	Z+5, r21	; 0x05
    11ac:	44 83       	std	Z+4, r20	; 0x04
    11ae:	37 83       	std	Z+7, r19	; 0x07
    11b0:	26 83       	std	Z+6, r18	; 0x06
    11b2:	06 87       	std	Z+14, r16	; 0x0e
    11b4:	0f 91       	pop	r16
    11b6:	08 95       	ret

000011b8 <prvWriteBytesToBuffer>:
    11b8:	af 92       	push	r10
    11ba:	bf 92       	push	r11
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	6c 01       	movw	r12, r24
    11ce:	5b 01       	movw	r10, r22
    11d0:	7a 01       	movw	r14, r20
    11d2:	fc 01       	movw	r30, r24
    11d4:	c2 81       	ldd	r28, Z+2	; 0x02
    11d6:	d3 81       	ldd	r29, Z+3	; 0x03
    11d8:	04 81       	ldd	r16, Z+4	; 0x04
    11da:	15 81       	ldd	r17, Z+5	; 0x05
    11dc:	0c 1b       	sub	r16, r28
    11de:	1d 0b       	sbc	r17, r29
    11e0:	40 17       	cp	r20, r16
    11e2:	51 07       	cpc	r21, r17
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <prvWriteBytesToBuffer+0x30>
    11e6:	8a 01       	movw	r16, r20
    11e8:	f6 01       	movw	r30, r12
    11ea:	84 85       	ldd	r24, Z+12	; 0x0c
    11ec:	95 85       	ldd	r25, Z+13	; 0x0d
    11ee:	a8 01       	movw	r20, r16
    11f0:	b5 01       	movw	r22, r10
    11f2:	8c 0f       	add	r24, r28
    11f4:	9d 1f       	adc	r25, r29
    11f6:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <memcpy>
    11fa:	0e 15       	cp	r16, r14
    11fc:	1f 05       	cpc	r17, r15
    11fe:	58 f4       	brcc	.+22     	; 0x1216 <prvWriteBytesToBuffer+0x5e>
    1200:	a7 01       	movw	r20, r14
    1202:	40 1b       	sub	r20, r16
    1204:	51 0b       	sbc	r21, r17
    1206:	b5 01       	movw	r22, r10
    1208:	60 0f       	add	r22, r16
    120a:	71 1f       	adc	r23, r17
    120c:	f6 01       	movw	r30, r12
    120e:	84 85       	ldd	r24, Z+12	; 0x0c
    1210:	95 85       	ldd	r25, Z+13	; 0x0d
    1212:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <memcpy>
    1216:	ce 01       	movw	r24, r28
    1218:	8e 0d       	add	r24, r14
    121a:	9f 1d       	adc	r25, r15
    121c:	f6 01       	movw	r30, r12
    121e:	24 81       	ldd	r18, Z+4	; 0x04
    1220:	35 81       	ldd	r19, Z+5	; 0x05
    1222:	82 17       	cp	r24, r18
    1224:	93 07       	cpc	r25, r19
    1226:	10 f0       	brcs	.+4      	; 0x122c <prvWriteBytesToBuffer+0x74>
    1228:	82 1b       	sub	r24, r18
    122a:	93 0b       	sbc	r25, r19
    122c:	f6 01       	movw	r30, r12
    122e:	93 83       	std	Z+3, r25	; 0x03
    1230:	82 83       	std	Z+2, r24	; 0x02
    1232:	c7 01       	movw	r24, r14
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	08 95       	ret

0000124a <prvWriteMessageToBuffer>:
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	1f 92       	push	r1
    125c:	1f 92       	push	r1
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	7c 01       	movw	r14, r24
    1264:	6b 01       	movw	r12, r22
    1266:	5a 83       	std	Y+2, r21	; 0x02
    1268:	49 83       	std	Y+1, r20	; 0x01
    126a:	21 15       	cp	r18, r1
    126c:	31 05       	cpc	r19, r1
    126e:	c1 f0       	breq	.+48     	; 0x12a0 <prvWriteMessageToBuffer+0x56>
    1270:	fc 01       	movw	r30, r24
    1272:	86 85       	ldd	r24, Z+14	; 0x0e
    1274:	80 fd       	sbrc	r24, 0
    1276:	08 c0       	rjmp	.+16     	; 0x1288 <prvWriteMessageToBuffer+0x3e>
    1278:	42 17       	cp	r20, r18
    127a:	53 07       	cpc	r21, r19
    127c:	08 f4       	brcc	.+2      	; 0x1280 <prvWriteMessageToBuffer+0x36>
    127e:	9a 01       	movw	r18, r20
    1280:	3a 83       	std	Y+2, r19	; 0x02
    1282:	29 83       	std	Y+1, r18	; 0x01
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0f c0       	rjmp	.+30     	; 0x12a6 <prvWriteMessageToBuffer+0x5c>
    1288:	20 17       	cp	r18, r16
    128a:	31 07       	cpc	r19, r17
    128c:	58 f0       	brcs	.+22     	; 0x12a4 <prvWriteMessageToBuffer+0x5a>
    128e:	42 e0       	ldi	r20, 0x02	; 2
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	be 01       	movw	r22, r28
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	c7 01       	movw	r24, r14
    129a:	8e df       	rcall	.-228    	; 0x11b8 <prvWriteBytesToBuffer>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <prvWriteMessageToBuffer+0x5c>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <prvWriteMessageToBuffer+0x5c>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	88 23       	and	r24, r24
    12a8:	31 f0       	breq	.+12     	; 0x12b6 <prvWriteMessageToBuffer+0x6c>
    12aa:	49 81       	ldd	r20, Y+1	; 0x01
    12ac:	5a 81       	ldd	r21, Y+2	; 0x02
    12ae:	b6 01       	movw	r22, r12
    12b0:	c7 01       	movw	r24, r14
    12b2:	82 df       	rcall	.-252    	; 0x11b8 <prvWriteBytesToBuffer>
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <prvWriteMessageToBuffer+0x70>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	08 95       	ret

000012d0 <prvReadBytesFromBuffer>:
    12d0:	af 92       	push	r10
    12d2:	bf 92       	push	r11
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	7c 01       	movw	r14, r24
    12e6:	5b 01       	movw	r10, r22
    12e8:	e9 01       	movw	r28, r18
    12ea:	42 17       	cp	r20, r18
    12ec:	53 07       	cpc	r21, r19
    12ee:	08 f4       	brcc	.+2      	; 0x12f2 <prvReadBytesFromBuffer+0x22>
    12f0:	ea 01       	movw	r28, r20
    12f2:	20 97       	sbiw	r28, 0x00	; 0
    12f4:	81 f1       	breq	.+96     	; 0x1356 <prvReadBytesFromBuffer+0x86>
    12f6:	f7 01       	movw	r30, r14
    12f8:	00 81       	ld	r16, Z
    12fa:	11 81       	ldd	r17, Z+1	; 0x01
    12fc:	84 81       	ldd	r24, Z+4	; 0x04
    12fe:	95 81       	ldd	r25, Z+5	; 0x05
    1300:	80 1b       	sub	r24, r16
    1302:	91 0b       	sbc	r25, r17
    1304:	6e 01       	movw	r12, r28
    1306:	8c 17       	cp	r24, r28
    1308:	9d 07       	cpc	r25, r29
    130a:	08 f4       	brcc	.+2      	; 0x130e <prvReadBytesFromBuffer+0x3e>
    130c:	6c 01       	movw	r12, r24
    130e:	f7 01       	movw	r30, r14
    1310:	64 85       	ldd	r22, Z+12	; 0x0c
    1312:	75 85       	ldd	r23, Z+13	; 0x0d
    1314:	60 0f       	add	r22, r16
    1316:	71 1f       	adc	r23, r17
    1318:	a6 01       	movw	r20, r12
    131a:	c5 01       	movw	r24, r10
    131c:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <memcpy>
    1320:	cc 16       	cp	r12, r28
    1322:	dd 06       	cpc	r13, r29
    1324:	58 f4       	brcc	.+22     	; 0x133c <prvReadBytesFromBuffer+0x6c>
    1326:	ae 01       	movw	r20, r28
    1328:	4c 19       	sub	r20, r12
    132a:	5d 09       	sbc	r21, r13
    132c:	f7 01       	movw	r30, r14
    132e:	64 85       	ldd	r22, Z+12	; 0x0c
    1330:	75 85       	ldd	r23, Z+13	; 0x0d
    1332:	c5 01       	movw	r24, r10
    1334:	8c 0d       	add	r24, r12
    1336:	9d 1d       	adc	r25, r13
    1338:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <memcpy>
    133c:	0c 0f       	add	r16, r28
    133e:	1d 1f       	adc	r17, r29
    1340:	f7 01       	movw	r30, r14
    1342:	84 81       	ldd	r24, Z+4	; 0x04
    1344:	95 81       	ldd	r25, Z+5	; 0x05
    1346:	08 17       	cp	r16, r24
    1348:	19 07       	cpc	r17, r25
    134a:	10 f0       	brcs	.+4      	; 0x1350 <prvReadBytesFromBuffer+0x80>
    134c:	08 1b       	sub	r16, r24
    134e:	19 0b       	sbc	r17, r25
    1350:	f7 01       	movw	r30, r14
    1352:	11 83       	std	Z+1, r17	; 0x01
    1354:	00 83       	st	Z, r16
    1356:	ce 01       	movw	r24, r28
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	08 95       	ret

0000136e <prvReadMessageFromBuffer>:
    136e:	6f 92       	push	r6
    1370:	7f 92       	push	r7
    1372:	8f 92       	push	r8
    1374:	9f 92       	push	r9
    1376:	af 92       	push	r10
    1378:	bf 92       	push	r11
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	1f 92       	push	r1
    138c:	1f 92       	push	r1
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	6c 01       	movw	r12, r24
    1394:	4b 01       	movw	r8, r22
    1396:	5a 01       	movw	r10, r20
    1398:	79 01       	movw	r14, r18
    139a:	01 15       	cp	r16, r1
    139c:	11 05       	cpc	r17, r1
    139e:	b1 f0       	breq	.+44     	; 0x13cc <prvReadMessageFromBuffer+0x5e>
    13a0:	fc 01       	movw	r30, r24
    13a2:	60 80       	ld	r6, Z
    13a4:	71 80       	ldd	r7, Z+1	; 0x01
    13a6:	a8 01       	movw	r20, r16
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	90 df       	rcall	.-224    	; 0x12d0 <prvReadBytesFromBuffer>
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	e0 1a       	sub	r14, r16
    13b6:	f1 0a       	sbc	r15, r17
    13b8:	a8 16       	cp	r10, r24
    13ba:	b9 06       	cpc	r11, r25
    13bc:	30 f4       	brcc	.+12     	; 0x13ca <prvReadMessageFromBuffer+0x5c>
    13be:	f6 01       	movw	r30, r12
    13c0:	71 82       	std	Z+1, r7	; 0x01
    13c2:	60 82       	st	Z, r6
    13c4:	a1 2c       	mov	r10, r1
    13c6:	b1 2c       	mov	r11, r1
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <prvReadMessageFromBuffer+0x5e>
    13ca:	5c 01       	movw	r10, r24
    13cc:	97 01       	movw	r18, r14
    13ce:	a5 01       	movw	r20, r10
    13d0:	b4 01       	movw	r22, r8
    13d2:	c6 01       	movw	r24, r12
    13d4:	7d df       	rcall	.-262    	; 0x12d0 <prvReadBytesFromBuffer>
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	bf 90       	pop	r11
    13ec:	af 90       	pop	r10
    13ee:	9f 90       	pop	r9
    13f0:	8f 90       	pop	r8
    13f2:	7f 90       	pop	r7
    13f4:	6f 90       	pop	r6
    13f6:	08 95       	ret

000013f8 <xStreamBufferGenericCreate>:
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	6b 01       	movw	r12, r22
    140a:	41 30       	cpi	r20, 0x01	; 1
    140c:	11 f4       	brne	.+4      	; 0x1412 <xStreamBufferGenericCreate+0x1a>
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <xStreamBufferGenericCreate+0x1c>
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	c1 14       	cp	r12, r1
    1416:	d1 04       	cpc	r13, r1
    1418:	19 f4       	brne	.+6      	; 0x1420 <xStreamBufferGenericCreate+0x28>
    141a:	cc 24       	eor	r12, r12
    141c:	c3 94       	inc	r12
    141e:	d1 2c       	mov	r13, r1
    1420:	ce 01       	movw	r24, r28
    1422:	40 96       	adiw	r24, 0x10	; 16
    1424:	c8 17       	cp	r28, r24
    1426:	d9 07       	cpc	r29, r25
    1428:	20 f4       	brcc	.+8      	; 0x1432 <xStreamBufferGenericCreate+0x3a>
    142a:	21 96       	adiw	r28, 0x01	; 1
    142c:	50 d9       	rcall	.-3424   	; 0x6ce <pvPortMalloc>
    142e:	7c 01       	movw	r14, r24
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <xStreamBufferGenericCreate+0x3e>
    1432:	e1 2c       	mov	r14, r1
    1434:	f1 2c       	mov	r15, r1
    1436:	e1 14       	cp	r14, r1
    1438:	f1 04       	cpc	r15, r1
    143a:	39 f0       	breq	.+14     	; 0x144a <xStreamBufferGenericCreate+0x52>
    143c:	96 01       	movw	r18, r12
    143e:	ae 01       	movw	r20, r28
    1440:	b7 01       	movw	r22, r14
    1442:	61 5f       	subi	r22, 0xF1	; 241
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	c7 01       	movw	r24, r14
    1448:	a7 de       	rcall	.-690    	; 0x1198 <prvInitialiseNewStreamBuffer>
    144a:	c7 01       	movw	r24, r14
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	08 95       	ret

0000145c <xStreamBufferReset>:
    145c:	0f 93       	push	r16
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	0f 92       	push	r0
    1464:	fc 01       	movw	r30, r24
    1466:	20 85       	ldd	r18, Z+8	; 0x08
    1468:	31 85       	ldd	r19, Z+9	; 0x09
    146a:	23 2b       	or	r18, r19
    146c:	71 f4       	brne	.+28     	; 0x148a <xStreamBufferReset+0x2e>
    146e:	22 85       	ldd	r18, Z+10	; 0x0a
    1470:	33 85       	ldd	r19, Z+11	; 0x0b
    1472:	23 2b       	or	r18, r19
    1474:	61 f4       	brne	.+24     	; 0x148e <xStreamBufferReset+0x32>
    1476:	26 81       	ldd	r18, Z+6	; 0x06
    1478:	37 81       	ldd	r19, Z+7	; 0x07
    147a:	44 81       	ldd	r20, Z+4	; 0x04
    147c:	55 81       	ldd	r21, Z+5	; 0x05
    147e:	64 85       	ldd	r22, Z+12	; 0x0c
    1480:	75 85       	ldd	r23, Z+13	; 0x0d
    1482:	06 85       	ldd	r16, Z+14	; 0x0e
    1484:	89 de       	rcall	.-750    	; 0x1198 <prvInitialiseNewStreamBuffer>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <xStreamBufferReset+0x34>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <xStreamBufferReset+0x34>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <xStreamBufferSpacesAvailable>:
    1498:	fc 01       	movw	r30, r24
    149a:	24 81       	ldd	r18, Z+4	; 0x04
    149c:	35 81       	ldd	r19, Z+5	; 0x05
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	42 81       	ldd	r20, Z+2	; 0x02
    14a8:	53 81       	ldd	r21, Z+3	; 0x03
    14aa:	84 1b       	sub	r24, r20
    14ac:	95 0b       	sbc	r25, r21
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	82 17       	cp	r24, r18
    14b2:	93 07       	cpc	r25, r19
    14b4:	10 f0       	brcs	.+4      	; 0x14ba <xStreamBufferSpacesAvailable+0x22>
    14b6:	82 1b       	sub	r24, r18
    14b8:	93 0b       	sbc	r25, r19
    14ba:	08 95       	ret

000014bc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    14bc:	2f 92       	push	r2
    14be:	3f 92       	push	r3
    14c0:	4f 92       	push	r4
    14c2:	5f 92       	push	r5
    14c4:	6f 92       	push	r6
    14c6:	7f 92       	push	r7
    14c8:	8f 92       	push	r8
    14ca:	9f 92       	push	r9
    14cc:	af 92       	push	r10
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	2b 97       	sbiw	r28, 0x0b	; 11
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	4c 01       	movw	r8, r24
    14f2:	7b 87       	std	Y+11, r23	; 0x0b
    14f4:	6a 87       	std	Y+10, r22	; 0x0a
    14f6:	1a 01       	movw	r2, r20
    14f8:	0e 83       	std	Y+6, r16	; 0x06
    14fa:	1f 83       	std	Y+7, r17	; 0x07
    14fc:	28 87       	std	Y+8, r18	; 0x08
    14fe:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1500:	fc 01       	movw	r30, r24
    1502:	84 81       	ldd	r24, Z+4	; 0x04
    1504:	95 81       	ldd	r25, Z+5	; 0x05
    1506:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1508:	26 85       	ldd	r18, Z+14	; 0x0e
    150a:	20 ff       	sbrs	r18, 0
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    150e:	2a 01       	movw	r4, r20
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	4f 0e       	add	r4, r31
    1514:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1516:	84 15       	cp	r24, r4
    1518:	95 05       	cpc	r25, r5
    151a:	58 f4       	brcc	.+22     	; 0x1532 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    151c:	1e 82       	std	Y+6, r1	; 0x06
    151e:	1f 82       	std	Y+7, r1	; 0x07
    1520:	18 86       	std	Y+8, r1	; 0x08
    1522:	19 86       	std	Y+9, r1	; 0x09
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1526:	84 17       	cp	r24, r20
    1528:	95 07       	cpc	r25, r21
    152a:	10 f0       	brcs	.+4      	; 0x1530 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    152c:	2a 01       	movw	r4, r20
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1530:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1532:	8e 81       	ldd	r24, Y+6	; 0x06
    1534:	9f 81       	ldd	r25, Y+7	; 0x07
    1536:	a8 85       	ldd	r26, Y+8	; 0x08
    1538:	b9 85       	ldd	r27, Y+9	; 0x09
    153a:	89 2b       	or	r24, r25
    153c:	8a 2b       	or	r24, r26
    153e:	8b 2b       	or	r24, r27
    1540:	09 f4       	brne	.+2      	; 0x1544 <xStreamBufferSend+0x88>
    1542:	38 c0       	rjmp	.+112    	; 0x15b4 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	0e 94 72 13 	call	0x26e4	; 0x26e4 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1552:	c4 01       	movw	r24, r8
    1554:	a1 df       	rcall	.-190    	; 0x1498 <xStreamBufferSpacesAvailable>
    1556:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1558:	84 15       	cp	r24, r4
    155a:	95 05       	cpc	r25, r5
    155c:	40 f5       	brcc	.+80     	; 0x15ae <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1568:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskGetCurrentTaskHandle>
    156c:	f4 01       	movw	r30, r8
    156e:	93 87       	std	Z+11, r25	; 0x0b
    1570:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1576:	ae 80       	ldd	r10, Y+6	; 0x06
    1578:	bf 80       	ldd	r11, Y+7	; 0x07
    157a:	c8 84       	ldd	r12, Y+8	; 0x08
    157c:	d9 84       	ldd	r13, Y+9	; 0x09
    157e:	e1 2c       	mov	r14, r1
    1580:	f1 2c       	mov	r15, r1
    1582:	00 e0       	ldi	r16, 0x00	; 0
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	98 01       	movw	r18, r16
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	ba 01       	movw	r22, r20
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	0e 94 9b 14 	call	0x2936	; 0x2936 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1594:	f4 01       	movw	r30, r8
    1596:	13 86       	std	Z+11, r1	; 0x0b
    1598:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    159a:	be 01       	movw	r22, r28
    159c:	6a 5f       	subi	r22, 0xFA	; 250
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	ce 01       	movw	r24, r28
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCheckForTimeOut>
    15a8:	88 23       	and	r24, r24
    15aa:	81 f2       	breq	.-96     	; 0x154c <xStreamBufferSend+0x90>
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
                    break;
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    15b4:	61 2c       	mov	r6, r1
    15b6:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    15b8:	61 14       	cp	r6, r1
    15ba:	71 04       	cpc	r7, r1
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15be:	c4 01       	movw	r24, r8
    15c0:	6b df       	rcall	.-298    	; 0x1498 <xStreamBufferSpacesAvailable>
    15c2:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15c4:	82 01       	movw	r16, r4
    15c6:	93 01       	movw	r18, r6
    15c8:	a1 01       	movw	r20, r2
    15ca:	6a 85       	ldd	r22, Y+10	; 0x0a
    15cc:	7b 85       	ldd	r23, Y+11	; 0x0b
    15ce:	c4 01       	movw	r24, r8
    15d0:	3c de       	rcall	.-904    	; 0x124a <prvWriteMessageToBuffer>
    15d2:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    15d4:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    15d6:	e9 f0       	breq	.+58     	; 0x1612 <xStreamBufferSend+0x156>
    15d8:	c4 01       	movw	r24, r8
    15da:	cb dd       	rcall	.-1130   	; 0x1172 <prvBytesInBuffer>
    15dc:	f4 01       	movw	r30, r8
    15de:	26 81       	ldd	r18, Z+6	; 0x06
    15e0:	37 81       	ldd	r19, Z+7	; 0x07
    15e2:	82 17       	cp	r24, r18
    15e4:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    15e6:	a8 f0       	brcs	.+42     	; 0x1612 <xStreamBufferSend+0x156>
    15e8:	90 d3       	rcall	.+1824   	; 0x1d0a <vTaskSuspendAll>
    15ea:	f4 01       	movw	r30, r8
    15ec:	80 85       	ldd	r24, Z+8	; 0x08
    15ee:	91 85       	ldd	r25, Z+9	; 0x09
    15f0:	89 2b       	or	r24, r25
    15f2:	71 f0       	breq	.+28     	; 0x1610 <xStreamBufferSend+0x154>
    15f4:	80 85       	ldd	r24, Z+8	; 0x08
    15f6:	91 85       	ldd	r25, Z+9	; 0x09
    15f8:	e1 2c       	mov	r14, r1
    15fa:	f1 2c       	mov	r15, r1
    15fc:	00 e0       	ldi	r16, 0x00	; 0
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskGenericNotify>
    160a:	f4 01       	movw	r30, r8
    160c:	11 86       	std	Z+9, r1	; 0x09
    160e:	10 86       	std	Z+8, r1	; 0x08
    1610:	bc d4       	rcall	.+2424   	; 0x1f8a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1612:	c6 01       	movw	r24, r12
    1614:	2b 96       	adiw	r28, 0x0b	; 11
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	6f 90       	pop	r6
    163c:	5f 90       	pop	r5
    163e:	4f 90       	pop	r4
    1640:	3f 90       	pop	r3
    1642:	2f 90       	pop	r2
    1644:	08 95       	ret

00001646 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
    165c:	7b 01       	movw	r14, r22
    165e:	5a 01       	movw	r10, r20
    1660:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1662:	8e 85       	ldd	r24, Y+14	; 0x0e
    1664:	80 ff       	sbrs	r24, 0
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1668:	8a 01       	movw	r16, r20
    166a:	0e 5f       	subi	r16, 0xFE	; 254
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1670:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1672:	ce 01       	movw	r24, r28
    1674:	11 df       	rcall	.-478    	; 0x1498 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1676:	9c 01       	movw	r18, r24
    1678:	a5 01       	movw	r20, r10
    167a:	b7 01       	movw	r22, r14
    167c:	ce 01       	movw	r24, r28
    167e:	e5 dd       	rcall	.-1078   	; 0x124a <prvWriteMessageToBuffer>
    1680:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1682:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1684:	c1 f0       	breq	.+48     	; 0x16b6 <xStreamBufferSendFromISR+0x70>
    1686:	ce 01       	movw	r24, r28
    1688:	74 dd       	rcall	.-1304   	; 0x1172 <prvBytesInBuffer>
    168a:	2e 81       	ldd	r18, Y+6	; 0x06
    168c:	3f 81       	ldd	r19, Y+7	; 0x07
    168e:	82 17       	cp	r24, r18
    1690:	93 07       	cpc	r25, r19
    1692:	88 f0       	brcs	.+34     	; 0x16b6 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1694:	88 85       	ldd	r24, Y+8	; 0x08
    1696:	99 85       	ldd	r25, Y+9	; 0x09
    1698:	89 2b       	or	r24, r25
    169a:	69 f0       	breq	.+26     	; 0x16b6 <xStreamBufferSendFromISR+0x70>
    169c:	88 85       	ldd	r24, Y+8	; 0x08
    169e:	99 85       	ldd	r25, Y+9	; 0x09
    16a0:	e1 2c       	mov	r14, r1
    16a2:	f1 2c       	mov	r15, r1
    16a4:	00 e0       	ldi	r16, 0x00	; 0
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	a9 01       	movw	r20, r18
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	0e 94 39 16 	call	0x2c72	; 0x2c72 <xTaskGenericNotifyFromISR>
    16b2:	19 86       	std	Y+9, r1	; 0x09
    16b4:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    16b6:	c5 01       	movw	r24, r10
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	bf 90       	pop	r11
    16ca:	af 90       	pop	r10
    16cc:	08 95       	ret

000016ce <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    16ce:	4f 92       	push	r4
    16d0:	5f 92       	push	r5
    16d2:	6f 92       	push	r6
    16d4:	7f 92       	push	r7
    16d6:	8f 92       	push	r8
    16d8:	9f 92       	push	r9
    16da:	af 92       	push	r10
    16dc:	bf 92       	push	r11
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ec 01       	movw	r28, r24
    16f0:	2b 01       	movw	r4, r22
    16f2:	3a 01       	movw	r6, r20
    16f4:	58 01       	movw	r10, r16
    16f6:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fa:	80 ff       	sbrs	r24, 0
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16fe:	68 94       	set
    1700:	88 24       	eor	r8, r8
    1702:	81 f8       	bld	r8, 1
    1704:	91 2c       	mov	r9, r1
    1706:	02 c0       	rjmp	.+4      	; 0x170c <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1708:	81 2c       	mov	r8, r1
    170a:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    170c:	a1 14       	cp	r10, r1
    170e:	b1 04       	cpc	r11, r1
    1710:	c1 04       	cpc	r12, r1
    1712:	d1 04       	cpc	r13, r1
    1714:	41 f1       	breq	.+80     	; 0x1766 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    171c:	ce 01       	movw	r24, r28
    171e:	29 dd       	rcall	.-1454   	; 0x1172 <prvBytesInBuffer>
    1720:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1722:	88 16       	cp	r8, r24
    1724:	99 06       	cpc	r9, r25
    1726:	48 f0       	brcs	.+18     	; 0x173a <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1732:	0e 94 03 14 	call	0x2806	; 0x2806 <xTaskGetCurrentTaskHandle>
    1736:	99 87       	std	Y+9, r25	; 0x09
    1738:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    173e:	8e 14       	cp	r8, r14
    1740:	9f 04       	cpc	r9, r15
    1742:	a0 f0       	brcs	.+40     	; 0x176c <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1744:	e1 2c       	mov	r14, r1
    1746:	f1 2c       	mov	r15, r1
    1748:	00 e0       	ldi	r16, 0x00	; 0
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	98 01       	movw	r18, r16
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	ba 01       	movw	r22, r20
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0e 94 9b 14 	call	0x2936	; 0x2936 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    175a:	19 86       	std	Y+9, r1	; 0x09
    175c:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    175e:	ce 01       	movw	r24, r28
    1760:	08 dd       	rcall	.-1520   	; 0x1172 <prvBytesInBuffer>
    1762:	7c 01       	movw	r14, r24
    1764:	03 c0       	rjmp	.+6      	; 0x176c <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1766:	ce 01       	movw	r24, r28
    1768:	04 dd       	rcall	.-1528   	; 0x1172 <prvBytesInBuffer>
    176a:	7c 01       	movw	r14, r24
    176c:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    176e:	9f 04       	cpc	r9, r15
    1770:	e8 f4       	brcc	.+58     	; 0x17ac <xStreamBufferReceive+0xde>
    1772:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1774:	97 01       	movw	r18, r14
    1776:	a3 01       	movw	r20, r6
    1778:	b2 01       	movw	r22, r4
    177a:	ce 01       	movw	r24, r28
    177c:	f8 dd       	rcall	.-1040   	; 0x136e <prvReadMessageFromBuffer>
    177e:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1780:	89 2b       	or	r24, r25
    1782:	b1 f0       	breq	.+44     	; 0x17b0 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1784:	c2 d2       	rcall	.+1412   	; 0x1d0a <vTaskSuspendAll>
    1786:	8a 85       	ldd	r24, Y+10	; 0x0a
    1788:	9b 85       	ldd	r25, Y+11	; 0x0b
    178a:	89 2b       	or	r24, r25
    178c:	69 f0       	breq	.+26     	; 0x17a8 <xStreamBufferReceive+0xda>
    178e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1790:	9b 85       	ldd	r25, Y+11	; 0x0b
    1792:	e1 2c       	mov	r14, r1
    1794:	f1 2c       	mov	r15, r1
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskGenericNotify>
    17a4:	1b 86       	std	Y+11, r1	; 0x0b
    17a6:	1a 86       	std	Y+10, r1	; 0x0a
    17a8:	f0 d3       	rcall	.+2016   	; 0x1f8a <xTaskResumeAll>
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <xStreamBufferReceive+0xe2>
    17ac:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    17ae:	d1 2c       	mov	r13, r1
    17b0:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	7f 90       	pop	r7
    17cc:	6f 90       	pop	r6
    17ce:	5f 90       	pop	r5
    17d0:	4f 90       	pop	r4
    17d2:	08 95       	ret

000017d4 <prvResetNextTaskUnblockTime>:
    17d4:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <pxDelayedTaskList>
    17d8:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <pxDelayedTaskList+0x1>
    17dc:	80 81       	ld	r24, Z
    17de:	81 11       	cpse	r24, r1
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <prvResetNextTaskUnblockTime+0x26>
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	9f ef       	ldi	r25, 0xFF	; 255
    17e6:	dc 01       	movw	r26, r24
    17e8:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <xNextTaskUnblockTime>
    17ec:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <xNextTaskUnblockTime+0x1>
    17f0:	a0 93 9f 15 	sts	0x159F, r26	; 0x80159f <xNextTaskUnblockTime+0x2>
    17f4:	b0 93 a0 15 	sts	0x15A0, r27	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    17f8:	08 95       	ret
    17fa:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <pxDelayedTaskList>
    17fe:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <pxDelayedTaskList+0x1>
    1802:	07 80       	ldd	r0, Z+7	; 0x07
    1804:	f0 85       	ldd	r31, Z+8	; 0x08
    1806:	e0 2d       	mov	r30, r0
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	a2 81       	ldd	r26, Z+2	; 0x02
    180e:	b3 81       	ldd	r27, Z+3	; 0x03
    1810:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <xNextTaskUnblockTime>
    1814:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <xNextTaskUnblockTime+0x1>
    1818:	a0 93 9f 15 	sts	0x159F, r26	; 0x80159f <xNextTaskUnblockTime+0x2>
    181c:	b0 93 a0 15 	sts	0x15A0, r27	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1820:	08 95       	ret

00001822 <prvDeleteTCB>:
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	ec 01       	movw	r28, r24
    1828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182c:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
    1830:	ce 01       	movw	r24, r28
    1832:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <prvInitialiseNewTask>:
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	2c 01       	movw	r4, r24
    185c:	5b 01       	movw	r10, r22
    185e:	4a 01       	movw	r8, r20
    1860:	39 01       	movw	r6, r18
    1862:	e6 01       	movw	r28, r12
    1864:	65 ea       	ldi	r22, 0xA5	; 165
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186c:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <memset>
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	82 1a       	sub	r8, r18
    1878:	91 08       	sbc	r9, r1
    187a:	88 0e       	add	r8, r24
    187c:	99 1e       	adc	r9, r25
    187e:	a1 14       	cp	r10, r1
    1880:	b1 04       	cpc	r11, r1
    1882:	89 f4       	brne	.+34     	; 0x18a6 <prvInitialiseNewTask+0x6a>
    1884:	15 c0       	rjmp	.+42     	; 0x18b0 <prvInitialiseNewTask+0x74>
    1886:	82 2f       	mov	r24, r18
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	f5 01       	movw	r30, r10
    188c:	e8 0f       	add	r30, r24
    188e:	f9 1f       	adc	r31, r25
    1890:	30 81       	ld	r19, Z
    1892:	de 01       	movw	r26, r28
    1894:	a8 0f       	add	r26, r24
    1896:	b9 1f       	adc	r27, r25
    1898:	5d 96       	adiw	r26, 0x1d	; 29
    189a:	3c 93       	st	X, r19
    189c:	80 81       	ld	r24, Z
    189e:	88 23       	and	r24, r24
    18a0:	29 f0       	breq	.+10     	; 0x18ac <prvInitialiseNewTask+0x70>
    18a2:	2f 5f       	subi	r18, 0xFF	; 255
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <prvInitialiseNewTask+0x6c>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	20 31       	cpi	r18, 0x10	; 16
    18aa:	68 f3       	brcs	.-38     	; 0x1886 <prvInitialiseNewTask+0x4a>
    18ac:	1c a6       	std	Y+44, r1	; 0x2c
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <prvInitialiseNewTask+0x76>
    18b0:	1d 8e       	std	Y+29, r1	; 0x1d
    18b2:	0a 30       	cpi	r16, 0x0A	; 10
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <prvInitialiseNewTask+0x7c>
    18b6:	09 e0       	ldi	r16, 0x09	; 9
    18b8:	0a 8f       	std	Y+26, r16	; 0x1a
    18ba:	0d a7       	std	Y+45, r16	; 0x2d
    18bc:	1e a6       	std	Y+46, r1	; 0x2e
    18be:	ce 01       	movw	r24, r28
    18c0:	02 96       	adiw	r24, 0x02	; 2
    18c2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <vListInitialiseItem>
    18c6:	ce 01       	movw	r24, r28
    18c8:	0e 96       	adiw	r24, 0x0e	; 14
    18ca:	0e 94 5e 04 	call	0x8bc	; 0x8bc <vListInitialiseItem>
    18ce:	db 87       	std	Y+11, r29	; 0x0b
    18d0:	ca 87       	std	Y+10, r28	; 0x0a
    18d2:	8a e0       	ldi	r24, 0x0A	; 10
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	80 1b       	sub	r24, r16
    18dc:	91 09       	sbc	r25, r1
    18de:	a1 09       	sbc	r26, r1
    18e0:	b1 09       	sbc	r27, r1
    18e2:	8e 87       	std	Y+14, r24	; 0x0e
    18e4:	9f 87       	std	Y+15, r25	; 0x0f
    18e6:	a8 8b       	std	Y+16, r26	; 0x10
    18e8:	b9 8b       	std	Y+17, r27	; 0x11
    18ea:	df 8b       	std	Y+23, r29	; 0x17
    18ec:	ce 8b       	std	Y+22, r28	; 0x16
    18ee:	84 e0       	ldi	r24, 0x04	; 4
    18f0:	fe 01       	movw	r30, r28
    18f2:	bf 96       	adiw	r30, 0x2f	; 47
    18f4:	df 01       	movw	r26, r30
    18f6:	1d 92       	st	X+, r1
    18f8:	8a 95       	dec	r24
    18fa:	e9 f7       	brne	.-6      	; 0x18f6 <prvInitialiseNewTask+0xba>
    18fc:	1b aa       	std	Y+51, r1	; 0x33
    18fe:	a3 01       	movw	r20, r6
    1900:	b2 01       	movw	r22, r4
    1902:	c4 01       	movw	r24, r8
    1904:	4f d8       	rcall	.-3938   	; 0x9a4 <pxPortInitialiseStack>
    1906:	99 83       	std	Y+1, r25	; 0x01
    1908:	88 83       	st	Y, r24
    190a:	e1 14       	cp	r14, r1
    190c:	f1 04       	cpc	r15, r1
    190e:	19 f0       	breq	.+6      	; 0x1916 <prvInitialiseNewTask+0xda>
    1910:	f7 01       	movw	r30, r14
    1912:	d1 83       	std	Z+1, r29	; 0x01
    1914:	c0 83       	st	Z, r28
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	7f 90       	pop	r7
    192e:	6f 90       	pop	r6
    1930:	5f 90       	pop	r5
    1932:	4f 90       	pop	r4
    1934:	08 95       	ret

00001936 <prvInitialiseTaskLists>:
    1936:	cf 93       	push	r28
    1938:	c0 e0       	ldi	r28, 0x00	; 0
    193a:	09 c0       	rjmp	.+18     	; 0x194e <prvInitialiseTaskLists+0x18>
    193c:	2b e0       	ldi	r18, 0x0B	; 11
    193e:	c2 9f       	mul	r28, r18
    1940:	c0 01       	movw	r24, r0
    1942:	11 24       	eor	r1, r1
    1944:	85 51       	subi	r24, 0x15	; 21
    1946:	9a 4e       	sbci	r25, 0xEA	; 234
    1948:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    194c:	cf 5f       	subi	r28, 0xFF	; 255
    194e:	ca 30       	cpi	r28, 0x0A	; 10
    1950:	a8 f3       	brcs	.-22     	; 0x193c <prvInitialiseTaskLists+0x6>
    1952:	80 ee       	ldi	r24, 0xE0	; 224
    1954:	95 e1       	ldi	r25, 0x15	; 21
    1956:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    195a:	85 ed       	ldi	r24, 0xD5	; 213
    195c:	95 e1       	ldi	r25, 0x15	; 21
    195e:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    1962:	86 ec       	ldi	r24, 0xC6	; 198
    1964:	95 e1       	ldi	r25, 0x15	; 21
    1966:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    196a:	8b eb       	ldi	r24, 0xBB	; 187
    196c:	95 e1       	ldi	r25, 0x15	; 21
    196e:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    1972:	8f ea       	ldi	r24, 0xAF	; 175
    1974:	95 e1       	ldi	r25, 0x15	; 21
    1976:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    197a:	80 ee       	ldi	r24, 0xE0	; 224
    197c:	95 e1       	ldi	r25, 0x15	; 21
    197e:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <pxDelayedTaskList+0x1>
    1982:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <pxDelayedTaskList>
    1986:	85 ed       	ldi	r24, 0xD5	; 213
    1988:	95 e1       	ldi	r25, 0x15	; 21
    198a:	90 93 d2 15 	sts	0x15D2, r25	; 0x8015d2 <pxOverflowDelayedTaskList+0x1>
    198e:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <pxOverflowDelayedTaskList>
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <prvAddNewTaskToReadyList>:
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	0f 92       	push	r0
    19a2:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxCurrentNumberOfTasks>
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	80 93 ae 15 	sts	0x15AE, r24	; 0x8015ae <uxCurrentNumberOfTasks>
    19ac:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    19b0:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    19b4:	89 2b       	or	r24, r25
    19b6:	51 f4       	brne	.+20     	; 0x19cc <prvAddNewTaskToReadyList+0x36>
    19b8:	d0 93 5a 16 	sts	0x165A, r29	; 0x80165a <pxCurrentTCB+0x1>
    19bc:	c0 93 59 16 	sts	0x1659, r28	; 0x801659 <pxCurrentTCB>
    19c0:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxCurrentNumberOfTasks>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	91 f4       	brne	.+36     	; 0x19ec <prvAddNewTaskToReadyList+0x56>
    19c8:	b6 df       	rcall	.-148    	; 0x1936 <prvInitialiseTaskLists>
    19ca:	10 c0       	rjmp	.+32     	; 0x19ec <prvAddNewTaskToReadyList+0x56>
    19cc:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <xSchedulerRunning>
    19d0:	81 11       	cpse	r24, r1
    19d2:	0c c0       	rjmp	.+24     	; 0x19ec <prvAddNewTaskToReadyList+0x56>
    19d4:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    19d8:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    19dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    19de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19e0:	89 17       	cp	r24, r25
    19e2:	20 f0       	brcs	.+8      	; 0x19ec <prvAddNewTaskToReadyList+0x56>
    19e4:	d0 93 5a 16 	sts	0x165A, r29	; 0x80165a <pxCurrentTCB+0x1>
    19e8:	c0 93 59 16 	sts	0x1659, r28	; 0x801659 <pxCurrentTCB>
    19ec:	80 91 a1 15 	lds	r24, 0x15A1	; 0x8015a1 <uxTaskNumber>
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
    19f2:	80 93 a1 15 	sts	0x15A1, r24	; 0x8015a1 <uxTaskNumber>
    19f6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    19f8:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    19fc:	8e 17       	cp	r24, r30
    19fe:	10 f4       	brcc	.+4      	; 0x1a04 <prvAddNewTaskToReadyList+0x6e>
    1a00:	e0 93 a9 15 	sts	0x15A9, r30	; 0x8015a9 <uxTopReadyPriority>
    1a04:	8b e0       	ldi	r24, 0x0B	; 11
    1a06:	8e 9f       	mul	r24, r30
    1a08:	f0 01       	movw	r30, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	e5 51       	subi	r30, 0x15	; 21
    1a0e:	fa 4e       	sbci	r31, 0xEA	; 234
    1a10:	01 80       	ldd	r0, Z+1	; 0x01
    1a12:	f2 81       	ldd	r31, Z+2	; 0x02
    1a14:	e0 2d       	mov	r30, r0
    1a16:	ff 83       	std	Y+7, r31	; 0x07
    1a18:	ee 83       	std	Y+6, r30	; 0x06
    1a1a:	26 81       	ldd	r18, Z+6	; 0x06
    1a1c:	37 81       	ldd	r19, Z+7	; 0x07
    1a1e:	39 87       	std	Y+9, r19	; 0x09
    1a20:	28 87       	std	Y+8, r18	; 0x08
    1a22:	a6 81       	ldd	r26, Z+6	; 0x06
    1a24:	b7 81       	ldd	r27, Z+7	; 0x07
    1a26:	9e 01       	movw	r18, r28
    1a28:	2e 5f       	subi	r18, 0xFE	; 254
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	15 96       	adiw	r26, 0x05	; 5
    1a2e:	3c 93       	st	X, r19
    1a30:	2e 93       	st	-X, r18
    1a32:	14 97       	sbiw	r26, 0x04	; 4
    1a34:	37 83       	std	Z+7, r19	; 0x07
    1a36:	26 83       	std	Z+6, r18	; 0x06
    1a38:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a3a:	8e 9f       	mul	r24, r30
    1a3c:	f0 01       	movw	r30, r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	e5 51       	subi	r30, 0x15	; 21
    1a42:	fa 4e       	sbci	r31, 0xEA	; 234
    1a44:	fd 87       	std	Y+13, r31	; 0x0d
    1a46:	ec 87       	std	Y+12, r30	; 0x0c
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	80 83       	st	Z, r24
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <xSchedulerRunning>
    1a56:	88 23       	and	r24, r24
    1a58:	51 f0       	breq	.+20     	; 0x1a6e <prvAddNewTaskToReadyList+0xd8>
    1a5a:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    1a5e:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1a62:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a66:	98 17       	cp	r25, r24
    1a68:	10 f4       	brcc	.+4      	; 0x1a6e <prvAddNewTaskToReadyList+0xd8>
    1a6a:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <prvCheckTasksWaitingTermination>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	1b c0       	rjmp	.+54     	; 0x1ab0 <prvCheckTasksWaitingTermination+0x3c>
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	0f 92       	push	r0
    1a80:	e0 91 c2 15 	lds	r30, 0x15C2	; 0x8015c2 <xTasksWaitingTermination+0x7>
    1a84:	f0 91 c3 15 	lds	r31, 0x15C3	; 0x8015c3 <xTasksWaitingTermination+0x8>
    1a88:	c0 85       	ldd	r28, Z+8	; 0x08
    1a8a:	d1 85       	ldd	r29, Z+9	; 0x09
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	02 96       	adiw	r24, 0x02	; 2
    1a90:	0e 94 9f 04 	call	0x93e	; 0x93e <uxListRemove>
    1a94:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxCurrentNumberOfTasks>
    1a98:	81 50       	subi	r24, 0x01	; 1
    1a9a:	80 93 ae 15 	sts	0x15AE, r24	; 0x8015ae <uxCurrentNumberOfTasks>
    1a9e:	80 91 ba 15 	lds	r24, 0x15BA	; 0x8015ba <uxDeletedTasksWaitingCleanUp>
    1aa2:	81 50       	subi	r24, 0x01	; 1
    1aa4:	80 93 ba 15 	sts	0x15BA, r24	; 0x8015ba <uxDeletedTasksWaitingCleanUp>
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	ce 01       	movw	r24, r28
    1aae:	b9 de       	rcall	.-654    	; 0x1822 <prvDeleteTCB>
    1ab0:	80 91 ba 15 	lds	r24, 0x15BA	; 0x8015ba <uxDeletedTasksWaitingCleanUp>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	e1 cf       	rjmp	.-62     	; 0x1a7a <prvCheckTasksWaitingTermination+0x6>
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <prvAddCurrentTaskToDelayedList>:
    1abe:	8f 92       	push	r8
    1ac0:	9f 92       	push	r9
    1ac2:	af 92       	push	r10
    1ac4:	bf 92       	push	r11
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	6b 01       	movw	r12, r22
    1ad4:	7c 01       	movw	r14, r24
    1ad6:	c4 2f       	mov	r28, r20
    1ad8:	80 90 aa 15 	lds	r8, 0x15AA	; 0x8015aa <xTickCount>
    1adc:	90 90 ab 15 	lds	r9, 0x15AB	; 0x8015ab <xTickCount+0x1>
    1ae0:	a0 90 ac 15 	lds	r10, 0x15AC	; 0x8015ac <xTickCount+0x2>
    1ae4:	b0 90 ad 15 	lds	r11, 0x15AD	; 0x8015ad <xTickCount+0x3>
    1ae8:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    1aec:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1af0:	02 96       	adiw	r24, 0x02	; 2
    1af2:	0e 94 9f 04 	call	0x93e	; 0x93e <uxListRemove>
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	c8 16       	cp	r12, r24
    1afa:	d8 06       	cpc	r13, r24
    1afc:	e8 06       	cpc	r14, r24
    1afe:	f8 06       	cpc	r15, r24
    1b00:	b1 f5       	brne	.+108    	; 0x1b6e <prvAddCurrentTaskToDelayedList+0xb0>
    1b02:	cc 23       	and	r28, r28
    1b04:	a1 f1       	breq	.+104    	; 0x1b6e <prvAddCurrentTaskToDelayedList+0xb0>
    1b06:	ef ea       	ldi	r30, 0xAF	; 175
    1b08:	f5 e1       	ldi	r31, 0x15	; 21
    1b0a:	a1 81       	ldd	r26, Z+1	; 0x01
    1b0c:	b2 81       	ldd	r27, Z+2	; 0x02
    1b0e:	c0 91 59 16 	lds	r28, 0x1659	; 0x801659 <pxCurrentTCB>
    1b12:	d0 91 5a 16 	lds	r29, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b16:	bf 83       	std	Y+7, r27	; 0x07
    1b18:	ae 83       	std	Y+6, r26	; 0x06
    1b1a:	c0 91 59 16 	lds	r28, 0x1659	; 0x801659 <pxCurrentTCB>
    1b1e:	d0 91 5a 16 	lds	r29, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b22:	16 96       	adiw	r26, 0x06	; 6
    1b24:	8d 91       	ld	r24, X+
    1b26:	9c 91       	ld	r25, X
    1b28:	17 97       	sbiw	r26, 0x07	; 7
    1b2a:	99 87       	std	Y+9, r25	; 0x09
    1b2c:	88 87       	std	Y+8, r24	; 0x08
    1b2e:	16 96       	adiw	r26, 0x06	; 6
    1b30:	cd 91       	ld	r28, X+
    1b32:	dc 91       	ld	r29, X
    1b34:	17 97       	sbiw	r26, 0x07	; 7
    1b36:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    1b3a:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b3e:	02 96       	adiw	r24, 0x02	; 2
    1b40:	9d 83       	std	Y+5, r25	; 0x05
    1b42:	8c 83       	std	Y+4, r24	; 0x04
    1b44:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    1b48:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b4c:	02 96       	adiw	r24, 0x02	; 2
    1b4e:	17 96       	adiw	r26, 0x07	; 7
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
    1b54:	16 97       	sbiw	r26, 0x06	; 6
    1b56:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
    1b5a:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b5e:	1d 96       	adiw	r26, 0x0d	; 13
    1b60:	fc 93       	st	X, r31
    1b62:	ee 93       	st	-X, r30
    1b64:	1c 97       	sbiw	r26, 0x0c	; 12
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	80 83       	st	Z, r24
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <prvAddCurrentTaskToDelayedList+0x12e>
    1b6e:	c8 0c       	add	r12, r8
    1b70:	d9 1c       	adc	r13, r9
    1b72:	ea 1c       	adc	r14, r10
    1b74:	fb 1c       	adc	r15, r11
    1b76:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    1b7a:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b7e:	c2 82       	std	Z+2, r12	; 0x02
    1b80:	d3 82       	std	Z+3, r13	; 0x03
    1b82:	e4 82       	std	Z+4, r14	; 0x04
    1b84:	f5 82       	std	Z+5, r15	; 0x05
    1b86:	c8 14       	cp	r12, r8
    1b88:	d9 04       	cpc	r13, r9
    1b8a:	ea 04       	cpc	r14, r10
    1b8c:	fb 04       	cpc	r15, r11
    1b8e:	68 f4       	brcc	.+26     	; 0x1baa <prvAddCurrentTaskToDelayedList+0xec>
    1b90:	60 91 59 16 	lds	r22, 0x1659	; 0x801659 <pxCurrentTCB>
    1b94:	70 91 5a 16 	lds	r23, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1b98:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <pxOverflowDelayedTaskList>
    1b9c:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <pxOverflowDelayedTaskList+0x1>
    1ba0:	6e 5f       	subi	r22, 0xFE	; 254
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <vListInsert>
    1ba8:	21 c0       	rjmp	.+66     	; 0x1bec <prvAddCurrentTaskToDelayedList+0x12e>
    1baa:	60 91 59 16 	lds	r22, 0x1659	; 0x801659 <pxCurrentTCB>
    1bae:	70 91 5a 16 	lds	r23, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1bb2:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxDelayedTaskList>
    1bb6:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <pxDelayedTaskList+0x1>
    1bba:	6e 5f       	subi	r22, 0xFE	; 254
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	0e 94 62 04 	call	0x8c4	; 0x8c4 <vListInsert>
    1bc2:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xNextTaskUnblockTime>
    1bc6:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xNextTaskUnblockTime+0x1>
    1bca:	a0 91 9f 15 	lds	r26, 0x159F	; 0x80159f <xNextTaskUnblockTime+0x2>
    1bce:	b0 91 a0 15 	lds	r27, 0x15A0	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1bd2:	c8 16       	cp	r12, r24
    1bd4:	d9 06       	cpc	r13, r25
    1bd6:	ea 06       	cpc	r14, r26
    1bd8:	fb 06       	cpc	r15, r27
    1bda:	40 f4       	brcc	.+16     	; 0x1bec <prvAddCurrentTaskToDelayedList+0x12e>
    1bdc:	c0 92 9d 15 	sts	0x159D, r12	; 0x80159d <xNextTaskUnblockTime>
    1be0:	d0 92 9e 15 	sts	0x159E, r13	; 0x80159e <xNextTaskUnblockTime+0x1>
    1be4:	e0 92 9f 15 	sts	0x159F, r14	; 0x80159f <xNextTaskUnblockTime+0x2>
    1be8:	f0 92 a0 15 	sts	0x15A0, r15	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	08 95       	ret

00001c02 <xTaskCreate>:
    1c02:	2f 92       	push	r2
    1c04:	3f 92       	push	r3
    1c06:	4f 92       	push	r4
    1c08:	5f 92       	push	r5
    1c0a:	6f 92       	push	r6
    1c0c:	7f 92       	push	r7
    1c0e:	8f 92       	push	r8
    1c10:	9f 92       	push	r9
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	3c 01       	movw	r6, r24
    1c26:	1b 01       	movw	r2, r22
    1c28:	4a 01       	movw	r8, r20
    1c2a:	29 01       	movw	r4, r18
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	0e 94 67 03 	call	0x6ce	; 0x6ce <pvPortMalloc>
    1c32:	6c 01       	movw	r12, r24
    1c34:	89 2b       	or	r24, r25
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <xTaskCreate+0x52>
    1c38:	84 e3       	ldi	r24, 0x34	; 52
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 67 03 	call	0x6ce	; 0x6ce <pvPortMalloc>
    1c40:	ec 01       	movw	r28, r24
    1c42:	89 2b       	or	r24, r25
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <xTaskCreate+0x4a>
    1c46:	dc 8e       	std	Y+28, r13	; 0x1c
    1c48:	cb 8e       	std	Y+27, r12	; 0x1b
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <xTaskCreate+0x56>
    1c4c:	c6 01       	movw	r24, r12
    1c4e:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <xTaskCreate+0x56>
    1c54:	c0 e0       	ldi	r28, 0x00	; 0
    1c56:	d0 e0       	ldi	r29, 0x00	; 0
    1c58:	20 97       	sbiw	r28, 0x00	; 0
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <xTaskCreate+0x72>
    1c5c:	a1 2c       	mov	r10, r1
    1c5e:	b1 2c       	mov	r11, r1
    1c60:	6e 01       	movw	r12, r28
    1c62:	92 01       	movw	r18, r4
    1c64:	a4 01       	movw	r20, r8
    1c66:	b1 01       	movw	r22, r2
    1c68:	c3 01       	movw	r24, r6
    1c6a:	e8 dd       	rcall	.-1072   	; 0x183c <prvInitialiseNewTask>
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	93 de       	rcall	.-730    	; 0x1996 <prvAddNewTaskToReadyList>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <xTaskCreate+0x74>
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	bf 90       	pop	r11
    1c86:	af 90       	pop	r10
    1c88:	9f 90       	pop	r9
    1c8a:	8f 90       	pop	r8
    1c8c:	7f 90       	pop	r7
    1c8e:	6f 90       	pop	r6
    1c90:	5f 90       	pop	r5
    1c92:	4f 90       	pop	r4
    1c94:	3f 90       	pop	r3
    1c96:	2f 90       	pop	r2
    1c98:	08 95       	ret

00001c9a <vTaskStartScheduler>:
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	0f 2e       	mov	r0, r31
    1ca2:	fb e9       	ldi	r31, 0x9B	; 155
    1ca4:	ef 2e       	mov	r14, r31
    1ca6:	f5 e1       	ldi	r31, 0x15	; 21
    1ca8:	ff 2e       	mov	r15, r31
    1caa:	f0 2d       	mov	r31, r0
    1cac:	00 e0       	ldi	r16, 0x00	; 0
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 ec       	ldi	r20, 0xC0	; 192
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	6d e9       	ldi	r22, 0x9D	; 157
    1cb8:	72 e0       	ldi	r23, 0x02	; 2
    1cba:	8d ec       	ldi	r24, 0xCD	; 205
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a1 df       	rcall	.-190    	; 0x1c02 <xTaskCreate>
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <vTaskStartScheduler+0x2e>
    1cc4:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <xTimerCreateTimerTask>
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	c9 f4       	brne	.+50     	; 0x1cfe <vTaskStartScheduler+0x64>
    1ccc:	f8 94       	cli
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	9f ef       	ldi	r25, 0xFF	; 255
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <xNextTaskUnblockTime>
    1cd8:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <xNextTaskUnblockTime+0x1>
    1cdc:	a0 93 9f 15 	sts	0x159F, r26	; 0x80159f <xNextTaskUnblockTime+0x2>
    1ce0:	b0 93 a0 15 	sts	0x15A0, r27	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 93 a8 15 	sts	0x15A8, r24	; 0x8015a8 <xSchedulerRunning>
    1cea:	10 92 aa 15 	sts	0x15AA, r1	; 0x8015aa <xTickCount>
    1cee:	10 92 ab 15 	sts	0x15AB, r1	; 0x8015ab <xTickCount+0x1>
    1cf2:	10 92 ac 15 	sts	0x15AC, r1	; 0x8015ac <xTickCount+0x2>
    1cf6:	10 92 ad 15 	sts	0x15AD, r1	; 0x8015ad <xTickCount+0x3>
    1cfa:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <xPortStartScheduler>
    1cfe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	08 95       	ret

00001d0a <vTaskSuspendAll>:
    1d0a:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
    1d10:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <uxSchedulerSuspended>
    1d14:	08 95       	ret

00001d16 <xTaskGetTickCount>:
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	0f 92       	push	r0
    1d1c:	60 91 aa 15 	lds	r22, 0x15AA	; 0x8015aa <xTickCount>
    1d20:	70 91 ab 15 	lds	r23, 0x15AB	; 0x8015ab <xTickCount+0x1>
    1d24:	80 91 ac 15 	lds	r24, 0x15AC	; 0x8015ac <xTickCount+0x2>
    1d28:	90 91 ad 15 	lds	r25, 0x15AD	; 0x8015ad <xTickCount+0x3>
    1d2c:	0f 90       	pop	r0
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	08 95       	ret

00001d32 <xTaskIncrementTick>:
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    1d42:	81 11       	cpse	r24, r1
    1d44:	05 c1       	rjmp	.+522    	; 0x1f50 <xTaskIncrementTick+0x21e>
    1d46:	c0 90 aa 15 	lds	r12, 0x15AA	; 0x8015aa <xTickCount>
    1d4a:	d0 90 ab 15 	lds	r13, 0x15AB	; 0x8015ab <xTickCount+0x1>
    1d4e:	e0 90 ac 15 	lds	r14, 0x15AC	; 0x8015ac <xTickCount+0x2>
    1d52:	f0 90 ad 15 	lds	r15, 0x15AD	; 0x8015ad <xTickCount+0x3>
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	c8 1a       	sub	r12, r24
    1d5a:	d8 0a       	sbc	r13, r24
    1d5c:	e8 0a       	sbc	r14, r24
    1d5e:	f8 0a       	sbc	r15, r24
    1d60:	c0 92 aa 15 	sts	0x15AA, r12	; 0x8015aa <xTickCount>
    1d64:	d0 92 ab 15 	sts	0x15AB, r13	; 0x8015ab <xTickCount+0x1>
    1d68:	e0 92 ac 15 	sts	0x15AC, r14	; 0x8015ac <xTickCount+0x2>
    1d6c:	f0 92 ad 15 	sts	0x15AD, r15	; 0x8015ad <xTickCount+0x3>
    1d70:	c1 14       	cp	r12, r1
    1d72:	d1 04       	cpc	r13, r1
    1d74:	e1 04       	cpc	r14, r1
    1d76:	f1 04       	cpc	r15, r1
    1d78:	b1 f4       	brne	.+44     	; 0x1da6 <xTaskIncrementTick+0x74>
    1d7a:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxDelayedTaskList>
    1d7e:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <pxDelayedTaskList+0x1>
    1d82:	20 91 d1 15 	lds	r18, 0x15D1	; 0x8015d1 <pxOverflowDelayedTaskList>
    1d86:	30 91 d2 15 	lds	r19, 0x15D2	; 0x8015d2 <pxOverflowDelayedTaskList+0x1>
    1d8a:	30 93 d4 15 	sts	0x15D4, r19	; 0x8015d4 <pxDelayedTaskList+0x1>
    1d8e:	20 93 d3 15 	sts	0x15D3, r18	; 0x8015d3 <pxDelayedTaskList>
    1d92:	90 93 d2 15 	sts	0x15D2, r25	; 0x8015d2 <pxOverflowDelayedTaskList+0x1>
    1d96:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <pxOverflowDelayedTaskList>
    1d9a:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <xNumOfOverflows>
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	80 93 a2 15 	sts	0x15A2, r24	; 0x8015a2 <xNumOfOverflows>
    1da4:	17 dd       	rcall	.-1490   	; 0x17d4 <prvResetNextTaskUnblockTime>
    1da6:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xNextTaskUnblockTime>
    1daa:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xNextTaskUnblockTime+0x1>
    1dae:	a0 91 9f 15 	lds	r26, 0x159F	; 0x80159f <xNextTaskUnblockTime+0x2>
    1db2:	b0 91 a0 15 	lds	r27, 0x15A0	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1db6:	c8 16       	cp	r12, r24
    1db8:	d9 06       	cpc	r13, r25
    1dba:	ea 06       	cpc	r14, r26
    1dbc:	fb 06       	cpc	r15, r27
    1dbe:	20 f4       	brcc	.+8      	; 0x1dc8 <xTaskIncrementTick+0x96>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	b2 c0       	rjmp	.+356    	; 0x1f28 <xTaskIncrementTick+0x1f6>
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <xTaskIncrementTick+0x98>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <pxDelayedTaskList>
    1dce:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <pxDelayedTaskList+0x1>
    1dd2:	90 81       	ld	r25, Z
    1dd4:	91 11       	cpse	r25, r1
    1dd6:	0c c0       	rjmp	.+24     	; 0x1df0 <xTaskIncrementTick+0xbe>
    1dd8:	4f ef       	ldi	r20, 0xFF	; 255
    1dda:	5f ef       	ldi	r21, 0xFF	; 255
    1ddc:	ba 01       	movw	r22, r20
    1dde:	40 93 9d 15 	sts	0x159D, r20	; 0x80159d <xNextTaskUnblockTime>
    1de2:	50 93 9e 15 	sts	0x159E, r21	; 0x80159e <xNextTaskUnblockTime+0x1>
    1de6:	60 93 9f 15 	sts	0x159F, r22	; 0x80159f <xNextTaskUnblockTime+0x2>
    1dea:	70 93 a0 15 	sts	0x15A0, r23	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1dee:	9c c0       	rjmp	.+312    	; 0x1f28 <xTaskIncrementTick+0x1f6>
    1df0:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <pxDelayedTaskList>
    1df4:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <pxDelayedTaskList+0x1>
    1df8:	07 80       	ldd	r0, Z+7	; 0x07
    1dfa:	f0 85       	ldd	r31, Z+8	; 0x08
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	00 84       	ldd	r0, Z+8	; 0x08
    1e00:	f1 85       	ldd	r31, Z+9	; 0x09
    1e02:	e0 2d       	mov	r30, r0
    1e04:	42 81       	ldd	r20, Z+2	; 0x02
    1e06:	53 81       	ldd	r21, Z+3	; 0x03
    1e08:	64 81       	ldd	r22, Z+4	; 0x04
    1e0a:	75 81       	ldd	r23, Z+5	; 0x05
    1e0c:	c4 16       	cp	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	e6 06       	cpc	r14, r22
    1e12:	f7 06       	cpc	r15, r23
    1e14:	48 f4       	brcc	.+18     	; 0x1e28 <xTaskIncrementTick+0xf6>
    1e16:	40 93 9d 15 	sts	0x159D, r20	; 0x80159d <xNextTaskUnblockTime>
    1e1a:	50 93 9e 15 	sts	0x159E, r21	; 0x80159e <xNextTaskUnblockTime+0x1>
    1e1e:	60 93 9f 15 	sts	0x159F, r22	; 0x80159f <xNextTaskUnblockTime+0x2>
    1e22:	70 93 a0 15 	sts	0x15A0, r23	; 0x8015a0 <xNextTaskUnblockTime+0x3>
    1e26:	80 c0       	rjmp	.+256    	; 0x1f28 <xTaskIncrementTick+0x1f6>
    1e28:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e2a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e2c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e2e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e30:	20 85       	ldd	r18, Z+8	; 0x08
    1e32:	31 85       	ldd	r19, Z+9	; 0x09
    1e34:	3f 83       	std	Y+7, r19	; 0x07
    1e36:	2e 83       	std	Y+6, r18	; 0x06
    1e38:	c0 85       	ldd	r28, Z+8	; 0x08
    1e3a:	d1 85       	ldd	r29, Z+9	; 0x09
    1e3c:	26 81       	ldd	r18, Z+6	; 0x06
    1e3e:	37 81       	ldd	r19, Z+7	; 0x07
    1e40:	3d 83       	std	Y+5, r19	; 0x05
    1e42:	2c 83       	std	Y+4, r18	; 0x04
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	4d 91       	ld	r20, X+
    1e48:	5c 91       	ld	r21, X
    1e4a:	12 97       	sbiw	r26, 0x02	; 2
    1e4c:	9f 01       	movw	r18, r30
    1e4e:	2e 5f       	subi	r18, 0xFE	; 254
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	42 17       	cp	r20, r18
    1e54:	53 07       	cpc	r21, r19
    1e56:	31 f4       	brne	.+12     	; 0x1e64 <xTaskIncrementTick+0x132>
    1e58:	40 85       	ldd	r20, Z+8	; 0x08
    1e5a:	51 85       	ldd	r21, Z+9	; 0x09
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	5c 93       	st	X, r21
    1e60:	4e 93       	st	-X, r20
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	15 86       	std	Z+13, r1	; 0x0d
    1e66:	14 86       	std	Z+12, r1	; 0x0c
    1e68:	9c 91       	ld	r25, X
    1e6a:	91 50       	subi	r25, 0x01	; 1
    1e6c:	9c 93       	st	X, r25
    1e6e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e70:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e72:	10 97       	sbiw	r26, 0x00	; 0
    1e74:	09 f1       	breq	.+66     	; 0x1eb8 <xTaskIncrementTick+0x186>
    1e76:	c2 89       	ldd	r28, Z+18	; 0x12
    1e78:	d3 89       	ldd	r29, Z+19	; 0x13
    1e7a:	44 89       	ldd	r20, Z+20	; 0x14
    1e7c:	55 89       	ldd	r21, Z+21	; 0x15
    1e7e:	5f 83       	std	Y+7, r21	; 0x07
    1e80:	4e 83       	std	Y+6, r20	; 0x06
    1e82:	c4 89       	ldd	r28, Z+20	; 0x14
    1e84:	d5 89       	ldd	r29, Z+21	; 0x15
    1e86:	42 89       	ldd	r20, Z+18	; 0x12
    1e88:	53 89       	ldd	r21, Z+19	; 0x13
    1e8a:	5d 83       	std	Y+5, r21	; 0x05
    1e8c:	4c 83       	std	Y+4, r20	; 0x04
    1e8e:	11 96       	adiw	r26, 0x01	; 1
    1e90:	6d 91       	ld	r22, X+
    1e92:	7c 91       	ld	r23, X
    1e94:	12 97       	sbiw	r26, 0x02	; 2
    1e96:	af 01       	movw	r20, r30
    1e98:	42 5f       	subi	r20, 0xF2	; 242
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	64 17       	cp	r22, r20
    1e9e:	75 07       	cpc	r23, r21
    1ea0:	31 f4       	brne	.+12     	; 0x1eae <xTaskIncrementTick+0x17c>
    1ea2:	44 89       	ldd	r20, Z+20	; 0x14
    1ea4:	55 89       	ldd	r21, Z+21	; 0x15
    1ea6:	12 96       	adiw	r26, 0x02	; 2
    1ea8:	5c 93       	st	X, r21
    1eaa:	4e 93       	st	-X, r20
    1eac:	11 97       	sbiw	r26, 0x01	; 1
    1eae:	11 8e       	std	Z+25, r1	; 0x19
    1eb0:	10 8e       	std	Z+24, r1	; 0x18
    1eb2:	9c 91       	ld	r25, X
    1eb4:	91 50       	subi	r25, 0x01	; 1
    1eb6:	9c 93       	st	X, r25
    1eb8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1eba:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    1ebe:	9a 17       	cp	r25, r26
    1ec0:	10 f4       	brcc	.+4      	; 0x1ec6 <xTaskIncrementTick+0x194>
    1ec2:	a0 93 a9 15 	sts	0x15A9, r26	; 0x8015a9 <uxTopReadyPriority>
    1ec6:	9b e0       	ldi	r25, 0x0B	; 11
    1ec8:	9a 9f       	mul	r25, r26
    1eca:	d0 01       	movw	r26, r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	a5 51       	subi	r26, 0x15	; 21
    1ed0:	ba 4e       	sbci	r27, 0xEA	; 234
    1ed2:	11 96       	adiw	r26, 0x01	; 1
    1ed4:	0d 90       	ld	r0, X+
    1ed6:	bc 91       	ld	r27, X
    1ed8:	a0 2d       	mov	r26, r0
    1eda:	b7 83       	std	Z+7, r27	; 0x07
    1edc:	a6 83       	std	Z+6, r26	; 0x06
    1ede:	16 96       	adiw	r26, 0x06	; 6
    1ee0:	4d 91       	ld	r20, X+
    1ee2:	5c 91       	ld	r21, X
    1ee4:	17 97       	sbiw	r26, 0x07	; 7
    1ee6:	51 87       	std	Z+9, r21	; 0x09
    1ee8:	40 87       	std	Z+8, r20	; 0x08
    1eea:	16 96       	adiw	r26, 0x06	; 6
    1eec:	cd 91       	ld	r28, X+
    1eee:	dc 91       	ld	r29, X
    1ef0:	17 97       	sbiw	r26, 0x07	; 7
    1ef2:	3d 83       	std	Y+5, r19	; 0x05
    1ef4:	2c 83       	std	Y+4, r18	; 0x04
    1ef6:	17 96       	adiw	r26, 0x07	; 7
    1ef8:	3c 93       	st	X, r19
    1efa:	2e 93       	st	-X, r18
    1efc:	16 97       	sbiw	r26, 0x06	; 6
    1efe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f00:	9a 9f       	mul	r25, r26
    1f02:	d0 01       	movw	r26, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	a5 51       	subi	r26, 0x15	; 21
    1f08:	ba 4e       	sbci	r27, 0xEA	; 234
    1f0a:	b5 87       	std	Z+13, r27	; 0x0d
    1f0c:	a4 87       	std	Z+12, r26	; 0x0c
    1f0e:	9c 91       	ld	r25, X
    1f10:	9f 5f       	subi	r25, 0xFF	; 255
    1f12:	9c 93       	st	X, r25
    1f14:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f16:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    1f1a:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1f1e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f20:	29 17       	cp	r18, r25
    1f22:	08 f0       	brcs	.+2      	; 0x1f26 <xTaskIncrementTick+0x1f4>
    1f24:	4f cf       	rjmp	.-354    	; 0x1dc4 <xTaskIncrementTick+0x92>
    1f26:	51 cf       	rjmp	.-350    	; 0x1dca <xTaskIncrementTick+0x98>
    1f28:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    1f2c:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    1f30:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1f32:	9b e0       	ldi	r25, 0x0B	; 11
    1f34:	e9 9f       	mul	r30, r25
    1f36:	f0 01       	movw	r30, r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	e5 51       	subi	r30, 0x15	; 21
    1f3c:	fa 4e       	sbci	r31, 0xEA	; 234
    1f3e:	90 81       	ld	r25, Z
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <xTaskIncrementTick+0x214>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 91 a3 15 	lds	r25, 0x15A3	; 0x8015a3 <xYieldPending>
    1f4a:	91 11       	cpse	r25, r1
    1f4c:	16 c0       	rjmp	.+44     	; 0x1f7a <xTaskIncrementTick+0x248>
    1f4e:	16 c0       	rjmp	.+44     	; 0x1f7c <xTaskIncrementTick+0x24a>
    1f50:	80 91 a4 15 	lds	r24, 0x15A4	; 0x8015a4 <xPendedTicks>
    1f54:	90 91 a5 15 	lds	r25, 0x15A5	; 0x8015a5 <xPendedTicks+0x1>
    1f58:	a0 91 a6 15 	lds	r26, 0x15A6	; 0x8015a6 <xPendedTicks+0x2>
    1f5c:	b0 91 a7 15 	lds	r27, 0x15A7	; 0x8015a7 <xPendedTicks+0x3>
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	a1 1d       	adc	r26, r1
    1f64:	b1 1d       	adc	r27, r1
    1f66:	80 93 a4 15 	sts	0x15A4, r24	; 0x8015a4 <xPendedTicks>
    1f6a:	90 93 a5 15 	sts	0x15A5, r25	; 0x8015a5 <xPendedTicks+0x1>
    1f6e:	a0 93 a6 15 	sts	0x15A6, r26	; 0x8015a6 <xPendedTicks+0x2>
    1f72:	b0 93 a7 15 	sts	0x15A7, r27	; 0x8015a7 <xPendedTicks+0x3>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <xTaskIncrementTick+0x24a>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	08 95       	ret

00001f8a <xTaskResumeAll>:
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	0f 92       	push	r0
    1f9c:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    1fa0:	81 50       	subi	r24, 0x01	; 1
    1fa2:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <uxSchedulerSuspended>
    1fa6:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    1faa:	81 11       	cpse	r24, r1
    1fac:	be c0       	rjmp	.+380    	; 0x212a <__DATA_REGION_LENGTH__+0x12a>
    1fae:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxCurrentNumberOfTasks>
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	88 c0       	rjmp	.+272    	; 0x20c6 <__DATA_REGION_LENGTH__+0xc6>
    1fb6:	bc c0       	rjmp	.+376    	; 0x2130 <__DATA_REGION_LENGTH__+0x130>
    1fb8:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <xPendingReadyList+0x7>
    1fbc:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <xPendingReadyList+0x8>
    1fc0:	00 84       	ldd	r0, Z+8	; 0x08
    1fc2:	f1 85       	ldd	r31, Z+9	; 0x09
    1fc4:	e0 2d       	mov	r30, r0
    1fc6:	a0 8d       	ldd	r26, Z+24	; 0x18
    1fc8:	b1 8d       	ldd	r27, Z+25	; 0x19
    1fca:	c2 89       	ldd	r28, Z+18	; 0x12
    1fcc:	d3 89       	ldd	r29, Z+19	; 0x13
    1fce:	84 89       	ldd	r24, Z+20	; 0x14
    1fd0:	95 89       	ldd	r25, Z+21	; 0x15
    1fd2:	9f 83       	std	Y+7, r25	; 0x07
    1fd4:	8e 83       	std	Y+6, r24	; 0x06
    1fd6:	c4 89       	ldd	r28, Z+20	; 0x14
    1fd8:	d5 89       	ldd	r29, Z+21	; 0x15
    1fda:	82 89       	ldd	r24, Z+18	; 0x12
    1fdc:	93 89       	ldd	r25, Z+19	; 0x13
    1fde:	9d 83       	std	Y+5, r25	; 0x05
    1fe0:	8c 83       	std	Y+4, r24	; 0x04
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	2d 91       	ld	r18, X+
    1fe6:	3c 91       	ld	r19, X
    1fe8:	12 97       	sbiw	r26, 0x02	; 2
    1fea:	cf 01       	movw	r24, r30
    1fec:	0e 96       	adiw	r24, 0x0e	; 14
    1fee:	28 17       	cp	r18, r24
    1ff0:	39 07       	cpc	r19, r25
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <__DATA_REGION_LENGTH__>
    1ff4:	84 89       	ldd	r24, Z+20	; 0x14
    1ff6:	95 89       	ldd	r25, Z+21	; 0x15
    1ff8:	12 96       	adiw	r26, 0x02	; 2
    1ffa:	9c 93       	st	X, r25
    1ffc:	8e 93       	st	-X, r24
    1ffe:	11 97       	sbiw	r26, 0x01	; 1
    2000:	11 8e       	std	Z+25, r1	; 0x19
    2002:	10 8e       	std	Z+24, r1	; 0x18
    2004:	8c 91       	ld	r24, X
    2006:	81 50       	subi	r24, 0x01	; 1
    2008:	8c 93       	st	X, r24
    200a:	a4 85       	ldd	r26, Z+12	; 0x0c
    200c:	b5 85       	ldd	r27, Z+13	; 0x0d
    200e:	c6 81       	ldd	r28, Z+6	; 0x06
    2010:	d7 81       	ldd	r29, Z+7	; 0x07
    2012:	80 85       	ldd	r24, Z+8	; 0x08
    2014:	91 85       	ldd	r25, Z+9	; 0x09
    2016:	9f 83       	std	Y+7, r25	; 0x07
    2018:	8e 83       	std	Y+6, r24	; 0x06
    201a:	c0 85       	ldd	r28, Z+8	; 0x08
    201c:	d1 85       	ldd	r29, Z+9	; 0x09
    201e:	86 81       	ldd	r24, Z+6	; 0x06
    2020:	97 81       	ldd	r25, Z+7	; 0x07
    2022:	9d 83       	std	Y+5, r25	; 0x05
    2024:	8c 83       	std	Y+4, r24	; 0x04
    2026:	11 96       	adiw	r26, 0x01	; 1
    2028:	8d 91       	ld	r24, X+
    202a:	9c 91       	ld	r25, X
    202c:	12 97       	sbiw	r26, 0x02	; 2
    202e:	9f 01       	movw	r18, r30
    2030:	2e 5f       	subi	r18, 0xFE	; 254
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	82 17       	cp	r24, r18
    2036:	93 07       	cpc	r25, r19
    2038:	31 f4       	brne	.+12     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    203a:	80 85       	ldd	r24, Z+8	; 0x08
    203c:	91 85       	ldd	r25, Z+9	; 0x09
    203e:	12 96       	adiw	r26, 0x02	; 2
    2040:	9c 93       	st	X, r25
    2042:	8e 93       	st	-X, r24
    2044:	11 97       	sbiw	r26, 0x01	; 1
    2046:	15 86       	std	Z+13, r1	; 0x0d
    2048:	14 86       	std	Z+12, r1	; 0x0c
    204a:	8c 91       	ld	r24, X
    204c:	81 50       	subi	r24, 0x01	; 1
    204e:	8c 93       	st	X, r24
    2050:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2052:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    2056:	8a 17       	cp	r24, r26
    2058:	10 f4       	brcc	.+4      	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    205a:	a0 93 a9 15 	sts	0x15A9, r26	; 0x8015a9 <uxTopReadyPriority>
    205e:	8b e0       	ldi	r24, 0x0B	; 11
    2060:	8a 9f       	mul	r24, r26
    2062:	d0 01       	movw	r26, r0
    2064:	11 24       	eor	r1, r1
    2066:	a5 51       	subi	r26, 0x15	; 21
    2068:	ba 4e       	sbci	r27, 0xEA	; 234
    206a:	11 96       	adiw	r26, 0x01	; 1
    206c:	0d 90       	ld	r0, X+
    206e:	bc 91       	ld	r27, X
    2070:	a0 2d       	mov	r26, r0
    2072:	b7 83       	std	Z+7, r27	; 0x07
    2074:	a6 83       	std	Z+6, r26	; 0x06
    2076:	16 96       	adiw	r26, 0x06	; 6
    2078:	4d 91       	ld	r20, X+
    207a:	5c 91       	ld	r21, X
    207c:	17 97       	sbiw	r26, 0x07	; 7
    207e:	51 87       	std	Z+9, r21	; 0x09
    2080:	40 87       	std	Z+8, r20	; 0x08
    2082:	16 96       	adiw	r26, 0x06	; 6
    2084:	cd 91       	ld	r28, X+
    2086:	dc 91       	ld	r29, X
    2088:	17 97       	sbiw	r26, 0x07	; 7
    208a:	3d 83       	std	Y+5, r19	; 0x05
    208c:	2c 83       	std	Y+4, r18	; 0x04
    208e:	17 96       	adiw	r26, 0x07	; 7
    2090:	3c 93       	st	X, r19
    2092:	2e 93       	st	-X, r18
    2094:	16 97       	sbiw	r26, 0x06	; 6
    2096:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2098:	8a 9f       	mul	r24, r26
    209a:	d0 01       	movw	r26, r0
    209c:	11 24       	eor	r1, r1
    209e:	a5 51       	subi	r26, 0x15	; 21
    20a0:	ba 4e       	sbci	r27, 0xEA	; 234
    20a2:	b5 87       	std	Z+13, r27	; 0x0d
    20a4:	a4 87       	std	Z+12, r26	; 0x0c
    20a6:	8c 91       	ld	r24, X
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	8c 93       	st	X, r24
    20ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    20ae:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
    20b2:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    20b6:	5a 96       	adiw	r26, 0x1a	; 26
    20b8:	8c 91       	ld	r24, X
    20ba:	98 17       	cp	r25, r24
    20bc:	30 f0       	brcs	.+12     	; 0x20ca <__DATA_REGION_LENGTH__+0xca>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <xYieldPending>
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <__DATA_REGION_LENGTH__+0xca>
    20c6:	e0 e0       	ldi	r30, 0x00	; 0
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 91 c6 15 	lds	r24, 0x15C6	; 0x8015c6 <xPendingReadyList>
    20ce:	81 11       	cpse	r24, r1
    20d0:	73 cf       	rjmp	.-282    	; 0x1fb8 <xTaskResumeAll+0x2e>
    20d2:	ef 2b       	or	r30, r31
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20d6:	7e db       	rcall	.-2308   	; 0x17d4 <prvResetNextTaskUnblockTime>
    20d8:	c0 90 a4 15 	lds	r12, 0x15A4	; 0x8015a4 <xPendedTicks>
    20dc:	d0 90 a5 15 	lds	r13, 0x15A5	; 0x8015a5 <xPendedTicks+0x1>
    20e0:	e0 90 a6 15 	lds	r14, 0x15A6	; 0x8015a6 <xPendedTicks+0x2>
    20e4:	f0 90 a7 15 	lds	r15, 0x15A7	; 0x8015a7 <xPendedTicks+0x3>
    20e8:	c1 14       	cp	r12, r1
    20ea:	d1 04       	cpc	r13, r1
    20ec:	e1 04       	cpc	r14, r1
    20ee:	f1 04       	cpc	r15, r1
    20f0:	a1 f0       	breq	.+40     	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    20f2:	1f de       	rcall	.-962    	; 0x1d32 <xTaskIncrementTick>
    20f4:	88 23       	and	r24, r24
    20f6:	19 f0       	breq	.+6      	; 0x20fe <__DATA_REGION_LENGTH__+0xfe>
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <xYieldPending>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	c8 1a       	sub	r12, r24
    2102:	d1 08       	sbc	r13, r1
    2104:	e1 08       	sbc	r14, r1
    2106:	f1 08       	sbc	r15, r1
    2108:	a1 f7       	brne	.-24     	; 0x20f2 <__DATA_REGION_LENGTH__+0xf2>
    210a:	10 92 a4 15 	sts	0x15A4, r1	; 0x8015a4 <xPendedTicks>
    210e:	10 92 a5 15 	sts	0x15A5, r1	; 0x8015a5 <xPendedTicks+0x1>
    2112:	10 92 a6 15 	sts	0x15A6, r1	; 0x8015a6 <xPendedTicks+0x2>
    2116:	10 92 a7 15 	sts	0x15A7, r1	; 0x8015a7 <xPendedTicks+0x3>
    211a:	80 91 a3 15 	lds	r24, 0x15A3	; 0x8015a3 <xYieldPending>
    211e:	88 23       	and	r24, r24
    2120:	31 f0       	breq	.+12     	; 0x212e <__DATA_REGION_LENGTH__+0x12e>
    2122:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	03 c0       	rjmp	.+6      	; 0x2130 <__DATA_REGION_LENGTH__+0x130>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <__DATA_REGION_LENGTH__+0x130>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	df 90       	pop	r13
    213e:	cf 90       	pop	r12
    2140:	08 95       	ret

00002142 <xTaskDelayUntil>:
    2142:	8f 92       	push	r8
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	ec 01       	movw	r28, r24
    215a:	6a 01       	movw	r12, r20
    215c:	7b 01       	movw	r14, r22
    215e:	d5 dd       	rcall	.-1110   	; 0x1d0a <vTaskSuspendAll>
    2160:	80 90 aa 15 	lds	r8, 0x15AA	; 0x8015aa <xTickCount>
    2164:	90 90 ab 15 	lds	r9, 0x15AB	; 0x8015ab <xTickCount+0x1>
    2168:	a0 90 ac 15 	lds	r10, 0x15AC	; 0x8015ac <xTickCount+0x2>
    216c:	b0 90 ad 15 	lds	r11, 0x15AD	; 0x8015ad <xTickCount+0x3>
    2170:	88 81       	ld	r24, Y
    2172:	99 81       	ldd	r25, Y+1	; 0x01
    2174:	aa 81       	ldd	r26, Y+2	; 0x02
    2176:	bb 81       	ldd	r27, Y+3	; 0x03
    2178:	ac 01       	movw	r20, r24
    217a:	bd 01       	movw	r22, r26
    217c:	4c 0d       	add	r20, r12
    217e:	5d 1d       	adc	r21, r13
    2180:	6e 1d       	adc	r22, r14
    2182:	7f 1d       	adc	r23, r15
    2184:	88 16       	cp	r8, r24
    2186:	99 06       	cpc	r9, r25
    2188:	aa 06       	cpc	r10, r26
    218a:	bb 06       	cpc	r11, r27
    218c:	60 f4       	brcc	.+24     	; 0x21a6 <xTaskDelayUntil+0x64>
    218e:	48 17       	cp	r20, r24
    2190:	59 07       	cpc	r21, r25
    2192:	6a 07       	cpc	r22, r26
    2194:	7b 07       	cpc	r23, r27
    2196:	98 f4       	brcc	.+38     	; 0x21be <xTaskDelayUntil+0x7c>
    2198:	84 16       	cp	r8, r20
    219a:	95 06       	cpc	r9, r21
    219c:	a6 06       	cpc	r10, r22
    219e:	b7 06       	cpc	r11, r23
    21a0:	80 f0       	brcs	.+32     	; 0x21c2 <xTaskDelayUntil+0x80>
    21a2:	10 e0       	ldi	r17, 0x00	; 0
    21a4:	13 c0       	rjmp	.+38     	; 0x21cc <xTaskDelayUntil+0x8a>
    21a6:	48 17       	cp	r20, r24
    21a8:	59 07       	cpc	r21, r25
    21aa:	6a 07       	cpc	r22, r26
    21ac:	7b 07       	cpc	r23, r27
    21ae:	58 f0       	brcs	.+22     	; 0x21c6 <xTaskDelayUntil+0x84>
    21b0:	84 16       	cp	r8, r20
    21b2:	95 06       	cpc	r9, r21
    21b4:	a6 06       	cpc	r10, r22
    21b6:	b7 06       	cpc	r11, r23
    21b8:	40 f0       	brcs	.+16     	; 0x21ca <xTaskDelayUntil+0x88>
    21ba:	10 e0       	ldi	r17, 0x00	; 0
    21bc:	07 c0       	rjmp	.+14     	; 0x21cc <xTaskDelayUntil+0x8a>
    21be:	10 e0       	ldi	r17, 0x00	; 0
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <xTaskDelayUntil+0x8a>
    21c2:	11 e0       	ldi	r17, 0x01	; 1
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <xTaskDelayUntil+0x8a>
    21c6:	11 e0       	ldi	r17, 0x01	; 1
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <xTaskDelayUntil+0x8a>
    21ca:	11 e0       	ldi	r17, 0x01	; 1
    21cc:	48 83       	st	Y, r20
    21ce:	59 83       	std	Y+1, r21	; 0x01
    21d0:	6a 83       	std	Y+2, r22	; 0x02
    21d2:	7b 83       	std	Y+3, r23	; 0x03
    21d4:	11 23       	and	r17, r17
    21d6:	41 f0       	breq	.+16     	; 0x21e8 <xTaskDelayUntil+0xa6>
    21d8:	cb 01       	movw	r24, r22
    21da:	ba 01       	movw	r22, r20
    21dc:	68 19       	sub	r22, r8
    21de:	79 09       	sbc	r23, r9
    21e0:	8a 09       	sbc	r24, r10
    21e2:	9b 09       	sbc	r25, r11
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	6b dc       	rcall	.-1834   	; 0x1abe <prvAddCurrentTaskToDelayedList>
    21e8:	d0 de       	rcall	.-608    	; 0x1f8a <xTaskResumeAll>
    21ea:	81 11       	cpse	r24, r1
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <xTaskDelayUntil+0xb0>
    21ee:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    21f2:	81 2f       	mov	r24, r17
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	bf 90       	pop	r11
    2204:	af 90       	pop	r10
    2206:	9f 90       	pop	r9
    2208:	8f 90       	pop	r8
    220a:	08 95       	ret

0000220c <vTaskDelay>:
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	6b 01       	movw	r12, r22
    2216:	7c 01       	movw	r14, r24
    2218:	67 2b       	or	r22, r23
    221a:	68 2b       	or	r22, r24
    221c:	69 2b       	or	r22, r25
    221e:	39 f0       	breq	.+14     	; 0x222e <vTaskDelay+0x22>
    2220:	74 dd       	rcall	.-1304   	; 0x1d0a <vTaskSuspendAll>
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	4a dc       	rcall	.-1900   	; 0x1abe <prvAddCurrentTaskToDelayedList>
    222a:	af de       	rcall	.-674    	; 0x1f8a <xTaskResumeAll>
    222c:	01 c0       	rjmp	.+2      	; 0x2230 <vTaskDelay+0x24>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	81 11       	cpse	r24, r1
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <vTaskDelay+0x2c>
    2234:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	08 95       	ret

00002242 <vTaskSwitchContext>:
    2242:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    2246:	88 23       	and	r24, r24
    2248:	21 f0       	breq	.+8      	; 0x2252 <vTaskSwitchContext+0x10>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <xYieldPending>
    2250:	08 95       	ret
    2252:	10 92 a3 15 	sts	0x15A3, r1	; 0x8015a3 <xYieldPending>
    2256:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    225a:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    225e:	20 81       	ld	r18, Z
    2260:	31 81       	ldd	r19, Z+1	; 0x01
    2262:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2266:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    226a:	83 8d       	ldd	r24, Z+27	; 0x1b
    226c:	94 8d       	ldd	r25, Z+28	; 0x1c
    226e:	82 17       	cp	r24, r18
    2270:	93 07       	cpc	r25, r19
    2272:	60 f0       	brcs	.+24     	; 0x228c <vTaskSwitchContext+0x4a>
    2274:	60 91 59 16 	lds	r22, 0x1659	; 0x801659 <pxCurrentTCB>
    2278:	70 91 5a 16 	lds	r23, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    227c:	63 5e       	subi	r22, 0xE3	; 227
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    2284:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2288:	0e 94 8d 1a 	call	0x351a	; 0x351a <vApplicationStackOverflowHook>
    228c:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <vTaskSwitchContext+0x52>
    2292:	81 50       	subi	r24, 0x01	; 1
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	9b e0       	ldi	r25, 0x0B	; 11
    229a:	92 9f       	mul	r25, r18
    229c:	f0 01       	movw	r30, r0
    229e:	93 9f       	mul	r25, r19
    22a0:	f0 0d       	add	r31, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	e5 51       	subi	r30, 0x15	; 21
    22a6:	fa 4e       	sbci	r31, 0xEA	; 234
    22a8:	90 81       	ld	r25, Z
    22aa:	99 23       	and	r25, r25
    22ac:	91 f3       	breq	.-28     	; 0x2292 <vTaskSwitchContext+0x50>
    22ae:	9b e0       	ldi	r25, 0x0B	; 11
    22b0:	92 9f       	mul	r25, r18
    22b2:	a0 01       	movw	r20, r0
    22b4:	93 9f       	mul	r25, r19
    22b6:	50 0d       	add	r21, r0
    22b8:	11 24       	eor	r1, r1
    22ba:	df 01       	movw	r26, r30
    22bc:	01 80       	ldd	r0, Z+1	; 0x01
    22be:	f2 81       	ldd	r31, Z+2	; 0x02
    22c0:	e0 2d       	mov	r30, r0
    22c2:	04 80       	ldd	r0, Z+4	; 0x04
    22c4:	f5 81       	ldd	r31, Z+5	; 0x05
    22c6:	e0 2d       	mov	r30, r0
    22c8:	12 96       	adiw	r26, 0x02	; 2
    22ca:	fc 93       	st	X, r31
    22cc:	ee 93       	st	-X, r30
    22ce:	11 97       	sbiw	r26, 0x01	; 1
    22d0:	42 51       	subi	r20, 0x12	; 18
    22d2:	5a 4e       	sbci	r21, 0xEA	; 234
    22d4:	e4 17       	cp	r30, r20
    22d6:	f5 07       	cpc	r31, r21
    22d8:	29 f4       	brne	.+10     	; 0x22e4 <vTaskSwitchContext+0xa2>
    22da:	44 81       	ldd	r20, Z+4	; 0x04
    22dc:	55 81       	ldd	r21, Z+5	; 0x05
    22de:	fd 01       	movw	r30, r26
    22e0:	52 83       	std	Z+2, r21	; 0x02
    22e2:	41 83       	std	Z+1, r20	; 0x01
    22e4:	9b e0       	ldi	r25, 0x0B	; 11
    22e6:	92 9f       	mul	r25, r18
    22e8:	f0 01       	movw	r30, r0
    22ea:	93 9f       	mul	r25, r19
    22ec:	f0 0d       	add	r31, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	e5 51       	subi	r30, 0x15	; 21
    22f2:	fa 4e       	sbci	r31, 0xEA	; 234
    22f4:	01 80       	ldd	r0, Z+1	; 0x01
    22f6:	f2 81       	ldd	r31, Z+2	; 0x02
    22f8:	e0 2d       	mov	r30, r0
    22fa:	20 85       	ldd	r18, Z+8	; 0x08
    22fc:	31 85       	ldd	r19, Z+9	; 0x09
    22fe:	30 93 5a 16 	sts	0x165A, r19	; 0x80165a <pxCurrentTCB+0x1>
    2302:	20 93 59 16 	sts	0x1659, r18	; 0x801659 <pxCurrentTCB>
    2306:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <uxTopReadyPriority>
    230a:	08 95       	ret

0000230c <vTaskPlaceOnEventList>:
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	6a 01       	movw	r12, r20
    2316:	7b 01       	movw	r14, r22
    2318:	60 91 59 16 	lds	r22, 0x1659	; 0x801659 <pxCurrentTCB>
    231c:	70 91 5a 16 	lds	r23, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2320:	62 5f       	subi	r22, 0xF2	; 242
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	0e 94 62 04 	call	0x8c4	; 0x8c4 <vListInsert>
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	c7 01       	movw	r24, r14
    232c:	b6 01       	movw	r22, r12
    232e:	c7 db       	rcall	.-2162   	; 0x1abe <prvAddCurrentTaskToDelayedList>
    2330:	ff 90       	pop	r15
    2332:	ef 90       	pop	r14
    2334:	df 90       	pop	r13
    2336:	cf 90       	pop	r12
    2338:	08 95       	ret

0000233a <vTaskPlaceOnUnorderedEventList>:
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	fc 01       	movw	r30, r24
    2344:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
    2348:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    234c:	70 68       	ori	r23, 0x80	; 128
    234e:	1e 96       	adiw	r26, 0x0e	; 14
    2350:	4d 93       	st	X+, r20
    2352:	5d 93       	st	X+, r21
    2354:	6d 93       	st	X+, r22
    2356:	7c 93       	st	X, r23
    2358:	51 97       	sbiw	r26, 0x11	; 17
    235a:	a1 81       	ldd	r26, Z+1	; 0x01
    235c:	b2 81       	ldd	r27, Z+2	; 0x02
    235e:	c0 91 59 16 	lds	r28, 0x1659	; 0x801659 <pxCurrentTCB>
    2362:	d0 91 5a 16 	lds	r29, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2366:	bb 8b       	std	Y+19, r27	; 0x13
    2368:	aa 8b       	std	Y+18, r26	; 0x12
    236a:	c0 91 59 16 	lds	r28, 0x1659	; 0x801659 <pxCurrentTCB>
    236e:	d0 91 5a 16 	lds	r29, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2372:	16 96       	adiw	r26, 0x06	; 6
    2374:	8d 91       	ld	r24, X+
    2376:	9c 91       	ld	r25, X
    2378:	17 97       	sbiw	r26, 0x07	; 7
    237a:	9d 8b       	std	Y+21, r25	; 0x15
    237c:	8c 8b       	std	Y+20, r24	; 0x14
    237e:	16 96       	adiw	r26, 0x06	; 6
    2380:	cd 91       	ld	r28, X+
    2382:	dc 91       	ld	r29, X
    2384:	17 97       	sbiw	r26, 0x07	; 7
    2386:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    238a:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    238e:	0e 96       	adiw	r24, 0x0e	; 14
    2390:	9d 83       	std	Y+5, r25	; 0x05
    2392:	8c 83       	std	Y+4, r24	; 0x04
    2394:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    2398:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    239c:	0e 96       	adiw	r24, 0x0e	; 14
    239e:	17 96       	adiw	r26, 0x07	; 7
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
    23a4:	16 97       	sbiw	r26, 0x06	; 6
    23a6:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
    23aa:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    23ae:	59 96       	adiw	r26, 0x19	; 25
    23b0:	fc 93       	st	X, r31
    23b2:	ee 93       	st	-X, r30
    23b4:	58 97       	sbiw	r26, 0x18	; 24
    23b6:	80 81       	ld	r24, Z
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	80 83       	st	Z, r24
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	c9 01       	movw	r24, r18
    23c0:	b8 01       	movw	r22, r16
    23c2:	7d db       	rcall	.-2310   	; 0x1abe <prvAddCurrentTaskToDelayedList>
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	08 95       	ret

000023ce <vTaskPlaceOnEventListRestricted>:
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	fc 01       	movw	r30, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	ba 01       	movw	r22, r20
    23d8:	a1 81       	ldd	r26, Z+1	; 0x01
    23da:	b2 81       	ldd	r27, Z+2	; 0x02
    23dc:	c0 91 59 16 	lds	r28, 0x1659	; 0x801659 <pxCurrentTCB>
    23e0:	d0 91 5a 16 	lds	r29, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    23e4:	bb 8b       	std	Y+19, r27	; 0x13
    23e6:	aa 8b       	std	Y+18, r26	; 0x12
    23e8:	c0 91 59 16 	lds	r28, 0x1659	; 0x801659 <pxCurrentTCB>
    23ec:	d0 91 5a 16 	lds	r29, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    23f0:	16 96       	adiw	r26, 0x06	; 6
    23f2:	4d 91       	ld	r20, X+
    23f4:	5c 91       	ld	r21, X
    23f6:	17 97       	sbiw	r26, 0x07	; 7
    23f8:	5d 8b       	std	Y+21, r21	; 0x15
    23fa:	4c 8b       	std	Y+20, r20	; 0x14
    23fc:	16 96       	adiw	r26, 0x06	; 6
    23fe:	cd 91       	ld	r28, X+
    2400:	dc 91       	ld	r29, X
    2402:	17 97       	sbiw	r26, 0x07	; 7
    2404:	40 91 59 16 	lds	r20, 0x1659	; 0x801659 <pxCurrentTCB>
    2408:	50 91 5a 16 	lds	r21, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    240c:	42 5f       	subi	r20, 0xF2	; 242
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	5d 83       	std	Y+5, r21	; 0x05
    2412:	4c 83       	std	Y+4, r20	; 0x04
    2414:	40 91 59 16 	lds	r20, 0x1659	; 0x801659 <pxCurrentTCB>
    2418:	50 91 5a 16 	lds	r21, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    241c:	42 5f       	subi	r20, 0xF2	; 242
    241e:	5f 4f       	sbci	r21, 0xFF	; 255
    2420:	17 96       	adiw	r26, 0x07	; 7
    2422:	5c 93       	st	X, r21
    2424:	4e 93       	st	-X, r20
    2426:	16 97       	sbiw	r26, 0x06	; 6
    2428:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
    242c:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2430:	59 96       	adiw	r26, 0x19	; 25
    2432:	fc 93       	st	X, r31
    2434:	ee 93       	st	-X, r30
    2436:	58 97       	sbiw	r26, 0x18	; 24
    2438:	30 81       	ld	r19, Z
    243a:	3f 5f       	subi	r19, 0xFF	; 255
    243c:	30 83       	st	Z, r19
    243e:	22 23       	and	r18, r18
    2440:	19 f0       	breq	.+6      	; 0x2448 <vTaskPlaceOnEventListRestricted+0x7a>
    2442:	6f ef       	ldi	r22, 0xFF	; 255
    2444:	7f ef       	ldi	r23, 0xFF	; 255
    2446:	cb 01       	movw	r24, r22
    2448:	42 2f       	mov	r20, r18
    244a:	39 db       	rcall	.-2446   	; 0x1abe <prvAddCurrentTaskToDelayedList>
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	08 95       	ret

00002452 <xTaskRemoveFromEventList>:
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	dc 01       	movw	r26, r24
    2458:	17 96       	adiw	r26, 0x07	; 7
    245a:	ed 91       	ld	r30, X+
    245c:	fc 91       	ld	r31, X
    245e:	18 97       	sbiw	r26, 0x08	; 8
    2460:	00 84       	ldd	r0, Z+8	; 0x08
    2462:	f1 85       	ldd	r31, Z+9	; 0x09
    2464:	e0 2d       	mov	r30, r0
    2466:	a0 8d       	ldd	r26, Z+24	; 0x18
    2468:	b1 8d       	ldd	r27, Z+25	; 0x19
    246a:	c2 89       	ldd	r28, Z+18	; 0x12
    246c:	d3 89       	ldd	r29, Z+19	; 0x13
    246e:	84 89       	ldd	r24, Z+20	; 0x14
    2470:	95 89       	ldd	r25, Z+21	; 0x15
    2472:	9f 83       	std	Y+7, r25	; 0x07
    2474:	8e 83       	std	Y+6, r24	; 0x06
    2476:	c4 89       	ldd	r28, Z+20	; 0x14
    2478:	d5 89       	ldd	r29, Z+21	; 0x15
    247a:	82 89       	ldd	r24, Z+18	; 0x12
    247c:	93 89       	ldd	r25, Z+19	; 0x13
    247e:	9d 83       	std	Y+5, r25	; 0x05
    2480:	8c 83       	std	Y+4, r24	; 0x04
    2482:	11 96       	adiw	r26, 0x01	; 1
    2484:	8d 91       	ld	r24, X+
    2486:	9c 91       	ld	r25, X
    2488:	12 97       	sbiw	r26, 0x02	; 2
    248a:	9f 01       	movw	r18, r30
    248c:	22 5f       	subi	r18, 0xF2	; 242
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
    2490:	82 17       	cp	r24, r18
    2492:	93 07       	cpc	r25, r19
    2494:	31 f4       	brne	.+12     	; 0x24a2 <xTaskRemoveFromEventList+0x50>
    2496:	84 89       	ldd	r24, Z+20	; 0x14
    2498:	95 89       	ldd	r25, Z+21	; 0x15
    249a:	12 96       	adiw	r26, 0x02	; 2
    249c:	9c 93       	st	X, r25
    249e:	8e 93       	st	-X, r24
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	11 8e       	std	Z+25, r1	; 0x19
    24a4:	10 8e       	std	Z+24, r1	; 0x18
    24a6:	8c 91       	ld	r24, X
    24a8:	81 50       	subi	r24, 0x01	; 1
    24aa:	8c 93       	st	X, r24
    24ac:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    24b0:	81 11       	cpse	r24, r1
    24b2:	52 c0       	rjmp	.+164    	; 0x2558 <xTaskRemoveFromEventList+0x106>
    24b4:	a4 85       	ldd	r26, Z+12	; 0x0c
    24b6:	b5 85       	ldd	r27, Z+13	; 0x0d
    24b8:	c6 81       	ldd	r28, Z+6	; 0x06
    24ba:	d7 81       	ldd	r29, Z+7	; 0x07
    24bc:	80 85       	ldd	r24, Z+8	; 0x08
    24be:	91 85       	ldd	r25, Z+9	; 0x09
    24c0:	9f 83       	std	Y+7, r25	; 0x07
    24c2:	8e 83       	std	Y+6, r24	; 0x06
    24c4:	c0 85       	ldd	r28, Z+8	; 0x08
    24c6:	d1 85       	ldd	r29, Z+9	; 0x09
    24c8:	86 81       	ldd	r24, Z+6	; 0x06
    24ca:	97 81       	ldd	r25, Z+7	; 0x07
    24cc:	9d 83       	std	Y+5, r25	; 0x05
    24ce:	8c 83       	std	Y+4, r24	; 0x04
    24d0:	11 96       	adiw	r26, 0x01	; 1
    24d2:	8d 91       	ld	r24, X+
    24d4:	9c 91       	ld	r25, X
    24d6:	12 97       	sbiw	r26, 0x02	; 2
    24d8:	9f 01       	movw	r18, r30
    24da:	2e 5f       	subi	r18, 0xFE	; 254
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	82 17       	cp	r24, r18
    24e0:	93 07       	cpc	r25, r19
    24e2:	31 f4       	brne	.+12     	; 0x24f0 <xTaskRemoveFromEventList+0x9e>
    24e4:	80 85       	ldd	r24, Z+8	; 0x08
    24e6:	91 85       	ldd	r25, Z+9	; 0x09
    24e8:	12 96       	adiw	r26, 0x02	; 2
    24ea:	9c 93       	st	X, r25
    24ec:	8e 93       	st	-X, r24
    24ee:	11 97       	sbiw	r26, 0x01	; 1
    24f0:	15 86       	std	Z+13, r1	; 0x0d
    24f2:	14 86       	std	Z+12, r1	; 0x0c
    24f4:	8c 91       	ld	r24, X
    24f6:	81 50       	subi	r24, 0x01	; 1
    24f8:	8c 93       	st	X, r24
    24fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24fc:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    2500:	8a 17       	cp	r24, r26
    2502:	10 f4       	brcc	.+4      	; 0x2508 <xTaskRemoveFromEventList+0xb6>
    2504:	a0 93 a9 15 	sts	0x15A9, r26	; 0x8015a9 <uxTopReadyPriority>
    2508:	8b e0       	ldi	r24, 0x0B	; 11
    250a:	8a 9f       	mul	r24, r26
    250c:	d0 01       	movw	r26, r0
    250e:	11 24       	eor	r1, r1
    2510:	a5 51       	subi	r26, 0x15	; 21
    2512:	ba 4e       	sbci	r27, 0xEA	; 234
    2514:	11 96       	adiw	r26, 0x01	; 1
    2516:	0d 90       	ld	r0, X+
    2518:	bc 91       	ld	r27, X
    251a:	a0 2d       	mov	r26, r0
    251c:	b7 83       	std	Z+7, r27	; 0x07
    251e:	a6 83       	std	Z+6, r26	; 0x06
    2520:	16 96       	adiw	r26, 0x06	; 6
    2522:	4d 91       	ld	r20, X+
    2524:	5c 91       	ld	r21, X
    2526:	17 97       	sbiw	r26, 0x07	; 7
    2528:	51 87       	std	Z+9, r21	; 0x09
    252a:	40 87       	std	Z+8, r20	; 0x08
    252c:	16 96       	adiw	r26, 0x06	; 6
    252e:	cd 91       	ld	r28, X+
    2530:	dc 91       	ld	r29, X
    2532:	17 97       	sbiw	r26, 0x07	; 7
    2534:	3d 83       	std	Y+5, r19	; 0x05
    2536:	2c 83       	std	Y+4, r18	; 0x04
    2538:	17 96       	adiw	r26, 0x07	; 7
    253a:	3c 93       	st	X, r19
    253c:	2e 93       	st	-X, r18
    253e:	16 97       	sbiw	r26, 0x06	; 6
    2540:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2542:	8a 9f       	mul	r24, r26
    2544:	d0 01       	movw	r26, r0
    2546:	11 24       	eor	r1, r1
    2548:	a5 51       	subi	r26, 0x15	; 21
    254a:	ba 4e       	sbci	r27, 0xEA	; 234
    254c:	b5 87       	std	Z+13, r27	; 0x0d
    254e:	a4 87       	std	Z+12, r26	; 0x0c
    2550:	8c 91       	ld	r24, X
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	8c 93       	st	X, r24
    2556:	1c c0       	rjmp	.+56     	; 0x2590 <xTaskRemoveFromEventList+0x13e>
    2558:	46 ec       	ldi	r20, 0xC6	; 198
    255a:	55 e1       	ldi	r21, 0x15	; 21
    255c:	da 01       	movw	r26, r20
    255e:	11 96       	adiw	r26, 0x01	; 1
    2560:	cd 91       	ld	r28, X+
    2562:	dc 91       	ld	r29, X
    2564:	12 97       	sbiw	r26, 0x02	; 2
    2566:	d3 8b       	std	Z+19, r29	; 0x13
    2568:	c2 8b       	std	Z+18, r28	; 0x12
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	95 8b       	std	Z+21, r25	; 0x15
    2570:	84 8b       	std	Z+20, r24	; 0x14
    2572:	8e 81       	ldd	r24, Y+6	; 0x06
    2574:	9f 81       	ldd	r25, Y+7	; 0x07
    2576:	dc 01       	movw	r26, r24
    2578:	15 96       	adiw	r26, 0x05	; 5
    257a:	3c 93       	st	X, r19
    257c:	2e 93       	st	-X, r18
    257e:	14 97       	sbiw	r26, 0x04	; 4
    2580:	3f 83       	std	Y+7, r19	; 0x07
    2582:	2e 83       	std	Y+6, r18	; 0x06
    2584:	51 8f       	std	Z+25, r21	; 0x19
    2586:	40 8f       	std	Z+24, r20	; 0x18
    2588:	da 01       	movw	r26, r20
    258a:	8c 91       	ld	r24, X
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	8c 93       	st	X, r24
    2590:	92 8d       	ldd	r25, Z+26	; 0x1a
    2592:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2596:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    259a:	82 8d       	ldd	r24, Z+26	; 0x1a
    259c:	89 17       	cp	r24, r25
    259e:	20 f4       	brcc	.+8      	; 0x25a8 <xTaskRemoveFromEventList+0x156>
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <xYieldPending>
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <xTaskRemoveFromEventList+0x158>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <vTaskRemoveFromUnorderedEventList>:
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	dc 01       	movw	r26, r24
    25b6:	70 68       	ori	r23, 0x80	; 128
    25b8:	4d 93       	st	X+, r20
    25ba:	5d 93       	st	X+, r21
    25bc:	6d 93       	st	X+, r22
    25be:	7c 93       	st	X, r23
    25c0:	13 97       	sbiw	r26, 0x03	; 3
    25c2:	18 96       	adiw	r26, 0x08	; 8
    25c4:	ed 91       	ld	r30, X+
    25c6:	fc 91       	ld	r31, X
    25c8:	19 97       	sbiw	r26, 0x09	; 9
    25ca:	1a 96       	adiw	r26, 0x0a	; 10
    25cc:	4d 91       	ld	r20, X+
    25ce:	5c 91       	ld	r21, X
    25d0:	1b 97       	sbiw	r26, 0x0b	; 11
    25d2:	14 96       	adiw	r26, 0x04	; 4
    25d4:	8d 91       	ld	r24, X+
    25d6:	9c 91       	ld	r25, X
    25d8:	15 97       	sbiw	r26, 0x05	; 5
    25da:	16 96       	adiw	r26, 0x06	; 6
    25dc:	2d 91       	ld	r18, X+
    25de:	3c 91       	ld	r19, X
    25e0:	17 97       	sbiw	r26, 0x07	; 7
    25e2:	ec 01       	movw	r28, r24
    25e4:	3f 83       	std	Y+7, r19	; 0x07
    25e6:	2e 83       	std	Y+6, r18	; 0x06
    25e8:	16 96       	adiw	r26, 0x06	; 6
    25ea:	8d 91       	ld	r24, X+
    25ec:	9c 91       	ld	r25, X
    25ee:	17 97       	sbiw	r26, 0x07	; 7
    25f0:	14 96       	adiw	r26, 0x04	; 4
    25f2:	2d 91       	ld	r18, X+
    25f4:	3c 91       	ld	r19, X
    25f6:	15 97       	sbiw	r26, 0x05	; 5
    25f8:	ec 01       	movw	r28, r24
    25fa:	3d 83       	std	Y+5, r19	; 0x05
    25fc:	2c 83       	std	Y+4, r18	; 0x04
    25fe:	ea 01       	movw	r28, r20
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	a8 17       	cp	r26, r24
    2606:	b9 07       	cpc	r27, r25
    2608:	31 f4       	brne	.+12     	; 0x2616 <vTaskRemoveFromUnorderedEventList+0x66>
    260a:	16 96       	adiw	r26, 0x06	; 6
    260c:	8d 91       	ld	r24, X+
    260e:	9c 91       	ld	r25, X
    2610:	17 97       	sbiw	r26, 0x07	; 7
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	1b 96       	adiw	r26, 0x0b	; 11
    2618:	1c 92       	st	X, r1
    261a:	1e 92       	st	-X, r1
    261c:	1a 97       	sbiw	r26, 0x0a	; 10
    261e:	da 01       	movw	r26, r20
    2620:	8c 91       	ld	r24, X
    2622:	81 50       	subi	r24, 0x01	; 1
    2624:	8c 93       	st	X, r24
    2626:	a4 85       	ldd	r26, Z+12	; 0x0c
    2628:	b5 85       	ldd	r27, Z+13	; 0x0d
    262a:	c6 81       	ldd	r28, Z+6	; 0x06
    262c:	d7 81       	ldd	r29, Z+7	; 0x07
    262e:	80 85       	ldd	r24, Z+8	; 0x08
    2630:	91 85       	ldd	r25, Z+9	; 0x09
    2632:	9f 83       	std	Y+7, r25	; 0x07
    2634:	8e 83       	std	Y+6, r24	; 0x06
    2636:	c0 85       	ldd	r28, Z+8	; 0x08
    2638:	d1 85       	ldd	r29, Z+9	; 0x09
    263a:	86 81       	ldd	r24, Z+6	; 0x06
    263c:	97 81       	ldd	r25, Z+7	; 0x07
    263e:	9d 83       	std	Y+5, r25	; 0x05
    2640:	8c 83       	std	Y+4, r24	; 0x04
    2642:	11 96       	adiw	r26, 0x01	; 1
    2644:	8d 91       	ld	r24, X+
    2646:	9c 91       	ld	r25, X
    2648:	12 97       	sbiw	r26, 0x02	; 2
    264a:	9f 01       	movw	r18, r30
    264c:	2e 5f       	subi	r18, 0xFE	; 254
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	82 17       	cp	r24, r18
    2652:	93 07       	cpc	r25, r19
    2654:	31 f4       	brne	.+12     	; 0x2662 <vTaskRemoveFromUnorderedEventList+0xb2>
    2656:	80 85       	ldd	r24, Z+8	; 0x08
    2658:	91 85       	ldd	r25, Z+9	; 0x09
    265a:	12 96       	adiw	r26, 0x02	; 2
    265c:	9c 93       	st	X, r25
    265e:	8e 93       	st	-X, r24
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	15 86       	std	Z+13, r1	; 0x0d
    2664:	14 86       	std	Z+12, r1	; 0x0c
    2666:	8c 91       	ld	r24, X
    2668:	81 50       	subi	r24, 0x01	; 1
    266a:	8c 93       	st	X, r24
    266c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    266e:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    2672:	8a 17       	cp	r24, r26
    2674:	10 f4       	brcc	.+4      	; 0x267a <vTaskRemoveFromUnorderedEventList+0xca>
    2676:	a0 93 a9 15 	sts	0x15A9, r26	; 0x8015a9 <uxTopReadyPriority>
    267a:	8b e0       	ldi	r24, 0x0B	; 11
    267c:	8a 9f       	mul	r24, r26
    267e:	d0 01       	movw	r26, r0
    2680:	11 24       	eor	r1, r1
    2682:	a5 51       	subi	r26, 0x15	; 21
    2684:	ba 4e       	sbci	r27, 0xEA	; 234
    2686:	11 96       	adiw	r26, 0x01	; 1
    2688:	0d 90       	ld	r0, X+
    268a:	bc 91       	ld	r27, X
    268c:	a0 2d       	mov	r26, r0
    268e:	b7 83       	std	Z+7, r27	; 0x07
    2690:	a6 83       	std	Z+6, r26	; 0x06
    2692:	16 96       	adiw	r26, 0x06	; 6
    2694:	4d 91       	ld	r20, X+
    2696:	5c 91       	ld	r21, X
    2698:	17 97       	sbiw	r26, 0x07	; 7
    269a:	51 87       	std	Z+9, r21	; 0x09
    269c:	40 87       	std	Z+8, r20	; 0x08
    269e:	16 96       	adiw	r26, 0x06	; 6
    26a0:	cd 91       	ld	r28, X+
    26a2:	dc 91       	ld	r29, X
    26a4:	17 97       	sbiw	r26, 0x07	; 7
    26a6:	3d 83       	std	Y+5, r19	; 0x05
    26a8:	2c 83       	std	Y+4, r18	; 0x04
    26aa:	17 96       	adiw	r26, 0x07	; 7
    26ac:	3c 93       	st	X, r19
    26ae:	2e 93       	st	-X, r18
    26b0:	16 97       	sbiw	r26, 0x06	; 6
    26b2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26b4:	8a 9f       	mul	r24, r26
    26b6:	d0 01       	movw	r26, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	a5 51       	subi	r26, 0x15	; 21
    26bc:	ba 4e       	sbci	r27, 0xEA	; 234
    26be:	b5 87       	std	Z+13, r27	; 0x0d
    26c0:	a4 87       	std	Z+12, r26	; 0x0c
    26c2:	8c 91       	ld	r24, X
    26c4:	8f 5f       	subi	r24, 0xFF	; 255
    26c6:	8c 93       	st	X, r24
    26c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    26ca:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    26ce:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    26d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d4:	89 17       	cp	r24, r25
    26d6:	18 f4       	brcc	.+6      	; 0x26de <vTaskRemoveFromUnorderedEventList+0x12e>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <xYieldPending>
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <vTaskSetTimeOutState>:
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	0f 92       	push	r0
    26ea:	20 91 a2 15 	lds	r18, 0x15A2	; 0x8015a2 <xNumOfOverflows>
    26ee:	fc 01       	movw	r30, r24
    26f0:	20 83       	st	Z, r18
    26f2:	40 91 aa 15 	lds	r20, 0x15AA	; 0x8015aa <xTickCount>
    26f6:	50 91 ab 15 	lds	r21, 0x15AB	; 0x8015ab <xTickCount+0x1>
    26fa:	60 91 ac 15 	lds	r22, 0x15AC	; 0x8015ac <xTickCount+0x2>
    26fe:	70 91 ad 15 	lds	r23, 0x15AD	; 0x8015ad <xTickCount+0x3>
    2702:	41 83       	std	Z+1, r20	; 0x01
    2704:	52 83       	std	Z+2, r21	; 0x02
    2706:	63 83       	std	Z+3, r22	; 0x03
    2708:	74 83       	std	Z+4, r23	; 0x04
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	08 95       	ret

00002710 <vTaskInternalSetTimeOutState>:
    2710:	20 91 a2 15 	lds	r18, 0x15A2	; 0x8015a2 <xNumOfOverflows>
    2714:	fc 01       	movw	r30, r24
    2716:	20 83       	st	Z, r18
    2718:	40 91 aa 15 	lds	r20, 0x15AA	; 0x8015aa <xTickCount>
    271c:	50 91 ab 15 	lds	r21, 0x15AB	; 0x8015ab <xTickCount+0x1>
    2720:	60 91 ac 15 	lds	r22, 0x15AC	; 0x8015ac <xTickCount+0x2>
    2724:	70 91 ad 15 	lds	r23, 0x15AD	; 0x8015ad <xTickCount+0x3>
    2728:	41 83       	std	Z+1, r20	; 0x01
    272a:	52 83       	std	Z+2, r21	; 0x02
    272c:	63 83       	std	Z+3, r22	; 0x03
    272e:	74 83       	std	Z+4, r23	; 0x04
    2730:	08 95       	ret

00002732 <xTaskCheckForTimeOut>:
    2732:	8f 92       	push	r8
    2734:	9f 92       	push	r9
    2736:	af 92       	push	r10
    2738:	bf 92       	push	r11
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	fb 01       	movw	r30, r22
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	0f 92       	push	r0
    2752:	c0 90 aa 15 	lds	r12, 0x15AA	; 0x8015aa <xTickCount>
    2756:	d0 90 ab 15 	lds	r13, 0x15AB	; 0x8015ab <xTickCount+0x1>
    275a:	e0 90 ac 15 	lds	r14, 0x15AC	; 0x8015ac <xTickCount+0x2>
    275e:	f0 90 ad 15 	lds	r15, 0x15AD	; 0x8015ad <xTickCount+0x3>
    2762:	dc 01       	movw	r26, r24
    2764:	11 96       	adiw	r26, 0x01	; 1
    2766:	0d 91       	ld	r16, X+
    2768:	1d 91       	ld	r17, X+
    276a:	2d 91       	ld	r18, X+
    276c:	3c 91       	ld	r19, X
    276e:	14 97       	sbiw	r26, 0x04	; 4
    2770:	46 01       	movw	r8, r12
    2772:	57 01       	movw	r10, r14
    2774:	80 1a       	sub	r8, r16
    2776:	91 0a       	sbc	r9, r17
    2778:	a2 0a       	sbc	r10, r18
    277a:	b3 0a       	sbc	r11, r19
    277c:	40 81       	ld	r20, Z
    277e:	51 81       	ldd	r21, Z+1	; 0x01
    2780:	62 81       	ldd	r22, Z+2	; 0x02
    2782:	73 81       	ldd	r23, Z+3	; 0x03
    2784:	4f 3f       	cpi	r20, 0xFF	; 255
    2786:	bf ef       	ldi	r27, 0xFF	; 255
    2788:	5b 07       	cpc	r21, r27
    278a:	6b 07       	cpc	r22, r27
    278c:	7b 07       	cpc	r23, r27
    278e:	39 f1       	breq	.+78     	; 0x27de <xTaskCheckForTimeOut+0xac>
    2790:	ec 01       	movw	r28, r24
    2792:	b8 81       	ld	r27, Y
    2794:	a0 91 a2 15 	lds	r26, 0x15A2	; 0x8015a2 <xNumOfOverflows>
    2798:	ba 17       	cp	r27, r26
    279a:	59 f0       	breq	.+22     	; 0x27b2 <xTaskCheckForTimeOut+0x80>
    279c:	c0 16       	cp	r12, r16
    279e:	d1 06       	cpc	r13, r17
    27a0:	e2 06       	cpc	r14, r18
    27a2:	f3 06       	cpc	r15, r19
    27a4:	30 f0       	brcs	.+12     	; 0x27b2 <xTaskCheckForTimeOut+0x80>
    27a6:	10 82       	st	Z, r1
    27a8:	11 82       	std	Z+1, r1	; 0x01
    27aa:	12 82       	std	Z+2, r1	; 0x02
    27ac:	13 82       	std	Z+3, r1	; 0x03
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <xTaskCheckForTimeOut+0xae>
    27b2:	84 16       	cp	r8, r20
    27b4:	95 06       	cpc	r9, r21
    27b6:	a6 06       	cpc	r10, r22
    27b8:	b7 06       	cpc	r11, r23
    27ba:	58 f4       	brcc	.+22     	; 0x27d2 <xTaskCheckForTimeOut+0xa0>
    27bc:	48 19       	sub	r20, r8
    27be:	59 09       	sbc	r21, r9
    27c0:	6a 09       	sbc	r22, r10
    27c2:	7b 09       	sbc	r23, r11
    27c4:	40 83       	st	Z, r20
    27c6:	51 83       	std	Z+1, r21	; 0x01
    27c8:	62 83       	std	Z+2, r22	; 0x02
    27ca:	73 83       	std	Z+3, r23	; 0x03
    27cc:	a1 df       	rcall	.-190    	; 0x2710 <vTaskInternalSetTimeOutState>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	07 c0       	rjmp	.+14     	; 0x27e0 <xTaskCheckForTimeOut+0xae>
    27d2:	10 82       	st	Z, r1
    27d4:	11 82       	std	Z+1, r1	; 0x01
    27d6:	12 82       	std	Z+2, r1	; 0x02
    27d8:	13 82       	std	Z+3, r1	; 0x03
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <xTaskCheckForTimeOut+0xae>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0f 90       	pop	r0
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	08 95       	ret

000027fe <vTaskMissedYield>:
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <xYieldPending>
    2804:	08 95       	ret

00002806 <xTaskGetCurrentTaskHandle>:
    2806:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    280a:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    280e:	08 95       	ret

00002810 <xTaskGetSchedulerState>:
    2810:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <xSchedulerRunning>
    2814:	88 23       	and	r24, r24
    2816:	31 f0       	breq	.+12     	; 0x2824 <xTaskGetSchedulerState+0x14>
    2818:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxSchedulerSuspended>
    281c:	81 11       	cpse	r24, r1
    281e:	04 c0       	rjmp	.+8      	; 0x2828 <xTaskGetSchedulerState+0x18>
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	08 95       	ret
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	08 95       	ret
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	08 95       	ret

0000282c <xTaskPriorityDisinherit>:
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	fc 01       	movw	r30, r24
    2836:	89 2b       	or	r24, r25
    2838:	09 f4       	brne	.+2      	; 0x283c <xTaskPriorityDisinherit+0x10>
    283a:	49 c0       	rjmp	.+146    	; 0x28ce <xTaskPriorityDisinherit+0xa2>
    283c:	86 a5       	ldd	r24, Z+46	; 0x2e
    283e:	81 50       	subi	r24, 0x01	; 1
    2840:	86 a7       	std	Z+46, r24	; 0x2e
    2842:	22 8d       	ldd	r18, Z+26	; 0x1a
    2844:	95 a5       	ldd	r25, Z+45	; 0x2d
    2846:	29 17       	cp	r18, r25
    2848:	09 f4       	brne	.+2      	; 0x284c <xTaskPriorityDisinherit+0x20>
    284a:	43 c0       	rjmp	.+134    	; 0x28d2 <xTaskPriorityDisinherit+0xa6>
    284c:	81 11       	cpse	r24, r1
    284e:	43 c0       	rjmp	.+134    	; 0x28d6 <xTaskPriorityDisinherit+0xaa>
    2850:	ef 01       	movw	r28, r30
    2852:	8f 01       	movw	r16, r30
    2854:	0e 5f       	subi	r16, 0xFE	; 254
    2856:	1f 4f       	sbci	r17, 0xFF	; 255
    2858:	c8 01       	movw	r24, r16
    285a:	0e 94 9f 04 	call	0x93e	; 0x93e <uxListRemove>
    285e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2860:	ea 8f       	std	Y+26, r30	; 0x1a
    2862:	8a e0       	ldi	r24, 0x0A	; 10
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a0 e0       	ldi	r26, 0x00	; 0
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	8e 1b       	sub	r24, r30
    286c:	91 09       	sbc	r25, r1
    286e:	a1 09       	sbc	r26, r1
    2870:	b1 09       	sbc	r27, r1
    2872:	8e 87       	std	Y+14, r24	; 0x0e
    2874:	9f 87       	std	Y+15, r25	; 0x0f
    2876:	a8 8b       	std	Y+16, r26	; 0x10
    2878:	b9 8b       	std	Y+17, r27	; 0x11
    287a:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    287e:	8e 17       	cp	r24, r30
    2880:	10 f4       	brcc	.+4      	; 0x2886 <xTaskPriorityDisinherit+0x5a>
    2882:	e0 93 a9 15 	sts	0x15A9, r30	; 0x8015a9 <uxTopReadyPriority>
    2886:	8b e0       	ldi	r24, 0x0B	; 11
    2888:	8e 9f       	mul	r24, r30
    288a:	f0 01       	movw	r30, r0
    288c:	11 24       	eor	r1, r1
    288e:	e5 51       	subi	r30, 0x15	; 21
    2890:	fa 4e       	sbci	r31, 0xEA	; 234
    2892:	01 80       	ldd	r0, Z+1	; 0x01
    2894:	f2 81       	ldd	r31, Z+2	; 0x02
    2896:	e0 2d       	mov	r30, r0
    2898:	ff 83       	std	Y+7, r31	; 0x07
    289a:	ee 83       	std	Y+6, r30	; 0x06
    289c:	26 81       	ldd	r18, Z+6	; 0x06
    289e:	37 81       	ldd	r19, Z+7	; 0x07
    28a0:	39 87       	std	Y+9, r19	; 0x09
    28a2:	28 87       	std	Y+8, r18	; 0x08
    28a4:	a6 81       	ldd	r26, Z+6	; 0x06
    28a6:	b7 81       	ldd	r27, Z+7	; 0x07
    28a8:	15 96       	adiw	r26, 0x05	; 5
    28aa:	1c 93       	st	X, r17
    28ac:	0e 93       	st	-X, r16
    28ae:	14 97       	sbiw	r26, 0x04	; 4
    28b0:	17 83       	std	Z+7, r17	; 0x07
    28b2:	06 83       	std	Z+6, r16	; 0x06
    28b4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    28b6:	8e 9f       	mul	r24, r30
    28b8:	f0 01       	movw	r30, r0
    28ba:	11 24       	eor	r1, r1
    28bc:	e5 51       	subi	r30, 0x15	; 21
    28be:	fa 4e       	sbci	r31, 0xEA	; 234
    28c0:	fd 87       	std	Y+13, r31	; 0x0d
    28c2:	ec 87       	std	Y+12, r30	; 0x0c
    28c4:	80 81       	ld	r24, Z
    28c6:	8f 5f       	subi	r24, 0xFF	; 255
    28c8:	80 83       	st	Z, r24
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	05 c0       	rjmp	.+10     	; 0x28d8 <xTaskPriorityDisinherit+0xac>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	03 c0       	rjmp	.+6      	; 0x28d8 <xTaskPriorityDisinherit+0xac>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	01 c0       	rjmp	.+2      	; 0x28d8 <xTaskPriorityDisinherit+0xac>
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <uxTaskResetEventItemValue>:
    28e2:	cf 92       	push	r12
    28e4:	df 92       	push	r13
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    28ee:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    28f2:	66 85       	ldd	r22, Z+14	; 0x0e
    28f4:	77 85       	ldd	r23, Z+15	; 0x0f
    28f6:	80 89       	ldd	r24, Z+16	; 0x10
    28f8:	91 89       	ldd	r25, Z+17	; 0x11
    28fa:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    28fe:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2902:	a0 91 59 16 	lds	r26, 0x1659	; 0x801659 <pxCurrentTCB>
    2906:	b0 91 5a 16 	lds	r27, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    290a:	5a 96       	adiw	r26, 0x1a	; 26
    290c:	2c 91       	ld	r18, X
    290e:	0f 2e       	mov	r0, r31
    2910:	fa e0       	ldi	r31, 0x0A	; 10
    2912:	cf 2e       	mov	r12, r31
    2914:	d1 2c       	mov	r13, r1
    2916:	e1 2c       	mov	r14, r1
    2918:	f1 2c       	mov	r15, r1
    291a:	f0 2d       	mov	r31, r0
    291c:	c2 1a       	sub	r12, r18
    291e:	d1 08       	sbc	r13, r1
    2920:	e1 08       	sbc	r14, r1
    2922:	f1 08       	sbc	r15, r1
    2924:	c6 86       	std	Z+14, r12	; 0x0e
    2926:	d7 86       	std	Z+15, r13	; 0x0f
    2928:	e0 8a       	std	Z+16, r14	; 0x10
    292a:	f1 8a       	std	Z+17, r15	; 0x11
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	08 95       	ret

00002936 <xTaskGenericNotifyWait>:
    2936:	4f 92       	push	r4
    2938:	5f 92       	push	r5
    293a:	6f 92       	push	r6
    293c:	7f 92       	push	r7
    293e:	af 92       	push	r10
    2940:	bf 92       	push	r11
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	28 01       	movw	r4, r16
    2954:	39 01       	movw	r6, r18
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	0f 92       	push	r0
    295c:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2960:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2964:	c8 2f       	mov	r28, r24
    2966:	d0 e0       	ldi	r29, 0x00	; 0
    2968:	ec 0f       	add	r30, r28
    296a:	fd 1f       	adc	r31, r29
    296c:	83 a9       	ldd	r24, Z+51	; 0x33
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	71 f1       	breq	.+92     	; 0x29ce <xTaskGenericNotifyWait+0x98>
    2972:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2976:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    297a:	ce 01       	movw	r24, r28
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	e8 0f       	add	r30, r24
    2986:	f9 1f       	adc	r31, r25
    2988:	87 a5       	ldd	r24, Z+47	; 0x2f
    298a:	90 a9       	ldd	r25, Z+48	; 0x30
    298c:	a1 a9       	ldd	r26, Z+49	; 0x31
    298e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2990:	40 95       	com	r20
    2992:	50 95       	com	r21
    2994:	60 95       	com	r22
    2996:	70 95       	com	r23
    2998:	48 23       	and	r20, r24
    299a:	59 23       	and	r21, r25
    299c:	6a 23       	and	r22, r26
    299e:	7b 23       	and	r23, r27
    29a0:	47 a7       	std	Z+47, r20	; 0x2f
    29a2:	50 ab       	std	Z+48, r21	; 0x30
    29a4:	61 ab       	std	Z+49, r22	; 0x31
    29a6:	72 ab       	std	Z+50, r23	; 0x32
    29a8:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    29ac:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    29b0:	ec 0f       	add	r30, r28
    29b2:	fd 1f       	adc	r31, r29
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	83 ab       	std	Z+51, r24	; 0x33
    29b8:	a1 14       	cp	r10, r1
    29ba:	b1 04       	cpc	r11, r1
    29bc:	c1 04       	cpc	r12, r1
    29be:	d1 04       	cpc	r13, r1
    29c0:	31 f0       	breq	.+12     	; 0x29ce <xTaskGenericNotifyWait+0x98>
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	c6 01       	movw	r24, r12
    29c6:	b5 01       	movw	r22, r10
    29c8:	7a d8       	rcall	.-3852   	; 0x1abe <prvAddCurrentTaskToDelayedList>
    29ca:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    29ce:	0f 90       	pop	r0
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	0f 92       	push	r0
    29d8:	e1 14       	cp	r14, r1
    29da:	f1 04       	cpc	r15, r1
    29dc:	a1 f0       	breq	.+40     	; 0x2a06 <xTaskGenericNotifyWait+0xd0>
    29de:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    29e2:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    29e6:	ce 01       	movw	r24, r28
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	e8 0f       	add	r30, r24
    29f2:	f9 1f       	adc	r31, r25
    29f4:	87 a5       	ldd	r24, Z+47	; 0x2f
    29f6:	90 a9       	ldd	r25, Z+48	; 0x30
    29f8:	a1 a9       	ldd	r26, Z+49	; 0x31
    29fa:	b2 a9       	ldd	r27, Z+50	; 0x32
    29fc:	f7 01       	movw	r30, r14
    29fe:	80 83       	st	Z, r24
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	a2 83       	std	Z+2, r26	; 0x02
    2a04:	b3 83       	std	Z+3, r27	; 0x03
    2a06:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2a0a:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2a0e:	ec 0f       	add	r30, r28
    2a10:	fd 1f       	adc	r31, r29
    2a12:	83 a9       	ldd	r24, Z+51	; 0x33
    2a14:	82 30       	cpi	r24, 0x02	; 2
    2a16:	e9 f4       	brne	.+58     	; 0x2a52 <xTaskGenericNotifyWait+0x11c>
    2a18:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2a1c:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2a20:	ce 01       	movw	r24, r28
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	e8 0f       	add	r30, r24
    2a2c:	f9 1f       	adc	r31, r25
    2a2e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a30:	90 a9       	ldd	r25, Z+48	; 0x30
    2a32:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a34:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a36:	40 94       	com	r4
    2a38:	50 94       	com	r5
    2a3a:	60 94       	com	r6
    2a3c:	70 94       	com	r7
    2a3e:	48 22       	and	r4, r24
    2a40:	59 22       	and	r5, r25
    2a42:	6a 22       	and	r6, r26
    2a44:	7b 22       	and	r7, r27
    2a46:	47 a6       	std	Z+47, r4	; 0x2f
    2a48:	50 aa       	std	Z+48, r5	; 0x30
    2a4a:	61 aa       	std	Z+49, r6	; 0x31
    2a4c:	72 aa       	std	Z+50, r7	; 0x32
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <xTaskGenericNotifyWait+0x11e>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	20 91 59 16 	lds	r18, 0x1659	; 0x801659 <pxCurrentTCB>
    2a58:	30 91 5a 16 	lds	r19, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2a5c:	c2 0f       	add	r28, r18
    2a5e:	d3 1f       	adc	r29, r19
    2a60:	1b aa       	std	Y+51, r1	; 0x33
    2a62:	0f 90       	pop	r0
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
    2a76:	bf 90       	pop	r11
    2a78:	af 90       	pop	r10
    2a7a:	7f 90       	pop	r7
    2a7c:	6f 90       	pop	r6
    2a7e:	5f 90       	pop	r5
    2a80:	4f 90       	pop	r4
    2a82:	08 95       	ret

00002a84 <xTaskGenericNotify>:
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	ef 92       	push	r14
    2a8e:	ff 92       	push	r15
    2a90:	0f 93       	push	r16
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	dc 01       	movw	r26, r24
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	0f 92       	push	r0
    2a9e:	e1 14       	cp	r14, r1
    2aa0:	f1 04       	cpc	r15, r1
    2aa2:	89 f0       	breq	.+34     	; 0x2ac6 <xTaskGenericNotify+0x42>
    2aa4:	e6 2f       	mov	r30, r22
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	ee 0f       	add	r30, r30
    2aaa:	ff 1f       	adc	r31, r31
    2aac:	ee 0f       	add	r30, r30
    2aae:	ff 1f       	adc	r31, r31
    2ab0:	e8 0f       	add	r30, r24
    2ab2:	f9 1f       	adc	r31, r25
    2ab4:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ab6:	90 a8       	ldd	r9, Z+48	; 0x30
    2ab8:	a1 a8       	ldd	r10, Z+49	; 0x31
    2aba:	b2 a8       	ldd	r11, Z+50	; 0x32
    2abc:	f7 01       	movw	r30, r14
    2abe:	80 82       	st	Z, r8
    2ac0:	91 82       	std	Z+1, r9	; 0x01
    2ac2:	a2 82       	std	Z+2, r10	; 0x02
    2ac4:	b3 82       	std	Z+3, r11	; 0x03
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	fd 01       	movw	r30, r26
    2aca:	e6 0f       	add	r30, r22
    2acc:	f7 1f       	adc	r31, r23
    2ace:	83 a9       	ldd	r24, Z+51	; 0x33
    2ad0:	92 e0       	ldi	r25, 0x02	; 2
    2ad2:	93 ab       	std	Z+51, r25	; 0x33
    2ad4:	02 30       	cpi	r16, 0x02	; 2
    2ad6:	01 f1       	breq	.+64     	; 0x2b18 <xTaskGenericNotify+0x94>
    2ad8:	18 f4       	brcc	.+6      	; 0x2ae0 <xTaskGenericNotify+0x5c>
    2ada:	01 30       	cpi	r16, 0x01	; 1
    2adc:	31 f0       	breq	.+12     	; 0x2aea <xTaskGenericNotify+0x66>
    2ade:	4d c0       	rjmp	.+154    	; 0x2b7a <xTaskGenericNotify+0xf6>
    2ae0:	03 30       	cpi	r16, 0x03	; 3
    2ae2:	79 f1       	breq	.+94     	; 0x2b42 <xTaskGenericNotify+0xbe>
    2ae4:	04 30       	cpi	r16, 0x04	; 4
    2ae6:	d1 f1       	breq	.+116    	; 0x2b5c <xTaskGenericNotify+0xd8>
    2ae8:	48 c0       	rjmp	.+144    	; 0x2b7a <xTaskGenericNotify+0xf6>
    2aea:	66 0f       	add	r22, r22
    2aec:	77 1f       	adc	r23, r23
    2aee:	66 0f       	add	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	fd 01       	movw	r30, r26
    2af4:	e6 0f       	add	r30, r22
    2af6:	f7 1f       	adc	r31, r23
    2af8:	87 a4       	ldd	r8, Z+47	; 0x2f
    2afa:	90 a8       	ldd	r9, Z+48	; 0x30
    2afc:	a1 a8       	ldd	r10, Z+49	; 0x31
    2afe:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b00:	ba 01       	movw	r22, r20
    2b02:	a9 01       	movw	r20, r18
    2b04:	48 29       	or	r20, r8
    2b06:	59 29       	or	r21, r9
    2b08:	6a 29       	or	r22, r10
    2b0a:	7b 29       	or	r23, r11
    2b0c:	47 a7       	std	Z+47, r20	; 0x2f
    2b0e:	50 ab       	std	Z+48, r21	; 0x30
    2b10:	61 ab       	std	Z+49, r22	; 0x31
    2b12:	72 ab       	std	Z+50, r23	; 0x32
    2b14:	01 e0       	ldi	r16, 0x01	; 1
    2b16:	34 c0       	rjmp	.+104    	; 0x2b80 <xTaskGenericNotify+0xfc>
    2b18:	66 0f       	add	r22, r22
    2b1a:	77 1f       	adc	r23, r23
    2b1c:	66 0f       	add	r22, r22
    2b1e:	77 1f       	adc	r23, r23
    2b20:	fd 01       	movw	r30, r26
    2b22:	e6 0f       	add	r30, r22
    2b24:	f7 1f       	adc	r31, r23
    2b26:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b28:	50 a9       	ldd	r21, Z+48	; 0x30
    2b2a:	61 a9       	ldd	r22, Z+49	; 0x31
    2b2c:	72 a9       	ldd	r23, Z+50	; 0x32
    2b2e:	4f 5f       	subi	r20, 0xFF	; 255
    2b30:	5f 4f       	sbci	r21, 0xFF	; 255
    2b32:	6f 4f       	sbci	r22, 0xFF	; 255
    2b34:	7f 4f       	sbci	r23, 0xFF	; 255
    2b36:	47 a7       	std	Z+47, r20	; 0x2f
    2b38:	50 ab       	std	Z+48, r21	; 0x30
    2b3a:	61 ab       	std	Z+49, r22	; 0x31
    2b3c:	72 ab       	std	Z+50, r23	; 0x32
    2b3e:	01 e0       	ldi	r16, 0x01	; 1
    2b40:	1f c0       	rjmp	.+62     	; 0x2b80 <xTaskGenericNotify+0xfc>
    2b42:	66 0f       	add	r22, r22
    2b44:	77 1f       	adc	r23, r23
    2b46:	66 0f       	add	r22, r22
    2b48:	77 1f       	adc	r23, r23
    2b4a:	fd 01       	movw	r30, r26
    2b4c:	e6 0f       	add	r30, r22
    2b4e:	f7 1f       	adc	r31, r23
    2b50:	27 a7       	std	Z+47, r18	; 0x2f
    2b52:	30 ab       	std	Z+48, r19	; 0x30
    2b54:	41 ab       	std	Z+49, r20	; 0x31
    2b56:	52 ab       	std	Z+50, r21	; 0x32
    2b58:	01 e0       	ldi	r16, 0x01	; 1
    2b5a:	12 c0       	rjmp	.+36     	; 0x2b80 <xTaskGenericNotify+0xfc>
    2b5c:	82 30       	cpi	r24, 0x02	; 2
    2b5e:	79 f0       	breq	.+30     	; 0x2b7e <xTaskGenericNotify+0xfa>
    2b60:	66 0f       	add	r22, r22
    2b62:	77 1f       	adc	r23, r23
    2b64:	66 0f       	add	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	fd 01       	movw	r30, r26
    2b6a:	e6 0f       	add	r30, r22
    2b6c:	f7 1f       	adc	r31, r23
    2b6e:	27 a7       	std	Z+47, r18	; 0x2f
    2b70:	30 ab       	std	Z+48, r19	; 0x30
    2b72:	41 ab       	std	Z+49, r20	; 0x31
    2b74:	52 ab       	std	Z+50, r21	; 0x32
    2b76:	01 e0       	ldi	r16, 0x01	; 1
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <xTaskGenericNotify+0xfc>
    2b7a:	01 e0       	ldi	r16, 0x01	; 1
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <xTaskGenericNotify+0xfc>
    2b7e:	00 e0       	ldi	r16, 0x00	; 0
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <xTaskGenericNotify+0x102>
    2b84:	69 c0       	rjmp	.+210    	; 0x2c58 <xTaskGenericNotify+0x1d4>
    2b86:	1c 96       	adiw	r26, 0x0c	; 12
    2b88:	ed 91       	ld	r30, X+
    2b8a:	fc 91       	ld	r31, X
    2b8c:	1d 97       	sbiw	r26, 0x0d	; 13
    2b8e:	16 96       	adiw	r26, 0x06	; 6
    2b90:	cd 91       	ld	r28, X+
    2b92:	dc 91       	ld	r29, X
    2b94:	17 97       	sbiw	r26, 0x07	; 7
    2b96:	18 96       	adiw	r26, 0x08	; 8
    2b98:	8d 91       	ld	r24, X+
    2b9a:	9c 91       	ld	r25, X
    2b9c:	19 97       	sbiw	r26, 0x09	; 9
    2b9e:	9f 83       	std	Y+7, r25	; 0x07
    2ba0:	8e 83       	std	Y+6, r24	; 0x06
    2ba2:	18 96       	adiw	r26, 0x08	; 8
    2ba4:	cd 91       	ld	r28, X+
    2ba6:	dc 91       	ld	r29, X
    2ba8:	19 97       	sbiw	r26, 0x09	; 9
    2baa:	16 96       	adiw	r26, 0x06	; 6
    2bac:	8d 91       	ld	r24, X+
    2bae:	9c 91       	ld	r25, X
    2bb0:	17 97       	sbiw	r26, 0x07	; 7
    2bb2:	9d 83       	std	Y+5, r25	; 0x05
    2bb4:	8c 83       	std	Y+4, r24	; 0x04
    2bb6:	81 81       	ldd	r24, Z+1	; 0x01
    2bb8:	92 81       	ldd	r25, Z+2	; 0x02
    2bba:	9d 01       	movw	r18, r26
    2bbc:	2e 5f       	subi	r18, 0xFE	; 254
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	82 17       	cp	r24, r18
    2bc2:	93 07       	cpc	r25, r19
    2bc4:	31 f4       	brne	.+12     	; 0x2bd2 <xTaskGenericNotify+0x14e>
    2bc6:	18 96       	adiw	r26, 0x08	; 8
    2bc8:	8d 91       	ld	r24, X+
    2bca:	9c 91       	ld	r25, X
    2bcc:	19 97       	sbiw	r26, 0x09	; 9
    2bce:	92 83       	std	Z+2, r25	; 0x02
    2bd0:	81 83       	std	Z+1, r24	; 0x01
    2bd2:	1d 96       	adiw	r26, 0x0d	; 13
    2bd4:	1c 92       	st	X, r1
    2bd6:	1e 92       	st	-X, r1
    2bd8:	1c 97       	sbiw	r26, 0x0c	; 12
    2bda:	80 81       	ld	r24, Z
    2bdc:	81 50       	subi	r24, 0x01	; 1
    2bde:	80 83       	st	Z, r24
    2be0:	5a 96       	adiw	r26, 0x1a	; 26
    2be2:	ec 91       	ld	r30, X
    2be4:	5a 97       	sbiw	r26, 0x1a	; 26
    2be6:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    2bea:	8e 17       	cp	r24, r30
    2bec:	10 f4       	brcc	.+4      	; 0x2bf2 <xTaskGenericNotify+0x16e>
    2bee:	e0 93 a9 15 	sts	0x15A9, r30	; 0x8015a9 <uxTopReadyPriority>
    2bf2:	8b e0       	ldi	r24, 0x0B	; 11
    2bf4:	8e 9f       	mul	r24, r30
    2bf6:	f0 01       	movw	r30, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	e5 51       	subi	r30, 0x15	; 21
    2bfc:	fa 4e       	sbci	r31, 0xEA	; 234
    2bfe:	01 80       	ldd	r0, Z+1	; 0x01
    2c00:	f2 81       	ldd	r31, Z+2	; 0x02
    2c02:	e0 2d       	mov	r30, r0
    2c04:	17 96       	adiw	r26, 0x07	; 7
    2c06:	fc 93       	st	X, r31
    2c08:	ee 93       	st	-X, r30
    2c0a:	16 97       	sbiw	r26, 0x06	; 6
    2c0c:	46 81       	ldd	r20, Z+6	; 0x06
    2c0e:	57 81       	ldd	r21, Z+7	; 0x07
    2c10:	19 96       	adiw	r26, 0x09	; 9
    2c12:	5c 93       	st	X, r21
    2c14:	4e 93       	st	-X, r20
    2c16:	18 97       	sbiw	r26, 0x08	; 8
    2c18:	c6 81       	ldd	r28, Z+6	; 0x06
    2c1a:	d7 81       	ldd	r29, Z+7	; 0x07
    2c1c:	3d 83       	std	Y+5, r19	; 0x05
    2c1e:	2c 83       	std	Y+4, r18	; 0x04
    2c20:	37 83       	std	Z+7, r19	; 0x07
    2c22:	26 83       	std	Z+6, r18	; 0x06
    2c24:	5a 96       	adiw	r26, 0x1a	; 26
    2c26:	ec 91       	ld	r30, X
    2c28:	5a 97       	sbiw	r26, 0x1a	; 26
    2c2a:	8e 9f       	mul	r24, r30
    2c2c:	f0 01       	movw	r30, r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	e5 51       	subi	r30, 0x15	; 21
    2c32:	fa 4e       	sbci	r31, 0xEA	; 234
    2c34:	1d 96       	adiw	r26, 0x0d	; 13
    2c36:	fc 93       	st	X, r31
    2c38:	ee 93       	st	-X, r30
    2c3a:	1c 97       	sbiw	r26, 0x0c	; 12
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	80 83       	st	Z, r24
    2c42:	5a 96       	adiw	r26, 0x1a	; 26
    2c44:	9c 91       	ld	r25, X
    2c46:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2c4a:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2c4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c50:	89 17       	cp	r24, r25
    2c52:	10 f4       	brcc	.+4      	; 0x2c58 <xTaskGenericNotify+0x1d4>
    2c54:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    2c58:	0f 90       	pop	r0
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	80 2f       	mov	r24, r16
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	bf 90       	pop	r11
    2c6a:	af 90       	pop	r10
    2c6c:	9f 90       	pop	r9
    2c6e:	8f 90       	pop	r8
    2c70:	08 95       	ret

00002c72 <xTaskGenericNotifyFromISR>:
    2c72:	8f 92       	push	r8
    2c74:	9f 92       	push	r9
    2c76:	af 92       	push	r10
    2c78:	bf 92       	push	r11
    2c7a:	cf 92       	push	r12
    2c7c:	df 92       	push	r13
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	0f 93       	push	r16
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	dc 01       	movw	r26, r24
    2c8a:	e1 14       	cp	r14, r1
    2c8c:	f1 04       	cpc	r15, r1
    2c8e:	89 f0       	breq	.+34     	; 0x2cb2 <xTaskGenericNotifyFromISR+0x40>
    2c90:	e6 2f       	mov	r30, r22
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	ee 0f       	add	r30, r30
    2c96:	ff 1f       	adc	r31, r31
    2c98:	ee 0f       	add	r30, r30
    2c9a:	ff 1f       	adc	r31, r31
    2c9c:	e8 0f       	add	r30, r24
    2c9e:	f9 1f       	adc	r31, r25
    2ca0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ca2:	90 a8       	ldd	r9, Z+48	; 0x30
    2ca4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ca6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ca8:	f7 01       	movw	r30, r14
    2caa:	80 82       	st	Z, r8
    2cac:	91 82       	std	Z+1, r9	; 0x01
    2cae:	a2 82       	std	Z+2, r10	; 0x02
    2cb0:	b3 82       	std	Z+3, r11	; 0x03
    2cb2:	70 e0       	ldi	r23, 0x00	; 0
    2cb4:	fd 01       	movw	r30, r26
    2cb6:	e6 0f       	add	r30, r22
    2cb8:	f7 1f       	adc	r31, r23
    2cba:	93 a9       	ldd	r25, Z+51	; 0x33
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	83 ab       	std	Z+51, r24	; 0x33
    2cc0:	02 30       	cpi	r16, 0x02	; 2
    2cc2:	01 f1       	breq	.+64     	; 0x2d04 <xTaskGenericNotifyFromISR+0x92>
    2cc4:	18 f4       	brcc	.+6      	; 0x2ccc <xTaskGenericNotifyFromISR+0x5a>
    2cc6:	01 30       	cpi	r16, 0x01	; 1
    2cc8:	31 f0       	breq	.+12     	; 0x2cd6 <xTaskGenericNotifyFromISR+0x64>
    2cca:	4d c0       	rjmp	.+154    	; 0x2d66 <xTaskGenericNotifyFromISR+0xf4>
    2ccc:	03 30       	cpi	r16, 0x03	; 3
    2cce:	79 f1       	breq	.+94     	; 0x2d2e <xTaskGenericNotifyFromISR+0xbc>
    2cd0:	04 30       	cpi	r16, 0x04	; 4
    2cd2:	d1 f1       	breq	.+116    	; 0x2d48 <xTaskGenericNotifyFromISR+0xd6>
    2cd4:	48 c0       	rjmp	.+144    	; 0x2d66 <xTaskGenericNotifyFromISR+0xf4>
    2cd6:	66 0f       	add	r22, r22
    2cd8:	77 1f       	adc	r23, r23
    2cda:	66 0f       	add	r22, r22
    2cdc:	77 1f       	adc	r23, r23
    2cde:	fd 01       	movw	r30, r26
    2ce0:	e6 0f       	add	r30, r22
    2ce2:	f7 1f       	adc	r31, r23
    2ce4:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ce6:	90 a8       	ldd	r9, Z+48	; 0x30
    2ce8:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cea:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cec:	ba 01       	movw	r22, r20
    2cee:	a9 01       	movw	r20, r18
    2cf0:	48 29       	or	r20, r8
    2cf2:	59 29       	or	r21, r9
    2cf4:	6a 29       	or	r22, r10
    2cf6:	7b 29       	or	r23, r11
    2cf8:	47 a7       	std	Z+47, r20	; 0x2f
    2cfa:	50 ab       	std	Z+48, r21	; 0x30
    2cfc:	61 ab       	std	Z+49, r22	; 0x31
    2cfe:	72 ab       	std	Z+50, r23	; 0x32
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	34 c0       	rjmp	.+104    	; 0x2d6c <xTaskGenericNotifyFromISR+0xfa>
    2d04:	66 0f       	add	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	66 0f       	add	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	fd 01       	movw	r30, r26
    2d0e:	e6 0f       	add	r30, r22
    2d10:	f7 1f       	adc	r31, r23
    2d12:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d14:	50 a9       	ldd	r21, Z+48	; 0x30
    2d16:	61 a9       	ldd	r22, Z+49	; 0x31
    2d18:	72 a9       	ldd	r23, Z+50	; 0x32
    2d1a:	4f 5f       	subi	r20, 0xFF	; 255
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1e:	6f 4f       	sbci	r22, 0xFF	; 255
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255
    2d22:	47 a7       	std	Z+47, r20	; 0x2f
    2d24:	50 ab       	std	Z+48, r21	; 0x30
    2d26:	61 ab       	std	Z+49, r22	; 0x31
    2d28:	72 ab       	std	Z+50, r23	; 0x32
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	1f c0       	rjmp	.+62     	; 0x2d6c <xTaskGenericNotifyFromISR+0xfa>
    2d2e:	66 0f       	add	r22, r22
    2d30:	77 1f       	adc	r23, r23
    2d32:	66 0f       	add	r22, r22
    2d34:	77 1f       	adc	r23, r23
    2d36:	fd 01       	movw	r30, r26
    2d38:	e6 0f       	add	r30, r22
    2d3a:	f7 1f       	adc	r31, r23
    2d3c:	27 a7       	std	Z+47, r18	; 0x2f
    2d3e:	30 ab       	std	Z+48, r19	; 0x30
    2d40:	41 ab       	std	Z+49, r20	; 0x31
    2d42:	52 ab       	std	Z+50, r21	; 0x32
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	12 c0       	rjmp	.+36     	; 0x2d6c <xTaskGenericNotifyFromISR+0xfa>
    2d48:	92 30       	cpi	r25, 0x02	; 2
    2d4a:	79 f0       	breq	.+30     	; 0x2d6a <xTaskGenericNotifyFromISR+0xf8>
    2d4c:	66 0f       	add	r22, r22
    2d4e:	77 1f       	adc	r23, r23
    2d50:	66 0f       	add	r22, r22
    2d52:	77 1f       	adc	r23, r23
    2d54:	fd 01       	movw	r30, r26
    2d56:	e6 0f       	add	r30, r22
    2d58:	f7 1f       	adc	r31, r23
    2d5a:	27 a7       	std	Z+47, r18	; 0x2f
    2d5c:	30 ab       	std	Z+48, r19	; 0x30
    2d5e:	41 ab       	std	Z+49, r20	; 0x31
    2d60:	52 ab       	std	Z+50, r21	; 0x32
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	03 c0       	rjmp	.+6      	; 0x2d6c <xTaskGenericNotifyFromISR+0xfa>
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <xTaskGenericNotifyFromISR+0xfa>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	91 30       	cpi	r25, 0x01	; 1
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <xTaskGenericNotifyFromISR+0x100>
    2d70:	96 c0       	rjmp	.+300    	; 0x2e9e <xTaskGenericNotifyFromISR+0x22c>
    2d72:	90 91 9a 15 	lds	r25, 0x159A	; 0x80159a <uxSchedulerSuspended>
    2d76:	91 11       	cpse	r25, r1
    2d78:	5f c0       	rjmp	.+190    	; 0x2e38 <xTaskGenericNotifyFromISR+0x1c6>
    2d7a:	1c 96       	adiw	r26, 0x0c	; 12
    2d7c:	ed 91       	ld	r30, X+
    2d7e:	fc 91       	ld	r31, X
    2d80:	1d 97       	sbiw	r26, 0x0d	; 13
    2d82:	16 96       	adiw	r26, 0x06	; 6
    2d84:	cd 91       	ld	r28, X+
    2d86:	dc 91       	ld	r29, X
    2d88:	17 97       	sbiw	r26, 0x07	; 7
    2d8a:	18 96       	adiw	r26, 0x08	; 8
    2d8c:	2d 91       	ld	r18, X+
    2d8e:	3c 91       	ld	r19, X
    2d90:	19 97       	sbiw	r26, 0x09	; 9
    2d92:	3f 83       	std	Y+7, r19	; 0x07
    2d94:	2e 83       	std	Y+6, r18	; 0x06
    2d96:	18 96       	adiw	r26, 0x08	; 8
    2d98:	cd 91       	ld	r28, X+
    2d9a:	dc 91       	ld	r29, X
    2d9c:	19 97       	sbiw	r26, 0x09	; 9
    2d9e:	16 96       	adiw	r26, 0x06	; 6
    2da0:	2d 91       	ld	r18, X+
    2da2:	3c 91       	ld	r19, X
    2da4:	17 97       	sbiw	r26, 0x07	; 7
    2da6:	3d 83       	std	Y+5, r19	; 0x05
    2da8:	2c 83       	std	Y+4, r18	; 0x04
    2daa:	41 81       	ldd	r20, Z+1	; 0x01
    2dac:	52 81       	ldd	r21, Z+2	; 0x02
    2dae:	9d 01       	movw	r18, r26
    2db0:	2e 5f       	subi	r18, 0xFE	; 254
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	42 17       	cp	r20, r18
    2db6:	53 07       	cpc	r21, r19
    2db8:	31 f4       	brne	.+12     	; 0x2dc6 <xTaskGenericNotifyFromISR+0x154>
    2dba:	18 96       	adiw	r26, 0x08	; 8
    2dbc:	4d 91       	ld	r20, X+
    2dbe:	5c 91       	ld	r21, X
    2dc0:	19 97       	sbiw	r26, 0x09	; 9
    2dc2:	52 83       	std	Z+2, r21	; 0x02
    2dc4:	41 83       	std	Z+1, r20	; 0x01
    2dc6:	1d 96       	adiw	r26, 0x0d	; 13
    2dc8:	1c 92       	st	X, r1
    2dca:	1e 92       	st	-X, r1
    2dcc:	1c 97       	sbiw	r26, 0x0c	; 12
    2dce:	90 81       	ld	r25, Z
    2dd0:	91 50       	subi	r25, 0x01	; 1
    2dd2:	90 83       	st	Z, r25
    2dd4:	5a 96       	adiw	r26, 0x1a	; 26
    2dd6:	ec 91       	ld	r30, X
    2dd8:	5a 97       	sbiw	r26, 0x1a	; 26
    2dda:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <uxTopReadyPriority>
    2dde:	9e 17       	cp	r25, r30
    2de0:	10 f4       	brcc	.+4      	; 0x2de6 <xTaskGenericNotifyFromISR+0x174>
    2de2:	e0 93 a9 15 	sts	0x15A9, r30	; 0x8015a9 <uxTopReadyPriority>
    2de6:	9b e0       	ldi	r25, 0x0B	; 11
    2de8:	9e 9f       	mul	r25, r30
    2dea:	f0 01       	movw	r30, r0
    2dec:	11 24       	eor	r1, r1
    2dee:	e5 51       	subi	r30, 0x15	; 21
    2df0:	fa 4e       	sbci	r31, 0xEA	; 234
    2df2:	01 80       	ldd	r0, Z+1	; 0x01
    2df4:	f2 81       	ldd	r31, Z+2	; 0x02
    2df6:	e0 2d       	mov	r30, r0
    2df8:	17 96       	adiw	r26, 0x07	; 7
    2dfa:	fc 93       	st	X, r31
    2dfc:	ee 93       	st	-X, r30
    2dfe:	16 97       	sbiw	r26, 0x06	; 6
    2e00:	46 81       	ldd	r20, Z+6	; 0x06
    2e02:	57 81       	ldd	r21, Z+7	; 0x07
    2e04:	19 96       	adiw	r26, 0x09	; 9
    2e06:	5c 93       	st	X, r21
    2e08:	4e 93       	st	-X, r20
    2e0a:	18 97       	sbiw	r26, 0x08	; 8
    2e0c:	c6 81       	ldd	r28, Z+6	; 0x06
    2e0e:	d7 81       	ldd	r29, Z+7	; 0x07
    2e10:	3d 83       	std	Y+5, r19	; 0x05
    2e12:	2c 83       	std	Y+4, r18	; 0x04
    2e14:	37 83       	std	Z+7, r19	; 0x07
    2e16:	26 83       	std	Z+6, r18	; 0x06
    2e18:	5a 96       	adiw	r26, 0x1a	; 26
    2e1a:	ec 91       	ld	r30, X
    2e1c:	5a 97       	sbiw	r26, 0x1a	; 26
    2e1e:	9e 9f       	mul	r25, r30
    2e20:	f0 01       	movw	r30, r0
    2e22:	11 24       	eor	r1, r1
    2e24:	e5 51       	subi	r30, 0x15	; 21
    2e26:	fa 4e       	sbci	r31, 0xEA	; 234
    2e28:	1d 96       	adiw	r26, 0x0d	; 13
    2e2a:	fc 93       	st	X, r31
    2e2c:	ee 93       	st	-X, r30
    2e2e:	1c 97       	sbiw	r26, 0x0c	; 12
    2e30:	90 81       	ld	r25, Z
    2e32:	9f 5f       	subi	r25, 0xFF	; 255
    2e34:	90 83       	st	Z, r25
    2e36:	21 c0       	rjmp	.+66     	; 0x2e7a <xTaskGenericNotifyFromISR+0x208>
    2e38:	66 ec       	ldi	r22, 0xC6	; 198
    2e3a:	75 e1       	ldi	r23, 0x15	; 21
    2e3c:	fb 01       	movw	r30, r22
    2e3e:	c1 81       	ldd	r28, Z+1	; 0x01
    2e40:	d2 81       	ldd	r29, Z+2	; 0x02
    2e42:	53 96       	adiw	r26, 0x13	; 19
    2e44:	dc 93       	st	X, r29
    2e46:	ce 93       	st	-X, r28
    2e48:	52 97       	sbiw	r26, 0x12	; 18
    2e4a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e4c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e4e:	55 96       	adiw	r26, 0x15	; 21
    2e50:	3c 93       	st	X, r19
    2e52:	2e 93       	st	-X, r18
    2e54:	54 97       	sbiw	r26, 0x14	; 20
    2e56:	4e 81       	ldd	r20, Y+6	; 0x06
    2e58:	5f 81       	ldd	r21, Y+7	; 0x07
    2e5a:	9d 01       	movw	r18, r26
    2e5c:	22 5f       	subi	r18, 0xF2	; 242
    2e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e60:	fa 01       	movw	r30, r20
    2e62:	35 83       	std	Z+5, r19	; 0x05
    2e64:	24 83       	std	Z+4, r18	; 0x04
    2e66:	3f 83       	std	Y+7, r19	; 0x07
    2e68:	2e 83       	std	Y+6, r18	; 0x06
    2e6a:	59 96       	adiw	r26, 0x19	; 25
    2e6c:	7c 93       	st	X, r23
    2e6e:	6e 93       	st	-X, r22
    2e70:	58 97       	sbiw	r26, 0x18	; 24
    2e72:	fb 01       	movw	r30, r22
    2e74:	90 81       	ld	r25, Z
    2e76:	9f 5f       	subi	r25, 0xFF	; 255
    2e78:	90 83       	st	Z, r25
    2e7a:	5a 96       	adiw	r26, 0x1a	; 26
    2e7c:	2c 91       	ld	r18, X
    2e7e:	e0 91 59 16 	lds	r30, 0x1659	; 0x801659 <pxCurrentTCB>
    2e82:	f0 91 5a 16 	lds	r31, 0x165A	; 0x80165a <pxCurrentTCB+0x1>
    2e86:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e88:	92 17       	cp	r25, r18
    2e8a:	48 f4       	brcc	.+18     	; 0x2e9e <xTaskGenericNotifyFromISR+0x22c>
    2e8c:	c1 14       	cp	r12, r1
    2e8e:	d1 04       	cpc	r13, r1
    2e90:	19 f0       	breq	.+6      	; 0x2e98 <xTaskGenericNotifyFromISR+0x226>
    2e92:	91 e0       	ldi	r25, 0x01	; 1
    2e94:	f6 01       	movw	r30, r12
    2e96:	90 83       	st	Z, r25
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	90 93 a3 15 	sts	0x15A3, r25	; 0x8015a3 <xYieldPending>
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	0f 91       	pop	r16
    2ea4:	ff 90       	pop	r15
    2ea6:	ef 90       	pop	r14
    2ea8:	df 90       	pop	r13
    2eaa:	cf 90       	pop	r12
    2eac:	bf 90       	pop	r11
    2eae:	af 90       	pop	r10
    2eb0:	9f 90       	pop	r9
    2eb2:	8f 90       	pop	r8
    2eb4:	08 95       	ret

00002eb6 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	21 f4       	brne	.+8      	; 0x2ec2 <xTaskGenericNotifyStateClear+0xc>
    2eba:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <pxCurrentTCB>
    2ebe:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	fc 01       	movw	r30, r24
    2ecc:	e6 0f       	add	r30, r22
    2ece:	f7 1f       	adc	r31, r23
    2ed0:	23 a9       	ldd	r18, Z+51	; 0x33
    2ed2:	22 30       	cpi	r18, 0x02	; 2
    2ed4:	31 f4       	brne	.+12     	; 0x2ee2 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e6 0f       	add	r30, r22
    2eda:	f7 1f       	adc	r31, r23
    2edc:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2ee4:	0f 90       	pop	r0
    2ee6:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2ee8:	08 95       	ret

00002eea <prvGetNextExpireTime>:
    2eea:	dc 01       	movw	r26, r24
    2eec:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTimerList>
    2ef0:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTimerList+0x1>
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 e0       	ldi	r25, 0x01	; 1
    2ef8:	81 11       	cpse	r24, r1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9c 93       	st	X, r25
    2efe:	91 11       	cpse	r25, r1
    2f00:	08 c0       	rjmp	.+16     	; 0x2f12 <prvGetNextExpireTime+0x28>
    2f02:	07 80       	ldd	r0, Z+7	; 0x07
    2f04:	f0 85       	ldd	r31, Z+8	; 0x08
    2f06:	e0 2d       	mov	r30, r0
    2f08:	60 81       	ld	r22, Z
    2f0a:	71 81       	ldd	r23, Z+1	; 0x01
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	08 95       	ret
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	cb 01       	movw	r24, r22
    2f18:	08 95       	ret

00002f1a <prvInsertTimerInActiveList>:
    2f1a:	cf 92       	push	r12
    2f1c:	df 92       	push	r13
    2f1e:	ef 92       	push	r14
    2f20:	ff 92       	push	r15
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	fc 01       	movw	r30, r24
    2f28:	42 83       	std	Z+2, r20	; 0x02
    2f2a:	53 83       	std	Z+3, r21	; 0x03
    2f2c:	64 83       	std	Z+4, r22	; 0x04
    2f2e:	75 83       	std	Z+5, r23	; 0x05
    2f30:	93 87       	std	Z+11, r25	; 0x0b
    2f32:	82 87       	std	Z+10, r24	; 0x0a
    2f34:	04 17       	cp	r16, r20
    2f36:	15 07       	cpc	r17, r21
    2f38:	26 07       	cpc	r18, r22
    2f3a:	37 07       	cpc	r19, r23
    2f3c:	c0 f0       	brcs	.+48     	; 0x2f6e <prvInsertTimerInActiveList+0x54>
    2f3e:	0c 19       	sub	r16, r12
    2f40:	1d 09       	sbc	r17, r13
    2f42:	2e 09       	sbc	r18, r14
    2f44:	3f 09       	sbc	r19, r15
    2f46:	86 85       	ldd	r24, Z+14	; 0x0e
    2f48:	97 85       	ldd	r25, Z+15	; 0x0f
    2f4a:	a0 89       	ldd	r26, Z+16	; 0x10
    2f4c:	b1 89       	ldd	r27, Z+17	; 0x11
    2f4e:	08 17       	cp	r16, r24
    2f50:	19 07       	cpc	r17, r25
    2f52:	2a 07       	cpc	r18, r26
    2f54:	3b 07       	cpc	r19, r27
    2f56:	00 f5       	brcc	.+64     	; 0x2f98 <prvInsertTimerInActiveList+0x7e>
    2f58:	bf 01       	movw	r22, r30
    2f5a:	6e 5f       	subi	r22, 0xFE	; 254
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	80 91 63 16 	lds	r24, 0x1663	; 0x801663 <pxOverflowTimerList>
    2f62:	90 91 64 16 	lds	r25, 0x1664	; 0x801664 <pxOverflowTimerList+0x1>
    2f66:	0e 94 62 04 	call	0x8c4	; 0x8c4 <vListInsert>
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	18 c0       	rjmp	.+48     	; 0x2f9e <prvInsertTimerInActiveList+0x84>
    2f6e:	0c 15       	cp	r16, r12
    2f70:	1d 05       	cpc	r17, r13
    2f72:	2e 05       	cpc	r18, r14
    2f74:	3f 05       	cpc	r19, r15
    2f76:	28 f4       	brcc	.+10     	; 0x2f82 <prvInsertTimerInActiveList+0x68>
    2f78:	4c 15       	cp	r20, r12
    2f7a:	5d 05       	cpc	r21, r13
    2f7c:	6e 05       	cpc	r22, r14
    2f7e:	7f 05       	cpc	r23, r15
    2f80:	68 f4       	brcc	.+26     	; 0x2f9c <prvInsertTimerInActiveList+0x82>
    2f82:	bf 01       	movw	r22, r30
    2f84:	6e 5f       	subi	r22, 0xFE	; 254
    2f86:	7f 4f       	sbci	r23, 0xFF	; 255
    2f88:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTimerList>
    2f8c:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTimerList+0x1>
    2f90:	0e 94 62 04 	call	0x8c4	; 0x8c4 <vListInsert>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	03 c0       	rjmp	.+6      	; 0x2f9e <prvInsertTimerInActiveList+0x84>
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <prvInsertTimerInActiveList+0x84>
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	ff 90       	pop	r15
    2fa4:	ef 90       	pop	r14
    2fa6:	df 90       	pop	r13
    2fa8:	cf 90       	pop	r12
    2faa:	08 95       	ret

00002fac <prvCheckForValidListAndQueue>:
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	0f 92       	push	r0
    2fb2:	80 91 61 16 	lds	r24, 0x1661	; 0x801661 <xTimerQueue>
    2fb6:	90 91 62 16 	lds	r25, 0x1662	; 0x801662 <xTimerQueue+0x1>
    2fba:	89 2b       	or	r24, r25
    2fbc:	e9 f4       	brne	.+58     	; 0x2ff8 <prvCheckForValidListAndQueue+0x4c>
    2fbe:	82 e7       	ldi	r24, 0x72	; 114
    2fc0:	96 e1       	ldi	r25, 0x16	; 22
    2fc2:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    2fc6:	87 e6       	ldi	r24, 0x67	; 103
    2fc8:	96 e1       	ldi	r25, 0x16	; 22
    2fca:	0e 94 4d 04 	call	0x89a	; 0x89a <vListInitialise>
    2fce:	82 e7       	ldi	r24, 0x72	; 114
    2fd0:	96 e1       	ldi	r25, 0x16	; 22
    2fd2:	90 93 66 16 	sts	0x1666, r25	; 0x801666 <pxCurrentTimerList+0x1>
    2fd6:	80 93 65 16 	sts	0x1665, r24	; 0x801665 <pxCurrentTimerList>
    2fda:	87 e6       	ldi	r24, 0x67	; 103
    2fdc:	96 e1       	ldi	r25, 0x16	; 22
    2fde:	90 93 64 16 	sts	0x1664, r25	; 0x801664 <pxOverflowTimerList+0x1>
    2fe2:	80 93 63 16 	sts	0x1663, r24	; 0x801663 <pxOverflowTimerList>
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	67 e0       	ldi	r22, 0x07	; 7
    2fea:	8a e0       	ldi	r24, 0x0A	; 10
    2fec:	0e 94 00 07 	call	0xe00	; 0xe00 <xQueueGenericCreate>
    2ff0:	90 93 62 16 	sts	0x1662, r25	; 0x801662 <xTimerQueue+0x1>
    2ff4:	80 93 61 16 	sts	0x1661, r24	; 0x801661 <xTimerQueue>
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	08 95       	ret

00002ffe <xTimerCreateTimerTask>:
    2ffe:	ef 92       	push	r14
    3000:	ff 92       	push	r15
    3002:	0f 93       	push	r16
    3004:	d3 df       	rcall	.-90     	; 0x2fac <prvCheckForValidListAndQueue>
    3006:	80 91 61 16 	lds	r24, 0x1661	; 0x801661 <xTimerQueue>
    300a:	90 91 62 16 	lds	r25, 0x1662	; 0x801662 <xTimerQueue+0x1>
    300e:	89 2b       	or	r24, r25
    3010:	91 f0       	breq	.+36     	; 0x3036 <xTimerCreateTimerTask+0x38>
    3012:	0f 2e       	mov	r0, r31
    3014:	ff e5       	ldi	r31, 0x5F	; 95
    3016:	ef 2e       	mov	r14, r31
    3018:	f6 e1       	ldi	r31, 0x16	; 22
    301a:	ff 2e       	mov	r15, r31
    301c:	f0 2d       	mov	r31, r0
    301e:	03 e0       	ldi	r16, 0x03	; 3
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 ec       	ldi	r20, 0xC0	; 192
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	62 ea       	ldi	r22, 0xA2	; 162
    302a:	72 e0       	ldi	r23, 0x02	; 2
    302c:	87 ed       	ldi	r24, 0xD7	; 215
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskCreate>
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <xTimerCreateTimerTask+0x3a>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	0f 91       	pop	r16
    303a:	ff 90       	pop	r15
    303c:	ef 90       	pop	r14
    303e:	08 95       	ret

00003040 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3040:	8f 92       	push	r8
    3042:	9f 92       	push	r9
    3044:	af 92       	push	r10
    3046:	bf 92       	push	r11
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	27 97       	sbiw	r28, 0x07	; 7
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3068:	e0 91 61 16 	lds	r30, 0x1661	; 0x801661 <xTimerQueue>
    306c:	f0 91 62 16 	lds	r31, 0x1662	; 0x801662 <xTimerQueue+0x1>
    3070:	30 97       	sbiw	r30, 0x00	; 0
    3072:	81 f1       	breq	.+96     	; 0x30d4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3074:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3076:	2a 83       	std	Y+2, r18	; 0x02
    3078:	3b 83       	std	Y+3, r19	; 0x03
    307a:	4c 83       	std	Y+4, r20	; 0x04
    307c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    307e:	9f 83       	std	Y+7, r25	; 0x07
    3080:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3082:	66 30       	cpi	r22, 0x06	; 6
    3084:	f4 f4       	brge	.+60     	; 0x30c2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3086:	c4 db       	rcall	.-2168   	; 0x2810 <xTaskGetSchedulerState>
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	69 f4       	brne	.+26     	; 0x30a6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    308c:	00 e0       	ldi	r16, 0x00	; 0
    308e:	a7 01       	movw	r20, r14
    3090:	96 01       	movw	r18, r12
    3092:	be 01       	movw	r22, r28
    3094:	6f 5f       	subi	r22, 0xFF	; 255
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	80 91 61 16 	lds	r24, 0x1661	; 0x801661 <xTimerQueue>
    309c:	90 91 62 16 	lds	r25, 0x1662	; 0x801662 <xTimerQueue+0x1>
    30a0:	0e 94 23 07 	call	0xe46	; 0xe46 <xQueueGenericSend>
    30a4:	18 c0       	rjmp	.+48     	; 0x30d6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    30a6:	00 e0       	ldi	r16, 0x00	; 0
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	a9 01       	movw	r20, r18
    30ae:	be 01       	movw	r22, r28
    30b0:	6f 5f       	subi	r22, 0xFF	; 255
    30b2:	7f 4f       	sbci	r23, 0xFF	; 255
    30b4:	80 91 61 16 	lds	r24, 0x1661	; 0x801661 <xTimerQueue>
    30b8:	90 91 62 16 	lds	r25, 0x1662	; 0x801662 <xTimerQueue+0x1>
    30bc:	0e 94 23 07 	call	0xe46	; 0xe46 <xQueueGenericSend>
    30c0:	0a c0       	rjmp	.+20     	; 0x30d6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	a8 01       	movw	r20, r16
    30c6:	be 01       	movw	r22, r28
    30c8:	6f 5f       	subi	r22, 0xFF	; 255
    30ca:	7f 4f       	sbci	r23, 0xFF	; 255
    30cc:	cf 01       	movw	r24, r30
    30ce:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <xQueueGenericSendFromISR>
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    30d4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    30d6:	27 96       	adiw	r28, 0x07	; 7
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	ff 90       	pop	r15
    30ec:	ef 90       	pop	r14
    30ee:	df 90       	pop	r13
    30f0:	cf 90       	pop	r12
    30f2:	bf 90       	pop	r11
    30f4:	af 90       	pop	r10
    30f6:	9f 90       	pop	r9
    30f8:	8f 90       	pop	r8
    30fa:	08 95       	ret

000030fc <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    30fc:	8f 92       	push	r8
    30fe:	9f 92       	push	r9
    3100:	af 92       	push	r10
    3102:	bf 92       	push	r11
    3104:	cf 92       	push	r12
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	ff 92       	push	r15
    310c:	0f 93       	push	r16
    310e:	1f 93       	push	r17
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3114:	3b c0       	rjmp	.+118    	; 0x318c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3116:	07 80       	ldd	r0, Z+7	; 0x07
    3118:	f0 85       	ldd	r31, Z+8	; 0x08
    311a:	e0 2d       	mov	r30, r0
    311c:	80 80       	ld	r8, Z
    311e:	91 80       	ldd	r9, Z+1	; 0x01
    3120:	a2 80       	ldd	r10, Z+2	; 0x02
    3122:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3124:	c0 85       	ldd	r28, Z+8	; 0x08
    3126:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3128:	8e 01       	movw	r16, r28
    312a:	0e 5f       	subi	r16, 0xFE	; 254
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	c8 01       	movw	r24, r16
    3130:	0e 94 9f 04 	call	0x93e	; 0x93e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3134:	ec 89       	ldd	r30, Y+20	; 0x14
    3136:	fd 89       	ldd	r31, Y+21	; 0x15
    3138:	ce 01       	movw	r24, r28
    313a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    313c:	8e 89       	ldd	r24, Y+22	; 0x16
    313e:	82 ff       	sbrs	r24, 2
    3140:	25 c0       	rjmp	.+74     	; 0x318c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3142:	8e 85       	ldd	r24, Y+14	; 0x0e
    3144:	9f 85       	ldd	r25, Y+15	; 0x0f
    3146:	a8 89       	ldd	r26, Y+16	; 0x10
    3148:	b9 89       	ldd	r27, Y+17	; 0x11
    314a:	88 0d       	add	r24, r8
    314c:	99 1d       	adc	r25, r9
    314e:	aa 1d       	adc	r26, r10
    3150:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3152:	88 16       	cp	r8, r24
    3154:	99 06       	cpc	r9, r25
    3156:	aa 06       	cpc	r10, r26
    3158:	bb 06       	cpc	r11, r27
    315a:	70 f4       	brcc	.+28     	; 0x3178 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    315c:	8a 83       	std	Y+2, r24	; 0x02
    315e:	9b 83       	std	Y+3, r25	; 0x03
    3160:	ac 83       	std	Y+4, r26	; 0x04
    3162:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3164:	db 87       	std	Y+11, r29	; 0x0b
    3166:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3168:	b8 01       	movw	r22, r16
    316a:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTimerList>
    316e:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTimerList+0x1>
    3172:	0e 94 62 04 	call	0x8c4	; 0x8c4 <vListInsert>
    3176:	0a c0       	rjmp	.+20     	; 0x318c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3178:	c1 2c       	mov	r12, r1
    317a:	d1 2c       	mov	r13, r1
    317c:	76 01       	movw	r14, r12
    317e:	00 e0       	ldi	r16, 0x00	; 0
    3180:	10 e0       	ldi	r17, 0x00	; 0
    3182:	a5 01       	movw	r20, r10
    3184:	94 01       	movw	r18, r8
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	ce 01       	movw	r24, r28
    318a:	5a df       	rcall	.-332    	; 0x3040 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    318c:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTimerList>
    3190:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTimerList+0x1>
    3194:	80 81       	ld	r24, Z
    3196:	81 11       	cpse	r24, r1
    3198:	be cf       	rjmp	.-132    	; 0x3116 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    319a:	80 91 63 16 	lds	r24, 0x1663	; 0x801663 <pxOverflowTimerList>
    319e:	90 91 64 16 	lds	r25, 0x1664	; 0x801664 <pxOverflowTimerList+0x1>
    31a2:	90 93 66 16 	sts	0x1666, r25	; 0x801666 <pxCurrentTimerList+0x1>
    31a6:	80 93 65 16 	sts	0x1665, r24	; 0x801665 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    31aa:	f0 93 64 16 	sts	0x1664, r31	; 0x801664 <pxOverflowTimerList+0x1>
    31ae:	e0 93 63 16 	sts	0x1663, r30	; 0x801663 <pxOverflowTimerList>
    }
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	bf 90       	pop	r11
    31c4:	af 90       	pop	r10
    31c6:	9f 90       	pop	r9
    31c8:	8f 90       	pop	r8
    31ca:	08 95       	ret

000031cc <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    31da:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <xTaskGetTickCount>
    31de:	6b 01       	movw	r12, r22
    31e0:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    31e2:	80 91 5b 16 	lds	r24, 0x165B	; 0x80165b <xLastTime.2436>
    31e6:	90 91 5c 16 	lds	r25, 0x165C	; 0x80165c <xLastTime.2436+0x1>
    31ea:	a0 91 5d 16 	lds	r26, 0x165D	; 0x80165d <xLastTime.2436+0x2>
    31ee:	b0 91 5e 16 	lds	r27, 0x165E	; 0x80165e <xLastTime.2436+0x3>
    31f2:	c8 16       	cp	r12, r24
    31f4:	d9 06       	cpc	r13, r25
    31f6:	ea 06       	cpc	r14, r26
    31f8:	fb 06       	cpc	r15, r27
    31fa:	20 f4       	brcc	.+8      	; 0x3204 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    31fc:	7f df       	rcall	.-258    	; 0x30fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	88 83       	st	Y, r24
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3204:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3206:	c0 92 5b 16 	sts	0x165B, r12	; 0x80165b <xLastTime.2436>
    320a:	d0 92 5c 16 	sts	0x165C, r13	; 0x80165c <xLastTime.2436+0x1>
    320e:	e0 92 5d 16 	sts	0x165D, r14	; 0x80165d <xLastTime.2436+0x2>
    3212:	f0 92 5e 16 	sts	0x165E, r15	; 0x80165e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3216:	c7 01       	movw	r24, r14
    3218:	b6 01       	movw	r22, r12
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	ff 90       	pop	r15
    3220:	ef 90       	pop	r14
    3222:	df 90       	pop	r13
    3224:	cf 90       	pop	r12
    3226:	08 95       	ret

00003228 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3228:	4f 92       	push	r4
    322a:	5f 92       	push	r5
    322c:	6f 92       	push	r6
    322e:	7f 92       	push	r7
    3230:	8f 92       	push	r8
    3232:	9f 92       	push	r9
    3234:	af 92       	push	r10
    3236:	bf 92       	push	r11
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	4b 01       	movw	r8, r22
    324a:	5c 01       	movw	r10, r24
    324c:	29 01       	movw	r4, r18
    324e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3250:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTimerList>
    3254:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTimerList+0x1>
    3258:	07 80       	ldd	r0, Z+7	; 0x07
    325a:	f0 85       	ldd	r31, Z+8	; 0x08
    325c:	e0 2d       	mov	r30, r0
    325e:	c0 85       	ldd	r28, Z+8	; 0x08
    3260:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3262:	ce 01       	movw	r24, r28
    3264:	02 96       	adiw	r24, 0x02	; 2
    3266:	0e 94 9f 04 	call	0x93e	; 0x93e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    326a:	8e 89       	ldd	r24, Y+22	; 0x16
    326c:	82 ff       	sbrs	r24, 2
    326e:	1b c0       	rjmp	.+54     	; 0x32a6 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3270:	4e 85       	ldd	r20, Y+14	; 0x0e
    3272:	5f 85       	ldd	r21, Y+15	; 0x0f
    3274:	68 89       	ldd	r22, Y+16	; 0x10
    3276:	79 89       	ldd	r23, Y+17	; 0x11
    3278:	48 0d       	add	r20, r8
    327a:	59 1d       	adc	r21, r9
    327c:	6a 1d       	adc	r22, r10
    327e:	7b 1d       	adc	r23, r11
    3280:	75 01       	movw	r14, r10
    3282:	64 01       	movw	r12, r8
    3284:	93 01       	movw	r18, r6
    3286:	82 01       	movw	r16, r4
    3288:	ce 01       	movw	r24, r28
    328a:	47 de       	rcall	.-882    	; 0x2f1a <prvInsertTimerInActiveList>
    328c:	88 23       	and	r24, r24
    328e:	69 f0       	breq	.+26     	; 0x32aa <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3290:	c1 2c       	mov	r12, r1
    3292:	d1 2c       	mov	r13, r1
    3294:	76 01       	movw	r14, r12
    3296:	00 e0       	ldi	r16, 0x00	; 0
    3298:	10 e0       	ldi	r17, 0x00	; 0
    329a:	a5 01       	movw	r20, r10
    329c:	94 01       	movw	r18, r8
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	ce 01       	movw	r24, r28
    32a2:	ce de       	rcall	.-612    	; 0x3040 <xTimerGenericCommand>
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32a6:	8e 7f       	andi	r24, 0xFE	; 254
    32a8:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32aa:	ec 89       	ldd	r30, Y+20	; 0x14
    32ac:	fd 89       	ldd	r31, Y+21	; 0x15
    32ae:	ce 01       	movw	r24, r28
    32b0:	19 95       	eicall
    }
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	1f 91       	pop	r17
    32b8:	0f 91       	pop	r16
    32ba:	ff 90       	pop	r15
    32bc:	ef 90       	pop	r14
    32be:	df 90       	pop	r13
    32c0:	cf 90       	pop	r12
    32c2:	bf 90       	pop	r11
    32c4:	af 90       	pop	r10
    32c6:	9f 90       	pop	r9
    32c8:	8f 90       	pop	r8
    32ca:	7f 90       	pop	r7
    32cc:	6f 90       	pop	r6
    32ce:	5f 90       	pop	r5
    32d0:	4f 90       	pop	r4
    32d2:	08 95       	ret

000032d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    32d4:	8f 92       	push	r8
    32d6:	9f 92       	push	r9
    32d8:	af 92       	push	r10
    32da:	bf 92       	push	r11
    32dc:	cf 92       	push	r12
    32de:	df 92       	push	r13
    32e0:	ef 92       	push	r14
    32e2:	ff 92       	push	r15
    32e4:	1f 93       	push	r17
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	1f 92       	push	r1
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	6b 01       	movw	r12, r22
    32f2:	7c 01       	movw	r14, r24
    32f4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    32f6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    32fa:	ce 01       	movw	r24, r28
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	66 df       	rcall	.-308    	; 0x31cc <prvSampleTimeNow>
    3300:	4b 01       	movw	r8, r22
    3302:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	81 11       	cpse	r24, r1
    3308:	2d c0       	rjmp	.+90     	; 0x3364 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    330a:	11 11       	cpse	r17, r1
    330c:	0d c0       	rjmp	.+26     	; 0x3328 <prvProcessTimerOrBlockTask+0x54>
    330e:	8c 14       	cp	r8, r12
    3310:	9d 04       	cpc	r9, r13
    3312:	ae 04       	cpc	r10, r14
    3314:	bf 04       	cpc	r11, r15
    3316:	40 f0       	brcs	.+16     	; 0x3328 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3318:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    331c:	a5 01       	movw	r20, r10
    331e:	94 01       	movw	r18, r8
    3320:	c7 01       	movw	r24, r14
    3322:	b6 01       	movw	r22, r12
    3324:	81 df       	rcall	.-254    	; 0x3228 <prvProcessExpiredTimer>
    3326:	20 c0       	rjmp	.+64     	; 0x3368 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3328:	11 23       	and	r17, r17
    332a:	41 f0       	breq	.+16     	; 0x333c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    332c:	e0 91 63 16 	lds	r30, 0x1663	; 0x801663 <pxOverflowTimerList>
    3330:	f0 91 64 16 	lds	r31, 0x1664	; 0x801664 <pxOverflowTimerList+0x1>
    3334:	80 81       	ld	r24, Z
    3336:	11 e0       	ldi	r17, 0x01	; 1
    3338:	81 11       	cpse	r24, r1
    333a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    333c:	b7 01       	movw	r22, r14
    333e:	a6 01       	movw	r20, r12
    3340:	48 19       	sub	r20, r8
    3342:	59 09       	sbc	r21, r9
    3344:	6a 09       	sbc	r22, r10
    3346:	7b 09       	sbc	r23, r11
    3348:	21 2f       	mov	r18, r17
    334a:	80 91 61 16 	lds	r24, 0x1661	; 0x801661 <xTimerQueue>
    334e:	90 91 62 16 	lds	r25, 0x1662	; 0x801662 <xTimerQueue+0x1>
    3352:	0e 94 9d 08 	call	0x113a	; 0x113a <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3356:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
    335a:	81 11       	cpse	r24, r1
    335c:	05 c0       	rjmp	.+10     	; 0x3368 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    335e:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3364:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xTaskResumeAll>
            }
        }
    }
    3368:	0f 90       	pop	r0
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	ff 90       	pop	r15
    3372:	ef 90       	pop	r14
    3374:	df 90       	pop	r13
    3376:	cf 90       	pop	r12
    3378:	bf 90       	pop	r11
    337a:	af 90       	pop	r10
    337c:	9f 90       	pop	r9
    337e:	8f 90       	pop	r8
    3380:	08 95       	ret

00003382 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3382:	af 92       	push	r10
    3384:	bf 92       	push	r11
    3386:	cf 92       	push	r12
    3388:	df 92       	push	r13
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	28 97       	sbiw	r28, 0x08	; 8
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    33a6:	82 c0       	rjmp	.+260    	; 0x34ac <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	88 23       	and	r24, r24
    33ac:	0c f4       	brge	.+2      	; 0x33b0 <prvProcessReceivedCommands+0x2e>
    33ae:	7e c0       	rjmp	.+252    	; 0x34ac <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    33b0:	ae 80       	ldd	r10, Y+6	; 0x06
    33b2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    33b4:	d5 01       	movw	r26, r10
    33b6:	1c 96       	adiw	r26, 0x0c	; 12
    33b8:	8d 91       	ld	r24, X+
    33ba:	9c 91       	ld	r25, X
    33bc:	1d 97       	sbiw	r26, 0x0d	; 13
    33be:	89 2b       	or	r24, r25
    33c0:	21 f0       	breq	.+8      	; 0x33ca <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33c2:	c5 01       	movw	r24, r10
    33c4:	02 96       	adiw	r24, 0x02	; 2
    33c6:	0e 94 9f 04 	call	0x93e	; 0x93e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    33ca:	ce 01       	movw	r24, r28
    33cc:	08 96       	adiw	r24, 0x08	; 8
    33ce:	fe de       	rcall	.-516    	; 0x31cc <prvSampleTimeNow>
    33d0:	8b 01       	movw	r16, r22
    33d2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    33d4:	e9 81       	ldd	r30, Y+1	; 0x01
    33d6:	0e 2e       	mov	r0, r30
    33d8:	00 0c       	add	r0, r0
    33da:	ff 0b       	sbc	r31, r31
    33dc:	ea 30       	cpi	r30, 0x0A	; 10
    33de:	f1 05       	cpc	r31, r1
    33e0:	08 f0       	brcs	.+2      	; 0x33e4 <prvProcessReceivedCommands+0x62>
    33e2:	64 c0       	rjmp	.+200    	; 0x34ac <prvProcessReceivedCommands+0x12a>
    33e4:	88 27       	eor	r24, r24
    33e6:	ee 58       	subi	r30, 0x8E	; 142
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	8f 4f       	sbci	r24, 0xFF	; 255
    33ec:	0c 94 33 2d 	jmp	0x5a66	; 0x5a66 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    33f0:	f5 01       	movw	r30, r10
    33f2:	86 89       	ldd	r24, Z+22	; 0x16
    33f4:	81 60       	ori	r24, 0x01	; 1
    33f6:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    33f8:	ca 80       	ldd	r12, Y+2	; 0x02
    33fa:	db 80       	ldd	r13, Y+3	; 0x03
    33fc:	ec 80       	ldd	r14, Y+4	; 0x04
    33fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3400:	46 85       	ldd	r20, Z+14	; 0x0e
    3402:	57 85       	ldd	r21, Z+15	; 0x0f
    3404:	60 89       	ldd	r22, Z+16	; 0x10
    3406:	71 89       	ldd	r23, Z+17	; 0x11
    3408:	4c 0d       	add	r20, r12
    340a:	5d 1d       	adc	r21, r13
    340c:	6e 1d       	adc	r22, r14
    340e:	7f 1d       	adc	r23, r15
    3410:	c5 01       	movw	r24, r10
    3412:	83 dd       	rcall	.-1274   	; 0x2f1a <prvInsertTimerInActiveList>
    3414:	88 23       	and	r24, r24
    3416:	09 f4       	brne	.+2      	; 0x341a <prvProcessReceivedCommands+0x98>
    3418:	49 c0       	rjmp	.+146    	; 0x34ac <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    341a:	d5 01       	movw	r26, r10
    341c:	54 96       	adiw	r26, 0x14	; 20
    341e:	ed 91       	ld	r30, X+
    3420:	fc 91       	ld	r31, X
    3422:	55 97       	sbiw	r26, 0x15	; 21
    3424:	c5 01       	movw	r24, r10
    3426:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3428:	f5 01       	movw	r30, r10
    342a:	86 89       	ldd	r24, Z+22	; 0x16
    342c:	82 ff       	sbrs	r24, 2
    342e:	3e c0       	rjmp	.+124    	; 0x34ac <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3430:	4a 81       	ldd	r20, Y+2	; 0x02
    3432:	5b 81       	ldd	r21, Y+3	; 0x03
    3434:	6c 81       	ldd	r22, Y+4	; 0x04
    3436:	7d 81       	ldd	r23, Y+5	; 0x05
    3438:	86 85       	ldd	r24, Z+14	; 0x0e
    343a:	97 85       	ldd	r25, Z+15	; 0x0f
    343c:	a0 89       	ldd	r26, Z+16	; 0x10
    343e:	b1 89       	ldd	r27, Z+17	; 0x11
    3440:	9a 01       	movw	r18, r20
    3442:	ab 01       	movw	r20, r22
    3444:	28 0f       	add	r18, r24
    3446:	39 1f       	adc	r19, r25
    3448:	4a 1f       	adc	r20, r26
    344a:	5b 1f       	adc	r21, r27
    344c:	c1 2c       	mov	r12, r1
    344e:	d1 2c       	mov	r13, r1
    3450:	76 01       	movw	r14, r12
    3452:	00 e0       	ldi	r16, 0x00	; 0
    3454:	10 e0       	ldi	r17, 0x00	; 0
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	c5 01       	movw	r24, r10
    345a:	f2 dd       	rcall	.-1052   	; 0x3040 <xTimerGenericCommand>
    345c:	27 c0       	rjmp	.+78     	; 0x34ac <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    345e:	d5 01       	movw	r26, r10
    3460:	56 96       	adiw	r26, 0x16	; 22
    3462:	8c 91       	ld	r24, X
    3464:	56 97       	sbiw	r26, 0x16	; 22
    3466:	8e 7f       	andi	r24, 0xFE	; 254
    3468:	56 96       	adiw	r26, 0x16	; 22
    346a:	8c 93       	st	X, r24
                        break;
    346c:	1f c0       	rjmp	.+62     	; 0x34ac <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    346e:	f5 01       	movw	r30, r10
    3470:	86 89       	ldd	r24, Z+22	; 0x16
    3472:	81 60       	ori	r24, 0x01	; 1
    3474:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3476:	4a 81       	ldd	r20, Y+2	; 0x02
    3478:	5b 81       	ldd	r21, Y+3	; 0x03
    347a:	6c 81       	ldd	r22, Y+4	; 0x04
    347c:	7d 81       	ldd	r23, Y+5	; 0x05
    347e:	46 87       	std	Z+14, r20	; 0x0e
    3480:	57 87       	std	Z+15, r21	; 0x0f
    3482:	60 8b       	std	Z+16, r22	; 0x10
    3484:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3486:	40 0f       	add	r20, r16
    3488:	51 1f       	adc	r21, r17
    348a:	62 1f       	adc	r22, r18
    348c:	73 1f       	adc	r23, r19
    348e:	68 01       	movw	r12, r16
    3490:	79 01       	movw	r14, r18
    3492:	c5 01       	movw	r24, r10
    3494:	42 dd       	rcall	.-1404   	; 0x2f1a <prvInsertTimerInActiveList>
                        break;
    3496:	0a c0       	rjmp	.+20     	; 0x34ac <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3498:	f5 01       	movw	r30, r10
    349a:	86 89       	ldd	r24, Z+22	; 0x16
    349c:	81 fd       	sbrc	r24, 1
    349e:	04 c0       	rjmp	.+8      	; 0x34a8 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    34a0:	c5 01       	movw	r24, r10
    34a2:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
    34a6:	02 c0       	rjmp	.+4      	; 0x34ac <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    34a8:	8e 7f       	andi	r24, 0xFE	; 254
    34aa:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	a9 01       	movw	r20, r18
    34b2:	be 01       	movw	r22, r28
    34b4:	6f 5f       	subi	r22, 0xFF	; 255
    34b6:	7f 4f       	sbci	r23, 0xFF	; 255
    34b8:	80 91 61 16 	lds	r24, 0x1661	; 0x801661 <xTimerQueue>
    34bc:	90 91 62 16 	lds	r25, 0x1662	; 0x801662 <xTimerQueue+0x1>
    34c0:	0e 94 0e 08 	call	0x101c	; 0x101c <xQueueReceive>
    34c4:	81 11       	cpse	r24, r1
    34c6:	70 cf       	rjmp	.-288    	; 0x33a8 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    34c8:	28 96       	adiw	r28, 0x08	; 8
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	ff 90       	pop	r15
    34de:	ef 90       	pop	r14
    34e0:	df 90       	pop	r13
    34e2:	cf 90       	pop	r12
    34e4:	bf 90       	pop	r11
    34e6:	af 90       	pop	r10
    34e8:	08 95       	ret

000034ea <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    34ea:	08 95       	ret

000034ec <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    34ec:	84 b1       	in	r24, 0x04	; 4
    34ee:	80 68       	ori	r24, 0x80	; 128
    34f0:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    34f2:	85 b1       	in	r24, 0x05	; 5
    34f4:	80 68       	ori	r24, 0x80	; 128
    34f6:	85 b9       	out	0x05, r24	; 5
    34f8:	08 95       	ret

000034fa <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    34fa:	83 b1       	in	r24, 0x03	; 3
    34fc:	80 68       	ori	r24, 0x80	; 128
    34fe:	83 b9       	out	0x03, r24	; 3
    3500:	08 95       	ret

00003502 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3502:	f4 df       	rcall	.-24     	; 0x34ec <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3504:	2f ef       	ldi	r18, 0xFF	; 255
    3506:	80 e7       	ldi	r24, 0x70	; 112
    3508:	92 e0       	ldi	r25, 0x02	; 2
    350a:	21 50       	subi	r18, 0x01	; 1
    350c:	80 40       	sbci	r24, 0x00	; 0
    350e:	90 40       	sbci	r25, 0x00	; 0
    3510:	e1 f7       	brne	.-8      	; 0x350a <vApplicationMallocFailedHook+0x8>
    3512:	00 c0       	rjmp	.+0      	; 0x3514 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3514:	00 00       	nop
    3516:	f1 df       	rcall	.-30     	; 0x34fa <prvBlinkMainLed>
    3518:	f5 cf       	rjmp	.-22     	; 0x3504 <vApplicationMallocFailedHook+0x2>

0000351a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    351a:	e8 df       	rcall	.-48     	; 0x34ec <prvSetMainLedOn>
    351c:	2f ef       	ldi	r18, 0xFF	; 255
    351e:	87 ea       	ldi	r24, 0xA7	; 167
    3520:	91 e6       	ldi	r25, 0x61	; 97
    3522:	21 50       	subi	r18, 0x01	; 1
    3524:	80 40       	sbci	r24, 0x00	; 0
    3526:	90 40       	sbci	r25, 0x00	; 0
    3528:	e1 f7       	brne	.-8      	; 0x3522 <vApplicationStackOverflowHook+0x8>
    352a:	00 c0       	rjmp	.+0      	; 0x352c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    352c:	00 00       	nop
    352e:	e5 df       	rcall	.-54     	; 0x34fa <prvBlinkMainLed>
    3530:	f5 cf       	rjmp	.-22     	; 0x351c <vApplicationStackOverflowHook+0x2>

00003532 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    3532:	86 e0       	ldi	r24, 0x06	; 6
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 67 03 	call	0x6ce	; 0x6ce <pvPortMalloc>
    353a:	90 93 f0 17 	sts	0x17F0, r25	; 0x8017f0 <packet+0x1>
    353e:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <packet>
	
	if (NULL == packet){
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	11 f4       	brne	.+4      	; 0x354a <SensorDataPackage_create+0x18>
		return NULL;
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return packet;
}
    354a:	08 95       	ret

0000354c <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    354c:	e0 91 ef 17 	lds	r30, 0x17EF	; 0x8017ef <packet>
    3550:	f0 91 f0 17 	lds	r31, 0x17F0	; 0x8017f0 <packet+0x1>
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
    3558:	08 95       	ret

0000355a <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    355a:	e0 91 ef 17 	lds	r30, 0x17EF	; 0x8017ef <packet>
    355e:	f0 91 f0 17 	lds	r31, 0x17F0	; 0x8017f0 <packet+0x1>
    3562:	93 83       	std	Z+3, r25	; 0x03
    3564:	82 83       	std	Z+2, r24	; 0x02
    3566:	08 95       	ret

00003568 <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    3568:	e0 91 ef 17 	lds	r30, 0x17EF	; 0x8017ef <packet>
    356c:	f0 91 f0 17 	lds	r31, 0x17F0	; 0x8017f0 <packet+0x1>
    3570:	95 83       	std	Z+5, r25	; 0x05
    3572:	84 83       	std	Z+4, r24	; 0x04
    3574:	08 95       	ret

00003576 <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    3576:	ed e7       	ldi	r30, 0x7D	; 125
    3578:	f6 e1       	ldi	r31, 0x16	; 22
    357a:	26 e0       	ldi	r18, 0x06	; 6
    357c:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    357e:	60 83       	st	Z, r22
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3580:	a0 91 ef 17 	lds	r26, 0x17EF	; 0x8017ef <packet>
    3584:	b0 91 f0 17 	lds	r27, 0x17F0	; 0x8017f0 <packet+0x1>
    3588:	2c 91       	ld	r18, X
    358a:	11 96       	adiw	r26, 0x01	; 1
    358c:	3c 91       	ld	r19, X
    358e:	11 97       	sbiw	r26, 0x01	; 1
    3590:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3592:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3594:	12 96       	adiw	r26, 0x02	; 2
    3596:	2c 91       	ld	r18, X
    3598:	12 97       	sbiw	r26, 0x02	; 2
    359a:	13 96       	adiw	r26, 0x03	; 3
    359c:	3c 91       	ld	r19, X
    359e:	13 97       	sbiw	r26, 0x03	; 3
    35a0:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    35a2:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    35a4:	14 96       	adiw	r26, 0x04	; 4
    35a6:	2c 91       	ld	r18, X
    35a8:	14 97       	sbiw	r26, 0x04	; 4
    35aa:	15 96       	adiw	r26, 0x05	; 5
    35ac:	3c 91       	ld	r19, X
    35ae:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    35b0:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    35b2:	26 e1       	ldi	r18, 0x16	; 22
    35b4:	dc 01       	movw	r26, r24
    35b6:	01 90       	ld	r0, Z+
    35b8:	0d 92       	st	X+, r0
    35ba:	2a 95       	dec	r18
    35bc:	e1 f7       	brne	.-8      	; 0x35b6 <getLoRaPayload+0x40>
	};
    35be:	08 95       	ret

000035c0 <Temp_Humidty_sensor_create>:
}Temp_Humidity_Sensor;

//-------Constructor-------------------

void Temp_Humidty_sensor_create(EventGroupHandle_t event1,EventGroupHandle_t event2)
{
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	8c 01       	movw	r16, r24
    35ca:	eb 01       	movw	r28, r22
	temperature_humdity_sensor_t new_temperature_humidty = pvPortMalloc(sizeof(Temp_Humidity_Sensor));
    35cc:	88 e0       	ldi	r24, 0x08	; 8
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 67 03 	call	0x6ce	; 0x6ce <pvPortMalloc>
	if(NULL == new_temperature_humidty)
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	09 f1       	breq	.+66     	; 0x361a <Temp_Humidty_sensor_create+0x5a>
	{
		return NULL;
	}
	_meassureEventGroup=event1;
    35d8:	10 93 f2 17 	sts	0x17F2, r17	; 0x8017f2 <_meassureEventGroup+0x1>
    35dc:	00 93 f1 17 	sts	0x17F1, r16	; 0x8017f1 <_meassureEventGroup>
	_dataReadyEventGroup=event2;
    35e0:	d0 93 f4 17 	sts	0x17F4, r29	; 0x8017f4 <_dataReadyEventGroup+0x1>
    35e4:	c0 93 f3 17 	sts	0x17F3, r28	; 0x8017f3 <_dataReadyEventGroup>
	new_temperature_humidty->humidity_data=humidity;
    35e8:	40 91 93 16 	lds	r20, 0x1693	; 0x801693 <humidity>
    35ec:	50 91 94 16 	lds	r21, 0x1694	; 0x801694 <humidity+0x1>
    35f0:	60 91 95 16 	lds	r22, 0x1695	; 0x801695 <humidity+0x2>
    35f4:	70 91 96 16 	lds	r23, 0x1696	; 0x801696 <humidity+0x3>
    35f8:	fc 01       	movw	r30, r24
    35fa:	44 83       	std	Z+4, r20	; 0x04
    35fc:	55 83       	std	Z+5, r21	; 0x05
    35fe:	66 83       	std	Z+6, r22	; 0x06
    3600:	77 83       	std	Z+7, r23	; 0x07
	new_temperature_humidty->temperature_data=temperature;
    3602:	40 91 97 16 	lds	r20, 0x1697	; 0x801697 <temperature>
    3606:	50 91 98 16 	lds	r21, 0x1698	; 0x801698 <temperature+0x1>
    360a:	60 91 99 16 	lds	r22, 0x1699	; 0x801699 <temperature+0x2>
    360e:	70 91 9a 16 	lds	r23, 0x169A	; 0x80169a <temperature+0x3>
    3612:	40 83       	st	Z, r20
    3614:	51 83       	std	Z+1, r21	; 0x01
    3616:	62 83       	std	Z+2, r22	; 0x02
    3618:	73 83       	std	Z+3, r23	; 0x03
	
}
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	08 95       	ret

00003624 <get_temperature_data>:
//------Get temperature data-----------

uint16_t get_temperature_data()
{
		return (uint16_t)temperature;
    3624:	60 91 97 16 	lds	r22, 0x1697	; 0x801697 <temperature>
    3628:	70 91 98 16 	lds	r23, 0x1698	; 0x801698 <temperature+0x1>
    362c:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <temperature+0x2>
    3630:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <temperature+0x3>
    3634:	c8 d2       	rcall	.+1424   	; 0x3bc6 <__fixunssfsi>
}
    3636:	cb 01       	movw	r24, r22
    3638:	08 95       	ret

0000363a <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
		return (uint16_t)humidity;	
    363a:	60 91 93 16 	lds	r22, 0x1693	; 0x801693 <humidity>
    363e:	70 91 94 16 	lds	r23, 0x1694	; 0x801694 <humidity+0x1>
    3642:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <humidity+0x2>
    3646:	90 91 96 16 	lds	r25, 0x1696	; 0x801696 <humidity+0x3>
    364a:	bd d2       	rcall	.+1402   	; 0x3bc6 <__fixunssfsi>
}
    364c:	cb 01       	movw	r24, r22
    364e:	08 95       	ret

00003650 <tempHum_init>:



/* Task to run for the sensors to work */
void tempHum_init() {
	if ( HIH8120_OK == hih8120_initialise() )
    3650:	3c d3       	rcall	.+1656   	; 0x3cca <hih8120_initialise>
    3652:	88 23       	and	r24, r24
    3654:	41 f0       	breq	.+16     	; 0x3666 <tempHum_init+0x16>
	{
		// Driver initialized OK
		// Always check what hih8120_initialise() returns
	}	else printf("Driver doesn't start");
    3656:	8a ea       	ldi	r24, 0xAA	; 170
    3658:	92 e0       	ldi	r25, 0x02	; 2
    365a:	9f 93       	push	r25
    365c:	8f 93       	push	r24
    365e:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	08 95       	ret

00003668 <tempHum_getDataFromTempHumSensorTask>:
	
	for(;;)
	{
		
		//Wait for Event bits to be set in Group
		event_measure = xEventGroupWaitBits(
    3668:	cc 24       	eor	r12, r12
    366a:	ca 94       	dec	r12
    366c:	dc 2c       	mov	r13, r12
    366e:	76 01       	movw	r14, r12
    3670:	01 e0       	ldi	r16, 0x01	; 1
    3672:	21 e0       	ldi	r18, 0x01	; 1
    3674:	41 e0       	ldi	r20, 0x01	; 1
    3676:	50 e0       	ldi	r21, 0x00	; 0
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	70 e0       	ldi	r23, 0x00	; 0
    367c:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_meassureEventGroup>
    3680:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_meassureEventGroup+0x1>
    3684:	0e 94 c6 01 	call	0x38c	; 0x38c <xEventGroupWaitBits>
		TEMPERATURE_HUMIDITY_BIT,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    3688:	60 ff       	sbrs	r22, 0
    368a:	ee cf       	rjmp	.-36     	; 0x3668 <tempHum_getDataFromTempHumSensorTask>
		{
			
			vTaskDelay( pdMS_TO_TICKS(100UL));
    368c:	66 e0       	ldi	r22, 0x06	; 6
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    3698:	30 d3       	rcall	.+1632   	; 0x3cfa <hih8120_wakeup>
    369a:	88 23       	and	r24, r24
    369c:	c1 f0       	breq	.+48     	; 0x36ce <tempHum_getDataFromTempHumSensorTask+0x66>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    369e:	66 e0       	ldi	r22, 0x06	; 6
    36a0:	70 e0       	ldi	r23, 0x00	; 0
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    36aa:	8f eb       	ldi	r24, 0xBF	; 191
    36ac:	92 e0       	ldi	r25, 0x02	; 2
    36ae:	9f 93       	push	r25
    36b0:	8f 93       	push	r24
    36b2:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
			while(HIH8120_OK == hih8120_wakeup())
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <tempHum_getDataFromTempHumSensorTask+0x60>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    36bc:	63 e0       	ldi	r22, 0x03	; 3
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    36c8:	18 d3       	rcall	.+1584   	; 0x3cfa <hih8120_wakeup>
    36ca:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    36cc:	b9 f3       	breq	.-18     	; 0x36bc <tempHum_getDataFromTempHumSensorTask+0x54>
    36ce:	2a d3       	rcall	.+1620   	; 0x3d24 <hih8120_measure>
	
		vTaskDelay(pdMS_TO_TICKS(50UL));
    36d0:	63 e0       	ldi	r22, 0x03	; 3
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    36dc:	23 d3       	rcall	.+1606   	; 0x3d24 <hih8120_measure>
    36de:	81 11       	cpse	r24, r1
    36e0:	c3 cf       	rjmp	.-122    	; 0x3668 <tempHum_getDataFromTempHumSensorTask>
		{
		
			vTaskDelay(pdMS_TO_TICKS(100UL));
    36e2:	66 e0       	ldi	r22, 0x06	; 6
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
			humidity =  hih8120_getHumidity();
    36ee:	2b d3       	rcall	.+1622   	; 0x3d46 <hih8120_getHumidity>
    36f0:	60 93 93 16 	sts	0x1693, r22	; 0x801693 <humidity>
    36f4:	70 93 94 16 	sts	0x1694, r23	; 0x801694 <humidity+0x1>
    36f8:	80 93 95 16 	sts	0x1695, r24	; 0x801695 <humidity+0x2>
    36fc:	90 93 96 16 	sts	0x1696, r25	; 0x801696 <humidity+0x3>
			temperature = hih8120_getTemperature();
    3700:	37 d3       	rcall	.+1646   	; 0x3d70 <hih8120_getTemperature>
    3702:	60 93 97 16 	sts	0x1697, r22	; 0x801697 <temperature>
    3706:	70 93 98 16 	sts	0x1698, r23	; 0x801698 <temperature+0x1>
    370a:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <temperature+0x2>
    370e:	90 93 9a 16 	sts	0x169A, r25	; 0x80169a <temperature+0x3>
			printf("<<Temperature Humidity task set>>");
    3712:	89 ef       	ldi	r24, 0xF9	; 249
    3714:	92 e0       	ldi	r25, 0x02	; 2
    3716:	9f 93       	push	r25
    3718:	8f 93       	push	r24
    371a:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    371e:	42 e0       	ldi	r20, 0x02	; 2
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <_dataReadyEventGroup>
    372a:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <_dataReadyEventGroup+0x1>
    372e:	0e 94 66 02 	call	0x4cc	; 0x4cc <xEventGroupSetBits>
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	98 cf       	rjmp	.-208    	; 0x3668 <tempHum_getDataFromTempHumSensorTask>

00003738 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{	
    3738:	0f 93       	push	r16
    373a:	1f 93       	push	r17
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	64 97       	sbiw	r28, 0x14	; 20
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	0e 94 33 29 	call	0x5266	; 0x5266 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3756:	94 d4       	rcall	.+2344   	; 0x4080 <lora_driver_rn2483FactoryReset>
    3758:	10 d7       	rcall	.+3616   	; 0x457a <lora_driver_mapReturnCodeToText>
    375a:	9f 93       	push	r25
    375c:	8f 93       	push	r24
    375e:	8b e1       	ldi	r24, 0x1B	; 27
    3760:	93 e0       	ldi	r25, 0x03	; 3
    3762:	9f 93       	push	r25
    3764:	8f 93       	push	r24
    3766:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    376a:	08 d6       	rcall	.+3088   	; 0x437c <lora_driver_configureToEu868>
    376c:	06 d7       	rcall	.+3596   	; 0x457a <lora_driver_mapReturnCodeToText>
    376e:	9f 93       	push	r25
    3770:	8f 93       	push	r24
    3772:	8e e2       	ldi	r24, 0x2E	; 46
    3774:	93 e0       	ldi	r25, 0x03	; 3
    3776:	9f 93       	push	r25
    3778:	8f 93       	push	r24
    377a:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    377e:	87 e4       	ldi	r24, 0x47	; 71
    3780:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join1");
    3782:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <puts>
    3786:	8e 01       	movw	r16, r28
    3788:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    378a:	1f 4f       	sbci	r17, 0xFF	; 255
    378c:	c8 01       	movw	r24, r16
    378e:	8a d4       	rcall	.+2324   	; 0x40a4 <lora_driver_getRn2483Hweui>
    3790:	f4 d6       	rcall	.+3560   	; 0x457a <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3792:	1f 93       	push	r17
    3794:	0f 93       	push	r16
    3796:	9f 93       	push	r25
    3798:	8f 93       	push	r24
    379a:	84 e5       	ldi	r24, 0x54	; 84
    379c:	93 e0       	ldi	r25, 0x03	; 3
    379e:	9f 93       	push	r25
    37a0:	8f 93       	push	r24
    37a2:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    37a6:	c8 01       	movw	r24, r16
    37a8:	99 d4       	rcall	.+2354   	; 0x40dc <lora_driver_setDeviceIdentifier>
    37aa:	e7 d6       	rcall	.+3534   	; 0x457a <lora_driver_mapReturnCodeToText>
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	1f 93       	push	r17
    37b2:	0f 93       	push	r16
    37b4:	88 e6       	ldi	r24, 0x68	; 104
    37b6:	93 e0       	ldi	r25, 0x03	; 3
    37b8:	9f 93       	push	r25
    37ba:	8f 93       	push	r24
    37bc:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    37c0:	8d e7       	ldi	r24, 0x7D	; 125
    37c2:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join2");
    37c4:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    37c8:	a8 01       	movw	r20, r16
    37ca:	6a e8       	ldi	r22, 0x8A	; 138
    37cc:	73 e0       	ldi	r23, 0x03	; 3
    37ce:	8b ea       	ldi	r24, 0xAB	; 171
    37d0:	93 e0       	ldi	r25, 0x03	; 3
    37d2:	b2 d6       	rcall	.+3428   	; 0x4538 <lora_driver_setOtaaIdentity>
    37d4:	d2 d6       	rcall	.+3492   	; 0x457a <lora_driver_mapReturnCodeToText>
    37d6:	9f 93       	push	r25
    37d8:	8f 93       	push	r24
    37da:	1f 93       	push	r17
    37dc:	0f 93       	push	r16
    37de:	8a e8       	ldi	r24, 0x8A	; 138
    37e0:	93 e0       	ldi	r25, 0x03	; 3
    37e2:	9f 93       	push	r25
    37e4:	8f 93       	push	r24
    37e6:	8b ea       	ldi	r24, 0xAB	; 171
    37e8:	93 e0       	ldi	r25, 0x03	; 3
    37ea:	9f 93       	push	r25
    37ec:	8f 93       	push	r24
    37ee:	8c eb       	ldi	r24, 0xBC	; 188
    37f0:	93 e0       	ldi	r25, 0x03	; 3
    37f2:	9f 93       	push	r25
    37f4:	8f 93       	push	r24
    37f6:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    37fa:	a3 d4       	rcall	.+2374   	; 0x4142 <lora_driver_saveMac>
    37fc:	be d6       	rcall	.+3452   	; 0x457a <lora_driver_mapReturnCodeToText>
    37fe:	9f 93       	push	r25
    3800:	8f 93       	push	r24
    3802:	82 ef       	ldi	r24, 0xF2	; 242
    3804:	93 e0       	ldi	r25, 0x03	; 3
    3806:	9f 93       	push	r25
    3808:	8f 93       	push	r24
    380a:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	8d d5       	rcall	.+2842   	; 0x4336 <lora_driver_setAdaptiveDataRate>
    381c:	ae d6       	rcall	.+3420   	; 0x457a <lora_driver_mapReturnCodeToText>
    381e:	9f 93       	push	r25
    3820:	8f 93       	push	r24
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	94 e0       	ldi	r25, 0x04	; 4
    3826:	9f 93       	push	r25
    3828:	8f 93       	push	r24
    382a:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
	puts("Try to join3");
    382e:	82 e2       	ldi	r24, 0x22	; 34
    3830:	94 e0       	ldi	r25, 0x04	; 4
    3832:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3836:	84 ef       	ldi	r24, 0xF4	; 244
    3838:	91 e0       	ldi	r25, 0x01	; 1
    383a:	88 d5       	rcall	.+2832   	; 0x434c <lora_driver_setReceiveDelay>
    383c:	9e d6       	rcall	.+3388   	; 0x457a <lora_driver_mapReturnCodeToText>
    383e:	9f 93       	push	r25
    3840:	8f 93       	push	r24
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	8f 93       	push	r24
    3846:	84 ef       	ldi	r24, 0xF4	; 244
    3848:	8f 93       	push	r24
    384a:	8f e2       	ldi	r24, 0x2F	; 47
    384c:	94 e0       	ldi	r25, 0x04	; 4
    384e:	9f 93       	push	r25
    3850:	8f 93       	push	r24
    3852:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3860:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	74 d4       	rcall	.+2280   	; 0x414e <lora_driver_join>
    3866:	08 2f       	mov	r16, r24
    3868:	88 d6       	rcall	.+3344   	; 0x457a <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    386a:	9f 93       	push	r25
    386c:	8f 93       	push	r24
    386e:	1f 92       	push	r1
    3870:	1f 93       	push	r17
    3872:	8f e4       	ldi	r24, 0x4F	; 79
    3874:	94 e0       	ldi	r25, 0x04	; 4
    3876:	9f 93       	push	r25
    3878:	8f 93       	push	r24
    387a:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	08 30       	cpi	r16, 0x08	; 8
    388c:	59 f0       	breq	.+22     	; 0x38a4 <uplink_lora_setup+0x16c>
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	0e 94 97 29 	call	0x532e	; 0x532e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3894:	66 e3       	ldi	r22, 0x36	; 54
    3896:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
    38a0:	11 50       	subi	r17, 0x01	; 1
    38a2:	f9 f6       	brne	.-66     	; 0x3862 <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    38a4:	08 30       	cpi	r16, 0x08	; 8
    38a6:	21 f4       	brne	.+8      	; 0x38b0 <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	0e 94 79 29 	call	0x52f2	; 0x52f2 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    38ae:	0d c0       	rjmp	.+26     	; 0x38ca <uplink_lora_setup+0x192>
    38b0:	8f e6       	ldi	r24, 0x6F	; 111
		while (1)
		{
			taskYIELD();
		}
	}
}
    38b2:	94 e0       	ldi	r25, 0x04	; 4
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    38b4:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <puts>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	0e 94 88 29 	call	0x5310	; 0x5310 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	0e 94 56 29 	call	0x52ac	; 0x52ac <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    38c4:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    38c8:	fd cf       	rjmp	.-6      	; 0x38c4 <uplink_lora_setup+0x18c>
    38ca:	64 96       	adiw	r28, 0x14	; 20
    38cc:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	1f 91       	pop	r17
    38dc:	0f 91       	pop	r16
    38de:	08 95       	ret

000038e0 <upLink_create>:
    38e0:	ef 92       	push	r14
    38e2:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority, MessageBufferHandle_t mBuffer)
{
    38e4:	0f 93       	push	r16
    38e6:	9b 01       	movw	r18, r22
	messageBuffer = mBuffer;
    38e8:	70 93 9c 16 	sts	0x169C, r23	; 0x80169c <messageBuffer+0x1>
    38ec:	60 93 9b 16 	sts	0x169B, r22	; 0x80169b <messageBuffer>
	
	xTaskCreate(
    38f0:	e1 2c       	mov	r14, r1
    38f2:	f1 2c       	mov	r15, r1
    38f4:	08 2f       	mov	r16, r24
    38f6:	48 e8       	ldi	r20, 0x88	; 136
    38f8:	51 e0       	ldi	r21, 0x01	; 1
    38fa:	6a e7       	ldi	r22, 0x7A	; 122
    38fc:	74 e0       	ldi	r23, 0x04	; 4
    38fe:	8d eb       	ldi	r24, 0xBD	; 189
    3900:	9c e1       	ldi	r25, 0x1C	; 28
    3902:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)mBuffer,
	priority,
	NULL );
}
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	08 95       	ret

0000390e <lora_Handler_task>:


void lora_Handler_task()
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	a9 d3       	rcall	.+1874   	; 0x4064 <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    3912:	62 e0       	ldi	r22, 0x02	; 2
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
	lora_driver_resetRn2483(0);
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	a1 d3       	rcall	.+1858   	; 0x4064 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    3922:	66 e9       	ldi	r22, 0x96	; 150
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    392e:	53 d3       	rcall	.+1702   	; 0x3fd6 <lora_driver_flushBuffers>
	uplink_lora_setup();
    3930:	03 df       	rcall	.-506    	; 0x3738 <uplink_lora_setup>
    3932:	0f ef       	ldi	r16, 0xFF	; 255
	size_t xBytesSent;
	
	for(;;)
	{
		xBytesSent = xMessageBufferReceive(
    3934:	1f ef       	ldi	r17, 0xFF	; 255
    3936:	98 01       	movw	r18, r16
    3938:	46 e1       	ldi	r20, 0x16	; 22
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	6d e9       	ldi	r22, 0x9D	; 157
    393e:	76 e1       	ldi	r23, 0x16	; 22
    3940:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <messageBuffer>
    3944:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <messageBuffer+0x1>
    3948:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xStreamBufferReceive>
    394c:	89 2b       	or	r24, r25
		(void*) &_uplink_payload,  			// Object to be send
		sizeof(_uplink_payload),	// Size of object
		portMAX_DELAY);
		
		
		if (xBytesSent>0)
    394e:	89 f3       	breq	.-30     	; 0x3932 <lora_Handler_task+0x24>
    3950:	83 e0       	ldi	r24, 0x03	; 3
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3952:	0e 94 a9 29 	call	0x5352	; 0x5352 <status_leds_shortPuls>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3956:	6d e9       	ldi	r22, 0x9D	; 157
    3958:	76 e1       	ldi	r23, 0x16	; 22
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	21 d4       	rcall	.+2114   	; 0x41a0 <lora_driver_sendUploadMessage>
    395e:	0d d6       	rcall	.+3098   	; 0x457a <lora_driver_mapReturnCodeToText>
    3960:	9f 93       	push	r25
    3962:	8f 93       	push	r24
    3964:	85 e8       	ldi	r24, 0x85	; 133
    3966:	94 e0       	ldi	r25, 0x04	; 4
    3968:	9f 93       	push	r25
    396a:	8f 93       	push	r24
    396c:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	dc cf       	rjmp	.-72     	; 0x3932 <lora_Handler_task+0x24>

0000397a <upLinkHandler_StartTask>:
    397a:	c9 df       	rcall	.-110    	; 0x390e <lora_Handler_task>

0000397c <Temperature_Humidity_Task>:
}

/*-----------------------------------------------------------*/
void Temperature_Humidity_Task( void *pvParameters )
{
    tempHum_getDataFromTempHumSensorTask(pvParameters);
    397c:	75 ce       	rjmp	.-790    	; 0x3668 <tempHum_getDataFromTempHumSensorTask>
    397e:	08 95       	ret

00003980 <CO2_Task>:
}


void CO2_Task( void *pvParameters )
{	
	CO2_Sensor_Task(pvParameters);
    3980:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <CO2_Sensor_Task>
    3984:	08 95       	ret

00003986 <Application_Task>:
}

/*-----------------------------------------------------------*/
void Application_Task(void* pvParameters)
{
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	e0 97       	sbiw	r28, 0x30	; 48
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
	lora_driver_payload_t payload;
	EventBits_t dataReadyEventBits;
		TickType_t xLastWakeTime;
		const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
		xLastWakeTime = xTaskGetTickCount();
    399a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <xTaskGetTickCount>
    399e:	6f 8b       	std	Y+23, r22	; 0x17
    39a0:	78 8f       	std	Y+24, r23	; 0x18
    39a2:	89 8f       	std	Y+25, r24	; 0x19
    39a4:	9a 8f       	std	Y+26, r25	; 0x1a
		
	
	for (;;)
	{
		
		xEventGroupSetBits(measureEventGroup,CO2_BIT | HUMIDITY_TEMPERATURE_BIT);
    39a6:	43 e0       	ldi	r20, 0x03	; 3
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	60 e0       	ldi	r22, 0x00	; 0
    39ac:	70 e0       	ldi	r23, 0x00	; 0
    39ae:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <measureEventGroup>
    39b2:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <measureEventGroup+0x1>
    39b6:	0e 94 66 02 	call	0x4cc	; 0x4cc <xEventGroupSetBits>
		dataReadyEventBits=xEventGroupWaitBits(dataReadyEventGroup,CO2_BIT | HUMIDITY_TEMPERATURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    39ba:	cc 24       	eor	r12, r12
    39bc:	ca 94       	dec	r12
    39be:	dc 2c       	mov	r13, r12
    39c0:	76 01       	movw	r14, r12
    39c2:	01 e0       	ldi	r16, 0x01	; 1
    39c4:	21 e0       	ldi	r18, 0x01	; 1
    39c6:	43 e0       	ldi	r20, 0x03	; 3
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <dataReadyEventGroup>
    39d2:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <dataReadyEventGroup+0x1>
    39d6:	0e 94 c6 01 	call	0x38c	; 0x38c <xEventGroupWaitBits>
		if ((dataReadyEventBits &(CO2_BIT | HUMIDITY_TEMPERATURE_BIT)  )== (CO2_BIT | HUMIDITY_TEMPERATURE_BIT))
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	83 70       	andi	r24, 0x03	; 3
    39e0:	99 27       	eor	r25, r25
    39e2:	aa 27       	eor	r26, r26
    39e4:	bb 27       	eor	r27, r27
    39e6:	03 97       	sbiw	r24, 0x03	; 3
    39e8:	a1 05       	cpc	r26, r1
    39ea:	b1 05       	cpc	r27, r1
    39ec:	e1 f6       	brne	.-72     	; 0x39a6 <Application_Task+0x20>
		{
		
			setTemperatureData(get_temperature_data());
    39ee:	1a de       	rcall	.-972    	; 0x3624 <get_temperature_data>
    39f0:	b4 dd       	rcall	.-1176   	; 0x355a <setTemperatureData>
			printf("Temperature data ---> %d ",get_temperature_data());
    39f2:	18 de       	rcall	.-976    	; 0x3624 <get_temperature_data>
    39f4:	9f 93       	push	r25
    39f6:	8f 93       	push	r24
    39f8:	8a e9       	ldi	r24, 0x9A	; 154
    39fa:	94 e0       	ldi	r25, 0x04	; 4
    39fc:	9f 93       	push	r25
    39fe:	8f 93       	push	r24
    3a00:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
			setHumidityData(get_humidity_data());
    3a04:	1a de       	rcall	.-972    	; 0x363a <get_humidity_data>
    3a06:	b0 dd       	rcall	.-1184   	; 0x3568 <setHumidityData>
    3a08:	18 de       	rcall	.-976    	; 0x363a <get_humidity_data>
			printf(" Humidity data ----> %d ",get_humidity_data());
    3a0a:	9f 93       	push	r25
    3a0c:	8f 93       	push	r24
    3a0e:	84 eb       	ldi	r24, 0xB4	; 180
    3a10:	94 e0       	ldi	r25, 0x04	; 4
    3a12:	9f 93       	push	r25
    3a14:	8f 93       	push	r24
    3a16:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    3a1a:	0e 94 35 01 	call	0x26a	; 0x26a <get_CO2_data>
			setCO2Ppm(get_CO2_data());
    3a1e:	96 dd       	rcall	.-1236   	; 0x354c <setCO2Ppm>
    3a20:	0e 94 35 01 	call	0x26a	; 0x26a <get_CO2_data>
			printf("CO2 data ---> %i ",get_CO2_data());
    3a24:	9f 93       	push	r25
    3a26:	8f 93       	push	r24
    3a28:	8d ec       	ldi	r24, 0xCD	; 205
    3a2a:	94 e0       	ldi	r25, 0x04	; 4
    3a2c:	9f 93       	push	r25
    3a2e:	8f 93       	push	r24
    3a30:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <printf>
    3a34:	62 e0       	ldi	r22, 0x02	; 2
			
			payload=getLoRaPayload((uint8_t)2);
    3a36:	ce 01       	movw	r24, r28
    3a38:	4b 96       	adiw	r24, 0x1b	; 27
    3a3a:	9d dd       	rcall	.-1222   	; 0x3576 <getLoRaPayload>
    3a3c:	86 e1       	ldi	r24, 0x16	; 22
    3a3e:	fe 01       	movw	r30, r28
    3a40:	7b 96       	adiw	r30, 0x1b	; 27
    3a42:	de 01       	movw	r26, r28
    3a44:	11 96       	adiw	r26, 0x01	; 1
    3a46:	01 90       	ld	r0, Z+
    3a48:	0d 92       	st	X+, r0
    3a4a:	8a 95       	dec	r24
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <Application_Task+0xc0>
    3a4e:	63 e0       	ldi	r22, 0x03	; 3
    3a50:	70 e0       	ldi	r23, 0x00	; 0
			vTaskDelay(pdMS_TO_TICKS(50UL));
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
    3a5a:	0f ef       	ldi	r16, 0xFF	; 255
    3a5c:	1f ef       	ldi	r17, 0xFF	; 255
			xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    3a5e:	98 01       	movw	r18, r16
    3a60:	46 e1       	ldi	r20, 0x16	; 22
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	be 01       	movw	r22, r28
    3a66:	6f 5f       	subi	r22, 0xFF	; 255
    3a68:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6a:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <xMessageBuffer>
    3a6e:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <xMessageBuffer+0x1>
    3a72:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <xStreamBufferSend>
    3a76:	48 ea       	ldi	r20, 0xA8	; 168
    3a78:	58 e4       	ldi	r21, 0x48	; 72
			xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	70 e0       	ldi	r23, 0x00	; 0
    3a7e:	ce 01       	movw	r24, r28
    3a80:	47 96       	adiw	r24, 0x17	; 23
    3a82:	0e 94 a1 10 	call	0x2142	; 0x2142 <xTaskDelayUntil>
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	8a cf       	rjmp	.-236    	; 0x39a6 <Application_Task+0x20>

00003a92 <create_tasks_and_semaphores>:
    3a92:	ef 92       	push	r14
    3a94:	ff 92       	push	r15
 EventBits_t measureEventGroup;
EventBits_t dataReadyEventGroup;
/*-----------------------------------------------------------*/

void create_tasks_and_semaphores(void)
{
    3a96:	0f 93       	push	r16
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
	xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	70 e0       	ldi	r23, 0x00	; 0
    3aa2:	84 e6       	ldi	r24, 0x64	; 100
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <xStreamBufferGenericCreate>
    3aaa:	90 93 f6 17 	sts	0x17F6, r25	; 0x8017f6 <xMessageBuffer+0x1>
    3aae:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <xMessageBuffer>
	
	
	SensorDataPackage_create();
    3ab2:	3f dd       	rcall	.-1410   	; 0x3532 <SensorDataPackage_create>
	measureEventGroup=xEventGroupCreate();
    3ab4:	0e 94 b3 01 	call	0x366	; 0x366 <xEventGroupCreate>
    3ab8:	09 2e       	mov	r0, r25
    3aba:	00 0c       	add	r0, r0
    3abc:	aa 0b       	sbc	r26, r26
    3abe:	bb 0b       	sbc	r27, r27
    3ac0:	80 93 fd 17 	sts	0x17FD, r24	; 0x8017fd <measureEventGroup>
    3ac4:	90 93 fe 17 	sts	0x17FE, r25	; 0x8017fe <measureEventGroup+0x1>
    3ac8:	a0 93 ff 17 	sts	0x17FF, r26	; 0x8017ff <measureEventGroup+0x2>
    3acc:	b0 93 00 18 	sts	0x1800, r27	; 0x801800 <measureEventGroup+0x3>
	dataReadyEventGroup=xEventGroupCreate();
    3ad0:	0e 94 b3 01 	call	0x366	; 0x366 <xEventGroupCreate>
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	09 2e       	mov	r0, r25
    3ad8:	00 0c       	add	r0, r0
    3ada:	66 0b       	sbc	r22, r22
    3adc:	77 0b       	sbc	r23, r23
    3ade:	40 93 f9 17 	sts	0x17F9, r20	; 0x8017f9 <dataReadyEventGroup>
    3ae2:	50 93 fa 17 	sts	0x17FA, r21	; 0x8017fa <dataReadyEventGroup+0x1>
    3ae6:	60 93 fb 17 	sts	0x17FB, r22	; 0x8017fb <dataReadyEventGroup+0x2>
    3aea:	70 93 fc 17 	sts	0x17FC, r23	; 0x8017fc <dataReadyEventGroup+0x3>
	Temp_Humidty_sensor_create(measureEventGroup,dataReadyEventGroup);
    3aee:	cd ef       	ldi	r28, 0xFD	; 253
    3af0:	d7 e1       	ldi	r29, 0x17	; 23
    3af2:	bc 01       	movw	r22, r24
    3af4:	88 81       	ld	r24, Y
    3af6:	99 81       	ldd	r25, Y+1	; 0x01
    3af8:	63 dd       	rcall	.-1338   	; 0x35c0 <Temp_Humidty_sensor_create>
	CO2_sensor_create(measureEventGroup,dataReadyEventGroup);
    3afa:	60 91 f9 17 	lds	r22, 0x17F9	; 0x8017f9 <dataReadyEventGroup>
    3afe:	70 91 fa 17 	lds	r23, 0x17FA	; 0x8017fa <dataReadyEventGroup+0x1>
    3b02:	88 81       	ld	r24, Y
    3b04:	99 81       	ldd	r25, Y+1	; 0x01
    3b06:	0e 94 16 01 	call	0x22c	; 0x22c <CO2_sensor_create>
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xUpLinkSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3b0a:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <xUpLinkSemaphore>
    3b0e:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <xUpLinkSemaphore+0x1>
    3b12:	89 2b       	or	r24, r25
    3b14:	89 f4       	brne	.+34     	; 0x3b38 <create_tasks_and_semaphores+0xa6>
	{
		xUpLinkSemaphore = xSemaphoreCreateMutex(); 
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueCreateMutex>
    3b1c:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <xUpLinkSemaphore+0x1>
    3b20:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <xUpLinkSemaphore>
		if ( ( xUpLinkSemaphore ) != NULL )
    3b24:	00 97       	sbiw	r24, 0x00	; 0
    3b26:	41 f0       	breq	.+16     	; 0x3b38 <create_tasks_and_semaphores+0xa6>
		{
			xSemaphoreGive( ( xUpLinkSemaphore ) ); 
    3b28:	00 e0       	ldi	r16, 0x00	; 0
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	a9 01       	movw	r20, r18
    3b30:	60 e0       	ldi	r22, 0x00	; 0
    3b32:	70 e0       	ldi	r23, 0x00	; 0
    3b34:	0e 94 23 07 	call	0xe46	; 0xe46 <xQueueGenericSend>
		}
	}
	

	xTaskCreate(
    3b38:	e1 2c       	mov	r14, r1
    3b3a:	f1 2c       	mov	r15, r1
    3b3c:	03 e0       	ldi	r16, 0x03	; 3
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 ec       	ldi	r20, 0xC0	; 192
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	6f ed       	ldi	r22, 0xDF	; 223
    3b48:	74 e0       	ldi	r23, 0x04	; 4
    3b4a:	83 ec       	ldi	r24, 0xC3	; 195
    3b4c:	9c e1       	ldi	r25, 0x1C	; 28
    3b4e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
xTaskCreate(
    3b52:	01 e0       	ldi	r16, 0x01	; 1
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	40 ec       	ldi	r20, 0xC0	; 192
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	6b ee       	ldi	r22, 0xEB	; 235
    3b5e:	74 e0       	ldi	r23, 0x04	; 4
    3b60:	8e eb       	ldi	r24, 0xBE	; 190
    3b62:	9c e1       	ldi	r25, 0x1C	; 28
    3b64:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
xTaskCreate(
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 ec       	ldi	r20, 0xC0	; 192
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	75 e0       	ldi	r23, 0x05	; 5
    3b74:	80 ec       	ldi	r24, 0xC0	; 192
    3b76:	9c e1       	ldi	r25, 0x1C	; 28
    3b78:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskCreate>
	,  1 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	
	
}
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	0f 91       	pop	r16
    3b82:	ff 90       	pop	r15
    3b84:	ef 90       	pop	r14
    3b86:	08 95       	ret

00003b88 <initialiseSystem>:
	
}
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3b88:	81 b1       	in	r24, 0x01	; 1
    3b8a:	81 68       	ori	r24, 0x81	; 129
    3b8c:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <stdio_initialise>
	// Let's create some tasks
	

    tempHum_init();
    3b94:	5d dd       	rcall	.-1350   	; 0x3650 <tempHum_init>
	mh_z19_initialise(ser_USART3);
    3b96:	83 e0       	ldi	r24, 0x03	; 3
	 rc_servo_initialise();
    3b98:	cc d5       	rcall	.+2968   	; 0x4732 <mh_z19_initialise>
    3b9a:	3c d6       	rcall	.+3192   	; 0x4814 <rc_servo_initialise>
	create_tasks_and_semaphores();
    3b9c:	7a df       	rcall	.-268    	; 0x3a92 <create_tasks_and_semaphores>
    3b9e:	85 e0       	ldi	r24, 0x05	; 5
       // Always check what hih8120_initialise() returns
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3ba0:	0e 94 e5 28 	call	0x51ca	; 0x51ca <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	70 e0       	ldi	r23, 0x00	; 0
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	1c d2       	rcall	.+1080   	; 0x3fe4 <lora_driver_initialise>
    3bac:	60 91 f5 17 	lds	r22, 0x17F5	; 0x8017f5 <xMessageBuffer>
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
		upLink_create(4,xMessageBuffer);
    3bb0:	70 91 f6 17 	lds	r23, 0x17F6	; 0x8017f6 <xMessageBuffer+0x1>
    3bb4:	84 e0       	ldi	r24, 0x04	; 4
    3bb6:	94 ce       	rjmp	.-728    	; 0x38e0 <upLink_create>
    3bb8:	08 95       	ret

00003bba <main>:
    3bba:	e6 df       	rcall	.-52     	; 0x3b88 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	//printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3bbc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <vTaskStartScheduler>

	/* Replace with your application code */
	
}
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	08 95       	ret

00003bc6 <__fixunssfsi>:
    3bc6:	33 d0       	rcall	.+102    	; 0x3c2e <__fp_splitA>
    3bc8:	88 f0       	brcs	.+34     	; 0x3bec <__fixunssfsi+0x26>
    3bca:	9f 57       	subi	r25, 0x7F	; 127
    3bcc:	90 f0       	brcs	.+36     	; 0x3bf2 <__fixunssfsi+0x2c>
    3bce:	b9 2f       	mov	r27, r25
    3bd0:	99 27       	eor	r25, r25
    3bd2:	b7 51       	subi	r27, 0x17	; 23
    3bd4:	a0 f0       	brcs	.+40     	; 0x3bfe <__fixunssfsi+0x38>
    3bd6:	d1 f0       	breq	.+52     	; 0x3c0c <__fixunssfsi+0x46>
    3bd8:	66 0f       	add	r22, r22
    3bda:	77 1f       	adc	r23, r23
    3bdc:	88 1f       	adc	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	1a f0       	brmi	.+6      	; 0x3be8 <__fixunssfsi+0x22>
    3be2:	ba 95       	dec	r27
    3be4:	c9 f7       	brne	.-14     	; 0x3bd8 <__fixunssfsi+0x12>
    3be6:	12 c0       	rjmp	.+36     	; 0x3c0c <__fixunssfsi+0x46>
    3be8:	b1 30       	cpi	r27, 0x01	; 1
    3bea:	81 f0       	breq	.+32     	; 0x3c0c <__fixunssfsi+0x46>
    3bec:	3a d0       	rcall	.+116    	; 0x3c62 <__fp_zero>
    3bee:	b1 e0       	ldi	r27, 0x01	; 1
    3bf0:	08 95       	ret
    3bf2:	37 c0       	rjmp	.+110    	; 0x3c62 <__fp_zero>
    3bf4:	67 2f       	mov	r22, r23
    3bf6:	78 2f       	mov	r23, r24
    3bf8:	88 27       	eor	r24, r24
    3bfa:	b8 5f       	subi	r27, 0xF8	; 248
    3bfc:	39 f0       	breq	.+14     	; 0x3c0c <__fixunssfsi+0x46>
    3bfe:	b9 3f       	cpi	r27, 0xF9	; 249
    3c00:	cc f3       	brlt	.-14     	; 0x3bf4 <__fixunssfsi+0x2e>
    3c02:	86 95       	lsr	r24
    3c04:	77 95       	ror	r23
    3c06:	67 95       	ror	r22
    3c08:	b3 95       	inc	r27
    3c0a:	d9 f7       	brne	.-10     	; 0x3c02 <__fixunssfsi+0x3c>
    3c0c:	3e f4       	brtc	.+14     	; 0x3c1c <__fixunssfsi+0x56>
    3c0e:	90 95       	com	r25
    3c10:	80 95       	com	r24
    3c12:	70 95       	com	r23
    3c14:	61 95       	neg	r22
    3c16:	7f 4f       	sbci	r23, 0xFF	; 255
    3c18:	8f 4f       	sbci	r24, 0xFF	; 255
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	08 95       	ret

00003c1e <__fp_split3>:
    3c1e:	57 fd       	sbrc	r21, 7
    3c20:	90 58       	subi	r25, 0x80	; 128
    3c22:	44 0f       	add	r20, r20
    3c24:	55 1f       	adc	r21, r21
    3c26:	59 f0       	breq	.+22     	; 0x3c3e <__fp_splitA+0x10>
    3c28:	5f 3f       	cpi	r21, 0xFF	; 255
    3c2a:	71 f0       	breq	.+28     	; 0x3c48 <__fp_splitA+0x1a>
    3c2c:	47 95       	ror	r20

00003c2e <__fp_splitA>:
    3c2e:	88 0f       	add	r24, r24
    3c30:	97 fb       	bst	r25, 7
    3c32:	99 1f       	adc	r25, r25
    3c34:	61 f0       	breq	.+24     	; 0x3c4e <__fp_splitA+0x20>
    3c36:	9f 3f       	cpi	r25, 0xFF	; 255
    3c38:	79 f0       	breq	.+30     	; 0x3c58 <__fp_splitA+0x2a>
    3c3a:	87 95       	ror	r24
    3c3c:	08 95       	ret
    3c3e:	12 16       	cp	r1, r18
    3c40:	13 06       	cpc	r1, r19
    3c42:	14 06       	cpc	r1, r20
    3c44:	55 1f       	adc	r21, r21
    3c46:	f2 cf       	rjmp	.-28     	; 0x3c2c <__fp_split3+0xe>
    3c48:	46 95       	lsr	r20
    3c4a:	f1 df       	rcall	.-30     	; 0x3c2e <__fp_splitA>
    3c4c:	08 c0       	rjmp	.+16     	; 0x3c5e <__fp_splitA+0x30>
    3c4e:	16 16       	cp	r1, r22
    3c50:	17 06       	cpc	r1, r23
    3c52:	18 06       	cpc	r1, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	f1 cf       	rjmp	.-30     	; 0x3c3a <__fp_splitA+0xc>
    3c58:	86 95       	lsr	r24
    3c5a:	71 05       	cpc	r23, r1
    3c5c:	61 05       	cpc	r22, r1
    3c5e:	08 94       	sec
    3c60:	08 95       	ret

00003c62 <__fp_zero>:
    3c62:	e8 94       	clt

00003c64 <__fp_szero>:
    3c64:	bb 27       	eor	r27, r27
    3c66:	66 27       	eor	r22, r22
    3c68:	77 27       	eor	r23, r23
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	97 f9       	bld	r25, 7
    3c6e:	08 95       	ret

00003c70 <_hihTwiCallback>:
    3c70:	65 30       	cpi	r22, 0x05	; 5
    3c72:	f1 f4       	brne	.+60     	; 0x3cb0 <_hihTwiCallback+0x40>
    3c74:	fa 01       	movw	r30, r20
    3c76:	80 81       	ld	r24, Z
    3c78:	8f 73       	andi	r24, 0x3F	; 63
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	98 2f       	mov	r25, r24
    3c7e:	88 27       	eor	r24, r24
    3c80:	21 81       	ldd	r18, Z+1	; 0x01
    3c82:	82 2b       	or	r24, r18
    3c84:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3c88:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	f0 e4       	ldi	r31, 0x40	; 64
    3c90:	8f 9f       	mul	r24, r31
    3c92:	c0 01       	movw	r24, r0
    3c94:	11 24       	eor	r1, r1
    3c96:	fa 01       	movw	r30, r20
    3c98:	23 81       	ldd	r18, Z+3	; 0x03
    3c9a:	26 95       	lsr	r18
    3c9c:	26 95       	lsr	r18
    3c9e:	82 2b       	or	r24, r18
    3ca0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ca4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <_measuringIsReady>
    3cae:	08 95       	ret
    3cb0:	64 30       	cpi	r22, 0x04	; 4
    3cb2:	51 f0       	breq	.+20     	; 0x3cc8 <_hihTwiCallback+0x58>
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e4       	ldi	r25, 0x40	; 64
    3cb8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3cbc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3cc0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cc4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cc8:	08 95       	ret

00003cca <hih8120_initialise>:
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	08 e3       	ldi	r16, 0x38	; 56
    3cd0:	1e e1       	ldi	r17, 0x1E	; 30
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	34 e2       	ldi	r19, 0x24	; 36
    3cd6:	44 ef       	ldi	r20, 0xF4	; 244
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	87 e2       	ldi	r24, 0x27	; 39
    3cde:	0e 94 cb 29 	call	0x5396	; 0x5396 <twiCreate>
    3ce2:	90 93 b5 16 	sts	0x16B5, r25	; 0x8016b5 <_hih8120Handler+0x1>
    3ce6:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <_hih8120Handler>
    3cea:	21 e0       	ldi	r18, 0x01	; 1
    3cec:	89 2b       	or	r24, r25
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <hih8120_initialise+0x28>
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	82 2f       	mov	r24, r18
    3cf4:	1f 91       	pop	r17
    3cf6:	0f 91       	pop	r16
    3cf8:	08 95       	ret

00003cfa <hih8120_wakeup>:
    3cfa:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <_hih8120Handler>
    3cfe:	90 91 b5 16 	lds	r25, 0x16B5	; 0x8016b5 <_hih8120Handler+0x1>
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	59 f0       	breq	.+22     	; 0x3d1c <hih8120_wakeup+0x22>
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	0e 94 1c 2a 	call	0x5438	; 0x5438 <twiTransmit>
    3d10:	84 30       	cpi	r24, 0x04	; 4
    3d12:	31 f4       	brne	.+12     	; 0x3d20 <hih8120_wakeup+0x26>
    3d14:	10 92 b3 16 	sts	0x16B3, r1	; 0x8016b3 <_measuringIsReady>
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	08 95       	ret
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	08 95       	ret
    3d20:	83 e0       	ldi	r24, 0x03	; 3
    3d22:	08 95       	ret

00003d24 <hih8120_measure>:
    3d24:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <_hih8120Handler>
    3d28:	90 91 b5 16 	lds	r25, 0x16B5	; 0x8016b5 <_hih8120Handler+0x1>
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	39 f0       	breq	.+14     	; 0x3d3e <hih8120_measure+0x1a>
    3d30:	64 e0       	ldi	r22, 0x04	; 4
    3d32:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <twiReceive>
    3d36:	85 30       	cpi	r24, 0x05	; 5
    3d38:	21 f0       	breq	.+8      	; 0x3d42 <hih8120_measure+0x1e>
    3d3a:	83 e0       	ldi	r24, 0x03	; 3
    3d3c:	08 95       	ret
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	08 95       	ret
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	08 95       	ret

00003d46 <hih8120_getHumidity>:
    3d46:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3d4a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	0e 94 46 2c 	call	0x588c	; 0x588c <__floatunsisf>
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	48 ec       	ldi	r20, 0xC8	; 200
    3d5c:	52 e4       	ldi	r21, 0x42	; 66
    3d5e:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__mulsf3>
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	38 ef       	ldi	r19, 0xF8	; 248
    3d66:	4f e7       	ldi	r20, 0x7F	; 127
    3d68:	56 e4       	ldi	r21, 0x46	; 70
    3d6a:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__divsf3>
    3d6e:	08 95       	ret

00003d70 <hih8120_getTemperature>:
    3d70:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3d74:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 46 2c 	call	0x588c	; 0x588c <__floatunsisf>
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	45 e2       	ldi	r20, 0x25	; 37
    3d86:	53 e4       	ldi	r21, 0x43	; 67
    3d88:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__mulsf3>
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	38 ef       	ldi	r19, 0xF8	; 248
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	56 e4       	ldi	r21, 0x46	; 70
    3d94:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__divsf3>
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e2       	ldi	r20, 0x20	; 32
    3d9e:	52 e4       	ldi	r21, 0x42	; 66
    3da0:	0c 94 74 2b 	jmp	0x56e8	; 0x56e8 <__subsf3>
    3da4:	08 95       	ret

00003da6 <_serialCallBack>:
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	1f 92       	push	r1
    3db0:	1f 92       	push	r1
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	8c 01       	movw	r16, r24
    3db8:	19 82       	std	Y+1, r1	; 0x01
    3dba:	2d c0       	rjmp	.+90     	; 0x3e16 <_serialCallBack+0x70>
    3dbc:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <rec_buf_inp.2878>
    3dc0:	ec 32       	cpi	r30, 0x2C	; 44
    3dc2:	50 f4       	brcc	.+20     	; 0x3dd8 <_serialCallBack+0x32>
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	8e 0f       	add	r24, r30
    3dc8:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <rec_buf_inp.2878>
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	e1 5e       	subi	r30, 0xE1	; 225
    3dd0:	f8 4e       	sbci	r31, 0xE8	; 232
    3dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd4:	80 83       	st	Z, r24
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <_serialCallBack+0x36>
    3dd8:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <rec_buf_inp.2878>
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	8a 30       	cpi	r24, 0x0A	; 10
    3de0:	d1 f4       	brne	.+52     	; 0x3e16 <_serialCallBack+0x70>
    3de2:	40 91 ed 16 	lds	r20, 0x16ED	; 0x8016ed <rec_buf_inp.2878>
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	fa 01       	movw	r30, r20
    3dea:	e3 5e       	subi	r30, 0xE3	; 227
    3dec:	f8 4e       	sbci	r31, 0xE8	; 232
    3dee:	10 82       	st	Z, r1
    3df0:	41 50       	subi	r20, 0x01	; 1
    3df2:	51 09       	sbc	r21, r1
    3df4:	9e 01       	movw	r18, r28
    3df6:	2f 5f       	subi	r18, 0xFF	; 255
    3df8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfa:	6f e1       	ldi	r22, 0x1F	; 31
    3dfc:	77 e1       	ldi	r23, 0x17	; 23
    3dfe:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    3e02:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    3e06:	0e 94 23 0b 	call	0x1646	; 0x1646 <xStreamBufferSendFromISR>
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	81 11       	cpse	r24, r1
    3e0e:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortYield>
    3e12:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <rec_buf_inp.2878>
    3e16:	be 01       	movw	r22, r28
    3e18:	6e 5f       	subi	r22, 0xFE	; 254
    3e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1c:	c8 01       	movw	r24, r16
    3e1e:	38 d6       	rcall	.+3184   	; 0x4a90 <serial_getByte>
    3e20:	88 23       	and	r24, r24
    3e22:	61 f2       	breq	.-104    	; 0x3dbc <_serialCallBack+0x16>
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	08 95       	ret

00003e32 <_uploadMessage>:
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	8c 01       	movw	r16, r24
    3e3c:	eb 01       	movw	r28, r22
    3e3e:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    3e42:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    3e46:	0e 94 2e 0a 	call	0x145c	; 0x145c <xStreamBufferReset>
    3e4a:	b8 01       	movw	r22, r16
    3e4c:	86 eb       	ldi	r24, 0xB6	; 182
    3e4e:	96 e1       	ldi	r25, 0x16	; 22
    3e50:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <strcpy>
    3e54:	20 97       	sbiw	r28, 0x00	; 0
    3e56:	79 f0       	breq	.+30     	; 0x3e76 <_uploadMessage+0x44>
    3e58:	e6 eb       	ldi	r30, 0xB6	; 182
    3e5a:	f6 e1       	ldi	r31, 0x16	; 22
    3e5c:	01 90       	ld	r0, Z+
    3e5e:	00 20       	and	r0, r0
    3e60:	e9 f7       	brne	.-6      	; 0x3e5c <_uploadMessage+0x2a>
    3e62:	31 97       	sbiw	r30, 0x01	; 1
    3e64:	80 e2       	ldi	r24, 0x20	; 32
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	80 83       	st	Z, r24
    3e6c:	be 01       	movw	r22, r28
    3e6e:	86 eb       	ldi	r24, 0xB6	; 182
    3e70:	96 e1       	ldi	r25, 0x16	; 22
    3e72:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <strcat>
    3e76:	e6 eb       	ldi	r30, 0xB6	; 182
    3e78:	f6 e1       	ldi	r31, 0x16	; 22
    3e7a:	df 01       	movw	r26, r30
    3e7c:	0d 90       	ld	r0, X+
    3e7e:	00 20       	and	r0, r0
    3e80:	e9 f7       	brne	.-6      	; 0x3e7c <_uploadMessage+0x4a>
    3e82:	11 97       	sbiw	r26, 0x01	; 1
    3e84:	8d e0       	ldi	r24, 0x0D	; 13
    3e86:	9a e0       	ldi	r25, 0x0A	; 10
    3e88:	11 96       	adiw	r26, 0x01	; 1
    3e8a:	9c 93       	st	X, r25
    3e8c:	8e 93       	st	-X, r24
    3e8e:	12 96       	adiw	r26, 0x02	; 2
    3e90:	1c 92       	st	X, r1
    3e92:	01 90       	ld	r0, Z+
    3e94:	00 20       	and	r0, r0
    3e96:	e9 f7       	brne	.-6      	; 0x3e92 <_uploadMessage+0x60>
    3e98:	31 97       	sbiw	r30, 0x01	; 1
    3e9a:	e6 5b       	subi	r30, 0xB6	; 182
    3e9c:	f6 41       	sbci	r31, 0x16	; 22
    3e9e:	ae 2f       	mov	r26, r30
    3ea0:	86 eb       	ldi	r24, 0xB6	; 182
    3ea2:	96 e1       	ldi	r25, 0x16	; 22
    3ea4:	ac 01       	movw	r20, r24
    3ea6:	6a 2f       	mov	r22, r26
    3ea8:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_rn2483_serial>
    3eac:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_rn2483_serial+0x1>
    3eb0:	9a d5       	rcall	.+2868   	; 0x49e6 <serial_sendBytes>
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	11 c0       	rjmp	.+34     	; 0x3ed8 <_uploadMessage+0xa6>
    3eb6:	08 e2       	ldi	r16, 0x28	; 40
    3eb8:	15 e0       	ldi	r17, 0x05	; 5
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	4d e2       	ldi	r20, 0x2D	; 45
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	69 e7       	ldi	r22, 0x79	; 121
    3ec4:	77 e1       	ldi	r23, 0x17	; 23
    3ec6:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    3eca:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    3ece:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xStreamBufferReceive>
    3ed2:	89 e7       	ldi	r24, 0x79	; 121
    3ed4:	97 e1       	ldi	r25, 0x17	; 23
    3ed6:	02 c0       	rjmp	.+4      	; 0x3edc <_uploadMessage+0xaa>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <_reply2ReturnCode>:
    3ee6:	2f 92       	push	r2
    3ee8:	3f 92       	push	r3
    3eea:	4f 92       	push	r4
    3eec:	5f 92       	push	r5
    3eee:	6f 92       	push	r6
    3ef0:	7f 92       	push	r7
    3ef2:	8f 92       	push	r8
    3ef4:	9f 92       	push	r9
    3ef6:	af 92       	push	r10
    3ef8:	bf 92       	push	r11
    3efa:	cf 92       	push	r12
    3efc:	df 92       	push	r13
    3efe:	ef 92       	push	r14
    3f00:	ff 92       	push	r15
    3f02:	0f 93       	push	r16
    3f04:	1f 93       	push	r17
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	5c 01       	movw	r10, r24
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	01 90       	ld	r0, Z+
    3f10:	00 20       	and	r0, r0
    3f12:	e9 f7       	brne	.-6      	; 0x3f0e <_reply2ReturnCode+0x28>
    3f14:	31 97       	sbiw	r30, 0x01	; 1
    3f16:	6f 01       	movw	r12, r30
    3f18:	c8 1a       	sub	r12, r24
    3f1a:	d9 0a       	sbc	r13, r25
    3f1c:	5c 2c       	mov	r5, r12
    3f1e:	0f 2e       	mov	r0, r31
    3f20:	f2 ea       	ldi	r31, 0xA2	; 162
    3f22:	8f 2e       	mov	r8, r31
    3f24:	f7 e0       	ldi	r31, 0x07	; 7
    3f26:	9f 2e       	mov	r9, r31
    3f28:	f0 2d       	mov	r31, r0
    3f2a:	e1 2c       	mov	r14, r1
    3f2c:	f1 2c       	mov	r15, r1
    3f2e:	4c 2c       	mov	r4, r12
    3f30:	37 01       	movw	r6, r14
    3f32:	f4 01       	movw	r30, r8
    3f34:	01 81       	ldd	r16, Z+1	; 0x01
    3f36:	12 81       	ldd	r17, Z+2	; 0x02
    3f38:	e8 01       	movw	r28, r16
    3f3a:	09 90       	ld	r0, Y+
    3f3c:	00 20       	and	r0, r0
    3f3e:	e9 f7       	brne	.-6      	; 0x3f3a <_reply2ReturnCode+0x54>
    3f40:	21 97       	sbiw	r28, 0x01	; 1
    3f42:	c0 1b       	sub	r28, r16
    3f44:	d1 0b       	sbc	r29, r17
    3f46:	3c 2e       	mov	r3, r28
    3f48:	f9 e0       	ldi	r31, 0x09	; 9
    3f4a:	cf 16       	cp	r12, r31
    3f4c:	d1 04       	cpc	r13, r1
    3f4e:	58 f0       	brcs	.+22     	; 0x3f66 <_reply2ReturnCode+0x80>
    3f50:	f4 01       	movw	r30, r8
    3f52:	20 80       	ld	r2, Z
    3f54:	fe e0       	ldi	r31, 0x0E	; 14
    3f56:	2f 12       	cpse	r2, r31
    3f58:	06 c0       	rjmp	.+12     	; 0x3f66 <_reply2ReturnCode+0x80>
    3f5a:	b8 01       	movw	r22, r16
    3f5c:	c5 01       	movw	r24, r10
    3f5e:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <strcasestr>
    3f62:	89 2b       	or	r24, r25
    3f64:	09 f5       	brne	.+66     	; 0x3fa8 <_reply2ReturnCode+0xc2>
    3f66:	44 2d       	mov	r20, r4
    3f68:	35 14       	cp	r3, r5
    3f6a:	08 f4       	brcc	.+2      	; 0x3f6e <_reply2ReturnCode+0x88>
    3f6c:	4c 2f       	mov	r20, r28
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	b8 01       	movw	r22, r16
    3f72:	c5 01       	movw	r24, r10
    3f74:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <strncasecmp>
    3f78:	89 2b       	or	r24, r25
    3f7a:	49 f4       	brne	.+18     	; 0x3f8e <_reply2ReturnCode+0xa8>
    3f7c:	f3 01       	movw	r30, r6
    3f7e:	ee 0f       	add	r30, r30
    3f80:	ff 1f       	adc	r31, r31
    3f82:	e6 0d       	add	r30, r6
    3f84:	f7 1d       	adc	r31, r7
    3f86:	ee 55       	subi	r30, 0x5E	; 94
    3f88:	f8 4f       	sbci	r31, 0xF8	; 248
    3f8a:	20 80       	ld	r2, Z
    3f8c:	0d c0       	rjmp	.+26     	; 0x3fa8 <_reply2ReturnCode+0xc2>
    3f8e:	8f ef       	ldi	r24, 0xFF	; 255
    3f90:	e8 1a       	sub	r14, r24
    3f92:	f8 0a       	sbc	r15, r24
    3f94:	e3 e0       	ldi	r30, 0x03	; 3
    3f96:	8e 0e       	add	r8, r30
    3f98:	91 1c       	adc	r9, r1
    3f9a:	f1 e1       	ldi	r31, 0x11	; 17
    3f9c:	ef 16       	cp	r14, r31
    3f9e:	f1 04       	cpc	r15, r1
    3fa0:	39 f6       	brne	.-114    	; 0x3f30 <_reply2ReturnCode+0x4a>
    3fa2:	68 94       	set
    3fa4:	22 24       	eor	r2, r2
    3fa6:	24 f8       	bld	r2, 4
    3fa8:	82 2d       	mov	r24, r2
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	df 90       	pop	r13
    3fb8:	cf 90       	pop	r12
    3fba:	bf 90       	pop	r11
    3fbc:	af 90       	pop	r10
    3fbe:	9f 90       	pop	r9
    3fc0:	8f 90       	pop	r8
    3fc2:	7f 90       	pop	r7
    3fc4:	6f 90       	pop	r6
    3fc6:	5f 90       	pop	r5
    3fc8:	4f 90       	pop	r4
    3fca:	3f 90       	pop	r3
    3fcc:	2f 90       	pop	r2
    3fce:	08 95       	ret

00003fd0 <_uploadMessageRc>:
    3fd0:	30 df       	rcall	.-416    	; 0x3e32 <_uploadMessage>
    3fd2:	89 cf       	rjmp	.-238    	; 0x3ee6 <_reply2ReturnCode>
    3fd4:	08 95       	ret

00003fd6 <lora_driver_flushBuffers>:
    3fd6:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    3fda:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    3fde:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <xStreamBufferReset>
    3fe2:	08 95       	ret

00003fe4 <lora_driver_initialise>:
    3fe4:	8f 92       	push	r8
    3fe6:	9f 92       	push	r9
    3fe8:	af 92       	push	r10
    3fea:	cf 92       	push	r12
    3fec:	ef 92       	push	r14
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	cf 93       	push	r28
    3ff4:	c8 2f       	mov	r28, r24
    3ff6:	8b 01       	movw	r16, r22
    3ff8:	41 e0       	ldi	r20, 0x01	; 1
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	88 ec       	ldi	r24, 0xC8	; 200
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <xStreamBufferGenericCreate>
    4006:	90 93 f1 16 	sts	0x16F1, r25	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    400a:	80 93 f0 16 	sts	0x16F0, r24	; 0x8016f0 <_serialReplyBufferHandle>
    400e:	10 93 ef 16 	sts	0x16EF, r17	; 0x8016ef <_downlinkMessageBuffer+0x1>
    4012:	00 93 ee 16 	sts	0x16EE, r16	; 0x8016ee <_downlinkMessageBuffer>
    4016:	0f 2e       	mov	r0, r31
    4018:	f3 ed       	ldi	r31, 0xD3	; 211
    401a:	8f 2e       	mov	r8, r31
    401c:	fe e1       	ldi	r31, 0x1E	; 30
    401e:	9f 2e       	mov	r9, r31
    4020:	f0 2d       	mov	r31, r0
    4022:	68 94       	set
    4024:	aa 24       	eor	r10, r10
    4026:	a6 f8       	bld	r10, 6
    4028:	68 94       	set
    402a:	cc 24       	eor	r12, r12
    402c:	c6 f8       	bld	r12, 6
    402e:	e1 2c       	mov	r14, r1
    4030:	00 e0       	ldi	r16, 0x00	; 0
    4032:	23 e0       	ldi	r18, 0x03	; 3
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	51 ee       	ldi	r21, 0xE1	; 225
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	8c 2f       	mov	r24, r28
    403e:	06 d4       	rcall	.+2060   	; 0x484c <serial_create>
    4040:	90 93 f3 16 	sts	0x16F3, r25	; 0x8016f3 <_rn2483_serial+0x1>
    4044:	80 93 f2 16 	sts	0x16F2, r24	; 0x8016f2 <_rn2483_serial>
    4048:	e7 e0       	ldi	r30, 0x07	; 7
    404a:	f1 e0       	ldi	r31, 0x01	; 1
    404c:	80 81       	ld	r24, Z
    404e:	80 61       	ori	r24, 0x10	; 16
    4050:	80 83       	st	Z, r24
    4052:	cf 91       	pop	r28
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	ef 90       	pop	r14
    405a:	cf 90       	pop	r12
    405c:	af 90       	pop	r10
    405e:	9f 90       	pop	r9
    4060:	8f 90       	pop	r8
    4062:	08 95       	ret

00004064 <lora_driver_resetRn2483>:
    4064:	88 23       	and	r24, r24
    4066:	31 f0       	breq	.+12     	; 0x4074 <lora_driver_resetRn2483+0x10>
    4068:	e8 e0       	ldi	r30, 0x08	; 8
    406a:	f1 e0       	ldi	r31, 0x01	; 1
    406c:	80 81       	ld	r24, Z
    406e:	8f 7e       	andi	r24, 0xEF	; 239
    4070:	80 83       	st	Z, r24
    4072:	08 95       	ret
    4074:	e8 e0       	ldi	r30, 0x08	; 8
    4076:	f1 e0       	ldi	r31, 0x01	; 1
    4078:	80 81       	ld	r24, Z
    407a:	80 61       	ori	r24, 0x10	; 16
    407c:	80 83       	st	Z, r24
    407e:	08 95       	ret

00004080 <lora_driver_rn2483FactoryReset>:
    4080:	60 e0       	ldi	r22, 0x00	; 0
    4082:	70 e0       	ldi	r23, 0x00	; 0
    4084:	88 e2       	ldi	r24, 0x28	; 40
    4086:	95 e0       	ldi	r25, 0x05	; 5
    4088:	d4 de       	rcall	.-600    	; 0x3e32 <_uploadMessage>
    408a:	e9 e7       	ldi	r30, 0x79	; 121
    408c:	f7 e1       	ldi	r31, 0x17	; 23
    408e:	01 90       	ld	r0, Z+
    4090:	00 20       	and	r0, r0
    4092:	e9 f7       	brne	.-6      	; 0x408e <lora_driver_rn2483FactoryReset+0xe>
    4094:	31 97       	sbiw	r30, 0x01	; 1
    4096:	e9 57       	subi	r30, 0x79	; 121
    4098:	f7 41       	sbci	r31, 0x17	; 23
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	75 97       	sbiw	r30, 0x15	; 21
    409e:	08 f0       	brcs	.+2      	; 0x40a2 <lora_driver_rn2483FactoryReset+0x22>
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	08 95       	ret

000040a4 <lora_driver_getRn2483Hweui>:
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	ec 01       	movw	r28, r24
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	70 e0       	ldi	r23, 0x00	; 0
    40ae:	89 e3       	ldi	r24, 0x39	; 57
    40b0:	95 e0       	ldi	r25, 0x05	; 5
    40b2:	bf de       	rcall	.-642    	; 0x3e32 <_uploadMessage>
    40b4:	e9 e7       	ldi	r30, 0x79	; 121
    40b6:	f7 e1       	ldi	r31, 0x17	; 23
    40b8:	01 90       	ld	r0, Z+
    40ba:	00 20       	and	r0, r0
    40bc:	e9 f7       	brne	.-6      	; 0x40b8 <lora_driver_getRn2483Hweui+0x14>
    40be:	ea 58       	subi	r30, 0x8A	; 138
    40c0:	f7 41       	sbci	r31, 0x17	; 23
    40c2:	39 f4       	brne	.+14     	; 0x40d2 <lora_driver_getRn2483Hweui+0x2e>
    40c4:	69 e7       	ldi	r22, 0x79	; 121
    40c6:	77 e1       	ldi	r23, 0x17	; 23
    40c8:	ce 01       	movw	r24, r28
    40ca:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <strcpy>
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <lora_driver_getRn2483Hweui+0x32>
    40d2:	18 82       	st	Y, r1
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	08 95       	ret

000040dc <lora_driver_setDeviceIdentifier>:
    40dc:	fc 01       	movw	r30, r24
    40de:	01 90       	ld	r0, Z+
    40e0:	00 20       	and	r0, r0
    40e2:	e9 f7       	brne	.-6      	; 0x40de <lora_driver_setDeviceIdentifier+0x2>
    40e4:	9f 01       	movw	r18, r30
    40e6:	21 51       	subi	r18, 0x11	; 17
    40e8:	31 09       	sbc	r19, r1
    40ea:	28 17       	cp	r18, r24
    40ec:	39 07       	cpc	r19, r25
    40ee:	29 f4       	brne	.+10     	; 0x40fa <lora_driver_setDeviceIdentifier+0x1e>
    40f0:	bc 01       	movw	r22, r24
    40f2:	87 e6       	ldi	r24, 0x67	; 103
    40f4:	95 e0       	ldi	r25, 0x05	; 5
    40f6:	6c cf       	rjmp	.-296    	; 0x3fd0 <_uploadMessageRc>
    40f8:	08 95       	ret
    40fa:	89 e0       	ldi	r24, 0x09	; 9
    40fc:	08 95       	ret

000040fe <lora_driver_setApplicationIdentifier>:
    40fe:	fc 01       	movw	r30, r24
    4100:	01 90       	ld	r0, Z+
    4102:	00 20       	and	r0, r0
    4104:	e9 f7       	brne	.-6      	; 0x4100 <lora_driver_setApplicationIdentifier+0x2>
    4106:	9f 01       	movw	r18, r30
    4108:	21 51       	subi	r18, 0x11	; 17
    410a:	31 09       	sbc	r19, r1
    410c:	28 17       	cp	r18, r24
    410e:	39 07       	cpc	r19, r25
    4110:	29 f4       	brne	.+10     	; 0x411c <lora_driver_setApplicationIdentifier+0x1e>
    4112:	bc 01       	movw	r22, r24
    4114:	86 e7       	ldi	r24, 0x76	; 118
    4116:	95 e0       	ldi	r25, 0x05	; 5
    4118:	5b cf       	rjmp	.-330    	; 0x3fd0 <_uploadMessageRc>
    411a:	08 95       	ret
    411c:	89 e0       	ldi	r24, 0x09	; 9
    411e:	08 95       	ret

00004120 <lora_driver_setApplicationKey>:
    4120:	fc 01       	movw	r30, r24
    4122:	01 90       	ld	r0, Z+
    4124:	00 20       	and	r0, r0
    4126:	e9 f7       	brne	.-6      	; 0x4122 <lora_driver_setApplicationKey+0x2>
    4128:	9f 01       	movw	r18, r30
    412a:	21 52       	subi	r18, 0x21	; 33
    412c:	31 09       	sbc	r19, r1
    412e:	28 17       	cp	r18, r24
    4130:	39 07       	cpc	r19, r25
    4132:	29 f4       	brne	.+10     	; 0x413e <lora_driver_setApplicationKey+0x1e>
    4134:	bc 01       	movw	r22, r24
    4136:	85 e8       	ldi	r24, 0x85	; 133
    4138:	95 e0       	ldi	r25, 0x05	; 5
    413a:	4a cf       	rjmp	.-364    	; 0x3fd0 <_uploadMessageRc>
    413c:	08 95       	ret
    413e:	89 e0       	ldi	r24, 0x09	; 9
    4140:	08 95       	ret

00004142 <lora_driver_saveMac>:
    4142:	60 e0       	ldi	r22, 0x00	; 0
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	84 ec       	ldi	r24, 0xC4	; 196
    4148:	95 e0       	ldi	r25, 0x05	; 5
    414a:	42 cf       	rjmp	.-380    	; 0x3fd0 <_uploadMessageRc>
    414c:	08 95       	ret

0000414e <lora_driver_join>:
    414e:	0f 93       	push	r16
    4150:	1f 93       	push	r17
    4152:	e8 2f       	mov	r30, r24
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	e2 56       	subi	r30, 0x62	; 98
    415c:	f8 4f       	sbci	r31, 0xF8	; 248
    415e:	60 81       	ld	r22, Z
    4160:	71 81       	ldd	r23, Z+1	; 0x01
    4162:	8d ec       	ldi	r24, 0xCD	; 205
    4164:	95 e0       	ldi	r25, 0x05	; 5
    4166:	34 df       	rcall	.-408    	; 0x3fd0 <_uploadMessageRc>
    4168:	81 11       	cpse	r24, r1
    416a:	14 c0       	rjmp	.+40     	; 0x4194 <lora_driver_join+0x46>
    416c:	08 e2       	ldi	r16, 0x28	; 40
    416e:	15 e0       	ldi	r17, 0x05	; 5
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	4d e2       	ldi	r20, 0x2D	; 45
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	69 e7       	ldi	r22, 0x79	; 121
    417a:	77 e1       	ldi	r23, 0x17	; 23
    417c:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    4180:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    4184:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xStreamBufferReceive>
    4188:	88 23       	and	r24, r24
    418a:	21 f0       	breq	.+8      	; 0x4194 <lora_driver_join+0x46>
    418c:	89 e7       	ldi	r24, 0x79	; 121
    418e:	97 e1       	ldi	r25, 0x17	; 23
    4190:	aa de       	rcall	.-684    	; 0x3ee6 <_reply2ReturnCode>
    4192:	03 c0       	rjmp	.+6      	; 0x419a <lora_driver_join+0x4c>
    4194:	89 e7       	ldi	r24, 0x79	; 121
    4196:	97 e1       	ldi	r25, 0x17	; 23
    4198:	a6 de       	rcall	.-692    	; 0x3ee6 <_reply2ReturnCode>
    419a:	1f 91       	pop	r17
    419c:	0f 91       	pop	r16
    419e:	08 95       	ret

000041a0 <lora_driver_sendUploadMessage>:
    41a0:	0f 93       	push	r16
    41a2:	1f 93       	push	r17
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	1f 92       	push	r1
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	db 01       	movw	r26, r22
    41b0:	11 96       	adiw	r26, 0x01	; 1
    41b2:	9c 91       	ld	r25, X
    41b4:	11 97       	sbiw	r26, 0x01	; 1
    41b6:	95 31       	cpi	r25, 0x15	; 21
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <lora_driver_sendUploadMessage+0x1c>
    41ba:	b4 c0       	rjmp	.+360    	; 0x4324 <lora_driver_sendUploadMessage+0x184>
    41bc:	99 23       	and	r25, r25
    41be:	81 f1       	breq	.+96     	; 0x4220 <lora_driver_sendUploadMessage+0x80>
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	27 2f       	mov	r18, r23
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	46 2f       	mov	r20, r22
    41ca:	50 e0       	ldi	r21, 0x00	; 0
    41cc:	fd 01       	movw	r30, r26
    41ce:	e4 0f       	add	r30, r20
    41d0:	f5 1f       	adc	r31, r21
    41d2:	92 81       	ldd	r25, Z+2	; 0x02
    41d4:	92 95       	swap	r25
    41d6:	9f 70       	andi	r25, 0x0F	; 15
    41d8:	9a 30       	cpi	r25, 0x0A	; 10
    41da:	10 f0       	brcs	.+4      	; 0x41e0 <lora_driver_sendUploadMessage+0x40>
    41dc:	99 5c       	subi	r25, 0xC9	; 201
    41de:	01 c0       	rjmp	.+2      	; 0x41e2 <lora_driver_sendUploadMessage+0x42>
    41e0:	90 5d       	subi	r25, 0xD0	; 208
    41e2:	f9 01       	movw	r30, r18
    41e4:	e6 5f       	subi	r30, 0xF6	; 246
    41e6:	f8 4e       	sbci	r31, 0xE8	; 232
    41e8:	90 83       	st	Z, r25
    41ea:	2f 5f       	subi	r18, 0xFF	; 255
    41ec:	3f 4f       	sbci	r19, 0xFF	; 255
    41ee:	fd 01       	movw	r30, r26
    41f0:	e4 0f       	add	r30, r20
    41f2:	f5 1f       	adc	r31, r21
    41f4:	92 81       	ldd	r25, Z+2	; 0x02
    41f6:	9f 70       	andi	r25, 0x0F	; 15
    41f8:	49 2f       	mov	r20, r25
    41fa:	50 e0       	ldi	r21, 0x00	; 0
    41fc:	4a 30       	cpi	r20, 0x0A	; 10
    41fe:	51 05       	cpc	r21, r1
    4200:	14 f0       	brlt	.+4      	; 0x4206 <lora_driver_sendUploadMessage+0x66>
    4202:	99 5c       	subi	r25, 0xC9	; 201
    4204:	01 c0       	rjmp	.+2      	; 0x4208 <lora_driver_sendUploadMessage+0x68>
    4206:	90 5d       	subi	r25, 0xD0	; 208
    4208:	f9 01       	movw	r30, r18
    420a:	e6 5f       	subi	r30, 0xF6	; 246
    420c:	f8 4e       	sbci	r31, 0xE8	; 232
    420e:	90 83       	st	Z, r25
    4210:	7e 5f       	subi	r23, 0xFE	; 254
    4212:	6f 5f       	subi	r22, 0xFF	; 255
    4214:	11 96       	adiw	r26, 0x01	; 1
    4216:	9c 91       	ld	r25, X
    4218:	11 97       	sbiw	r26, 0x01	; 1
    421a:	69 17       	cp	r22, r25
    421c:	98 f2       	brcs	.-90     	; 0x41c4 <lora_driver_sendUploadMessage+0x24>
    421e:	01 c0       	rjmp	.+2      	; 0x4222 <lora_driver_sendUploadMessage+0x82>
    4220:	70 e0       	ldi	r23, 0x00	; 0
    4222:	e7 2f       	mov	r30, r23
    4224:	f0 e0       	ldi	r31, 0x00	; 0
    4226:	e6 5f       	subi	r30, 0xF6	; 246
    4228:	f8 4e       	sbci	r31, 0xE8	; 232
    422a:	10 82       	st	Z, r1
    422c:	4c 91       	ld	r20, X
    422e:	81 11       	cpse	r24, r1
    4230:	03 c0       	rjmp	.+6      	; 0x4238 <lora_driver_sendUploadMessage+0x98>
    4232:	86 ed       	ldi	r24, 0xD6	; 214
    4234:	95 e0       	ldi	r25, 0x05	; 5
    4236:	02 c0       	rjmp	.+4      	; 0x423c <lora_driver_sendUploadMessage+0x9c>
    4238:	88 ed       	ldi	r24, 0xD8	; 216
    423a:	95 e0       	ldi	r25, 0x05	; 5
    423c:	2a e0       	ldi	r18, 0x0A	; 10
    423e:	37 e1       	ldi	r19, 0x17	; 23
    4240:	3f 93       	push	r19
    4242:	2f 93       	push	r18
    4244:	1f 92       	push	r1
    4246:	4f 93       	push	r20
    4248:	9f 93       	push	r25
    424a:	8f 93       	push	r24
    424c:	8c ed       	ldi	r24, 0xDC	; 220
    424e:	95 e0       	ldi	r25, 0x05	; 5
    4250:	9f 93       	push	r25
    4252:	8f 93       	push	r24
    4254:	8c e4       	ldi	r24, 0x4C	; 76
    4256:	97 e1       	ldi	r25, 0x17	; 23
    4258:	9f 93       	push	r25
    425a:	8f 93       	push	r24
    425c:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <sprintf>
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	70 e0       	ldi	r23, 0x00	; 0
    4264:	8c e4       	ldi	r24, 0x4C	; 76
    4266:	97 e1       	ldi	r25, 0x17	; 23
    4268:	b3 de       	rcall	.-666    	; 0x3fd0 <_uploadMessageRc>
    426a:	0f b6       	in	r0, 0x3f	; 63
    426c:	f8 94       	cli
    426e:	de bf       	out	0x3e, r29	; 62
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	81 11       	cpse	r24, r1
    4276:	59 c0       	rjmp	.+178    	; 0x432a <lora_driver_sendUploadMessage+0x18a>
    4278:	08 e2       	ldi	r16, 0x28	; 40
    427a:	15 e0       	ldi	r17, 0x05	; 5
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	4d e2       	ldi	r20, 0x2D	; 45
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	69 e7       	ldi	r22, 0x79	; 121
    4286:	77 e1       	ldi	r23, 0x17	; 23
    4288:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    428c:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    4290:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xStreamBufferReceive>
    4294:	88 23       	and	r24, r24
    4296:	09 f4       	brne	.+2      	; 0x429a <lora_driver_sendUploadMessage+0xfa>
    4298:	47 c0       	rjmp	.+142    	; 0x4328 <lora_driver_sendUploadMessage+0x188>
    429a:	89 e7       	ldi	r24, 0x79	; 121
    429c:	97 e1       	ldi	r25, 0x17	; 23
    429e:	23 de       	rcall	.-954    	; 0x3ee6 <_reply2ReturnCode>
    42a0:	8e 30       	cpi	r24, 0x0E	; 14
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <lora_driver_sendUploadMessage+0x106>
    42a4:	42 c0       	rjmp	.+132    	; 0x432a <lora_driver_sendUploadMessage+0x18a>
    42a6:	87 e0       	ldi	r24, 0x07	; 7
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_downlinkMessageBuffer>
    42ae:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_downlinkMessageBuffer+0x1>
    42b2:	89 2b       	or	r24, r25
    42b4:	a9 f1       	breq	.+106    	; 0x4320 <lora_driver_sendUploadMessage+0x180>
    42b6:	be 01       	movw	r22, r28
    42b8:	6f 5f       	subi	r22, 0xFF	; 255
    42ba:	7f 4f       	sbci	r23, 0xFF	; 255
    42bc:	89 e7       	ldi	r24, 0x79	; 121
    42be:	97 e1       	ldi	r25, 0x17	; 23
    42c0:	68 d1       	rcall	.+720    	; 0x4592 <decode_port_no>
    42c2:	80 93 f4 16 	sts	0x16F4, r24	; 0x8016f4 <_downlinkPayload>
    42c6:	e9 81       	ldd	r30, Y+1	; 0x01
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	e7 58       	subi	r30, 0x87	; 135
    42cc:	f8 4e       	sbci	r31, 0xE8	; 232
    42ce:	df 01       	movw	r26, r30
    42d0:	0d 90       	ld	r0, X+
    42d2:	00 20       	and	r0, r0
    42d4:	e9 f7       	brne	.-6      	; 0x42d0 <lora_driver_sendUploadMessage+0x130>
    42d6:	11 97       	sbiw	r26, 0x01	; 1
    42d8:	ae 1b       	sub	r26, r30
    42da:	bf 0b       	sbc	r27, r31
    42dc:	aa 23       	and	r26, r26
    42de:	91 f0       	breq	.+36     	; 0x4304 <lora_driver_sendUploadMessage+0x164>
    42e0:	bb 27       	eor	r27, r27
    42e2:	cd 01       	movw	r24, r26
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	9c 01       	movw	r18, r24
    42e8:	12 f4       	brpl	.+4      	; 0x42ee <lora_driver_sendUploadMessage+0x14e>
    42ea:	2f 5f       	subi	r18, 0xFF	; 255
    42ec:	3f 4f       	sbci	r19, 0xFF	; 255
    42ee:	35 95       	asr	r19
    42f0:	27 95       	ror	r18
    42f2:	20 93 f5 16 	sts	0x16F5, r18	; 0x8016f5 <_downlinkPayload+0x1>
    42f6:	af 01       	movw	r20, r30
    42f8:	4f 5f       	subi	r20, 0xFF	; 255
    42fa:	5f 4f       	sbci	r21, 0xFF	; 255
    42fc:	64 e1       	ldi	r22, 0x14	; 20
    42fe:	86 ef       	ldi	r24, 0xF6	; 246
    4300:	96 e1       	ldi	r25, 0x16	; 22
    4302:	73 d1       	rcall	.+742    	; 0x45ea <decode_hexadecimal_string_bytes>
    4304:	01 e0       	ldi	r16, 0x01	; 1
    4306:	10 e0       	ldi	r17, 0x00	; 0
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	46 e1       	ldi	r20, 0x16	; 22
    430e:	50 e0       	ldi	r21, 0x00	; 0
    4310:	64 ef       	ldi	r22, 0xF4	; 244
    4312:	76 e1       	ldi	r23, 0x16	; 22
    4314:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_downlinkMessageBuffer>
    4318:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_downlinkMessageBuffer+0x1>
    431c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <xStreamBufferSend>
    4320:	8e e0       	ldi	r24, 0x0E	; 14
    4322:	03 c0       	rjmp	.+6      	; 0x432a <lora_driver_sendUploadMessage+0x18a>
    4324:	84 e1       	ldi	r24, 0x14	; 20
    4326:	01 c0       	rjmp	.+2      	; 0x432a <lora_driver_sendUploadMessage+0x18a>
    4328:	80 e0       	ldi	r24, 0x00	; 0
    432a:	0f 90       	pop	r0
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	08 95       	ret

00004336 <lora_driver_setAdaptiveDataRate>:
    4336:	81 30       	cpi	r24, 0x01	; 1
    4338:	19 f0       	breq	.+6      	; 0x4340 <lora_driver_setAdaptiveDataRate+0xa>
    433a:	6c ee       	ldi	r22, 0xEC	; 236
    433c:	75 e0       	ldi	r23, 0x05	; 5
    433e:	02 c0       	rjmp	.+4      	; 0x4344 <lora_driver_setAdaptiveDataRate+0xe>
    4340:	65 ec       	ldi	r22, 0xC5	; 197
    4342:	76 e0       	ldi	r23, 0x06	; 6
    4344:	80 ef       	ldi	r24, 0xF0	; 240
    4346:	95 e0       	ldi	r25, 0x05	; 5
    4348:	43 ce       	rjmp	.-890    	; 0x3fd0 <_uploadMessageRc>
    434a:	08 95       	ret

0000434c <lora_driver_setReceiveDelay>:
    434c:	9f 93       	push	r25
    434e:	8f 93       	push	r24
    4350:	81 e2       	ldi	r24, 0x21	; 33
    4352:	96 e0       	ldi	r25, 0x06	; 6
    4354:	9f 93       	push	r25
    4356:	8f 93       	push	r24
    4358:	8c e4       	ldi	r24, 0x4C	; 76
    435a:	97 e1       	ldi	r25, 0x17	; 23
    435c:	9f 93       	push	r25
    435e:	8f 93       	push	r24
    4360:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <sprintf>
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	70 e0       	ldi	r23, 0x00	; 0
    4368:	8c e4       	ldi	r24, 0x4C	; 76
    436a:	97 e1       	ldi	r25, 0x17	; 23
    436c:	31 de       	rcall	.-926    	; 0x3fd0 <_uploadMessageRc>
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	08 95       	ret

0000437c <lora_driver_configureToEu868>:
    437c:	2f 92       	push	r2
    437e:	3f 92       	push	r3
    4380:	4f 92       	push	r4
    4382:	5f 92       	push	r5
    4384:	6f 92       	push	r6
    4386:	7f 92       	push	r7
    4388:	8f 92       	push	r8
    438a:	9f 92       	push	r9
    438c:	af 92       	push	r10
    438e:	bf 92       	push	r11
    4390:	cf 92       	push	r12
    4392:	df 92       	push	r13
    4394:	ef 92       	push	r14
    4396:	ff 92       	push	r15
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	cd b7       	in	r28, 0x3d	; 61
    43a2:	de b7       	in	r29, 0x3e	; 62
    43a4:	a0 97       	sbiw	r28, 0x20	; 32
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	6e e4       	ldi	r22, 0x4E	; 78
    43b2:	76 e0       	ldi	r23, 0x06	; 6
    43b4:	8a e5       	ldi	r24, 0x5A	; 90
    43b6:	96 e0       	ldi	r25, 0x06	; 6
    43b8:	3c dd       	rcall	.-1416   	; 0x3e32 <_uploadMessage>
    43ba:	95 dd       	rcall	.-1238   	; 0x3ee6 <_reply2ReturnCode>
    43bc:	81 11       	cpse	r24, r1
    43be:	a3 c0       	rjmp	.+326    	; 0x4506 <lora_driver_configureToEu868+0x18a>
    43c0:	80 e2       	ldi	r24, 0x20	; 32
    43c2:	e2 e2       	ldi	r30, 0x22	; 34
    43c4:	f2 e0       	ldi	r31, 0x02	; 2
    43c6:	de 01       	movw	r26, r28
    43c8:	11 96       	adiw	r26, 0x01	; 1
    43ca:	01 90       	ld	r0, Z+
    43cc:	0d 92       	st	X+, r0
    43ce:	8a 95       	dec	r24
    43d0:	e1 f7       	brne	.-8      	; 0x43ca <lora_driver_configureToEu868+0x4e>
    43d2:	9e 01       	movw	r18, r28
    43d4:	2f 5f       	subi	r18, 0xFF	; 255
    43d6:	3f 4f       	sbci	r19, 0xFF	; 255
    43d8:	69 01       	movw	r12, r18
    43da:	e1 2c       	mov	r14, r1
    43dc:	f1 2c       	mov	r15, r1
    43de:	0f 2e       	mov	r0, r31
    43e0:	f6 e6       	ldi	r31, 0x66	; 102
    43e2:	af 2e       	mov	r10, r31
    43e4:	f6 e0       	ldi	r31, 0x06	; 6
    43e6:	bf 2e       	mov	r11, r31
    43e8:	f0 2d       	mov	r31, r0
    43ea:	0c e4       	ldi	r16, 0x4C	; 76
    43ec:	17 e1       	ldi	r17, 0x17	; 23
    43ee:	0f 2e       	mov	r0, r31
    43f0:	ff e7       	ldi	r31, 0x7F	; 127
    43f2:	4f 2e       	mov	r4, r31
    43f4:	f6 e0       	ldi	r31, 0x06	; 6
    43f6:	5f 2e       	mov	r5, r31
    43f8:	f0 2d       	mov	r31, r0
    43fa:	0f 2e       	mov	r0, r31
    43fc:	f6 e9       	ldi	r31, 0x96	; 150
    43fe:	8f 2e       	mov	r8, r31
    4400:	f6 e0       	ldi	r31, 0x06	; 6
    4402:	9f 2e       	mov	r9, r31
    4404:	f0 2d       	mov	r31, r0
    4406:	0f 2e       	mov	r0, r31
    4408:	f0 eb       	ldi	r31, 0xB0	; 176
    440a:	6f 2e       	mov	r6, r31
    440c:	f6 e0       	ldi	r31, 0x06	; 6
    440e:	7f 2e       	mov	r7, r31
    4410:	f0 2d       	mov	r31, r0
    4412:	3e 2c       	mov	r3, r14
    4414:	2f 2c       	mov	r2, r15
    4416:	ff 92       	push	r15
    4418:	ef 92       	push	r14
    441a:	bf 92       	push	r11
    441c:	af 92       	push	r10
    441e:	1f 93       	push	r17
    4420:	0f 93       	push	r16
    4422:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <sprintf>
    4426:	60 e0       	ldi	r22, 0x00	; 0
    4428:	70 e0       	ldi	r23, 0x00	; 0
    442a:	c8 01       	movw	r24, r16
    442c:	02 dd       	rcall	.-1532   	; 0x3e32 <_uploadMessage>
    442e:	5b dd       	rcall	.-1354   	; 0x3ee6 <_reply2ReturnCode>
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	81 11       	cpse	r24, r1
    443e:	63 c0       	rjmp	.+198    	; 0x4506 <lora_driver_configureToEu868+0x18a>
    4440:	32 e0       	ldi	r19, 0x02	; 2
    4442:	3e 15       	cp	r19, r14
    4444:	e8 f4       	brcc	.+58     	; 0x4480 <lora_driver_configureToEu868+0x104>
    4446:	f6 01       	movw	r30, r12
    4448:	83 81       	ldd	r24, Z+3	; 0x03
    444a:	8f 93       	push	r24
    444c:	82 81       	ldd	r24, Z+2	; 0x02
    444e:	8f 93       	push	r24
    4450:	81 81       	ldd	r24, Z+1	; 0x01
    4452:	8f 93       	push	r24
    4454:	80 81       	ld	r24, Z
    4456:	8f 93       	push	r24
    4458:	ff 92       	push	r15
    445a:	ef 92       	push	r14
    445c:	5f 92       	push	r5
    445e:	4f 92       	push	r4
    4460:	1f 93       	push	r17
    4462:	0f 93       	push	r16
    4464:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <sprintf>
    4468:	60 e0       	ldi	r22, 0x00	; 0
    446a:	70 e0       	ldi	r23, 0x00	; 0
    446c:	c8 01       	movw	r24, r16
    446e:	e1 dc       	rcall	.-1598   	; 0x3e32 <_uploadMessage>
    4470:	3a dd       	rcall	.-1420   	; 0x3ee6 <_reply2ReturnCode>
    4472:	0f b6       	in	r0, 0x3f	; 63
    4474:	f8 94       	cli
    4476:	de bf       	out	0x3e, r29	; 62
    4478:	0f be       	out	0x3f, r0	; 63
    447a:	cd bf       	out	0x3d, r28	; 61
    447c:	81 11       	cpse	r24, r1
    447e:	43 c0       	rjmp	.+134    	; 0x4506 <lora_driver_configureToEu868+0x18a>
    4480:	2f 92       	push	r2
    4482:	3f 92       	push	r3
    4484:	9f 92       	push	r9
    4486:	8f 92       	push	r8
    4488:	1f 93       	push	r17
    448a:	0f 93       	push	r16
    448c:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <sprintf>
    4490:	60 e0       	ldi	r22, 0x00	; 0
    4492:	70 e0       	ldi	r23, 0x00	; 0
    4494:	c8 01       	movw	r24, r16
    4496:	cd dc       	rcall	.-1638   	; 0x3e32 <_uploadMessage>
    4498:	26 dd       	rcall	.-1460   	; 0x3ee6 <_reply2ReturnCode>
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	0f 90       	pop	r0
    44a2:	0f 90       	pop	r0
    44a4:	0f 90       	pop	r0
    44a6:	81 11       	cpse	r24, r1
    44a8:	2e c0       	rjmp	.+92     	; 0x4506 <lora_driver_configureToEu868+0x18a>
    44aa:	2f 92       	push	r2
    44ac:	3f 92       	push	r3
    44ae:	7f 92       	push	r7
    44b0:	6f 92       	push	r6
    44b2:	1f 93       	push	r17
    44b4:	0f 93       	push	r16
    44b6:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <sprintf>
    44ba:	60 e0       	ldi	r22, 0x00	; 0
    44bc:	70 e0       	ldi	r23, 0x00	; 0
    44be:	c8 01       	movw	r24, r16
    44c0:	b8 dc       	rcall	.-1680   	; 0x3e32 <_uploadMessage>
    44c2:	11 dd       	rcall	.-1502   	; 0x3ee6 <_reply2ReturnCode>
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	81 11       	cpse	r24, r1
    44d2:	19 c0       	rjmp	.+50     	; 0x4506 <lora_driver_configureToEu868+0x18a>
    44d4:	3f ef       	ldi	r19, 0xFF	; 255
    44d6:	e3 1a       	sub	r14, r19
    44d8:	f3 0a       	sbc	r15, r19
    44da:	84 e0       	ldi	r24, 0x04	; 4
    44dc:	c8 0e       	add	r12, r24
    44de:	d1 1c       	adc	r13, r1
    44e0:	98 e0       	ldi	r25, 0x08	; 8
    44e2:	e9 16       	cp	r14, r25
    44e4:	f1 04       	cpc	r15, r1
    44e6:	09 f0       	breq	.+2      	; 0x44ea <lora_driver_configureToEu868+0x16e>
    44e8:	94 cf       	rjmp	.-216    	; 0x4412 <lora_driver_configureToEu868+0x96>
    44ea:	60 e0       	ldi	r22, 0x00	; 0
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    44ee:	88 ec       	ldi	r24, 0xC8	; 200
    44f0:	96 e0       	ldi	r25, 0x06	; 6
    44f2:	9f dc       	rcall	.-1730   	; 0x3e32 <_uploadMessage>
    44f4:	f8 dc       	rcall	.-1552   	; 0x3ee6 <_reply2ReturnCode>
    44f6:	81 11       	cpse	r24, r1
    44f8:	06 c0       	rjmp	.+12     	; 0x4506 <lora_driver_configureToEu868+0x18a>
    44fa:	60 e0       	ldi	r22, 0x00	; 0
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	89 ed       	ldi	r24, 0xD9	; 217
    4500:	96 e0       	ldi	r25, 0x06	; 6
    4502:	97 dc       	rcall	.-1746   	; 0x3e32 <_uploadMessage>
    4504:	f0 dc       	rcall	.-1568   	; 0x3ee6 <_reply2ReturnCode>
    4506:	a0 96       	adiw	r28, 0x20	; 32
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	df 91       	pop	r29
    4514:	cf 91       	pop	r28
    4516:	1f 91       	pop	r17
    4518:	0f 91       	pop	r16
    451a:	ff 90       	pop	r15
    451c:	ef 90       	pop	r14
    451e:	df 90       	pop	r13
    4520:	cf 90       	pop	r12
    4522:	bf 90       	pop	r11
    4524:	af 90       	pop	r10
    4526:	9f 90       	pop	r9
    4528:	8f 90       	pop	r8
    452a:	7f 90       	pop	r7
    452c:	6f 90       	pop	r6
    452e:	5f 90       	pop	r5
    4530:	4f 90       	pop	r4
    4532:	3f 90       	pop	r3
    4534:	2f 90       	pop	r2
    4536:	08 95       	ret

00004538 <lora_driver_setOtaaIdentity>:
    4538:	ef 92       	push	r14
    453a:	ff 92       	push	r15
    453c:	0f 93       	push	r16
    453e:	1f 93       	push	r17
    4540:	cf 93       	push	r28
    4542:	df 93       	push	r29
    4544:	ec 01       	movw	r28, r24
    4546:	8b 01       	movw	r16, r22
    4548:	7a 01       	movw	r14, r20
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	f4 de       	rcall	.-536    	; 0x4336 <lora_driver_setAdaptiveDataRate>
    454e:	81 11       	cpse	r24, r1
    4550:	0d c0       	rjmp	.+26     	; 0x456c <lora_driver_setOtaaIdentity+0x34>
    4552:	ce 01       	movw	r24, r28
    4554:	d4 dd       	rcall	.-1112   	; 0x40fe <lora_driver_setApplicationIdentifier>
    4556:	81 11       	cpse	r24, r1
    4558:	09 c0       	rjmp	.+18     	; 0x456c <lora_driver_setOtaaIdentity+0x34>
    455a:	c8 01       	movw	r24, r16
    455c:	e1 dd       	rcall	.-1086   	; 0x4120 <lora_driver_setApplicationKey>
    455e:	81 11       	cpse	r24, r1
    4560:	05 c0       	rjmp	.+10     	; 0x456c <lora_driver_setOtaaIdentity+0x34>
    4562:	c7 01       	movw	r24, r14
    4564:	bb dd       	rcall	.-1162   	; 0x40dc <lora_driver_setDeviceIdentifier>
    4566:	81 11       	cpse	r24, r1
    4568:	01 c0       	rjmp	.+2      	; 0x456c <lora_driver_setOtaaIdentity+0x34>
    456a:	eb dd       	rcall	.-1066   	; 0x4142 <lora_driver_saveMac>
    456c:	df 91       	pop	r29
    456e:	cf 91       	pop	r28
    4570:	1f 91       	pop	r17
    4572:	0f 91       	pop	r16
    4574:	ff 90       	pop	r15
    4576:	ef 90       	pop	r14
    4578:	08 95       	ret

0000457a <lora_driver_mapReturnCodeToText>:
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	fc 01       	movw	r30, r24
    457e:	ee 0f       	add	r30, r30
    4580:	ff 1f       	adc	r31, r31
    4582:	8e 0f       	add	r24, r30
    4584:	9f 1f       	adc	r25, r31
    4586:	fc 01       	movw	r30, r24
    4588:	ee 55       	subi	r30, 0x5E	; 94
    458a:	f8 4f       	sbci	r31, 0xF8	; 248
    458c:	81 81       	ldd	r24, Z+1	; 0x01
    458e:	92 81       	ldd	r25, Z+2	; 0x02
    4590:	08 95       	ret

00004592 <decode_port_no>:
    4592:	dc 01       	movw	r26, r24
    4594:	00 97       	sbiw	r24, 0x00	; 0
    4596:	29 f1       	breq	.+74     	; 0x45e2 <decode_port_no+0x50>
    4598:	fb 01       	movw	r30, r22
    459a:	20 81       	ld	r18, Z
    459c:	fc 01       	movw	r30, r24
    459e:	01 90       	ld	r0, Z+
    45a0:	00 20       	and	r0, r0
    45a2:	e9 f7       	brne	.-6      	; 0x459e <decode_port_no+0xc>
    45a4:	31 97       	sbiw	r30, 0x01	; 1
    45a6:	e8 1b       	sub	r30, r24
    45a8:	f9 0b       	sbc	r31, r25
    45aa:	82 2f       	mov	r24, r18
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	e8 17       	cp	r30, r24
    45b0:	f9 07       	cpc	r31, r25
    45b2:	c8 f0       	brcs	.+50     	; 0x45e6 <decode_port_no+0x54>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	08 c0       	rjmp	.+16     	; 0x45c8 <decode_port_no+0x36>
    45b8:	88 0f       	add	r24, r24
    45ba:	38 2f       	mov	r19, r24
    45bc:	33 0f       	add	r19, r19
    45be:	33 0f       	add	r19, r19
    45c0:	83 0f       	add	r24, r19
    45c2:	80 53       	subi	r24, 0x30	; 48
    45c4:	89 0f       	add	r24, r25
    45c6:	2f 5f       	subi	r18, 0xFF	; 255
    45c8:	fd 01       	movw	r30, r26
    45ca:	e2 0f       	add	r30, r18
    45cc:	f1 1d       	adc	r31, r1
    45ce:	90 81       	ld	r25, Z
    45d0:	30 ed       	ldi	r19, 0xD0	; 208
    45d2:	39 0f       	add	r19, r25
    45d4:	3a 30       	cpi	r19, 0x0A	; 10
    45d6:	10 f4       	brcc	.+4      	; 0x45dc <decode_port_no+0x4a>
    45d8:	91 11       	cpse	r25, r1
    45da:	ee cf       	rjmp	.-36     	; 0x45b8 <decode_port_no+0x26>
    45dc:	fb 01       	movw	r30, r22
    45de:	20 83       	st	Z, r18
    45e0:	08 95       	ret
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	08 95       	ret
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	08 95       	ret

000045ea <decode_hexadecimal_string_bytes>:
    45ea:	0f 93       	push	r16
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	dc 01       	movw	r26, r24
    45f4:	ea 01       	movw	r28, r20
    45f6:	20 97       	sbiw	r28, 0x00	; 0
    45f8:	e1 f1       	breq	.+120    	; 0x4672 <decode_hexadecimal_string_bytes+0x88>
    45fa:	fa 01       	movw	r30, r20
    45fc:	01 90       	ld	r0, Z+
    45fe:	00 20       	and	r0, r0
    4600:	e9 f7       	brne	.-6      	; 0x45fc <decode_hexadecimal_string_bytes+0x12>
    4602:	31 97       	sbiw	r30, 0x01	; 1
    4604:	e4 1b       	sub	r30, r20
    4606:	f5 0b       	sbc	r31, r21
    4608:	32 97       	sbiw	r30, 0x02	; 2
    460a:	10 f5       	brcc	.+68     	; 0x4650 <decode_hexadecimal_string_bytes+0x66>
    460c:	32 c0       	rjmp	.+100    	; 0x4672 <decode_hexadecimal_string_bytes+0x88>
    460e:	8d 01       	movw	r16, r26
    4610:	04 0f       	add	r16, r20
    4612:	15 1f       	adc	r17, r21
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	ae 01       	movw	r20, r28
    4618:	42 0f       	add	r20, r18
    461a:	53 1f       	adc	r21, r19
    461c:	fa 01       	movw	r30, r20
    461e:	90 81       	ld	r25, Z
    4620:	91 34       	cpi	r25, 0x41	; 65
    4622:	28 f0       	brcs	.+10     	; 0x462e <decode_hexadecimal_string_bytes+0x44>
    4624:	97 53       	subi	r25, 0x37	; 55
    4626:	59 2f       	mov	r21, r25
    4628:	52 95       	swap	r21
    462a:	50 7f       	andi	r21, 0xF0	; 240
    462c:	03 c0       	rjmp	.+6      	; 0x4634 <decode_hexadecimal_string_bytes+0x4a>
    462e:	59 2f       	mov	r21, r25
    4630:	52 95       	swap	r21
    4632:	50 7f       	andi	r21, 0xF0	; 240
    4634:	2c 0f       	add	r18, r28
    4636:	3d 1f       	adc	r19, r29
    4638:	f9 01       	movw	r30, r18
    463a:	91 81       	ldd	r25, Z+1	; 0x01
    463c:	91 34       	cpi	r25, 0x41	; 65
    463e:	10 f0       	brcs	.+4      	; 0x4644 <decode_hexadecimal_string_bytes+0x5a>
    4640:	97 53       	subi	r25, 0x37	; 55
    4642:	01 c0       	rjmp	.+2      	; 0x4646 <decode_hexadecimal_string_bytes+0x5c>
    4644:	90 53       	subi	r25, 0x30	; 48
    4646:	95 0f       	add	r25, r21
    4648:	f8 01       	movw	r30, r16
    464a:	90 83       	st	Z, r25
    464c:	8f 5f       	subi	r24, 0xFF	; 255
    464e:	01 c0       	rjmp	.+2      	; 0x4652 <decode_hexadecimal_string_bytes+0x68>
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	28 2f       	mov	r18, r24
    4654:	22 0f       	add	r18, r18
    4656:	48 2f       	mov	r20, r24
    4658:	50 e0       	ldi	r21, 0x00	; 0
    465a:	fe 01       	movw	r30, r28
    465c:	01 90       	ld	r0, Z+
    465e:	00 20       	and	r0, r0
    4660:	e9 f7       	brne	.-6      	; 0x465c <decode_hexadecimal_string_bytes+0x72>
    4662:	31 97       	sbiw	r30, 0x01	; 1
    4664:	ec 1b       	sub	r30, r28
    4666:	fd 0b       	sbc	r31, r29
    4668:	4e 17       	cp	r20, r30
    466a:	5f 07       	cpc	r21, r31
    466c:	10 f4       	brcc	.+4      	; 0x4672 <decode_hexadecimal_string_bytes+0x88>
    466e:	86 13       	cpse	r24, r22
    4670:	ce cf       	rjmp	.-100    	; 0x460e <decode_hexadecimal_string_bytes+0x24>
    4672:	df 91       	pop	r29
    4674:	cf 91       	pop	r28
    4676:	1f 91       	pop	r17
    4678:	0f 91       	pop	r16
    467a:	08 95       	ret

0000467c <_serialCallBack>:
    467c:	80 91 a9 17 	lds	r24, 0x17A9	; 0x8017a9 <crc_sum.1945>
    4680:	86 0f       	add	r24, r22
    4682:	80 93 a9 17 	sts	0x17A9, r24	; 0x8017a9 <crc_sum.1945>
    4686:	90 91 ac 17 	lds	r25, 0x17AC	; 0x8017ac <_mh_state>
    468a:	91 30       	cpi	r25, 0x01	; 1
    468c:	79 f0       	breq	.+30     	; 0x46ac <_serialCallBack+0x30>
    468e:	28 f0       	brcs	.+10     	; 0x469a <_serialCallBack+0x1e>
    4690:	92 30       	cpi	r25, 0x02	; 2
    4692:	a9 f0       	breq	.+42     	; 0x46be <_serialCallBack+0x42>
    4694:	93 30       	cpi	r25, 0x03	; 3
    4696:	19 f1       	breq	.+70     	; 0x46de <_serialCallBack+0x62>
    4698:	08 95       	ret
    469a:	6f 3f       	cpi	r22, 0xFF	; 255
    469c:	09 f0       	breq	.+2      	; 0x46a0 <_serialCallBack+0x24>
    469e:	48 c0       	rjmp	.+144    	; 0x4730 <_serialCallBack+0xb4>
    46a0:	10 92 a9 17 	sts	0x17A9, r1	; 0x8017a9 <crc_sum.1945>
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_mh_state>
    46aa:	08 95       	ret
    46ac:	66 38       	cpi	r22, 0x86	; 134
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <_serialCallBack+0x36>
    46b0:	3f c0       	rjmp	.+126    	; 0x4730 <_serialCallBack+0xb4>
    46b2:	10 92 a8 17 	sts	0x17A8, r1	; 0x8017a8 <inDex.1943>
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_mh_state>
    46bc:	08 95       	ret
    46be:	e0 91 a8 17 	lds	r30, 0x17A8	; 0x8017a8 <inDex.1943>
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	8e 0f       	add	r24, r30
    46c6:	80 93 a8 17 	sts	0x17A8, r24	; 0x8017a8 <inDex.1943>
    46ca:	f0 e0       	ldi	r31, 0x00	; 0
    46cc:	ea 55       	subi	r30, 0x5A	; 90
    46ce:	f8 4e       	sbci	r31, 0xE8	; 232
    46d0:	60 83       	st	Z, r22
    46d2:	82 30       	cpi	r24, 0x02	; 2
    46d4:	69 f5       	brne	.+90     	; 0x4730 <_serialCallBack+0xb4>
    46d6:	83 e0       	ldi	r24, 0x03	; 3
    46d8:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_mh_state>
    46dc:	08 95       	ret
    46de:	90 91 a8 17 	lds	r25, 0x17A8	; 0x8017a8 <inDex.1943>
    46e2:	21 e0       	ldi	r18, 0x01	; 1
    46e4:	29 0f       	add	r18, r25
    46e6:	20 93 a8 17 	sts	0x17A8, r18	; 0x8017a8 <inDex.1943>
    46ea:	96 30       	cpi	r25, 0x06	; 6
    46ec:	09 f5       	brne	.+66     	; 0x4730 <_serialCallBack+0xb4>
    46ee:	81 11       	cpse	r24, r1
    46f0:	0e c0       	rjmp	.+28     	; 0x470e <_serialCallBack+0x92>
    46f2:	e6 ea       	ldi	r30, 0xA6	; 166
    46f4:	f7 e1       	ldi	r31, 0x17	; 23
    46f6:	80 81       	ld	r24, Z
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	98 2f       	mov	r25, r24
    46fc:	88 27       	eor	r24, r24
    46fe:	21 81       	ldd	r18, Z+1	; 0x01
    4700:	82 0f       	add	r24, r18
    4702:	91 1d       	adc	r25, r1
    4704:	90 93 ae 17 	sts	0x17AE, r25	; 0x8017ae <_ppm+0x1>
    4708:	80 93 ad 17 	sts	0x17AD, r24	; 0x8017ad <_ppm>
    470c:	04 c0       	rjmp	.+8      	; 0x4716 <_serialCallBack+0x9a>
    470e:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <_ppm+0x1>
    4712:	10 92 ad 17 	sts	0x17AD, r1	; 0x8017ad <_ppm>
    4716:	10 92 ac 17 	sts	0x17AC, r1	; 0x8017ac <_mh_state>
    471a:	e0 91 aa 17 	lds	r30, 0x17AA	; 0x8017aa <_appCallBack>
    471e:	f0 91 ab 17 	lds	r31, 0x17AB	; 0x8017ab <_appCallBack+0x1>
    4722:	30 97       	sbiw	r30, 0x00	; 0
    4724:	29 f0       	breq	.+10     	; 0x4730 <_serialCallBack+0xb4>
    4726:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_ppm>
    472a:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_ppm+0x1>
    472e:	19 95       	eicall
    4730:	08 95       	ret

00004732 <mh_z19_initialise>:
    4732:	8f 92       	push	r8
    4734:	9f 92       	push	r9
    4736:	af 92       	push	r10
    4738:	cf 92       	push	r12
    473a:	ef 92       	push	r14
    473c:	0f 93       	push	r16
    473e:	0f 2e       	mov	r0, r31
    4740:	fe e3       	ldi	r31, 0x3E	; 62
    4742:	8f 2e       	mov	r8, r31
    4744:	f3 e2       	ldi	r31, 0x23	; 35
    4746:	9f 2e       	mov	r9, r31
    4748:	f0 2d       	mov	r31, r0
    474a:	68 94       	set
    474c:	aa 24       	eor	r10, r10
    474e:	a4 f8       	bld	r10, 4
    4750:	68 94       	set
    4752:	cc 24       	eor	r12, r12
    4754:	c4 f8       	bld	r12, 4
    4756:	e1 2c       	mov	r14, r1
    4758:	00 e0       	ldi	r16, 0x00	; 0
    475a:	23 e0       	ldi	r18, 0x03	; 3
    475c:	40 e8       	ldi	r20, 0x80	; 128
    475e:	55 e2       	ldi	r21, 0x25	; 37
    4760:	60 e0       	ldi	r22, 0x00	; 0
    4762:	70 e0       	ldi	r23, 0x00	; 0
    4764:	73 d0       	rcall	.+230    	; 0x484c <serial_create>
    4766:	90 93 b0 17 	sts	0x17B0, r25	; 0x8017b0 <_serial+0x1>
    476a:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_serial>
    476e:	0f 91       	pop	r16
    4770:	ef 90       	pop	r14
    4772:	cf 90       	pop	r12
    4774:	af 90       	pop	r10
    4776:	9f 90       	pop	r9
    4778:	8f 90       	pop	r8
    477a:	08 95       	ret

0000477c <mh_z19_injectCallBack>:
    477c:	90 93 ab 17 	sts	0x17AB, r25	; 0x8017ab <_appCallBack+0x1>
    4780:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <_appCallBack>
    4784:	08 95       	ret

00004786 <mh_z19_takeMeassuring>:
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	29 97       	sbiw	r28, 0x09	; 9
    4790:	0f b6       	in	r0, 0x3f	; 63
    4792:	f8 94       	cli
    4794:	de bf       	out	0x3e, r29	; 62
    4796:	0f be       	out	0x3f, r0	; 63
    4798:	cd bf       	out	0x3d, r28	; 61
    479a:	89 e0       	ldi	r24, 0x09	; 9
    479c:	e2 e4       	ldi	r30, 0x42	; 66
    479e:	f2 e0       	ldi	r31, 0x02	; 2
    47a0:	9e 01       	movw	r18, r28
    47a2:	2f 5f       	subi	r18, 0xFF	; 255
    47a4:	3f 4f       	sbci	r19, 0xFF	; 255
    47a6:	d9 01       	movw	r26, r18
    47a8:	01 90       	ld	r0, Z+
    47aa:	0d 92       	st	X+, r0
    47ac:	8a 95       	dec	r24
    47ae:	e1 f7       	brne	.-8      	; 0x47a8 <mh_z19_takeMeassuring+0x22>
    47b0:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <_ppm+0x1>
    47b4:	10 92 ad 17 	sts	0x17AD, r1	; 0x8017ad <_ppm>
    47b8:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_serial>
    47bc:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_serial+0x1>
    47c0:	00 97       	sbiw	r24, 0x00	; 0
    47c2:	31 f0       	breq	.+12     	; 0x47d0 <mh_z19_takeMeassuring+0x4a>
    47c4:	42 2f       	mov	r20, r18
    47c6:	53 2f       	mov	r21, r19
    47c8:	69 e0       	ldi	r22, 0x09	; 9
    47ca:	0d d1       	rcall	.+538    	; 0x49e6 <serial_sendBytes>
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	01 c0       	rjmp	.+2      	; 0x47d2 <mh_z19_takeMeassuring+0x4c>
    47d0:	82 e0       	ldi	r24, 0x02	; 2
    47d2:	29 96       	adiw	r28, 0x09	; 9
    47d4:	0f b6       	in	r0, 0x3f	; 63
    47d6:	f8 94       	cli
    47d8:	de bf       	out	0x3e, r29	; 62
    47da:	0f be       	out	0x3f, r0	; 63
    47dc:	cd bf       	out	0x3d, r28	; 61
    47de:	df 91       	pop	r29
    47e0:	cf 91       	pop	r28
    47e2:	08 95       	ret

000047e4 <rc_servo_setPosition>:
    47e4:	65 36       	cpi	r22, 0x65	; 101
    47e6:	0c f0       	brlt	.+2      	; 0x47ea <rc_servo_setPosition+0x6>
    47e8:	64 e6       	ldi	r22, 0x64	; 100
    47ea:	6c 39       	cpi	r22, 0x9C	; 156
    47ec:	0c f4       	brge	.+2      	; 0x47f0 <rc_servo_setPosition+0xc>
    47ee:	6c e9       	ldi	r22, 0x9C	; 156
    47f0:	96 ef       	ldi	r25, 0xF6	; 246
    47f2:	69 02       	muls	r22, r25
    47f4:	b0 01       	movw	r22, r0
    47f6:	11 24       	eor	r1, r1
    47f8:	68 54       	subi	r22, 0x48	; 72
    47fa:	74 4f       	sbci	r23, 0xF4	; 244
    47fc:	81 11       	cpse	r24, r1
    47fe:	05 c0       	rjmp	.+10     	; 0x480a <rc_servo_setPosition+0x26>
    4800:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4804:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4808:	08 95       	ret
    480a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    480e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4812:	08 95       	ret

00004814 <rc_servo_initialise>:
    4814:	ea e0       	ldi	r30, 0x0A	; 10
    4816:	f1 e0       	ldi	r31, 0x01	; 1
    4818:	80 81       	ld	r24, Z
    481a:	88 61       	ori	r24, 0x18	; 24
    481c:	80 83       	st	Z, r24
    481e:	8f e3       	ldi	r24, 0x3F	; 63
    4820:	9c e9       	ldi	r25, 0x9C	; 156
    4822:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4826:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    482a:	60 e0       	ldi	r22, 0x00	; 0
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	da df       	rcall	.-76     	; 0x47e4 <rc_servo_setPosition>
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	d7 df       	rcall	.-82     	; 0x47e4 <rc_servo_setPosition>
    4836:	e0 e2       	ldi	r30, 0x20	; 32
    4838:	f1 e0       	ldi	r31, 0x01	; 1
    483a:	80 81       	ld	r24, Z
    483c:	82 6a       	ori	r24, 0xA2	; 162
    483e:	80 83       	st	Z, r24
    4840:	e1 e2       	ldi	r30, 0x21	; 33
    4842:	f1 e0       	ldi	r31, 0x01	; 1
    4844:	80 81       	ld	r24, Z
    4846:	8a 61       	ori	r24, 0x1A	; 26
    4848:	80 83       	st	Z, r24
    484a:	08 95       	ret

0000484c <serial_create>:
    484c:	2f 92       	push	r2
    484e:	3f 92       	push	r3
    4850:	4f 92       	push	r4
    4852:	5f 92       	push	r5
    4854:	6f 92       	push	r6
    4856:	7f 92       	push	r7
    4858:	8f 92       	push	r8
    485a:	9f 92       	push	r9
    485c:	af 92       	push	r10
    485e:	cf 92       	push	r12
    4860:	ef 92       	push	r14
    4862:	ff 92       	push	r15
    4864:	0f 93       	push	r16
    4866:	1f 93       	push	r17
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
    4870:	f8 2e       	mov	r15, r24
    4872:	2a 01       	movw	r4, r20
    4874:	3b 01       	movw	r6, r22
    4876:	88 e0       	ldi	r24, 0x08	; 8
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <malloc>
    487e:	8c 01       	movw	r16, r24
    4880:	8f 2d       	mov	r24, r15
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	fc 01       	movw	r30, r24
    4886:	ee 0f       	add	r30, r30
    4888:	ff 1f       	adc	r31, r31
    488a:	ef 54       	subi	r30, 0x4F	; 79
    488c:	f8 4e       	sbci	r31, 0xE8	; 232
    488e:	11 83       	std	Z+1, r17	; 0x01
    4890:	00 83       	st	Z, r16
    4892:	01 15       	cp	r16, r1
    4894:	11 05       	cpc	r17, r1
    4896:	09 f4       	brne	.+2      	; 0x489a <serial_create+0x4e>
    4898:	69 c0       	rjmp	.+210    	; 0x496c <serial_create+0x120>
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	fc 01       	movw	r30, r24
    48a0:	e5 5f       	subi	r30, 0xF5	; 245
    48a2:	fd 4f       	sbci	r31, 0xFD	; 253
    48a4:	80 81       	ld	r24, Z
    48a6:	91 81       	ldd	r25, Z+1	; 0x01
    48a8:	d8 01       	movw	r26, r16
    48aa:	8d 93       	st	X+, r24
    48ac:	9c 93       	st	X, r25
    48ae:	8c 2d       	mov	r24, r12
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	88 0f       	add	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	88 0f       	add	r24, r24
    48b8:	99 1f       	adc	r25, r25
    48ba:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <malloc>
    48be:	1c 01       	movw	r2, r24
    48c0:	86 e0       	ldi	r24, 0x06	; 6
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <malloc>
    48c8:	7c 01       	movw	r14, r24
    48ca:	4c 2d       	mov	r20, r12
    48cc:	b1 01       	movw	r22, r2
    48ce:	f0 d6       	rcall	.+3552   	; 0x56b0 <fifo_init>
    48d0:	f8 01       	movw	r30, r16
    48d2:	f5 82       	std	Z+5, r15	; 0x05
    48d4:	e4 82       	std	Z+4, r14	; 0x04
    48d6:	8a 2d       	mov	r24, r10
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	88 0f       	add	r24, r24
    48e0:	99 1f       	adc	r25, r25
    48e2:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <malloc>
    48e6:	1c 01       	movw	r2, r24
    48e8:	86 e0       	ldi	r24, 0x06	; 6
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <malloc>
    48f0:	7c 01       	movw	r14, r24
    48f2:	4a 2d       	mov	r20, r10
    48f4:	b1 01       	movw	r22, r2
    48f6:	dc d6       	rcall	.+3512   	; 0x56b0 <fifo_init>
    48f8:	d8 01       	movw	r26, r16
    48fa:	13 96       	adiw	r26, 0x03	; 3
    48fc:	fc 92       	st	X, r15
    48fe:	ee 92       	st	-X, r14
    4900:	12 97       	sbiw	r26, 0x02	; 2
    4902:	17 96       	adiw	r26, 0x07	; 7
    4904:	9c 92       	st	X, r9
    4906:	8e 92       	st	-X, r8
    4908:	16 97       	sbiw	r26, 0x06	; 6
    490a:	ff b6       	in	r15, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	ed 91       	ld	r30, X+
    4910:	fc 91       	ld	r31, X
    4912:	11 97       	sbiw	r26, 0x01	; 1
    4914:	36 97       	sbiw	r30, 0x06	; 6
    4916:	80 81       	ld	r24, Z
    4918:	82 60       	ori	r24, 0x02	; 2
    491a:	80 83       	st	Z, r24
    491c:	8d 90       	ld	r8, X+
    491e:	9c 90       	ld	r9, X
    4920:	c3 01       	movw	r24, r6
    4922:	b2 01       	movw	r22, r4
    4924:	b3 d7       	rcall	.+3942   	; 0x588c <__floatunsisf>
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e0       	ldi	r20, 0x00	; 0
    492c:	51 e4       	ldi	r21, 0x41	; 65
    492e:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__mulsf3>
    4932:	9b 01       	movw	r18, r22
    4934:	ac 01       	movw	r20, r24
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	74 e2       	ldi	r23, 0x24	; 36
    493a:	84 e7       	ldi	r24, 0x74	; 116
    493c:	9b e4       	ldi	r25, 0x4B	; 75
    493e:	3b d7       	rcall	.+3702   	; 0x57b6 <__divsf3>
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e8       	ldi	r20, 0x80	; 128
    4946:	5f e3       	ldi	r21, 0x3F	; 63
    4948:	cf d6       	rcall	.+3486   	; 0x56e8 <__subsf3>
    494a:	3d d9       	rcall	.-3462   	; 0x3bc6 <__fixunssfsi>
    494c:	f4 01       	movw	r30, r8
    494e:	32 97       	sbiw	r30, 0x02	; 2
    4950:	60 83       	st	Z, r22
    4952:	d8 01       	movw	r26, r16
    4954:	ed 91       	ld	r30, X+
    4956:	fc 91       	ld	r31, X
    4958:	11 97       	sbiw	r26, 0x01	; 1
    495a:	35 97       	sbiw	r30, 0x05	; 5
    495c:	88 e9       	ldi	r24, 0x98	; 152
    495e:	80 83       	st	Z, r24
    4960:	ed 91       	ld	r30, X+
    4962:	fc 91       	ld	r31, X
    4964:	34 97       	sbiw	r30, 0x04	; 4
    4966:	86 e0       	ldi	r24, 0x06	; 6
    4968:	80 83       	st	Z, r24
    496a:	ff be       	out	0x3f, r15	; 63
    496c:	c8 01       	movw	r24, r16
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	1f 91       	pop	r17
    4974:	0f 91       	pop	r16
    4976:	ff 90       	pop	r15
    4978:	ef 90       	pop	r14
    497a:	cf 90       	pop	r12
    497c:	af 90       	pop	r10
    497e:	9f 90       	pop	r9
    4980:	8f 90       	pop	r8
    4982:	7f 90       	pop	r7
    4984:	6f 90       	pop	r6
    4986:	5f 90       	pop	r5
    4988:	4f 90       	pop	r4
    498a:	3f 90       	pop	r3
    498c:	2f 90       	pop	r2
    498e:	08 95       	ret

00004990 <serial_sendByte>:
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	dc 01       	movw	r26, r24
    4996:	89 2b       	or	r24, r25
    4998:	01 f1       	breq	.+64     	; 0x49da <serial_sendByte+0x4a>
    499a:	12 96       	adiw	r26, 0x02	; 2
    499c:	ed 91       	ld	r30, X+
    499e:	fc 91       	ld	r31, X
    49a0:	13 97       	sbiw	r26, 0x03	; 3
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	82 81       	ldd	r24, Z+2	; 0x02
    49a6:	25 81       	ldd	r18, Z+5	; 0x05
    49a8:	98 1b       	sub	r25, r24
    49aa:	92 23       	and	r25, r18
    49ac:	84 81       	ldd	r24, Z+4	; 0x04
    49ae:	98 17       	cp	r25, r24
    49b0:	b1 f0       	breq	.+44     	; 0x49de <serial_sendByte+0x4e>
    49b2:	83 81       	ldd	r24, Z+3	; 0x03
    49b4:	26 95       	lsr	r18
    49b6:	28 23       	and	r18, r24
    49b8:	c0 81       	ld	r28, Z
    49ba:	d1 81       	ldd	r29, Z+1	; 0x01
    49bc:	c2 0f       	add	r28, r18
    49be:	d1 1d       	adc	r29, r1
    49c0:	68 83       	st	Y, r22
    49c2:	8f 5f       	subi	r24, 0xFF	; 255
    49c4:	95 81       	ldd	r25, Z+5	; 0x05
    49c6:	89 23       	and	r24, r25
    49c8:	83 83       	std	Z+3, r24	; 0x03
    49ca:	ed 91       	ld	r30, X+
    49cc:	fc 91       	ld	r31, X
    49ce:	35 97       	sbiw	r30, 0x05	; 5
    49d0:	80 81       	ld	r24, Z
    49d2:	80 62       	ori	r24, 0x20	; 32
    49d4:	80 83       	st	Z, r24
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	03 c0       	rjmp	.+6      	; 0x49e0 <serial_sendByte+0x50>
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <serial_sendByte+0x50>
    49de:	82 e0       	ldi	r24, 0x02	; 2
    49e0:	df 91       	pop	r29
    49e2:	cf 91       	pop	r28
    49e4:	08 95       	ret

000049e6 <serial_sendBytes>:
    49e6:	ef 92       	push	r14
    49e8:	ff 92       	push	r15
    49ea:	0f 93       	push	r16
    49ec:	1f 93       	push	r17
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	7c 01       	movw	r14, r24
    49f4:	00 97       	sbiw	r24, 0x00	; 0
    49f6:	09 f4       	brne	.+2      	; 0x49fa <serial_sendBytes+0x14>
    49f8:	41 c0       	rjmp	.+130    	; 0x4a7c <serial_sendBytes+0x96>
    49fa:	dc 01       	movw	r26, r24
    49fc:	12 96       	adiw	r26, 0x02	; 2
    49fe:	ed 91       	ld	r30, X+
    4a00:	fc 91       	ld	r31, X
    4a02:	13 97       	sbiw	r26, 0x03	; 3
    4a04:	93 81       	ldd	r25, Z+3	; 0x03
    4a06:	82 81       	ldd	r24, Z+2	; 0x02
    4a08:	98 1b       	sub	r25, r24
    4a0a:	85 81       	ldd	r24, Z+5	; 0x05
    4a0c:	98 23       	and	r25, r24
    4a0e:	84 81       	ldd	r24, Z+4	; 0x04
    4a10:	89 1b       	sub	r24, r25
    4a12:	86 17       	cp	r24, r22
    4a14:	a8 f1       	brcs	.+106    	; 0x4a80 <serial_sendBytes+0x9a>
    4a16:	66 23       	and	r22, r22
    4a18:	41 f1       	breq	.+80     	; 0x4a6a <serial_sendBytes+0x84>
    4a1a:	84 2f       	mov	r24, r20
    4a1c:	95 2f       	mov	r25, r21
    4a1e:	dc 01       	movw	r26, r24
    4a20:	61 50       	subi	r22, 0x01	; 1
    4a22:	46 2f       	mov	r20, r22
    4a24:	50 e0       	ldi	r21, 0x00	; 0
    4a26:	4f 5f       	subi	r20, 0xFF	; 255
    4a28:	5f 4f       	sbci	r21, 0xFF	; 255
    4a2a:	48 0f       	add	r20, r24
    4a2c:	59 1f       	adc	r21, r25
    4a2e:	e7 01       	movw	r28, r14
    4a30:	ea 81       	ldd	r30, Y+2	; 0x02
    4a32:	fb 81       	ldd	r31, Y+3	; 0x03
    4a34:	93 81       	ldd	r25, Z+3	; 0x03
    4a36:	82 81       	ldd	r24, Z+2	; 0x02
    4a38:	25 81       	ldd	r18, Z+5	; 0x05
    4a3a:	98 1b       	sub	r25, r24
    4a3c:	92 23       	and	r25, r18
    4a3e:	84 81       	ldd	r24, Z+4	; 0x04
    4a40:	98 17       	cp	r25, r24
    4a42:	79 f0       	breq	.+30     	; 0x4a62 <serial_sendBytes+0x7c>
    4a44:	8c 91       	ld	r24, X
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	26 95       	lsr	r18
    4a4a:	29 23       	and	r18, r25
    4a4c:	60 81       	ld	r22, Z
    4a4e:	71 81       	ldd	r23, Z+1	; 0x01
    4a50:	8b 01       	movw	r16, r22
    4a52:	02 0f       	add	r16, r18
    4a54:	11 1d       	adc	r17, r1
    4a56:	e8 01       	movw	r28, r16
    4a58:	88 83       	st	Y, r24
    4a5a:	9f 5f       	subi	r25, 0xFF	; 255
    4a5c:	85 81       	ldd	r24, Z+5	; 0x05
    4a5e:	98 23       	and	r25, r24
    4a60:	93 83       	std	Z+3, r25	; 0x03
    4a62:	11 96       	adiw	r26, 0x01	; 1
    4a64:	a4 17       	cp	r26, r20
    4a66:	b5 07       	cpc	r27, r21
    4a68:	11 f7       	brne	.-60     	; 0x4a2e <serial_sendBytes+0x48>
    4a6a:	d7 01       	movw	r26, r14
    4a6c:	ed 91       	ld	r30, X+
    4a6e:	fc 91       	ld	r31, X
    4a70:	35 97       	sbiw	r30, 0x05	; 5
    4a72:	80 81       	ld	r24, Z
    4a74:	80 62       	ori	r24, 0x20	; 32
    4a76:	80 83       	st	Z, r24
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	03 c0       	rjmp	.+6      	; 0x4a82 <serial_sendBytes+0x9c>
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	01 c0       	rjmp	.+2      	; 0x4a82 <serial_sendBytes+0x9c>
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	ff 90       	pop	r15
    4a8c:	ef 90       	pop	r14
    4a8e:	08 95       	ret

00004a90 <serial_getByte>:
    4a90:	00 97       	sbiw	r24, 0x00	; 0
    4a92:	d1 f0       	breq	.+52     	; 0x4ac8 <serial_getByte+0x38>
    4a94:	dc 01       	movw	r26, r24
    4a96:	14 96       	adiw	r26, 0x04	; 4
    4a98:	ed 91       	ld	r30, X+
    4a9a:	fc 91       	ld	r31, X
    4a9c:	15 97       	sbiw	r26, 0x05	; 5
    4a9e:	93 81       	ldd	r25, Z+3	; 0x03
    4aa0:	82 81       	ldd	r24, Z+2	; 0x02
    4aa2:	98 17       	cp	r25, r24
    4aa4:	99 f0       	breq	.+38     	; 0x4acc <serial_getByte+0x3c>
    4aa6:	92 81       	ldd	r25, Z+2	; 0x02
    4aa8:	85 81       	ldd	r24, Z+5	; 0x05
    4aaa:	86 95       	lsr	r24
    4aac:	89 23       	and	r24, r25
    4aae:	a0 81       	ld	r26, Z
    4ab0:	b1 81       	ldd	r27, Z+1	; 0x01
    4ab2:	a8 0f       	add	r26, r24
    4ab4:	b1 1d       	adc	r27, r1
    4ab6:	8c 91       	ld	r24, X
    4ab8:	db 01       	movw	r26, r22
    4aba:	8c 93       	st	X, r24
    4abc:	9f 5f       	subi	r25, 0xFF	; 255
    4abe:	85 81       	ldd	r24, Z+5	; 0x05
    4ac0:	98 23       	and	r25, r24
    4ac2:	92 83       	std	Z+2, r25	; 0x02
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	08 95       	ret
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	08 95       	ret
    4acc:	83 e0       	ldi	r24, 0x03	; 3
    4ace:	08 95       	ret

00004ad0 <__vector_25>:
    4ad0:	1f 92       	push	r1
    4ad2:	0f 92       	push	r0
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	0f 92       	push	r0
    4ad8:	11 24       	eor	r1, r1
    4ada:	0b b6       	in	r0, 0x3b	; 59
    4adc:	0f 92       	push	r0
    4ade:	2f 93       	push	r18
    4ae0:	3f 93       	push	r19
    4ae2:	4f 93       	push	r20
    4ae4:	5f 93       	push	r21
    4ae6:	6f 93       	push	r22
    4ae8:	7f 93       	push	r23
    4aea:	8f 93       	push	r24
    4aec:	9f 93       	push	r25
    4aee:	af 93       	push	r26
    4af0:	bf 93       	push	r27
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	ef 93       	push	r30
    4af8:	ff 93       	push	r31
    4afa:	a0 91 b1 17 	lds	r26, 0x17B1	; 0x8017b1 <_ser_handle>
    4afe:	b0 91 b2 17 	lds	r27, 0x17B2	; 0x8017b2 <_ser_handle+0x1>
    4b02:	10 97       	sbiw	r26, 0x00	; 0
    4b04:	11 f1       	breq	.+68     	; 0x4b4a <__vector_25+0x7a>
    4b06:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4b0a:	14 96       	adiw	r26, 0x04	; 4
    4b0c:	ed 91       	ld	r30, X+
    4b0e:	fc 91       	ld	r31, X
    4b10:	15 97       	sbiw	r26, 0x05	; 5
    4b12:	93 81       	ldd	r25, Z+3	; 0x03
    4b14:	82 81       	ldd	r24, Z+2	; 0x02
    4b16:	25 81       	ldd	r18, Z+5	; 0x05
    4b18:	98 1b       	sub	r25, r24
    4b1a:	92 23       	and	r25, r18
    4b1c:	84 81       	ldd	r24, Z+4	; 0x04
    4b1e:	98 17       	cp	r25, r24
    4b20:	61 f0       	breq	.+24     	; 0x4b3a <__vector_25+0x6a>
    4b22:	83 81       	ldd	r24, Z+3	; 0x03
    4b24:	26 95       	lsr	r18
    4b26:	28 23       	and	r18, r24
    4b28:	c0 81       	ld	r28, Z
    4b2a:	d1 81       	ldd	r29, Z+1	; 0x01
    4b2c:	c2 0f       	add	r28, r18
    4b2e:	d1 1d       	adc	r29, r1
    4b30:	68 83       	st	Y, r22
    4b32:	8f 5f       	subi	r24, 0xFF	; 255
    4b34:	95 81       	ldd	r25, Z+5	; 0x05
    4b36:	89 23       	and	r24, r25
    4b38:	83 83       	std	Z+3, r24	; 0x03
    4b3a:	16 96       	adiw	r26, 0x06	; 6
    4b3c:	ed 91       	ld	r30, X+
    4b3e:	fc 91       	ld	r31, X
    4b40:	17 97       	sbiw	r26, 0x07	; 7
    4b42:	30 97       	sbiw	r30, 0x00	; 0
    4b44:	11 f0       	breq	.+4      	; 0x4b4a <__vector_25+0x7a>
    4b46:	cd 01       	movw	r24, r26
    4b48:	19 95       	eicall
    4b4a:	ff 91       	pop	r31
    4b4c:	ef 91       	pop	r30
    4b4e:	df 91       	pop	r29
    4b50:	cf 91       	pop	r28
    4b52:	bf 91       	pop	r27
    4b54:	af 91       	pop	r26
    4b56:	9f 91       	pop	r25
    4b58:	8f 91       	pop	r24
    4b5a:	7f 91       	pop	r23
    4b5c:	6f 91       	pop	r22
    4b5e:	5f 91       	pop	r21
    4b60:	4f 91       	pop	r20
    4b62:	3f 91       	pop	r19
    4b64:	2f 91       	pop	r18
    4b66:	0f 90       	pop	r0
    4b68:	0b be       	out	0x3b, r0	; 59
    4b6a:	0f 90       	pop	r0
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	0f 90       	pop	r0
    4b70:	1f 90       	pop	r1
    4b72:	18 95       	reti

00004b74 <__vector_26>:
    4b74:	1f 92       	push	r1
    4b76:	0f 92       	push	r0
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	0f 92       	push	r0
    4b7c:	11 24       	eor	r1, r1
    4b7e:	0b b6       	in	r0, 0x3b	; 59
    4b80:	0f 92       	push	r0
    4b82:	2f 93       	push	r18
    4b84:	8f 93       	push	r24
    4b86:	9f 93       	push	r25
    4b88:	af 93       	push	r26
    4b8a:	bf 93       	push	r27
    4b8c:	ef 93       	push	r30
    4b8e:	ff 93       	push	r31
    4b90:	e0 91 b1 17 	lds	r30, 0x17B1	; 0x8017b1 <_ser_handle>
    4b94:	f0 91 b2 17 	lds	r31, 0x17B2	; 0x8017b2 <_ser_handle+0x1>
    4b98:	30 97       	sbiw	r30, 0x00	; 0
    4b9a:	b9 f0       	breq	.+46     	; 0x4bca <__vector_26+0x56>
    4b9c:	02 80       	ldd	r0, Z+2	; 0x02
    4b9e:	f3 81       	ldd	r31, Z+3	; 0x03
    4ba0:	e0 2d       	mov	r30, r0
    4ba2:	93 81       	ldd	r25, Z+3	; 0x03
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	98 17       	cp	r25, r24
    4ba8:	b1 f0       	breq	.+44     	; 0x4bd6 <__vector_26+0x62>
    4baa:	92 81       	ldd	r25, Z+2	; 0x02
    4bac:	85 81       	ldd	r24, Z+5	; 0x05
    4bae:	28 2f       	mov	r18, r24
    4bb0:	26 95       	lsr	r18
    4bb2:	29 23       	and	r18, r25
    4bb4:	a0 81       	ld	r26, Z
    4bb6:	b1 81       	ldd	r27, Z+1	; 0x01
    4bb8:	a2 0f       	add	r26, r18
    4bba:	b1 1d       	adc	r27, r1
    4bbc:	2c 91       	ld	r18, X
    4bbe:	9f 5f       	subi	r25, 0xFF	; 255
    4bc0:	89 23       	and	r24, r25
    4bc2:	82 83       	std	Z+2, r24	; 0x02
    4bc4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bc8:	0b c0       	rjmp	.+22     	; 0x4be0 <__vector_26+0x6c>
    4bca:	e1 ec       	ldi	r30, 0xC1	; 193
    4bcc:	f0 e0       	ldi	r31, 0x00	; 0
    4bce:	80 81       	ld	r24, Z
    4bd0:	8f 7d       	andi	r24, 0xDF	; 223
    4bd2:	80 83       	st	Z, r24
    4bd4:	05 c0       	rjmp	.+10     	; 0x4be0 <__vector_26+0x6c>
    4bd6:	e1 ec       	ldi	r30, 0xC1	; 193
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	80 81       	ld	r24, Z
    4bdc:	8f 7d       	andi	r24, 0xDF	; 223
    4bde:	80 83       	st	Z, r24
    4be0:	ff 91       	pop	r31
    4be2:	ef 91       	pop	r30
    4be4:	bf 91       	pop	r27
    4be6:	af 91       	pop	r26
    4be8:	9f 91       	pop	r25
    4bea:	8f 91       	pop	r24
    4bec:	2f 91       	pop	r18
    4bee:	0f 90       	pop	r0
    4bf0:	0b be       	out	0x3b, r0	; 59
    4bf2:	0f 90       	pop	r0
    4bf4:	0f be       	out	0x3f, r0	; 63
    4bf6:	0f 90       	pop	r0
    4bf8:	1f 90       	pop	r1
    4bfa:	18 95       	reti

00004bfc <__vector_36>:
    4bfc:	1f 92       	push	r1
    4bfe:	0f 92       	push	r0
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	0f 92       	push	r0
    4c04:	11 24       	eor	r1, r1
    4c06:	0b b6       	in	r0, 0x3b	; 59
    4c08:	0f 92       	push	r0
    4c0a:	2f 93       	push	r18
    4c0c:	3f 93       	push	r19
    4c0e:	4f 93       	push	r20
    4c10:	5f 93       	push	r21
    4c12:	6f 93       	push	r22
    4c14:	7f 93       	push	r23
    4c16:	8f 93       	push	r24
    4c18:	9f 93       	push	r25
    4c1a:	af 93       	push	r26
    4c1c:	bf 93       	push	r27
    4c1e:	cf 93       	push	r28
    4c20:	df 93       	push	r29
    4c22:	ef 93       	push	r30
    4c24:	ff 93       	push	r31
    4c26:	a0 91 b3 17 	lds	r26, 0x17B3	; 0x8017b3 <_ser_handle+0x2>
    4c2a:	b0 91 b4 17 	lds	r27, 0x17B4	; 0x8017b4 <_ser_handle+0x3>
    4c2e:	10 97       	sbiw	r26, 0x00	; 0
    4c30:	11 f1       	breq	.+68     	; 0x4c76 <__vector_36+0x7a>
    4c32:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c36:	14 96       	adiw	r26, 0x04	; 4
    4c38:	ed 91       	ld	r30, X+
    4c3a:	fc 91       	ld	r31, X
    4c3c:	15 97       	sbiw	r26, 0x05	; 5
    4c3e:	93 81       	ldd	r25, Z+3	; 0x03
    4c40:	82 81       	ldd	r24, Z+2	; 0x02
    4c42:	25 81       	ldd	r18, Z+5	; 0x05
    4c44:	98 1b       	sub	r25, r24
    4c46:	92 23       	and	r25, r18
    4c48:	84 81       	ldd	r24, Z+4	; 0x04
    4c4a:	98 17       	cp	r25, r24
    4c4c:	61 f0       	breq	.+24     	; 0x4c66 <__vector_36+0x6a>
    4c4e:	83 81       	ldd	r24, Z+3	; 0x03
    4c50:	26 95       	lsr	r18
    4c52:	28 23       	and	r18, r24
    4c54:	c0 81       	ld	r28, Z
    4c56:	d1 81       	ldd	r29, Z+1	; 0x01
    4c58:	c2 0f       	add	r28, r18
    4c5a:	d1 1d       	adc	r29, r1
    4c5c:	68 83       	st	Y, r22
    4c5e:	8f 5f       	subi	r24, 0xFF	; 255
    4c60:	95 81       	ldd	r25, Z+5	; 0x05
    4c62:	89 23       	and	r24, r25
    4c64:	83 83       	std	Z+3, r24	; 0x03
    4c66:	16 96       	adiw	r26, 0x06	; 6
    4c68:	ed 91       	ld	r30, X+
    4c6a:	fc 91       	ld	r31, X
    4c6c:	17 97       	sbiw	r26, 0x07	; 7
    4c6e:	30 97       	sbiw	r30, 0x00	; 0
    4c70:	11 f0       	breq	.+4      	; 0x4c76 <__vector_36+0x7a>
    4c72:	cd 01       	movw	r24, r26
    4c74:	19 95       	eicall
    4c76:	ff 91       	pop	r31
    4c78:	ef 91       	pop	r30
    4c7a:	df 91       	pop	r29
    4c7c:	cf 91       	pop	r28
    4c7e:	bf 91       	pop	r27
    4c80:	af 91       	pop	r26
    4c82:	9f 91       	pop	r25
    4c84:	8f 91       	pop	r24
    4c86:	7f 91       	pop	r23
    4c88:	6f 91       	pop	r22
    4c8a:	5f 91       	pop	r21
    4c8c:	4f 91       	pop	r20
    4c8e:	3f 91       	pop	r19
    4c90:	2f 91       	pop	r18
    4c92:	0f 90       	pop	r0
    4c94:	0b be       	out	0x3b, r0	; 59
    4c96:	0f 90       	pop	r0
    4c98:	0f be       	out	0x3f, r0	; 63
    4c9a:	0f 90       	pop	r0
    4c9c:	1f 90       	pop	r1
    4c9e:	18 95       	reti

00004ca0 <__vector_37>:
    4ca0:	1f 92       	push	r1
    4ca2:	0f 92       	push	r0
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	0f 92       	push	r0
    4ca8:	11 24       	eor	r1, r1
    4caa:	0b b6       	in	r0, 0x3b	; 59
    4cac:	0f 92       	push	r0
    4cae:	2f 93       	push	r18
    4cb0:	8f 93       	push	r24
    4cb2:	9f 93       	push	r25
    4cb4:	af 93       	push	r26
    4cb6:	bf 93       	push	r27
    4cb8:	ef 93       	push	r30
    4cba:	ff 93       	push	r31
    4cbc:	e0 91 b3 17 	lds	r30, 0x17B3	; 0x8017b3 <_ser_handle+0x2>
    4cc0:	f0 91 b4 17 	lds	r31, 0x17B4	; 0x8017b4 <_ser_handle+0x3>
    4cc4:	30 97       	sbiw	r30, 0x00	; 0
    4cc6:	b9 f0       	breq	.+46     	; 0x4cf6 <__vector_37+0x56>
    4cc8:	02 80       	ldd	r0, Z+2	; 0x02
    4cca:	f3 81       	ldd	r31, Z+3	; 0x03
    4ccc:	e0 2d       	mov	r30, r0
    4cce:	93 81       	ldd	r25, Z+3	; 0x03
    4cd0:	82 81       	ldd	r24, Z+2	; 0x02
    4cd2:	98 17       	cp	r25, r24
    4cd4:	b1 f0       	breq	.+44     	; 0x4d02 <__vector_37+0x62>
    4cd6:	92 81       	ldd	r25, Z+2	; 0x02
    4cd8:	85 81       	ldd	r24, Z+5	; 0x05
    4cda:	28 2f       	mov	r18, r24
    4cdc:	26 95       	lsr	r18
    4cde:	29 23       	and	r18, r25
    4ce0:	a0 81       	ld	r26, Z
    4ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ce4:	a2 0f       	add	r26, r18
    4ce6:	b1 1d       	adc	r27, r1
    4ce8:	2c 91       	ld	r18, X
    4cea:	9f 5f       	subi	r25, 0xFF	; 255
    4cec:	89 23       	and	r24, r25
    4cee:	82 83       	std	Z+2, r24	; 0x02
    4cf0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4cf4:	0b c0       	rjmp	.+22     	; 0x4d0c <__vector_37+0x6c>
    4cf6:	e9 ec       	ldi	r30, 0xC9	; 201
    4cf8:	f0 e0       	ldi	r31, 0x00	; 0
    4cfa:	80 81       	ld	r24, Z
    4cfc:	8f 7d       	andi	r24, 0xDF	; 223
    4cfe:	80 83       	st	Z, r24
    4d00:	05 c0       	rjmp	.+10     	; 0x4d0c <__vector_37+0x6c>
    4d02:	e9 ec       	ldi	r30, 0xC9	; 201
    4d04:	f0 e0       	ldi	r31, 0x00	; 0
    4d06:	80 81       	ld	r24, Z
    4d08:	8f 7d       	andi	r24, 0xDF	; 223
    4d0a:	80 83       	st	Z, r24
    4d0c:	ff 91       	pop	r31
    4d0e:	ef 91       	pop	r30
    4d10:	bf 91       	pop	r27
    4d12:	af 91       	pop	r26
    4d14:	9f 91       	pop	r25
    4d16:	8f 91       	pop	r24
    4d18:	2f 91       	pop	r18
    4d1a:	0f 90       	pop	r0
    4d1c:	0b be       	out	0x3b, r0	; 59
    4d1e:	0f 90       	pop	r0
    4d20:	0f be       	out	0x3f, r0	; 63
    4d22:	0f 90       	pop	r0
    4d24:	1f 90       	pop	r1
    4d26:	18 95       	reti

00004d28 <__vector_51>:
    4d28:	1f 92       	push	r1
    4d2a:	0f 92       	push	r0
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	0f 92       	push	r0
    4d30:	11 24       	eor	r1, r1
    4d32:	0b b6       	in	r0, 0x3b	; 59
    4d34:	0f 92       	push	r0
    4d36:	2f 93       	push	r18
    4d38:	3f 93       	push	r19
    4d3a:	4f 93       	push	r20
    4d3c:	5f 93       	push	r21
    4d3e:	6f 93       	push	r22
    4d40:	7f 93       	push	r23
    4d42:	8f 93       	push	r24
    4d44:	9f 93       	push	r25
    4d46:	af 93       	push	r26
    4d48:	bf 93       	push	r27
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	ef 93       	push	r30
    4d50:	ff 93       	push	r31
    4d52:	a0 91 b5 17 	lds	r26, 0x17B5	; 0x8017b5 <_ser_handle+0x4>
    4d56:	b0 91 b6 17 	lds	r27, 0x17B6	; 0x8017b6 <_ser_handle+0x5>
    4d5a:	10 97       	sbiw	r26, 0x00	; 0
    4d5c:	11 f1       	breq	.+68     	; 0x4da2 <__vector_51+0x7a>
    4d5e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d62:	14 96       	adiw	r26, 0x04	; 4
    4d64:	ed 91       	ld	r30, X+
    4d66:	fc 91       	ld	r31, X
    4d68:	15 97       	sbiw	r26, 0x05	; 5
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	25 81       	ldd	r18, Z+5	; 0x05
    4d70:	98 1b       	sub	r25, r24
    4d72:	92 23       	and	r25, r18
    4d74:	84 81       	ldd	r24, Z+4	; 0x04
    4d76:	98 17       	cp	r25, r24
    4d78:	61 f0       	breq	.+24     	; 0x4d92 <__vector_51+0x6a>
    4d7a:	83 81       	ldd	r24, Z+3	; 0x03
    4d7c:	26 95       	lsr	r18
    4d7e:	28 23       	and	r18, r24
    4d80:	c0 81       	ld	r28, Z
    4d82:	d1 81       	ldd	r29, Z+1	; 0x01
    4d84:	c2 0f       	add	r28, r18
    4d86:	d1 1d       	adc	r29, r1
    4d88:	68 83       	st	Y, r22
    4d8a:	8f 5f       	subi	r24, 0xFF	; 255
    4d8c:	95 81       	ldd	r25, Z+5	; 0x05
    4d8e:	89 23       	and	r24, r25
    4d90:	83 83       	std	Z+3, r24	; 0x03
    4d92:	16 96       	adiw	r26, 0x06	; 6
    4d94:	ed 91       	ld	r30, X+
    4d96:	fc 91       	ld	r31, X
    4d98:	17 97       	sbiw	r26, 0x07	; 7
    4d9a:	30 97       	sbiw	r30, 0x00	; 0
    4d9c:	11 f0       	breq	.+4      	; 0x4da2 <__vector_51+0x7a>
    4d9e:	cd 01       	movw	r24, r26
    4da0:	19 95       	eicall
    4da2:	ff 91       	pop	r31
    4da4:	ef 91       	pop	r30
    4da6:	df 91       	pop	r29
    4da8:	cf 91       	pop	r28
    4daa:	bf 91       	pop	r27
    4dac:	af 91       	pop	r26
    4dae:	9f 91       	pop	r25
    4db0:	8f 91       	pop	r24
    4db2:	7f 91       	pop	r23
    4db4:	6f 91       	pop	r22
    4db6:	5f 91       	pop	r21
    4db8:	4f 91       	pop	r20
    4dba:	3f 91       	pop	r19
    4dbc:	2f 91       	pop	r18
    4dbe:	0f 90       	pop	r0
    4dc0:	0b be       	out	0x3b, r0	; 59
    4dc2:	0f 90       	pop	r0
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	0f 90       	pop	r0
    4dc8:	1f 90       	pop	r1
    4dca:	18 95       	reti

00004dcc <__vector_52>:
    4dcc:	1f 92       	push	r1
    4dce:	0f 92       	push	r0
    4dd0:	0f b6       	in	r0, 0x3f	; 63
    4dd2:	0f 92       	push	r0
    4dd4:	11 24       	eor	r1, r1
    4dd6:	0b b6       	in	r0, 0x3b	; 59
    4dd8:	0f 92       	push	r0
    4dda:	2f 93       	push	r18
    4ddc:	8f 93       	push	r24
    4dde:	9f 93       	push	r25
    4de0:	af 93       	push	r26
    4de2:	bf 93       	push	r27
    4de4:	ef 93       	push	r30
    4de6:	ff 93       	push	r31
    4de8:	e0 91 b5 17 	lds	r30, 0x17B5	; 0x8017b5 <_ser_handle+0x4>
    4dec:	f0 91 b6 17 	lds	r31, 0x17B6	; 0x8017b6 <_ser_handle+0x5>
    4df0:	30 97       	sbiw	r30, 0x00	; 0
    4df2:	b9 f0       	breq	.+46     	; 0x4e22 <__vector_52+0x56>
    4df4:	02 80       	ldd	r0, Z+2	; 0x02
    4df6:	f3 81       	ldd	r31, Z+3	; 0x03
    4df8:	e0 2d       	mov	r30, r0
    4dfa:	93 81       	ldd	r25, Z+3	; 0x03
    4dfc:	82 81       	ldd	r24, Z+2	; 0x02
    4dfe:	98 17       	cp	r25, r24
    4e00:	b1 f0       	breq	.+44     	; 0x4e2e <__vector_52+0x62>
    4e02:	92 81       	ldd	r25, Z+2	; 0x02
    4e04:	85 81       	ldd	r24, Z+5	; 0x05
    4e06:	28 2f       	mov	r18, r24
    4e08:	26 95       	lsr	r18
    4e0a:	29 23       	and	r18, r25
    4e0c:	a0 81       	ld	r26, Z
    4e0e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e10:	a2 0f       	add	r26, r18
    4e12:	b1 1d       	adc	r27, r1
    4e14:	2c 91       	ld	r18, X
    4e16:	9f 5f       	subi	r25, 0xFF	; 255
    4e18:	89 23       	and	r24, r25
    4e1a:	82 83       	std	Z+2, r24	; 0x02
    4e1c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e20:	0b c0       	rjmp	.+22     	; 0x4e38 <__vector_52+0x6c>
    4e22:	e1 ed       	ldi	r30, 0xD1	; 209
    4e24:	f0 e0       	ldi	r31, 0x00	; 0
    4e26:	80 81       	ld	r24, Z
    4e28:	8f 7d       	andi	r24, 0xDF	; 223
    4e2a:	80 83       	st	Z, r24
    4e2c:	05 c0       	rjmp	.+10     	; 0x4e38 <__vector_52+0x6c>
    4e2e:	e1 ed       	ldi	r30, 0xD1	; 209
    4e30:	f0 e0       	ldi	r31, 0x00	; 0
    4e32:	80 81       	ld	r24, Z
    4e34:	8f 7d       	andi	r24, 0xDF	; 223
    4e36:	80 83       	st	Z, r24
    4e38:	ff 91       	pop	r31
    4e3a:	ef 91       	pop	r30
    4e3c:	bf 91       	pop	r27
    4e3e:	af 91       	pop	r26
    4e40:	9f 91       	pop	r25
    4e42:	8f 91       	pop	r24
    4e44:	2f 91       	pop	r18
    4e46:	0f 90       	pop	r0
    4e48:	0b be       	out	0x3b, r0	; 59
    4e4a:	0f 90       	pop	r0
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	0f 90       	pop	r0
    4e50:	1f 90       	pop	r1
    4e52:	18 95       	reti

00004e54 <__vector_54>:
    4e54:	1f 92       	push	r1
    4e56:	0f 92       	push	r0
    4e58:	0f b6       	in	r0, 0x3f	; 63
    4e5a:	0f 92       	push	r0
    4e5c:	11 24       	eor	r1, r1
    4e5e:	0b b6       	in	r0, 0x3b	; 59
    4e60:	0f 92       	push	r0
    4e62:	2f 93       	push	r18
    4e64:	3f 93       	push	r19
    4e66:	4f 93       	push	r20
    4e68:	5f 93       	push	r21
    4e6a:	6f 93       	push	r22
    4e6c:	7f 93       	push	r23
    4e6e:	8f 93       	push	r24
    4e70:	9f 93       	push	r25
    4e72:	af 93       	push	r26
    4e74:	bf 93       	push	r27
    4e76:	cf 93       	push	r28
    4e78:	df 93       	push	r29
    4e7a:	ef 93       	push	r30
    4e7c:	ff 93       	push	r31
    4e7e:	a0 91 b7 17 	lds	r26, 0x17B7	; 0x8017b7 <_ser_handle+0x6>
    4e82:	b0 91 b8 17 	lds	r27, 0x17B8	; 0x8017b8 <_ser_handle+0x7>
    4e86:	10 97       	sbiw	r26, 0x00	; 0
    4e88:	11 f1       	breq	.+68     	; 0x4ece <__vector_54+0x7a>
    4e8a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e8e:	14 96       	adiw	r26, 0x04	; 4
    4e90:	ed 91       	ld	r30, X+
    4e92:	fc 91       	ld	r31, X
    4e94:	15 97       	sbiw	r26, 0x05	; 5
    4e96:	93 81       	ldd	r25, Z+3	; 0x03
    4e98:	82 81       	ldd	r24, Z+2	; 0x02
    4e9a:	25 81       	ldd	r18, Z+5	; 0x05
    4e9c:	98 1b       	sub	r25, r24
    4e9e:	92 23       	and	r25, r18
    4ea0:	84 81       	ldd	r24, Z+4	; 0x04
    4ea2:	98 17       	cp	r25, r24
    4ea4:	61 f0       	breq	.+24     	; 0x4ebe <__vector_54+0x6a>
    4ea6:	83 81       	ldd	r24, Z+3	; 0x03
    4ea8:	26 95       	lsr	r18
    4eaa:	28 23       	and	r18, r24
    4eac:	c0 81       	ld	r28, Z
    4eae:	d1 81       	ldd	r29, Z+1	; 0x01
    4eb0:	c2 0f       	add	r28, r18
    4eb2:	d1 1d       	adc	r29, r1
    4eb4:	68 83       	st	Y, r22
    4eb6:	8f 5f       	subi	r24, 0xFF	; 255
    4eb8:	95 81       	ldd	r25, Z+5	; 0x05
    4eba:	89 23       	and	r24, r25
    4ebc:	83 83       	std	Z+3, r24	; 0x03
    4ebe:	16 96       	adiw	r26, 0x06	; 6
    4ec0:	ed 91       	ld	r30, X+
    4ec2:	fc 91       	ld	r31, X
    4ec4:	17 97       	sbiw	r26, 0x07	; 7
    4ec6:	30 97       	sbiw	r30, 0x00	; 0
    4ec8:	11 f0       	breq	.+4      	; 0x4ece <__vector_54+0x7a>
    4eca:	cd 01       	movw	r24, r26
    4ecc:	19 95       	eicall
    4ece:	ff 91       	pop	r31
    4ed0:	ef 91       	pop	r30
    4ed2:	df 91       	pop	r29
    4ed4:	cf 91       	pop	r28
    4ed6:	bf 91       	pop	r27
    4ed8:	af 91       	pop	r26
    4eda:	9f 91       	pop	r25
    4edc:	8f 91       	pop	r24
    4ede:	7f 91       	pop	r23
    4ee0:	6f 91       	pop	r22
    4ee2:	5f 91       	pop	r21
    4ee4:	4f 91       	pop	r20
    4ee6:	3f 91       	pop	r19
    4ee8:	2f 91       	pop	r18
    4eea:	0f 90       	pop	r0
    4eec:	0b be       	out	0x3b, r0	; 59
    4eee:	0f 90       	pop	r0
    4ef0:	0f be       	out	0x3f, r0	; 63
    4ef2:	0f 90       	pop	r0
    4ef4:	1f 90       	pop	r1
    4ef6:	18 95       	reti

00004ef8 <__vector_55>:
    4ef8:	1f 92       	push	r1
    4efa:	0f 92       	push	r0
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	0f 92       	push	r0
    4f00:	11 24       	eor	r1, r1
    4f02:	0b b6       	in	r0, 0x3b	; 59
    4f04:	0f 92       	push	r0
    4f06:	2f 93       	push	r18
    4f08:	8f 93       	push	r24
    4f0a:	9f 93       	push	r25
    4f0c:	af 93       	push	r26
    4f0e:	bf 93       	push	r27
    4f10:	ef 93       	push	r30
    4f12:	ff 93       	push	r31
    4f14:	e0 91 b7 17 	lds	r30, 0x17B7	; 0x8017b7 <_ser_handle+0x6>
    4f18:	f0 91 b8 17 	lds	r31, 0x17B8	; 0x8017b8 <_ser_handle+0x7>
    4f1c:	30 97       	sbiw	r30, 0x00	; 0
    4f1e:	b9 f0       	breq	.+46     	; 0x4f4e <__vector_55+0x56>
    4f20:	02 80       	ldd	r0, Z+2	; 0x02
    4f22:	f3 81       	ldd	r31, Z+3	; 0x03
    4f24:	e0 2d       	mov	r30, r0
    4f26:	93 81       	ldd	r25, Z+3	; 0x03
    4f28:	82 81       	ldd	r24, Z+2	; 0x02
    4f2a:	98 17       	cp	r25, r24
    4f2c:	b1 f0       	breq	.+44     	; 0x4f5a <__vector_55+0x62>
    4f2e:	92 81       	ldd	r25, Z+2	; 0x02
    4f30:	85 81       	ldd	r24, Z+5	; 0x05
    4f32:	28 2f       	mov	r18, r24
    4f34:	26 95       	lsr	r18
    4f36:	29 23       	and	r18, r25
    4f38:	a0 81       	ld	r26, Z
    4f3a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f3c:	a2 0f       	add	r26, r18
    4f3e:	b1 1d       	adc	r27, r1
    4f40:	2c 91       	ld	r18, X
    4f42:	9f 5f       	subi	r25, 0xFF	; 255
    4f44:	89 23       	and	r24, r25
    4f46:	82 83       	std	Z+2, r24	; 0x02
    4f48:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f4c:	0b c0       	rjmp	.+22     	; 0x4f64 <__vector_55+0x6c>
    4f4e:	e1 e3       	ldi	r30, 0x31	; 49
    4f50:	f1 e0       	ldi	r31, 0x01	; 1
    4f52:	80 81       	ld	r24, Z
    4f54:	8f 7d       	andi	r24, 0xDF	; 223
    4f56:	80 83       	st	Z, r24
    4f58:	05 c0       	rjmp	.+10     	; 0x4f64 <__vector_55+0x6c>
    4f5a:	e1 e3       	ldi	r30, 0x31	; 49
    4f5c:	f1 e0       	ldi	r31, 0x01	; 1
    4f5e:	80 81       	ld	r24, Z
    4f60:	8f 7d       	andi	r24, 0xDF	; 223
    4f62:	80 83       	st	Z, r24
    4f64:	ff 91       	pop	r31
    4f66:	ef 91       	pop	r30
    4f68:	bf 91       	pop	r27
    4f6a:	af 91       	pop	r26
    4f6c:	9f 91       	pop	r25
    4f6e:	8f 91       	pop	r24
    4f70:	2f 91       	pop	r18
    4f72:	0f 90       	pop	r0
    4f74:	0b be       	out	0x3b, r0	; 59
    4f76:	0f 90       	pop	r0
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	0f 90       	pop	r0
    4f7c:	1f 90       	pop	r1
    4f7e:	18 95       	reti

00004f80 <usart_getchar>:
    4f80:	cf 93       	push	r28
    4f82:	df 93       	push	r29
    4f84:	1f 92       	push	r1
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	be 01       	movw	r22, r28
    4f8c:	6f 5f       	subi	r22, 0xFF	; 255
    4f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f90:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <_com_serial_instance>
    4f94:	90 91 ba 17 	lds	r25, 0x17BA	; 0x8017ba <_com_serial_instance+0x1>
    4f98:	7b dd       	rcall	.-1290   	; 0x4a90 <serial_getByte>
    4f9a:	81 11       	cpse	r24, r1
    4f9c:	f6 cf       	rjmp	.-20     	; 0x4f8a <usart_getchar+0xa>
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	0f 90       	pop	r0
    4fa4:	df 91       	pop	r29
    4fa6:	cf 91       	pop	r28
    4fa8:	08 95       	ret

00004faa <usart_putchar>:
    4faa:	68 2f       	mov	r22, r24
    4fac:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <_com_serial_instance>
    4fb0:	90 91 ba 17 	lds	r25, 0x17BA	; 0x8017ba <_com_serial_instance+0x1>
    4fb4:	ed dc       	rcall	.-1574   	; 0x4990 <serial_sendByte>
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	08 95       	ret

00004fbc <stdio_initialise>:
    4fbc:	8f 92       	push	r8
    4fbe:	9f 92       	push	r9
    4fc0:	af 92       	push	r10
    4fc2:	cf 92       	push	r12
    4fc4:	ef 92       	push	r14
    4fc6:	0f 93       	push	r16
    4fc8:	81 2c       	mov	r8, r1
    4fca:	91 2c       	mov	r9, r1
    4fcc:	68 94       	set
    4fce:	aa 24       	eor	r10, r10
    4fd0:	a7 f8       	bld	r10, 7
    4fd2:	68 94       	set
    4fd4:	cc 24       	eor	r12, r12
    4fd6:	c7 f8       	bld	r12, 7
    4fd8:	e1 2c       	mov	r14, r1
    4fda:	00 e0       	ldi	r16, 0x00	; 0
    4fdc:	23 e0       	ldi	r18, 0x03	; 3
    4fde:	40 e0       	ldi	r20, 0x00	; 0
    4fe0:	51 ee       	ldi	r21, 0xE1	; 225
    4fe2:	60 e0       	ldi	r22, 0x00	; 0
    4fe4:	70 e0       	ldi	r23, 0x00	; 0
    4fe6:	32 dc       	rcall	.-1948   	; 0x484c <serial_create>
    4fe8:	90 93 ba 17 	sts	0x17BA, r25	; 0x8017ba <_com_serial_instance+0x1>
    4fec:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <_com_serial_instance>
    4ff0:	e9 e0       	ldi	r30, 0x09	; 9
    4ff2:	f8 e1       	ldi	r31, 0x18	; 24
    4ff4:	83 e1       	ldi	r24, 0x13	; 19
    4ff6:	92 e0       	ldi	r25, 0x02	; 2
    4ff8:	91 83       	std	Z+1, r25	; 0x01
    4ffa:	80 83       	st	Z, r24
    4ffc:	93 83       	std	Z+3, r25	; 0x03
    4ffe:	82 83       	std	Z+2, r24	; 0x02
    5000:	0f 91       	pop	r16
    5002:	ef 90       	pop	r14
    5004:	cf 90       	pop	r12
    5006:	af 90       	pop	r10
    5008:	9f 90       	pop	r9
    500a:	8f 90       	pop	r8
    500c:	08 95       	ret

0000500e <_turn_off>:
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	fc 01       	movw	r30, r24
    5012:	ee 0f       	add	r30, r30
    5014:	ff 1f       	adc	r31, r31
    5016:	e8 0f       	add	r30, r24
    5018:	f9 1f       	adc	r31, r25
    501a:	ee 0f       	add	r30, r30
    501c:	ff 1f       	adc	r31, r31
    501e:	e5 54       	subi	r30, 0x45	; 69
    5020:	f8 4e       	sbci	r31, 0xE8	; 232
    5022:	23 81       	ldd	r18, Z+3	; 0x03
    5024:	21 11       	cpse	r18, r1
    5026:	1f c0       	rjmp	.+62     	; 0x5066 <_turn_off+0x58>
    5028:	9c 01       	movw	r18, r24
    502a:	22 0f       	add	r18, r18
    502c:	33 1f       	adc	r19, r19
    502e:	f9 01       	movw	r30, r18
    5030:	e8 0f       	add	r30, r24
    5032:	f9 1f       	adc	r31, r25
    5034:	ee 0f       	add	r30, r30
    5036:	ff 1f       	adc	r31, r31
    5038:	e5 54       	subi	r30, 0x45	; 69
    503a:	f8 4e       	sbci	r31, 0xE8	; 232
    503c:	a0 81       	ld	r26, Z
    503e:	b1 81       	ldd	r27, Z+1	; 0x01
    5040:	4c 91       	ld	r20, X
    5042:	f9 01       	movw	r30, r18
    5044:	e8 0f       	add	r30, r24
    5046:	f9 1f       	adc	r31, r25
    5048:	ee 0f       	add	r30, r30
    504a:	ff 1f       	adc	r31, r31
    504c:	e5 54       	subi	r30, 0x45	; 69
    504e:	f8 4e       	sbci	r31, 0xE8	; 232
    5050:	81 e0       	ldi	r24, 0x01	; 1
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	02 80       	ldd	r0, Z+2	; 0x02
    5056:	02 c0       	rjmp	.+4      	; 0x505c <_turn_off+0x4e>
    5058:	88 0f       	add	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	0a 94       	dec	r0
    505e:	e2 f7       	brpl	.-8      	; 0x5058 <_turn_off+0x4a>
    5060:	84 2b       	or	r24, r20
    5062:	8c 93       	st	X, r24
    5064:	08 95       	ret
    5066:	fc 01       	movw	r30, r24
    5068:	ee 0f       	add	r30, r30
    506a:	ff 1f       	adc	r31, r31
    506c:	df 01       	movw	r26, r30
    506e:	a8 0f       	add	r26, r24
    5070:	b9 1f       	adc	r27, r25
    5072:	aa 0f       	add	r26, r26
    5074:	bb 1f       	adc	r27, r27
    5076:	a5 54       	subi	r26, 0x45	; 69
    5078:	b8 4e       	sbci	r27, 0xE8	; 232
    507a:	0d 90       	ld	r0, X+
    507c:	bc 91       	ld	r27, X
    507e:	a0 2d       	mov	r26, r0
    5080:	2c 91       	ld	r18, X
    5082:	e8 0f       	add	r30, r24
    5084:	f9 1f       	adc	r31, r25
    5086:	ee 0f       	add	r30, r30
    5088:	ff 1f       	adc	r31, r31
    508a:	e5 54       	subi	r30, 0x45	; 69
    508c:	f8 4e       	sbci	r31, 0xE8	; 232
    508e:	81 e0       	ldi	r24, 0x01	; 1
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	02 80       	ldd	r0, Z+2	; 0x02
    5094:	02 c0       	rjmp	.+4      	; 0x509a <_turn_off+0x8c>
    5096:	88 0f       	add	r24, r24
    5098:	99 1f       	adc	r25, r25
    509a:	0a 94       	dec	r0
    509c:	e2 f7       	brpl	.-8      	; 0x5096 <_turn_off+0x88>
    509e:	80 95       	com	r24
    50a0:	82 23       	and	r24, r18
    50a2:	8c 93       	st	X, r24
    50a4:	08 95       	ret

000050a6 <_turn_on>:
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	fc 01       	movw	r30, r24
    50aa:	ee 0f       	add	r30, r30
    50ac:	ff 1f       	adc	r31, r31
    50ae:	e8 0f       	add	r30, r24
    50b0:	f9 1f       	adc	r31, r25
    50b2:	ee 0f       	add	r30, r30
    50b4:	ff 1f       	adc	r31, r31
    50b6:	e5 54       	subi	r30, 0x45	; 69
    50b8:	f8 4e       	sbci	r31, 0xE8	; 232
    50ba:	23 81       	ldd	r18, Z+3	; 0x03
    50bc:	21 11       	cpse	r18, r1
    50be:	20 c0       	rjmp	.+64     	; 0x5100 <_turn_on+0x5a>
    50c0:	9c 01       	movw	r18, r24
    50c2:	22 0f       	add	r18, r18
    50c4:	33 1f       	adc	r19, r19
    50c6:	f9 01       	movw	r30, r18
    50c8:	e8 0f       	add	r30, r24
    50ca:	f9 1f       	adc	r31, r25
    50cc:	ee 0f       	add	r30, r30
    50ce:	ff 1f       	adc	r31, r31
    50d0:	e5 54       	subi	r30, 0x45	; 69
    50d2:	f8 4e       	sbci	r31, 0xE8	; 232
    50d4:	a0 81       	ld	r26, Z
    50d6:	b1 81       	ldd	r27, Z+1	; 0x01
    50d8:	4c 91       	ld	r20, X
    50da:	f9 01       	movw	r30, r18
    50dc:	e8 0f       	add	r30, r24
    50de:	f9 1f       	adc	r31, r25
    50e0:	ee 0f       	add	r30, r30
    50e2:	ff 1f       	adc	r31, r31
    50e4:	e5 54       	subi	r30, 0x45	; 69
    50e6:	f8 4e       	sbci	r31, 0xE8	; 232
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	02 80       	ldd	r0, Z+2	; 0x02
    50ee:	02 c0       	rjmp	.+4      	; 0x50f4 <_turn_on+0x4e>
    50f0:	88 0f       	add	r24, r24
    50f2:	99 1f       	adc	r25, r25
    50f4:	0a 94       	dec	r0
    50f6:	e2 f7       	brpl	.-8      	; 0x50f0 <_turn_on+0x4a>
    50f8:	80 95       	com	r24
    50fa:	84 23       	and	r24, r20
    50fc:	8c 93       	st	X, r24
    50fe:	08 95       	ret
    5100:	fc 01       	movw	r30, r24
    5102:	ee 0f       	add	r30, r30
    5104:	ff 1f       	adc	r31, r31
    5106:	df 01       	movw	r26, r30
    5108:	a8 0f       	add	r26, r24
    510a:	b9 1f       	adc	r27, r25
    510c:	aa 0f       	add	r26, r26
    510e:	bb 1f       	adc	r27, r27
    5110:	a5 54       	subi	r26, 0x45	; 69
    5112:	b8 4e       	sbci	r27, 0xE8	; 232
    5114:	0d 90       	ld	r0, X+
    5116:	bc 91       	ld	r27, X
    5118:	a0 2d       	mov	r26, r0
    511a:	2c 91       	ld	r18, X
    511c:	e8 0f       	add	r30, r24
    511e:	f9 1f       	adc	r31, r25
    5120:	ee 0f       	add	r30, r30
    5122:	ff 1f       	adc	r31, r31
    5124:	e5 54       	subi	r30, 0x45	; 69
    5126:	f8 4e       	sbci	r31, 0xE8	; 232
    5128:	81 e0       	ldi	r24, 0x01	; 1
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	02 80       	ldd	r0, Z+2	; 0x02
    512e:	02 c0       	rjmp	.+4      	; 0x5134 <_turn_on+0x8e>
    5130:	88 0f       	add	r24, r24
    5132:	99 1f       	adc	r25, r25
    5134:	0a 94       	dec	r0
    5136:	e2 f7       	brpl	.-8      	; 0x5130 <_turn_on+0x8a>
    5138:	82 2b       	or	r24, r18
    513a:	8c 93       	st	X, r24
    513c:	08 95       	ret

0000513e <_hal_led_task>:
    513e:	cc 24       	eor	r12, r12
    5140:	c3 94       	inc	r12
    5142:	d1 2c       	mov	r13, r1
    5144:	68 94       	set
    5146:	bb 24       	eor	r11, r11
    5148:	b2 f8       	bld	r11, 2
    514a:	cb eb       	ldi	r28, 0xBB	; 187
    514c:	d7 e1       	ldi	r29, 0x17	; 23
    514e:	10 e0       	ldi	r17, 0x00	; 0
    5150:	8c 81       	ldd	r24, Y+4	; 0x04
    5152:	81 30       	cpi	r24, 0x01	; 1
    5154:	81 f0       	breq	.+32     	; 0x5176 <_hal_led_task+0x38>
    5156:	18 f1       	brcs	.+70     	; 0x519e <_hal_led_task+0x60>
    5158:	82 30       	cpi	r24, 0x02	; 2
    515a:	61 f5       	brne	.+88     	; 0x51b4 <_hal_led_task+0x76>
    515c:	e8 81       	ld	r30, Y
    515e:	f9 81       	ldd	r31, Y+1	; 0x01
    5160:	20 81       	ld	r18, Z
    5162:	c6 01       	movw	r24, r12
    5164:	0a 80       	ldd	r0, Y+2	; 0x02
    5166:	02 c0       	rjmp	.+4      	; 0x516c <_hal_led_task+0x2e>
    5168:	88 0f       	add	r24, r24
    516a:	99 1f       	adc	r25, r25
    516c:	0a 94       	dec	r0
    516e:	e2 f7       	brpl	.-8      	; 0x5168 <_hal_led_task+0x2a>
    5170:	82 27       	eor	r24, r18
    5172:	80 83       	st	Z, r24
    5174:	1f c0       	rjmp	.+62     	; 0x51b4 <_hal_led_task+0x76>
    5176:	8d 81       	ldd	r24, Y+5	; 0x05
    5178:	8f 5f       	subi	r24, 0xFF	; 255
    517a:	86 30       	cpi	r24, 0x06	; 6
    517c:	10 f4       	brcc	.+4      	; 0x5182 <_hal_led_task+0x44>
    517e:	8d 83       	std	Y+5, r24	; 0x05
    5180:	19 c0       	rjmp	.+50     	; 0x51b4 <_hal_led_task+0x76>
    5182:	1d 82       	std	Y+5, r1	; 0x05
    5184:	e8 81       	ld	r30, Y
    5186:	f9 81       	ldd	r31, Y+1	; 0x01
    5188:	20 81       	ld	r18, Z
    518a:	c6 01       	movw	r24, r12
    518c:	0a 80       	ldd	r0, Y+2	; 0x02
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <_hal_led_task+0x56>
    5190:	88 0f       	add	r24, r24
    5192:	99 1f       	adc	r25, r25
    5194:	0a 94       	dec	r0
    5196:	e2 f7       	brpl	.-8      	; 0x5190 <_hal_led_task+0x52>
    5198:	82 27       	eor	r24, r18
    519a:	80 83       	st	Z, r24
    519c:	0b c0       	rjmp	.+22     	; 0x51b4 <_hal_led_task+0x76>
    519e:	0d 81       	ldd	r16, Y+5	; 0x05
    51a0:	00 23       	and	r16, r16
    51a2:	29 f0       	breq	.+10     	; 0x51ae <_hal_led_task+0x70>
    51a4:	81 2f       	mov	r24, r17
    51a6:	7f df       	rcall	.-258    	; 0x50a6 <_turn_on>
    51a8:	01 50       	subi	r16, 0x01	; 1
    51aa:	0d 83       	std	Y+5, r16	; 0x05
    51ac:	03 c0       	rjmp	.+6      	; 0x51b4 <_hal_led_task+0x76>
    51ae:	bc 82       	std	Y+4, r11	; 0x04
    51b0:	81 2f       	mov	r24, r17
    51b2:	2d df       	rcall	.-422    	; 0x500e <_turn_off>
    51b4:	1f 5f       	subi	r17, 0xFF	; 255
    51b6:	26 96       	adiw	r28, 0x06	; 6
    51b8:	14 30       	cpi	r17, 0x04	; 4
    51ba:	51 f6       	brne	.-108    	; 0x5150 <_hal_led_task+0x12>
    51bc:	6c e0       	ldi	r22, 0x0C	; 12
    51be:	70 e0       	ldi	r23, 0x00	; 0
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskDelay>
    51c8:	c0 cf       	rjmp	.-128    	; 0x514a <_hal_led_task+0xc>

000051ca <status_leds_initialise>:
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	0f 93       	push	r16
    51d0:	1f 93       	push	r17
    51d2:	cf 93       	push	r28
    51d4:	df 93       	push	r29
    51d6:	08 2f       	mov	r16, r24
    51d8:	80 e4       	ldi	r24, 0x40	; 64
    51da:	87 b9       	out	0x07, r24	; 7
    51dc:	cb eb       	ldi	r28, 0xBB	; 187
    51de:	d7 e1       	ldi	r29, 0x17	; 23
    51e0:	0f 2e       	mov	r0, r31
    51e2:	f8 e2       	ldi	r31, 0x28	; 40
    51e4:	ef 2e       	mov	r14, r31
    51e6:	f1 2c       	mov	r15, r1
    51e8:	f0 2d       	mov	r31, r0
    51ea:	f9 82       	std	Y+1, r15	; 0x01
    51ec:	e8 82       	st	Y, r14
    51ee:	86 e0       	ldi	r24, 0x06	; 6
    51f0:	8a 83       	std	Y+2, r24	; 0x02
    51f2:	1b 82       	std	Y+3, r1	; 0x03
    51f4:	14 e0       	ldi	r17, 0x04	; 4
    51f6:	1c 83       	std	Y+4, r17	; 0x04
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	09 df       	rcall	.-494    	; 0x500e <_turn_off>
    51fc:	80 e8       	ldi	r24, 0x80	; 128
    51fe:	87 b9       	out	0x07, r24	; 7
    5200:	ff 82       	std	Y+7, r15	; 0x07
    5202:	ee 82       	std	Y+6, r14	; 0x06
    5204:	87 e0       	ldi	r24, 0x07	; 7
    5206:	88 87       	std	Y+8, r24	; 0x08
    5208:	19 86       	std	Y+9, r1	; 0x09
    520a:	1a 87       	std	Y+10, r17	; 0x0a
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	ff de       	rcall	.-514    	; 0x500e <_turn_off>
    5210:	80 e2       	ldi	r24, 0x20	; 32
    5212:	83 bb       	out	0x13, r24	; 19
    5214:	84 e3       	ldi	r24, 0x34	; 52
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	9d 87       	std	Y+13, r25	; 0x0d
    521a:	8c 87       	std	Y+12, r24	; 0x0c
    521c:	85 e0       	ldi	r24, 0x05	; 5
    521e:	8e 87       	std	Y+14, r24	; 0x0e
    5220:	1f 86       	std	Y+15, r1	; 0x0f
    5222:	18 8b       	std	Y+16, r17	; 0x10
    5224:	82 e0       	ldi	r24, 0x02	; 2
    5226:	f3 de       	rcall	.-538    	; 0x500e <_turn_off>
    5228:	80 e1       	ldi	r24, 0x10	; 16
    522a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    522e:	82 e0       	ldi	r24, 0x02	; 2
    5230:	91 e0       	ldi	r25, 0x01	; 1
    5232:	9b 8b       	std	Y+19, r25	; 0x13
    5234:	8a 8b       	std	Y+18, r24	; 0x12
    5236:	1c 8b       	std	Y+20, r17	; 0x14
    5238:	1d 8a       	std	Y+21, r1	; 0x15
    523a:	1e 8b       	std	Y+22, r17	; 0x16
    523c:	83 e0       	ldi	r24, 0x03	; 3
    523e:	e7 de       	rcall	.-562    	; 0x500e <_turn_off>
    5240:	e1 2c       	mov	r14, r1
    5242:	f1 2c       	mov	r15, r1
    5244:	20 e0       	ldi	r18, 0x00	; 0
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	40 ec       	ldi	r20, 0xC0	; 192
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	65 ed       	ldi	r22, 0xD5	; 213
    524e:	77 e0       	ldi	r23, 0x07	; 7
    5250:	8f e9       	ldi	r24, 0x9F	; 159
    5252:	98 e2       	ldi	r25, 0x28	; 40
    5254:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskCreate>
    5258:	df 91       	pop	r29
    525a:	cf 91       	pop	r28
    525c:	1f 91       	pop	r17
    525e:	0f 91       	pop	r16
    5260:	ff 90       	pop	r15
    5262:	ef 90       	pop	r14
    5264:	08 95       	ret

00005266 <status_leds_slowBlink>:
    5266:	cf 93       	push	r28
    5268:	df 93       	push	r29
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	fc 01       	movw	r30, r24
    526e:	ee 0f       	add	r30, r30
    5270:	ff 1f       	adc	r31, r31
    5272:	df 01       	movw	r26, r30
    5274:	a8 0f       	add	r26, r24
    5276:	b9 1f       	adc	r27, r25
    5278:	aa 0f       	add	r26, r26
    527a:	bb 1f       	adc	r27, r27
    527c:	a5 54       	subi	r26, 0x45	; 69
    527e:	b8 4e       	sbci	r27, 0xE8	; 232
    5280:	cd 91       	ld	r28, X+
    5282:	dc 91       	ld	r29, X
    5284:	11 97       	sbiw	r26, 0x01	; 1
    5286:	48 81       	ld	r20, Y
    5288:	21 e0       	ldi	r18, 0x01	; 1
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	12 96       	adiw	r26, 0x02	; 2
    528e:	0c 90       	ld	r0, X
    5290:	12 97       	sbiw	r26, 0x02	; 2
    5292:	02 c0       	rjmp	.+4      	; 0x5298 <status_leds_slowBlink+0x32>
    5294:	22 0f       	add	r18, r18
    5296:	33 1f       	adc	r19, r19
    5298:	0a 94       	dec	r0
    529a:	e2 f7       	brpl	.-8      	; 0x5294 <status_leds_slowBlink+0x2e>
    529c:	24 27       	eor	r18, r20
    529e:	28 83       	st	Y, r18
    52a0:	fd 01       	movw	r30, r26
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	84 83       	std	Z+4, r24	; 0x04
    52a6:	df 91       	pop	r29
    52a8:	cf 91       	pop	r28
    52aa:	08 95       	ret

000052ac <status_leds_fastBlink>:
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	fc 01       	movw	r30, r24
    52b4:	ee 0f       	add	r30, r30
    52b6:	ff 1f       	adc	r31, r31
    52b8:	df 01       	movw	r26, r30
    52ba:	a8 0f       	add	r26, r24
    52bc:	b9 1f       	adc	r27, r25
    52be:	aa 0f       	add	r26, r26
    52c0:	bb 1f       	adc	r27, r27
    52c2:	a5 54       	subi	r26, 0x45	; 69
    52c4:	b8 4e       	sbci	r27, 0xE8	; 232
    52c6:	cd 91       	ld	r28, X+
    52c8:	dc 91       	ld	r29, X
    52ca:	11 97       	sbiw	r26, 0x01	; 1
    52cc:	48 81       	ld	r20, Y
    52ce:	21 e0       	ldi	r18, 0x01	; 1
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	12 96       	adiw	r26, 0x02	; 2
    52d4:	0c 90       	ld	r0, X
    52d6:	12 97       	sbiw	r26, 0x02	; 2
    52d8:	02 c0       	rjmp	.+4      	; 0x52de <status_leds_fastBlink+0x32>
    52da:	22 0f       	add	r18, r18
    52dc:	33 1f       	adc	r19, r19
    52de:	0a 94       	dec	r0
    52e0:	e2 f7       	brpl	.-8      	; 0x52da <status_leds_fastBlink+0x2e>
    52e2:	24 27       	eor	r18, r20
    52e4:	28 83       	st	Y, r18
    52e6:	fd 01       	movw	r30, r26
    52e8:	82 e0       	ldi	r24, 0x02	; 2
    52ea:	84 83       	std	Z+4, r24	; 0x04
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	08 95       	ret

000052f2 <status_leds_ledOn>:
    52f2:	28 2f       	mov	r18, r24
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	f9 01       	movw	r30, r18
    52f8:	ee 0f       	add	r30, r30
    52fa:	ff 1f       	adc	r31, r31
    52fc:	e2 0f       	add	r30, r18
    52fe:	f3 1f       	adc	r31, r19
    5300:	ee 0f       	add	r30, r30
    5302:	ff 1f       	adc	r31, r31
    5304:	e5 54       	subi	r30, 0x45	; 69
    5306:	f8 4e       	sbci	r31, 0xE8	; 232
    5308:	93 e0       	ldi	r25, 0x03	; 3
    530a:	94 83       	std	Z+4, r25	; 0x04
    530c:	cc ce       	rjmp	.-616    	; 0x50a6 <_turn_on>
    530e:	08 95       	ret

00005310 <status_leds_ledOff>:
    5310:	28 2f       	mov	r18, r24
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	f9 01       	movw	r30, r18
    5316:	ee 0f       	add	r30, r30
    5318:	ff 1f       	adc	r31, r31
    531a:	e2 0f       	add	r30, r18
    531c:	f3 1f       	adc	r31, r19
    531e:	ee 0f       	add	r30, r30
    5320:	ff 1f       	adc	r31, r31
    5322:	e5 54       	subi	r30, 0x45	; 69
    5324:	f8 4e       	sbci	r31, 0xE8	; 232
    5326:	94 e0       	ldi	r25, 0x04	; 4
    5328:	94 83       	std	Z+4, r25	; 0x04
    532a:	71 ce       	rjmp	.-798    	; 0x500e <_turn_off>
    532c:	08 95       	ret

0000532e <status_leds_longPuls>:
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	fc 01       	movw	r30, r24
    5332:	ee 0f       	add	r30, r30
    5334:	ff 1f       	adc	r31, r31
    5336:	df 01       	movw	r26, r30
    5338:	a8 0f       	add	r26, r24
    533a:	b9 1f       	adc	r27, r25
    533c:	aa 0f       	add	r26, r26
    533e:	bb 1f       	adc	r27, r27
    5340:	a5 54       	subi	r26, 0x45	; 69
    5342:	b8 4e       	sbci	r27, 0xE8	; 232
    5344:	26 e0       	ldi	r18, 0x06	; 6
    5346:	15 96       	adiw	r26, 0x05	; 5
    5348:	2c 93       	st	X, r18
    534a:	15 97       	sbiw	r26, 0x05	; 5
    534c:	fd 01       	movw	r30, r26
    534e:	14 82       	std	Z+4, r1	; 0x04
    5350:	08 95       	ret

00005352 <status_leds_shortPuls>:
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	fc 01       	movw	r30, r24
    5356:	ee 0f       	add	r30, r30
    5358:	ff 1f       	adc	r31, r31
    535a:	df 01       	movw	r26, r30
    535c:	a8 0f       	add	r26, r24
    535e:	b9 1f       	adc	r27, r25
    5360:	aa 0f       	add	r26, r26
    5362:	bb 1f       	adc	r27, r27
    5364:	a5 54       	subi	r26, 0x45	; 69
    5366:	b8 4e       	sbci	r27, 0xE8	; 232
    5368:	15 96       	adiw	r26, 0x05	; 5
    536a:	1c 92       	st	X, r1
    536c:	15 97       	sbiw	r26, 0x05	; 5
    536e:	fd 01       	movw	r30, r26
    5370:	14 82       	std	Z+4, r1	; 0x04
    5372:	08 95       	ret

00005374 <_initTwiInterface>:
    5374:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <_twiIsInitiated>
    5378:	81 11       	cpse	r24, r1
    537a:	0c c0       	rjmp	.+24     	; 0x5394 <_initTwiInterface+0x20>
    537c:	8c e0       	ldi	r24, 0x0C	; 12
    537e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5382:	8f ef       	ldi	r24, 0xFF	; 255
    5384:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5388:	84 e0       	ldi	r24, 0x04	; 4
    538a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <_twiIsInitiated>
    5394:	08 95       	ret

00005396 <twiCreate>:
    5396:	af 92       	push	r10
    5398:	bf 92       	push	r11
    539a:	cf 92       	push	r12
    539c:	df 92       	push	r13
    539e:	ef 92       	push	r14
    53a0:	ff 92       	push	r15
    53a2:	0f 93       	push	r16
    53a4:	1f 93       	push	r17
    53a6:	cf 93       	push	r28
    53a8:	df 93       	push	r29
    53aa:	a8 2e       	mov	r10, r24
    53ac:	b6 2e       	mov	r11, r22
    53ae:	69 01       	movw	r12, r18
    53b0:	7a 01       	movw	r14, r20
    53b2:	84 e0       	ldi	r24, 0x04	; 4
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	5f d3       	rcall	.+1726   	; 0x5a76 <malloc>
    53b8:	ec 01       	movw	r28, r24
    53ba:	89 2b       	or	r24, r25
    53bc:	61 f1       	breq	.+88     	; 0x5416 <twiCreate+0x80>
    53be:	a8 82       	st	Y, r10
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	b8 12       	cpse	r11, r24
    53c4:	12 c0       	rjmp	.+36     	; 0x53ea <twiCreate+0x54>
    53c6:	c7 01       	movw	r24, r14
    53c8:	b6 01       	movw	r22, r12
    53ca:	20 ea       	ldi	r18, 0xA0	; 160
    53cc:	36 e8       	ldi	r19, 0x86	; 134
    53ce:	41 e0       	ldi	r20, 0x01	; 1
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	27 d3       	rcall	.+1614   	; 0x5a22 <__udivmodsi4>
    53d4:	da 01       	movw	r26, r20
    53d6:	c9 01       	movw	r24, r18
    53d8:	40 97       	sbiw	r24, 0x10	; 16
    53da:	a1 09       	sbc	r26, r1
    53dc:	b1 09       	sbc	r27, r1
    53de:	b6 95       	lsr	r27
    53e0:	a7 95       	ror	r26
    53e2:	97 95       	ror	r25
    53e4:	87 95       	ror	r24
    53e6:	89 83       	std	Y+1, r24	; 0x01
    53e8:	11 c0       	rjmp	.+34     	; 0x540c <twiCreate+0x76>
    53ea:	c7 01       	movw	r24, r14
    53ec:	b6 01       	movw	r22, r12
    53ee:	20 e8       	ldi	r18, 0x80	; 128
    53f0:	3a e1       	ldi	r19, 0x1A	; 26
    53f2:	46 e0       	ldi	r20, 0x06	; 6
    53f4:	50 e0       	ldi	r21, 0x00	; 0
    53f6:	15 d3       	rcall	.+1578   	; 0x5a22 <__udivmodsi4>
    53f8:	da 01       	movw	r26, r20
    53fa:	c9 01       	movw	r24, r18
    53fc:	40 97       	sbiw	r24, 0x10	; 16
    53fe:	a1 09       	sbc	r26, r1
    5400:	b1 09       	sbc	r27, r1
    5402:	b6 95       	lsr	r27
    5404:	a7 95       	ror	r26
    5406:	97 95       	ror	r25
    5408:	87 95       	ror	r24
    540a:	89 83       	std	Y+1, r24	; 0x01
    540c:	1b 83       	std	Y+3, r17	; 0x03
    540e:	0a 83       	std	Y+2, r16	; 0x02
    5410:	8c 2f       	mov	r24, r28
    5412:	9d 2f       	mov	r25, r29
    5414:	02 c0       	rjmp	.+4      	; 0x541a <twiCreate+0x84>
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	ff 90       	pop	r15
    5424:	ef 90       	pop	r14
    5426:	df 90       	pop	r13
    5428:	cf 90       	pop	r12
    542a:	bf 90       	pop	r11
    542c:	af 90       	pop	r10
    542e:	08 95       	ret

00005430 <twiIsBusy>:
    5430:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5434:	81 70       	andi	r24, 0x01	; 1
    5436:	08 95       	ret

00005438 <twiTransmit>:
    5438:	ff 92       	push	r15
    543a:	0f 93       	push	r16
    543c:	1f 93       	push	r17
    543e:	cf 93       	push	r28
    5440:	df 93       	push	r29
    5442:	00 97       	sbiw	r24, 0x00	; 0
    5444:	d1 f1       	breq	.+116    	; 0x54ba <twiTransmit+0x82>
    5446:	4a 30       	cpi	r20, 0x0A	; 10
    5448:	d0 f5       	brcc	.+116    	; 0x54be <twiTransmit+0x86>
    544a:	f4 2e       	mov	r15, r20
    544c:	8b 01       	movw	r16, r22
    544e:	ec 01       	movw	r28, r24
    5450:	ef df       	rcall	.-34     	; 0x5430 <twiIsBusy>
    5452:	81 11       	cpse	r24, r1
    5454:	36 c0       	rjmp	.+108    	; 0x54c2 <twiTransmit+0x8a>
    5456:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    545a:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    545e:	c8 17       	cp	r28, r24
    5460:	d9 07       	cpc	r29, r25
    5462:	41 f0       	breq	.+16     	; 0x5474 <twiTransmit+0x3c>
    5464:	87 df       	rcall	.-242    	; 0x5374 <_initTwiInterface>
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    546c:	d0 93 d5 17 	sts	0x17D5, r29	; 0x8017d5 <_twiCurrentHandler+0x1>
    5470:	c0 93 d4 17 	sts	0x17D4, r28	; 0x8017d4 <_twiCurrentHandler>
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	8f 0d       	add	r24, r15
    5478:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <_twiMessageLen>
    547c:	88 81       	ld	r24, Y
    547e:	88 0f       	add	r24, r24
    5480:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <_twiMessageBuffer>
    5484:	ff 20       	and	r15, r15
    5486:	89 f0       	breq	.+34     	; 0x54aa <twiTransmit+0x72>
    5488:	f8 01       	movw	r30, r16
    548a:	a8 ed       	ldi	r26, 0xD8	; 216
    548c:	b7 e1       	ldi	r27, 0x17	; 23
    548e:	4f ef       	ldi	r20, 0xFF	; 255
    5490:	4f 0d       	add	r20, r15
    5492:	64 2f       	mov	r22, r20
    5494:	70 e0       	ldi	r23, 0x00	; 0
    5496:	cb 01       	movw	r24, r22
    5498:	01 96       	adiw	r24, 0x01	; 1
    549a:	b8 01       	movw	r22, r16
    549c:	68 0f       	add	r22, r24
    549e:	79 1f       	adc	r23, r25
    54a0:	81 91       	ld	r24, Z+
    54a2:	8d 93       	st	X+, r24
    54a4:	e6 17       	cp	r30, r22
    54a6:	f7 07       	cpc	r31, r23
    54a8:	d9 f7       	brne	.-10     	; 0x54a0 <twiTransmit+0x68>
    54aa:	88 ef       	ldi	r24, 0xF8	; 248
    54ac:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54b0:	85 ea       	ldi	r24, 0xA5	; 165
    54b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54b6:	84 e0       	ldi	r24, 0x04	; 4
    54b8:	05 c0       	rjmp	.+10     	; 0x54c4 <twiTransmit+0x8c>
    54ba:	86 e0       	ldi	r24, 0x06	; 6
    54bc:	03 c0       	rjmp	.+6      	; 0x54c4 <twiTransmit+0x8c>
    54be:	87 e0       	ldi	r24, 0x07	; 7
    54c0:	01 c0       	rjmp	.+2      	; 0x54c4 <twiTransmit+0x8c>
    54c2:	82 e0       	ldi	r24, 0x02	; 2
    54c4:	df 91       	pop	r29
    54c6:	cf 91       	pop	r28
    54c8:	1f 91       	pop	r17
    54ca:	0f 91       	pop	r16
    54cc:	ff 90       	pop	r15
    54ce:	08 95       	ret

000054d0 <twiReceive>:
    54d0:	1f 93       	push	r17
    54d2:	cf 93       	push	r28
    54d4:	df 93       	push	r29
    54d6:	00 97       	sbiw	r24, 0x00	; 0
    54d8:	29 f1       	breq	.+74     	; 0x5524 <twiReceive+0x54>
    54da:	6b 30       	cpi	r22, 0x0B	; 11
    54dc:	28 f5       	brcc	.+74     	; 0x5528 <twiReceive+0x58>
    54de:	16 2f       	mov	r17, r22
    54e0:	ec 01       	movw	r28, r24
    54e2:	a6 df       	rcall	.-180    	; 0x5430 <twiIsBusy>
    54e4:	81 11       	cpse	r24, r1
    54e6:	22 c0       	rjmp	.+68     	; 0x552c <twiReceive+0x5c>
    54e8:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    54ec:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    54f0:	c8 17       	cp	r28, r24
    54f2:	d9 07       	cpc	r29, r25
    54f4:	41 f0       	breq	.+16     	; 0x5506 <twiReceive+0x36>
    54f6:	3e df       	rcall	.-388    	; 0x5374 <_initTwiInterface>
    54f8:	89 81       	ldd	r24, Y+1	; 0x01
    54fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54fe:	d0 93 d5 17 	sts	0x17D5, r29	; 0x8017d5 <_twiCurrentHandler+0x1>
    5502:	c0 93 d4 17 	sts	0x17D4, r28	; 0x8017d4 <_twiCurrentHandler>
    5506:	10 93 d6 17 	sts	0x17D6, r17	; 0x8017d6 <_twiMessageLen>
    550a:	88 81       	ld	r24, Y
    550c:	88 0f       	add	r24, r24
    550e:	81 60       	ori	r24, 0x01	; 1
    5510:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <_twiMessageBuffer>
    5514:	88 ef       	ldi	r24, 0xF8	; 248
    5516:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    551a:	85 ea       	ldi	r24, 0xA5	; 165
    551c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5520:	85 e0       	ldi	r24, 0x05	; 5
    5522:	05 c0       	rjmp	.+10     	; 0x552e <twiReceive+0x5e>
    5524:	86 e0       	ldi	r24, 0x06	; 6
    5526:	03 c0       	rjmp	.+6      	; 0x552e <twiReceive+0x5e>
    5528:	87 e0       	ldi	r24, 0x07	; 7
    552a:	01 c0       	rjmp	.+2      	; 0x552e <twiReceive+0x5e>
    552c:	82 e0       	ldi	r24, 0x02	; 2
    552e:	df 91       	pop	r29
    5530:	cf 91       	pop	r28
    5532:	1f 91       	pop	r17
    5534:	08 95       	ret

00005536 <__vector_39>:
    5536:	1f 92       	push	r1
    5538:	0f 92       	push	r0
    553a:	0f b6       	in	r0, 0x3f	; 63
    553c:	0f 92       	push	r0
    553e:	11 24       	eor	r1, r1
    5540:	0b b6       	in	r0, 0x3b	; 59
    5542:	0f 92       	push	r0
    5544:	2f 93       	push	r18
    5546:	3f 93       	push	r19
    5548:	4f 93       	push	r20
    554a:	5f 93       	push	r21
    554c:	6f 93       	push	r22
    554e:	7f 93       	push	r23
    5550:	8f 93       	push	r24
    5552:	9f 93       	push	r25
    5554:	af 93       	push	r26
    5556:	bf 93       	push	r27
    5558:	ef 93       	push	r30
    555a:	ff 93       	push	r31
    555c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5560:	8e 2f       	mov	r24, r30
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	fc 01       	movw	r30, r24
    5566:	38 97       	sbiw	r30, 0x08	; 8
    5568:	e1 35       	cpi	r30, 0x51	; 81
    556a:	f1 05       	cpc	r31, r1
    556c:	08 f0       	brcs	.+2      	; 0x5570 <__vector_39+0x3a>
    556e:	75 c0       	rjmp	.+234    	; 0x565a <__vector_39+0x124>
    5570:	88 27       	eor	r24, r24
    5572:	e4 58       	subi	r30, 0x84	; 132
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	8f 4f       	sbci	r24, 0xFF	; 255
    5578:	76 c2       	rjmp	.+1260   	; 0x5a66 <__tablejump2__>
    557a:	10 92 d3 17 	sts	0x17D3, r1	; 0x8017d3 <_index.1885>
    557e:	e0 91 d3 17 	lds	r30, 0x17D3	; 0x8017d3 <_index.1885>
    5582:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiMessageLen>
    5586:	e8 17       	cp	r30, r24
    5588:	70 f4       	brcc	.+28     	; 0x55a6 <__vector_39+0x70>
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	8e 0f       	add	r24, r30
    558e:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <_index.1885>
    5592:	f0 e0       	ldi	r31, 0x00	; 0
    5594:	e9 52       	subi	r30, 0x29	; 41
    5596:	f8 4e       	sbci	r31, 0xE8	; 232
    5598:	80 81       	ld	r24, Z
    559a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    559e:	85 e8       	ldi	r24, 0x85	; 133
    55a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55a4:	72 c0       	rjmp	.+228    	; 0x568a <__vector_39+0x154>
    55a6:	84 e9       	ldi	r24, 0x94	; 148
    55a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ac:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    55b0:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    55b4:	dc 01       	movw	r26, r24
    55b6:	12 96       	adiw	r26, 0x02	; 2
    55b8:	ed 91       	ld	r30, X+
    55ba:	fc 91       	ld	r31, X
    55bc:	13 97       	sbiw	r26, 0x03	; 3
    55be:	30 97       	sbiw	r30, 0x00	; 0
    55c0:	09 f4       	brne	.+2      	; 0x55c4 <__vector_39+0x8e>
    55c2:	63 c0       	rjmp	.+198    	; 0x568a <__vector_39+0x154>
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	40 e0       	ldi	r20, 0x00	; 0
    55c8:	50 e0       	ldi	r21, 0x00	; 0
    55ca:	64 e0       	ldi	r22, 0x04	; 4
    55cc:	19 95       	eicall
    55ce:	5d c0       	rjmp	.+186    	; 0x568a <__vector_39+0x154>
    55d0:	e0 91 d3 17 	lds	r30, 0x17D3	; 0x8017d3 <_index.1885>
    55d4:	81 e0       	ldi	r24, 0x01	; 1
    55d6:	8e 0f       	add	r24, r30
    55d8:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <_index.1885>
    55dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55e0:	f0 e0       	ldi	r31, 0x00	; 0
    55e2:	e9 52       	subi	r30, 0x29	; 41
    55e4:	f8 4e       	sbci	r31, 0xE8	; 232
    55e6:	80 83       	st	Z, r24
    55e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55ec:	80 34       	cpi	r24, 0x40	; 64
    55ee:	11 f4       	brne	.+4      	; 0x55f4 <__vector_39+0xbe>
    55f0:	10 92 d3 17 	sts	0x17D3, r1	; 0x8017d3 <_index.1885>
    55f4:	20 91 d3 17 	lds	r18, 0x17D3	; 0x8017d3 <_index.1885>
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiMessageLen>
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	01 97       	sbiw	r24, 0x01	; 1
    5602:	28 17       	cp	r18, r24
    5604:	39 07       	cpc	r19, r25
    5606:	24 f4       	brge	.+8      	; 0x5610 <__vector_39+0xda>
    5608:	85 ec       	ldi	r24, 0xC5	; 197
    560a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    560e:	3d c0       	rjmp	.+122    	; 0x568a <__vector_39+0x154>
    5610:	85 e8       	ldi	r24, 0x85	; 133
    5612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5616:	39 c0       	rjmp	.+114    	; 0x568a <__vector_39+0x154>
    5618:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    561c:	e0 91 d3 17 	lds	r30, 0x17D3	; 0x8017d3 <_index.1885>
    5620:	f0 e0       	ldi	r31, 0x00	; 0
    5622:	e9 52       	subi	r30, 0x29	; 41
    5624:	f8 4e       	sbci	r31, 0xE8	; 232
    5626:	80 83       	st	Z, r24
    5628:	84 e9       	ldi	r24, 0x94	; 148
    562a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    562e:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    5632:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    5636:	dc 01       	movw	r26, r24
    5638:	12 96       	adiw	r26, 0x02	; 2
    563a:	ed 91       	ld	r30, X+
    563c:	fc 91       	ld	r31, X
    563e:	13 97       	sbiw	r26, 0x03	; 3
    5640:	30 97       	sbiw	r30, 0x00	; 0
    5642:	19 f1       	breq	.+70     	; 0x568a <__vector_39+0x154>
    5644:	20 91 d6 17 	lds	r18, 0x17D6	; 0x8017d6 <_twiMessageLen>
    5648:	47 ed       	ldi	r20, 0xD7	; 215
    564a:	57 e1       	ldi	r21, 0x17	; 23
    564c:	65 e0       	ldi	r22, 0x05	; 5
    564e:	19 95       	eicall
    5650:	1c c0       	rjmp	.+56     	; 0x568a <__vector_39+0x154>
    5652:	85 ea       	ldi	r24, 0xA5	; 165
    5654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5658:	18 c0       	rjmp	.+48     	; 0x568a <__vector_39+0x154>
    565a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    565e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5662:	84 e0       	ldi	r24, 0x04	; 4
    5664:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5668:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    566c:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    5670:	dc 01       	movw	r26, r24
    5672:	12 96       	adiw	r26, 0x02	; 2
    5674:	ed 91       	ld	r30, X+
    5676:	fc 91       	ld	r31, X
    5678:	13 97       	sbiw	r26, 0x03	; 3
    567a:	30 97       	sbiw	r30, 0x00	; 0
    567c:	31 f0       	breq	.+12     	; 0x568a <__vector_39+0x154>
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	40 e0       	ldi	r20, 0x00	; 0
    5682:	50 e0       	ldi	r21, 0x00	; 0
    5684:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5688:	19 95       	eicall
    568a:	ff 91       	pop	r31
    568c:	ef 91       	pop	r30
    568e:	bf 91       	pop	r27
    5690:	af 91       	pop	r26
    5692:	9f 91       	pop	r25
    5694:	8f 91       	pop	r24
    5696:	7f 91       	pop	r23
    5698:	6f 91       	pop	r22
    569a:	5f 91       	pop	r21
    569c:	4f 91       	pop	r20
    569e:	3f 91       	pop	r19
    56a0:	2f 91       	pop	r18
    56a2:	0f 90       	pop	r0
    56a4:	0b be       	out	0x3b, r0	; 59
    56a6:	0f 90       	pop	r0
    56a8:	0f be       	out	0x3f, r0	; 63
    56aa:	0f 90       	pop	r0
    56ac:	1f 90       	pop	r1
    56ae:	18 95       	reti

000056b0 <fifo_init>:
    56b0:	fc 01       	movw	r30, r24
    56b2:	41 11       	cpse	r20, r1
    56b4:	01 c0       	rjmp	.+2      	; 0x56b8 <fifo_init+0x8>
    56b6:	00 d3       	rcall	.+1536   	; 0x5cb8 <abort>
    56b8:	84 2f       	mov	r24, r20
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	9c 01       	movw	r18, r24
    56be:	21 50       	subi	r18, 0x01	; 1
    56c0:	31 09       	sbc	r19, r1
    56c2:	82 23       	and	r24, r18
    56c4:	93 23       	and	r25, r19
    56c6:	89 2b       	or	r24, r25
    56c8:	09 f0       	breq	.+2      	; 0x56cc <fifo_init+0x1c>
    56ca:	f6 d2       	rcall	.+1516   	; 0x5cb8 <abort>
    56cc:	41 38       	cpi	r20, 0x81	; 129
    56ce:	08 f0       	brcs	.+2      	; 0x56d2 <fifo_init+0x22>
    56d0:	f3 d2       	rcall	.+1510   	; 0x5cb8 <abort>
    56d2:	12 82       	std	Z+2, r1	; 0x02
    56d4:	13 82       	std	Z+3, r1	; 0x03
    56d6:	44 83       	std	Z+4, r20	; 0x04
    56d8:	44 0f       	add	r20, r20
    56da:	41 50       	subi	r20, 0x01	; 1
    56dc:	45 83       	std	Z+5, r20	; 0x05
    56de:	71 83       	std	Z+1, r23	; 0x01
    56e0:	60 83       	st	Z, r22
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	08 95       	ret

000056e8 <__subsf3>:
    56e8:	50 58       	subi	r21, 0x80	; 128

000056ea <__addsf3>:
    56ea:	bb 27       	eor	r27, r27
    56ec:	aa 27       	eor	r26, r26
    56ee:	0e d0       	rcall	.+28     	; 0x570c <__addsf3x>
    56f0:	21 c1       	rjmp	.+578    	; 0x5934 <__fp_round>
    56f2:	12 d1       	rcall	.+548    	; 0x5918 <__fp_pscA>
    56f4:	30 f0       	brcs	.+12     	; 0x5702 <__addsf3+0x18>
    56f6:	17 d1       	rcall	.+558    	; 0x5926 <__fp_pscB>
    56f8:	20 f0       	brcs	.+8      	; 0x5702 <__addsf3+0x18>
    56fa:	31 f4       	brne	.+12     	; 0x5708 <__addsf3+0x1e>
    56fc:	9f 3f       	cpi	r25, 0xFF	; 255
    56fe:	11 f4       	brne	.+4      	; 0x5704 <__addsf3+0x1a>
    5700:	1e f4       	brtc	.+6      	; 0x5708 <__addsf3+0x1e>
    5702:	07 c1       	rjmp	.+526    	; 0x5912 <__fp_nan>
    5704:	0e f4       	brtc	.+2      	; 0x5708 <__addsf3+0x1e>
    5706:	e0 95       	com	r30
    5708:	e7 fb       	bst	r30, 7
    570a:	fd c0       	rjmp	.+506    	; 0x5906 <__fp_inf>

0000570c <__addsf3x>:
    570c:	e9 2f       	mov	r30, r25
    570e:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__fp_split3>
    5712:	78 f3       	brcs	.-34     	; 0x56f2 <__addsf3+0x8>
    5714:	ba 17       	cp	r27, r26
    5716:	62 07       	cpc	r22, r18
    5718:	73 07       	cpc	r23, r19
    571a:	84 07       	cpc	r24, r20
    571c:	95 07       	cpc	r25, r21
    571e:	20 f0       	brcs	.+8      	; 0x5728 <__addsf3x+0x1c>
    5720:	79 f4       	brne	.+30     	; 0x5740 <__addsf3x+0x34>
    5722:	a6 f5       	brtc	.+104    	; 0x578c <__addsf3x+0x80>
    5724:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__fp_zero>
    5728:	0e f4       	brtc	.+2      	; 0x572c <__addsf3x+0x20>
    572a:	e0 95       	com	r30
    572c:	0b 2e       	mov	r0, r27
    572e:	ba 2f       	mov	r27, r26
    5730:	a0 2d       	mov	r26, r0
    5732:	0b 01       	movw	r0, r22
    5734:	b9 01       	movw	r22, r18
    5736:	90 01       	movw	r18, r0
    5738:	0c 01       	movw	r0, r24
    573a:	ca 01       	movw	r24, r20
    573c:	a0 01       	movw	r20, r0
    573e:	11 24       	eor	r1, r1
    5740:	ff 27       	eor	r31, r31
    5742:	59 1b       	sub	r21, r25
    5744:	99 f0       	breq	.+38     	; 0x576c <__addsf3x+0x60>
    5746:	59 3f       	cpi	r21, 0xF9	; 249
    5748:	50 f4       	brcc	.+20     	; 0x575e <__addsf3x+0x52>
    574a:	50 3e       	cpi	r21, 0xE0	; 224
    574c:	68 f1       	brcs	.+90     	; 0x57a8 <__addsf3x+0x9c>
    574e:	1a 16       	cp	r1, r26
    5750:	f0 40       	sbci	r31, 0x00	; 0
    5752:	a2 2f       	mov	r26, r18
    5754:	23 2f       	mov	r18, r19
    5756:	34 2f       	mov	r19, r20
    5758:	44 27       	eor	r20, r20
    575a:	58 5f       	subi	r21, 0xF8	; 248
    575c:	f3 cf       	rjmp	.-26     	; 0x5744 <__addsf3x+0x38>
    575e:	46 95       	lsr	r20
    5760:	37 95       	ror	r19
    5762:	27 95       	ror	r18
    5764:	a7 95       	ror	r26
    5766:	f0 40       	sbci	r31, 0x00	; 0
    5768:	53 95       	inc	r21
    576a:	c9 f7       	brne	.-14     	; 0x575e <__addsf3x+0x52>
    576c:	7e f4       	brtc	.+30     	; 0x578c <__addsf3x+0x80>
    576e:	1f 16       	cp	r1, r31
    5770:	ba 0b       	sbc	r27, r26
    5772:	62 0b       	sbc	r22, r18
    5774:	73 0b       	sbc	r23, r19
    5776:	84 0b       	sbc	r24, r20
    5778:	ba f0       	brmi	.+46     	; 0x57a8 <__addsf3x+0x9c>
    577a:	91 50       	subi	r25, 0x01	; 1
    577c:	a1 f0       	breq	.+40     	; 0x57a6 <__addsf3x+0x9a>
    577e:	ff 0f       	add	r31, r31
    5780:	bb 1f       	adc	r27, r27
    5782:	66 1f       	adc	r22, r22
    5784:	77 1f       	adc	r23, r23
    5786:	88 1f       	adc	r24, r24
    5788:	c2 f7       	brpl	.-16     	; 0x577a <__addsf3x+0x6e>
    578a:	0e c0       	rjmp	.+28     	; 0x57a8 <__addsf3x+0x9c>
    578c:	ba 0f       	add	r27, r26
    578e:	62 1f       	adc	r22, r18
    5790:	73 1f       	adc	r23, r19
    5792:	84 1f       	adc	r24, r20
    5794:	48 f4       	brcc	.+18     	; 0x57a8 <__addsf3x+0x9c>
    5796:	87 95       	ror	r24
    5798:	77 95       	ror	r23
    579a:	67 95       	ror	r22
    579c:	b7 95       	ror	r27
    579e:	f7 95       	ror	r31
    57a0:	9e 3f       	cpi	r25, 0xFE	; 254
    57a2:	08 f0       	brcs	.+2      	; 0x57a6 <__addsf3x+0x9a>
    57a4:	b1 cf       	rjmp	.-158    	; 0x5708 <__addsf3+0x1e>
    57a6:	93 95       	inc	r25
    57a8:	88 0f       	add	r24, r24
    57aa:	08 f0       	brcs	.+2      	; 0x57ae <__addsf3x+0xa2>
    57ac:	99 27       	eor	r25, r25
    57ae:	ee 0f       	add	r30, r30
    57b0:	97 95       	ror	r25
    57b2:	87 95       	ror	r24
    57b4:	08 95       	ret

000057b6 <__divsf3>:
    57b6:	0d d0       	rcall	.+26     	; 0x57d2 <__divsf3x>
    57b8:	bd c0       	rjmp	.+378    	; 0x5934 <__fp_round>
    57ba:	b5 d0       	rcall	.+362    	; 0x5926 <__fp_pscB>
    57bc:	48 f0       	brcs	.+18     	; 0x57d0 <__divsf3+0x1a>
    57be:	ac d0       	rcall	.+344    	; 0x5918 <__fp_pscA>
    57c0:	38 f0       	brcs	.+14     	; 0x57d0 <__divsf3+0x1a>
    57c2:	21 f4       	brne	.+8      	; 0x57cc <__divsf3+0x16>
    57c4:	5f 3f       	cpi	r21, 0xFF	; 255
    57c6:	21 f0       	breq	.+8      	; 0x57d0 <__divsf3+0x1a>
    57c8:	9e c0       	rjmp	.+316    	; 0x5906 <__fp_inf>
    57ca:	51 11       	cpse	r21, r1
    57cc:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__fp_szero>
    57d0:	a0 c0       	rjmp	.+320    	; 0x5912 <__fp_nan>

000057d2 <__divsf3x>:
    57d2:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__fp_split3>
    57d6:	88 f3       	brcs	.-30     	; 0x57ba <__divsf3+0x4>

000057d8 <__divsf3_pse>:
    57d8:	99 23       	and	r25, r25
    57da:	b9 f3       	breq	.-18     	; 0x57ca <__divsf3+0x14>
    57dc:	55 23       	and	r21, r21
    57de:	a1 f3       	breq	.-24     	; 0x57c8 <__divsf3+0x12>
    57e0:	95 1b       	sub	r25, r21
    57e2:	55 0b       	sbc	r21, r21
    57e4:	bb 27       	eor	r27, r27
    57e6:	aa 27       	eor	r26, r26
    57e8:	62 17       	cp	r22, r18
    57ea:	73 07       	cpc	r23, r19
    57ec:	84 07       	cpc	r24, r20
    57ee:	38 f0       	brcs	.+14     	; 0x57fe <__divsf3_pse+0x26>
    57f0:	9f 5f       	subi	r25, 0xFF	; 255
    57f2:	5f 4f       	sbci	r21, 0xFF	; 255
    57f4:	22 0f       	add	r18, r18
    57f6:	33 1f       	adc	r19, r19
    57f8:	44 1f       	adc	r20, r20
    57fa:	aa 1f       	adc	r26, r26
    57fc:	a9 f3       	breq	.-22     	; 0x57e8 <__divsf3_pse+0x10>
    57fe:	34 d0       	rcall	.+104    	; 0x5868 <__divsf3_pse+0x90>
    5800:	0e 2e       	mov	r0, r30
    5802:	3a f0       	brmi	.+14     	; 0x5812 <__divsf3_pse+0x3a>
    5804:	e0 e8       	ldi	r30, 0x80	; 128
    5806:	31 d0       	rcall	.+98     	; 0x586a <__divsf3_pse+0x92>
    5808:	91 50       	subi	r25, 0x01	; 1
    580a:	50 40       	sbci	r21, 0x00	; 0
    580c:	e6 95       	lsr	r30
    580e:	00 1c       	adc	r0, r0
    5810:	ca f7       	brpl	.-14     	; 0x5804 <__divsf3_pse+0x2c>
    5812:	2a d0       	rcall	.+84     	; 0x5868 <__divsf3_pse+0x90>
    5814:	fe 2f       	mov	r31, r30
    5816:	28 d0       	rcall	.+80     	; 0x5868 <__divsf3_pse+0x90>
    5818:	66 0f       	add	r22, r22
    581a:	77 1f       	adc	r23, r23
    581c:	88 1f       	adc	r24, r24
    581e:	bb 1f       	adc	r27, r27
    5820:	26 17       	cp	r18, r22
    5822:	37 07       	cpc	r19, r23
    5824:	48 07       	cpc	r20, r24
    5826:	ab 07       	cpc	r26, r27
    5828:	b0 e8       	ldi	r27, 0x80	; 128
    582a:	09 f0       	breq	.+2      	; 0x582e <__divsf3_pse+0x56>
    582c:	bb 0b       	sbc	r27, r27
    582e:	80 2d       	mov	r24, r0
    5830:	bf 01       	movw	r22, r30
    5832:	ff 27       	eor	r31, r31
    5834:	93 58       	subi	r25, 0x83	; 131
    5836:	5f 4f       	sbci	r21, 0xFF	; 255
    5838:	32 f0       	brmi	.+12     	; 0x5846 <__divsf3_pse+0x6e>
    583a:	9e 3f       	cpi	r25, 0xFE	; 254
    583c:	51 05       	cpc	r21, r1
    583e:	70 f0       	brcs	.+28     	; 0x585c <__divsf3_pse+0x84>
    5840:	62 c0       	rjmp	.+196    	; 0x5906 <__fp_inf>
    5842:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__fp_szero>
    5846:	5f 3f       	cpi	r21, 0xFF	; 255
    5848:	e4 f3       	brlt	.-8      	; 0x5842 <__divsf3_pse+0x6a>
    584a:	98 3e       	cpi	r25, 0xE8	; 232
    584c:	d4 f3       	brlt	.-12     	; 0x5842 <__divsf3_pse+0x6a>
    584e:	86 95       	lsr	r24
    5850:	77 95       	ror	r23
    5852:	67 95       	ror	r22
    5854:	b7 95       	ror	r27
    5856:	f7 95       	ror	r31
    5858:	9f 5f       	subi	r25, 0xFF	; 255
    585a:	c9 f7       	brne	.-14     	; 0x584e <__divsf3_pse+0x76>
    585c:	88 0f       	add	r24, r24
    585e:	91 1d       	adc	r25, r1
    5860:	96 95       	lsr	r25
    5862:	87 95       	ror	r24
    5864:	97 f9       	bld	r25, 7
    5866:	08 95       	ret
    5868:	e1 e0       	ldi	r30, 0x01	; 1
    586a:	66 0f       	add	r22, r22
    586c:	77 1f       	adc	r23, r23
    586e:	88 1f       	adc	r24, r24
    5870:	bb 1f       	adc	r27, r27
    5872:	62 17       	cp	r22, r18
    5874:	73 07       	cpc	r23, r19
    5876:	84 07       	cpc	r24, r20
    5878:	ba 07       	cpc	r27, r26
    587a:	20 f0       	brcs	.+8      	; 0x5884 <__divsf3_pse+0xac>
    587c:	62 1b       	sub	r22, r18
    587e:	73 0b       	sbc	r23, r19
    5880:	84 0b       	sbc	r24, r20
    5882:	ba 0b       	sbc	r27, r26
    5884:	ee 1f       	adc	r30, r30
    5886:	88 f7       	brcc	.-30     	; 0x586a <__divsf3_pse+0x92>
    5888:	e0 95       	com	r30
    588a:	08 95       	ret

0000588c <__floatunsisf>:
    588c:	e8 94       	clt
    588e:	09 c0       	rjmp	.+18     	; 0x58a2 <__floatsisf+0x12>

00005890 <__floatsisf>:
    5890:	97 fb       	bst	r25, 7
    5892:	3e f4       	brtc	.+14     	; 0x58a2 <__floatsisf+0x12>
    5894:	90 95       	com	r25
    5896:	80 95       	com	r24
    5898:	70 95       	com	r23
    589a:	61 95       	neg	r22
    589c:	7f 4f       	sbci	r23, 0xFF	; 255
    589e:	8f 4f       	sbci	r24, 0xFF	; 255
    58a0:	9f 4f       	sbci	r25, 0xFF	; 255
    58a2:	99 23       	and	r25, r25
    58a4:	a9 f0       	breq	.+42     	; 0x58d0 <__floatsisf+0x40>
    58a6:	f9 2f       	mov	r31, r25
    58a8:	96 e9       	ldi	r25, 0x96	; 150
    58aa:	bb 27       	eor	r27, r27
    58ac:	93 95       	inc	r25
    58ae:	f6 95       	lsr	r31
    58b0:	87 95       	ror	r24
    58b2:	77 95       	ror	r23
    58b4:	67 95       	ror	r22
    58b6:	b7 95       	ror	r27
    58b8:	f1 11       	cpse	r31, r1
    58ba:	f8 cf       	rjmp	.-16     	; 0x58ac <__floatsisf+0x1c>
    58bc:	fa f4       	brpl	.+62     	; 0x58fc <__floatsisf+0x6c>
    58be:	bb 0f       	add	r27, r27
    58c0:	11 f4       	brne	.+4      	; 0x58c6 <__floatsisf+0x36>
    58c2:	60 ff       	sbrs	r22, 0
    58c4:	1b c0       	rjmp	.+54     	; 0x58fc <__floatsisf+0x6c>
    58c6:	6f 5f       	subi	r22, 0xFF	; 255
    58c8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ca:	8f 4f       	sbci	r24, 0xFF	; 255
    58cc:	9f 4f       	sbci	r25, 0xFF	; 255
    58ce:	16 c0       	rjmp	.+44     	; 0x58fc <__floatsisf+0x6c>
    58d0:	88 23       	and	r24, r24
    58d2:	11 f0       	breq	.+4      	; 0x58d8 <__floatsisf+0x48>
    58d4:	96 e9       	ldi	r25, 0x96	; 150
    58d6:	11 c0       	rjmp	.+34     	; 0x58fa <__floatsisf+0x6a>
    58d8:	77 23       	and	r23, r23
    58da:	21 f0       	breq	.+8      	; 0x58e4 <__floatsisf+0x54>
    58dc:	9e e8       	ldi	r25, 0x8E	; 142
    58de:	87 2f       	mov	r24, r23
    58e0:	76 2f       	mov	r23, r22
    58e2:	05 c0       	rjmp	.+10     	; 0x58ee <__floatsisf+0x5e>
    58e4:	66 23       	and	r22, r22
    58e6:	71 f0       	breq	.+28     	; 0x5904 <__floatsisf+0x74>
    58e8:	96 e8       	ldi	r25, 0x86	; 134
    58ea:	86 2f       	mov	r24, r22
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	60 e0       	ldi	r22, 0x00	; 0
    58f0:	2a f0       	brmi	.+10     	; 0x58fc <__floatsisf+0x6c>
    58f2:	9a 95       	dec	r25
    58f4:	66 0f       	add	r22, r22
    58f6:	77 1f       	adc	r23, r23
    58f8:	88 1f       	adc	r24, r24
    58fa:	da f7       	brpl	.-10     	; 0x58f2 <__floatsisf+0x62>
    58fc:	88 0f       	add	r24, r24
    58fe:	96 95       	lsr	r25
    5900:	87 95       	ror	r24
    5902:	97 f9       	bld	r25, 7
    5904:	08 95       	ret

00005906 <__fp_inf>:
    5906:	97 f9       	bld	r25, 7
    5908:	9f 67       	ori	r25, 0x7F	; 127
    590a:	80 e8       	ldi	r24, 0x80	; 128
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	60 e0       	ldi	r22, 0x00	; 0
    5910:	08 95       	ret

00005912 <__fp_nan>:
    5912:	9f ef       	ldi	r25, 0xFF	; 255
    5914:	80 ec       	ldi	r24, 0xC0	; 192
    5916:	08 95       	ret

00005918 <__fp_pscA>:
    5918:	00 24       	eor	r0, r0
    591a:	0a 94       	dec	r0
    591c:	16 16       	cp	r1, r22
    591e:	17 06       	cpc	r1, r23
    5920:	18 06       	cpc	r1, r24
    5922:	09 06       	cpc	r0, r25
    5924:	08 95       	ret

00005926 <__fp_pscB>:
    5926:	00 24       	eor	r0, r0
    5928:	0a 94       	dec	r0
    592a:	12 16       	cp	r1, r18
    592c:	13 06       	cpc	r1, r19
    592e:	14 06       	cpc	r1, r20
    5930:	05 06       	cpc	r0, r21
    5932:	08 95       	ret

00005934 <__fp_round>:
    5934:	09 2e       	mov	r0, r25
    5936:	03 94       	inc	r0
    5938:	00 0c       	add	r0, r0
    593a:	11 f4       	brne	.+4      	; 0x5940 <__fp_round+0xc>
    593c:	88 23       	and	r24, r24
    593e:	52 f0       	brmi	.+20     	; 0x5954 <__fp_round+0x20>
    5940:	bb 0f       	add	r27, r27
    5942:	40 f4       	brcc	.+16     	; 0x5954 <__fp_round+0x20>
    5944:	bf 2b       	or	r27, r31
    5946:	11 f4       	brne	.+4      	; 0x594c <__fp_round+0x18>
    5948:	60 ff       	sbrs	r22, 0
    594a:	04 c0       	rjmp	.+8      	; 0x5954 <__fp_round+0x20>
    594c:	6f 5f       	subi	r22, 0xFF	; 255
    594e:	7f 4f       	sbci	r23, 0xFF	; 255
    5950:	8f 4f       	sbci	r24, 0xFF	; 255
    5952:	9f 4f       	sbci	r25, 0xFF	; 255
    5954:	08 95       	ret

00005956 <__mulsf3>:
    5956:	0c d0       	rcall	.+24     	; 0x5970 <__mulsf3x>
    5958:	ed cf       	rjmp	.-38     	; 0x5934 <__fp_round>
    595a:	de df       	rcall	.-68     	; 0x5918 <__fp_pscA>
    595c:	28 f0       	brcs	.+10     	; 0x5968 <__mulsf3+0x12>
    595e:	e3 df       	rcall	.-58     	; 0x5926 <__fp_pscB>
    5960:	18 f0       	brcs	.+6      	; 0x5968 <__mulsf3+0x12>
    5962:	95 23       	and	r25, r21
    5964:	09 f0       	breq	.+2      	; 0x5968 <__mulsf3+0x12>
    5966:	cf cf       	rjmp	.-98     	; 0x5906 <__fp_inf>
    5968:	d4 cf       	rjmp	.-88     	; 0x5912 <__fp_nan>
    596a:	11 24       	eor	r1, r1
    596c:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__fp_szero>

00005970 <__mulsf3x>:
    5970:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__fp_split3>
    5974:	90 f3       	brcs	.-28     	; 0x595a <__mulsf3+0x4>

00005976 <__mulsf3_pse>:
    5976:	95 9f       	mul	r25, r21
    5978:	c1 f3       	breq	.-16     	; 0x596a <__mulsf3+0x14>
    597a:	95 0f       	add	r25, r21
    597c:	50 e0       	ldi	r21, 0x00	; 0
    597e:	55 1f       	adc	r21, r21
    5980:	62 9f       	mul	r22, r18
    5982:	f0 01       	movw	r30, r0
    5984:	72 9f       	mul	r23, r18
    5986:	bb 27       	eor	r27, r27
    5988:	f0 0d       	add	r31, r0
    598a:	b1 1d       	adc	r27, r1
    598c:	63 9f       	mul	r22, r19
    598e:	aa 27       	eor	r26, r26
    5990:	f0 0d       	add	r31, r0
    5992:	b1 1d       	adc	r27, r1
    5994:	aa 1f       	adc	r26, r26
    5996:	64 9f       	mul	r22, r20
    5998:	66 27       	eor	r22, r22
    599a:	b0 0d       	add	r27, r0
    599c:	a1 1d       	adc	r26, r1
    599e:	66 1f       	adc	r22, r22
    59a0:	82 9f       	mul	r24, r18
    59a2:	22 27       	eor	r18, r18
    59a4:	b0 0d       	add	r27, r0
    59a6:	a1 1d       	adc	r26, r1
    59a8:	62 1f       	adc	r22, r18
    59aa:	73 9f       	mul	r23, r19
    59ac:	b0 0d       	add	r27, r0
    59ae:	a1 1d       	adc	r26, r1
    59b0:	62 1f       	adc	r22, r18
    59b2:	83 9f       	mul	r24, r19
    59b4:	a0 0d       	add	r26, r0
    59b6:	61 1d       	adc	r22, r1
    59b8:	22 1f       	adc	r18, r18
    59ba:	74 9f       	mul	r23, r20
    59bc:	33 27       	eor	r19, r19
    59be:	a0 0d       	add	r26, r0
    59c0:	61 1d       	adc	r22, r1
    59c2:	23 1f       	adc	r18, r19
    59c4:	84 9f       	mul	r24, r20
    59c6:	60 0d       	add	r22, r0
    59c8:	21 1d       	adc	r18, r1
    59ca:	82 2f       	mov	r24, r18
    59cc:	76 2f       	mov	r23, r22
    59ce:	6a 2f       	mov	r22, r26
    59d0:	11 24       	eor	r1, r1
    59d2:	9f 57       	subi	r25, 0x7F	; 127
    59d4:	50 40       	sbci	r21, 0x00	; 0
    59d6:	92 f0       	brmi	.+36     	; 0x59fc <__mulsf3_pse+0x86>
    59d8:	e9 f0       	breq	.+58     	; 0x5a14 <__mulsf3_pse+0x9e>
    59da:	88 23       	and	r24, r24
    59dc:	4a f0       	brmi	.+18     	; 0x59f0 <__mulsf3_pse+0x7a>
    59de:	ee 0f       	add	r30, r30
    59e0:	ff 1f       	adc	r31, r31
    59e2:	bb 1f       	adc	r27, r27
    59e4:	66 1f       	adc	r22, r22
    59e6:	77 1f       	adc	r23, r23
    59e8:	88 1f       	adc	r24, r24
    59ea:	91 50       	subi	r25, 0x01	; 1
    59ec:	50 40       	sbci	r21, 0x00	; 0
    59ee:	a9 f7       	brne	.-22     	; 0x59da <__mulsf3_pse+0x64>
    59f0:	9e 3f       	cpi	r25, 0xFE	; 254
    59f2:	51 05       	cpc	r21, r1
    59f4:	78 f0       	brcs	.+30     	; 0x5a14 <__mulsf3_pse+0x9e>
    59f6:	87 cf       	rjmp	.-242    	; 0x5906 <__fp_inf>
    59f8:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__fp_szero>
    59fc:	5f 3f       	cpi	r21, 0xFF	; 255
    59fe:	e4 f3       	brlt	.-8      	; 0x59f8 <__mulsf3_pse+0x82>
    5a00:	98 3e       	cpi	r25, 0xE8	; 232
    5a02:	d4 f3       	brlt	.-12     	; 0x59f8 <__mulsf3_pse+0x82>
    5a04:	86 95       	lsr	r24
    5a06:	77 95       	ror	r23
    5a08:	67 95       	ror	r22
    5a0a:	b7 95       	ror	r27
    5a0c:	f7 95       	ror	r31
    5a0e:	e7 95       	ror	r30
    5a10:	9f 5f       	subi	r25, 0xFF	; 255
    5a12:	c1 f7       	brne	.-16     	; 0x5a04 <__mulsf3_pse+0x8e>
    5a14:	fe 2b       	or	r31, r30
    5a16:	88 0f       	add	r24, r24
    5a18:	91 1d       	adc	r25, r1
    5a1a:	96 95       	lsr	r25
    5a1c:	87 95       	ror	r24
    5a1e:	97 f9       	bld	r25, 7
    5a20:	08 95       	ret

00005a22 <__udivmodsi4>:
    5a22:	a1 e2       	ldi	r26, 0x21	; 33
    5a24:	1a 2e       	mov	r1, r26
    5a26:	aa 1b       	sub	r26, r26
    5a28:	bb 1b       	sub	r27, r27
    5a2a:	fd 01       	movw	r30, r26
    5a2c:	0d c0       	rjmp	.+26     	; 0x5a48 <__udivmodsi4_ep>

00005a2e <__udivmodsi4_loop>:
    5a2e:	aa 1f       	adc	r26, r26
    5a30:	bb 1f       	adc	r27, r27
    5a32:	ee 1f       	adc	r30, r30
    5a34:	ff 1f       	adc	r31, r31
    5a36:	a2 17       	cp	r26, r18
    5a38:	b3 07       	cpc	r27, r19
    5a3a:	e4 07       	cpc	r30, r20
    5a3c:	f5 07       	cpc	r31, r21
    5a3e:	20 f0       	brcs	.+8      	; 0x5a48 <__udivmodsi4_ep>
    5a40:	a2 1b       	sub	r26, r18
    5a42:	b3 0b       	sbc	r27, r19
    5a44:	e4 0b       	sbc	r30, r20
    5a46:	f5 0b       	sbc	r31, r21

00005a48 <__udivmodsi4_ep>:
    5a48:	66 1f       	adc	r22, r22
    5a4a:	77 1f       	adc	r23, r23
    5a4c:	88 1f       	adc	r24, r24
    5a4e:	99 1f       	adc	r25, r25
    5a50:	1a 94       	dec	r1
    5a52:	69 f7       	brne	.-38     	; 0x5a2e <__udivmodsi4_loop>
    5a54:	60 95       	com	r22
    5a56:	70 95       	com	r23
    5a58:	80 95       	com	r24
    5a5a:	90 95       	com	r25
    5a5c:	9b 01       	movw	r18, r22
    5a5e:	ac 01       	movw	r20, r24
    5a60:	bd 01       	movw	r22, r26
    5a62:	cf 01       	movw	r24, r30
    5a64:	08 95       	ret

00005a66 <__tablejump2__>:
    5a66:	ee 0f       	add	r30, r30
    5a68:	ff 1f       	adc	r31, r31
    5a6a:	88 1f       	adc	r24, r24
    5a6c:	8b bf       	out	0x3b, r24	; 59
    5a6e:	07 90       	elpm	r0, Z+
    5a70:	f6 91       	elpm	r31, Z
    5a72:	e0 2d       	mov	r30, r0
    5a74:	19 94       	eijmp

00005a76 <malloc>:
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
    5a7a:	cf 93       	push	r28
    5a7c:	df 93       	push	r29
    5a7e:	82 30       	cpi	r24, 0x02	; 2
    5a80:	91 05       	cpc	r25, r1
    5a82:	10 f4       	brcc	.+4      	; 0x5a88 <malloc+0x12>
    5a84:	82 e0       	ldi	r24, 0x02	; 2
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	e0 91 07 18 	lds	r30, 0x1807	; 0x801807 <__flp>
    5a8c:	f0 91 08 18 	lds	r31, 0x1808	; 0x801808 <__flp+0x1>
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	a0 e0       	ldi	r26, 0x00	; 0
    5a96:	b0 e0       	ldi	r27, 0x00	; 0
    5a98:	30 97       	sbiw	r30, 0x00	; 0
    5a9a:	19 f1       	breq	.+70     	; 0x5ae2 <malloc+0x6c>
    5a9c:	40 81       	ld	r20, Z
    5a9e:	51 81       	ldd	r21, Z+1	; 0x01
    5aa0:	02 81       	ldd	r16, Z+2	; 0x02
    5aa2:	13 81       	ldd	r17, Z+3	; 0x03
    5aa4:	48 17       	cp	r20, r24
    5aa6:	59 07       	cpc	r21, r25
    5aa8:	c8 f0       	brcs	.+50     	; 0x5adc <malloc+0x66>
    5aaa:	84 17       	cp	r24, r20
    5aac:	95 07       	cpc	r25, r21
    5aae:	69 f4       	brne	.+26     	; 0x5aca <malloc+0x54>
    5ab0:	10 97       	sbiw	r26, 0x00	; 0
    5ab2:	31 f0       	breq	.+12     	; 0x5ac0 <malloc+0x4a>
    5ab4:	12 96       	adiw	r26, 0x02	; 2
    5ab6:	0c 93       	st	X, r16
    5ab8:	12 97       	sbiw	r26, 0x02	; 2
    5aba:	13 96       	adiw	r26, 0x03	; 3
    5abc:	1c 93       	st	X, r17
    5abe:	27 c0       	rjmp	.+78     	; 0x5b0e <malloc+0x98>
    5ac0:	00 93 07 18 	sts	0x1807, r16	; 0x801807 <__flp>
    5ac4:	10 93 08 18 	sts	0x1808, r17	; 0x801808 <__flp+0x1>
    5ac8:	22 c0       	rjmp	.+68     	; 0x5b0e <malloc+0x98>
    5aca:	21 15       	cp	r18, r1
    5acc:	31 05       	cpc	r19, r1
    5ace:	19 f0       	breq	.+6      	; 0x5ad6 <malloc+0x60>
    5ad0:	42 17       	cp	r20, r18
    5ad2:	53 07       	cpc	r21, r19
    5ad4:	18 f4       	brcc	.+6      	; 0x5adc <malloc+0x66>
    5ad6:	9a 01       	movw	r18, r20
    5ad8:	bd 01       	movw	r22, r26
    5ada:	ef 01       	movw	r28, r30
    5adc:	df 01       	movw	r26, r30
    5ade:	f8 01       	movw	r30, r16
    5ae0:	db cf       	rjmp	.-74     	; 0x5a98 <malloc+0x22>
    5ae2:	21 15       	cp	r18, r1
    5ae4:	31 05       	cpc	r19, r1
    5ae6:	f9 f0       	breq	.+62     	; 0x5b26 <malloc+0xb0>
    5ae8:	28 1b       	sub	r18, r24
    5aea:	39 0b       	sbc	r19, r25
    5aec:	24 30       	cpi	r18, 0x04	; 4
    5aee:	31 05       	cpc	r19, r1
    5af0:	80 f4       	brcc	.+32     	; 0x5b12 <malloc+0x9c>
    5af2:	8a 81       	ldd	r24, Y+2	; 0x02
    5af4:	9b 81       	ldd	r25, Y+3	; 0x03
    5af6:	61 15       	cp	r22, r1
    5af8:	71 05       	cpc	r23, r1
    5afa:	21 f0       	breq	.+8      	; 0x5b04 <malloc+0x8e>
    5afc:	fb 01       	movw	r30, r22
    5afe:	93 83       	std	Z+3, r25	; 0x03
    5b00:	82 83       	std	Z+2, r24	; 0x02
    5b02:	04 c0       	rjmp	.+8      	; 0x5b0c <malloc+0x96>
    5b04:	90 93 08 18 	sts	0x1808, r25	; 0x801808 <__flp+0x1>
    5b08:	80 93 07 18 	sts	0x1807, r24	; 0x801807 <__flp>
    5b0c:	fe 01       	movw	r30, r28
    5b0e:	32 96       	adiw	r30, 0x02	; 2
    5b10:	44 c0       	rjmp	.+136    	; 0x5b9a <malloc+0x124>
    5b12:	fe 01       	movw	r30, r28
    5b14:	e2 0f       	add	r30, r18
    5b16:	f3 1f       	adc	r31, r19
    5b18:	81 93       	st	Z+, r24
    5b1a:	91 93       	st	Z+, r25
    5b1c:	22 50       	subi	r18, 0x02	; 2
    5b1e:	31 09       	sbc	r19, r1
    5b20:	39 83       	std	Y+1, r19	; 0x01
    5b22:	28 83       	st	Y, r18
    5b24:	3a c0       	rjmp	.+116    	; 0x5b9a <malloc+0x124>
    5b26:	20 91 05 18 	lds	r18, 0x1805	; 0x801805 <__brkval>
    5b2a:	30 91 06 18 	lds	r19, 0x1806	; 0x801806 <__brkval+0x1>
    5b2e:	23 2b       	or	r18, r19
    5b30:	41 f4       	brne	.+16     	; 0x5b42 <malloc+0xcc>
    5b32:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b36:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5b3a:	30 93 06 18 	sts	0x1806, r19	; 0x801806 <__brkval+0x1>
    5b3e:	20 93 05 18 	sts	0x1805, r18	; 0x801805 <__brkval>
    5b42:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5b46:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5b4a:	21 15       	cp	r18, r1
    5b4c:	31 05       	cpc	r19, r1
    5b4e:	41 f4       	brne	.+16     	; 0x5b60 <malloc+0xea>
    5b50:	2d b7       	in	r18, 0x3d	; 61
    5b52:	3e b7       	in	r19, 0x3e	; 62
    5b54:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b58:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b5c:	24 1b       	sub	r18, r20
    5b5e:	35 0b       	sbc	r19, r21
    5b60:	e0 91 05 18 	lds	r30, 0x1805	; 0x801805 <__brkval>
    5b64:	f0 91 06 18 	lds	r31, 0x1806	; 0x801806 <__brkval+0x1>
    5b68:	e2 17       	cp	r30, r18
    5b6a:	f3 07       	cpc	r31, r19
    5b6c:	a0 f4       	brcc	.+40     	; 0x5b96 <malloc+0x120>
    5b6e:	2e 1b       	sub	r18, r30
    5b70:	3f 0b       	sbc	r19, r31
    5b72:	28 17       	cp	r18, r24
    5b74:	39 07       	cpc	r19, r25
    5b76:	78 f0       	brcs	.+30     	; 0x5b96 <malloc+0x120>
    5b78:	ac 01       	movw	r20, r24
    5b7a:	4e 5f       	subi	r20, 0xFE	; 254
    5b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7e:	24 17       	cp	r18, r20
    5b80:	35 07       	cpc	r19, r21
    5b82:	48 f0       	brcs	.+18     	; 0x5b96 <malloc+0x120>
    5b84:	4e 0f       	add	r20, r30
    5b86:	5f 1f       	adc	r21, r31
    5b88:	50 93 06 18 	sts	0x1806, r21	; 0x801806 <__brkval+0x1>
    5b8c:	40 93 05 18 	sts	0x1805, r20	; 0x801805 <__brkval>
    5b90:	81 93       	st	Z+, r24
    5b92:	91 93       	st	Z+, r25
    5b94:	02 c0       	rjmp	.+4      	; 0x5b9a <malloc+0x124>
    5b96:	e0 e0       	ldi	r30, 0x00	; 0
    5b98:	f0 e0       	ldi	r31, 0x00	; 0
    5b9a:	cf 01       	movw	r24, r30
    5b9c:	df 91       	pop	r29
    5b9e:	cf 91       	pop	r28
    5ba0:	1f 91       	pop	r17
    5ba2:	0f 91       	pop	r16
    5ba4:	08 95       	ret

00005ba6 <free>:
    5ba6:	cf 93       	push	r28
    5ba8:	df 93       	push	r29
    5baa:	00 97       	sbiw	r24, 0x00	; 0
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <free+0xa>
    5bae:	81 c0       	rjmp	.+258    	; 0x5cb2 <free+0x10c>
    5bb0:	fc 01       	movw	r30, r24
    5bb2:	32 97       	sbiw	r30, 0x02	; 2
    5bb4:	13 82       	std	Z+3, r1	; 0x03
    5bb6:	12 82       	std	Z+2, r1	; 0x02
    5bb8:	a0 91 07 18 	lds	r26, 0x1807	; 0x801807 <__flp>
    5bbc:	b0 91 08 18 	lds	r27, 0x1808	; 0x801808 <__flp+0x1>
    5bc0:	10 97       	sbiw	r26, 0x00	; 0
    5bc2:	81 f4       	brne	.+32     	; 0x5be4 <free+0x3e>
    5bc4:	20 81       	ld	r18, Z
    5bc6:	31 81       	ldd	r19, Z+1	; 0x01
    5bc8:	82 0f       	add	r24, r18
    5bca:	93 1f       	adc	r25, r19
    5bcc:	20 91 05 18 	lds	r18, 0x1805	; 0x801805 <__brkval>
    5bd0:	30 91 06 18 	lds	r19, 0x1806	; 0x801806 <__brkval+0x1>
    5bd4:	28 17       	cp	r18, r24
    5bd6:	39 07       	cpc	r19, r25
    5bd8:	51 f5       	brne	.+84     	; 0x5c2e <free+0x88>
    5bda:	f0 93 06 18 	sts	0x1806, r31	; 0x801806 <__brkval+0x1>
    5bde:	e0 93 05 18 	sts	0x1805, r30	; 0x801805 <__brkval>
    5be2:	67 c0       	rjmp	.+206    	; 0x5cb2 <free+0x10c>
    5be4:	ed 01       	movw	r28, r26
    5be6:	20 e0       	ldi	r18, 0x00	; 0
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	ce 17       	cp	r28, r30
    5bec:	df 07       	cpc	r29, r31
    5bee:	40 f4       	brcc	.+16     	; 0x5c00 <free+0x5a>
    5bf0:	4a 81       	ldd	r20, Y+2	; 0x02
    5bf2:	5b 81       	ldd	r21, Y+3	; 0x03
    5bf4:	9e 01       	movw	r18, r28
    5bf6:	41 15       	cp	r20, r1
    5bf8:	51 05       	cpc	r21, r1
    5bfa:	f1 f0       	breq	.+60     	; 0x5c38 <free+0x92>
    5bfc:	ea 01       	movw	r28, r20
    5bfe:	f5 cf       	rjmp	.-22     	; 0x5bea <free+0x44>
    5c00:	d3 83       	std	Z+3, r29	; 0x03
    5c02:	c2 83       	std	Z+2, r28	; 0x02
    5c04:	40 81       	ld	r20, Z
    5c06:	51 81       	ldd	r21, Z+1	; 0x01
    5c08:	84 0f       	add	r24, r20
    5c0a:	95 1f       	adc	r25, r21
    5c0c:	c8 17       	cp	r28, r24
    5c0e:	d9 07       	cpc	r29, r25
    5c10:	59 f4       	brne	.+22     	; 0x5c28 <free+0x82>
    5c12:	88 81       	ld	r24, Y
    5c14:	99 81       	ldd	r25, Y+1	; 0x01
    5c16:	84 0f       	add	r24, r20
    5c18:	95 1f       	adc	r25, r21
    5c1a:	02 96       	adiw	r24, 0x02	; 2
    5c1c:	91 83       	std	Z+1, r25	; 0x01
    5c1e:	80 83       	st	Z, r24
    5c20:	8a 81       	ldd	r24, Y+2	; 0x02
    5c22:	9b 81       	ldd	r25, Y+3	; 0x03
    5c24:	93 83       	std	Z+3, r25	; 0x03
    5c26:	82 83       	std	Z+2, r24	; 0x02
    5c28:	21 15       	cp	r18, r1
    5c2a:	31 05       	cpc	r19, r1
    5c2c:	29 f4       	brne	.+10     	; 0x5c38 <free+0x92>
    5c2e:	f0 93 08 18 	sts	0x1808, r31	; 0x801808 <__flp+0x1>
    5c32:	e0 93 07 18 	sts	0x1807, r30	; 0x801807 <__flp>
    5c36:	3d c0       	rjmp	.+122    	; 0x5cb2 <free+0x10c>
    5c38:	e9 01       	movw	r28, r18
    5c3a:	fb 83       	std	Y+3, r31	; 0x03
    5c3c:	ea 83       	std	Y+2, r30	; 0x02
    5c3e:	49 91       	ld	r20, Y+
    5c40:	59 91       	ld	r21, Y+
    5c42:	c4 0f       	add	r28, r20
    5c44:	d5 1f       	adc	r29, r21
    5c46:	ec 17       	cp	r30, r28
    5c48:	fd 07       	cpc	r31, r29
    5c4a:	61 f4       	brne	.+24     	; 0x5c64 <free+0xbe>
    5c4c:	80 81       	ld	r24, Z
    5c4e:	91 81       	ldd	r25, Z+1	; 0x01
    5c50:	84 0f       	add	r24, r20
    5c52:	95 1f       	adc	r25, r21
    5c54:	02 96       	adiw	r24, 0x02	; 2
    5c56:	e9 01       	movw	r28, r18
    5c58:	99 83       	std	Y+1, r25	; 0x01
    5c5a:	88 83       	st	Y, r24
    5c5c:	82 81       	ldd	r24, Z+2	; 0x02
    5c5e:	93 81       	ldd	r25, Z+3	; 0x03
    5c60:	9b 83       	std	Y+3, r25	; 0x03
    5c62:	8a 83       	std	Y+2, r24	; 0x02
    5c64:	e0 e0       	ldi	r30, 0x00	; 0
    5c66:	f0 e0       	ldi	r31, 0x00	; 0
    5c68:	12 96       	adiw	r26, 0x02	; 2
    5c6a:	8d 91       	ld	r24, X+
    5c6c:	9c 91       	ld	r25, X
    5c6e:	13 97       	sbiw	r26, 0x03	; 3
    5c70:	00 97       	sbiw	r24, 0x00	; 0
    5c72:	19 f0       	breq	.+6      	; 0x5c7a <free+0xd4>
    5c74:	fd 01       	movw	r30, r26
    5c76:	dc 01       	movw	r26, r24
    5c78:	f7 cf       	rjmp	.-18     	; 0x5c68 <free+0xc2>
    5c7a:	8d 91       	ld	r24, X+
    5c7c:	9c 91       	ld	r25, X
    5c7e:	11 97       	sbiw	r26, 0x01	; 1
    5c80:	9d 01       	movw	r18, r26
    5c82:	2e 5f       	subi	r18, 0xFE	; 254
    5c84:	3f 4f       	sbci	r19, 0xFF	; 255
    5c86:	82 0f       	add	r24, r18
    5c88:	93 1f       	adc	r25, r19
    5c8a:	20 91 05 18 	lds	r18, 0x1805	; 0x801805 <__brkval>
    5c8e:	30 91 06 18 	lds	r19, 0x1806	; 0x801806 <__brkval+0x1>
    5c92:	28 17       	cp	r18, r24
    5c94:	39 07       	cpc	r19, r25
    5c96:	69 f4       	brne	.+26     	; 0x5cb2 <free+0x10c>
    5c98:	30 97       	sbiw	r30, 0x00	; 0
    5c9a:	29 f4       	brne	.+10     	; 0x5ca6 <free+0x100>
    5c9c:	10 92 08 18 	sts	0x1808, r1	; 0x801808 <__flp+0x1>
    5ca0:	10 92 07 18 	sts	0x1807, r1	; 0x801807 <__flp>
    5ca4:	02 c0       	rjmp	.+4      	; 0x5caa <free+0x104>
    5ca6:	13 82       	std	Z+3, r1	; 0x03
    5ca8:	12 82       	std	Z+2, r1	; 0x02
    5caa:	b0 93 06 18 	sts	0x1806, r27	; 0x801806 <__brkval+0x1>
    5cae:	a0 93 05 18 	sts	0x1805, r26	; 0x801805 <__brkval>
    5cb2:	df 91       	pop	r29
    5cb4:	cf 91       	pop	r28
    5cb6:	08 95       	ret

00005cb8 <abort>:
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	f8 94       	cli
    5cbe:	7d c3       	rjmp	.+1786   	; 0x63ba <_exit>

00005cc0 <memcpy>:
    5cc0:	fb 01       	movw	r30, r22
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	02 c0       	rjmp	.+4      	; 0x5cca <memcpy+0xa>
    5cc6:	01 90       	ld	r0, Z+
    5cc8:	0d 92       	st	X+, r0
    5cca:	41 50       	subi	r20, 0x01	; 1
    5ccc:	50 40       	sbci	r21, 0x00	; 0
    5cce:	d8 f7       	brcc	.-10     	; 0x5cc6 <memcpy+0x6>
    5cd0:	08 95       	ret

00005cd2 <memset>:
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	01 c0       	rjmp	.+2      	; 0x5cd8 <memset+0x6>
    5cd6:	6d 93       	st	X+, r22
    5cd8:	41 50       	subi	r20, 0x01	; 1
    5cda:	50 40       	sbci	r21, 0x00	; 0
    5cdc:	e0 f7       	brcc	.-8      	; 0x5cd6 <memset+0x4>
    5cde:	08 95       	ret

00005ce0 <strcasestr>:
    5ce0:	fb 01       	movw	r30, r22
    5ce2:	51 91       	ld	r21, Z+
    5ce4:	55 23       	and	r21, r21
    5ce6:	b1 f0       	breq	.+44     	; 0x5d14 <strcasestr+0x34>
    5ce8:	bf 01       	movw	r22, r30
    5cea:	dc 01       	movw	r26, r24
    5cec:	05 2e       	mov	r0, r21
    5cee:	4d 91       	ld	r20, X+
    5cf0:	44 23       	and	r20, r20
    5cf2:	69 f0       	breq	.+26     	; 0x5d0e <strcasestr+0x2e>
    5cf4:	10 d0       	rcall	.+32     	; 0x5d16 <strcasestr+0x36>
    5cf6:	d9 f7       	brne	.-10     	; 0x5cee <strcasestr+0xe>
    5cf8:	cd 01       	movw	r24, r26
    5cfa:	01 90       	ld	r0, Z+
    5cfc:	00 20       	and	r0, r0
    5cfe:	49 f0       	breq	.+18     	; 0x5d12 <strcasestr+0x32>
    5d00:	4d 91       	ld	r20, X+
    5d02:	41 11       	cpse	r20, r1
    5d04:	08 d0       	rcall	.+16     	; 0x5d16 <strcasestr+0x36>
    5d06:	c9 f3       	breq	.-14     	; 0x5cfa <strcasestr+0x1a>
    5d08:	fb 01       	movw	r30, r22
    5d0a:	41 11       	cpse	r20, r1
    5d0c:	ee cf       	rjmp	.-36     	; 0x5cea <strcasestr+0xa>
    5d0e:	81 e0       	ldi	r24, 0x01	; 1
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	01 97       	sbiw	r24, 0x01	; 1
    5d14:	08 95       	ret
    5d16:	40 25       	eor	r20, r0
    5d18:	39 f0       	breq	.+14     	; 0x5d28 <strcasestr+0x48>
    5d1a:	40 32       	cpi	r20, 0x20	; 32
    5d1c:	29 f4       	brne	.+10     	; 0x5d28 <strcasestr+0x48>
    5d1e:	40 29       	or	r20, r0
    5d20:	4b 57       	subi	r20, 0x7B	; 123
    5d22:	46 5e       	subi	r20, 0xE6	; 230
    5d24:	08 f0       	brcs	.+2      	; 0x5d28 <strcasestr+0x48>
    5d26:	18 94       	sez
    5d28:	08 95       	ret

00005d2a <strcat>:
    5d2a:	fb 01       	movw	r30, r22
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	0d 90       	ld	r0, X+
    5d30:	00 20       	and	r0, r0
    5d32:	e9 f7       	brne	.-6      	; 0x5d2e <strcat+0x4>
    5d34:	11 97       	sbiw	r26, 0x01	; 1
    5d36:	01 90       	ld	r0, Z+
    5d38:	0d 92       	st	X+, r0
    5d3a:	00 20       	and	r0, r0
    5d3c:	e1 f7       	brne	.-8      	; 0x5d36 <strcat+0xc>
    5d3e:	08 95       	ret

00005d40 <strcpy>:
    5d40:	fb 01       	movw	r30, r22
    5d42:	dc 01       	movw	r26, r24
    5d44:	01 90       	ld	r0, Z+
    5d46:	0d 92       	st	X+, r0
    5d48:	00 20       	and	r0, r0
    5d4a:	e1 f7       	brne	.-8      	; 0x5d44 <strcpy+0x4>
    5d4c:	08 95       	ret

00005d4e <strncasecmp>:
    5d4e:	fb 01       	movw	r30, r22
    5d50:	dc 01       	movw	r26, r24
    5d52:	41 50       	subi	r20, 0x01	; 1
    5d54:	50 40       	sbci	r21, 0x00	; 0
    5d56:	88 f0       	brcs	.+34     	; 0x5d7a <strncasecmp+0x2c>
    5d58:	8d 91       	ld	r24, X+
    5d5a:	81 34       	cpi	r24, 0x41	; 65
    5d5c:	1c f0       	brlt	.+6      	; 0x5d64 <strncasecmp+0x16>
    5d5e:	8b 35       	cpi	r24, 0x5B	; 91
    5d60:	0c f4       	brge	.+2      	; 0x5d64 <strncasecmp+0x16>
    5d62:	80 5e       	subi	r24, 0xE0	; 224
    5d64:	61 91       	ld	r22, Z+
    5d66:	61 34       	cpi	r22, 0x41	; 65
    5d68:	1c f0       	brlt	.+6      	; 0x5d70 <strncasecmp+0x22>
    5d6a:	6b 35       	cpi	r22, 0x5B	; 91
    5d6c:	0c f4       	brge	.+2      	; 0x5d70 <strncasecmp+0x22>
    5d6e:	60 5e       	subi	r22, 0xE0	; 224
    5d70:	86 1b       	sub	r24, r22
    5d72:	61 11       	cpse	r22, r1
    5d74:	71 f3       	breq	.-36     	; 0x5d52 <strncasecmp+0x4>
    5d76:	99 0b       	sbc	r25, r25
    5d78:	08 95       	ret
    5d7a:	88 1b       	sub	r24, r24
    5d7c:	fc cf       	rjmp	.-8      	; 0x5d76 <strncasecmp+0x28>

00005d7e <printf>:
    5d7e:	cf 93       	push	r28
    5d80:	df 93       	push	r29
    5d82:	cd b7       	in	r28, 0x3d	; 61
    5d84:	de b7       	in	r29, 0x3e	; 62
    5d86:	ae 01       	movw	r20, r28
    5d88:	4a 5f       	subi	r20, 0xFA	; 250
    5d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d8c:	fa 01       	movw	r30, r20
    5d8e:	61 91       	ld	r22, Z+
    5d90:	71 91       	ld	r23, Z+
    5d92:	af 01       	movw	r20, r30
    5d94:	80 91 0b 18 	lds	r24, 0x180B	; 0x80180b <__iob+0x2>
    5d98:	90 91 0c 18 	lds	r25, 0x180C	; 0x80180c <__iob+0x3>
    5d9c:	61 d0       	rcall	.+194    	; 0x5e60 <vfprintf>
    5d9e:	df 91       	pop	r29
    5da0:	cf 91       	pop	r28
    5da2:	08 95       	ret

00005da4 <puts>:
    5da4:	0f 93       	push	r16
    5da6:	1f 93       	push	r17
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	e0 91 0b 18 	lds	r30, 0x180B	; 0x80180b <__iob+0x2>
    5db0:	f0 91 0c 18 	lds	r31, 0x180C	; 0x80180c <__iob+0x3>
    5db4:	23 81       	ldd	r18, Z+3	; 0x03
    5db6:	21 ff       	sbrs	r18, 1
    5db8:	1b c0       	rjmp	.+54     	; 0x5df0 <puts+0x4c>
    5dba:	8c 01       	movw	r16, r24
    5dbc:	d0 e0       	ldi	r29, 0x00	; 0
    5dbe:	c0 e0       	ldi	r28, 0x00	; 0
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	81 91       	ld	r24, Z+
    5dc4:	8f 01       	movw	r16, r30
    5dc6:	60 91 0b 18 	lds	r22, 0x180B	; 0x80180b <__iob+0x2>
    5dca:	70 91 0c 18 	lds	r23, 0x180C	; 0x80180c <__iob+0x3>
    5dce:	db 01       	movw	r26, r22
    5dd0:	18 96       	adiw	r26, 0x08	; 8
    5dd2:	ed 91       	ld	r30, X+
    5dd4:	fc 91       	ld	r31, X
    5dd6:	19 97       	sbiw	r26, 0x09	; 9
    5dd8:	88 23       	and	r24, r24
    5dda:	31 f0       	breq	.+12     	; 0x5de8 <puts+0x44>
    5ddc:	19 95       	eicall
    5dde:	89 2b       	or	r24, r25
    5de0:	79 f3       	breq	.-34     	; 0x5dc0 <puts+0x1c>
    5de2:	df ef       	ldi	r29, 0xFF	; 255
    5de4:	cf ef       	ldi	r28, 0xFF	; 255
    5de6:	ec cf       	rjmp	.-40     	; 0x5dc0 <puts+0x1c>
    5de8:	8a e0       	ldi	r24, 0x0A	; 10
    5dea:	19 95       	eicall
    5dec:	89 2b       	or	r24, r25
    5dee:	19 f0       	breq	.+6      	; 0x5df6 <puts+0x52>
    5df0:	8f ef       	ldi	r24, 0xFF	; 255
    5df2:	9f ef       	ldi	r25, 0xFF	; 255
    5df4:	02 c0       	rjmp	.+4      	; 0x5dfa <puts+0x56>
    5df6:	8d 2f       	mov	r24, r29
    5df8:	9c 2f       	mov	r25, r28
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	1f 91       	pop	r17
    5e00:	0f 91       	pop	r16
    5e02:	08 95       	ret

00005e04 <sprintf>:
    5e04:	0f 93       	push	r16
    5e06:	1f 93       	push	r17
    5e08:	cf 93       	push	r28
    5e0a:	df 93       	push	r29
    5e0c:	cd b7       	in	r28, 0x3d	; 61
    5e0e:	de b7       	in	r29, 0x3e	; 62
    5e10:	2e 97       	sbiw	r28, 0x0e	; 14
    5e12:	0f b6       	in	r0, 0x3f	; 63
    5e14:	f8 94       	cli
    5e16:	de bf       	out	0x3e, r29	; 62
    5e18:	0f be       	out	0x3f, r0	; 63
    5e1a:	cd bf       	out	0x3d, r28	; 61
    5e1c:	0e 89       	ldd	r16, Y+22	; 0x16
    5e1e:	1f 89       	ldd	r17, Y+23	; 0x17
    5e20:	86 e0       	ldi	r24, 0x06	; 6
    5e22:	8c 83       	std	Y+4, r24	; 0x04
    5e24:	1a 83       	std	Y+2, r17	; 0x02
    5e26:	09 83       	std	Y+1, r16	; 0x01
    5e28:	8f ef       	ldi	r24, 0xFF	; 255
    5e2a:	9f e7       	ldi	r25, 0x7F	; 127
    5e2c:	9e 83       	std	Y+6, r25	; 0x06
    5e2e:	8d 83       	std	Y+5, r24	; 0x05
    5e30:	ae 01       	movw	r20, r28
    5e32:	46 5e       	subi	r20, 0xE6	; 230
    5e34:	5f 4f       	sbci	r21, 0xFF	; 255
    5e36:	68 8d       	ldd	r22, Y+24	; 0x18
    5e38:	79 8d       	ldd	r23, Y+25	; 0x19
    5e3a:	ce 01       	movw	r24, r28
    5e3c:	01 96       	adiw	r24, 0x01	; 1
    5e3e:	10 d0       	rcall	.+32     	; 0x5e60 <vfprintf>
    5e40:	ef 81       	ldd	r30, Y+7	; 0x07
    5e42:	f8 85       	ldd	r31, Y+8	; 0x08
    5e44:	e0 0f       	add	r30, r16
    5e46:	f1 1f       	adc	r31, r17
    5e48:	10 82       	st	Z, r1
    5e4a:	2e 96       	adiw	r28, 0x0e	; 14
    5e4c:	0f b6       	in	r0, 0x3f	; 63
    5e4e:	f8 94       	cli
    5e50:	de bf       	out	0x3e, r29	; 62
    5e52:	0f be       	out	0x3f, r0	; 63
    5e54:	cd bf       	out	0x3d, r28	; 61
    5e56:	df 91       	pop	r29
    5e58:	cf 91       	pop	r28
    5e5a:	1f 91       	pop	r17
    5e5c:	0f 91       	pop	r16
    5e5e:	08 95       	ret

00005e60 <vfprintf>:
    5e60:	2f 92       	push	r2
    5e62:	3f 92       	push	r3
    5e64:	4f 92       	push	r4
    5e66:	5f 92       	push	r5
    5e68:	6f 92       	push	r6
    5e6a:	7f 92       	push	r7
    5e6c:	8f 92       	push	r8
    5e6e:	9f 92       	push	r9
    5e70:	af 92       	push	r10
    5e72:	bf 92       	push	r11
    5e74:	cf 92       	push	r12
    5e76:	df 92       	push	r13
    5e78:	ef 92       	push	r14
    5e7a:	ff 92       	push	r15
    5e7c:	0f 93       	push	r16
    5e7e:	1f 93       	push	r17
    5e80:	cf 93       	push	r28
    5e82:	df 93       	push	r29
    5e84:	cd b7       	in	r28, 0x3d	; 61
    5e86:	de b7       	in	r29, 0x3e	; 62
    5e88:	2b 97       	sbiw	r28, 0x0b	; 11
    5e8a:	0f b6       	in	r0, 0x3f	; 63
    5e8c:	f8 94       	cli
    5e8e:	de bf       	out	0x3e, r29	; 62
    5e90:	0f be       	out	0x3f, r0	; 63
    5e92:	cd bf       	out	0x3d, r28	; 61
    5e94:	6c 01       	movw	r12, r24
    5e96:	7b 01       	movw	r14, r22
    5e98:	8a 01       	movw	r16, r20
    5e9a:	fc 01       	movw	r30, r24
    5e9c:	17 82       	std	Z+7, r1	; 0x07
    5e9e:	16 82       	std	Z+6, r1	; 0x06
    5ea0:	83 81       	ldd	r24, Z+3	; 0x03
    5ea2:	81 ff       	sbrs	r24, 1
    5ea4:	bf c1       	rjmp	.+894    	; 0x6224 <vfprintf+0x3c4>
    5ea6:	ce 01       	movw	r24, r28
    5ea8:	01 96       	adiw	r24, 0x01	; 1
    5eaa:	3c 01       	movw	r6, r24
    5eac:	f6 01       	movw	r30, r12
    5eae:	93 81       	ldd	r25, Z+3	; 0x03
    5eb0:	f7 01       	movw	r30, r14
    5eb2:	93 fd       	sbrc	r25, 3
    5eb4:	85 91       	lpm	r24, Z+
    5eb6:	93 ff       	sbrs	r25, 3
    5eb8:	81 91       	ld	r24, Z+
    5eba:	7f 01       	movw	r14, r30
    5ebc:	88 23       	and	r24, r24
    5ebe:	09 f4       	brne	.+2      	; 0x5ec2 <vfprintf+0x62>
    5ec0:	ad c1       	rjmp	.+858    	; 0x621c <vfprintf+0x3bc>
    5ec2:	85 32       	cpi	r24, 0x25	; 37
    5ec4:	39 f4       	brne	.+14     	; 0x5ed4 <vfprintf+0x74>
    5ec6:	93 fd       	sbrc	r25, 3
    5ec8:	85 91       	lpm	r24, Z+
    5eca:	93 ff       	sbrs	r25, 3
    5ecc:	81 91       	ld	r24, Z+
    5ece:	7f 01       	movw	r14, r30
    5ed0:	85 32       	cpi	r24, 0x25	; 37
    5ed2:	21 f4       	brne	.+8      	; 0x5edc <vfprintf+0x7c>
    5ed4:	b6 01       	movw	r22, r12
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	d6 d1       	rcall	.+940    	; 0x6286 <fputc>
    5eda:	e8 cf       	rjmp	.-48     	; 0x5eac <vfprintf+0x4c>
    5edc:	91 2c       	mov	r9, r1
    5ede:	21 2c       	mov	r2, r1
    5ee0:	31 2c       	mov	r3, r1
    5ee2:	ff e1       	ldi	r31, 0x1F	; 31
    5ee4:	f3 15       	cp	r31, r3
    5ee6:	d8 f0       	brcs	.+54     	; 0x5f1e <vfprintf+0xbe>
    5ee8:	8b 32       	cpi	r24, 0x2B	; 43
    5eea:	79 f0       	breq	.+30     	; 0x5f0a <vfprintf+0xaa>
    5eec:	38 f4       	brcc	.+14     	; 0x5efc <vfprintf+0x9c>
    5eee:	80 32       	cpi	r24, 0x20	; 32
    5ef0:	79 f0       	breq	.+30     	; 0x5f10 <vfprintf+0xb0>
    5ef2:	83 32       	cpi	r24, 0x23	; 35
    5ef4:	a1 f4       	brne	.+40     	; 0x5f1e <vfprintf+0xbe>
    5ef6:	23 2d       	mov	r18, r3
    5ef8:	20 61       	ori	r18, 0x10	; 16
    5efa:	1d c0       	rjmp	.+58     	; 0x5f36 <vfprintf+0xd6>
    5efc:	8d 32       	cpi	r24, 0x2D	; 45
    5efe:	61 f0       	breq	.+24     	; 0x5f18 <vfprintf+0xb8>
    5f00:	80 33       	cpi	r24, 0x30	; 48
    5f02:	69 f4       	brne	.+26     	; 0x5f1e <vfprintf+0xbe>
    5f04:	23 2d       	mov	r18, r3
    5f06:	21 60       	ori	r18, 0x01	; 1
    5f08:	16 c0       	rjmp	.+44     	; 0x5f36 <vfprintf+0xd6>
    5f0a:	83 2d       	mov	r24, r3
    5f0c:	82 60       	ori	r24, 0x02	; 2
    5f0e:	38 2e       	mov	r3, r24
    5f10:	e3 2d       	mov	r30, r3
    5f12:	e4 60       	ori	r30, 0x04	; 4
    5f14:	3e 2e       	mov	r3, r30
    5f16:	2a c0       	rjmp	.+84     	; 0x5f6c <vfprintf+0x10c>
    5f18:	f3 2d       	mov	r31, r3
    5f1a:	f8 60       	ori	r31, 0x08	; 8
    5f1c:	1d c0       	rjmp	.+58     	; 0x5f58 <vfprintf+0xf8>
    5f1e:	37 fc       	sbrc	r3, 7
    5f20:	2d c0       	rjmp	.+90     	; 0x5f7c <vfprintf+0x11c>
    5f22:	20 ed       	ldi	r18, 0xD0	; 208
    5f24:	28 0f       	add	r18, r24
    5f26:	2a 30       	cpi	r18, 0x0A	; 10
    5f28:	40 f0       	brcs	.+16     	; 0x5f3a <vfprintf+0xda>
    5f2a:	8e 32       	cpi	r24, 0x2E	; 46
    5f2c:	b9 f4       	brne	.+46     	; 0x5f5c <vfprintf+0xfc>
    5f2e:	36 fc       	sbrc	r3, 6
    5f30:	75 c1       	rjmp	.+746    	; 0x621c <vfprintf+0x3bc>
    5f32:	23 2d       	mov	r18, r3
    5f34:	20 64       	ori	r18, 0x40	; 64
    5f36:	32 2e       	mov	r3, r18
    5f38:	19 c0       	rjmp	.+50     	; 0x5f6c <vfprintf+0x10c>
    5f3a:	36 fe       	sbrs	r3, 6
    5f3c:	06 c0       	rjmp	.+12     	; 0x5f4a <vfprintf+0xea>
    5f3e:	8a e0       	ldi	r24, 0x0A	; 10
    5f40:	98 9e       	mul	r9, r24
    5f42:	20 0d       	add	r18, r0
    5f44:	11 24       	eor	r1, r1
    5f46:	92 2e       	mov	r9, r18
    5f48:	11 c0       	rjmp	.+34     	; 0x5f6c <vfprintf+0x10c>
    5f4a:	ea e0       	ldi	r30, 0x0A	; 10
    5f4c:	2e 9e       	mul	r2, r30
    5f4e:	20 0d       	add	r18, r0
    5f50:	11 24       	eor	r1, r1
    5f52:	22 2e       	mov	r2, r18
    5f54:	f3 2d       	mov	r31, r3
    5f56:	f0 62       	ori	r31, 0x20	; 32
    5f58:	3f 2e       	mov	r3, r31
    5f5a:	08 c0       	rjmp	.+16     	; 0x5f6c <vfprintf+0x10c>
    5f5c:	8c 36       	cpi	r24, 0x6C	; 108
    5f5e:	21 f4       	brne	.+8      	; 0x5f68 <vfprintf+0x108>
    5f60:	83 2d       	mov	r24, r3
    5f62:	80 68       	ori	r24, 0x80	; 128
    5f64:	38 2e       	mov	r3, r24
    5f66:	02 c0       	rjmp	.+4      	; 0x5f6c <vfprintf+0x10c>
    5f68:	88 36       	cpi	r24, 0x68	; 104
    5f6a:	41 f4       	brne	.+16     	; 0x5f7c <vfprintf+0x11c>
    5f6c:	f7 01       	movw	r30, r14
    5f6e:	93 fd       	sbrc	r25, 3
    5f70:	85 91       	lpm	r24, Z+
    5f72:	93 ff       	sbrs	r25, 3
    5f74:	81 91       	ld	r24, Z+
    5f76:	7f 01       	movw	r14, r30
    5f78:	81 11       	cpse	r24, r1
    5f7a:	b3 cf       	rjmp	.-154    	; 0x5ee2 <vfprintf+0x82>
    5f7c:	98 2f       	mov	r25, r24
    5f7e:	9f 7d       	andi	r25, 0xDF	; 223
    5f80:	95 54       	subi	r25, 0x45	; 69
    5f82:	93 30       	cpi	r25, 0x03	; 3
    5f84:	28 f4       	brcc	.+10     	; 0x5f90 <vfprintf+0x130>
    5f86:	0c 5f       	subi	r16, 0xFC	; 252
    5f88:	1f 4f       	sbci	r17, 0xFF	; 255
    5f8a:	9f e3       	ldi	r25, 0x3F	; 63
    5f8c:	99 83       	std	Y+1, r25	; 0x01
    5f8e:	0d c0       	rjmp	.+26     	; 0x5faa <vfprintf+0x14a>
    5f90:	83 36       	cpi	r24, 0x63	; 99
    5f92:	31 f0       	breq	.+12     	; 0x5fa0 <vfprintf+0x140>
    5f94:	83 37       	cpi	r24, 0x73	; 115
    5f96:	71 f0       	breq	.+28     	; 0x5fb4 <vfprintf+0x154>
    5f98:	83 35       	cpi	r24, 0x53	; 83
    5f9a:	09 f0       	breq	.+2      	; 0x5f9e <vfprintf+0x13e>
    5f9c:	55 c0       	rjmp	.+170    	; 0x6048 <vfprintf+0x1e8>
    5f9e:	20 c0       	rjmp	.+64     	; 0x5fe0 <vfprintf+0x180>
    5fa0:	f8 01       	movw	r30, r16
    5fa2:	80 81       	ld	r24, Z
    5fa4:	89 83       	std	Y+1, r24	; 0x01
    5fa6:	0e 5f       	subi	r16, 0xFE	; 254
    5fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    5faa:	88 24       	eor	r8, r8
    5fac:	83 94       	inc	r8
    5fae:	91 2c       	mov	r9, r1
    5fb0:	53 01       	movw	r10, r6
    5fb2:	12 c0       	rjmp	.+36     	; 0x5fd8 <vfprintf+0x178>
    5fb4:	28 01       	movw	r4, r16
    5fb6:	f2 e0       	ldi	r31, 0x02	; 2
    5fb8:	4f 0e       	add	r4, r31
    5fba:	51 1c       	adc	r5, r1
    5fbc:	f8 01       	movw	r30, r16
    5fbe:	a0 80       	ld	r10, Z
    5fc0:	b1 80       	ldd	r11, Z+1	; 0x01
    5fc2:	36 fe       	sbrs	r3, 6
    5fc4:	03 c0       	rjmp	.+6      	; 0x5fcc <vfprintf+0x16c>
    5fc6:	69 2d       	mov	r22, r9
    5fc8:	70 e0       	ldi	r23, 0x00	; 0
    5fca:	02 c0       	rjmp	.+4      	; 0x5fd0 <vfprintf+0x170>
    5fcc:	6f ef       	ldi	r22, 0xFF	; 255
    5fce:	7f ef       	ldi	r23, 0xFF	; 255
    5fd0:	c5 01       	movw	r24, r10
    5fd2:	4e d1       	rcall	.+668    	; 0x6270 <strnlen>
    5fd4:	4c 01       	movw	r8, r24
    5fd6:	82 01       	movw	r16, r4
    5fd8:	f3 2d       	mov	r31, r3
    5fda:	ff 77       	andi	r31, 0x7F	; 127
    5fdc:	3f 2e       	mov	r3, r31
    5fde:	15 c0       	rjmp	.+42     	; 0x600a <vfprintf+0x1aa>
    5fe0:	28 01       	movw	r4, r16
    5fe2:	22 e0       	ldi	r18, 0x02	; 2
    5fe4:	42 0e       	add	r4, r18
    5fe6:	51 1c       	adc	r5, r1
    5fe8:	f8 01       	movw	r30, r16
    5fea:	a0 80       	ld	r10, Z
    5fec:	b1 80       	ldd	r11, Z+1	; 0x01
    5fee:	36 fe       	sbrs	r3, 6
    5ff0:	03 c0       	rjmp	.+6      	; 0x5ff8 <vfprintf+0x198>
    5ff2:	69 2d       	mov	r22, r9
    5ff4:	70 e0       	ldi	r23, 0x00	; 0
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <vfprintf+0x19c>
    5ff8:	6f ef       	ldi	r22, 0xFF	; 255
    5ffa:	7f ef       	ldi	r23, 0xFF	; 255
    5ffc:	c5 01       	movw	r24, r10
    5ffe:	2d d1       	rcall	.+602    	; 0x625a <strnlen_P>
    6000:	4c 01       	movw	r8, r24
    6002:	f3 2d       	mov	r31, r3
    6004:	f0 68       	ori	r31, 0x80	; 128
    6006:	3f 2e       	mov	r3, r31
    6008:	82 01       	movw	r16, r4
    600a:	33 fc       	sbrc	r3, 3
    600c:	19 c0       	rjmp	.+50     	; 0x6040 <vfprintf+0x1e0>
    600e:	82 2d       	mov	r24, r2
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	88 16       	cp	r8, r24
    6014:	99 06       	cpc	r9, r25
    6016:	a0 f4       	brcc	.+40     	; 0x6040 <vfprintf+0x1e0>
    6018:	b6 01       	movw	r22, r12
    601a:	80 e2       	ldi	r24, 0x20	; 32
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	33 d1       	rcall	.+614    	; 0x6286 <fputc>
    6020:	2a 94       	dec	r2
    6022:	f5 cf       	rjmp	.-22     	; 0x600e <vfprintf+0x1ae>
    6024:	f5 01       	movw	r30, r10
    6026:	37 fc       	sbrc	r3, 7
    6028:	85 91       	lpm	r24, Z+
    602a:	37 fe       	sbrs	r3, 7
    602c:	81 91       	ld	r24, Z+
    602e:	5f 01       	movw	r10, r30
    6030:	b6 01       	movw	r22, r12
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	28 d1       	rcall	.+592    	; 0x6286 <fputc>
    6036:	21 10       	cpse	r2, r1
    6038:	2a 94       	dec	r2
    603a:	21 e0       	ldi	r18, 0x01	; 1
    603c:	82 1a       	sub	r8, r18
    603e:	91 08       	sbc	r9, r1
    6040:	81 14       	cp	r8, r1
    6042:	91 04       	cpc	r9, r1
    6044:	79 f7       	brne	.-34     	; 0x6024 <vfprintf+0x1c4>
    6046:	e1 c0       	rjmp	.+450    	; 0x620a <vfprintf+0x3aa>
    6048:	84 36       	cpi	r24, 0x64	; 100
    604a:	11 f0       	breq	.+4      	; 0x6050 <vfprintf+0x1f0>
    604c:	89 36       	cpi	r24, 0x69	; 105
    604e:	39 f5       	brne	.+78     	; 0x609e <vfprintf+0x23e>
    6050:	f8 01       	movw	r30, r16
    6052:	37 fe       	sbrs	r3, 7
    6054:	07 c0       	rjmp	.+14     	; 0x6064 <vfprintf+0x204>
    6056:	60 81       	ld	r22, Z
    6058:	71 81       	ldd	r23, Z+1	; 0x01
    605a:	82 81       	ldd	r24, Z+2	; 0x02
    605c:	93 81       	ldd	r25, Z+3	; 0x03
    605e:	0c 5f       	subi	r16, 0xFC	; 252
    6060:	1f 4f       	sbci	r17, 0xFF	; 255
    6062:	08 c0       	rjmp	.+16     	; 0x6074 <vfprintf+0x214>
    6064:	60 81       	ld	r22, Z
    6066:	71 81       	ldd	r23, Z+1	; 0x01
    6068:	07 2e       	mov	r0, r23
    606a:	00 0c       	add	r0, r0
    606c:	88 0b       	sbc	r24, r24
    606e:	99 0b       	sbc	r25, r25
    6070:	0e 5f       	subi	r16, 0xFE	; 254
    6072:	1f 4f       	sbci	r17, 0xFF	; 255
    6074:	f3 2d       	mov	r31, r3
    6076:	ff 76       	andi	r31, 0x6F	; 111
    6078:	3f 2e       	mov	r3, r31
    607a:	97 ff       	sbrs	r25, 7
    607c:	09 c0       	rjmp	.+18     	; 0x6090 <vfprintf+0x230>
    607e:	90 95       	com	r25
    6080:	80 95       	com	r24
    6082:	70 95       	com	r23
    6084:	61 95       	neg	r22
    6086:	7f 4f       	sbci	r23, 0xFF	; 255
    6088:	8f 4f       	sbci	r24, 0xFF	; 255
    608a:	9f 4f       	sbci	r25, 0xFF	; 255
    608c:	f0 68       	ori	r31, 0x80	; 128
    608e:	3f 2e       	mov	r3, r31
    6090:	2a e0       	ldi	r18, 0x0A	; 10
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	a3 01       	movw	r20, r6
    6096:	33 d1       	rcall	.+614    	; 0x62fe <__ultoa_invert>
    6098:	88 2e       	mov	r8, r24
    609a:	86 18       	sub	r8, r6
    609c:	44 c0       	rjmp	.+136    	; 0x6126 <vfprintf+0x2c6>
    609e:	85 37       	cpi	r24, 0x75	; 117
    60a0:	31 f4       	brne	.+12     	; 0x60ae <vfprintf+0x24e>
    60a2:	23 2d       	mov	r18, r3
    60a4:	2f 7e       	andi	r18, 0xEF	; 239
    60a6:	b2 2e       	mov	r11, r18
    60a8:	2a e0       	ldi	r18, 0x0A	; 10
    60aa:	30 e0       	ldi	r19, 0x00	; 0
    60ac:	25 c0       	rjmp	.+74     	; 0x60f8 <vfprintf+0x298>
    60ae:	93 2d       	mov	r25, r3
    60b0:	99 7f       	andi	r25, 0xF9	; 249
    60b2:	b9 2e       	mov	r11, r25
    60b4:	8f 36       	cpi	r24, 0x6F	; 111
    60b6:	c1 f0       	breq	.+48     	; 0x60e8 <vfprintf+0x288>
    60b8:	18 f4       	brcc	.+6      	; 0x60c0 <vfprintf+0x260>
    60ba:	88 35       	cpi	r24, 0x58	; 88
    60bc:	79 f0       	breq	.+30     	; 0x60dc <vfprintf+0x27c>
    60be:	ae c0       	rjmp	.+348    	; 0x621c <vfprintf+0x3bc>
    60c0:	80 37       	cpi	r24, 0x70	; 112
    60c2:	19 f0       	breq	.+6      	; 0x60ca <vfprintf+0x26a>
    60c4:	88 37       	cpi	r24, 0x78	; 120
    60c6:	21 f0       	breq	.+8      	; 0x60d0 <vfprintf+0x270>
    60c8:	a9 c0       	rjmp	.+338    	; 0x621c <vfprintf+0x3bc>
    60ca:	e9 2f       	mov	r30, r25
    60cc:	e0 61       	ori	r30, 0x10	; 16
    60ce:	be 2e       	mov	r11, r30
    60d0:	b4 fe       	sbrs	r11, 4
    60d2:	0d c0       	rjmp	.+26     	; 0x60ee <vfprintf+0x28e>
    60d4:	fb 2d       	mov	r31, r11
    60d6:	f4 60       	ori	r31, 0x04	; 4
    60d8:	bf 2e       	mov	r11, r31
    60da:	09 c0       	rjmp	.+18     	; 0x60ee <vfprintf+0x28e>
    60dc:	34 fe       	sbrs	r3, 4
    60de:	0a c0       	rjmp	.+20     	; 0x60f4 <vfprintf+0x294>
    60e0:	29 2f       	mov	r18, r25
    60e2:	26 60       	ori	r18, 0x06	; 6
    60e4:	b2 2e       	mov	r11, r18
    60e6:	06 c0       	rjmp	.+12     	; 0x60f4 <vfprintf+0x294>
    60e8:	28 e0       	ldi	r18, 0x08	; 8
    60ea:	30 e0       	ldi	r19, 0x00	; 0
    60ec:	05 c0       	rjmp	.+10     	; 0x60f8 <vfprintf+0x298>
    60ee:	20 e1       	ldi	r18, 0x10	; 16
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	02 c0       	rjmp	.+4      	; 0x60f8 <vfprintf+0x298>
    60f4:	20 e1       	ldi	r18, 0x10	; 16
    60f6:	32 e0       	ldi	r19, 0x02	; 2
    60f8:	f8 01       	movw	r30, r16
    60fa:	b7 fe       	sbrs	r11, 7
    60fc:	07 c0       	rjmp	.+14     	; 0x610c <vfprintf+0x2ac>
    60fe:	60 81       	ld	r22, Z
    6100:	71 81       	ldd	r23, Z+1	; 0x01
    6102:	82 81       	ldd	r24, Z+2	; 0x02
    6104:	93 81       	ldd	r25, Z+3	; 0x03
    6106:	0c 5f       	subi	r16, 0xFC	; 252
    6108:	1f 4f       	sbci	r17, 0xFF	; 255
    610a:	06 c0       	rjmp	.+12     	; 0x6118 <vfprintf+0x2b8>
    610c:	60 81       	ld	r22, Z
    610e:	71 81       	ldd	r23, Z+1	; 0x01
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	0e 5f       	subi	r16, 0xFE	; 254
    6116:	1f 4f       	sbci	r17, 0xFF	; 255
    6118:	a3 01       	movw	r20, r6
    611a:	f1 d0       	rcall	.+482    	; 0x62fe <__ultoa_invert>
    611c:	88 2e       	mov	r8, r24
    611e:	86 18       	sub	r8, r6
    6120:	fb 2d       	mov	r31, r11
    6122:	ff 77       	andi	r31, 0x7F	; 127
    6124:	3f 2e       	mov	r3, r31
    6126:	36 fe       	sbrs	r3, 6
    6128:	0d c0       	rjmp	.+26     	; 0x6144 <vfprintf+0x2e4>
    612a:	23 2d       	mov	r18, r3
    612c:	2e 7f       	andi	r18, 0xFE	; 254
    612e:	a2 2e       	mov	r10, r18
    6130:	89 14       	cp	r8, r9
    6132:	58 f4       	brcc	.+22     	; 0x614a <vfprintf+0x2ea>
    6134:	34 fe       	sbrs	r3, 4
    6136:	0b c0       	rjmp	.+22     	; 0x614e <vfprintf+0x2ee>
    6138:	32 fc       	sbrc	r3, 2
    613a:	09 c0       	rjmp	.+18     	; 0x614e <vfprintf+0x2ee>
    613c:	83 2d       	mov	r24, r3
    613e:	8e 7e       	andi	r24, 0xEE	; 238
    6140:	a8 2e       	mov	r10, r24
    6142:	05 c0       	rjmp	.+10     	; 0x614e <vfprintf+0x2ee>
    6144:	b8 2c       	mov	r11, r8
    6146:	a3 2c       	mov	r10, r3
    6148:	03 c0       	rjmp	.+6      	; 0x6150 <vfprintf+0x2f0>
    614a:	b8 2c       	mov	r11, r8
    614c:	01 c0       	rjmp	.+2      	; 0x6150 <vfprintf+0x2f0>
    614e:	b9 2c       	mov	r11, r9
    6150:	a4 fe       	sbrs	r10, 4
    6152:	0f c0       	rjmp	.+30     	; 0x6172 <vfprintf+0x312>
    6154:	fe 01       	movw	r30, r28
    6156:	e8 0d       	add	r30, r8
    6158:	f1 1d       	adc	r31, r1
    615a:	80 81       	ld	r24, Z
    615c:	80 33       	cpi	r24, 0x30	; 48
    615e:	21 f4       	brne	.+8      	; 0x6168 <vfprintf+0x308>
    6160:	9a 2d       	mov	r25, r10
    6162:	99 7e       	andi	r25, 0xE9	; 233
    6164:	a9 2e       	mov	r10, r25
    6166:	09 c0       	rjmp	.+18     	; 0x617a <vfprintf+0x31a>
    6168:	a2 fe       	sbrs	r10, 2
    616a:	06 c0       	rjmp	.+12     	; 0x6178 <vfprintf+0x318>
    616c:	b3 94       	inc	r11
    616e:	b3 94       	inc	r11
    6170:	04 c0       	rjmp	.+8      	; 0x617a <vfprintf+0x31a>
    6172:	8a 2d       	mov	r24, r10
    6174:	86 78       	andi	r24, 0x86	; 134
    6176:	09 f0       	breq	.+2      	; 0x617a <vfprintf+0x31a>
    6178:	b3 94       	inc	r11
    617a:	a3 fc       	sbrc	r10, 3
    617c:	10 c0       	rjmp	.+32     	; 0x619e <vfprintf+0x33e>
    617e:	a0 fe       	sbrs	r10, 0
    6180:	06 c0       	rjmp	.+12     	; 0x618e <vfprintf+0x32e>
    6182:	b2 14       	cp	r11, r2
    6184:	80 f4       	brcc	.+32     	; 0x61a6 <vfprintf+0x346>
    6186:	28 0c       	add	r2, r8
    6188:	92 2c       	mov	r9, r2
    618a:	9b 18       	sub	r9, r11
    618c:	0d c0       	rjmp	.+26     	; 0x61a8 <vfprintf+0x348>
    618e:	b2 14       	cp	r11, r2
    6190:	58 f4       	brcc	.+22     	; 0x61a8 <vfprintf+0x348>
    6192:	b6 01       	movw	r22, r12
    6194:	80 e2       	ldi	r24, 0x20	; 32
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	76 d0       	rcall	.+236    	; 0x6286 <fputc>
    619a:	b3 94       	inc	r11
    619c:	f8 cf       	rjmp	.-16     	; 0x618e <vfprintf+0x32e>
    619e:	b2 14       	cp	r11, r2
    61a0:	18 f4       	brcc	.+6      	; 0x61a8 <vfprintf+0x348>
    61a2:	2b 18       	sub	r2, r11
    61a4:	02 c0       	rjmp	.+4      	; 0x61aa <vfprintf+0x34a>
    61a6:	98 2c       	mov	r9, r8
    61a8:	21 2c       	mov	r2, r1
    61aa:	a4 fe       	sbrs	r10, 4
    61ac:	0f c0       	rjmp	.+30     	; 0x61cc <vfprintf+0x36c>
    61ae:	b6 01       	movw	r22, r12
    61b0:	80 e3       	ldi	r24, 0x30	; 48
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	68 d0       	rcall	.+208    	; 0x6286 <fputc>
    61b6:	a2 fe       	sbrs	r10, 2
    61b8:	16 c0       	rjmp	.+44     	; 0x61e6 <vfprintf+0x386>
    61ba:	a1 fc       	sbrc	r10, 1
    61bc:	03 c0       	rjmp	.+6      	; 0x61c4 <vfprintf+0x364>
    61be:	88 e7       	ldi	r24, 0x78	; 120
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	02 c0       	rjmp	.+4      	; 0x61c8 <vfprintf+0x368>
    61c4:	88 e5       	ldi	r24, 0x58	; 88
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	b6 01       	movw	r22, r12
    61ca:	0c c0       	rjmp	.+24     	; 0x61e4 <vfprintf+0x384>
    61cc:	8a 2d       	mov	r24, r10
    61ce:	86 78       	andi	r24, 0x86	; 134
    61d0:	51 f0       	breq	.+20     	; 0x61e6 <vfprintf+0x386>
    61d2:	a1 fe       	sbrs	r10, 1
    61d4:	02 c0       	rjmp	.+4      	; 0x61da <vfprintf+0x37a>
    61d6:	8b e2       	ldi	r24, 0x2B	; 43
    61d8:	01 c0       	rjmp	.+2      	; 0x61dc <vfprintf+0x37c>
    61da:	80 e2       	ldi	r24, 0x20	; 32
    61dc:	a7 fc       	sbrc	r10, 7
    61de:	8d e2       	ldi	r24, 0x2D	; 45
    61e0:	b6 01       	movw	r22, r12
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	50 d0       	rcall	.+160    	; 0x6286 <fputc>
    61e6:	89 14       	cp	r8, r9
    61e8:	30 f4       	brcc	.+12     	; 0x61f6 <vfprintf+0x396>
    61ea:	b6 01       	movw	r22, r12
    61ec:	80 e3       	ldi	r24, 0x30	; 48
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	4a d0       	rcall	.+148    	; 0x6286 <fputc>
    61f2:	9a 94       	dec	r9
    61f4:	f8 cf       	rjmp	.-16     	; 0x61e6 <vfprintf+0x386>
    61f6:	8a 94       	dec	r8
    61f8:	f3 01       	movw	r30, r6
    61fa:	e8 0d       	add	r30, r8
    61fc:	f1 1d       	adc	r31, r1
    61fe:	80 81       	ld	r24, Z
    6200:	b6 01       	movw	r22, r12
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	40 d0       	rcall	.+128    	; 0x6286 <fputc>
    6206:	81 10       	cpse	r8, r1
    6208:	f6 cf       	rjmp	.-20     	; 0x61f6 <vfprintf+0x396>
    620a:	22 20       	and	r2, r2
    620c:	09 f4       	brne	.+2      	; 0x6210 <vfprintf+0x3b0>
    620e:	4e ce       	rjmp	.-868    	; 0x5eac <vfprintf+0x4c>
    6210:	b6 01       	movw	r22, r12
    6212:	80 e2       	ldi	r24, 0x20	; 32
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	37 d0       	rcall	.+110    	; 0x6286 <fputc>
    6218:	2a 94       	dec	r2
    621a:	f7 cf       	rjmp	.-18     	; 0x620a <vfprintf+0x3aa>
    621c:	f6 01       	movw	r30, r12
    621e:	86 81       	ldd	r24, Z+6	; 0x06
    6220:	97 81       	ldd	r25, Z+7	; 0x07
    6222:	02 c0       	rjmp	.+4      	; 0x6228 <vfprintf+0x3c8>
    6224:	8f ef       	ldi	r24, 0xFF	; 255
    6226:	9f ef       	ldi	r25, 0xFF	; 255
    6228:	2b 96       	adiw	r28, 0x0b	; 11
    622a:	0f b6       	in	r0, 0x3f	; 63
    622c:	f8 94       	cli
    622e:	de bf       	out	0x3e, r29	; 62
    6230:	0f be       	out	0x3f, r0	; 63
    6232:	cd bf       	out	0x3d, r28	; 61
    6234:	df 91       	pop	r29
    6236:	cf 91       	pop	r28
    6238:	1f 91       	pop	r17
    623a:	0f 91       	pop	r16
    623c:	ff 90       	pop	r15
    623e:	ef 90       	pop	r14
    6240:	df 90       	pop	r13
    6242:	cf 90       	pop	r12
    6244:	bf 90       	pop	r11
    6246:	af 90       	pop	r10
    6248:	9f 90       	pop	r9
    624a:	8f 90       	pop	r8
    624c:	7f 90       	pop	r7
    624e:	6f 90       	pop	r6
    6250:	5f 90       	pop	r5
    6252:	4f 90       	pop	r4
    6254:	3f 90       	pop	r3
    6256:	2f 90       	pop	r2
    6258:	08 95       	ret

0000625a <strnlen_P>:
    625a:	fc 01       	movw	r30, r24
    625c:	05 90       	lpm	r0, Z+
    625e:	61 50       	subi	r22, 0x01	; 1
    6260:	70 40       	sbci	r23, 0x00	; 0
    6262:	01 10       	cpse	r0, r1
    6264:	d8 f7       	brcc	.-10     	; 0x625c <strnlen_P+0x2>
    6266:	80 95       	com	r24
    6268:	90 95       	com	r25
    626a:	8e 0f       	add	r24, r30
    626c:	9f 1f       	adc	r25, r31
    626e:	08 95       	ret

00006270 <strnlen>:
    6270:	fc 01       	movw	r30, r24
    6272:	61 50       	subi	r22, 0x01	; 1
    6274:	70 40       	sbci	r23, 0x00	; 0
    6276:	01 90       	ld	r0, Z+
    6278:	01 10       	cpse	r0, r1
    627a:	d8 f7       	brcc	.-10     	; 0x6272 <strnlen+0x2>
    627c:	80 95       	com	r24
    627e:	90 95       	com	r25
    6280:	8e 0f       	add	r24, r30
    6282:	9f 1f       	adc	r25, r31
    6284:	08 95       	ret

00006286 <fputc>:
    6286:	0f 93       	push	r16
    6288:	1f 93       	push	r17
    628a:	cf 93       	push	r28
    628c:	df 93       	push	r29
    628e:	fb 01       	movw	r30, r22
    6290:	23 81       	ldd	r18, Z+3	; 0x03
    6292:	21 fd       	sbrc	r18, 1
    6294:	03 c0       	rjmp	.+6      	; 0x629c <fputc+0x16>
    6296:	8f ef       	ldi	r24, 0xFF	; 255
    6298:	9f ef       	ldi	r25, 0xFF	; 255
    629a:	2c c0       	rjmp	.+88     	; 0x62f4 <fputc+0x6e>
    629c:	22 ff       	sbrs	r18, 2
    629e:	16 c0       	rjmp	.+44     	; 0x62cc <fputc+0x46>
    62a0:	46 81       	ldd	r20, Z+6	; 0x06
    62a2:	57 81       	ldd	r21, Z+7	; 0x07
    62a4:	24 81       	ldd	r18, Z+4	; 0x04
    62a6:	35 81       	ldd	r19, Z+5	; 0x05
    62a8:	42 17       	cp	r20, r18
    62aa:	53 07       	cpc	r21, r19
    62ac:	44 f4       	brge	.+16     	; 0x62be <fputc+0x38>
    62ae:	a0 81       	ld	r26, Z
    62b0:	b1 81       	ldd	r27, Z+1	; 0x01
    62b2:	9d 01       	movw	r18, r26
    62b4:	2f 5f       	subi	r18, 0xFF	; 255
    62b6:	3f 4f       	sbci	r19, 0xFF	; 255
    62b8:	31 83       	std	Z+1, r19	; 0x01
    62ba:	20 83       	st	Z, r18
    62bc:	8c 93       	st	X, r24
    62be:	26 81       	ldd	r18, Z+6	; 0x06
    62c0:	37 81       	ldd	r19, Z+7	; 0x07
    62c2:	2f 5f       	subi	r18, 0xFF	; 255
    62c4:	3f 4f       	sbci	r19, 0xFF	; 255
    62c6:	37 83       	std	Z+7, r19	; 0x07
    62c8:	26 83       	std	Z+6, r18	; 0x06
    62ca:	14 c0       	rjmp	.+40     	; 0x62f4 <fputc+0x6e>
    62cc:	8b 01       	movw	r16, r22
    62ce:	ec 01       	movw	r28, r24
    62d0:	fb 01       	movw	r30, r22
    62d2:	00 84       	ldd	r0, Z+8	; 0x08
    62d4:	f1 85       	ldd	r31, Z+9	; 0x09
    62d6:	e0 2d       	mov	r30, r0
    62d8:	19 95       	eicall
    62da:	89 2b       	or	r24, r25
    62dc:	e1 f6       	brne	.-72     	; 0x6296 <fputc+0x10>
    62de:	d8 01       	movw	r26, r16
    62e0:	16 96       	adiw	r26, 0x06	; 6
    62e2:	8d 91       	ld	r24, X+
    62e4:	9c 91       	ld	r25, X
    62e6:	17 97       	sbiw	r26, 0x07	; 7
    62e8:	01 96       	adiw	r24, 0x01	; 1
    62ea:	17 96       	adiw	r26, 0x07	; 7
    62ec:	9c 93       	st	X, r25
    62ee:	8e 93       	st	-X, r24
    62f0:	16 97       	sbiw	r26, 0x06	; 6
    62f2:	ce 01       	movw	r24, r28
    62f4:	df 91       	pop	r29
    62f6:	cf 91       	pop	r28
    62f8:	1f 91       	pop	r17
    62fa:	0f 91       	pop	r16
    62fc:	08 95       	ret

000062fe <__ultoa_invert>:
    62fe:	fa 01       	movw	r30, r20
    6300:	aa 27       	eor	r26, r26
    6302:	28 30       	cpi	r18, 0x08	; 8
    6304:	51 f1       	breq	.+84     	; 0x635a <__ultoa_invert+0x5c>
    6306:	20 31       	cpi	r18, 0x10	; 16
    6308:	81 f1       	breq	.+96     	; 0x636a <__ultoa_invert+0x6c>
    630a:	e8 94       	clt
    630c:	6f 93       	push	r22
    630e:	6e 7f       	andi	r22, 0xFE	; 254
    6310:	6e 5f       	subi	r22, 0xFE	; 254
    6312:	7f 4f       	sbci	r23, 0xFF	; 255
    6314:	8f 4f       	sbci	r24, 0xFF	; 255
    6316:	9f 4f       	sbci	r25, 0xFF	; 255
    6318:	af 4f       	sbci	r26, 0xFF	; 255
    631a:	b1 e0       	ldi	r27, 0x01	; 1
    631c:	3e d0       	rcall	.+124    	; 0x639a <__ultoa_invert+0x9c>
    631e:	b4 e0       	ldi	r27, 0x04	; 4
    6320:	3c d0       	rcall	.+120    	; 0x639a <__ultoa_invert+0x9c>
    6322:	67 0f       	add	r22, r23
    6324:	78 1f       	adc	r23, r24
    6326:	89 1f       	adc	r24, r25
    6328:	9a 1f       	adc	r25, r26
    632a:	a1 1d       	adc	r26, r1
    632c:	68 0f       	add	r22, r24
    632e:	79 1f       	adc	r23, r25
    6330:	8a 1f       	adc	r24, r26
    6332:	91 1d       	adc	r25, r1
    6334:	a1 1d       	adc	r26, r1
    6336:	6a 0f       	add	r22, r26
    6338:	71 1d       	adc	r23, r1
    633a:	81 1d       	adc	r24, r1
    633c:	91 1d       	adc	r25, r1
    633e:	a1 1d       	adc	r26, r1
    6340:	20 d0       	rcall	.+64     	; 0x6382 <__ultoa_invert+0x84>
    6342:	09 f4       	brne	.+2      	; 0x6346 <__ultoa_invert+0x48>
    6344:	68 94       	set
    6346:	3f 91       	pop	r19
    6348:	2a e0       	ldi	r18, 0x0A	; 10
    634a:	26 9f       	mul	r18, r22
    634c:	11 24       	eor	r1, r1
    634e:	30 19       	sub	r19, r0
    6350:	30 5d       	subi	r19, 0xD0	; 208
    6352:	31 93       	st	Z+, r19
    6354:	de f6       	brtc	.-74     	; 0x630c <__ultoa_invert+0xe>
    6356:	cf 01       	movw	r24, r30
    6358:	08 95       	ret
    635a:	46 2f       	mov	r20, r22
    635c:	47 70       	andi	r20, 0x07	; 7
    635e:	40 5d       	subi	r20, 0xD0	; 208
    6360:	41 93       	st	Z+, r20
    6362:	b3 e0       	ldi	r27, 0x03	; 3
    6364:	0f d0       	rcall	.+30     	; 0x6384 <__ultoa_invert+0x86>
    6366:	c9 f7       	brne	.-14     	; 0x635a <__ultoa_invert+0x5c>
    6368:	f6 cf       	rjmp	.-20     	; 0x6356 <__ultoa_invert+0x58>
    636a:	46 2f       	mov	r20, r22
    636c:	4f 70       	andi	r20, 0x0F	; 15
    636e:	40 5d       	subi	r20, 0xD0	; 208
    6370:	4a 33       	cpi	r20, 0x3A	; 58
    6372:	18 f0       	brcs	.+6      	; 0x637a <__ultoa_invert+0x7c>
    6374:	49 5d       	subi	r20, 0xD9	; 217
    6376:	31 fd       	sbrc	r19, 1
    6378:	40 52       	subi	r20, 0x20	; 32
    637a:	41 93       	st	Z+, r20
    637c:	02 d0       	rcall	.+4      	; 0x6382 <__ultoa_invert+0x84>
    637e:	a9 f7       	brne	.-22     	; 0x636a <__ultoa_invert+0x6c>
    6380:	ea cf       	rjmp	.-44     	; 0x6356 <__ultoa_invert+0x58>
    6382:	b4 e0       	ldi	r27, 0x04	; 4
    6384:	a6 95       	lsr	r26
    6386:	97 95       	ror	r25
    6388:	87 95       	ror	r24
    638a:	77 95       	ror	r23
    638c:	67 95       	ror	r22
    638e:	ba 95       	dec	r27
    6390:	c9 f7       	brne	.-14     	; 0x6384 <__ultoa_invert+0x86>
    6392:	00 97       	sbiw	r24, 0x00	; 0
    6394:	61 05       	cpc	r22, r1
    6396:	71 05       	cpc	r23, r1
    6398:	08 95       	ret
    639a:	9b 01       	movw	r18, r22
    639c:	ac 01       	movw	r20, r24
    639e:	0a 2e       	mov	r0, r26
    63a0:	06 94       	lsr	r0
    63a2:	57 95       	ror	r21
    63a4:	47 95       	ror	r20
    63a6:	37 95       	ror	r19
    63a8:	27 95       	ror	r18
    63aa:	ba 95       	dec	r27
    63ac:	c9 f7       	brne	.-14     	; 0x63a0 <__ultoa_invert+0xa2>
    63ae:	62 0f       	add	r22, r18
    63b0:	73 1f       	adc	r23, r19
    63b2:	84 1f       	adc	r24, r20
    63b4:	95 1f       	adc	r25, r21
    63b6:	a0 1d       	adc	r26, r0
    63b8:	08 95       	ret

000063ba <_exit>:
    63ba:	f8 94       	cli

000063bc <__stop_program>:
    63bc:	ff cf       	rjmp	.-2      	; 0x63bc <__stop_program>
