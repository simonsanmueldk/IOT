
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ea  00800200  000063f0  00006484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001029  008007ea  008007ea  00006a6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006a6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  00006b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dbcf  00000000  00000000  000075ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035dc  00000000  00000000  000151bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b7e  00000000  00000000  00018797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026e0  00000000  00000000  0001f318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004288  00000000  00000000  000219f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c265  00000000  00000000  00025c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a40  00000000  00000000  00031ee5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	eb c5       	rjmp	.+3030   	; 0xc08 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 81 25 	jmp	0x4b02	; 0x4b02 <__vector_25>
      68:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__vector_36>
      94:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b4 2a 	jmp	0x5568	; 0x5568 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__vector_51>
      d0:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__vector_54>
      dc:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1b 1a       	sub	r1, r27
      e6:	1b 1a       	sub	r1, r27
      e8:	1b 1a       	sub	r1, r27
      ea:	52 1a       	sub	r5, r18
      ec:	5a 1a       	sub	r5, r26
      ee:	6f 1a       	sub	r6, r31
      f0:	1b 1a       	sub	r1, r27
      f2:	1b 1a       	sub	r1, r27
      f4:	52 1a       	sub	r5, r18
      f6:	5a 1a       	sub	r5, r26
      f8:	d6 2a       	or	r13, r22
      fa:	46 2b       	or	r20, r22
      fc:	46 2b       	or	r20, r22
      fe:	46 2b       	or	r20, r22
     100:	46 2b       	or	r20, r22
     102:	46 2b       	or	r20, r22
     104:	46 2b       	or	r20, r22
     106:	46 2b       	or	r20, r22
     108:	d6 2a       	or	r13, r22
     10a:	46 2b       	or	r20, r22
     10c:	46 2b       	or	r20, r22
     10e:	46 2b       	or	r20, r22
     110:	46 2b       	or	r20, r22
     112:	46 2b       	or	r20, r22
     114:	46 2b       	or	r20, r22
     116:	46 2b       	or	r20, r22
     118:	d8 2a       	or	r13, r24
     11a:	46 2b       	or	r20, r22
     11c:	46 2b       	or	r20, r22
     11e:	46 2b       	or	r20, r22
     120:	46 2b       	or	r20, r22
     122:	46 2b       	or	r20, r22
     124:	46 2b       	or	r20, r22
     126:	46 2b       	or	r20, r22
     128:	46 2b       	or	r20, r22
     12a:	46 2b       	or	r20, r22
     12c:	46 2b       	or	r20, r22
     12e:	46 2b       	or	r20, r22
     130:	46 2b       	or	r20, r22
     132:	46 2b       	or	r20, r22
     134:	46 2b       	or	r20, r22
     136:	46 2b       	or	r20, r22
     138:	d8 2a       	or	r13, r24
     13a:	46 2b       	or	r20, r22
     13c:	46 2b       	or	r20, r22
     13e:	46 2b       	or	r20, r22
     140:	46 2b       	or	r20, r22
     142:	46 2b       	or	r20, r22
     144:	46 2b       	or	r20, r22
     146:	46 2b       	or	r20, r22
     148:	46 2b       	or	r20, r22
     14a:	46 2b       	or	r20, r22
     14c:	46 2b       	or	r20, r22
     14e:	46 2b       	or	r20, r22
     150:	46 2b       	or	r20, r22
     152:	46 2b       	or	r20, r22
     154:	46 2b       	or	r20, r22
     156:	46 2b       	or	r20, r22
     158:	42 2b       	or	r20, r18
     15a:	46 2b       	or	r20, r22
     15c:	46 2b       	or	r20, r22
     15e:	46 2b       	or	r20, r22
     160:	46 2b       	or	r20, r22
     162:	46 2b       	or	r20, r22
     164:	46 2b       	or	r20, r22
     166:	46 2b       	or	r20, r22
     168:	0d 2b       	or	r16, r29
     16a:	46 2b       	or	r20, r22
     16c:	46 2b       	or	r20, r22
     16e:	46 2b       	or	r20, r22
     170:	46 2b       	or	r20, r22
     172:	46 2b       	or	r20, r22
     174:	46 2b       	or	r20, r22
     176:	46 2b       	or	r20, r22
     178:	46 2b       	or	r20, r22
     17a:	46 2b       	or	r20, r22
     17c:	46 2b       	or	r20, r22
     17e:	46 2b       	or	r20, r22
     180:	46 2b       	or	r20, r22
     182:	46 2b       	or	r20, r22
     184:	46 2b       	or	r20, r22
     186:	46 2b       	or	r20, r22
     188:	01 2b       	or	r16, r17
     18a:	46 2b       	or	r20, r22
     18c:	46 2b       	or	r20, r22
     18e:	46 2b       	or	r20, r22
     190:	46 2b       	or	r20, r22
     192:	46 2b       	or	r20, r22
     194:	46 2b       	or	r20, r22
     196:	46 2b       	or	r20, r22
     198:	25 2b       	or	r18, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <prvCheckTasksWaitingTermination>
     19e:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	6a d4       	rcall	.+2260   	; 0xa7c <vPortYield>
     1a8:	0e 94 98 1a 	call	0x3530	; 0x3530 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 8d 19 	call	0x331a	; 0x331a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 ef       	ldi	r30, 0xF0	; 240
     1e4:	f3 e6       	ldi	r31, 0x63	; 99
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 3e       	cpi	r26, 0xEA	; 234
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	aa ee       	ldi	r26, 0xEA	; 234
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a3 31       	cpi	r26, 0x13	; 19
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <main>
     20a:	0c 94 f6 31 	jmp	0x63ec	; 0x63ec <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <myCo2CallBack>:
mh_z19_returnCode_t rc;
uint16_t *ppm;
uint16_t *co2_data;

void myCo2CallBack(uint16_t *ppm){
	co2_data = ppm;
     210:	90 93 f0 17 	sts	0x17F0, r25	; 0x8017f0 <co2_data+0x1>
     214:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <co2_data>
     218:	08 95       	ret

0000021a <get_CO2_data>:
};


uint16_t get_CO2_data(){
	
	printf(" CO2 data %d",co2_data);
     21a:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <co2_data+0x1>
     21e:	8f 93       	push	r24
     220:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <co2_data>
     224:	8f 93       	push	r24
     226:	83 e7       	ldi	r24, 0x73	; 115
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
	return co2_data;
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
}
     23a:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <co2_data>
     23e:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <co2_data+0x1>
     242:	08 95       	ret

00000244 <CO2_taskRun>:


void CO2_taskRun() {
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	cf 93       	push	r28
	EventBits_t event;
	event = xEventGroupWaitBits(
     250:	cc 24       	eor	r12, r12
     252:	ca 94       	dec	r12
     254:	dc 2c       	mov	r13, r12
     256:	76 01       	movw	r14, r12
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	42 e0       	ldi	r20, 0x02	; 2
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <meassureEventGroup>
     268:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <meassureEventGroup+0x1>
     26c:	b2 d0       	rcall	.+356    	; 0x3d2 <xEventGroupWaitBits>
	CO2_BIT,
	pdTRUE,
	pdFALSE,
	portMAX_DELAY);
	
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
     26e:	40 91 f7 17 	lds	r20, 0x17F7	; 0x8017f7 <xFrequency>
     272:	50 91 f8 17 	lds	r21, 0x17F8	; 0x8017f8 <xFrequency+0x1>
     276:	60 91 f9 17 	lds	r22, 0x17F9	; 0x8017f9 <xFrequency+0x2>
     27a:	70 91 fa 17 	lds	r23, 0x17FA	; 0x8017fa <xFrequency+0x3>
     27e:	81 ef       	ldi	r24, 0xF1	; 241
     280:	97 e1       	ldi	r25, 0x17	; 23
     282:	0e 94 c4 10 	call	0x2188	; 0x2188 <xTaskDelayUntil>
	
	rc = mh_z19_takeMeassuring();
     286:	0e 94 ff 23 	call	0x47fe	; 0x47fe <mh_z19_takeMeassuring>
     28a:	80 93 ee 17 	sts	0x17EE, r24	; 0x8017ee <rc>
	
	if (rc != MHZ19_OK)
     28e:	88 23       	and	r24, r24
     290:	41 f0       	breq	.+16     	; 0x2a2 <CO2_taskRun+0x5e>
	{
		printf("task got wrong");
     292:	80 e8       	ldi	r24, 0x80	; 128
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	9f 93       	push	r25
     298:	8f 93       	push	r24
     29a:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
	}
	
	vTaskDelay(pdMS_TO_TICKS(500UL));
     2a2:	6f e1       	ldi	r22, 0x1F	; 31
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
	
	puts("Hello");
     2ae:	8f e8       	ldi	r24, 0x8F	; 143
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	
	
	mh_z19_returnCode_t tc = mh_z19_getCo2Ppm(ppm);
     2b6:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <ppm>
     2ba:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <ppm+0x1>
     2be:	0e 94 2e 24 	call	0x485c	; 0x485c <mh_z19_getCo2Ppm>
     2c2:	c8 2f       	mov	r28, r24
	
	printf("Value: %d",ppm);
     2c4:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <ppm+0x1>
     2c8:	8f 93       	push	r24
     2ca:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <ppm>
     2ce:	8f 93       	push	r24
     2d0:	85 e9       	ldi	r24, 0x95	; 149
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
	
	if (tc != MHZ19_OK)
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	cc 23       	and	r28, r28
     2e6:	41 f0       	breq	.+16     	; 0x2f8 <CO2_taskRun+0xb4>
	{
		printf("cant get co2 data");
     2e8:	8f e9       	ldi	r24, 0x9F	; 159
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
	}
	
	
	//myCo2CallBack(ppm);
	mh_z19_injectCallBack(myCo2CallBack);
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <mh_z19_injectCallBack>
	puts("CALLLBACKFINISHED");
     300:	81 eb       	ldi	r24, 0xB1	; 177
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	
	get_CO2_data();
     308:	88 df       	rcall	.-240    	; 0x21a <get_CO2_data>

	
}
     30a:	cf 91       	pop	r28
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	08 95       	ret

00000318 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	puts("CO2");
     318:	83 ec       	ldi	r24, 0xC3	; 195
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	xEventGroupSetBits(dataReadyEventGroup, CO2_READY_BIT);
     320:	41 e0       	ldi	r20, 0x01	; 1
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dataReadyEventGroup>
     32c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dataReadyEventGroup+0x1>
     330:	f0 d0       	rcall	.+480    	; 0x512 <xEventGroupSetBits>
	
	xFrequency = 3000/portTICK_PERIOD_MS;
     332:	8b eb       	ldi	r24, 0xBB	; 187
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <xFrequency>
     33e:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <xFrequency+0x1>
     342:	a0 93 f9 17 	sts	0x17F9, r26	; 0x8017f9 <xFrequency+0x2>
     346:	b0 93 fa 17 	sts	0x17FA, r27	; 0x8017fa <xFrequency+0x3>
	
	xLastWakeTime = xTaskGetTickCount();
     34a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xTaskGetTickCount>
     34e:	60 93 f1 17 	sts	0x17F1, r22	; 0x8017f1 <xLastWakeTime>
     352:	70 93 f2 17 	sts	0x17F2, r23	; 0x8017f2 <xLastWakeTime+0x1>
     356:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <xLastWakeTime+0x2>
     35a:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <xLastWakeTime+0x3>
	puts("CO2 Second");
     35e:	87 ec       	ldi	r24, 0xC7	; 199
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>

	for(;;)
	{
		
		CO2_taskRun();
     366:	6e df       	rcall	.-292    	; 0x244 <CO2_taskRun>
     368:	fe cf       	rjmp	.-4      	; 0x366 <CO2_Sensor_Task+0x4e>

0000036a <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     36a:	0f 93       	push	r16
     36c:	01 11       	cpse	r16, r1
     36e:	0c c0       	rjmp	.+24     	; 0x388 <prvTestWaitCondition+0x1e>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	82 23       	and	r24, r18
     376:	93 23       	and	r25, r19
     378:	a4 23       	and	r26, r20
     37a:	b5 23       	and	r27, r21
     37c:	89 2b       	or	r24, r25
     37e:	8a 2b       	or	r24, r26
     380:	8b 2b       	or	r24, r27
     382:	79 f4       	brne	.+30     	; 0x3a2 <prvTestWaitCondition+0x38>
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	10 c0       	rjmp	.+32     	; 0x3a8 <prvTestWaitCondition+0x3e>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	82 23       	and	r24, r18
     38e:	93 23       	and	r25, r19
     390:	a4 23       	and	r26, r20
     392:	b5 23       	and	r27, r21
     394:	28 17       	cp	r18, r24
     396:	39 07       	cpc	r19, r25
     398:	4a 07       	cpc	r20, r26
     39a:	5b 07       	cpc	r21, r27
     39c:	21 f0       	breq	.+8      	; 0x3a6 <prvTestWaitCondition+0x3c>
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <prvTestWaitCondition+0x3e>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <prvTestWaitCondition+0x3e>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <xEventGroupCreate>:
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	8f e0       	ldi	r24, 0x0F	; 15
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	af d1       	rcall	.+862    	; 0x714 <pvPortMalloc>
     3b6:	ec 01       	movw	r28, r24
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	39 f0       	breq	.+14     	; 0x3ca <xEventGroupCreate+0x1e>
     3bc:	fc 01       	movw	r30, r24
     3be:	11 92       	st	Z+, r1
     3c0:	11 92       	st	Z+, r1
     3c2:	11 92       	st	Z+, r1
     3c4:	11 92       	st	Z+, r1
     3c6:	cf 01       	movw	r24, r30
     3c8:	8b d2       	rcall	.+1302   	; 0x8e0 <vListInitialise>
     3ca:	ce 01       	movw	r24, r28
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <xEventGroupWaitBits>:
     3d2:	2f 92       	push	r2
     3d4:	3f 92       	push	r3
     3d6:	4f 92       	push	r4
     3d8:	5f 92       	push	r5
     3da:	6f 92       	push	r6
     3dc:	7f 92       	push	r7
     3de:	8f 92       	push	r8
     3e0:	9f 92       	push	r9
     3e2:	af 92       	push	r10
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
     3f8:	4a 01       	movw	r8, r20
     3fa:	5b 01       	movw	r10, r22
     3fc:	62 2e       	mov	r6, r18
     3fe:	70 2e       	mov	r7, r16
     400:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSuspendAll>
     404:	28 80       	ld	r2, Y
     406:	39 80       	ldd	r3, Y+1	; 0x01
     408:	4a 80       	ldd	r4, Y+2	; 0x02
     40a:	5b 80       	ldd	r5, Y+3	; 0x03
     40c:	a5 01       	movw	r20, r10
     40e:	94 01       	movw	r18, r8
     410:	c2 01       	movw	r24, r4
     412:	b1 01       	movw	r22, r2
     414:	aa df       	rcall	.-172    	; 0x36a <prvTestWaitCondition>
     416:	88 23       	and	r24, r24
     418:	a1 f0       	breq	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     41a:	66 20       	and	r6, r6
     41c:	89 f1       	breq	.+98     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     41e:	d5 01       	movw	r26, r10
     420:	c4 01       	movw	r24, r8
     422:	80 95       	com	r24
     424:	90 95       	com	r25
     426:	a0 95       	com	r26
     428:	b0 95       	com	r27
     42a:	82 21       	and	r24, r2
     42c:	93 21       	and	r25, r3
     42e:	a4 21       	and	r26, r4
     430:	b5 21       	and	r27, r5
     432:	88 83       	st	Y, r24
     434:	99 83       	std	Y+1, r25	; 0x01
     436:	aa 83       	std	Y+2, r26	; 0x02
     438:	bb 83       	std	Y+3, r27	; 0x03
     43a:	c1 2c       	mov	r12, r1
     43c:	d1 2c       	mov	r13, r1
     43e:	76 01       	movw	r14, r12
     440:	22 c0       	rjmp	.+68     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	e9 f0       	breq	.+58     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     44c:	61 10       	cpse	r6, r1
     44e:	04 c0       	rjmp	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	ba 01       	movw	r22, r20
     456:	04 c0       	rjmp	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	71 10       	cpse	r7, r1
     462:	74 60       	ori	r23, 0x04	; 4
     464:	48 29       	or	r20, r8
     466:	59 29       	or	r21, r9
     468:	6a 29       	or	r22, r10
     46a:	7b 29       	or	r23, r11
     46c:	97 01       	movw	r18, r14
     46e:	86 01       	movw	r16, r12
     470:	ce 01       	movw	r24, r28
     472:	04 96       	adiw	r24, 0x04	; 4
     474:	0e 94 c0 11 	call	0x2380	; 0x2380 <vTaskPlaceOnUnorderedEventList>
     478:	21 2c       	mov	r2, r1
     47a:	31 2c       	mov	r3, r1
     47c:	21 01       	movw	r4, r2
     47e:	03 c0       	rjmp	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     480:	c1 2c       	mov	r12, r1
     482:	d1 2c       	mov	r13, r1
     484:	76 01       	movw	r14, r12
     486:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
     48a:	cd 28       	or	r12, r13
     48c:	ce 28       	or	r12, r14
     48e:	cf 28       	or	r12, r15
     490:	59 f1       	breq	.+86     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     492:	81 11       	cpse	r24, r1
     494:	01 c0       	rjmp	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	f2 d2       	rcall	.+1508   	; 0xa7c <vPortYield>
     498:	0e 94 94 14 	call	0x2928	; 0x2928 <uxTaskResetEventItemValue>
     49c:	6b 01       	movw	r12, r22
     49e:	7c 01       	movw	r14, r24
     4a0:	91 fd       	sbrc	r25, 1
     4a2:	1f c0       	rjmp	.+62     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	0f 92       	push	r0
     4aa:	c8 80       	ld	r12, Y
     4ac:	d9 80       	ldd	r13, Y+1	; 0x01
     4ae:	ea 80       	ldd	r14, Y+2	; 0x02
     4b0:	fb 80       	ldd	r15, Y+3	; 0x03
     4b2:	07 2d       	mov	r16, r7
     4b4:	a5 01       	movw	r20, r10
     4b6:	94 01       	movw	r18, r8
     4b8:	c7 01       	movw	r24, r14
     4ba:	b6 01       	movw	r22, r12
     4bc:	56 df       	rcall	.-340    	; 0x36a <prvTestWaitCondition>
     4be:	88 23       	and	r24, r24
     4c0:	71 f0       	breq	.+28     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4c2:	66 20       	and	r6, r6
     4c4:	61 f0       	breq	.+24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4c6:	80 94       	com	r8
     4c8:	90 94       	com	r9
     4ca:	a0 94       	com	r10
     4cc:	b0 94       	com	r11
     4ce:	8c 20       	and	r8, r12
     4d0:	9d 20       	and	r9, r13
     4d2:	ae 20       	and	r10, r14
     4d4:	bf 20       	and	r11, r15
     4d6:	88 82       	st	Y, r8
     4d8:	99 82       	std	Y+1, r9	; 0x01
     4da:	aa 82       	std	Y+2, r10	; 0x02
     4dc:	bb 82       	std	Y+3, r11	; 0x03
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	16 01       	movw	r2, r12
     4e4:	27 01       	movw	r4, r14
     4e6:	55 24       	eor	r5, r5
     4e8:	c2 01       	movw	r24, r4
     4ea:	b1 01       	movw	r22, r2
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	9f 90       	pop	r9
     502:	8f 90       	pop	r8
     504:	7f 90       	pop	r7
     506:	6f 90       	pop	r6
     508:	5f 90       	pop	r5
     50a:	4f 90       	pop	r4
     50c:	3f 90       	pop	r3
     50e:	2f 90       	pop	r2
     510:	08 95       	ret

00000512 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	ec 01       	movw	r28, r24
     530:	6a 01       	movw	r12, r20
     532:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     534:	8c 01       	movw	r16, r24
     536:	09 5f       	subi	r16, 0xF9	; 249
     538:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     53a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     53e:	eb 85       	ldd	r30, Y+11	; 0x0b
     540:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     542:	88 81       	ld	r24, Y
     544:	99 81       	ldd	r25, Y+1	; 0x01
     546:	aa 81       	ldd	r26, Y+2	; 0x02
     548:	bb 81       	ldd	r27, Y+3	; 0x03
     54a:	c8 2a       	or	r12, r24
     54c:	d9 2a       	or	r13, r25
     54e:	ea 2a       	or	r14, r26
     550:	fb 2a       	or	r15, r27
     552:	c8 82       	st	Y, r12
     554:	d9 82       	std	Y+1, r13	; 0x01
     556:	ea 82       	std	Y+2, r14	; 0x02
     558:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     55a:	c1 2c       	mov	r12, r1
     55c:	d1 2c       	mov	r13, r1
     55e:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     560:	3d c0       	rjmp	.+122    	; 0x5dc <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     562:	a4 80       	ldd	r10, Z+4	; 0x04
     564:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	a2 81       	ldd	r26, Z+2	; 0x02
     56c:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     56e:	ac 01       	movw	r20, r24
     570:	bd 01       	movw	r22, r26
     572:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     574:	b2 fd       	sbrc	r27, 2
     576:	0e c0       	rjmp	.+28     	; 0x594 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     578:	48 80       	ld	r4, Y
     57a:	59 80       	ldd	r5, Y+1	; 0x01
     57c:	6a 80       	ldd	r6, Y+2	; 0x02
     57e:	7b 80       	ldd	r7, Y+3	; 0x03
     580:	44 22       	and	r4, r20
     582:	55 22       	and	r5, r21
     584:	66 22       	and	r6, r22
     586:	77 22       	and	r7, r23
     588:	45 28       	or	r4, r5
     58a:	46 28       	or	r4, r6
     58c:	47 28       	or	r4, r7
     58e:	89 f4       	brne	.+34     	; 0x5b2 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	12 c0       	rjmp	.+36     	; 0x5b8 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     594:	48 80       	ld	r4, Y
     596:	59 80       	ldd	r5, Y+1	; 0x01
     598:	6a 80       	ldd	r6, Y+2	; 0x02
     59a:	7b 80       	ldd	r7, Y+3	; 0x03
     59c:	44 22       	and	r4, r20
     59e:	55 22       	and	r5, r21
     5a0:	66 22       	and	r6, r22
     5a2:	77 22       	and	r7, r23
     5a4:	44 15       	cp	r20, r4
     5a6:	55 05       	cpc	r21, r5
     5a8:	66 05       	cpc	r22, r6
     5aa:	77 05       	cpc	r23, r7
     5ac:	21 f0       	breq	.+8      	; 0x5b6 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     5b6:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     5b8:	22 23       	and	r18, r18
     5ba:	71 f0       	breq	.+28     	; 0x5d8 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     5bc:	b0 ff       	sbrs	r27, 0
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     5c0:	c4 2a       	or	r12, r20
     5c2:	d5 2a       	or	r13, r21
     5c4:	e6 2a       	or	r14, r22
     5c6:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     5c8:	48 81       	ld	r20, Y
     5ca:	59 81       	ldd	r21, Y+1	; 0x01
     5cc:	6a 81       	ldd	r22, Y+2	; 0x02
     5ce:	7b 81       	ldd	r23, Y+3	; 0x03
     5d0:	72 60       	ori	r23, 0x02	; 2
     5d2:	cf 01       	movw	r24, r30
     5d4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     5d8:	ea 2d       	mov	r30, r10
     5da:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     5dc:	e0 17       	cp	r30, r16
     5de:	f1 07       	cpc	r31, r17
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <xEventGroupSetBits+0xd2>
     5e2:	bf cf       	rjmp	.-130    	; 0x562 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     5e4:	c0 94       	com	r12
     5e6:	d0 94       	com	r13
     5e8:	e0 94       	com	r14
     5ea:	f0 94       	com	r15
     5ec:	88 81       	ld	r24, Y
     5ee:	99 81       	ldd	r25, Y+1	; 0x01
     5f0:	aa 81       	ldd	r26, Y+2	; 0x02
     5f2:	bb 81       	ldd	r27, Y+3	; 0x03
     5f4:	c8 22       	and	r12, r24
     5f6:	d9 22       	and	r13, r25
     5f8:	ea 22       	and	r14, r26
     5fa:	fb 22       	and	r15, r27
     5fc:	c8 82       	st	Y, r12
     5fe:	d9 82       	std	Y+1, r13	; 0x01
     600:	ea 82       	std	Y+2, r14	; 0x02
     602:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     604:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     608:	68 81       	ld	r22, Y
     60a:	79 81       	ldd	r23, Y+1	; 0x01
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	bf 90       	pop	r11
     622:	af 90       	pop	r10
     624:	7f 90       	pop	r7
     626:	6f 90       	pop	r6
     628:	5f 90       	pop	r5
     62a:	4f 90       	pop	r4
     62c:	08 95       	ret

0000062e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     62e:	e6 ef       	ldi	r30, 0xF6	; 246
     630:	f7 e0       	ldi	r31, 0x07	; 7
     632:	aa ef       	ldi	r26, 0xFA	; 250
     634:	b7 e0       	ldi	r27, 0x07	; 7
     636:	b1 83       	std	Z+1, r27	; 0x01
     638:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     63a:	13 82       	std	Z+3, r1	; 0x03
     63c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     63e:	e2 ea       	ldi	r30, 0xA2	; 162
     640:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     642:	f0 93 f5 07 	sts	0x07F5, r31	; 0x8007f5 <pxEnd+0x1>
     646:	e0 93 f4 07 	sts	0x07F4, r30	; 0x8007f4 <pxEnd>
    pxEnd->xBlockSize = 0;
     64a:	13 82       	std	Z+3, r1	; 0x03
     64c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     64e:	11 82       	std	Z+1, r1	; 0x01
     650:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     652:	88 ea       	ldi	r24, 0xA8	; 168
     654:	9d e0       	ldi	r25, 0x0D	; 13
     656:	13 96       	adiw	r26, 0x03	; 3
     658:	9c 93       	st	X, r25
     65a:	8e 93       	st	-X, r24
     65c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     65e:	ed 93       	st	X+, r30
     660:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     662:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <xMinimumEverFreeBytesRemaining+0x1>
     666:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     66a:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xFreeBytesRemaining+0x1>
     66e:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e8       	ldi	r25, 0x80	; 128
     676:	90 93 eb 07 	sts	0x07EB, r25	; 0x8007eb <__data_end+0x1>
     67a:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
     67e:	08 95       	ret

00000680 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     686:	a6 ef       	ldi	r26, 0xF6	; 246
     688:	b7 e0       	ldi	r27, 0x07	; 7
     68a:	01 c0       	rjmp	.+2      	; 0x68e <prvInsertBlockIntoFreeList+0xe>
     68c:	df 01       	movw	r26, r30
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	ec 17       	cp	r30, r28
     696:	fd 07       	cpc	r31, r29
     698:	c8 f3       	brcs	.-14     	; 0x68c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     69a:	12 96       	adiw	r26, 0x02	; 2
     69c:	8d 91       	ld	r24, X+
     69e:	9c 91       	ld	r25, X
     6a0:	13 97       	sbiw	r26, 0x03	; 3
     6a2:	9d 01       	movw	r18, r26
     6a4:	28 0f       	add	r18, r24
     6a6:	39 1f       	adc	r19, r25
     6a8:	c2 17       	cp	r28, r18
     6aa:	d3 07       	cpc	r29, r19
     6ac:	49 f4       	brne	.+18     	; 0x6c0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     6ae:	2a 81       	ldd	r18, Y+2	; 0x02
     6b0:	3b 81       	ldd	r19, Y+3	; 0x03
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	13 96       	adiw	r26, 0x03	; 3
     6b8:	9c 93       	st	X, r25
     6ba:	8e 93       	st	-X, r24
     6bc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     6be:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	9b 81       	ldd	r25, Y+3	; 0x03
     6c4:	9e 01       	movw	r18, r28
     6c6:	28 0f       	add	r18, r24
     6c8:	39 1f       	adc	r19, r25
     6ca:	e2 17       	cp	r30, r18
     6cc:	f3 07       	cpc	r31, r19
     6ce:	c1 f4       	brne	.+48     	; 0x700 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     6d0:	20 91 f4 07 	lds	r18, 0x07F4	; 0x8007f4 <pxEnd>
     6d4:	30 91 f5 07 	lds	r19, 0x07F5	; 0x8007f5 <pxEnd+0x1>
     6d8:	e2 17       	cp	r30, r18
     6da:	f3 07       	cpc	r31, r19
     6dc:	71 f0       	breq	.+28     	; 0x6fa <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     6de:	22 81       	ldd	r18, Z+2	; 0x02
     6e0:	33 81       	ldd	r19, Z+3	; 0x03
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	9b 83       	std	Y+3, r25	; 0x03
     6e8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6ea:	ed 91       	ld	r30, X+
     6ec:	fc 91       	ld	r31, X
     6ee:	11 97       	sbiw	r26, 0x01	; 1
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	99 83       	std	Y+1, r25	; 0x01
     6f6:	88 83       	st	Y, r24
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6fa:	39 83       	std	Y+1, r19	; 0x01
     6fc:	28 83       	st	Y, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     700:	f9 83       	std	Y+1, r31	; 0x01
     702:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     704:	ca 17       	cp	r28, r26
     706:	db 07       	cpc	r29, r27
     708:	11 f0       	breq	.+4      	; 0x70e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     70a:	cd 93       	st	X+, r28
     70c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     722:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     726:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <pxEnd>
     72a:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pxEnd+0x1>
     72e:	89 2b       	or	r24, r25
     730:	09 f4       	brne	.+2      	; 0x734 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     732:	7d df       	rcall	.-262    	; 0x62e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     734:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     738:	90 91 eb 07 	lds	r25, 0x07EB	; 0x8007eb <__data_end+0x1>
     73c:	80 23       	and	r24, r16
     73e:	91 23       	and	r25, r17
     740:	89 2b       	or	r24, r25
     742:	09 f0       	breq	.+2      	; 0x746 <pvPortMalloc+0x32>
     744:	76 c0       	rjmp	.+236    	; 0x832 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     746:	01 15       	cp	r16, r1
     748:	11 05       	cpc	r17, r1
     74a:	49 f0       	breq	.+18     	; 0x75e <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     74c:	c8 01       	movw	r24, r16
     74e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     750:	08 17       	cp	r16, r24
     752:	19 07       	cpc	r17, r25
     754:	18 f0       	brcs	.+6      	; 0x75c <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     756:	00 e0       	ldi	r16, 0x00	; 0
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	01 c0       	rjmp	.+2      	; 0x75e <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     75c:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     75e:	01 15       	cp	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	09 f4       	brne	.+2      	; 0x766 <pvPortMalloc+0x52>
     764:	69 c0       	rjmp	.+210    	; 0x838 <pvPortMalloc+0x124>
     766:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xFreeBytesRemaining>
     76a:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xFreeBytesRemaining+0x1>
     76e:	80 17       	cp	r24, r16
     770:	91 07       	cpc	r25, r17
     772:	08 f4       	brcc	.+2      	; 0x776 <pvPortMalloc+0x62>
     774:	64 c0       	rjmp	.+200    	; 0x83e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     776:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <xStart>
     77a:	d0 91 f7 07 	lds	r29, 0x07F7	; 0x8007f7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     77e:	e6 ef       	ldi	r30, 0xF6	; 246
     780:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     782:	02 c0       	rjmp	.+4      	; 0x788 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     784:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     786:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	9b 81       	ldd	r25, Y+3	; 0x03
     78c:	80 17       	cp	r24, r16
     78e:	91 07       	cpc	r25, r17
     790:	20 f4       	brcc	.+8      	; 0x79a <pvPortMalloc+0x86>
     792:	88 81       	ld	r24, Y
     794:	99 81       	ldd	r25, Y+1	; 0x01
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	a9 f7       	brne	.-22     	; 0x784 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     79a:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <pxEnd>
     79e:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pxEnd+0x1>
     7a2:	c8 17       	cp	r28, r24
     7a4:	d9 07       	cpc	r29, r25
     7a6:	09 f4       	brne	.+2      	; 0x7aa <pvPortMalloc+0x96>
     7a8:	4d c0       	rjmp	.+154    	; 0x844 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     7aa:	e0 80       	ld	r14, Z
     7ac:	f1 80       	ldd	r15, Z+1	; 0x01
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	e8 0e       	add	r14, r24
     7b2:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     7b4:	88 81       	ld	r24, Y
     7b6:	99 81       	ldd	r25, Y+1	; 0x01
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     7bc:	2a 81       	ldd	r18, Y+2	; 0x02
     7be:	3b 81       	ldd	r19, Y+3	; 0x03
     7c0:	20 1b       	sub	r18, r16
     7c2:	31 0b       	sbc	r19, r17
     7c4:	29 30       	cpi	r18, 0x09	; 9
     7c6:	31 05       	cpc	r19, r1
     7c8:	48 f0       	brcs	.+18     	; 0x7dc <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7ca:	ce 01       	movw	r24, r28
     7cc:	80 0f       	add	r24, r16
     7ce:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7d0:	fc 01       	movw	r30, r24
     7d2:	33 83       	std	Z+3, r19	; 0x03
     7d4:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     7d6:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     7d8:	0a 83       	std	Y+2, r16	; 0x02
     7da:	52 df       	rcall	.-348    	; 0x680 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7dc:	2a 81       	ldd	r18, Y+2	; 0x02
     7de:	3b 81       	ldd	r19, Y+3	; 0x03
     7e0:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xFreeBytesRemaining>
     7e4:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xFreeBytesRemaining+0x1>
     7e8:	82 1b       	sub	r24, r18
     7ea:	93 0b       	sbc	r25, r19
     7ec:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xFreeBytesRemaining+0x1>
     7f0:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     7f4:	40 91 f0 07 	lds	r20, 0x07F0	; 0x8007f0 <xMinimumEverFreeBytesRemaining>
     7f8:	50 91 f1 07 	lds	r21, 0x07F1	; 0x8007f1 <xMinimumEverFreeBytesRemaining+0x1>
     7fc:	84 17       	cp	r24, r20
     7fe:	95 07       	cpc	r25, r21
     800:	20 f4       	brcc	.+8      	; 0x80a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     802:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <xMinimumEverFreeBytesRemaining+0x1>
     806:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     80a:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     80e:	90 91 eb 07 	lds	r25, 0x07EB	; 0x8007eb <__data_end+0x1>
     812:	28 2b       	or	r18, r24
     814:	39 2b       	or	r19, r25
     816:	3b 83       	std	Y+3, r19	; 0x03
     818:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     81a:	19 82       	std	Y+1, r1	; 0x01
     81c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     81e:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <xNumberOfSuccessfulAllocations>
     822:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <xNumberOfSuccessfulAllocations+0x1>
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	90 93 ef 07 	sts	0x07EF, r25	; 0x8007ef <xNumberOfSuccessfulAllocations+0x1>
     82c:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <xNumberOfSuccessfulAllocations>
     830:	0b c0       	rjmp	.+22     	; 0x848 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     832:	e1 2c       	mov	r14, r1
     834:	f1 2c       	mov	r15, r1
     836:	08 c0       	rjmp	.+16     	; 0x848 <pvPortMalloc+0x134>
     838:	e1 2c       	mov	r14, r1
     83a:	f1 2c       	mov	r15, r1
     83c:	05 c0       	rjmp	.+10     	; 0x848 <pvPortMalloc+0x134>
     83e:	e1 2c       	mov	r14, r1
     840:	f1 2c       	mov	r15, r1
     842:	02 c0       	rjmp	.+4      	; 0x848 <pvPortMalloc+0x134>
     844:	e1 2c       	mov	r14, r1
     846:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     848:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     84c:	e1 14       	cp	r14, r1
     84e:	f1 04       	cpc	r15, r1
     850:	11 f4       	brne	.+4      	; 0x856 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     852:	0e 94 a4 1a 	call	0x3548	; 0x3548 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     856:	c7 01       	movw	r24, r14
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	08 95       	ret

00000866 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	91 f1       	breq	.+100    	; 0x8d6 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     872:	ec 01       	movw	r28, r24
     874:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     876:	4a 81       	ldd	r20, Y+2	; 0x02
     878:	5b 81       	ldd	r21, Y+3	; 0x03
     87a:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <__data_end>
     87e:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <__data_end+0x1>
     882:	ba 01       	movw	r22, r20
     884:	62 23       	and	r22, r18
     886:	73 23       	and	r23, r19
     888:	67 2b       	or	r22, r23
     88a:	29 f1       	breq	.+74     	; 0x8d6 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     88c:	68 81       	ld	r22, Y
     88e:	79 81       	ldd	r23, Y+1	; 0x01
     890:	67 2b       	or	r22, r23
     892:	09 f5       	brne	.+66     	; 0x8d6 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     894:	20 95       	com	r18
     896:	30 95       	com	r19
     898:	24 23       	and	r18, r20
     89a:	35 23       	and	r19, r21
     89c:	3b 83       	std	Y+3, r19	; 0x03
     89e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     8a0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	9b 81       	ldd	r25, Y+3	; 0x03
     8a8:	20 91 f2 07 	lds	r18, 0x07F2	; 0x8007f2 <xFreeBytesRemaining>
     8ac:	30 91 f3 07 	lds	r19, 0x07F3	; 0x8007f3 <xFreeBytesRemaining+0x1>
     8b0:	82 0f       	add	r24, r18
     8b2:	93 1f       	adc	r25, r19
     8b4:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xFreeBytesRemaining+0x1>
     8b8:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     8bc:	ce 01       	movw	r24, r28
     8be:	e0 de       	rcall	.-576    	; 0x680 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     8c0:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <xNumberOfSuccessfulFrees>
     8c4:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <xNumberOfSuccessfulFrees+0x1>
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <xNumberOfSuccessfulFrees+0x1>
     8ce:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     8d2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     8e0:	fc 01       	movw	r30, r24
     8e2:	03 96       	adiw	r24, 0x03	; 3
     8e4:	92 83       	std	Z+2, r25	; 0x02
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	4f ef       	ldi	r20, 0xFF	; 255
     8ea:	5f ef       	ldi	r21, 0xFF	; 255
     8ec:	ba 01       	movw	r22, r20
     8ee:	43 83       	std	Z+3, r20	; 0x03
     8f0:	54 83       	std	Z+4, r21	; 0x04
     8f2:	65 83       	std	Z+5, r22	; 0x05
     8f4:	76 83       	std	Z+6, r23	; 0x06
     8f6:	90 87       	std	Z+8, r25	; 0x08
     8f8:	87 83       	std	Z+7, r24	; 0x07
     8fa:	92 87       	std	Z+10, r25	; 0x0a
     8fc:	81 87       	std	Z+9, r24	; 0x09
     8fe:	10 82       	st	Z, r1
     900:	08 95       	ret

00000902 <vListInitialiseItem>:
     902:	fc 01       	movw	r30, r24
     904:	13 86       	std	Z+11, r1	; 0x0b
     906:	12 86       	std	Z+10, r1	; 0x0a
     908:	08 95       	ret

0000090a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     914:	08 81       	ld	r16, Y
     916:	19 81       	ldd	r17, Y+1	; 0x01
     918:	2a 81       	ldd	r18, Y+2	; 0x02
     91a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     91c:	0f 3f       	cpi	r16, 0xFF	; 255
     91e:	4f ef       	ldi	r20, 0xFF	; 255
     920:	14 07       	cpc	r17, r20
     922:	24 07       	cpc	r18, r20
     924:	34 07       	cpc	r19, r20
     926:	21 f4       	brne	.+8      	; 0x930 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     928:	fc 01       	movw	r30, r24
     92a:	a1 85       	ldd	r26, Z+9	; 0x09
     92c:	b2 85       	ldd	r27, Z+10	; 0x0a
     92e:	11 c0       	rjmp	.+34     	; 0x952 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     930:	dc 01       	movw	r26, r24
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	01 c0       	rjmp	.+2      	; 0x938 <vListInsert+0x2e>
     936:	df 01       	movw	r26, r30
     938:	14 96       	adiw	r26, 0x04	; 4
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	15 97       	sbiw	r26, 0x05	; 5
     940:	40 81       	ld	r20, Z
     942:	51 81       	ldd	r21, Z+1	; 0x01
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	04 17       	cp	r16, r20
     94a:	15 07       	cpc	r17, r21
     94c:	26 07       	cpc	r18, r22
     94e:	37 07       	cpc	r19, r23
     950:	90 f7       	brcc	.-28     	; 0x936 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     952:	14 96       	adiw	r26, 0x04	; 4
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	15 97       	sbiw	r26, 0x05	; 5
     95a:	fd 83       	std	Y+5, r31	; 0x05
     95c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     95e:	d7 83       	std	Z+7, r29	; 0x07
     960:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     962:	bf 83       	std	Y+7, r27	; 0x07
     964:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     966:	15 96       	adiw	r26, 0x05	; 5
     968:	dc 93       	st	X, r29
     96a:	ce 93       	st	-X, r28
     96c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     96e:	9b 87       	std	Y+11, r25	; 0x0b
     970:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     972:	fc 01       	movw	r30, r24
     974:	20 81       	ld	r18, Z
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	20 83       	st	Z, r18
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     98a:	a2 85       	ldd	r26, Z+10	; 0x0a
     98c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     98e:	c4 81       	ldd	r28, Z+4	; 0x04
     990:	d5 81       	ldd	r29, Z+5	; 0x05
     992:	86 81       	ldd	r24, Z+6	; 0x06
     994:	97 81       	ldd	r25, Z+7	; 0x07
     996:	9f 83       	std	Y+7, r25	; 0x07
     998:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     99a:	c6 81       	ldd	r28, Z+6	; 0x06
     99c:	d7 81       	ldd	r29, Z+7	; 0x07
     99e:	84 81       	ldd	r24, Z+4	; 0x04
     9a0:	95 81       	ldd	r25, Z+5	; 0x05
     9a2:	9d 83       	std	Y+5, r25	; 0x05
     9a4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	8d 91       	ld	r24, X+
     9aa:	9c 91       	ld	r25, X
     9ac:	12 97       	sbiw	r26, 0x02	; 2
     9ae:	e8 17       	cp	r30, r24
     9b0:	f9 07       	cpc	r31, r25
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     9b4:	86 81       	ldd	r24, Z+6	; 0x06
     9b6:	97 81       	ldd	r25, Z+7	; 0x07
     9b8:	12 96       	adiw	r26, 0x02	; 2
     9ba:	9c 93       	st	X, r25
     9bc:	8e 93       	st	-X, r24
     9be:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     9c0:	13 86       	std	Z+11, r1	; 0x0b
     9c2:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     9c4:	8c 91       	ld	r24, X
     9c6:	81 50       	subi	r24, 0x01	; 1
     9c8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     9ca:	8c 91       	ld	r24, X
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     9d2:	a8 95       	wdr
     9d4:	90 ec       	ldi	r25, 0xC0	; 192
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	a8 95       	wdr
     9de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9e8:	08 95       	ret

000009ea <pxPortInitialiseStack>:
     9ea:	fc 01       	movw	r30, r24
     9ec:	60 83       	st	Z, r22
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	70 83       	st	Z, r23
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	10 82       	st	Z, r1
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	10 82       	st	Z, r1
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	20 e8       	ldi	r18, 0x80	; 128
     9fe:	20 83       	st	Z, r18
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	10 82       	st	Z, r1
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	10 82       	st	Z, r1
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	10 82       	st	Z, r1
     a0c:	77 97       	sbiw	r30, 0x17	; 23
     a0e:	40 83       	st	Z, r20
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	50 83       	st	Z, r21
     a14:	86 97       	sbiw	r24, 0x26	; 38
     a16:	08 95       	ret

00000a18 <xPortStartScheduler>:
     a18:	dc df       	rcall	.-72     	; 0x9d2 <prvSetupTimerInterrupt>
     a1a:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
     a1e:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
     a22:	cd 91       	ld	r28, X+
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	dd 91       	ld	r29, X+
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	6f 90       	pop	r6
     a5e:	5f 90       	pop	r5
     a60:	4f 90       	pop	r4
     a62:	3f 90       	pop	r3
     a64:	2f 90       	pop	r2
     a66:	1f 90       	pop	r1
     a68:	0f 90       	pop	r0
     a6a:	0c be       	out	0x3c, r0	; 60
     a6c:	0f 90       	pop	r0
     a6e:	0b be       	out	0x3b, r0	; 59
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	08 95       	ret
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	08 95       	ret

00000a7c <vPortYield>:
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	0f 92       	push	r0
     a84:	0b b6       	in	r0, 0x3b	; 59
     a86:	0f 92       	push	r0
     a88:	0c b6       	in	r0, 0x3c	; 60
     a8a:	0f 92       	push	r0
     a8c:	1f 92       	push	r1
     a8e:	11 24       	eor	r1, r1
     a90:	2f 92       	push	r2
     a92:	3f 92       	push	r3
     a94:	4f 92       	push	r4
     a96:	5f 92       	push	r5
     a98:	6f 92       	push	r6
     a9a:	7f 92       	push	r7
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
     acc:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
     ad0:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
     ad4:	0d b6       	in	r0, 0x3d	; 61
     ad6:	0d 92       	st	X+, r0
     ad8:	0e b6       	in	r0, 0x3e	; 62
     ada:	0d 92       	st	X+, r0
     adc:	0e 94 44 11 	call	0x2288	; 0x2288 <vTaskSwitchContext>
     ae0:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
     ae4:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
     ae8:	cd 91       	ld	r28, X+
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	dd 91       	ld	r29, X+
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	7f 90       	pop	r7
     b22:	6f 90       	pop	r6
     b24:	5f 90       	pop	r5
     b26:	4f 90       	pop	r4
     b28:	3f 90       	pop	r3
     b2a:	2f 90       	pop	r2
     b2c:	1f 90       	pop	r1
     b2e:	0f 90       	pop	r0
     b30:	0c be       	out	0x3c, r0	; 60
     b32:	0f 90       	pop	r0
     b34:	0b be       	out	0x3b, r0	; 59
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	08 95       	ret

00000b3e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	0f 92       	push	r0
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	0c b6       	in	r0, 0x3c	; 60
     b4c:	0f 92       	push	r0
     b4e:	1f 92       	push	r1
     b50:	11 24       	eor	r1, r1
     b52:	2f 92       	push	r2
     b54:	3f 92       	push	r3
     b56:	4f 92       	push	r4
     b58:	5f 92       	push	r5
     b5a:	6f 92       	push	r6
     b5c:	7f 92       	push	r7
     b5e:	8f 92       	push	r8
     b60:	9f 92       	push	r9
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ef 93       	push	r30
     b8c:	ff 93       	push	r31
     b8e:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
     b92:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
     b96:	0d b6       	in	r0, 0x3d	; 61
     b98:	0d 92       	st	X+, r0
     b9a:	0e b6       	in	r0, 0x3e	; 62
     b9c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b9e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ba0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <xTaskIncrementTick>
     ba4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ba6:	0e 94 44 11 	call	0x2288	; 0x2288 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     baa:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
     bae:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
     bb2:	cd 91       	ld	r28, X+
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	dd 91       	ld	r29, X+
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	ff 91       	pop	r31
     bbc:	ef 91       	pop	r30
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	bf 90       	pop	r11
     be4:	af 90       	pop	r10
     be6:	9f 90       	pop	r9
     be8:	8f 90       	pop	r8
     bea:	7f 90       	pop	r7
     bec:	6f 90       	pop	r6
     bee:	5f 90       	pop	r5
     bf0:	4f 90       	pop	r4
     bf2:	3f 90       	pop	r3
     bf4:	2f 90       	pop	r2
     bf6:	1f 90       	pop	r1
     bf8:	0f 90       	pop	r0
     bfa:	0c be       	out	0x3c, r0	; 60
     bfc:	0f 90       	pop	r0
     bfe:	0b be       	out	0x3b, r0	; 59
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c06:	08 95       	ret

00000c08 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     c08:	9a df       	rcall	.-204    	; 0xb3e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     c0a:	18 95       	reti

00000c0c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	0f 92       	push	r0
     c12:	fc 01       	movw	r30, r24
     c14:	86 8d       	ldd	r24, Z+30	; 0x1e
     c16:	81 11       	cpse	r24, r1
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <prvIsQueueEmpty+0x12>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <prvIsQueueEmpty+0x14>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	08 95       	ret

00000c26 <prvIsQueueFull>:
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	0f 92       	push	r0
     c2c:	fc 01       	movw	r30, r24
     c2e:	26 8d       	ldd	r18, Z+30	; 0x1e
     c30:	87 8d       	ldd	r24, Z+31	; 0x1f
     c32:	28 13       	cpse	r18, r24
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <prvIsQueueFull+0x14>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <prvIsQueueFull+0x16>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	08 95       	ret

00000c42 <prvCopyDataToQueue>:
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24
     c4c:	04 2f       	mov	r16, r20
     c4e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c50:	48 a1       	ldd	r20, Y+32	; 0x20
     c52:	41 11       	cpse	r20, r1
     c54:	0c c0       	rjmp	.+24     	; 0xc6e <prvCopyDataToQueue+0x2c>
     c56:	88 81       	ld	r24, Y
     c58:	99 81       	ldd	r25, Y+1	; 0x01
     c5a:	89 2b       	or	r24, r25
     c5c:	09 f0       	breq	.+2      	; 0xc60 <prvCopyDataToQueue+0x1e>
     c5e:	42 c0       	rjmp	.+132    	; 0xce4 <prvCopyDataToQueue+0xa2>
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	9d 81       	ldd	r25, Y+5	; 0x05
     c64:	0e 94 39 14 	call	0x2872	; 0x2872 <xTaskPriorityDisinherit>
     c68:	1d 82       	std	Y+5, r1	; 0x05
     c6a:	1c 82       	std	Y+4, r1	; 0x04
     c6c:	42 c0       	rjmp	.+132    	; 0xcf2 <prvCopyDataToQueue+0xb0>
     c6e:	01 11       	cpse	r16, r1
     c70:	17 c0       	rjmp	.+46     	; 0xca0 <prvCopyDataToQueue+0x5e>
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
     c7c:	28 a1       	ldd	r18, Y+32	; 0x20
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	82 0f       	add	r24, r18
     c84:	91 1d       	adc	r25, r1
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02
     c8a:	2c 81       	ldd	r18, Y+4	; 0x04
     c8c:	3d 81       	ldd	r19, Y+5	; 0x05
     c8e:	82 17       	cp	r24, r18
     c90:	93 07       	cpc	r25, r19
     c92:	50 f1       	brcs	.+84     	; 0xce8 <prvCopyDataToQueue+0xa6>
     c94:	88 81       	ld	r24, Y
     c96:	99 81       	ldd	r25, Y+1	; 0x01
     c98:	9b 83       	std	Y+3, r25	; 0x03
     c9a:	8a 83       	std	Y+2, r24	; 0x02
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	29 c0       	rjmp	.+82     	; 0xcf2 <prvCopyDataToQueue+0xb0>
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	9f 81       	ldd	r25, Y+7	; 0x07
     ca6:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
     caa:	88 a1       	ldd	r24, Y+32	; 0x20
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	91 95       	neg	r25
     cb0:	81 95       	neg	r24
     cb2:	91 09       	sbc	r25, r1
     cb4:	2e 81       	ldd	r18, Y+6	; 0x06
     cb6:	3f 81       	ldd	r19, Y+7	; 0x07
     cb8:	28 0f       	add	r18, r24
     cba:	39 1f       	adc	r19, r25
     cbc:	3f 83       	std	Y+7, r19	; 0x07
     cbe:	2e 83       	std	Y+6, r18	; 0x06
     cc0:	48 81       	ld	r20, Y
     cc2:	59 81       	ldd	r21, Y+1	; 0x01
     cc4:	24 17       	cp	r18, r20
     cc6:	35 07       	cpc	r19, r21
     cc8:	30 f4       	brcc	.+12     	; 0xcd6 <prvCopyDataToQueue+0x94>
     cca:	2c 81       	ldd	r18, Y+4	; 0x04
     ccc:	3d 81       	ldd	r19, Y+5	; 0x05
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	9f 83       	std	Y+7, r25	; 0x07
     cd4:	8e 83       	std	Y+6, r24	; 0x06
     cd6:	02 30       	cpi	r16, 0x02	; 2
     cd8:	49 f4       	brne	.+18     	; 0xcec <prvCopyDataToQueue+0xaa>
     cda:	11 23       	and	r17, r17
     cdc:	49 f0       	breq	.+18     	; 0xcf0 <prvCopyDataToQueue+0xae>
     cde:	11 50       	subi	r17, 0x01	; 1
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <prvCopyDataToQueue+0xb0>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <prvCopyDataToQueue+0xb0>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <prvCopyDataToQueue+0xb0>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <prvCopyDataToQueue+0xb0>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	1f 5f       	subi	r17, 0xFF	; 255
     cf4:	1e 8f       	std	Y+30, r17	; 0x1e
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <prvCopyDataFromQueue>:
     d00:	fc 01       	movw	r30, r24
     d02:	40 a1       	ldd	r20, Z+32	; 0x20
     d04:	44 23       	and	r20, r20
     d06:	a9 f0       	breq	.+42     	; 0xd32 <prvCopyDataFromQueue+0x32>
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	26 81       	ldd	r18, Z+6	; 0x06
     d0c:	37 81       	ldd	r19, Z+7	; 0x07
     d0e:	24 0f       	add	r18, r20
     d10:	35 1f       	adc	r19, r21
     d12:	37 83       	std	Z+7, r19	; 0x07
     d14:	26 83       	std	Z+6, r18	; 0x06
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	95 81       	ldd	r25, Z+5	; 0x05
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	20 f0       	brcs	.+8      	; 0xd28 <prvCopyDataFromQueue+0x28>
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	97 83       	std	Z+7, r25	; 0x07
     d26:	86 83       	std	Z+6, r24	; 0x06
     d28:	cb 01       	movw	r24, r22
     d2a:	66 81       	ldd	r22, Z+6	; 0x06
     d2c:	77 81       	ldd	r23, Z+7	; 0x07
     d2e:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <memcpy>
     d32:	08 95       	ret

00000d34 <prvUnlockQueue>:
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	ec 01       	movw	r28, r24
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	0f 92       	push	r0
     d42:	1a a1       	ldd	r17, Y+34	; 0x22
     d44:	0b c0       	rjmp	.+22     	; 0xd5c <prvUnlockQueue+0x28>
     d46:	8b 89       	ldd	r24, Y+19	; 0x13
     d48:	88 23       	and	r24, r24
     d4a:	51 f0       	breq	.+20     	; 0xd60 <prvUnlockQueue+0x2c>
     d4c:	ce 01       	movw	r24, r28
     d4e:	43 96       	adiw	r24, 0x13	; 19
     d50:	0e 94 4c 12 	call	0x2498	; 0x2498 <xTaskRemoveFromEventList>
     d54:	81 11       	cpse	r24, r1
     d56:	0e 94 22 14 	call	0x2844	; 0x2844 <vTaskMissedYield>
     d5a:	11 50       	subi	r17, 0x01	; 1
     d5c:	11 16       	cp	r1, r17
     d5e:	9c f3       	brlt	.-26     	; 0xd46 <prvUnlockQueue+0x12>
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	8a a3       	std	Y+34, r24	; 0x22
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	0f 92       	push	r0
     d6e:	19 a1       	ldd	r17, Y+33	; 0x21
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <prvUnlockQueue+0x54>
     d72:	88 85       	ldd	r24, Y+8	; 0x08
     d74:	88 23       	and	r24, r24
     d76:	51 f0       	breq	.+20     	; 0xd8c <prvUnlockQueue+0x58>
     d78:	ce 01       	movw	r24, r28
     d7a:	08 96       	adiw	r24, 0x08	; 8
     d7c:	0e 94 4c 12 	call	0x2498	; 0x2498 <xTaskRemoveFromEventList>
     d80:	81 11       	cpse	r24, r1
     d82:	0e 94 22 14 	call	0x2844	; 0x2844 <vTaskMissedYield>
     d86:	11 50       	subi	r17, 0x01	; 1
     d88:	11 16       	cp	r1, r17
     d8a:	9c f3       	brlt	.-26     	; 0xd72 <prvUnlockQueue+0x3e>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	89 a3       	std	Y+33, r24	; 0x21
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	08 95       	ret

00000d9c <xQueueGenericReset>:
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	ec 01       	movw	r28, r24
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	0f 92       	push	r0
     da8:	e8 81       	ld	r30, Y
     daa:	f9 81       	ldd	r31, Y+1	; 0x01
     dac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dae:	28 a1       	ldd	r18, Y+32	; 0x20
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	82 9f       	mul	r24, r18
     db6:	a0 01       	movw	r20, r0
     db8:	83 9f       	mul	r24, r19
     dba:	50 0d       	add	r21, r0
     dbc:	92 9f       	mul	r25, r18
     dbe:	50 0d       	add	r21, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	4e 0f       	add	r20, r30
     dc4:	5f 1f       	adc	r21, r31
     dc6:	5d 83       	std	Y+5, r21	; 0x05
     dc8:	4c 83       	std	Y+4, r20	; 0x04
     dca:	1e 8e       	std	Y+30, r1	; 0x1e
     dcc:	fb 83       	std	Y+3, r31	; 0x03
     dce:	ea 83       	std	Y+2, r30	; 0x02
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	28 9f       	mul	r18, r24
     dd4:	a0 01       	movw	r20, r0
     dd6:	29 9f       	mul	r18, r25
     dd8:	50 0d       	add	r21, r0
     dda:	38 9f       	mul	r19, r24
     ddc:	50 0d       	add	r21, r0
     dde:	11 24       	eor	r1, r1
     de0:	cf 01       	movw	r24, r30
     de2:	84 0f       	add	r24, r20
     de4:	95 1f       	adc	r25, r21
     de6:	9f 83       	std	Y+7, r25	; 0x07
     de8:	8e 83       	std	Y+6, r24	; 0x06
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	89 a3       	std	Y+33, r24	; 0x21
     dee:	8a a3       	std	Y+34, r24	; 0x22
     df0:	61 11       	cpse	r22, r1
     df2:	0b c0       	rjmp	.+22     	; 0xe0a <xQueueGenericReset+0x6e>
     df4:	88 85       	ldd	r24, Y+8	; 0x08
     df6:	88 23       	and	r24, r24
     df8:	71 f0       	breq	.+28     	; 0xe16 <xQueueGenericReset+0x7a>
     dfa:	ce 01       	movw	r24, r28
     dfc:	08 96       	adiw	r24, 0x08	; 8
     dfe:	0e 94 4c 12 	call	0x2498	; 0x2498 <xTaskRemoveFromEventList>
     e02:	88 23       	and	r24, r24
     e04:	41 f0       	breq	.+16     	; 0xe16 <xQueueGenericReset+0x7a>
     e06:	3a de       	rcall	.-908    	; 0xa7c <vPortYield>
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <xQueueGenericReset+0x7a>
     e0a:	ce 01       	movw	r24, r28
     e0c:	08 96       	adiw	r24, 0x08	; 8
     e0e:	68 dd       	rcall	.-1328   	; 0x8e0 <vListInitialise>
     e10:	ce 01       	movw	r24, r28
     e12:	43 96       	adiw	r24, 0x13	; 19
     e14:	65 dd       	rcall	.-1334   	; 0x8e0 <vListInitialise>
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <prvInitialiseNewQueue>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	f8 01       	movw	r30, r16
     e28:	61 11       	cpse	r22, r1
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <prvInitialiseNewQueue+0x10>
     e2c:	11 83       	std	Z+1, r17	; 0x01
     e2e:	00 83       	st	Z, r16
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <prvInitialiseNewQueue+0x14>
     e32:	51 83       	std	Z+1, r21	; 0x01
     e34:	40 83       	st	Z, r20
     e36:	87 8f       	std	Z+31, r24	; 0x1f
     e38:	60 a3       	std	Z+32, r22	; 0x20
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	cf 01       	movw	r24, r30
     e3e:	ae df       	rcall	.-164    	; 0xd9c <xQueueGenericReset>
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <xQueueGenericCreate>:
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	f8 2e       	mov	r15, r24
     e56:	e6 2e       	mov	r14, r22
     e58:	d4 2e       	mov	r13, r20
     e5a:	86 9f       	mul	r24, r22
     e5c:	c0 01       	movw	r24, r0
     e5e:	11 24       	eor	r1, r1
     e60:	83 96       	adiw	r24, 0x23	; 35
     e62:	58 dc       	rcall	.-1872   	; 0x714 <pvPortMalloc>
     e64:	ec 01       	movw	r28, r24
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	41 f0       	breq	.+16     	; 0xe7a <xQueueGenericCreate+0x34>
     e6a:	8c 01       	movw	r16, r24
     e6c:	2d 2d       	mov	r18, r13
     e6e:	ac 01       	movw	r20, r24
     e70:	4d 5d       	subi	r20, 0xDD	; 221
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	6e 2d       	mov	r22, r14
     e76:	8f 2d       	mov	r24, r15
     e78:	d4 df       	rcall	.-88     	; 0xe22 <prvInitialiseNewQueue>
     e7a:	ce 01       	movw	r24, r28
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	08 95       	ret

00000e8c <xQueueGenericSend>:
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	29 97       	sbiw	r28, 0x09	; 9
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	7c 01       	movw	r14, r24
     eae:	6b 01       	movw	r12, r22
     eb0:	2e 83       	std	Y+6, r18	; 0x06
     eb2:	3f 83       	std	Y+7, r19	; 0x07
     eb4:	48 87       	std	Y+8, r20	; 0x08
     eb6:	59 87       	std	Y+9, r21	; 0x09
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	0f 92       	push	r0
     ec0:	f7 01       	movw	r30, r14
     ec2:	96 8d       	ldd	r25, Z+30	; 0x1e
     ec4:	87 8d       	ldd	r24, Z+31	; 0x1f
     ec6:	98 17       	cp	r25, r24
     ec8:	10 f0       	brcs	.+4      	; 0xece <xQueueGenericSend+0x42>
     eca:	02 30       	cpi	r16, 0x02	; 2
     ecc:	b1 f4       	brne	.+44     	; 0xefa <xQueueGenericSend+0x6e>
     ece:	40 2f       	mov	r20, r16
     ed0:	b6 01       	movw	r22, r12
     ed2:	c7 01       	movw	r24, r14
     ed4:	b6 de       	rcall	.-660    	; 0xc42 <prvCopyDataToQueue>
     ed6:	f7 01       	movw	r30, r14
     ed8:	93 89       	ldd	r25, Z+19	; 0x13
     eda:	99 23       	and	r25, r25
     edc:	41 f0       	breq	.+16     	; 0xeee <xQueueGenericSend+0x62>
     ede:	c7 01       	movw	r24, r14
     ee0:	43 96       	adiw	r24, 0x13	; 19
     ee2:	0e 94 4c 12 	call	0x2498	; 0x2498 <xTaskRemoveFromEventList>
     ee6:	88 23       	and	r24, r24
     ee8:	21 f0       	breq	.+8      	; 0xef2 <xQueueGenericSend+0x66>
     eea:	c8 dd       	rcall	.-1136   	; 0xa7c <vPortYield>
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <xQueueGenericSend+0x66>
     eee:	81 11       	cpse	r24, r1
     ef0:	c5 dd       	rcall	.-1142   	; 0xa7c <vPortYield>
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	4c c0       	rjmp	.+152    	; 0xf92 <xQueueGenericSend+0x106>
     efa:	8e 81       	ldd	r24, Y+6	; 0x06
     efc:	9f 81       	ldd	r25, Y+7	; 0x07
     efe:	a8 85       	ldd	r26, Y+8	; 0x08
     f00:	b9 85       	ldd	r27, Y+9	; 0x09
     f02:	89 2b       	or	r24, r25
     f04:	8a 2b       	or	r24, r26
     f06:	8b 2b       	or	r24, r27
     f08:	21 f4       	brne	.+8      	; 0xf12 <xQueueGenericSend+0x86>
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	40 c0       	rjmp	.+128    	; 0xf92 <xQueueGenericSend+0x106>
     f12:	11 11       	cpse	r17, r1
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <xQueueGenericSend+0x94>
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	0e 94 ab 13 	call	0x2756	; 0x2756 <vTaskInternalSetTimeOutState>
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	15 d7       	rcall	.+3626   	; 0x1d50 <vTaskSuspendAll>
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	0f 92       	push	r0
     f2c:	f7 01       	movw	r30, r14
     f2e:	81 a1       	ldd	r24, Z+33	; 0x21
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	09 f4       	brne	.+2      	; 0xf36 <xQueueGenericSend+0xaa>
     f34:	11 a2       	std	Z+33, r1	; 0x21
     f36:	f7 01       	movw	r30, r14
     f38:	82 a1       	ldd	r24, Z+34	; 0x22
     f3a:	8f 3f       	cpi	r24, 0xFF	; 255
     f3c:	09 f4       	brne	.+2      	; 0xf40 <xQueueGenericSend+0xb4>
     f3e:	12 a2       	std	Z+34, r1	; 0x22
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	be 01       	movw	r22, r28
     f46:	6a 5f       	subi	r22, 0xFA	; 250
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 bc 13 	call	0x2778	; 0x2778 <xTaskCheckForTimeOut>
     f52:	81 11       	cpse	r24, r1
     f54:	19 c0       	rjmp	.+50     	; 0xf88 <xQueueGenericSend+0xfc>
     f56:	c7 01       	movw	r24, r14
     f58:	66 de       	rcall	.-820    	; 0xc26 <prvIsQueueFull>
     f5a:	88 23       	and	r24, r24
     f5c:	81 f0       	breq	.+32     	; 0xf7e <xQueueGenericSend+0xf2>
     f5e:	4e 81       	ldd	r20, Y+6	; 0x06
     f60:	5f 81       	ldd	r21, Y+7	; 0x07
     f62:	68 85       	ldd	r22, Y+8	; 0x08
     f64:	79 85       	ldd	r23, Y+9	; 0x09
     f66:	c7 01       	movw	r24, r14
     f68:	08 96       	adiw	r24, 0x08	; 8
     f6a:	0e 94 a9 11 	call	0x2352	; 0x2352 <vTaskPlaceOnEventList>
     f6e:	c7 01       	movw	r24, r14
     f70:	e1 de       	rcall	.-574    	; 0xd34 <prvUnlockQueue>
     f72:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
     f76:	81 11       	cpse	r24, r1
     f78:	a0 cf       	rjmp	.-192    	; 0xeba <xQueueGenericSend+0x2e>
     f7a:	80 dd       	rcall	.-1280   	; 0xa7c <vPortYield>
     f7c:	9e cf       	rjmp	.-196    	; 0xeba <xQueueGenericSend+0x2e>
     f7e:	c7 01       	movw	r24, r14
     f80:	d9 de       	rcall	.-590    	; 0xd34 <prvUnlockQueue>
     f82:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
     f86:	99 cf       	rjmp	.-206    	; 0xeba <xQueueGenericSend+0x2e>
     f88:	c7 01       	movw	r24, r14
     f8a:	d4 de       	rcall	.-600    	; 0xd34 <prvUnlockQueue>
     f8c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	29 96       	adiw	r28, 0x09	; 9
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	08 95       	ret

00000fb0 <prvInitialiseMutex>:
     fb0:	0f 93       	push	r16
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f0       	breq	.+26     	; 0xfd0 <prvInitialiseMutex+0x20>
     fb6:	fc 01       	movw	r30, r24
     fb8:	15 82       	std	Z+5, r1	; 0x05
     fba:	14 82       	std	Z+4, r1	; 0x04
     fbc:	11 82       	std	Z+1, r1	; 0x01
     fbe:	10 82       	st	Z, r1
     fc0:	16 82       	std	Z+6, r1	; 0x06
     fc2:	00 e0       	ldi	r16, 0x00	; 0
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	5e df       	rcall	.-324    	; 0xe8c <xQueueGenericSend>
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <xQueueCreateMutex>:
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	48 2f       	mov	r20, r24
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	33 df       	rcall	.-410    	; 0xe46 <xQueueGenericCreate>
     fe0:	ec 01       	movw	r28, r24
     fe2:	e6 df       	rcall	.-52     	; 0xfb0 <prvInitialiseMutex>
     fe4:	ce 01       	movw	r24, r28
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <xQueueGenericSendFromISR>:
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	8a 01       	movw	r16, r20
     ffa:	fc 01       	movw	r30, r24
     ffc:	56 8d       	ldd	r21, Z+30	; 0x1e
     ffe:	37 8d       	ldd	r19, Z+31	; 0x1f
    1000:	53 17       	cp	r21, r19
    1002:	10 f0       	brcs	.+4      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	f9 f4       	brne	.+62     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    1008:	42 2f       	mov	r20, r18
    100a:	78 01       	movw	r14, r16
    100c:	ec 01       	movw	r28, r24
    100e:	1a a1       	ldd	r17, Y+34	; 0x22
    1010:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1012:	ce 01       	movw	r24, r28
    1014:	16 de       	rcall	.-980    	; 0xc42 <prvCopyDataToQueue>
    1016:	1f 3f       	cpi	r17, 0xFF	; 255
    1018:	81 f4       	brne	.+32     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    101a:	8b 89       	ldd	r24, Y+19	; 0x13
    101c:	88 23       	and	r24, r24
    101e:	a9 f0       	breq	.+42     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1020:	ce 01       	movw	r24, r28
    1022:	43 96       	adiw	r24, 0x13	; 19
    1024:	0e 94 4c 12 	call	0x2498	; 0x2498 <xTaskRemoveFromEventList>
    1028:	88 23       	and	r24, r24
    102a:	89 f0       	breq	.+34     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    102c:	e1 14       	cp	r14, r1
    102e:	f1 04       	cpc	r15, r1
    1030:	81 f0       	breq	.+32     	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	f7 01       	movw	r30, r14
    1036:	80 83       	st	Z, r24
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    103a:	ff 24       	eor	r15, r15
    103c:	f3 94       	inc	r15
    103e:	f1 0e       	add	r15, r17
    1040:	fa a2       	std	Y+34, r15	; 0x22
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	08 95       	ret

00001062 <xQueueReceive>:
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	29 97       	sbiw	r28, 0x09	; 9
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	8c 01       	movw	r16, r24
    1084:	6b 01       	movw	r12, r22
    1086:	2e 83       	std	Y+6, r18	; 0x06
    1088:	3f 83       	std	Y+7, r19	; 0x07
    108a:	48 87       	std	Y+8, r20	; 0x08
    108c:	59 87       	std	Y+9, r21	; 0x09
    108e:	e1 2c       	mov	r14, r1
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	0f 92       	push	r0
    1096:	f8 01       	movw	r30, r16
    1098:	f6 8c       	ldd	r15, Z+30	; 0x1e
    109a:	ff 20       	and	r15, r15
    109c:	99 f0       	breq	.+38     	; 0x10c4 <xQueueReceive+0x62>
    109e:	b6 01       	movw	r22, r12
    10a0:	c8 01       	movw	r24, r16
    10a2:	2e de       	rcall	.-932    	; 0xd00 <prvCopyDataFromQueue>
    10a4:	fa 94       	dec	r15
    10a6:	f8 01       	movw	r30, r16
    10a8:	f6 8e       	std	Z+30, r15	; 0x1e
    10aa:	80 85       	ldd	r24, Z+8	; 0x08
    10ac:	88 23       	and	r24, r24
    10ae:	31 f0       	breq	.+12     	; 0x10bc <xQueueReceive+0x5a>
    10b0:	c8 01       	movw	r24, r16
    10b2:	08 96       	adiw	r24, 0x08	; 8
    10b4:	0e 94 4c 12 	call	0x2498	; 0x2498 <xTaskRemoveFromEventList>
    10b8:	81 11       	cpse	r24, r1
    10ba:	e0 dc       	rcall	.-1600   	; 0xa7c <vPortYield>
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	4f c0       	rjmp	.+158    	; 0x1162 <xQueueReceive+0x100>
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	9f 81       	ldd	r25, Y+7	; 0x07
    10c8:	a8 85       	ldd	r26, Y+8	; 0x08
    10ca:	b9 85       	ldd	r27, Y+9	; 0x09
    10cc:	89 2b       	or	r24, r25
    10ce:	8a 2b       	or	r24, r26
    10d0:	8b 2b       	or	r24, r27
    10d2:	21 f4       	brne	.+8      	; 0x10dc <xQueueReceive+0x7a>
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	43 c0       	rjmp	.+134    	; 0x1162 <xQueueReceive+0x100>
    10dc:	e1 10       	cpse	r14, r1
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <xQueueReceive+0x8a>
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 ab 13 	call	0x2756	; 0x2756 <vTaskInternalSetTimeOutState>
    10e8:	ee 24       	eor	r14, r14
    10ea:	e3 94       	inc	r14
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	2f d6       	rcall	.+3166   	; 0x1d50 <vTaskSuspendAll>
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
    10f8:	f8 01       	movw	r30, r16
    10fa:	81 a1       	ldd	r24, Z+33	; 0x21
    10fc:	8f 3f       	cpi	r24, 0xFF	; 255
    10fe:	09 f4       	brne	.+2      	; 0x1102 <xQueueReceive+0xa0>
    1100:	11 a2       	std	Z+33, r1	; 0x21
    1102:	f8 01       	movw	r30, r16
    1104:	82 a1       	ldd	r24, Z+34	; 0x22
    1106:	8f 3f       	cpi	r24, 0xFF	; 255
    1108:	09 f4       	brne	.+2      	; 0x110c <xQueueReceive+0xaa>
    110a:	12 a2       	std	Z+34, r1	; 0x22
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	be 01       	movw	r22, r28
    1112:	6a 5f       	subi	r22, 0xFA	; 250
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	ce 01       	movw	r24, r28
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	0e 94 bc 13 	call	0x2778	; 0x2778 <xTaskCheckForTimeOut>
    111e:	81 11       	cpse	r24, r1
    1120:	17 c0       	rjmp	.+46     	; 0x1150 <xQueueReceive+0xee>
    1122:	c8 01       	movw	r24, r16
    1124:	73 dd       	rcall	.-1306   	; 0xc0c <prvIsQueueEmpty>
    1126:	88 23       	and	r24, r24
    1128:	79 f0       	breq	.+30     	; 0x1148 <xQueueReceive+0xe6>
    112a:	4e 81       	ldd	r20, Y+6	; 0x06
    112c:	5f 81       	ldd	r21, Y+7	; 0x07
    112e:	68 85       	ldd	r22, Y+8	; 0x08
    1130:	79 85       	ldd	r23, Y+9	; 0x09
    1132:	c8 01       	movw	r24, r16
    1134:	43 96       	adiw	r24, 0x13	; 19
    1136:	0e 94 a9 11 	call	0x2352	; 0x2352 <vTaskPlaceOnEventList>
    113a:	c8 01       	movw	r24, r16
    113c:	fb dd       	rcall	.-1034   	; 0xd34 <prvUnlockQueue>
    113e:	48 d7       	rcall	.+3728   	; 0x1fd0 <xTaskResumeAll>
    1140:	81 11       	cpse	r24, r1
    1142:	a6 cf       	rjmp	.-180    	; 0x1090 <xQueueReceive+0x2e>
    1144:	9b dc       	rcall	.-1738   	; 0xa7c <vPortYield>
    1146:	a4 cf       	rjmp	.-184    	; 0x1090 <xQueueReceive+0x2e>
    1148:	c8 01       	movw	r24, r16
    114a:	f4 dd       	rcall	.-1048   	; 0xd34 <prvUnlockQueue>
    114c:	41 d7       	rcall	.+3714   	; 0x1fd0 <xTaskResumeAll>
    114e:	a0 cf       	rjmp	.-192    	; 0x1090 <xQueueReceive+0x2e>
    1150:	c8 01       	movw	r24, r16
    1152:	f0 dd       	rcall	.-1056   	; 0xd34 <prvUnlockQueue>
    1154:	3d d7       	rcall	.+3706   	; 0x1fd0 <xTaskResumeAll>
    1156:	c8 01       	movw	r24, r16
    1158:	59 dd       	rcall	.-1358   	; 0xc0c <prvIsQueueEmpty>
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <xQueueReceive+0xfe>
    115e:	98 cf       	rjmp	.-208    	; 0x1090 <xQueueReceive+0x2e>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	29 96       	adiw	r28, 0x09	; 9
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
    117e:	08 95       	ret

00001180 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	0f 92       	push	r0
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	8f 3f       	cpi	r24, 0xFF	; 255
    1190:	09 f4       	brne	.+2      	; 0x1194 <vQueueWaitForMessageRestricted+0x14>
    1192:	19 a2       	std	Y+33, r1	; 0x21
    1194:	8a a1       	ldd	r24, Y+34	; 0x22
    1196:	8f 3f       	cpi	r24, 0xFF	; 255
    1198:	09 f4       	brne	.+2      	; 0x119c <vQueueWaitForMessageRestricted+0x1c>
    119a:	1a a2       	std	Y+34, r1	; 0x22
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a2:	81 11       	cpse	r24, r1
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11a6:	ce 01       	movw	r24, r28
    11a8:	43 96       	adiw	r24, 0x13	; 19
    11aa:	0e 94 0a 12 	call	0x2414	; 0x2414 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11ae:	ce 01       	movw	r24, r28
    11b0:	c1 dd       	rcall	.-1150   	; 0xd34 <prvUnlockQueue>
    }
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    11b8:	fc 01       	movw	r30, r24
    11ba:	44 81       	ldd	r20, Z+4	; 0x04
    11bc:	55 81       	ldd	r21, Z+5	; 0x05
    11be:	22 81       	ldd	r18, Z+2	; 0x02
    11c0:	33 81       	ldd	r19, Z+3	; 0x03
    11c2:	24 0f       	add	r18, r20
    11c4:	35 1f       	adc	r19, r21
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	b9 01       	movw	r22, r18
    11cc:	68 1b       	sub	r22, r24
    11ce:	79 0b       	sbc	r23, r25
    11d0:	cb 01       	movw	r24, r22
    11d2:	64 17       	cp	r22, r20
    11d4:	75 07       	cpc	r23, r21
    11d6:	10 f0       	brcs	.+4      	; 0x11dc <prvBytesInBuffer+0x24>
    11d8:	84 1b       	sub	r24, r20
    11da:	95 0b       	sbc	r25, r21
    11dc:	08 95       	ret

000011de <prvInitialiseNewStreamBuffer>:
    11de:	0f 93       	push	r16
    11e0:	fc 01       	movw	r30, r24
    11e2:	8f e0       	ldi	r24, 0x0F	; 15
    11e4:	df 01       	movw	r26, r30
    11e6:	1d 92       	st	X+, r1
    11e8:	8a 95       	dec	r24
    11ea:	e9 f7       	brne	.-6      	; 0x11e6 <prvInitialiseNewStreamBuffer+0x8>
    11ec:	75 87       	std	Z+13, r23	; 0x0d
    11ee:	64 87       	std	Z+12, r22	; 0x0c
    11f0:	55 83       	std	Z+5, r21	; 0x05
    11f2:	44 83       	std	Z+4, r20	; 0x04
    11f4:	37 83       	std	Z+7, r19	; 0x07
    11f6:	26 83       	std	Z+6, r18	; 0x06
    11f8:	06 87       	std	Z+14, r16	; 0x0e
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <prvWriteBytesToBuffer>:
    11fe:	af 92       	push	r10
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	6c 01       	movw	r12, r24
    1214:	5b 01       	movw	r10, r22
    1216:	7a 01       	movw	r14, r20
    1218:	fc 01       	movw	r30, r24
    121a:	c2 81       	ldd	r28, Z+2	; 0x02
    121c:	d3 81       	ldd	r29, Z+3	; 0x03
    121e:	04 81       	ldd	r16, Z+4	; 0x04
    1220:	15 81       	ldd	r17, Z+5	; 0x05
    1222:	0c 1b       	sub	r16, r28
    1224:	1d 0b       	sbc	r17, r29
    1226:	40 17       	cp	r20, r16
    1228:	51 07       	cpc	r21, r17
    122a:	08 f4       	brcc	.+2      	; 0x122e <prvWriteBytesToBuffer+0x30>
    122c:	8a 01       	movw	r16, r20
    122e:	f6 01       	movw	r30, r12
    1230:	84 85       	ldd	r24, Z+12	; 0x0c
    1232:	95 85       	ldd	r25, Z+13	; 0x0d
    1234:	a8 01       	movw	r20, r16
    1236:	b5 01       	movw	r22, r10
    1238:	8c 0f       	add	r24, r28
    123a:	9d 1f       	adc	r25, r29
    123c:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
    1240:	0e 15       	cp	r16, r14
    1242:	1f 05       	cpc	r17, r15
    1244:	58 f4       	brcc	.+22     	; 0x125c <prvWriteBytesToBuffer+0x5e>
    1246:	a7 01       	movw	r20, r14
    1248:	40 1b       	sub	r20, r16
    124a:	51 0b       	sbc	r21, r17
    124c:	b5 01       	movw	r22, r10
    124e:	60 0f       	add	r22, r16
    1250:	71 1f       	adc	r23, r17
    1252:	f6 01       	movw	r30, r12
    1254:	84 85       	ldd	r24, Z+12	; 0x0c
    1256:	95 85       	ldd	r25, Z+13	; 0x0d
    1258:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
    125c:	ce 01       	movw	r24, r28
    125e:	8e 0d       	add	r24, r14
    1260:	9f 1d       	adc	r25, r15
    1262:	f6 01       	movw	r30, r12
    1264:	24 81       	ldd	r18, Z+4	; 0x04
    1266:	35 81       	ldd	r19, Z+5	; 0x05
    1268:	82 17       	cp	r24, r18
    126a:	93 07       	cpc	r25, r19
    126c:	10 f0       	brcs	.+4      	; 0x1272 <prvWriteBytesToBuffer+0x74>
    126e:	82 1b       	sub	r24, r18
    1270:	93 0b       	sbc	r25, r19
    1272:	f6 01       	movw	r30, r12
    1274:	93 83       	std	Z+3, r25	; 0x03
    1276:	82 83       	std	Z+2, r24	; 0x02
    1278:	c7 01       	movw	r24, r14
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	08 95       	ret

00001290 <prvWriteMessageToBuffer>:
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	1f 92       	push	r1
    12a2:	1f 92       	push	r1
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	7c 01       	movw	r14, r24
    12aa:	6b 01       	movw	r12, r22
    12ac:	5a 83       	std	Y+2, r21	; 0x02
    12ae:	49 83       	std	Y+1, r20	; 0x01
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	c1 f0       	breq	.+48     	; 0x12e6 <prvWriteMessageToBuffer+0x56>
    12b6:	fc 01       	movw	r30, r24
    12b8:	86 85       	ldd	r24, Z+14	; 0x0e
    12ba:	80 fd       	sbrc	r24, 0
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <prvWriteMessageToBuffer+0x3e>
    12be:	42 17       	cp	r20, r18
    12c0:	53 07       	cpc	r21, r19
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <prvWriteMessageToBuffer+0x36>
    12c4:	9a 01       	movw	r18, r20
    12c6:	3a 83       	std	Y+2, r19	; 0x02
    12c8:	29 83       	std	Y+1, r18	; 0x01
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <prvWriteMessageToBuffer+0x5c>
    12ce:	20 17       	cp	r18, r16
    12d0:	31 07       	cpc	r19, r17
    12d2:	58 f0       	brcs	.+22     	; 0x12ea <prvWriteMessageToBuffer+0x5a>
    12d4:	42 e0       	ldi	r20, 0x02	; 2
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	be 01       	movw	r22, r28
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	c7 01       	movw	r24, r14
    12e0:	8e df       	rcall	.-228    	; 0x11fe <prvWriteBytesToBuffer>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <prvWriteMessageToBuffer+0x5c>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <prvWriteMessageToBuffer+0x5c>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	88 23       	and	r24, r24
    12ee:	31 f0       	breq	.+12     	; 0x12fc <prvWriteMessageToBuffer+0x6c>
    12f0:	49 81       	ldd	r20, Y+1	; 0x01
    12f2:	5a 81       	ldd	r21, Y+2	; 0x02
    12f4:	b6 01       	movw	r22, r12
    12f6:	c7 01       	movw	r24, r14
    12f8:	82 df       	rcall	.-252    	; 0x11fe <prvWriteBytesToBuffer>
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <prvWriteMessageToBuffer+0x70>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	08 95       	ret

00001316 <prvReadBytesFromBuffer>:
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	7c 01       	movw	r14, r24
    132c:	5b 01       	movw	r10, r22
    132e:	e9 01       	movw	r28, r18
    1330:	42 17       	cp	r20, r18
    1332:	53 07       	cpc	r21, r19
    1334:	08 f4       	brcc	.+2      	; 0x1338 <prvReadBytesFromBuffer+0x22>
    1336:	ea 01       	movw	r28, r20
    1338:	20 97       	sbiw	r28, 0x00	; 0
    133a:	81 f1       	breq	.+96     	; 0x139c <prvReadBytesFromBuffer+0x86>
    133c:	f7 01       	movw	r30, r14
    133e:	00 81       	ld	r16, Z
    1340:	11 81       	ldd	r17, Z+1	; 0x01
    1342:	84 81       	ldd	r24, Z+4	; 0x04
    1344:	95 81       	ldd	r25, Z+5	; 0x05
    1346:	80 1b       	sub	r24, r16
    1348:	91 0b       	sbc	r25, r17
    134a:	6e 01       	movw	r12, r28
    134c:	8c 17       	cp	r24, r28
    134e:	9d 07       	cpc	r25, r29
    1350:	08 f4       	brcc	.+2      	; 0x1354 <prvReadBytesFromBuffer+0x3e>
    1352:	6c 01       	movw	r12, r24
    1354:	f7 01       	movw	r30, r14
    1356:	64 85       	ldd	r22, Z+12	; 0x0c
    1358:	75 85       	ldd	r23, Z+13	; 0x0d
    135a:	60 0f       	add	r22, r16
    135c:	71 1f       	adc	r23, r17
    135e:	a6 01       	movw	r20, r12
    1360:	c5 01       	movw	r24, r10
    1362:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
    1366:	cc 16       	cp	r12, r28
    1368:	dd 06       	cpc	r13, r29
    136a:	58 f4       	brcc	.+22     	; 0x1382 <prvReadBytesFromBuffer+0x6c>
    136c:	ae 01       	movw	r20, r28
    136e:	4c 19       	sub	r20, r12
    1370:	5d 09       	sbc	r21, r13
    1372:	f7 01       	movw	r30, r14
    1374:	64 85       	ldd	r22, Z+12	; 0x0c
    1376:	75 85       	ldd	r23, Z+13	; 0x0d
    1378:	c5 01       	movw	r24, r10
    137a:	8c 0d       	add	r24, r12
    137c:	9d 1d       	adc	r25, r13
    137e:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
    1382:	0c 0f       	add	r16, r28
    1384:	1d 1f       	adc	r17, r29
    1386:	f7 01       	movw	r30, r14
    1388:	84 81       	ldd	r24, Z+4	; 0x04
    138a:	95 81       	ldd	r25, Z+5	; 0x05
    138c:	08 17       	cp	r16, r24
    138e:	19 07       	cpc	r17, r25
    1390:	10 f0       	brcs	.+4      	; 0x1396 <prvReadBytesFromBuffer+0x80>
    1392:	08 1b       	sub	r16, r24
    1394:	19 0b       	sbc	r17, r25
    1396:	f7 01       	movw	r30, r14
    1398:	11 83       	std	Z+1, r17	; 0x01
    139a:	00 83       	st	Z, r16
    139c:	ce 01       	movw	r24, r28
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	08 95       	ret

000013b4 <prvReadMessageFromBuffer>:
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	1f 92       	push	r1
    13d2:	1f 92       	push	r1
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	6c 01       	movw	r12, r24
    13da:	4b 01       	movw	r8, r22
    13dc:	5a 01       	movw	r10, r20
    13de:	79 01       	movw	r14, r18
    13e0:	01 15       	cp	r16, r1
    13e2:	11 05       	cpc	r17, r1
    13e4:	b1 f0       	breq	.+44     	; 0x1412 <prvReadMessageFromBuffer+0x5e>
    13e6:	fc 01       	movw	r30, r24
    13e8:	60 80       	ld	r6, Z
    13ea:	71 80       	ldd	r7, Z+1	; 0x01
    13ec:	a8 01       	movw	r20, r16
    13ee:	be 01       	movw	r22, r28
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	90 df       	rcall	.-224    	; 0x1316 <prvReadBytesFromBuffer>
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	e0 1a       	sub	r14, r16
    13fc:	f1 0a       	sbc	r15, r17
    13fe:	a8 16       	cp	r10, r24
    1400:	b9 06       	cpc	r11, r25
    1402:	30 f4       	brcc	.+12     	; 0x1410 <prvReadMessageFromBuffer+0x5c>
    1404:	f6 01       	movw	r30, r12
    1406:	71 82       	std	Z+1, r7	; 0x01
    1408:	60 82       	st	Z, r6
    140a:	a1 2c       	mov	r10, r1
    140c:	b1 2c       	mov	r11, r1
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <prvReadMessageFromBuffer+0x5e>
    1410:	5c 01       	movw	r10, r24
    1412:	97 01       	movw	r18, r14
    1414:	a5 01       	movw	r20, r10
    1416:	b4 01       	movw	r22, r8
    1418:	c6 01       	movw	r24, r12
    141a:	7d df       	rcall	.-262    	; 0x1316 <prvReadBytesFromBuffer>
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	bf 90       	pop	r11
    1432:	af 90       	pop	r10
    1434:	9f 90       	pop	r9
    1436:	8f 90       	pop	r8
    1438:	7f 90       	pop	r7
    143a:	6f 90       	pop	r6
    143c:	08 95       	ret

0000143e <xStreamBufferGenericCreate>:
    143e:	cf 92       	push	r12
    1440:	df 92       	push	r13
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	ec 01       	movw	r28, r24
    144e:	6b 01       	movw	r12, r22
    1450:	41 30       	cpi	r20, 0x01	; 1
    1452:	11 f4       	brne	.+4      	; 0x1458 <xStreamBufferGenericCreate+0x1a>
    1454:	01 e0       	ldi	r16, 0x01	; 1
    1456:	01 c0       	rjmp	.+2      	; 0x145a <xStreamBufferGenericCreate+0x1c>
    1458:	00 e0       	ldi	r16, 0x00	; 0
    145a:	c1 14       	cp	r12, r1
    145c:	d1 04       	cpc	r13, r1
    145e:	19 f4       	brne	.+6      	; 0x1466 <xStreamBufferGenericCreate+0x28>
    1460:	cc 24       	eor	r12, r12
    1462:	c3 94       	inc	r12
    1464:	d1 2c       	mov	r13, r1
    1466:	ce 01       	movw	r24, r28
    1468:	40 96       	adiw	r24, 0x10	; 16
    146a:	c8 17       	cp	r28, r24
    146c:	d9 07       	cpc	r29, r25
    146e:	20 f4       	brcc	.+8      	; 0x1478 <xStreamBufferGenericCreate+0x3a>
    1470:	21 96       	adiw	r28, 0x01	; 1
    1472:	50 d9       	rcall	.-3424   	; 0x714 <pvPortMalloc>
    1474:	7c 01       	movw	r14, r24
    1476:	02 c0       	rjmp	.+4      	; 0x147c <xStreamBufferGenericCreate+0x3e>
    1478:	e1 2c       	mov	r14, r1
    147a:	f1 2c       	mov	r15, r1
    147c:	e1 14       	cp	r14, r1
    147e:	f1 04       	cpc	r15, r1
    1480:	39 f0       	breq	.+14     	; 0x1490 <xStreamBufferGenericCreate+0x52>
    1482:	96 01       	movw	r18, r12
    1484:	ae 01       	movw	r20, r28
    1486:	b7 01       	movw	r22, r14
    1488:	61 5f       	subi	r22, 0xF1	; 241
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	c7 01       	movw	r24, r14
    148e:	a7 de       	rcall	.-690    	; 0x11de <prvInitialiseNewStreamBuffer>
    1490:	c7 01       	movw	r24, r14
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	08 95       	ret

000014a2 <xStreamBufferReset>:
    14a2:	0f 93       	push	r16
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	0f 92       	push	r0
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 85       	ldd	r18, Z+8	; 0x08
    14ae:	31 85       	ldd	r19, Z+9	; 0x09
    14b0:	23 2b       	or	r18, r19
    14b2:	71 f4       	brne	.+28     	; 0x14d0 <xStreamBufferReset+0x2e>
    14b4:	22 85       	ldd	r18, Z+10	; 0x0a
    14b6:	33 85       	ldd	r19, Z+11	; 0x0b
    14b8:	23 2b       	or	r18, r19
    14ba:	61 f4       	brne	.+24     	; 0x14d4 <xStreamBufferReset+0x32>
    14bc:	26 81       	ldd	r18, Z+6	; 0x06
    14be:	37 81       	ldd	r19, Z+7	; 0x07
    14c0:	44 81       	ldd	r20, Z+4	; 0x04
    14c2:	55 81       	ldd	r21, Z+5	; 0x05
    14c4:	64 85       	ldd	r22, Z+12	; 0x0c
    14c6:	75 85       	ldd	r23, Z+13	; 0x0d
    14c8:	06 85       	ldd	r16, Z+14	; 0x0e
    14ca:	89 de       	rcall	.-750    	; 0x11de <prvInitialiseNewStreamBuffer>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <xStreamBufferReset+0x34>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <xStreamBufferReset+0x34>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <xStreamBufferSpacesAvailable>:
    14de:	fc 01       	movw	r30, r24
    14e0:	24 81       	ldd	r18, Z+4	; 0x04
    14e2:	35 81       	ldd	r19, Z+5	; 0x05
    14e4:	80 81       	ld	r24, Z
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	82 0f       	add	r24, r18
    14ea:	93 1f       	adc	r25, r19
    14ec:	42 81       	ldd	r20, Z+2	; 0x02
    14ee:	53 81       	ldd	r21, Z+3	; 0x03
    14f0:	84 1b       	sub	r24, r20
    14f2:	95 0b       	sbc	r25, r21
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	82 17       	cp	r24, r18
    14f8:	93 07       	cpc	r25, r19
    14fa:	10 f0       	brcs	.+4      	; 0x1500 <xStreamBufferSpacesAvailable+0x22>
    14fc:	82 1b       	sub	r24, r18
    14fe:	93 0b       	sbc	r25, r19
    1500:	08 95       	ret

00001502 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1502:	2f 92       	push	r2
    1504:	3f 92       	push	r3
    1506:	4f 92       	push	r4
    1508:	5f 92       	push	r5
    150a:	6f 92       	push	r6
    150c:	7f 92       	push	r7
    150e:	8f 92       	push	r8
    1510:	9f 92       	push	r9
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	2b 97       	sbiw	r28, 0x0b	; 11
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	4c 01       	movw	r8, r24
    1538:	7b 87       	std	Y+11, r23	; 0x0b
    153a:	6a 87       	std	Y+10, r22	; 0x0a
    153c:	1a 01       	movw	r2, r20
    153e:	0e 83       	std	Y+6, r16	; 0x06
    1540:	1f 83       	std	Y+7, r17	; 0x07
    1542:	28 87       	std	Y+8, r18	; 0x08
    1544:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1546:	fc 01       	movw	r30, r24
    1548:	84 81       	ldd	r24, Z+4	; 0x04
    154a:	95 81       	ldd	r25, Z+5	; 0x05
    154c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    154e:	26 85       	ldd	r18, Z+14	; 0x0e
    1550:	20 ff       	sbrs	r18, 0
    1552:	0c c0       	rjmp	.+24     	; 0x156c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1554:	2a 01       	movw	r4, r20
    1556:	f2 e0       	ldi	r31, 0x02	; 2
    1558:	4f 0e       	add	r4, r31
    155a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    155c:	84 15       	cp	r24, r4
    155e:	95 05       	cpc	r25, r5
    1560:	58 f4       	brcc	.+22     	; 0x1578 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1562:	1e 82       	std	Y+6, r1	; 0x06
    1564:	1f 82       	std	Y+7, r1	; 0x07
    1566:	18 86       	std	Y+8, r1	; 0x08
    1568:	19 86       	std	Y+9, r1	; 0x09
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    156c:	84 17       	cp	r24, r20
    156e:	95 07       	cpc	r25, r21
    1570:	10 f0       	brcs	.+4      	; 0x1576 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1572:	2a 01       	movw	r4, r20
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1576:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	a8 85       	ldd	r26, Y+8	; 0x08
    157e:	b9 85       	ldd	r27, Y+9	; 0x09
    1580:	89 2b       	or	r24, r25
    1582:	8a 2b       	or	r24, r26
    1584:	8b 2b       	or	r24, r27
    1586:	09 f4       	brne	.+2      	; 0x158a <xStreamBufferSend+0x88>
    1588:	38 c0       	rjmp	.+112    	; 0x15fa <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    158a:	ce 01       	movw	r24, r28
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1598:	c4 01       	movw	r24, r8
    159a:	a1 df       	rcall	.-190    	; 0x14de <xStreamBufferSpacesAvailable>
    159c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    159e:	84 15       	cp	r24, r4
    15a0:	95 05       	cpc	r25, r5
    15a2:	40 f5       	brcc	.+80     	; 0x15f4 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    15ae:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskGetCurrentTaskHandle>
    15b2:	f4 01       	movw	r30, r8
    15b4:	93 87       	std	Z+11, r25	; 0x0b
    15b6:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15bc:	ae 80       	ldd	r10, Y+6	; 0x06
    15be:	bf 80       	ldd	r11, Y+7	; 0x07
    15c0:	c8 84       	ldd	r12, Y+8	; 0x08
    15c2:	d9 84       	ldd	r13, Y+9	; 0x09
    15c4:	e1 2c       	mov	r14, r1
    15c6:	f1 2c       	mov	r15, r1
    15c8:	00 e0       	ldi	r16, 0x00	; 0
    15ca:	10 e0       	ldi	r17, 0x00	; 0
    15cc:	98 01       	movw	r18, r16
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	ba 01       	movw	r22, r20
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 be 14 	call	0x297c	; 0x297c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    15da:	f4 01       	movw	r30, r8
    15dc:	13 86       	std	Z+11, r1	; 0x0b
    15de:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    15e0:	be 01       	movw	r22, r28
    15e2:	6a 5f       	subi	r22, 0xFA	; 250
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0e 94 bc 13 	call	0x2778	; 0x2778 <xTaskCheckForTimeOut>
    15ee:	88 23       	and	r24, r24
    15f0:	81 f2       	breq	.-96     	; 0x1592 <xStreamBufferSend+0x90>
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
                    break;
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    15fa:	61 2c       	mov	r6, r1
    15fc:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    15fe:	61 14       	cp	r6, r1
    1600:	71 04       	cpc	r7, r1
    1602:	19 f4       	brne	.+6      	; 0x160a <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1604:	c4 01       	movw	r24, r8
    1606:	6b df       	rcall	.-298    	; 0x14de <xStreamBufferSpacesAvailable>
    1608:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    160a:	82 01       	movw	r16, r4
    160c:	93 01       	movw	r18, r6
    160e:	a1 01       	movw	r20, r2
    1610:	6a 85       	ldd	r22, Y+10	; 0x0a
    1612:	7b 85       	ldd	r23, Y+11	; 0x0b
    1614:	c4 01       	movw	r24, r8
    1616:	3c de       	rcall	.-904    	; 0x1290 <prvWriteMessageToBuffer>
    1618:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    161a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    161c:	e9 f0       	breq	.+58     	; 0x1658 <xStreamBufferSend+0x156>
    161e:	c4 01       	movw	r24, r8
    1620:	cb dd       	rcall	.-1130   	; 0x11b8 <prvBytesInBuffer>
    1622:	f4 01       	movw	r30, r8
    1624:	26 81       	ldd	r18, Z+6	; 0x06
    1626:	37 81       	ldd	r19, Z+7	; 0x07
    1628:	82 17       	cp	r24, r18
    162a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    162c:	a8 f0       	brcs	.+42     	; 0x1658 <xStreamBufferSend+0x156>
    162e:	90 d3       	rcall	.+1824   	; 0x1d50 <vTaskSuspendAll>
    1630:	f4 01       	movw	r30, r8
    1632:	80 85       	ldd	r24, Z+8	; 0x08
    1634:	91 85       	ldd	r25, Z+9	; 0x09
    1636:	89 2b       	or	r24, r25
    1638:	71 f0       	breq	.+28     	; 0x1656 <xStreamBufferSend+0x154>
    163a:	80 85       	ldd	r24, Z+8	; 0x08
    163c:	91 85       	ldd	r25, Z+9	; 0x09
    163e:	e1 2c       	mov	r14, r1
    1640:	f1 2c       	mov	r15, r1
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	0e 94 65 15 	call	0x2aca	; 0x2aca <xTaskGenericNotify>
    1650:	f4 01       	movw	r30, r8
    1652:	11 86       	std	Z+9, r1	; 0x09
    1654:	10 86       	std	Z+8, r1	; 0x08
    1656:	bc d4       	rcall	.+2424   	; 0x1fd0 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1658:	c6 01       	movw	r24, r12
    165a:	2b 96       	adiw	r28, 0x0b	; 11
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	9f 90       	pop	r9
    167c:	8f 90       	pop	r8
    167e:	7f 90       	pop	r7
    1680:	6f 90       	pop	r6
    1682:	5f 90       	pop	r5
    1684:	4f 90       	pop	r4
    1686:	3f 90       	pop	r3
    1688:	2f 90       	pop	r2
    168a:	08 95       	ret

0000168c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ec 01       	movw	r28, r24
    16a2:	7b 01       	movw	r14, r22
    16a4:	5a 01       	movw	r10, r20
    16a6:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16aa:	80 ff       	sbrs	r24, 0
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16ae:	8a 01       	movw	r16, r20
    16b0:	0e 5f       	subi	r16, 0xFE	; 254
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    16b6:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b8:	ce 01       	movw	r24, r28
    16ba:	11 df       	rcall	.-478    	; 0x14de <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16bc:	9c 01       	movw	r18, r24
    16be:	a5 01       	movw	r20, r10
    16c0:	b7 01       	movw	r22, r14
    16c2:	ce 01       	movw	r24, r28
    16c4:	e5 dd       	rcall	.-1078   	; 0x1290 <prvWriteMessageToBuffer>
    16c6:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    16c8:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16ca:	c1 f0       	breq	.+48     	; 0x16fc <xStreamBufferSendFromISR+0x70>
    16cc:	ce 01       	movw	r24, r28
    16ce:	74 dd       	rcall	.-1304   	; 0x11b8 <prvBytesInBuffer>
    16d0:	2e 81       	ldd	r18, Y+6	; 0x06
    16d2:	3f 81       	ldd	r19, Y+7	; 0x07
    16d4:	82 17       	cp	r24, r18
    16d6:	93 07       	cpc	r25, r19
    16d8:	88 f0       	brcs	.+34     	; 0x16fc <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    16da:	88 85       	ldd	r24, Y+8	; 0x08
    16dc:	99 85       	ldd	r25, Y+9	; 0x09
    16de:	89 2b       	or	r24, r25
    16e0:	69 f0       	breq	.+26     	; 0x16fc <xStreamBufferSendFromISR+0x70>
    16e2:	88 85       	ldd	r24, Y+8	; 0x08
    16e4:	99 85       	ldd	r25, Y+9	; 0x09
    16e6:	e1 2c       	mov	r14, r1
    16e8:	f1 2c       	mov	r15, r1
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <xTaskGenericNotifyFromISR>
    16f8:	19 86       	std	Y+9, r1	; 0x09
    16fa:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    16fc:	c5 01       	movw	r24, r10
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	bf 90       	pop	r11
    1710:	af 90       	pop	r10
    1712:	08 95       	ret

00001714 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1714:	4f 92       	push	r4
    1716:	5f 92       	push	r5
    1718:	6f 92       	push	r6
    171a:	7f 92       	push	r7
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
    1736:	2b 01       	movw	r4, r22
    1738:	3a 01       	movw	r6, r20
    173a:	58 01       	movw	r10, r16
    173c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    173e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1740:	80 ff       	sbrs	r24, 0
    1742:	05 c0       	rjmp	.+10     	; 0x174e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1744:	68 94       	set
    1746:	88 24       	eor	r8, r8
    1748:	81 f8       	bld	r8, 1
    174a:	91 2c       	mov	r9, r1
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    174e:	81 2c       	mov	r8, r1
    1750:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1752:	a1 14       	cp	r10, r1
    1754:	b1 04       	cpc	r11, r1
    1756:	c1 04       	cpc	r12, r1
    1758:	d1 04       	cpc	r13, r1
    175a:	41 f1       	breq	.+80     	; 0x17ac <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1762:	ce 01       	movw	r24, r28
    1764:	29 dd       	rcall	.-1454   	; 0x11b8 <prvBytesInBuffer>
    1766:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1768:	88 16       	cp	r8, r24
    176a:	99 06       	cpc	r9, r25
    176c:	48 f0       	brcs	.+18     	; 0x1780 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1778:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskGetCurrentTaskHandle>
    177c:	99 87       	std	Y+9, r25	; 0x09
    177e:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1784:	8e 14       	cp	r8, r14
    1786:	9f 04       	cpc	r9, r15
    1788:	a0 f0       	brcs	.+40     	; 0x17b2 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    178a:	e1 2c       	mov	r14, r1
    178c:	f1 2c       	mov	r15, r1
    178e:	00 e0       	ldi	r16, 0x00	; 0
    1790:	10 e0       	ldi	r17, 0x00	; 0
    1792:	98 01       	movw	r18, r16
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	ba 01       	movw	r22, r20
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	0e 94 be 14 	call	0x297c	; 0x297c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    17a0:	19 86       	std	Y+9, r1	; 0x09
    17a2:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17a4:	ce 01       	movw	r24, r28
    17a6:	08 dd       	rcall	.-1520   	; 0x11b8 <prvBytesInBuffer>
    17a8:	7c 01       	movw	r14, r24
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17ac:	ce 01       	movw	r24, r28
    17ae:	04 dd       	rcall	.-1528   	; 0x11b8 <prvBytesInBuffer>
    17b0:	7c 01       	movw	r14, r24
    17b2:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    17b4:	9f 04       	cpc	r9, r15
    17b6:	e8 f4       	brcc	.+58     	; 0x17f2 <xStreamBufferReceive+0xde>
    17b8:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    17ba:	97 01       	movw	r18, r14
    17bc:	a3 01       	movw	r20, r6
    17be:	b2 01       	movw	r22, r4
    17c0:	ce 01       	movw	r24, r28
    17c2:	f8 dd       	rcall	.-1040   	; 0x13b4 <prvReadMessageFromBuffer>
    17c4:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    17c6:	89 2b       	or	r24, r25
    17c8:	b1 f0       	breq	.+44     	; 0x17f6 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    17ca:	c2 d2       	rcall	.+1412   	; 0x1d50 <vTaskSuspendAll>
    17cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d0:	89 2b       	or	r24, r25
    17d2:	69 f0       	breq	.+26     	; 0x17ee <xStreamBufferReceive+0xda>
    17d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d8:	e1 2c       	mov	r14, r1
    17da:	f1 2c       	mov	r15, r1
    17dc:	00 e0       	ldi	r16, 0x00	; 0
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	a9 01       	movw	r20, r18
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	0e 94 65 15 	call	0x2aca	; 0x2aca <xTaskGenericNotify>
    17ea:	1b 86       	std	Y+11, r1	; 0x0b
    17ec:	1a 86       	std	Y+10, r1	; 0x0a
    17ee:	f0 d3       	rcall	.+2016   	; 0x1fd0 <xTaskResumeAll>
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <xStreamBufferReceive+0xe2>
    17f2:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    17f4:	d1 2c       	mov	r13, r1
    17f6:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	7f 90       	pop	r7
    1812:	6f 90       	pop	r6
    1814:	5f 90       	pop	r5
    1816:	4f 90       	pop	r4
    1818:	08 95       	ret

0000181a <prvResetNextTaskUnblockTime>:
    181a:	e0 91 df 15 	lds	r30, 0x15DF	; 0x8015df <pxDelayedTaskList>
    181e:	f0 91 e0 15 	lds	r31, 0x15E0	; 0x8015e0 <pxDelayedTaskList+0x1>
    1822:	80 81       	ld	r24, Z
    1824:	81 11       	cpse	r24, r1
    1826:	0c c0       	rjmp	.+24     	; 0x1840 <prvResetNextTaskUnblockTime+0x26>
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	dc 01       	movw	r26, r24
    182e:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <xNextTaskUnblockTime>
    1832:	90 93 aa 15 	sts	0x15AA, r25	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1836:	a0 93 ab 15 	sts	0x15AB, r26	; 0x8015ab <xNextTaskUnblockTime+0x2>
    183a:	b0 93 ac 15 	sts	0x15AC, r27	; 0x8015ac <xNextTaskUnblockTime+0x3>
    183e:	08 95       	ret
    1840:	e0 91 df 15 	lds	r30, 0x15DF	; 0x8015df <pxDelayedTaskList>
    1844:	f0 91 e0 15 	lds	r31, 0x15E0	; 0x8015e0 <pxDelayedTaskList+0x1>
    1848:	07 80       	ldd	r0, Z+7	; 0x07
    184a:	f0 85       	ldd	r31, Z+8	; 0x08
    184c:	e0 2d       	mov	r30, r0
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	a2 81       	ldd	r26, Z+2	; 0x02
    1854:	b3 81       	ldd	r27, Z+3	; 0x03
    1856:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <xNextTaskUnblockTime>
    185a:	90 93 aa 15 	sts	0x15AA, r25	; 0x8015aa <xNextTaskUnblockTime+0x1>
    185e:	a0 93 ab 15 	sts	0x15AB, r26	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1862:	b0 93 ac 15 	sts	0x15AC, r27	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1866:	08 95       	ret

00001868 <prvDeleteTCB>:
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	ec 01       	movw	r28, r24
    186e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1872:	0e 94 33 04 	call	0x866	; 0x866 <vPortFree>
    1876:	ce 01       	movw	r24, r28
    1878:	0e 94 33 04 	call	0x866	; 0x866 <vPortFree>
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <prvInitialiseNewTask>:
    1882:	4f 92       	push	r4
    1884:	5f 92       	push	r5
    1886:	6f 92       	push	r6
    1888:	7f 92       	push	r7
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	2c 01       	movw	r4, r24
    18a2:	5b 01       	movw	r10, r22
    18a4:	4a 01       	movw	r8, r20
    18a6:	39 01       	movw	r6, r18
    18a8:	e6 01       	movw	r28, r12
    18aa:	65 ea       	ldi	r22, 0xA5	; 165
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b2:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <memset>
    18b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	82 1a       	sub	r8, r18
    18be:	91 08       	sbc	r9, r1
    18c0:	88 0e       	add	r8, r24
    18c2:	99 1e       	adc	r9, r25
    18c4:	a1 14       	cp	r10, r1
    18c6:	b1 04       	cpc	r11, r1
    18c8:	89 f4       	brne	.+34     	; 0x18ec <prvInitialiseNewTask+0x6a>
    18ca:	15 c0       	rjmp	.+42     	; 0x18f6 <prvInitialiseNewTask+0x74>
    18cc:	82 2f       	mov	r24, r18
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	f5 01       	movw	r30, r10
    18d2:	e8 0f       	add	r30, r24
    18d4:	f9 1f       	adc	r31, r25
    18d6:	30 81       	ld	r19, Z
    18d8:	de 01       	movw	r26, r28
    18da:	a8 0f       	add	r26, r24
    18dc:	b9 1f       	adc	r27, r25
    18de:	5d 96       	adiw	r26, 0x1d	; 29
    18e0:	3c 93       	st	X, r19
    18e2:	80 81       	ld	r24, Z
    18e4:	88 23       	and	r24, r24
    18e6:	29 f0       	breq	.+10     	; 0x18f2 <prvInitialiseNewTask+0x70>
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <prvInitialiseNewTask+0x6c>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	20 31       	cpi	r18, 0x10	; 16
    18f0:	68 f3       	brcs	.-38     	; 0x18cc <prvInitialiseNewTask+0x4a>
    18f2:	1c a6       	std	Y+44, r1	; 0x2c
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <prvInitialiseNewTask+0x76>
    18f6:	1d 8e       	std	Y+29, r1	; 0x1d
    18f8:	0a 30       	cpi	r16, 0x0A	; 10
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <prvInitialiseNewTask+0x7c>
    18fc:	09 e0       	ldi	r16, 0x09	; 9
    18fe:	0a 8f       	std	Y+26, r16	; 0x1a
    1900:	0d a7       	std	Y+45, r16	; 0x2d
    1902:	1e a6       	std	Y+46, r1	; 0x2e
    1904:	ce 01       	movw	r24, r28
    1906:	02 96       	adiw	r24, 0x02	; 2
    1908:	0e 94 81 04 	call	0x902	; 0x902 <vListInitialiseItem>
    190c:	ce 01       	movw	r24, r28
    190e:	0e 96       	adiw	r24, 0x0e	; 14
    1910:	0e 94 81 04 	call	0x902	; 0x902 <vListInitialiseItem>
    1914:	db 87       	std	Y+11, r29	; 0x0b
    1916:	ca 87       	std	Y+10, r28	; 0x0a
    1918:	8a e0       	ldi	r24, 0x0A	; 10
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a0 e0       	ldi	r26, 0x00	; 0
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	80 1b       	sub	r24, r16
    1922:	91 09       	sbc	r25, r1
    1924:	a1 09       	sbc	r26, r1
    1926:	b1 09       	sbc	r27, r1
    1928:	8e 87       	std	Y+14, r24	; 0x0e
    192a:	9f 87       	std	Y+15, r25	; 0x0f
    192c:	a8 8b       	std	Y+16, r26	; 0x10
    192e:	b9 8b       	std	Y+17, r27	; 0x11
    1930:	df 8b       	std	Y+23, r29	; 0x17
    1932:	ce 8b       	std	Y+22, r28	; 0x16
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	fe 01       	movw	r30, r28
    1938:	bf 96       	adiw	r30, 0x2f	; 47
    193a:	df 01       	movw	r26, r30
    193c:	1d 92       	st	X+, r1
    193e:	8a 95       	dec	r24
    1940:	e9 f7       	brne	.-6      	; 0x193c <prvInitialiseNewTask+0xba>
    1942:	1b aa       	std	Y+51, r1	; 0x33
    1944:	a3 01       	movw	r20, r6
    1946:	b2 01       	movw	r22, r4
    1948:	c4 01       	movw	r24, r8
    194a:	4f d8       	rcall	.-3938   	; 0x9ea <pxPortInitialiseStack>
    194c:	99 83       	std	Y+1, r25	; 0x01
    194e:	88 83       	st	Y, r24
    1950:	e1 14       	cp	r14, r1
    1952:	f1 04       	cpc	r15, r1
    1954:	19 f0       	breq	.+6      	; 0x195c <prvInitialiseNewTask+0xda>
    1956:	f7 01       	movw	r30, r14
    1958:	d1 83       	std	Z+1, r29	; 0x01
    195a:	c0 83       	st	Z, r28
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	bf 90       	pop	r11
    196c:	af 90       	pop	r10
    196e:	9f 90       	pop	r9
    1970:	8f 90       	pop	r8
    1972:	7f 90       	pop	r7
    1974:	6f 90       	pop	r6
    1976:	5f 90       	pop	r5
    1978:	4f 90       	pop	r4
    197a:	08 95       	ret

0000197c <prvInitialiseTaskLists>:
    197c:	cf 93       	push	r28
    197e:	c0 e0       	ldi	r28, 0x00	; 0
    1980:	09 c0       	rjmp	.+18     	; 0x1994 <prvInitialiseTaskLists+0x18>
    1982:	2b e0       	ldi	r18, 0x0B	; 11
    1984:	c2 9f       	mul	r28, r18
    1986:	c0 01       	movw	r24, r0
    1988:	11 24       	eor	r1, r1
    198a:	89 50       	subi	r24, 0x09	; 9
    198c:	9a 4e       	sbci	r25, 0xEA	; 234
    198e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    1992:	cf 5f       	subi	r28, 0xFF	; 255
    1994:	ca 30       	cpi	r28, 0x0A	; 10
    1996:	a8 f3       	brcs	.-22     	; 0x1982 <prvInitialiseTaskLists+0x6>
    1998:	8c ee       	ldi	r24, 0xEC	; 236
    199a:	95 e1       	ldi	r25, 0x15	; 21
    199c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    19a0:	81 ee       	ldi	r24, 0xE1	; 225
    19a2:	95 e1       	ldi	r25, 0x15	; 21
    19a4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    19a8:	82 ed       	ldi	r24, 0xD2	; 210
    19aa:	95 e1       	ldi	r25, 0x15	; 21
    19ac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    19b0:	87 ec       	ldi	r24, 0xC7	; 199
    19b2:	95 e1       	ldi	r25, 0x15	; 21
    19b4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    19b8:	8b eb       	ldi	r24, 0xBB	; 187
    19ba:	95 e1       	ldi	r25, 0x15	; 21
    19bc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    19c0:	8c ee       	ldi	r24, 0xEC	; 236
    19c2:	95 e1       	ldi	r25, 0x15	; 21
    19c4:	90 93 e0 15 	sts	0x15E0, r25	; 0x8015e0 <pxDelayedTaskList+0x1>
    19c8:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <pxDelayedTaskList>
    19cc:	81 ee       	ldi	r24, 0xE1	; 225
    19ce:	95 e1       	ldi	r25, 0x15	; 21
    19d0:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <pxOverflowDelayedTaskList+0x1>
    19d4:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <pxOverflowDelayedTaskList>
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <prvAddNewTaskToReadyList>:
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	ec 01       	movw	r28, r24
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	0f 92       	push	r0
    19e8:	80 91 ba 15 	lds	r24, 0x15BA	; 0x8015ba <uxCurrentNumberOfTasks>
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	80 93 ba 15 	sts	0x15BA, r24	; 0x8015ba <uxCurrentNumberOfTasks>
    19f2:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    19f6:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    19fa:	89 2b       	or	r24, r25
    19fc:	51 f4       	brne	.+20     	; 0x1a12 <prvAddNewTaskToReadyList+0x36>
    19fe:	d0 93 66 16 	sts	0x1666, r29	; 0x801666 <pxCurrentTCB+0x1>
    1a02:	c0 93 65 16 	sts	0x1665, r28	; 0x801665 <pxCurrentTCB>
    1a06:	80 91 ba 15 	lds	r24, 0x15BA	; 0x8015ba <uxCurrentNumberOfTasks>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 f4       	brne	.+36     	; 0x1a32 <prvAddNewTaskToReadyList+0x56>
    1a0e:	b6 df       	rcall	.-148    	; 0x197c <prvInitialiseTaskLists>
    1a10:	10 c0       	rjmp	.+32     	; 0x1a32 <prvAddNewTaskToReadyList+0x56>
    1a12:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <xSchedulerRunning>
    1a16:	81 11       	cpse	r24, r1
    1a18:	0c c0       	rjmp	.+24     	; 0x1a32 <prvAddNewTaskToReadyList+0x56>
    1a1a:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    1a1e:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1a22:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a26:	89 17       	cp	r24, r25
    1a28:	20 f0       	brcs	.+8      	; 0x1a32 <prvAddNewTaskToReadyList+0x56>
    1a2a:	d0 93 66 16 	sts	0x1666, r29	; 0x801666 <pxCurrentTCB+0x1>
    1a2e:	c0 93 65 16 	sts	0x1665, r28	; 0x801665 <pxCurrentTCB>
    1a32:	80 91 ad 15 	lds	r24, 0x15AD	; 0x8015ad <uxTaskNumber>
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	80 93 ad 15 	sts	0x15AD, r24	; 0x8015ad <uxTaskNumber>
    1a3c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a3e:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    1a42:	8e 17       	cp	r24, r30
    1a44:	10 f4       	brcc	.+4      	; 0x1a4a <prvAddNewTaskToReadyList+0x6e>
    1a46:	e0 93 b5 15 	sts	0x15B5, r30	; 0x8015b5 <uxTopReadyPriority>
    1a4a:	8b e0       	ldi	r24, 0x0B	; 11
    1a4c:	8e 9f       	mul	r24, r30
    1a4e:	f0 01       	movw	r30, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	e9 50       	subi	r30, 0x09	; 9
    1a54:	fa 4e       	sbci	r31, 0xEA	; 234
    1a56:	01 80       	ldd	r0, Z+1	; 0x01
    1a58:	f2 81       	ldd	r31, Z+2	; 0x02
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	ff 83       	std	Y+7, r31	; 0x07
    1a5e:	ee 83       	std	Y+6, r30	; 0x06
    1a60:	26 81       	ldd	r18, Z+6	; 0x06
    1a62:	37 81       	ldd	r19, Z+7	; 0x07
    1a64:	39 87       	std	Y+9, r19	; 0x09
    1a66:	28 87       	std	Y+8, r18	; 0x08
    1a68:	a6 81       	ldd	r26, Z+6	; 0x06
    1a6a:	b7 81       	ldd	r27, Z+7	; 0x07
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	2e 5f       	subi	r18, 0xFE	; 254
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	15 96       	adiw	r26, 0x05	; 5
    1a74:	3c 93       	st	X, r19
    1a76:	2e 93       	st	-X, r18
    1a78:	14 97       	sbiw	r26, 0x04	; 4
    1a7a:	37 83       	std	Z+7, r19	; 0x07
    1a7c:	26 83       	std	Z+6, r18	; 0x06
    1a7e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a80:	8e 9f       	mul	r24, r30
    1a82:	f0 01       	movw	r30, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	e9 50       	subi	r30, 0x09	; 9
    1a88:	fa 4e       	sbci	r31, 0xEA	; 234
    1a8a:	fd 87       	std	Y+13, r31	; 0x0d
    1a8c:	ec 87       	std	Y+12, r30	; 0x0c
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 5f       	subi	r24, 0xFF	; 255
    1a92:	80 83       	st	Z, r24
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <xSchedulerRunning>
    1a9c:	88 23       	and	r24, r24
    1a9e:	51 f0       	breq	.+20     	; 0x1ab4 <prvAddNewTaskToReadyList+0xd8>
    1aa0:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    1aa4:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1aa8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aac:	98 17       	cp	r25, r24
    1aae:	10 f4       	brcc	.+4      	; 0x1ab4 <prvAddNewTaskToReadyList+0xd8>
    1ab0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <prvCheckTasksWaitingTermination>:
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	1b c0       	rjmp	.+54     	; 0x1af6 <prvCheckTasksWaitingTermination+0x3c>
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	0f 92       	push	r0
    1ac6:	e0 91 ce 15 	lds	r30, 0x15CE	; 0x8015ce <xTasksWaitingTermination+0x7>
    1aca:	f0 91 cf 15 	lds	r31, 0x15CF	; 0x8015cf <xTasksWaitingTermination+0x8>
    1ace:	c0 85       	ldd	r28, Z+8	; 0x08
    1ad0:	d1 85       	ldd	r29, Z+9	; 0x09
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	02 96       	adiw	r24, 0x02	; 2
    1ad6:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
    1ada:	80 91 ba 15 	lds	r24, 0x15BA	; 0x8015ba <uxCurrentNumberOfTasks>
    1ade:	81 50       	subi	r24, 0x01	; 1
    1ae0:	80 93 ba 15 	sts	0x15BA, r24	; 0x8015ba <uxCurrentNumberOfTasks>
    1ae4:	80 91 c6 15 	lds	r24, 0x15C6	; 0x8015c6 <uxDeletedTasksWaitingCleanUp>
    1ae8:	81 50       	subi	r24, 0x01	; 1
    1aea:	80 93 c6 15 	sts	0x15C6, r24	; 0x8015c6 <uxDeletedTasksWaitingCleanUp>
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	ce 01       	movw	r24, r28
    1af4:	b9 de       	rcall	.-654    	; 0x1868 <prvDeleteTCB>
    1af6:	80 91 c6 15 	lds	r24, 0x15C6	; 0x8015c6 <uxDeletedTasksWaitingCleanUp>
    1afa:	81 11       	cpse	r24, r1
    1afc:	e1 cf       	rjmp	.-62     	; 0x1ac0 <prvCheckTasksWaitingTermination+0x6>
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <prvAddCurrentTaskToDelayedList>:
    1b04:	8f 92       	push	r8
    1b06:	9f 92       	push	r9
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	6b 01       	movw	r12, r22
    1b1a:	7c 01       	movw	r14, r24
    1b1c:	c4 2f       	mov	r28, r20
    1b1e:	80 90 b6 15 	lds	r8, 0x15B6	; 0x8015b6 <xTickCount>
    1b22:	90 90 b7 15 	lds	r9, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    1b26:	a0 90 b8 15 	lds	r10, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    1b2a:	b0 90 b9 15 	lds	r11, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    1b2e:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    1b32:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1b36:	02 96       	adiw	r24, 0x02	; 2
    1b38:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	c8 16       	cp	r12, r24
    1b40:	d8 06       	cpc	r13, r24
    1b42:	e8 06       	cpc	r14, r24
    1b44:	f8 06       	cpc	r15, r24
    1b46:	b1 f5       	brne	.+108    	; 0x1bb4 <prvAddCurrentTaskToDelayedList+0xb0>
    1b48:	cc 23       	and	r28, r28
    1b4a:	a1 f1       	breq	.+104    	; 0x1bb4 <prvAddCurrentTaskToDelayedList+0xb0>
    1b4c:	eb eb       	ldi	r30, 0xBB	; 187
    1b4e:	f5 e1       	ldi	r31, 0x15	; 21
    1b50:	a1 81       	ldd	r26, Z+1	; 0x01
    1b52:	b2 81       	ldd	r27, Z+2	; 0x02
    1b54:	c0 91 65 16 	lds	r28, 0x1665	; 0x801665 <pxCurrentTCB>
    1b58:	d0 91 66 16 	lds	r29, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1b5c:	bf 83       	std	Y+7, r27	; 0x07
    1b5e:	ae 83       	std	Y+6, r26	; 0x06
    1b60:	c0 91 65 16 	lds	r28, 0x1665	; 0x801665 <pxCurrentTCB>
    1b64:	d0 91 66 16 	lds	r29, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1b68:	16 96       	adiw	r26, 0x06	; 6
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	17 97       	sbiw	r26, 0x07	; 7
    1b70:	99 87       	std	Y+9, r25	; 0x09
    1b72:	88 87       	std	Y+8, r24	; 0x08
    1b74:	16 96       	adiw	r26, 0x06	; 6
    1b76:	cd 91       	ld	r28, X+
    1b78:	dc 91       	ld	r29, X
    1b7a:	17 97       	sbiw	r26, 0x07	; 7
    1b7c:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    1b80:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1b84:	02 96       	adiw	r24, 0x02	; 2
    1b86:	9d 83       	std	Y+5, r25	; 0x05
    1b88:	8c 83       	std	Y+4, r24	; 0x04
    1b8a:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    1b8e:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1b92:	02 96       	adiw	r24, 0x02	; 2
    1b94:	17 96       	adiw	r26, 0x07	; 7
    1b96:	9c 93       	st	X, r25
    1b98:	8e 93       	st	-X, r24
    1b9a:	16 97       	sbiw	r26, 0x06	; 6
    1b9c:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
    1ba0:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1ba4:	1d 96       	adiw	r26, 0x0d	; 13
    1ba6:	fc 93       	st	X, r31
    1ba8:	ee 93       	st	-X, r30
    1baa:	1c 97       	sbiw	r26, 0x0c	; 12
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	80 83       	st	Z, r24
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <prvAddCurrentTaskToDelayedList+0x12e>
    1bb4:	c8 0c       	add	r12, r8
    1bb6:	d9 1c       	adc	r13, r9
    1bb8:	ea 1c       	adc	r14, r10
    1bba:	fb 1c       	adc	r15, r11
    1bbc:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    1bc0:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1bc4:	c2 82       	std	Z+2, r12	; 0x02
    1bc6:	d3 82       	std	Z+3, r13	; 0x03
    1bc8:	e4 82       	std	Z+4, r14	; 0x04
    1bca:	f5 82       	std	Z+5, r15	; 0x05
    1bcc:	c8 14       	cp	r12, r8
    1bce:	d9 04       	cpc	r13, r9
    1bd0:	ea 04       	cpc	r14, r10
    1bd2:	fb 04       	cpc	r15, r11
    1bd4:	68 f4       	brcc	.+26     	; 0x1bf0 <prvAddCurrentTaskToDelayedList+0xec>
    1bd6:	60 91 65 16 	lds	r22, 0x1665	; 0x801665 <pxCurrentTCB>
    1bda:	70 91 66 16 	lds	r23, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1bde:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <pxOverflowDelayedTaskList>
    1be2:	90 91 de 15 	lds	r25, 0x15DE	; 0x8015de <pxOverflowDelayedTaskList+0x1>
    1be6:	6e 5f       	subi	r22, 0xFE	; 254
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    1bee:	21 c0       	rjmp	.+66     	; 0x1c32 <prvAddCurrentTaskToDelayedList+0x12e>
    1bf0:	60 91 65 16 	lds	r22, 0x1665	; 0x801665 <pxCurrentTCB>
    1bf4:	70 91 66 16 	lds	r23, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1bf8:	80 91 df 15 	lds	r24, 0x15DF	; 0x8015df <pxDelayedTaskList>
    1bfc:	90 91 e0 15 	lds	r25, 0x15E0	; 0x8015e0 <pxDelayedTaskList+0x1>
    1c00:	6e 5f       	subi	r22, 0xFE	; 254
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255
    1c04:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    1c08:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <xNextTaskUnblockTime>
    1c0c:	90 91 aa 15 	lds	r25, 0x15AA	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1c10:	a0 91 ab 15 	lds	r26, 0x15AB	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1c14:	b0 91 ac 15 	lds	r27, 0x15AC	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1c18:	c8 16       	cp	r12, r24
    1c1a:	d9 06       	cpc	r13, r25
    1c1c:	ea 06       	cpc	r14, r26
    1c1e:	fb 06       	cpc	r15, r27
    1c20:	40 f4       	brcc	.+16     	; 0x1c32 <prvAddCurrentTaskToDelayedList+0x12e>
    1c22:	c0 92 a9 15 	sts	0x15A9, r12	; 0x8015a9 <xNextTaskUnblockTime>
    1c26:	d0 92 aa 15 	sts	0x15AA, r13	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1c2a:	e0 92 ab 15 	sts	0x15AB, r14	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1c2e:	f0 92 ac 15 	sts	0x15AC, r15	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	ff 90       	pop	r15
    1c38:	ef 90       	pop	r14
    1c3a:	df 90       	pop	r13
    1c3c:	cf 90       	pop	r12
    1c3e:	bf 90       	pop	r11
    1c40:	af 90       	pop	r10
    1c42:	9f 90       	pop	r9
    1c44:	8f 90       	pop	r8
    1c46:	08 95       	ret

00001c48 <xTaskCreate>:
    1c48:	2f 92       	push	r2
    1c4a:	3f 92       	push	r3
    1c4c:	4f 92       	push	r4
    1c4e:	5f 92       	push	r5
    1c50:	6f 92       	push	r6
    1c52:	7f 92       	push	r7
    1c54:	8f 92       	push	r8
    1c56:	9f 92       	push	r9
    1c58:	af 92       	push	r10
    1c5a:	bf 92       	push	r11
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	3c 01       	movw	r6, r24
    1c6c:	1b 01       	movw	r2, r22
    1c6e:	4a 01       	movw	r8, r20
    1c70:	29 01       	movw	r4, r18
    1c72:	ca 01       	movw	r24, r20
    1c74:	0e 94 8a 03 	call	0x714	; 0x714 <pvPortMalloc>
    1c78:	6c 01       	movw	r12, r24
    1c7a:	89 2b       	or	r24, r25
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <xTaskCreate+0x52>
    1c7e:	84 e3       	ldi	r24, 0x34	; 52
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 8a 03 	call	0x714	; 0x714 <pvPortMalloc>
    1c86:	ec 01       	movw	r28, r24
    1c88:	89 2b       	or	r24, r25
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <xTaskCreate+0x4a>
    1c8c:	dc 8e       	std	Y+28, r13	; 0x1c
    1c8e:	cb 8e       	std	Y+27, r12	; 0x1b
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <xTaskCreate+0x56>
    1c92:	c6 01       	movw	r24, r12
    1c94:	0e 94 33 04 	call	0x866	; 0x866 <vPortFree>
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <xTaskCreate+0x56>
    1c9a:	c0 e0       	ldi	r28, 0x00	; 0
    1c9c:	d0 e0       	ldi	r29, 0x00	; 0
    1c9e:	20 97       	sbiw	r28, 0x00	; 0
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <xTaskCreate+0x72>
    1ca2:	a1 2c       	mov	r10, r1
    1ca4:	b1 2c       	mov	r11, r1
    1ca6:	6e 01       	movw	r12, r28
    1ca8:	92 01       	movw	r18, r4
    1caa:	a4 01       	movw	r20, r8
    1cac:	b1 01       	movw	r22, r2
    1cae:	c3 01       	movw	r24, r6
    1cb0:	e8 dd       	rcall	.-1072   	; 0x1882 <prvInitialiseNewTask>
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	93 de       	rcall	.-730    	; 0x19dc <prvAddNewTaskToReadyList>
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <xTaskCreate+0x74>
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	bf 90       	pop	r11
    1ccc:	af 90       	pop	r10
    1cce:	9f 90       	pop	r9
    1cd0:	8f 90       	pop	r8
    1cd2:	7f 90       	pop	r7
    1cd4:	6f 90       	pop	r6
    1cd6:	5f 90       	pop	r5
    1cd8:	4f 90       	pop	r4
    1cda:	3f 90       	pop	r3
    1cdc:	2f 90       	pop	r2
    1cde:	08 95       	ret

00001ce0 <vTaskStartScheduler>:
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	0f 2e       	mov	r0, r31
    1ce8:	f7 ea       	ldi	r31, 0xA7	; 167
    1cea:	ef 2e       	mov	r14, r31
    1cec:	f5 e1       	ldi	r31, 0x15	; 21
    1cee:	ff 2e       	mov	r15, r31
    1cf0:	f0 2d       	mov	r31, r0
    1cf2:	00 e0       	ldi	r16, 0x00	; 0
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 ec       	ldi	r20, 0xC0	; 192
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	62 ed       	ldi	r22, 0xD2	; 210
    1cfe:	72 e0       	ldi	r23, 0x02	; 2
    1d00:	8d ec       	ldi	r24, 0xCD	; 205
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a1 df       	rcall	.-190    	; 0x1c48 <xTaskCreate>
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <vTaskStartScheduler+0x2e>
    1d0a:	0e 94 22 18 	call	0x3044	; 0x3044 <xTimerCreateTimerTask>
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	c9 f4       	brne	.+50     	; 0x1d44 <vTaskStartScheduler+0x64>
    1d12:	f8 94       	cli
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	dc 01       	movw	r26, r24
    1d1a:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <xNextTaskUnblockTime>
    1d1e:	90 93 aa 15 	sts	0x15AA, r25	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1d22:	a0 93 ab 15 	sts	0x15AB, r26	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1d26:	b0 93 ac 15 	sts	0x15AC, r27	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <xSchedulerRunning>
    1d30:	10 92 b6 15 	sts	0x15B6, r1	; 0x8015b6 <xTickCount>
    1d34:	10 92 b7 15 	sts	0x15B7, r1	; 0x8015b7 <xTickCount+0x1>
    1d38:	10 92 b8 15 	sts	0x15B8, r1	; 0x8015b8 <xTickCount+0x2>
    1d3c:	10 92 b9 15 	sts	0x15B9, r1	; 0x8015b9 <xTickCount+0x3>
    1d40:	0e 94 0c 05 	call	0xa18	; 0xa18 <xPortStartScheduler>
    1d44:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uxTopUsedPriority>
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	08 95       	ret

00001d50 <vTaskSuspendAll>:
    1d50:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	80 93 a6 15 	sts	0x15A6, r24	; 0x8015a6 <uxSchedulerSuspended>
    1d5a:	08 95       	ret

00001d5c <xTaskGetTickCount>:
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	0f 92       	push	r0
    1d62:	60 91 b6 15 	lds	r22, 0x15B6	; 0x8015b6 <xTickCount>
    1d66:	70 91 b7 15 	lds	r23, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    1d6a:	80 91 b8 15 	lds	r24, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    1d6e:	90 91 b9 15 	lds	r25, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	08 95       	ret

00001d78 <xTaskIncrementTick>:
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	05 c1       	rjmp	.+522    	; 0x1f96 <xTaskIncrementTick+0x21e>
    1d8c:	c0 90 b6 15 	lds	r12, 0x15B6	; 0x8015b6 <xTickCount>
    1d90:	d0 90 b7 15 	lds	r13, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    1d94:	e0 90 b8 15 	lds	r14, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    1d98:	f0 90 b9 15 	lds	r15, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	c8 1a       	sub	r12, r24
    1da0:	d8 0a       	sbc	r13, r24
    1da2:	e8 0a       	sbc	r14, r24
    1da4:	f8 0a       	sbc	r15, r24
    1da6:	c0 92 b6 15 	sts	0x15B6, r12	; 0x8015b6 <xTickCount>
    1daa:	d0 92 b7 15 	sts	0x15B7, r13	; 0x8015b7 <xTickCount+0x1>
    1dae:	e0 92 b8 15 	sts	0x15B8, r14	; 0x8015b8 <xTickCount+0x2>
    1db2:	f0 92 b9 15 	sts	0x15B9, r15	; 0x8015b9 <xTickCount+0x3>
    1db6:	c1 14       	cp	r12, r1
    1db8:	d1 04       	cpc	r13, r1
    1dba:	e1 04       	cpc	r14, r1
    1dbc:	f1 04       	cpc	r15, r1
    1dbe:	b1 f4       	brne	.+44     	; 0x1dec <xTaskIncrementTick+0x74>
    1dc0:	80 91 df 15 	lds	r24, 0x15DF	; 0x8015df <pxDelayedTaskList>
    1dc4:	90 91 e0 15 	lds	r25, 0x15E0	; 0x8015e0 <pxDelayedTaskList+0x1>
    1dc8:	20 91 dd 15 	lds	r18, 0x15DD	; 0x8015dd <pxOverflowDelayedTaskList>
    1dcc:	30 91 de 15 	lds	r19, 0x15DE	; 0x8015de <pxOverflowDelayedTaskList+0x1>
    1dd0:	30 93 e0 15 	sts	0x15E0, r19	; 0x8015e0 <pxDelayedTaskList+0x1>
    1dd4:	20 93 df 15 	sts	0x15DF, r18	; 0x8015df <pxDelayedTaskList>
    1dd8:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <pxOverflowDelayedTaskList+0x1>
    1ddc:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <pxOverflowDelayedTaskList>
    1de0:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <xNumOfOverflows>
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	80 93 ae 15 	sts	0x15AE, r24	; 0x8015ae <xNumOfOverflows>
    1dea:	17 dd       	rcall	.-1490   	; 0x181a <prvResetNextTaskUnblockTime>
    1dec:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <xNextTaskUnblockTime>
    1df0:	90 91 aa 15 	lds	r25, 0x15AA	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1df4:	a0 91 ab 15 	lds	r26, 0x15AB	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1df8:	b0 91 ac 15 	lds	r27, 0x15AC	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1dfc:	c8 16       	cp	r12, r24
    1dfe:	d9 06       	cpc	r13, r25
    1e00:	ea 06       	cpc	r14, r26
    1e02:	fb 06       	cpc	r15, r27
    1e04:	20 f4       	brcc	.+8      	; 0x1e0e <xTaskIncrementTick+0x96>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	b2 c0       	rjmp	.+356    	; 0x1f6e <xTaskIncrementTick+0x1f6>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <xTaskIncrementTick+0x98>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	e0 91 df 15 	lds	r30, 0x15DF	; 0x8015df <pxDelayedTaskList>
    1e14:	f0 91 e0 15 	lds	r31, 0x15E0	; 0x8015e0 <pxDelayedTaskList+0x1>
    1e18:	90 81       	ld	r25, Z
    1e1a:	91 11       	cpse	r25, r1
    1e1c:	0c c0       	rjmp	.+24     	; 0x1e36 <xTaskIncrementTick+0xbe>
    1e1e:	4f ef       	ldi	r20, 0xFF	; 255
    1e20:	5f ef       	ldi	r21, 0xFF	; 255
    1e22:	ba 01       	movw	r22, r20
    1e24:	40 93 a9 15 	sts	0x15A9, r20	; 0x8015a9 <xNextTaskUnblockTime>
    1e28:	50 93 aa 15 	sts	0x15AA, r21	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1e2c:	60 93 ab 15 	sts	0x15AB, r22	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1e30:	70 93 ac 15 	sts	0x15AC, r23	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1e34:	9c c0       	rjmp	.+312    	; 0x1f6e <xTaskIncrementTick+0x1f6>
    1e36:	e0 91 df 15 	lds	r30, 0x15DF	; 0x8015df <pxDelayedTaskList>
    1e3a:	f0 91 e0 15 	lds	r31, 0x15E0	; 0x8015e0 <pxDelayedTaskList+0x1>
    1e3e:	07 80       	ldd	r0, Z+7	; 0x07
    1e40:	f0 85       	ldd	r31, Z+8	; 0x08
    1e42:	e0 2d       	mov	r30, r0
    1e44:	00 84       	ldd	r0, Z+8	; 0x08
    1e46:	f1 85       	ldd	r31, Z+9	; 0x09
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	42 81       	ldd	r20, Z+2	; 0x02
    1e4c:	53 81       	ldd	r21, Z+3	; 0x03
    1e4e:	64 81       	ldd	r22, Z+4	; 0x04
    1e50:	75 81       	ldd	r23, Z+5	; 0x05
    1e52:	c4 16       	cp	r12, r20
    1e54:	d5 06       	cpc	r13, r21
    1e56:	e6 06       	cpc	r14, r22
    1e58:	f7 06       	cpc	r15, r23
    1e5a:	48 f4       	brcc	.+18     	; 0x1e6e <xTaskIncrementTick+0xf6>
    1e5c:	40 93 a9 15 	sts	0x15A9, r20	; 0x8015a9 <xNextTaskUnblockTime>
    1e60:	50 93 aa 15 	sts	0x15AA, r21	; 0x8015aa <xNextTaskUnblockTime+0x1>
    1e64:	60 93 ab 15 	sts	0x15AB, r22	; 0x8015ab <xNextTaskUnblockTime+0x2>
    1e68:	70 93 ac 15 	sts	0x15AC, r23	; 0x8015ac <xNextTaskUnblockTime+0x3>
    1e6c:	80 c0       	rjmp	.+256    	; 0x1f6e <xTaskIncrementTick+0x1f6>
    1e6e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e70:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e72:	c6 81       	ldd	r28, Z+6	; 0x06
    1e74:	d7 81       	ldd	r29, Z+7	; 0x07
    1e76:	20 85       	ldd	r18, Z+8	; 0x08
    1e78:	31 85       	ldd	r19, Z+9	; 0x09
    1e7a:	3f 83       	std	Y+7, r19	; 0x07
    1e7c:	2e 83       	std	Y+6, r18	; 0x06
    1e7e:	c0 85       	ldd	r28, Z+8	; 0x08
    1e80:	d1 85       	ldd	r29, Z+9	; 0x09
    1e82:	26 81       	ldd	r18, Z+6	; 0x06
    1e84:	37 81       	ldd	r19, Z+7	; 0x07
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	4d 91       	ld	r20, X+
    1e8e:	5c 91       	ld	r21, X
    1e90:	12 97       	sbiw	r26, 0x02	; 2
    1e92:	9f 01       	movw	r18, r30
    1e94:	2e 5f       	subi	r18, 0xFE	; 254
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	42 17       	cp	r20, r18
    1e9a:	53 07       	cpc	r21, r19
    1e9c:	31 f4       	brne	.+12     	; 0x1eaa <xTaskIncrementTick+0x132>
    1e9e:	40 85       	ldd	r20, Z+8	; 0x08
    1ea0:	51 85       	ldd	r21, Z+9	; 0x09
    1ea2:	12 96       	adiw	r26, 0x02	; 2
    1ea4:	5c 93       	st	X, r21
    1ea6:	4e 93       	st	-X, r20
    1ea8:	11 97       	sbiw	r26, 0x01	; 1
    1eaa:	15 86       	std	Z+13, r1	; 0x0d
    1eac:	14 86       	std	Z+12, r1	; 0x0c
    1eae:	9c 91       	ld	r25, X
    1eb0:	91 50       	subi	r25, 0x01	; 1
    1eb2:	9c 93       	st	X, r25
    1eb4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1eb6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1eb8:	10 97       	sbiw	r26, 0x00	; 0
    1eba:	09 f1       	breq	.+66     	; 0x1efe <xTaskIncrementTick+0x186>
    1ebc:	c2 89       	ldd	r28, Z+18	; 0x12
    1ebe:	d3 89       	ldd	r29, Z+19	; 0x13
    1ec0:	44 89       	ldd	r20, Z+20	; 0x14
    1ec2:	55 89       	ldd	r21, Z+21	; 0x15
    1ec4:	5f 83       	std	Y+7, r21	; 0x07
    1ec6:	4e 83       	std	Y+6, r20	; 0x06
    1ec8:	c4 89       	ldd	r28, Z+20	; 0x14
    1eca:	d5 89       	ldd	r29, Z+21	; 0x15
    1ecc:	42 89       	ldd	r20, Z+18	; 0x12
    1ece:	53 89       	ldd	r21, Z+19	; 0x13
    1ed0:	5d 83       	std	Y+5, r21	; 0x05
    1ed2:	4c 83       	std	Y+4, r20	; 0x04
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	6d 91       	ld	r22, X+
    1ed8:	7c 91       	ld	r23, X
    1eda:	12 97       	sbiw	r26, 0x02	; 2
    1edc:	af 01       	movw	r20, r30
    1ede:	42 5f       	subi	r20, 0xF2	; 242
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	64 17       	cp	r22, r20
    1ee4:	75 07       	cpc	r23, r21
    1ee6:	31 f4       	brne	.+12     	; 0x1ef4 <xTaskIncrementTick+0x17c>
    1ee8:	44 89       	ldd	r20, Z+20	; 0x14
    1eea:	55 89       	ldd	r21, Z+21	; 0x15
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	5c 93       	st	X, r21
    1ef0:	4e 93       	st	-X, r20
    1ef2:	11 97       	sbiw	r26, 0x01	; 1
    1ef4:	11 8e       	std	Z+25, r1	; 0x19
    1ef6:	10 8e       	std	Z+24, r1	; 0x18
    1ef8:	9c 91       	ld	r25, X
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	9c 93       	st	X, r25
    1efe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f00:	90 91 b5 15 	lds	r25, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    1f04:	9a 17       	cp	r25, r26
    1f06:	10 f4       	brcc	.+4      	; 0x1f0c <xTaskIncrementTick+0x194>
    1f08:	a0 93 b5 15 	sts	0x15B5, r26	; 0x8015b5 <uxTopReadyPriority>
    1f0c:	9b e0       	ldi	r25, 0x0B	; 11
    1f0e:	9a 9f       	mul	r25, r26
    1f10:	d0 01       	movw	r26, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	a9 50       	subi	r26, 0x09	; 9
    1f16:	ba 4e       	sbci	r27, 0xEA	; 234
    1f18:	11 96       	adiw	r26, 0x01	; 1
    1f1a:	0d 90       	ld	r0, X+
    1f1c:	bc 91       	ld	r27, X
    1f1e:	a0 2d       	mov	r26, r0
    1f20:	b7 83       	std	Z+7, r27	; 0x07
    1f22:	a6 83       	std	Z+6, r26	; 0x06
    1f24:	16 96       	adiw	r26, 0x06	; 6
    1f26:	4d 91       	ld	r20, X+
    1f28:	5c 91       	ld	r21, X
    1f2a:	17 97       	sbiw	r26, 0x07	; 7
    1f2c:	51 87       	std	Z+9, r21	; 0x09
    1f2e:	40 87       	std	Z+8, r20	; 0x08
    1f30:	16 96       	adiw	r26, 0x06	; 6
    1f32:	cd 91       	ld	r28, X+
    1f34:	dc 91       	ld	r29, X
    1f36:	17 97       	sbiw	r26, 0x07	; 7
    1f38:	3d 83       	std	Y+5, r19	; 0x05
    1f3a:	2c 83       	std	Y+4, r18	; 0x04
    1f3c:	17 96       	adiw	r26, 0x07	; 7
    1f3e:	3c 93       	st	X, r19
    1f40:	2e 93       	st	-X, r18
    1f42:	16 97       	sbiw	r26, 0x06	; 6
    1f44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f46:	9a 9f       	mul	r25, r26
    1f48:	d0 01       	movw	r26, r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	a9 50       	subi	r26, 0x09	; 9
    1f4e:	ba 4e       	sbci	r27, 0xEA	; 234
    1f50:	b5 87       	std	Z+13, r27	; 0x0d
    1f52:	a4 87       	std	Z+12, r26	; 0x0c
    1f54:	9c 91       	ld	r25, X
    1f56:	9f 5f       	subi	r25, 0xFF	; 255
    1f58:	9c 93       	st	X, r25
    1f5a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f5c:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    1f60:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1f64:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f66:	29 17       	cp	r18, r25
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <xTaskIncrementTick+0x1f4>
    1f6a:	4f cf       	rjmp	.-354    	; 0x1e0a <xTaskIncrementTick+0x92>
    1f6c:	51 cf       	rjmp	.-350    	; 0x1e10 <xTaskIncrementTick+0x98>
    1f6e:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    1f72:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    1f76:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1f78:	9b e0       	ldi	r25, 0x0B	; 11
    1f7a:	e9 9f       	mul	r30, r25
    1f7c:	f0 01       	movw	r30, r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	e9 50       	subi	r30, 0x09	; 9
    1f82:	fa 4e       	sbci	r31, 0xEA	; 234
    1f84:	90 81       	ld	r25, Z
    1f86:	92 30       	cpi	r25, 0x02	; 2
    1f88:	08 f0       	brcs	.+2      	; 0x1f8c <xTaskIncrementTick+0x214>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 91 af 15 	lds	r25, 0x15AF	; 0x8015af <xYieldPending>
    1f90:	91 11       	cpse	r25, r1
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <xTaskIncrementTick+0x248>
    1f94:	16 c0       	rjmp	.+44     	; 0x1fc2 <xTaskIncrementTick+0x24a>
    1f96:	80 91 b0 15 	lds	r24, 0x15B0	; 0x8015b0 <xPendedTicks>
    1f9a:	90 91 b1 15 	lds	r25, 0x15B1	; 0x8015b1 <xPendedTicks+0x1>
    1f9e:	a0 91 b2 15 	lds	r26, 0x15B2	; 0x8015b2 <xPendedTicks+0x2>
    1fa2:	b0 91 b3 15 	lds	r27, 0x15B3	; 0x8015b3 <xPendedTicks+0x3>
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	a1 1d       	adc	r26, r1
    1faa:	b1 1d       	adc	r27, r1
    1fac:	80 93 b0 15 	sts	0x15B0, r24	; 0x8015b0 <xPendedTicks>
    1fb0:	90 93 b1 15 	sts	0x15B1, r25	; 0x8015b1 <xPendedTicks+0x1>
    1fb4:	a0 93 b2 15 	sts	0x15B2, r26	; 0x8015b2 <xPendedTicks+0x2>
    1fb8:	b0 93 b3 15 	sts	0x15B3, r27	; 0x8015b3 <xPendedTicks+0x3>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <xTaskIncrementTick+0x24a>
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	08 95       	ret

00001fd0 <xTaskResumeAll>:
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	0f 92       	push	r0
    1fe2:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	80 93 a6 15 	sts	0x15A6, r24	; 0x8015a6 <uxSchedulerSuspended>
    1fec:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    1ff0:	81 11       	cpse	r24, r1
    1ff2:	be c0       	rjmp	.+380    	; 0x2170 <__DATA_REGION_LENGTH__+0x170>
    1ff4:	80 91 ba 15 	lds	r24, 0x15BA	; 0x8015ba <uxCurrentNumberOfTasks>
    1ff8:	81 11       	cpse	r24, r1
    1ffa:	88 c0       	rjmp	.+272    	; 0x210c <__DATA_REGION_LENGTH__+0x10c>
    1ffc:	bc c0       	rjmp	.+376    	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    1ffe:	e0 91 d9 15 	lds	r30, 0x15D9	; 0x8015d9 <xPendingReadyList+0x7>
    2002:	f0 91 da 15 	lds	r31, 0x15DA	; 0x8015da <xPendingReadyList+0x8>
    2006:	00 84       	ldd	r0, Z+8	; 0x08
    2008:	f1 85       	ldd	r31, Z+9	; 0x09
    200a:	e0 2d       	mov	r30, r0
    200c:	a0 8d       	ldd	r26, Z+24	; 0x18
    200e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2010:	c2 89       	ldd	r28, Z+18	; 0x12
    2012:	d3 89       	ldd	r29, Z+19	; 0x13
    2014:	84 89       	ldd	r24, Z+20	; 0x14
    2016:	95 89       	ldd	r25, Z+21	; 0x15
    2018:	9f 83       	std	Y+7, r25	; 0x07
    201a:	8e 83       	std	Y+6, r24	; 0x06
    201c:	c4 89       	ldd	r28, Z+20	; 0x14
    201e:	d5 89       	ldd	r29, Z+21	; 0x15
    2020:	82 89       	ldd	r24, Z+18	; 0x12
    2022:	93 89       	ldd	r25, Z+19	; 0x13
    2024:	9d 83       	std	Y+5, r25	; 0x05
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	11 96       	adiw	r26, 0x01	; 1
    202a:	2d 91       	ld	r18, X+
    202c:	3c 91       	ld	r19, X
    202e:	12 97       	sbiw	r26, 0x02	; 2
    2030:	cf 01       	movw	r24, r30
    2032:	0e 96       	adiw	r24, 0x0e	; 14
    2034:	28 17       	cp	r18, r24
    2036:	39 07       	cpc	r19, r25
    2038:	31 f4       	brne	.+12     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    203a:	84 89       	ldd	r24, Z+20	; 0x14
    203c:	95 89       	ldd	r25, Z+21	; 0x15
    203e:	12 96       	adiw	r26, 0x02	; 2
    2040:	9c 93       	st	X, r25
    2042:	8e 93       	st	-X, r24
    2044:	11 97       	sbiw	r26, 0x01	; 1
    2046:	11 8e       	std	Z+25, r1	; 0x19
    2048:	10 8e       	std	Z+24, r1	; 0x18
    204a:	8c 91       	ld	r24, X
    204c:	81 50       	subi	r24, 0x01	; 1
    204e:	8c 93       	st	X, r24
    2050:	a4 85       	ldd	r26, Z+12	; 0x0c
    2052:	b5 85       	ldd	r27, Z+13	; 0x0d
    2054:	c6 81       	ldd	r28, Z+6	; 0x06
    2056:	d7 81       	ldd	r29, Z+7	; 0x07
    2058:	80 85       	ldd	r24, Z+8	; 0x08
    205a:	91 85       	ldd	r25, Z+9	; 0x09
    205c:	9f 83       	std	Y+7, r25	; 0x07
    205e:	8e 83       	std	Y+6, r24	; 0x06
    2060:	c0 85       	ldd	r28, Z+8	; 0x08
    2062:	d1 85       	ldd	r29, Z+9	; 0x09
    2064:	86 81       	ldd	r24, Z+6	; 0x06
    2066:	97 81       	ldd	r25, Z+7	; 0x07
    2068:	9d 83       	std	Y+5, r25	; 0x05
    206a:	8c 83       	std	Y+4, r24	; 0x04
    206c:	11 96       	adiw	r26, 0x01	; 1
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	12 97       	sbiw	r26, 0x02	; 2
    2074:	9f 01       	movw	r18, r30
    2076:	2e 5f       	subi	r18, 0xFE	; 254
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	82 17       	cp	r24, r18
    207c:	93 07       	cpc	r25, r19
    207e:	31 f4       	brne	.+12     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    2080:	80 85       	ldd	r24, Z+8	; 0x08
    2082:	91 85       	ldd	r25, Z+9	; 0x09
    2084:	12 96       	adiw	r26, 0x02	; 2
    2086:	9c 93       	st	X, r25
    2088:	8e 93       	st	-X, r24
    208a:	11 97       	sbiw	r26, 0x01	; 1
    208c:	15 86       	std	Z+13, r1	; 0x0d
    208e:	14 86       	std	Z+12, r1	; 0x0c
    2090:	8c 91       	ld	r24, X
    2092:	81 50       	subi	r24, 0x01	; 1
    2094:	8c 93       	st	X, r24
    2096:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2098:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    209c:	8a 17       	cp	r24, r26
    209e:	10 f4       	brcc	.+4      	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    20a0:	a0 93 b5 15 	sts	0x15B5, r26	; 0x8015b5 <uxTopReadyPriority>
    20a4:	8b e0       	ldi	r24, 0x0B	; 11
    20a6:	8a 9f       	mul	r24, r26
    20a8:	d0 01       	movw	r26, r0
    20aa:	11 24       	eor	r1, r1
    20ac:	a9 50       	subi	r26, 0x09	; 9
    20ae:	ba 4e       	sbci	r27, 0xEA	; 234
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	0d 90       	ld	r0, X+
    20b4:	bc 91       	ld	r27, X
    20b6:	a0 2d       	mov	r26, r0
    20b8:	b7 83       	std	Z+7, r27	; 0x07
    20ba:	a6 83       	std	Z+6, r26	; 0x06
    20bc:	16 96       	adiw	r26, 0x06	; 6
    20be:	4d 91       	ld	r20, X+
    20c0:	5c 91       	ld	r21, X
    20c2:	17 97       	sbiw	r26, 0x07	; 7
    20c4:	51 87       	std	Z+9, r21	; 0x09
    20c6:	40 87       	std	Z+8, r20	; 0x08
    20c8:	16 96       	adiw	r26, 0x06	; 6
    20ca:	cd 91       	ld	r28, X+
    20cc:	dc 91       	ld	r29, X
    20ce:	17 97       	sbiw	r26, 0x07	; 7
    20d0:	3d 83       	std	Y+5, r19	; 0x05
    20d2:	2c 83       	std	Y+4, r18	; 0x04
    20d4:	17 96       	adiw	r26, 0x07	; 7
    20d6:	3c 93       	st	X, r19
    20d8:	2e 93       	st	-X, r18
    20da:	16 97       	sbiw	r26, 0x06	; 6
    20dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20de:	8a 9f       	mul	r24, r26
    20e0:	d0 01       	movw	r26, r0
    20e2:	11 24       	eor	r1, r1
    20e4:	a9 50       	subi	r26, 0x09	; 9
    20e6:	ba 4e       	sbci	r27, 0xEA	; 234
    20e8:	b5 87       	std	Z+13, r27	; 0x0d
    20ea:	a4 87       	std	Z+12, r26	; 0x0c
    20ec:	8c 91       	ld	r24, X
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	8c 93       	st	X, r24
    20f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    20f4:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
    20f8:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    20fc:	5a 96       	adiw	r26, 0x1a	; 26
    20fe:	8c 91       	ld	r24, X
    2100:	98 17       	cp	r25, r24
    2102:	30 f0       	brcs	.+12     	; 0x2110 <__DATA_REGION_LENGTH__+0x110>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xYieldPending>
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <__DATA_REGION_LENGTH__+0x110>
    210c:	e0 e0       	ldi	r30, 0x00	; 0
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <xPendingReadyList>
    2114:	81 11       	cpse	r24, r1
    2116:	73 cf       	rjmp	.-282    	; 0x1ffe <xTaskResumeAll+0x2e>
    2118:	ef 2b       	or	r30, r31
    211a:	09 f0       	breq	.+2      	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
    211c:	7e db       	rcall	.-2308   	; 0x181a <prvResetNextTaskUnblockTime>
    211e:	c0 90 b0 15 	lds	r12, 0x15B0	; 0x8015b0 <xPendedTicks>
    2122:	d0 90 b1 15 	lds	r13, 0x15B1	; 0x8015b1 <xPendedTicks+0x1>
    2126:	e0 90 b2 15 	lds	r14, 0x15B2	; 0x8015b2 <xPendedTicks+0x2>
    212a:	f0 90 b3 15 	lds	r15, 0x15B3	; 0x8015b3 <xPendedTicks+0x3>
    212e:	c1 14       	cp	r12, r1
    2130:	d1 04       	cpc	r13, r1
    2132:	e1 04       	cpc	r14, r1
    2134:	f1 04       	cpc	r15, r1
    2136:	a1 f0       	breq	.+40     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
    2138:	1f de       	rcall	.-962    	; 0x1d78 <xTaskIncrementTick>
    213a:	88 23       	and	r24, r24
    213c:	19 f0       	breq	.+6      	; 0x2144 <__DATA_REGION_LENGTH__+0x144>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xYieldPending>
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	c8 1a       	sub	r12, r24
    2148:	d1 08       	sbc	r13, r1
    214a:	e1 08       	sbc	r14, r1
    214c:	f1 08       	sbc	r15, r1
    214e:	a1 f7       	brne	.-24     	; 0x2138 <__DATA_REGION_LENGTH__+0x138>
    2150:	10 92 b0 15 	sts	0x15B0, r1	; 0x8015b0 <xPendedTicks>
    2154:	10 92 b1 15 	sts	0x15B1, r1	; 0x8015b1 <xPendedTicks+0x1>
    2158:	10 92 b2 15 	sts	0x15B2, r1	; 0x8015b2 <xPendedTicks+0x2>
    215c:	10 92 b3 15 	sts	0x15B3, r1	; 0x8015b3 <xPendedTicks+0x3>
    2160:	80 91 af 15 	lds	r24, 0x15AF	; 0x8015af <xYieldPending>
    2164:	88 23       	and	r24, r24
    2166:	31 f0       	breq	.+12     	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
    2168:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0f 90       	pop	r0
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	08 95       	ret

00002188 <xTaskDelayUntil>:
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	1f 93       	push	r17
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	ec 01       	movw	r28, r24
    21a0:	6a 01       	movw	r12, r20
    21a2:	7b 01       	movw	r14, r22
    21a4:	d5 dd       	rcall	.-1110   	; 0x1d50 <vTaskSuspendAll>
    21a6:	80 90 b6 15 	lds	r8, 0x15B6	; 0x8015b6 <xTickCount>
    21aa:	90 90 b7 15 	lds	r9, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    21ae:	a0 90 b8 15 	lds	r10, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    21b2:	b0 90 b9 15 	lds	r11, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    21b6:	88 81       	ld	r24, Y
    21b8:	99 81       	ldd	r25, Y+1	; 0x01
    21ba:	aa 81       	ldd	r26, Y+2	; 0x02
    21bc:	bb 81       	ldd	r27, Y+3	; 0x03
    21be:	ac 01       	movw	r20, r24
    21c0:	bd 01       	movw	r22, r26
    21c2:	4c 0d       	add	r20, r12
    21c4:	5d 1d       	adc	r21, r13
    21c6:	6e 1d       	adc	r22, r14
    21c8:	7f 1d       	adc	r23, r15
    21ca:	88 16       	cp	r8, r24
    21cc:	99 06       	cpc	r9, r25
    21ce:	aa 06       	cpc	r10, r26
    21d0:	bb 06       	cpc	r11, r27
    21d2:	60 f4       	brcc	.+24     	; 0x21ec <xTaskDelayUntil+0x64>
    21d4:	48 17       	cp	r20, r24
    21d6:	59 07       	cpc	r21, r25
    21d8:	6a 07       	cpc	r22, r26
    21da:	7b 07       	cpc	r23, r27
    21dc:	98 f4       	brcc	.+38     	; 0x2204 <__stack+0x5>
    21de:	84 16       	cp	r8, r20
    21e0:	95 06       	cpc	r9, r21
    21e2:	a6 06       	cpc	r10, r22
    21e4:	b7 06       	cpc	r11, r23
    21e6:	80 f0       	brcs	.+32     	; 0x2208 <__stack+0x9>
    21e8:	10 e0       	ldi	r17, 0x00	; 0
    21ea:	13 c0       	rjmp	.+38     	; 0x2212 <__stack+0x13>
    21ec:	48 17       	cp	r20, r24
    21ee:	59 07       	cpc	r21, r25
    21f0:	6a 07       	cpc	r22, r26
    21f2:	7b 07       	cpc	r23, r27
    21f4:	58 f0       	brcs	.+22     	; 0x220c <__stack+0xd>
    21f6:	84 16       	cp	r8, r20
    21f8:	95 06       	cpc	r9, r21
    21fa:	a6 06       	cpc	r10, r22
    21fc:	b7 06       	cpc	r11, r23
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__stack+0x11>
    2200:	10 e0       	ldi	r17, 0x00	; 0
    2202:	07 c0       	rjmp	.+14     	; 0x2212 <__stack+0x13>
    2204:	10 e0       	ldi	r17, 0x00	; 0
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <__stack+0x13>
    2208:	11 e0       	ldi	r17, 0x01	; 1
    220a:	03 c0       	rjmp	.+6      	; 0x2212 <__stack+0x13>
    220c:	11 e0       	ldi	r17, 0x01	; 1
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__stack+0x13>
    2210:	11 e0       	ldi	r17, 0x01	; 1
    2212:	48 83       	st	Y, r20
    2214:	59 83       	std	Y+1, r21	; 0x01
    2216:	6a 83       	std	Y+2, r22	; 0x02
    2218:	7b 83       	std	Y+3, r23	; 0x03
    221a:	11 23       	and	r17, r17
    221c:	41 f0       	breq	.+16     	; 0x222e <__stack+0x2f>
    221e:	cb 01       	movw	r24, r22
    2220:	ba 01       	movw	r22, r20
    2222:	68 19       	sub	r22, r8
    2224:	79 09       	sbc	r23, r9
    2226:	8a 09       	sbc	r24, r10
    2228:	9b 09       	sbc	r25, r11
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	6b dc       	rcall	.-1834   	; 0x1b04 <prvAddCurrentTaskToDelayedList>
    222e:	d0 de       	rcall	.-608    	; 0x1fd0 <xTaskResumeAll>
    2230:	81 11       	cpse	r24, r1
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <__stack+0x39>
    2234:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    2238:	81 2f       	mov	r24, r17
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	bf 90       	pop	r11
    224a:	af 90       	pop	r10
    224c:	9f 90       	pop	r9
    224e:	8f 90       	pop	r8
    2250:	08 95       	ret

00002252 <vTaskDelay>:
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	6b 01       	movw	r12, r22
    225c:	7c 01       	movw	r14, r24
    225e:	67 2b       	or	r22, r23
    2260:	68 2b       	or	r22, r24
    2262:	69 2b       	or	r22, r25
    2264:	39 f0       	breq	.+14     	; 0x2274 <vTaskDelay+0x22>
    2266:	74 dd       	rcall	.-1304   	; 0x1d50 <vTaskSuspendAll>
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	c7 01       	movw	r24, r14
    226c:	b6 01       	movw	r22, r12
    226e:	4a dc       	rcall	.-1900   	; 0x1b04 <prvAddCurrentTaskToDelayedList>
    2270:	af de       	rcall	.-674    	; 0x1fd0 <xTaskResumeAll>
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <vTaskDelay+0x24>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	81 11       	cpse	r24, r1
    2278:	02 c0       	rjmp	.+4      	; 0x227e <vTaskDelay+0x2c>
    227a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	08 95       	ret

00002288 <vTaskSwitchContext>:
    2288:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    228c:	88 23       	and	r24, r24
    228e:	21 f0       	breq	.+8      	; 0x2298 <vTaskSwitchContext+0x10>
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xYieldPending>
    2296:	08 95       	ret
    2298:	10 92 af 15 	sts	0x15AF, r1	; 0x8015af <xYieldPending>
    229c:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    22a0:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    22a4:	20 81       	ld	r18, Z
    22a6:	31 81       	ldd	r19, Z+1	; 0x01
    22a8:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    22ac:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    22b0:	83 8d       	ldd	r24, Z+27	; 0x1b
    22b2:	94 8d       	ldd	r25, Z+28	; 0x1c
    22b4:	82 17       	cp	r24, r18
    22b6:	93 07       	cpc	r25, r19
    22b8:	60 f0       	brcs	.+24     	; 0x22d2 <vTaskSwitchContext+0x4a>
    22ba:	60 91 65 16 	lds	r22, 0x1665	; 0x801665 <pxCurrentTCB>
    22be:	70 91 66 16 	lds	r23, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    22c2:	63 5e       	subi	r22, 0xE3	; 227
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    22ca:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    22ce:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vApplicationStackOverflowHook>
    22d2:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <vTaskSwitchContext+0x52>
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	9b e0       	ldi	r25, 0x0B	; 11
    22e0:	92 9f       	mul	r25, r18
    22e2:	f0 01       	movw	r30, r0
    22e4:	93 9f       	mul	r25, r19
    22e6:	f0 0d       	add	r31, r0
    22e8:	11 24       	eor	r1, r1
    22ea:	e9 50       	subi	r30, 0x09	; 9
    22ec:	fa 4e       	sbci	r31, 0xEA	; 234
    22ee:	90 81       	ld	r25, Z
    22f0:	99 23       	and	r25, r25
    22f2:	91 f3       	breq	.-28     	; 0x22d8 <vTaskSwitchContext+0x50>
    22f4:	9b e0       	ldi	r25, 0x0B	; 11
    22f6:	92 9f       	mul	r25, r18
    22f8:	a0 01       	movw	r20, r0
    22fa:	93 9f       	mul	r25, r19
    22fc:	50 0d       	add	r21, r0
    22fe:	11 24       	eor	r1, r1
    2300:	df 01       	movw	r26, r30
    2302:	01 80       	ldd	r0, Z+1	; 0x01
    2304:	f2 81       	ldd	r31, Z+2	; 0x02
    2306:	e0 2d       	mov	r30, r0
    2308:	04 80       	ldd	r0, Z+4	; 0x04
    230a:	f5 81       	ldd	r31, Z+5	; 0x05
    230c:	e0 2d       	mov	r30, r0
    230e:	12 96       	adiw	r26, 0x02	; 2
    2310:	fc 93       	st	X, r31
    2312:	ee 93       	st	-X, r30
    2314:	11 97       	sbiw	r26, 0x01	; 1
    2316:	46 50       	subi	r20, 0x06	; 6
    2318:	5a 4e       	sbci	r21, 0xEA	; 234
    231a:	e4 17       	cp	r30, r20
    231c:	f5 07       	cpc	r31, r21
    231e:	29 f4       	brne	.+10     	; 0x232a <vTaskSwitchContext+0xa2>
    2320:	44 81       	ldd	r20, Z+4	; 0x04
    2322:	55 81       	ldd	r21, Z+5	; 0x05
    2324:	fd 01       	movw	r30, r26
    2326:	52 83       	std	Z+2, r21	; 0x02
    2328:	41 83       	std	Z+1, r20	; 0x01
    232a:	9b e0       	ldi	r25, 0x0B	; 11
    232c:	92 9f       	mul	r25, r18
    232e:	f0 01       	movw	r30, r0
    2330:	93 9f       	mul	r25, r19
    2332:	f0 0d       	add	r31, r0
    2334:	11 24       	eor	r1, r1
    2336:	e9 50       	subi	r30, 0x09	; 9
    2338:	fa 4e       	sbci	r31, 0xEA	; 234
    233a:	01 80       	ldd	r0, Z+1	; 0x01
    233c:	f2 81       	ldd	r31, Z+2	; 0x02
    233e:	e0 2d       	mov	r30, r0
    2340:	20 85       	ldd	r18, Z+8	; 0x08
    2342:	31 85       	ldd	r19, Z+9	; 0x09
    2344:	30 93 66 16 	sts	0x1666, r19	; 0x801666 <pxCurrentTCB+0x1>
    2348:	20 93 65 16 	sts	0x1665, r18	; 0x801665 <pxCurrentTCB>
    234c:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <uxTopReadyPriority>
    2350:	08 95       	ret

00002352 <vTaskPlaceOnEventList>:
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	6a 01       	movw	r12, r20
    235c:	7b 01       	movw	r14, r22
    235e:	60 91 65 16 	lds	r22, 0x1665	; 0x801665 <pxCurrentTCB>
    2362:	70 91 66 16 	lds	r23, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2366:	62 5f       	subi	r22, 0xF2	; 242
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	c7 01       	movw	r24, r14
    2372:	b6 01       	movw	r22, r12
    2374:	c7 db       	rcall	.-2162   	; 0x1b04 <prvAddCurrentTaskToDelayedList>
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	cf 90       	pop	r12
    237e:	08 95       	ret

00002380 <vTaskPlaceOnUnorderedEventList>:
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	fc 01       	movw	r30, r24
    238a:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
    238e:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2392:	70 68       	ori	r23, 0x80	; 128
    2394:	1e 96       	adiw	r26, 0x0e	; 14
    2396:	4d 93       	st	X+, r20
    2398:	5d 93       	st	X+, r21
    239a:	6d 93       	st	X+, r22
    239c:	7c 93       	st	X, r23
    239e:	51 97       	sbiw	r26, 0x11	; 17
    23a0:	a1 81       	ldd	r26, Z+1	; 0x01
    23a2:	b2 81       	ldd	r27, Z+2	; 0x02
    23a4:	c0 91 65 16 	lds	r28, 0x1665	; 0x801665 <pxCurrentTCB>
    23a8:	d0 91 66 16 	lds	r29, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    23ac:	bb 8b       	std	Y+19, r27	; 0x13
    23ae:	aa 8b       	std	Y+18, r26	; 0x12
    23b0:	c0 91 65 16 	lds	r28, 0x1665	; 0x801665 <pxCurrentTCB>
    23b4:	d0 91 66 16 	lds	r29, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    23b8:	16 96       	adiw	r26, 0x06	; 6
    23ba:	8d 91       	ld	r24, X+
    23bc:	9c 91       	ld	r25, X
    23be:	17 97       	sbiw	r26, 0x07	; 7
    23c0:	9d 8b       	std	Y+21, r25	; 0x15
    23c2:	8c 8b       	std	Y+20, r24	; 0x14
    23c4:	16 96       	adiw	r26, 0x06	; 6
    23c6:	cd 91       	ld	r28, X+
    23c8:	dc 91       	ld	r29, X
    23ca:	17 97       	sbiw	r26, 0x07	; 7
    23cc:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    23d0:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    23d4:	0e 96       	adiw	r24, 0x0e	; 14
    23d6:	9d 83       	std	Y+5, r25	; 0x05
    23d8:	8c 83       	std	Y+4, r24	; 0x04
    23da:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    23de:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    23e2:	0e 96       	adiw	r24, 0x0e	; 14
    23e4:	17 96       	adiw	r26, 0x07	; 7
    23e6:	9c 93       	st	X, r25
    23e8:	8e 93       	st	-X, r24
    23ea:	16 97       	sbiw	r26, 0x06	; 6
    23ec:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
    23f0:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    23f4:	59 96       	adiw	r26, 0x19	; 25
    23f6:	fc 93       	st	X, r31
    23f8:	ee 93       	st	-X, r30
    23fa:	58 97       	sbiw	r26, 0x18	; 24
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	80 83       	st	Z, r24
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	c9 01       	movw	r24, r18
    2406:	b8 01       	movw	r22, r16
    2408:	7d db       	rcall	.-2310   	; 0x1b04 <prvAddCurrentTaskToDelayedList>
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret

00002414 <vTaskPlaceOnEventListRestricted>:
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	fc 01       	movw	r30, r24
    241a:	cb 01       	movw	r24, r22
    241c:	ba 01       	movw	r22, r20
    241e:	a1 81       	ldd	r26, Z+1	; 0x01
    2420:	b2 81       	ldd	r27, Z+2	; 0x02
    2422:	c0 91 65 16 	lds	r28, 0x1665	; 0x801665 <pxCurrentTCB>
    2426:	d0 91 66 16 	lds	r29, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    242a:	bb 8b       	std	Y+19, r27	; 0x13
    242c:	aa 8b       	std	Y+18, r26	; 0x12
    242e:	c0 91 65 16 	lds	r28, 0x1665	; 0x801665 <pxCurrentTCB>
    2432:	d0 91 66 16 	lds	r29, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2436:	16 96       	adiw	r26, 0x06	; 6
    2438:	4d 91       	ld	r20, X+
    243a:	5c 91       	ld	r21, X
    243c:	17 97       	sbiw	r26, 0x07	; 7
    243e:	5d 8b       	std	Y+21, r21	; 0x15
    2440:	4c 8b       	std	Y+20, r20	; 0x14
    2442:	16 96       	adiw	r26, 0x06	; 6
    2444:	cd 91       	ld	r28, X+
    2446:	dc 91       	ld	r29, X
    2448:	17 97       	sbiw	r26, 0x07	; 7
    244a:	40 91 65 16 	lds	r20, 0x1665	; 0x801665 <pxCurrentTCB>
    244e:	50 91 66 16 	lds	r21, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2452:	42 5f       	subi	r20, 0xF2	; 242
    2454:	5f 4f       	sbci	r21, 0xFF	; 255
    2456:	5d 83       	std	Y+5, r21	; 0x05
    2458:	4c 83       	std	Y+4, r20	; 0x04
    245a:	40 91 65 16 	lds	r20, 0x1665	; 0x801665 <pxCurrentTCB>
    245e:	50 91 66 16 	lds	r21, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2462:	42 5f       	subi	r20, 0xF2	; 242
    2464:	5f 4f       	sbci	r21, 0xFF	; 255
    2466:	17 96       	adiw	r26, 0x07	; 7
    2468:	5c 93       	st	X, r21
    246a:	4e 93       	st	-X, r20
    246c:	16 97       	sbiw	r26, 0x06	; 6
    246e:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
    2472:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2476:	59 96       	adiw	r26, 0x19	; 25
    2478:	fc 93       	st	X, r31
    247a:	ee 93       	st	-X, r30
    247c:	58 97       	sbiw	r26, 0x18	; 24
    247e:	30 81       	ld	r19, Z
    2480:	3f 5f       	subi	r19, 0xFF	; 255
    2482:	30 83       	st	Z, r19
    2484:	22 23       	and	r18, r18
    2486:	19 f0       	breq	.+6      	; 0x248e <vTaskPlaceOnEventListRestricted+0x7a>
    2488:	6f ef       	ldi	r22, 0xFF	; 255
    248a:	7f ef       	ldi	r23, 0xFF	; 255
    248c:	cb 01       	movw	r24, r22
    248e:	42 2f       	mov	r20, r18
    2490:	39 db       	rcall	.-2446   	; 0x1b04 <prvAddCurrentTaskToDelayedList>
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <xTaskRemoveFromEventList>:
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	dc 01       	movw	r26, r24
    249e:	17 96       	adiw	r26, 0x07	; 7
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	18 97       	sbiw	r26, 0x08	; 8
    24a6:	00 84       	ldd	r0, Z+8	; 0x08
    24a8:	f1 85       	ldd	r31, Z+9	; 0x09
    24aa:	e0 2d       	mov	r30, r0
    24ac:	a0 8d       	ldd	r26, Z+24	; 0x18
    24ae:	b1 8d       	ldd	r27, Z+25	; 0x19
    24b0:	c2 89       	ldd	r28, Z+18	; 0x12
    24b2:	d3 89       	ldd	r29, Z+19	; 0x13
    24b4:	84 89       	ldd	r24, Z+20	; 0x14
    24b6:	95 89       	ldd	r25, Z+21	; 0x15
    24b8:	9f 83       	std	Y+7, r25	; 0x07
    24ba:	8e 83       	std	Y+6, r24	; 0x06
    24bc:	c4 89       	ldd	r28, Z+20	; 0x14
    24be:	d5 89       	ldd	r29, Z+21	; 0x15
    24c0:	82 89       	ldd	r24, Z+18	; 0x12
    24c2:	93 89       	ldd	r25, Z+19	; 0x13
    24c4:	9d 83       	std	Y+5, r25	; 0x05
    24c6:	8c 83       	std	Y+4, r24	; 0x04
    24c8:	11 96       	adiw	r26, 0x01	; 1
    24ca:	8d 91       	ld	r24, X+
    24cc:	9c 91       	ld	r25, X
    24ce:	12 97       	sbiw	r26, 0x02	; 2
    24d0:	9f 01       	movw	r18, r30
    24d2:	22 5f       	subi	r18, 0xF2	; 242
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	82 17       	cp	r24, r18
    24d8:	93 07       	cpc	r25, r19
    24da:	31 f4       	brne	.+12     	; 0x24e8 <xTaskRemoveFromEventList+0x50>
    24dc:	84 89       	ldd	r24, Z+20	; 0x14
    24de:	95 89       	ldd	r25, Z+21	; 0x15
    24e0:	12 96       	adiw	r26, 0x02	; 2
    24e2:	9c 93       	st	X, r25
    24e4:	8e 93       	st	-X, r24
    24e6:	11 97       	sbiw	r26, 0x01	; 1
    24e8:	11 8e       	std	Z+25, r1	; 0x19
    24ea:	10 8e       	std	Z+24, r1	; 0x18
    24ec:	8c 91       	ld	r24, X
    24ee:	81 50       	subi	r24, 0x01	; 1
    24f0:	8c 93       	st	X, r24
    24f2:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    24f6:	81 11       	cpse	r24, r1
    24f8:	52 c0       	rjmp	.+164    	; 0x259e <xTaskRemoveFromEventList+0x106>
    24fa:	a4 85       	ldd	r26, Z+12	; 0x0c
    24fc:	b5 85       	ldd	r27, Z+13	; 0x0d
    24fe:	c6 81       	ldd	r28, Z+6	; 0x06
    2500:	d7 81       	ldd	r29, Z+7	; 0x07
    2502:	80 85       	ldd	r24, Z+8	; 0x08
    2504:	91 85       	ldd	r25, Z+9	; 0x09
    2506:	9f 83       	std	Y+7, r25	; 0x07
    2508:	8e 83       	std	Y+6, r24	; 0x06
    250a:	c0 85       	ldd	r28, Z+8	; 0x08
    250c:	d1 85       	ldd	r29, Z+9	; 0x09
    250e:	86 81       	ldd	r24, Z+6	; 0x06
    2510:	97 81       	ldd	r25, Z+7	; 0x07
    2512:	9d 83       	std	Y+5, r25	; 0x05
    2514:	8c 83       	std	Y+4, r24	; 0x04
    2516:	11 96       	adiw	r26, 0x01	; 1
    2518:	8d 91       	ld	r24, X+
    251a:	9c 91       	ld	r25, X
    251c:	12 97       	sbiw	r26, 0x02	; 2
    251e:	9f 01       	movw	r18, r30
    2520:	2e 5f       	subi	r18, 0xFE	; 254
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	82 17       	cp	r24, r18
    2526:	93 07       	cpc	r25, r19
    2528:	31 f4       	brne	.+12     	; 0x2536 <xTaskRemoveFromEventList+0x9e>
    252a:	80 85       	ldd	r24, Z+8	; 0x08
    252c:	91 85       	ldd	r25, Z+9	; 0x09
    252e:	12 96       	adiw	r26, 0x02	; 2
    2530:	9c 93       	st	X, r25
    2532:	8e 93       	st	-X, r24
    2534:	11 97       	sbiw	r26, 0x01	; 1
    2536:	15 86       	std	Z+13, r1	; 0x0d
    2538:	14 86       	std	Z+12, r1	; 0x0c
    253a:	8c 91       	ld	r24, X
    253c:	81 50       	subi	r24, 0x01	; 1
    253e:	8c 93       	st	X, r24
    2540:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2542:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    2546:	8a 17       	cp	r24, r26
    2548:	10 f4       	brcc	.+4      	; 0x254e <xTaskRemoveFromEventList+0xb6>
    254a:	a0 93 b5 15 	sts	0x15B5, r26	; 0x8015b5 <uxTopReadyPriority>
    254e:	8b e0       	ldi	r24, 0x0B	; 11
    2550:	8a 9f       	mul	r24, r26
    2552:	d0 01       	movw	r26, r0
    2554:	11 24       	eor	r1, r1
    2556:	a9 50       	subi	r26, 0x09	; 9
    2558:	ba 4e       	sbci	r27, 0xEA	; 234
    255a:	11 96       	adiw	r26, 0x01	; 1
    255c:	0d 90       	ld	r0, X+
    255e:	bc 91       	ld	r27, X
    2560:	a0 2d       	mov	r26, r0
    2562:	b7 83       	std	Z+7, r27	; 0x07
    2564:	a6 83       	std	Z+6, r26	; 0x06
    2566:	16 96       	adiw	r26, 0x06	; 6
    2568:	4d 91       	ld	r20, X+
    256a:	5c 91       	ld	r21, X
    256c:	17 97       	sbiw	r26, 0x07	; 7
    256e:	51 87       	std	Z+9, r21	; 0x09
    2570:	40 87       	std	Z+8, r20	; 0x08
    2572:	16 96       	adiw	r26, 0x06	; 6
    2574:	cd 91       	ld	r28, X+
    2576:	dc 91       	ld	r29, X
    2578:	17 97       	sbiw	r26, 0x07	; 7
    257a:	3d 83       	std	Y+5, r19	; 0x05
    257c:	2c 83       	std	Y+4, r18	; 0x04
    257e:	17 96       	adiw	r26, 0x07	; 7
    2580:	3c 93       	st	X, r19
    2582:	2e 93       	st	-X, r18
    2584:	16 97       	sbiw	r26, 0x06	; 6
    2586:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2588:	8a 9f       	mul	r24, r26
    258a:	d0 01       	movw	r26, r0
    258c:	11 24       	eor	r1, r1
    258e:	a9 50       	subi	r26, 0x09	; 9
    2590:	ba 4e       	sbci	r27, 0xEA	; 234
    2592:	b5 87       	std	Z+13, r27	; 0x0d
    2594:	a4 87       	std	Z+12, r26	; 0x0c
    2596:	8c 91       	ld	r24, X
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	8c 93       	st	X, r24
    259c:	1c c0       	rjmp	.+56     	; 0x25d6 <xTaskRemoveFromEventList+0x13e>
    259e:	42 ed       	ldi	r20, 0xD2	; 210
    25a0:	55 e1       	ldi	r21, 0x15	; 21
    25a2:	da 01       	movw	r26, r20
    25a4:	11 96       	adiw	r26, 0x01	; 1
    25a6:	cd 91       	ld	r28, X+
    25a8:	dc 91       	ld	r29, X
    25aa:	12 97       	sbiw	r26, 0x02	; 2
    25ac:	d3 8b       	std	Z+19, r29	; 0x13
    25ae:	c2 8b       	std	Z+18, r28	; 0x12
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
    25b2:	9f 81       	ldd	r25, Y+7	; 0x07
    25b4:	95 8b       	std	Z+21, r25	; 0x15
    25b6:	84 8b       	std	Z+20, r24	; 0x14
    25b8:	8e 81       	ldd	r24, Y+6	; 0x06
    25ba:	9f 81       	ldd	r25, Y+7	; 0x07
    25bc:	dc 01       	movw	r26, r24
    25be:	15 96       	adiw	r26, 0x05	; 5
    25c0:	3c 93       	st	X, r19
    25c2:	2e 93       	st	-X, r18
    25c4:	14 97       	sbiw	r26, 0x04	; 4
    25c6:	3f 83       	std	Y+7, r19	; 0x07
    25c8:	2e 83       	std	Y+6, r18	; 0x06
    25ca:	51 8f       	std	Z+25, r21	; 0x19
    25cc:	40 8f       	std	Z+24, r20	; 0x18
    25ce:	da 01       	movw	r26, r20
    25d0:	8c 91       	ld	r24, X
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	8c 93       	st	X, r24
    25d6:	92 8d       	ldd	r25, Z+26	; 0x1a
    25d8:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    25dc:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    25e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    25e2:	89 17       	cp	r24, r25
    25e4:	20 f4       	brcc	.+8      	; 0x25ee <xTaskRemoveFromEventList+0x156>
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xYieldPending>
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <xTaskRemoveFromEventList+0x158>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	08 95       	ret

000025f6 <vTaskRemoveFromUnorderedEventList>:
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	dc 01       	movw	r26, r24
    25fc:	70 68       	ori	r23, 0x80	; 128
    25fe:	4d 93       	st	X+, r20
    2600:	5d 93       	st	X+, r21
    2602:	6d 93       	st	X+, r22
    2604:	7c 93       	st	X, r23
    2606:	13 97       	sbiw	r26, 0x03	; 3
    2608:	18 96       	adiw	r26, 0x08	; 8
    260a:	ed 91       	ld	r30, X+
    260c:	fc 91       	ld	r31, X
    260e:	19 97       	sbiw	r26, 0x09	; 9
    2610:	1a 96       	adiw	r26, 0x0a	; 10
    2612:	4d 91       	ld	r20, X+
    2614:	5c 91       	ld	r21, X
    2616:	1b 97       	sbiw	r26, 0x0b	; 11
    2618:	14 96       	adiw	r26, 0x04	; 4
    261a:	8d 91       	ld	r24, X+
    261c:	9c 91       	ld	r25, X
    261e:	15 97       	sbiw	r26, 0x05	; 5
    2620:	16 96       	adiw	r26, 0x06	; 6
    2622:	2d 91       	ld	r18, X+
    2624:	3c 91       	ld	r19, X
    2626:	17 97       	sbiw	r26, 0x07	; 7
    2628:	ec 01       	movw	r28, r24
    262a:	3f 83       	std	Y+7, r19	; 0x07
    262c:	2e 83       	std	Y+6, r18	; 0x06
    262e:	16 96       	adiw	r26, 0x06	; 6
    2630:	8d 91       	ld	r24, X+
    2632:	9c 91       	ld	r25, X
    2634:	17 97       	sbiw	r26, 0x07	; 7
    2636:	14 96       	adiw	r26, 0x04	; 4
    2638:	2d 91       	ld	r18, X+
    263a:	3c 91       	ld	r19, X
    263c:	15 97       	sbiw	r26, 0x05	; 5
    263e:	ec 01       	movw	r28, r24
    2640:	3d 83       	std	Y+5, r19	; 0x05
    2642:	2c 83       	std	Y+4, r18	; 0x04
    2644:	ea 01       	movw	r28, r20
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	a8 17       	cp	r26, r24
    264c:	b9 07       	cpc	r27, r25
    264e:	31 f4       	brne	.+12     	; 0x265c <vTaskRemoveFromUnorderedEventList+0x66>
    2650:	16 96       	adiw	r26, 0x06	; 6
    2652:	8d 91       	ld	r24, X+
    2654:	9c 91       	ld	r25, X
    2656:	17 97       	sbiw	r26, 0x07	; 7
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	1b 96       	adiw	r26, 0x0b	; 11
    265e:	1c 92       	st	X, r1
    2660:	1e 92       	st	-X, r1
    2662:	1a 97       	sbiw	r26, 0x0a	; 10
    2664:	da 01       	movw	r26, r20
    2666:	8c 91       	ld	r24, X
    2668:	81 50       	subi	r24, 0x01	; 1
    266a:	8c 93       	st	X, r24
    266c:	a4 85       	ldd	r26, Z+12	; 0x0c
    266e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2670:	c6 81       	ldd	r28, Z+6	; 0x06
    2672:	d7 81       	ldd	r29, Z+7	; 0x07
    2674:	80 85       	ldd	r24, Z+8	; 0x08
    2676:	91 85       	ldd	r25, Z+9	; 0x09
    2678:	9f 83       	std	Y+7, r25	; 0x07
    267a:	8e 83       	std	Y+6, r24	; 0x06
    267c:	c0 85       	ldd	r28, Z+8	; 0x08
    267e:	d1 85       	ldd	r29, Z+9	; 0x09
    2680:	86 81       	ldd	r24, Z+6	; 0x06
    2682:	97 81       	ldd	r25, Z+7	; 0x07
    2684:	9d 83       	std	Y+5, r25	; 0x05
    2686:	8c 83       	std	Y+4, r24	; 0x04
    2688:	11 96       	adiw	r26, 0x01	; 1
    268a:	8d 91       	ld	r24, X+
    268c:	9c 91       	ld	r25, X
    268e:	12 97       	sbiw	r26, 0x02	; 2
    2690:	9f 01       	movw	r18, r30
    2692:	2e 5f       	subi	r18, 0xFE	; 254
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	82 17       	cp	r24, r18
    2698:	93 07       	cpc	r25, r19
    269a:	31 f4       	brne	.+12     	; 0x26a8 <vTaskRemoveFromUnorderedEventList+0xb2>
    269c:	80 85       	ldd	r24, Z+8	; 0x08
    269e:	91 85       	ldd	r25, Z+9	; 0x09
    26a0:	12 96       	adiw	r26, 0x02	; 2
    26a2:	9c 93       	st	X, r25
    26a4:	8e 93       	st	-X, r24
    26a6:	11 97       	sbiw	r26, 0x01	; 1
    26a8:	15 86       	std	Z+13, r1	; 0x0d
    26aa:	14 86       	std	Z+12, r1	; 0x0c
    26ac:	8c 91       	ld	r24, X
    26ae:	81 50       	subi	r24, 0x01	; 1
    26b0:	8c 93       	st	X, r24
    26b2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26b4:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    26b8:	8a 17       	cp	r24, r26
    26ba:	10 f4       	brcc	.+4      	; 0x26c0 <vTaskRemoveFromUnorderedEventList+0xca>
    26bc:	a0 93 b5 15 	sts	0x15B5, r26	; 0x8015b5 <uxTopReadyPriority>
    26c0:	8b e0       	ldi	r24, 0x0B	; 11
    26c2:	8a 9f       	mul	r24, r26
    26c4:	d0 01       	movw	r26, r0
    26c6:	11 24       	eor	r1, r1
    26c8:	a9 50       	subi	r26, 0x09	; 9
    26ca:	ba 4e       	sbci	r27, 0xEA	; 234
    26cc:	11 96       	adiw	r26, 0x01	; 1
    26ce:	0d 90       	ld	r0, X+
    26d0:	bc 91       	ld	r27, X
    26d2:	a0 2d       	mov	r26, r0
    26d4:	b7 83       	std	Z+7, r27	; 0x07
    26d6:	a6 83       	std	Z+6, r26	; 0x06
    26d8:	16 96       	adiw	r26, 0x06	; 6
    26da:	4d 91       	ld	r20, X+
    26dc:	5c 91       	ld	r21, X
    26de:	17 97       	sbiw	r26, 0x07	; 7
    26e0:	51 87       	std	Z+9, r21	; 0x09
    26e2:	40 87       	std	Z+8, r20	; 0x08
    26e4:	16 96       	adiw	r26, 0x06	; 6
    26e6:	cd 91       	ld	r28, X+
    26e8:	dc 91       	ld	r29, X
    26ea:	17 97       	sbiw	r26, 0x07	; 7
    26ec:	3d 83       	std	Y+5, r19	; 0x05
    26ee:	2c 83       	std	Y+4, r18	; 0x04
    26f0:	17 96       	adiw	r26, 0x07	; 7
    26f2:	3c 93       	st	X, r19
    26f4:	2e 93       	st	-X, r18
    26f6:	16 97       	sbiw	r26, 0x06	; 6
    26f8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26fa:	8a 9f       	mul	r24, r26
    26fc:	d0 01       	movw	r26, r0
    26fe:	11 24       	eor	r1, r1
    2700:	a9 50       	subi	r26, 0x09	; 9
    2702:	ba 4e       	sbci	r27, 0xEA	; 234
    2704:	b5 87       	std	Z+13, r27	; 0x0d
    2706:	a4 87       	std	Z+12, r26	; 0x0c
    2708:	8c 91       	ld	r24, X
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	8c 93       	st	X, r24
    270e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2710:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2714:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2718:	82 8d       	ldd	r24, Z+26	; 0x1a
    271a:	89 17       	cp	r24, r25
    271c:	18 f4       	brcc	.+6      	; 0x2724 <vTaskRemoveFromUnorderedEventList+0x12e>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xYieldPending>
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <vTaskSetTimeOutState>:
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	0f 92       	push	r0
    2730:	20 91 ae 15 	lds	r18, 0x15AE	; 0x8015ae <xNumOfOverflows>
    2734:	fc 01       	movw	r30, r24
    2736:	20 83       	st	Z, r18
    2738:	40 91 b6 15 	lds	r20, 0x15B6	; 0x8015b6 <xTickCount>
    273c:	50 91 b7 15 	lds	r21, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    2740:	60 91 b8 15 	lds	r22, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    2744:	70 91 b9 15 	lds	r23, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    2748:	41 83       	std	Z+1, r20	; 0x01
    274a:	52 83       	std	Z+2, r21	; 0x02
    274c:	63 83       	std	Z+3, r22	; 0x03
    274e:	74 83       	std	Z+4, r23	; 0x04
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	08 95       	ret

00002756 <vTaskInternalSetTimeOutState>:
    2756:	20 91 ae 15 	lds	r18, 0x15AE	; 0x8015ae <xNumOfOverflows>
    275a:	fc 01       	movw	r30, r24
    275c:	20 83       	st	Z, r18
    275e:	40 91 b6 15 	lds	r20, 0x15B6	; 0x8015b6 <xTickCount>
    2762:	50 91 b7 15 	lds	r21, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    2766:	60 91 b8 15 	lds	r22, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    276a:	70 91 b9 15 	lds	r23, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    276e:	41 83       	std	Z+1, r20	; 0x01
    2770:	52 83       	std	Z+2, r21	; 0x02
    2772:	63 83       	std	Z+3, r22	; 0x03
    2774:	74 83       	std	Z+4, r23	; 0x04
    2776:	08 95       	ret

00002778 <xTaskCheckForTimeOut>:
    2778:	8f 92       	push	r8
    277a:	9f 92       	push	r9
    277c:	af 92       	push	r10
    277e:	bf 92       	push	r11
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	fb 01       	movw	r30, r22
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	0f 92       	push	r0
    2798:	c0 90 b6 15 	lds	r12, 0x15B6	; 0x8015b6 <xTickCount>
    279c:	d0 90 b7 15 	lds	r13, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    27a0:	e0 90 b8 15 	lds	r14, 0x15B8	; 0x8015b8 <xTickCount+0x2>
    27a4:	f0 90 b9 15 	lds	r15, 0x15B9	; 0x8015b9 <xTickCount+0x3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	0d 91       	ld	r16, X+
    27ae:	1d 91       	ld	r17, X+
    27b0:	2d 91       	ld	r18, X+
    27b2:	3c 91       	ld	r19, X
    27b4:	14 97       	sbiw	r26, 0x04	; 4
    27b6:	46 01       	movw	r8, r12
    27b8:	57 01       	movw	r10, r14
    27ba:	80 1a       	sub	r8, r16
    27bc:	91 0a       	sbc	r9, r17
    27be:	a2 0a       	sbc	r10, r18
    27c0:	b3 0a       	sbc	r11, r19
    27c2:	40 81       	ld	r20, Z
    27c4:	51 81       	ldd	r21, Z+1	; 0x01
    27c6:	62 81       	ldd	r22, Z+2	; 0x02
    27c8:	73 81       	ldd	r23, Z+3	; 0x03
    27ca:	4f 3f       	cpi	r20, 0xFF	; 255
    27cc:	bf ef       	ldi	r27, 0xFF	; 255
    27ce:	5b 07       	cpc	r21, r27
    27d0:	6b 07       	cpc	r22, r27
    27d2:	7b 07       	cpc	r23, r27
    27d4:	39 f1       	breq	.+78     	; 0x2824 <xTaskCheckForTimeOut+0xac>
    27d6:	ec 01       	movw	r28, r24
    27d8:	b8 81       	ld	r27, Y
    27da:	a0 91 ae 15 	lds	r26, 0x15AE	; 0x8015ae <xNumOfOverflows>
    27de:	ba 17       	cp	r27, r26
    27e0:	59 f0       	breq	.+22     	; 0x27f8 <xTaskCheckForTimeOut+0x80>
    27e2:	c0 16       	cp	r12, r16
    27e4:	d1 06       	cpc	r13, r17
    27e6:	e2 06       	cpc	r14, r18
    27e8:	f3 06       	cpc	r15, r19
    27ea:	30 f0       	brcs	.+12     	; 0x27f8 <xTaskCheckForTimeOut+0x80>
    27ec:	10 82       	st	Z, r1
    27ee:	11 82       	std	Z+1, r1	; 0x01
    27f0:	12 82       	std	Z+2, r1	; 0x02
    27f2:	13 82       	std	Z+3, r1	; 0x03
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	17 c0       	rjmp	.+46     	; 0x2826 <xTaskCheckForTimeOut+0xae>
    27f8:	84 16       	cp	r8, r20
    27fa:	95 06       	cpc	r9, r21
    27fc:	a6 06       	cpc	r10, r22
    27fe:	b7 06       	cpc	r11, r23
    2800:	58 f4       	brcc	.+22     	; 0x2818 <xTaskCheckForTimeOut+0xa0>
    2802:	48 19       	sub	r20, r8
    2804:	59 09       	sbc	r21, r9
    2806:	6a 09       	sbc	r22, r10
    2808:	7b 09       	sbc	r23, r11
    280a:	40 83       	st	Z, r20
    280c:	51 83       	std	Z+1, r21	; 0x01
    280e:	62 83       	std	Z+2, r22	; 0x02
    2810:	73 83       	std	Z+3, r23	; 0x03
    2812:	a1 df       	rcall	.-190    	; 0x2756 <vTaskInternalSetTimeOutState>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	07 c0       	rjmp	.+14     	; 0x2826 <xTaskCheckForTimeOut+0xae>
    2818:	10 82       	st	Z, r1
    281a:	11 82       	std	Z+1, r1	; 0x01
    281c:	12 82       	std	Z+2, r1	; 0x02
    281e:	13 82       	std	Z+3, r1	; 0x03
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <xTaskCheckForTimeOut+0xae>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	0f 90       	pop	r0
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	df 90       	pop	r13
    2838:	cf 90       	pop	r12
    283a:	bf 90       	pop	r11
    283c:	af 90       	pop	r10
    283e:	9f 90       	pop	r9
    2840:	8f 90       	pop	r8
    2842:	08 95       	ret

00002844 <vTaskMissedYield>:
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xYieldPending>
    284a:	08 95       	ret

0000284c <xTaskGetCurrentTaskHandle>:
    284c:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    2850:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2854:	08 95       	ret

00002856 <xTaskGetSchedulerState>:
    2856:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <xSchedulerRunning>
    285a:	88 23       	and	r24, r24
    285c:	31 f0       	breq	.+12     	; 0x286a <xTaskGetSchedulerState+0x14>
    285e:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    2862:	81 11       	cpse	r24, r1
    2864:	04 c0       	rjmp	.+8      	; 0x286e <xTaskGetSchedulerState+0x18>
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	08 95       	ret
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	08 95       	ret
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	08 95       	ret

00002872 <xTaskPriorityDisinherit>:
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	fc 01       	movw	r30, r24
    287c:	89 2b       	or	r24, r25
    287e:	09 f4       	brne	.+2      	; 0x2882 <xTaskPriorityDisinherit+0x10>
    2880:	49 c0       	rjmp	.+146    	; 0x2914 <xTaskPriorityDisinherit+0xa2>
    2882:	86 a5       	ldd	r24, Z+46	; 0x2e
    2884:	81 50       	subi	r24, 0x01	; 1
    2886:	86 a7       	std	Z+46, r24	; 0x2e
    2888:	22 8d       	ldd	r18, Z+26	; 0x1a
    288a:	95 a5       	ldd	r25, Z+45	; 0x2d
    288c:	29 17       	cp	r18, r25
    288e:	09 f4       	brne	.+2      	; 0x2892 <xTaskPriorityDisinherit+0x20>
    2890:	43 c0       	rjmp	.+134    	; 0x2918 <xTaskPriorityDisinherit+0xa6>
    2892:	81 11       	cpse	r24, r1
    2894:	43 c0       	rjmp	.+134    	; 0x291c <xTaskPriorityDisinherit+0xaa>
    2896:	ef 01       	movw	r28, r30
    2898:	8f 01       	movw	r16, r30
    289a:	0e 5f       	subi	r16, 0xFE	; 254
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	c8 01       	movw	r24, r16
    28a0:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
    28a4:	ed a5       	ldd	r30, Y+45	; 0x2d
    28a6:	ea 8f       	std	Y+26, r30	; 0x1a
    28a8:	8a e0       	ldi	r24, 0x0A	; 10
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e0       	ldi	r26, 0x00	; 0
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	8e 1b       	sub	r24, r30
    28b2:	91 09       	sbc	r25, r1
    28b4:	a1 09       	sbc	r26, r1
    28b6:	b1 09       	sbc	r27, r1
    28b8:	8e 87       	std	Y+14, r24	; 0x0e
    28ba:	9f 87       	std	Y+15, r25	; 0x0f
    28bc:	a8 8b       	std	Y+16, r26	; 0x10
    28be:	b9 8b       	std	Y+17, r27	; 0x11
    28c0:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    28c4:	8e 17       	cp	r24, r30
    28c6:	10 f4       	brcc	.+4      	; 0x28cc <xTaskPriorityDisinherit+0x5a>
    28c8:	e0 93 b5 15 	sts	0x15B5, r30	; 0x8015b5 <uxTopReadyPriority>
    28cc:	8b e0       	ldi	r24, 0x0B	; 11
    28ce:	8e 9f       	mul	r24, r30
    28d0:	f0 01       	movw	r30, r0
    28d2:	11 24       	eor	r1, r1
    28d4:	e9 50       	subi	r30, 0x09	; 9
    28d6:	fa 4e       	sbci	r31, 0xEA	; 234
    28d8:	01 80       	ldd	r0, Z+1	; 0x01
    28da:	f2 81       	ldd	r31, Z+2	; 0x02
    28dc:	e0 2d       	mov	r30, r0
    28de:	ff 83       	std	Y+7, r31	; 0x07
    28e0:	ee 83       	std	Y+6, r30	; 0x06
    28e2:	26 81       	ldd	r18, Z+6	; 0x06
    28e4:	37 81       	ldd	r19, Z+7	; 0x07
    28e6:	39 87       	std	Y+9, r19	; 0x09
    28e8:	28 87       	std	Y+8, r18	; 0x08
    28ea:	a6 81       	ldd	r26, Z+6	; 0x06
    28ec:	b7 81       	ldd	r27, Z+7	; 0x07
    28ee:	15 96       	adiw	r26, 0x05	; 5
    28f0:	1c 93       	st	X, r17
    28f2:	0e 93       	st	-X, r16
    28f4:	14 97       	sbiw	r26, 0x04	; 4
    28f6:	17 83       	std	Z+7, r17	; 0x07
    28f8:	06 83       	std	Z+6, r16	; 0x06
    28fa:	ea 8d       	ldd	r30, Y+26	; 0x1a
    28fc:	8e 9f       	mul	r24, r30
    28fe:	f0 01       	movw	r30, r0
    2900:	11 24       	eor	r1, r1
    2902:	e9 50       	subi	r30, 0x09	; 9
    2904:	fa 4e       	sbci	r31, 0xEA	; 234
    2906:	fd 87       	std	Y+13, r31	; 0x0d
    2908:	ec 87       	std	Y+12, r30	; 0x0c
    290a:	80 81       	ld	r24, Z
    290c:	8f 5f       	subi	r24, 0xFF	; 255
    290e:	80 83       	st	Z, r24
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	05 c0       	rjmp	.+10     	; 0x291e <xTaskPriorityDisinherit+0xac>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	03 c0       	rjmp	.+6      	; 0x291e <xTaskPriorityDisinherit+0xac>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	01 c0       	rjmp	.+2      	; 0x291e <xTaskPriorityDisinherit+0xac>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	08 95       	ret

00002928 <uxTaskResetEventItemValue>:
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2934:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2938:	66 85       	ldd	r22, Z+14	; 0x0e
    293a:	77 85       	ldd	r23, Z+15	; 0x0f
    293c:	80 89       	ldd	r24, Z+16	; 0x10
    293e:	91 89       	ldd	r25, Z+17	; 0x11
    2940:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2944:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2948:	a0 91 65 16 	lds	r26, 0x1665	; 0x801665 <pxCurrentTCB>
    294c:	b0 91 66 16 	lds	r27, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2950:	5a 96       	adiw	r26, 0x1a	; 26
    2952:	2c 91       	ld	r18, X
    2954:	0f 2e       	mov	r0, r31
    2956:	fa e0       	ldi	r31, 0x0A	; 10
    2958:	cf 2e       	mov	r12, r31
    295a:	d1 2c       	mov	r13, r1
    295c:	e1 2c       	mov	r14, r1
    295e:	f1 2c       	mov	r15, r1
    2960:	f0 2d       	mov	r31, r0
    2962:	c2 1a       	sub	r12, r18
    2964:	d1 08       	sbc	r13, r1
    2966:	e1 08       	sbc	r14, r1
    2968:	f1 08       	sbc	r15, r1
    296a:	c6 86       	std	Z+14, r12	; 0x0e
    296c:	d7 86       	std	Z+15, r13	; 0x0f
    296e:	e0 8a       	std	Z+16, r14	; 0x10
    2970:	f1 8a       	std	Z+17, r15	; 0x11
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	df 90       	pop	r13
    2978:	cf 90       	pop	r12
    297a:	08 95       	ret

0000297c <xTaskGenericNotifyWait>:
    297c:	4f 92       	push	r4
    297e:	5f 92       	push	r5
    2980:	6f 92       	push	r6
    2982:	7f 92       	push	r7
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	28 01       	movw	r4, r16
    299a:	39 01       	movw	r6, r18
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	0f 92       	push	r0
    29a2:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    29a6:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    29aa:	c8 2f       	mov	r28, r24
    29ac:	d0 e0       	ldi	r29, 0x00	; 0
    29ae:	ec 0f       	add	r30, r28
    29b0:	fd 1f       	adc	r31, r29
    29b2:	83 a9       	ldd	r24, Z+51	; 0x33
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	71 f1       	breq	.+92     	; 0x2a14 <xTaskGenericNotifyWait+0x98>
    29b8:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    29bc:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    29c0:	ce 01       	movw	r24, r28
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	e8 0f       	add	r30, r24
    29cc:	f9 1f       	adc	r31, r25
    29ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    29d0:	90 a9       	ldd	r25, Z+48	; 0x30
    29d2:	a1 a9       	ldd	r26, Z+49	; 0x31
    29d4:	b2 a9       	ldd	r27, Z+50	; 0x32
    29d6:	40 95       	com	r20
    29d8:	50 95       	com	r21
    29da:	60 95       	com	r22
    29dc:	70 95       	com	r23
    29de:	48 23       	and	r20, r24
    29e0:	59 23       	and	r21, r25
    29e2:	6a 23       	and	r22, r26
    29e4:	7b 23       	and	r23, r27
    29e6:	47 a7       	std	Z+47, r20	; 0x2f
    29e8:	50 ab       	std	Z+48, r21	; 0x30
    29ea:	61 ab       	std	Z+49, r22	; 0x31
    29ec:	72 ab       	std	Z+50, r23	; 0x32
    29ee:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    29f2:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    29f6:	ec 0f       	add	r30, r28
    29f8:	fd 1f       	adc	r31, r29
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	83 ab       	std	Z+51, r24	; 0x33
    29fe:	a1 14       	cp	r10, r1
    2a00:	b1 04       	cpc	r11, r1
    2a02:	c1 04       	cpc	r12, r1
    2a04:	d1 04       	cpc	r13, r1
    2a06:	31 f0       	breq	.+12     	; 0x2a14 <xTaskGenericNotifyWait+0x98>
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	c6 01       	movw	r24, r12
    2a0c:	b5 01       	movw	r22, r10
    2a0e:	7a d8       	rcall	.-3852   	; 0x1b04 <prvAddCurrentTaskToDelayedList>
    2a10:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    2a14:	0f 90       	pop	r0
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	0f 92       	push	r0
    2a1e:	e1 14       	cp	r14, r1
    2a20:	f1 04       	cpc	r15, r1
    2a22:	a1 f0       	breq	.+40     	; 0x2a4c <xTaskGenericNotifyWait+0xd0>
    2a24:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2a28:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	e8 0f       	add	r30, r24
    2a38:	f9 1f       	adc	r31, r25
    2a3a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a3c:	90 a9       	ldd	r25, Z+48	; 0x30
    2a3e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a40:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a42:	f7 01       	movw	r30, r14
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
    2a4c:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2a50:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2a54:	ec 0f       	add	r30, r28
    2a56:	fd 1f       	adc	r31, r29
    2a58:	83 a9       	ldd	r24, Z+51	; 0x33
    2a5a:	82 30       	cpi	r24, 0x02	; 2
    2a5c:	e9 f4       	brne	.+58     	; 0x2a98 <xTaskGenericNotifyWait+0x11c>
    2a5e:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2a62:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2a66:	ce 01       	movw	r24, r28
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	e8 0f       	add	r30, r24
    2a72:	f9 1f       	adc	r31, r25
    2a74:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a76:	90 a9       	ldd	r25, Z+48	; 0x30
    2a78:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a7a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a7c:	40 94       	com	r4
    2a7e:	50 94       	com	r5
    2a80:	60 94       	com	r6
    2a82:	70 94       	com	r7
    2a84:	48 22       	and	r4, r24
    2a86:	59 22       	and	r5, r25
    2a88:	6a 22       	and	r6, r26
    2a8a:	7b 22       	and	r7, r27
    2a8c:	47 a6       	std	Z+47, r4	; 0x2f
    2a8e:	50 aa       	std	Z+48, r5	; 0x30
    2a90:	61 aa       	std	Z+49, r6	; 0x31
    2a92:	72 aa       	std	Z+50, r7	; 0x32
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <xTaskGenericNotifyWait+0x11e>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	20 91 65 16 	lds	r18, 0x1665	; 0x801665 <pxCurrentTCB>
    2a9e:	30 91 66 16 	lds	r19, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2aa2:	c2 0f       	add	r28, r18
    2aa4:	d3 1f       	adc	r29, r19
    2aa6:	1b aa       	std	Y+51, r1	; 0x33
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	ff 90       	pop	r15
    2ab6:	ef 90       	pop	r14
    2ab8:	df 90       	pop	r13
    2aba:	cf 90       	pop	r12
    2abc:	bf 90       	pop	r11
    2abe:	af 90       	pop	r10
    2ac0:	7f 90       	pop	r7
    2ac2:	6f 90       	pop	r6
    2ac4:	5f 90       	pop	r5
    2ac6:	4f 90       	pop	r4
    2ac8:	08 95       	ret

00002aca <xTaskGenericNotify>:
    2aca:	8f 92       	push	r8
    2acc:	9f 92       	push	r9
    2ace:	af 92       	push	r10
    2ad0:	bf 92       	push	r11
    2ad2:	ef 92       	push	r14
    2ad4:	ff 92       	push	r15
    2ad6:	0f 93       	push	r16
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	dc 01       	movw	r26, r24
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	0f 92       	push	r0
    2ae4:	e1 14       	cp	r14, r1
    2ae6:	f1 04       	cpc	r15, r1
    2ae8:	89 f0       	breq	.+34     	; 0x2b0c <xTaskGenericNotify+0x42>
    2aea:	e6 2f       	mov	r30, r22
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	ee 0f       	add	r30, r30
    2af4:	ff 1f       	adc	r31, r31
    2af6:	e8 0f       	add	r30, r24
    2af8:	f9 1f       	adc	r31, r25
    2afa:	87 a4       	ldd	r8, Z+47	; 0x2f
    2afc:	90 a8       	ldd	r9, Z+48	; 0x30
    2afe:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b00:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b02:	f7 01       	movw	r30, r14
    2b04:	80 82       	st	Z, r8
    2b06:	91 82       	std	Z+1, r9	; 0x01
    2b08:	a2 82       	std	Z+2, r10	; 0x02
    2b0a:	b3 82       	std	Z+3, r11	; 0x03
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	fd 01       	movw	r30, r26
    2b10:	e6 0f       	add	r30, r22
    2b12:	f7 1f       	adc	r31, r23
    2b14:	83 a9       	ldd	r24, Z+51	; 0x33
    2b16:	92 e0       	ldi	r25, 0x02	; 2
    2b18:	93 ab       	std	Z+51, r25	; 0x33
    2b1a:	02 30       	cpi	r16, 0x02	; 2
    2b1c:	01 f1       	breq	.+64     	; 0x2b5e <xTaskGenericNotify+0x94>
    2b1e:	18 f4       	brcc	.+6      	; 0x2b26 <xTaskGenericNotify+0x5c>
    2b20:	01 30       	cpi	r16, 0x01	; 1
    2b22:	31 f0       	breq	.+12     	; 0x2b30 <xTaskGenericNotify+0x66>
    2b24:	4d c0       	rjmp	.+154    	; 0x2bc0 <xTaskGenericNotify+0xf6>
    2b26:	03 30       	cpi	r16, 0x03	; 3
    2b28:	79 f1       	breq	.+94     	; 0x2b88 <xTaskGenericNotify+0xbe>
    2b2a:	04 30       	cpi	r16, 0x04	; 4
    2b2c:	d1 f1       	breq	.+116    	; 0x2ba2 <xTaskGenericNotify+0xd8>
    2b2e:	48 c0       	rjmp	.+144    	; 0x2bc0 <xTaskGenericNotify+0xf6>
    2b30:	66 0f       	add	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	66 0f       	add	r22, r22
    2b36:	77 1f       	adc	r23, r23
    2b38:	fd 01       	movw	r30, r26
    2b3a:	e6 0f       	add	r30, r22
    2b3c:	f7 1f       	adc	r31, r23
    2b3e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b40:	90 a8       	ldd	r9, Z+48	; 0x30
    2b42:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b44:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b46:	ba 01       	movw	r22, r20
    2b48:	a9 01       	movw	r20, r18
    2b4a:	48 29       	or	r20, r8
    2b4c:	59 29       	or	r21, r9
    2b4e:	6a 29       	or	r22, r10
    2b50:	7b 29       	or	r23, r11
    2b52:	47 a7       	std	Z+47, r20	; 0x2f
    2b54:	50 ab       	std	Z+48, r21	; 0x30
    2b56:	61 ab       	std	Z+49, r22	; 0x31
    2b58:	72 ab       	std	Z+50, r23	; 0x32
    2b5a:	01 e0       	ldi	r16, 0x01	; 1
    2b5c:	34 c0       	rjmp	.+104    	; 0x2bc6 <xTaskGenericNotify+0xfc>
    2b5e:	66 0f       	add	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	66 0f       	add	r22, r22
    2b64:	77 1f       	adc	r23, r23
    2b66:	fd 01       	movw	r30, r26
    2b68:	e6 0f       	add	r30, r22
    2b6a:	f7 1f       	adc	r31, r23
    2b6c:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b6e:	50 a9       	ldd	r21, Z+48	; 0x30
    2b70:	61 a9       	ldd	r22, Z+49	; 0x31
    2b72:	72 a9       	ldd	r23, Z+50	; 0x32
    2b74:	4f 5f       	subi	r20, 0xFF	; 255
    2b76:	5f 4f       	sbci	r21, 0xFF	; 255
    2b78:	6f 4f       	sbci	r22, 0xFF	; 255
    2b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7c:	47 a7       	std	Z+47, r20	; 0x2f
    2b7e:	50 ab       	std	Z+48, r21	; 0x30
    2b80:	61 ab       	std	Z+49, r22	; 0x31
    2b82:	72 ab       	std	Z+50, r23	; 0x32
    2b84:	01 e0       	ldi	r16, 0x01	; 1
    2b86:	1f c0       	rjmp	.+62     	; 0x2bc6 <xTaskGenericNotify+0xfc>
    2b88:	66 0f       	add	r22, r22
    2b8a:	77 1f       	adc	r23, r23
    2b8c:	66 0f       	add	r22, r22
    2b8e:	77 1f       	adc	r23, r23
    2b90:	fd 01       	movw	r30, r26
    2b92:	e6 0f       	add	r30, r22
    2b94:	f7 1f       	adc	r31, r23
    2b96:	27 a7       	std	Z+47, r18	; 0x2f
    2b98:	30 ab       	std	Z+48, r19	; 0x30
    2b9a:	41 ab       	std	Z+49, r20	; 0x31
    2b9c:	52 ab       	std	Z+50, r21	; 0x32
    2b9e:	01 e0       	ldi	r16, 0x01	; 1
    2ba0:	12 c0       	rjmp	.+36     	; 0x2bc6 <xTaskGenericNotify+0xfc>
    2ba2:	82 30       	cpi	r24, 0x02	; 2
    2ba4:	79 f0       	breq	.+30     	; 0x2bc4 <xTaskGenericNotify+0xfa>
    2ba6:	66 0f       	add	r22, r22
    2ba8:	77 1f       	adc	r23, r23
    2baa:	66 0f       	add	r22, r22
    2bac:	77 1f       	adc	r23, r23
    2bae:	fd 01       	movw	r30, r26
    2bb0:	e6 0f       	add	r30, r22
    2bb2:	f7 1f       	adc	r31, r23
    2bb4:	27 a7       	std	Z+47, r18	; 0x2f
    2bb6:	30 ab       	std	Z+48, r19	; 0x30
    2bb8:	41 ab       	std	Z+49, r20	; 0x31
    2bba:	52 ab       	std	Z+50, r21	; 0x32
    2bbc:	01 e0       	ldi	r16, 0x01	; 1
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <xTaskGenericNotify+0xfc>
    2bc0:	01 e0       	ldi	r16, 0x01	; 1
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <xTaskGenericNotify+0xfc>
    2bc4:	00 e0       	ldi	r16, 0x00	; 0
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <xTaskGenericNotify+0x102>
    2bca:	69 c0       	rjmp	.+210    	; 0x2c9e <xTaskGenericNotify+0x1d4>
    2bcc:	1c 96       	adiw	r26, 0x0c	; 12
    2bce:	ed 91       	ld	r30, X+
    2bd0:	fc 91       	ld	r31, X
    2bd2:	1d 97       	sbiw	r26, 0x0d	; 13
    2bd4:	16 96       	adiw	r26, 0x06	; 6
    2bd6:	cd 91       	ld	r28, X+
    2bd8:	dc 91       	ld	r29, X
    2bda:	17 97       	sbiw	r26, 0x07	; 7
    2bdc:	18 96       	adiw	r26, 0x08	; 8
    2bde:	8d 91       	ld	r24, X+
    2be0:	9c 91       	ld	r25, X
    2be2:	19 97       	sbiw	r26, 0x09	; 9
    2be4:	9f 83       	std	Y+7, r25	; 0x07
    2be6:	8e 83       	std	Y+6, r24	; 0x06
    2be8:	18 96       	adiw	r26, 0x08	; 8
    2bea:	cd 91       	ld	r28, X+
    2bec:	dc 91       	ld	r29, X
    2bee:	19 97       	sbiw	r26, 0x09	; 9
    2bf0:	16 96       	adiw	r26, 0x06	; 6
    2bf2:	8d 91       	ld	r24, X+
    2bf4:	9c 91       	ld	r25, X
    2bf6:	17 97       	sbiw	r26, 0x07	; 7
    2bf8:	9d 83       	std	Y+5, r25	; 0x05
    2bfa:	8c 83       	std	Y+4, r24	; 0x04
    2bfc:	81 81       	ldd	r24, Z+1	; 0x01
    2bfe:	92 81       	ldd	r25, Z+2	; 0x02
    2c00:	9d 01       	movw	r18, r26
    2c02:	2e 5f       	subi	r18, 0xFE	; 254
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	82 17       	cp	r24, r18
    2c08:	93 07       	cpc	r25, r19
    2c0a:	31 f4       	brne	.+12     	; 0x2c18 <xTaskGenericNotify+0x14e>
    2c0c:	18 96       	adiw	r26, 0x08	; 8
    2c0e:	8d 91       	ld	r24, X+
    2c10:	9c 91       	ld	r25, X
    2c12:	19 97       	sbiw	r26, 0x09	; 9
    2c14:	92 83       	std	Z+2, r25	; 0x02
    2c16:	81 83       	std	Z+1, r24	; 0x01
    2c18:	1d 96       	adiw	r26, 0x0d	; 13
    2c1a:	1c 92       	st	X, r1
    2c1c:	1e 92       	st	-X, r1
    2c1e:	1c 97       	sbiw	r26, 0x0c	; 12
    2c20:	80 81       	ld	r24, Z
    2c22:	81 50       	subi	r24, 0x01	; 1
    2c24:	80 83       	st	Z, r24
    2c26:	5a 96       	adiw	r26, 0x1a	; 26
    2c28:	ec 91       	ld	r30, X
    2c2a:	5a 97       	sbiw	r26, 0x1a	; 26
    2c2c:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    2c30:	8e 17       	cp	r24, r30
    2c32:	10 f4       	brcc	.+4      	; 0x2c38 <xTaskGenericNotify+0x16e>
    2c34:	e0 93 b5 15 	sts	0x15B5, r30	; 0x8015b5 <uxTopReadyPriority>
    2c38:	8b e0       	ldi	r24, 0x0B	; 11
    2c3a:	8e 9f       	mul	r24, r30
    2c3c:	f0 01       	movw	r30, r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	e9 50       	subi	r30, 0x09	; 9
    2c42:	fa 4e       	sbci	r31, 0xEA	; 234
    2c44:	01 80       	ldd	r0, Z+1	; 0x01
    2c46:	f2 81       	ldd	r31, Z+2	; 0x02
    2c48:	e0 2d       	mov	r30, r0
    2c4a:	17 96       	adiw	r26, 0x07	; 7
    2c4c:	fc 93       	st	X, r31
    2c4e:	ee 93       	st	-X, r30
    2c50:	16 97       	sbiw	r26, 0x06	; 6
    2c52:	46 81       	ldd	r20, Z+6	; 0x06
    2c54:	57 81       	ldd	r21, Z+7	; 0x07
    2c56:	19 96       	adiw	r26, 0x09	; 9
    2c58:	5c 93       	st	X, r21
    2c5a:	4e 93       	st	-X, r20
    2c5c:	18 97       	sbiw	r26, 0x08	; 8
    2c5e:	c6 81       	ldd	r28, Z+6	; 0x06
    2c60:	d7 81       	ldd	r29, Z+7	; 0x07
    2c62:	3d 83       	std	Y+5, r19	; 0x05
    2c64:	2c 83       	std	Y+4, r18	; 0x04
    2c66:	37 83       	std	Z+7, r19	; 0x07
    2c68:	26 83       	std	Z+6, r18	; 0x06
    2c6a:	5a 96       	adiw	r26, 0x1a	; 26
    2c6c:	ec 91       	ld	r30, X
    2c6e:	5a 97       	sbiw	r26, 0x1a	; 26
    2c70:	8e 9f       	mul	r24, r30
    2c72:	f0 01       	movw	r30, r0
    2c74:	11 24       	eor	r1, r1
    2c76:	e9 50       	subi	r30, 0x09	; 9
    2c78:	fa 4e       	sbci	r31, 0xEA	; 234
    2c7a:	1d 96       	adiw	r26, 0x0d	; 13
    2c7c:	fc 93       	st	X, r31
    2c7e:	ee 93       	st	-X, r30
    2c80:	1c 97       	sbiw	r26, 0x0c	; 12
    2c82:	80 81       	ld	r24, Z
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 83       	st	Z, r24
    2c88:	5a 96       	adiw	r26, 0x1a	; 26
    2c8a:	9c 91       	ld	r25, X
    2c8c:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2c90:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	89 17       	cp	r24, r25
    2c98:	10 f4       	brcc	.+4      	; 0x2c9e <xTaskGenericNotify+0x1d4>
    2c9a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	80 2f       	mov	r24, r16
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	bf 90       	pop	r11
    2cb0:	af 90       	pop	r10
    2cb2:	9f 90       	pop	r9
    2cb4:	8f 90       	pop	r8
    2cb6:	08 95       	ret

00002cb8 <xTaskGenericNotifyFromISR>:
    2cb8:	8f 92       	push	r8
    2cba:	9f 92       	push	r9
    2cbc:	af 92       	push	r10
    2cbe:	bf 92       	push	r11
    2cc0:	cf 92       	push	r12
    2cc2:	df 92       	push	r13
    2cc4:	ef 92       	push	r14
    2cc6:	ff 92       	push	r15
    2cc8:	0f 93       	push	r16
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	dc 01       	movw	r26, r24
    2cd0:	e1 14       	cp	r14, r1
    2cd2:	f1 04       	cpc	r15, r1
    2cd4:	89 f0       	breq	.+34     	; 0x2cf8 <xTaskGenericNotifyFromISR+0x40>
    2cd6:	e6 2f       	mov	r30, r22
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	e8 0f       	add	r30, r24
    2ce4:	f9 1f       	adc	r31, r25
    2ce6:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ce8:	90 a8       	ldd	r9, Z+48	; 0x30
    2cea:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cec:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cee:	f7 01       	movw	r30, r14
    2cf0:	80 82       	st	Z, r8
    2cf2:	91 82       	std	Z+1, r9	; 0x01
    2cf4:	a2 82       	std	Z+2, r10	; 0x02
    2cf6:	b3 82       	std	Z+3, r11	; 0x03
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	fd 01       	movw	r30, r26
    2cfc:	e6 0f       	add	r30, r22
    2cfe:	f7 1f       	adc	r31, r23
    2d00:	93 a9       	ldd	r25, Z+51	; 0x33
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	83 ab       	std	Z+51, r24	; 0x33
    2d06:	02 30       	cpi	r16, 0x02	; 2
    2d08:	01 f1       	breq	.+64     	; 0x2d4a <xTaskGenericNotifyFromISR+0x92>
    2d0a:	18 f4       	brcc	.+6      	; 0x2d12 <xTaskGenericNotifyFromISR+0x5a>
    2d0c:	01 30       	cpi	r16, 0x01	; 1
    2d0e:	31 f0       	breq	.+12     	; 0x2d1c <xTaskGenericNotifyFromISR+0x64>
    2d10:	4d c0       	rjmp	.+154    	; 0x2dac <xTaskGenericNotifyFromISR+0xf4>
    2d12:	03 30       	cpi	r16, 0x03	; 3
    2d14:	79 f1       	breq	.+94     	; 0x2d74 <xTaskGenericNotifyFromISR+0xbc>
    2d16:	04 30       	cpi	r16, 0x04	; 4
    2d18:	d1 f1       	breq	.+116    	; 0x2d8e <xTaskGenericNotifyFromISR+0xd6>
    2d1a:	48 c0       	rjmp	.+144    	; 0x2dac <xTaskGenericNotifyFromISR+0xf4>
    2d1c:	66 0f       	add	r22, r22
    2d1e:	77 1f       	adc	r23, r23
    2d20:	66 0f       	add	r22, r22
    2d22:	77 1f       	adc	r23, r23
    2d24:	fd 01       	movw	r30, r26
    2d26:	e6 0f       	add	r30, r22
    2d28:	f7 1f       	adc	r31, r23
    2d2a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d2c:	90 a8       	ldd	r9, Z+48	; 0x30
    2d2e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d30:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d32:	ba 01       	movw	r22, r20
    2d34:	a9 01       	movw	r20, r18
    2d36:	48 29       	or	r20, r8
    2d38:	59 29       	or	r21, r9
    2d3a:	6a 29       	or	r22, r10
    2d3c:	7b 29       	or	r23, r11
    2d3e:	47 a7       	std	Z+47, r20	; 0x2f
    2d40:	50 ab       	std	Z+48, r21	; 0x30
    2d42:	61 ab       	std	Z+49, r22	; 0x31
    2d44:	72 ab       	std	Z+50, r23	; 0x32
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	34 c0       	rjmp	.+104    	; 0x2db2 <xTaskGenericNotifyFromISR+0xfa>
    2d4a:	66 0f       	add	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	66 0f       	add	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	fd 01       	movw	r30, r26
    2d54:	e6 0f       	add	r30, r22
    2d56:	f7 1f       	adc	r31, r23
    2d58:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d5a:	50 a9       	ldd	r21, Z+48	; 0x30
    2d5c:	61 a9       	ldd	r22, Z+49	; 0x31
    2d5e:	72 a9       	ldd	r23, Z+50	; 0x32
    2d60:	4f 5f       	subi	r20, 0xFF	; 255
    2d62:	5f 4f       	sbci	r21, 0xFF	; 255
    2d64:	6f 4f       	sbci	r22, 0xFF	; 255
    2d66:	7f 4f       	sbci	r23, 0xFF	; 255
    2d68:	47 a7       	std	Z+47, r20	; 0x2f
    2d6a:	50 ab       	std	Z+48, r21	; 0x30
    2d6c:	61 ab       	std	Z+49, r22	; 0x31
    2d6e:	72 ab       	std	Z+50, r23	; 0x32
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	1f c0       	rjmp	.+62     	; 0x2db2 <xTaskGenericNotifyFromISR+0xfa>
    2d74:	66 0f       	add	r22, r22
    2d76:	77 1f       	adc	r23, r23
    2d78:	66 0f       	add	r22, r22
    2d7a:	77 1f       	adc	r23, r23
    2d7c:	fd 01       	movw	r30, r26
    2d7e:	e6 0f       	add	r30, r22
    2d80:	f7 1f       	adc	r31, r23
    2d82:	27 a7       	std	Z+47, r18	; 0x2f
    2d84:	30 ab       	std	Z+48, r19	; 0x30
    2d86:	41 ab       	std	Z+49, r20	; 0x31
    2d88:	52 ab       	std	Z+50, r21	; 0x32
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	12 c0       	rjmp	.+36     	; 0x2db2 <xTaskGenericNotifyFromISR+0xfa>
    2d8e:	92 30       	cpi	r25, 0x02	; 2
    2d90:	79 f0       	breq	.+30     	; 0x2db0 <xTaskGenericNotifyFromISR+0xf8>
    2d92:	66 0f       	add	r22, r22
    2d94:	77 1f       	adc	r23, r23
    2d96:	66 0f       	add	r22, r22
    2d98:	77 1f       	adc	r23, r23
    2d9a:	fd 01       	movw	r30, r26
    2d9c:	e6 0f       	add	r30, r22
    2d9e:	f7 1f       	adc	r31, r23
    2da0:	27 a7       	std	Z+47, r18	; 0x2f
    2da2:	30 ab       	std	Z+48, r19	; 0x30
    2da4:	41 ab       	std	Z+49, r20	; 0x31
    2da6:	52 ab       	std	Z+50, r21	; 0x32
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <xTaskGenericNotifyFromISR+0xfa>
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <xTaskGenericNotifyFromISR+0xfa>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	91 30       	cpi	r25, 0x01	; 1
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <xTaskGenericNotifyFromISR+0x100>
    2db6:	96 c0       	rjmp	.+300    	; 0x2ee4 <xTaskGenericNotifyFromISR+0x22c>
    2db8:	90 91 a6 15 	lds	r25, 0x15A6	; 0x8015a6 <uxSchedulerSuspended>
    2dbc:	91 11       	cpse	r25, r1
    2dbe:	5f c0       	rjmp	.+190    	; 0x2e7e <xTaskGenericNotifyFromISR+0x1c6>
    2dc0:	1c 96       	adiw	r26, 0x0c	; 12
    2dc2:	ed 91       	ld	r30, X+
    2dc4:	fc 91       	ld	r31, X
    2dc6:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc8:	16 96       	adiw	r26, 0x06	; 6
    2dca:	cd 91       	ld	r28, X+
    2dcc:	dc 91       	ld	r29, X
    2dce:	17 97       	sbiw	r26, 0x07	; 7
    2dd0:	18 96       	adiw	r26, 0x08	; 8
    2dd2:	2d 91       	ld	r18, X+
    2dd4:	3c 91       	ld	r19, X
    2dd6:	19 97       	sbiw	r26, 0x09	; 9
    2dd8:	3f 83       	std	Y+7, r19	; 0x07
    2dda:	2e 83       	std	Y+6, r18	; 0x06
    2ddc:	18 96       	adiw	r26, 0x08	; 8
    2dde:	cd 91       	ld	r28, X+
    2de0:	dc 91       	ld	r29, X
    2de2:	19 97       	sbiw	r26, 0x09	; 9
    2de4:	16 96       	adiw	r26, 0x06	; 6
    2de6:	2d 91       	ld	r18, X+
    2de8:	3c 91       	ld	r19, X
    2dea:	17 97       	sbiw	r26, 0x07	; 7
    2dec:	3d 83       	std	Y+5, r19	; 0x05
    2dee:	2c 83       	std	Y+4, r18	; 0x04
    2df0:	41 81       	ldd	r20, Z+1	; 0x01
    2df2:	52 81       	ldd	r21, Z+2	; 0x02
    2df4:	9d 01       	movw	r18, r26
    2df6:	2e 5f       	subi	r18, 0xFE	; 254
    2df8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfa:	42 17       	cp	r20, r18
    2dfc:	53 07       	cpc	r21, r19
    2dfe:	31 f4       	brne	.+12     	; 0x2e0c <xTaskGenericNotifyFromISR+0x154>
    2e00:	18 96       	adiw	r26, 0x08	; 8
    2e02:	4d 91       	ld	r20, X+
    2e04:	5c 91       	ld	r21, X
    2e06:	19 97       	sbiw	r26, 0x09	; 9
    2e08:	52 83       	std	Z+2, r21	; 0x02
    2e0a:	41 83       	std	Z+1, r20	; 0x01
    2e0c:	1d 96       	adiw	r26, 0x0d	; 13
    2e0e:	1c 92       	st	X, r1
    2e10:	1e 92       	st	-X, r1
    2e12:	1c 97       	sbiw	r26, 0x0c	; 12
    2e14:	90 81       	ld	r25, Z
    2e16:	91 50       	subi	r25, 0x01	; 1
    2e18:	90 83       	st	Z, r25
    2e1a:	5a 96       	adiw	r26, 0x1a	; 26
    2e1c:	ec 91       	ld	r30, X
    2e1e:	5a 97       	sbiw	r26, 0x1a	; 26
    2e20:	90 91 b5 15 	lds	r25, 0x15B5	; 0x8015b5 <uxTopReadyPriority>
    2e24:	9e 17       	cp	r25, r30
    2e26:	10 f4       	brcc	.+4      	; 0x2e2c <xTaskGenericNotifyFromISR+0x174>
    2e28:	e0 93 b5 15 	sts	0x15B5, r30	; 0x8015b5 <uxTopReadyPriority>
    2e2c:	9b e0       	ldi	r25, 0x0B	; 11
    2e2e:	9e 9f       	mul	r25, r30
    2e30:	f0 01       	movw	r30, r0
    2e32:	11 24       	eor	r1, r1
    2e34:	e9 50       	subi	r30, 0x09	; 9
    2e36:	fa 4e       	sbci	r31, 0xEA	; 234
    2e38:	01 80       	ldd	r0, Z+1	; 0x01
    2e3a:	f2 81       	ldd	r31, Z+2	; 0x02
    2e3c:	e0 2d       	mov	r30, r0
    2e3e:	17 96       	adiw	r26, 0x07	; 7
    2e40:	fc 93       	st	X, r31
    2e42:	ee 93       	st	-X, r30
    2e44:	16 97       	sbiw	r26, 0x06	; 6
    2e46:	46 81       	ldd	r20, Z+6	; 0x06
    2e48:	57 81       	ldd	r21, Z+7	; 0x07
    2e4a:	19 96       	adiw	r26, 0x09	; 9
    2e4c:	5c 93       	st	X, r21
    2e4e:	4e 93       	st	-X, r20
    2e50:	18 97       	sbiw	r26, 0x08	; 8
    2e52:	c6 81       	ldd	r28, Z+6	; 0x06
    2e54:	d7 81       	ldd	r29, Z+7	; 0x07
    2e56:	3d 83       	std	Y+5, r19	; 0x05
    2e58:	2c 83       	std	Y+4, r18	; 0x04
    2e5a:	37 83       	std	Z+7, r19	; 0x07
    2e5c:	26 83       	std	Z+6, r18	; 0x06
    2e5e:	5a 96       	adiw	r26, 0x1a	; 26
    2e60:	ec 91       	ld	r30, X
    2e62:	5a 97       	sbiw	r26, 0x1a	; 26
    2e64:	9e 9f       	mul	r25, r30
    2e66:	f0 01       	movw	r30, r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	e9 50       	subi	r30, 0x09	; 9
    2e6c:	fa 4e       	sbci	r31, 0xEA	; 234
    2e6e:	1d 96       	adiw	r26, 0x0d	; 13
    2e70:	fc 93       	st	X, r31
    2e72:	ee 93       	st	-X, r30
    2e74:	1c 97       	sbiw	r26, 0x0c	; 12
    2e76:	90 81       	ld	r25, Z
    2e78:	9f 5f       	subi	r25, 0xFF	; 255
    2e7a:	90 83       	st	Z, r25
    2e7c:	21 c0       	rjmp	.+66     	; 0x2ec0 <xTaskGenericNotifyFromISR+0x208>
    2e7e:	62 ed       	ldi	r22, 0xD2	; 210
    2e80:	75 e1       	ldi	r23, 0x15	; 21
    2e82:	fb 01       	movw	r30, r22
    2e84:	c1 81       	ldd	r28, Z+1	; 0x01
    2e86:	d2 81       	ldd	r29, Z+2	; 0x02
    2e88:	53 96       	adiw	r26, 0x13	; 19
    2e8a:	dc 93       	st	X, r29
    2e8c:	ce 93       	st	-X, r28
    2e8e:	52 97       	sbiw	r26, 0x12	; 18
    2e90:	2e 81       	ldd	r18, Y+6	; 0x06
    2e92:	3f 81       	ldd	r19, Y+7	; 0x07
    2e94:	55 96       	adiw	r26, 0x15	; 21
    2e96:	3c 93       	st	X, r19
    2e98:	2e 93       	st	-X, r18
    2e9a:	54 97       	sbiw	r26, 0x14	; 20
    2e9c:	4e 81       	ldd	r20, Y+6	; 0x06
    2e9e:	5f 81       	ldd	r21, Y+7	; 0x07
    2ea0:	9d 01       	movw	r18, r26
    2ea2:	22 5f       	subi	r18, 0xF2	; 242
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	fa 01       	movw	r30, r20
    2ea8:	35 83       	std	Z+5, r19	; 0x05
    2eaa:	24 83       	std	Z+4, r18	; 0x04
    2eac:	3f 83       	std	Y+7, r19	; 0x07
    2eae:	2e 83       	std	Y+6, r18	; 0x06
    2eb0:	59 96       	adiw	r26, 0x19	; 25
    2eb2:	7c 93       	st	X, r23
    2eb4:	6e 93       	st	-X, r22
    2eb6:	58 97       	sbiw	r26, 0x18	; 24
    2eb8:	fb 01       	movw	r30, r22
    2eba:	90 81       	ld	r25, Z
    2ebc:	9f 5f       	subi	r25, 0xFF	; 255
    2ebe:	90 83       	st	Z, r25
    2ec0:	5a 96       	adiw	r26, 0x1a	; 26
    2ec2:	2c 91       	ld	r18, X
    2ec4:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <pxCurrentTCB>
    2ec8:	f0 91 66 16 	lds	r31, 0x1666	; 0x801666 <pxCurrentTCB+0x1>
    2ecc:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ece:	92 17       	cp	r25, r18
    2ed0:	48 f4       	brcc	.+18     	; 0x2ee4 <xTaskGenericNotifyFromISR+0x22c>
    2ed2:	c1 14       	cp	r12, r1
    2ed4:	d1 04       	cpc	r13, r1
    2ed6:	19 f0       	breq	.+6      	; 0x2ede <xTaskGenericNotifyFromISR+0x226>
    2ed8:	91 e0       	ldi	r25, 0x01	; 1
    2eda:	f6 01       	movw	r30, r12
    2edc:	90 83       	st	Z, r25
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	90 93 af 15 	sts	0x15AF, r25	; 0x8015af <xYieldPending>
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	bf 90       	pop	r11
    2ef4:	af 90       	pop	r10
    2ef6:	9f 90       	pop	r9
    2ef8:	8f 90       	pop	r8
    2efa:	08 95       	ret

00002efc <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	21 f4       	brne	.+8      	; 0x2f08 <xTaskGenericNotifyStateClear+0xc>
    2f00:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <pxCurrentTCB>
    2f04:	90 91 66 16 	lds	r25, 0x1666	; 0x801666 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	fc 01       	movw	r30, r24
    2f12:	e6 0f       	add	r30, r22
    2f14:	f7 1f       	adc	r31, r23
    2f16:	23 a9       	ldd	r18, Z+51	; 0x33
    2f18:	22 30       	cpi	r18, 0x02	; 2
    2f1a:	31 f4       	brne	.+12     	; 0x2f28 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	e6 0f       	add	r30, r22
    2f20:	f7 1f       	adc	r31, r23
    2f22:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2f28:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2f2a:	0f 90       	pop	r0
    2f2c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2f2e:	08 95       	ret

00002f30 <prvGetNextExpireTime>:
    2f30:	dc 01       	movw	r26, r24
    2f32:	e0 91 71 16 	lds	r30, 0x1671	; 0x801671 <pxCurrentTimerList>
    2f36:	f0 91 72 16 	lds	r31, 0x1672	; 0x801672 <pxCurrentTimerList+0x1>
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	81 11       	cpse	r24, r1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9c 93       	st	X, r25
    2f44:	91 11       	cpse	r25, r1
    2f46:	08 c0       	rjmp	.+16     	; 0x2f58 <prvGetNextExpireTime+0x28>
    2f48:	07 80       	ldd	r0, Z+7	; 0x07
    2f4a:	f0 85       	ldd	r31, Z+8	; 0x08
    2f4c:	e0 2d       	mov	r30, r0
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	08 95       	ret
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	08 95       	ret

00002f60 <prvInsertTimerInActiveList>:
    2f60:	cf 92       	push	r12
    2f62:	df 92       	push	r13
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	42 83       	std	Z+2, r20	; 0x02
    2f70:	53 83       	std	Z+3, r21	; 0x03
    2f72:	64 83       	std	Z+4, r22	; 0x04
    2f74:	75 83       	std	Z+5, r23	; 0x05
    2f76:	93 87       	std	Z+11, r25	; 0x0b
    2f78:	82 87       	std	Z+10, r24	; 0x0a
    2f7a:	04 17       	cp	r16, r20
    2f7c:	15 07       	cpc	r17, r21
    2f7e:	26 07       	cpc	r18, r22
    2f80:	37 07       	cpc	r19, r23
    2f82:	c0 f0       	brcs	.+48     	; 0x2fb4 <prvInsertTimerInActiveList+0x54>
    2f84:	0c 19       	sub	r16, r12
    2f86:	1d 09       	sbc	r17, r13
    2f88:	2e 09       	sbc	r18, r14
    2f8a:	3f 09       	sbc	r19, r15
    2f8c:	86 85       	ldd	r24, Z+14	; 0x0e
    2f8e:	97 85       	ldd	r25, Z+15	; 0x0f
    2f90:	a0 89       	ldd	r26, Z+16	; 0x10
    2f92:	b1 89       	ldd	r27, Z+17	; 0x11
    2f94:	08 17       	cp	r16, r24
    2f96:	19 07       	cpc	r17, r25
    2f98:	2a 07       	cpc	r18, r26
    2f9a:	3b 07       	cpc	r19, r27
    2f9c:	00 f5       	brcc	.+64     	; 0x2fde <prvInsertTimerInActiveList+0x7e>
    2f9e:	bf 01       	movw	r22, r30
    2fa0:	6e 5f       	subi	r22, 0xFE	; 254
    2fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa4:	80 91 6f 16 	lds	r24, 0x166F	; 0x80166f <pxOverflowTimerList>
    2fa8:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <pxOverflowTimerList+0x1>
    2fac:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	18 c0       	rjmp	.+48     	; 0x2fe4 <prvInsertTimerInActiveList+0x84>
    2fb4:	0c 15       	cp	r16, r12
    2fb6:	1d 05       	cpc	r17, r13
    2fb8:	2e 05       	cpc	r18, r14
    2fba:	3f 05       	cpc	r19, r15
    2fbc:	28 f4       	brcc	.+10     	; 0x2fc8 <prvInsertTimerInActiveList+0x68>
    2fbe:	4c 15       	cp	r20, r12
    2fc0:	5d 05       	cpc	r21, r13
    2fc2:	6e 05       	cpc	r22, r14
    2fc4:	7f 05       	cpc	r23, r15
    2fc6:	68 f4       	brcc	.+26     	; 0x2fe2 <prvInsertTimerInActiveList+0x82>
    2fc8:	bf 01       	movw	r22, r30
    2fca:	6e 5f       	subi	r22, 0xFE	; 254
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <pxCurrentTimerList>
    2fd2:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <pxCurrentTimerList+0x1>
    2fd6:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <prvInsertTimerInActiveList+0x84>
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <prvInsertTimerInActiveList+0x84>
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	08 95       	ret

00002ff2 <prvCheckForValidListAndQueue>:
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	0f 92       	push	r0
    2ff8:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <xTimerQueue>
    2ffc:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <xTimerQueue+0x1>
    3000:	89 2b       	or	r24, r25
    3002:	e9 f4       	brne	.+58     	; 0x303e <prvCheckForValidListAndQueue+0x4c>
    3004:	8e e7       	ldi	r24, 0x7E	; 126
    3006:	96 e1       	ldi	r25, 0x16	; 22
    3008:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    300c:	83 e7       	ldi	r24, 0x73	; 115
    300e:	96 e1       	ldi	r25, 0x16	; 22
    3010:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    3014:	8e e7       	ldi	r24, 0x7E	; 126
    3016:	96 e1       	ldi	r25, 0x16	; 22
    3018:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <pxCurrentTimerList+0x1>
    301c:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <pxCurrentTimerList>
    3020:	83 e7       	ldi	r24, 0x73	; 115
    3022:	96 e1       	ldi	r25, 0x16	; 22
    3024:	90 93 70 16 	sts	0x1670, r25	; 0x801670 <pxOverflowTimerList+0x1>
    3028:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <pxOverflowTimerList>
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	67 e0       	ldi	r22, 0x07	; 7
    3030:	8a e0       	ldi	r24, 0x0A	; 10
    3032:	0e 94 23 07 	call	0xe46	; 0xe46 <xQueueGenericCreate>
    3036:	90 93 6e 16 	sts	0x166E, r25	; 0x80166e <xTimerQueue+0x1>
    303a:	80 93 6d 16 	sts	0x166D, r24	; 0x80166d <xTimerQueue>
    303e:	0f 90       	pop	r0
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	08 95       	ret

00003044 <xTimerCreateTimerTask>:
    3044:	ef 92       	push	r14
    3046:	ff 92       	push	r15
    3048:	0f 93       	push	r16
    304a:	d3 df       	rcall	.-90     	; 0x2ff2 <prvCheckForValidListAndQueue>
    304c:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <xTimerQueue>
    3050:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <xTimerQueue+0x1>
    3054:	89 2b       	or	r24, r25
    3056:	91 f0       	breq	.+36     	; 0x307c <xTimerCreateTimerTask+0x38>
    3058:	0f 2e       	mov	r0, r31
    305a:	fb e6       	ldi	r31, 0x6B	; 107
    305c:	ef 2e       	mov	r14, r31
    305e:	f6 e1       	ldi	r31, 0x16	; 22
    3060:	ff 2e       	mov	r15, r31
    3062:	f0 2d       	mov	r31, r0
    3064:	03 e0       	ldi	r16, 0x03	; 3
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 ec       	ldi	r20, 0xC0	; 192
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	67 ed       	ldi	r22, 0xD7	; 215
    3070:	72 e0       	ldi	r23, 0x02	; 2
    3072:	87 ed       	ldi	r24, 0xD7	; 215
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xTaskCreate>
    307a:	01 c0       	rjmp	.+2      	; 0x307e <xTimerCreateTimerTask+0x3a>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	08 95       	ret

00003086 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3086:	8f 92       	push	r8
    3088:	9f 92       	push	r9
    308a:	af 92       	push	r10
    308c:	bf 92       	push	r11
    308e:	cf 92       	push	r12
    3090:	df 92       	push	r13
    3092:	ef 92       	push	r14
    3094:	ff 92       	push	r15
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	27 97       	sbiw	r28, 0x07	; 7
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    30ae:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <xTimerQueue>
    30b2:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <xTimerQueue+0x1>
    30b6:	30 97       	sbiw	r30, 0x00	; 0
    30b8:	81 f1       	breq	.+96     	; 0x311a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    30ba:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    30bc:	2a 83       	std	Y+2, r18	; 0x02
    30be:	3b 83       	std	Y+3, r19	; 0x03
    30c0:	4c 83       	std	Y+4, r20	; 0x04
    30c2:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    30c4:	9f 83       	std	Y+7, r25	; 0x07
    30c6:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    30c8:	66 30       	cpi	r22, 0x06	; 6
    30ca:	f4 f4       	brge	.+60     	; 0x3108 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    30cc:	c4 db       	rcall	.-2168   	; 0x2856 <xTaskGetSchedulerState>
    30ce:	82 30       	cpi	r24, 0x02	; 2
    30d0:	69 f4       	brne	.+26     	; 0x30ec <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    30d2:	00 e0       	ldi	r16, 0x00	; 0
    30d4:	a7 01       	movw	r20, r14
    30d6:	96 01       	movw	r18, r12
    30d8:	be 01       	movw	r22, r28
    30da:	6f 5f       	subi	r22, 0xFF	; 255
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <xTimerQueue>
    30e2:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <xTimerQueue+0x1>
    30e6:	0e 94 46 07 	call	0xe8c	; 0xe8c <xQueueGenericSend>
    30ea:	18 c0       	rjmp	.+48     	; 0x311c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    30ec:	00 e0       	ldi	r16, 0x00	; 0
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	a9 01       	movw	r20, r18
    30f4:	be 01       	movw	r22, r28
    30f6:	6f 5f       	subi	r22, 0xFF	; 255
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <xTimerQueue>
    30fe:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <xTimerQueue+0x1>
    3102:	0e 94 46 07 	call	0xe8c	; 0xe8c <xQueueGenericSend>
    3106:	0a c0       	rjmp	.+20     	; 0x311c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	a8 01       	movw	r20, r16
    310c:	be 01       	movw	r22, r28
    310e:	6f 5f       	subi	r22, 0xFF	; 255
    3110:	7f 4f       	sbci	r23, 0xFF	; 255
    3112:	cf 01       	movw	r24, r30
    3114:	0e 94 f6 07 	call	0xfec	; 0xfec <xQueueGenericSendFromISR>
    3118:	01 c0       	rjmp	.+2      	; 0x311c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    311a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    311c:	27 96       	adiw	r28, 0x07	; 7
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	ff 90       	pop	r15
    3132:	ef 90       	pop	r14
    3134:	df 90       	pop	r13
    3136:	cf 90       	pop	r12
    3138:	bf 90       	pop	r11
    313a:	af 90       	pop	r10
    313c:	9f 90       	pop	r9
    313e:	8f 90       	pop	r8
    3140:	08 95       	ret

00003142 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3142:	8f 92       	push	r8
    3144:	9f 92       	push	r9
    3146:	af 92       	push	r10
    3148:	bf 92       	push	r11
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    315a:	3b c0       	rjmp	.+118    	; 0x31d2 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    315c:	07 80       	ldd	r0, Z+7	; 0x07
    315e:	f0 85       	ldd	r31, Z+8	; 0x08
    3160:	e0 2d       	mov	r30, r0
    3162:	80 80       	ld	r8, Z
    3164:	91 80       	ldd	r9, Z+1	; 0x01
    3166:	a2 80       	ldd	r10, Z+2	; 0x02
    3168:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    316a:	c0 85       	ldd	r28, Z+8	; 0x08
    316c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    316e:	8e 01       	movw	r16, r28
    3170:	0e 5f       	subi	r16, 0xFE	; 254
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	c8 01       	movw	r24, r16
    3176:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    317a:	ec 89       	ldd	r30, Y+20	; 0x14
    317c:	fd 89       	ldd	r31, Y+21	; 0x15
    317e:	ce 01       	movw	r24, r28
    3180:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3182:	8e 89       	ldd	r24, Y+22	; 0x16
    3184:	82 ff       	sbrs	r24, 2
    3186:	25 c0       	rjmp	.+74     	; 0x31d2 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3188:	8e 85       	ldd	r24, Y+14	; 0x0e
    318a:	9f 85       	ldd	r25, Y+15	; 0x0f
    318c:	a8 89       	ldd	r26, Y+16	; 0x10
    318e:	b9 89       	ldd	r27, Y+17	; 0x11
    3190:	88 0d       	add	r24, r8
    3192:	99 1d       	adc	r25, r9
    3194:	aa 1d       	adc	r26, r10
    3196:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3198:	88 16       	cp	r8, r24
    319a:	99 06       	cpc	r9, r25
    319c:	aa 06       	cpc	r10, r26
    319e:	bb 06       	cpc	r11, r27
    31a0:	70 f4       	brcc	.+28     	; 0x31be <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	9b 83       	std	Y+3, r25	; 0x03
    31a6:	ac 83       	std	Y+4, r26	; 0x04
    31a8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    31aa:	db 87       	std	Y+11, r29	; 0x0b
    31ac:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    31ae:	b8 01       	movw	r22, r16
    31b0:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <pxCurrentTimerList>
    31b4:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <pxCurrentTimerList+0x1>
    31b8:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    31bc:	0a c0       	rjmp	.+20     	; 0x31d2 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    31be:	c1 2c       	mov	r12, r1
    31c0:	d1 2c       	mov	r13, r1
    31c2:	76 01       	movw	r14, r12
    31c4:	00 e0       	ldi	r16, 0x00	; 0
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	a5 01       	movw	r20, r10
    31ca:	94 01       	movw	r18, r8
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	ce 01       	movw	r24, r28
    31d0:	5a df       	rcall	.-332    	; 0x3086 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    31d2:	e0 91 71 16 	lds	r30, 0x1671	; 0x801671 <pxCurrentTimerList>
    31d6:	f0 91 72 16 	lds	r31, 0x1672	; 0x801672 <pxCurrentTimerList+0x1>
    31da:	80 81       	ld	r24, Z
    31dc:	81 11       	cpse	r24, r1
    31de:	be cf       	rjmp	.-132    	; 0x315c <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    31e0:	80 91 6f 16 	lds	r24, 0x166F	; 0x80166f <pxOverflowTimerList>
    31e4:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <pxOverflowTimerList+0x1>
    31e8:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <pxCurrentTimerList+0x1>
    31ec:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    31f0:	f0 93 70 16 	sts	0x1670, r31	; 0x801670 <pxOverflowTimerList+0x1>
    31f4:	e0 93 6f 16 	sts	0x166F, r30	; 0x80166f <pxOverflowTimerList>
    }
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	df 90       	pop	r13
    3206:	cf 90       	pop	r12
    3208:	bf 90       	pop	r11
    320a:	af 90       	pop	r10
    320c:	9f 90       	pop	r9
    320e:	8f 90       	pop	r8
    3210:	08 95       	ret

00003212 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3220:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xTaskGetTickCount>
    3224:	6b 01       	movw	r12, r22
    3226:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3228:	80 91 67 16 	lds	r24, 0x1667	; 0x801667 <xLastTime.2436>
    322c:	90 91 68 16 	lds	r25, 0x1668	; 0x801668 <xLastTime.2436+0x1>
    3230:	a0 91 69 16 	lds	r26, 0x1669	; 0x801669 <xLastTime.2436+0x2>
    3234:	b0 91 6a 16 	lds	r27, 0x166A	; 0x80166a <xLastTime.2436+0x3>
    3238:	c8 16       	cp	r12, r24
    323a:	d9 06       	cpc	r13, r25
    323c:	ea 06       	cpc	r14, r26
    323e:	fb 06       	cpc	r15, r27
    3240:	20 f4       	brcc	.+8      	; 0x324a <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3242:	7f df       	rcall	.-258    	; 0x3142 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	88 83       	st	Y, r24
    3248:	01 c0       	rjmp	.+2      	; 0x324c <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    324a:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    324c:	c0 92 67 16 	sts	0x1667, r12	; 0x801667 <xLastTime.2436>
    3250:	d0 92 68 16 	sts	0x1668, r13	; 0x801668 <xLastTime.2436+0x1>
    3254:	e0 92 69 16 	sts	0x1669, r14	; 0x801669 <xLastTime.2436+0x2>
    3258:	f0 92 6a 16 	sts	0x166A, r15	; 0x80166a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    325c:	c7 01       	movw	r24, r14
    325e:	b6 01       	movw	r22, r12
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	ff 90       	pop	r15
    3266:	ef 90       	pop	r14
    3268:	df 90       	pop	r13
    326a:	cf 90       	pop	r12
    326c:	08 95       	ret

0000326e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    326e:	4f 92       	push	r4
    3270:	5f 92       	push	r5
    3272:	6f 92       	push	r6
    3274:	7f 92       	push	r7
    3276:	8f 92       	push	r8
    3278:	9f 92       	push	r9
    327a:	af 92       	push	r10
    327c:	bf 92       	push	r11
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	4b 01       	movw	r8, r22
    3290:	5c 01       	movw	r10, r24
    3292:	29 01       	movw	r4, r18
    3294:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3296:	e0 91 71 16 	lds	r30, 0x1671	; 0x801671 <pxCurrentTimerList>
    329a:	f0 91 72 16 	lds	r31, 0x1672	; 0x801672 <pxCurrentTimerList+0x1>
    329e:	07 80       	ldd	r0, Z+7	; 0x07
    32a0:	f0 85       	ldd	r31, Z+8	; 0x08
    32a2:	e0 2d       	mov	r30, r0
    32a4:	c0 85       	ldd	r28, Z+8	; 0x08
    32a6:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32a8:	ce 01       	movw	r24, r28
    32aa:	02 96       	adiw	r24, 0x02	; 2
    32ac:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32b0:	8e 89       	ldd	r24, Y+22	; 0x16
    32b2:	82 ff       	sbrs	r24, 2
    32b4:	1b c0       	rjmp	.+54     	; 0x32ec <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    32b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    32b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    32ba:	68 89       	ldd	r22, Y+16	; 0x10
    32bc:	79 89       	ldd	r23, Y+17	; 0x11
    32be:	48 0d       	add	r20, r8
    32c0:	59 1d       	adc	r21, r9
    32c2:	6a 1d       	adc	r22, r10
    32c4:	7b 1d       	adc	r23, r11
    32c6:	75 01       	movw	r14, r10
    32c8:	64 01       	movw	r12, r8
    32ca:	93 01       	movw	r18, r6
    32cc:	82 01       	movw	r16, r4
    32ce:	ce 01       	movw	r24, r28
    32d0:	47 de       	rcall	.-882    	; 0x2f60 <prvInsertTimerInActiveList>
    32d2:	88 23       	and	r24, r24
    32d4:	69 f0       	breq	.+26     	; 0x32f0 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    32d6:	c1 2c       	mov	r12, r1
    32d8:	d1 2c       	mov	r13, r1
    32da:	76 01       	movw	r14, r12
    32dc:	00 e0       	ldi	r16, 0x00	; 0
    32de:	10 e0       	ldi	r17, 0x00	; 0
    32e0:	a5 01       	movw	r20, r10
    32e2:	94 01       	movw	r18, r8
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	ce 01       	movw	r24, r28
    32e8:	ce de       	rcall	.-612    	; 0x3086 <xTimerGenericCommand>
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32ec:	8e 7f       	andi	r24, 0xFE	; 254
    32ee:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32f0:	ec 89       	ldd	r30, Y+20	; 0x14
    32f2:	fd 89       	ldd	r31, Y+21	; 0x15
    32f4:	ce 01       	movw	r24, r28
    32f6:	19 95       	eicall
    }
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	ff 90       	pop	r15
    3302:	ef 90       	pop	r14
    3304:	df 90       	pop	r13
    3306:	cf 90       	pop	r12
    3308:	bf 90       	pop	r11
    330a:	af 90       	pop	r10
    330c:	9f 90       	pop	r9
    330e:	8f 90       	pop	r8
    3310:	7f 90       	pop	r7
    3312:	6f 90       	pop	r6
    3314:	5f 90       	pop	r5
    3316:	4f 90       	pop	r4
    3318:	08 95       	ret

0000331a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	bf 92       	push	r11
    3322:	cf 92       	push	r12
    3324:	df 92       	push	r13
    3326:	ef 92       	push	r14
    3328:	ff 92       	push	r15
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	1f 92       	push	r1
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	6b 01       	movw	r12, r22
    3338:	7c 01       	movw	r14, r24
    333a:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    333c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3340:	ce 01       	movw	r24, r28
    3342:	01 96       	adiw	r24, 0x01	; 1
    3344:	66 df       	rcall	.-308    	; 0x3212 <prvSampleTimeNow>
    3346:	4b 01       	movw	r8, r22
    3348:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	81 11       	cpse	r24, r1
    334e:	2d c0       	rjmp	.+90     	; 0x33aa <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3350:	11 11       	cpse	r17, r1
    3352:	0d c0       	rjmp	.+26     	; 0x336e <prvProcessTimerOrBlockTask+0x54>
    3354:	8c 14       	cp	r8, r12
    3356:	9d 04       	cpc	r9, r13
    3358:	ae 04       	cpc	r10, r14
    335a:	bf 04       	cpc	r11, r15
    335c:	40 f0       	brcs	.+16     	; 0x336e <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    335e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3362:	a5 01       	movw	r20, r10
    3364:	94 01       	movw	r18, r8
    3366:	c7 01       	movw	r24, r14
    3368:	b6 01       	movw	r22, r12
    336a:	81 df       	rcall	.-254    	; 0x326e <prvProcessExpiredTimer>
    336c:	20 c0       	rjmp	.+64     	; 0x33ae <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    336e:	11 23       	and	r17, r17
    3370:	41 f0       	breq	.+16     	; 0x3382 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3372:	e0 91 6f 16 	lds	r30, 0x166F	; 0x80166f <pxOverflowTimerList>
    3376:	f0 91 70 16 	lds	r31, 0x1670	; 0x801670 <pxOverflowTimerList+0x1>
    337a:	80 81       	ld	r24, Z
    337c:	11 e0       	ldi	r17, 0x01	; 1
    337e:	81 11       	cpse	r24, r1
    3380:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3382:	b7 01       	movw	r22, r14
    3384:	a6 01       	movw	r20, r12
    3386:	48 19       	sub	r20, r8
    3388:	59 09       	sbc	r21, r9
    338a:	6a 09       	sbc	r22, r10
    338c:	7b 09       	sbc	r23, r11
    338e:	21 2f       	mov	r18, r17
    3390:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <xTimerQueue>
    3394:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <xTimerQueue+0x1>
    3398:	0e 94 c0 08 	call	0x1180	; 0x1180 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    339c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
    33a0:	81 11       	cpse	r24, r1
    33a2:	05 c0       	rjmp	.+10     	; 0x33ae <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    33a4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    33aa:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskResumeAll>
            }
        }
    }
    33ae:	0f 90       	pop	r0
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	ff 90       	pop	r15
    33b8:	ef 90       	pop	r14
    33ba:	df 90       	pop	r13
    33bc:	cf 90       	pop	r12
    33be:	bf 90       	pop	r11
    33c0:	af 90       	pop	r10
    33c2:	9f 90       	pop	r9
    33c4:	8f 90       	pop	r8
    33c6:	08 95       	ret

000033c8 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    33c8:	af 92       	push	r10
    33ca:	bf 92       	push	r11
    33cc:	cf 92       	push	r12
    33ce:	df 92       	push	r13
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	28 97       	sbiw	r28, 0x08	; 8
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    33ec:	82 c0       	rjmp	.+260    	; 0x34f2 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	88 23       	and	r24, r24
    33f2:	0c f4       	brge	.+2      	; 0x33f6 <prvProcessReceivedCommands+0x2e>
    33f4:	7e c0       	rjmp	.+252    	; 0x34f2 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    33f6:	ae 80       	ldd	r10, Y+6	; 0x06
    33f8:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    33fa:	d5 01       	movw	r26, r10
    33fc:	1c 96       	adiw	r26, 0x0c	; 12
    33fe:	8d 91       	ld	r24, X+
    3400:	9c 91       	ld	r25, X
    3402:	1d 97       	sbiw	r26, 0x0d	; 13
    3404:	89 2b       	or	r24, r25
    3406:	21 f0       	breq	.+8      	; 0x3410 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3408:	c5 01       	movw	r24, r10
    340a:	02 96       	adiw	r24, 0x02	; 2
    340c:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3410:	ce 01       	movw	r24, r28
    3412:	08 96       	adiw	r24, 0x08	; 8
    3414:	fe de       	rcall	.-516    	; 0x3212 <prvSampleTimeNow>
    3416:	8b 01       	movw	r16, r22
    3418:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    341a:	e9 81       	ldd	r30, Y+1	; 0x01
    341c:	0e 2e       	mov	r0, r30
    341e:	00 0c       	add	r0, r0
    3420:	ff 0b       	sbc	r31, r31
    3422:	ea 30       	cpi	r30, 0x0A	; 10
    3424:	f1 05       	cpc	r31, r1
    3426:	08 f0       	brcs	.+2      	; 0x342a <prvProcessReceivedCommands+0x62>
    3428:	64 c0       	rjmp	.+200    	; 0x34f2 <prvProcessReceivedCommands+0x12a>
    342a:	88 27       	eor	r24, r24
    342c:	ee 58       	subi	r30, 0x8E	; 142
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	8f 4f       	sbci	r24, 0xFF	; 255
    3432:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3436:	f5 01       	movw	r30, r10
    3438:	86 89       	ldd	r24, Z+22	; 0x16
    343a:	81 60       	ori	r24, 0x01	; 1
    343c:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    343e:	ca 80       	ldd	r12, Y+2	; 0x02
    3440:	db 80       	ldd	r13, Y+3	; 0x03
    3442:	ec 80       	ldd	r14, Y+4	; 0x04
    3444:	fd 80       	ldd	r15, Y+5	; 0x05
    3446:	46 85       	ldd	r20, Z+14	; 0x0e
    3448:	57 85       	ldd	r21, Z+15	; 0x0f
    344a:	60 89       	ldd	r22, Z+16	; 0x10
    344c:	71 89       	ldd	r23, Z+17	; 0x11
    344e:	4c 0d       	add	r20, r12
    3450:	5d 1d       	adc	r21, r13
    3452:	6e 1d       	adc	r22, r14
    3454:	7f 1d       	adc	r23, r15
    3456:	c5 01       	movw	r24, r10
    3458:	83 dd       	rcall	.-1274   	; 0x2f60 <prvInsertTimerInActiveList>
    345a:	88 23       	and	r24, r24
    345c:	09 f4       	brne	.+2      	; 0x3460 <prvProcessReceivedCommands+0x98>
    345e:	49 c0       	rjmp	.+146    	; 0x34f2 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3460:	d5 01       	movw	r26, r10
    3462:	54 96       	adiw	r26, 0x14	; 20
    3464:	ed 91       	ld	r30, X+
    3466:	fc 91       	ld	r31, X
    3468:	55 97       	sbiw	r26, 0x15	; 21
    346a:	c5 01       	movw	r24, r10
    346c:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    346e:	f5 01       	movw	r30, r10
    3470:	86 89       	ldd	r24, Z+22	; 0x16
    3472:	82 ff       	sbrs	r24, 2
    3474:	3e c0       	rjmp	.+124    	; 0x34f2 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3476:	4a 81       	ldd	r20, Y+2	; 0x02
    3478:	5b 81       	ldd	r21, Y+3	; 0x03
    347a:	6c 81       	ldd	r22, Y+4	; 0x04
    347c:	7d 81       	ldd	r23, Y+5	; 0x05
    347e:	86 85       	ldd	r24, Z+14	; 0x0e
    3480:	97 85       	ldd	r25, Z+15	; 0x0f
    3482:	a0 89       	ldd	r26, Z+16	; 0x10
    3484:	b1 89       	ldd	r27, Z+17	; 0x11
    3486:	9a 01       	movw	r18, r20
    3488:	ab 01       	movw	r20, r22
    348a:	28 0f       	add	r18, r24
    348c:	39 1f       	adc	r19, r25
    348e:	4a 1f       	adc	r20, r26
    3490:	5b 1f       	adc	r21, r27
    3492:	c1 2c       	mov	r12, r1
    3494:	d1 2c       	mov	r13, r1
    3496:	76 01       	movw	r14, r12
    3498:	00 e0       	ldi	r16, 0x00	; 0
    349a:	10 e0       	ldi	r17, 0x00	; 0
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	c5 01       	movw	r24, r10
    34a0:	f2 dd       	rcall	.-1052   	; 0x3086 <xTimerGenericCommand>
    34a2:	27 c0       	rjmp	.+78     	; 0x34f2 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    34a4:	d5 01       	movw	r26, r10
    34a6:	56 96       	adiw	r26, 0x16	; 22
    34a8:	8c 91       	ld	r24, X
    34aa:	56 97       	sbiw	r26, 0x16	; 22
    34ac:	8e 7f       	andi	r24, 0xFE	; 254
    34ae:	56 96       	adiw	r26, 0x16	; 22
    34b0:	8c 93       	st	X, r24
                        break;
    34b2:	1f c0       	rjmp	.+62     	; 0x34f2 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    34b4:	f5 01       	movw	r30, r10
    34b6:	86 89       	ldd	r24, Z+22	; 0x16
    34b8:	81 60       	ori	r24, 0x01	; 1
    34ba:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    34bc:	4a 81       	ldd	r20, Y+2	; 0x02
    34be:	5b 81       	ldd	r21, Y+3	; 0x03
    34c0:	6c 81       	ldd	r22, Y+4	; 0x04
    34c2:	7d 81       	ldd	r23, Y+5	; 0x05
    34c4:	46 87       	std	Z+14, r20	; 0x0e
    34c6:	57 87       	std	Z+15, r21	; 0x0f
    34c8:	60 8b       	std	Z+16, r22	; 0x10
    34ca:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    34cc:	40 0f       	add	r20, r16
    34ce:	51 1f       	adc	r21, r17
    34d0:	62 1f       	adc	r22, r18
    34d2:	73 1f       	adc	r23, r19
    34d4:	68 01       	movw	r12, r16
    34d6:	79 01       	movw	r14, r18
    34d8:	c5 01       	movw	r24, r10
    34da:	42 dd       	rcall	.-1404   	; 0x2f60 <prvInsertTimerInActiveList>
                        break;
    34dc:	0a c0       	rjmp	.+20     	; 0x34f2 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    34de:	f5 01       	movw	r30, r10
    34e0:	86 89       	ldd	r24, Z+22	; 0x16
    34e2:	81 fd       	sbrc	r24, 1
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    34e6:	c5 01       	movw	r24, r10
    34e8:	0e 94 33 04 	call	0x866	; 0x866 <vPortFree>
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    34ee:	8e 7f       	andi	r24, 0xFE	; 254
    34f0:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	a9 01       	movw	r20, r18
    34f8:	be 01       	movw	r22, r28
    34fa:	6f 5f       	subi	r22, 0xFF	; 255
    34fc:	7f 4f       	sbci	r23, 0xFF	; 255
    34fe:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <xTimerQueue>
    3502:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <xTimerQueue+0x1>
    3506:	0e 94 31 08 	call	0x1062	; 0x1062 <xQueueReceive>
    350a:	81 11       	cpse	r24, r1
    350c:	70 cf       	rjmp	.-288    	; 0x33ee <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    350e:	28 96       	adiw	r28, 0x08	; 8
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	ff 90       	pop	r15
    3524:	ef 90       	pop	r14
    3526:	df 90       	pop	r13
    3528:	cf 90       	pop	r12
    352a:	bf 90       	pop	r11
    352c:	af 90       	pop	r10
    352e:	08 95       	ret

00003530 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3530:	08 95       	ret

00003532 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3532:	84 b1       	in	r24, 0x04	; 4
    3534:	80 68       	ori	r24, 0x80	; 128
    3536:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3538:	85 b1       	in	r24, 0x05	; 5
    353a:	80 68       	ori	r24, 0x80	; 128
    353c:	85 b9       	out	0x05, r24	; 5
    353e:	08 95       	ret

00003540 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3540:	83 b1       	in	r24, 0x03	; 3
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	83 b9       	out	0x03, r24	; 3
    3546:	08 95       	ret

00003548 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3548:	f4 df       	rcall	.-24     	; 0x3532 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    354a:	2f ef       	ldi	r18, 0xFF	; 255
    354c:	80 e7       	ldi	r24, 0x70	; 112
    354e:	92 e0       	ldi	r25, 0x02	; 2
    3550:	21 50       	subi	r18, 0x01	; 1
    3552:	80 40       	sbci	r24, 0x00	; 0
    3554:	90 40       	sbci	r25, 0x00	; 0
    3556:	e1 f7       	brne	.-8      	; 0x3550 <vApplicationMallocFailedHook+0x8>
    3558:	00 c0       	rjmp	.+0      	; 0x355a <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    355a:	00 00       	nop
    355c:	f1 df       	rcall	.-30     	; 0x3540 <prvBlinkMainLed>
    355e:	f5 cf       	rjmp	.-22     	; 0x354a <vApplicationMallocFailedHook+0x2>

00003560 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3560:	e8 df       	rcall	.-48     	; 0x3532 <prvSetMainLedOn>
    3562:	2f ef       	ldi	r18, 0xFF	; 255
    3564:	87 ea       	ldi	r24, 0xA7	; 167
    3566:	91 e6       	ldi	r25, 0x61	; 97
    3568:	21 50       	subi	r18, 0x01	; 1
    356a:	80 40       	sbci	r24, 0x00	; 0
    356c:	90 40       	sbci	r25, 0x00	; 0
    356e:	e1 f7       	brne	.-8      	; 0x3568 <vApplicationStackOverflowHook+0x8>
    3570:	00 c0       	rjmp	.+0      	; 0x3572 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3572:	00 00       	nop
    3574:	e5 df       	rcall	.-54     	; 0x3540 <prvBlinkMainLed>
    3576:	f5 cf       	rjmp	.-22     	; 0x3562 <vApplicationStackOverflowHook+0x2>

00003578 <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    3578:	86 e0       	ldi	r24, 0x06	; 6
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 8a 03 	call	0x714	; 0x714 <pvPortMalloc>
    3580:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <packet+0x1>
    3584:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <packet>
	
	if (NULL == packet){
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	69 f0       	breq	.+26     	; 0x35a6 <SensorDataPackage_create+0x2e>
		return NULL;
	}
	packet->co2Ppm=0;
    358c:	fc 01       	movw	r30, r24
    358e:	11 82       	std	Z+1, r1	; 0x01
    3590:	10 82       	st	Z, r1
	packet->humidityData=0;
    3592:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <packet>
    3596:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <packet+0x1>
    359a:	fc 01       	movw	r30, r24
    359c:	15 82       	std	Z+5, r1	; 0x05
    359e:	14 82       	std	Z+4, r1	; 0x04
	packet->temperatureData=0;
    35a0:	13 82       	std	Z+3, r1	; 0x03
    35a2:	12 82       	std	Z+2, r1	; 0x02
	
	return packet;
    35a4:	08 95       	ret

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
	
	if (NULL == packet){
		return NULL;
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	90 e0       	ldi	r25, 0x00	; 0
	packet->co2Ppm=0;
	packet->humidityData=0;
	packet->temperatureData=0;
	
	return packet;
}
    35aa:	08 95       	ret

000035ac <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    35ac:	e0 91 fb 17 	lds	r30, 0x17FB	; 0x8017fb <packet>
    35b0:	f0 91 fc 17 	lds	r31, 0x17FC	; 0x8017fc <packet+0x1>
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	80 83       	st	Z, r24
    35b8:	08 95       	ret

000035ba <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    35ba:	e0 91 fb 17 	lds	r30, 0x17FB	; 0x8017fb <packet>
    35be:	f0 91 fc 17 	lds	r31, 0x17FC	; 0x8017fc <packet+0x1>
    35c2:	93 83       	std	Z+3, r25	; 0x03
    35c4:	82 83       	std	Z+2, r24	; 0x02
    35c6:	08 95       	ret

000035c8 <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    35c8:	e0 91 fb 17 	lds	r30, 0x17FB	; 0x8017fb <packet>
    35cc:	f0 91 fc 17 	lds	r31, 0x17FC	; 0x8017fc <packet+0x1>
    35d0:	95 83       	std	Z+5, r25	; 0x05
    35d2:	84 83       	std	Z+4, r24	; 0x04
    35d4:	08 95       	ret

000035d6 <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    35d6:	e9 e8       	ldi	r30, 0x89	; 137
    35d8:	f6 e1       	ldi	r31, 0x16	; 22
    35da:	26 e0       	ldi	r18, 0x06	; 6
    35dc:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    35de:	60 83       	st	Z, r22
	
	

	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    35e0:	a0 91 fb 17 	lds	r26, 0x17FB	; 0x8017fb <packet>
    35e4:	b0 91 fc 17 	lds	r27, 0x17FC	; 0x8017fc <packet+0x1>
    35e8:	2c 91       	ld	r18, X
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	3c 91       	ld	r19, X
    35ee:	11 97       	sbiw	r26, 0x01	; 1
    35f0:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    35f2:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    35f4:	12 96       	adiw	r26, 0x02	; 2
    35f6:	2c 91       	ld	r18, X
    35f8:	12 97       	sbiw	r26, 0x02	; 2
    35fa:	13 96       	adiw	r26, 0x03	; 3
    35fc:	3c 91       	ld	r19, X
    35fe:	13 97       	sbiw	r26, 0x03	; 3
    3600:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3602:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3604:	14 96       	adiw	r26, 0x04	; 4
    3606:	2c 91       	ld	r18, X
    3608:	14 97       	sbiw	r26, 0x04	; 4
    360a:	15 96       	adiw	r26, 0x05	; 5
    360c:	3c 91       	ld	r19, X
    360e:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3610:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    3612:	26 e1       	ldi	r18, 0x16	; 22
    3614:	dc 01       	movw	r26, r24
    3616:	01 90       	ld	r0, Z+
    3618:	0d 92       	st	X+, r0
    361a:	2a 95       	dec	r18
    361c:	e1 f7       	brne	.-8      	; 0x3616 <getLoRaPayload+0x40>
	};
    361e:	08 95       	ret

00003620 <Temp_Humidty_sensor_create>:
}Temp_Humidity_Sensor;

//-------Constructor-------------------

void Temp_Humidty_sensor_create(EventGroupHandle_t event1,EventGroupHandle_t event2)
{
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	8c 01       	movw	r16, r24
    362a:	eb 01       	movw	r28, r22
	temperature_humdity_sensor_t new_temperature_humidty = pvPortMalloc(sizeof(Temp_Humidity_Sensor));
    362c:	88 e0       	ldi	r24, 0x08	; 8
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0e 94 8a 03 	call	0x714	; 0x714 <pvPortMalloc>
	if(NULL == new_temperature_humidty)
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	09 f1       	breq	.+66     	; 0x367a <Temp_Humidty_sensor_create+0x5a>
	{
		return NULL;
	}
	_meassureEventGroup=event1;
    3638:	10 93 fe 17 	sts	0x17FE, r17	; 0x8017fe <_meassureEventGroup+0x1>
    363c:	00 93 fd 17 	sts	0x17FD, r16	; 0x8017fd <_meassureEventGroup>
	_dataReadyEventGroup=event2;
    3640:	d0 93 00 18 	sts	0x1800, r29	; 0x801800 <_dataReadyEventGroup+0x1>
    3644:	c0 93 ff 17 	sts	0x17FF, r28	; 0x8017ff <_dataReadyEventGroup>
	new_temperature_humidty->humidity_data=humidity;
    3648:	40 91 9f 16 	lds	r20, 0x169F	; 0x80169f <humidity>
    364c:	50 91 a0 16 	lds	r21, 0x16A0	; 0x8016a0 <humidity+0x1>
    3650:	60 91 a1 16 	lds	r22, 0x16A1	; 0x8016a1 <humidity+0x2>
    3654:	70 91 a2 16 	lds	r23, 0x16A2	; 0x8016a2 <humidity+0x3>
    3658:	fc 01       	movw	r30, r24
    365a:	44 83       	std	Z+4, r20	; 0x04
    365c:	55 83       	std	Z+5, r21	; 0x05
    365e:	66 83       	std	Z+6, r22	; 0x06
    3660:	77 83       	std	Z+7, r23	; 0x07
	new_temperature_humidty->temperature_data=temperature;
    3662:	40 91 a3 16 	lds	r20, 0x16A3	; 0x8016a3 <temperature>
    3666:	50 91 a4 16 	lds	r21, 0x16A4	; 0x8016a4 <temperature+0x1>
    366a:	60 91 a5 16 	lds	r22, 0x16A5	; 0x8016a5 <temperature+0x2>
    366e:	70 91 a6 16 	lds	r23, 0x16A6	; 0x8016a6 <temperature+0x3>
    3672:	40 83       	st	Z, r20
    3674:	51 83       	std	Z+1, r21	; 0x01
    3676:	62 83       	std	Z+2, r22	; 0x02
    3678:	73 83       	std	Z+3, r23	; 0x03
	
}
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	08 95       	ret

00003684 <get_temperature_data>:
//------Get temperature data-----------

uint16_t get_temperature_data()
{
		return (uint16_t)temperature;
    3684:	60 91 a3 16 	lds	r22, 0x16A3	; 0x8016a3 <temperature>
    3688:	70 91 a4 16 	lds	r23, 0x16A4	; 0x8016a4 <temperature+0x1>
    368c:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <temperature+0x2>
    3690:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <temperature+0x3>
    3694:	d4 d2       	rcall	.+1448   	; 0x3c3e <__fixunssfsi>
}
    3696:	cb 01       	movw	r24, r22
    3698:	08 95       	ret

0000369a <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
		return (uint16_t)humidity;	
    369a:	60 91 9f 16 	lds	r22, 0x169F	; 0x80169f <humidity>
    369e:	70 91 a0 16 	lds	r23, 0x16A0	; 0x8016a0 <humidity+0x1>
    36a2:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <humidity+0x2>
    36a6:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <humidity+0x3>
    36aa:	c9 d2       	rcall	.+1426   	; 0x3c3e <__fixunssfsi>
}
    36ac:	cb 01       	movw	r24, r22
    36ae:	08 95       	ret

000036b0 <tempHum_init>:
TickType_t xLastWakeTime;
TickType_t xFrequency;

/* Task to run for the sensors to work */
void tempHum_init() {
	if ( HIH8120_OK == hih8120_initialise() )
    36b0:	48 d3       	rcall	.+1680   	; 0x3d42 <hih8120_initialise>
    36b2:	88 23       	and	r24, r24
    36b4:	41 f0       	breq	.+16     	; 0x36c6 <tempHum_init+0x16>
	{
		// Driver initialized OK
		// Always check what hih8120_initialise() returns
	}	else printf("Driver doesn't start");
    36b6:	8f ed       	ldi	r24, 0xDF	; 223
    36b8:	92 e0       	ldi	r25, 0x02	; 2
    36ba:	9f 93       	push	r25
    36bc:	8f 93       	push	r24
    36be:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	08 95       	ret

000036c8 <tempHum_getDataFromTempHumSensorTask>:
	
	for(;;)
	{
		
		//Wait for Event bits to be set in Group
		event_measure = xEventGroupWaitBits(
    36c8:	cc 24       	eor	r12, r12
    36ca:	ca 94       	dec	r12
    36cc:	dc 2c       	mov	r13, r12
    36ce:	76 01       	movw	r14, r12
    36d0:	01 e0       	ldi	r16, 0x01	; 1
    36d2:	21 e0       	ldi	r18, 0x01	; 1
    36d4:	42 e0       	ldi	r20, 0x02	; 2
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <_meassureEventGroup>
    36e0:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <_meassureEventGroup+0x1>
    36e4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <xEventGroupWaitBits>
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		 
		
		if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    36e8:	61 ff       	sbrs	r22, 1
    36ea:	4e c0       	rjmp	.+156    	; 0x3788 <tempHum_getDataFromTempHumSensorTask+0xc0>
		{
			
			vTaskDelay( pdMS_TO_TICKS(100UL));
    36ec:	66 e0       	ldi	r22, 0x06	; 6
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    36f8:	3c d3       	rcall	.+1656   	; 0x3d72 <hih8120_wakeup>
    36fa:	88 23       	and	r24, r24
    36fc:	c1 f0       	breq	.+48     	; 0x372e <tempHum_getDataFromTempHumSensorTask+0x66>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    36fe:	66 e0       	ldi	r22, 0x06	; 6
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    370a:	84 ef       	ldi	r24, 0xF4	; 244
    370c:	92 e0       	ldi	r25, 0x02	; 2
    370e:	9f 93       	push	r25
    3710:	8f 93       	push	r24
    3712:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	06 c0       	rjmp	.+12     	; 0x3728 <tempHum_getDataFromTempHumSensorTask+0x60>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    371c:	63 e0       	ldi	r22, 0x03	; 3
    371e:	70 e0       	ldi	r23, 0x00	; 0
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3728:	24 d3       	rcall	.+1608   	; 0x3d72 <hih8120_wakeup>
    372a:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    372c:	b9 f3       	breq	.-18     	; 0x371c <tempHum_getDataFromTempHumSensorTask+0x54>
    372e:	36 d3       	rcall	.+1644   	; 0x3d9c <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3730:	63 e0       	ldi	r22, 0x03	; 3
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    373c:	2f d3       	rcall	.+1630   	; 0x3d9c <hih8120_measure>
    373e:	81 11       	cpse	r24, r1
    3740:	c3 cf       	rjmp	.-122    	; 0x36c8 <tempHum_getDataFromTempHumSensorTask>
		{
		
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3742:	66 e0       	ldi	r22, 0x06	; 6
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
			humidity =  hih8120_getHumidity();
    374e:	37 d3       	rcall	.+1646   	; 0x3dbe <hih8120_getHumidity>
    3750:	60 93 9f 16 	sts	0x169F, r22	; 0x80169f <humidity>
    3754:	70 93 a0 16 	sts	0x16A0, r23	; 0x8016a0 <humidity+0x1>
    3758:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <humidity+0x2>
    375c:	90 93 a2 16 	sts	0x16A2, r25	; 0x8016a2 <humidity+0x3>
			temperature = hih8120_getTemperature();
    3760:	43 d3       	rcall	.+1670   	; 0x3de8 <hih8120_getTemperature>
    3762:	60 93 a3 16 	sts	0x16A3, r22	; 0x8016a3 <temperature>
    3766:	70 93 a4 16 	sts	0x16A4, r23	; 0x8016a4 <temperature+0x1>
    376a:	80 93 a5 16 	sts	0x16A5, r24	; 0x8016a5 <temperature+0x2>
    376e:	90 93 a6 16 	sts	0x16A6, r25	; 0x8016a6 <temperature+0x3>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <_dataReadyEventGroup>
    377e:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <_dataReadyEventGroup+0x1>
    3782:	0e 94 89 02 	call	0x512	; 0x512 <xEventGroupSetBits>
    3786:	a0 cf       	rjmp	.-192    	; 0x36c8 <tempHum_getDataFromTempHumSensorTask>
			
		}
	}	
		else{
			puts("hahah");
    3788:	8e e2       	ldi	r24, 0x2E	; 46
    378a:	93 e0       	ldi	r25, 0x03	; 3
    378c:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
    3790:	9b cf       	rjmp	.-202    	; 0x36c8 <tempHum_getDataFromTempHumSensorTask>

00003792 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{	puts("Try to join");
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	64 97       	sbiw	r28, 0x14	; 20
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	cd bf       	out	0x3d, r28	; 61
    37aa:	84 e3       	ldi	r24, 0x34	; 52
    37ac:	93 e0       	ldi	r25, 0x03	; 3
    37ae:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	0e 94 4c 29 	call	0x5298	; 0x5298 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    37b8:	9f d4       	rcall	.+2366   	; 0x40f8 <lora_driver_rn2483FactoryReset>
    37ba:	1b d7       	rcall	.+3638   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    37bc:	9f 93       	push	r25
    37be:	8f 93       	push	r24
    37c0:	80 e4       	ldi	r24, 0x40	; 64
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	9f 93       	push	r25
    37c6:	8f 93       	push	r24
    37c8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    37cc:	13 d6       	rcall	.+3110   	; 0x43f4 <lora_driver_configureToEu868>
    37ce:	11 d7       	rcall	.+3618   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    37d0:	9f 93       	push	r25
    37d2:	8f 93       	push	r24
    37d4:	83 e5       	ldi	r24, 0x53	; 83
    37d6:	93 e0       	ldi	r25, 0x03	; 3
    37d8:	9f 93       	push	r25
    37da:	8f 93       	push	r24
    37dc:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
    37e0:	8c e6       	ldi	r24, 0x6C	; 108
    37e2:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join1");
    37e4:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
    37e8:	8e 01       	movw	r16, r28
    37ea:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    37ec:	1f 4f       	sbci	r17, 0xFF	; 255
    37ee:	c8 01       	movw	r24, r16
    37f0:	95 d4       	rcall	.+2346   	; 0x411c <lora_driver_getRn2483Hweui>
    37f2:	ff d6       	rcall	.+3582   	; 0x45f2 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    37f4:	1f 93       	push	r17
    37f6:	0f 93       	push	r16
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	89 e7       	ldi	r24, 0x79	; 121
    37fe:	93 e0       	ldi	r25, 0x03	; 3
    3800:	9f 93       	push	r25
    3802:	8f 93       	push	r24
    3804:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3808:	c8 01       	movw	r24, r16
    380a:	a4 d4       	rcall	.+2376   	; 0x4154 <lora_driver_setDeviceIdentifier>
    380c:	f2 d6       	rcall	.+3556   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    380e:	9f 93       	push	r25
    3810:	8f 93       	push	r24
    3812:	1f 93       	push	r17
    3814:	0f 93       	push	r16
    3816:	8d e8       	ldi	r24, 0x8D	; 141
    3818:	93 e0       	ldi	r25, 0x03	; 3
    381a:	9f 93       	push	r25
    381c:	8f 93       	push	r24
    381e:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
    3822:	82 ea       	ldi	r24, 0xA2	; 162
    3824:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join2");
    3826:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    382a:	a8 01       	movw	r20, r16
    382c:	6f ea       	ldi	r22, 0xAF	; 175
    382e:	73 e0       	ldi	r23, 0x03	; 3
    3830:	80 ed       	ldi	r24, 0xD0	; 208
    3832:	93 e0       	ldi	r25, 0x03	; 3
    3834:	bd d6       	rcall	.+3450   	; 0x45b0 <lora_driver_setOtaaIdentity>
    3836:	dd d6       	rcall	.+3514   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	1f 93       	push	r17
    383e:	0f 93       	push	r16
    3840:	8f ea       	ldi	r24, 0xAF	; 175
    3842:	93 e0       	ldi	r25, 0x03	; 3
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	80 ed       	ldi	r24, 0xD0	; 208
    384a:	93 e0       	ldi	r25, 0x03	; 3
    384c:	9f 93       	push	r25
    384e:	8f 93       	push	r24
    3850:	81 ee       	ldi	r24, 0xE1	; 225
    3852:	93 e0       	ldi	r25, 0x03	; 3
    3854:	9f 93       	push	r25
    3856:	8f 93       	push	r24
    3858:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    385c:	ae d4       	rcall	.+2396   	; 0x41ba <lora_driver_saveMac>
    385e:	c9 d6       	rcall	.+3474   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    3860:	9f 93       	push	r25
    3862:	8f 93       	push	r24
    3864:	87 e1       	ldi	r24, 0x17	; 23
    3866:	94 e0       	ldi	r25, 0x04	; 4
    3868:	9f 93       	push	r25
    386a:	8f 93       	push	r24
    386c:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	98 d5       	rcall	.+2864   	; 0x43ae <lora_driver_setAdaptiveDataRate>
    387e:	b9 d6       	rcall	.+3442   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    3880:	9f 93       	push	r25
    3882:	8f 93       	push	r24
    3884:	86 e2       	ldi	r24, 0x26	; 38
    3886:	94 e0       	ldi	r25, 0x04	; 4
    3888:	9f 93       	push	r25
    388a:	8f 93       	push	r24
    388c:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
	puts("Try to join3");
    3890:	87 e4       	ldi	r24, 0x47	; 71
    3892:	94 e0       	ldi	r25, 0x04	; 4
    3894:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3898:	84 ef       	ldi	r24, 0xF4	; 244
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	93 d5       	rcall	.+2854   	; 0x43c4 <lora_driver_setReceiveDelay>
    389e:	a9 d6       	rcall	.+3410   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    38a0:	9f 93       	push	r25
    38a2:	8f 93       	push	r24
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	8f 93       	push	r24
    38a8:	84 ef       	ldi	r24, 0xF4	; 244
    38aa:	8f 93       	push	r24
    38ac:	84 e5       	ldi	r24, 0x54	; 84
    38ae:	94 e0       	ldi	r25, 0x04	; 4
    38b0:	9f 93       	push	r25
    38b2:	8f 93       	push	r24
    38b4:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	puts("Try to join");
    38b8:	84 e3       	ldi	r24, 0x34	; 52
    38ba:	93 e0       	ldi	r25, 0x03	; 3
    38bc:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
	puts("Try to join3");
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    38ca:	1a e0       	ldi	r17, 0x0A	; 10
	
	puts("Try to join");
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	7b d4       	rcall	.+2294   	; 0x41c6 <lora_driver_join>
    38d0:	08 2f       	mov	r16, r24
    38d2:	8f d6       	rcall	.+3358   	; 0x45f2 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    38d4:	9f 93       	push	r25
    38d6:	8f 93       	push	r24
    38d8:	1f 92       	push	r1
    38da:	1f 93       	push	r17
    38dc:	84 e7       	ldi	r24, 0x74	; 116
    38de:	94 e0       	ldi	r25, 0x04	; 4
    38e0:	9f 93       	push	r25
    38e2:	8f 93       	push	r24
    38e4:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	08 30       	cpi	r16, 0x08	; 8
    38f6:	59 f0       	breq	.+22     	; 0x390e <uplink_lora_setup+0x17c>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	0e 94 b0 29 	call	0x5360	; 0x5360 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    38fe:	66 e3       	ldi	r22, 0x36	; 54
    3900:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
    390a:	11 50       	subi	r17, 0x01	; 1
    390c:	f9 f6       	brne	.-66     	; 0x38cc <uplink_lora_setup+0x13a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    390e:	08 30       	cpi	r16, 0x08	; 8
    3910:	21 f4       	brne	.+8      	; 0x391a <uplink_lora_setup+0x188>

	if (rc == LORA_ACCEPTED)
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	0e 94 92 29 	call	0x5324	; 0x5324 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3918:	0d c0       	rjmp	.+26     	; 0x3934 <uplink_lora_setup+0x1a2>
    391a:	84 e9       	ldi	r24, 0x94	; 148
		while (1)
		{
			taskYIELD();
		}
	}
}
    391c:	94 e0       	ldi	r25, 0x04	; 4
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    391e:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	0e 94 a1 29 	call	0x5342	; 0x5342 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	0e 94 6f 29 	call	0x52de	; 0x52de <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    392e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3932:	fd cf       	rjmp	.-6      	; 0x392e <uplink_lora_setup+0x19c>
    3934:	64 96       	adiw	r28, 0x14	; 20
    3936:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	08 95       	ret

0000394a <upLink_create>:
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority, MessageBufferHandle_t mBuffer)
{
    394e:	0f 93       	push	r16
    3950:	9b 01       	movw	r18, r22
	messageBuffer = mBuffer;
    3952:	70 93 a8 16 	sts	0x16A8, r23	; 0x8016a8 <messageBuffer+0x1>
    3956:	60 93 a7 16 	sts	0x16A7, r22	; 0x8016a7 <messageBuffer>
	
	xTaskCreate(
    395a:	e1 2c       	mov	r14, r1
    395c:	f1 2c       	mov	r15, r1
    395e:	08 2f       	mov	r16, r24
    3960:	48 e8       	ldi	r20, 0x88	; 136
    3962:	51 e0       	ldi	r21, 0x01	; 1
    3964:	6f e9       	ldi	r22, 0x9F	; 159
    3966:	74 e0       	ldi	r23, 0x04	; 4
    3968:	8a e1       	ldi	r24, 0x1A	; 26
    396a:	9d e1       	ldi	r25, 0x1D	; 29
    396c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)mBuffer,
	priority,
	NULL );
}
    3970:	0f 91       	pop	r16
    3972:	ff 90       	pop	r15
    3974:	ef 90       	pop	r14
    3976:	08 95       	ret

00003978 <lora_Handler_task>:
}



void lora_Handler_task()
{
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
    397c:	00 d0       	rcall	.+0      	; 0x397e <lora_Handler_task+0x6>
    397e:	1f 92       	push	r1
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	aa d3       	rcall	.+1876   	; 0x40dc <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    3988:	62 e0       	ldi	r22, 0x02	; 2
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	a2 d3       	rcall	.+1860   	; 0x40dc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    3998:	66 e9       	ldi	r22, 0x96	; 150
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
	puts("Start1");
    39a4:	8a ea       	ldi	r24, 0xAA	; 170
    39a6:	94 e0       	ldi	r25, 0x04	; 4
    39a8:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    39ac:	50 d3       	rcall	.+1696   	; 0x404e <lora_driver_flushBuffers>
	uplink_lora_setup();
    39ae:	f1 de       	rcall	.-542    	; 0x3792 <uplink_lora_setup>
    39b0:	e9 ea       	ldi	r30, 0xA9	; 169
	_uplink_payload.len = 6;
    39b2:	f6 e1       	ldi	r31, 0x16	; 22
    39b4:	86 e0       	ldi	r24, 0x06	; 6
    39b6:	81 83       	std	Z+1, r24	; 0x01
    39b8:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    39ba:	80 83       	st	Z, r24
    39bc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    39c0:	69 83       	std	Y+1, r22	; 0x01
    39c2:	7a 83       	std	Y+2, r23	; 0x02
    39c4:	8b 83       	std	Y+3, r24	; 0x03
    39c6:	9c 83       	std	Y+4, r25	; 0x04
    39c8:	81 eb       	ldi	r24, 0xB1	; 177
	
	size_t xBytesSent;
	
	puts("Waiting");
    39ca:	94 e0       	ldi	r25, 0x04	; 4
    39cc:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
    39d0:	0f ef       	ldi	r16, 0xFF	; 255
	xBytesSent = xMessageBufferReceive(
    39d2:	1f ef       	ldi	r17, 0xFF	; 255
    39d4:	98 01       	movw	r18, r16
    39d6:	46 e1       	ldi	r20, 0x16	; 22
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	69 ea       	ldi	r22, 0xA9	; 169
    39dc:	76 e1       	ldi	r23, 0x16	; 22
    39de:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <messageBuffer>
    39e2:	90 91 a8 16 	lds	r25, 0x16A8	; 0x8016a8 <messageBuffer+0x1>
    39e6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xStreamBufferReceive>
    39ea:	8c 01       	movw	r16, r24
    39ec:	89 eb       	ldi	r24, 0xB9	; 185
	messageBuffer,
	(void*) &_uplink_payload,  			// Object to be send
	sizeof(lora_driver_payload_t),	// Size of object
	portMAX_DELAY);			// Block until space in buffer

	puts("Received");
    39ee:	94 e0       	ldi	r25, 0x04	; 4
    39f0:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
    39f4:	44 e4       	ldi	r20, 0x44	; 68
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    39f6:	57 e0       	ldi	r21, 0x07	; 7
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	ce 01       	movw	r24, r28
    39fe:	01 96       	adiw	r24, 0x01	; 1
    3a00:	0e 94 c4 10 	call	0x2188	; 0x2188 <xTaskDelayUntil>
    3a04:	01 15       	cp	r16, r1
		
		if (xBytesSent>0)
    3a06:	11 05       	cpc	r17, r1
    3a08:	a9 f3       	breq	.-22     	; 0x39f4 <lora_Handler_task+0x7c>
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
		{
			//strcpy(_uplink_payload.bytes, xBytesSent);
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3a0c:	0e 94 c2 29 	call	0x5384	; 0x5384 <status_leds_shortPuls>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3a10:	69 ea       	ldi	r22, 0xA9	; 169
    3a12:	76 e1       	ldi	r23, 0x16	; 22
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	00 d4       	rcall	.+2048   	; 0x4218 <lora_driver_sendUploadMessage>
    3a18:	ec d5       	rcall	.+3032   	; 0x45f2 <lora_driver_mapReturnCodeToText>
    3a1a:	9f 93       	push	r25
    3a1c:	8f 93       	push	r24
    3a1e:	82 ec       	ldi	r24, 0xC2	; 194
    3a20:	94 e0       	ldi	r25, 0x04	; 4
    3a22:	9f 93       	push	r25
    3a24:	8f 93       	push	r24
    3a26:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	e0 cf       	rjmp	.-64     	; 0x39f4 <lora_Handler_task+0x7c>

00003a34 <upLinkHandler_StartTask>:
    3a34:	a1 df       	rcall	.-190    	; 0x3978 <lora_Handler_task>

00003a36 <Temperature_Humidity_Task>:
//
///*-----------------------------------------------------------*/


void Temperature_Humidity_Task( void *pvParameters )
{
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	ec 01       	movw	r28, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms
	//
	//// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3a3c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xTaskGetTickCount>
		
		tempHum_getDataFromTempHumSensorTask(pvParameters);
    3a40:	ce 01       	movw	r24, r28
    3a42:	42 de       	rcall	.-892    	; 0x36c8 <tempHum_getDataFromTempHumSensorTask>
		
		
	
}
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	08 95       	ret

00003a4a <CO2_Task>:


void CO2_Task( void *pvParameters )
{
	CO2_Sensor_Task(pvParameters);
    3a4a:	0c 94 8c 01 	jmp	0x318	; 0x318 <CO2_Sensor_Task>
    3a4e:	08 95       	ret

00003a50 <Application_Task>:

}

/*-----------------------------------------------------------*/
void Application_Task(void* pvParameters)
{
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	ac 97       	sbiw	r28, 0x2c	; 44
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	de bf       	out	0x3e, r29	; 62
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	cd bf       	out	0x3d, r28	; 61
	EventBits_t dataReadyEventBits;
	
	
	for (;;)
	{
		xEventGroupSetBits(measureEventGroup,ALL_READY_BITS);
    3a64:	42 e0       	ldi	r20, 0x02	; 2
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	60 e0       	ldi	r22, 0x00	; 0
    3a6a:	70 e0       	ldi	r23, 0x00	; 0
    3a6c:	80 91 03 18 	lds	r24, 0x1803	; 0x801803 <measureEventGroup>
    3a70:	90 91 04 18 	lds	r25, 0x1804	; 0x801804 <measureEventGroup+0x1>
    3a74:	0e 94 89 02 	call	0x512	; 0x512 <xEventGroupSetBits>
		dataReadyEventBits=xEventGroupWaitBits(dataReadyEventGroup,ALL_MEASURE_BITS,pdTRUE,pdFALSE,portMAX_DELAY);
    3a78:	cc 24       	eor	r12, r12
    3a7a:	ca 94       	dec	r12
    3a7c:	dc 2c       	mov	r13, r12
    3a7e:	76 01       	movw	r14, r12
    3a80:	00 e0       	ldi	r16, 0x00	; 0
    3a82:	21 e0       	ldi	r18, 0x01	; 1
    3a84:	41 e0       	ldi	r20, 0x01	; 1
    3a86:	50 e0       	ldi	r21, 0x00	; 0
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	70 e0       	ldi	r23, 0x00	; 0
    3a8c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dataReadyEventGroup>
    3a90:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dataReadyEventGroup+0x1>
    3a94:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <xEventGroupWaitBits>
		if ((dataReadyEventBits & ALL_MEASURE_BITS  )==ALL_MEASURE_BITS)
    3a98:	60 ff       	sbrs	r22, 0
    3a9a:	1e c0       	rjmp	.+60     	; 0x3ad8 <Application_Task+0x88>
		{
			setCO2Ppm(1050);
    3a9c:	8a e1       	ldi	r24, 0x1A	; 26
    3a9e:	94 e0       	ldi	r25, 0x04	; 4
    3aa0:	85 dd       	rcall	.-1270   	; 0x35ac <setCO2Ppm>
			setTemperatureData(get_temperature_data());
    3aa2:	f0 dd       	rcall	.-1056   	; 0x3684 <get_temperature_data>
    3aa4:	8a dd       	rcall	.-1260   	; 0x35ba <setTemperatureData>
			printf("Task data %d",get_temperature_data());
    3aa6:	ee dd       	rcall	.-1060   	; 0x3684 <get_temperature_data>
    3aa8:	9f 93       	push	r25
    3aaa:	8f 93       	push	r24
    3aac:	88 ed       	ldi	r24, 0xD8	; 216
    3aae:	94 e0       	ldi	r25, 0x04	; 4
    3ab0:	9f 93       	push	r25
    3ab2:	8f 93       	push	r24
    3ab4:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
			setHumidityData(get_humidity_data());
    3ab8:	f0 dd       	rcall	.-1056   	; 0x369a <get_humidity_data>
    3aba:	86 dd       	rcall	.-1268   	; 0x35c8 <setHumidityData>
    3abc:	ee dd       	rcall	.-1060   	; 0x369a <get_humidity_data>
			printf(" Task data %d",get_humidity_data());
    3abe:	9f 93       	push	r25
    3ac0:	8f 93       	push	r24
    3ac2:	87 ed       	ldi	r24, 0xD7	; 215
    3ac4:	94 e0       	ldi	r25, 0x04	; 4
    3ac6:	9f 93       	push	r25
    3ac8:	8f 93       	push	r24
    3aca:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <printf>
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	62 e0       	ldi	r22, 0x02	; 2
		}

		payload=getLoRaPayload((uint8_t)2);
    3ada:	ce 01       	movw	r24, r28
    3adc:	47 96       	adiw	r24, 0x17	; 23
    3ade:	7b dd       	rcall	.-1290   	; 0x35d6 <getLoRaPayload>
    3ae0:	86 e1       	ldi	r24, 0x16	; 22
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	77 96       	adiw	r30, 0x17	; 23
    3ae6:	de 01       	movw	r26, r28
    3ae8:	11 96       	adiw	r26, 0x01	; 1
    3aea:	01 90       	ld	r0, Z+
    3aec:	0d 92       	st	X+, r0
    3aee:	8a 95       	dec	r24
    3af0:	e1 f7       	brne	.-8      	; 0x3aea <Application_Task+0x9a>
    3af2:	63 e0       	ldi	r22, 0x03	; 3
    3af4:	70 e0       	ldi	r23, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
    3afe:	0f ef       	ldi	r16, 0xFF	; 255
    3b00:	1f ef       	ldi	r17, 0xFF	; 255
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    3b02:	98 01       	movw	r18, r16
    3b04:	46 e1       	ldi	r20, 0x16	; 22
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	be 01       	movw	r22, r28
    3b0a:	6f 5f       	subi	r22, 0xFF	; 255
    3b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0e:	80 91 01 18 	lds	r24, 0x1801	; 0x801801 <xMessageBuffer>
    3b12:	90 91 02 18 	lds	r25, 0x1802	; 0x801802 <xMessageBuffer+0x1>
    3b16:	0e 94 81 0a 	call	0x1502	; 0x1502 <xStreamBufferSend>
    3b1a:	a4 cf       	rjmp	.-184    	; 0x3a64 <Application_Task+0x14>

00003b1c <create_tasks_and_semaphores>:
    3b1c:	ef 92       	push	r14
	}
    3b1e:	ff 92       	push	r15
 EventBits_t measureEventGroup;
EventBits_t dataReadyEventGroup;
/*-----------------------------------------------------------*/

void create_tasks_and_semaphores(void)
{
    3b20:	0f 93       	push	r16
	xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	70 e0       	ldi	r23, 0x00	; 0
    3b28:	84 e6       	ldi	r24, 0x64	; 100
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 1f 0a 	call	0x143e	; 0x143e <xStreamBufferGenericCreate>
    3b30:	90 93 02 18 	sts	0x1802, r25	; 0x801802 <xMessageBuffer+0x1>
    3b34:	80 93 01 18 	sts	0x1801, r24	; 0x801801 <xMessageBuffer>
	
	
	SensorDataPackage_create();
    3b38:	1f dd       	rcall	.-1474   	; 0x3578 <SensorDataPackage_create>
	measureEventGroup=xEventGroupCreate();
    3b3a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <xEventGroupCreate>
    3b3e:	09 2e       	mov	r0, r25
    3b40:	00 0c       	add	r0, r0
    3b42:	aa 0b       	sbc	r26, r26
    3b44:	bb 0b       	sbc	r27, r27
    3b46:	80 93 03 18 	sts	0x1803, r24	; 0x801803 <measureEventGroup>
    3b4a:	90 93 04 18 	sts	0x1804, r25	; 0x801804 <measureEventGroup+0x1>
    3b4e:	a0 93 05 18 	sts	0x1805, r26	; 0x801805 <measureEventGroup+0x2>
    3b52:	b0 93 06 18 	sts	0x1806, r27	; 0x801806 <measureEventGroup+0x3>
	dataReadyEventGroup=xEventGroupCreate();
    3b56:	0e 94 d6 01 	call	0x3ac	; 0x3ac <xEventGroupCreate>
    3b5a:	ac 01       	movw	r20, r24
    3b5c:	09 2e       	mov	r0, r25
    3b5e:	00 0c       	add	r0, r0
    3b60:	66 0b       	sbc	r22, r22
    3b62:	77 0b       	sbc	r23, r23
    3b64:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <dataReadyEventGroup>
    3b68:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <dataReadyEventGroup+0x1>
    3b6c:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <uxTopUsedPriority>
    3b70:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <_temp>
	Temp_Humidty_sensor_create(measureEventGroup,dataReadyEventGroup);
    3b74:	bc 01       	movw	r22, r24
    3b76:	80 91 03 18 	lds	r24, 0x1803	; 0x801803 <measureEventGroup>
    3b7a:	90 91 04 18 	lds	r25, 0x1804	; 0x801804 <measureEventGroup+0x1>
    3b7e:	50 dd       	rcall	.-1376   	; 0x3620 <Temp_Humidty_sensor_create>
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3b80:	80 91 07 18 	lds	r24, 0x1807	; 0x801807 <xTestSemaphore>
    3b84:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <xTestSemaphore+0x1>
    3b88:	89 2b       	or	r24, r25
    3b8a:	89 f4       	brne	.+34     	; 0x3bae <create_tasks_and_semaphores+0x92>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <xQueueCreateMutex>
    3b92:	90 93 08 18 	sts	0x1808, r25	; 0x801808 <xTestSemaphore+0x1>
    3b96:	80 93 07 18 	sts	0x1807, r24	; 0x801807 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	41 f0       	breq	.+16     	; 0x3bae <create_tasks_and_semaphores+0x92>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3b9e:	00 e0       	ldi	r16, 0x00	; 0
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	a9 01       	movw	r20, r18
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	0e 94 46 07 	call	0xe8c	; 0xe8c <xQueueGenericSend>
		}
	}

	xTaskCreate(
    3bae:	e1 2c       	mov	r14, r1
    3bb0:	f1 2c       	mov	r15, r1
    3bb2:	03 e0       	ldi	r16, 0x03	; 3
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	40 ec       	ldi	r20, 0xC0	; 192
    3bba:	50 e0       	ldi	r21, 0x00	; 0
    3bbc:	65 ee       	ldi	r22, 0xE5	; 229
    3bbe:	74 e0       	ldi	r23, 0x04	; 4
    3bc0:	88 e2       	ldi	r24, 0x28	; 40
    3bc2:	9d e1       	ldi	r25, 0x1D	; 29
    3bc4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
xTaskCreate(
    3bc8:	01 e0       	ldi	r16, 0x01	; 1
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 ec       	ldi	r20, 0xC0	; 192
    3bd0:	50 e0       	ldi	r21, 0x00	; 0
    3bd2:	61 ef       	ldi	r22, 0xF1	; 241
    3bd4:	74 e0       	ldi	r23, 0x04	; 4
    3bd6:	8b e1       	ldi	r24, 0x1B	; 27
    3bd8:	9d e1       	ldi	r25, 0x1D	; 29
    3bda:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
xTaskCreate(
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 ec       	ldi	r20, 0xC0	; 192
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	66 e0       	ldi	r22, 0x06	; 6
    3be8:	75 e0       	ldi	r23, 0x05	; 5
    3bea:	85 e2       	ldi	r24, 0x25	; 37
    3bec:	9d e1       	ldi	r25, 0x1D	; 29
    3bee:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xTaskCreate>
	,  1 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	
	
}
    3bf2:	0f 91       	pop	r16
    3bf4:	ff 90       	pop	r15
    3bf6:	ef 90       	pop	r14
    3bf8:	08 95       	ret

00003bfa <initialiseSystem>:
	
}
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3bfa:	81 b1       	in	r24, 0x01	; 1
    3bfc:	81 68       	ori	r24, 0x81	; 129
    3bfe:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	0e 94 f7 27 	call	0x4fee	; 0x4fee <stdio_initialise>
	// Let's create some tasks
	
    tempHum_init();
    3c06:	54 dd       	rcall	.-1368   	; 0x36b0 <tempHum_init>
	mh_z19_initialise(ser_USART3);
    3c08:	83 e0       	ldi	r24, 0x03	; 3
    3c0a:	cf d5       	rcall	.+2974   	; 0x47aa <mh_z19_initialise>
	puts("Task0");
    3c0c:	8f e0       	ldi	r24, 0x0F	; 15
    3c0e:	95 e0       	ldi	r25, 0x05	; 5
    3c10:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	create_tasks_and_semaphores();
    3c14:	83 df       	rcall	.-250    	; 0x3b1c <create_tasks_and_semaphores>
       // Always check what hih8120_initialise() returns
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3c16:	85 e0       	ldi	r24, 0x05	; 5
    3c18:	0e 94 fe 28 	call	0x51fc	; 0x51fc <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3c1c:	60 e0       	ldi	r22, 0x00	; 0
    3c1e:	70 e0       	ldi	r23, 0x00	; 0
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	1c d2       	rcall	.+1080   	; 0x405c <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
upLink_create(4,xMessageBuffer);
    3c24:	60 91 01 18 	lds	r22, 0x1801	; 0x801801 <xMessageBuffer>
    3c28:	70 91 02 18 	lds	r23, 0x1802	; 0x801802 <xMessageBuffer+0x1>
    3c2c:	84 e0       	ldi	r24, 0x04	; 4
    3c2e:	8d ce       	rjmp	.-742    	; 0x394a <upLink_create>
    3c30:	08 95       	ret

00003c32 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3c32:	e3 df       	rcall	.-58     	; 0x3bfa <initialiseSystem>
	//printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3c34:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <vTaskStartScheduler>

	/* Replace with your application code */
	
}
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	08 95       	ret

00003c3e <__fixunssfsi>:
    3c3e:	33 d0       	rcall	.+102    	; 0x3ca6 <__fp_splitA>
    3c40:	88 f0       	brcs	.+34     	; 0x3c64 <__fixunssfsi+0x26>
    3c42:	9f 57       	subi	r25, 0x7F	; 127
    3c44:	90 f0       	brcs	.+36     	; 0x3c6a <__fixunssfsi+0x2c>
    3c46:	b9 2f       	mov	r27, r25
    3c48:	99 27       	eor	r25, r25
    3c4a:	b7 51       	subi	r27, 0x17	; 23
    3c4c:	a0 f0       	brcs	.+40     	; 0x3c76 <__fixunssfsi+0x38>
    3c4e:	d1 f0       	breq	.+52     	; 0x3c84 <__fixunssfsi+0x46>
    3c50:	66 0f       	add	r22, r22
    3c52:	77 1f       	adc	r23, r23
    3c54:	88 1f       	adc	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	1a f0       	brmi	.+6      	; 0x3c60 <__fixunssfsi+0x22>
    3c5a:	ba 95       	dec	r27
    3c5c:	c9 f7       	brne	.-14     	; 0x3c50 <__fixunssfsi+0x12>
    3c5e:	12 c0       	rjmp	.+36     	; 0x3c84 <__fixunssfsi+0x46>
    3c60:	b1 30       	cpi	r27, 0x01	; 1
    3c62:	81 f0       	breq	.+32     	; 0x3c84 <__fixunssfsi+0x46>
    3c64:	3a d0       	rcall	.+116    	; 0x3cda <__fp_zero>
    3c66:	b1 e0       	ldi	r27, 0x01	; 1
    3c68:	08 95       	ret
    3c6a:	37 c0       	rjmp	.+110    	; 0x3cda <__fp_zero>
    3c6c:	67 2f       	mov	r22, r23
    3c6e:	78 2f       	mov	r23, r24
    3c70:	88 27       	eor	r24, r24
    3c72:	b8 5f       	subi	r27, 0xF8	; 248
    3c74:	39 f0       	breq	.+14     	; 0x3c84 <__fixunssfsi+0x46>
    3c76:	b9 3f       	cpi	r27, 0xF9	; 249
    3c78:	cc f3       	brlt	.-14     	; 0x3c6c <__fixunssfsi+0x2e>
    3c7a:	86 95       	lsr	r24
    3c7c:	77 95       	ror	r23
    3c7e:	67 95       	ror	r22
    3c80:	b3 95       	inc	r27
    3c82:	d9 f7       	brne	.-10     	; 0x3c7a <__fixunssfsi+0x3c>
    3c84:	3e f4       	brtc	.+14     	; 0x3c94 <__fixunssfsi+0x56>
    3c86:	90 95       	com	r25
    3c88:	80 95       	com	r24
    3c8a:	70 95       	com	r23
    3c8c:	61 95       	neg	r22
    3c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c90:	8f 4f       	sbci	r24, 0xFF	; 255
    3c92:	9f 4f       	sbci	r25, 0xFF	; 255
    3c94:	08 95       	ret

00003c96 <__fp_split3>:
    3c96:	57 fd       	sbrc	r21, 7
    3c98:	90 58       	subi	r25, 0x80	; 128
    3c9a:	44 0f       	add	r20, r20
    3c9c:	55 1f       	adc	r21, r21
    3c9e:	59 f0       	breq	.+22     	; 0x3cb6 <__fp_splitA+0x10>
    3ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca2:	71 f0       	breq	.+28     	; 0x3cc0 <__fp_splitA+0x1a>
    3ca4:	47 95       	ror	r20

00003ca6 <__fp_splitA>:
    3ca6:	88 0f       	add	r24, r24
    3ca8:	97 fb       	bst	r25, 7
    3caa:	99 1f       	adc	r25, r25
    3cac:	61 f0       	breq	.+24     	; 0x3cc6 <__fp_splitA+0x20>
    3cae:	9f 3f       	cpi	r25, 0xFF	; 255
    3cb0:	79 f0       	breq	.+30     	; 0x3cd0 <__fp_splitA+0x2a>
    3cb2:	87 95       	ror	r24
    3cb4:	08 95       	ret
    3cb6:	12 16       	cp	r1, r18
    3cb8:	13 06       	cpc	r1, r19
    3cba:	14 06       	cpc	r1, r20
    3cbc:	55 1f       	adc	r21, r21
    3cbe:	f2 cf       	rjmp	.-28     	; 0x3ca4 <__fp_split3+0xe>
    3cc0:	46 95       	lsr	r20
    3cc2:	f1 df       	rcall	.-30     	; 0x3ca6 <__fp_splitA>
    3cc4:	08 c0       	rjmp	.+16     	; 0x3cd6 <__fp_splitA+0x30>
    3cc6:	16 16       	cp	r1, r22
    3cc8:	17 06       	cpc	r1, r23
    3cca:	18 06       	cpc	r1, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	f1 cf       	rjmp	.-30     	; 0x3cb2 <__fp_splitA+0xc>
    3cd0:	86 95       	lsr	r24
    3cd2:	71 05       	cpc	r23, r1
    3cd4:	61 05       	cpc	r22, r1
    3cd6:	08 94       	sec
    3cd8:	08 95       	ret

00003cda <__fp_zero>:
    3cda:	e8 94       	clt

00003cdc <__fp_szero>:
    3cdc:	bb 27       	eor	r27, r27
    3cde:	66 27       	eor	r22, r22
    3ce0:	77 27       	eor	r23, r23
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	97 f9       	bld	r25, 7
    3ce6:	08 95       	ret

00003ce8 <_hihTwiCallback>:
    3ce8:	65 30       	cpi	r22, 0x05	; 5
    3cea:	f1 f4       	brne	.+60     	; 0x3d28 <_hihTwiCallback+0x40>
    3cec:	fa 01       	movw	r30, r20
    3cee:	80 81       	ld	r24, Z
    3cf0:	8f 73       	andi	r24, 0x3F	; 63
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	98 2f       	mov	r25, r24
    3cf6:	88 27       	eor	r24, r24
    3cf8:	21 81       	ldd	r18, Z+1	; 0x01
    3cfa:	82 2b       	or	r24, r18
    3cfc:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <_hum+0x1>
    3d00:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <_hum>
    3d04:	82 81       	ldd	r24, Z+2	; 0x02
    3d06:	f0 e4       	ldi	r31, 0x40	; 64
    3d08:	8f 9f       	mul	r24, r31
    3d0a:	c0 01       	movw	r24, r0
    3d0c:	11 24       	eor	r1, r1
    3d0e:	fa 01       	movw	r30, r20
    3d10:	23 81       	ldd	r18, Z+3	; 0x03
    3d12:	26 95       	lsr	r18
    3d14:	26 95       	lsr	r18
    3d16:	82 2b       	or	r24, r18
    3d18:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_temp+0x1>
    3d1c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_temp>
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <_measuringIsReady>
    3d26:	08 95       	ret
    3d28:	64 30       	cpi	r22, 0x04	; 4
    3d2a:	51 f0       	breq	.+20     	; 0x3d40 <_hihTwiCallback+0x58>
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e4       	ldi	r25, 0x40	; 64
    3d30:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_temp+0x1>
    3d34:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_temp>
    3d38:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <_hum+0x1>
    3d3c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <_hum>
    3d40:	08 95       	ret

00003d42 <hih8120_initialise>:
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	04 e7       	ldi	r16, 0x74	; 116
    3d48:	1e e1       	ldi	r17, 0x1E	; 30
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	34 e2       	ldi	r19, 0x24	; 36
    3d4e:	44 ef       	ldi	r20, 0xF4	; 244
    3d50:	50 e0       	ldi	r21, 0x00	; 0
    3d52:	60 e0       	ldi	r22, 0x00	; 0
    3d54:	87 e2       	ldi	r24, 0x27	; 39
    3d56:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <twiCreate>
    3d5a:	90 93 c1 16 	sts	0x16C1, r25	; 0x8016c1 <_hih8120Handler+0x1>
    3d5e:	80 93 c0 16 	sts	0x16C0, r24	; 0x8016c0 <_hih8120Handler>
    3d62:	21 e0       	ldi	r18, 0x01	; 1
    3d64:	89 2b       	or	r24, r25
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <hih8120_initialise+0x28>
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	82 2f       	mov	r24, r18
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	08 95       	ret

00003d72 <hih8120_wakeup>:
    3d72:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <_hih8120Handler>
    3d76:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <_hih8120Handler+0x1>
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	59 f0       	breq	.+22     	; 0x3d94 <hih8120_wakeup+0x22>
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	0e 94 35 2a 	call	0x546a	; 0x546a <twiTransmit>
    3d88:	84 30       	cpi	r24, 0x04	; 4
    3d8a:	31 f4       	brne	.+12     	; 0x3d98 <hih8120_wakeup+0x26>
    3d8c:	10 92 bf 16 	sts	0x16BF, r1	; 0x8016bf <_measuringIsReady>
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	08 95       	ret
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	08 95       	ret
    3d98:	83 e0       	ldi	r24, 0x03	; 3
    3d9a:	08 95       	ret

00003d9c <hih8120_measure>:
    3d9c:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <_hih8120Handler>
    3da0:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <_hih8120Handler+0x1>
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	39 f0       	breq	.+14     	; 0x3db6 <hih8120_measure+0x1a>
    3da8:	64 e0       	ldi	r22, 0x04	; 4
    3daa:	0e 94 81 2a 	call	0x5502	; 0x5502 <twiReceive>
    3dae:	85 30       	cpi	r24, 0x05	; 5
    3db0:	21 f0       	breq	.+8      	; 0x3dba <hih8120_measure+0x1e>
    3db2:	83 e0       	ldi	r24, 0x03	; 3
    3db4:	08 95       	ret
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	08 95       	ret
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	08 95       	ret

00003dbe <hih8120_getHumidity>:
    3dbe:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_hum>
    3dc2:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <_hum+0x1>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 5f 2c 	call	0x58be	; 0x58be <__floatunsisf>
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	48 ec       	ldi	r20, 0xC8	; 200
    3dd4:	52 e4       	ldi	r21, 0x42	; 66
    3dd6:	0e 94 c4 2c 	call	0x5988	; 0x5988 <__mulsf3>
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	38 ef       	ldi	r19, 0xF8	; 248
    3dde:	4f e7       	ldi	r20, 0x7F	; 127
    3de0:	56 e4       	ldi	r21, 0x46	; 70
    3de2:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__divsf3>
    3de6:	08 95       	ret

00003de8 <hih8120_getTemperature>:
    3de8:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <_temp>
    3dec:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <_temp+0x1>
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 5f 2c 	call	0x58be	; 0x58be <__floatunsisf>
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	45 e2       	ldi	r20, 0x25	; 37
    3dfe:	53 e4       	ldi	r21, 0x43	; 67
    3e00:	0e 94 c4 2c 	call	0x5988	; 0x5988 <__mulsf3>
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	38 ef       	ldi	r19, 0xF8	; 248
    3e08:	4f e7       	ldi	r20, 0x7F	; 127
    3e0a:	56 e4       	ldi	r21, 0x46	; 70
    3e0c:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <__divsf3>
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	40 e2       	ldi	r20, 0x20	; 32
    3e16:	52 e4       	ldi	r21, 0x42	; 66
    3e18:	0c 94 8d 2b 	jmp	0x571a	; 0x571a <__subsf3>
    3e1c:	08 95       	ret

00003e1e <_serialCallBack>:
    3e1e:	0f 93       	push	r16
    3e20:	1f 93       	push	r17
    3e22:	cf 93       	push	r28
    3e24:	df 93       	push	r29
    3e26:	1f 92       	push	r1
    3e28:	1f 92       	push	r1
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	8c 01       	movw	r16, r24
    3e30:	19 82       	std	Y+1, r1	; 0x01
    3e32:	2d c0       	rjmp	.+90     	; 0x3e8e <_serialCallBack+0x70>
    3e34:	e0 91 f9 16 	lds	r30, 0x16F9	; 0x8016f9 <rec_buf_inp.2878>
    3e38:	ec 32       	cpi	r30, 0x2C	; 44
    3e3a:	50 f4       	brcc	.+20     	; 0x3e50 <_serialCallBack+0x32>
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	8e 0f       	add	r24, r30
    3e40:	80 93 f9 16 	sts	0x16F9, r24	; 0x8016f9 <rec_buf_inp.2878>
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	e5 5d       	subi	r30, 0xD5	; 213
    3e48:	f8 4e       	sbci	r31, 0xE8	; 232
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	80 83       	st	Z, r24
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <_serialCallBack+0x36>
    3e50:	10 92 f9 16 	sts	0x16F9, r1	; 0x8016f9 <rec_buf_inp.2878>
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	8a 30       	cpi	r24, 0x0A	; 10
    3e58:	d1 f4       	brne	.+52     	; 0x3e8e <_serialCallBack+0x70>
    3e5a:	40 91 f9 16 	lds	r20, 0x16F9	; 0x8016f9 <rec_buf_inp.2878>
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	fa 01       	movw	r30, r20
    3e62:	e7 5d       	subi	r30, 0xD7	; 215
    3e64:	f8 4e       	sbci	r31, 0xE8	; 232
    3e66:	10 82       	st	Z, r1
    3e68:	41 50       	subi	r20, 0x01	; 1
    3e6a:	51 09       	sbc	r21, r1
    3e6c:	9e 01       	movw	r18, r28
    3e6e:	2f 5f       	subi	r18, 0xFF	; 255
    3e70:	3f 4f       	sbci	r19, 0xFF	; 255
    3e72:	6b e2       	ldi	r22, 0x2B	; 43
    3e74:	77 e1       	ldi	r23, 0x17	; 23
    3e76:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_serialReplyBufferHandle>
    3e7a:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_serialReplyBufferHandle+0x1>
    3e7e:	0e 94 46 0b 	call	0x168c	; 0x168c <xStreamBufferSendFromISR>
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	81 11       	cpse	r24, r1
    3e86:	0e 94 3e 05 	call	0xa7c	; 0xa7c <vPortYield>
    3e8a:	10 92 f9 16 	sts	0x16F9, r1	; 0x8016f9 <rec_buf_inp.2878>
    3e8e:	be 01       	movw	r22, r28
    3e90:	6e 5f       	subi	r22, 0xFE	; 254
    3e92:	7f 4f       	sbci	r23, 0xFF	; 255
    3e94:	c8 01       	movw	r24, r16
    3e96:	15 d6       	rcall	.+3114   	; 0x4ac2 <serial_getByte>
    3e98:	88 23       	and	r24, r24
    3e9a:	61 f2       	breq	.-104    	; 0x3e34 <_serialCallBack+0x16>
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	08 95       	ret

00003eaa <_uploadMessage>:
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	8c 01       	movw	r16, r24
    3eb4:	eb 01       	movw	r28, r22
    3eb6:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_serialReplyBufferHandle>
    3eba:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_serialReplyBufferHandle+0x1>
    3ebe:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <xStreamBufferReset>
    3ec2:	b8 01       	movw	r22, r16
    3ec4:	82 ec       	ldi	r24, 0xC2	; 194
    3ec6:	96 e1       	ldi	r25, 0x16	; 22
    3ec8:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <strcpy>
    3ecc:	20 97       	sbiw	r28, 0x00	; 0
    3ece:	79 f0       	breq	.+30     	; 0x3eee <_uploadMessage+0x44>
    3ed0:	e2 ec       	ldi	r30, 0xC2	; 194
    3ed2:	f6 e1       	ldi	r31, 0x16	; 22
    3ed4:	01 90       	ld	r0, Z+
    3ed6:	00 20       	and	r0, r0
    3ed8:	e9 f7       	brne	.-6      	; 0x3ed4 <_uploadMessage+0x2a>
    3eda:	31 97       	sbiw	r30, 0x01	; 1
    3edc:	80 e2       	ldi	r24, 0x20	; 32
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	91 83       	std	Z+1, r25	; 0x01
    3ee2:	80 83       	st	Z, r24
    3ee4:	be 01       	movw	r22, r28
    3ee6:	82 ec       	ldi	r24, 0xC2	; 194
    3ee8:	96 e1       	ldi	r25, 0x16	; 22
    3eea:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <strcat>
    3eee:	e2 ec       	ldi	r30, 0xC2	; 194
    3ef0:	f6 e1       	ldi	r31, 0x16	; 22
    3ef2:	df 01       	movw	r26, r30
    3ef4:	0d 90       	ld	r0, X+
    3ef6:	00 20       	and	r0, r0
    3ef8:	e9 f7       	brne	.-6      	; 0x3ef4 <_uploadMessage+0x4a>
    3efa:	11 97       	sbiw	r26, 0x01	; 1
    3efc:	8d e0       	ldi	r24, 0x0D	; 13
    3efe:	9a e0       	ldi	r25, 0x0A	; 10
    3f00:	11 96       	adiw	r26, 0x01	; 1
    3f02:	9c 93       	st	X, r25
    3f04:	8e 93       	st	-X, r24
    3f06:	12 96       	adiw	r26, 0x02	; 2
    3f08:	1c 92       	st	X, r1
    3f0a:	01 90       	ld	r0, Z+
    3f0c:	00 20       	and	r0, r0
    3f0e:	e9 f7       	brne	.-6      	; 0x3f0a <_uploadMessage+0x60>
    3f10:	31 97       	sbiw	r30, 0x01	; 1
    3f12:	e2 5c       	subi	r30, 0xC2	; 194
    3f14:	f6 41       	sbci	r31, 0x16	; 22
    3f16:	ae 2f       	mov	r26, r30
    3f18:	82 ec       	ldi	r24, 0xC2	; 194
    3f1a:	96 e1       	ldi	r25, 0x16	; 22
    3f1c:	ac 01       	movw	r20, r24
    3f1e:	6a 2f       	mov	r22, r26
    3f20:	80 91 fe 16 	lds	r24, 0x16FE	; 0x8016fe <_rn2483_serial>
    3f24:	90 91 ff 16 	lds	r25, 0x16FF	; 0x8016ff <_rn2483_serial+0x1>
    3f28:	77 d5       	rcall	.+2798   	; 0x4a18 <serial_sendBytes>
    3f2a:	81 11       	cpse	r24, r1
    3f2c:	11 c0       	rjmp	.+34     	; 0x3f50 <_uploadMessage+0xa6>
    3f2e:	08 e2       	ldi	r16, 0x28	; 40
    3f30:	15 e0       	ldi	r17, 0x05	; 5
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	4d e2       	ldi	r20, 0x2D	; 45
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	65 e8       	ldi	r22, 0x85	; 133
    3f3c:	77 e1       	ldi	r23, 0x17	; 23
    3f3e:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_serialReplyBufferHandle>
    3f42:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_serialReplyBufferHandle+0x1>
    3f46:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xStreamBufferReceive>
    3f4a:	85 e8       	ldi	r24, 0x85	; 133
    3f4c:	97 e1       	ldi	r25, 0x17	; 23
    3f4e:	02 c0       	rjmp	.+4      	; 0x3f54 <_uploadMessage+0xaa>
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	1f 91       	pop	r17
    3f5a:	0f 91       	pop	r16
    3f5c:	08 95       	ret

00003f5e <_reply2ReturnCode>:
    3f5e:	2f 92       	push	r2
    3f60:	3f 92       	push	r3
    3f62:	4f 92       	push	r4
    3f64:	5f 92       	push	r5
    3f66:	6f 92       	push	r6
    3f68:	7f 92       	push	r7
    3f6a:	8f 92       	push	r8
    3f6c:	9f 92       	push	r9
    3f6e:	af 92       	push	r10
    3f70:	bf 92       	push	r11
    3f72:	cf 92       	push	r12
    3f74:	df 92       	push	r13
    3f76:	ef 92       	push	r14
    3f78:	ff 92       	push	r15
    3f7a:	0f 93       	push	r16
    3f7c:	1f 93       	push	r17
    3f7e:	cf 93       	push	r28
    3f80:	df 93       	push	r29
    3f82:	5c 01       	movw	r10, r24
    3f84:	fc 01       	movw	r30, r24
    3f86:	01 90       	ld	r0, Z+
    3f88:	00 20       	and	r0, r0
    3f8a:	e9 f7       	brne	.-6      	; 0x3f86 <_reply2ReturnCode+0x28>
    3f8c:	31 97       	sbiw	r30, 0x01	; 1
    3f8e:	6f 01       	movw	r12, r30
    3f90:	c8 1a       	sub	r12, r24
    3f92:	d9 0a       	sbc	r13, r25
    3f94:	5c 2c       	mov	r5, r12
    3f96:	0f 2e       	mov	r0, r31
    3f98:	fe ea       	ldi	r31, 0xAE	; 174
    3f9a:	8f 2e       	mov	r8, r31
    3f9c:	f7 e0       	ldi	r31, 0x07	; 7
    3f9e:	9f 2e       	mov	r9, r31
    3fa0:	f0 2d       	mov	r31, r0
    3fa2:	e1 2c       	mov	r14, r1
    3fa4:	f1 2c       	mov	r15, r1
    3fa6:	4c 2c       	mov	r4, r12
    3fa8:	37 01       	movw	r6, r14
    3faa:	f4 01       	movw	r30, r8
    3fac:	01 81       	ldd	r16, Z+1	; 0x01
    3fae:	12 81       	ldd	r17, Z+2	; 0x02
    3fb0:	e8 01       	movw	r28, r16
    3fb2:	09 90       	ld	r0, Y+
    3fb4:	00 20       	and	r0, r0
    3fb6:	e9 f7       	brne	.-6      	; 0x3fb2 <_reply2ReturnCode+0x54>
    3fb8:	21 97       	sbiw	r28, 0x01	; 1
    3fba:	c0 1b       	sub	r28, r16
    3fbc:	d1 0b       	sbc	r29, r17
    3fbe:	3c 2e       	mov	r3, r28
    3fc0:	f9 e0       	ldi	r31, 0x09	; 9
    3fc2:	cf 16       	cp	r12, r31
    3fc4:	d1 04       	cpc	r13, r1
    3fc6:	58 f0       	brcs	.+22     	; 0x3fde <_reply2ReturnCode+0x80>
    3fc8:	f4 01       	movw	r30, r8
    3fca:	20 80       	ld	r2, Z
    3fcc:	fe e0       	ldi	r31, 0x0E	; 14
    3fce:	2f 12       	cpse	r2, r31
    3fd0:	06 c0       	rjmp	.+12     	; 0x3fde <_reply2ReturnCode+0x80>
    3fd2:	b8 01       	movw	r22, r16
    3fd4:	c5 01       	movw	r24, r10
    3fd6:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <strcasestr>
    3fda:	89 2b       	or	r24, r25
    3fdc:	09 f5       	brne	.+66     	; 0x4020 <_reply2ReturnCode+0xc2>
    3fde:	44 2d       	mov	r20, r4
    3fe0:	35 14       	cp	r3, r5
    3fe2:	08 f4       	brcc	.+2      	; 0x3fe6 <_reply2ReturnCode+0x88>
    3fe4:	4c 2f       	mov	r20, r28
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	b8 01       	movw	r22, r16
    3fea:	c5 01       	movw	r24, r10
    3fec:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <strncasecmp>
    3ff0:	89 2b       	or	r24, r25
    3ff2:	49 f4       	brne	.+18     	; 0x4006 <_reply2ReturnCode+0xa8>
    3ff4:	f3 01       	movw	r30, r6
    3ff6:	ee 0f       	add	r30, r30
    3ff8:	ff 1f       	adc	r31, r31
    3ffa:	e6 0d       	add	r30, r6
    3ffc:	f7 1d       	adc	r31, r7
    3ffe:	e2 55       	subi	r30, 0x52	; 82
    4000:	f8 4f       	sbci	r31, 0xF8	; 248
    4002:	20 80       	ld	r2, Z
    4004:	0d c0       	rjmp	.+26     	; 0x4020 <_reply2ReturnCode+0xc2>
    4006:	8f ef       	ldi	r24, 0xFF	; 255
    4008:	e8 1a       	sub	r14, r24
    400a:	f8 0a       	sbc	r15, r24
    400c:	e3 e0       	ldi	r30, 0x03	; 3
    400e:	8e 0e       	add	r8, r30
    4010:	91 1c       	adc	r9, r1
    4012:	f1 e1       	ldi	r31, 0x11	; 17
    4014:	ef 16       	cp	r14, r31
    4016:	f1 04       	cpc	r15, r1
    4018:	39 f6       	brne	.-114    	; 0x3fa8 <_reply2ReturnCode+0x4a>
    401a:	68 94       	set
    401c:	22 24       	eor	r2, r2
    401e:	24 f8       	bld	r2, 4
    4020:	82 2d       	mov	r24, r2
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	df 90       	pop	r13
    4030:	cf 90       	pop	r12
    4032:	bf 90       	pop	r11
    4034:	af 90       	pop	r10
    4036:	9f 90       	pop	r9
    4038:	8f 90       	pop	r8
    403a:	7f 90       	pop	r7
    403c:	6f 90       	pop	r6
    403e:	5f 90       	pop	r5
    4040:	4f 90       	pop	r4
    4042:	3f 90       	pop	r3
    4044:	2f 90       	pop	r2
    4046:	08 95       	ret

00004048 <_uploadMessageRc>:
    4048:	30 df       	rcall	.-416    	; 0x3eaa <_uploadMessage>
    404a:	89 cf       	rjmp	.-238    	; 0x3f5e <_reply2ReturnCode>
    404c:	08 95       	ret

0000404e <lora_driver_flushBuffers>:
    404e:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_serialReplyBufferHandle>
    4052:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_serialReplyBufferHandle+0x1>
    4056:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <xStreamBufferReset>
    405a:	08 95       	ret

0000405c <lora_driver_initialise>:
    405c:	8f 92       	push	r8
    405e:	9f 92       	push	r9
    4060:	af 92       	push	r10
    4062:	cf 92       	push	r12
    4064:	ef 92       	push	r14
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	cf 93       	push	r28
    406c:	c8 2f       	mov	r28, r24
    406e:	8b 01       	movw	r16, r22
    4070:	41 e0       	ldi	r20, 0x01	; 1
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	88 ec       	ldi	r24, 0xC8	; 200
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 1f 0a 	call	0x143e	; 0x143e <xStreamBufferGenericCreate>
    407e:	90 93 fd 16 	sts	0x16FD, r25	; 0x8016fd <_serialReplyBufferHandle+0x1>
    4082:	80 93 fc 16 	sts	0x16FC, r24	; 0x8016fc <_serialReplyBufferHandle>
    4086:	10 93 fb 16 	sts	0x16FB, r17	; 0x8016fb <_downlinkMessageBuffer+0x1>
    408a:	00 93 fa 16 	sts	0x16FA, r16	; 0x8016fa <_downlinkMessageBuffer>
    408e:	0f 2e       	mov	r0, r31
    4090:	ff e0       	ldi	r31, 0x0F	; 15
    4092:	8f 2e       	mov	r8, r31
    4094:	ff e1       	ldi	r31, 0x1F	; 31
    4096:	9f 2e       	mov	r9, r31
    4098:	f0 2d       	mov	r31, r0
    409a:	68 94       	set
    409c:	aa 24       	eor	r10, r10
    409e:	a6 f8       	bld	r10, 6
    40a0:	68 94       	set
    40a2:	cc 24       	eor	r12, r12
    40a4:	c6 f8       	bld	r12, 6
    40a6:	e1 2c       	mov	r14, r1
    40a8:	00 e0       	ldi	r16, 0x00	; 0
    40aa:	23 e0       	ldi	r18, 0x03	; 3
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	51 ee       	ldi	r21, 0xE1	; 225
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	70 e0       	ldi	r23, 0x00	; 0
    40b4:	8c 2f       	mov	r24, r28
    40b6:	e3 d3       	rcall	.+1990   	; 0x487e <serial_create>
    40b8:	90 93 ff 16 	sts	0x16FF, r25	; 0x8016ff <_rn2483_serial+0x1>
    40bc:	80 93 fe 16 	sts	0x16FE, r24	; 0x8016fe <_rn2483_serial>
    40c0:	e7 e0       	ldi	r30, 0x07	; 7
    40c2:	f1 e0       	ldi	r31, 0x01	; 1
    40c4:	80 81       	ld	r24, Z
    40c6:	80 61       	ori	r24, 0x10	; 16
    40c8:	80 83       	st	Z, r24
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ef 90       	pop	r14
    40d2:	cf 90       	pop	r12
    40d4:	af 90       	pop	r10
    40d6:	9f 90       	pop	r9
    40d8:	8f 90       	pop	r8
    40da:	08 95       	ret

000040dc <lora_driver_resetRn2483>:
    40dc:	88 23       	and	r24, r24
    40de:	31 f0       	breq	.+12     	; 0x40ec <lora_driver_resetRn2483+0x10>
    40e0:	e8 e0       	ldi	r30, 0x08	; 8
    40e2:	f1 e0       	ldi	r31, 0x01	; 1
    40e4:	80 81       	ld	r24, Z
    40e6:	8f 7e       	andi	r24, 0xEF	; 239
    40e8:	80 83       	st	Z, r24
    40ea:	08 95       	ret
    40ec:	e8 e0       	ldi	r30, 0x08	; 8
    40ee:	f1 e0       	ldi	r31, 0x01	; 1
    40f0:	80 81       	ld	r24, Z
    40f2:	80 61       	ori	r24, 0x10	; 16
    40f4:	80 83       	st	Z, r24
    40f6:	08 95       	ret

000040f8 <lora_driver_rn2483FactoryReset>:
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	84 e3       	ldi	r24, 0x34	; 52
    40fe:	95 e0       	ldi	r25, 0x05	; 5
    4100:	d4 de       	rcall	.-600    	; 0x3eaa <_uploadMessage>
    4102:	e5 e8       	ldi	r30, 0x85	; 133
    4104:	f7 e1       	ldi	r31, 0x17	; 23
    4106:	01 90       	ld	r0, Z+
    4108:	00 20       	and	r0, r0
    410a:	e9 f7       	brne	.-6      	; 0x4106 <lora_driver_rn2483FactoryReset+0xe>
    410c:	31 97       	sbiw	r30, 0x01	; 1
    410e:	e5 58       	subi	r30, 0x85	; 133
    4110:	f7 41       	sbci	r31, 0x17	; 23
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	75 97       	sbiw	r30, 0x15	; 21
    4116:	08 f0       	brcs	.+2      	; 0x411a <lora_driver_rn2483FactoryReset+0x22>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	08 95       	ret

0000411c <lora_driver_getRn2483Hweui>:
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	ec 01       	movw	r28, r24
    4122:	60 e0       	ldi	r22, 0x00	; 0
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	85 e4       	ldi	r24, 0x45	; 69
    4128:	95 e0       	ldi	r25, 0x05	; 5
    412a:	bf de       	rcall	.-642    	; 0x3eaa <_uploadMessage>
    412c:	e5 e8       	ldi	r30, 0x85	; 133
    412e:	f7 e1       	ldi	r31, 0x17	; 23
    4130:	01 90       	ld	r0, Z+
    4132:	00 20       	and	r0, r0
    4134:	e9 f7       	brne	.-6      	; 0x4130 <lora_driver_getRn2483Hweui+0x14>
    4136:	e6 59       	subi	r30, 0x96	; 150
    4138:	f7 41       	sbci	r31, 0x17	; 23
    413a:	39 f4       	brne	.+14     	; 0x414a <lora_driver_getRn2483Hweui+0x2e>
    413c:	65 e8       	ldi	r22, 0x85	; 133
    413e:	77 e1       	ldi	r23, 0x17	; 23
    4140:	ce 01       	movw	r24, r28
    4142:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <strcpy>
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	02 c0       	rjmp	.+4      	; 0x414e <lora_driver_getRn2483Hweui+0x32>
    414a:	18 82       	st	Y, r1
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	df 91       	pop	r29
    4150:	cf 91       	pop	r28
    4152:	08 95       	ret

00004154 <lora_driver_setDeviceIdentifier>:
    4154:	fc 01       	movw	r30, r24
    4156:	01 90       	ld	r0, Z+
    4158:	00 20       	and	r0, r0
    415a:	e9 f7       	brne	.-6      	; 0x4156 <lora_driver_setDeviceIdentifier+0x2>
    415c:	9f 01       	movw	r18, r30
    415e:	21 51       	subi	r18, 0x11	; 17
    4160:	31 09       	sbc	r19, r1
    4162:	28 17       	cp	r18, r24
    4164:	39 07       	cpc	r19, r25
    4166:	29 f4       	brne	.+10     	; 0x4172 <lora_driver_setDeviceIdentifier+0x1e>
    4168:	bc 01       	movw	r22, r24
    416a:	83 e7       	ldi	r24, 0x73	; 115
    416c:	95 e0       	ldi	r25, 0x05	; 5
    416e:	6c cf       	rjmp	.-296    	; 0x4048 <_uploadMessageRc>
    4170:	08 95       	ret
    4172:	89 e0       	ldi	r24, 0x09	; 9
    4174:	08 95       	ret

00004176 <lora_driver_setApplicationIdentifier>:
    4176:	fc 01       	movw	r30, r24
    4178:	01 90       	ld	r0, Z+
    417a:	00 20       	and	r0, r0
    417c:	e9 f7       	brne	.-6      	; 0x4178 <lora_driver_setApplicationIdentifier+0x2>
    417e:	9f 01       	movw	r18, r30
    4180:	21 51       	subi	r18, 0x11	; 17
    4182:	31 09       	sbc	r19, r1
    4184:	28 17       	cp	r18, r24
    4186:	39 07       	cpc	r19, r25
    4188:	29 f4       	brne	.+10     	; 0x4194 <lora_driver_setApplicationIdentifier+0x1e>
    418a:	bc 01       	movw	r22, r24
    418c:	82 e8       	ldi	r24, 0x82	; 130
    418e:	95 e0       	ldi	r25, 0x05	; 5
    4190:	5b cf       	rjmp	.-330    	; 0x4048 <_uploadMessageRc>
    4192:	08 95       	ret
    4194:	89 e0       	ldi	r24, 0x09	; 9
    4196:	08 95       	ret

00004198 <lora_driver_setApplicationKey>:
    4198:	fc 01       	movw	r30, r24
    419a:	01 90       	ld	r0, Z+
    419c:	00 20       	and	r0, r0
    419e:	e9 f7       	brne	.-6      	; 0x419a <lora_driver_setApplicationKey+0x2>
    41a0:	9f 01       	movw	r18, r30
    41a2:	21 52       	subi	r18, 0x21	; 33
    41a4:	31 09       	sbc	r19, r1
    41a6:	28 17       	cp	r18, r24
    41a8:	39 07       	cpc	r19, r25
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <lora_driver_setApplicationKey+0x1e>
    41ac:	bc 01       	movw	r22, r24
    41ae:	81 e9       	ldi	r24, 0x91	; 145
    41b0:	95 e0       	ldi	r25, 0x05	; 5
    41b2:	4a cf       	rjmp	.-364    	; 0x4048 <_uploadMessageRc>
    41b4:	08 95       	ret
    41b6:	89 e0       	ldi	r24, 0x09	; 9
    41b8:	08 95       	ret

000041ba <lora_driver_saveMac>:
    41ba:	60 e0       	ldi	r22, 0x00	; 0
    41bc:	70 e0       	ldi	r23, 0x00	; 0
    41be:	80 ed       	ldi	r24, 0xD0	; 208
    41c0:	95 e0       	ldi	r25, 0x05	; 5
    41c2:	42 cf       	rjmp	.-380    	; 0x4048 <_uploadMessageRc>
    41c4:	08 95       	ret

000041c6 <lora_driver_join>:
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	e8 2f       	mov	r30, r24
    41cc:	f0 e0       	ldi	r31, 0x00	; 0
    41ce:	ee 0f       	add	r30, r30
    41d0:	ff 1f       	adc	r31, r31
    41d2:	e6 55       	subi	r30, 0x56	; 86
    41d4:	f8 4f       	sbci	r31, 0xF8	; 248
    41d6:	60 81       	ld	r22, Z
    41d8:	71 81       	ldd	r23, Z+1	; 0x01
    41da:	89 ed       	ldi	r24, 0xD9	; 217
    41dc:	95 e0       	ldi	r25, 0x05	; 5
    41de:	34 df       	rcall	.-408    	; 0x4048 <_uploadMessageRc>
    41e0:	81 11       	cpse	r24, r1
    41e2:	14 c0       	rjmp	.+40     	; 0x420c <lora_driver_join+0x46>
    41e4:	08 e2       	ldi	r16, 0x28	; 40
    41e6:	15 e0       	ldi	r17, 0x05	; 5
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	4d e2       	ldi	r20, 0x2D	; 45
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	65 e8       	ldi	r22, 0x85	; 133
    41f2:	77 e1       	ldi	r23, 0x17	; 23
    41f4:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_serialReplyBufferHandle>
    41f8:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_serialReplyBufferHandle+0x1>
    41fc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xStreamBufferReceive>
    4200:	88 23       	and	r24, r24
    4202:	21 f0       	breq	.+8      	; 0x420c <lora_driver_join+0x46>
    4204:	85 e8       	ldi	r24, 0x85	; 133
    4206:	97 e1       	ldi	r25, 0x17	; 23
    4208:	aa de       	rcall	.-684    	; 0x3f5e <_reply2ReturnCode>
    420a:	03 c0       	rjmp	.+6      	; 0x4212 <lora_driver_join+0x4c>
    420c:	85 e8       	ldi	r24, 0x85	; 133
    420e:	97 e1       	ldi	r25, 0x17	; 23
    4210:	a6 de       	rcall	.-692    	; 0x3f5e <_reply2ReturnCode>
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	08 95       	ret

00004218 <lora_driver_sendUploadMessage>:
    4218:	0f 93       	push	r16
    421a:	1f 93       	push	r17
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	1f 92       	push	r1
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	db 01       	movw	r26, r22
    4228:	11 96       	adiw	r26, 0x01	; 1
    422a:	9c 91       	ld	r25, X
    422c:	11 97       	sbiw	r26, 0x01	; 1
    422e:	95 31       	cpi	r25, 0x15	; 21
    4230:	08 f0       	brcs	.+2      	; 0x4234 <lora_driver_sendUploadMessage+0x1c>
    4232:	b4 c0       	rjmp	.+360    	; 0x439c <lora_driver_sendUploadMessage+0x184>
    4234:	99 23       	and	r25, r25
    4236:	81 f1       	breq	.+96     	; 0x4298 <lora_driver_sendUploadMessage+0x80>
    4238:	60 e0       	ldi	r22, 0x00	; 0
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	27 2f       	mov	r18, r23
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	46 2f       	mov	r20, r22
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	fd 01       	movw	r30, r26
    4246:	e4 0f       	add	r30, r20
    4248:	f5 1f       	adc	r31, r21
    424a:	92 81       	ldd	r25, Z+2	; 0x02
    424c:	92 95       	swap	r25
    424e:	9f 70       	andi	r25, 0x0F	; 15
    4250:	9a 30       	cpi	r25, 0x0A	; 10
    4252:	10 f0       	brcs	.+4      	; 0x4258 <lora_driver_sendUploadMessage+0x40>
    4254:	99 5c       	subi	r25, 0xC9	; 201
    4256:	01 c0       	rjmp	.+2      	; 0x425a <lora_driver_sendUploadMessage+0x42>
    4258:	90 5d       	subi	r25, 0xD0	; 208
    425a:	f9 01       	movw	r30, r18
    425c:	ea 5e       	subi	r30, 0xEA	; 234
    425e:	f8 4e       	sbci	r31, 0xE8	; 232
    4260:	90 83       	st	Z, r25
    4262:	2f 5f       	subi	r18, 0xFF	; 255
    4264:	3f 4f       	sbci	r19, 0xFF	; 255
    4266:	fd 01       	movw	r30, r26
    4268:	e4 0f       	add	r30, r20
    426a:	f5 1f       	adc	r31, r21
    426c:	92 81       	ldd	r25, Z+2	; 0x02
    426e:	9f 70       	andi	r25, 0x0F	; 15
    4270:	49 2f       	mov	r20, r25
    4272:	50 e0       	ldi	r21, 0x00	; 0
    4274:	4a 30       	cpi	r20, 0x0A	; 10
    4276:	51 05       	cpc	r21, r1
    4278:	14 f0       	brlt	.+4      	; 0x427e <lora_driver_sendUploadMessage+0x66>
    427a:	99 5c       	subi	r25, 0xC9	; 201
    427c:	01 c0       	rjmp	.+2      	; 0x4280 <lora_driver_sendUploadMessage+0x68>
    427e:	90 5d       	subi	r25, 0xD0	; 208
    4280:	f9 01       	movw	r30, r18
    4282:	ea 5e       	subi	r30, 0xEA	; 234
    4284:	f8 4e       	sbci	r31, 0xE8	; 232
    4286:	90 83       	st	Z, r25
    4288:	7e 5f       	subi	r23, 0xFE	; 254
    428a:	6f 5f       	subi	r22, 0xFF	; 255
    428c:	11 96       	adiw	r26, 0x01	; 1
    428e:	9c 91       	ld	r25, X
    4290:	11 97       	sbiw	r26, 0x01	; 1
    4292:	69 17       	cp	r22, r25
    4294:	98 f2       	brcs	.-90     	; 0x423c <lora_driver_sendUploadMessage+0x24>
    4296:	01 c0       	rjmp	.+2      	; 0x429a <lora_driver_sendUploadMessage+0x82>
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	e7 2f       	mov	r30, r23
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	ea 5e       	subi	r30, 0xEA	; 234
    42a0:	f8 4e       	sbci	r31, 0xE8	; 232
    42a2:	10 82       	st	Z, r1
    42a4:	4c 91       	ld	r20, X
    42a6:	81 11       	cpse	r24, r1
    42a8:	03 c0       	rjmp	.+6      	; 0x42b0 <lora_driver_sendUploadMessage+0x98>
    42aa:	82 ee       	ldi	r24, 0xE2	; 226
    42ac:	95 e0       	ldi	r25, 0x05	; 5
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <lora_driver_sendUploadMessage+0x9c>
    42b0:	84 ee       	ldi	r24, 0xE4	; 228
    42b2:	95 e0       	ldi	r25, 0x05	; 5
    42b4:	26 e1       	ldi	r18, 0x16	; 22
    42b6:	37 e1       	ldi	r19, 0x17	; 23
    42b8:	3f 93       	push	r19
    42ba:	2f 93       	push	r18
    42bc:	1f 92       	push	r1
    42be:	4f 93       	push	r20
    42c0:	9f 93       	push	r25
    42c2:	8f 93       	push	r24
    42c4:	88 ee       	ldi	r24, 0xE8	; 232
    42c6:	95 e0       	ldi	r25, 0x05	; 5
    42c8:	9f 93       	push	r25
    42ca:	8f 93       	push	r24
    42cc:	88 e5       	ldi	r24, 0x58	; 88
    42ce:	97 e1       	ldi	r25, 0x17	; 23
    42d0:	9f 93       	push	r25
    42d2:	8f 93       	push	r24
    42d4:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    42d8:	60 e0       	ldi	r22, 0x00	; 0
    42da:	70 e0       	ldi	r23, 0x00	; 0
    42dc:	88 e5       	ldi	r24, 0x58	; 88
    42de:	97 e1       	ldi	r25, 0x17	; 23
    42e0:	b3 de       	rcall	.-666    	; 0x4048 <_uploadMessageRc>
    42e2:	0f b6       	in	r0, 0x3f	; 63
    42e4:	f8 94       	cli
    42e6:	de bf       	out	0x3e, r29	; 62
    42e8:	0f be       	out	0x3f, r0	; 63
    42ea:	cd bf       	out	0x3d, r28	; 61
    42ec:	81 11       	cpse	r24, r1
    42ee:	59 c0       	rjmp	.+178    	; 0x43a2 <lora_driver_sendUploadMessage+0x18a>
    42f0:	08 e2       	ldi	r16, 0x28	; 40
    42f2:	15 e0       	ldi	r17, 0x05	; 5
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	4d e2       	ldi	r20, 0x2D	; 45
    42fa:	50 e0       	ldi	r21, 0x00	; 0
    42fc:	65 e8       	ldi	r22, 0x85	; 133
    42fe:	77 e1       	ldi	r23, 0x17	; 23
    4300:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_serialReplyBufferHandle>
    4304:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_serialReplyBufferHandle+0x1>
    4308:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xStreamBufferReceive>
    430c:	88 23       	and	r24, r24
    430e:	09 f4       	brne	.+2      	; 0x4312 <lora_driver_sendUploadMessage+0xfa>
    4310:	47 c0       	rjmp	.+142    	; 0x43a0 <lora_driver_sendUploadMessage+0x188>
    4312:	85 e8       	ldi	r24, 0x85	; 133
    4314:	97 e1       	ldi	r25, 0x17	; 23
    4316:	23 de       	rcall	.-954    	; 0x3f5e <_reply2ReturnCode>
    4318:	8e 30       	cpi	r24, 0x0E	; 14
    431a:	09 f0       	breq	.+2      	; 0x431e <lora_driver_sendUploadMessage+0x106>
    431c:	42 c0       	rjmp	.+132    	; 0x43a2 <lora_driver_sendUploadMessage+0x18a>
    431e:	87 e0       	ldi	r24, 0x07	; 7
    4320:	89 83       	std	Y+1, r24	; 0x01
    4322:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_downlinkMessageBuffer>
    4326:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_downlinkMessageBuffer+0x1>
    432a:	89 2b       	or	r24, r25
    432c:	a9 f1       	breq	.+106    	; 0x4398 <lora_driver_sendUploadMessage+0x180>
    432e:	be 01       	movw	r22, r28
    4330:	6f 5f       	subi	r22, 0xFF	; 255
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	85 e8       	ldi	r24, 0x85	; 133
    4336:	97 e1       	ldi	r25, 0x17	; 23
    4338:	68 d1       	rcall	.+720    	; 0x460a <decode_port_no>
    433a:	80 93 00 17 	sts	0x1700, r24	; 0x801700 <_downlinkPayload>
    433e:	e9 81       	ldd	r30, Y+1	; 0x01
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	eb 57       	subi	r30, 0x7B	; 123
    4344:	f8 4e       	sbci	r31, 0xE8	; 232
    4346:	df 01       	movw	r26, r30
    4348:	0d 90       	ld	r0, X+
    434a:	00 20       	and	r0, r0
    434c:	e9 f7       	brne	.-6      	; 0x4348 <lora_driver_sendUploadMessage+0x130>
    434e:	11 97       	sbiw	r26, 0x01	; 1
    4350:	ae 1b       	sub	r26, r30
    4352:	bf 0b       	sbc	r27, r31
    4354:	aa 23       	and	r26, r26
    4356:	91 f0       	breq	.+36     	; 0x437c <lora_driver_sendUploadMessage+0x164>
    4358:	bb 27       	eor	r27, r27
    435a:	cd 01       	movw	r24, r26
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	9c 01       	movw	r18, r24
    4360:	12 f4       	brpl	.+4      	; 0x4366 <lora_driver_sendUploadMessage+0x14e>
    4362:	2f 5f       	subi	r18, 0xFF	; 255
    4364:	3f 4f       	sbci	r19, 0xFF	; 255
    4366:	35 95       	asr	r19
    4368:	27 95       	ror	r18
    436a:	20 93 01 17 	sts	0x1701, r18	; 0x801701 <_downlinkPayload+0x1>
    436e:	af 01       	movw	r20, r30
    4370:	4f 5f       	subi	r20, 0xFF	; 255
    4372:	5f 4f       	sbci	r21, 0xFF	; 255
    4374:	64 e1       	ldi	r22, 0x14	; 20
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	97 e1       	ldi	r25, 0x17	; 23
    437a:	73 d1       	rcall	.+742    	; 0x4662 <decode_hexadecimal_string_bytes>
    437c:	01 e0       	ldi	r16, 0x01	; 1
    437e:	10 e0       	ldi	r17, 0x00	; 0
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	46 e1       	ldi	r20, 0x16	; 22
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	77 e1       	ldi	r23, 0x17	; 23
    438c:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_downlinkMessageBuffer>
    4390:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_downlinkMessageBuffer+0x1>
    4394:	0e 94 81 0a 	call	0x1502	; 0x1502 <xStreamBufferSend>
    4398:	8e e0       	ldi	r24, 0x0E	; 14
    439a:	03 c0       	rjmp	.+6      	; 0x43a2 <lora_driver_sendUploadMessage+0x18a>
    439c:	84 e1       	ldi	r24, 0x14	; 20
    439e:	01 c0       	rjmp	.+2      	; 0x43a2 <lora_driver_sendUploadMessage+0x18a>
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	0f 90       	pop	r0
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	08 95       	ret

000043ae <lora_driver_setAdaptiveDataRate>:
    43ae:	81 30       	cpi	r24, 0x01	; 1
    43b0:	19 f0       	breq	.+6      	; 0x43b8 <lora_driver_setAdaptiveDataRate+0xa>
    43b2:	68 ef       	ldi	r22, 0xF8	; 248
    43b4:	75 e0       	ldi	r23, 0x05	; 5
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <lora_driver_setAdaptiveDataRate+0xe>
    43b8:	61 ed       	ldi	r22, 0xD1	; 209
    43ba:	76 e0       	ldi	r23, 0x06	; 6
    43bc:	8c ef       	ldi	r24, 0xFC	; 252
    43be:	95 e0       	ldi	r25, 0x05	; 5
    43c0:	43 ce       	rjmp	.-890    	; 0x4048 <_uploadMessageRc>
    43c2:	08 95       	ret

000043c4 <lora_driver_setReceiveDelay>:
    43c4:	9f 93       	push	r25
    43c6:	8f 93       	push	r24
    43c8:	8d e2       	ldi	r24, 0x2D	; 45
    43ca:	96 e0       	ldi	r25, 0x06	; 6
    43cc:	9f 93       	push	r25
    43ce:	8f 93       	push	r24
    43d0:	88 e5       	ldi	r24, 0x58	; 88
    43d2:	97 e1       	ldi	r25, 0x17	; 23
    43d4:	9f 93       	push	r25
    43d6:	8f 93       	push	r24
    43d8:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    43dc:	60 e0       	ldi	r22, 0x00	; 0
    43de:	70 e0       	ldi	r23, 0x00	; 0
    43e0:	88 e5       	ldi	r24, 0x58	; 88
    43e2:	97 e1       	ldi	r25, 0x17	; 23
    43e4:	31 de       	rcall	.-926    	; 0x4048 <_uploadMessageRc>
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	08 95       	ret

000043f4 <lora_driver_configureToEu868>:
    43f4:	2f 92       	push	r2
    43f6:	3f 92       	push	r3
    43f8:	4f 92       	push	r4
    43fa:	5f 92       	push	r5
    43fc:	6f 92       	push	r6
    43fe:	7f 92       	push	r7
    4400:	8f 92       	push	r8
    4402:	9f 92       	push	r9
    4404:	af 92       	push	r10
    4406:	bf 92       	push	r11
    4408:	cf 92       	push	r12
    440a:	df 92       	push	r13
    440c:	ef 92       	push	r14
    440e:	ff 92       	push	r15
    4410:	0f 93       	push	r16
    4412:	1f 93       	push	r17
    4414:	cf 93       	push	r28
    4416:	df 93       	push	r29
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	a0 97       	sbiw	r28, 0x20	; 32
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	cd bf       	out	0x3d, r28	; 61
    4428:	6a e5       	ldi	r22, 0x5A	; 90
    442a:	76 e0       	ldi	r23, 0x06	; 6
    442c:	86 e6       	ldi	r24, 0x66	; 102
    442e:	96 e0       	ldi	r25, 0x06	; 6
    4430:	3c dd       	rcall	.-1416   	; 0x3eaa <_uploadMessage>
    4432:	95 dd       	rcall	.-1238   	; 0x3f5e <_reply2ReturnCode>
    4434:	81 11       	cpse	r24, r1
    4436:	a3 c0       	rjmp	.+326    	; 0x457e <lora_driver_configureToEu868+0x18a>
    4438:	80 e2       	ldi	r24, 0x20	; 32
    443a:	e6 e2       	ldi	r30, 0x26	; 38
    443c:	f2 e0       	ldi	r31, 0x02	; 2
    443e:	de 01       	movw	r26, r28
    4440:	11 96       	adiw	r26, 0x01	; 1
    4442:	01 90       	ld	r0, Z+
    4444:	0d 92       	st	X+, r0
    4446:	8a 95       	dec	r24
    4448:	e1 f7       	brne	.-8      	; 0x4442 <lora_driver_configureToEu868+0x4e>
    444a:	9e 01       	movw	r18, r28
    444c:	2f 5f       	subi	r18, 0xFF	; 255
    444e:	3f 4f       	sbci	r19, 0xFF	; 255
    4450:	69 01       	movw	r12, r18
    4452:	e1 2c       	mov	r14, r1
    4454:	f1 2c       	mov	r15, r1
    4456:	0f 2e       	mov	r0, r31
    4458:	f2 e7       	ldi	r31, 0x72	; 114
    445a:	af 2e       	mov	r10, r31
    445c:	f6 e0       	ldi	r31, 0x06	; 6
    445e:	bf 2e       	mov	r11, r31
    4460:	f0 2d       	mov	r31, r0
    4462:	08 e5       	ldi	r16, 0x58	; 88
    4464:	17 e1       	ldi	r17, 0x17	; 23
    4466:	0f 2e       	mov	r0, r31
    4468:	fb e8       	ldi	r31, 0x8B	; 139
    446a:	4f 2e       	mov	r4, r31
    446c:	f6 e0       	ldi	r31, 0x06	; 6
    446e:	5f 2e       	mov	r5, r31
    4470:	f0 2d       	mov	r31, r0
    4472:	0f 2e       	mov	r0, r31
    4474:	f2 ea       	ldi	r31, 0xA2	; 162
    4476:	8f 2e       	mov	r8, r31
    4478:	f6 e0       	ldi	r31, 0x06	; 6
    447a:	9f 2e       	mov	r9, r31
    447c:	f0 2d       	mov	r31, r0
    447e:	0f 2e       	mov	r0, r31
    4480:	fc eb       	ldi	r31, 0xBC	; 188
    4482:	6f 2e       	mov	r6, r31
    4484:	f6 e0       	ldi	r31, 0x06	; 6
    4486:	7f 2e       	mov	r7, r31
    4488:	f0 2d       	mov	r31, r0
    448a:	3e 2c       	mov	r3, r14
    448c:	2f 2c       	mov	r2, r15
    448e:	ff 92       	push	r15
    4490:	ef 92       	push	r14
    4492:	bf 92       	push	r11
    4494:	af 92       	push	r10
    4496:	1f 93       	push	r17
    4498:	0f 93       	push	r16
    449a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	c8 01       	movw	r24, r16
    44a4:	02 dd       	rcall	.-1532   	; 0x3eaa <_uploadMessage>
    44a6:	5b dd       	rcall	.-1354   	; 0x3f5e <_reply2ReturnCode>
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	81 11       	cpse	r24, r1
    44b6:	63 c0       	rjmp	.+198    	; 0x457e <lora_driver_configureToEu868+0x18a>
    44b8:	32 e0       	ldi	r19, 0x02	; 2
    44ba:	3e 15       	cp	r19, r14
    44bc:	e8 f4       	brcc	.+58     	; 0x44f8 <lora_driver_configureToEu868+0x104>
    44be:	f6 01       	movw	r30, r12
    44c0:	83 81       	ldd	r24, Z+3	; 0x03
    44c2:	8f 93       	push	r24
    44c4:	82 81       	ldd	r24, Z+2	; 0x02
    44c6:	8f 93       	push	r24
    44c8:	81 81       	ldd	r24, Z+1	; 0x01
    44ca:	8f 93       	push	r24
    44cc:	80 81       	ld	r24, Z
    44ce:	8f 93       	push	r24
    44d0:	ff 92       	push	r15
    44d2:	ef 92       	push	r14
    44d4:	5f 92       	push	r5
    44d6:	4f 92       	push	r4
    44d8:	1f 93       	push	r17
    44da:	0f 93       	push	r16
    44dc:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    44e0:	60 e0       	ldi	r22, 0x00	; 0
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	c8 01       	movw	r24, r16
    44e6:	e1 dc       	rcall	.-1598   	; 0x3eaa <_uploadMessage>
    44e8:	3a dd       	rcall	.-1420   	; 0x3f5e <_reply2ReturnCode>
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	f8 94       	cli
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	cd bf       	out	0x3d, r28	; 61
    44f4:	81 11       	cpse	r24, r1
    44f6:	43 c0       	rjmp	.+134    	; 0x457e <lora_driver_configureToEu868+0x18a>
    44f8:	2f 92       	push	r2
    44fa:	3f 92       	push	r3
    44fc:	9f 92       	push	r9
    44fe:	8f 92       	push	r8
    4500:	1f 93       	push	r17
    4502:	0f 93       	push	r16
    4504:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    4508:	60 e0       	ldi	r22, 0x00	; 0
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	c8 01       	movw	r24, r16
    450e:	cd dc       	rcall	.-1638   	; 0x3eaa <_uploadMessage>
    4510:	26 dd       	rcall	.-1460   	; 0x3f5e <_reply2ReturnCode>
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	81 11       	cpse	r24, r1
    4520:	2e c0       	rjmp	.+92     	; 0x457e <lora_driver_configureToEu868+0x18a>
    4522:	2f 92       	push	r2
    4524:	3f 92       	push	r3
    4526:	7f 92       	push	r7
    4528:	6f 92       	push	r6
    452a:	1f 93       	push	r17
    452c:	0f 93       	push	r16
    452e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    4532:	60 e0       	ldi	r22, 0x00	; 0
    4534:	70 e0       	ldi	r23, 0x00	; 0
    4536:	c8 01       	movw	r24, r16
    4538:	b8 dc       	rcall	.-1680   	; 0x3eaa <_uploadMessage>
    453a:	11 dd       	rcall	.-1502   	; 0x3f5e <_reply2ReturnCode>
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	81 11       	cpse	r24, r1
    454a:	19 c0       	rjmp	.+50     	; 0x457e <lora_driver_configureToEu868+0x18a>
    454c:	3f ef       	ldi	r19, 0xFF	; 255
    454e:	e3 1a       	sub	r14, r19
    4550:	f3 0a       	sbc	r15, r19
    4552:	84 e0       	ldi	r24, 0x04	; 4
    4554:	c8 0e       	add	r12, r24
    4556:	d1 1c       	adc	r13, r1
    4558:	98 e0       	ldi	r25, 0x08	; 8
    455a:	e9 16       	cp	r14, r25
    455c:	f1 04       	cpc	r15, r1
    455e:	09 f0       	breq	.+2      	; 0x4562 <lora_driver_configureToEu868+0x16e>
    4560:	94 cf       	rjmp	.-216    	; 0x448a <lora_driver_configureToEu868+0x96>
    4562:	60 e0       	ldi	r22, 0x00	; 0
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	84 ed       	ldi	r24, 0xD4	; 212
    4568:	96 e0       	ldi	r25, 0x06	; 6
    456a:	9f dc       	rcall	.-1730   	; 0x3eaa <_uploadMessage>
    456c:	f8 dc       	rcall	.-1552   	; 0x3f5e <_reply2ReturnCode>
    456e:	81 11       	cpse	r24, r1
    4570:	06 c0       	rjmp	.+12     	; 0x457e <lora_driver_configureToEu868+0x18a>
    4572:	60 e0       	ldi	r22, 0x00	; 0
    4574:	70 e0       	ldi	r23, 0x00	; 0
    4576:	85 ee       	ldi	r24, 0xE5	; 229
    4578:	96 e0       	ldi	r25, 0x06	; 6
    457a:	97 dc       	rcall	.-1746   	; 0x3eaa <_uploadMessage>
    457c:	f0 dc       	rcall	.-1568   	; 0x3f5e <_reply2ReturnCode>
    457e:	a0 96       	adiw	r28, 0x20	; 32
    4580:	0f b6       	in	r0, 0x3f	; 63
    4582:	f8 94       	cli
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	0f be       	out	0x3f, r0	; 63
    4588:	cd bf       	out	0x3d, r28	; 61
    458a:	df 91       	pop	r29
    458c:	cf 91       	pop	r28
    458e:	1f 91       	pop	r17
    4590:	0f 91       	pop	r16
    4592:	ff 90       	pop	r15
    4594:	ef 90       	pop	r14
    4596:	df 90       	pop	r13
    4598:	cf 90       	pop	r12
    459a:	bf 90       	pop	r11
    459c:	af 90       	pop	r10
    459e:	9f 90       	pop	r9
    45a0:	8f 90       	pop	r8
    45a2:	7f 90       	pop	r7
    45a4:	6f 90       	pop	r6
    45a6:	5f 90       	pop	r5
    45a8:	4f 90       	pop	r4
    45aa:	3f 90       	pop	r3
    45ac:	2f 90       	pop	r2
    45ae:	08 95       	ret

000045b0 <lora_driver_setOtaaIdentity>:
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	ec 01       	movw	r28, r24
    45be:	8b 01       	movw	r16, r22
    45c0:	7a 01       	movw	r14, r20
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	f4 de       	rcall	.-536    	; 0x43ae <lora_driver_setAdaptiveDataRate>
    45c6:	81 11       	cpse	r24, r1
    45c8:	0d c0       	rjmp	.+26     	; 0x45e4 <lora_driver_setOtaaIdentity+0x34>
    45ca:	ce 01       	movw	r24, r28
    45cc:	d4 dd       	rcall	.-1112   	; 0x4176 <lora_driver_setApplicationIdentifier>
    45ce:	81 11       	cpse	r24, r1
    45d0:	09 c0       	rjmp	.+18     	; 0x45e4 <lora_driver_setOtaaIdentity+0x34>
    45d2:	c8 01       	movw	r24, r16
    45d4:	e1 dd       	rcall	.-1086   	; 0x4198 <lora_driver_setApplicationKey>
    45d6:	81 11       	cpse	r24, r1
    45d8:	05 c0       	rjmp	.+10     	; 0x45e4 <lora_driver_setOtaaIdentity+0x34>
    45da:	c7 01       	movw	r24, r14
    45dc:	bb dd       	rcall	.-1162   	; 0x4154 <lora_driver_setDeviceIdentifier>
    45de:	81 11       	cpse	r24, r1
    45e0:	01 c0       	rjmp	.+2      	; 0x45e4 <lora_driver_setOtaaIdentity+0x34>
    45e2:	eb dd       	rcall	.-1066   	; 0x41ba <lora_driver_saveMac>
    45e4:	df 91       	pop	r29
    45e6:	cf 91       	pop	r28
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	ff 90       	pop	r15
    45ee:	ef 90       	pop	r14
    45f0:	08 95       	ret

000045f2 <lora_driver_mapReturnCodeToText>:
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	fc 01       	movw	r30, r24
    45f6:	ee 0f       	add	r30, r30
    45f8:	ff 1f       	adc	r31, r31
    45fa:	8e 0f       	add	r24, r30
    45fc:	9f 1f       	adc	r25, r31
    45fe:	fc 01       	movw	r30, r24
    4600:	e2 55       	subi	r30, 0x52	; 82
    4602:	f8 4f       	sbci	r31, 0xF8	; 248
    4604:	81 81       	ldd	r24, Z+1	; 0x01
    4606:	92 81       	ldd	r25, Z+2	; 0x02
    4608:	08 95       	ret

0000460a <decode_port_no>:
    460a:	dc 01       	movw	r26, r24
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	29 f1       	breq	.+74     	; 0x465a <decode_port_no+0x50>
    4610:	fb 01       	movw	r30, r22
    4612:	20 81       	ld	r18, Z
    4614:	fc 01       	movw	r30, r24
    4616:	01 90       	ld	r0, Z+
    4618:	00 20       	and	r0, r0
    461a:	e9 f7       	brne	.-6      	; 0x4616 <decode_port_no+0xc>
    461c:	31 97       	sbiw	r30, 0x01	; 1
    461e:	e8 1b       	sub	r30, r24
    4620:	f9 0b       	sbc	r31, r25
    4622:	82 2f       	mov	r24, r18
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	e8 17       	cp	r30, r24
    4628:	f9 07       	cpc	r31, r25
    462a:	c8 f0       	brcs	.+50     	; 0x465e <decode_port_no+0x54>
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	08 c0       	rjmp	.+16     	; 0x4640 <decode_port_no+0x36>
    4630:	88 0f       	add	r24, r24
    4632:	38 2f       	mov	r19, r24
    4634:	33 0f       	add	r19, r19
    4636:	33 0f       	add	r19, r19
    4638:	83 0f       	add	r24, r19
    463a:	80 53       	subi	r24, 0x30	; 48
    463c:	89 0f       	add	r24, r25
    463e:	2f 5f       	subi	r18, 0xFF	; 255
    4640:	fd 01       	movw	r30, r26
    4642:	e2 0f       	add	r30, r18
    4644:	f1 1d       	adc	r31, r1
    4646:	90 81       	ld	r25, Z
    4648:	30 ed       	ldi	r19, 0xD0	; 208
    464a:	39 0f       	add	r19, r25
    464c:	3a 30       	cpi	r19, 0x0A	; 10
    464e:	10 f4       	brcc	.+4      	; 0x4654 <decode_port_no+0x4a>
    4650:	91 11       	cpse	r25, r1
    4652:	ee cf       	rjmp	.-36     	; 0x4630 <decode_port_no+0x26>
    4654:	fb 01       	movw	r30, r22
    4656:	20 83       	st	Z, r18
    4658:	08 95       	ret
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	08 95       	ret
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	08 95       	ret

00004662 <decode_hexadecimal_string_bytes>:
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	dc 01       	movw	r26, r24
    466c:	ea 01       	movw	r28, r20
    466e:	20 97       	sbiw	r28, 0x00	; 0
    4670:	e1 f1       	breq	.+120    	; 0x46ea <decode_hexadecimal_string_bytes+0x88>
    4672:	fa 01       	movw	r30, r20
    4674:	01 90       	ld	r0, Z+
    4676:	00 20       	and	r0, r0
    4678:	e9 f7       	brne	.-6      	; 0x4674 <decode_hexadecimal_string_bytes+0x12>
    467a:	31 97       	sbiw	r30, 0x01	; 1
    467c:	e4 1b       	sub	r30, r20
    467e:	f5 0b       	sbc	r31, r21
    4680:	32 97       	sbiw	r30, 0x02	; 2
    4682:	10 f5       	brcc	.+68     	; 0x46c8 <decode_hexadecimal_string_bytes+0x66>
    4684:	32 c0       	rjmp	.+100    	; 0x46ea <decode_hexadecimal_string_bytes+0x88>
    4686:	8d 01       	movw	r16, r26
    4688:	04 0f       	add	r16, r20
    468a:	15 1f       	adc	r17, r21
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	ae 01       	movw	r20, r28
    4690:	42 0f       	add	r20, r18
    4692:	53 1f       	adc	r21, r19
    4694:	fa 01       	movw	r30, r20
    4696:	90 81       	ld	r25, Z
    4698:	91 34       	cpi	r25, 0x41	; 65
    469a:	28 f0       	brcs	.+10     	; 0x46a6 <decode_hexadecimal_string_bytes+0x44>
    469c:	97 53       	subi	r25, 0x37	; 55
    469e:	59 2f       	mov	r21, r25
    46a0:	52 95       	swap	r21
    46a2:	50 7f       	andi	r21, 0xF0	; 240
    46a4:	03 c0       	rjmp	.+6      	; 0x46ac <decode_hexadecimal_string_bytes+0x4a>
    46a6:	59 2f       	mov	r21, r25
    46a8:	52 95       	swap	r21
    46aa:	50 7f       	andi	r21, 0xF0	; 240
    46ac:	2c 0f       	add	r18, r28
    46ae:	3d 1f       	adc	r19, r29
    46b0:	f9 01       	movw	r30, r18
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	91 34       	cpi	r25, 0x41	; 65
    46b6:	10 f0       	brcs	.+4      	; 0x46bc <decode_hexadecimal_string_bytes+0x5a>
    46b8:	97 53       	subi	r25, 0x37	; 55
    46ba:	01 c0       	rjmp	.+2      	; 0x46be <decode_hexadecimal_string_bytes+0x5c>
    46bc:	90 53       	subi	r25, 0x30	; 48
    46be:	95 0f       	add	r25, r21
    46c0:	f8 01       	movw	r30, r16
    46c2:	90 83       	st	Z, r25
    46c4:	8f 5f       	subi	r24, 0xFF	; 255
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <decode_hexadecimal_string_bytes+0x68>
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	28 2f       	mov	r18, r24
    46cc:	22 0f       	add	r18, r18
    46ce:	48 2f       	mov	r20, r24
    46d0:	50 e0       	ldi	r21, 0x00	; 0
    46d2:	fe 01       	movw	r30, r28
    46d4:	01 90       	ld	r0, Z+
    46d6:	00 20       	and	r0, r0
    46d8:	e9 f7       	brne	.-6      	; 0x46d4 <decode_hexadecimal_string_bytes+0x72>
    46da:	31 97       	sbiw	r30, 0x01	; 1
    46dc:	ec 1b       	sub	r30, r28
    46de:	fd 0b       	sbc	r31, r29
    46e0:	4e 17       	cp	r20, r30
    46e2:	5f 07       	cpc	r21, r31
    46e4:	10 f4       	brcc	.+4      	; 0x46ea <decode_hexadecimal_string_bytes+0x88>
    46e6:	86 13       	cpse	r24, r22
    46e8:	ce cf       	rjmp	.-100    	; 0x4686 <decode_hexadecimal_string_bytes+0x24>
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	1f 91       	pop	r17
    46f0:	0f 91       	pop	r16
    46f2:	08 95       	ret

000046f4 <_serialCallBack>:
    46f4:	80 91 b5 17 	lds	r24, 0x17B5	; 0x8017b5 <crc_sum.1945>
    46f8:	86 0f       	add	r24, r22
    46fa:	80 93 b5 17 	sts	0x17B5, r24	; 0x8017b5 <crc_sum.1945>
    46fe:	90 91 b8 17 	lds	r25, 0x17B8	; 0x8017b8 <_mh_state>
    4702:	91 30       	cpi	r25, 0x01	; 1
    4704:	79 f0       	breq	.+30     	; 0x4724 <_serialCallBack+0x30>
    4706:	28 f0       	brcs	.+10     	; 0x4712 <_serialCallBack+0x1e>
    4708:	92 30       	cpi	r25, 0x02	; 2
    470a:	a9 f0       	breq	.+42     	; 0x4736 <_serialCallBack+0x42>
    470c:	93 30       	cpi	r25, 0x03	; 3
    470e:	19 f1       	breq	.+70     	; 0x4756 <_serialCallBack+0x62>
    4710:	08 95       	ret
    4712:	6f 3f       	cpi	r22, 0xFF	; 255
    4714:	09 f0       	breq	.+2      	; 0x4718 <_serialCallBack+0x24>
    4716:	48 c0       	rjmp	.+144    	; 0x47a8 <_serialCallBack+0xb4>
    4718:	10 92 b5 17 	sts	0x17B5, r1	; 0x8017b5 <crc_sum.1945>
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	80 93 b8 17 	sts	0x17B8, r24	; 0x8017b8 <_mh_state>
    4722:	08 95       	ret
    4724:	66 38       	cpi	r22, 0x86	; 134
    4726:	09 f0       	breq	.+2      	; 0x472a <_serialCallBack+0x36>
    4728:	3f c0       	rjmp	.+126    	; 0x47a8 <_serialCallBack+0xb4>
    472a:	10 92 b4 17 	sts	0x17B4, r1	; 0x8017b4 <inDex.1943>
    472e:	82 e0       	ldi	r24, 0x02	; 2
    4730:	80 93 b8 17 	sts	0x17B8, r24	; 0x8017b8 <_mh_state>
    4734:	08 95       	ret
    4736:	e0 91 b4 17 	lds	r30, 0x17B4	; 0x8017b4 <inDex.1943>
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	8e 0f       	add	r24, r30
    473e:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <inDex.1943>
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	ee 54       	subi	r30, 0x4E	; 78
    4746:	f8 4e       	sbci	r31, 0xE8	; 232
    4748:	60 83       	st	Z, r22
    474a:	82 30       	cpi	r24, 0x02	; 2
    474c:	69 f5       	brne	.+90     	; 0x47a8 <_serialCallBack+0xb4>
    474e:	83 e0       	ldi	r24, 0x03	; 3
    4750:	80 93 b8 17 	sts	0x17B8, r24	; 0x8017b8 <_mh_state>
    4754:	08 95       	ret
    4756:	90 91 b4 17 	lds	r25, 0x17B4	; 0x8017b4 <inDex.1943>
    475a:	21 e0       	ldi	r18, 0x01	; 1
    475c:	29 0f       	add	r18, r25
    475e:	20 93 b4 17 	sts	0x17B4, r18	; 0x8017b4 <inDex.1943>
    4762:	96 30       	cpi	r25, 0x06	; 6
    4764:	09 f5       	brne	.+66     	; 0x47a8 <_serialCallBack+0xb4>
    4766:	81 11       	cpse	r24, r1
    4768:	0e c0       	rjmp	.+28     	; 0x4786 <_serialCallBack+0x92>
    476a:	e2 eb       	ldi	r30, 0xB2	; 178
    476c:	f7 e1       	ldi	r31, 0x17	; 23
    476e:	80 81       	ld	r24, Z
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	98 2f       	mov	r25, r24
    4774:	88 27       	eor	r24, r24
    4776:	21 81       	ldd	r18, Z+1	; 0x01
    4778:	82 0f       	add	r24, r18
    477a:	91 1d       	adc	r25, r1
    477c:	90 93 ba 17 	sts	0x17BA, r25	; 0x8017ba <_ppm+0x1>
    4780:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <_ppm>
    4784:	04 c0       	rjmp	.+8      	; 0x478e <_serialCallBack+0x9a>
    4786:	10 92 ba 17 	sts	0x17BA, r1	; 0x8017ba <_ppm+0x1>
    478a:	10 92 b9 17 	sts	0x17B9, r1	; 0x8017b9 <_ppm>
    478e:	10 92 b8 17 	sts	0x17B8, r1	; 0x8017b8 <_mh_state>
    4792:	e0 91 b6 17 	lds	r30, 0x17B6	; 0x8017b6 <_appCallBack>
    4796:	f0 91 b7 17 	lds	r31, 0x17B7	; 0x8017b7 <_appCallBack+0x1>
    479a:	30 97       	sbiw	r30, 0x00	; 0
    479c:	29 f0       	breq	.+10     	; 0x47a8 <_serialCallBack+0xb4>
    479e:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <_ppm>
    47a2:	90 91 ba 17 	lds	r25, 0x17BA	; 0x8017ba <_ppm+0x1>
    47a6:	19 95       	eicall
    47a8:	08 95       	ret

000047aa <mh_z19_initialise>:
    47aa:	8f 92       	push	r8
    47ac:	9f 92       	push	r9
    47ae:	af 92       	push	r10
    47b0:	cf 92       	push	r12
    47b2:	ef 92       	push	r14
    47b4:	0f 93       	push	r16
    47b6:	0f 2e       	mov	r0, r31
    47b8:	fa e7       	ldi	r31, 0x7A	; 122
    47ba:	8f 2e       	mov	r8, r31
    47bc:	f3 e2       	ldi	r31, 0x23	; 35
    47be:	9f 2e       	mov	r9, r31
    47c0:	f0 2d       	mov	r31, r0
    47c2:	68 94       	set
    47c4:	aa 24       	eor	r10, r10
    47c6:	a4 f8       	bld	r10, 4
    47c8:	68 94       	set
    47ca:	cc 24       	eor	r12, r12
    47cc:	c4 f8       	bld	r12, 4
    47ce:	e1 2c       	mov	r14, r1
    47d0:	00 e0       	ldi	r16, 0x00	; 0
    47d2:	23 e0       	ldi	r18, 0x03	; 3
    47d4:	40 e8       	ldi	r20, 0x80	; 128
    47d6:	55 e2       	ldi	r21, 0x25	; 37
    47d8:	60 e0       	ldi	r22, 0x00	; 0
    47da:	70 e0       	ldi	r23, 0x00	; 0
    47dc:	50 d0       	rcall	.+160    	; 0x487e <serial_create>
    47de:	90 93 bc 17 	sts	0x17BC, r25	; 0x8017bc <_serial+0x1>
    47e2:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <_serial>
    47e6:	0f 91       	pop	r16
    47e8:	ef 90       	pop	r14
    47ea:	cf 90       	pop	r12
    47ec:	af 90       	pop	r10
    47ee:	9f 90       	pop	r9
    47f0:	8f 90       	pop	r8
    47f2:	08 95       	ret

000047f4 <mh_z19_injectCallBack>:
    47f4:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <_appCallBack+0x1>
    47f8:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <_appCallBack>
    47fc:	08 95       	ret

000047fe <mh_z19_takeMeassuring>:
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	29 97       	sbiw	r28, 0x09	; 9
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	89 e0       	ldi	r24, 0x09	; 9
    4814:	e6 e4       	ldi	r30, 0x46	; 70
    4816:	f2 e0       	ldi	r31, 0x02	; 2
    4818:	9e 01       	movw	r18, r28
    481a:	2f 5f       	subi	r18, 0xFF	; 255
    481c:	3f 4f       	sbci	r19, 0xFF	; 255
    481e:	d9 01       	movw	r26, r18
    4820:	01 90       	ld	r0, Z+
    4822:	0d 92       	st	X+, r0
    4824:	8a 95       	dec	r24
    4826:	e1 f7       	brne	.-8      	; 0x4820 <mh_z19_takeMeassuring+0x22>
    4828:	10 92 ba 17 	sts	0x17BA, r1	; 0x8017ba <_ppm+0x1>
    482c:	10 92 b9 17 	sts	0x17B9, r1	; 0x8017b9 <_ppm>
    4830:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <_serial>
    4834:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <_serial+0x1>
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	31 f0       	breq	.+12     	; 0x4848 <mh_z19_takeMeassuring+0x4a>
    483c:	42 2f       	mov	r20, r18
    483e:	53 2f       	mov	r21, r19
    4840:	69 e0       	ldi	r22, 0x09	; 9
    4842:	ea d0       	rcall	.+468    	; 0x4a18 <serial_sendBytes>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	01 c0       	rjmp	.+2      	; 0x484a <mh_z19_takeMeassuring+0x4c>
    4848:	82 e0       	ldi	r24, 0x02	; 2
    484a:	29 96       	adiw	r28, 0x09	; 9
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	de bf       	out	0x3e, r29	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret

0000485c <mh_z19_getCo2Ppm>:
    485c:	20 91 b9 17 	lds	r18, 0x17B9	; 0x8017b9 <_ppm>
    4860:	30 91 ba 17 	lds	r19, 0x17BA	; 0x8017ba <_ppm+0x1>
    4864:	21 15       	cp	r18, r1
    4866:	31 05       	cpc	r19, r1
    4868:	29 f4       	brne	.+10     	; 0x4874 <mh_z19_getCo2Ppm+0x18>
    486a:	fc 01       	movw	r30, r24
    486c:	11 82       	std	Z+1, r1	; 0x01
    486e:	10 82       	st	Z, r1
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	08 95       	ret
    4874:	fc 01       	movw	r30, r24
    4876:	31 83       	std	Z+1, r19	; 0x01
    4878:	20 83       	st	Z, r18
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	08 95       	ret

0000487e <serial_create>:
    487e:	2f 92       	push	r2
    4880:	3f 92       	push	r3
    4882:	4f 92       	push	r4
    4884:	5f 92       	push	r5
    4886:	6f 92       	push	r6
    4888:	7f 92       	push	r7
    488a:	8f 92       	push	r8
    488c:	9f 92       	push	r9
    488e:	af 92       	push	r10
    4890:	cf 92       	push	r12
    4892:	ef 92       	push	r14
    4894:	ff 92       	push	r15
    4896:	0f 93       	push	r16
    4898:	1f 93       	push	r17
    489a:	cf 93       	push	r28
    489c:	df 93       	push	r29
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	f8 2e       	mov	r15, r24
    48a4:	2a 01       	movw	r4, r20
    48a6:	3b 01       	movw	r6, r22
    48a8:	88 e0       	ldi	r24, 0x08	; 8
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <malloc>
    48b0:	8c 01       	movw	r16, r24
    48b2:	8f 2d       	mov	r24, r15
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	fc 01       	movw	r30, r24
    48b8:	ee 0f       	add	r30, r30
    48ba:	ff 1f       	adc	r31, r31
    48bc:	e3 54       	subi	r30, 0x43	; 67
    48be:	f8 4e       	sbci	r31, 0xE8	; 232
    48c0:	11 83       	std	Z+1, r17	; 0x01
    48c2:	00 83       	st	Z, r16
    48c4:	01 15       	cp	r16, r1
    48c6:	11 05       	cpc	r17, r1
    48c8:	09 f4       	brne	.+2      	; 0x48cc <serial_create+0x4e>
    48ca:	69 c0       	rjmp	.+210    	; 0x499e <serial_create+0x120>
    48cc:	88 0f       	add	r24, r24
    48ce:	99 1f       	adc	r25, r25
    48d0:	fc 01       	movw	r30, r24
    48d2:	e1 5f       	subi	r30, 0xF1	; 241
    48d4:	fd 4f       	sbci	r31, 0xFD	; 253
    48d6:	80 81       	ld	r24, Z
    48d8:	91 81       	ldd	r25, Z+1	; 0x01
    48da:	d8 01       	movw	r26, r16
    48dc:	8d 93       	st	X+, r24
    48de:	9c 93       	st	X, r25
    48e0:	8c 2d       	mov	r24, r12
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	88 0f       	add	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	88 0f       	add	r24, r24
    48ea:	99 1f       	adc	r25, r25
    48ec:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <malloc>
    48f0:	1c 01       	movw	r2, r24
    48f2:	86 e0       	ldi	r24, 0x06	; 6
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <malloc>
    48fa:	7c 01       	movw	r14, r24
    48fc:	4c 2d       	mov	r20, r12
    48fe:	b1 01       	movw	r22, r2
    4900:	f0 d6       	rcall	.+3552   	; 0x56e2 <fifo_init>
    4902:	f8 01       	movw	r30, r16
    4904:	f5 82       	std	Z+5, r15	; 0x05
    4906:	e4 82       	std	Z+4, r14	; 0x04
    4908:	8a 2d       	mov	r24, r10
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	88 0f       	add	r24, r24
    490e:	99 1f       	adc	r25, r25
    4910:	88 0f       	add	r24, r24
    4912:	99 1f       	adc	r25, r25
    4914:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <malloc>
    4918:	1c 01       	movw	r2, r24
    491a:	86 e0       	ldi	r24, 0x06	; 6
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <malloc>
    4922:	7c 01       	movw	r14, r24
    4924:	4a 2d       	mov	r20, r10
    4926:	b1 01       	movw	r22, r2
    4928:	dc d6       	rcall	.+3512   	; 0x56e2 <fifo_init>
    492a:	d8 01       	movw	r26, r16
    492c:	13 96       	adiw	r26, 0x03	; 3
    492e:	fc 92       	st	X, r15
    4930:	ee 92       	st	-X, r14
    4932:	12 97       	sbiw	r26, 0x02	; 2
    4934:	17 96       	adiw	r26, 0x07	; 7
    4936:	9c 92       	st	X, r9
    4938:	8e 92       	st	-X, r8
    493a:	16 97       	sbiw	r26, 0x06	; 6
    493c:	ff b6       	in	r15, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	ed 91       	ld	r30, X+
    4942:	fc 91       	ld	r31, X
    4944:	11 97       	sbiw	r26, 0x01	; 1
    4946:	36 97       	sbiw	r30, 0x06	; 6
    4948:	80 81       	ld	r24, Z
    494a:	82 60       	ori	r24, 0x02	; 2
    494c:	80 83       	st	Z, r24
    494e:	8d 90       	ld	r8, X+
    4950:	9c 90       	ld	r9, X
    4952:	c3 01       	movw	r24, r6
    4954:	b2 01       	movw	r22, r4
    4956:	b3 d7       	rcall	.+3942   	; 0x58be <__floatunsisf>
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	51 e4       	ldi	r21, 0x41	; 65
    4960:	0e 94 c4 2c 	call	0x5988	; 0x5988 <__mulsf3>
    4964:	9b 01       	movw	r18, r22
    4966:	ac 01       	movw	r20, r24
    4968:	60 e0       	ldi	r22, 0x00	; 0
    496a:	74 e2       	ldi	r23, 0x24	; 36
    496c:	84 e7       	ldi	r24, 0x74	; 116
    496e:	9b e4       	ldi	r25, 0x4B	; 75
    4970:	3b d7       	rcall	.+3702   	; 0x57e8 <__divsf3>
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	40 e8       	ldi	r20, 0x80	; 128
    4978:	5f e3       	ldi	r21, 0x3F	; 63
    497a:	cf d6       	rcall	.+3486   	; 0x571a <__subsf3>
    497c:	60 d9       	rcall	.-3392   	; 0x3c3e <__fixunssfsi>
    497e:	f4 01       	movw	r30, r8
    4980:	32 97       	sbiw	r30, 0x02	; 2
    4982:	60 83       	st	Z, r22
    4984:	d8 01       	movw	r26, r16
    4986:	ed 91       	ld	r30, X+
    4988:	fc 91       	ld	r31, X
    498a:	11 97       	sbiw	r26, 0x01	; 1
    498c:	35 97       	sbiw	r30, 0x05	; 5
    498e:	88 e9       	ldi	r24, 0x98	; 152
    4990:	80 83       	st	Z, r24
    4992:	ed 91       	ld	r30, X+
    4994:	fc 91       	ld	r31, X
    4996:	34 97       	sbiw	r30, 0x04	; 4
    4998:	86 e0       	ldi	r24, 0x06	; 6
    499a:	80 83       	st	Z, r24
    499c:	ff be       	out	0x3f, r15	; 63
    499e:	c8 01       	movw	r24, r16
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	0f 91       	pop	r16
    49a8:	ff 90       	pop	r15
    49aa:	ef 90       	pop	r14
    49ac:	cf 90       	pop	r12
    49ae:	af 90       	pop	r10
    49b0:	9f 90       	pop	r9
    49b2:	8f 90       	pop	r8
    49b4:	7f 90       	pop	r7
    49b6:	6f 90       	pop	r6
    49b8:	5f 90       	pop	r5
    49ba:	4f 90       	pop	r4
    49bc:	3f 90       	pop	r3
    49be:	2f 90       	pop	r2
    49c0:	08 95       	ret

000049c2 <serial_sendByte>:
    49c2:	cf 93       	push	r28
    49c4:	df 93       	push	r29
    49c6:	dc 01       	movw	r26, r24
    49c8:	89 2b       	or	r24, r25
    49ca:	01 f1       	breq	.+64     	; 0x4a0c <serial_sendByte+0x4a>
    49cc:	12 96       	adiw	r26, 0x02	; 2
    49ce:	ed 91       	ld	r30, X+
    49d0:	fc 91       	ld	r31, X
    49d2:	13 97       	sbiw	r26, 0x03	; 3
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	82 81       	ldd	r24, Z+2	; 0x02
    49d8:	25 81       	ldd	r18, Z+5	; 0x05
    49da:	98 1b       	sub	r25, r24
    49dc:	92 23       	and	r25, r18
    49de:	84 81       	ldd	r24, Z+4	; 0x04
    49e0:	98 17       	cp	r25, r24
    49e2:	b1 f0       	breq	.+44     	; 0x4a10 <serial_sendByte+0x4e>
    49e4:	83 81       	ldd	r24, Z+3	; 0x03
    49e6:	26 95       	lsr	r18
    49e8:	28 23       	and	r18, r24
    49ea:	c0 81       	ld	r28, Z
    49ec:	d1 81       	ldd	r29, Z+1	; 0x01
    49ee:	c2 0f       	add	r28, r18
    49f0:	d1 1d       	adc	r29, r1
    49f2:	68 83       	st	Y, r22
    49f4:	8f 5f       	subi	r24, 0xFF	; 255
    49f6:	95 81       	ldd	r25, Z+5	; 0x05
    49f8:	89 23       	and	r24, r25
    49fa:	83 83       	std	Z+3, r24	; 0x03
    49fc:	ed 91       	ld	r30, X+
    49fe:	fc 91       	ld	r31, X
    4a00:	35 97       	sbiw	r30, 0x05	; 5
    4a02:	80 81       	ld	r24, Z
    4a04:	80 62       	ori	r24, 0x20	; 32
    4a06:	80 83       	st	Z, r24
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	03 c0       	rjmp	.+6      	; 0x4a12 <serial_sendByte+0x50>
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	01 c0       	rjmp	.+2      	; 0x4a12 <serial_sendByte+0x50>
    4a10:	82 e0       	ldi	r24, 0x02	; 2
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <serial_sendBytes>:
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	7c 01       	movw	r14, r24
    4a26:	00 97       	sbiw	r24, 0x00	; 0
    4a28:	09 f4       	brne	.+2      	; 0x4a2c <serial_sendBytes+0x14>
    4a2a:	41 c0       	rjmp	.+130    	; 0x4aae <serial_sendBytes+0x96>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	12 96       	adiw	r26, 0x02	; 2
    4a30:	ed 91       	ld	r30, X+
    4a32:	fc 91       	ld	r31, X
    4a34:	13 97       	sbiw	r26, 0x03	; 3
    4a36:	93 81       	ldd	r25, Z+3	; 0x03
    4a38:	82 81       	ldd	r24, Z+2	; 0x02
    4a3a:	98 1b       	sub	r25, r24
    4a3c:	85 81       	ldd	r24, Z+5	; 0x05
    4a3e:	98 23       	and	r25, r24
    4a40:	84 81       	ldd	r24, Z+4	; 0x04
    4a42:	89 1b       	sub	r24, r25
    4a44:	86 17       	cp	r24, r22
    4a46:	a8 f1       	brcs	.+106    	; 0x4ab2 <serial_sendBytes+0x9a>
    4a48:	66 23       	and	r22, r22
    4a4a:	41 f1       	breq	.+80     	; 0x4a9c <serial_sendBytes+0x84>
    4a4c:	84 2f       	mov	r24, r20
    4a4e:	95 2f       	mov	r25, r21
    4a50:	dc 01       	movw	r26, r24
    4a52:	61 50       	subi	r22, 0x01	; 1
    4a54:	46 2f       	mov	r20, r22
    4a56:	50 e0       	ldi	r21, 0x00	; 0
    4a58:	4f 5f       	subi	r20, 0xFF	; 255
    4a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5c:	48 0f       	add	r20, r24
    4a5e:	59 1f       	adc	r21, r25
    4a60:	e7 01       	movw	r28, r14
    4a62:	ea 81       	ldd	r30, Y+2	; 0x02
    4a64:	fb 81       	ldd	r31, Y+3	; 0x03
    4a66:	93 81       	ldd	r25, Z+3	; 0x03
    4a68:	82 81       	ldd	r24, Z+2	; 0x02
    4a6a:	25 81       	ldd	r18, Z+5	; 0x05
    4a6c:	98 1b       	sub	r25, r24
    4a6e:	92 23       	and	r25, r18
    4a70:	84 81       	ldd	r24, Z+4	; 0x04
    4a72:	98 17       	cp	r25, r24
    4a74:	79 f0       	breq	.+30     	; 0x4a94 <serial_sendBytes+0x7c>
    4a76:	8c 91       	ld	r24, X
    4a78:	93 81       	ldd	r25, Z+3	; 0x03
    4a7a:	26 95       	lsr	r18
    4a7c:	29 23       	and	r18, r25
    4a7e:	60 81       	ld	r22, Z
    4a80:	71 81       	ldd	r23, Z+1	; 0x01
    4a82:	8b 01       	movw	r16, r22
    4a84:	02 0f       	add	r16, r18
    4a86:	11 1d       	adc	r17, r1
    4a88:	e8 01       	movw	r28, r16
    4a8a:	88 83       	st	Y, r24
    4a8c:	9f 5f       	subi	r25, 0xFF	; 255
    4a8e:	85 81       	ldd	r24, Z+5	; 0x05
    4a90:	98 23       	and	r25, r24
    4a92:	93 83       	std	Z+3, r25	; 0x03
    4a94:	11 96       	adiw	r26, 0x01	; 1
    4a96:	a4 17       	cp	r26, r20
    4a98:	b5 07       	cpc	r27, r21
    4a9a:	11 f7       	brne	.-60     	; 0x4a60 <serial_sendBytes+0x48>
    4a9c:	d7 01       	movw	r26, r14
    4a9e:	ed 91       	ld	r30, X+
    4aa0:	fc 91       	ld	r31, X
    4aa2:	35 97       	sbiw	r30, 0x05	; 5
    4aa4:	80 81       	ld	r24, Z
    4aa6:	80 62       	ori	r24, 0x20	; 32
    4aa8:	80 83       	st	Z, r24
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	03 c0       	rjmp	.+6      	; 0x4ab4 <serial_sendBytes+0x9c>
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	01 c0       	rjmp	.+2      	; 0x4ab4 <serial_sendBytes+0x9c>
    4ab2:	82 e0       	ldi	r24, 0x02	; 2
    4ab4:	df 91       	pop	r29
    4ab6:	cf 91       	pop	r28
    4ab8:	1f 91       	pop	r17
    4aba:	0f 91       	pop	r16
    4abc:	ff 90       	pop	r15
    4abe:	ef 90       	pop	r14
    4ac0:	08 95       	ret

00004ac2 <serial_getByte>:
    4ac2:	00 97       	sbiw	r24, 0x00	; 0
    4ac4:	d1 f0       	breq	.+52     	; 0x4afa <serial_getByte+0x38>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	14 96       	adiw	r26, 0x04	; 4
    4aca:	ed 91       	ld	r30, X+
    4acc:	fc 91       	ld	r31, X
    4ace:	15 97       	sbiw	r26, 0x05	; 5
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	82 81       	ldd	r24, Z+2	; 0x02
    4ad4:	98 17       	cp	r25, r24
    4ad6:	99 f0       	breq	.+38     	; 0x4afe <serial_getByte+0x3c>
    4ad8:	92 81       	ldd	r25, Z+2	; 0x02
    4ada:	85 81       	ldd	r24, Z+5	; 0x05
    4adc:	86 95       	lsr	r24
    4ade:	89 23       	and	r24, r25
    4ae0:	a0 81       	ld	r26, Z
    4ae2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ae4:	a8 0f       	add	r26, r24
    4ae6:	b1 1d       	adc	r27, r1
    4ae8:	8c 91       	ld	r24, X
    4aea:	db 01       	movw	r26, r22
    4aec:	8c 93       	st	X, r24
    4aee:	9f 5f       	subi	r25, 0xFF	; 255
    4af0:	85 81       	ldd	r24, Z+5	; 0x05
    4af2:	98 23       	and	r25, r24
    4af4:	92 83       	std	Z+2, r25	; 0x02
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	08 95       	ret
    4afa:	81 e0       	ldi	r24, 0x01	; 1
    4afc:	08 95       	ret
    4afe:	83 e0       	ldi	r24, 0x03	; 3
    4b00:	08 95       	ret

00004b02 <__vector_25>:
    4b02:	1f 92       	push	r1
    4b04:	0f 92       	push	r0
    4b06:	0f b6       	in	r0, 0x3f	; 63
    4b08:	0f 92       	push	r0
    4b0a:	11 24       	eor	r1, r1
    4b0c:	0b b6       	in	r0, 0x3b	; 59
    4b0e:	0f 92       	push	r0
    4b10:	2f 93       	push	r18
    4b12:	3f 93       	push	r19
    4b14:	4f 93       	push	r20
    4b16:	5f 93       	push	r21
    4b18:	6f 93       	push	r22
    4b1a:	7f 93       	push	r23
    4b1c:	8f 93       	push	r24
    4b1e:	9f 93       	push	r25
    4b20:	af 93       	push	r26
    4b22:	bf 93       	push	r27
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
    4b28:	ef 93       	push	r30
    4b2a:	ff 93       	push	r31
    4b2c:	a0 91 bd 17 	lds	r26, 0x17BD	; 0x8017bd <_ser_handle>
    4b30:	b0 91 be 17 	lds	r27, 0x17BE	; 0x8017be <_ser_handle+0x1>
    4b34:	10 97       	sbiw	r26, 0x00	; 0
    4b36:	11 f1       	breq	.+68     	; 0x4b7c <__vector_25+0x7a>
    4b38:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4b3c:	14 96       	adiw	r26, 0x04	; 4
    4b3e:	ed 91       	ld	r30, X+
    4b40:	fc 91       	ld	r31, X
    4b42:	15 97       	sbiw	r26, 0x05	; 5
    4b44:	93 81       	ldd	r25, Z+3	; 0x03
    4b46:	82 81       	ldd	r24, Z+2	; 0x02
    4b48:	25 81       	ldd	r18, Z+5	; 0x05
    4b4a:	98 1b       	sub	r25, r24
    4b4c:	92 23       	and	r25, r18
    4b4e:	84 81       	ldd	r24, Z+4	; 0x04
    4b50:	98 17       	cp	r25, r24
    4b52:	61 f0       	breq	.+24     	; 0x4b6c <__vector_25+0x6a>
    4b54:	83 81       	ldd	r24, Z+3	; 0x03
    4b56:	26 95       	lsr	r18
    4b58:	28 23       	and	r18, r24
    4b5a:	c0 81       	ld	r28, Z
    4b5c:	d1 81       	ldd	r29, Z+1	; 0x01
    4b5e:	c2 0f       	add	r28, r18
    4b60:	d1 1d       	adc	r29, r1
    4b62:	68 83       	st	Y, r22
    4b64:	8f 5f       	subi	r24, 0xFF	; 255
    4b66:	95 81       	ldd	r25, Z+5	; 0x05
    4b68:	89 23       	and	r24, r25
    4b6a:	83 83       	std	Z+3, r24	; 0x03
    4b6c:	16 96       	adiw	r26, 0x06	; 6
    4b6e:	ed 91       	ld	r30, X+
    4b70:	fc 91       	ld	r31, X
    4b72:	17 97       	sbiw	r26, 0x07	; 7
    4b74:	30 97       	sbiw	r30, 0x00	; 0
    4b76:	11 f0       	breq	.+4      	; 0x4b7c <__vector_25+0x7a>
    4b78:	cd 01       	movw	r24, r26
    4b7a:	19 95       	eicall
    4b7c:	ff 91       	pop	r31
    4b7e:	ef 91       	pop	r30
    4b80:	df 91       	pop	r29
    4b82:	cf 91       	pop	r28
    4b84:	bf 91       	pop	r27
    4b86:	af 91       	pop	r26
    4b88:	9f 91       	pop	r25
    4b8a:	8f 91       	pop	r24
    4b8c:	7f 91       	pop	r23
    4b8e:	6f 91       	pop	r22
    4b90:	5f 91       	pop	r21
    4b92:	4f 91       	pop	r20
    4b94:	3f 91       	pop	r19
    4b96:	2f 91       	pop	r18
    4b98:	0f 90       	pop	r0
    4b9a:	0b be       	out	0x3b, r0	; 59
    4b9c:	0f 90       	pop	r0
    4b9e:	0f be       	out	0x3f, r0	; 63
    4ba0:	0f 90       	pop	r0
    4ba2:	1f 90       	pop	r1
    4ba4:	18 95       	reti

00004ba6 <__vector_26>:
    4ba6:	1f 92       	push	r1
    4ba8:	0f 92       	push	r0
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	0f 92       	push	r0
    4bae:	11 24       	eor	r1, r1
    4bb0:	0b b6       	in	r0, 0x3b	; 59
    4bb2:	0f 92       	push	r0
    4bb4:	2f 93       	push	r18
    4bb6:	8f 93       	push	r24
    4bb8:	9f 93       	push	r25
    4bba:	af 93       	push	r26
    4bbc:	bf 93       	push	r27
    4bbe:	ef 93       	push	r30
    4bc0:	ff 93       	push	r31
    4bc2:	e0 91 bd 17 	lds	r30, 0x17BD	; 0x8017bd <_ser_handle>
    4bc6:	f0 91 be 17 	lds	r31, 0x17BE	; 0x8017be <_ser_handle+0x1>
    4bca:	30 97       	sbiw	r30, 0x00	; 0
    4bcc:	b9 f0       	breq	.+46     	; 0x4bfc <__vector_26+0x56>
    4bce:	02 80       	ldd	r0, Z+2	; 0x02
    4bd0:	f3 81       	ldd	r31, Z+3	; 0x03
    4bd2:	e0 2d       	mov	r30, r0
    4bd4:	93 81       	ldd	r25, Z+3	; 0x03
    4bd6:	82 81       	ldd	r24, Z+2	; 0x02
    4bd8:	98 17       	cp	r25, r24
    4bda:	b1 f0       	breq	.+44     	; 0x4c08 <__vector_26+0x62>
    4bdc:	92 81       	ldd	r25, Z+2	; 0x02
    4bde:	85 81       	ldd	r24, Z+5	; 0x05
    4be0:	28 2f       	mov	r18, r24
    4be2:	26 95       	lsr	r18
    4be4:	29 23       	and	r18, r25
    4be6:	a0 81       	ld	r26, Z
    4be8:	b1 81       	ldd	r27, Z+1	; 0x01
    4bea:	a2 0f       	add	r26, r18
    4bec:	b1 1d       	adc	r27, r1
    4bee:	2c 91       	ld	r18, X
    4bf0:	9f 5f       	subi	r25, 0xFF	; 255
    4bf2:	89 23       	and	r24, r25
    4bf4:	82 83       	std	Z+2, r24	; 0x02
    4bf6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bfa:	0b c0       	rjmp	.+22     	; 0x4c12 <__vector_26+0x6c>
    4bfc:	e1 ec       	ldi	r30, 0xC1	; 193
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	8f 7d       	andi	r24, 0xDF	; 223
    4c04:	80 83       	st	Z, r24
    4c06:	05 c0       	rjmp	.+10     	; 0x4c12 <__vector_26+0x6c>
    4c08:	e1 ec       	ldi	r30, 0xC1	; 193
    4c0a:	f0 e0       	ldi	r31, 0x00	; 0
    4c0c:	80 81       	ld	r24, Z
    4c0e:	8f 7d       	andi	r24, 0xDF	; 223
    4c10:	80 83       	st	Z, r24
    4c12:	ff 91       	pop	r31
    4c14:	ef 91       	pop	r30
    4c16:	bf 91       	pop	r27
    4c18:	af 91       	pop	r26
    4c1a:	9f 91       	pop	r25
    4c1c:	8f 91       	pop	r24
    4c1e:	2f 91       	pop	r18
    4c20:	0f 90       	pop	r0
    4c22:	0b be       	out	0x3b, r0	; 59
    4c24:	0f 90       	pop	r0
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	0f 90       	pop	r0
    4c2a:	1f 90       	pop	r1
    4c2c:	18 95       	reti

00004c2e <__vector_36>:
    4c2e:	1f 92       	push	r1
    4c30:	0f 92       	push	r0
    4c32:	0f b6       	in	r0, 0x3f	; 63
    4c34:	0f 92       	push	r0
    4c36:	11 24       	eor	r1, r1
    4c38:	0b b6       	in	r0, 0x3b	; 59
    4c3a:	0f 92       	push	r0
    4c3c:	2f 93       	push	r18
    4c3e:	3f 93       	push	r19
    4c40:	4f 93       	push	r20
    4c42:	5f 93       	push	r21
    4c44:	6f 93       	push	r22
    4c46:	7f 93       	push	r23
    4c48:	8f 93       	push	r24
    4c4a:	9f 93       	push	r25
    4c4c:	af 93       	push	r26
    4c4e:	bf 93       	push	r27
    4c50:	cf 93       	push	r28
    4c52:	df 93       	push	r29
    4c54:	ef 93       	push	r30
    4c56:	ff 93       	push	r31
    4c58:	a0 91 bf 17 	lds	r26, 0x17BF	; 0x8017bf <_ser_handle+0x2>
    4c5c:	b0 91 c0 17 	lds	r27, 0x17C0	; 0x8017c0 <_ser_handle+0x3>
    4c60:	10 97       	sbiw	r26, 0x00	; 0
    4c62:	11 f1       	breq	.+68     	; 0x4ca8 <__vector_36+0x7a>
    4c64:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c68:	14 96       	adiw	r26, 0x04	; 4
    4c6a:	ed 91       	ld	r30, X+
    4c6c:	fc 91       	ld	r31, X
    4c6e:	15 97       	sbiw	r26, 0x05	; 5
    4c70:	93 81       	ldd	r25, Z+3	; 0x03
    4c72:	82 81       	ldd	r24, Z+2	; 0x02
    4c74:	25 81       	ldd	r18, Z+5	; 0x05
    4c76:	98 1b       	sub	r25, r24
    4c78:	92 23       	and	r25, r18
    4c7a:	84 81       	ldd	r24, Z+4	; 0x04
    4c7c:	98 17       	cp	r25, r24
    4c7e:	61 f0       	breq	.+24     	; 0x4c98 <__vector_36+0x6a>
    4c80:	83 81       	ldd	r24, Z+3	; 0x03
    4c82:	26 95       	lsr	r18
    4c84:	28 23       	and	r18, r24
    4c86:	c0 81       	ld	r28, Z
    4c88:	d1 81       	ldd	r29, Z+1	; 0x01
    4c8a:	c2 0f       	add	r28, r18
    4c8c:	d1 1d       	adc	r29, r1
    4c8e:	68 83       	st	Y, r22
    4c90:	8f 5f       	subi	r24, 0xFF	; 255
    4c92:	95 81       	ldd	r25, Z+5	; 0x05
    4c94:	89 23       	and	r24, r25
    4c96:	83 83       	std	Z+3, r24	; 0x03
    4c98:	16 96       	adiw	r26, 0x06	; 6
    4c9a:	ed 91       	ld	r30, X+
    4c9c:	fc 91       	ld	r31, X
    4c9e:	17 97       	sbiw	r26, 0x07	; 7
    4ca0:	30 97       	sbiw	r30, 0x00	; 0
    4ca2:	11 f0       	breq	.+4      	; 0x4ca8 <__vector_36+0x7a>
    4ca4:	cd 01       	movw	r24, r26
    4ca6:	19 95       	eicall
    4ca8:	ff 91       	pop	r31
    4caa:	ef 91       	pop	r30
    4cac:	df 91       	pop	r29
    4cae:	cf 91       	pop	r28
    4cb0:	bf 91       	pop	r27
    4cb2:	af 91       	pop	r26
    4cb4:	9f 91       	pop	r25
    4cb6:	8f 91       	pop	r24
    4cb8:	7f 91       	pop	r23
    4cba:	6f 91       	pop	r22
    4cbc:	5f 91       	pop	r21
    4cbe:	4f 91       	pop	r20
    4cc0:	3f 91       	pop	r19
    4cc2:	2f 91       	pop	r18
    4cc4:	0f 90       	pop	r0
    4cc6:	0b be       	out	0x3b, r0	; 59
    4cc8:	0f 90       	pop	r0
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	0f 90       	pop	r0
    4cce:	1f 90       	pop	r1
    4cd0:	18 95       	reti

00004cd2 <__vector_37>:
    4cd2:	1f 92       	push	r1
    4cd4:	0f 92       	push	r0
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	0f 92       	push	r0
    4cda:	11 24       	eor	r1, r1
    4cdc:	0b b6       	in	r0, 0x3b	; 59
    4cde:	0f 92       	push	r0
    4ce0:	2f 93       	push	r18
    4ce2:	8f 93       	push	r24
    4ce4:	9f 93       	push	r25
    4ce6:	af 93       	push	r26
    4ce8:	bf 93       	push	r27
    4cea:	ef 93       	push	r30
    4cec:	ff 93       	push	r31
    4cee:	e0 91 bf 17 	lds	r30, 0x17BF	; 0x8017bf <_ser_handle+0x2>
    4cf2:	f0 91 c0 17 	lds	r31, 0x17C0	; 0x8017c0 <_ser_handle+0x3>
    4cf6:	30 97       	sbiw	r30, 0x00	; 0
    4cf8:	b9 f0       	breq	.+46     	; 0x4d28 <__vector_37+0x56>
    4cfa:	02 80       	ldd	r0, Z+2	; 0x02
    4cfc:	f3 81       	ldd	r31, Z+3	; 0x03
    4cfe:	e0 2d       	mov	r30, r0
    4d00:	93 81       	ldd	r25, Z+3	; 0x03
    4d02:	82 81       	ldd	r24, Z+2	; 0x02
    4d04:	98 17       	cp	r25, r24
    4d06:	b1 f0       	breq	.+44     	; 0x4d34 <__vector_37+0x62>
    4d08:	92 81       	ldd	r25, Z+2	; 0x02
    4d0a:	85 81       	ldd	r24, Z+5	; 0x05
    4d0c:	28 2f       	mov	r18, r24
    4d0e:	26 95       	lsr	r18
    4d10:	29 23       	and	r18, r25
    4d12:	a0 81       	ld	r26, Z
    4d14:	b1 81       	ldd	r27, Z+1	; 0x01
    4d16:	a2 0f       	add	r26, r18
    4d18:	b1 1d       	adc	r27, r1
    4d1a:	2c 91       	ld	r18, X
    4d1c:	9f 5f       	subi	r25, 0xFF	; 255
    4d1e:	89 23       	and	r24, r25
    4d20:	82 83       	std	Z+2, r24	; 0x02
    4d22:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4d26:	0b c0       	rjmp	.+22     	; 0x4d3e <__vector_37+0x6c>
    4d28:	e9 ec       	ldi	r30, 0xC9	; 201
    4d2a:	f0 e0       	ldi	r31, 0x00	; 0
    4d2c:	80 81       	ld	r24, Z
    4d2e:	8f 7d       	andi	r24, 0xDF	; 223
    4d30:	80 83       	st	Z, r24
    4d32:	05 c0       	rjmp	.+10     	; 0x4d3e <__vector_37+0x6c>
    4d34:	e9 ec       	ldi	r30, 0xC9	; 201
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	80 81       	ld	r24, Z
    4d3a:	8f 7d       	andi	r24, 0xDF	; 223
    4d3c:	80 83       	st	Z, r24
    4d3e:	ff 91       	pop	r31
    4d40:	ef 91       	pop	r30
    4d42:	bf 91       	pop	r27
    4d44:	af 91       	pop	r26
    4d46:	9f 91       	pop	r25
    4d48:	8f 91       	pop	r24
    4d4a:	2f 91       	pop	r18
    4d4c:	0f 90       	pop	r0
    4d4e:	0b be       	out	0x3b, r0	; 59
    4d50:	0f 90       	pop	r0
    4d52:	0f be       	out	0x3f, r0	; 63
    4d54:	0f 90       	pop	r0
    4d56:	1f 90       	pop	r1
    4d58:	18 95       	reti

00004d5a <__vector_51>:
    4d5a:	1f 92       	push	r1
    4d5c:	0f 92       	push	r0
    4d5e:	0f b6       	in	r0, 0x3f	; 63
    4d60:	0f 92       	push	r0
    4d62:	11 24       	eor	r1, r1
    4d64:	0b b6       	in	r0, 0x3b	; 59
    4d66:	0f 92       	push	r0
    4d68:	2f 93       	push	r18
    4d6a:	3f 93       	push	r19
    4d6c:	4f 93       	push	r20
    4d6e:	5f 93       	push	r21
    4d70:	6f 93       	push	r22
    4d72:	7f 93       	push	r23
    4d74:	8f 93       	push	r24
    4d76:	9f 93       	push	r25
    4d78:	af 93       	push	r26
    4d7a:	bf 93       	push	r27
    4d7c:	cf 93       	push	r28
    4d7e:	df 93       	push	r29
    4d80:	ef 93       	push	r30
    4d82:	ff 93       	push	r31
    4d84:	a0 91 c1 17 	lds	r26, 0x17C1	; 0x8017c1 <_ser_handle+0x4>
    4d88:	b0 91 c2 17 	lds	r27, 0x17C2	; 0x8017c2 <_ser_handle+0x5>
    4d8c:	10 97       	sbiw	r26, 0x00	; 0
    4d8e:	11 f1       	breq	.+68     	; 0x4dd4 <__vector_51+0x7a>
    4d90:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d94:	14 96       	adiw	r26, 0x04	; 4
    4d96:	ed 91       	ld	r30, X+
    4d98:	fc 91       	ld	r31, X
    4d9a:	15 97       	sbiw	r26, 0x05	; 5
    4d9c:	93 81       	ldd	r25, Z+3	; 0x03
    4d9e:	82 81       	ldd	r24, Z+2	; 0x02
    4da0:	25 81       	ldd	r18, Z+5	; 0x05
    4da2:	98 1b       	sub	r25, r24
    4da4:	92 23       	and	r25, r18
    4da6:	84 81       	ldd	r24, Z+4	; 0x04
    4da8:	98 17       	cp	r25, r24
    4daa:	61 f0       	breq	.+24     	; 0x4dc4 <__vector_51+0x6a>
    4dac:	83 81       	ldd	r24, Z+3	; 0x03
    4dae:	26 95       	lsr	r18
    4db0:	28 23       	and	r18, r24
    4db2:	c0 81       	ld	r28, Z
    4db4:	d1 81       	ldd	r29, Z+1	; 0x01
    4db6:	c2 0f       	add	r28, r18
    4db8:	d1 1d       	adc	r29, r1
    4dba:	68 83       	st	Y, r22
    4dbc:	8f 5f       	subi	r24, 0xFF	; 255
    4dbe:	95 81       	ldd	r25, Z+5	; 0x05
    4dc0:	89 23       	and	r24, r25
    4dc2:	83 83       	std	Z+3, r24	; 0x03
    4dc4:	16 96       	adiw	r26, 0x06	; 6
    4dc6:	ed 91       	ld	r30, X+
    4dc8:	fc 91       	ld	r31, X
    4dca:	17 97       	sbiw	r26, 0x07	; 7
    4dcc:	30 97       	sbiw	r30, 0x00	; 0
    4dce:	11 f0       	breq	.+4      	; 0x4dd4 <__vector_51+0x7a>
    4dd0:	cd 01       	movw	r24, r26
    4dd2:	19 95       	eicall
    4dd4:	ff 91       	pop	r31
    4dd6:	ef 91       	pop	r30
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	bf 91       	pop	r27
    4dde:	af 91       	pop	r26
    4de0:	9f 91       	pop	r25
    4de2:	8f 91       	pop	r24
    4de4:	7f 91       	pop	r23
    4de6:	6f 91       	pop	r22
    4de8:	5f 91       	pop	r21
    4dea:	4f 91       	pop	r20
    4dec:	3f 91       	pop	r19
    4dee:	2f 91       	pop	r18
    4df0:	0f 90       	pop	r0
    4df2:	0b be       	out	0x3b, r0	; 59
    4df4:	0f 90       	pop	r0
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	0f 90       	pop	r0
    4dfa:	1f 90       	pop	r1
    4dfc:	18 95       	reti

00004dfe <__vector_52>:
    4dfe:	1f 92       	push	r1
    4e00:	0f 92       	push	r0
    4e02:	0f b6       	in	r0, 0x3f	; 63
    4e04:	0f 92       	push	r0
    4e06:	11 24       	eor	r1, r1
    4e08:	0b b6       	in	r0, 0x3b	; 59
    4e0a:	0f 92       	push	r0
    4e0c:	2f 93       	push	r18
    4e0e:	8f 93       	push	r24
    4e10:	9f 93       	push	r25
    4e12:	af 93       	push	r26
    4e14:	bf 93       	push	r27
    4e16:	ef 93       	push	r30
    4e18:	ff 93       	push	r31
    4e1a:	e0 91 c1 17 	lds	r30, 0x17C1	; 0x8017c1 <_ser_handle+0x4>
    4e1e:	f0 91 c2 17 	lds	r31, 0x17C2	; 0x8017c2 <_ser_handle+0x5>
    4e22:	30 97       	sbiw	r30, 0x00	; 0
    4e24:	b9 f0       	breq	.+46     	; 0x4e54 <__vector_52+0x56>
    4e26:	02 80       	ldd	r0, Z+2	; 0x02
    4e28:	f3 81       	ldd	r31, Z+3	; 0x03
    4e2a:	e0 2d       	mov	r30, r0
    4e2c:	93 81       	ldd	r25, Z+3	; 0x03
    4e2e:	82 81       	ldd	r24, Z+2	; 0x02
    4e30:	98 17       	cp	r25, r24
    4e32:	b1 f0       	breq	.+44     	; 0x4e60 <__vector_52+0x62>
    4e34:	92 81       	ldd	r25, Z+2	; 0x02
    4e36:	85 81       	ldd	r24, Z+5	; 0x05
    4e38:	28 2f       	mov	r18, r24
    4e3a:	26 95       	lsr	r18
    4e3c:	29 23       	and	r18, r25
    4e3e:	a0 81       	ld	r26, Z
    4e40:	b1 81       	ldd	r27, Z+1	; 0x01
    4e42:	a2 0f       	add	r26, r18
    4e44:	b1 1d       	adc	r27, r1
    4e46:	2c 91       	ld	r18, X
    4e48:	9f 5f       	subi	r25, 0xFF	; 255
    4e4a:	89 23       	and	r24, r25
    4e4c:	82 83       	std	Z+2, r24	; 0x02
    4e4e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e52:	0b c0       	rjmp	.+22     	; 0x4e6a <__vector_52+0x6c>
    4e54:	e1 ed       	ldi	r30, 0xD1	; 209
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	80 81       	ld	r24, Z
    4e5a:	8f 7d       	andi	r24, 0xDF	; 223
    4e5c:	80 83       	st	Z, r24
    4e5e:	05 c0       	rjmp	.+10     	; 0x4e6a <__vector_52+0x6c>
    4e60:	e1 ed       	ldi	r30, 0xD1	; 209
    4e62:	f0 e0       	ldi	r31, 0x00	; 0
    4e64:	80 81       	ld	r24, Z
    4e66:	8f 7d       	andi	r24, 0xDF	; 223
    4e68:	80 83       	st	Z, r24
    4e6a:	ff 91       	pop	r31
    4e6c:	ef 91       	pop	r30
    4e6e:	bf 91       	pop	r27
    4e70:	af 91       	pop	r26
    4e72:	9f 91       	pop	r25
    4e74:	8f 91       	pop	r24
    4e76:	2f 91       	pop	r18
    4e78:	0f 90       	pop	r0
    4e7a:	0b be       	out	0x3b, r0	; 59
    4e7c:	0f 90       	pop	r0
    4e7e:	0f be       	out	0x3f, r0	; 63
    4e80:	0f 90       	pop	r0
    4e82:	1f 90       	pop	r1
    4e84:	18 95       	reti

00004e86 <__vector_54>:
    4e86:	1f 92       	push	r1
    4e88:	0f 92       	push	r0
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	0f 92       	push	r0
    4e8e:	11 24       	eor	r1, r1
    4e90:	0b b6       	in	r0, 0x3b	; 59
    4e92:	0f 92       	push	r0
    4e94:	2f 93       	push	r18
    4e96:	3f 93       	push	r19
    4e98:	4f 93       	push	r20
    4e9a:	5f 93       	push	r21
    4e9c:	6f 93       	push	r22
    4e9e:	7f 93       	push	r23
    4ea0:	8f 93       	push	r24
    4ea2:	9f 93       	push	r25
    4ea4:	af 93       	push	r26
    4ea6:	bf 93       	push	r27
    4ea8:	cf 93       	push	r28
    4eaa:	df 93       	push	r29
    4eac:	ef 93       	push	r30
    4eae:	ff 93       	push	r31
    4eb0:	a0 91 c3 17 	lds	r26, 0x17C3	; 0x8017c3 <_ser_handle+0x6>
    4eb4:	b0 91 c4 17 	lds	r27, 0x17C4	; 0x8017c4 <_ser_handle+0x7>
    4eb8:	10 97       	sbiw	r26, 0x00	; 0
    4eba:	11 f1       	breq	.+68     	; 0x4f00 <__vector_54+0x7a>
    4ebc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4ec0:	14 96       	adiw	r26, 0x04	; 4
    4ec2:	ed 91       	ld	r30, X+
    4ec4:	fc 91       	ld	r31, X
    4ec6:	15 97       	sbiw	r26, 0x05	; 5
    4ec8:	93 81       	ldd	r25, Z+3	; 0x03
    4eca:	82 81       	ldd	r24, Z+2	; 0x02
    4ecc:	25 81       	ldd	r18, Z+5	; 0x05
    4ece:	98 1b       	sub	r25, r24
    4ed0:	92 23       	and	r25, r18
    4ed2:	84 81       	ldd	r24, Z+4	; 0x04
    4ed4:	98 17       	cp	r25, r24
    4ed6:	61 f0       	breq	.+24     	; 0x4ef0 <__vector_54+0x6a>
    4ed8:	83 81       	ldd	r24, Z+3	; 0x03
    4eda:	26 95       	lsr	r18
    4edc:	28 23       	and	r18, r24
    4ede:	c0 81       	ld	r28, Z
    4ee0:	d1 81       	ldd	r29, Z+1	; 0x01
    4ee2:	c2 0f       	add	r28, r18
    4ee4:	d1 1d       	adc	r29, r1
    4ee6:	68 83       	st	Y, r22
    4ee8:	8f 5f       	subi	r24, 0xFF	; 255
    4eea:	95 81       	ldd	r25, Z+5	; 0x05
    4eec:	89 23       	and	r24, r25
    4eee:	83 83       	std	Z+3, r24	; 0x03
    4ef0:	16 96       	adiw	r26, 0x06	; 6
    4ef2:	ed 91       	ld	r30, X+
    4ef4:	fc 91       	ld	r31, X
    4ef6:	17 97       	sbiw	r26, 0x07	; 7
    4ef8:	30 97       	sbiw	r30, 0x00	; 0
    4efa:	11 f0       	breq	.+4      	; 0x4f00 <__vector_54+0x7a>
    4efc:	cd 01       	movw	r24, r26
    4efe:	19 95       	eicall
    4f00:	ff 91       	pop	r31
    4f02:	ef 91       	pop	r30
    4f04:	df 91       	pop	r29
    4f06:	cf 91       	pop	r28
    4f08:	bf 91       	pop	r27
    4f0a:	af 91       	pop	r26
    4f0c:	9f 91       	pop	r25
    4f0e:	8f 91       	pop	r24
    4f10:	7f 91       	pop	r23
    4f12:	6f 91       	pop	r22
    4f14:	5f 91       	pop	r21
    4f16:	4f 91       	pop	r20
    4f18:	3f 91       	pop	r19
    4f1a:	2f 91       	pop	r18
    4f1c:	0f 90       	pop	r0
    4f1e:	0b be       	out	0x3b, r0	; 59
    4f20:	0f 90       	pop	r0
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	0f 90       	pop	r0
    4f26:	1f 90       	pop	r1
    4f28:	18 95       	reti

00004f2a <__vector_55>:
    4f2a:	1f 92       	push	r1
    4f2c:	0f 92       	push	r0
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	0f 92       	push	r0
    4f32:	11 24       	eor	r1, r1
    4f34:	0b b6       	in	r0, 0x3b	; 59
    4f36:	0f 92       	push	r0
    4f38:	2f 93       	push	r18
    4f3a:	8f 93       	push	r24
    4f3c:	9f 93       	push	r25
    4f3e:	af 93       	push	r26
    4f40:	bf 93       	push	r27
    4f42:	ef 93       	push	r30
    4f44:	ff 93       	push	r31
    4f46:	e0 91 c3 17 	lds	r30, 0x17C3	; 0x8017c3 <_ser_handle+0x6>
    4f4a:	f0 91 c4 17 	lds	r31, 0x17C4	; 0x8017c4 <_ser_handle+0x7>
    4f4e:	30 97       	sbiw	r30, 0x00	; 0
    4f50:	b9 f0       	breq	.+46     	; 0x4f80 <__vector_55+0x56>
    4f52:	02 80       	ldd	r0, Z+2	; 0x02
    4f54:	f3 81       	ldd	r31, Z+3	; 0x03
    4f56:	e0 2d       	mov	r30, r0
    4f58:	93 81       	ldd	r25, Z+3	; 0x03
    4f5a:	82 81       	ldd	r24, Z+2	; 0x02
    4f5c:	98 17       	cp	r25, r24
    4f5e:	b1 f0       	breq	.+44     	; 0x4f8c <__vector_55+0x62>
    4f60:	92 81       	ldd	r25, Z+2	; 0x02
    4f62:	85 81       	ldd	r24, Z+5	; 0x05
    4f64:	28 2f       	mov	r18, r24
    4f66:	26 95       	lsr	r18
    4f68:	29 23       	and	r18, r25
    4f6a:	a0 81       	ld	r26, Z
    4f6c:	b1 81       	ldd	r27, Z+1	; 0x01
    4f6e:	a2 0f       	add	r26, r18
    4f70:	b1 1d       	adc	r27, r1
    4f72:	2c 91       	ld	r18, X
    4f74:	9f 5f       	subi	r25, 0xFF	; 255
    4f76:	89 23       	and	r24, r25
    4f78:	82 83       	std	Z+2, r24	; 0x02
    4f7a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f7e:	0b c0       	rjmp	.+22     	; 0x4f96 <__vector_55+0x6c>
    4f80:	e1 e3       	ldi	r30, 0x31	; 49
    4f82:	f1 e0       	ldi	r31, 0x01	; 1
    4f84:	80 81       	ld	r24, Z
    4f86:	8f 7d       	andi	r24, 0xDF	; 223
    4f88:	80 83       	st	Z, r24
    4f8a:	05 c0       	rjmp	.+10     	; 0x4f96 <__vector_55+0x6c>
    4f8c:	e1 e3       	ldi	r30, 0x31	; 49
    4f8e:	f1 e0       	ldi	r31, 0x01	; 1
    4f90:	80 81       	ld	r24, Z
    4f92:	8f 7d       	andi	r24, 0xDF	; 223
    4f94:	80 83       	st	Z, r24
    4f96:	ff 91       	pop	r31
    4f98:	ef 91       	pop	r30
    4f9a:	bf 91       	pop	r27
    4f9c:	af 91       	pop	r26
    4f9e:	9f 91       	pop	r25
    4fa0:	8f 91       	pop	r24
    4fa2:	2f 91       	pop	r18
    4fa4:	0f 90       	pop	r0
    4fa6:	0b be       	out	0x3b, r0	; 59
    4fa8:	0f 90       	pop	r0
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	0f 90       	pop	r0
    4fae:	1f 90       	pop	r1
    4fb0:	18 95       	reti

00004fb2 <usart_getchar>:
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	1f 92       	push	r1
    4fb8:	cd b7       	in	r28, 0x3d	; 61
    4fba:	de b7       	in	r29, 0x3e	; 62
    4fbc:	be 01       	movw	r22, r28
    4fbe:	6f 5f       	subi	r22, 0xFF	; 255
    4fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fc2:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <_com_serial_instance>
    4fc6:	90 91 c6 17 	lds	r25, 0x17C6	; 0x8017c6 <_com_serial_instance+0x1>
    4fca:	7b dd       	rcall	.-1290   	; 0x4ac2 <serial_getByte>
    4fcc:	81 11       	cpse	r24, r1
    4fce:	f6 cf       	rjmp	.-20     	; 0x4fbc <usart_getchar+0xa>
    4fd0:	89 81       	ldd	r24, Y+1	; 0x01
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	0f 90       	pop	r0
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	08 95       	ret

00004fdc <usart_putchar>:
    4fdc:	68 2f       	mov	r22, r24
    4fde:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <_com_serial_instance>
    4fe2:	90 91 c6 17 	lds	r25, 0x17C6	; 0x8017c6 <_com_serial_instance+0x1>
    4fe6:	ed dc       	rcall	.-1574   	; 0x49c2 <serial_sendByte>
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	08 95       	ret

00004fee <stdio_initialise>:
    4fee:	8f 92       	push	r8
    4ff0:	9f 92       	push	r9
    4ff2:	af 92       	push	r10
    4ff4:	cf 92       	push	r12
    4ff6:	ef 92       	push	r14
    4ff8:	0f 93       	push	r16
    4ffa:	81 2c       	mov	r8, r1
    4ffc:	91 2c       	mov	r9, r1
    4ffe:	68 94       	set
    5000:	aa 24       	eor	r10, r10
    5002:	a7 f8       	bld	r10, 7
    5004:	68 94       	set
    5006:	cc 24       	eor	r12, r12
    5008:	c7 f8       	bld	r12, 7
    500a:	e1 2c       	mov	r14, r1
    500c:	00 e0       	ldi	r16, 0x00	; 0
    500e:	23 e0       	ldi	r18, 0x03	; 3
    5010:	40 e0       	ldi	r20, 0x00	; 0
    5012:	51 ee       	ldi	r21, 0xE1	; 225
    5014:	60 e0       	ldi	r22, 0x00	; 0
    5016:	70 e0       	ldi	r23, 0x00	; 0
    5018:	32 dc       	rcall	.-1948   	; 0x487e <serial_create>
    501a:	90 93 c6 17 	sts	0x17C6, r25	; 0x8017c6 <_com_serial_instance+0x1>
    501e:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <_com_serial_instance>
    5022:	ed e0       	ldi	r30, 0x0D	; 13
    5024:	f8 e1       	ldi	r31, 0x18	; 24
    5026:	87 e1       	ldi	r24, 0x17	; 23
    5028:	92 e0       	ldi	r25, 0x02	; 2
    502a:	91 83       	std	Z+1, r25	; 0x01
    502c:	80 83       	st	Z, r24
    502e:	93 83       	std	Z+3, r25	; 0x03
    5030:	82 83       	std	Z+2, r24	; 0x02
    5032:	0f 91       	pop	r16
    5034:	ef 90       	pop	r14
    5036:	cf 90       	pop	r12
    5038:	af 90       	pop	r10
    503a:	9f 90       	pop	r9
    503c:	8f 90       	pop	r8
    503e:	08 95       	ret

00005040 <_turn_off>:
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	fc 01       	movw	r30, r24
    5044:	ee 0f       	add	r30, r30
    5046:	ff 1f       	adc	r31, r31
    5048:	e8 0f       	add	r30, r24
    504a:	f9 1f       	adc	r31, r25
    504c:	ee 0f       	add	r30, r30
    504e:	ff 1f       	adc	r31, r31
    5050:	e9 53       	subi	r30, 0x39	; 57
    5052:	f8 4e       	sbci	r31, 0xE8	; 232
    5054:	23 81       	ldd	r18, Z+3	; 0x03
    5056:	21 11       	cpse	r18, r1
    5058:	1f c0       	rjmp	.+62     	; 0x5098 <_turn_off+0x58>
    505a:	9c 01       	movw	r18, r24
    505c:	22 0f       	add	r18, r18
    505e:	33 1f       	adc	r19, r19
    5060:	f9 01       	movw	r30, r18
    5062:	e8 0f       	add	r30, r24
    5064:	f9 1f       	adc	r31, r25
    5066:	ee 0f       	add	r30, r30
    5068:	ff 1f       	adc	r31, r31
    506a:	e9 53       	subi	r30, 0x39	; 57
    506c:	f8 4e       	sbci	r31, 0xE8	; 232
    506e:	a0 81       	ld	r26, Z
    5070:	b1 81       	ldd	r27, Z+1	; 0x01
    5072:	4c 91       	ld	r20, X
    5074:	f9 01       	movw	r30, r18
    5076:	e8 0f       	add	r30, r24
    5078:	f9 1f       	adc	r31, r25
    507a:	ee 0f       	add	r30, r30
    507c:	ff 1f       	adc	r31, r31
    507e:	e9 53       	subi	r30, 0x39	; 57
    5080:	f8 4e       	sbci	r31, 0xE8	; 232
    5082:	81 e0       	ldi	r24, 0x01	; 1
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	02 80       	ldd	r0, Z+2	; 0x02
    5088:	02 c0       	rjmp	.+4      	; 0x508e <_turn_off+0x4e>
    508a:	88 0f       	add	r24, r24
    508c:	99 1f       	adc	r25, r25
    508e:	0a 94       	dec	r0
    5090:	e2 f7       	brpl	.-8      	; 0x508a <_turn_off+0x4a>
    5092:	84 2b       	or	r24, r20
    5094:	8c 93       	st	X, r24
    5096:	08 95       	ret
    5098:	fc 01       	movw	r30, r24
    509a:	ee 0f       	add	r30, r30
    509c:	ff 1f       	adc	r31, r31
    509e:	df 01       	movw	r26, r30
    50a0:	a8 0f       	add	r26, r24
    50a2:	b9 1f       	adc	r27, r25
    50a4:	aa 0f       	add	r26, r26
    50a6:	bb 1f       	adc	r27, r27
    50a8:	a9 53       	subi	r26, 0x39	; 57
    50aa:	b8 4e       	sbci	r27, 0xE8	; 232
    50ac:	0d 90       	ld	r0, X+
    50ae:	bc 91       	ld	r27, X
    50b0:	a0 2d       	mov	r26, r0
    50b2:	2c 91       	ld	r18, X
    50b4:	e8 0f       	add	r30, r24
    50b6:	f9 1f       	adc	r31, r25
    50b8:	ee 0f       	add	r30, r30
    50ba:	ff 1f       	adc	r31, r31
    50bc:	e9 53       	subi	r30, 0x39	; 57
    50be:	f8 4e       	sbci	r31, 0xE8	; 232
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	02 80       	ldd	r0, Z+2	; 0x02
    50c6:	02 c0       	rjmp	.+4      	; 0x50cc <_turn_off+0x8c>
    50c8:	88 0f       	add	r24, r24
    50ca:	99 1f       	adc	r25, r25
    50cc:	0a 94       	dec	r0
    50ce:	e2 f7       	brpl	.-8      	; 0x50c8 <_turn_off+0x88>
    50d0:	80 95       	com	r24
    50d2:	82 23       	and	r24, r18
    50d4:	8c 93       	st	X, r24
    50d6:	08 95       	ret

000050d8 <_turn_on>:
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	fc 01       	movw	r30, r24
    50dc:	ee 0f       	add	r30, r30
    50de:	ff 1f       	adc	r31, r31
    50e0:	e8 0f       	add	r30, r24
    50e2:	f9 1f       	adc	r31, r25
    50e4:	ee 0f       	add	r30, r30
    50e6:	ff 1f       	adc	r31, r31
    50e8:	e9 53       	subi	r30, 0x39	; 57
    50ea:	f8 4e       	sbci	r31, 0xE8	; 232
    50ec:	23 81       	ldd	r18, Z+3	; 0x03
    50ee:	21 11       	cpse	r18, r1
    50f0:	20 c0       	rjmp	.+64     	; 0x5132 <_turn_on+0x5a>
    50f2:	9c 01       	movw	r18, r24
    50f4:	22 0f       	add	r18, r18
    50f6:	33 1f       	adc	r19, r19
    50f8:	f9 01       	movw	r30, r18
    50fa:	e8 0f       	add	r30, r24
    50fc:	f9 1f       	adc	r31, r25
    50fe:	ee 0f       	add	r30, r30
    5100:	ff 1f       	adc	r31, r31
    5102:	e9 53       	subi	r30, 0x39	; 57
    5104:	f8 4e       	sbci	r31, 0xE8	; 232
    5106:	a0 81       	ld	r26, Z
    5108:	b1 81       	ldd	r27, Z+1	; 0x01
    510a:	4c 91       	ld	r20, X
    510c:	f9 01       	movw	r30, r18
    510e:	e8 0f       	add	r30, r24
    5110:	f9 1f       	adc	r31, r25
    5112:	ee 0f       	add	r30, r30
    5114:	ff 1f       	adc	r31, r31
    5116:	e9 53       	subi	r30, 0x39	; 57
    5118:	f8 4e       	sbci	r31, 0xE8	; 232
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	02 80       	ldd	r0, Z+2	; 0x02
    5120:	02 c0       	rjmp	.+4      	; 0x5126 <_turn_on+0x4e>
    5122:	88 0f       	add	r24, r24
    5124:	99 1f       	adc	r25, r25
    5126:	0a 94       	dec	r0
    5128:	e2 f7       	brpl	.-8      	; 0x5122 <_turn_on+0x4a>
    512a:	80 95       	com	r24
    512c:	84 23       	and	r24, r20
    512e:	8c 93       	st	X, r24
    5130:	08 95       	ret
    5132:	fc 01       	movw	r30, r24
    5134:	ee 0f       	add	r30, r30
    5136:	ff 1f       	adc	r31, r31
    5138:	df 01       	movw	r26, r30
    513a:	a8 0f       	add	r26, r24
    513c:	b9 1f       	adc	r27, r25
    513e:	aa 0f       	add	r26, r26
    5140:	bb 1f       	adc	r27, r27
    5142:	a9 53       	subi	r26, 0x39	; 57
    5144:	b8 4e       	sbci	r27, 0xE8	; 232
    5146:	0d 90       	ld	r0, X+
    5148:	bc 91       	ld	r27, X
    514a:	a0 2d       	mov	r26, r0
    514c:	2c 91       	ld	r18, X
    514e:	e8 0f       	add	r30, r24
    5150:	f9 1f       	adc	r31, r25
    5152:	ee 0f       	add	r30, r30
    5154:	ff 1f       	adc	r31, r31
    5156:	e9 53       	subi	r30, 0x39	; 57
    5158:	f8 4e       	sbci	r31, 0xE8	; 232
    515a:	81 e0       	ldi	r24, 0x01	; 1
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	02 80       	ldd	r0, Z+2	; 0x02
    5160:	02 c0       	rjmp	.+4      	; 0x5166 <_turn_on+0x8e>
    5162:	88 0f       	add	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	0a 94       	dec	r0
    5168:	e2 f7       	brpl	.-8      	; 0x5162 <_turn_on+0x8a>
    516a:	82 2b       	or	r24, r18
    516c:	8c 93       	st	X, r24
    516e:	08 95       	ret

00005170 <_hal_led_task>:
    5170:	cc 24       	eor	r12, r12
    5172:	c3 94       	inc	r12
    5174:	d1 2c       	mov	r13, r1
    5176:	68 94       	set
    5178:	bb 24       	eor	r11, r11
    517a:	b2 f8       	bld	r11, 2
    517c:	c7 ec       	ldi	r28, 0xC7	; 199
    517e:	d7 e1       	ldi	r29, 0x17	; 23
    5180:	10 e0       	ldi	r17, 0x00	; 0
    5182:	8c 81       	ldd	r24, Y+4	; 0x04
    5184:	81 30       	cpi	r24, 0x01	; 1
    5186:	81 f0       	breq	.+32     	; 0x51a8 <_hal_led_task+0x38>
    5188:	18 f1       	brcs	.+70     	; 0x51d0 <_hal_led_task+0x60>
    518a:	82 30       	cpi	r24, 0x02	; 2
    518c:	61 f5       	brne	.+88     	; 0x51e6 <_hal_led_task+0x76>
    518e:	e8 81       	ld	r30, Y
    5190:	f9 81       	ldd	r31, Y+1	; 0x01
    5192:	20 81       	ld	r18, Z
    5194:	c6 01       	movw	r24, r12
    5196:	0a 80       	ldd	r0, Y+2	; 0x02
    5198:	02 c0       	rjmp	.+4      	; 0x519e <_hal_led_task+0x2e>
    519a:	88 0f       	add	r24, r24
    519c:	99 1f       	adc	r25, r25
    519e:	0a 94       	dec	r0
    51a0:	e2 f7       	brpl	.-8      	; 0x519a <_hal_led_task+0x2a>
    51a2:	82 27       	eor	r24, r18
    51a4:	80 83       	st	Z, r24
    51a6:	1f c0       	rjmp	.+62     	; 0x51e6 <_hal_led_task+0x76>
    51a8:	8d 81       	ldd	r24, Y+5	; 0x05
    51aa:	8f 5f       	subi	r24, 0xFF	; 255
    51ac:	86 30       	cpi	r24, 0x06	; 6
    51ae:	10 f4       	brcc	.+4      	; 0x51b4 <_hal_led_task+0x44>
    51b0:	8d 83       	std	Y+5, r24	; 0x05
    51b2:	19 c0       	rjmp	.+50     	; 0x51e6 <_hal_led_task+0x76>
    51b4:	1d 82       	std	Y+5, r1	; 0x05
    51b6:	e8 81       	ld	r30, Y
    51b8:	f9 81       	ldd	r31, Y+1	; 0x01
    51ba:	20 81       	ld	r18, Z
    51bc:	c6 01       	movw	r24, r12
    51be:	0a 80       	ldd	r0, Y+2	; 0x02
    51c0:	02 c0       	rjmp	.+4      	; 0x51c6 <_hal_led_task+0x56>
    51c2:	88 0f       	add	r24, r24
    51c4:	99 1f       	adc	r25, r25
    51c6:	0a 94       	dec	r0
    51c8:	e2 f7       	brpl	.-8      	; 0x51c2 <_hal_led_task+0x52>
    51ca:	82 27       	eor	r24, r18
    51cc:	80 83       	st	Z, r24
    51ce:	0b c0       	rjmp	.+22     	; 0x51e6 <_hal_led_task+0x76>
    51d0:	0d 81       	ldd	r16, Y+5	; 0x05
    51d2:	00 23       	and	r16, r16
    51d4:	29 f0       	breq	.+10     	; 0x51e0 <_hal_led_task+0x70>
    51d6:	81 2f       	mov	r24, r17
    51d8:	7f df       	rcall	.-258    	; 0x50d8 <_turn_on>
    51da:	01 50       	subi	r16, 0x01	; 1
    51dc:	0d 83       	std	Y+5, r16	; 0x05
    51de:	03 c0       	rjmp	.+6      	; 0x51e6 <_hal_led_task+0x76>
    51e0:	bc 82       	std	Y+4, r11	; 0x04
    51e2:	81 2f       	mov	r24, r17
    51e4:	2d df       	rcall	.-422    	; 0x5040 <_turn_off>
    51e6:	1f 5f       	subi	r17, 0xFF	; 255
    51e8:	26 96       	adiw	r28, 0x06	; 6
    51ea:	14 30       	cpi	r17, 0x04	; 4
    51ec:	51 f6       	brne	.-108    	; 0x5182 <_hal_led_task+0x12>
    51ee:	6c e0       	ldi	r22, 0x0C	; 12
    51f0:	70 e0       	ldi	r23, 0x00	; 0
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	0e 94 29 11 	call	0x2252	; 0x2252 <vTaskDelay>
    51fa:	c0 cf       	rjmp	.-128    	; 0x517c <_hal_led_task+0xc>

000051fc <status_leds_initialise>:
    51fc:	ef 92       	push	r14
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	08 2f       	mov	r16, r24
    520a:	80 e4       	ldi	r24, 0x40	; 64
    520c:	87 b9       	out	0x07, r24	; 7
    520e:	c7 ec       	ldi	r28, 0xC7	; 199
    5210:	d7 e1       	ldi	r29, 0x17	; 23
    5212:	0f 2e       	mov	r0, r31
    5214:	f8 e2       	ldi	r31, 0x28	; 40
    5216:	ef 2e       	mov	r14, r31
    5218:	f1 2c       	mov	r15, r1
    521a:	f0 2d       	mov	r31, r0
    521c:	f9 82       	std	Y+1, r15	; 0x01
    521e:	e8 82       	st	Y, r14
    5220:	86 e0       	ldi	r24, 0x06	; 6
    5222:	8a 83       	std	Y+2, r24	; 0x02
    5224:	1b 82       	std	Y+3, r1	; 0x03
    5226:	14 e0       	ldi	r17, 0x04	; 4
    5228:	1c 83       	std	Y+4, r17	; 0x04
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	09 df       	rcall	.-494    	; 0x5040 <_turn_off>
    522e:	80 e8       	ldi	r24, 0x80	; 128
    5230:	87 b9       	out	0x07, r24	; 7
    5232:	ff 82       	std	Y+7, r15	; 0x07
    5234:	ee 82       	std	Y+6, r14	; 0x06
    5236:	87 e0       	ldi	r24, 0x07	; 7
    5238:	88 87       	std	Y+8, r24	; 0x08
    523a:	19 86       	std	Y+9, r1	; 0x09
    523c:	1a 87       	std	Y+10, r17	; 0x0a
    523e:	81 e0       	ldi	r24, 0x01	; 1
    5240:	ff de       	rcall	.-514    	; 0x5040 <_turn_off>
    5242:	80 e2       	ldi	r24, 0x20	; 32
    5244:	83 bb       	out	0x13, r24	; 19
    5246:	84 e3       	ldi	r24, 0x34	; 52
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	9d 87       	std	Y+13, r25	; 0x0d
    524c:	8c 87       	std	Y+12, r24	; 0x0c
    524e:	85 e0       	ldi	r24, 0x05	; 5
    5250:	8e 87       	std	Y+14, r24	; 0x0e
    5252:	1f 86       	std	Y+15, r1	; 0x0f
    5254:	18 8b       	std	Y+16, r17	; 0x10
    5256:	82 e0       	ldi	r24, 0x02	; 2
    5258:	f3 de       	rcall	.-538    	; 0x5040 <_turn_off>
    525a:	80 e1       	ldi	r24, 0x10	; 16
    525c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5260:	82 e0       	ldi	r24, 0x02	; 2
    5262:	91 e0       	ldi	r25, 0x01	; 1
    5264:	9b 8b       	std	Y+19, r25	; 0x13
    5266:	8a 8b       	std	Y+18, r24	; 0x12
    5268:	1c 8b       	std	Y+20, r17	; 0x14
    526a:	1d 8a       	std	Y+21, r1	; 0x15
    526c:	1e 8b       	std	Y+22, r17	; 0x16
    526e:	83 e0       	ldi	r24, 0x03	; 3
    5270:	e7 de       	rcall	.-562    	; 0x5040 <_turn_off>
    5272:	e1 2c       	mov	r14, r1
    5274:	f1 2c       	mov	r15, r1
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	40 ec       	ldi	r20, 0xC0	; 192
    527c:	50 e0       	ldi	r21, 0x00	; 0
    527e:	61 ee       	ldi	r22, 0xE1	; 225
    5280:	77 e0       	ldi	r23, 0x07	; 7
    5282:	88 eb       	ldi	r24, 0xB8	; 184
    5284:	98 e2       	ldi	r25, 0x28	; 40
    5286:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xTaskCreate>
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	ff 90       	pop	r15
    5294:	ef 90       	pop	r14
    5296:	08 95       	ret

00005298 <status_leds_slowBlink>:
    5298:	cf 93       	push	r28
    529a:	df 93       	push	r29
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	fc 01       	movw	r30, r24
    52a0:	ee 0f       	add	r30, r30
    52a2:	ff 1f       	adc	r31, r31
    52a4:	df 01       	movw	r26, r30
    52a6:	a8 0f       	add	r26, r24
    52a8:	b9 1f       	adc	r27, r25
    52aa:	aa 0f       	add	r26, r26
    52ac:	bb 1f       	adc	r27, r27
    52ae:	a9 53       	subi	r26, 0x39	; 57
    52b0:	b8 4e       	sbci	r27, 0xE8	; 232
    52b2:	cd 91       	ld	r28, X+
    52b4:	dc 91       	ld	r29, X
    52b6:	11 97       	sbiw	r26, 0x01	; 1
    52b8:	48 81       	ld	r20, Y
    52ba:	21 e0       	ldi	r18, 0x01	; 1
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	12 96       	adiw	r26, 0x02	; 2
    52c0:	0c 90       	ld	r0, X
    52c2:	12 97       	sbiw	r26, 0x02	; 2
    52c4:	02 c0       	rjmp	.+4      	; 0x52ca <status_leds_slowBlink+0x32>
    52c6:	22 0f       	add	r18, r18
    52c8:	33 1f       	adc	r19, r19
    52ca:	0a 94       	dec	r0
    52cc:	e2 f7       	brpl	.-8      	; 0x52c6 <status_leds_slowBlink+0x2e>
    52ce:	24 27       	eor	r18, r20
    52d0:	28 83       	st	Y, r18
    52d2:	fd 01       	movw	r30, r26
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	84 83       	std	Z+4, r24	; 0x04
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	08 95       	ret

000052de <status_leds_fastBlink>:
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	fc 01       	movw	r30, r24
    52e6:	ee 0f       	add	r30, r30
    52e8:	ff 1f       	adc	r31, r31
    52ea:	df 01       	movw	r26, r30
    52ec:	a8 0f       	add	r26, r24
    52ee:	b9 1f       	adc	r27, r25
    52f0:	aa 0f       	add	r26, r26
    52f2:	bb 1f       	adc	r27, r27
    52f4:	a9 53       	subi	r26, 0x39	; 57
    52f6:	b8 4e       	sbci	r27, 0xE8	; 232
    52f8:	cd 91       	ld	r28, X+
    52fa:	dc 91       	ld	r29, X
    52fc:	11 97       	sbiw	r26, 0x01	; 1
    52fe:	48 81       	ld	r20, Y
    5300:	21 e0       	ldi	r18, 0x01	; 1
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	12 96       	adiw	r26, 0x02	; 2
    5306:	0c 90       	ld	r0, X
    5308:	12 97       	sbiw	r26, 0x02	; 2
    530a:	02 c0       	rjmp	.+4      	; 0x5310 <status_leds_fastBlink+0x32>
    530c:	22 0f       	add	r18, r18
    530e:	33 1f       	adc	r19, r19
    5310:	0a 94       	dec	r0
    5312:	e2 f7       	brpl	.-8      	; 0x530c <status_leds_fastBlink+0x2e>
    5314:	24 27       	eor	r18, r20
    5316:	28 83       	st	Y, r18
    5318:	fd 01       	movw	r30, r26
    531a:	82 e0       	ldi	r24, 0x02	; 2
    531c:	84 83       	std	Z+4, r24	; 0x04
    531e:	df 91       	pop	r29
    5320:	cf 91       	pop	r28
    5322:	08 95       	ret

00005324 <status_leds_ledOn>:
    5324:	28 2f       	mov	r18, r24
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	f9 01       	movw	r30, r18
    532a:	ee 0f       	add	r30, r30
    532c:	ff 1f       	adc	r31, r31
    532e:	e2 0f       	add	r30, r18
    5330:	f3 1f       	adc	r31, r19
    5332:	ee 0f       	add	r30, r30
    5334:	ff 1f       	adc	r31, r31
    5336:	e9 53       	subi	r30, 0x39	; 57
    5338:	f8 4e       	sbci	r31, 0xE8	; 232
    533a:	93 e0       	ldi	r25, 0x03	; 3
    533c:	94 83       	std	Z+4, r25	; 0x04
    533e:	cc ce       	rjmp	.-616    	; 0x50d8 <_turn_on>
    5340:	08 95       	ret

00005342 <status_leds_ledOff>:
    5342:	28 2f       	mov	r18, r24
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	f9 01       	movw	r30, r18
    5348:	ee 0f       	add	r30, r30
    534a:	ff 1f       	adc	r31, r31
    534c:	e2 0f       	add	r30, r18
    534e:	f3 1f       	adc	r31, r19
    5350:	ee 0f       	add	r30, r30
    5352:	ff 1f       	adc	r31, r31
    5354:	e9 53       	subi	r30, 0x39	; 57
    5356:	f8 4e       	sbci	r31, 0xE8	; 232
    5358:	94 e0       	ldi	r25, 0x04	; 4
    535a:	94 83       	std	Z+4, r25	; 0x04
    535c:	71 ce       	rjmp	.-798    	; 0x5040 <_turn_off>
    535e:	08 95       	ret

00005360 <status_leds_longPuls>:
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	fc 01       	movw	r30, r24
    5364:	ee 0f       	add	r30, r30
    5366:	ff 1f       	adc	r31, r31
    5368:	df 01       	movw	r26, r30
    536a:	a8 0f       	add	r26, r24
    536c:	b9 1f       	adc	r27, r25
    536e:	aa 0f       	add	r26, r26
    5370:	bb 1f       	adc	r27, r27
    5372:	a9 53       	subi	r26, 0x39	; 57
    5374:	b8 4e       	sbci	r27, 0xE8	; 232
    5376:	26 e0       	ldi	r18, 0x06	; 6
    5378:	15 96       	adiw	r26, 0x05	; 5
    537a:	2c 93       	st	X, r18
    537c:	15 97       	sbiw	r26, 0x05	; 5
    537e:	fd 01       	movw	r30, r26
    5380:	14 82       	std	Z+4, r1	; 0x04
    5382:	08 95       	ret

00005384 <status_leds_shortPuls>:
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	fc 01       	movw	r30, r24
    5388:	ee 0f       	add	r30, r30
    538a:	ff 1f       	adc	r31, r31
    538c:	df 01       	movw	r26, r30
    538e:	a8 0f       	add	r26, r24
    5390:	b9 1f       	adc	r27, r25
    5392:	aa 0f       	add	r26, r26
    5394:	bb 1f       	adc	r27, r27
    5396:	a9 53       	subi	r26, 0x39	; 57
    5398:	b8 4e       	sbci	r27, 0xE8	; 232
    539a:	15 96       	adiw	r26, 0x05	; 5
    539c:	1c 92       	st	X, r1
    539e:	15 97       	sbiw	r26, 0x05	; 5
    53a0:	fd 01       	movw	r30, r26
    53a2:	14 82       	std	Z+4, r1	; 0x04
    53a4:	08 95       	ret

000053a6 <_initTwiInterface>:
    53a6:	80 91 ed 17 	lds	r24, 0x17ED	; 0x8017ed <_twiIsInitiated>
    53aa:	81 11       	cpse	r24, r1
    53ac:	0c c0       	rjmp	.+24     	; 0x53c6 <_initTwiInterface+0x20>
    53ae:	8c e0       	ldi	r24, 0x0C	; 12
    53b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    53b4:	8f ef       	ldi	r24, 0xFF	; 255
    53b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53ba:	84 e0       	ldi	r24, 0x04	; 4
    53bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <_twiIsInitiated>
    53c6:	08 95       	ret

000053c8 <twiCreate>:
    53c8:	af 92       	push	r10
    53ca:	bf 92       	push	r11
    53cc:	cf 92       	push	r12
    53ce:	df 92       	push	r13
    53d0:	ef 92       	push	r14
    53d2:	ff 92       	push	r15
    53d4:	0f 93       	push	r16
    53d6:	1f 93       	push	r17
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
    53dc:	a8 2e       	mov	r10, r24
    53de:	b6 2e       	mov	r11, r22
    53e0:	69 01       	movw	r12, r18
    53e2:	7a 01       	movw	r14, r20
    53e4:	84 e0       	ldi	r24, 0x04	; 4
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	5f d3       	rcall	.+1726   	; 0x5aa8 <malloc>
    53ea:	ec 01       	movw	r28, r24
    53ec:	89 2b       	or	r24, r25
    53ee:	61 f1       	breq	.+88     	; 0x5448 <twiCreate+0x80>
    53f0:	a8 82       	st	Y, r10
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	b8 12       	cpse	r11, r24
    53f6:	12 c0       	rjmp	.+36     	; 0x541c <twiCreate+0x54>
    53f8:	c7 01       	movw	r24, r14
    53fa:	b6 01       	movw	r22, r12
    53fc:	20 ea       	ldi	r18, 0xA0	; 160
    53fe:	36 e8       	ldi	r19, 0x86	; 134
    5400:	41 e0       	ldi	r20, 0x01	; 1
    5402:	50 e0       	ldi	r21, 0x00	; 0
    5404:	27 d3       	rcall	.+1614   	; 0x5a54 <__udivmodsi4>
    5406:	da 01       	movw	r26, r20
    5408:	c9 01       	movw	r24, r18
    540a:	40 97       	sbiw	r24, 0x10	; 16
    540c:	a1 09       	sbc	r26, r1
    540e:	b1 09       	sbc	r27, r1
    5410:	b6 95       	lsr	r27
    5412:	a7 95       	ror	r26
    5414:	97 95       	ror	r25
    5416:	87 95       	ror	r24
    5418:	89 83       	std	Y+1, r24	; 0x01
    541a:	11 c0       	rjmp	.+34     	; 0x543e <twiCreate+0x76>
    541c:	c7 01       	movw	r24, r14
    541e:	b6 01       	movw	r22, r12
    5420:	20 e8       	ldi	r18, 0x80	; 128
    5422:	3a e1       	ldi	r19, 0x1A	; 26
    5424:	46 e0       	ldi	r20, 0x06	; 6
    5426:	50 e0       	ldi	r21, 0x00	; 0
    5428:	15 d3       	rcall	.+1578   	; 0x5a54 <__udivmodsi4>
    542a:	da 01       	movw	r26, r20
    542c:	c9 01       	movw	r24, r18
    542e:	40 97       	sbiw	r24, 0x10	; 16
    5430:	a1 09       	sbc	r26, r1
    5432:	b1 09       	sbc	r27, r1
    5434:	b6 95       	lsr	r27
    5436:	a7 95       	ror	r26
    5438:	97 95       	ror	r25
    543a:	87 95       	ror	r24
    543c:	89 83       	std	Y+1, r24	; 0x01
    543e:	1b 83       	std	Y+3, r17	; 0x03
    5440:	0a 83       	std	Y+2, r16	; 0x02
    5442:	8c 2f       	mov	r24, r28
    5444:	9d 2f       	mov	r25, r29
    5446:	02 c0       	rjmp	.+4      	; 0x544c <twiCreate+0x84>
    5448:	80 e0       	ldi	r24, 0x00	; 0
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	df 91       	pop	r29
    544e:	cf 91       	pop	r28
    5450:	1f 91       	pop	r17
    5452:	0f 91       	pop	r16
    5454:	ff 90       	pop	r15
    5456:	ef 90       	pop	r14
    5458:	df 90       	pop	r13
    545a:	cf 90       	pop	r12
    545c:	bf 90       	pop	r11
    545e:	af 90       	pop	r10
    5460:	08 95       	ret

00005462 <twiIsBusy>:
    5462:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5466:	81 70       	andi	r24, 0x01	; 1
    5468:	08 95       	ret

0000546a <twiTransmit>:
    546a:	ff 92       	push	r15
    546c:	0f 93       	push	r16
    546e:	1f 93       	push	r17
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	d1 f1       	breq	.+116    	; 0x54ec <twiTransmit+0x82>
    5478:	4a 30       	cpi	r20, 0x0A	; 10
    547a:	d0 f5       	brcc	.+116    	; 0x54f0 <twiTransmit+0x86>
    547c:	f4 2e       	mov	r15, r20
    547e:	8b 01       	movw	r16, r22
    5480:	ec 01       	movw	r28, r24
    5482:	ef df       	rcall	.-34     	; 0x5462 <twiIsBusy>
    5484:	81 11       	cpse	r24, r1
    5486:	36 c0       	rjmp	.+108    	; 0x54f4 <twiTransmit+0x8a>
    5488:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiCurrentHandler>
    548c:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <_twiCurrentHandler+0x1>
    5490:	c8 17       	cp	r28, r24
    5492:	d9 07       	cpc	r29, r25
    5494:	41 f0       	breq	.+16     	; 0x54a6 <twiTransmit+0x3c>
    5496:	87 df       	rcall	.-242    	; 0x53a6 <_initTwiInterface>
    5498:	89 81       	ldd	r24, Y+1	; 0x01
    549a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    549e:	d0 93 e1 17 	sts	0x17E1, r29	; 0x8017e1 <_twiCurrentHandler+0x1>
    54a2:	c0 93 e0 17 	sts	0x17E0, r28	; 0x8017e0 <_twiCurrentHandler>
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	8f 0d       	add	r24, r15
    54aa:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <_twiMessageLen>
    54ae:	88 81       	ld	r24, Y
    54b0:	88 0f       	add	r24, r24
    54b2:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_twiMessageBuffer>
    54b6:	ff 20       	and	r15, r15
    54b8:	89 f0       	breq	.+34     	; 0x54dc <twiTransmit+0x72>
    54ba:	f8 01       	movw	r30, r16
    54bc:	a4 ee       	ldi	r26, 0xE4	; 228
    54be:	b7 e1       	ldi	r27, 0x17	; 23
    54c0:	4f ef       	ldi	r20, 0xFF	; 255
    54c2:	4f 0d       	add	r20, r15
    54c4:	64 2f       	mov	r22, r20
    54c6:	70 e0       	ldi	r23, 0x00	; 0
    54c8:	cb 01       	movw	r24, r22
    54ca:	01 96       	adiw	r24, 0x01	; 1
    54cc:	b8 01       	movw	r22, r16
    54ce:	68 0f       	add	r22, r24
    54d0:	79 1f       	adc	r23, r25
    54d2:	81 91       	ld	r24, Z+
    54d4:	8d 93       	st	X+, r24
    54d6:	e6 17       	cp	r30, r22
    54d8:	f7 07       	cpc	r31, r23
    54da:	d9 f7       	brne	.-10     	; 0x54d2 <twiTransmit+0x68>
    54dc:	88 ef       	ldi	r24, 0xF8	; 248
    54de:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_twiCurrentState>
    54e2:	85 ea       	ldi	r24, 0xA5	; 165
    54e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e8:	84 e0       	ldi	r24, 0x04	; 4
    54ea:	05 c0       	rjmp	.+10     	; 0x54f6 <twiTransmit+0x8c>
    54ec:	86 e0       	ldi	r24, 0x06	; 6
    54ee:	03 c0       	rjmp	.+6      	; 0x54f6 <twiTransmit+0x8c>
    54f0:	87 e0       	ldi	r24, 0x07	; 7
    54f2:	01 c0       	rjmp	.+2      	; 0x54f6 <twiTransmit+0x8c>
    54f4:	82 e0       	ldi	r24, 0x02	; 2
    54f6:	df 91       	pop	r29
    54f8:	cf 91       	pop	r28
    54fa:	1f 91       	pop	r17
    54fc:	0f 91       	pop	r16
    54fe:	ff 90       	pop	r15
    5500:	08 95       	ret

00005502 <twiReceive>:
    5502:	1f 93       	push	r17
    5504:	cf 93       	push	r28
    5506:	df 93       	push	r29
    5508:	00 97       	sbiw	r24, 0x00	; 0
    550a:	29 f1       	breq	.+74     	; 0x5556 <twiReceive+0x54>
    550c:	6b 30       	cpi	r22, 0x0B	; 11
    550e:	28 f5       	brcc	.+74     	; 0x555a <twiReceive+0x58>
    5510:	16 2f       	mov	r17, r22
    5512:	ec 01       	movw	r28, r24
    5514:	a6 df       	rcall	.-180    	; 0x5462 <twiIsBusy>
    5516:	81 11       	cpse	r24, r1
    5518:	22 c0       	rjmp	.+68     	; 0x555e <twiReceive+0x5c>
    551a:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiCurrentHandler>
    551e:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <_twiCurrentHandler+0x1>
    5522:	c8 17       	cp	r28, r24
    5524:	d9 07       	cpc	r29, r25
    5526:	41 f0       	breq	.+16     	; 0x5538 <twiReceive+0x36>
    5528:	3e df       	rcall	.-388    	; 0x53a6 <_initTwiInterface>
    552a:	89 81       	ldd	r24, Y+1	; 0x01
    552c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5530:	d0 93 e1 17 	sts	0x17E1, r29	; 0x8017e1 <_twiCurrentHandler+0x1>
    5534:	c0 93 e0 17 	sts	0x17E0, r28	; 0x8017e0 <_twiCurrentHandler>
    5538:	10 93 e2 17 	sts	0x17E2, r17	; 0x8017e2 <_twiMessageLen>
    553c:	88 81       	ld	r24, Y
    553e:	88 0f       	add	r24, r24
    5540:	81 60       	ori	r24, 0x01	; 1
    5542:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_twiMessageBuffer>
    5546:	88 ef       	ldi	r24, 0xF8	; 248
    5548:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_twiCurrentState>
    554c:	85 ea       	ldi	r24, 0xA5	; 165
    554e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5552:	85 e0       	ldi	r24, 0x05	; 5
    5554:	05 c0       	rjmp	.+10     	; 0x5560 <twiReceive+0x5e>
    5556:	86 e0       	ldi	r24, 0x06	; 6
    5558:	03 c0       	rjmp	.+6      	; 0x5560 <twiReceive+0x5e>
    555a:	87 e0       	ldi	r24, 0x07	; 7
    555c:	01 c0       	rjmp	.+2      	; 0x5560 <twiReceive+0x5e>
    555e:	82 e0       	ldi	r24, 0x02	; 2
    5560:	df 91       	pop	r29
    5562:	cf 91       	pop	r28
    5564:	1f 91       	pop	r17
    5566:	08 95       	ret

00005568 <__vector_39>:
    5568:	1f 92       	push	r1
    556a:	0f 92       	push	r0
    556c:	0f b6       	in	r0, 0x3f	; 63
    556e:	0f 92       	push	r0
    5570:	11 24       	eor	r1, r1
    5572:	0b b6       	in	r0, 0x3b	; 59
    5574:	0f 92       	push	r0
    5576:	2f 93       	push	r18
    5578:	3f 93       	push	r19
    557a:	4f 93       	push	r20
    557c:	5f 93       	push	r21
    557e:	6f 93       	push	r22
    5580:	7f 93       	push	r23
    5582:	8f 93       	push	r24
    5584:	9f 93       	push	r25
    5586:	af 93       	push	r26
    5588:	bf 93       	push	r27
    558a:	ef 93       	push	r30
    558c:	ff 93       	push	r31
    558e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5592:	8e 2f       	mov	r24, r30
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	fc 01       	movw	r30, r24
    5598:	38 97       	sbiw	r30, 0x08	; 8
    559a:	e1 35       	cpi	r30, 0x51	; 81
    559c:	f1 05       	cpc	r31, r1
    559e:	08 f0       	brcs	.+2      	; 0x55a2 <__vector_39+0x3a>
    55a0:	75 c0       	rjmp	.+234    	; 0x568c <__vector_39+0x124>
    55a2:	88 27       	eor	r24, r24
    55a4:	e4 58       	subi	r30, 0x84	; 132
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	8f 4f       	sbci	r24, 0xFF	; 255
    55aa:	76 c2       	rjmp	.+1260   	; 0x5a98 <__tablejump2__>
    55ac:	10 92 df 17 	sts	0x17DF, r1	; 0x8017df <_index.1885>
    55b0:	e0 91 df 17 	lds	r30, 0x17DF	; 0x8017df <_index.1885>
    55b4:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <_twiMessageLen>
    55b8:	e8 17       	cp	r30, r24
    55ba:	70 f4       	brcc	.+28     	; 0x55d8 <__vector_39+0x70>
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	8e 0f       	add	r24, r30
    55c0:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <_index.1885>
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	ed 51       	subi	r30, 0x1D	; 29
    55c8:	f8 4e       	sbci	r31, 0xE8	; 232
    55ca:	80 81       	ld	r24, Z
    55cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55d0:	85 e8       	ldi	r24, 0x85	; 133
    55d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55d6:	72 c0       	rjmp	.+228    	; 0x56bc <__vector_39+0x154>
    55d8:	84 e9       	ldi	r24, 0x94	; 148
    55da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55de:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiCurrentHandler>
    55e2:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <_twiCurrentHandler+0x1>
    55e6:	dc 01       	movw	r26, r24
    55e8:	12 96       	adiw	r26, 0x02	; 2
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	13 97       	sbiw	r26, 0x03	; 3
    55f0:	30 97       	sbiw	r30, 0x00	; 0
    55f2:	09 f4       	brne	.+2      	; 0x55f6 <__vector_39+0x8e>
    55f4:	63 c0       	rjmp	.+198    	; 0x56bc <__vector_39+0x154>
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	40 e0       	ldi	r20, 0x00	; 0
    55fa:	50 e0       	ldi	r21, 0x00	; 0
    55fc:	64 e0       	ldi	r22, 0x04	; 4
    55fe:	19 95       	eicall
    5600:	5d c0       	rjmp	.+186    	; 0x56bc <__vector_39+0x154>
    5602:	e0 91 df 17 	lds	r30, 0x17DF	; 0x8017df <_index.1885>
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	8e 0f       	add	r24, r30
    560a:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <_index.1885>
    560e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	ed 51       	subi	r30, 0x1D	; 29
    5616:	f8 4e       	sbci	r31, 0xE8	; 232
    5618:	80 83       	st	Z, r24
    561a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    561e:	80 34       	cpi	r24, 0x40	; 64
    5620:	11 f4       	brne	.+4      	; 0x5626 <__vector_39+0xbe>
    5622:	10 92 df 17 	sts	0x17DF, r1	; 0x8017df <_index.1885>
    5626:	20 91 df 17 	lds	r18, 0x17DF	; 0x8017df <_index.1885>
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <_twiMessageLen>
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	01 97       	sbiw	r24, 0x01	; 1
    5634:	28 17       	cp	r18, r24
    5636:	39 07       	cpc	r19, r25
    5638:	24 f4       	brge	.+8      	; 0x5642 <__vector_39+0xda>
    563a:	85 ec       	ldi	r24, 0xC5	; 197
    563c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5640:	3d c0       	rjmp	.+122    	; 0x56bc <__vector_39+0x154>
    5642:	85 e8       	ldi	r24, 0x85	; 133
    5644:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5648:	39 c0       	rjmp	.+114    	; 0x56bc <__vector_39+0x154>
    564a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    564e:	e0 91 df 17 	lds	r30, 0x17DF	; 0x8017df <_index.1885>
    5652:	f0 e0       	ldi	r31, 0x00	; 0
    5654:	ed 51       	subi	r30, 0x1D	; 29
    5656:	f8 4e       	sbci	r31, 0xE8	; 232
    5658:	80 83       	st	Z, r24
    565a:	84 e9       	ldi	r24, 0x94	; 148
    565c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5660:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiCurrentHandler>
    5664:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <_twiCurrentHandler+0x1>
    5668:	dc 01       	movw	r26, r24
    566a:	12 96       	adiw	r26, 0x02	; 2
    566c:	ed 91       	ld	r30, X+
    566e:	fc 91       	ld	r31, X
    5670:	13 97       	sbiw	r26, 0x03	; 3
    5672:	30 97       	sbiw	r30, 0x00	; 0
    5674:	19 f1       	breq	.+70     	; 0x56bc <__vector_39+0x154>
    5676:	20 91 e2 17 	lds	r18, 0x17E2	; 0x8017e2 <_twiMessageLen>
    567a:	43 ee       	ldi	r20, 0xE3	; 227
    567c:	57 e1       	ldi	r21, 0x17	; 23
    567e:	65 e0       	ldi	r22, 0x05	; 5
    5680:	19 95       	eicall
    5682:	1c c0       	rjmp	.+56     	; 0x56bc <__vector_39+0x154>
    5684:	85 ea       	ldi	r24, 0xA5	; 165
    5686:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    568a:	18 c0       	rjmp	.+48     	; 0x56bc <__vector_39+0x154>
    568c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5690:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_twiCurrentState>
    5694:	84 e0       	ldi	r24, 0x04	; 4
    5696:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    569a:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiCurrentHandler>
    569e:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <_twiCurrentHandler+0x1>
    56a2:	dc 01       	movw	r26, r24
    56a4:	12 96       	adiw	r26, 0x02	; 2
    56a6:	ed 91       	ld	r30, X+
    56a8:	fc 91       	ld	r31, X
    56aa:	13 97       	sbiw	r26, 0x03	; 3
    56ac:	30 97       	sbiw	r30, 0x00	; 0
    56ae:	31 f0       	breq	.+12     	; 0x56bc <__vector_39+0x154>
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	40 e0       	ldi	r20, 0x00	; 0
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <_twiCurrentState>
    56ba:	19 95       	eicall
    56bc:	ff 91       	pop	r31
    56be:	ef 91       	pop	r30
    56c0:	bf 91       	pop	r27
    56c2:	af 91       	pop	r26
    56c4:	9f 91       	pop	r25
    56c6:	8f 91       	pop	r24
    56c8:	7f 91       	pop	r23
    56ca:	6f 91       	pop	r22
    56cc:	5f 91       	pop	r21
    56ce:	4f 91       	pop	r20
    56d0:	3f 91       	pop	r19
    56d2:	2f 91       	pop	r18
    56d4:	0f 90       	pop	r0
    56d6:	0b be       	out	0x3b, r0	; 59
    56d8:	0f 90       	pop	r0
    56da:	0f be       	out	0x3f, r0	; 63
    56dc:	0f 90       	pop	r0
    56de:	1f 90       	pop	r1
    56e0:	18 95       	reti

000056e2 <fifo_init>:
    56e2:	fc 01       	movw	r30, r24
    56e4:	41 11       	cpse	r20, r1
    56e6:	01 c0       	rjmp	.+2      	; 0x56ea <fifo_init+0x8>
    56e8:	00 d3       	rcall	.+1536   	; 0x5cea <abort>
    56ea:	84 2f       	mov	r24, r20
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	9c 01       	movw	r18, r24
    56f0:	21 50       	subi	r18, 0x01	; 1
    56f2:	31 09       	sbc	r19, r1
    56f4:	82 23       	and	r24, r18
    56f6:	93 23       	and	r25, r19
    56f8:	89 2b       	or	r24, r25
    56fa:	09 f0       	breq	.+2      	; 0x56fe <fifo_init+0x1c>
    56fc:	f6 d2       	rcall	.+1516   	; 0x5cea <abort>
    56fe:	41 38       	cpi	r20, 0x81	; 129
    5700:	08 f0       	brcs	.+2      	; 0x5704 <fifo_init+0x22>
    5702:	f3 d2       	rcall	.+1510   	; 0x5cea <abort>
    5704:	12 82       	std	Z+2, r1	; 0x02
    5706:	13 82       	std	Z+3, r1	; 0x03
    5708:	44 83       	std	Z+4, r20	; 0x04
    570a:	44 0f       	add	r20, r20
    570c:	41 50       	subi	r20, 0x01	; 1
    570e:	45 83       	std	Z+5, r20	; 0x05
    5710:	71 83       	std	Z+1, r23	; 0x01
    5712:	60 83       	st	Z, r22
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	08 95       	ret

0000571a <__subsf3>:
    571a:	50 58       	subi	r21, 0x80	; 128

0000571c <__addsf3>:
    571c:	bb 27       	eor	r27, r27
    571e:	aa 27       	eor	r26, r26
    5720:	0e d0       	rcall	.+28     	; 0x573e <__addsf3x>
    5722:	21 c1       	rjmp	.+578    	; 0x5966 <__fp_round>
    5724:	12 d1       	rcall	.+548    	; 0x594a <__fp_pscA>
    5726:	30 f0       	brcs	.+12     	; 0x5734 <__addsf3+0x18>
    5728:	17 d1       	rcall	.+558    	; 0x5958 <__fp_pscB>
    572a:	20 f0       	brcs	.+8      	; 0x5734 <__addsf3+0x18>
    572c:	31 f4       	brne	.+12     	; 0x573a <__addsf3+0x1e>
    572e:	9f 3f       	cpi	r25, 0xFF	; 255
    5730:	11 f4       	brne	.+4      	; 0x5736 <__addsf3+0x1a>
    5732:	1e f4       	brtc	.+6      	; 0x573a <__addsf3+0x1e>
    5734:	07 c1       	rjmp	.+526    	; 0x5944 <__fp_nan>
    5736:	0e f4       	brtc	.+2      	; 0x573a <__addsf3+0x1e>
    5738:	e0 95       	com	r30
    573a:	e7 fb       	bst	r30, 7
    573c:	fd c0       	rjmp	.+506    	; 0x5938 <__fp_inf>

0000573e <__addsf3x>:
    573e:	e9 2f       	mov	r30, r25
    5740:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__fp_split3>
    5744:	78 f3       	brcs	.-34     	; 0x5724 <__addsf3+0x8>
    5746:	ba 17       	cp	r27, r26
    5748:	62 07       	cpc	r22, r18
    574a:	73 07       	cpc	r23, r19
    574c:	84 07       	cpc	r24, r20
    574e:	95 07       	cpc	r25, r21
    5750:	20 f0       	brcs	.+8      	; 0x575a <__addsf3x+0x1c>
    5752:	79 f4       	brne	.+30     	; 0x5772 <__addsf3x+0x34>
    5754:	a6 f5       	brtc	.+104    	; 0x57be <__addsf3x+0x80>
    5756:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__fp_zero>
    575a:	0e f4       	brtc	.+2      	; 0x575e <__addsf3x+0x20>
    575c:	e0 95       	com	r30
    575e:	0b 2e       	mov	r0, r27
    5760:	ba 2f       	mov	r27, r26
    5762:	a0 2d       	mov	r26, r0
    5764:	0b 01       	movw	r0, r22
    5766:	b9 01       	movw	r22, r18
    5768:	90 01       	movw	r18, r0
    576a:	0c 01       	movw	r0, r24
    576c:	ca 01       	movw	r24, r20
    576e:	a0 01       	movw	r20, r0
    5770:	11 24       	eor	r1, r1
    5772:	ff 27       	eor	r31, r31
    5774:	59 1b       	sub	r21, r25
    5776:	99 f0       	breq	.+38     	; 0x579e <__addsf3x+0x60>
    5778:	59 3f       	cpi	r21, 0xF9	; 249
    577a:	50 f4       	brcc	.+20     	; 0x5790 <__addsf3x+0x52>
    577c:	50 3e       	cpi	r21, 0xE0	; 224
    577e:	68 f1       	brcs	.+90     	; 0x57da <__addsf3x+0x9c>
    5780:	1a 16       	cp	r1, r26
    5782:	f0 40       	sbci	r31, 0x00	; 0
    5784:	a2 2f       	mov	r26, r18
    5786:	23 2f       	mov	r18, r19
    5788:	34 2f       	mov	r19, r20
    578a:	44 27       	eor	r20, r20
    578c:	58 5f       	subi	r21, 0xF8	; 248
    578e:	f3 cf       	rjmp	.-26     	; 0x5776 <__addsf3x+0x38>
    5790:	46 95       	lsr	r20
    5792:	37 95       	ror	r19
    5794:	27 95       	ror	r18
    5796:	a7 95       	ror	r26
    5798:	f0 40       	sbci	r31, 0x00	; 0
    579a:	53 95       	inc	r21
    579c:	c9 f7       	brne	.-14     	; 0x5790 <__addsf3x+0x52>
    579e:	7e f4       	brtc	.+30     	; 0x57be <__addsf3x+0x80>
    57a0:	1f 16       	cp	r1, r31
    57a2:	ba 0b       	sbc	r27, r26
    57a4:	62 0b       	sbc	r22, r18
    57a6:	73 0b       	sbc	r23, r19
    57a8:	84 0b       	sbc	r24, r20
    57aa:	ba f0       	brmi	.+46     	; 0x57da <__addsf3x+0x9c>
    57ac:	91 50       	subi	r25, 0x01	; 1
    57ae:	a1 f0       	breq	.+40     	; 0x57d8 <__addsf3x+0x9a>
    57b0:	ff 0f       	add	r31, r31
    57b2:	bb 1f       	adc	r27, r27
    57b4:	66 1f       	adc	r22, r22
    57b6:	77 1f       	adc	r23, r23
    57b8:	88 1f       	adc	r24, r24
    57ba:	c2 f7       	brpl	.-16     	; 0x57ac <__addsf3x+0x6e>
    57bc:	0e c0       	rjmp	.+28     	; 0x57da <__addsf3x+0x9c>
    57be:	ba 0f       	add	r27, r26
    57c0:	62 1f       	adc	r22, r18
    57c2:	73 1f       	adc	r23, r19
    57c4:	84 1f       	adc	r24, r20
    57c6:	48 f4       	brcc	.+18     	; 0x57da <__addsf3x+0x9c>
    57c8:	87 95       	ror	r24
    57ca:	77 95       	ror	r23
    57cc:	67 95       	ror	r22
    57ce:	b7 95       	ror	r27
    57d0:	f7 95       	ror	r31
    57d2:	9e 3f       	cpi	r25, 0xFE	; 254
    57d4:	08 f0       	brcs	.+2      	; 0x57d8 <__addsf3x+0x9a>
    57d6:	b1 cf       	rjmp	.-158    	; 0x573a <__addsf3+0x1e>
    57d8:	93 95       	inc	r25
    57da:	88 0f       	add	r24, r24
    57dc:	08 f0       	brcs	.+2      	; 0x57e0 <__addsf3x+0xa2>
    57de:	99 27       	eor	r25, r25
    57e0:	ee 0f       	add	r30, r30
    57e2:	97 95       	ror	r25
    57e4:	87 95       	ror	r24
    57e6:	08 95       	ret

000057e8 <__divsf3>:
    57e8:	0d d0       	rcall	.+26     	; 0x5804 <__divsf3x>
    57ea:	bd c0       	rjmp	.+378    	; 0x5966 <__fp_round>
    57ec:	b5 d0       	rcall	.+362    	; 0x5958 <__fp_pscB>
    57ee:	48 f0       	brcs	.+18     	; 0x5802 <__divsf3+0x1a>
    57f0:	ac d0       	rcall	.+344    	; 0x594a <__fp_pscA>
    57f2:	38 f0       	brcs	.+14     	; 0x5802 <__divsf3+0x1a>
    57f4:	21 f4       	brne	.+8      	; 0x57fe <__divsf3+0x16>
    57f6:	5f 3f       	cpi	r21, 0xFF	; 255
    57f8:	21 f0       	breq	.+8      	; 0x5802 <__divsf3+0x1a>
    57fa:	9e c0       	rjmp	.+316    	; 0x5938 <__fp_inf>
    57fc:	51 11       	cpse	r21, r1
    57fe:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__fp_szero>
    5802:	a0 c0       	rjmp	.+320    	; 0x5944 <__fp_nan>

00005804 <__divsf3x>:
    5804:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__fp_split3>
    5808:	88 f3       	brcs	.-30     	; 0x57ec <__divsf3+0x4>

0000580a <__divsf3_pse>:
    580a:	99 23       	and	r25, r25
    580c:	b9 f3       	breq	.-18     	; 0x57fc <__divsf3+0x14>
    580e:	55 23       	and	r21, r21
    5810:	a1 f3       	breq	.-24     	; 0x57fa <__divsf3+0x12>
    5812:	95 1b       	sub	r25, r21
    5814:	55 0b       	sbc	r21, r21
    5816:	bb 27       	eor	r27, r27
    5818:	aa 27       	eor	r26, r26
    581a:	62 17       	cp	r22, r18
    581c:	73 07       	cpc	r23, r19
    581e:	84 07       	cpc	r24, r20
    5820:	38 f0       	brcs	.+14     	; 0x5830 <__divsf3_pse+0x26>
    5822:	9f 5f       	subi	r25, 0xFF	; 255
    5824:	5f 4f       	sbci	r21, 0xFF	; 255
    5826:	22 0f       	add	r18, r18
    5828:	33 1f       	adc	r19, r19
    582a:	44 1f       	adc	r20, r20
    582c:	aa 1f       	adc	r26, r26
    582e:	a9 f3       	breq	.-22     	; 0x581a <__divsf3_pse+0x10>
    5830:	34 d0       	rcall	.+104    	; 0x589a <__divsf3_pse+0x90>
    5832:	0e 2e       	mov	r0, r30
    5834:	3a f0       	brmi	.+14     	; 0x5844 <__divsf3_pse+0x3a>
    5836:	e0 e8       	ldi	r30, 0x80	; 128
    5838:	31 d0       	rcall	.+98     	; 0x589c <__divsf3_pse+0x92>
    583a:	91 50       	subi	r25, 0x01	; 1
    583c:	50 40       	sbci	r21, 0x00	; 0
    583e:	e6 95       	lsr	r30
    5840:	00 1c       	adc	r0, r0
    5842:	ca f7       	brpl	.-14     	; 0x5836 <__divsf3_pse+0x2c>
    5844:	2a d0       	rcall	.+84     	; 0x589a <__divsf3_pse+0x90>
    5846:	fe 2f       	mov	r31, r30
    5848:	28 d0       	rcall	.+80     	; 0x589a <__divsf3_pse+0x90>
    584a:	66 0f       	add	r22, r22
    584c:	77 1f       	adc	r23, r23
    584e:	88 1f       	adc	r24, r24
    5850:	bb 1f       	adc	r27, r27
    5852:	26 17       	cp	r18, r22
    5854:	37 07       	cpc	r19, r23
    5856:	48 07       	cpc	r20, r24
    5858:	ab 07       	cpc	r26, r27
    585a:	b0 e8       	ldi	r27, 0x80	; 128
    585c:	09 f0       	breq	.+2      	; 0x5860 <__divsf3_pse+0x56>
    585e:	bb 0b       	sbc	r27, r27
    5860:	80 2d       	mov	r24, r0
    5862:	bf 01       	movw	r22, r30
    5864:	ff 27       	eor	r31, r31
    5866:	93 58       	subi	r25, 0x83	; 131
    5868:	5f 4f       	sbci	r21, 0xFF	; 255
    586a:	32 f0       	brmi	.+12     	; 0x5878 <__divsf3_pse+0x6e>
    586c:	9e 3f       	cpi	r25, 0xFE	; 254
    586e:	51 05       	cpc	r21, r1
    5870:	70 f0       	brcs	.+28     	; 0x588e <__divsf3_pse+0x84>
    5872:	62 c0       	rjmp	.+196    	; 0x5938 <__fp_inf>
    5874:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__fp_szero>
    5878:	5f 3f       	cpi	r21, 0xFF	; 255
    587a:	e4 f3       	brlt	.-8      	; 0x5874 <__divsf3_pse+0x6a>
    587c:	98 3e       	cpi	r25, 0xE8	; 232
    587e:	d4 f3       	brlt	.-12     	; 0x5874 <__divsf3_pse+0x6a>
    5880:	86 95       	lsr	r24
    5882:	77 95       	ror	r23
    5884:	67 95       	ror	r22
    5886:	b7 95       	ror	r27
    5888:	f7 95       	ror	r31
    588a:	9f 5f       	subi	r25, 0xFF	; 255
    588c:	c9 f7       	brne	.-14     	; 0x5880 <__divsf3_pse+0x76>
    588e:	88 0f       	add	r24, r24
    5890:	91 1d       	adc	r25, r1
    5892:	96 95       	lsr	r25
    5894:	87 95       	ror	r24
    5896:	97 f9       	bld	r25, 7
    5898:	08 95       	ret
    589a:	e1 e0       	ldi	r30, 0x01	; 1
    589c:	66 0f       	add	r22, r22
    589e:	77 1f       	adc	r23, r23
    58a0:	88 1f       	adc	r24, r24
    58a2:	bb 1f       	adc	r27, r27
    58a4:	62 17       	cp	r22, r18
    58a6:	73 07       	cpc	r23, r19
    58a8:	84 07       	cpc	r24, r20
    58aa:	ba 07       	cpc	r27, r26
    58ac:	20 f0       	brcs	.+8      	; 0x58b6 <__divsf3_pse+0xac>
    58ae:	62 1b       	sub	r22, r18
    58b0:	73 0b       	sbc	r23, r19
    58b2:	84 0b       	sbc	r24, r20
    58b4:	ba 0b       	sbc	r27, r26
    58b6:	ee 1f       	adc	r30, r30
    58b8:	88 f7       	brcc	.-30     	; 0x589c <__divsf3_pse+0x92>
    58ba:	e0 95       	com	r30
    58bc:	08 95       	ret

000058be <__floatunsisf>:
    58be:	e8 94       	clt
    58c0:	09 c0       	rjmp	.+18     	; 0x58d4 <__floatsisf+0x12>

000058c2 <__floatsisf>:
    58c2:	97 fb       	bst	r25, 7
    58c4:	3e f4       	brtc	.+14     	; 0x58d4 <__floatsisf+0x12>
    58c6:	90 95       	com	r25
    58c8:	80 95       	com	r24
    58ca:	70 95       	com	r23
    58cc:	61 95       	neg	r22
    58ce:	7f 4f       	sbci	r23, 0xFF	; 255
    58d0:	8f 4f       	sbci	r24, 0xFF	; 255
    58d2:	9f 4f       	sbci	r25, 0xFF	; 255
    58d4:	99 23       	and	r25, r25
    58d6:	a9 f0       	breq	.+42     	; 0x5902 <__floatsisf+0x40>
    58d8:	f9 2f       	mov	r31, r25
    58da:	96 e9       	ldi	r25, 0x96	; 150
    58dc:	bb 27       	eor	r27, r27
    58de:	93 95       	inc	r25
    58e0:	f6 95       	lsr	r31
    58e2:	87 95       	ror	r24
    58e4:	77 95       	ror	r23
    58e6:	67 95       	ror	r22
    58e8:	b7 95       	ror	r27
    58ea:	f1 11       	cpse	r31, r1
    58ec:	f8 cf       	rjmp	.-16     	; 0x58de <__floatsisf+0x1c>
    58ee:	fa f4       	brpl	.+62     	; 0x592e <__floatsisf+0x6c>
    58f0:	bb 0f       	add	r27, r27
    58f2:	11 f4       	brne	.+4      	; 0x58f8 <__floatsisf+0x36>
    58f4:	60 ff       	sbrs	r22, 0
    58f6:	1b c0       	rjmp	.+54     	; 0x592e <__floatsisf+0x6c>
    58f8:	6f 5f       	subi	r22, 0xFF	; 255
    58fa:	7f 4f       	sbci	r23, 0xFF	; 255
    58fc:	8f 4f       	sbci	r24, 0xFF	; 255
    58fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5900:	16 c0       	rjmp	.+44     	; 0x592e <__floatsisf+0x6c>
    5902:	88 23       	and	r24, r24
    5904:	11 f0       	breq	.+4      	; 0x590a <__floatsisf+0x48>
    5906:	96 e9       	ldi	r25, 0x96	; 150
    5908:	11 c0       	rjmp	.+34     	; 0x592c <__floatsisf+0x6a>
    590a:	77 23       	and	r23, r23
    590c:	21 f0       	breq	.+8      	; 0x5916 <__floatsisf+0x54>
    590e:	9e e8       	ldi	r25, 0x8E	; 142
    5910:	87 2f       	mov	r24, r23
    5912:	76 2f       	mov	r23, r22
    5914:	05 c0       	rjmp	.+10     	; 0x5920 <__floatsisf+0x5e>
    5916:	66 23       	and	r22, r22
    5918:	71 f0       	breq	.+28     	; 0x5936 <__floatsisf+0x74>
    591a:	96 e8       	ldi	r25, 0x86	; 134
    591c:	86 2f       	mov	r24, r22
    591e:	70 e0       	ldi	r23, 0x00	; 0
    5920:	60 e0       	ldi	r22, 0x00	; 0
    5922:	2a f0       	brmi	.+10     	; 0x592e <__floatsisf+0x6c>
    5924:	9a 95       	dec	r25
    5926:	66 0f       	add	r22, r22
    5928:	77 1f       	adc	r23, r23
    592a:	88 1f       	adc	r24, r24
    592c:	da f7       	brpl	.-10     	; 0x5924 <__floatsisf+0x62>
    592e:	88 0f       	add	r24, r24
    5930:	96 95       	lsr	r25
    5932:	87 95       	ror	r24
    5934:	97 f9       	bld	r25, 7
    5936:	08 95       	ret

00005938 <__fp_inf>:
    5938:	97 f9       	bld	r25, 7
    593a:	9f 67       	ori	r25, 0x7F	; 127
    593c:	80 e8       	ldi	r24, 0x80	; 128
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	60 e0       	ldi	r22, 0x00	; 0
    5942:	08 95       	ret

00005944 <__fp_nan>:
    5944:	9f ef       	ldi	r25, 0xFF	; 255
    5946:	80 ec       	ldi	r24, 0xC0	; 192
    5948:	08 95       	ret

0000594a <__fp_pscA>:
    594a:	00 24       	eor	r0, r0
    594c:	0a 94       	dec	r0
    594e:	16 16       	cp	r1, r22
    5950:	17 06       	cpc	r1, r23
    5952:	18 06       	cpc	r1, r24
    5954:	09 06       	cpc	r0, r25
    5956:	08 95       	ret

00005958 <__fp_pscB>:
    5958:	00 24       	eor	r0, r0
    595a:	0a 94       	dec	r0
    595c:	12 16       	cp	r1, r18
    595e:	13 06       	cpc	r1, r19
    5960:	14 06       	cpc	r1, r20
    5962:	05 06       	cpc	r0, r21
    5964:	08 95       	ret

00005966 <__fp_round>:
    5966:	09 2e       	mov	r0, r25
    5968:	03 94       	inc	r0
    596a:	00 0c       	add	r0, r0
    596c:	11 f4       	brne	.+4      	; 0x5972 <__fp_round+0xc>
    596e:	88 23       	and	r24, r24
    5970:	52 f0       	brmi	.+20     	; 0x5986 <__fp_round+0x20>
    5972:	bb 0f       	add	r27, r27
    5974:	40 f4       	brcc	.+16     	; 0x5986 <__fp_round+0x20>
    5976:	bf 2b       	or	r27, r31
    5978:	11 f4       	brne	.+4      	; 0x597e <__fp_round+0x18>
    597a:	60 ff       	sbrs	r22, 0
    597c:	04 c0       	rjmp	.+8      	; 0x5986 <__fp_round+0x20>
    597e:	6f 5f       	subi	r22, 0xFF	; 255
    5980:	7f 4f       	sbci	r23, 0xFF	; 255
    5982:	8f 4f       	sbci	r24, 0xFF	; 255
    5984:	9f 4f       	sbci	r25, 0xFF	; 255
    5986:	08 95       	ret

00005988 <__mulsf3>:
    5988:	0c d0       	rcall	.+24     	; 0x59a2 <__mulsf3x>
    598a:	ed cf       	rjmp	.-38     	; 0x5966 <__fp_round>
    598c:	de df       	rcall	.-68     	; 0x594a <__fp_pscA>
    598e:	28 f0       	brcs	.+10     	; 0x599a <__mulsf3+0x12>
    5990:	e3 df       	rcall	.-58     	; 0x5958 <__fp_pscB>
    5992:	18 f0       	brcs	.+6      	; 0x599a <__mulsf3+0x12>
    5994:	95 23       	and	r25, r21
    5996:	09 f0       	breq	.+2      	; 0x599a <__mulsf3+0x12>
    5998:	cf cf       	rjmp	.-98     	; 0x5938 <__fp_inf>
    599a:	d4 cf       	rjmp	.-88     	; 0x5944 <__fp_nan>
    599c:	11 24       	eor	r1, r1
    599e:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__fp_szero>

000059a2 <__mulsf3x>:
    59a2:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__fp_split3>
    59a6:	90 f3       	brcs	.-28     	; 0x598c <__mulsf3+0x4>

000059a8 <__mulsf3_pse>:
    59a8:	95 9f       	mul	r25, r21
    59aa:	c1 f3       	breq	.-16     	; 0x599c <__mulsf3+0x14>
    59ac:	95 0f       	add	r25, r21
    59ae:	50 e0       	ldi	r21, 0x00	; 0
    59b0:	55 1f       	adc	r21, r21
    59b2:	62 9f       	mul	r22, r18
    59b4:	f0 01       	movw	r30, r0
    59b6:	72 9f       	mul	r23, r18
    59b8:	bb 27       	eor	r27, r27
    59ba:	f0 0d       	add	r31, r0
    59bc:	b1 1d       	adc	r27, r1
    59be:	63 9f       	mul	r22, r19
    59c0:	aa 27       	eor	r26, r26
    59c2:	f0 0d       	add	r31, r0
    59c4:	b1 1d       	adc	r27, r1
    59c6:	aa 1f       	adc	r26, r26
    59c8:	64 9f       	mul	r22, r20
    59ca:	66 27       	eor	r22, r22
    59cc:	b0 0d       	add	r27, r0
    59ce:	a1 1d       	adc	r26, r1
    59d0:	66 1f       	adc	r22, r22
    59d2:	82 9f       	mul	r24, r18
    59d4:	22 27       	eor	r18, r18
    59d6:	b0 0d       	add	r27, r0
    59d8:	a1 1d       	adc	r26, r1
    59da:	62 1f       	adc	r22, r18
    59dc:	73 9f       	mul	r23, r19
    59de:	b0 0d       	add	r27, r0
    59e0:	a1 1d       	adc	r26, r1
    59e2:	62 1f       	adc	r22, r18
    59e4:	83 9f       	mul	r24, r19
    59e6:	a0 0d       	add	r26, r0
    59e8:	61 1d       	adc	r22, r1
    59ea:	22 1f       	adc	r18, r18
    59ec:	74 9f       	mul	r23, r20
    59ee:	33 27       	eor	r19, r19
    59f0:	a0 0d       	add	r26, r0
    59f2:	61 1d       	adc	r22, r1
    59f4:	23 1f       	adc	r18, r19
    59f6:	84 9f       	mul	r24, r20
    59f8:	60 0d       	add	r22, r0
    59fa:	21 1d       	adc	r18, r1
    59fc:	82 2f       	mov	r24, r18
    59fe:	76 2f       	mov	r23, r22
    5a00:	6a 2f       	mov	r22, r26
    5a02:	11 24       	eor	r1, r1
    5a04:	9f 57       	subi	r25, 0x7F	; 127
    5a06:	50 40       	sbci	r21, 0x00	; 0
    5a08:	92 f0       	brmi	.+36     	; 0x5a2e <__mulsf3_pse+0x86>
    5a0a:	e9 f0       	breq	.+58     	; 0x5a46 <__mulsf3_pse+0x9e>
    5a0c:	88 23       	and	r24, r24
    5a0e:	4a f0       	brmi	.+18     	; 0x5a22 <__mulsf3_pse+0x7a>
    5a10:	ee 0f       	add	r30, r30
    5a12:	ff 1f       	adc	r31, r31
    5a14:	bb 1f       	adc	r27, r27
    5a16:	66 1f       	adc	r22, r22
    5a18:	77 1f       	adc	r23, r23
    5a1a:	88 1f       	adc	r24, r24
    5a1c:	91 50       	subi	r25, 0x01	; 1
    5a1e:	50 40       	sbci	r21, 0x00	; 0
    5a20:	a9 f7       	brne	.-22     	; 0x5a0c <__mulsf3_pse+0x64>
    5a22:	9e 3f       	cpi	r25, 0xFE	; 254
    5a24:	51 05       	cpc	r21, r1
    5a26:	78 f0       	brcs	.+30     	; 0x5a46 <__mulsf3_pse+0x9e>
    5a28:	87 cf       	rjmp	.-242    	; 0x5938 <__fp_inf>
    5a2a:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__fp_szero>
    5a2e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a30:	e4 f3       	brlt	.-8      	; 0x5a2a <__mulsf3_pse+0x82>
    5a32:	98 3e       	cpi	r25, 0xE8	; 232
    5a34:	d4 f3       	brlt	.-12     	; 0x5a2a <__mulsf3_pse+0x82>
    5a36:	86 95       	lsr	r24
    5a38:	77 95       	ror	r23
    5a3a:	67 95       	ror	r22
    5a3c:	b7 95       	ror	r27
    5a3e:	f7 95       	ror	r31
    5a40:	e7 95       	ror	r30
    5a42:	9f 5f       	subi	r25, 0xFF	; 255
    5a44:	c1 f7       	brne	.-16     	; 0x5a36 <__mulsf3_pse+0x8e>
    5a46:	fe 2b       	or	r31, r30
    5a48:	88 0f       	add	r24, r24
    5a4a:	91 1d       	adc	r25, r1
    5a4c:	96 95       	lsr	r25
    5a4e:	87 95       	ror	r24
    5a50:	97 f9       	bld	r25, 7
    5a52:	08 95       	ret

00005a54 <__udivmodsi4>:
    5a54:	a1 e2       	ldi	r26, 0x21	; 33
    5a56:	1a 2e       	mov	r1, r26
    5a58:	aa 1b       	sub	r26, r26
    5a5a:	bb 1b       	sub	r27, r27
    5a5c:	fd 01       	movw	r30, r26
    5a5e:	0d c0       	rjmp	.+26     	; 0x5a7a <__udivmodsi4_ep>

00005a60 <__udivmodsi4_loop>:
    5a60:	aa 1f       	adc	r26, r26
    5a62:	bb 1f       	adc	r27, r27
    5a64:	ee 1f       	adc	r30, r30
    5a66:	ff 1f       	adc	r31, r31
    5a68:	a2 17       	cp	r26, r18
    5a6a:	b3 07       	cpc	r27, r19
    5a6c:	e4 07       	cpc	r30, r20
    5a6e:	f5 07       	cpc	r31, r21
    5a70:	20 f0       	brcs	.+8      	; 0x5a7a <__udivmodsi4_ep>
    5a72:	a2 1b       	sub	r26, r18
    5a74:	b3 0b       	sbc	r27, r19
    5a76:	e4 0b       	sbc	r30, r20
    5a78:	f5 0b       	sbc	r31, r21

00005a7a <__udivmodsi4_ep>:
    5a7a:	66 1f       	adc	r22, r22
    5a7c:	77 1f       	adc	r23, r23
    5a7e:	88 1f       	adc	r24, r24
    5a80:	99 1f       	adc	r25, r25
    5a82:	1a 94       	dec	r1
    5a84:	69 f7       	brne	.-38     	; 0x5a60 <__udivmodsi4_loop>
    5a86:	60 95       	com	r22
    5a88:	70 95       	com	r23
    5a8a:	80 95       	com	r24
    5a8c:	90 95       	com	r25
    5a8e:	9b 01       	movw	r18, r22
    5a90:	ac 01       	movw	r20, r24
    5a92:	bd 01       	movw	r22, r26
    5a94:	cf 01       	movw	r24, r30
    5a96:	08 95       	ret

00005a98 <__tablejump2__>:
    5a98:	ee 0f       	add	r30, r30
    5a9a:	ff 1f       	adc	r31, r31
    5a9c:	88 1f       	adc	r24, r24
    5a9e:	8b bf       	out	0x3b, r24	; 59
    5aa0:	07 90       	elpm	r0, Z+
    5aa2:	f6 91       	elpm	r31, Z
    5aa4:	e0 2d       	mov	r30, r0
    5aa6:	19 94       	eijmp

00005aa8 <malloc>:
    5aa8:	0f 93       	push	r16
    5aaa:	1f 93       	push	r17
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	82 30       	cpi	r24, 0x02	; 2
    5ab2:	91 05       	cpc	r25, r1
    5ab4:	10 f4       	brcc	.+4      	; 0x5aba <malloc+0x12>
    5ab6:	82 e0       	ldi	r24, 0x02	; 2
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	e0 91 0b 18 	lds	r30, 0x180B	; 0x80180b <__flp>
    5abe:	f0 91 0c 18 	lds	r31, 0x180C	; 0x80180c <__flp+0x1>
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	a0 e0       	ldi	r26, 0x00	; 0
    5ac8:	b0 e0       	ldi	r27, 0x00	; 0
    5aca:	30 97       	sbiw	r30, 0x00	; 0
    5acc:	19 f1       	breq	.+70     	; 0x5b14 <malloc+0x6c>
    5ace:	40 81       	ld	r20, Z
    5ad0:	51 81       	ldd	r21, Z+1	; 0x01
    5ad2:	02 81       	ldd	r16, Z+2	; 0x02
    5ad4:	13 81       	ldd	r17, Z+3	; 0x03
    5ad6:	48 17       	cp	r20, r24
    5ad8:	59 07       	cpc	r21, r25
    5ada:	c8 f0       	brcs	.+50     	; 0x5b0e <malloc+0x66>
    5adc:	84 17       	cp	r24, r20
    5ade:	95 07       	cpc	r25, r21
    5ae0:	69 f4       	brne	.+26     	; 0x5afc <malloc+0x54>
    5ae2:	10 97       	sbiw	r26, 0x00	; 0
    5ae4:	31 f0       	breq	.+12     	; 0x5af2 <malloc+0x4a>
    5ae6:	12 96       	adiw	r26, 0x02	; 2
    5ae8:	0c 93       	st	X, r16
    5aea:	12 97       	sbiw	r26, 0x02	; 2
    5aec:	13 96       	adiw	r26, 0x03	; 3
    5aee:	1c 93       	st	X, r17
    5af0:	27 c0       	rjmp	.+78     	; 0x5b40 <malloc+0x98>
    5af2:	00 93 0b 18 	sts	0x180B, r16	; 0x80180b <__flp>
    5af6:	10 93 0c 18 	sts	0x180C, r17	; 0x80180c <__flp+0x1>
    5afa:	22 c0       	rjmp	.+68     	; 0x5b40 <malloc+0x98>
    5afc:	21 15       	cp	r18, r1
    5afe:	31 05       	cpc	r19, r1
    5b00:	19 f0       	breq	.+6      	; 0x5b08 <malloc+0x60>
    5b02:	42 17       	cp	r20, r18
    5b04:	53 07       	cpc	r21, r19
    5b06:	18 f4       	brcc	.+6      	; 0x5b0e <malloc+0x66>
    5b08:	9a 01       	movw	r18, r20
    5b0a:	bd 01       	movw	r22, r26
    5b0c:	ef 01       	movw	r28, r30
    5b0e:	df 01       	movw	r26, r30
    5b10:	f8 01       	movw	r30, r16
    5b12:	db cf       	rjmp	.-74     	; 0x5aca <malloc+0x22>
    5b14:	21 15       	cp	r18, r1
    5b16:	31 05       	cpc	r19, r1
    5b18:	f9 f0       	breq	.+62     	; 0x5b58 <malloc+0xb0>
    5b1a:	28 1b       	sub	r18, r24
    5b1c:	39 0b       	sbc	r19, r25
    5b1e:	24 30       	cpi	r18, 0x04	; 4
    5b20:	31 05       	cpc	r19, r1
    5b22:	80 f4       	brcc	.+32     	; 0x5b44 <malloc+0x9c>
    5b24:	8a 81       	ldd	r24, Y+2	; 0x02
    5b26:	9b 81       	ldd	r25, Y+3	; 0x03
    5b28:	61 15       	cp	r22, r1
    5b2a:	71 05       	cpc	r23, r1
    5b2c:	21 f0       	breq	.+8      	; 0x5b36 <malloc+0x8e>
    5b2e:	fb 01       	movw	r30, r22
    5b30:	93 83       	std	Z+3, r25	; 0x03
    5b32:	82 83       	std	Z+2, r24	; 0x02
    5b34:	04 c0       	rjmp	.+8      	; 0x5b3e <malloc+0x96>
    5b36:	90 93 0c 18 	sts	0x180C, r25	; 0x80180c <__flp+0x1>
    5b3a:	80 93 0b 18 	sts	0x180B, r24	; 0x80180b <__flp>
    5b3e:	fe 01       	movw	r30, r28
    5b40:	32 96       	adiw	r30, 0x02	; 2
    5b42:	44 c0       	rjmp	.+136    	; 0x5bcc <malloc+0x124>
    5b44:	fe 01       	movw	r30, r28
    5b46:	e2 0f       	add	r30, r18
    5b48:	f3 1f       	adc	r31, r19
    5b4a:	81 93       	st	Z+, r24
    5b4c:	91 93       	st	Z+, r25
    5b4e:	22 50       	subi	r18, 0x02	; 2
    5b50:	31 09       	sbc	r19, r1
    5b52:	39 83       	std	Y+1, r19	; 0x01
    5b54:	28 83       	st	Y, r18
    5b56:	3a c0       	rjmp	.+116    	; 0x5bcc <malloc+0x124>
    5b58:	20 91 09 18 	lds	r18, 0x1809	; 0x801809 <__brkval>
    5b5c:	30 91 0a 18 	lds	r19, 0x180A	; 0x80180a <__brkval+0x1>
    5b60:	23 2b       	or	r18, r19
    5b62:	41 f4       	brne	.+16     	; 0x5b74 <malloc+0xcc>
    5b64:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b68:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5b6c:	30 93 0a 18 	sts	0x180A, r19	; 0x80180a <__brkval+0x1>
    5b70:	20 93 09 18 	sts	0x1809, r18	; 0x801809 <__brkval>
    5b74:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5b78:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5b7c:	21 15       	cp	r18, r1
    5b7e:	31 05       	cpc	r19, r1
    5b80:	41 f4       	brne	.+16     	; 0x5b92 <malloc+0xea>
    5b82:	2d b7       	in	r18, 0x3d	; 61
    5b84:	3e b7       	in	r19, 0x3e	; 62
    5b86:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b8a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b8e:	24 1b       	sub	r18, r20
    5b90:	35 0b       	sbc	r19, r21
    5b92:	e0 91 09 18 	lds	r30, 0x1809	; 0x801809 <__brkval>
    5b96:	f0 91 0a 18 	lds	r31, 0x180A	; 0x80180a <__brkval+0x1>
    5b9a:	e2 17       	cp	r30, r18
    5b9c:	f3 07       	cpc	r31, r19
    5b9e:	a0 f4       	brcc	.+40     	; 0x5bc8 <malloc+0x120>
    5ba0:	2e 1b       	sub	r18, r30
    5ba2:	3f 0b       	sbc	r19, r31
    5ba4:	28 17       	cp	r18, r24
    5ba6:	39 07       	cpc	r19, r25
    5ba8:	78 f0       	brcs	.+30     	; 0x5bc8 <malloc+0x120>
    5baa:	ac 01       	movw	r20, r24
    5bac:	4e 5f       	subi	r20, 0xFE	; 254
    5bae:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb0:	24 17       	cp	r18, r20
    5bb2:	35 07       	cpc	r19, r21
    5bb4:	48 f0       	brcs	.+18     	; 0x5bc8 <malloc+0x120>
    5bb6:	4e 0f       	add	r20, r30
    5bb8:	5f 1f       	adc	r21, r31
    5bba:	50 93 0a 18 	sts	0x180A, r21	; 0x80180a <__brkval+0x1>
    5bbe:	40 93 09 18 	sts	0x1809, r20	; 0x801809 <__brkval>
    5bc2:	81 93       	st	Z+, r24
    5bc4:	91 93       	st	Z+, r25
    5bc6:	02 c0       	rjmp	.+4      	; 0x5bcc <malloc+0x124>
    5bc8:	e0 e0       	ldi	r30, 0x00	; 0
    5bca:	f0 e0       	ldi	r31, 0x00	; 0
    5bcc:	cf 01       	movw	r24, r30
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	1f 91       	pop	r17
    5bd4:	0f 91       	pop	r16
    5bd6:	08 95       	ret

00005bd8 <free>:
    5bd8:	cf 93       	push	r28
    5bda:	df 93       	push	r29
    5bdc:	00 97       	sbiw	r24, 0x00	; 0
    5bde:	09 f4       	brne	.+2      	; 0x5be2 <free+0xa>
    5be0:	81 c0       	rjmp	.+258    	; 0x5ce4 <free+0x10c>
    5be2:	fc 01       	movw	r30, r24
    5be4:	32 97       	sbiw	r30, 0x02	; 2
    5be6:	13 82       	std	Z+3, r1	; 0x03
    5be8:	12 82       	std	Z+2, r1	; 0x02
    5bea:	a0 91 0b 18 	lds	r26, 0x180B	; 0x80180b <__flp>
    5bee:	b0 91 0c 18 	lds	r27, 0x180C	; 0x80180c <__flp+0x1>
    5bf2:	10 97       	sbiw	r26, 0x00	; 0
    5bf4:	81 f4       	brne	.+32     	; 0x5c16 <free+0x3e>
    5bf6:	20 81       	ld	r18, Z
    5bf8:	31 81       	ldd	r19, Z+1	; 0x01
    5bfa:	82 0f       	add	r24, r18
    5bfc:	93 1f       	adc	r25, r19
    5bfe:	20 91 09 18 	lds	r18, 0x1809	; 0x801809 <__brkval>
    5c02:	30 91 0a 18 	lds	r19, 0x180A	; 0x80180a <__brkval+0x1>
    5c06:	28 17       	cp	r18, r24
    5c08:	39 07       	cpc	r19, r25
    5c0a:	51 f5       	brne	.+84     	; 0x5c60 <free+0x88>
    5c0c:	f0 93 0a 18 	sts	0x180A, r31	; 0x80180a <__brkval+0x1>
    5c10:	e0 93 09 18 	sts	0x1809, r30	; 0x801809 <__brkval>
    5c14:	67 c0       	rjmp	.+206    	; 0x5ce4 <free+0x10c>
    5c16:	ed 01       	movw	r28, r26
    5c18:	20 e0       	ldi	r18, 0x00	; 0
    5c1a:	30 e0       	ldi	r19, 0x00	; 0
    5c1c:	ce 17       	cp	r28, r30
    5c1e:	df 07       	cpc	r29, r31
    5c20:	40 f4       	brcc	.+16     	; 0x5c32 <free+0x5a>
    5c22:	4a 81       	ldd	r20, Y+2	; 0x02
    5c24:	5b 81       	ldd	r21, Y+3	; 0x03
    5c26:	9e 01       	movw	r18, r28
    5c28:	41 15       	cp	r20, r1
    5c2a:	51 05       	cpc	r21, r1
    5c2c:	f1 f0       	breq	.+60     	; 0x5c6a <free+0x92>
    5c2e:	ea 01       	movw	r28, r20
    5c30:	f5 cf       	rjmp	.-22     	; 0x5c1c <free+0x44>
    5c32:	d3 83       	std	Z+3, r29	; 0x03
    5c34:	c2 83       	std	Z+2, r28	; 0x02
    5c36:	40 81       	ld	r20, Z
    5c38:	51 81       	ldd	r21, Z+1	; 0x01
    5c3a:	84 0f       	add	r24, r20
    5c3c:	95 1f       	adc	r25, r21
    5c3e:	c8 17       	cp	r28, r24
    5c40:	d9 07       	cpc	r29, r25
    5c42:	59 f4       	brne	.+22     	; 0x5c5a <free+0x82>
    5c44:	88 81       	ld	r24, Y
    5c46:	99 81       	ldd	r25, Y+1	; 0x01
    5c48:	84 0f       	add	r24, r20
    5c4a:	95 1f       	adc	r25, r21
    5c4c:	02 96       	adiw	r24, 0x02	; 2
    5c4e:	91 83       	std	Z+1, r25	; 0x01
    5c50:	80 83       	st	Z, r24
    5c52:	8a 81       	ldd	r24, Y+2	; 0x02
    5c54:	9b 81       	ldd	r25, Y+3	; 0x03
    5c56:	93 83       	std	Z+3, r25	; 0x03
    5c58:	82 83       	std	Z+2, r24	; 0x02
    5c5a:	21 15       	cp	r18, r1
    5c5c:	31 05       	cpc	r19, r1
    5c5e:	29 f4       	brne	.+10     	; 0x5c6a <free+0x92>
    5c60:	f0 93 0c 18 	sts	0x180C, r31	; 0x80180c <__flp+0x1>
    5c64:	e0 93 0b 18 	sts	0x180B, r30	; 0x80180b <__flp>
    5c68:	3d c0       	rjmp	.+122    	; 0x5ce4 <free+0x10c>
    5c6a:	e9 01       	movw	r28, r18
    5c6c:	fb 83       	std	Y+3, r31	; 0x03
    5c6e:	ea 83       	std	Y+2, r30	; 0x02
    5c70:	49 91       	ld	r20, Y+
    5c72:	59 91       	ld	r21, Y+
    5c74:	c4 0f       	add	r28, r20
    5c76:	d5 1f       	adc	r29, r21
    5c78:	ec 17       	cp	r30, r28
    5c7a:	fd 07       	cpc	r31, r29
    5c7c:	61 f4       	brne	.+24     	; 0x5c96 <free+0xbe>
    5c7e:	80 81       	ld	r24, Z
    5c80:	91 81       	ldd	r25, Z+1	; 0x01
    5c82:	84 0f       	add	r24, r20
    5c84:	95 1f       	adc	r25, r21
    5c86:	02 96       	adiw	r24, 0x02	; 2
    5c88:	e9 01       	movw	r28, r18
    5c8a:	99 83       	std	Y+1, r25	; 0x01
    5c8c:	88 83       	st	Y, r24
    5c8e:	82 81       	ldd	r24, Z+2	; 0x02
    5c90:	93 81       	ldd	r25, Z+3	; 0x03
    5c92:	9b 83       	std	Y+3, r25	; 0x03
    5c94:	8a 83       	std	Y+2, r24	; 0x02
    5c96:	e0 e0       	ldi	r30, 0x00	; 0
    5c98:	f0 e0       	ldi	r31, 0x00	; 0
    5c9a:	12 96       	adiw	r26, 0x02	; 2
    5c9c:	8d 91       	ld	r24, X+
    5c9e:	9c 91       	ld	r25, X
    5ca0:	13 97       	sbiw	r26, 0x03	; 3
    5ca2:	00 97       	sbiw	r24, 0x00	; 0
    5ca4:	19 f0       	breq	.+6      	; 0x5cac <free+0xd4>
    5ca6:	fd 01       	movw	r30, r26
    5ca8:	dc 01       	movw	r26, r24
    5caa:	f7 cf       	rjmp	.-18     	; 0x5c9a <free+0xc2>
    5cac:	8d 91       	ld	r24, X+
    5cae:	9c 91       	ld	r25, X
    5cb0:	11 97       	sbiw	r26, 0x01	; 1
    5cb2:	9d 01       	movw	r18, r26
    5cb4:	2e 5f       	subi	r18, 0xFE	; 254
    5cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    5cb8:	82 0f       	add	r24, r18
    5cba:	93 1f       	adc	r25, r19
    5cbc:	20 91 09 18 	lds	r18, 0x1809	; 0x801809 <__brkval>
    5cc0:	30 91 0a 18 	lds	r19, 0x180A	; 0x80180a <__brkval+0x1>
    5cc4:	28 17       	cp	r18, r24
    5cc6:	39 07       	cpc	r19, r25
    5cc8:	69 f4       	brne	.+26     	; 0x5ce4 <free+0x10c>
    5cca:	30 97       	sbiw	r30, 0x00	; 0
    5ccc:	29 f4       	brne	.+10     	; 0x5cd8 <free+0x100>
    5cce:	10 92 0c 18 	sts	0x180C, r1	; 0x80180c <__flp+0x1>
    5cd2:	10 92 0b 18 	sts	0x180B, r1	; 0x80180b <__flp>
    5cd6:	02 c0       	rjmp	.+4      	; 0x5cdc <free+0x104>
    5cd8:	13 82       	std	Z+3, r1	; 0x03
    5cda:	12 82       	std	Z+2, r1	; 0x02
    5cdc:	b0 93 0a 18 	sts	0x180A, r27	; 0x80180a <__brkval+0x1>
    5ce0:	a0 93 09 18 	sts	0x1809, r26	; 0x801809 <__brkval>
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	08 95       	ret

00005cea <abort>:
    5cea:	81 e0       	ldi	r24, 0x01	; 1
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	f8 94       	cli
    5cf0:	7d c3       	rjmp	.+1786   	; 0x63ec <_exit>

00005cf2 <memcpy>:
    5cf2:	fb 01       	movw	r30, r22
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	02 c0       	rjmp	.+4      	; 0x5cfc <memcpy+0xa>
    5cf8:	01 90       	ld	r0, Z+
    5cfa:	0d 92       	st	X+, r0
    5cfc:	41 50       	subi	r20, 0x01	; 1
    5cfe:	50 40       	sbci	r21, 0x00	; 0
    5d00:	d8 f7       	brcc	.-10     	; 0x5cf8 <memcpy+0x6>
    5d02:	08 95       	ret

00005d04 <memset>:
    5d04:	dc 01       	movw	r26, r24
    5d06:	01 c0       	rjmp	.+2      	; 0x5d0a <memset+0x6>
    5d08:	6d 93       	st	X+, r22
    5d0a:	41 50       	subi	r20, 0x01	; 1
    5d0c:	50 40       	sbci	r21, 0x00	; 0
    5d0e:	e0 f7       	brcc	.-8      	; 0x5d08 <memset+0x4>
    5d10:	08 95       	ret

00005d12 <strcasestr>:
    5d12:	fb 01       	movw	r30, r22
    5d14:	51 91       	ld	r21, Z+
    5d16:	55 23       	and	r21, r21
    5d18:	b1 f0       	breq	.+44     	; 0x5d46 <strcasestr+0x34>
    5d1a:	bf 01       	movw	r22, r30
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	05 2e       	mov	r0, r21
    5d20:	4d 91       	ld	r20, X+
    5d22:	44 23       	and	r20, r20
    5d24:	69 f0       	breq	.+26     	; 0x5d40 <strcasestr+0x2e>
    5d26:	10 d0       	rcall	.+32     	; 0x5d48 <strcasestr+0x36>
    5d28:	d9 f7       	brne	.-10     	; 0x5d20 <strcasestr+0xe>
    5d2a:	cd 01       	movw	r24, r26
    5d2c:	01 90       	ld	r0, Z+
    5d2e:	00 20       	and	r0, r0
    5d30:	49 f0       	breq	.+18     	; 0x5d44 <strcasestr+0x32>
    5d32:	4d 91       	ld	r20, X+
    5d34:	41 11       	cpse	r20, r1
    5d36:	08 d0       	rcall	.+16     	; 0x5d48 <strcasestr+0x36>
    5d38:	c9 f3       	breq	.-14     	; 0x5d2c <strcasestr+0x1a>
    5d3a:	fb 01       	movw	r30, r22
    5d3c:	41 11       	cpse	r20, r1
    5d3e:	ee cf       	rjmp	.-36     	; 0x5d1c <strcasestr+0xa>
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	01 97       	sbiw	r24, 0x01	; 1
    5d46:	08 95       	ret
    5d48:	40 25       	eor	r20, r0
    5d4a:	39 f0       	breq	.+14     	; 0x5d5a <strcasestr+0x48>
    5d4c:	40 32       	cpi	r20, 0x20	; 32
    5d4e:	29 f4       	brne	.+10     	; 0x5d5a <strcasestr+0x48>
    5d50:	40 29       	or	r20, r0
    5d52:	4b 57       	subi	r20, 0x7B	; 123
    5d54:	46 5e       	subi	r20, 0xE6	; 230
    5d56:	08 f0       	brcs	.+2      	; 0x5d5a <strcasestr+0x48>
    5d58:	18 94       	sez
    5d5a:	08 95       	ret

00005d5c <strcat>:
    5d5c:	fb 01       	movw	r30, r22
    5d5e:	dc 01       	movw	r26, r24
    5d60:	0d 90       	ld	r0, X+
    5d62:	00 20       	and	r0, r0
    5d64:	e9 f7       	brne	.-6      	; 0x5d60 <strcat+0x4>
    5d66:	11 97       	sbiw	r26, 0x01	; 1
    5d68:	01 90       	ld	r0, Z+
    5d6a:	0d 92       	st	X+, r0
    5d6c:	00 20       	and	r0, r0
    5d6e:	e1 f7       	brne	.-8      	; 0x5d68 <strcat+0xc>
    5d70:	08 95       	ret

00005d72 <strcpy>:
    5d72:	fb 01       	movw	r30, r22
    5d74:	dc 01       	movw	r26, r24
    5d76:	01 90       	ld	r0, Z+
    5d78:	0d 92       	st	X+, r0
    5d7a:	00 20       	and	r0, r0
    5d7c:	e1 f7       	brne	.-8      	; 0x5d76 <strcpy+0x4>
    5d7e:	08 95       	ret

00005d80 <strncasecmp>:
    5d80:	fb 01       	movw	r30, r22
    5d82:	dc 01       	movw	r26, r24
    5d84:	41 50       	subi	r20, 0x01	; 1
    5d86:	50 40       	sbci	r21, 0x00	; 0
    5d88:	88 f0       	brcs	.+34     	; 0x5dac <strncasecmp+0x2c>
    5d8a:	8d 91       	ld	r24, X+
    5d8c:	81 34       	cpi	r24, 0x41	; 65
    5d8e:	1c f0       	brlt	.+6      	; 0x5d96 <strncasecmp+0x16>
    5d90:	8b 35       	cpi	r24, 0x5B	; 91
    5d92:	0c f4       	brge	.+2      	; 0x5d96 <strncasecmp+0x16>
    5d94:	80 5e       	subi	r24, 0xE0	; 224
    5d96:	61 91       	ld	r22, Z+
    5d98:	61 34       	cpi	r22, 0x41	; 65
    5d9a:	1c f0       	brlt	.+6      	; 0x5da2 <strncasecmp+0x22>
    5d9c:	6b 35       	cpi	r22, 0x5B	; 91
    5d9e:	0c f4       	brge	.+2      	; 0x5da2 <strncasecmp+0x22>
    5da0:	60 5e       	subi	r22, 0xE0	; 224
    5da2:	86 1b       	sub	r24, r22
    5da4:	61 11       	cpse	r22, r1
    5da6:	71 f3       	breq	.-36     	; 0x5d84 <strncasecmp+0x4>
    5da8:	99 0b       	sbc	r25, r25
    5daa:	08 95       	ret
    5dac:	88 1b       	sub	r24, r24
    5dae:	fc cf       	rjmp	.-8      	; 0x5da8 <strncasecmp+0x28>

00005db0 <printf>:
    5db0:	cf 93       	push	r28
    5db2:	df 93       	push	r29
    5db4:	cd b7       	in	r28, 0x3d	; 61
    5db6:	de b7       	in	r29, 0x3e	; 62
    5db8:	ae 01       	movw	r20, r28
    5dba:	4a 5f       	subi	r20, 0xFA	; 250
    5dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5dbe:	fa 01       	movw	r30, r20
    5dc0:	61 91       	ld	r22, Z+
    5dc2:	71 91       	ld	r23, Z+
    5dc4:	af 01       	movw	r20, r30
    5dc6:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <__iob+0x2>
    5dca:	90 91 10 18 	lds	r25, 0x1810	; 0x801810 <__iob+0x3>
    5dce:	61 d0       	rcall	.+194    	; 0x5e92 <vfprintf>
    5dd0:	df 91       	pop	r29
    5dd2:	cf 91       	pop	r28
    5dd4:	08 95       	ret

00005dd6 <puts>:
    5dd6:	0f 93       	push	r16
    5dd8:	1f 93       	push	r17
    5dda:	cf 93       	push	r28
    5ddc:	df 93       	push	r29
    5dde:	e0 91 0f 18 	lds	r30, 0x180F	; 0x80180f <__iob+0x2>
    5de2:	f0 91 10 18 	lds	r31, 0x1810	; 0x801810 <__iob+0x3>
    5de6:	23 81       	ldd	r18, Z+3	; 0x03
    5de8:	21 ff       	sbrs	r18, 1
    5dea:	1b c0       	rjmp	.+54     	; 0x5e22 <puts+0x4c>
    5dec:	8c 01       	movw	r16, r24
    5dee:	d0 e0       	ldi	r29, 0x00	; 0
    5df0:	c0 e0       	ldi	r28, 0x00	; 0
    5df2:	f8 01       	movw	r30, r16
    5df4:	81 91       	ld	r24, Z+
    5df6:	8f 01       	movw	r16, r30
    5df8:	60 91 0f 18 	lds	r22, 0x180F	; 0x80180f <__iob+0x2>
    5dfc:	70 91 10 18 	lds	r23, 0x1810	; 0x801810 <__iob+0x3>
    5e00:	db 01       	movw	r26, r22
    5e02:	18 96       	adiw	r26, 0x08	; 8
    5e04:	ed 91       	ld	r30, X+
    5e06:	fc 91       	ld	r31, X
    5e08:	19 97       	sbiw	r26, 0x09	; 9
    5e0a:	88 23       	and	r24, r24
    5e0c:	31 f0       	breq	.+12     	; 0x5e1a <puts+0x44>
    5e0e:	19 95       	eicall
    5e10:	89 2b       	or	r24, r25
    5e12:	79 f3       	breq	.-34     	; 0x5df2 <puts+0x1c>
    5e14:	df ef       	ldi	r29, 0xFF	; 255
    5e16:	cf ef       	ldi	r28, 0xFF	; 255
    5e18:	ec cf       	rjmp	.-40     	; 0x5df2 <puts+0x1c>
    5e1a:	8a e0       	ldi	r24, 0x0A	; 10
    5e1c:	19 95       	eicall
    5e1e:	89 2b       	or	r24, r25
    5e20:	19 f0       	breq	.+6      	; 0x5e28 <puts+0x52>
    5e22:	8f ef       	ldi	r24, 0xFF	; 255
    5e24:	9f ef       	ldi	r25, 0xFF	; 255
    5e26:	02 c0       	rjmp	.+4      	; 0x5e2c <puts+0x56>
    5e28:	8d 2f       	mov	r24, r29
    5e2a:	9c 2f       	mov	r25, r28
    5e2c:	df 91       	pop	r29
    5e2e:	cf 91       	pop	r28
    5e30:	1f 91       	pop	r17
    5e32:	0f 91       	pop	r16
    5e34:	08 95       	ret

00005e36 <sprintf>:
    5e36:	0f 93       	push	r16
    5e38:	1f 93       	push	r17
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	cd b7       	in	r28, 0x3d	; 61
    5e40:	de b7       	in	r29, 0x3e	; 62
    5e42:	2e 97       	sbiw	r28, 0x0e	; 14
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	f8 94       	cli
    5e48:	de bf       	out	0x3e, r29	; 62
    5e4a:	0f be       	out	0x3f, r0	; 63
    5e4c:	cd bf       	out	0x3d, r28	; 61
    5e4e:	0e 89       	ldd	r16, Y+22	; 0x16
    5e50:	1f 89       	ldd	r17, Y+23	; 0x17
    5e52:	86 e0       	ldi	r24, 0x06	; 6
    5e54:	8c 83       	std	Y+4, r24	; 0x04
    5e56:	1a 83       	std	Y+2, r17	; 0x02
    5e58:	09 83       	std	Y+1, r16	; 0x01
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	9f e7       	ldi	r25, 0x7F	; 127
    5e5e:	9e 83       	std	Y+6, r25	; 0x06
    5e60:	8d 83       	std	Y+5, r24	; 0x05
    5e62:	ae 01       	movw	r20, r28
    5e64:	46 5e       	subi	r20, 0xE6	; 230
    5e66:	5f 4f       	sbci	r21, 0xFF	; 255
    5e68:	68 8d       	ldd	r22, Y+24	; 0x18
    5e6a:	79 8d       	ldd	r23, Y+25	; 0x19
    5e6c:	ce 01       	movw	r24, r28
    5e6e:	01 96       	adiw	r24, 0x01	; 1
    5e70:	10 d0       	rcall	.+32     	; 0x5e92 <vfprintf>
    5e72:	ef 81       	ldd	r30, Y+7	; 0x07
    5e74:	f8 85       	ldd	r31, Y+8	; 0x08
    5e76:	e0 0f       	add	r30, r16
    5e78:	f1 1f       	adc	r31, r17
    5e7a:	10 82       	st	Z, r1
    5e7c:	2e 96       	adiw	r28, 0x0e	; 14
    5e7e:	0f b6       	in	r0, 0x3f	; 63
    5e80:	f8 94       	cli
    5e82:	de bf       	out	0x3e, r29	; 62
    5e84:	0f be       	out	0x3f, r0	; 63
    5e86:	cd bf       	out	0x3d, r28	; 61
    5e88:	df 91       	pop	r29
    5e8a:	cf 91       	pop	r28
    5e8c:	1f 91       	pop	r17
    5e8e:	0f 91       	pop	r16
    5e90:	08 95       	ret

00005e92 <vfprintf>:
    5e92:	2f 92       	push	r2
    5e94:	3f 92       	push	r3
    5e96:	4f 92       	push	r4
    5e98:	5f 92       	push	r5
    5e9a:	6f 92       	push	r6
    5e9c:	7f 92       	push	r7
    5e9e:	8f 92       	push	r8
    5ea0:	9f 92       	push	r9
    5ea2:	af 92       	push	r10
    5ea4:	bf 92       	push	r11
    5ea6:	cf 92       	push	r12
    5ea8:	df 92       	push	r13
    5eaa:	ef 92       	push	r14
    5eac:	ff 92       	push	r15
    5eae:	0f 93       	push	r16
    5eb0:	1f 93       	push	r17
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
    5eb6:	cd b7       	in	r28, 0x3d	; 61
    5eb8:	de b7       	in	r29, 0x3e	; 62
    5eba:	2b 97       	sbiw	r28, 0x0b	; 11
    5ebc:	0f b6       	in	r0, 0x3f	; 63
    5ebe:	f8 94       	cli
    5ec0:	de bf       	out	0x3e, r29	; 62
    5ec2:	0f be       	out	0x3f, r0	; 63
    5ec4:	cd bf       	out	0x3d, r28	; 61
    5ec6:	6c 01       	movw	r12, r24
    5ec8:	7b 01       	movw	r14, r22
    5eca:	8a 01       	movw	r16, r20
    5ecc:	fc 01       	movw	r30, r24
    5ece:	17 82       	std	Z+7, r1	; 0x07
    5ed0:	16 82       	std	Z+6, r1	; 0x06
    5ed2:	83 81       	ldd	r24, Z+3	; 0x03
    5ed4:	81 ff       	sbrs	r24, 1
    5ed6:	bf c1       	rjmp	.+894    	; 0x6256 <vfprintf+0x3c4>
    5ed8:	ce 01       	movw	r24, r28
    5eda:	01 96       	adiw	r24, 0x01	; 1
    5edc:	3c 01       	movw	r6, r24
    5ede:	f6 01       	movw	r30, r12
    5ee0:	93 81       	ldd	r25, Z+3	; 0x03
    5ee2:	f7 01       	movw	r30, r14
    5ee4:	93 fd       	sbrc	r25, 3
    5ee6:	85 91       	lpm	r24, Z+
    5ee8:	93 ff       	sbrs	r25, 3
    5eea:	81 91       	ld	r24, Z+
    5eec:	7f 01       	movw	r14, r30
    5eee:	88 23       	and	r24, r24
    5ef0:	09 f4       	brne	.+2      	; 0x5ef4 <vfprintf+0x62>
    5ef2:	ad c1       	rjmp	.+858    	; 0x624e <vfprintf+0x3bc>
    5ef4:	85 32       	cpi	r24, 0x25	; 37
    5ef6:	39 f4       	brne	.+14     	; 0x5f06 <vfprintf+0x74>
    5ef8:	93 fd       	sbrc	r25, 3
    5efa:	85 91       	lpm	r24, Z+
    5efc:	93 ff       	sbrs	r25, 3
    5efe:	81 91       	ld	r24, Z+
    5f00:	7f 01       	movw	r14, r30
    5f02:	85 32       	cpi	r24, 0x25	; 37
    5f04:	21 f4       	brne	.+8      	; 0x5f0e <vfprintf+0x7c>
    5f06:	b6 01       	movw	r22, r12
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	d6 d1       	rcall	.+940    	; 0x62b8 <fputc>
    5f0c:	e8 cf       	rjmp	.-48     	; 0x5ede <vfprintf+0x4c>
    5f0e:	91 2c       	mov	r9, r1
    5f10:	21 2c       	mov	r2, r1
    5f12:	31 2c       	mov	r3, r1
    5f14:	ff e1       	ldi	r31, 0x1F	; 31
    5f16:	f3 15       	cp	r31, r3
    5f18:	d8 f0       	brcs	.+54     	; 0x5f50 <vfprintf+0xbe>
    5f1a:	8b 32       	cpi	r24, 0x2B	; 43
    5f1c:	79 f0       	breq	.+30     	; 0x5f3c <vfprintf+0xaa>
    5f1e:	38 f4       	brcc	.+14     	; 0x5f2e <vfprintf+0x9c>
    5f20:	80 32       	cpi	r24, 0x20	; 32
    5f22:	79 f0       	breq	.+30     	; 0x5f42 <vfprintf+0xb0>
    5f24:	83 32       	cpi	r24, 0x23	; 35
    5f26:	a1 f4       	brne	.+40     	; 0x5f50 <vfprintf+0xbe>
    5f28:	23 2d       	mov	r18, r3
    5f2a:	20 61       	ori	r18, 0x10	; 16
    5f2c:	1d c0       	rjmp	.+58     	; 0x5f68 <vfprintf+0xd6>
    5f2e:	8d 32       	cpi	r24, 0x2D	; 45
    5f30:	61 f0       	breq	.+24     	; 0x5f4a <vfprintf+0xb8>
    5f32:	80 33       	cpi	r24, 0x30	; 48
    5f34:	69 f4       	brne	.+26     	; 0x5f50 <vfprintf+0xbe>
    5f36:	23 2d       	mov	r18, r3
    5f38:	21 60       	ori	r18, 0x01	; 1
    5f3a:	16 c0       	rjmp	.+44     	; 0x5f68 <vfprintf+0xd6>
    5f3c:	83 2d       	mov	r24, r3
    5f3e:	82 60       	ori	r24, 0x02	; 2
    5f40:	38 2e       	mov	r3, r24
    5f42:	e3 2d       	mov	r30, r3
    5f44:	e4 60       	ori	r30, 0x04	; 4
    5f46:	3e 2e       	mov	r3, r30
    5f48:	2a c0       	rjmp	.+84     	; 0x5f9e <vfprintf+0x10c>
    5f4a:	f3 2d       	mov	r31, r3
    5f4c:	f8 60       	ori	r31, 0x08	; 8
    5f4e:	1d c0       	rjmp	.+58     	; 0x5f8a <vfprintf+0xf8>
    5f50:	37 fc       	sbrc	r3, 7
    5f52:	2d c0       	rjmp	.+90     	; 0x5fae <vfprintf+0x11c>
    5f54:	20 ed       	ldi	r18, 0xD0	; 208
    5f56:	28 0f       	add	r18, r24
    5f58:	2a 30       	cpi	r18, 0x0A	; 10
    5f5a:	40 f0       	brcs	.+16     	; 0x5f6c <vfprintf+0xda>
    5f5c:	8e 32       	cpi	r24, 0x2E	; 46
    5f5e:	b9 f4       	brne	.+46     	; 0x5f8e <vfprintf+0xfc>
    5f60:	36 fc       	sbrc	r3, 6
    5f62:	75 c1       	rjmp	.+746    	; 0x624e <vfprintf+0x3bc>
    5f64:	23 2d       	mov	r18, r3
    5f66:	20 64       	ori	r18, 0x40	; 64
    5f68:	32 2e       	mov	r3, r18
    5f6a:	19 c0       	rjmp	.+50     	; 0x5f9e <vfprintf+0x10c>
    5f6c:	36 fe       	sbrs	r3, 6
    5f6e:	06 c0       	rjmp	.+12     	; 0x5f7c <vfprintf+0xea>
    5f70:	8a e0       	ldi	r24, 0x0A	; 10
    5f72:	98 9e       	mul	r9, r24
    5f74:	20 0d       	add	r18, r0
    5f76:	11 24       	eor	r1, r1
    5f78:	92 2e       	mov	r9, r18
    5f7a:	11 c0       	rjmp	.+34     	; 0x5f9e <vfprintf+0x10c>
    5f7c:	ea e0       	ldi	r30, 0x0A	; 10
    5f7e:	2e 9e       	mul	r2, r30
    5f80:	20 0d       	add	r18, r0
    5f82:	11 24       	eor	r1, r1
    5f84:	22 2e       	mov	r2, r18
    5f86:	f3 2d       	mov	r31, r3
    5f88:	f0 62       	ori	r31, 0x20	; 32
    5f8a:	3f 2e       	mov	r3, r31
    5f8c:	08 c0       	rjmp	.+16     	; 0x5f9e <vfprintf+0x10c>
    5f8e:	8c 36       	cpi	r24, 0x6C	; 108
    5f90:	21 f4       	brne	.+8      	; 0x5f9a <vfprintf+0x108>
    5f92:	83 2d       	mov	r24, r3
    5f94:	80 68       	ori	r24, 0x80	; 128
    5f96:	38 2e       	mov	r3, r24
    5f98:	02 c0       	rjmp	.+4      	; 0x5f9e <vfprintf+0x10c>
    5f9a:	88 36       	cpi	r24, 0x68	; 104
    5f9c:	41 f4       	brne	.+16     	; 0x5fae <vfprintf+0x11c>
    5f9e:	f7 01       	movw	r30, r14
    5fa0:	93 fd       	sbrc	r25, 3
    5fa2:	85 91       	lpm	r24, Z+
    5fa4:	93 ff       	sbrs	r25, 3
    5fa6:	81 91       	ld	r24, Z+
    5fa8:	7f 01       	movw	r14, r30
    5faa:	81 11       	cpse	r24, r1
    5fac:	b3 cf       	rjmp	.-154    	; 0x5f14 <vfprintf+0x82>
    5fae:	98 2f       	mov	r25, r24
    5fb0:	9f 7d       	andi	r25, 0xDF	; 223
    5fb2:	95 54       	subi	r25, 0x45	; 69
    5fb4:	93 30       	cpi	r25, 0x03	; 3
    5fb6:	28 f4       	brcc	.+10     	; 0x5fc2 <vfprintf+0x130>
    5fb8:	0c 5f       	subi	r16, 0xFC	; 252
    5fba:	1f 4f       	sbci	r17, 0xFF	; 255
    5fbc:	9f e3       	ldi	r25, 0x3F	; 63
    5fbe:	99 83       	std	Y+1, r25	; 0x01
    5fc0:	0d c0       	rjmp	.+26     	; 0x5fdc <vfprintf+0x14a>
    5fc2:	83 36       	cpi	r24, 0x63	; 99
    5fc4:	31 f0       	breq	.+12     	; 0x5fd2 <vfprintf+0x140>
    5fc6:	83 37       	cpi	r24, 0x73	; 115
    5fc8:	71 f0       	breq	.+28     	; 0x5fe6 <vfprintf+0x154>
    5fca:	83 35       	cpi	r24, 0x53	; 83
    5fcc:	09 f0       	breq	.+2      	; 0x5fd0 <vfprintf+0x13e>
    5fce:	55 c0       	rjmp	.+170    	; 0x607a <vfprintf+0x1e8>
    5fd0:	20 c0       	rjmp	.+64     	; 0x6012 <vfprintf+0x180>
    5fd2:	f8 01       	movw	r30, r16
    5fd4:	80 81       	ld	r24, Z
    5fd6:	89 83       	std	Y+1, r24	; 0x01
    5fd8:	0e 5f       	subi	r16, 0xFE	; 254
    5fda:	1f 4f       	sbci	r17, 0xFF	; 255
    5fdc:	88 24       	eor	r8, r8
    5fde:	83 94       	inc	r8
    5fe0:	91 2c       	mov	r9, r1
    5fe2:	53 01       	movw	r10, r6
    5fe4:	12 c0       	rjmp	.+36     	; 0x600a <vfprintf+0x178>
    5fe6:	28 01       	movw	r4, r16
    5fe8:	f2 e0       	ldi	r31, 0x02	; 2
    5fea:	4f 0e       	add	r4, r31
    5fec:	51 1c       	adc	r5, r1
    5fee:	f8 01       	movw	r30, r16
    5ff0:	a0 80       	ld	r10, Z
    5ff2:	b1 80       	ldd	r11, Z+1	; 0x01
    5ff4:	36 fe       	sbrs	r3, 6
    5ff6:	03 c0       	rjmp	.+6      	; 0x5ffe <vfprintf+0x16c>
    5ff8:	69 2d       	mov	r22, r9
    5ffa:	70 e0       	ldi	r23, 0x00	; 0
    5ffc:	02 c0       	rjmp	.+4      	; 0x6002 <vfprintf+0x170>
    5ffe:	6f ef       	ldi	r22, 0xFF	; 255
    6000:	7f ef       	ldi	r23, 0xFF	; 255
    6002:	c5 01       	movw	r24, r10
    6004:	4e d1       	rcall	.+668    	; 0x62a2 <strnlen>
    6006:	4c 01       	movw	r8, r24
    6008:	82 01       	movw	r16, r4
    600a:	f3 2d       	mov	r31, r3
    600c:	ff 77       	andi	r31, 0x7F	; 127
    600e:	3f 2e       	mov	r3, r31
    6010:	15 c0       	rjmp	.+42     	; 0x603c <vfprintf+0x1aa>
    6012:	28 01       	movw	r4, r16
    6014:	22 e0       	ldi	r18, 0x02	; 2
    6016:	42 0e       	add	r4, r18
    6018:	51 1c       	adc	r5, r1
    601a:	f8 01       	movw	r30, r16
    601c:	a0 80       	ld	r10, Z
    601e:	b1 80       	ldd	r11, Z+1	; 0x01
    6020:	36 fe       	sbrs	r3, 6
    6022:	03 c0       	rjmp	.+6      	; 0x602a <vfprintf+0x198>
    6024:	69 2d       	mov	r22, r9
    6026:	70 e0       	ldi	r23, 0x00	; 0
    6028:	02 c0       	rjmp	.+4      	; 0x602e <vfprintf+0x19c>
    602a:	6f ef       	ldi	r22, 0xFF	; 255
    602c:	7f ef       	ldi	r23, 0xFF	; 255
    602e:	c5 01       	movw	r24, r10
    6030:	2d d1       	rcall	.+602    	; 0x628c <strnlen_P>
    6032:	4c 01       	movw	r8, r24
    6034:	f3 2d       	mov	r31, r3
    6036:	f0 68       	ori	r31, 0x80	; 128
    6038:	3f 2e       	mov	r3, r31
    603a:	82 01       	movw	r16, r4
    603c:	33 fc       	sbrc	r3, 3
    603e:	19 c0       	rjmp	.+50     	; 0x6072 <vfprintf+0x1e0>
    6040:	82 2d       	mov	r24, r2
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	88 16       	cp	r8, r24
    6046:	99 06       	cpc	r9, r25
    6048:	a0 f4       	brcc	.+40     	; 0x6072 <vfprintf+0x1e0>
    604a:	b6 01       	movw	r22, r12
    604c:	80 e2       	ldi	r24, 0x20	; 32
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	33 d1       	rcall	.+614    	; 0x62b8 <fputc>
    6052:	2a 94       	dec	r2
    6054:	f5 cf       	rjmp	.-22     	; 0x6040 <vfprintf+0x1ae>
    6056:	f5 01       	movw	r30, r10
    6058:	37 fc       	sbrc	r3, 7
    605a:	85 91       	lpm	r24, Z+
    605c:	37 fe       	sbrs	r3, 7
    605e:	81 91       	ld	r24, Z+
    6060:	5f 01       	movw	r10, r30
    6062:	b6 01       	movw	r22, r12
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	28 d1       	rcall	.+592    	; 0x62b8 <fputc>
    6068:	21 10       	cpse	r2, r1
    606a:	2a 94       	dec	r2
    606c:	21 e0       	ldi	r18, 0x01	; 1
    606e:	82 1a       	sub	r8, r18
    6070:	91 08       	sbc	r9, r1
    6072:	81 14       	cp	r8, r1
    6074:	91 04       	cpc	r9, r1
    6076:	79 f7       	brne	.-34     	; 0x6056 <vfprintf+0x1c4>
    6078:	e1 c0       	rjmp	.+450    	; 0x623c <vfprintf+0x3aa>
    607a:	84 36       	cpi	r24, 0x64	; 100
    607c:	11 f0       	breq	.+4      	; 0x6082 <vfprintf+0x1f0>
    607e:	89 36       	cpi	r24, 0x69	; 105
    6080:	39 f5       	brne	.+78     	; 0x60d0 <vfprintf+0x23e>
    6082:	f8 01       	movw	r30, r16
    6084:	37 fe       	sbrs	r3, 7
    6086:	07 c0       	rjmp	.+14     	; 0x6096 <vfprintf+0x204>
    6088:	60 81       	ld	r22, Z
    608a:	71 81       	ldd	r23, Z+1	; 0x01
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	93 81       	ldd	r25, Z+3	; 0x03
    6090:	0c 5f       	subi	r16, 0xFC	; 252
    6092:	1f 4f       	sbci	r17, 0xFF	; 255
    6094:	08 c0       	rjmp	.+16     	; 0x60a6 <vfprintf+0x214>
    6096:	60 81       	ld	r22, Z
    6098:	71 81       	ldd	r23, Z+1	; 0x01
    609a:	07 2e       	mov	r0, r23
    609c:	00 0c       	add	r0, r0
    609e:	88 0b       	sbc	r24, r24
    60a0:	99 0b       	sbc	r25, r25
    60a2:	0e 5f       	subi	r16, 0xFE	; 254
    60a4:	1f 4f       	sbci	r17, 0xFF	; 255
    60a6:	f3 2d       	mov	r31, r3
    60a8:	ff 76       	andi	r31, 0x6F	; 111
    60aa:	3f 2e       	mov	r3, r31
    60ac:	97 ff       	sbrs	r25, 7
    60ae:	09 c0       	rjmp	.+18     	; 0x60c2 <vfprintf+0x230>
    60b0:	90 95       	com	r25
    60b2:	80 95       	com	r24
    60b4:	70 95       	com	r23
    60b6:	61 95       	neg	r22
    60b8:	7f 4f       	sbci	r23, 0xFF	; 255
    60ba:	8f 4f       	sbci	r24, 0xFF	; 255
    60bc:	9f 4f       	sbci	r25, 0xFF	; 255
    60be:	f0 68       	ori	r31, 0x80	; 128
    60c0:	3f 2e       	mov	r3, r31
    60c2:	2a e0       	ldi	r18, 0x0A	; 10
    60c4:	30 e0       	ldi	r19, 0x00	; 0
    60c6:	a3 01       	movw	r20, r6
    60c8:	33 d1       	rcall	.+614    	; 0x6330 <__ultoa_invert>
    60ca:	88 2e       	mov	r8, r24
    60cc:	86 18       	sub	r8, r6
    60ce:	44 c0       	rjmp	.+136    	; 0x6158 <vfprintf+0x2c6>
    60d0:	85 37       	cpi	r24, 0x75	; 117
    60d2:	31 f4       	brne	.+12     	; 0x60e0 <vfprintf+0x24e>
    60d4:	23 2d       	mov	r18, r3
    60d6:	2f 7e       	andi	r18, 0xEF	; 239
    60d8:	b2 2e       	mov	r11, r18
    60da:	2a e0       	ldi	r18, 0x0A	; 10
    60dc:	30 e0       	ldi	r19, 0x00	; 0
    60de:	25 c0       	rjmp	.+74     	; 0x612a <vfprintf+0x298>
    60e0:	93 2d       	mov	r25, r3
    60e2:	99 7f       	andi	r25, 0xF9	; 249
    60e4:	b9 2e       	mov	r11, r25
    60e6:	8f 36       	cpi	r24, 0x6F	; 111
    60e8:	c1 f0       	breq	.+48     	; 0x611a <vfprintf+0x288>
    60ea:	18 f4       	brcc	.+6      	; 0x60f2 <vfprintf+0x260>
    60ec:	88 35       	cpi	r24, 0x58	; 88
    60ee:	79 f0       	breq	.+30     	; 0x610e <vfprintf+0x27c>
    60f0:	ae c0       	rjmp	.+348    	; 0x624e <vfprintf+0x3bc>
    60f2:	80 37       	cpi	r24, 0x70	; 112
    60f4:	19 f0       	breq	.+6      	; 0x60fc <vfprintf+0x26a>
    60f6:	88 37       	cpi	r24, 0x78	; 120
    60f8:	21 f0       	breq	.+8      	; 0x6102 <vfprintf+0x270>
    60fa:	a9 c0       	rjmp	.+338    	; 0x624e <vfprintf+0x3bc>
    60fc:	e9 2f       	mov	r30, r25
    60fe:	e0 61       	ori	r30, 0x10	; 16
    6100:	be 2e       	mov	r11, r30
    6102:	b4 fe       	sbrs	r11, 4
    6104:	0d c0       	rjmp	.+26     	; 0x6120 <vfprintf+0x28e>
    6106:	fb 2d       	mov	r31, r11
    6108:	f4 60       	ori	r31, 0x04	; 4
    610a:	bf 2e       	mov	r11, r31
    610c:	09 c0       	rjmp	.+18     	; 0x6120 <vfprintf+0x28e>
    610e:	34 fe       	sbrs	r3, 4
    6110:	0a c0       	rjmp	.+20     	; 0x6126 <vfprintf+0x294>
    6112:	29 2f       	mov	r18, r25
    6114:	26 60       	ori	r18, 0x06	; 6
    6116:	b2 2e       	mov	r11, r18
    6118:	06 c0       	rjmp	.+12     	; 0x6126 <vfprintf+0x294>
    611a:	28 e0       	ldi	r18, 0x08	; 8
    611c:	30 e0       	ldi	r19, 0x00	; 0
    611e:	05 c0       	rjmp	.+10     	; 0x612a <vfprintf+0x298>
    6120:	20 e1       	ldi	r18, 0x10	; 16
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	02 c0       	rjmp	.+4      	; 0x612a <vfprintf+0x298>
    6126:	20 e1       	ldi	r18, 0x10	; 16
    6128:	32 e0       	ldi	r19, 0x02	; 2
    612a:	f8 01       	movw	r30, r16
    612c:	b7 fe       	sbrs	r11, 7
    612e:	07 c0       	rjmp	.+14     	; 0x613e <vfprintf+0x2ac>
    6130:	60 81       	ld	r22, Z
    6132:	71 81       	ldd	r23, Z+1	; 0x01
    6134:	82 81       	ldd	r24, Z+2	; 0x02
    6136:	93 81       	ldd	r25, Z+3	; 0x03
    6138:	0c 5f       	subi	r16, 0xFC	; 252
    613a:	1f 4f       	sbci	r17, 0xFF	; 255
    613c:	06 c0       	rjmp	.+12     	; 0x614a <vfprintf+0x2b8>
    613e:	60 81       	ld	r22, Z
    6140:	71 81       	ldd	r23, Z+1	; 0x01
    6142:	80 e0       	ldi	r24, 0x00	; 0
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	0e 5f       	subi	r16, 0xFE	; 254
    6148:	1f 4f       	sbci	r17, 0xFF	; 255
    614a:	a3 01       	movw	r20, r6
    614c:	f1 d0       	rcall	.+482    	; 0x6330 <__ultoa_invert>
    614e:	88 2e       	mov	r8, r24
    6150:	86 18       	sub	r8, r6
    6152:	fb 2d       	mov	r31, r11
    6154:	ff 77       	andi	r31, 0x7F	; 127
    6156:	3f 2e       	mov	r3, r31
    6158:	36 fe       	sbrs	r3, 6
    615a:	0d c0       	rjmp	.+26     	; 0x6176 <vfprintf+0x2e4>
    615c:	23 2d       	mov	r18, r3
    615e:	2e 7f       	andi	r18, 0xFE	; 254
    6160:	a2 2e       	mov	r10, r18
    6162:	89 14       	cp	r8, r9
    6164:	58 f4       	brcc	.+22     	; 0x617c <vfprintf+0x2ea>
    6166:	34 fe       	sbrs	r3, 4
    6168:	0b c0       	rjmp	.+22     	; 0x6180 <vfprintf+0x2ee>
    616a:	32 fc       	sbrc	r3, 2
    616c:	09 c0       	rjmp	.+18     	; 0x6180 <vfprintf+0x2ee>
    616e:	83 2d       	mov	r24, r3
    6170:	8e 7e       	andi	r24, 0xEE	; 238
    6172:	a8 2e       	mov	r10, r24
    6174:	05 c0       	rjmp	.+10     	; 0x6180 <vfprintf+0x2ee>
    6176:	b8 2c       	mov	r11, r8
    6178:	a3 2c       	mov	r10, r3
    617a:	03 c0       	rjmp	.+6      	; 0x6182 <vfprintf+0x2f0>
    617c:	b8 2c       	mov	r11, r8
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <vfprintf+0x2f0>
    6180:	b9 2c       	mov	r11, r9
    6182:	a4 fe       	sbrs	r10, 4
    6184:	0f c0       	rjmp	.+30     	; 0x61a4 <vfprintf+0x312>
    6186:	fe 01       	movw	r30, r28
    6188:	e8 0d       	add	r30, r8
    618a:	f1 1d       	adc	r31, r1
    618c:	80 81       	ld	r24, Z
    618e:	80 33       	cpi	r24, 0x30	; 48
    6190:	21 f4       	brne	.+8      	; 0x619a <vfprintf+0x308>
    6192:	9a 2d       	mov	r25, r10
    6194:	99 7e       	andi	r25, 0xE9	; 233
    6196:	a9 2e       	mov	r10, r25
    6198:	09 c0       	rjmp	.+18     	; 0x61ac <vfprintf+0x31a>
    619a:	a2 fe       	sbrs	r10, 2
    619c:	06 c0       	rjmp	.+12     	; 0x61aa <vfprintf+0x318>
    619e:	b3 94       	inc	r11
    61a0:	b3 94       	inc	r11
    61a2:	04 c0       	rjmp	.+8      	; 0x61ac <vfprintf+0x31a>
    61a4:	8a 2d       	mov	r24, r10
    61a6:	86 78       	andi	r24, 0x86	; 134
    61a8:	09 f0       	breq	.+2      	; 0x61ac <vfprintf+0x31a>
    61aa:	b3 94       	inc	r11
    61ac:	a3 fc       	sbrc	r10, 3
    61ae:	10 c0       	rjmp	.+32     	; 0x61d0 <vfprintf+0x33e>
    61b0:	a0 fe       	sbrs	r10, 0
    61b2:	06 c0       	rjmp	.+12     	; 0x61c0 <vfprintf+0x32e>
    61b4:	b2 14       	cp	r11, r2
    61b6:	80 f4       	brcc	.+32     	; 0x61d8 <vfprintf+0x346>
    61b8:	28 0c       	add	r2, r8
    61ba:	92 2c       	mov	r9, r2
    61bc:	9b 18       	sub	r9, r11
    61be:	0d c0       	rjmp	.+26     	; 0x61da <vfprintf+0x348>
    61c0:	b2 14       	cp	r11, r2
    61c2:	58 f4       	brcc	.+22     	; 0x61da <vfprintf+0x348>
    61c4:	b6 01       	movw	r22, r12
    61c6:	80 e2       	ldi	r24, 0x20	; 32
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	76 d0       	rcall	.+236    	; 0x62b8 <fputc>
    61cc:	b3 94       	inc	r11
    61ce:	f8 cf       	rjmp	.-16     	; 0x61c0 <vfprintf+0x32e>
    61d0:	b2 14       	cp	r11, r2
    61d2:	18 f4       	brcc	.+6      	; 0x61da <vfprintf+0x348>
    61d4:	2b 18       	sub	r2, r11
    61d6:	02 c0       	rjmp	.+4      	; 0x61dc <vfprintf+0x34a>
    61d8:	98 2c       	mov	r9, r8
    61da:	21 2c       	mov	r2, r1
    61dc:	a4 fe       	sbrs	r10, 4
    61de:	0f c0       	rjmp	.+30     	; 0x61fe <vfprintf+0x36c>
    61e0:	b6 01       	movw	r22, r12
    61e2:	80 e3       	ldi	r24, 0x30	; 48
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	68 d0       	rcall	.+208    	; 0x62b8 <fputc>
    61e8:	a2 fe       	sbrs	r10, 2
    61ea:	16 c0       	rjmp	.+44     	; 0x6218 <vfprintf+0x386>
    61ec:	a1 fc       	sbrc	r10, 1
    61ee:	03 c0       	rjmp	.+6      	; 0x61f6 <vfprintf+0x364>
    61f0:	88 e7       	ldi	r24, 0x78	; 120
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	02 c0       	rjmp	.+4      	; 0x61fa <vfprintf+0x368>
    61f6:	88 e5       	ldi	r24, 0x58	; 88
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	b6 01       	movw	r22, r12
    61fc:	0c c0       	rjmp	.+24     	; 0x6216 <vfprintf+0x384>
    61fe:	8a 2d       	mov	r24, r10
    6200:	86 78       	andi	r24, 0x86	; 134
    6202:	51 f0       	breq	.+20     	; 0x6218 <vfprintf+0x386>
    6204:	a1 fe       	sbrs	r10, 1
    6206:	02 c0       	rjmp	.+4      	; 0x620c <vfprintf+0x37a>
    6208:	8b e2       	ldi	r24, 0x2B	; 43
    620a:	01 c0       	rjmp	.+2      	; 0x620e <vfprintf+0x37c>
    620c:	80 e2       	ldi	r24, 0x20	; 32
    620e:	a7 fc       	sbrc	r10, 7
    6210:	8d e2       	ldi	r24, 0x2D	; 45
    6212:	b6 01       	movw	r22, r12
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	50 d0       	rcall	.+160    	; 0x62b8 <fputc>
    6218:	89 14       	cp	r8, r9
    621a:	30 f4       	brcc	.+12     	; 0x6228 <vfprintf+0x396>
    621c:	b6 01       	movw	r22, r12
    621e:	80 e3       	ldi	r24, 0x30	; 48
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	4a d0       	rcall	.+148    	; 0x62b8 <fputc>
    6224:	9a 94       	dec	r9
    6226:	f8 cf       	rjmp	.-16     	; 0x6218 <vfprintf+0x386>
    6228:	8a 94       	dec	r8
    622a:	f3 01       	movw	r30, r6
    622c:	e8 0d       	add	r30, r8
    622e:	f1 1d       	adc	r31, r1
    6230:	80 81       	ld	r24, Z
    6232:	b6 01       	movw	r22, r12
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	40 d0       	rcall	.+128    	; 0x62b8 <fputc>
    6238:	81 10       	cpse	r8, r1
    623a:	f6 cf       	rjmp	.-20     	; 0x6228 <vfprintf+0x396>
    623c:	22 20       	and	r2, r2
    623e:	09 f4       	brne	.+2      	; 0x6242 <vfprintf+0x3b0>
    6240:	4e ce       	rjmp	.-868    	; 0x5ede <vfprintf+0x4c>
    6242:	b6 01       	movw	r22, r12
    6244:	80 e2       	ldi	r24, 0x20	; 32
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	37 d0       	rcall	.+110    	; 0x62b8 <fputc>
    624a:	2a 94       	dec	r2
    624c:	f7 cf       	rjmp	.-18     	; 0x623c <vfprintf+0x3aa>
    624e:	f6 01       	movw	r30, r12
    6250:	86 81       	ldd	r24, Z+6	; 0x06
    6252:	97 81       	ldd	r25, Z+7	; 0x07
    6254:	02 c0       	rjmp	.+4      	; 0x625a <vfprintf+0x3c8>
    6256:	8f ef       	ldi	r24, 0xFF	; 255
    6258:	9f ef       	ldi	r25, 0xFF	; 255
    625a:	2b 96       	adiw	r28, 0x0b	; 11
    625c:	0f b6       	in	r0, 0x3f	; 63
    625e:	f8 94       	cli
    6260:	de bf       	out	0x3e, r29	; 62
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	cd bf       	out	0x3d, r28	; 61
    6266:	df 91       	pop	r29
    6268:	cf 91       	pop	r28
    626a:	1f 91       	pop	r17
    626c:	0f 91       	pop	r16
    626e:	ff 90       	pop	r15
    6270:	ef 90       	pop	r14
    6272:	df 90       	pop	r13
    6274:	cf 90       	pop	r12
    6276:	bf 90       	pop	r11
    6278:	af 90       	pop	r10
    627a:	9f 90       	pop	r9
    627c:	8f 90       	pop	r8
    627e:	7f 90       	pop	r7
    6280:	6f 90       	pop	r6
    6282:	5f 90       	pop	r5
    6284:	4f 90       	pop	r4
    6286:	3f 90       	pop	r3
    6288:	2f 90       	pop	r2
    628a:	08 95       	ret

0000628c <strnlen_P>:
    628c:	fc 01       	movw	r30, r24
    628e:	05 90       	lpm	r0, Z+
    6290:	61 50       	subi	r22, 0x01	; 1
    6292:	70 40       	sbci	r23, 0x00	; 0
    6294:	01 10       	cpse	r0, r1
    6296:	d8 f7       	brcc	.-10     	; 0x628e <strnlen_P+0x2>
    6298:	80 95       	com	r24
    629a:	90 95       	com	r25
    629c:	8e 0f       	add	r24, r30
    629e:	9f 1f       	adc	r25, r31
    62a0:	08 95       	ret

000062a2 <strnlen>:
    62a2:	fc 01       	movw	r30, r24
    62a4:	61 50       	subi	r22, 0x01	; 1
    62a6:	70 40       	sbci	r23, 0x00	; 0
    62a8:	01 90       	ld	r0, Z+
    62aa:	01 10       	cpse	r0, r1
    62ac:	d8 f7       	brcc	.-10     	; 0x62a4 <strnlen+0x2>
    62ae:	80 95       	com	r24
    62b0:	90 95       	com	r25
    62b2:	8e 0f       	add	r24, r30
    62b4:	9f 1f       	adc	r25, r31
    62b6:	08 95       	ret

000062b8 <fputc>:
    62b8:	0f 93       	push	r16
    62ba:	1f 93       	push	r17
    62bc:	cf 93       	push	r28
    62be:	df 93       	push	r29
    62c0:	fb 01       	movw	r30, r22
    62c2:	23 81       	ldd	r18, Z+3	; 0x03
    62c4:	21 fd       	sbrc	r18, 1
    62c6:	03 c0       	rjmp	.+6      	; 0x62ce <fputc+0x16>
    62c8:	8f ef       	ldi	r24, 0xFF	; 255
    62ca:	9f ef       	ldi	r25, 0xFF	; 255
    62cc:	2c c0       	rjmp	.+88     	; 0x6326 <fputc+0x6e>
    62ce:	22 ff       	sbrs	r18, 2
    62d0:	16 c0       	rjmp	.+44     	; 0x62fe <fputc+0x46>
    62d2:	46 81       	ldd	r20, Z+6	; 0x06
    62d4:	57 81       	ldd	r21, Z+7	; 0x07
    62d6:	24 81       	ldd	r18, Z+4	; 0x04
    62d8:	35 81       	ldd	r19, Z+5	; 0x05
    62da:	42 17       	cp	r20, r18
    62dc:	53 07       	cpc	r21, r19
    62de:	44 f4       	brge	.+16     	; 0x62f0 <fputc+0x38>
    62e0:	a0 81       	ld	r26, Z
    62e2:	b1 81       	ldd	r27, Z+1	; 0x01
    62e4:	9d 01       	movw	r18, r26
    62e6:	2f 5f       	subi	r18, 0xFF	; 255
    62e8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ea:	31 83       	std	Z+1, r19	; 0x01
    62ec:	20 83       	st	Z, r18
    62ee:	8c 93       	st	X, r24
    62f0:	26 81       	ldd	r18, Z+6	; 0x06
    62f2:	37 81       	ldd	r19, Z+7	; 0x07
    62f4:	2f 5f       	subi	r18, 0xFF	; 255
    62f6:	3f 4f       	sbci	r19, 0xFF	; 255
    62f8:	37 83       	std	Z+7, r19	; 0x07
    62fa:	26 83       	std	Z+6, r18	; 0x06
    62fc:	14 c0       	rjmp	.+40     	; 0x6326 <fputc+0x6e>
    62fe:	8b 01       	movw	r16, r22
    6300:	ec 01       	movw	r28, r24
    6302:	fb 01       	movw	r30, r22
    6304:	00 84       	ldd	r0, Z+8	; 0x08
    6306:	f1 85       	ldd	r31, Z+9	; 0x09
    6308:	e0 2d       	mov	r30, r0
    630a:	19 95       	eicall
    630c:	89 2b       	or	r24, r25
    630e:	e1 f6       	brne	.-72     	; 0x62c8 <fputc+0x10>
    6310:	d8 01       	movw	r26, r16
    6312:	16 96       	adiw	r26, 0x06	; 6
    6314:	8d 91       	ld	r24, X+
    6316:	9c 91       	ld	r25, X
    6318:	17 97       	sbiw	r26, 0x07	; 7
    631a:	01 96       	adiw	r24, 0x01	; 1
    631c:	17 96       	adiw	r26, 0x07	; 7
    631e:	9c 93       	st	X, r25
    6320:	8e 93       	st	-X, r24
    6322:	16 97       	sbiw	r26, 0x06	; 6
    6324:	ce 01       	movw	r24, r28
    6326:	df 91       	pop	r29
    6328:	cf 91       	pop	r28
    632a:	1f 91       	pop	r17
    632c:	0f 91       	pop	r16
    632e:	08 95       	ret

00006330 <__ultoa_invert>:
    6330:	fa 01       	movw	r30, r20
    6332:	aa 27       	eor	r26, r26
    6334:	28 30       	cpi	r18, 0x08	; 8
    6336:	51 f1       	breq	.+84     	; 0x638c <__ultoa_invert+0x5c>
    6338:	20 31       	cpi	r18, 0x10	; 16
    633a:	81 f1       	breq	.+96     	; 0x639c <__ultoa_invert+0x6c>
    633c:	e8 94       	clt
    633e:	6f 93       	push	r22
    6340:	6e 7f       	andi	r22, 0xFE	; 254
    6342:	6e 5f       	subi	r22, 0xFE	; 254
    6344:	7f 4f       	sbci	r23, 0xFF	; 255
    6346:	8f 4f       	sbci	r24, 0xFF	; 255
    6348:	9f 4f       	sbci	r25, 0xFF	; 255
    634a:	af 4f       	sbci	r26, 0xFF	; 255
    634c:	b1 e0       	ldi	r27, 0x01	; 1
    634e:	3e d0       	rcall	.+124    	; 0x63cc <__ultoa_invert+0x9c>
    6350:	b4 e0       	ldi	r27, 0x04	; 4
    6352:	3c d0       	rcall	.+120    	; 0x63cc <__ultoa_invert+0x9c>
    6354:	67 0f       	add	r22, r23
    6356:	78 1f       	adc	r23, r24
    6358:	89 1f       	adc	r24, r25
    635a:	9a 1f       	adc	r25, r26
    635c:	a1 1d       	adc	r26, r1
    635e:	68 0f       	add	r22, r24
    6360:	79 1f       	adc	r23, r25
    6362:	8a 1f       	adc	r24, r26
    6364:	91 1d       	adc	r25, r1
    6366:	a1 1d       	adc	r26, r1
    6368:	6a 0f       	add	r22, r26
    636a:	71 1d       	adc	r23, r1
    636c:	81 1d       	adc	r24, r1
    636e:	91 1d       	adc	r25, r1
    6370:	a1 1d       	adc	r26, r1
    6372:	20 d0       	rcall	.+64     	; 0x63b4 <__ultoa_invert+0x84>
    6374:	09 f4       	brne	.+2      	; 0x6378 <__ultoa_invert+0x48>
    6376:	68 94       	set
    6378:	3f 91       	pop	r19
    637a:	2a e0       	ldi	r18, 0x0A	; 10
    637c:	26 9f       	mul	r18, r22
    637e:	11 24       	eor	r1, r1
    6380:	30 19       	sub	r19, r0
    6382:	30 5d       	subi	r19, 0xD0	; 208
    6384:	31 93       	st	Z+, r19
    6386:	de f6       	brtc	.-74     	; 0x633e <__ultoa_invert+0xe>
    6388:	cf 01       	movw	r24, r30
    638a:	08 95       	ret
    638c:	46 2f       	mov	r20, r22
    638e:	47 70       	andi	r20, 0x07	; 7
    6390:	40 5d       	subi	r20, 0xD0	; 208
    6392:	41 93       	st	Z+, r20
    6394:	b3 e0       	ldi	r27, 0x03	; 3
    6396:	0f d0       	rcall	.+30     	; 0x63b6 <__ultoa_invert+0x86>
    6398:	c9 f7       	brne	.-14     	; 0x638c <__ultoa_invert+0x5c>
    639a:	f6 cf       	rjmp	.-20     	; 0x6388 <__ultoa_invert+0x58>
    639c:	46 2f       	mov	r20, r22
    639e:	4f 70       	andi	r20, 0x0F	; 15
    63a0:	40 5d       	subi	r20, 0xD0	; 208
    63a2:	4a 33       	cpi	r20, 0x3A	; 58
    63a4:	18 f0       	brcs	.+6      	; 0x63ac <__ultoa_invert+0x7c>
    63a6:	49 5d       	subi	r20, 0xD9	; 217
    63a8:	31 fd       	sbrc	r19, 1
    63aa:	40 52       	subi	r20, 0x20	; 32
    63ac:	41 93       	st	Z+, r20
    63ae:	02 d0       	rcall	.+4      	; 0x63b4 <__ultoa_invert+0x84>
    63b0:	a9 f7       	brne	.-22     	; 0x639c <__ultoa_invert+0x6c>
    63b2:	ea cf       	rjmp	.-44     	; 0x6388 <__ultoa_invert+0x58>
    63b4:	b4 e0       	ldi	r27, 0x04	; 4
    63b6:	a6 95       	lsr	r26
    63b8:	97 95       	ror	r25
    63ba:	87 95       	ror	r24
    63bc:	77 95       	ror	r23
    63be:	67 95       	ror	r22
    63c0:	ba 95       	dec	r27
    63c2:	c9 f7       	brne	.-14     	; 0x63b6 <__ultoa_invert+0x86>
    63c4:	00 97       	sbiw	r24, 0x00	; 0
    63c6:	61 05       	cpc	r22, r1
    63c8:	71 05       	cpc	r23, r1
    63ca:	08 95       	ret
    63cc:	9b 01       	movw	r18, r22
    63ce:	ac 01       	movw	r20, r24
    63d0:	0a 2e       	mov	r0, r26
    63d2:	06 94       	lsr	r0
    63d4:	57 95       	ror	r21
    63d6:	47 95       	ror	r20
    63d8:	37 95       	ror	r19
    63da:	27 95       	ror	r18
    63dc:	ba 95       	dec	r27
    63de:	c9 f7       	brne	.-14     	; 0x63d2 <__ultoa_invert+0xa2>
    63e0:	62 0f       	add	r22, r18
    63e2:	73 1f       	adc	r23, r19
    63e4:	84 1f       	adc	r24, r20
    63e6:	95 1f       	adc	r25, r21
    63e8:	a0 1d       	adc	r26, r0
    63ea:	08 95       	ret

000063ec <_exit>:
    63ec:	f8 94       	cli

000063ee <__stop_program>:
    63ee:	ff cf       	rjmp	.-2      	; 0x63ee <__stop_program>
