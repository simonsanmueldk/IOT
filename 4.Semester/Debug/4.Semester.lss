
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000552  00800200  000060c6  0000615a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000060c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000101d  00800752  00800752  000066ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000066ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  00006748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d10f  00000000  00000000  00007190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003211  00000000  00000000  0001429f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000644b  00000000  00000000  000174b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000252c  00000000  00000000  0001d8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004074  00000000  00000000  0001fe28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bd37  00000000  00000000  00023e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c8  00000000  00000000  0002fbd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c5       	rjmp	.+2684   	; 0xaae <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <__vector_25>
      68:	0c 94 3e 24 	jmp	0x487c	; 0x487c <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 82 24 	jmp	0x4904	; 0x4904 <__vector_36>
      94:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__vector_51>
      d0:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ae 25 	jmp	0x4b5c	; 0x4b5c <__vector_54>
      dc:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6e 19       	sub	r22, r14
      e6:	6e 19       	sub	r22, r14
      e8:	6e 19       	sub	r22, r14
      ea:	a5 19       	sub	r26, r5
      ec:	ad 19       	sub	r26, r13
      ee:	c2 19       	sub	r28, r2
      f0:	6e 19       	sub	r22, r14
      f2:	6e 19       	sub	r22, r14
      f4:	a5 19       	sub	r26, r5
      f6:	ad 19       	sub	r26, r13
      f8:	41 29       	or	r20, r1
      fa:	b1 29       	or	r27, r1
      fc:	b1 29       	or	r27, r1
      fe:	b1 29       	or	r27, r1
     100:	b1 29       	or	r27, r1
     102:	b1 29       	or	r27, r1
     104:	b1 29       	or	r27, r1
     106:	b1 29       	or	r27, r1
     108:	41 29       	or	r20, r1
     10a:	b1 29       	or	r27, r1
     10c:	b1 29       	or	r27, r1
     10e:	b1 29       	or	r27, r1
     110:	b1 29       	or	r27, r1
     112:	b1 29       	or	r27, r1
     114:	b1 29       	or	r27, r1
     116:	b1 29       	or	r27, r1
     118:	43 29       	or	r20, r3
     11a:	b1 29       	or	r27, r1
     11c:	b1 29       	or	r27, r1
     11e:	b1 29       	or	r27, r1
     120:	b1 29       	or	r27, r1
     122:	b1 29       	or	r27, r1
     124:	b1 29       	or	r27, r1
     126:	b1 29       	or	r27, r1
     128:	b1 29       	or	r27, r1
     12a:	b1 29       	or	r27, r1
     12c:	b1 29       	or	r27, r1
     12e:	b1 29       	or	r27, r1
     130:	b1 29       	or	r27, r1
     132:	b1 29       	or	r27, r1
     134:	b1 29       	or	r27, r1
     136:	b1 29       	or	r27, r1
     138:	43 29       	or	r20, r3
     13a:	b1 29       	or	r27, r1
     13c:	b1 29       	or	r27, r1
     13e:	b1 29       	or	r27, r1
     140:	b1 29       	or	r27, r1
     142:	b1 29       	or	r27, r1
     144:	b1 29       	or	r27, r1
     146:	b1 29       	or	r27, r1
     148:	b1 29       	or	r27, r1
     14a:	b1 29       	or	r27, r1
     14c:	b1 29       	or	r27, r1
     14e:	b1 29       	or	r27, r1
     150:	b1 29       	or	r27, r1
     152:	b1 29       	or	r27, r1
     154:	b1 29       	or	r27, r1
     156:	b1 29       	or	r27, r1
     158:	ad 29       	or	r26, r13
     15a:	b1 29       	or	r27, r1
     15c:	b1 29       	or	r27, r1
     15e:	b1 29       	or	r27, r1
     160:	b1 29       	or	r27, r1
     162:	b1 29       	or	r27, r1
     164:	b1 29       	or	r27, r1
     166:	b1 29       	or	r27, r1
     168:	78 29       	or	r23, r8
     16a:	b1 29       	or	r27, r1
     16c:	b1 29       	or	r27, r1
     16e:	b1 29       	or	r27, r1
     170:	b1 29       	or	r27, r1
     172:	b1 29       	or	r27, r1
     174:	b1 29       	or	r27, r1
     176:	b1 29       	or	r27, r1
     178:	b1 29       	or	r27, r1
     17a:	b1 29       	or	r27, r1
     17c:	b1 29       	or	r27, r1
     17e:	b1 29       	or	r27, r1
     180:	b1 29       	or	r27, r1
     182:	b1 29       	or	r27, r1
     184:	b1 29       	or	r27, r1
     186:	b1 29       	or	r27, r1
     188:	6c 29       	or	r22, r12
     18a:	b1 29       	or	r27, r1
     18c:	b1 29       	or	r27, r1
     18e:	b1 29       	or	r27, r1
     190:	b1 29       	or	r27, r1
     192:	b1 29       	or	r27, r1
     194:	b1 29       	or	r27, r1
     196:	b1 29       	or	r27, r1
     198:	90 29       	or	r25, r0

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <prvCheckTasksWaitingTermination>
     19e:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	bd d3       	rcall	.+1914   	; 0x922 <vPortYield>
     1a8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 37 19 	call	0x326e	; 0x326e <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 ec       	ldi	r30, 0xC6	; 198
     1e4:	f0 e6       	ldi	r31, 0x60	; 96
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 35       	cpi	r26, 0x52	; 82
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	27 e1       	ldi	r18, 0x17	; 23
     1f8:	a2 e5       	ldi	r26, 0x52	; 82
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 36       	cpi	r26, 0x6F	; 111
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <main>
     20a:	0c 94 61 30 	jmp	0x60c2	; 0x60c2 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     210:	0f 93       	push	r16
     212:	01 11       	cpse	r16, r1
     214:	0c c0       	rjmp	.+24     	; 0x22e <prvTestWaitCondition+0x1e>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	82 23       	and	r24, r18
     21c:	93 23       	and	r25, r19
     21e:	a4 23       	and	r26, r20
     220:	b5 23       	and	r27, r21
     222:	89 2b       	or	r24, r25
     224:	8a 2b       	or	r24, r26
     226:	8b 2b       	or	r24, r27
     228:	79 f4       	brne	.+30     	; 0x248 <prvTestWaitCondition+0x38>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	10 c0       	rjmp	.+32     	; 0x24e <prvTestWaitCondition+0x3e>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	82 23       	and	r24, r18
     234:	93 23       	and	r25, r19
     236:	a4 23       	and	r26, r20
     238:	b5 23       	and	r27, r21
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	4a 07       	cpc	r20, r26
     240:	5b 07       	cpc	r21, r27
     242:	21 f0       	breq	.+8      	; 0x24c <prvTestWaitCondition+0x3c>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <prvTestWaitCondition+0x3e>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <prvTestWaitCondition+0x3e>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <xEventGroupCreate>:
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	af d1       	rcall	.+862    	; 0x5ba <pvPortMalloc>
     25c:	ec 01       	movw	r28, r24
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	39 f0       	breq	.+14     	; 0x270 <xEventGroupCreate+0x1e>
     262:	fc 01       	movw	r30, r24
     264:	11 92       	st	Z+, r1
     266:	11 92       	st	Z+, r1
     268:	11 92       	st	Z+, r1
     26a:	11 92       	st	Z+, r1
     26c:	cf 01       	movw	r24, r30
     26e:	8b d2       	rcall	.+1302   	; 0x786 <vListInitialise>
     270:	ce 01       	movw	r24, r28
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <xEventGroupWaitBits>:
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	4a 01       	movw	r8, r20
     2a0:	5b 01       	movw	r10, r22
     2a2:	62 2e       	mov	r6, r18
     2a4:	70 2e       	mov	r7, r16
     2a6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <vTaskSuspendAll>
     2aa:	28 80       	ld	r2, Y
     2ac:	39 80       	ldd	r3, Y+1	; 0x01
     2ae:	4a 80       	ldd	r4, Y+2	; 0x02
     2b0:	5b 80       	ldd	r5, Y+3	; 0x03
     2b2:	a5 01       	movw	r20, r10
     2b4:	94 01       	movw	r18, r8
     2b6:	c2 01       	movw	r24, r4
     2b8:	b1 01       	movw	r22, r2
     2ba:	aa df       	rcall	.-172    	; 0x210 <prvTestWaitCondition>
     2bc:	88 23       	and	r24, r24
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <xEventGroupWaitBits+0x70>
     2c0:	66 20       	and	r6, r6
     2c2:	89 f1       	breq	.+98     	; 0x326 <xEventGroupWaitBits+0xae>
     2c4:	d5 01       	movw	r26, r10
     2c6:	c4 01       	movw	r24, r8
     2c8:	80 95       	com	r24
     2ca:	90 95       	com	r25
     2cc:	a0 95       	com	r26
     2ce:	b0 95       	com	r27
     2d0:	82 21       	and	r24, r2
     2d2:	93 21       	and	r25, r3
     2d4:	a4 21       	and	r26, r4
     2d6:	b5 21       	and	r27, r5
     2d8:	88 83       	st	Y, r24
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	aa 83       	std	Y+2, r26	; 0x02
     2de:	bb 83       	std	Y+3, r27	; 0x03
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	76 01       	movw	r14, r12
     2e6:	22 c0       	rjmp	.+68     	; 0x32c <xEventGroupWaitBits+0xb4>
     2e8:	c1 14       	cp	r12, r1
     2ea:	d1 04       	cpc	r13, r1
     2ec:	e1 04       	cpc	r14, r1
     2ee:	f1 04       	cpc	r15, r1
     2f0:	e9 f0       	breq	.+58     	; 0x32c <xEventGroupWaitBits+0xb4>
     2f2:	61 10       	cpse	r6, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <xEventGroupWaitBits+0x86>
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	ba 01       	movw	r22, r20
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <xEventGroupWaitBits+0x8e>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	71 e0       	ldi	r23, 0x01	; 1
     306:	71 10       	cpse	r7, r1
     308:	74 60       	ori	r23, 0x04	; 4
     30a:	48 29       	or	r20, r8
     30c:	59 29       	or	r21, r9
     30e:	6a 29       	or	r22, r10
     310:	7b 29       	or	r23, r11
     312:	97 01       	movw	r18, r14
     314:	86 01       	movw	r16, r12
     316:	ce 01       	movw	r24, r28
     318:	04 96       	adiw	r24, 0x04	; 4
     31a:	0e 94 13 11 	call	0x2226	; 0x2226 <vTaskPlaceOnUnorderedEventList>
     31e:	21 2c       	mov	r2, r1
     320:	31 2c       	mov	r3, r1
     322:	21 01       	movw	r4, r2
     324:	03 c0       	rjmp	.+6      	; 0x32c <xEventGroupWaitBits+0xb4>
     326:	c1 2c       	mov	r12, r1
     328:	d1 2c       	mov	r13, r1
     32a:	76 01       	movw	r14, r12
     32c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
     330:	cd 28       	or	r12, r13
     332:	ce 28       	or	r12, r14
     334:	cf 28       	or	r12, r15
     336:	59 f1       	breq	.+86     	; 0x38e <xEventGroupWaitBits+0x116>
     338:	81 11       	cpse	r24, r1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <xEventGroupWaitBits+0xc6>
     33c:	f2 d2       	rcall	.+1508   	; 0x922 <vPortYield>
     33e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <uxTaskResetEventItemValue>
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	91 fd       	sbrc	r25, 1
     348:	1f c0       	rjmp	.+62     	; 0x388 <xEventGroupWaitBits+0x110>
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	0f 92       	push	r0
     350:	c8 80       	ld	r12, Y
     352:	d9 80       	ldd	r13, Y+1	; 0x01
     354:	ea 80       	ldd	r14, Y+2	; 0x02
     356:	fb 80       	ldd	r15, Y+3	; 0x03
     358:	07 2d       	mov	r16, r7
     35a:	a5 01       	movw	r20, r10
     35c:	94 01       	movw	r18, r8
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	56 df       	rcall	.-340    	; 0x210 <prvTestWaitCondition>
     364:	88 23       	and	r24, r24
     366:	71 f0       	breq	.+28     	; 0x384 <xEventGroupWaitBits+0x10c>
     368:	66 20       	and	r6, r6
     36a:	61 f0       	breq	.+24     	; 0x384 <xEventGroupWaitBits+0x10c>
     36c:	80 94       	com	r8
     36e:	90 94       	com	r9
     370:	a0 94       	com	r10
     372:	b0 94       	com	r11
     374:	8c 20       	and	r8, r12
     376:	9d 20       	and	r9, r13
     378:	ae 20       	and	r10, r14
     37a:	bf 20       	and	r11, r15
     37c:	88 82       	st	Y, r8
     37e:	99 82       	std	Y+1, r9	; 0x01
     380:	aa 82       	std	Y+2, r10	; 0x02
     382:	bb 82       	std	Y+3, r11	; 0x03
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	16 01       	movw	r2, r12
     38a:	27 01       	movw	r4, r14
     38c:	55 24       	eor	r5, r5
     38e:	c2 01       	movw	r24, r4
     390:	b1 01       	movw	r22, r2
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	2f 90       	pop	r2
     3b6:	08 95       	ret

000003b8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	6a 01       	movw	r12, r20
     3d8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3da:	8c 01       	movw	r16, r24
     3dc:	09 5f       	subi	r16, 0xF9	; 249
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     3e0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     3e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     3e6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	aa 81       	ldd	r26, Y+2	; 0x02
     3ee:	bb 81       	ldd	r27, Y+3	; 0x03
     3f0:	c8 2a       	or	r12, r24
     3f2:	d9 2a       	or	r13, r25
     3f4:	ea 2a       	or	r14, r26
     3f6:	fb 2a       	or	r15, r27
     3f8:	c8 82       	st	Y, r12
     3fa:	d9 82       	std	Y+1, r13	; 0x01
     3fc:	ea 82       	std	Y+2, r14	; 0x02
     3fe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     400:	c1 2c       	mov	r12, r1
     402:	d1 2c       	mov	r13, r1
     404:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     406:	3d c0       	rjmp	.+122    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        {
            pxNext = listGET_NEXT( pxListItem );
     408:	a4 80       	ldd	r10, Z+4	; 0x04
     40a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	a2 81       	ldd	r26, Z+2	; 0x02
     412:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     414:	ac 01       	movw	r20, r24
     416:	bd 01       	movw	r22, r26
     418:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     41a:	b2 fd       	sbrc	r27, 2
     41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     41e:	48 80       	ld	r4, Y
     420:	59 80       	ldd	r5, Y+1	; 0x01
     422:	6a 80       	ldd	r6, Y+2	; 0x02
     424:	7b 80       	ldd	r7, Y+3	; 0x03
     426:	44 22       	and	r4, r20
     428:	55 22       	and	r5, r21
     42a:	66 22       	and	r6, r22
     42c:	77 22       	and	r7, r23
     42e:	45 28       	or	r4, r5
     430:	46 28       	or	r4, r6
     432:	47 28       	or	r4, r7
     434:	89 f4       	brne	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	12 c0       	rjmp	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     43a:	48 80       	ld	r4, Y
     43c:	59 80       	ldd	r5, Y+1	; 0x01
     43e:	6a 80       	ldd	r6, Y+2	; 0x02
     440:	7b 80       	ldd	r7, Y+3	; 0x03
     442:	44 22       	and	r4, r20
     444:	55 22       	and	r5, r21
     446:	66 22       	and	r6, r22
     448:	77 22       	and	r7, r23
     44a:	44 15       	cp	r20, r4
     44c:	55 05       	cpc	r21, r5
     44e:	66 05       	cpc	r22, r6
     450:	77 05       	cpc	r23, r7
     452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     45c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     45e:	22 23       	and	r18, r18
     460:	71 f0       	breq	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     462:	b0 ff       	sbrs	r27, 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     466:	c4 2a       	or	r12, r20
     468:	d5 2a       	or	r13, r21
     46a:	e6 2a       	or	r14, r22
     46c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     46e:	48 81       	ld	r20, Y
     470:	59 81       	ldd	r21, Y+1	; 0x01
     472:	6a 81       	ldd	r22, Y+2	; 0x02
     474:	7b 81       	ldd	r23, Y+3	; 0x03
     476:	72 60       	ori	r23, 0x02	; 2
     478:	cf 01       	movw	r24, r30
     47a:	0e 94 4e 12 	call	0x249c	; 0x249c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     47e:	ea 2d       	mov	r30, r10
     480:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     482:	e0 17       	cp	r30, r16
     484:	f1 07       	cpc	r31, r17
     486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	bf cf       	rjmp	.-130    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     48a:	c0 94       	com	r12
     48c:	d0 94       	com	r13
     48e:	e0 94       	com	r14
     490:	f0 94       	com	r15
     492:	88 81       	ld	r24, Y
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	aa 81       	ldd	r26, Y+2	; 0x02
     498:	bb 81       	ldd	r27, Y+3	; 0x03
     49a:	c8 22       	and	r12, r24
     49c:	d9 22       	and	r13, r25
     49e:	ea 22       	and	r14, r26
     4a0:	fb 22       	and	r15, r27
     4a2:	c8 82       	st	Y, r12
     4a4:	d9 82       	std	Y+1, r13	; 0x01
     4a6:	ea 82       	std	Y+2, r14	; 0x02
     4a8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     4aa:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	08 95       	ret

000004d4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4d4:	ee e5       	ldi	r30, 0x5E	; 94
     4d6:	f7 e0       	ldi	r31, 0x07	; 7
     4d8:	a2 e6       	ldi	r26, 0x62	; 98
     4da:	b7 e0       	ldi	r27, 0x07	; 7
     4dc:	b1 83       	std	Z+1, r27	; 0x01
     4de:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4e4:	ea e0       	ldi	r30, 0x0A	; 10
     4e6:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4e8:	f0 93 5d 07 	sts	0x075D, r31	; 0x80075d <pxEnd+0x1>
     4ec:	e0 93 5c 07 	sts	0x075C, r30	; 0x80075c <pxEnd>
    pxEnd->xBlockSize = 0;
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4f4:	11 82       	std	Z+1, r1	; 0x01
     4f6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4f8:	88 ea       	ldi	r24, 0xA8	; 168
     4fa:	9d e0       	ldi	r25, 0x0D	; 13
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     504:	ed 93       	st	X+, r30
     506:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     508:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <xMinimumEverFreeBytesRemaining+0x1>
     50c:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     510:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <xFreeBytesRemaining+0x1>
     514:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e8       	ldi	r25, 0x80	; 128
     51c:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <__data_end+0x1>
     520:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <__data_end>
     524:	08 95       	ret

00000526 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     52c:	ae e5       	ldi	r26, 0x5E	; 94
     52e:	b7 e0       	ldi	r27, 0x07	; 7
     530:	01 c0       	rjmp	.+2      	; 0x534 <prvInsertBlockIntoFreeList+0xe>
     532:	df 01       	movw	r26, r30
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	ec 17       	cp	r30, r28
     53c:	fd 07       	cpc	r31, r29
     53e:	c8 f3       	brcs	.-14     	; 0x532 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	8d 91       	ld	r24, X+
     544:	9c 91       	ld	r25, X
     546:	13 97       	sbiw	r26, 0x03	; 3
     548:	9d 01       	movw	r18, r26
     54a:	28 0f       	add	r18, r24
     54c:	39 1f       	adc	r19, r25
     54e:	c2 17       	cp	r28, r18
     550:	d3 07       	cpc	r29, r19
     552:	49 f4       	brne	.+18     	; 0x566 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	3b 81       	ldd	r19, Y+3	; 0x03
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	13 96       	adiw	r26, 0x03	; 3
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     564:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	9e 01       	movw	r18, r28
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	c1 f4       	brne	.+48     	; 0x5a6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     576:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <pxEnd>
     57a:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <pxEnd+0x1>
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	71 f0       	breq	.+28     	; 0x5a0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     584:	22 81       	ldd	r18, Z+2	; 0x02
     586:	33 81       	ldd	r19, Z+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	99 83       	std	Y+1, r25	; 0x01
     59c:	88 83       	st	Y, r24
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5a0:	39 83       	std	Y+1, r19	; 0x01
     5a2:	28 83       	st	Y, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     5a6:	f9 83       	std	Y+1, r31	; 0x01
     5a8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     5aa:	ca 17       	cp	r28, r26
     5ac:	db 07       	cpc	r29, r27
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     5b0:	cd 93       	st	X+, r28
     5b2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5c8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5cc:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <pxEnd>
     5d0:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <pxEnd+0x1>
     5d4:	89 2b       	or	r24, r25
     5d6:	09 f4       	brne	.+2      	; 0x5da <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5d8:	7d df       	rcall	.-262    	; 0x4d4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5da:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <__data_end>
     5de:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <__data_end+0x1>
     5e2:	80 23       	and	r24, r16
     5e4:	91 23       	and	r25, r17
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f0       	breq	.+2      	; 0x5ec <pvPortMalloc+0x32>
     5ea:	76 c0       	rjmp	.+236    	; 0x6d8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5ec:	01 15       	cp	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	49 f0       	breq	.+18     	; 0x604 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5f2:	c8 01       	movw	r24, r16
     5f4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f6:	08 17       	cp	r16, r24
     5f8:	19 07       	cpc	r17, r25
     5fa:	18 f0       	brcs	.+6      	; 0x602 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	01 c0       	rjmp	.+2      	; 0x604 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     602:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     604:	01 15       	cp	r16, r1
     606:	11 05       	cpc	r17, r1
     608:	09 f4       	brne	.+2      	; 0x60c <pvPortMalloc+0x52>
     60a:	69 c0       	rjmp	.+210    	; 0x6de <pvPortMalloc+0x124>
     60c:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xFreeBytesRemaining>
     610:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <xFreeBytesRemaining+0x1>
     614:	80 17       	cp	r24, r16
     616:	91 07       	cpc	r25, r17
     618:	08 f4       	brcc	.+2      	; 0x61c <pvPortMalloc+0x62>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     61c:	c0 91 5e 07 	lds	r28, 0x075E	; 0x80075e <xStart>
     620:	d0 91 5f 07 	lds	r29, 0x075F	; 0x80075f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     624:	ee e5       	ldi	r30, 0x5E	; 94
     626:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     628:	02 c0       	rjmp	.+4      	; 0x62e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     62a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     62c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	80 17       	cp	r24, r16
     634:	91 07       	cpc	r25, r17
     636:	20 f4       	brcc	.+8      	; 0x640 <pvPortMalloc+0x86>
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	a9 f7       	brne	.-22     	; 0x62a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     640:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <pxEnd>
     644:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <pxEnd+0x1>
     648:	c8 17       	cp	r28, r24
     64a:	d9 07       	cpc	r29, r25
     64c:	09 f4       	brne	.+2      	; 0x650 <pvPortMalloc+0x96>
     64e:	4d c0       	rjmp	.+154    	; 0x6ea <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     650:	e0 80       	ld	r14, Z
     652:	f1 80       	ldd	r15, Z+1	; 0x01
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	e8 0e       	add	r14, r24
     658:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     662:	2a 81       	ldd	r18, Y+2	; 0x02
     664:	3b 81       	ldd	r19, Y+3	; 0x03
     666:	20 1b       	sub	r18, r16
     668:	31 0b       	sbc	r19, r17
     66a:	29 30       	cpi	r18, 0x09	; 9
     66c:	31 05       	cpc	r19, r1
     66e:	48 f0       	brcs	.+18     	; 0x682 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     670:	ce 01       	movw	r24, r28
     672:	80 0f       	add	r24, r16
     674:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     676:	fc 01       	movw	r30, r24
     678:	33 83       	std	Z+3, r19	; 0x03
     67a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     67c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     67e:	0a 83       	std	Y+2, r16	; 0x02
     680:	52 df       	rcall	.-348    	; 0x526 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     682:	2a 81       	ldd	r18, Y+2	; 0x02
     684:	3b 81       	ldd	r19, Y+3	; 0x03
     686:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xFreeBytesRemaining>
     68a:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <xFreeBytesRemaining+0x1>
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <xFreeBytesRemaining+0x1>
     696:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     69a:	40 91 58 07 	lds	r20, 0x0758	; 0x800758 <xMinimumEverFreeBytesRemaining>
     69e:	50 91 59 07 	lds	r21, 0x0759	; 0x800759 <xMinimumEverFreeBytesRemaining+0x1>
     6a2:	84 17       	cp	r24, r20
     6a4:	95 07       	cpc	r25, r21
     6a6:	20 f4       	brcc	.+8      	; 0x6b0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a8:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <xMinimumEverFreeBytesRemaining+0x1>
     6ac:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6b0:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <__data_end>
     6b4:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <__data_end+0x1>
     6b8:	28 2b       	or	r18, r24
     6ba:	39 2b       	or	r19, r25
     6bc:	3b 83       	std	Y+3, r19	; 0x03
     6be:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6c4:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <xNumberOfSuccessfulAllocations>
     6c8:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <xNumberOfSuccessfulAllocations+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <xNumberOfSuccessfulAllocations+0x1>
     6d2:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <xNumberOfSuccessfulAllocations>
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
     6dc:	08 c0       	rjmp	.+16     	; 0x6ee <pvPortMalloc+0x134>
     6de:	e1 2c       	mov	r14, r1
     6e0:	f1 2c       	mov	r15, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <pvPortMalloc+0x134>
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <pvPortMalloc+0x134>
     6ea:	e1 2c       	mov	r14, r1
     6ec:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ee:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6f8:	0e 94 f7 19 	call	0x33ee	; 0x33ee <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6fc:	c7 01       	movw	r24, r14
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	08 95       	ret

0000070c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	91 f1       	breq	.+100    	; 0x77c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     718:	ec 01       	movw	r28, r24
     71a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     71c:	4a 81       	ldd	r20, Y+2	; 0x02
     71e:	5b 81       	ldd	r21, Y+3	; 0x03
     720:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <__data_end>
     724:	30 91 53 07 	lds	r19, 0x0753	; 0x800753 <__data_end+0x1>
     728:	ba 01       	movw	r22, r20
     72a:	62 23       	and	r22, r18
     72c:	73 23       	and	r23, r19
     72e:	67 2b       	or	r22, r23
     730:	29 f1       	breq	.+74     	; 0x77c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     732:	68 81       	ld	r22, Y
     734:	79 81       	ldd	r23, Y+1	; 0x01
     736:	67 2b       	or	r22, r23
     738:	09 f5       	brne	.+66     	; 0x77c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     73a:	20 95       	com	r18
     73c:	30 95       	com	r19
     73e:	24 23       	and	r18, r20
     740:	35 23       	and	r19, r21
     742:	3b 83       	std	Y+3, r19	; 0x03
     744:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     746:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	9b 81       	ldd	r25, Y+3	; 0x03
     74e:	20 91 5a 07 	lds	r18, 0x075A	; 0x80075a <xFreeBytesRemaining>
     752:	30 91 5b 07 	lds	r19, 0x075B	; 0x80075b <xFreeBytesRemaining+0x1>
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <xFreeBytesRemaining+0x1>
     75e:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     762:	ce 01       	movw	r24, r28
     764:	e0 de       	rcall	.-576    	; 0x526 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     766:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <xNumberOfSuccessfulFrees>
     76a:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <xNumberOfSuccessfulFrees+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <xNumberOfSuccessfulFrees+0x1>
     774:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     778:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     786:	fc 01       	movw	r30, r24
     788:	03 96       	adiw	r24, 0x03	; 3
     78a:	92 83       	std	Z+2, r25	; 0x02
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	4f ef       	ldi	r20, 0xFF	; 255
     790:	5f ef       	ldi	r21, 0xFF	; 255
     792:	ba 01       	movw	r22, r20
     794:	43 83       	std	Z+3, r20	; 0x03
     796:	54 83       	std	Z+4, r21	; 0x04
     798:	65 83       	std	Z+5, r22	; 0x05
     79a:	76 83       	std	Z+6, r23	; 0x06
     79c:	90 87       	std	Z+8, r25	; 0x08
     79e:	87 83       	std	Z+7, r24	; 0x07
     7a0:	92 87       	std	Z+10, r25	; 0x0a
     7a2:	81 87       	std	Z+9, r24	; 0x09
     7a4:	10 82       	st	Z, r1
     7a6:	08 95       	ret

000007a8 <vListInitialiseItem>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	13 86       	std	Z+11, r1	; 0x0b
     7ac:	12 86       	std	Z+10, r1	; 0x0a
     7ae:	08 95       	ret

000007b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7ba:	08 81       	ld	r16, Y
     7bc:	19 81       	ldd	r17, Y+1	; 0x01
     7be:	2a 81       	ldd	r18, Y+2	; 0x02
     7c0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7c2:	0f 3f       	cpi	r16, 0xFF	; 255
     7c4:	4f ef       	ldi	r20, 0xFF	; 255
     7c6:	14 07       	cpc	r17, r20
     7c8:	24 07       	cpc	r18, r20
     7ca:	34 07       	cpc	r19, r20
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ce:	fc 01       	movw	r30, r24
     7d0:	a1 85       	ldd	r26, Z+9	; 0x09
     7d2:	b2 85       	ldd	r27, Z+10	; 0x0a
     7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7d6:	dc 01       	movw	r26, r24
     7d8:	13 96       	adiw	r26, 0x03	; 3
     7da:	01 c0       	rjmp	.+2      	; 0x7de <vListInsert+0x2e>
     7dc:	df 01       	movw	r26, r30
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	15 97       	sbiw	r26, 0x05	; 5
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	62 81       	ldd	r22, Z+2	; 0x02
     7ec:	73 81       	ldd	r23, Z+3	; 0x03
     7ee:	04 17       	cp	r16, r20
     7f0:	15 07       	cpc	r17, r21
     7f2:	26 07       	cpc	r18, r22
     7f4:	37 07       	cpc	r19, r23
     7f6:	90 f7       	brcc	.-28     	; 0x7dc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7f8:	14 96       	adiw	r26, 0x04	; 4
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	15 97       	sbiw	r26, 0x05	; 5
     800:	fd 83       	std	Y+5, r31	; 0x05
     802:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     804:	d7 83       	std	Z+7, r29	; 0x07
     806:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     808:	bf 83       	std	Y+7, r27	; 0x07
     80a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     80c:	15 96       	adiw	r26, 0x05	; 5
     80e:	dc 93       	st	X, r29
     810:	ce 93       	st	-X, r28
     812:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     814:	9b 87       	std	Y+11, r25	; 0x0b
     816:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	20 83       	st	Z, r18
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     830:	a2 85       	ldd	r26, Z+10	; 0x0a
     832:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     834:	c4 81       	ldd	r28, Z+4	; 0x04
     836:	d5 81       	ldd	r29, Z+5	; 0x05
     838:	86 81       	ldd	r24, Z+6	; 0x06
     83a:	97 81       	ldd	r25, Z+7	; 0x07
     83c:	9f 83       	std	Y+7, r25	; 0x07
     83e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     840:	c6 81       	ldd	r28, Z+6	; 0x06
     842:	d7 81       	ldd	r29, Z+7	; 0x07
     844:	84 81       	ldd	r24, Z+4	; 0x04
     846:	95 81       	ldd	r25, Z+5	; 0x05
     848:	9d 83       	std	Y+5, r25	; 0x05
     84a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	e8 17       	cp	r30, r24
     856:	f9 07       	cpc	r31, r25
     858:	31 f4       	brne	.+12     	; 0x866 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     85a:	86 81       	ldd	r24, Z+6	; 0x06
     85c:	97 81       	ldd	r25, Z+7	; 0x07
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	9c 93       	st	X, r25
     862:	8e 93       	st	-X, r24
     864:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     866:	13 86       	std	Z+11, r1	; 0x0b
     868:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     86a:	8c 91       	ld	r24, X
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     870:	8c 91       	ld	r24, X
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     878:	a8 95       	wdr
     87a:	90 ec       	ldi	r25, 0xC0	; 192
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	a8 95       	wdr
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     888:	0f be       	out	0x3f, r0	; 63
     88a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     88e:	08 95       	ret

00000890 <pxPortInitialiseStack>:
     890:	fc 01       	movw	r30, r24
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	70 83       	st	Z, r23
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	10 82       	st	Z, r1
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	20 e8       	ldi	r18, 0x80	; 128
     8a4:	20 83       	st	Z, r18
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	10 82       	st	Z, r1
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	10 82       	st	Z, r1
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	10 82       	st	Z, r1
     8b2:	77 97       	sbiw	r30, 0x17	; 23
     8b4:	40 83       	st	Z, r20
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	50 83       	st	Z, r21
     8ba:	86 97       	sbiw	r24, 0x26	; 38
     8bc:	08 95       	ret

000008be <xPortStartScheduler>:
     8be:	dc df       	rcall	.-72     	; 0x878 <prvSetupTimerInterrupt>
     8c0:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
     8c4:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
     8c8:	cd 91       	ld	r28, X+
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	dd 91       	ld	r29, X+
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	3f 90       	pop	r3
     90a:	2f 90       	pop	r2
     90c:	1f 90       	pop	r1
     90e:	0f 90       	pop	r0
     910:	0c be       	out	0x3c, r0	; 60
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	08 95       	ret
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret

00000922 <vPortYield>:
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	0f 92       	push	r0
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	0c b6       	in	r0, 0x3c	; 60
     930:	0f 92       	push	r0
     932:	1f 92       	push	r1
     934:	11 24       	eor	r1, r1
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
     976:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
     97a:	0d b6       	in	r0, 0x3d	; 61
     97c:	0d 92       	st	X+, r0
     97e:	0e b6       	in	r0, 0x3e	; 62
     980:	0d 92       	st	X+, r0
     982:	0e 94 97 10 	call	0x212e	; 0x212e <vTaskSwitchContext>
     986:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
     98a:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
     98e:	cd 91       	ld	r28, X+
     990:	cd bf       	out	0x3d, r28	; 61
     992:	dd 91       	ld	r29, X+
     994:	de bf       	out	0x3e, r29	; 62
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	1f 90       	pop	r1
     9d4:	0f 90       	pop	r0
     9d6:	0c be       	out	0x3c, r0	; 60
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	08 95       	ret

000009e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	0c b6       	in	r0, 0x3c	; 60
     9f2:	0f 92       	push	r0
     9f4:	1f 92       	push	r1
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
     a38:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
     a3c:	0d b6       	in	r0, 0x3d	; 61
     a3e:	0d 92       	st	X+, r0
     a40:	0e b6       	in	r0, 0x3e	; 62
     a42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a46:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <xTaskIncrementTick>
     a4a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a4c:	0e 94 97 10 	call	0x212e	; 0x212e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a50:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
     a54:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
     a58:	cd 91       	ld	r28, X+
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	dd 91       	ld	r29, X+
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	0c be       	out	0x3c, r0	; 60
     aa2:	0f 90       	pop	r0
     aa4:	0b be       	out	0x3b, r0	; 59
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aac:	08 95       	ret

00000aae <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     aae:	9a df       	rcall	.-204    	; 0x9e4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ab0:	18 95       	reti

00000ab2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	0f 92       	push	r0
     ab8:	fc 01       	movw	r30, r24
     aba:	86 8d       	ldd	r24, Z+30	; 0x1e
     abc:	81 11       	cpse	r24, r1
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <prvIsQueueEmpty+0x12>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <prvIsQueueEmpty+0x14>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	08 95       	ret

00000acc <prvIsQueueFull>:
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	0f 92       	push	r0
     ad2:	fc 01       	movw	r30, r24
     ad4:	26 8d       	ldd	r18, Z+30	; 0x1e
     ad6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ad8:	28 13       	cpse	r18, r24
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <prvIsQueueFull+0x14>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <prvIsQueueFull+0x16>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	08 95       	ret

00000ae8 <prvCopyDataToQueue>:
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	ec 01       	movw	r28, r24
     af2:	04 2f       	mov	r16, r20
     af4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     af6:	48 a1       	ldd	r20, Y+32	; 0x20
     af8:	41 11       	cpse	r20, r1
     afa:	0c c0       	rjmp	.+24     	; 0xb14 <prvCopyDataToQueue+0x2c>
     afc:	88 81       	ld	r24, Y
     afe:	99 81       	ldd	r25, Y+1	; 0x01
     b00:	89 2b       	or	r24, r25
     b02:	09 f0       	breq	.+2      	; 0xb06 <prvCopyDataToQueue+0x1e>
     b04:	42 c0       	rjmp	.+132    	; 0xb8a <prvCopyDataToQueue+0xa2>
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	9d 81       	ldd	r25, Y+5	; 0x05
     b0a:	0e 94 8c 13 	call	0x2718	; 0x2718 <xTaskPriorityDisinherit>
     b0e:	1d 82       	std	Y+5, r1	; 0x05
     b10:	1c 82       	std	Y+4, r1	; 0x04
     b12:	42 c0       	rjmp	.+132    	; 0xb98 <prvCopyDataToQueue+0xb0>
     b14:	01 11       	cpse	r16, r1
     b16:	17 c0       	rjmp	.+46     	; 0xb46 <prvCopyDataToQueue+0x5e>
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
     b22:	28 a1       	ldd	r18, Y+32	; 0x20
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	9b 81       	ldd	r25, Y+3	; 0x03
     b28:	82 0f       	add	r24, r18
     b2a:	91 1d       	adc	r25, r1
     b2c:	9b 83       	std	Y+3, r25	; 0x03
     b2e:	8a 83       	std	Y+2, r24	; 0x02
     b30:	2c 81       	ldd	r18, Y+4	; 0x04
     b32:	3d 81       	ldd	r19, Y+5	; 0x05
     b34:	82 17       	cp	r24, r18
     b36:	93 07       	cpc	r25, r19
     b38:	50 f1       	brcs	.+84     	; 0xb8e <prvCopyDataToQueue+0xa6>
     b3a:	88 81       	ld	r24, Y
     b3c:	99 81       	ldd	r25, Y+1	; 0x01
     b3e:	9b 83       	std	Y+3, r25	; 0x03
     b40:	8a 83       	std	Y+2, r24	; 0x02
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	29 c0       	rjmp	.+82     	; 0xb98 <prvCopyDataToQueue+0xb0>
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	8e 81       	ldd	r24, Y+6	; 0x06
     b4a:	9f 81       	ldd	r25, Y+7	; 0x07
     b4c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
     b50:	88 a1       	ldd	r24, Y+32	; 0x20
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	91 95       	neg	r25
     b56:	81 95       	neg	r24
     b58:	91 09       	sbc	r25, r1
     b5a:	2e 81       	ldd	r18, Y+6	; 0x06
     b5c:	3f 81       	ldd	r19, Y+7	; 0x07
     b5e:	28 0f       	add	r18, r24
     b60:	39 1f       	adc	r19, r25
     b62:	3f 83       	std	Y+7, r19	; 0x07
     b64:	2e 83       	std	Y+6, r18	; 0x06
     b66:	48 81       	ld	r20, Y
     b68:	59 81       	ldd	r21, Y+1	; 0x01
     b6a:	24 17       	cp	r18, r20
     b6c:	35 07       	cpc	r19, r21
     b6e:	30 f4       	brcc	.+12     	; 0xb7c <prvCopyDataToQueue+0x94>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	82 0f       	add	r24, r18
     b76:	93 1f       	adc	r25, r19
     b78:	9f 83       	std	Y+7, r25	; 0x07
     b7a:	8e 83       	std	Y+6, r24	; 0x06
     b7c:	02 30       	cpi	r16, 0x02	; 2
     b7e:	49 f4       	brne	.+18     	; 0xb92 <prvCopyDataToQueue+0xaa>
     b80:	11 23       	and	r17, r17
     b82:	49 f0       	breq	.+18     	; 0xb96 <prvCopyDataToQueue+0xae>
     b84:	11 50       	subi	r17, 0x01	; 1
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	07 c0       	rjmp	.+14     	; 0xb98 <prvCopyDataToQueue+0xb0>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <prvCopyDataToQueue+0xb0>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <prvCopyDataToQueue+0xb0>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <prvCopyDataToQueue+0xb0>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	1f 5f       	subi	r17, 0xFF	; 255
     b9a:	1e 8f       	std	Y+30, r17	; 0x1e
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <prvCopyDataFromQueue>:
     ba6:	fc 01       	movw	r30, r24
     ba8:	40 a1       	ldd	r20, Z+32	; 0x20
     baa:	44 23       	and	r20, r20
     bac:	a9 f0       	breq	.+42     	; 0xbd8 <prvCopyDataFromQueue+0x32>
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	26 81       	ldd	r18, Z+6	; 0x06
     bb2:	37 81       	ldd	r19, Z+7	; 0x07
     bb4:	24 0f       	add	r18, r20
     bb6:	35 1f       	adc	r19, r21
     bb8:	37 83       	std	Z+7, r19	; 0x07
     bba:	26 83       	std	Z+6, r18	; 0x06
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	95 81       	ldd	r25, Z+5	; 0x05
     bc0:	28 17       	cp	r18, r24
     bc2:	39 07       	cpc	r19, r25
     bc4:	20 f0       	brcs	.+8      	; 0xbce <prvCopyDataFromQueue+0x28>
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	97 83       	std	Z+7, r25	; 0x07
     bcc:	86 83       	std	Z+6, r24	; 0x06
     bce:	cb 01       	movw	r24, r22
     bd0:	66 81       	ldd	r22, Z+6	; 0x06
     bd2:	77 81       	ldd	r23, Z+7	; 0x07
     bd4:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <memcpy>
     bd8:	08 95       	ret

00000bda <prvUnlockQueue>:
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	0f 92       	push	r0
     be8:	1a a1       	ldd	r17, Y+34	; 0x22
     bea:	0b c0       	rjmp	.+22     	; 0xc02 <prvUnlockQueue+0x28>
     bec:	8b 89       	ldd	r24, Y+19	; 0x13
     bee:	88 23       	and	r24, r24
     bf0:	51 f0       	breq	.+20     	; 0xc06 <prvUnlockQueue+0x2c>
     bf2:	ce 01       	movw	r24, r28
     bf4:	43 96       	adiw	r24, 0x13	; 19
     bf6:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskRemoveFromEventList>
     bfa:	81 11       	cpse	r24, r1
     bfc:	0e 94 75 13 	call	0x26ea	; 0x26ea <vTaskMissedYield>
     c00:	11 50       	subi	r17, 0x01	; 1
     c02:	11 16       	cp	r1, r17
     c04:	9c f3       	brlt	.-26     	; 0xbec <prvUnlockQueue+0x12>
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	8a a3       	std	Y+34, r24	; 0x22
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	0f 92       	push	r0
     c14:	19 a1       	ldd	r17, Y+33	; 0x21
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <prvUnlockQueue+0x54>
     c18:	88 85       	ldd	r24, Y+8	; 0x08
     c1a:	88 23       	and	r24, r24
     c1c:	51 f0       	breq	.+20     	; 0xc32 <prvUnlockQueue+0x58>
     c1e:	ce 01       	movw	r24, r28
     c20:	08 96       	adiw	r24, 0x08	; 8
     c22:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskRemoveFromEventList>
     c26:	81 11       	cpse	r24, r1
     c28:	0e 94 75 13 	call	0x26ea	; 0x26ea <vTaskMissedYield>
     c2c:	11 50       	subi	r17, 0x01	; 1
     c2e:	11 16       	cp	r1, r17
     c30:	9c f3       	brlt	.-26     	; 0xc18 <prvUnlockQueue+0x3e>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	89 a3       	std	Y+33, r24	; 0x21
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	08 95       	ret

00000c42 <xQueueGenericReset>:
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	0f 92       	push	r0
     c4e:	e8 81       	ld	r30, Y
     c50:	f9 81       	ldd	r31, Y+1	; 0x01
     c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c54:	28 a1       	ldd	r18, Y+32	; 0x20
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	82 9f       	mul	r24, r18
     c5c:	a0 01       	movw	r20, r0
     c5e:	83 9f       	mul	r24, r19
     c60:	50 0d       	add	r21, r0
     c62:	92 9f       	mul	r25, r18
     c64:	50 0d       	add	r21, r0
     c66:	11 24       	eor	r1, r1
     c68:	4e 0f       	add	r20, r30
     c6a:	5f 1f       	adc	r21, r31
     c6c:	5d 83       	std	Y+5, r21	; 0x05
     c6e:	4c 83       	std	Y+4, r20	; 0x04
     c70:	1e 8e       	std	Y+30, r1	; 0x1e
     c72:	fb 83       	std	Y+3, r31	; 0x03
     c74:	ea 83       	std	Y+2, r30	; 0x02
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	28 9f       	mul	r18, r24
     c7a:	a0 01       	movw	r20, r0
     c7c:	29 9f       	mul	r18, r25
     c7e:	50 0d       	add	r21, r0
     c80:	38 9f       	mul	r19, r24
     c82:	50 0d       	add	r21, r0
     c84:	11 24       	eor	r1, r1
     c86:	cf 01       	movw	r24, r30
     c88:	84 0f       	add	r24, r20
     c8a:	95 1f       	adc	r25, r21
     c8c:	9f 83       	std	Y+7, r25	; 0x07
     c8e:	8e 83       	std	Y+6, r24	; 0x06
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	89 a3       	std	Y+33, r24	; 0x21
     c94:	8a a3       	std	Y+34, r24	; 0x22
     c96:	61 11       	cpse	r22, r1
     c98:	0b c0       	rjmp	.+22     	; 0xcb0 <xQueueGenericReset+0x6e>
     c9a:	88 85       	ldd	r24, Y+8	; 0x08
     c9c:	88 23       	and	r24, r24
     c9e:	71 f0       	breq	.+28     	; 0xcbc <xQueueGenericReset+0x7a>
     ca0:	ce 01       	movw	r24, r28
     ca2:	08 96       	adiw	r24, 0x08	; 8
     ca4:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskRemoveFromEventList>
     ca8:	88 23       	and	r24, r24
     caa:	41 f0       	breq	.+16     	; 0xcbc <xQueueGenericReset+0x7a>
     cac:	3a de       	rcall	.-908    	; 0x922 <vPortYield>
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <xQueueGenericReset+0x7a>
     cb0:	ce 01       	movw	r24, r28
     cb2:	08 96       	adiw	r24, 0x08	; 8
     cb4:	68 dd       	rcall	.-1328   	; 0x786 <vListInitialise>
     cb6:	ce 01       	movw	r24, r28
     cb8:	43 96       	adiw	r24, 0x13	; 19
     cba:	65 dd       	rcall	.-1334   	; 0x786 <vListInitialise>
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <prvInitialiseNewQueue>:
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	f8 01       	movw	r30, r16
     cce:	61 11       	cpse	r22, r1
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <prvInitialiseNewQueue+0x10>
     cd2:	11 83       	std	Z+1, r17	; 0x01
     cd4:	00 83       	st	Z, r16
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <prvInitialiseNewQueue+0x14>
     cd8:	51 83       	std	Z+1, r21	; 0x01
     cda:	40 83       	st	Z, r20
     cdc:	87 8f       	std	Z+31, r24	; 0x1f
     cde:	60 a3       	std	Z+32, r22	; 0x20
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	cf 01       	movw	r24, r30
     ce4:	ae df       	rcall	.-164    	; 0xc42 <xQueueGenericReset>
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <xQueueGenericCreate>:
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	f8 2e       	mov	r15, r24
     cfc:	e6 2e       	mov	r14, r22
     cfe:	d4 2e       	mov	r13, r20
     d00:	86 9f       	mul	r24, r22
     d02:	c0 01       	movw	r24, r0
     d04:	11 24       	eor	r1, r1
     d06:	83 96       	adiw	r24, 0x23	; 35
     d08:	58 dc       	rcall	.-1872   	; 0x5ba <pvPortMalloc>
     d0a:	ec 01       	movw	r28, r24
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	41 f0       	breq	.+16     	; 0xd20 <xQueueGenericCreate+0x34>
     d10:	8c 01       	movw	r16, r24
     d12:	2d 2d       	mov	r18, r13
     d14:	ac 01       	movw	r20, r24
     d16:	4d 5d       	subi	r20, 0xDD	; 221
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	6e 2d       	mov	r22, r14
     d1c:	8f 2d       	mov	r24, r15
     d1e:	d4 df       	rcall	.-88     	; 0xcc8 <prvInitialiseNewQueue>
     d20:	ce 01       	movw	r24, r28
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	08 95       	ret

00000d32 <xQueueGenericSend>:
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	29 97       	sbiw	r28, 0x09	; 9
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	7c 01       	movw	r14, r24
     d54:	6b 01       	movw	r12, r22
     d56:	2e 83       	std	Y+6, r18	; 0x06
     d58:	3f 83       	std	Y+7, r19	; 0x07
     d5a:	48 87       	std	Y+8, r20	; 0x08
     d5c:	59 87       	std	Y+9, r21	; 0x09
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	0f 92       	push	r0
     d66:	f7 01       	movw	r30, r14
     d68:	96 8d       	ldd	r25, Z+30	; 0x1e
     d6a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d6c:	98 17       	cp	r25, r24
     d6e:	10 f0       	brcs	.+4      	; 0xd74 <xQueueGenericSend+0x42>
     d70:	02 30       	cpi	r16, 0x02	; 2
     d72:	b1 f4       	brne	.+44     	; 0xda0 <xQueueGenericSend+0x6e>
     d74:	40 2f       	mov	r20, r16
     d76:	b6 01       	movw	r22, r12
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 de       	rcall	.-660    	; 0xae8 <prvCopyDataToQueue>
     d7c:	f7 01       	movw	r30, r14
     d7e:	93 89       	ldd	r25, Z+19	; 0x13
     d80:	99 23       	and	r25, r25
     d82:	41 f0       	breq	.+16     	; 0xd94 <xQueueGenericSend+0x62>
     d84:	c7 01       	movw	r24, r14
     d86:	43 96       	adiw	r24, 0x13	; 19
     d88:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskRemoveFromEventList>
     d8c:	88 23       	and	r24, r24
     d8e:	21 f0       	breq	.+8      	; 0xd98 <xQueueGenericSend+0x66>
     d90:	c8 dd       	rcall	.-1136   	; 0x922 <vPortYield>
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <xQueueGenericSend+0x66>
     d94:	81 11       	cpse	r24, r1
     d96:	c5 dd       	rcall	.-1142   	; 0x922 <vPortYield>
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	4c c0       	rjmp	.+152    	; 0xe38 <xQueueGenericSend+0x106>
     da0:	8e 81       	ldd	r24, Y+6	; 0x06
     da2:	9f 81       	ldd	r25, Y+7	; 0x07
     da4:	a8 85       	ldd	r26, Y+8	; 0x08
     da6:	b9 85       	ldd	r27, Y+9	; 0x09
     da8:	89 2b       	or	r24, r25
     daa:	8a 2b       	or	r24, r26
     dac:	8b 2b       	or	r24, r27
     dae:	21 f4       	brne	.+8      	; 0xdb8 <xQueueGenericSend+0x86>
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	40 c0       	rjmp	.+128    	; 0xe38 <xQueueGenericSend+0x106>
     db8:	11 11       	cpse	r17, r1
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <xQueueGenericSend+0x94>
     dbc:	ce 01       	movw	r24, r28
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	0e 94 fe 12 	call	0x25fc	; 0x25fc <vTaskInternalSetTimeOutState>
     dc4:	11 e0       	ldi	r17, 0x01	; 1
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	15 d7       	rcall	.+3626   	; 0x1bf6 <vTaskSuspendAll>
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	0f 92       	push	r0
     dd2:	f7 01       	movw	r30, r14
     dd4:	81 a1       	ldd	r24, Z+33	; 0x21
     dd6:	8f 3f       	cpi	r24, 0xFF	; 255
     dd8:	09 f4       	brne	.+2      	; 0xddc <xQueueGenericSend+0xaa>
     dda:	11 a2       	std	Z+33, r1	; 0x21
     ddc:	f7 01       	movw	r30, r14
     dde:	82 a1       	ldd	r24, Z+34	; 0x22
     de0:	8f 3f       	cpi	r24, 0xFF	; 255
     de2:	09 f4       	brne	.+2      	; 0xde6 <xQueueGenericSend+0xb4>
     de4:	12 a2       	std	Z+34, r1	; 0x22
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	be 01       	movw	r22, r28
     dec:	6a 5f       	subi	r22, 0xFA	; 250
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCheckForTimeOut>
     df8:	81 11       	cpse	r24, r1
     dfa:	19 c0       	rjmp	.+50     	; 0xe2e <xQueueGenericSend+0xfc>
     dfc:	c7 01       	movw	r24, r14
     dfe:	66 de       	rcall	.-820    	; 0xacc <prvIsQueueFull>
     e00:	88 23       	and	r24, r24
     e02:	81 f0       	breq	.+32     	; 0xe24 <xQueueGenericSend+0xf2>
     e04:	4e 81       	ldd	r20, Y+6	; 0x06
     e06:	5f 81       	ldd	r21, Y+7	; 0x07
     e08:	68 85       	ldd	r22, Y+8	; 0x08
     e0a:	79 85       	ldd	r23, Y+9	; 0x09
     e0c:	c7 01       	movw	r24, r14
     e0e:	08 96       	adiw	r24, 0x08	; 8
     e10:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vTaskPlaceOnEventList>
     e14:	c7 01       	movw	r24, r14
     e16:	e1 de       	rcall	.-574    	; 0xbda <prvUnlockQueue>
     e18:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
     e1c:	81 11       	cpse	r24, r1
     e1e:	a0 cf       	rjmp	.-192    	; 0xd60 <xQueueGenericSend+0x2e>
     e20:	80 dd       	rcall	.-1280   	; 0x922 <vPortYield>
     e22:	9e cf       	rjmp	.-196    	; 0xd60 <xQueueGenericSend+0x2e>
     e24:	c7 01       	movw	r24, r14
     e26:	d9 de       	rcall	.-590    	; 0xbda <prvUnlockQueue>
     e28:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
     e2c:	99 cf       	rjmp	.-206    	; 0xd60 <xQueueGenericSend+0x2e>
     e2e:	c7 01       	movw	r24, r14
     e30:	d4 de       	rcall	.-600    	; 0xbda <prvUnlockQueue>
     e32:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	29 96       	adiw	r28, 0x09	; 9
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	08 95       	ret

00000e56 <prvInitialiseMutex>:
     e56:	0f 93       	push	r16
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f0       	breq	.+26     	; 0xe76 <prvInitialiseMutex+0x20>
     e5c:	fc 01       	movw	r30, r24
     e5e:	15 82       	std	Z+5, r1	; 0x05
     e60:	14 82       	std	Z+4, r1	; 0x04
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
     e66:	16 82       	std	Z+6, r1	; 0x06
     e68:	00 e0       	ldi	r16, 0x00	; 0
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	5e df       	rcall	.-324    	; 0xd32 <xQueueGenericSend>
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <xQueueCreateMutex>:
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	48 2f       	mov	r20, r24
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	33 df       	rcall	.-410    	; 0xcec <xQueueGenericCreate>
     e86:	ec 01       	movw	r28, r24
     e88:	e6 df       	rcall	.-52     	; 0xe56 <prvInitialiseMutex>
     e8a:	ce 01       	movw	r24, r28
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <xQueueGenericSendFromISR>:
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	8a 01       	movw	r16, r20
     ea0:	fc 01       	movw	r30, r24
     ea2:	56 8d       	ldd	r21, Z+30	; 0x1e
     ea4:	37 8d       	ldd	r19, Z+31	; 0x1f
     ea6:	53 17       	cp	r21, r19
     ea8:	10 f0       	brcs	.+4      	; 0xeae <xQueueGenericSendFromISR+0x1c>
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	f9 f4       	brne	.+62     	; 0xeec <xQueueGenericSendFromISR+0x5a>
     eae:	42 2f       	mov	r20, r18
     eb0:	78 01       	movw	r14, r16
     eb2:	ec 01       	movw	r28, r24
     eb4:	1a a1       	ldd	r17, Y+34	; 0x22
     eb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb8:	ce 01       	movw	r24, r28
     eba:	16 de       	rcall	.-980    	; 0xae8 <prvCopyDataToQueue>
     ebc:	1f 3f       	cpi	r17, 0xFF	; 255
     ebe:	81 f4       	brne	.+32     	; 0xee0 <xQueueGenericSendFromISR+0x4e>
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	88 23       	and	r24, r24
     ec4:	a9 f0       	breq	.+42     	; 0xef0 <xQueueGenericSendFromISR+0x5e>
     ec6:	ce 01       	movw	r24, r28
     ec8:	43 96       	adiw	r24, 0x13	; 19
     eca:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskRemoveFromEventList>
     ece:	88 23       	and	r24, r24
     ed0:	89 f0       	breq	.+34     	; 0xef4 <xQueueGenericSendFromISR+0x62>
     ed2:	e1 14       	cp	r14, r1
     ed4:	f1 04       	cpc	r15, r1
     ed6:	81 f0       	breq	.+32     	; 0xef8 <xQueueGenericSendFromISR+0x66>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	f7 01       	movw	r30, r14
     edc:	80 83       	st	Z, r24
     ede:	0d c0       	rjmp	.+26     	; 0xefa <xQueueGenericSendFromISR+0x68>
     ee0:	ff 24       	eor	r15, r15
     ee2:	f3 94       	inc	r15
     ee4:	f1 0e       	add	r15, r17
     ee6:	fa a2       	std	Y+34, r15	; 0x22
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	07 c0       	rjmp	.+14     	; 0xefa <xQueueGenericSendFromISR+0x68>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	05 c0       	rjmp	.+10     	; 0xefa <xQueueGenericSendFromISR+0x68>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <xQueueGenericSendFromISR+0x68>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <xQueueGenericSendFromISR+0x68>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	08 95       	ret

00000f08 <xQueueReceive>:
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	29 97       	sbiw	r28, 0x09	; 9
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	8c 01       	movw	r16, r24
     f2a:	6b 01       	movw	r12, r22
     f2c:	2e 83       	std	Y+6, r18	; 0x06
     f2e:	3f 83       	std	Y+7, r19	; 0x07
     f30:	48 87       	std	Y+8, r20	; 0x08
     f32:	59 87       	std	Y+9, r21	; 0x09
     f34:	e1 2c       	mov	r14, r1
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	0f 92       	push	r0
     f3c:	f8 01       	movw	r30, r16
     f3e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f40:	ff 20       	and	r15, r15
     f42:	99 f0       	breq	.+38     	; 0xf6a <xQueueReceive+0x62>
     f44:	b6 01       	movw	r22, r12
     f46:	c8 01       	movw	r24, r16
     f48:	2e de       	rcall	.-932    	; 0xba6 <prvCopyDataFromQueue>
     f4a:	fa 94       	dec	r15
     f4c:	f8 01       	movw	r30, r16
     f4e:	f6 8e       	std	Z+30, r15	; 0x1e
     f50:	80 85       	ldd	r24, Z+8	; 0x08
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <xQueueReceive+0x5a>
     f56:	c8 01       	movw	r24, r16
     f58:	08 96       	adiw	r24, 0x08	; 8
     f5a:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskRemoveFromEventList>
     f5e:	81 11       	cpse	r24, r1
     f60:	e0 dc       	rcall	.-1600   	; 0x922 <vPortYield>
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	4f c0       	rjmp	.+158    	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	a8 85       	ldd	r26, Y+8	; 0x08
     f70:	b9 85       	ldd	r27, Y+9	; 0x09
     f72:	89 2b       	or	r24, r25
     f74:	8a 2b       	or	r24, r26
     f76:	8b 2b       	or	r24, r27
     f78:	21 f4       	brne	.+8      	; 0xf82 <xQueueReceive+0x7a>
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	43 c0       	rjmp	.+134    	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     f82:	e1 10       	cpse	r14, r1
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <xQueueReceive+0x8a>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <vTaskInternalSetTimeOutState>
     f8e:	ee 24       	eor	r14, r14
     f90:	e3 94       	inc	r14
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	2f d6       	rcall	.+3166   	; 0x1bf6 <vTaskSuspendAll>
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	0f 92       	push	r0
     f9e:	f8 01       	movw	r30, r16
     fa0:	81 a1       	ldd	r24, Z+33	; 0x21
     fa2:	8f 3f       	cpi	r24, 0xFF	; 255
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <xQueueReceive+0xa0>
     fa6:	11 a2       	std	Z+33, r1	; 0x21
     fa8:	f8 01       	movw	r30, r16
     faa:	82 a1       	ldd	r24, Z+34	; 0x22
     fac:	8f 3f       	cpi	r24, 0xFF	; 255
     fae:	09 f4       	brne	.+2      	; 0xfb2 <xQueueReceive+0xaa>
     fb0:	12 a2       	std	Z+34, r1	; 0x22
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	be 01       	movw	r22, r28
     fb8:	6a 5f       	subi	r22, 0xFA	; 250
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCheckForTimeOut>
     fc4:	81 11       	cpse	r24, r1
     fc6:	17 c0       	rjmp	.+46     	; 0xff6 <xQueueReceive+0xee>
     fc8:	c8 01       	movw	r24, r16
     fca:	73 dd       	rcall	.-1306   	; 0xab2 <prvIsQueueEmpty>
     fcc:	88 23       	and	r24, r24
     fce:	79 f0       	breq	.+30     	; 0xfee <xQueueReceive+0xe6>
     fd0:	4e 81       	ldd	r20, Y+6	; 0x06
     fd2:	5f 81       	ldd	r21, Y+7	; 0x07
     fd4:	68 85       	ldd	r22, Y+8	; 0x08
     fd6:	79 85       	ldd	r23, Y+9	; 0x09
     fd8:	c8 01       	movw	r24, r16
     fda:	43 96       	adiw	r24, 0x13	; 19
     fdc:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vTaskPlaceOnEventList>
     fe0:	c8 01       	movw	r24, r16
     fe2:	fb dd       	rcall	.-1034   	; 0xbda <prvUnlockQueue>
     fe4:	48 d7       	rcall	.+3728   	; 0x1e76 <xTaskResumeAll>
     fe6:	81 11       	cpse	r24, r1
     fe8:	a6 cf       	rjmp	.-180    	; 0xf36 <xQueueReceive+0x2e>
     fea:	9b dc       	rcall	.-1738   	; 0x922 <vPortYield>
     fec:	a4 cf       	rjmp	.-184    	; 0xf36 <xQueueReceive+0x2e>
     fee:	c8 01       	movw	r24, r16
     ff0:	f4 dd       	rcall	.-1048   	; 0xbda <prvUnlockQueue>
     ff2:	41 d7       	rcall	.+3714   	; 0x1e76 <xTaskResumeAll>
     ff4:	a0 cf       	rjmp	.-192    	; 0xf36 <xQueueReceive+0x2e>
     ff6:	c8 01       	movw	r24, r16
     ff8:	f0 dd       	rcall	.-1056   	; 0xbda <prvUnlockQueue>
     ffa:	3d d7       	rcall	.+3706   	; 0x1e76 <xTaskResumeAll>
     ffc:	c8 01       	movw	r24, r16
     ffe:	59 dd       	rcall	.-1358   	; 0xab2 <prvIsQueueEmpty>
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1004:	98 cf       	rjmp	.-208    	; 0xf36 <xQueueReceive+0x2e>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	29 96       	adiw	r28, 0x09	; 9
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	08 95       	ret

00001026 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
    1032:	89 a1       	ldd	r24, Y+33	; 0x21
    1034:	8f 3f       	cpi	r24, 0xFF	; 255
    1036:	09 f4       	brne	.+2      	; 0x103a <vQueueWaitForMessageRestricted+0x14>
    1038:	19 a2       	std	Y+33, r1	; 0x21
    103a:	8a a1       	ldd	r24, Y+34	; 0x22
    103c:	8f 3f       	cpi	r24, 0xFF	; 255
    103e:	09 f4       	brne	.+2      	; 0x1042 <vQueueWaitForMessageRestricted+0x1c>
    1040:	1a a2       	std	Y+34, r1	; 0x22
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1048:	81 11       	cpse	r24, r1
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    104c:	ce 01       	movw	r24, r28
    104e:	43 96       	adiw	r24, 0x13	; 19
    1050:	0e 94 5d 11 	call	0x22ba	; 0x22ba <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1054:	ce 01       	movw	r24, r28
    1056:	c1 dd       	rcall	.-1150   	; 0xbda <prvUnlockQueue>
    }
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    105e:	fc 01       	movw	r30, r24
    1060:	44 81       	ldd	r20, Z+4	; 0x04
    1062:	55 81       	ldd	r21, Z+5	; 0x05
    1064:	22 81       	ldd	r18, Z+2	; 0x02
    1066:	33 81       	ldd	r19, Z+3	; 0x03
    1068:	24 0f       	add	r18, r20
    106a:	35 1f       	adc	r19, r21
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	b9 01       	movw	r22, r18
    1072:	68 1b       	sub	r22, r24
    1074:	79 0b       	sbc	r23, r25
    1076:	cb 01       	movw	r24, r22
    1078:	64 17       	cp	r22, r20
    107a:	75 07       	cpc	r23, r21
    107c:	10 f0       	brcs	.+4      	; 0x1082 <prvBytesInBuffer+0x24>
    107e:	84 1b       	sub	r24, r20
    1080:	95 0b       	sbc	r25, r21
    1082:	08 95       	ret

00001084 <prvInitialiseNewStreamBuffer>:
    1084:	0f 93       	push	r16
    1086:	fc 01       	movw	r30, r24
    1088:	8f e0       	ldi	r24, 0x0F	; 15
    108a:	df 01       	movw	r26, r30
    108c:	1d 92       	st	X+, r1
    108e:	8a 95       	dec	r24
    1090:	e9 f7       	brne	.-6      	; 0x108c <prvInitialiseNewStreamBuffer+0x8>
    1092:	75 87       	std	Z+13, r23	; 0x0d
    1094:	64 87       	std	Z+12, r22	; 0x0c
    1096:	55 83       	std	Z+5, r21	; 0x05
    1098:	44 83       	std	Z+4, r20	; 0x04
    109a:	37 83       	std	Z+7, r19	; 0x07
    109c:	26 83       	std	Z+6, r18	; 0x06
    109e:	06 87       	std	Z+14, r16	; 0x0e
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <prvWriteBytesToBuffer>:
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	6c 01       	movw	r12, r24
    10ba:	5b 01       	movw	r10, r22
    10bc:	7a 01       	movw	r14, r20
    10be:	fc 01       	movw	r30, r24
    10c0:	c2 81       	ldd	r28, Z+2	; 0x02
    10c2:	d3 81       	ldd	r29, Z+3	; 0x03
    10c4:	04 81       	ldd	r16, Z+4	; 0x04
    10c6:	15 81       	ldd	r17, Z+5	; 0x05
    10c8:	0c 1b       	sub	r16, r28
    10ca:	1d 0b       	sbc	r17, r29
    10cc:	40 17       	cp	r20, r16
    10ce:	51 07       	cpc	r21, r17
    10d0:	08 f4       	brcc	.+2      	; 0x10d4 <prvWriteBytesToBuffer+0x30>
    10d2:	8a 01       	movw	r16, r20
    10d4:	f6 01       	movw	r30, r12
    10d6:	84 85       	ldd	r24, Z+12	; 0x0c
    10d8:	95 85       	ldd	r25, Z+13	; 0x0d
    10da:	a8 01       	movw	r20, r16
    10dc:	b5 01       	movw	r22, r10
    10de:	8c 0f       	add	r24, r28
    10e0:	9d 1f       	adc	r25, r29
    10e2:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
    10e6:	0e 15       	cp	r16, r14
    10e8:	1f 05       	cpc	r17, r15
    10ea:	58 f4       	brcc	.+22     	; 0x1102 <prvWriteBytesToBuffer+0x5e>
    10ec:	a7 01       	movw	r20, r14
    10ee:	40 1b       	sub	r20, r16
    10f0:	51 0b       	sbc	r21, r17
    10f2:	b5 01       	movw	r22, r10
    10f4:	60 0f       	add	r22, r16
    10f6:	71 1f       	adc	r23, r17
    10f8:	f6 01       	movw	r30, r12
    10fa:	84 85       	ldd	r24, Z+12	; 0x0c
    10fc:	95 85       	ldd	r25, Z+13	; 0x0d
    10fe:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
    1102:	ce 01       	movw	r24, r28
    1104:	8e 0d       	add	r24, r14
    1106:	9f 1d       	adc	r25, r15
    1108:	f6 01       	movw	r30, r12
    110a:	24 81       	ldd	r18, Z+4	; 0x04
    110c:	35 81       	ldd	r19, Z+5	; 0x05
    110e:	82 17       	cp	r24, r18
    1110:	93 07       	cpc	r25, r19
    1112:	10 f0       	brcs	.+4      	; 0x1118 <prvWriteBytesToBuffer+0x74>
    1114:	82 1b       	sub	r24, r18
    1116:	93 0b       	sbc	r25, r19
    1118:	f6 01       	movw	r30, r12
    111a:	93 83       	std	Z+3, r25	; 0x03
    111c:	82 83       	std	Z+2, r24	; 0x02
    111e:	c7 01       	movw	r24, r14
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	bf 90       	pop	r11
    1132:	af 90       	pop	r10
    1134:	08 95       	ret

00001136 <prvWriteMessageToBuffer>:
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	1f 92       	push	r1
    1148:	1f 92       	push	r1
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	7c 01       	movw	r14, r24
    1150:	6b 01       	movw	r12, r22
    1152:	5a 83       	std	Y+2, r21	; 0x02
    1154:	49 83       	std	Y+1, r20	; 0x01
    1156:	21 15       	cp	r18, r1
    1158:	31 05       	cpc	r19, r1
    115a:	c1 f0       	breq	.+48     	; 0x118c <prvWriteMessageToBuffer+0x56>
    115c:	fc 01       	movw	r30, r24
    115e:	86 85       	ldd	r24, Z+14	; 0x0e
    1160:	80 fd       	sbrc	r24, 0
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <prvWriteMessageToBuffer+0x3e>
    1164:	42 17       	cp	r20, r18
    1166:	53 07       	cpc	r21, r19
    1168:	08 f4       	brcc	.+2      	; 0x116c <prvWriteMessageToBuffer+0x36>
    116a:	9a 01       	movw	r18, r20
    116c:	3a 83       	std	Y+2, r19	; 0x02
    116e:	29 83       	std	Y+1, r18	; 0x01
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <prvWriteMessageToBuffer+0x5c>
    1174:	20 17       	cp	r18, r16
    1176:	31 07       	cpc	r19, r17
    1178:	58 f0       	brcs	.+22     	; 0x1190 <prvWriteMessageToBuffer+0x5a>
    117a:	42 e0       	ldi	r20, 0x02	; 2
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	be 01       	movw	r22, r28
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	c7 01       	movw	r24, r14
    1186:	8e df       	rcall	.-228    	; 0x10a4 <prvWriteBytesToBuffer>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <prvWriteMessageToBuffer+0x5c>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <prvWriteMessageToBuffer+0x5c>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	88 23       	and	r24, r24
    1194:	31 f0       	breq	.+12     	; 0x11a2 <prvWriteMessageToBuffer+0x6c>
    1196:	49 81       	ldd	r20, Y+1	; 0x01
    1198:	5a 81       	ldd	r21, Y+2	; 0x02
    119a:	b6 01       	movw	r22, r12
    119c:	c7 01       	movw	r24, r14
    119e:	82 df       	rcall	.-252    	; 0x10a4 <prvWriteBytesToBuffer>
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <prvWriteMessageToBuffer+0x70>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	08 95       	ret

000011bc <prvReadBytesFromBuffer>:
    11bc:	af 92       	push	r10
    11be:	bf 92       	push	r11
    11c0:	cf 92       	push	r12
    11c2:	df 92       	push	r13
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	7c 01       	movw	r14, r24
    11d2:	5b 01       	movw	r10, r22
    11d4:	e9 01       	movw	r28, r18
    11d6:	42 17       	cp	r20, r18
    11d8:	53 07       	cpc	r21, r19
    11da:	08 f4       	brcc	.+2      	; 0x11de <prvReadBytesFromBuffer+0x22>
    11dc:	ea 01       	movw	r28, r20
    11de:	20 97       	sbiw	r28, 0x00	; 0
    11e0:	81 f1       	breq	.+96     	; 0x1242 <prvReadBytesFromBuffer+0x86>
    11e2:	f7 01       	movw	r30, r14
    11e4:	00 81       	ld	r16, Z
    11e6:	11 81       	ldd	r17, Z+1	; 0x01
    11e8:	84 81       	ldd	r24, Z+4	; 0x04
    11ea:	95 81       	ldd	r25, Z+5	; 0x05
    11ec:	80 1b       	sub	r24, r16
    11ee:	91 0b       	sbc	r25, r17
    11f0:	6e 01       	movw	r12, r28
    11f2:	8c 17       	cp	r24, r28
    11f4:	9d 07       	cpc	r25, r29
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <prvReadBytesFromBuffer+0x3e>
    11f8:	6c 01       	movw	r12, r24
    11fa:	f7 01       	movw	r30, r14
    11fc:	64 85       	ldd	r22, Z+12	; 0x0c
    11fe:	75 85       	ldd	r23, Z+13	; 0x0d
    1200:	60 0f       	add	r22, r16
    1202:	71 1f       	adc	r23, r17
    1204:	a6 01       	movw	r20, r12
    1206:	c5 01       	movw	r24, r10
    1208:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
    120c:	cc 16       	cp	r12, r28
    120e:	dd 06       	cpc	r13, r29
    1210:	58 f4       	brcc	.+22     	; 0x1228 <prvReadBytesFromBuffer+0x6c>
    1212:	ae 01       	movw	r20, r28
    1214:	4c 19       	sub	r20, r12
    1216:	5d 09       	sbc	r21, r13
    1218:	f7 01       	movw	r30, r14
    121a:	64 85       	ldd	r22, Z+12	; 0x0c
    121c:	75 85       	ldd	r23, Z+13	; 0x0d
    121e:	c5 01       	movw	r24, r10
    1220:	8c 0d       	add	r24, r12
    1222:	9d 1d       	adc	r25, r13
    1224:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
    1228:	0c 0f       	add	r16, r28
    122a:	1d 1f       	adc	r17, r29
    122c:	f7 01       	movw	r30, r14
    122e:	84 81       	ldd	r24, Z+4	; 0x04
    1230:	95 81       	ldd	r25, Z+5	; 0x05
    1232:	08 17       	cp	r16, r24
    1234:	19 07       	cpc	r17, r25
    1236:	10 f0       	brcs	.+4      	; 0x123c <prvReadBytesFromBuffer+0x80>
    1238:	08 1b       	sub	r16, r24
    123a:	19 0b       	sbc	r17, r25
    123c:	f7 01       	movw	r30, r14
    123e:	11 83       	std	Z+1, r17	; 0x01
    1240:	00 83       	st	Z, r16
    1242:	ce 01       	movw	r24, r28
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	08 95       	ret

0000125a <prvReadMessageFromBuffer>:
    125a:	6f 92       	push	r6
    125c:	7f 92       	push	r7
    125e:	8f 92       	push	r8
    1260:	9f 92       	push	r9
    1262:	af 92       	push	r10
    1264:	bf 92       	push	r11
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	1f 92       	push	r1
    1278:	1f 92       	push	r1
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	6c 01       	movw	r12, r24
    1280:	4b 01       	movw	r8, r22
    1282:	5a 01       	movw	r10, r20
    1284:	79 01       	movw	r14, r18
    1286:	01 15       	cp	r16, r1
    1288:	11 05       	cpc	r17, r1
    128a:	b1 f0       	breq	.+44     	; 0x12b8 <prvReadMessageFromBuffer+0x5e>
    128c:	fc 01       	movw	r30, r24
    128e:	60 80       	ld	r6, Z
    1290:	71 80       	ldd	r7, Z+1	; 0x01
    1292:	a8 01       	movw	r20, r16
    1294:	be 01       	movw	r22, r28
    1296:	6f 5f       	subi	r22, 0xFF	; 255
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	90 df       	rcall	.-224    	; 0x11bc <prvReadBytesFromBuffer>
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	e0 1a       	sub	r14, r16
    12a2:	f1 0a       	sbc	r15, r17
    12a4:	a8 16       	cp	r10, r24
    12a6:	b9 06       	cpc	r11, r25
    12a8:	30 f4       	brcc	.+12     	; 0x12b6 <prvReadMessageFromBuffer+0x5c>
    12aa:	f6 01       	movw	r30, r12
    12ac:	71 82       	std	Z+1, r7	; 0x01
    12ae:	60 82       	st	Z, r6
    12b0:	a1 2c       	mov	r10, r1
    12b2:	b1 2c       	mov	r11, r1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <prvReadMessageFromBuffer+0x5e>
    12b6:	5c 01       	movw	r10, r24
    12b8:	97 01       	movw	r18, r14
    12ba:	a5 01       	movw	r20, r10
    12bc:	b4 01       	movw	r22, r8
    12be:	c6 01       	movw	r24, r12
    12c0:	7d df       	rcall	.-262    	; 0x11bc <prvReadBytesFromBuffer>
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	08 95       	ret

000012e4 <xStreamBufferGenericCreate>:
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ec 01       	movw	r28, r24
    12f4:	6b 01       	movw	r12, r22
    12f6:	41 30       	cpi	r20, 0x01	; 1
    12f8:	11 f4       	brne	.+4      	; 0x12fe <xStreamBufferGenericCreate+0x1a>
    12fa:	01 e0       	ldi	r16, 0x01	; 1
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <xStreamBufferGenericCreate+0x1c>
    12fe:	00 e0       	ldi	r16, 0x00	; 0
    1300:	c1 14       	cp	r12, r1
    1302:	d1 04       	cpc	r13, r1
    1304:	19 f4       	brne	.+6      	; 0x130c <xStreamBufferGenericCreate+0x28>
    1306:	cc 24       	eor	r12, r12
    1308:	c3 94       	inc	r12
    130a:	d1 2c       	mov	r13, r1
    130c:	ce 01       	movw	r24, r28
    130e:	40 96       	adiw	r24, 0x10	; 16
    1310:	c8 17       	cp	r28, r24
    1312:	d9 07       	cpc	r29, r25
    1314:	20 f4       	brcc	.+8      	; 0x131e <xStreamBufferGenericCreate+0x3a>
    1316:	21 96       	adiw	r28, 0x01	; 1
    1318:	50 d9       	rcall	.-3424   	; 0x5ba <pvPortMalloc>
    131a:	7c 01       	movw	r14, r24
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <xStreamBufferGenericCreate+0x3e>
    131e:	e1 2c       	mov	r14, r1
    1320:	f1 2c       	mov	r15, r1
    1322:	e1 14       	cp	r14, r1
    1324:	f1 04       	cpc	r15, r1
    1326:	39 f0       	breq	.+14     	; 0x1336 <xStreamBufferGenericCreate+0x52>
    1328:	96 01       	movw	r18, r12
    132a:	ae 01       	movw	r20, r28
    132c:	b7 01       	movw	r22, r14
    132e:	61 5f       	subi	r22, 0xF1	; 241
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	c7 01       	movw	r24, r14
    1334:	a7 de       	rcall	.-690    	; 0x1084 <prvInitialiseNewStreamBuffer>
    1336:	c7 01       	movw	r24, r14
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	08 95       	ret

00001348 <xStreamBufferReset>:
    1348:	0f 93       	push	r16
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	0f 92       	push	r0
    1350:	fc 01       	movw	r30, r24
    1352:	20 85       	ldd	r18, Z+8	; 0x08
    1354:	31 85       	ldd	r19, Z+9	; 0x09
    1356:	23 2b       	or	r18, r19
    1358:	71 f4       	brne	.+28     	; 0x1376 <xStreamBufferReset+0x2e>
    135a:	22 85       	ldd	r18, Z+10	; 0x0a
    135c:	33 85       	ldd	r19, Z+11	; 0x0b
    135e:	23 2b       	or	r18, r19
    1360:	61 f4       	brne	.+24     	; 0x137a <xStreamBufferReset+0x32>
    1362:	26 81       	ldd	r18, Z+6	; 0x06
    1364:	37 81       	ldd	r19, Z+7	; 0x07
    1366:	44 81       	ldd	r20, Z+4	; 0x04
    1368:	55 81       	ldd	r21, Z+5	; 0x05
    136a:	64 85       	ldd	r22, Z+12	; 0x0c
    136c:	75 85       	ldd	r23, Z+13	; 0x0d
    136e:	06 85       	ldd	r16, Z+14	; 0x0e
    1370:	89 de       	rcall	.-750    	; 0x1084 <prvInitialiseNewStreamBuffer>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	03 c0       	rjmp	.+6      	; 0x137c <xStreamBufferReset+0x34>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	01 c0       	rjmp	.+2      	; 0x137c <xStreamBufferReset+0x34>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <xStreamBufferSpacesAvailable>:
    1384:	fc 01       	movw	r30, r24
    1386:	24 81       	ldd	r18, Z+4	; 0x04
    1388:	35 81       	ldd	r19, Z+5	; 0x05
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	42 81       	ldd	r20, Z+2	; 0x02
    1394:	53 81       	ldd	r21, Z+3	; 0x03
    1396:	84 1b       	sub	r24, r20
    1398:	95 0b       	sbc	r25, r21
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	82 17       	cp	r24, r18
    139e:	93 07       	cpc	r25, r19
    13a0:	10 f0       	brcs	.+4      	; 0x13a6 <xStreamBufferSpacesAvailable+0x22>
    13a2:	82 1b       	sub	r24, r18
    13a4:	93 0b       	sbc	r25, r19
    13a6:	08 95       	ret

000013a8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    13a8:	2f 92       	push	r2
    13aa:	3f 92       	push	r3
    13ac:	4f 92       	push	r4
    13ae:	5f 92       	push	r5
    13b0:	6f 92       	push	r6
    13b2:	7f 92       	push	r7
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	2b 97       	sbiw	r28, 0x0b	; 11
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	4c 01       	movw	r8, r24
    13de:	7b 87       	std	Y+11, r23	; 0x0b
    13e0:	6a 87       	std	Y+10, r22	; 0x0a
    13e2:	1a 01       	movw	r2, r20
    13e4:	0e 83       	std	Y+6, r16	; 0x06
    13e6:	1f 83       	std	Y+7, r17	; 0x07
    13e8:	28 87       	std	Y+8, r18	; 0x08
    13ea:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    13ec:	fc 01       	movw	r30, r24
    13ee:	84 81       	ldd	r24, Z+4	; 0x04
    13f0:	95 81       	ldd	r25, Z+5	; 0x05
    13f2:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13f4:	26 85       	ldd	r18, Z+14	; 0x0e
    13f6:	20 ff       	sbrs	r18, 0
    13f8:	0c c0       	rjmp	.+24     	; 0x1412 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13fa:	2a 01       	movw	r4, r20
    13fc:	f2 e0       	ldi	r31, 0x02	; 2
    13fe:	4f 0e       	add	r4, r31
    1400:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1402:	84 15       	cp	r24, r4
    1404:	95 05       	cpc	r25, r5
    1406:	58 f4       	brcc	.+22     	; 0x141e <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1408:	1e 82       	std	Y+6, r1	; 0x06
    140a:	1f 82       	std	Y+7, r1	; 0x07
    140c:	18 86       	std	Y+8, r1	; 0x08
    140e:	19 86       	std	Y+9, r1	; 0x09
    1410:	06 c0       	rjmp	.+12     	; 0x141e <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1412:	84 17       	cp	r24, r20
    1414:	95 07       	cpc	r25, r21
    1416:	10 f0       	brcs	.+4      	; 0x141c <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1418:	2a 01       	movw	r4, r20
    141a:	01 c0       	rjmp	.+2      	; 0x141e <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    141c:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    141e:	8e 81       	ldd	r24, Y+6	; 0x06
    1420:	9f 81       	ldd	r25, Y+7	; 0x07
    1422:	a8 85       	ldd	r26, Y+8	; 0x08
    1424:	b9 85       	ldd	r27, Y+9	; 0x09
    1426:	89 2b       	or	r24, r25
    1428:	8a 2b       	or	r24, r26
    142a:	8b 2b       	or	r24, r27
    142c:	09 f4       	brne	.+2      	; 0x1430 <xStreamBufferSend+0x88>
    142e:	38 c0       	rjmp	.+112    	; 0x14a0 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    143e:	c4 01       	movw	r24, r8
    1440:	a1 df       	rcall	.-190    	; 0x1384 <xStreamBufferSpacesAvailable>
    1442:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1444:	84 15       	cp	r24, r4
    1446:	95 05       	cpc	r25, r5
    1448:	40 f5       	brcc	.+80     	; 0x149a <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1454:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskGetCurrentTaskHandle>
    1458:	f4 01       	movw	r30, r8
    145a:	93 87       	std	Z+11, r25	; 0x0b
    145c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1462:	ae 80       	ldd	r10, Y+6	; 0x06
    1464:	bf 80       	ldd	r11, Y+7	; 0x07
    1466:	c8 84       	ldd	r12, Y+8	; 0x08
    1468:	d9 84       	ldd	r13, Y+9	; 0x09
    146a:	e1 2c       	mov	r14, r1
    146c:	f1 2c       	mov	r15, r1
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	98 01       	movw	r18, r16
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	ba 01       	movw	r22, r20
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 11 14 	call	0x2822	; 0x2822 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1480:	f4 01       	movw	r30, r8
    1482:	13 86       	std	Z+11, r1	; 0x0b
    1484:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1486:	be 01       	movw	r22, r28
    1488:	6a 5f       	subi	r22, 0xFA	; 250
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCheckForTimeOut>
    1494:	88 23       	and	r24, r24
    1496:	81 f2       	breq	.-96     	; 0x1438 <xStreamBufferSend+0x90>
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
                    break;
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    14a0:	61 2c       	mov	r6, r1
    14a2:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    14a4:	61 14       	cp	r6, r1
    14a6:	71 04       	cpc	r7, r1
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14aa:	c4 01       	movw	r24, r8
    14ac:	6b df       	rcall	.-298    	; 0x1384 <xStreamBufferSpacesAvailable>
    14ae:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    14b0:	82 01       	movw	r16, r4
    14b2:	93 01       	movw	r18, r6
    14b4:	a1 01       	movw	r20, r2
    14b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    14b8:	7b 85       	ldd	r23, Y+11	; 0x0b
    14ba:	c4 01       	movw	r24, r8
    14bc:	3c de       	rcall	.-904    	; 0x1136 <prvWriteMessageToBuffer>
    14be:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    14c0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14c2:	e9 f0       	breq	.+58     	; 0x14fe <xStreamBufferSend+0x156>
    14c4:	c4 01       	movw	r24, r8
    14c6:	cb dd       	rcall	.-1130   	; 0x105e <prvBytesInBuffer>
    14c8:	f4 01       	movw	r30, r8
    14ca:	26 81       	ldd	r18, Z+6	; 0x06
    14cc:	37 81       	ldd	r19, Z+7	; 0x07
    14ce:	82 17       	cp	r24, r18
    14d0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    14d2:	a8 f0       	brcs	.+42     	; 0x14fe <xStreamBufferSend+0x156>
    14d4:	90 d3       	rcall	.+1824   	; 0x1bf6 <vTaskSuspendAll>
    14d6:	f4 01       	movw	r30, r8
    14d8:	80 85       	ldd	r24, Z+8	; 0x08
    14da:	91 85       	ldd	r25, Z+9	; 0x09
    14dc:	89 2b       	or	r24, r25
    14de:	71 f0       	breq	.+28     	; 0x14fc <xStreamBufferSend+0x154>
    14e0:	80 85       	ldd	r24, Z+8	; 0x08
    14e2:	91 85       	ldd	r25, Z+9	; 0x09
    14e4:	e1 2c       	mov	r14, r1
    14e6:	f1 2c       	mov	r15, r1
    14e8:	00 e0       	ldi	r16, 0x00	; 0
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	a9 01       	movw	r20, r18
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	0e 94 b8 14 	call	0x2970	; 0x2970 <xTaskGenericNotify>
    14f6:	f4 01       	movw	r30, r8
    14f8:	11 86       	std	Z+9, r1	; 0x09
    14fa:	10 86       	std	Z+8, r1	; 0x08
    14fc:	bc d4       	rcall	.+2424   	; 0x1e76 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    14fe:	c6 01       	movw	r24, r12
    1500:	2b 96       	adiw	r28, 0x0b	; 11
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	df 90       	pop	r13
    151a:	cf 90       	pop	r12
    151c:	bf 90       	pop	r11
    151e:	af 90       	pop	r10
    1520:	9f 90       	pop	r9
    1522:	8f 90       	pop	r8
    1524:	7f 90       	pop	r7
    1526:	6f 90       	pop	r6
    1528:	5f 90       	pop	r5
    152a:	4f 90       	pop	r4
    152c:	3f 90       	pop	r3
    152e:	2f 90       	pop	r2
    1530:	08 95       	ret

00001532 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
    1548:	7b 01       	movw	r14, r22
    154a:	5a 01       	movw	r10, r20
    154c:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    154e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1550:	80 ff       	sbrs	r24, 0
    1552:	04 c0       	rjmp	.+8      	; 0x155c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1554:	8a 01       	movw	r16, r20
    1556:	0e 5f       	subi	r16, 0xFE	; 254
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	01 c0       	rjmp	.+2      	; 0x155e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    155c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    155e:	ce 01       	movw	r24, r28
    1560:	11 df       	rcall	.-478    	; 0x1384 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1562:	9c 01       	movw	r18, r24
    1564:	a5 01       	movw	r20, r10
    1566:	b7 01       	movw	r22, r14
    1568:	ce 01       	movw	r24, r28
    156a:	e5 dd       	rcall	.-1078   	; 0x1136 <prvWriteMessageToBuffer>
    156c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    156e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1570:	c1 f0       	breq	.+48     	; 0x15a2 <xStreamBufferSendFromISR+0x70>
    1572:	ce 01       	movw	r24, r28
    1574:	74 dd       	rcall	.-1304   	; 0x105e <prvBytesInBuffer>
    1576:	2e 81       	ldd	r18, Y+6	; 0x06
    1578:	3f 81       	ldd	r19, Y+7	; 0x07
    157a:	82 17       	cp	r24, r18
    157c:	93 07       	cpc	r25, r19
    157e:	88 f0       	brcs	.+34     	; 0x15a2 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1580:	88 85       	ldd	r24, Y+8	; 0x08
    1582:	99 85       	ldd	r25, Y+9	; 0x09
    1584:	89 2b       	or	r24, r25
    1586:	69 f0       	breq	.+26     	; 0x15a2 <xStreamBufferSendFromISR+0x70>
    1588:	88 85       	ldd	r24, Y+8	; 0x08
    158a:	99 85       	ldd	r25, Y+9	; 0x09
    158c:	e1 2c       	mov	r14, r1
    158e:	f1 2c       	mov	r15, r1
    1590:	00 e0       	ldi	r16, 0x00	; 0
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	a9 01       	movw	r20, r18
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <xTaskGenericNotifyFromISR>
    159e:	19 86       	std	Y+9, r1	; 0x09
    15a0:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    15a2:	c5 01       	movw	r24, r10
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	08 95       	ret

000015ba <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    15ba:	4f 92       	push	r4
    15bc:	5f 92       	push	r5
    15be:	6f 92       	push	r6
    15c0:	7f 92       	push	r7
    15c2:	8f 92       	push	r8
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	ec 01       	movw	r28, r24
    15dc:	2b 01       	movw	r4, r22
    15de:	3a 01       	movw	r6, r20
    15e0:	58 01       	movw	r10, r16
    15e2:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15e6:	80 ff       	sbrs	r24, 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    15ea:	68 94       	set
    15ec:	88 24       	eor	r8, r8
    15ee:	81 f8       	bld	r8, 1
    15f0:	91 2c       	mov	r9, r1
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    15f4:	81 2c       	mov	r8, r1
    15f6:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15f8:	a1 14       	cp	r10, r1
    15fa:	b1 04       	cpc	r11, r1
    15fc:	c1 04       	cpc	r12, r1
    15fe:	d1 04       	cpc	r13, r1
    1600:	41 f1       	breq	.+80     	; 0x1652 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1608:	ce 01       	movw	r24, r28
    160a:	29 dd       	rcall	.-1454   	; 0x105e <prvBytesInBuffer>
    160c:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    160e:	88 16       	cp	r8, r24
    1610:	99 06       	cpc	r9, r25
    1612:	48 f0       	brcs	.+18     	; 0x1626 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    161e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskGetCurrentTaskHandle>
    1622:	99 87       	std	Y+9, r25	; 0x09
    1624:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    162a:	8e 14       	cp	r8, r14
    162c:	9f 04       	cpc	r9, r15
    162e:	a0 f0       	brcs	.+40     	; 0x1658 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1630:	e1 2c       	mov	r14, r1
    1632:	f1 2c       	mov	r15, r1
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	10 e0       	ldi	r17, 0x00	; 0
    1638:	98 01       	movw	r18, r16
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	ba 01       	movw	r22, r20
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 11 14 	call	0x2822	; 0x2822 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1646:	19 86       	std	Y+9, r1	; 0x09
    1648:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    164a:	ce 01       	movw	r24, r28
    164c:	08 dd       	rcall	.-1520   	; 0x105e <prvBytesInBuffer>
    164e:	7c 01       	movw	r14, r24
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1652:	ce 01       	movw	r24, r28
    1654:	04 dd       	rcall	.-1528   	; 0x105e <prvBytesInBuffer>
    1656:	7c 01       	movw	r14, r24
    1658:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    165a:	9f 04       	cpc	r9, r15
    165c:	e8 f4       	brcc	.+58     	; 0x1698 <xStreamBufferReceive+0xde>
    165e:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1660:	97 01       	movw	r18, r14
    1662:	a3 01       	movw	r20, r6
    1664:	b2 01       	movw	r22, r4
    1666:	ce 01       	movw	r24, r28
    1668:	f8 dd       	rcall	.-1040   	; 0x125a <prvReadMessageFromBuffer>
    166a:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    166c:	89 2b       	or	r24, r25
    166e:	b1 f0       	breq	.+44     	; 0x169c <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1670:	c2 d2       	rcall	.+1412   	; 0x1bf6 <vTaskSuspendAll>
    1672:	8a 85       	ldd	r24, Y+10	; 0x0a
    1674:	9b 85       	ldd	r25, Y+11	; 0x0b
    1676:	89 2b       	or	r24, r25
    1678:	69 f0       	breq	.+26     	; 0x1694 <xStreamBufferReceive+0xda>
    167a:	8a 85       	ldd	r24, Y+10	; 0x0a
    167c:	9b 85       	ldd	r25, Y+11	; 0x0b
    167e:	e1 2c       	mov	r14, r1
    1680:	f1 2c       	mov	r15, r1
    1682:	00 e0       	ldi	r16, 0x00	; 0
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	a9 01       	movw	r20, r18
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	0e 94 b8 14 	call	0x2970	; 0x2970 <xTaskGenericNotify>
    1690:	1b 86       	std	Y+11, r1	; 0x0b
    1692:	1a 86       	std	Y+10, r1	; 0x0a
    1694:	f0 d3       	rcall	.+2016   	; 0x1e76 <xTaskResumeAll>
    1696:	02 c0       	rjmp	.+4      	; 0x169c <xStreamBufferReceive+0xe2>
    1698:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    169a:	d1 2c       	mov	r13, r1
    169c:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	9f 90       	pop	r9
    16b4:	8f 90       	pop	r8
    16b6:	7f 90       	pop	r7
    16b8:	6f 90       	pop	r6
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	08 95       	ret

000016c0 <prvResetNextTaskUnblockTime>:
    16c0:	e0 91 47 15 	lds	r30, 0x1547	; 0x801547 <pxDelayedTaskList>
    16c4:	f0 91 48 15 	lds	r31, 0x1548	; 0x801548 <pxDelayedTaskList+0x1>
    16c8:	80 81       	ld	r24, Z
    16ca:	81 11       	cpse	r24, r1
    16cc:	0c c0       	rjmp	.+24     	; 0x16e6 <prvResetNextTaskUnblockTime+0x26>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	dc 01       	movw	r26, r24
    16d4:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <xNextTaskUnblockTime>
    16d8:	90 93 12 15 	sts	0x1512, r25	; 0x801512 <xNextTaskUnblockTime+0x1>
    16dc:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <xNextTaskUnblockTime+0x2>
    16e0:	b0 93 14 15 	sts	0x1514, r27	; 0x801514 <xNextTaskUnblockTime+0x3>
    16e4:	08 95       	ret
    16e6:	e0 91 47 15 	lds	r30, 0x1547	; 0x801547 <pxDelayedTaskList>
    16ea:	f0 91 48 15 	lds	r31, 0x1548	; 0x801548 <pxDelayedTaskList+0x1>
    16ee:	07 80       	ldd	r0, Z+7	; 0x07
    16f0:	f0 85       	ldd	r31, Z+8	; 0x08
    16f2:	e0 2d       	mov	r30, r0
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	a2 81       	ldd	r26, Z+2	; 0x02
    16fa:	b3 81       	ldd	r27, Z+3	; 0x03
    16fc:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <xNextTaskUnblockTime>
    1700:	90 93 12 15 	sts	0x1512, r25	; 0x801512 <xNextTaskUnblockTime+0x1>
    1704:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <xNextTaskUnblockTime+0x2>
    1708:	b0 93 14 15 	sts	0x1514, r27	; 0x801514 <xNextTaskUnblockTime+0x3>
    170c:	08 95       	ret

0000170e <prvDeleteTCB>:
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ec 01       	movw	r28, r24
    1714:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1718:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    171c:	ce 01       	movw	r24, r28
    171e:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <prvInitialiseNewTask>:
    1728:	4f 92       	push	r4
    172a:	5f 92       	push	r5
    172c:	6f 92       	push	r6
    172e:	7f 92       	push	r7
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	2c 01       	movw	r4, r24
    1748:	5b 01       	movw	r10, r22
    174a:	4a 01       	movw	r8, r20
    174c:	39 01       	movw	r6, r18
    174e:	e6 01       	movw	r28, r12
    1750:	65 ea       	ldi	r22, 0xA5	; 165
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1758:	0e 94 ed 2c 	call	0x59da	; 0x59da <memset>
    175c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	82 1a       	sub	r8, r18
    1764:	91 08       	sbc	r9, r1
    1766:	88 0e       	add	r8, r24
    1768:	99 1e       	adc	r9, r25
    176a:	a1 14       	cp	r10, r1
    176c:	b1 04       	cpc	r11, r1
    176e:	89 f4       	brne	.+34     	; 0x1792 <prvInitialiseNewTask+0x6a>
    1770:	15 c0       	rjmp	.+42     	; 0x179c <prvInitialiseNewTask+0x74>
    1772:	82 2f       	mov	r24, r18
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	f5 01       	movw	r30, r10
    1778:	e8 0f       	add	r30, r24
    177a:	f9 1f       	adc	r31, r25
    177c:	30 81       	ld	r19, Z
    177e:	de 01       	movw	r26, r28
    1780:	a8 0f       	add	r26, r24
    1782:	b9 1f       	adc	r27, r25
    1784:	5d 96       	adiw	r26, 0x1d	; 29
    1786:	3c 93       	st	X, r19
    1788:	80 81       	ld	r24, Z
    178a:	88 23       	and	r24, r24
    178c:	29 f0       	breq	.+10     	; 0x1798 <prvInitialiseNewTask+0x70>
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <prvInitialiseNewTask+0x6c>
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	20 31       	cpi	r18, 0x10	; 16
    1796:	68 f3       	brcs	.-38     	; 0x1772 <prvInitialiseNewTask+0x4a>
    1798:	1c a6       	std	Y+44, r1	; 0x2c
    179a:	01 c0       	rjmp	.+2      	; 0x179e <prvInitialiseNewTask+0x76>
    179c:	1d 8e       	std	Y+29, r1	; 0x1d
    179e:	0a 30       	cpi	r16, 0x0A	; 10
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <prvInitialiseNewTask+0x7c>
    17a2:	09 e0       	ldi	r16, 0x09	; 9
    17a4:	0a 8f       	std	Y+26, r16	; 0x1a
    17a6:	0d a7       	std	Y+45, r16	; 0x2d
    17a8:	1e a6       	std	Y+46, r1	; 0x2e
    17aa:	ce 01       	movw	r24, r28
    17ac:	02 96       	adiw	r24, 0x02	; 2
    17ae:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 96       	adiw	r24, 0x0e	; 14
    17b6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    17ba:	db 87       	std	Y+11, r29	; 0x0b
    17bc:	ca 87       	std	Y+10, r28	; 0x0a
    17be:	8a e0       	ldi	r24, 0x0A	; 10
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	80 1b       	sub	r24, r16
    17c8:	91 09       	sbc	r25, r1
    17ca:	a1 09       	sbc	r26, r1
    17cc:	b1 09       	sbc	r27, r1
    17ce:	8e 87       	std	Y+14, r24	; 0x0e
    17d0:	9f 87       	std	Y+15, r25	; 0x0f
    17d2:	a8 8b       	std	Y+16, r26	; 0x10
    17d4:	b9 8b       	std	Y+17, r27	; 0x11
    17d6:	df 8b       	std	Y+23, r29	; 0x17
    17d8:	ce 8b       	std	Y+22, r28	; 0x16
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	fe 01       	movw	r30, r28
    17de:	bf 96       	adiw	r30, 0x2f	; 47
    17e0:	df 01       	movw	r26, r30
    17e2:	1d 92       	st	X+, r1
    17e4:	8a 95       	dec	r24
    17e6:	e9 f7       	brne	.-6      	; 0x17e2 <prvInitialiseNewTask+0xba>
    17e8:	1b aa       	std	Y+51, r1	; 0x33
    17ea:	a3 01       	movw	r20, r6
    17ec:	b2 01       	movw	r22, r4
    17ee:	c4 01       	movw	r24, r8
    17f0:	4f d8       	rcall	.-3938   	; 0x890 <pxPortInitialiseStack>
    17f2:	99 83       	std	Y+1, r25	; 0x01
    17f4:	88 83       	st	Y, r24
    17f6:	e1 14       	cp	r14, r1
    17f8:	f1 04       	cpc	r15, r1
    17fa:	19 f0       	breq	.+6      	; 0x1802 <prvInitialiseNewTask+0xda>
    17fc:	f7 01       	movw	r30, r14
    17fe:	d1 83       	std	Z+1, r29	; 0x01
    1800:	c0 83       	st	Z, r28
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	df 90       	pop	r13
    180e:	cf 90       	pop	r12
    1810:	bf 90       	pop	r11
    1812:	af 90       	pop	r10
    1814:	9f 90       	pop	r9
    1816:	8f 90       	pop	r8
    1818:	7f 90       	pop	r7
    181a:	6f 90       	pop	r6
    181c:	5f 90       	pop	r5
    181e:	4f 90       	pop	r4
    1820:	08 95       	ret

00001822 <prvInitialiseTaskLists>:
    1822:	cf 93       	push	r28
    1824:	c0 e0       	ldi	r28, 0x00	; 0
    1826:	09 c0       	rjmp	.+18     	; 0x183a <prvInitialiseTaskLists+0x18>
    1828:	2b e0       	ldi	r18, 0x0B	; 11
    182a:	c2 9f       	mul	r28, r18
    182c:	c0 01       	movw	r24, r0
    182e:	11 24       	eor	r1, r1
    1830:	81 5a       	subi	r24, 0xA1	; 161
    1832:	9a 4e       	sbci	r25, 0xEA	; 234
    1834:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    1838:	cf 5f       	subi	r28, 0xFF	; 255
    183a:	ca 30       	cpi	r28, 0x0A	; 10
    183c:	a8 f3       	brcs	.-22     	; 0x1828 <prvInitialiseTaskLists+0x6>
    183e:	84 e5       	ldi	r24, 0x54	; 84
    1840:	95 e1       	ldi	r25, 0x15	; 21
    1842:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    1846:	89 e4       	ldi	r24, 0x49	; 73
    1848:	95 e1       	ldi	r25, 0x15	; 21
    184a:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    184e:	8a e3       	ldi	r24, 0x3A	; 58
    1850:	95 e1       	ldi	r25, 0x15	; 21
    1852:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    1856:	8f e2       	ldi	r24, 0x2F	; 47
    1858:	95 e1       	ldi	r25, 0x15	; 21
    185a:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    185e:	83 e2       	ldi	r24, 0x23	; 35
    1860:	95 e1       	ldi	r25, 0x15	; 21
    1862:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    1866:	84 e5       	ldi	r24, 0x54	; 84
    1868:	95 e1       	ldi	r25, 0x15	; 21
    186a:	90 93 48 15 	sts	0x1548, r25	; 0x801548 <pxDelayedTaskList+0x1>
    186e:	80 93 47 15 	sts	0x1547, r24	; 0x801547 <pxDelayedTaskList>
    1872:	89 e4       	ldi	r24, 0x49	; 73
    1874:	95 e1       	ldi	r25, 0x15	; 21
    1876:	90 93 46 15 	sts	0x1546, r25	; 0x801546 <pxOverflowDelayedTaskList+0x1>
    187a:	80 93 45 15 	sts	0x1545, r24	; 0x801545 <pxOverflowDelayedTaskList>
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <prvAddNewTaskToReadyList>:
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	0f 92       	push	r0
    188e:	80 91 22 15 	lds	r24, 0x1522	; 0x801522 <uxCurrentNumberOfTasks>
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	80 93 22 15 	sts	0x1522, r24	; 0x801522 <uxCurrentNumberOfTasks>
    1898:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    189c:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    18a0:	89 2b       	or	r24, r25
    18a2:	51 f4       	brne	.+20     	; 0x18b8 <prvAddNewTaskToReadyList+0x36>
    18a4:	d0 93 ce 15 	sts	0x15CE, r29	; 0x8015ce <pxCurrentTCB+0x1>
    18a8:	c0 93 cd 15 	sts	0x15CD, r28	; 0x8015cd <pxCurrentTCB>
    18ac:	80 91 22 15 	lds	r24, 0x1522	; 0x801522 <uxCurrentNumberOfTasks>
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	91 f4       	brne	.+36     	; 0x18d8 <prvAddNewTaskToReadyList+0x56>
    18b4:	b6 df       	rcall	.-148    	; 0x1822 <prvInitialiseTaskLists>
    18b6:	10 c0       	rjmp	.+32     	; 0x18d8 <prvAddNewTaskToReadyList+0x56>
    18b8:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <xSchedulerRunning>
    18bc:	81 11       	cpse	r24, r1
    18be:	0c c0       	rjmp	.+24     	; 0x18d8 <prvAddNewTaskToReadyList+0x56>
    18c0:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    18c4:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    18c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    18ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18cc:	89 17       	cp	r24, r25
    18ce:	20 f0       	brcs	.+8      	; 0x18d8 <prvAddNewTaskToReadyList+0x56>
    18d0:	d0 93 ce 15 	sts	0x15CE, r29	; 0x8015ce <pxCurrentTCB+0x1>
    18d4:	c0 93 cd 15 	sts	0x15CD, r28	; 0x8015cd <pxCurrentTCB>
    18d8:	80 91 15 15 	lds	r24, 0x1515	; 0x801515 <uxTaskNumber>
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <uxTaskNumber>
    18e2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18e4:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    18e8:	8e 17       	cp	r24, r30
    18ea:	10 f4       	brcc	.+4      	; 0x18f0 <prvAddNewTaskToReadyList+0x6e>
    18ec:	e0 93 1d 15 	sts	0x151D, r30	; 0x80151d <uxTopReadyPriority>
    18f0:	8b e0       	ldi	r24, 0x0B	; 11
    18f2:	8e 9f       	mul	r24, r30
    18f4:	f0 01       	movw	r30, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	e1 5a       	subi	r30, 0xA1	; 161
    18fa:	fa 4e       	sbci	r31, 0xEA	; 234
    18fc:	01 80       	ldd	r0, Z+1	; 0x01
    18fe:	f2 81       	ldd	r31, Z+2	; 0x02
    1900:	e0 2d       	mov	r30, r0
    1902:	ff 83       	std	Y+7, r31	; 0x07
    1904:	ee 83       	std	Y+6, r30	; 0x06
    1906:	26 81       	ldd	r18, Z+6	; 0x06
    1908:	37 81       	ldd	r19, Z+7	; 0x07
    190a:	39 87       	std	Y+9, r19	; 0x09
    190c:	28 87       	std	Y+8, r18	; 0x08
    190e:	a6 81       	ldd	r26, Z+6	; 0x06
    1910:	b7 81       	ldd	r27, Z+7	; 0x07
    1912:	9e 01       	movw	r18, r28
    1914:	2e 5f       	subi	r18, 0xFE	; 254
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	15 96       	adiw	r26, 0x05	; 5
    191a:	3c 93       	st	X, r19
    191c:	2e 93       	st	-X, r18
    191e:	14 97       	sbiw	r26, 0x04	; 4
    1920:	37 83       	std	Z+7, r19	; 0x07
    1922:	26 83       	std	Z+6, r18	; 0x06
    1924:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1926:	8e 9f       	mul	r24, r30
    1928:	f0 01       	movw	r30, r0
    192a:	11 24       	eor	r1, r1
    192c:	e1 5a       	subi	r30, 0xA1	; 161
    192e:	fa 4e       	sbci	r31, 0xEA	; 234
    1930:	fd 87       	std	Y+13, r31	; 0x0d
    1932:	ec 87       	std	Y+12, r30	; 0x0c
    1934:	80 81       	ld	r24, Z
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	80 83       	st	Z, r24
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <xSchedulerRunning>
    1942:	88 23       	and	r24, r24
    1944:	51 f0       	breq	.+20     	; 0x195a <prvAddNewTaskToReadyList+0xd8>
    1946:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    194a:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    194e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1950:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1952:	98 17       	cp	r25, r24
    1954:	10 f4       	brcc	.+4      	; 0x195a <prvAddNewTaskToReadyList+0xd8>
    1956:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <prvCheckTasksWaitingTermination>:
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	1b c0       	rjmp	.+54     	; 0x199c <prvCheckTasksWaitingTermination+0x3c>
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	0f 92       	push	r0
    196c:	e0 91 36 15 	lds	r30, 0x1536	; 0x801536 <xTasksWaitingTermination+0x7>
    1970:	f0 91 37 15 	lds	r31, 0x1537	; 0x801537 <xTasksWaitingTermination+0x8>
    1974:	c0 85       	ldd	r28, Z+8	; 0x08
    1976:	d1 85       	ldd	r29, Z+9	; 0x09
    1978:	ce 01       	movw	r24, r28
    197a:	02 96       	adiw	r24, 0x02	; 2
    197c:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1980:	80 91 22 15 	lds	r24, 0x1522	; 0x801522 <uxCurrentNumberOfTasks>
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	80 93 22 15 	sts	0x1522, r24	; 0x801522 <uxCurrentNumberOfTasks>
    198a:	80 91 2e 15 	lds	r24, 0x152E	; 0x80152e <uxDeletedTasksWaitingCleanUp>
    198e:	81 50       	subi	r24, 0x01	; 1
    1990:	80 93 2e 15 	sts	0x152E, r24	; 0x80152e <uxDeletedTasksWaitingCleanUp>
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	ce 01       	movw	r24, r28
    199a:	b9 de       	rcall	.-654    	; 0x170e <prvDeleteTCB>
    199c:	80 91 2e 15 	lds	r24, 0x152E	; 0x80152e <uxDeletedTasksWaitingCleanUp>
    19a0:	81 11       	cpse	r24, r1
    19a2:	e1 cf       	rjmp	.-62     	; 0x1966 <prvCheckTasksWaitingTermination+0x6>
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <prvAddCurrentTaskToDelayedList>:
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	6b 01       	movw	r12, r22
    19c0:	7c 01       	movw	r14, r24
    19c2:	c4 2f       	mov	r28, r20
    19c4:	80 90 1e 15 	lds	r8, 0x151E	; 0x80151e <xTickCount>
    19c8:	90 90 1f 15 	lds	r9, 0x151F	; 0x80151f <xTickCount+0x1>
    19cc:	a0 90 20 15 	lds	r10, 0x1520	; 0x801520 <xTickCount+0x2>
    19d0:	b0 90 21 15 	lds	r11, 0x1521	; 0x801521 <xTickCount+0x3>
    19d4:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    19d8:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    19dc:	02 96       	adiw	r24, 0x02	; 2
    19de:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	c8 16       	cp	r12, r24
    19e6:	d8 06       	cpc	r13, r24
    19e8:	e8 06       	cpc	r14, r24
    19ea:	f8 06       	cpc	r15, r24
    19ec:	b1 f5       	brne	.+108    	; 0x1a5a <prvAddCurrentTaskToDelayedList+0xb0>
    19ee:	cc 23       	and	r28, r28
    19f0:	a1 f1       	breq	.+104    	; 0x1a5a <prvAddCurrentTaskToDelayedList+0xb0>
    19f2:	e3 e2       	ldi	r30, 0x23	; 35
    19f4:	f5 e1       	ldi	r31, 0x15	; 21
    19f6:	a1 81       	ldd	r26, Z+1	; 0x01
    19f8:	b2 81       	ldd	r27, Z+2	; 0x02
    19fa:	c0 91 cd 15 	lds	r28, 0x15CD	; 0x8015cd <pxCurrentTCB>
    19fe:	d0 91 ce 15 	lds	r29, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a02:	bf 83       	std	Y+7, r27	; 0x07
    1a04:	ae 83       	std	Y+6, r26	; 0x06
    1a06:	c0 91 cd 15 	lds	r28, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a0a:	d0 91 ce 15 	lds	r29, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a0e:	16 96       	adiw	r26, 0x06	; 6
    1a10:	8d 91       	ld	r24, X+
    1a12:	9c 91       	ld	r25, X
    1a14:	17 97       	sbiw	r26, 0x07	; 7
    1a16:	99 87       	std	Y+9, r25	; 0x09
    1a18:	88 87       	std	Y+8, r24	; 0x08
    1a1a:	16 96       	adiw	r26, 0x06	; 6
    1a1c:	cd 91       	ld	r28, X+
    1a1e:	dc 91       	ld	r29, X
    1a20:	17 97       	sbiw	r26, 0x07	; 7
    1a22:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a26:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a2a:	02 96       	adiw	r24, 0x02	; 2
    1a2c:	9d 83       	std	Y+5, r25	; 0x05
    1a2e:	8c 83       	std	Y+4, r24	; 0x04
    1a30:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a34:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a38:	02 96       	adiw	r24, 0x02	; 2
    1a3a:	17 96       	adiw	r26, 0x07	; 7
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
    1a40:	16 97       	sbiw	r26, 0x06	; 6
    1a42:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a46:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a4a:	1d 96       	adiw	r26, 0x0d	; 13
    1a4c:	fc 93       	st	X, r31
    1a4e:	ee 93       	st	-X, r30
    1a50:	1c 97       	sbiw	r26, 0x0c	; 12
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	80 83       	st	Z, r24
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <prvAddCurrentTaskToDelayedList+0x12e>
    1a5a:	c8 0c       	add	r12, r8
    1a5c:	d9 1c       	adc	r13, r9
    1a5e:	ea 1c       	adc	r14, r10
    1a60:	fb 1c       	adc	r15, r11
    1a62:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a66:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a6a:	c2 82       	std	Z+2, r12	; 0x02
    1a6c:	d3 82       	std	Z+3, r13	; 0x03
    1a6e:	e4 82       	std	Z+4, r14	; 0x04
    1a70:	f5 82       	std	Z+5, r15	; 0x05
    1a72:	c8 14       	cp	r12, r8
    1a74:	d9 04       	cpc	r13, r9
    1a76:	ea 04       	cpc	r14, r10
    1a78:	fb 04       	cpc	r15, r11
    1a7a:	68 f4       	brcc	.+26     	; 0x1a96 <prvAddCurrentTaskToDelayedList+0xec>
    1a7c:	60 91 cd 15 	lds	r22, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a80:	70 91 ce 15 	lds	r23, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a84:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <pxOverflowDelayedTaskList>
    1a88:	90 91 46 15 	lds	r25, 0x1546	; 0x801546 <pxOverflowDelayedTaskList+0x1>
    1a8c:	6e 5f       	subi	r22, 0xFE	; 254
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1a94:	21 c0       	rjmp	.+66     	; 0x1ad8 <prvAddCurrentTaskToDelayedList+0x12e>
    1a96:	60 91 cd 15 	lds	r22, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1a9a:	70 91 ce 15 	lds	r23, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1a9e:	80 91 47 15 	lds	r24, 0x1547	; 0x801547 <pxDelayedTaskList>
    1aa2:	90 91 48 15 	lds	r25, 0x1548	; 0x801548 <pxDelayedTaskList+0x1>
    1aa6:	6e 5f       	subi	r22, 0xFE	; 254
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1aae:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <xNextTaskUnblockTime>
    1ab2:	90 91 12 15 	lds	r25, 0x1512	; 0x801512 <xNextTaskUnblockTime+0x1>
    1ab6:	a0 91 13 15 	lds	r26, 0x1513	; 0x801513 <xNextTaskUnblockTime+0x2>
    1aba:	b0 91 14 15 	lds	r27, 0x1514	; 0x801514 <xNextTaskUnblockTime+0x3>
    1abe:	c8 16       	cp	r12, r24
    1ac0:	d9 06       	cpc	r13, r25
    1ac2:	ea 06       	cpc	r14, r26
    1ac4:	fb 06       	cpc	r15, r27
    1ac6:	40 f4       	brcc	.+16     	; 0x1ad8 <prvAddCurrentTaskToDelayedList+0x12e>
    1ac8:	c0 92 11 15 	sts	0x1511, r12	; 0x801511 <xNextTaskUnblockTime>
    1acc:	d0 92 12 15 	sts	0x1512, r13	; 0x801512 <xNextTaskUnblockTime+0x1>
    1ad0:	e0 92 13 15 	sts	0x1513, r14	; 0x801513 <xNextTaskUnblockTime+0x2>
    1ad4:	f0 92 14 15 	sts	0x1514, r15	; 0x801514 <xNextTaskUnblockTime+0x3>
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	9f 90       	pop	r9
    1aea:	8f 90       	pop	r8
    1aec:	08 95       	ret

00001aee <xTaskCreate>:
    1aee:	2f 92       	push	r2
    1af0:	3f 92       	push	r3
    1af2:	4f 92       	push	r4
    1af4:	5f 92       	push	r5
    1af6:	6f 92       	push	r6
    1af8:	7f 92       	push	r7
    1afa:	8f 92       	push	r8
    1afc:	9f 92       	push	r9
    1afe:	af 92       	push	r10
    1b00:	bf 92       	push	r11
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	3c 01       	movw	r6, r24
    1b12:	1b 01       	movw	r2, r22
    1b14:	4a 01       	movw	r8, r20
    1b16:	29 01       	movw	r4, r18
    1b18:	ca 01       	movw	r24, r20
    1b1a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1b1e:	6c 01       	movw	r12, r24
    1b20:	89 2b       	or	r24, r25
    1b22:	71 f0       	breq	.+28     	; 0x1b40 <xTaskCreate+0x52>
    1b24:	84 e3       	ldi	r24, 0x34	; 52
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	89 2b       	or	r24, r25
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <xTaskCreate+0x4a>
    1b32:	dc 8e       	std	Y+28, r13	; 0x1c
    1b34:	cb 8e       	std	Y+27, r12	; 0x1b
    1b36:	06 c0       	rjmp	.+12     	; 0x1b44 <xTaskCreate+0x56>
    1b38:	c6 01       	movw	r24, r12
    1b3a:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <xTaskCreate+0x56>
    1b40:	c0 e0       	ldi	r28, 0x00	; 0
    1b42:	d0 e0       	ldi	r29, 0x00	; 0
    1b44:	20 97       	sbiw	r28, 0x00	; 0
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <xTaskCreate+0x72>
    1b48:	a1 2c       	mov	r10, r1
    1b4a:	b1 2c       	mov	r11, r1
    1b4c:	6e 01       	movw	r12, r28
    1b4e:	92 01       	movw	r18, r4
    1b50:	a4 01       	movw	r20, r8
    1b52:	b1 01       	movw	r22, r2
    1b54:	c3 01       	movw	r24, r6
    1b56:	e8 dd       	rcall	.-1072   	; 0x1728 <prvInitialiseNewTask>
    1b58:	ce 01       	movw	r24, r28
    1b5a:	93 de       	rcall	.-730    	; 0x1882 <prvAddNewTaskToReadyList>
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <xTaskCreate+0x74>
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	bf 90       	pop	r11
    1b72:	af 90       	pop	r10
    1b74:	9f 90       	pop	r9
    1b76:	8f 90       	pop	r8
    1b78:	7f 90       	pop	r7
    1b7a:	6f 90       	pop	r6
    1b7c:	5f 90       	pop	r5
    1b7e:	4f 90       	pop	r4
    1b80:	3f 90       	pop	r3
    1b82:	2f 90       	pop	r2
    1b84:	08 95       	ret

00001b86 <vTaskStartScheduler>:
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	0f 2e       	mov	r0, r31
    1b8e:	ff e0       	ldi	r31, 0x0F	; 15
    1b90:	ef 2e       	mov	r14, r31
    1b92:	f5 e1       	ldi	r31, 0x15	; 21
    1b94:	ff 2e       	mov	r15, r31
    1b96:	f0 2d       	mov	r31, r0
    1b98:	00 e0       	ldi	r16, 0x00	; 0
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 ec       	ldi	r20, 0xC0	; 192
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	62 e4       	ldi	r22, 0x42	; 66
    1ba4:	72 e0       	ldi	r23, 0x02	; 2
    1ba6:	8d ec       	ldi	r24, 0xCD	; 205
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a1 df       	rcall	.-190    	; 0x1aee <xTaskCreate>
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	11 f4       	brne	.+4      	; 0x1bb4 <vTaskStartScheduler+0x2e>
    1bb0:	0e 94 75 17 	call	0x2eea	; 0x2eea <xTimerCreateTimerTask>
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	c9 f4       	brne	.+50     	; 0x1bea <vTaskStartScheduler+0x64>
    1bb8:	f8 94       	cli
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <xNextTaskUnblockTime>
    1bc4:	90 93 12 15 	sts	0x1512, r25	; 0x801512 <xNextTaskUnblockTime+0x1>
    1bc8:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <xNextTaskUnblockTime+0x2>
    1bcc:	b0 93 14 15 	sts	0x1514, r27	; 0x801514 <xNextTaskUnblockTime+0x3>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	80 93 1c 15 	sts	0x151C, r24	; 0x80151c <xSchedulerRunning>
    1bd6:	10 92 1e 15 	sts	0x151E, r1	; 0x80151e <xTickCount>
    1bda:	10 92 1f 15 	sts	0x151F, r1	; 0x80151f <xTickCount+0x1>
    1bde:	10 92 20 15 	sts	0x1520, r1	; 0x801520 <xTickCount+0x2>
    1be2:	10 92 21 15 	sts	0x1521, r1	; 0x801521 <xTickCount+0x3>
    1be6:	0e 94 5f 04 	call	0x8be	; 0x8be <xPortStartScheduler>
    1bea:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	08 95       	ret

00001bf6 <vTaskSuspendAll>:
    1bf6:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	80 93 0e 15 	sts	0x150E, r24	; 0x80150e <uxSchedulerSuspended>
    1c00:	08 95       	ret

00001c02 <xTaskGetTickCount>:
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	0f 92       	push	r0
    1c08:	60 91 1e 15 	lds	r22, 0x151E	; 0x80151e <xTickCount>
    1c0c:	70 91 1f 15 	lds	r23, 0x151F	; 0x80151f <xTickCount+0x1>
    1c10:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <xTickCount+0x2>
    1c14:	90 91 21 15 	lds	r25, 0x1521	; 0x801521 <xTickCount+0x3>
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	08 95       	ret

00001c1e <xTaskIncrementTick>:
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    1c2e:	81 11       	cpse	r24, r1
    1c30:	05 c1       	rjmp	.+522    	; 0x1e3c <xTaskIncrementTick+0x21e>
    1c32:	c0 90 1e 15 	lds	r12, 0x151E	; 0x80151e <xTickCount>
    1c36:	d0 90 1f 15 	lds	r13, 0x151F	; 0x80151f <xTickCount+0x1>
    1c3a:	e0 90 20 15 	lds	r14, 0x1520	; 0x801520 <xTickCount+0x2>
    1c3e:	f0 90 21 15 	lds	r15, 0x1521	; 0x801521 <xTickCount+0x3>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	c8 1a       	sub	r12, r24
    1c46:	d8 0a       	sbc	r13, r24
    1c48:	e8 0a       	sbc	r14, r24
    1c4a:	f8 0a       	sbc	r15, r24
    1c4c:	c0 92 1e 15 	sts	0x151E, r12	; 0x80151e <xTickCount>
    1c50:	d0 92 1f 15 	sts	0x151F, r13	; 0x80151f <xTickCount+0x1>
    1c54:	e0 92 20 15 	sts	0x1520, r14	; 0x801520 <xTickCount+0x2>
    1c58:	f0 92 21 15 	sts	0x1521, r15	; 0x801521 <xTickCount+0x3>
    1c5c:	c1 14       	cp	r12, r1
    1c5e:	d1 04       	cpc	r13, r1
    1c60:	e1 04       	cpc	r14, r1
    1c62:	f1 04       	cpc	r15, r1
    1c64:	b1 f4       	brne	.+44     	; 0x1c92 <xTaskIncrementTick+0x74>
    1c66:	80 91 47 15 	lds	r24, 0x1547	; 0x801547 <pxDelayedTaskList>
    1c6a:	90 91 48 15 	lds	r25, 0x1548	; 0x801548 <pxDelayedTaskList+0x1>
    1c6e:	20 91 45 15 	lds	r18, 0x1545	; 0x801545 <pxOverflowDelayedTaskList>
    1c72:	30 91 46 15 	lds	r19, 0x1546	; 0x801546 <pxOverflowDelayedTaskList+0x1>
    1c76:	30 93 48 15 	sts	0x1548, r19	; 0x801548 <pxDelayedTaskList+0x1>
    1c7a:	20 93 47 15 	sts	0x1547, r18	; 0x801547 <pxDelayedTaskList>
    1c7e:	90 93 46 15 	sts	0x1546, r25	; 0x801546 <pxOverflowDelayedTaskList+0x1>
    1c82:	80 93 45 15 	sts	0x1545, r24	; 0x801545 <pxOverflowDelayedTaskList>
    1c86:	80 91 16 15 	lds	r24, 0x1516	; 0x801516 <xNumOfOverflows>
    1c8a:	8f 5f       	subi	r24, 0xFF	; 255
    1c8c:	80 93 16 15 	sts	0x1516, r24	; 0x801516 <xNumOfOverflows>
    1c90:	17 dd       	rcall	.-1490   	; 0x16c0 <prvResetNextTaskUnblockTime>
    1c92:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <xNextTaskUnblockTime>
    1c96:	90 91 12 15 	lds	r25, 0x1512	; 0x801512 <xNextTaskUnblockTime+0x1>
    1c9a:	a0 91 13 15 	lds	r26, 0x1513	; 0x801513 <xNextTaskUnblockTime+0x2>
    1c9e:	b0 91 14 15 	lds	r27, 0x1514	; 0x801514 <xNextTaskUnblockTime+0x3>
    1ca2:	c8 16       	cp	r12, r24
    1ca4:	d9 06       	cpc	r13, r25
    1ca6:	ea 06       	cpc	r14, r26
    1ca8:	fb 06       	cpc	r15, r27
    1caa:	20 f4       	brcc	.+8      	; 0x1cb4 <xTaskIncrementTick+0x96>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	b2 c0       	rjmp	.+356    	; 0x1e14 <xTaskIncrementTick+0x1f6>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <xTaskIncrementTick+0x98>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	e0 91 47 15 	lds	r30, 0x1547	; 0x801547 <pxDelayedTaskList>
    1cba:	f0 91 48 15 	lds	r31, 0x1548	; 0x801548 <pxDelayedTaskList+0x1>
    1cbe:	90 81       	ld	r25, Z
    1cc0:	91 11       	cpse	r25, r1
    1cc2:	0c c0       	rjmp	.+24     	; 0x1cdc <xTaskIncrementTick+0xbe>
    1cc4:	4f ef       	ldi	r20, 0xFF	; 255
    1cc6:	5f ef       	ldi	r21, 0xFF	; 255
    1cc8:	ba 01       	movw	r22, r20
    1cca:	40 93 11 15 	sts	0x1511, r20	; 0x801511 <xNextTaskUnblockTime>
    1cce:	50 93 12 15 	sts	0x1512, r21	; 0x801512 <xNextTaskUnblockTime+0x1>
    1cd2:	60 93 13 15 	sts	0x1513, r22	; 0x801513 <xNextTaskUnblockTime+0x2>
    1cd6:	70 93 14 15 	sts	0x1514, r23	; 0x801514 <xNextTaskUnblockTime+0x3>
    1cda:	9c c0       	rjmp	.+312    	; 0x1e14 <xTaskIncrementTick+0x1f6>
    1cdc:	e0 91 47 15 	lds	r30, 0x1547	; 0x801547 <pxDelayedTaskList>
    1ce0:	f0 91 48 15 	lds	r31, 0x1548	; 0x801548 <pxDelayedTaskList+0x1>
    1ce4:	07 80       	ldd	r0, Z+7	; 0x07
    1ce6:	f0 85       	ldd	r31, Z+8	; 0x08
    1ce8:	e0 2d       	mov	r30, r0
    1cea:	00 84       	ldd	r0, Z+8	; 0x08
    1cec:	f1 85       	ldd	r31, Z+9	; 0x09
    1cee:	e0 2d       	mov	r30, r0
    1cf0:	42 81       	ldd	r20, Z+2	; 0x02
    1cf2:	53 81       	ldd	r21, Z+3	; 0x03
    1cf4:	64 81       	ldd	r22, Z+4	; 0x04
    1cf6:	75 81       	ldd	r23, Z+5	; 0x05
    1cf8:	c4 16       	cp	r12, r20
    1cfa:	d5 06       	cpc	r13, r21
    1cfc:	e6 06       	cpc	r14, r22
    1cfe:	f7 06       	cpc	r15, r23
    1d00:	48 f4       	brcc	.+18     	; 0x1d14 <xTaskIncrementTick+0xf6>
    1d02:	40 93 11 15 	sts	0x1511, r20	; 0x801511 <xNextTaskUnblockTime>
    1d06:	50 93 12 15 	sts	0x1512, r21	; 0x801512 <xNextTaskUnblockTime+0x1>
    1d0a:	60 93 13 15 	sts	0x1513, r22	; 0x801513 <xNextTaskUnblockTime+0x2>
    1d0e:	70 93 14 15 	sts	0x1514, r23	; 0x801514 <xNextTaskUnblockTime+0x3>
    1d12:	80 c0       	rjmp	.+256    	; 0x1e14 <xTaskIncrementTick+0x1f6>
    1d14:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d16:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d18:	c6 81       	ldd	r28, Z+6	; 0x06
    1d1a:	d7 81       	ldd	r29, Z+7	; 0x07
    1d1c:	20 85       	ldd	r18, Z+8	; 0x08
    1d1e:	31 85       	ldd	r19, Z+9	; 0x09
    1d20:	3f 83       	std	Y+7, r19	; 0x07
    1d22:	2e 83       	std	Y+6, r18	; 0x06
    1d24:	c0 85       	ldd	r28, Z+8	; 0x08
    1d26:	d1 85       	ldd	r29, Z+9	; 0x09
    1d28:	26 81       	ldd	r18, Z+6	; 0x06
    1d2a:	37 81       	ldd	r19, Z+7	; 0x07
    1d2c:	3d 83       	std	Y+5, r19	; 0x05
    1d2e:	2c 83       	std	Y+4, r18	; 0x04
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	4d 91       	ld	r20, X+
    1d34:	5c 91       	ld	r21, X
    1d36:	12 97       	sbiw	r26, 0x02	; 2
    1d38:	9f 01       	movw	r18, r30
    1d3a:	2e 5f       	subi	r18, 0xFE	; 254
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	42 17       	cp	r20, r18
    1d40:	53 07       	cpc	r21, r19
    1d42:	31 f4       	brne	.+12     	; 0x1d50 <xTaskIncrementTick+0x132>
    1d44:	40 85       	ldd	r20, Z+8	; 0x08
    1d46:	51 85       	ldd	r21, Z+9	; 0x09
    1d48:	12 96       	adiw	r26, 0x02	; 2
    1d4a:	5c 93       	st	X, r21
    1d4c:	4e 93       	st	-X, r20
    1d4e:	11 97       	sbiw	r26, 0x01	; 1
    1d50:	15 86       	std	Z+13, r1	; 0x0d
    1d52:	14 86       	std	Z+12, r1	; 0x0c
    1d54:	9c 91       	ld	r25, X
    1d56:	91 50       	subi	r25, 0x01	; 1
    1d58:	9c 93       	st	X, r25
    1d5a:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d5c:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d5e:	10 97       	sbiw	r26, 0x00	; 0
    1d60:	09 f1       	breq	.+66     	; 0x1da4 <xTaskIncrementTick+0x186>
    1d62:	c2 89       	ldd	r28, Z+18	; 0x12
    1d64:	d3 89       	ldd	r29, Z+19	; 0x13
    1d66:	44 89       	ldd	r20, Z+20	; 0x14
    1d68:	55 89       	ldd	r21, Z+21	; 0x15
    1d6a:	5f 83       	std	Y+7, r21	; 0x07
    1d6c:	4e 83       	std	Y+6, r20	; 0x06
    1d6e:	c4 89       	ldd	r28, Z+20	; 0x14
    1d70:	d5 89       	ldd	r29, Z+21	; 0x15
    1d72:	42 89       	ldd	r20, Z+18	; 0x12
    1d74:	53 89       	ldd	r21, Z+19	; 0x13
    1d76:	5d 83       	std	Y+5, r21	; 0x05
    1d78:	4c 83       	std	Y+4, r20	; 0x04
    1d7a:	11 96       	adiw	r26, 0x01	; 1
    1d7c:	6d 91       	ld	r22, X+
    1d7e:	7c 91       	ld	r23, X
    1d80:	12 97       	sbiw	r26, 0x02	; 2
    1d82:	af 01       	movw	r20, r30
    1d84:	42 5f       	subi	r20, 0xF2	; 242
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	64 17       	cp	r22, r20
    1d8a:	75 07       	cpc	r23, r21
    1d8c:	31 f4       	brne	.+12     	; 0x1d9a <xTaskIncrementTick+0x17c>
    1d8e:	44 89       	ldd	r20, Z+20	; 0x14
    1d90:	55 89       	ldd	r21, Z+21	; 0x15
    1d92:	12 96       	adiw	r26, 0x02	; 2
    1d94:	5c 93       	st	X, r21
    1d96:	4e 93       	st	-X, r20
    1d98:	11 97       	sbiw	r26, 0x01	; 1
    1d9a:	11 8e       	std	Z+25, r1	; 0x19
    1d9c:	10 8e       	std	Z+24, r1	; 0x18
    1d9e:	9c 91       	ld	r25, X
    1da0:	91 50       	subi	r25, 0x01	; 1
    1da2:	9c 93       	st	X, r25
    1da4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1da6:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <uxTopReadyPriority>
    1daa:	9a 17       	cp	r25, r26
    1dac:	10 f4       	brcc	.+4      	; 0x1db2 <xTaskIncrementTick+0x194>
    1dae:	a0 93 1d 15 	sts	0x151D, r26	; 0x80151d <uxTopReadyPriority>
    1db2:	9b e0       	ldi	r25, 0x0B	; 11
    1db4:	9a 9f       	mul	r25, r26
    1db6:	d0 01       	movw	r26, r0
    1db8:	11 24       	eor	r1, r1
    1dba:	a1 5a       	subi	r26, 0xA1	; 161
    1dbc:	ba 4e       	sbci	r27, 0xEA	; 234
    1dbe:	11 96       	adiw	r26, 0x01	; 1
    1dc0:	0d 90       	ld	r0, X+
    1dc2:	bc 91       	ld	r27, X
    1dc4:	a0 2d       	mov	r26, r0
    1dc6:	b7 83       	std	Z+7, r27	; 0x07
    1dc8:	a6 83       	std	Z+6, r26	; 0x06
    1dca:	16 96       	adiw	r26, 0x06	; 6
    1dcc:	4d 91       	ld	r20, X+
    1dce:	5c 91       	ld	r21, X
    1dd0:	17 97       	sbiw	r26, 0x07	; 7
    1dd2:	51 87       	std	Z+9, r21	; 0x09
    1dd4:	40 87       	std	Z+8, r20	; 0x08
    1dd6:	16 96       	adiw	r26, 0x06	; 6
    1dd8:	cd 91       	ld	r28, X+
    1dda:	dc 91       	ld	r29, X
    1ddc:	17 97       	sbiw	r26, 0x07	; 7
    1dde:	3d 83       	std	Y+5, r19	; 0x05
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	17 96       	adiw	r26, 0x07	; 7
    1de4:	3c 93       	st	X, r19
    1de6:	2e 93       	st	-X, r18
    1de8:	16 97       	sbiw	r26, 0x06	; 6
    1dea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dec:	9a 9f       	mul	r25, r26
    1dee:	d0 01       	movw	r26, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	a1 5a       	subi	r26, 0xA1	; 161
    1df4:	ba 4e       	sbci	r27, 0xEA	; 234
    1df6:	b5 87       	std	Z+13, r27	; 0x0d
    1df8:	a4 87       	std	Z+12, r26	; 0x0c
    1dfa:	9c 91       	ld	r25, X
    1dfc:	9f 5f       	subi	r25, 0xFF	; 255
    1dfe:	9c 93       	st	X, r25
    1e00:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e02:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1e06:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1e0a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e0c:	29 17       	cp	r18, r25
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <xTaskIncrementTick+0x1f4>
    1e10:	4f cf       	rjmp	.-354    	; 0x1cb0 <xTaskIncrementTick+0x92>
    1e12:	51 cf       	rjmp	.-350    	; 0x1cb6 <xTaskIncrementTick+0x98>
    1e14:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1e18:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1e1c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e1e:	9b e0       	ldi	r25, 0x0B	; 11
    1e20:	e9 9f       	mul	r30, r25
    1e22:	f0 01       	movw	r30, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	e1 5a       	subi	r30, 0xA1	; 161
    1e28:	fa 4e       	sbci	r31, 0xEA	; 234
    1e2a:	90 81       	ld	r25, Z
    1e2c:	92 30       	cpi	r25, 0x02	; 2
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <xTaskIncrementTick+0x214>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 91 17 15 	lds	r25, 0x1517	; 0x801517 <xYieldPending>
    1e36:	91 11       	cpse	r25, r1
    1e38:	16 c0       	rjmp	.+44     	; 0x1e66 <xTaskIncrementTick+0x248>
    1e3a:	16 c0       	rjmp	.+44     	; 0x1e68 <xTaskIncrementTick+0x24a>
    1e3c:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xPendedTicks>
    1e40:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <xPendedTicks+0x1>
    1e44:	a0 91 1a 15 	lds	r26, 0x151A	; 0x80151a <xPendedTicks+0x2>
    1e48:	b0 91 1b 15 	lds	r27, 0x151B	; 0x80151b <xPendedTicks+0x3>
    1e4c:	01 96       	adiw	r24, 0x01	; 1
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	b1 1d       	adc	r27, r1
    1e52:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <xPendedTicks>
    1e56:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <xPendedTicks+0x1>
    1e5a:	a0 93 1a 15 	sts	0x151A, r26	; 0x80151a <xPendedTicks+0x2>
    1e5e:	b0 93 1b 15 	sts	0x151B, r27	; 0x80151b <xPendedTicks+0x3>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <xTaskIncrementTick+0x24a>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	08 95       	ret

00001e76 <xTaskResumeAll>:
    1e76:	cf 92       	push	r12
    1e78:	df 92       	push	r13
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	0f 92       	push	r0
    1e88:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    1e8c:	81 50       	subi	r24, 0x01	; 1
    1e8e:	80 93 0e 15 	sts	0x150E, r24	; 0x80150e <uxSchedulerSuspended>
    1e92:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    1e96:	81 11       	cpse	r24, r1
    1e98:	be c0       	rjmp	.+380    	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1e9a:	80 91 22 15 	lds	r24, 0x1522	; 0x801522 <uxCurrentNumberOfTasks>
    1e9e:	81 11       	cpse	r24, r1
    1ea0:	88 c0       	rjmp	.+272    	; 0x1fb2 <xTaskResumeAll+0x13c>
    1ea2:	bc c0       	rjmp	.+376    	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    1ea4:	e0 91 41 15 	lds	r30, 0x1541	; 0x801541 <xPendingReadyList+0x7>
    1ea8:	f0 91 42 15 	lds	r31, 0x1542	; 0x801542 <xPendingReadyList+0x8>
    1eac:	00 84       	ldd	r0, Z+8	; 0x08
    1eae:	f1 85       	ldd	r31, Z+9	; 0x09
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1eb4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1eb6:	c2 89       	ldd	r28, Z+18	; 0x12
    1eb8:	d3 89       	ldd	r29, Z+19	; 0x13
    1eba:	84 89       	ldd	r24, Z+20	; 0x14
    1ebc:	95 89       	ldd	r25, Z+21	; 0x15
    1ebe:	9f 83       	std	Y+7, r25	; 0x07
    1ec0:	8e 83       	std	Y+6, r24	; 0x06
    1ec2:	c4 89       	ldd	r28, Z+20	; 0x14
    1ec4:	d5 89       	ldd	r29, Z+21	; 0x15
    1ec6:	82 89       	ldd	r24, Z+18	; 0x12
    1ec8:	93 89       	ldd	r25, Z+19	; 0x13
    1eca:	9d 83       	std	Y+5, r25	; 0x05
    1ecc:	8c 83       	std	Y+4, r24	; 0x04
    1ece:	11 96       	adiw	r26, 0x01	; 1
    1ed0:	2d 91       	ld	r18, X+
    1ed2:	3c 91       	ld	r19, X
    1ed4:	12 97       	sbiw	r26, 0x02	; 2
    1ed6:	cf 01       	movw	r24, r30
    1ed8:	0e 96       	adiw	r24, 0x0e	; 14
    1eda:	28 17       	cp	r18, r24
    1edc:	39 07       	cpc	r19, r25
    1ede:	31 f4       	brne	.+12     	; 0x1eec <xTaskResumeAll+0x76>
    1ee0:	84 89       	ldd	r24, Z+20	; 0x14
    1ee2:	95 89       	ldd	r25, Z+21	; 0x15
    1ee4:	12 96       	adiw	r26, 0x02	; 2
    1ee6:	9c 93       	st	X, r25
    1ee8:	8e 93       	st	-X, r24
    1eea:	11 97       	sbiw	r26, 0x01	; 1
    1eec:	11 8e       	std	Z+25, r1	; 0x19
    1eee:	10 8e       	std	Z+24, r1	; 0x18
    1ef0:	8c 91       	ld	r24, X
    1ef2:	81 50       	subi	r24, 0x01	; 1
    1ef4:	8c 93       	st	X, r24
    1ef6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ef8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1efa:	c6 81       	ldd	r28, Z+6	; 0x06
    1efc:	d7 81       	ldd	r29, Z+7	; 0x07
    1efe:	80 85       	ldd	r24, Z+8	; 0x08
    1f00:	91 85       	ldd	r25, Z+9	; 0x09
    1f02:	9f 83       	std	Y+7, r25	; 0x07
    1f04:	8e 83       	std	Y+6, r24	; 0x06
    1f06:	c0 85       	ldd	r28, Z+8	; 0x08
    1f08:	d1 85       	ldd	r29, Z+9	; 0x09
    1f0a:	86 81       	ldd	r24, Z+6	; 0x06
    1f0c:	97 81       	ldd	r25, Z+7	; 0x07
    1f0e:	9d 83       	std	Y+5, r25	; 0x05
    1f10:	8c 83       	std	Y+4, r24	; 0x04
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	8d 91       	ld	r24, X+
    1f16:	9c 91       	ld	r25, X
    1f18:	12 97       	sbiw	r26, 0x02	; 2
    1f1a:	9f 01       	movw	r18, r30
    1f1c:	2e 5f       	subi	r18, 0xFE	; 254
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	82 17       	cp	r24, r18
    1f22:	93 07       	cpc	r25, r19
    1f24:	31 f4       	brne	.+12     	; 0x1f32 <xTaskResumeAll+0xbc>
    1f26:	80 85       	ldd	r24, Z+8	; 0x08
    1f28:	91 85       	ldd	r25, Z+9	; 0x09
    1f2a:	12 96       	adiw	r26, 0x02	; 2
    1f2c:	9c 93       	st	X, r25
    1f2e:	8e 93       	st	-X, r24
    1f30:	11 97       	sbiw	r26, 0x01	; 1
    1f32:	15 86       	std	Z+13, r1	; 0x0d
    1f34:	14 86       	std	Z+12, r1	; 0x0c
    1f36:	8c 91       	ld	r24, X
    1f38:	81 50       	subi	r24, 0x01	; 1
    1f3a:	8c 93       	st	X, r24
    1f3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f3e:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    1f42:	8a 17       	cp	r24, r26
    1f44:	10 f4       	brcc	.+4      	; 0x1f4a <xTaskResumeAll+0xd4>
    1f46:	a0 93 1d 15 	sts	0x151D, r26	; 0x80151d <uxTopReadyPriority>
    1f4a:	8b e0       	ldi	r24, 0x0B	; 11
    1f4c:	8a 9f       	mul	r24, r26
    1f4e:	d0 01       	movw	r26, r0
    1f50:	11 24       	eor	r1, r1
    1f52:	a1 5a       	subi	r26, 0xA1	; 161
    1f54:	ba 4e       	sbci	r27, 0xEA	; 234
    1f56:	11 96       	adiw	r26, 0x01	; 1
    1f58:	0d 90       	ld	r0, X+
    1f5a:	bc 91       	ld	r27, X
    1f5c:	a0 2d       	mov	r26, r0
    1f5e:	b7 83       	std	Z+7, r27	; 0x07
    1f60:	a6 83       	std	Z+6, r26	; 0x06
    1f62:	16 96       	adiw	r26, 0x06	; 6
    1f64:	4d 91       	ld	r20, X+
    1f66:	5c 91       	ld	r21, X
    1f68:	17 97       	sbiw	r26, 0x07	; 7
    1f6a:	51 87       	std	Z+9, r21	; 0x09
    1f6c:	40 87       	std	Z+8, r20	; 0x08
    1f6e:	16 96       	adiw	r26, 0x06	; 6
    1f70:	cd 91       	ld	r28, X+
    1f72:	dc 91       	ld	r29, X
    1f74:	17 97       	sbiw	r26, 0x07	; 7
    1f76:	3d 83       	std	Y+5, r19	; 0x05
    1f78:	2c 83       	std	Y+4, r18	; 0x04
    1f7a:	17 96       	adiw	r26, 0x07	; 7
    1f7c:	3c 93       	st	X, r19
    1f7e:	2e 93       	st	-X, r18
    1f80:	16 97       	sbiw	r26, 0x06	; 6
    1f82:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f84:	8a 9f       	mul	r24, r26
    1f86:	d0 01       	movw	r26, r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	a1 5a       	subi	r26, 0xA1	; 161
    1f8c:	ba 4e       	sbci	r27, 0xEA	; 234
    1f8e:	b5 87       	std	Z+13, r27	; 0x0d
    1f90:	a4 87       	std	Z+12, r26	; 0x0c
    1f92:	8c 91       	ld	r24, X
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	8c 93       	st	X, r24
    1f98:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f9a:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
    1f9e:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    1fa2:	5a 96       	adiw	r26, 0x1a	; 26
    1fa4:	8c 91       	ld	r24, X
    1fa6:	98 17       	cp	r25, r24
    1fa8:	30 f0       	brcs	.+12     	; 0x1fb6 <xTaskResumeAll+0x140>
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <xYieldPending>
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <xTaskResumeAll+0x140>
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 91 3a 15 	lds	r24, 0x153A	; 0x80153a <xPendingReadyList>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	73 cf       	rjmp	.-282    	; 0x1ea4 <xTaskResumeAll+0x2e>
    1fbe:	ef 2b       	or	r30, r31
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <xTaskResumeAll+0x14e>
    1fc2:	7e db       	rcall	.-2308   	; 0x16c0 <prvResetNextTaskUnblockTime>
    1fc4:	c0 90 18 15 	lds	r12, 0x1518	; 0x801518 <xPendedTicks>
    1fc8:	d0 90 19 15 	lds	r13, 0x1519	; 0x801519 <xPendedTicks+0x1>
    1fcc:	e0 90 1a 15 	lds	r14, 0x151A	; 0x80151a <xPendedTicks+0x2>
    1fd0:	f0 90 1b 15 	lds	r15, 0x151B	; 0x80151b <xPendedTicks+0x3>
    1fd4:	c1 14       	cp	r12, r1
    1fd6:	d1 04       	cpc	r13, r1
    1fd8:	e1 04       	cpc	r14, r1
    1fda:	f1 04       	cpc	r15, r1
    1fdc:	a1 f0       	breq	.+40     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1fde:	1f de       	rcall	.-962    	; 0x1c1e <xTaskIncrementTick>
    1fe0:	88 23       	and	r24, r24
    1fe2:	19 f0       	breq	.+6      	; 0x1fea <xTaskResumeAll+0x174>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <xYieldPending>
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	c8 1a       	sub	r12, r24
    1fee:	d1 08       	sbc	r13, r1
    1ff0:	e1 08       	sbc	r14, r1
    1ff2:	f1 08       	sbc	r15, r1
    1ff4:	a1 f7       	brne	.-24     	; 0x1fde <xTaskResumeAll+0x168>
    1ff6:	10 92 18 15 	sts	0x1518, r1	; 0x801518 <xPendedTicks>
    1ffa:	10 92 19 15 	sts	0x1519, r1	; 0x801519 <xPendedTicks+0x1>
    1ffe:	10 92 1a 15 	sts	0x151A, r1	; 0x80151a <xPendedTicks+0x2>
    2002:	10 92 1b 15 	sts	0x151B, r1	; 0x80151b <xPendedTicks+0x3>
    2006:	80 91 17 15 	lds	r24, 0x1517	; 0x801517 <xYieldPending>
    200a:	88 23       	and	r24, r24
    200c:	31 f0       	breq	.+12     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    200e:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	03 c0       	rjmp	.+6      	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	01 c0       	rjmp	.+2      	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	ff 90       	pop	r15
    2026:	ef 90       	pop	r14
    2028:	df 90       	pop	r13
    202a:	cf 90       	pop	r12
    202c:	08 95       	ret

0000202e <xTaskDelayUntil>:
    202e:	8f 92       	push	r8
    2030:	9f 92       	push	r9
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	ec 01       	movw	r28, r24
    2046:	6a 01       	movw	r12, r20
    2048:	7b 01       	movw	r14, r22
    204a:	d5 dd       	rcall	.-1110   	; 0x1bf6 <vTaskSuspendAll>
    204c:	80 90 1e 15 	lds	r8, 0x151E	; 0x80151e <xTickCount>
    2050:	90 90 1f 15 	lds	r9, 0x151F	; 0x80151f <xTickCount+0x1>
    2054:	a0 90 20 15 	lds	r10, 0x1520	; 0x801520 <xTickCount+0x2>
    2058:	b0 90 21 15 	lds	r11, 0x1521	; 0x801521 <xTickCount+0x3>
    205c:	88 81       	ld	r24, Y
    205e:	99 81       	ldd	r25, Y+1	; 0x01
    2060:	aa 81       	ldd	r26, Y+2	; 0x02
    2062:	bb 81       	ldd	r27, Y+3	; 0x03
    2064:	ac 01       	movw	r20, r24
    2066:	bd 01       	movw	r22, r26
    2068:	4c 0d       	add	r20, r12
    206a:	5d 1d       	adc	r21, r13
    206c:	6e 1d       	adc	r22, r14
    206e:	7f 1d       	adc	r23, r15
    2070:	88 16       	cp	r8, r24
    2072:	99 06       	cpc	r9, r25
    2074:	aa 06       	cpc	r10, r26
    2076:	bb 06       	cpc	r11, r27
    2078:	60 f4       	brcc	.+24     	; 0x2092 <xTaskDelayUntil+0x64>
    207a:	48 17       	cp	r20, r24
    207c:	59 07       	cpc	r21, r25
    207e:	6a 07       	cpc	r22, r26
    2080:	7b 07       	cpc	r23, r27
    2082:	98 f4       	brcc	.+38     	; 0x20aa <xTaskDelayUntil+0x7c>
    2084:	84 16       	cp	r8, r20
    2086:	95 06       	cpc	r9, r21
    2088:	a6 06       	cpc	r10, r22
    208a:	b7 06       	cpc	r11, r23
    208c:	80 f0       	brcs	.+32     	; 0x20ae <xTaskDelayUntil+0x80>
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	13 c0       	rjmp	.+38     	; 0x20b8 <xTaskDelayUntil+0x8a>
    2092:	48 17       	cp	r20, r24
    2094:	59 07       	cpc	r21, r25
    2096:	6a 07       	cpc	r22, r26
    2098:	7b 07       	cpc	r23, r27
    209a:	58 f0       	brcs	.+22     	; 0x20b2 <xTaskDelayUntil+0x84>
    209c:	84 16       	cp	r8, r20
    209e:	95 06       	cpc	r9, r21
    20a0:	a6 06       	cpc	r10, r22
    20a2:	b7 06       	cpc	r11, r23
    20a4:	40 f0       	brcs	.+16     	; 0x20b6 <xTaskDelayUntil+0x88>
    20a6:	10 e0       	ldi	r17, 0x00	; 0
    20a8:	07 c0       	rjmp	.+14     	; 0x20b8 <xTaskDelayUntil+0x8a>
    20aa:	10 e0       	ldi	r17, 0x00	; 0
    20ac:	05 c0       	rjmp	.+10     	; 0x20b8 <xTaskDelayUntil+0x8a>
    20ae:	11 e0       	ldi	r17, 0x01	; 1
    20b0:	03 c0       	rjmp	.+6      	; 0x20b8 <xTaskDelayUntil+0x8a>
    20b2:	11 e0       	ldi	r17, 0x01	; 1
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <xTaskDelayUntil+0x8a>
    20b6:	11 e0       	ldi	r17, 0x01	; 1
    20b8:	48 83       	st	Y, r20
    20ba:	59 83       	std	Y+1, r21	; 0x01
    20bc:	6a 83       	std	Y+2, r22	; 0x02
    20be:	7b 83       	std	Y+3, r23	; 0x03
    20c0:	11 23       	and	r17, r17
    20c2:	41 f0       	breq	.+16     	; 0x20d4 <xTaskDelayUntil+0xa6>
    20c4:	cb 01       	movw	r24, r22
    20c6:	ba 01       	movw	r22, r20
    20c8:	68 19       	sub	r22, r8
    20ca:	79 09       	sbc	r23, r9
    20cc:	8a 09       	sbc	r24, r10
    20ce:	9b 09       	sbc	r25, r11
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	6b dc       	rcall	.-1834   	; 0x19aa <prvAddCurrentTaskToDelayedList>
    20d4:	d0 de       	rcall	.-608    	; 0x1e76 <xTaskResumeAll>
    20d6:	81 11       	cpse	r24, r1
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <xTaskDelayUntil+0xb0>
    20da:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    20de:	81 2f       	mov	r24, r17
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	08 95       	ret

000020f8 <vTaskDelay>:
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	6b 01       	movw	r12, r22
    2102:	7c 01       	movw	r14, r24
    2104:	67 2b       	or	r22, r23
    2106:	68 2b       	or	r22, r24
    2108:	69 2b       	or	r22, r25
    210a:	39 f0       	breq	.+14     	; 0x211a <vTaskDelay+0x22>
    210c:	74 dd       	rcall	.-1304   	; 0x1bf6 <vTaskSuspendAll>
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	c7 01       	movw	r24, r14
    2112:	b6 01       	movw	r22, r12
    2114:	4a dc       	rcall	.-1900   	; 0x19aa <prvAddCurrentTaskToDelayedList>
    2116:	af de       	rcall	.-674    	; 0x1e76 <xTaskResumeAll>
    2118:	01 c0       	rjmp	.+2      	; 0x211c <vTaskDelay+0x24>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	81 11       	cpse	r24, r1
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <vTaskDelay+0x2c>
    2120:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	08 95       	ret

0000212e <vTaskSwitchContext>:
    212e:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    2132:	88 23       	and	r24, r24
    2134:	21 f0       	breq	.+8      	; 0x213e <vTaskSwitchContext+0x10>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <xYieldPending>
    213c:	08 95       	ret
    213e:	10 92 17 15 	sts	0x1517, r1	; 0x801517 <xYieldPending>
    2142:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2146:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    214a:	20 81       	ld	r18, Z
    214c:	31 81       	ldd	r19, Z+1	; 0x01
    214e:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2152:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2156:	83 8d       	ldd	r24, Z+27	; 0x1b
    2158:	94 8d       	ldd	r25, Z+28	; 0x1c
    215a:	82 17       	cp	r24, r18
    215c:	93 07       	cpc	r25, r19
    215e:	60 f0       	brcs	.+24     	; 0x2178 <vTaskSwitchContext+0x4a>
    2160:	60 91 cd 15 	lds	r22, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2164:	70 91 ce 15 	lds	r23, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2168:	63 5e       	subi	r22, 0xE3	; 227
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2170:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2174:	0e 94 03 1a 	call	0x3406	; 0x3406 <vApplicationStackOverflowHook>
    2178:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <vTaskSwitchContext+0x52>
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	9b e0       	ldi	r25, 0x0B	; 11
    2186:	92 9f       	mul	r25, r18
    2188:	f0 01       	movw	r30, r0
    218a:	93 9f       	mul	r25, r19
    218c:	f0 0d       	add	r31, r0
    218e:	11 24       	eor	r1, r1
    2190:	e1 5a       	subi	r30, 0xA1	; 161
    2192:	fa 4e       	sbci	r31, 0xEA	; 234
    2194:	90 81       	ld	r25, Z
    2196:	99 23       	and	r25, r25
    2198:	91 f3       	breq	.-28     	; 0x217e <vTaskSwitchContext+0x50>
    219a:	9b e0       	ldi	r25, 0x0B	; 11
    219c:	92 9f       	mul	r25, r18
    219e:	a0 01       	movw	r20, r0
    21a0:	93 9f       	mul	r25, r19
    21a2:	50 0d       	add	r21, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	df 01       	movw	r26, r30
    21a8:	01 80       	ldd	r0, Z+1	; 0x01
    21aa:	f2 81       	ldd	r31, Z+2	; 0x02
    21ac:	e0 2d       	mov	r30, r0
    21ae:	04 80       	ldd	r0, Z+4	; 0x04
    21b0:	f5 81       	ldd	r31, Z+5	; 0x05
    21b2:	e0 2d       	mov	r30, r0
    21b4:	12 96       	adiw	r26, 0x02	; 2
    21b6:	fc 93       	st	X, r31
    21b8:	ee 93       	st	-X, r30
    21ba:	11 97       	sbiw	r26, 0x01	; 1
    21bc:	4e 59       	subi	r20, 0x9E	; 158
    21be:	5a 4e       	sbci	r21, 0xEA	; 234
    21c0:	e4 17       	cp	r30, r20
    21c2:	f5 07       	cpc	r31, r21
    21c4:	29 f4       	brne	.+10     	; 0x21d0 <vTaskSwitchContext+0xa2>
    21c6:	44 81       	ldd	r20, Z+4	; 0x04
    21c8:	55 81       	ldd	r21, Z+5	; 0x05
    21ca:	fd 01       	movw	r30, r26
    21cc:	52 83       	std	Z+2, r21	; 0x02
    21ce:	41 83       	std	Z+1, r20	; 0x01
    21d0:	9b e0       	ldi	r25, 0x0B	; 11
    21d2:	92 9f       	mul	r25, r18
    21d4:	f0 01       	movw	r30, r0
    21d6:	93 9f       	mul	r25, r19
    21d8:	f0 0d       	add	r31, r0
    21da:	11 24       	eor	r1, r1
    21dc:	e1 5a       	subi	r30, 0xA1	; 161
    21de:	fa 4e       	sbci	r31, 0xEA	; 234
    21e0:	01 80       	ldd	r0, Z+1	; 0x01
    21e2:	f2 81       	ldd	r31, Z+2	; 0x02
    21e4:	e0 2d       	mov	r30, r0
    21e6:	20 85       	ldd	r18, Z+8	; 0x08
    21e8:	31 85       	ldd	r19, Z+9	; 0x09
    21ea:	30 93 ce 15 	sts	0x15CE, r19	; 0x8015ce <pxCurrentTCB+0x1>
    21ee:	20 93 cd 15 	sts	0x15CD, r18	; 0x8015cd <pxCurrentTCB>
    21f2:	80 93 1d 15 	sts	0x151D, r24	; 0x80151d <uxTopReadyPriority>
    21f6:	08 95       	ret

000021f8 <vTaskPlaceOnEventList>:
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	6a 01       	movw	r12, r20
    2202:	7b 01       	movw	r14, r22
    2204:	60 91 cd 15 	lds	r22, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2208:	70 91 ce 15 	lds	r23, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    220c:	62 5f       	subi	r22, 0xF2	; 242
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	c7 01       	movw	r24, r14
    2218:	b6 01       	movw	r22, r12
    221a:	c7 db       	rcall	.-2162   	; 0x19aa <prvAddCurrentTaskToDelayedList>
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	08 95       	ret

00002226 <vTaskPlaceOnUnorderedEventList>:
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	fc 01       	movw	r30, r24
    2230:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2234:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2238:	70 68       	ori	r23, 0x80	; 128
    223a:	1e 96       	adiw	r26, 0x0e	; 14
    223c:	4d 93       	st	X+, r20
    223e:	5d 93       	st	X+, r21
    2240:	6d 93       	st	X+, r22
    2242:	7c 93       	st	X, r23
    2244:	51 97       	sbiw	r26, 0x11	; 17
    2246:	a1 81       	ldd	r26, Z+1	; 0x01
    2248:	b2 81       	ldd	r27, Z+2	; 0x02
    224a:	c0 91 cd 15 	lds	r28, 0x15CD	; 0x8015cd <pxCurrentTCB>
    224e:	d0 91 ce 15 	lds	r29, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2252:	bb 8b       	std	Y+19, r27	; 0x13
    2254:	aa 8b       	std	Y+18, r26	; 0x12
    2256:	c0 91 cd 15 	lds	r28, 0x15CD	; 0x8015cd <pxCurrentTCB>
    225a:	d0 91 ce 15 	lds	r29, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    225e:	16 96       	adiw	r26, 0x06	; 6
    2260:	8d 91       	ld	r24, X+
    2262:	9c 91       	ld	r25, X
    2264:	17 97       	sbiw	r26, 0x07	; 7
    2266:	9d 8b       	std	Y+21, r25	; 0x15
    2268:	8c 8b       	std	Y+20, r24	; 0x14
    226a:	16 96       	adiw	r26, 0x06	; 6
    226c:	cd 91       	ld	r28, X+
    226e:	dc 91       	ld	r29, X
    2270:	17 97       	sbiw	r26, 0x07	; 7
    2272:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2276:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    227a:	0e 96       	adiw	r24, 0x0e	; 14
    227c:	9d 83       	std	Y+5, r25	; 0x05
    227e:	8c 83       	std	Y+4, r24	; 0x04
    2280:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2284:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2288:	0e 96       	adiw	r24, 0x0e	; 14
    228a:	17 96       	adiw	r26, 0x07	; 7
    228c:	9c 93       	st	X, r25
    228e:	8e 93       	st	-X, r24
    2290:	16 97       	sbiw	r26, 0x06	; 6
    2292:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2296:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    229a:	59 96       	adiw	r26, 0x19	; 25
    229c:	fc 93       	st	X, r31
    229e:	ee 93       	st	-X, r30
    22a0:	58 97       	sbiw	r26, 0x18	; 24
    22a2:	80 81       	ld	r24, Z
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	80 83       	st	Z, r24
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	c9 01       	movw	r24, r18
    22ac:	b8 01       	movw	r22, r16
    22ae:	7d db       	rcall	.-2310   	; 0x19aa <prvAddCurrentTaskToDelayedList>
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <vTaskPlaceOnEventListRestricted>:
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	fc 01       	movw	r30, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	ba 01       	movw	r22, r20
    22c4:	a1 81       	ldd	r26, Z+1	; 0x01
    22c6:	b2 81       	ldd	r27, Z+2	; 0x02
    22c8:	c0 91 cd 15 	lds	r28, 0x15CD	; 0x8015cd <pxCurrentTCB>
    22cc:	d0 91 ce 15 	lds	r29, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    22d0:	bb 8b       	std	Y+19, r27	; 0x13
    22d2:	aa 8b       	std	Y+18, r26	; 0x12
    22d4:	c0 91 cd 15 	lds	r28, 0x15CD	; 0x8015cd <pxCurrentTCB>
    22d8:	d0 91 ce 15 	lds	r29, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    22dc:	16 96       	adiw	r26, 0x06	; 6
    22de:	4d 91       	ld	r20, X+
    22e0:	5c 91       	ld	r21, X
    22e2:	17 97       	sbiw	r26, 0x07	; 7
    22e4:	5d 8b       	std	Y+21, r21	; 0x15
    22e6:	4c 8b       	std	Y+20, r20	; 0x14
    22e8:	16 96       	adiw	r26, 0x06	; 6
    22ea:	cd 91       	ld	r28, X+
    22ec:	dc 91       	ld	r29, X
    22ee:	17 97       	sbiw	r26, 0x07	; 7
    22f0:	40 91 cd 15 	lds	r20, 0x15CD	; 0x8015cd <pxCurrentTCB>
    22f4:	50 91 ce 15 	lds	r21, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    22f8:	42 5f       	subi	r20, 0xF2	; 242
    22fa:	5f 4f       	sbci	r21, 0xFF	; 255
    22fc:	5d 83       	std	Y+5, r21	; 0x05
    22fe:	4c 83       	std	Y+4, r20	; 0x04
    2300:	40 91 cd 15 	lds	r20, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2304:	50 91 ce 15 	lds	r21, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2308:	42 5f       	subi	r20, 0xF2	; 242
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	17 96       	adiw	r26, 0x07	; 7
    230e:	5c 93       	st	X, r21
    2310:	4e 93       	st	-X, r20
    2312:	16 97       	sbiw	r26, 0x06	; 6
    2314:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2318:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    231c:	59 96       	adiw	r26, 0x19	; 25
    231e:	fc 93       	st	X, r31
    2320:	ee 93       	st	-X, r30
    2322:	58 97       	sbiw	r26, 0x18	; 24
    2324:	30 81       	ld	r19, Z
    2326:	3f 5f       	subi	r19, 0xFF	; 255
    2328:	30 83       	st	Z, r19
    232a:	22 23       	and	r18, r18
    232c:	19 f0       	breq	.+6      	; 0x2334 <vTaskPlaceOnEventListRestricted+0x7a>
    232e:	6f ef       	ldi	r22, 0xFF	; 255
    2330:	7f ef       	ldi	r23, 0xFF	; 255
    2332:	cb 01       	movw	r24, r22
    2334:	42 2f       	mov	r20, r18
    2336:	39 db       	rcall	.-2446   	; 0x19aa <prvAddCurrentTaskToDelayedList>
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <xTaskRemoveFromEventList>:
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	dc 01       	movw	r26, r24
    2344:	17 96       	adiw	r26, 0x07	; 7
    2346:	ed 91       	ld	r30, X+
    2348:	fc 91       	ld	r31, X
    234a:	18 97       	sbiw	r26, 0x08	; 8
    234c:	00 84       	ldd	r0, Z+8	; 0x08
    234e:	f1 85       	ldd	r31, Z+9	; 0x09
    2350:	e0 2d       	mov	r30, r0
    2352:	a0 8d       	ldd	r26, Z+24	; 0x18
    2354:	b1 8d       	ldd	r27, Z+25	; 0x19
    2356:	c2 89       	ldd	r28, Z+18	; 0x12
    2358:	d3 89       	ldd	r29, Z+19	; 0x13
    235a:	84 89       	ldd	r24, Z+20	; 0x14
    235c:	95 89       	ldd	r25, Z+21	; 0x15
    235e:	9f 83       	std	Y+7, r25	; 0x07
    2360:	8e 83       	std	Y+6, r24	; 0x06
    2362:	c4 89       	ldd	r28, Z+20	; 0x14
    2364:	d5 89       	ldd	r29, Z+21	; 0x15
    2366:	82 89       	ldd	r24, Z+18	; 0x12
    2368:	93 89       	ldd	r25, Z+19	; 0x13
    236a:	9d 83       	std	Y+5, r25	; 0x05
    236c:	8c 83       	std	Y+4, r24	; 0x04
    236e:	11 96       	adiw	r26, 0x01	; 1
    2370:	8d 91       	ld	r24, X+
    2372:	9c 91       	ld	r25, X
    2374:	12 97       	sbiw	r26, 0x02	; 2
    2376:	9f 01       	movw	r18, r30
    2378:	22 5f       	subi	r18, 0xF2	; 242
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	82 17       	cp	r24, r18
    237e:	93 07       	cpc	r25, r19
    2380:	31 f4       	brne	.+12     	; 0x238e <xTaskRemoveFromEventList+0x50>
    2382:	84 89       	ldd	r24, Z+20	; 0x14
    2384:	95 89       	ldd	r25, Z+21	; 0x15
    2386:	12 96       	adiw	r26, 0x02	; 2
    2388:	9c 93       	st	X, r25
    238a:	8e 93       	st	-X, r24
    238c:	11 97       	sbiw	r26, 0x01	; 1
    238e:	11 8e       	std	Z+25, r1	; 0x19
    2390:	10 8e       	std	Z+24, r1	; 0x18
    2392:	8c 91       	ld	r24, X
    2394:	81 50       	subi	r24, 0x01	; 1
    2396:	8c 93       	st	X, r24
    2398:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    239c:	81 11       	cpse	r24, r1
    239e:	52 c0       	rjmp	.+164    	; 0x2444 <xTaskRemoveFromEventList+0x106>
    23a0:	a4 85       	ldd	r26, Z+12	; 0x0c
    23a2:	b5 85       	ldd	r27, Z+13	; 0x0d
    23a4:	c6 81       	ldd	r28, Z+6	; 0x06
    23a6:	d7 81       	ldd	r29, Z+7	; 0x07
    23a8:	80 85       	ldd	r24, Z+8	; 0x08
    23aa:	91 85       	ldd	r25, Z+9	; 0x09
    23ac:	9f 83       	std	Y+7, r25	; 0x07
    23ae:	8e 83       	std	Y+6, r24	; 0x06
    23b0:	c0 85       	ldd	r28, Z+8	; 0x08
    23b2:	d1 85       	ldd	r29, Z+9	; 0x09
    23b4:	86 81       	ldd	r24, Z+6	; 0x06
    23b6:	97 81       	ldd	r25, Z+7	; 0x07
    23b8:	9d 83       	std	Y+5, r25	; 0x05
    23ba:	8c 83       	std	Y+4, r24	; 0x04
    23bc:	11 96       	adiw	r26, 0x01	; 1
    23be:	8d 91       	ld	r24, X+
    23c0:	9c 91       	ld	r25, X
    23c2:	12 97       	sbiw	r26, 0x02	; 2
    23c4:	9f 01       	movw	r18, r30
    23c6:	2e 5f       	subi	r18, 0xFE	; 254
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	82 17       	cp	r24, r18
    23cc:	93 07       	cpc	r25, r19
    23ce:	31 f4       	brne	.+12     	; 0x23dc <xTaskRemoveFromEventList+0x9e>
    23d0:	80 85       	ldd	r24, Z+8	; 0x08
    23d2:	91 85       	ldd	r25, Z+9	; 0x09
    23d4:	12 96       	adiw	r26, 0x02	; 2
    23d6:	9c 93       	st	X, r25
    23d8:	8e 93       	st	-X, r24
    23da:	11 97       	sbiw	r26, 0x01	; 1
    23dc:	15 86       	std	Z+13, r1	; 0x0d
    23de:	14 86       	std	Z+12, r1	; 0x0c
    23e0:	8c 91       	ld	r24, X
    23e2:	81 50       	subi	r24, 0x01	; 1
    23e4:	8c 93       	st	X, r24
    23e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23e8:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    23ec:	8a 17       	cp	r24, r26
    23ee:	10 f4       	brcc	.+4      	; 0x23f4 <xTaskRemoveFromEventList+0xb6>
    23f0:	a0 93 1d 15 	sts	0x151D, r26	; 0x80151d <uxTopReadyPriority>
    23f4:	8b e0       	ldi	r24, 0x0B	; 11
    23f6:	8a 9f       	mul	r24, r26
    23f8:	d0 01       	movw	r26, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	a1 5a       	subi	r26, 0xA1	; 161
    23fe:	ba 4e       	sbci	r27, 0xEA	; 234
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	0d 90       	ld	r0, X+
    2404:	bc 91       	ld	r27, X
    2406:	a0 2d       	mov	r26, r0
    2408:	b7 83       	std	Z+7, r27	; 0x07
    240a:	a6 83       	std	Z+6, r26	; 0x06
    240c:	16 96       	adiw	r26, 0x06	; 6
    240e:	4d 91       	ld	r20, X+
    2410:	5c 91       	ld	r21, X
    2412:	17 97       	sbiw	r26, 0x07	; 7
    2414:	51 87       	std	Z+9, r21	; 0x09
    2416:	40 87       	std	Z+8, r20	; 0x08
    2418:	16 96       	adiw	r26, 0x06	; 6
    241a:	cd 91       	ld	r28, X+
    241c:	dc 91       	ld	r29, X
    241e:	17 97       	sbiw	r26, 0x07	; 7
    2420:	3d 83       	std	Y+5, r19	; 0x05
    2422:	2c 83       	std	Y+4, r18	; 0x04
    2424:	17 96       	adiw	r26, 0x07	; 7
    2426:	3c 93       	st	X, r19
    2428:	2e 93       	st	-X, r18
    242a:	16 97       	sbiw	r26, 0x06	; 6
    242c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    242e:	8a 9f       	mul	r24, r26
    2430:	d0 01       	movw	r26, r0
    2432:	11 24       	eor	r1, r1
    2434:	a1 5a       	subi	r26, 0xA1	; 161
    2436:	ba 4e       	sbci	r27, 0xEA	; 234
    2438:	b5 87       	std	Z+13, r27	; 0x0d
    243a:	a4 87       	std	Z+12, r26	; 0x0c
    243c:	8c 91       	ld	r24, X
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8c 93       	st	X, r24
    2442:	1c c0       	rjmp	.+56     	; 0x247c <xTaskRemoveFromEventList+0x13e>
    2444:	4a e3       	ldi	r20, 0x3A	; 58
    2446:	55 e1       	ldi	r21, 0x15	; 21
    2448:	da 01       	movw	r26, r20
    244a:	11 96       	adiw	r26, 0x01	; 1
    244c:	cd 91       	ld	r28, X+
    244e:	dc 91       	ld	r29, X
    2450:	12 97       	sbiw	r26, 0x02	; 2
    2452:	d3 8b       	std	Z+19, r29	; 0x13
    2454:	c2 8b       	std	Z+18, r28	; 0x12
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	9f 81       	ldd	r25, Y+7	; 0x07
    245a:	95 8b       	std	Z+21, r25	; 0x15
    245c:	84 8b       	std	Z+20, r24	; 0x14
    245e:	8e 81       	ldd	r24, Y+6	; 0x06
    2460:	9f 81       	ldd	r25, Y+7	; 0x07
    2462:	dc 01       	movw	r26, r24
    2464:	15 96       	adiw	r26, 0x05	; 5
    2466:	3c 93       	st	X, r19
    2468:	2e 93       	st	-X, r18
    246a:	14 97       	sbiw	r26, 0x04	; 4
    246c:	3f 83       	std	Y+7, r19	; 0x07
    246e:	2e 83       	std	Y+6, r18	; 0x06
    2470:	51 8f       	std	Z+25, r21	; 0x19
    2472:	40 8f       	std	Z+24, r20	; 0x18
    2474:	da 01       	movw	r26, r20
    2476:	8c 91       	ld	r24, X
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	8c 93       	st	X, r24
    247c:	92 8d       	ldd	r25, Z+26	; 0x1a
    247e:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2482:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2486:	82 8d       	ldd	r24, Z+26	; 0x1a
    2488:	89 17       	cp	r24, r25
    248a:	20 f4       	brcc	.+8      	; 0x2494 <xTaskRemoveFromEventList+0x156>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <xYieldPending>
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <xTaskRemoveFromEventList+0x158>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	08 95       	ret

0000249c <vTaskRemoveFromUnorderedEventList>:
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	dc 01       	movw	r26, r24
    24a2:	70 68       	ori	r23, 0x80	; 128
    24a4:	4d 93       	st	X+, r20
    24a6:	5d 93       	st	X+, r21
    24a8:	6d 93       	st	X+, r22
    24aa:	7c 93       	st	X, r23
    24ac:	13 97       	sbiw	r26, 0x03	; 3
    24ae:	18 96       	adiw	r26, 0x08	; 8
    24b0:	ed 91       	ld	r30, X+
    24b2:	fc 91       	ld	r31, X
    24b4:	19 97       	sbiw	r26, 0x09	; 9
    24b6:	1a 96       	adiw	r26, 0x0a	; 10
    24b8:	4d 91       	ld	r20, X+
    24ba:	5c 91       	ld	r21, X
    24bc:	1b 97       	sbiw	r26, 0x0b	; 11
    24be:	14 96       	adiw	r26, 0x04	; 4
    24c0:	8d 91       	ld	r24, X+
    24c2:	9c 91       	ld	r25, X
    24c4:	15 97       	sbiw	r26, 0x05	; 5
    24c6:	16 96       	adiw	r26, 0x06	; 6
    24c8:	2d 91       	ld	r18, X+
    24ca:	3c 91       	ld	r19, X
    24cc:	17 97       	sbiw	r26, 0x07	; 7
    24ce:	ec 01       	movw	r28, r24
    24d0:	3f 83       	std	Y+7, r19	; 0x07
    24d2:	2e 83       	std	Y+6, r18	; 0x06
    24d4:	16 96       	adiw	r26, 0x06	; 6
    24d6:	8d 91       	ld	r24, X+
    24d8:	9c 91       	ld	r25, X
    24da:	17 97       	sbiw	r26, 0x07	; 7
    24dc:	14 96       	adiw	r26, 0x04	; 4
    24de:	2d 91       	ld	r18, X+
    24e0:	3c 91       	ld	r19, X
    24e2:	15 97       	sbiw	r26, 0x05	; 5
    24e4:	ec 01       	movw	r28, r24
    24e6:	3d 83       	std	Y+5, r19	; 0x05
    24e8:	2c 83       	std	Y+4, r18	; 0x04
    24ea:	ea 01       	movw	r28, r20
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	a8 17       	cp	r26, r24
    24f2:	b9 07       	cpc	r27, r25
    24f4:	31 f4       	brne	.+12     	; 0x2502 <vTaskRemoveFromUnorderedEventList+0x66>
    24f6:	16 96       	adiw	r26, 0x06	; 6
    24f8:	8d 91       	ld	r24, X+
    24fa:	9c 91       	ld	r25, X
    24fc:	17 97       	sbiw	r26, 0x07	; 7
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	1b 96       	adiw	r26, 0x0b	; 11
    2504:	1c 92       	st	X, r1
    2506:	1e 92       	st	-X, r1
    2508:	1a 97       	sbiw	r26, 0x0a	; 10
    250a:	da 01       	movw	r26, r20
    250c:	8c 91       	ld	r24, X
    250e:	81 50       	subi	r24, 0x01	; 1
    2510:	8c 93       	st	X, r24
    2512:	a4 85       	ldd	r26, Z+12	; 0x0c
    2514:	b5 85       	ldd	r27, Z+13	; 0x0d
    2516:	c6 81       	ldd	r28, Z+6	; 0x06
    2518:	d7 81       	ldd	r29, Z+7	; 0x07
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	9f 83       	std	Y+7, r25	; 0x07
    2520:	8e 83       	std	Y+6, r24	; 0x06
    2522:	c0 85       	ldd	r28, Z+8	; 0x08
    2524:	d1 85       	ldd	r29, Z+9	; 0x09
    2526:	86 81       	ldd	r24, Z+6	; 0x06
    2528:	97 81       	ldd	r25, Z+7	; 0x07
    252a:	9d 83       	std	Y+5, r25	; 0x05
    252c:	8c 83       	std	Y+4, r24	; 0x04
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8d 91       	ld	r24, X+
    2532:	9c 91       	ld	r25, X
    2534:	12 97       	sbiw	r26, 0x02	; 2
    2536:	9f 01       	movw	r18, r30
    2538:	2e 5f       	subi	r18, 0xFE	; 254
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	31 f4       	brne	.+12     	; 0x254e <vTaskRemoveFromUnorderedEventList+0xb2>
    2542:	80 85       	ldd	r24, Z+8	; 0x08
    2544:	91 85       	ldd	r25, Z+9	; 0x09
    2546:	12 96       	adiw	r26, 0x02	; 2
    2548:	9c 93       	st	X, r25
    254a:	8e 93       	st	-X, r24
    254c:	11 97       	sbiw	r26, 0x01	; 1
    254e:	15 86       	std	Z+13, r1	; 0x0d
    2550:	14 86       	std	Z+12, r1	; 0x0c
    2552:	8c 91       	ld	r24, X
    2554:	81 50       	subi	r24, 0x01	; 1
    2556:	8c 93       	st	X, r24
    2558:	a2 8d       	ldd	r26, Z+26	; 0x1a
    255a:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    255e:	8a 17       	cp	r24, r26
    2560:	10 f4       	brcc	.+4      	; 0x2566 <vTaskRemoveFromUnorderedEventList+0xca>
    2562:	a0 93 1d 15 	sts	0x151D, r26	; 0x80151d <uxTopReadyPriority>
    2566:	8b e0       	ldi	r24, 0x0B	; 11
    2568:	8a 9f       	mul	r24, r26
    256a:	d0 01       	movw	r26, r0
    256c:	11 24       	eor	r1, r1
    256e:	a1 5a       	subi	r26, 0xA1	; 161
    2570:	ba 4e       	sbci	r27, 0xEA	; 234
    2572:	11 96       	adiw	r26, 0x01	; 1
    2574:	0d 90       	ld	r0, X+
    2576:	bc 91       	ld	r27, X
    2578:	a0 2d       	mov	r26, r0
    257a:	b7 83       	std	Z+7, r27	; 0x07
    257c:	a6 83       	std	Z+6, r26	; 0x06
    257e:	16 96       	adiw	r26, 0x06	; 6
    2580:	4d 91       	ld	r20, X+
    2582:	5c 91       	ld	r21, X
    2584:	17 97       	sbiw	r26, 0x07	; 7
    2586:	51 87       	std	Z+9, r21	; 0x09
    2588:	40 87       	std	Z+8, r20	; 0x08
    258a:	16 96       	adiw	r26, 0x06	; 6
    258c:	cd 91       	ld	r28, X+
    258e:	dc 91       	ld	r29, X
    2590:	17 97       	sbiw	r26, 0x07	; 7
    2592:	3d 83       	std	Y+5, r19	; 0x05
    2594:	2c 83       	std	Y+4, r18	; 0x04
    2596:	17 96       	adiw	r26, 0x07	; 7
    2598:	3c 93       	st	X, r19
    259a:	2e 93       	st	-X, r18
    259c:	16 97       	sbiw	r26, 0x06	; 6
    259e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25a0:	8a 9f       	mul	r24, r26
    25a2:	d0 01       	movw	r26, r0
    25a4:	11 24       	eor	r1, r1
    25a6:	a1 5a       	subi	r26, 0xA1	; 161
    25a8:	ba 4e       	sbci	r27, 0xEA	; 234
    25aa:	b5 87       	std	Z+13, r27	; 0x0d
    25ac:	a4 87       	std	Z+12, r26	; 0x0c
    25ae:	8c 91       	ld	r24, X
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	8c 93       	st	X, r24
    25b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    25b6:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    25ba:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    25be:	82 8d       	ldd	r24, Z+26	; 0x1a
    25c0:	89 17       	cp	r24, r25
    25c2:	18 f4       	brcc	.+6      	; 0x25ca <vTaskRemoveFromUnorderedEventList+0x12e>
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <xYieldPending>
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	08 95       	ret

000025d0 <vTaskSetTimeOutState>:
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
    25d6:	20 91 16 15 	lds	r18, 0x1516	; 0x801516 <xNumOfOverflows>
    25da:	fc 01       	movw	r30, r24
    25dc:	20 83       	st	Z, r18
    25de:	40 91 1e 15 	lds	r20, 0x151E	; 0x80151e <xTickCount>
    25e2:	50 91 1f 15 	lds	r21, 0x151F	; 0x80151f <xTickCount+0x1>
    25e6:	60 91 20 15 	lds	r22, 0x1520	; 0x801520 <xTickCount+0x2>
    25ea:	70 91 21 15 	lds	r23, 0x1521	; 0x801521 <xTickCount+0x3>
    25ee:	41 83       	std	Z+1, r20	; 0x01
    25f0:	52 83       	std	Z+2, r21	; 0x02
    25f2:	63 83       	std	Z+3, r22	; 0x03
    25f4:	74 83       	std	Z+4, r23	; 0x04
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	08 95       	ret

000025fc <vTaskInternalSetTimeOutState>:
    25fc:	20 91 16 15 	lds	r18, 0x1516	; 0x801516 <xNumOfOverflows>
    2600:	fc 01       	movw	r30, r24
    2602:	20 83       	st	Z, r18
    2604:	40 91 1e 15 	lds	r20, 0x151E	; 0x80151e <xTickCount>
    2608:	50 91 1f 15 	lds	r21, 0x151F	; 0x80151f <xTickCount+0x1>
    260c:	60 91 20 15 	lds	r22, 0x1520	; 0x801520 <xTickCount+0x2>
    2610:	70 91 21 15 	lds	r23, 0x1521	; 0x801521 <xTickCount+0x3>
    2614:	41 83       	std	Z+1, r20	; 0x01
    2616:	52 83       	std	Z+2, r21	; 0x02
    2618:	63 83       	std	Z+3, r22	; 0x03
    261a:	74 83       	std	Z+4, r23	; 0x04
    261c:	08 95       	ret

0000261e <xTaskCheckForTimeOut>:
    261e:	8f 92       	push	r8
    2620:	9f 92       	push	r9
    2622:	af 92       	push	r10
    2624:	bf 92       	push	r11
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	fb 01       	movw	r30, r22
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	0f 92       	push	r0
    263e:	c0 90 1e 15 	lds	r12, 0x151E	; 0x80151e <xTickCount>
    2642:	d0 90 1f 15 	lds	r13, 0x151F	; 0x80151f <xTickCount+0x1>
    2646:	e0 90 20 15 	lds	r14, 0x1520	; 0x801520 <xTickCount+0x2>
    264a:	f0 90 21 15 	lds	r15, 0x1521	; 0x801521 <xTickCount+0x3>
    264e:	dc 01       	movw	r26, r24
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	0d 91       	ld	r16, X+
    2654:	1d 91       	ld	r17, X+
    2656:	2d 91       	ld	r18, X+
    2658:	3c 91       	ld	r19, X
    265a:	14 97       	sbiw	r26, 0x04	; 4
    265c:	46 01       	movw	r8, r12
    265e:	57 01       	movw	r10, r14
    2660:	80 1a       	sub	r8, r16
    2662:	91 0a       	sbc	r9, r17
    2664:	a2 0a       	sbc	r10, r18
    2666:	b3 0a       	sbc	r11, r19
    2668:	40 81       	ld	r20, Z
    266a:	51 81       	ldd	r21, Z+1	; 0x01
    266c:	62 81       	ldd	r22, Z+2	; 0x02
    266e:	73 81       	ldd	r23, Z+3	; 0x03
    2670:	4f 3f       	cpi	r20, 0xFF	; 255
    2672:	bf ef       	ldi	r27, 0xFF	; 255
    2674:	5b 07       	cpc	r21, r27
    2676:	6b 07       	cpc	r22, r27
    2678:	7b 07       	cpc	r23, r27
    267a:	39 f1       	breq	.+78     	; 0x26ca <xTaskCheckForTimeOut+0xac>
    267c:	ec 01       	movw	r28, r24
    267e:	b8 81       	ld	r27, Y
    2680:	a0 91 16 15 	lds	r26, 0x1516	; 0x801516 <xNumOfOverflows>
    2684:	ba 17       	cp	r27, r26
    2686:	59 f0       	breq	.+22     	; 0x269e <xTaskCheckForTimeOut+0x80>
    2688:	c0 16       	cp	r12, r16
    268a:	d1 06       	cpc	r13, r17
    268c:	e2 06       	cpc	r14, r18
    268e:	f3 06       	cpc	r15, r19
    2690:	30 f0       	brcs	.+12     	; 0x269e <xTaskCheckForTimeOut+0x80>
    2692:	10 82       	st	Z, r1
    2694:	11 82       	std	Z+1, r1	; 0x01
    2696:	12 82       	std	Z+2, r1	; 0x02
    2698:	13 82       	std	Z+3, r1	; 0x03
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	17 c0       	rjmp	.+46     	; 0x26cc <xTaskCheckForTimeOut+0xae>
    269e:	84 16       	cp	r8, r20
    26a0:	95 06       	cpc	r9, r21
    26a2:	a6 06       	cpc	r10, r22
    26a4:	b7 06       	cpc	r11, r23
    26a6:	58 f4       	brcc	.+22     	; 0x26be <xTaskCheckForTimeOut+0xa0>
    26a8:	48 19       	sub	r20, r8
    26aa:	59 09       	sbc	r21, r9
    26ac:	6a 09       	sbc	r22, r10
    26ae:	7b 09       	sbc	r23, r11
    26b0:	40 83       	st	Z, r20
    26b2:	51 83       	std	Z+1, r21	; 0x01
    26b4:	62 83       	std	Z+2, r22	; 0x02
    26b6:	73 83       	std	Z+3, r23	; 0x03
    26b8:	a1 df       	rcall	.-190    	; 0x25fc <vTaskInternalSetTimeOutState>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	07 c0       	rjmp	.+14     	; 0x26cc <xTaskCheckForTimeOut+0xae>
    26be:	10 82       	st	Z, r1
    26c0:	11 82       	std	Z+1, r1	; 0x01
    26c2:	12 82       	std	Z+2, r1	; 0x02
    26c4:	13 82       	std	Z+3, r1	; 0x03
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <xTaskCheckForTimeOut+0xae>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	df 90       	pop	r13
    26de:	cf 90       	pop	r12
    26e0:	bf 90       	pop	r11
    26e2:	af 90       	pop	r10
    26e4:	9f 90       	pop	r9
    26e6:	8f 90       	pop	r8
    26e8:	08 95       	ret

000026ea <vTaskMissedYield>:
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <xYieldPending>
    26f0:	08 95       	ret

000026f2 <xTaskGetCurrentTaskHandle>:
    26f2:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    26f6:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    26fa:	08 95       	ret

000026fc <xTaskGetSchedulerState>:
    26fc:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <xSchedulerRunning>
    2700:	88 23       	and	r24, r24
    2702:	31 f0       	breq	.+12     	; 0x2710 <xTaskGetSchedulerState+0x14>
    2704:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <uxSchedulerSuspended>
    2708:	81 11       	cpse	r24, r1
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <xTaskGetSchedulerState+0x18>
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	08 95       	ret
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	08 95       	ret
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	08 95       	ret

00002718 <xTaskPriorityDisinherit>:
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	fc 01       	movw	r30, r24
    2722:	89 2b       	or	r24, r25
    2724:	09 f4       	brne	.+2      	; 0x2728 <xTaskPriorityDisinherit+0x10>
    2726:	49 c0       	rjmp	.+146    	; 0x27ba <xTaskPriorityDisinherit+0xa2>
    2728:	86 a5       	ldd	r24, Z+46	; 0x2e
    272a:	81 50       	subi	r24, 0x01	; 1
    272c:	86 a7       	std	Z+46, r24	; 0x2e
    272e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2730:	95 a5       	ldd	r25, Z+45	; 0x2d
    2732:	29 17       	cp	r18, r25
    2734:	09 f4       	brne	.+2      	; 0x2738 <xTaskPriorityDisinherit+0x20>
    2736:	43 c0       	rjmp	.+134    	; 0x27be <xTaskPriorityDisinherit+0xa6>
    2738:	81 11       	cpse	r24, r1
    273a:	43 c0       	rjmp	.+134    	; 0x27c2 <xTaskPriorityDisinherit+0xaa>
    273c:	ef 01       	movw	r28, r30
    273e:	8f 01       	movw	r16, r30
    2740:	0e 5f       	subi	r16, 0xFE	; 254
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	c8 01       	movw	r24, r16
    2746:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    274a:	ed a5       	ldd	r30, Y+45	; 0x2d
    274c:	ea 8f       	std	Y+26, r30	; 0x1a
    274e:	8a e0       	ldi	r24, 0x0A	; 10
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a0 e0       	ldi	r26, 0x00	; 0
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	8e 1b       	sub	r24, r30
    2758:	91 09       	sbc	r25, r1
    275a:	a1 09       	sbc	r26, r1
    275c:	b1 09       	sbc	r27, r1
    275e:	8e 87       	std	Y+14, r24	; 0x0e
    2760:	9f 87       	std	Y+15, r25	; 0x0f
    2762:	a8 8b       	std	Y+16, r26	; 0x10
    2764:	b9 8b       	std	Y+17, r27	; 0x11
    2766:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    276a:	8e 17       	cp	r24, r30
    276c:	10 f4       	brcc	.+4      	; 0x2772 <xTaskPriorityDisinherit+0x5a>
    276e:	e0 93 1d 15 	sts	0x151D, r30	; 0x80151d <uxTopReadyPriority>
    2772:	8b e0       	ldi	r24, 0x0B	; 11
    2774:	8e 9f       	mul	r24, r30
    2776:	f0 01       	movw	r30, r0
    2778:	11 24       	eor	r1, r1
    277a:	e1 5a       	subi	r30, 0xA1	; 161
    277c:	fa 4e       	sbci	r31, 0xEA	; 234
    277e:	01 80       	ldd	r0, Z+1	; 0x01
    2780:	f2 81       	ldd	r31, Z+2	; 0x02
    2782:	e0 2d       	mov	r30, r0
    2784:	ff 83       	std	Y+7, r31	; 0x07
    2786:	ee 83       	std	Y+6, r30	; 0x06
    2788:	26 81       	ldd	r18, Z+6	; 0x06
    278a:	37 81       	ldd	r19, Z+7	; 0x07
    278c:	39 87       	std	Y+9, r19	; 0x09
    278e:	28 87       	std	Y+8, r18	; 0x08
    2790:	a6 81       	ldd	r26, Z+6	; 0x06
    2792:	b7 81       	ldd	r27, Z+7	; 0x07
    2794:	15 96       	adiw	r26, 0x05	; 5
    2796:	1c 93       	st	X, r17
    2798:	0e 93       	st	-X, r16
    279a:	14 97       	sbiw	r26, 0x04	; 4
    279c:	17 83       	std	Z+7, r17	; 0x07
    279e:	06 83       	std	Z+6, r16	; 0x06
    27a0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27a2:	8e 9f       	mul	r24, r30
    27a4:	f0 01       	movw	r30, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	e1 5a       	subi	r30, 0xA1	; 161
    27aa:	fa 4e       	sbci	r31, 0xEA	; 234
    27ac:	fd 87       	std	Y+13, r31	; 0x0d
    27ae:	ec 87       	std	Y+12, r30	; 0x0c
    27b0:	80 81       	ld	r24, Z
    27b2:	8f 5f       	subi	r24, 0xFF	; 255
    27b4:	80 83       	st	Z, r24
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <xTaskPriorityDisinherit+0xac>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <xTaskPriorityDisinherit+0xac>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <xTaskPriorityDisinherit+0xac>
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	08 95       	ret

000027ce <uxTaskResetEventItemValue>:
    27ce:	cf 92       	push	r12
    27d0:	df 92       	push	r13
    27d2:	ef 92       	push	r14
    27d4:	ff 92       	push	r15
    27d6:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    27da:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    27de:	66 85       	ldd	r22, Z+14	; 0x0e
    27e0:	77 85       	ldd	r23, Z+15	; 0x0f
    27e2:	80 89       	ldd	r24, Z+16	; 0x10
    27e4:	91 89       	ldd	r25, Z+17	; 0x11
    27e6:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    27ea:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    27ee:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <pxCurrentTCB>
    27f2:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    27f6:	5a 96       	adiw	r26, 0x1a	; 26
    27f8:	2c 91       	ld	r18, X
    27fa:	0f 2e       	mov	r0, r31
    27fc:	fa e0       	ldi	r31, 0x0A	; 10
    27fe:	cf 2e       	mov	r12, r31
    2800:	d1 2c       	mov	r13, r1
    2802:	e1 2c       	mov	r14, r1
    2804:	f1 2c       	mov	r15, r1
    2806:	f0 2d       	mov	r31, r0
    2808:	c2 1a       	sub	r12, r18
    280a:	d1 08       	sbc	r13, r1
    280c:	e1 08       	sbc	r14, r1
    280e:	f1 08       	sbc	r15, r1
    2810:	c6 86       	std	Z+14, r12	; 0x0e
    2812:	d7 86       	std	Z+15, r13	; 0x0f
    2814:	e0 8a       	std	Z+16, r14	; 0x10
    2816:	f1 8a       	std	Z+17, r15	; 0x11
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	08 95       	ret

00002822 <xTaskGenericNotifyWait>:
    2822:	4f 92       	push	r4
    2824:	5f 92       	push	r5
    2826:	6f 92       	push	r6
    2828:	7f 92       	push	r7
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	28 01       	movw	r4, r16
    2840:	39 01       	movw	r6, r18
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	0f 92       	push	r0
    2848:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    284c:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2850:	c8 2f       	mov	r28, r24
    2852:	d0 e0       	ldi	r29, 0x00	; 0
    2854:	ec 0f       	add	r30, r28
    2856:	fd 1f       	adc	r31, r29
    2858:	83 a9       	ldd	r24, Z+51	; 0x33
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	71 f1       	breq	.+92     	; 0x28ba <xTaskGenericNotifyWait+0x98>
    285e:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2862:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2866:	ce 01       	movw	r24, r28
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	e8 0f       	add	r30, r24
    2872:	f9 1f       	adc	r31, r25
    2874:	87 a5       	ldd	r24, Z+47	; 0x2f
    2876:	90 a9       	ldd	r25, Z+48	; 0x30
    2878:	a1 a9       	ldd	r26, Z+49	; 0x31
    287a:	b2 a9       	ldd	r27, Z+50	; 0x32
    287c:	40 95       	com	r20
    287e:	50 95       	com	r21
    2880:	60 95       	com	r22
    2882:	70 95       	com	r23
    2884:	48 23       	and	r20, r24
    2886:	59 23       	and	r21, r25
    2888:	6a 23       	and	r22, r26
    288a:	7b 23       	and	r23, r27
    288c:	47 a7       	std	Z+47, r20	; 0x2f
    288e:	50 ab       	std	Z+48, r21	; 0x30
    2890:	61 ab       	std	Z+49, r22	; 0x31
    2892:	72 ab       	std	Z+50, r23	; 0x32
    2894:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2898:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    289c:	ec 0f       	add	r30, r28
    289e:	fd 1f       	adc	r31, r29
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	83 ab       	std	Z+51, r24	; 0x33
    28a4:	a1 14       	cp	r10, r1
    28a6:	b1 04       	cpc	r11, r1
    28a8:	c1 04       	cpc	r12, r1
    28aa:	d1 04       	cpc	r13, r1
    28ac:	31 f0       	breq	.+12     	; 0x28ba <xTaskGenericNotifyWait+0x98>
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	c6 01       	movw	r24, r12
    28b2:	b5 01       	movw	r22, r10
    28b4:	7a d8       	rcall	.-3852   	; 0x19aa <prvAddCurrentTaskToDelayedList>
    28b6:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    28ba:	0f 90       	pop	r0
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	0f 92       	push	r0
    28c4:	e1 14       	cp	r14, r1
    28c6:	f1 04       	cpc	r15, r1
    28c8:	a1 f0       	breq	.+40     	; 0x28f2 <xTaskGenericNotifyWait+0xd0>
    28ca:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    28ce:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    28d2:	ce 01       	movw	r24, r28
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	e8 0f       	add	r30, r24
    28de:	f9 1f       	adc	r31, r25
    28e0:	87 a5       	ldd	r24, Z+47	; 0x2f
    28e2:	90 a9       	ldd	r25, Z+48	; 0x30
    28e4:	a1 a9       	ldd	r26, Z+49	; 0x31
    28e6:	b2 a9       	ldd	r27, Z+50	; 0x32
    28e8:	f7 01       	movw	r30, r14
    28ea:	80 83       	st	Z, r24
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	a2 83       	std	Z+2, r26	; 0x02
    28f0:	b3 83       	std	Z+3, r27	; 0x03
    28f2:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    28f6:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    28fa:	ec 0f       	add	r30, r28
    28fc:	fd 1f       	adc	r31, r29
    28fe:	83 a9       	ldd	r24, Z+51	; 0x33
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	e9 f4       	brne	.+58     	; 0x293e <xTaskGenericNotifyWait+0x11c>
    2904:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2908:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    290c:	ce 01       	movw	r24, r28
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	e8 0f       	add	r30, r24
    2918:	f9 1f       	adc	r31, r25
    291a:	87 a5       	ldd	r24, Z+47	; 0x2f
    291c:	90 a9       	ldd	r25, Z+48	; 0x30
    291e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2920:	b2 a9       	ldd	r27, Z+50	; 0x32
    2922:	40 94       	com	r4
    2924:	50 94       	com	r5
    2926:	60 94       	com	r6
    2928:	70 94       	com	r7
    292a:	48 22       	and	r4, r24
    292c:	59 22       	and	r5, r25
    292e:	6a 22       	and	r6, r26
    2930:	7b 22       	and	r7, r27
    2932:	47 a6       	std	Z+47, r4	; 0x2f
    2934:	50 aa       	std	Z+48, r5	; 0x30
    2936:	61 aa       	std	Z+49, r6	; 0x31
    2938:	72 aa       	std	Z+50, r7	; 0x32
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <xTaskGenericNotifyWait+0x11e>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	20 91 cd 15 	lds	r18, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2944:	30 91 ce 15 	lds	r19, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2948:	c2 0f       	add	r28, r18
    294a:	d3 1f       	adc	r29, r19
    294c:	1b aa       	std	Y+51, r1	; 0x33
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	bf 90       	pop	r11
    2964:	af 90       	pop	r10
    2966:	7f 90       	pop	r7
    2968:	6f 90       	pop	r6
    296a:	5f 90       	pop	r5
    296c:	4f 90       	pop	r4
    296e:	08 95       	ret

00002970 <xTaskGenericNotify>:
    2970:	8f 92       	push	r8
    2972:	9f 92       	push	r9
    2974:	af 92       	push	r10
    2976:	bf 92       	push	r11
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	dc 01       	movw	r26, r24
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	0f 92       	push	r0
    298a:	e1 14       	cp	r14, r1
    298c:	f1 04       	cpc	r15, r1
    298e:	89 f0       	breq	.+34     	; 0x29b2 <xTaskGenericNotify+0x42>
    2990:	e6 2f       	mov	r30, r22
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	ee 0f       	add	r30, r30
    2996:	ff 1f       	adc	r31, r31
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	e8 0f       	add	r30, r24
    299e:	f9 1f       	adc	r31, r25
    29a0:	87 a4       	ldd	r8, Z+47	; 0x2f
    29a2:	90 a8       	ldd	r9, Z+48	; 0x30
    29a4:	a1 a8       	ldd	r10, Z+49	; 0x31
    29a6:	b2 a8       	ldd	r11, Z+50	; 0x32
    29a8:	f7 01       	movw	r30, r14
    29aa:	80 82       	st	Z, r8
    29ac:	91 82       	std	Z+1, r9	; 0x01
    29ae:	a2 82       	std	Z+2, r10	; 0x02
    29b0:	b3 82       	std	Z+3, r11	; 0x03
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	fd 01       	movw	r30, r26
    29b6:	e6 0f       	add	r30, r22
    29b8:	f7 1f       	adc	r31, r23
    29ba:	83 a9       	ldd	r24, Z+51	; 0x33
    29bc:	92 e0       	ldi	r25, 0x02	; 2
    29be:	93 ab       	std	Z+51, r25	; 0x33
    29c0:	02 30       	cpi	r16, 0x02	; 2
    29c2:	01 f1       	breq	.+64     	; 0x2a04 <xTaskGenericNotify+0x94>
    29c4:	18 f4       	brcc	.+6      	; 0x29cc <xTaskGenericNotify+0x5c>
    29c6:	01 30       	cpi	r16, 0x01	; 1
    29c8:	31 f0       	breq	.+12     	; 0x29d6 <xTaskGenericNotify+0x66>
    29ca:	4d c0       	rjmp	.+154    	; 0x2a66 <xTaskGenericNotify+0xf6>
    29cc:	03 30       	cpi	r16, 0x03	; 3
    29ce:	79 f1       	breq	.+94     	; 0x2a2e <xTaskGenericNotify+0xbe>
    29d0:	04 30       	cpi	r16, 0x04	; 4
    29d2:	d1 f1       	breq	.+116    	; 0x2a48 <xTaskGenericNotify+0xd8>
    29d4:	48 c0       	rjmp	.+144    	; 0x2a66 <xTaskGenericNotify+0xf6>
    29d6:	66 0f       	add	r22, r22
    29d8:	77 1f       	adc	r23, r23
    29da:	66 0f       	add	r22, r22
    29dc:	77 1f       	adc	r23, r23
    29de:	fd 01       	movw	r30, r26
    29e0:	e6 0f       	add	r30, r22
    29e2:	f7 1f       	adc	r31, r23
    29e4:	87 a4       	ldd	r8, Z+47	; 0x2f
    29e6:	90 a8       	ldd	r9, Z+48	; 0x30
    29e8:	a1 a8       	ldd	r10, Z+49	; 0x31
    29ea:	b2 a8       	ldd	r11, Z+50	; 0x32
    29ec:	ba 01       	movw	r22, r20
    29ee:	a9 01       	movw	r20, r18
    29f0:	48 29       	or	r20, r8
    29f2:	59 29       	or	r21, r9
    29f4:	6a 29       	or	r22, r10
    29f6:	7b 29       	or	r23, r11
    29f8:	47 a7       	std	Z+47, r20	; 0x2f
    29fa:	50 ab       	std	Z+48, r21	; 0x30
    29fc:	61 ab       	std	Z+49, r22	; 0x31
    29fe:	72 ab       	std	Z+50, r23	; 0x32
    2a00:	01 e0       	ldi	r16, 0x01	; 1
    2a02:	34 c0       	rjmp	.+104    	; 0x2a6c <xTaskGenericNotify+0xfc>
    2a04:	66 0f       	add	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	fd 01       	movw	r30, r26
    2a0e:	e6 0f       	add	r30, r22
    2a10:	f7 1f       	adc	r31, r23
    2a12:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a14:	50 a9       	ldd	r21, Z+48	; 0x30
    2a16:	61 a9       	ldd	r22, Z+49	; 0x31
    2a18:	72 a9       	ldd	r23, Z+50	; 0x32
    2a1a:	4f 5f       	subi	r20, 0xFF	; 255
    2a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1e:	6f 4f       	sbci	r22, 0xFF	; 255
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	47 a7       	std	Z+47, r20	; 0x2f
    2a24:	50 ab       	std	Z+48, r21	; 0x30
    2a26:	61 ab       	std	Z+49, r22	; 0x31
    2a28:	72 ab       	std	Z+50, r23	; 0x32
    2a2a:	01 e0       	ldi	r16, 0x01	; 1
    2a2c:	1f c0       	rjmp	.+62     	; 0x2a6c <xTaskGenericNotify+0xfc>
    2a2e:	66 0f       	add	r22, r22
    2a30:	77 1f       	adc	r23, r23
    2a32:	66 0f       	add	r22, r22
    2a34:	77 1f       	adc	r23, r23
    2a36:	fd 01       	movw	r30, r26
    2a38:	e6 0f       	add	r30, r22
    2a3a:	f7 1f       	adc	r31, r23
    2a3c:	27 a7       	std	Z+47, r18	; 0x2f
    2a3e:	30 ab       	std	Z+48, r19	; 0x30
    2a40:	41 ab       	std	Z+49, r20	; 0x31
    2a42:	52 ab       	std	Z+50, r21	; 0x32
    2a44:	01 e0       	ldi	r16, 0x01	; 1
    2a46:	12 c0       	rjmp	.+36     	; 0x2a6c <xTaskGenericNotify+0xfc>
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	79 f0       	breq	.+30     	; 0x2a6a <xTaskGenericNotify+0xfa>
    2a4c:	66 0f       	add	r22, r22
    2a4e:	77 1f       	adc	r23, r23
    2a50:	66 0f       	add	r22, r22
    2a52:	77 1f       	adc	r23, r23
    2a54:	fd 01       	movw	r30, r26
    2a56:	e6 0f       	add	r30, r22
    2a58:	f7 1f       	adc	r31, r23
    2a5a:	27 a7       	std	Z+47, r18	; 0x2f
    2a5c:	30 ab       	std	Z+48, r19	; 0x30
    2a5e:	41 ab       	std	Z+49, r20	; 0x31
    2a60:	52 ab       	std	Z+50, r21	; 0x32
    2a62:	01 e0       	ldi	r16, 0x01	; 1
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <xTaskGenericNotify+0xfc>
    2a66:	01 e0       	ldi	r16, 0x01	; 1
    2a68:	01 c0       	rjmp	.+2      	; 0x2a6c <xTaskGenericNotify+0xfc>
    2a6a:	00 e0       	ldi	r16, 0x00	; 0
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <xTaskGenericNotify+0x102>
    2a70:	69 c0       	rjmp	.+210    	; 0x2b44 <xTaskGenericNotify+0x1d4>
    2a72:	1c 96       	adiw	r26, 0x0c	; 12
    2a74:	ed 91       	ld	r30, X+
    2a76:	fc 91       	ld	r31, X
    2a78:	1d 97       	sbiw	r26, 0x0d	; 13
    2a7a:	16 96       	adiw	r26, 0x06	; 6
    2a7c:	cd 91       	ld	r28, X+
    2a7e:	dc 91       	ld	r29, X
    2a80:	17 97       	sbiw	r26, 0x07	; 7
    2a82:	18 96       	adiw	r26, 0x08	; 8
    2a84:	8d 91       	ld	r24, X+
    2a86:	9c 91       	ld	r25, X
    2a88:	19 97       	sbiw	r26, 0x09	; 9
    2a8a:	9f 83       	std	Y+7, r25	; 0x07
    2a8c:	8e 83       	std	Y+6, r24	; 0x06
    2a8e:	18 96       	adiw	r26, 0x08	; 8
    2a90:	cd 91       	ld	r28, X+
    2a92:	dc 91       	ld	r29, X
    2a94:	19 97       	sbiw	r26, 0x09	; 9
    2a96:	16 96       	adiw	r26, 0x06	; 6
    2a98:	8d 91       	ld	r24, X+
    2a9a:	9c 91       	ld	r25, X
    2a9c:	17 97       	sbiw	r26, 0x07	; 7
    2a9e:	9d 83       	std	Y+5, r25	; 0x05
    2aa0:	8c 83       	std	Y+4, r24	; 0x04
    2aa2:	81 81       	ldd	r24, Z+1	; 0x01
    2aa4:	92 81       	ldd	r25, Z+2	; 0x02
    2aa6:	9d 01       	movw	r18, r26
    2aa8:	2e 5f       	subi	r18, 0xFE	; 254
    2aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2aac:	82 17       	cp	r24, r18
    2aae:	93 07       	cpc	r25, r19
    2ab0:	31 f4       	brne	.+12     	; 0x2abe <xTaskGenericNotify+0x14e>
    2ab2:	18 96       	adiw	r26, 0x08	; 8
    2ab4:	8d 91       	ld	r24, X+
    2ab6:	9c 91       	ld	r25, X
    2ab8:	19 97       	sbiw	r26, 0x09	; 9
    2aba:	92 83       	std	Z+2, r25	; 0x02
    2abc:	81 83       	std	Z+1, r24	; 0x01
    2abe:	1d 96       	adiw	r26, 0x0d	; 13
    2ac0:	1c 92       	st	X, r1
    2ac2:	1e 92       	st	-X, r1
    2ac4:	1c 97       	sbiw	r26, 0x0c	; 12
    2ac6:	80 81       	ld	r24, Z
    2ac8:	81 50       	subi	r24, 0x01	; 1
    2aca:	80 83       	st	Z, r24
    2acc:	5a 96       	adiw	r26, 0x1a	; 26
    2ace:	ec 91       	ld	r30, X
    2ad0:	5a 97       	sbiw	r26, 0x1a	; 26
    2ad2:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <uxTopReadyPriority>
    2ad6:	8e 17       	cp	r24, r30
    2ad8:	10 f4       	brcc	.+4      	; 0x2ade <xTaskGenericNotify+0x16e>
    2ada:	e0 93 1d 15 	sts	0x151D, r30	; 0x80151d <uxTopReadyPriority>
    2ade:	8b e0       	ldi	r24, 0x0B	; 11
    2ae0:	8e 9f       	mul	r24, r30
    2ae2:	f0 01       	movw	r30, r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	e1 5a       	subi	r30, 0xA1	; 161
    2ae8:	fa 4e       	sbci	r31, 0xEA	; 234
    2aea:	01 80       	ldd	r0, Z+1	; 0x01
    2aec:	f2 81       	ldd	r31, Z+2	; 0x02
    2aee:	e0 2d       	mov	r30, r0
    2af0:	17 96       	adiw	r26, 0x07	; 7
    2af2:	fc 93       	st	X, r31
    2af4:	ee 93       	st	-X, r30
    2af6:	16 97       	sbiw	r26, 0x06	; 6
    2af8:	46 81       	ldd	r20, Z+6	; 0x06
    2afa:	57 81       	ldd	r21, Z+7	; 0x07
    2afc:	19 96       	adiw	r26, 0x09	; 9
    2afe:	5c 93       	st	X, r21
    2b00:	4e 93       	st	-X, r20
    2b02:	18 97       	sbiw	r26, 0x08	; 8
    2b04:	c6 81       	ldd	r28, Z+6	; 0x06
    2b06:	d7 81       	ldd	r29, Z+7	; 0x07
    2b08:	3d 83       	std	Y+5, r19	; 0x05
    2b0a:	2c 83       	std	Y+4, r18	; 0x04
    2b0c:	37 83       	std	Z+7, r19	; 0x07
    2b0e:	26 83       	std	Z+6, r18	; 0x06
    2b10:	5a 96       	adiw	r26, 0x1a	; 26
    2b12:	ec 91       	ld	r30, X
    2b14:	5a 97       	sbiw	r26, 0x1a	; 26
    2b16:	8e 9f       	mul	r24, r30
    2b18:	f0 01       	movw	r30, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	e1 5a       	subi	r30, 0xA1	; 161
    2b1e:	fa 4e       	sbci	r31, 0xEA	; 234
    2b20:	1d 96       	adiw	r26, 0x0d	; 13
    2b22:	fc 93       	st	X, r31
    2b24:	ee 93       	st	-X, r30
    2b26:	1c 97       	sbiw	r26, 0x0c	; 12
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 5f       	subi	r24, 0xFF	; 255
    2b2c:	80 83       	st	Z, r24
    2b2e:	5a 96       	adiw	r26, 0x1a	; 26
    2b30:	9c 91       	ld	r25, X
    2b32:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2b36:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b3c:	89 17       	cp	r24, r25
    2b3e:	10 f4       	brcc	.+4      	; 0x2b44 <xTaskGenericNotify+0x1d4>
    2b40:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2b44:	0f 90       	pop	r0
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	80 2f       	mov	r24, r16
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	bf 90       	pop	r11
    2b56:	af 90       	pop	r10
    2b58:	9f 90       	pop	r9
    2b5a:	8f 90       	pop	r8
    2b5c:	08 95       	ret

00002b5e <xTaskGenericNotifyFromISR>:
    2b5e:	8f 92       	push	r8
    2b60:	9f 92       	push	r9
    2b62:	af 92       	push	r10
    2b64:	bf 92       	push	r11
    2b66:	cf 92       	push	r12
    2b68:	df 92       	push	r13
    2b6a:	ef 92       	push	r14
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	dc 01       	movw	r26, r24
    2b76:	e1 14       	cp	r14, r1
    2b78:	f1 04       	cpc	r15, r1
    2b7a:	89 f0       	breq	.+34     	; 0x2b9e <xTaskGenericNotifyFromISR+0x40>
    2b7c:	e6 2f       	mov	r30, r22
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	e8 0f       	add	r30, r24
    2b8a:	f9 1f       	adc	r31, r25
    2b8c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b8e:	90 a8       	ldd	r9, Z+48	; 0x30
    2b90:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b92:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b94:	f7 01       	movw	r30, r14
    2b96:	80 82       	st	Z, r8
    2b98:	91 82       	std	Z+1, r9	; 0x01
    2b9a:	a2 82       	std	Z+2, r10	; 0x02
    2b9c:	b3 82       	std	Z+3, r11	; 0x03
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	fd 01       	movw	r30, r26
    2ba2:	e6 0f       	add	r30, r22
    2ba4:	f7 1f       	adc	r31, r23
    2ba6:	93 a9       	ldd	r25, Z+51	; 0x33
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	83 ab       	std	Z+51, r24	; 0x33
    2bac:	02 30       	cpi	r16, 0x02	; 2
    2bae:	01 f1       	breq	.+64     	; 0x2bf0 <xTaskGenericNotifyFromISR+0x92>
    2bb0:	18 f4       	brcc	.+6      	; 0x2bb8 <xTaskGenericNotifyFromISR+0x5a>
    2bb2:	01 30       	cpi	r16, 0x01	; 1
    2bb4:	31 f0       	breq	.+12     	; 0x2bc2 <xTaskGenericNotifyFromISR+0x64>
    2bb6:	4d c0       	rjmp	.+154    	; 0x2c52 <xTaskGenericNotifyFromISR+0xf4>
    2bb8:	03 30       	cpi	r16, 0x03	; 3
    2bba:	79 f1       	breq	.+94     	; 0x2c1a <xTaskGenericNotifyFromISR+0xbc>
    2bbc:	04 30       	cpi	r16, 0x04	; 4
    2bbe:	d1 f1       	breq	.+116    	; 0x2c34 <xTaskGenericNotifyFromISR+0xd6>
    2bc0:	48 c0       	rjmp	.+144    	; 0x2c52 <xTaskGenericNotifyFromISR+0xf4>
    2bc2:	66 0f       	add	r22, r22
    2bc4:	77 1f       	adc	r23, r23
    2bc6:	66 0f       	add	r22, r22
    2bc8:	77 1f       	adc	r23, r23
    2bca:	fd 01       	movw	r30, r26
    2bcc:	e6 0f       	add	r30, r22
    2bce:	f7 1f       	adc	r31, r23
    2bd0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2bd2:	90 a8       	ldd	r9, Z+48	; 0x30
    2bd4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2bd6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2bd8:	ba 01       	movw	r22, r20
    2bda:	a9 01       	movw	r20, r18
    2bdc:	48 29       	or	r20, r8
    2bde:	59 29       	or	r21, r9
    2be0:	6a 29       	or	r22, r10
    2be2:	7b 29       	or	r23, r11
    2be4:	47 a7       	std	Z+47, r20	; 0x2f
    2be6:	50 ab       	std	Z+48, r21	; 0x30
    2be8:	61 ab       	std	Z+49, r22	; 0x31
    2bea:	72 ab       	std	Z+50, r23	; 0x32
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	34 c0       	rjmp	.+104    	; 0x2c58 <xTaskGenericNotifyFromISR+0xfa>
    2bf0:	66 0f       	add	r22, r22
    2bf2:	77 1f       	adc	r23, r23
    2bf4:	66 0f       	add	r22, r22
    2bf6:	77 1f       	adc	r23, r23
    2bf8:	fd 01       	movw	r30, r26
    2bfa:	e6 0f       	add	r30, r22
    2bfc:	f7 1f       	adc	r31, r23
    2bfe:	47 a5       	ldd	r20, Z+47	; 0x2f
    2c00:	50 a9       	ldd	r21, Z+48	; 0x30
    2c02:	61 a9       	ldd	r22, Z+49	; 0x31
    2c04:	72 a9       	ldd	r23, Z+50	; 0x32
    2c06:	4f 5f       	subi	r20, 0xFF	; 255
    2c08:	5f 4f       	sbci	r21, 0xFF	; 255
    2c0a:	6f 4f       	sbci	r22, 0xFF	; 255
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	47 a7       	std	Z+47, r20	; 0x2f
    2c10:	50 ab       	std	Z+48, r21	; 0x30
    2c12:	61 ab       	std	Z+49, r22	; 0x31
    2c14:	72 ab       	std	Z+50, r23	; 0x32
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	1f c0       	rjmp	.+62     	; 0x2c58 <xTaskGenericNotifyFromISR+0xfa>
    2c1a:	66 0f       	add	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	66 0f       	add	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	fd 01       	movw	r30, r26
    2c24:	e6 0f       	add	r30, r22
    2c26:	f7 1f       	adc	r31, r23
    2c28:	27 a7       	std	Z+47, r18	; 0x2f
    2c2a:	30 ab       	std	Z+48, r19	; 0x30
    2c2c:	41 ab       	std	Z+49, r20	; 0x31
    2c2e:	52 ab       	std	Z+50, r21	; 0x32
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	12 c0       	rjmp	.+36     	; 0x2c58 <xTaskGenericNotifyFromISR+0xfa>
    2c34:	92 30       	cpi	r25, 0x02	; 2
    2c36:	79 f0       	breq	.+30     	; 0x2c56 <xTaskGenericNotifyFromISR+0xf8>
    2c38:	66 0f       	add	r22, r22
    2c3a:	77 1f       	adc	r23, r23
    2c3c:	66 0f       	add	r22, r22
    2c3e:	77 1f       	adc	r23, r23
    2c40:	fd 01       	movw	r30, r26
    2c42:	e6 0f       	add	r30, r22
    2c44:	f7 1f       	adc	r31, r23
    2c46:	27 a7       	std	Z+47, r18	; 0x2f
    2c48:	30 ab       	std	Z+48, r19	; 0x30
    2c4a:	41 ab       	std	Z+49, r20	; 0x31
    2c4c:	52 ab       	std	Z+50, r21	; 0x32
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	03 c0       	rjmp	.+6      	; 0x2c58 <xTaskGenericNotifyFromISR+0xfa>
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <xTaskGenericNotifyFromISR+0xfa>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	91 30       	cpi	r25, 0x01	; 1
    2c5a:	09 f0       	breq	.+2      	; 0x2c5e <xTaskGenericNotifyFromISR+0x100>
    2c5c:	96 c0       	rjmp	.+300    	; 0x2d8a <xTaskGenericNotifyFromISR+0x22c>
    2c5e:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <uxSchedulerSuspended>
    2c62:	91 11       	cpse	r25, r1
    2c64:	5f c0       	rjmp	.+190    	; 0x2d24 <xTaskGenericNotifyFromISR+0x1c6>
    2c66:	1c 96       	adiw	r26, 0x0c	; 12
    2c68:	ed 91       	ld	r30, X+
    2c6a:	fc 91       	ld	r31, X
    2c6c:	1d 97       	sbiw	r26, 0x0d	; 13
    2c6e:	16 96       	adiw	r26, 0x06	; 6
    2c70:	cd 91       	ld	r28, X+
    2c72:	dc 91       	ld	r29, X
    2c74:	17 97       	sbiw	r26, 0x07	; 7
    2c76:	18 96       	adiw	r26, 0x08	; 8
    2c78:	2d 91       	ld	r18, X+
    2c7a:	3c 91       	ld	r19, X
    2c7c:	19 97       	sbiw	r26, 0x09	; 9
    2c7e:	3f 83       	std	Y+7, r19	; 0x07
    2c80:	2e 83       	std	Y+6, r18	; 0x06
    2c82:	18 96       	adiw	r26, 0x08	; 8
    2c84:	cd 91       	ld	r28, X+
    2c86:	dc 91       	ld	r29, X
    2c88:	19 97       	sbiw	r26, 0x09	; 9
    2c8a:	16 96       	adiw	r26, 0x06	; 6
    2c8c:	2d 91       	ld	r18, X+
    2c8e:	3c 91       	ld	r19, X
    2c90:	17 97       	sbiw	r26, 0x07	; 7
    2c92:	3d 83       	std	Y+5, r19	; 0x05
    2c94:	2c 83       	std	Y+4, r18	; 0x04
    2c96:	41 81       	ldd	r20, Z+1	; 0x01
    2c98:	52 81       	ldd	r21, Z+2	; 0x02
    2c9a:	9d 01       	movw	r18, r26
    2c9c:	2e 5f       	subi	r18, 0xFE	; 254
    2c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca0:	42 17       	cp	r20, r18
    2ca2:	53 07       	cpc	r21, r19
    2ca4:	31 f4       	brne	.+12     	; 0x2cb2 <xTaskGenericNotifyFromISR+0x154>
    2ca6:	18 96       	adiw	r26, 0x08	; 8
    2ca8:	4d 91       	ld	r20, X+
    2caa:	5c 91       	ld	r21, X
    2cac:	19 97       	sbiw	r26, 0x09	; 9
    2cae:	52 83       	std	Z+2, r21	; 0x02
    2cb0:	41 83       	std	Z+1, r20	; 0x01
    2cb2:	1d 96       	adiw	r26, 0x0d	; 13
    2cb4:	1c 92       	st	X, r1
    2cb6:	1e 92       	st	-X, r1
    2cb8:	1c 97       	sbiw	r26, 0x0c	; 12
    2cba:	90 81       	ld	r25, Z
    2cbc:	91 50       	subi	r25, 0x01	; 1
    2cbe:	90 83       	st	Z, r25
    2cc0:	5a 96       	adiw	r26, 0x1a	; 26
    2cc2:	ec 91       	ld	r30, X
    2cc4:	5a 97       	sbiw	r26, 0x1a	; 26
    2cc6:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <uxTopReadyPriority>
    2cca:	9e 17       	cp	r25, r30
    2ccc:	10 f4       	brcc	.+4      	; 0x2cd2 <xTaskGenericNotifyFromISR+0x174>
    2cce:	e0 93 1d 15 	sts	0x151D, r30	; 0x80151d <uxTopReadyPriority>
    2cd2:	9b e0       	ldi	r25, 0x0B	; 11
    2cd4:	9e 9f       	mul	r25, r30
    2cd6:	f0 01       	movw	r30, r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	e1 5a       	subi	r30, 0xA1	; 161
    2cdc:	fa 4e       	sbci	r31, 0xEA	; 234
    2cde:	01 80       	ldd	r0, Z+1	; 0x01
    2ce0:	f2 81       	ldd	r31, Z+2	; 0x02
    2ce2:	e0 2d       	mov	r30, r0
    2ce4:	17 96       	adiw	r26, 0x07	; 7
    2ce6:	fc 93       	st	X, r31
    2ce8:	ee 93       	st	-X, r30
    2cea:	16 97       	sbiw	r26, 0x06	; 6
    2cec:	46 81       	ldd	r20, Z+6	; 0x06
    2cee:	57 81       	ldd	r21, Z+7	; 0x07
    2cf0:	19 96       	adiw	r26, 0x09	; 9
    2cf2:	5c 93       	st	X, r21
    2cf4:	4e 93       	st	-X, r20
    2cf6:	18 97       	sbiw	r26, 0x08	; 8
    2cf8:	c6 81       	ldd	r28, Z+6	; 0x06
    2cfa:	d7 81       	ldd	r29, Z+7	; 0x07
    2cfc:	3d 83       	std	Y+5, r19	; 0x05
    2cfe:	2c 83       	std	Y+4, r18	; 0x04
    2d00:	37 83       	std	Z+7, r19	; 0x07
    2d02:	26 83       	std	Z+6, r18	; 0x06
    2d04:	5a 96       	adiw	r26, 0x1a	; 26
    2d06:	ec 91       	ld	r30, X
    2d08:	5a 97       	sbiw	r26, 0x1a	; 26
    2d0a:	9e 9f       	mul	r25, r30
    2d0c:	f0 01       	movw	r30, r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	e1 5a       	subi	r30, 0xA1	; 161
    2d12:	fa 4e       	sbci	r31, 0xEA	; 234
    2d14:	1d 96       	adiw	r26, 0x0d	; 13
    2d16:	fc 93       	st	X, r31
    2d18:	ee 93       	st	-X, r30
    2d1a:	1c 97       	sbiw	r26, 0x0c	; 12
    2d1c:	90 81       	ld	r25, Z
    2d1e:	9f 5f       	subi	r25, 0xFF	; 255
    2d20:	90 83       	st	Z, r25
    2d22:	21 c0       	rjmp	.+66     	; 0x2d66 <xTaskGenericNotifyFromISR+0x208>
    2d24:	6a e3       	ldi	r22, 0x3A	; 58
    2d26:	75 e1       	ldi	r23, 0x15	; 21
    2d28:	fb 01       	movw	r30, r22
    2d2a:	c1 81       	ldd	r28, Z+1	; 0x01
    2d2c:	d2 81       	ldd	r29, Z+2	; 0x02
    2d2e:	53 96       	adiw	r26, 0x13	; 19
    2d30:	dc 93       	st	X, r29
    2d32:	ce 93       	st	-X, r28
    2d34:	52 97       	sbiw	r26, 0x12	; 18
    2d36:	2e 81       	ldd	r18, Y+6	; 0x06
    2d38:	3f 81       	ldd	r19, Y+7	; 0x07
    2d3a:	55 96       	adiw	r26, 0x15	; 21
    2d3c:	3c 93       	st	X, r19
    2d3e:	2e 93       	st	-X, r18
    2d40:	54 97       	sbiw	r26, 0x14	; 20
    2d42:	4e 81       	ldd	r20, Y+6	; 0x06
    2d44:	5f 81       	ldd	r21, Y+7	; 0x07
    2d46:	9d 01       	movw	r18, r26
    2d48:	22 5f       	subi	r18, 0xF2	; 242
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	fa 01       	movw	r30, r20
    2d4e:	35 83       	std	Z+5, r19	; 0x05
    2d50:	24 83       	std	Z+4, r18	; 0x04
    2d52:	3f 83       	std	Y+7, r19	; 0x07
    2d54:	2e 83       	std	Y+6, r18	; 0x06
    2d56:	59 96       	adiw	r26, 0x19	; 25
    2d58:	7c 93       	st	X, r23
    2d5a:	6e 93       	st	-X, r22
    2d5c:	58 97       	sbiw	r26, 0x18	; 24
    2d5e:	fb 01       	movw	r30, r22
    2d60:	90 81       	ld	r25, Z
    2d62:	9f 5f       	subi	r25, 0xFF	; 255
    2d64:	90 83       	st	Z, r25
    2d66:	5a 96       	adiw	r26, 0x1a	; 26
    2d68:	2c 91       	ld	r18, X
    2d6a:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2d6e:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>
    2d72:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d74:	92 17       	cp	r25, r18
    2d76:	48 f4       	brcc	.+18     	; 0x2d8a <xTaskGenericNotifyFromISR+0x22c>
    2d78:	c1 14       	cp	r12, r1
    2d7a:	d1 04       	cpc	r13, r1
    2d7c:	19 f0       	breq	.+6      	; 0x2d84 <xTaskGenericNotifyFromISR+0x226>
    2d7e:	91 e0       	ldi	r25, 0x01	; 1
    2d80:	f6 01       	movw	r30, r12
    2d82:	90 83       	st	Z, r25
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	90 93 17 15 	sts	0x1517, r25	; 0x801517 <xYieldPending>
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
    2d98:	bf 90       	pop	r11
    2d9a:	af 90       	pop	r10
    2d9c:	9f 90       	pop	r9
    2d9e:	8f 90       	pop	r8
    2da0:	08 95       	ret

00002da2 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	21 f4       	brne	.+8      	; 0x2dae <xTaskGenericNotifyStateClear+0xc>
    2da6:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxCurrentTCB>
    2daa:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	fc 01       	movw	r30, r24
    2db8:	e6 0f       	add	r30, r22
    2dba:	f7 1f       	adc	r31, r23
    2dbc:	23 a9       	ldd	r18, Z+51	; 0x33
    2dbe:	22 30       	cpi	r18, 0x02	; 2
    2dc0:	31 f4       	brne	.+12     	; 0x2dce <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	e6 0f       	add	r30, r22
    2dc6:	f7 1f       	adc	r31, r23
    2dc8:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2dce:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2dd4:	08 95       	ret

00002dd6 <prvGetNextExpireTime>:
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	e0 91 d9 15 	lds	r30, 0x15D9	; 0x8015d9 <pxCurrentTimerList>
    2ddc:	f0 91 da 15 	lds	r31, 0x15DA	; 0x8015da <pxCurrentTimerList+0x1>
    2de0:	80 81       	ld	r24, Z
    2de2:	91 e0       	ldi	r25, 0x01	; 1
    2de4:	81 11       	cpse	r24, r1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 93       	st	X, r25
    2dea:	91 11       	cpse	r25, r1
    2dec:	08 c0       	rjmp	.+16     	; 0x2dfe <prvGetNextExpireTime+0x28>
    2dee:	07 80       	ldd	r0, Z+7	; 0x07
    2df0:	f0 85       	ldd	r31, Z+8	; 0x08
    2df2:	e0 2d       	mov	r30, r0
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	08 95       	ret
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	70 e0       	ldi	r23, 0x00	; 0
    2e02:	cb 01       	movw	r24, r22
    2e04:	08 95       	ret

00002e06 <prvInsertTimerInActiveList>:
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	fc 01       	movw	r30, r24
    2e14:	42 83       	std	Z+2, r20	; 0x02
    2e16:	53 83       	std	Z+3, r21	; 0x03
    2e18:	64 83       	std	Z+4, r22	; 0x04
    2e1a:	75 83       	std	Z+5, r23	; 0x05
    2e1c:	93 87       	std	Z+11, r25	; 0x0b
    2e1e:	82 87       	std	Z+10, r24	; 0x0a
    2e20:	04 17       	cp	r16, r20
    2e22:	15 07       	cpc	r17, r21
    2e24:	26 07       	cpc	r18, r22
    2e26:	37 07       	cpc	r19, r23
    2e28:	c0 f0       	brcs	.+48     	; 0x2e5a <prvInsertTimerInActiveList+0x54>
    2e2a:	0c 19       	sub	r16, r12
    2e2c:	1d 09       	sbc	r17, r13
    2e2e:	2e 09       	sbc	r18, r14
    2e30:	3f 09       	sbc	r19, r15
    2e32:	86 85       	ldd	r24, Z+14	; 0x0e
    2e34:	97 85       	ldd	r25, Z+15	; 0x0f
    2e36:	a0 89       	ldd	r26, Z+16	; 0x10
    2e38:	b1 89       	ldd	r27, Z+17	; 0x11
    2e3a:	08 17       	cp	r16, r24
    2e3c:	19 07       	cpc	r17, r25
    2e3e:	2a 07       	cpc	r18, r26
    2e40:	3b 07       	cpc	r19, r27
    2e42:	00 f5       	brcc	.+64     	; 0x2e84 <prvInsertTimerInActiveList+0x7e>
    2e44:	bf 01       	movw	r22, r30
    2e46:	6e 5f       	subi	r22, 0xFE	; 254
    2e48:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4a:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <pxOverflowTimerList>
    2e4e:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <pxOverflowTimerList+0x1>
    2e52:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	18 c0       	rjmp	.+48     	; 0x2e8a <prvInsertTimerInActiveList+0x84>
    2e5a:	0c 15       	cp	r16, r12
    2e5c:	1d 05       	cpc	r17, r13
    2e5e:	2e 05       	cpc	r18, r14
    2e60:	3f 05       	cpc	r19, r15
    2e62:	28 f4       	brcc	.+10     	; 0x2e6e <prvInsertTimerInActiveList+0x68>
    2e64:	4c 15       	cp	r20, r12
    2e66:	5d 05       	cpc	r21, r13
    2e68:	6e 05       	cpc	r22, r14
    2e6a:	7f 05       	cpc	r23, r15
    2e6c:	68 f4       	brcc	.+26     	; 0x2e88 <prvInsertTimerInActiveList+0x82>
    2e6e:	bf 01       	movw	r22, r30
    2e70:	6e 5f       	subi	r22, 0xFE	; 254
    2e72:	7f 4f       	sbci	r23, 0xFF	; 255
    2e74:	80 91 d9 15 	lds	r24, 0x15D9	; 0x8015d9 <pxCurrentTimerList>
    2e78:	90 91 da 15 	lds	r25, 0x15DA	; 0x8015da <pxCurrentTimerList+0x1>
    2e7c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <prvInsertTimerInActiveList+0x84>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <prvInsertTimerInActiveList+0x84>
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	ff 90       	pop	r15
    2e90:	ef 90       	pop	r14
    2e92:	df 90       	pop	r13
    2e94:	cf 90       	pop	r12
    2e96:	08 95       	ret

00002e98 <prvCheckForValidListAndQueue>:
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	0f 92       	push	r0
    2e9e:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xTimerQueue>
    2ea2:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    2ea6:	89 2b       	or	r24, r25
    2ea8:	e9 f4       	brne	.+58     	; 0x2ee4 <prvCheckForValidListAndQueue+0x4c>
    2eaa:	86 ee       	ldi	r24, 0xE6	; 230
    2eac:	95 e1       	ldi	r25, 0x15	; 21
    2eae:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    2eb2:	8b ed       	ldi	r24, 0xDB	; 219
    2eb4:	95 e1       	ldi	r25, 0x15	; 21
    2eb6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    2eba:	86 ee       	ldi	r24, 0xE6	; 230
    2ebc:	95 e1       	ldi	r25, 0x15	; 21
    2ebe:	90 93 da 15 	sts	0x15DA, r25	; 0x8015da <pxCurrentTimerList+0x1>
    2ec2:	80 93 d9 15 	sts	0x15D9, r24	; 0x8015d9 <pxCurrentTimerList>
    2ec6:	8b ed       	ldi	r24, 0xDB	; 219
    2ec8:	95 e1       	ldi	r25, 0x15	; 21
    2eca:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <pxOverflowTimerList+0x1>
    2ece:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <pxOverflowTimerList>
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	67 e0       	ldi	r22, 0x07	; 7
    2ed6:	8a e0       	ldi	r24, 0x0A	; 10
    2ed8:	0e 94 76 06 	call	0xcec	; 0xcec <xQueueGenericCreate>
    2edc:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <xTimerQueue+0x1>
    2ee0:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <xTimerQueue>
    2ee4:	0f 90       	pop	r0
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	08 95       	ret

00002eea <xTimerCreateTimerTask>:
    2eea:	ef 92       	push	r14
    2eec:	ff 92       	push	r15
    2eee:	0f 93       	push	r16
    2ef0:	d3 df       	rcall	.-90     	; 0x2e98 <prvCheckForValidListAndQueue>
    2ef2:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xTimerQueue>
    2ef6:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    2efa:	89 2b       	or	r24, r25
    2efc:	91 f0       	breq	.+36     	; 0x2f22 <xTimerCreateTimerTask+0x38>
    2efe:	0f 2e       	mov	r0, r31
    2f00:	f3 ed       	ldi	r31, 0xD3	; 211
    2f02:	ef 2e       	mov	r14, r31
    2f04:	f5 e1       	ldi	r31, 0x15	; 21
    2f06:	ff 2e       	mov	r15, r31
    2f08:	f0 2d       	mov	r31, r0
    2f0a:	03 e0       	ldi	r16, 0x03	; 3
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 ec       	ldi	r20, 0xC0	; 192
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	67 e4       	ldi	r22, 0x47	; 71
    2f16:	72 e0       	ldi	r23, 0x02	; 2
    2f18:	87 ed       	ldi	r24, 0xD7	; 215
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <xTaskCreate>
    2f20:	01 c0       	rjmp	.+2      	; 0x2f24 <xTimerCreateTimerTask+0x3a>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	08 95       	ret

00002f2c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2f2c:	8f 92       	push	r8
    2f2e:	9f 92       	push	r9
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	cf 92       	push	r12
    2f36:	df 92       	push	r13
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	27 97       	sbiw	r28, 0x07	; 7
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	de bf       	out	0x3e, r29	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2f54:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <xTimerQueue>
    2f58:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    2f5c:	30 97       	sbiw	r30, 0x00	; 0
    2f5e:	81 f1       	breq	.+96     	; 0x2fc0 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2f60:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f62:	2a 83       	std	Y+2, r18	; 0x02
    2f64:	3b 83       	std	Y+3, r19	; 0x03
    2f66:	4c 83       	std	Y+4, r20	; 0x04
    2f68:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2f6a:	9f 83       	std	Y+7, r25	; 0x07
    2f6c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f6e:	66 30       	cpi	r22, 0x06	; 6
    2f70:	f4 f4       	brge	.+60     	; 0x2fae <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f72:	c4 db       	rcall	.-2168   	; 0x26fc <xTaskGetSchedulerState>
    2f74:	82 30       	cpi	r24, 0x02	; 2
    2f76:	69 f4       	brne	.+26     	; 0x2f92 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f78:	00 e0       	ldi	r16, 0x00	; 0
    2f7a:	a7 01       	movw	r20, r14
    2f7c:	96 01       	movw	r18, r12
    2f7e:	be 01       	movw	r22, r28
    2f80:	6f 5f       	subi	r22, 0xFF	; 255
    2f82:	7f 4f       	sbci	r23, 0xFF	; 255
    2f84:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xTimerQueue>
    2f88:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    2f8c:	0e 94 99 06 	call	0xd32	; 0xd32 <xQueueGenericSend>
    2f90:	18 c0       	rjmp	.+48     	; 0x2fc2 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f92:	00 e0       	ldi	r16, 0x00	; 0
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	a9 01       	movw	r20, r18
    2f9a:	be 01       	movw	r22, r28
    2f9c:	6f 5f       	subi	r22, 0xFF	; 255
    2f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa0:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xTimerQueue>
    2fa4:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    2fa8:	0e 94 99 06 	call	0xd32	; 0xd32 <xQueueGenericSend>
    2fac:	0a c0       	rjmp	.+20     	; 0x2fc2 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	a8 01       	movw	r20, r16
    2fb2:	be 01       	movw	r22, r28
    2fb4:	6f 5f       	subi	r22, 0xFF	; 255
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb8:	cf 01       	movw	r24, r30
    2fba:	0e 94 49 07 	call	0xe92	; 0xe92 <xQueueGenericSendFromISR>
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2fc2:	27 96       	adiw	r28, 0x07	; 7
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	bf 90       	pop	r11
    2fe0:	af 90       	pop	r10
    2fe2:	9f 90       	pop	r9
    2fe4:	8f 90       	pop	r8
    2fe6:	08 95       	ret

00002fe8 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2fe8:	8f 92       	push	r8
    2fea:	9f 92       	push	r9
    2fec:	af 92       	push	r10
    2fee:	bf 92       	push	r11
    2ff0:	cf 92       	push	r12
    2ff2:	df 92       	push	r13
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3000:	3b c0       	rjmp	.+118    	; 0x3078 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3002:	07 80       	ldd	r0, Z+7	; 0x07
    3004:	f0 85       	ldd	r31, Z+8	; 0x08
    3006:	e0 2d       	mov	r30, r0
    3008:	80 80       	ld	r8, Z
    300a:	91 80       	ldd	r9, Z+1	; 0x01
    300c:	a2 80       	ldd	r10, Z+2	; 0x02
    300e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3010:	c0 85       	ldd	r28, Z+8	; 0x08
    3012:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3014:	8e 01       	movw	r16, r28
    3016:	0e 5f       	subi	r16, 0xFE	; 254
    3018:	1f 4f       	sbci	r17, 0xFF	; 255
    301a:	c8 01       	movw	r24, r16
    301c:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3020:	ec 89       	ldd	r30, Y+20	; 0x14
    3022:	fd 89       	ldd	r31, Y+21	; 0x15
    3024:	ce 01       	movw	r24, r28
    3026:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3028:	8e 89       	ldd	r24, Y+22	; 0x16
    302a:	82 ff       	sbrs	r24, 2
    302c:	25 c0       	rjmp	.+74     	; 0x3078 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    302e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3030:	9f 85       	ldd	r25, Y+15	; 0x0f
    3032:	a8 89       	ldd	r26, Y+16	; 0x10
    3034:	b9 89       	ldd	r27, Y+17	; 0x11
    3036:	88 0d       	add	r24, r8
    3038:	99 1d       	adc	r25, r9
    303a:	aa 1d       	adc	r26, r10
    303c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    303e:	88 16       	cp	r8, r24
    3040:	99 06       	cpc	r9, r25
    3042:	aa 06       	cpc	r10, r26
    3044:	bb 06       	cpc	r11, r27
    3046:	70 f4       	brcc	.+28     	; 0x3064 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3048:	8a 83       	std	Y+2, r24	; 0x02
    304a:	9b 83       	std	Y+3, r25	; 0x03
    304c:	ac 83       	std	Y+4, r26	; 0x04
    304e:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3050:	db 87       	std	Y+11, r29	; 0x0b
    3052:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3054:	b8 01       	movw	r22, r16
    3056:	80 91 d9 15 	lds	r24, 0x15D9	; 0x8015d9 <pxCurrentTimerList>
    305a:	90 91 da 15 	lds	r25, 0x15DA	; 0x8015da <pxCurrentTimerList+0x1>
    305e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    3062:	0a c0       	rjmp	.+20     	; 0x3078 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3064:	c1 2c       	mov	r12, r1
    3066:	d1 2c       	mov	r13, r1
    3068:	76 01       	movw	r14, r12
    306a:	00 e0       	ldi	r16, 0x00	; 0
    306c:	10 e0       	ldi	r17, 0x00	; 0
    306e:	a5 01       	movw	r20, r10
    3070:	94 01       	movw	r18, r8
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	ce 01       	movw	r24, r28
    3076:	5a df       	rcall	.-332    	; 0x2f2c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3078:	e0 91 d9 15 	lds	r30, 0x15D9	; 0x8015d9 <pxCurrentTimerList>
    307c:	f0 91 da 15 	lds	r31, 0x15DA	; 0x8015da <pxCurrentTimerList+0x1>
    3080:	80 81       	ld	r24, Z
    3082:	81 11       	cpse	r24, r1
    3084:	be cf       	rjmp	.-132    	; 0x3002 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3086:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <pxOverflowTimerList>
    308a:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <pxOverflowTimerList+0x1>
    308e:	90 93 da 15 	sts	0x15DA, r25	; 0x8015da <pxCurrentTimerList+0x1>
    3092:	80 93 d9 15 	sts	0x15D9, r24	; 0x8015d9 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3096:	f0 93 d8 15 	sts	0x15D8, r31	; 0x8015d8 <pxOverflowTimerList+0x1>
    309a:	e0 93 d7 15 	sts	0x15D7, r30	; 0x8015d7 <pxOverflowTimerList>
    }
    309e:	df 91       	pop	r29
    30a0:	cf 91       	pop	r28
    30a2:	1f 91       	pop	r17
    30a4:	0f 91       	pop	r16
    30a6:	ff 90       	pop	r15
    30a8:	ef 90       	pop	r14
    30aa:	df 90       	pop	r13
    30ac:	cf 90       	pop	r12
    30ae:	bf 90       	pop	r11
    30b0:	af 90       	pop	r10
    30b2:	9f 90       	pop	r9
    30b4:	8f 90       	pop	r8
    30b6:	08 95       	ret

000030b8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    30b8:	cf 92       	push	r12
    30ba:	df 92       	push	r13
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    30c6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskGetTickCount>
    30ca:	6b 01       	movw	r12, r22
    30cc:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    30ce:	80 91 cf 15 	lds	r24, 0x15CF	; 0x8015cf <xLastTime.2436>
    30d2:	90 91 d0 15 	lds	r25, 0x15D0	; 0x8015d0 <xLastTime.2436+0x1>
    30d6:	a0 91 d1 15 	lds	r26, 0x15D1	; 0x8015d1 <xLastTime.2436+0x2>
    30da:	b0 91 d2 15 	lds	r27, 0x15D2	; 0x8015d2 <xLastTime.2436+0x3>
    30de:	c8 16       	cp	r12, r24
    30e0:	d9 06       	cpc	r13, r25
    30e2:	ea 06       	cpc	r14, r26
    30e4:	fb 06       	cpc	r15, r27
    30e6:	20 f4       	brcc	.+8      	; 0x30f0 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    30e8:	7f df       	rcall	.-258    	; 0x2fe8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	88 83       	st	Y, r24
    30ee:	01 c0       	rjmp	.+2      	; 0x30f2 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    30f0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    30f2:	c0 92 cf 15 	sts	0x15CF, r12	; 0x8015cf <xLastTime.2436>
    30f6:	d0 92 d0 15 	sts	0x15D0, r13	; 0x8015d0 <xLastTime.2436+0x1>
    30fa:	e0 92 d1 15 	sts	0x15D1, r14	; 0x8015d1 <xLastTime.2436+0x2>
    30fe:	f0 92 d2 15 	sts	0x15D2, r15	; 0x8015d2 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3102:	c7 01       	movw	r24, r14
    3104:	b6 01       	movw	r22, r12
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	08 95       	ret

00003114 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3114:	4f 92       	push	r4
    3116:	5f 92       	push	r5
    3118:	6f 92       	push	r6
    311a:	7f 92       	push	r7
    311c:	8f 92       	push	r8
    311e:	9f 92       	push	r9
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	4b 01       	movw	r8, r22
    3136:	5c 01       	movw	r10, r24
    3138:	29 01       	movw	r4, r18
    313a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    313c:	e0 91 d9 15 	lds	r30, 0x15D9	; 0x8015d9 <pxCurrentTimerList>
    3140:	f0 91 da 15 	lds	r31, 0x15DA	; 0x8015da <pxCurrentTimerList+0x1>
    3144:	07 80       	ldd	r0, Z+7	; 0x07
    3146:	f0 85       	ldd	r31, Z+8	; 0x08
    3148:	e0 2d       	mov	r30, r0
    314a:	c0 85       	ldd	r28, Z+8	; 0x08
    314c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    314e:	ce 01       	movw	r24, r28
    3150:	02 96       	adiw	r24, 0x02	; 2
    3152:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3156:	8e 89       	ldd	r24, Y+22	; 0x16
    3158:	82 ff       	sbrs	r24, 2
    315a:	1b c0       	rjmp	.+54     	; 0x3192 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    315c:	4e 85       	ldd	r20, Y+14	; 0x0e
    315e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3160:	68 89       	ldd	r22, Y+16	; 0x10
    3162:	79 89       	ldd	r23, Y+17	; 0x11
    3164:	48 0d       	add	r20, r8
    3166:	59 1d       	adc	r21, r9
    3168:	6a 1d       	adc	r22, r10
    316a:	7b 1d       	adc	r23, r11
    316c:	75 01       	movw	r14, r10
    316e:	64 01       	movw	r12, r8
    3170:	93 01       	movw	r18, r6
    3172:	82 01       	movw	r16, r4
    3174:	ce 01       	movw	r24, r28
    3176:	47 de       	rcall	.-882    	; 0x2e06 <prvInsertTimerInActiveList>
    3178:	88 23       	and	r24, r24
    317a:	69 f0       	breq	.+26     	; 0x3196 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    317c:	c1 2c       	mov	r12, r1
    317e:	d1 2c       	mov	r13, r1
    3180:	76 01       	movw	r14, r12
    3182:	00 e0       	ldi	r16, 0x00	; 0
    3184:	10 e0       	ldi	r17, 0x00	; 0
    3186:	a5 01       	movw	r20, r10
    3188:	94 01       	movw	r18, r8
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	ce 01       	movw	r24, r28
    318e:	ce de       	rcall	.-612    	; 0x2f2c <xTimerGenericCommand>
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3192:	8e 7f       	andi	r24, 0xFE	; 254
    3194:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3196:	ec 89       	ldd	r30, Y+20	; 0x14
    3198:	fd 89       	ldd	r31, Y+21	; 0x15
    319a:	ce 01       	movw	r24, r28
    319c:	19 95       	eicall
    }
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	df 90       	pop	r13
    31ac:	cf 90       	pop	r12
    31ae:	bf 90       	pop	r11
    31b0:	af 90       	pop	r10
    31b2:	9f 90       	pop	r9
    31b4:	8f 90       	pop	r8
    31b6:	7f 90       	pop	r7
    31b8:	6f 90       	pop	r6
    31ba:	5f 90       	pop	r5
    31bc:	4f 90       	pop	r4
    31be:	08 95       	ret

000031c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    31c0:	8f 92       	push	r8
    31c2:	9f 92       	push	r9
    31c4:	af 92       	push	r10
    31c6:	bf 92       	push	r11
    31c8:	cf 92       	push	r12
    31ca:	df 92       	push	r13
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	1f 93       	push	r17
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	1f 92       	push	r1
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	6b 01       	movw	r12, r22
    31de:	7c 01       	movw	r14, r24
    31e0:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    31e2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31e6:	ce 01       	movw	r24, r28
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	66 df       	rcall	.-308    	; 0x30b8 <prvSampleTimeNow>
    31ec:	4b 01       	movw	r8, r22
    31ee:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	81 11       	cpse	r24, r1
    31f4:	2d c0       	rjmp	.+90     	; 0x3250 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    31f6:	11 11       	cpse	r17, r1
    31f8:	0d c0       	rjmp	.+26     	; 0x3214 <prvProcessTimerOrBlockTask+0x54>
    31fa:	8c 14       	cp	r8, r12
    31fc:	9d 04       	cpc	r9, r13
    31fe:	ae 04       	cpc	r10, r14
    3200:	bf 04       	cpc	r11, r15
    3202:	40 f0       	brcs	.+16     	; 0x3214 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3204:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3208:	a5 01       	movw	r20, r10
    320a:	94 01       	movw	r18, r8
    320c:	c7 01       	movw	r24, r14
    320e:	b6 01       	movw	r22, r12
    3210:	81 df       	rcall	.-254    	; 0x3114 <prvProcessExpiredTimer>
    3212:	20 c0       	rjmp	.+64     	; 0x3254 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3214:	11 23       	and	r17, r17
    3216:	41 f0       	breq	.+16     	; 0x3228 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3218:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxOverflowTimerList>
    321c:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxOverflowTimerList+0x1>
    3220:	80 81       	ld	r24, Z
    3222:	11 e0       	ldi	r17, 0x01	; 1
    3224:	81 11       	cpse	r24, r1
    3226:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3228:	b7 01       	movw	r22, r14
    322a:	a6 01       	movw	r20, r12
    322c:	48 19       	sub	r20, r8
    322e:	59 09       	sbc	r21, r9
    3230:	6a 09       	sbc	r22, r10
    3232:	7b 09       	sbc	r23, r11
    3234:	21 2f       	mov	r18, r17
    3236:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xTimerQueue>
    323a:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    323e:	0e 94 13 08 	call	0x1026	; 0x1026 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3242:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
    3246:	81 11       	cpse	r24, r1
    3248:	05 c0       	rjmp	.+10     	; 0x3254 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    324a:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3250:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xTaskResumeAll>
            }
        }
    }
    3254:	0f 90       	pop	r0
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	bf 90       	pop	r11
    3266:	af 90       	pop	r10
    3268:	9f 90       	pop	r9
    326a:	8f 90       	pop	r8
    326c:	08 95       	ret

0000326e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    326e:	af 92       	push	r10
    3270:	bf 92       	push	r11
    3272:	cf 92       	push	r12
    3274:	df 92       	push	r13
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	cf 93       	push	r28
    3280:	df 93       	push	r29
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	28 97       	sbiw	r28, 0x08	; 8
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3292:	82 c0       	rjmp	.+260    	; 0x3398 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	88 23       	and	r24, r24
    3298:	0c f4       	brge	.+2      	; 0x329c <prvProcessReceivedCommands+0x2e>
    329a:	7e c0       	rjmp	.+252    	; 0x3398 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    329c:	ae 80       	ldd	r10, Y+6	; 0x06
    329e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    32a0:	d5 01       	movw	r26, r10
    32a2:	1c 96       	adiw	r26, 0x0c	; 12
    32a4:	8d 91       	ld	r24, X+
    32a6:	9c 91       	ld	r25, X
    32a8:	1d 97       	sbiw	r26, 0x0d	; 13
    32aa:	89 2b       	or	r24, r25
    32ac:	21 f0       	breq	.+8      	; 0x32b6 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32ae:	c5 01       	movw	r24, r10
    32b0:	02 96       	adiw	r24, 0x02	; 2
    32b2:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    32b6:	ce 01       	movw	r24, r28
    32b8:	08 96       	adiw	r24, 0x08	; 8
    32ba:	fe de       	rcall	.-516    	; 0x30b8 <prvSampleTimeNow>
    32bc:	8b 01       	movw	r16, r22
    32be:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    32c0:	e9 81       	ldd	r30, Y+1	; 0x01
    32c2:	0e 2e       	mov	r0, r30
    32c4:	00 0c       	add	r0, r0
    32c6:	ff 0b       	sbc	r31, r31
    32c8:	ea 30       	cpi	r30, 0x0A	; 10
    32ca:	f1 05       	cpc	r31, r1
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <prvProcessReceivedCommands+0x62>
    32ce:	64 c0       	rjmp	.+200    	; 0x3398 <prvProcessReceivedCommands+0x12a>
    32d0:	88 27       	eor	r24, r24
    32d2:	ee 58       	subi	r30, 0x8E	; 142
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	8f 4f       	sbci	r24, 0xFF	; 255
    32d8:	0c 94 b7 2b 	jmp	0x576e	; 0x576e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32dc:	f5 01       	movw	r30, r10
    32de:	86 89       	ldd	r24, Z+22	; 0x16
    32e0:	81 60       	ori	r24, 0x01	; 1
    32e2:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    32e4:	ca 80       	ldd	r12, Y+2	; 0x02
    32e6:	db 80       	ldd	r13, Y+3	; 0x03
    32e8:	ec 80       	ldd	r14, Y+4	; 0x04
    32ea:	fd 80       	ldd	r15, Y+5	; 0x05
    32ec:	46 85       	ldd	r20, Z+14	; 0x0e
    32ee:	57 85       	ldd	r21, Z+15	; 0x0f
    32f0:	60 89       	ldd	r22, Z+16	; 0x10
    32f2:	71 89       	ldd	r23, Z+17	; 0x11
    32f4:	4c 0d       	add	r20, r12
    32f6:	5d 1d       	adc	r21, r13
    32f8:	6e 1d       	adc	r22, r14
    32fa:	7f 1d       	adc	r23, r15
    32fc:	c5 01       	movw	r24, r10
    32fe:	83 dd       	rcall	.-1274   	; 0x2e06 <prvInsertTimerInActiveList>
    3300:	88 23       	and	r24, r24
    3302:	09 f4       	brne	.+2      	; 0x3306 <prvProcessReceivedCommands+0x98>
    3304:	49 c0       	rjmp	.+146    	; 0x3398 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3306:	d5 01       	movw	r26, r10
    3308:	54 96       	adiw	r26, 0x14	; 20
    330a:	ed 91       	ld	r30, X+
    330c:	fc 91       	ld	r31, X
    330e:	55 97       	sbiw	r26, 0x15	; 21
    3310:	c5 01       	movw	r24, r10
    3312:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3314:	f5 01       	movw	r30, r10
    3316:	86 89       	ldd	r24, Z+22	; 0x16
    3318:	82 ff       	sbrs	r24, 2
    331a:	3e c0       	rjmp	.+124    	; 0x3398 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    331c:	4a 81       	ldd	r20, Y+2	; 0x02
    331e:	5b 81       	ldd	r21, Y+3	; 0x03
    3320:	6c 81       	ldd	r22, Y+4	; 0x04
    3322:	7d 81       	ldd	r23, Y+5	; 0x05
    3324:	86 85       	ldd	r24, Z+14	; 0x0e
    3326:	97 85       	ldd	r25, Z+15	; 0x0f
    3328:	a0 89       	ldd	r26, Z+16	; 0x10
    332a:	b1 89       	ldd	r27, Z+17	; 0x11
    332c:	9a 01       	movw	r18, r20
    332e:	ab 01       	movw	r20, r22
    3330:	28 0f       	add	r18, r24
    3332:	39 1f       	adc	r19, r25
    3334:	4a 1f       	adc	r20, r26
    3336:	5b 1f       	adc	r21, r27
    3338:	c1 2c       	mov	r12, r1
    333a:	d1 2c       	mov	r13, r1
    333c:	76 01       	movw	r14, r12
    333e:	00 e0       	ldi	r16, 0x00	; 0
    3340:	10 e0       	ldi	r17, 0x00	; 0
    3342:	60 e0       	ldi	r22, 0x00	; 0
    3344:	c5 01       	movw	r24, r10
    3346:	f2 dd       	rcall	.-1052   	; 0x2f2c <xTimerGenericCommand>
    3348:	27 c0       	rjmp	.+78     	; 0x3398 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    334a:	d5 01       	movw	r26, r10
    334c:	56 96       	adiw	r26, 0x16	; 22
    334e:	8c 91       	ld	r24, X
    3350:	56 97       	sbiw	r26, 0x16	; 22
    3352:	8e 7f       	andi	r24, 0xFE	; 254
    3354:	56 96       	adiw	r26, 0x16	; 22
    3356:	8c 93       	st	X, r24
                        break;
    3358:	1f c0       	rjmp	.+62     	; 0x3398 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    335a:	f5 01       	movw	r30, r10
    335c:	86 89       	ldd	r24, Z+22	; 0x16
    335e:	81 60       	ori	r24, 0x01	; 1
    3360:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3362:	4a 81       	ldd	r20, Y+2	; 0x02
    3364:	5b 81       	ldd	r21, Y+3	; 0x03
    3366:	6c 81       	ldd	r22, Y+4	; 0x04
    3368:	7d 81       	ldd	r23, Y+5	; 0x05
    336a:	46 87       	std	Z+14, r20	; 0x0e
    336c:	57 87       	std	Z+15, r21	; 0x0f
    336e:	60 8b       	std	Z+16, r22	; 0x10
    3370:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3372:	40 0f       	add	r20, r16
    3374:	51 1f       	adc	r21, r17
    3376:	62 1f       	adc	r22, r18
    3378:	73 1f       	adc	r23, r19
    337a:	68 01       	movw	r12, r16
    337c:	79 01       	movw	r14, r18
    337e:	c5 01       	movw	r24, r10
    3380:	42 dd       	rcall	.-1404   	; 0x2e06 <prvInsertTimerInActiveList>
                        break;
    3382:	0a c0       	rjmp	.+20     	; 0x3398 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3384:	f5 01       	movw	r30, r10
    3386:	86 89       	ldd	r24, Z+22	; 0x16
    3388:	81 fd       	sbrc	r24, 1
    338a:	04 c0       	rjmp	.+8      	; 0x3394 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    338c:	c5 01       	movw	r24, r10
    338e:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3394:	8e 7f       	andi	r24, 0xFE	; 254
    3396:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	a9 01       	movw	r20, r18
    339e:	be 01       	movw	r22, r28
    33a0:	6f 5f       	subi	r22, 0xFF	; 255
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xTimerQueue>
    33a8:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xTimerQueue+0x1>
    33ac:	0e 94 84 07 	call	0xf08	; 0xf08 <xQueueReceive>
    33b0:	81 11       	cpse	r24, r1
    33b2:	70 cf       	rjmp	.-288    	; 0x3294 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    33b4:	28 96       	adiw	r28, 0x08	; 8
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	ff 90       	pop	r15
    33ca:	ef 90       	pop	r14
    33cc:	df 90       	pop	r13
    33ce:	cf 90       	pop	r12
    33d0:	bf 90       	pop	r11
    33d2:	af 90       	pop	r10
    33d4:	08 95       	ret

000033d6 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    33d6:	08 95       	ret

000033d8 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    33d8:	84 b1       	in	r24, 0x04	; 4
    33da:	80 68       	ori	r24, 0x80	; 128
    33dc:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33de:	85 b1       	in	r24, 0x05	; 5
    33e0:	80 68       	ori	r24, 0x80	; 128
    33e2:	85 b9       	out	0x05, r24	; 5
    33e4:	08 95       	ret

000033e6 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    33e6:	83 b1       	in	r24, 0x03	; 3
    33e8:	80 68       	ori	r24, 0x80	; 128
    33ea:	83 b9       	out	0x03, r24	; 3
    33ec:	08 95       	ret

000033ee <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    33ee:	f4 df       	rcall	.-24     	; 0x33d8 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33f0:	2f ef       	ldi	r18, 0xFF	; 255
    33f2:	80 e7       	ldi	r24, 0x70	; 112
    33f4:	92 e0       	ldi	r25, 0x02	; 2
    33f6:	21 50       	subi	r18, 0x01	; 1
    33f8:	80 40       	sbci	r24, 0x00	; 0
    33fa:	90 40       	sbci	r25, 0x00	; 0
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <vApplicationMallocFailedHook+0x8>
    33fe:	00 c0       	rjmp	.+0      	; 0x3400 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3400:	00 00       	nop
    3402:	f1 df       	rcall	.-30     	; 0x33e6 <prvBlinkMainLed>
    3404:	f5 cf       	rjmp	.-22     	; 0x33f0 <vApplicationMallocFailedHook+0x2>

00003406 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3406:	e8 df       	rcall	.-48     	; 0x33d8 <prvSetMainLedOn>
    3408:	2f ef       	ldi	r18, 0xFF	; 255
    340a:	87 ea       	ldi	r24, 0xA7	; 167
    340c:	91 e6       	ldi	r25, 0x61	; 97
    340e:	21 50       	subi	r18, 0x01	; 1
    3410:	80 40       	sbci	r24, 0x00	; 0
    3412:	90 40       	sbci	r25, 0x00	; 0
    3414:	e1 f7       	brne	.-8      	; 0x340e <vApplicationStackOverflowHook+0x8>
    3416:	00 c0       	rjmp	.+0      	; 0x3418 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3418:	00 00       	nop
    341a:	e5 df       	rcall	.-54     	; 0x33e6 <prvBlinkMainLed>
    341c:	f5 cf       	rjmp	.-22     	; 0x3408 <vApplicationStackOverflowHook+0x2>

0000341e <SensorDataPackage_create>:
	}SensorDataPackage;

SensorDataPackage_t packet;

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
    341e:	86 e0       	ldi	r24, 0x06	; 6
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    3426:	90 93 4c 17 	sts	0x174C, r25	; 0x80174c <packet+0x1>
    342a:	80 93 4b 17 	sts	0x174B, r24	; 0x80174b <packet>
	
	if (NULL == packet){
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	69 f0       	breq	.+26     	; 0x344c <SensorDataPackage_create+0x2e>
		return NULL;
	}
	packet->co2Ppm=0;
    3432:	fc 01       	movw	r30, r24
    3434:	11 82       	std	Z+1, r1	; 0x01
    3436:	10 82       	st	Z, r1
	packet->humidityData=0;
    3438:	80 91 4b 17 	lds	r24, 0x174B	; 0x80174b <packet>
    343c:	90 91 4c 17 	lds	r25, 0x174C	; 0x80174c <packet+0x1>
    3440:	fc 01       	movw	r30, r24
    3442:	15 82       	std	Z+5, r1	; 0x05
    3444:	14 82       	std	Z+4, r1	; 0x04
	packet->temperatureData=0;
    3446:	13 82       	std	Z+3, r1	; 0x03
    3448:	12 82       	std	Z+2, r1	; 0x02
	
	return packet;
    344a:	08 95       	ret

SensorDataPackage_t SensorDataPackage_create(){
	 packet = pvPortMalloc(sizeof(SensorDataPackage));
	
	if (NULL == packet){
		return NULL;
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
	packet->co2Ppm=0;
	packet->humidityData=0;
	packet->temperatureData=0;
	
	return packet;
}
    3450:	08 95       	ret

00003452 <setCO2Ppm>:

void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3452:	e0 91 4b 17 	lds	r30, 0x174B	; 0x80174b <packet>
    3456:	f0 91 4c 17 	lds	r31, 0x174C	; 0x80174c <packet+0x1>
    345a:	91 83       	std	Z+1, r25	; 0x01
    345c:	80 83       	st	Z, r24
    345e:	08 95       	ret

00003460 <setTemperatureData>:
}
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3460:	e0 91 4b 17 	lds	r30, 0x174B	; 0x80174b <packet>
    3464:	f0 91 4c 17 	lds	r31, 0x174C	; 0x80174c <packet+0x1>
    3468:	93 83       	std	Z+3, r25	; 0x03
    346a:	82 83       	std	Z+2, r24	; 0x02
    346c:	08 95       	ret

0000346e <setHumidityData>:
}
void setHumidityData(uint16_t data)
{
	
packet->humidityData=data;	
    346e:	e0 91 4b 17 	lds	r30, 0x174B	; 0x80174b <packet>
    3472:	f0 91 4c 17 	lds	r31, 0x174C	; 0x80174c <packet+0x1>
    3476:	95 83       	std	Z+5, r25	; 0x05
    3478:	84 83       	std	Z+4, r24	; 0x04
    347a:	08 95       	ret

0000347c <getLoRaPayload>:
}
lora_driver_payload_t getLoRaPayload(uint8_t portNo){

	 payload.len = 6;
    347c:	e1 ef       	ldi	r30, 0xF1	; 241
    347e:	f5 e1       	ldi	r31, 0x15	; 21
    3480:	26 e0       	ldi	r18, 0x06	; 6
    3482:	21 83       	std	Z+1, r18	; 0x01
	 payload.portNo = portNo;
    3484:	60 83       	st	Z, r22
	
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3486:	a0 91 4b 17 	lds	r26, 0x174B	; 0x80174b <packet>
    348a:	b0 91 4c 17 	lds	r27, 0x174C	; 0x80174c <packet+0x1>
    348e:	2c 91       	ld	r18, X
    3490:	11 96       	adiw	r26, 0x01	; 1
    3492:	3c 91       	ld	r19, X
    3494:	11 97       	sbiw	r26, 0x01	; 1
    3496:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3498:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    349a:	12 96       	adiw	r26, 0x02	; 2
    349c:	2c 91       	ld	r18, X
    349e:	12 97       	sbiw	r26, 0x02	; 2
    34a0:	13 96       	adiw	r26, 0x03	; 3
    34a2:	3c 91       	ld	r19, X
    34a4:	13 97       	sbiw	r26, 0x03	; 3
    34a6:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    34a8:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    34aa:	14 96       	adiw	r26, 0x04	; 4
    34ac:	2c 91       	ld	r18, X
    34ae:	14 97       	sbiw	r26, 0x04	; 4
    34b0:	15 96       	adiw	r26, 0x05	; 5
    34b2:	3c 91       	ld	r19, X
    34b4:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    34b6:	27 83       	std	Z+7, r18	; 0x07
	return payload;
    34b8:	26 e1       	ldi	r18, 0x16	; 22
    34ba:	dc 01       	movw	r26, r24
    34bc:	01 90       	ld	r0, Z+
    34be:	0d 92       	st	X+, r0
    34c0:	2a 95       	dec	r18
    34c2:	e1 f7       	brne	.-8      	; 0x34bc <getLoRaPayload+0x40>
	};
    34c4:	08 95       	ret

000034c6 <Temp_Humidty_sensor_create>:
}Temp_Humidity_Sensor;

//-------Constructor-------------------

void Temp_Humidty_sensor_create(EventGroupHandle_t event1,EventGroupHandle_t event2)
{
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	8c 01       	movw	r16, r24
    34d0:	eb 01       	movw	r28, r22
	temperature_humdity_sensor_t new_temperature_humidty = pvPortMalloc(sizeof(Temp_Humidity_Sensor));
    34d2:	88 e0       	ldi	r24, 0x08	; 8
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
	if(NULL == new_temperature_humidty)
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	09 f1       	breq	.+66     	; 0x3520 <Temp_Humidty_sensor_create+0x5a>
	{
		return NULL;
	}
	_meassureEventGroup=event1;
    34de:	10 93 52 17 	sts	0x1752, r17	; 0x801752 <_meassureEventGroup+0x1>
    34e2:	00 93 51 17 	sts	0x1751, r16	; 0x801751 <_meassureEventGroup>
	_dataReadyEventGroup=event2;
    34e6:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <_dataReadyEventGroup+0x1>
    34ea:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <_dataReadyEventGroup>
	new_temperature_humidty->humidity_data=humidity;
    34ee:	40 91 07 16 	lds	r20, 0x1607	; 0x801607 <humidity>
    34f2:	50 91 08 16 	lds	r21, 0x1608	; 0x801608 <humidity+0x1>
    34f6:	60 91 09 16 	lds	r22, 0x1609	; 0x801609 <humidity+0x2>
    34fa:	70 91 0a 16 	lds	r23, 0x160A	; 0x80160a <humidity+0x3>
    34fe:	fc 01       	movw	r30, r24
    3500:	44 83       	std	Z+4, r20	; 0x04
    3502:	55 83       	std	Z+5, r21	; 0x05
    3504:	66 83       	std	Z+6, r22	; 0x06
    3506:	77 83       	std	Z+7, r23	; 0x07
	new_temperature_humidty->temperature_data=temperature;
    3508:	40 91 0b 16 	lds	r20, 0x160B	; 0x80160b <temperature>
    350c:	50 91 0c 16 	lds	r21, 0x160C	; 0x80160c <temperature+0x1>
    3510:	60 91 0d 16 	lds	r22, 0x160D	; 0x80160d <temperature+0x2>
    3514:	70 91 0e 16 	lds	r23, 0x160E	; 0x80160e <temperature+0x3>
    3518:	40 83       	st	Z, r20
    351a:	51 83       	std	Z+1, r21	; 0x01
    351c:	62 83       	std	Z+2, r22	; 0x02
    351e:	73 83       	std	Z+3, r23	; 0x03
	
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	08 95       	ret

0000352a <get_temperature_data>:
//------Get temperature data-----------

uint16_t get_temperature_data()
{
		return (uint16_t)temperature;
    352a:	60 91 0b 16 	lds	r22, 0x160B	; 0x80160b <temperature>
    352e:	70 91 0c 16 	lds	r23, 0x160C	; 0x80160c <temperature+0x1>
    3532:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <temperature+0x2>
    3536:	90 91 0e 16 	lds	r25, 0x160E	; 0x80160e <temperature+0x3>
    353a:	b1 d2       	rcall	.+1378   	; 0x3a9e <__fixunssfsi>
}
    353c:	cb 01       	movw	r24, r22
    353e:	08 95       	ret

00003540 <get_humidity_data>:

//-------Get humidity data--------
uint16_t get_humidity_data()
{
		return (uint16_t)humidity;	
    3540:	60 91 07 16 	lds	r22, 0x1607	; 0x801607 <humidity>
    3544:	70 91 08 16 	lds	r23, 0x1608	; 0x801608 <humidity+0x1>
    3548:	80 91 09 16 	lds	r24, 0x1609	; 0x801609 <humidity+0x2>
    354c:	90 91 0a 16 	lds	r25, 0x160A	; 0x80160a <humidity+0x3>
    3550:	a6 d2       	rcall	.+1356   	; 0x3a9e <__fixunssfsi>
}
    3552:	cb 01       	movw	r24, r22
    3554:	08 95       	ret

00003556 <tempHum_init>:
TickType_t xLastWakeTime;
TickType_t xFrequency;

/* Task to run for the sensors to work */
void tempHum_init() {
	if ( HIH8120_OK == hih8120_initialise() )
    3556:	25 d3       	rcall	.+1610   	; 0x3ba2 <hih8120_initialise>
    3558:	88 23       	and	r24, r24
    355a:	41 f0       	breq	.+16     	; 0x356c <tempHum_init+0x16>
	{
		// Driver initialized OK
		// Always check what hih8120_initialise() returns
	}	else printf("Driver doesn't start");
    355c:	8f e4       	ldi	r24, 0x4F	; 79
    355e:	92 e0       	ldi	r25, 0x02	; 2
    3560:	9f 93       	push	r25
    3562:	8f 93       	push	r24
    3564:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	08 95       	ret

0000356e <tempHum_getDataFromTempHumSensorTask>:
	
	for(;;)
	{
		
		//Wait for Event bits to be set in Group
		event_measure = xEventGroupWaitBits(
    356e:	cc 24       	eor	r12, r12
    3570:	ca 94       	dec	r12
    3572:	dc 2c       	mov	r13, r12
    3574:	76 01       	movw	r14, r12
    3576:	01 e0       	ldi	r16, 0x01	; 1
    3578:	21 e0       	ldi	r18, 0x01	; 1
    357a:	42 e0       	ldi	r20, 0x02	; 2
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	70 e0       	ldi	r23, 0x00	; 0
    3582:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <_meassureEventGroup>
    3586:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <_meassureEventGroup+0x1>
    358a:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		 
		
		if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    358e:	61 ff       	sbrs	r22, 1
    3590:	4e c0       	rjmp	.+156    	; 0x362e <tempHum_getDataFromTempHumSensorTask+0xc0>
		{
			
			vTaskDelay( pdMS_TO_TICKS(100UL));
    3592:	66 e0       	ldi	r22, 0x06	; 6
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
    359e:	19 d3       	rcall	.+1586   	; 0x3bd2 <hih8120_wakeup>
    35a0:	88 23       	and	r24, r24
    35a2:	c1 f0       	breq	.+48     	; 0x35d4 <tempHum_getDataFromTempHumSensorTask+0x66>
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
    35a4:	66 e0       	ldi	r22, 0x06	; 6
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    35b0:	84 e6       	ldi	r24, 0x64	; 100
    35b2:	92 e0       	ldi	r25, 0x02	; 2
    35b4:	9f 93       	push	r25
    35b6:	8f 93       	push	r24
    35b8:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
			while(HIH8120_OK == hih8120_wakeup())
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	06 c0       	rjmp	.+12     	; 0x35ce <tempHum_getDataFromTempHumSensorTask+0x60>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    35c2:	63 e0       	ldi	r22, 0x03	; 3
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
		
		if (HIH8120_OK != hih8120_wakeup())
		{
			vTaskDelay(pdMS_TO_TICKS(100UL));
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    35ce:	01 d3       	rcall	.+1538   	; 0x3bd2 <hih8120_wakeup>
    35d0:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		hih8120_measure();
    35d2:	b9 f3       	breq	.-18     	; 0x35c2 <tempHum_getDataFromTempHumSensorTask+0x54>
    35d4:	13 d3       	rcall	.+1574   	; 0x3bfc <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(50UL));
    35d6:	63 e0       	ldi	r22, 0x03	; 3
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
		
		if (HIH8120_OK == hih8120_measure() )
    35e2:	0c d3       	rcall	.+1560   	; 0x3bfc <hih8120_measure>
    35e4:	81 11       	cpse	r24, r1
    35e6:	c3 cf       	rjmp	.-122    	; 0x356e <tempHum_getDataFromTempHumSensorTask>
		{
		
			vTaskDelay(pdMS_TO_TICKS(100UL));
    35e8:	66 e0       	ldi	r22, 0x06	; 6
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
			humidity =  hih8120_getHumidity();
    35f4:	14 d3       	rcall	.+1576   	; 0x3c1e <hih8120_getHumidity>
    35f6:	60 93 07 16 	sts	0x1607, r22	; 0x801607 <humidity>
    35fa:	70 93 08 16 	sts	0x1608, r23	; 0x801608 <humidity+0x1>
    35fe:	80 93 09 16 	sts	0x1609, r24	; 0x801609 <humidity+0x2>
    3602:	90 93 0a 16 	sts	0x160A, r25	; 0x80160a <humidity+0x3>
			temperature = hih8120_getTemperature();
    3606:	20 d3       	rcall	.+1600   	; 0x3c48 <hih8120_getTemperature>
    3608:	60 93 0b 16 	sts	0x160B, r22	; 0x80160b <temperature>
    360c:	70 93 0c 16 	sts	0x160C, r23	; 0x80160c <temperature+0x1>
    3610:	80 93 0d 16 	sts	0x160D, r24	; 0x80160d <temperature+0x2>
    3614:	90 93 0e 16 	sts	0x160E, r25	; 0x80160e <temperature+0x3>
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <_dataReadyEventGroup>
    3624:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <_dataReadyEventGroup+0x1>
    3628:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
    362c:	a0 cf       	rjmp	.-192    	; 0x356e <tempHum_getDataFromTempHumSensorTask>
			
		}
	}	
		else{
			puts("hahah");
    362e:	8e e9       	ldi	r24, 0x9E	; 158
    3630:	92 e0       	ldi	r25, 0x02	; 2
    3632:	0e 94 56 2d 	call	0x5aac	; 0x5aac <puts>
    3636:	9b cf       	rjmp	.-202    	; 0x356e <tempHum_getDataFromTempHumSensorTask>

00003638 <uplink_lora_setup>:
	NULL );
}


static void uplink_lora_setup(void)
{	
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	64 97       	sbiw	r28, 0x14	; 20
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3656:	80 d4       	rcall	.+2304   	; 0x3f58 <lora_driver_rn2483FactoryReset>
    3658:	fc d6       	rcall	.+3576   	; 0x4452 <lora_driver_mapReturnCodeToText>
    365a:	9f 93       	push	r25
    365c:	8f 93       	push	r24
    365e:	84 ea       	ldi	r24, 0xA4	; 164
    3660:	92 e0       	ldi	r25, 0x02	; 2
    3662:	9f 93       	push	r25
    3664:	8f 93       	push	r24
    3666:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    366a:	f4 d5       	rcall	.+3048   	; 0x4254 <lora_driver_configureToEu868>
    366c:	f2 d6       	rcall	.+3556   	; 0x4452 <lora_driver_mapReturnCodeToText>
    366e:	9f 93       	push	r25
    3670:	8f 93       	push	r24
    3672:	87 eb       	ldi	r24, 0xB7	; 183
    3674:	92 e0       	ldi	r25, 0x02	; 2
    3676:	9f 93       	push	r25
    3678:	8f 93       	push	r24
    367a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    367e:	80 ed       	ldi	r24, 0xD0	; 208
    3680:	92 e0       	ldi	r25, 0x02	; 2
	puts("Try to join1");
    3682:	0e 94 56 2d 	call	0x5aac	; 0x5aac <puts>
    3686:	8e 01       	movw	r16, r28
    3688:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    368a:	1f 4f       	sbci	r17, 0xFF	; 255
    368c:	c8 01       	movw	r24, r16
    368e:	76 d4       	rcall	.+2284   	; 0x3f7c <lora_driver_getRn2483Hweui>
    3690:	e0 d6       	rcall	.+3520   	; 0x4452 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3692:	1f 93       	push	r17
    3694:	0f 93       	push	r16
    3696:	9f 93       	push	r25
    3698:	8f 93       	push	r24
    369a:	8d ed       	ldi	r24, 0xDD	; 221
    369c:	92 e0       	ldi	r25, 0x02	; 2
    369e:	9f 93       	push	r25
    36a0:	8f 93       	push	r24
    36a2:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    36a6:	c8 01       	movw	r24, r16
    36a8:	85 d4       	rcall	.+2314   	; 0x3fb4 <lora_driver_setDeviceIdentifier>
    36aa:	d3 d6       	rcall	.+3494   	; 0x4452 <lora_driver_mapReturnCodeToText>
    36ac:	9f 93       	push	r25
    36ae:	8f 93       	push	r24
    36b0:	1f 93       	push	r17
    36b2:	0f 93       	push	r16
    36b4:	81 ef       	ldi	r24, 0xF1	; 241
    36b6:	92 e0       	ldi	r25, 0x02	; 2
    36b8:	9f 93       	push	r25
    36ba:	8f 93       	push	r24
    36bc:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    36c0:	86 e0       	ldi	r24, 0x06	; 6
    36c2:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join2");
    36c4:	0e 94 56 2d 	call	0x5aac	; 0x5aac <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    36c8:	a8 01       	movw	r20, r16
    36ca:	63 e1       	ldi	r22, 0x13	; 19
    36cc:	73 e0       	ldi	r23, 0x03	; 3
    36ce:	84 e3       	ldi	r24, 0x34	; 52
    36d0:	93 e0       	ldi	r25, 0x03	; 3
    36d2:	9e d6       	rcall	.+3388   	; 0x4410 <lora_driver_setOtaaIdentity>
    36d4:	be d6       	rcall	.+3452   	; 0x4452 <lora_driver_mapReturnCodeToText>
    36d6:	9f 93       	push	r25
    36d8:	8f 93       	push	r24
    36da:	1f 93       	push	r17
    36dc:	0f 93       	push	r16
    36de:	83 e1       	ldi	r24, 0x13	; 19
    36e0:	93 e0       	ldi	r25, 0x03	; 3
    36e2:	9f 93       	push	r25
    36e4:	8f 93       	push	r24
    36e6:	84 e3       	ldi	r24, 0x34	; 52
    36e8:	93 e0       	ldi	r25, 0x03	; 3
    36ea:	9f 93       	push	r25
    36ec:	8f 93       	push	r24
    36ee:	85 e4       	ldi	r24, 0x45	; 69
    36f0:	93 e0       	ldi	r25, 0x03	; 3
    36f2:	9f 93       	push	r25
    36f4:	8f 93       	push	r24
    36f6:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    36fa:	8f d4       	rcall	.+2334   	; 0x401a <lora_driver_saveMac>
    36fc:	aa d6       	rcall	.+3412   	; 0x4452 <lora_driver_mapReturnCodeToText>
    36fe:	9f 93       	push	r25
    3700:	8f 93       	push	r24
    3702:	8b e7       	ldi	r24, 0x7B	; 123
    3704:	93 e0       	ldi	r25, 0x03	; 3
    3706:	9f 93       	push	r25
    3708:	8f 93       	push	r24
    370a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	79 d5       	rcall	.+2802   	; 0x420e <lora_driver_setAdaptiveDataRate>
    371c:	9a d6       	rcall	.+3380   	; 0x4452 <lora_driver_mapReturnCodeToText>
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	8a e8       	ldi	r24, 0x8A	; 138
    3724:	93 e0       	ldi	r25, 0x03	; 3
    3726:	9f 93       	push	r25
    3728:	8f 93       	push	r24
    372a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
	puts("Try to join3");
    372e:	8b ea       	ldi	r24, 0xAB	; 171
    3730:	93 e0       	ldi	r25, 0x03	; 3
    3732:	0e 94 56 2d 	call	0x5aac	; 0x5aac <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3736:	84 ef       	ldi	r24, 0xF4	; 244
    3738:	91 e0       	ldi	r25, 0x01	; 1
    373a:	74 d5       	rcall	.+2792   	; 0x4224 <lora_driver_setReceiveDelay>
    373c:	8a d6       	rcall	.+3348   	; 0x4452 <lora_driver_mapReturnCodeToText>
    373e:	9f 93       	push	r25
    3740:	8f 93       	push	r24
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	8f 93       	push	r24
    3746:	84 ef       	ldi	r24, 0xF4	; 244
    3748:	8f 93       	push	r24
    374a:	88 eb       	ldi	r24, 0xB8	; 184
    374c:	93 e0       	ldi	r25, 0x03	; 3
    374e:	9f 93       	push	r25
    3750:	8f 93       	push	r24
    3752:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3760:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	60 d4       	rcall	.+2240   	; 0x4026 <lora_driver_join>
    3766:	08 2f       	mov	r16, r24
    3768:	74 d6       	rcall	.+3304   	; 0x4452 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    376a:	9f 93       	push	r25
    376c:	8f 93       	push	r24
    376e:	1f 92       	push	r1
    3770:	1f 93       	push	r17
    3772:	88 ed       	ldi	r24, 0xD8	; 216
    3774:	93 e0       	ldi	r25, 0x03	; 3
    3776:	9f 93       	push	r25
    3778:	8f 93       	push	r24
    377a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	08 30       	cpi	r16, 0x08	; 8
    378c:	59 f0       	breq	.+22     	; 0x37a4 <uplink_lora_setup+0x16c>
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	0e 94 1b 28 	call	0x5036	; 0x5036 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3794:	66 e3       	ldi	r22, 0x36	; 54
    3796:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
    37a0:	11 50       	subi	r17, 0x01	; 1
    37a2:	f9 f6       	brne	.-66     	; 0x3762 <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    37a4:	08 30       	cpi	r16, 0x08	; 8
    37a6:	21 f4       	brne	.+8      	; 0x37b0 <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    37ae:	0d c0       	rjmp	.+26     	; 0x37ca <uplink_lora_setup+0x192>
    37b0:	88 ef       	ldi	r24, 0xF8	; 248
		while (1)
		{
			taskYIELD();
		}
	}
}
    37b2:	93 e0       	ldi	r25, 0x03	; 3
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    37b4:	0e 94 56 2d 	call	0x5aac	; 0x5aac <puts>
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	0e 94 0c 28 	call	0x5018	; 0x5018 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    37c4:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    37c8:	fd cf       	rjmp	.-6      	; 0x37c4 <uplink_lora_setup+0x18c>
    37ca:	64 96       	adiw	r28, 0x14	; 20
    37cc:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	08 95       	ret

000037e0 <upLink_create>:
    37e0:	ef 92       	push	r14
    37e2:	ff 92       	push	r15
		lora_Handler_task();
	}
}

void upLink_create(UBaseType_t priority, MessageBufferHandle_t mBuffer)
{
    37e4:	0f 93       	push	r16
    37e6:	9b 01       	movw	r18, r22
	messageBuffer = mBuffer;
    37e8:	70 93 10 16 	sts	0x1610, r23	; 0x801610 <messageBuffer+0x1>
    37ec:	60 93 0f 16 	sts	0x160F, r22	; 0x80160f <messageBuffer>
	
	xTaskCreate(
    37f0:	e1 2c       	mov	r14, r1
    37f2:	f1 2c       	mov	r15, r1
    37f4:	08 2f       	mov	r16, r24
    37f6:	48 e8       	ldi	r20, 0x88	; 136
    37f8:	51 e0       	ldi	r21, 0x01	; 1
    37fa:	63 e0       	ldi	r22, 0x03	; 3
    37fc:	74 e0       	ldi	r23, 0x04	; 4
    37fe:	89 e5       	ldi	r24, 0x59	; 89
    3800:	9c e1       	ldi	r25, 0x1C	; 28
    3802:	0e 94 77 0d 	call	0x1aee	; 0x1aee <xTaskCreate>
	"LoraUpLink",
	configMINIMAL_STACK_SIZE+200,
	(void*)mBuffer,
	priority,
	NULL );
}
    3806:	0f 91       	pop	r16
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	08 95       	ret

0000380e <lora_Handler_task>:
}



void lora_Handler_task()
{
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	00 d0       	rcall	.+0      	; 0x3814 <lora_Handler_task+0x6>
    3814:	1f 92       	push	r1
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	8f d3       	rcall	.+1822   	; 0x3f3c <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    381e:	62 e0       	ldi	r22, 0x02	; 2
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
	lora_driver_resetRn2483(0);
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	87 d3       	rcall	.+1806   	; 0x3f3c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150UL);
    382e:	66 e9       	ldi	r22, 0x96	; 150
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    383a:	39 d3       	rcall	.+1650   	; 0x3eae <lora_driver_flushBuffers>
	uplink_lora_setup();
    383c:	fd de       	rcall	.-518    	; 0x3638 <uplink_lora_setup>
    383e:	e1 e1       	ldi	r30, 0x11	; 17
	_uplink_payload.len = 6;
    3840:	f6 e1       	ldi	r31, 0x16	; 22
    3842:	86 e0       	ldi	r24, 0x06	; 6
    3844:	81 83       	std	Z+1, r24	; 0x01
    3846:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3848:	80 83       	st	Z, r24
    384a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    384e:	69 83       	std	Y+1, r22	; 0x01
    3850:	7a 83       	std	Y+2, r23	; 0x02
    3852:	8b 83       	std	Y+3, r24	; 0x03
    3854:	9c 83       	std	Y+4, r25	; 0x04
    3856:	0f ef       	ldi	r16, 0xFF	; 255
	
	size_t xBytesSent;
	
	
	xBytesSent = xMessageBufferReceive(
    3858:	1f ef       	ldi	r17, 0xFF	; 255
    385a:	98 01       	movw	r18, r16
    385c:	46 e1       	ldi	r20, 0x16	; 22
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	61 e1       	ldi	r22, 0x11	; 17
    3862:	76 e1       	ldi	r23, 0x16	; 22
    3864:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <messageBuffer>
    3868:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <messageBuffer+0x1>
    386c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <xStreamBufferReceive>
    3870:	8c 01       	movw	r16, r24
    3872:	48 ea       	ldi	r20, 0xA8	; 168
	portMAX_DELAY);			// Block until space in buffer


	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3874:	58 e4       	ldi	r21, 0x48	; 72
    3876:	60 e0       	ldi	r22, 0x00	; 0
    3878:	70 e0       	ldi	r23, 0x00	; 0
    387a:	ce 01       	movw	r24, r28
    387c:	01 96       	adiw	r24, 0x01	; 1
    387e:	0e 94 17 10 	call	0x202e	; 0x202e <xTaskDelayUntil>
    3882:	01 15       	cp	r16, r1
		
		if (xBytesSent>0)
    3884:	11 05       	cpc	r17, r1
    3886:	a9 f3       	breq	.-22     	; 0x3872 <lora_Handler_task+0x64>
    3888:	83 e0       	ldi	r24, 0x03	; 3
		{
			//strcpy(_uplink_payload.bytes, xBytesSent);
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    388a:	0e 94 2d 28 	call	0x505a	; 0x505a <status_leds_shortPuls>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    388e:	61 e1       	ldi	r22, 0x11	; 17
    3890:	76 e1       	ldi	r23, 0x16	; 22
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	f1 d3       	rcall	.+2018   	; 0x4078 <lora_driver_sendUploadMessage>
    3896:	dd d5       	rcall	.+3002   	; 0x4452 <lora_driver_mapReturnCodeToText>
    3898:	9f 93       	push	r25
    389a:	8f 93       	push	r24
    389c:	8e e0       	ldi	r24, 0x0E	; 14
    389e:	94 e0       	ldi	r25, 0x04	; 4
    38a0:	9f 93       	push	r25
    38a2:	8f 93       	push	r24
    38a4:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	e0 cf       	rjmp	.-64     	; 0x3872 <lora_Handler_task+0x64>

000038b2 <upLinkHandler_StartTask>:
    38b2:	ad df       	rcall	.-166    	; 0x380e <lora_Handler_task>

000038b4 <Temperature_Humidity_Task>:
//
///*-----------------------------------------------------------*/


void Temperature_Humidity_Task( void *pvParameters )
{
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	ec 01       	movw	r28, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms
	//
	//// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    38ba:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskGetTickCount>
		
		tempHum_getDataFromTempHumSensorTask(pvParameters);
    38be:	ce 01       	movw	r24, r28
    38c0:	56 de       	rcall	.-852    	; 0x356e <tempHum_getDataFromTempHumSensorTask>
		
		
	
}
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret

000038c8 <Application_Task>:
/*-----------------------------------------------------------*/
void Application_Task(void* pvParameters)
{
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	ac 97       	sbiw	r28, 0x2c	; 44
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
	EventBits_t dataReadyEventBits;
	
	
	for (;;)
	{
		xEventGroupSetBits(measureEventGroup,ALL_READY_BITS);
    38dc:	42 e0       	ldi	r20, 0x02	; 2
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <measureEventGroup>
    38e8:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <measureEventGroup+0x1>
    38ec:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
		dataReadyEventBits=xEventGroupWaitBits(dataReadyEventGroup,ALL_MEASURE_BITS,pdTRUE,pdFALSE,portMAX_DELAY);
    38f0:	cc 24       	eor	r12, r12
    38f2:	ca 94       	dec	r12
    38f4:	dc 2c       	mov	r13, r12
    38f6:	76 01       	movw	r14, r12
    38f8:	00 e0       	ldi	r16, 0x00	; 0
    38fa:	21 e0       	ldi	r18, 0x01	; 1
    38fc:	41 e0       	ldi	r20, 0x01	; 1
    38fe:	50 e0       	ldi	r21, 0x00	; 0
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <dataReadyEventGroup>
    3908:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <dataReadyEventGroup+0x1>
    390c:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		if ((dataReadyEventBits & ALL_MEASURE_BITS  )==ALL_MEASURE_BITS)
    3910:	60 ff       	sbrs	r22, 0
    3912:	1e c0       	rjmp	.+60     	; 0x3950 <Application_Task+0x88>
		{
			setCO2Ppm(1050);
    3914:	8a e1       	ldi	r24, 0x1A	; 26
    3916:	94 e0       	ldi	r25, 0x04	; 4
    3918:	9c dd       	rcall	.-1224   	; 0x3452 <setCO2Ppm>
			setTemperatureData(get_temperature_data());
    391a:	07 de       	rcall	.-1010   	; 0x352a <get_temperature_data>
    391c:	a1 dd       	rcall	.-1214   	; 0x3460 <setTemperatureData>
			printf("Temperature data ---> %d ",get_temperature_data());
    391e:	05 de       	rcall	.-1014   	; 0x352a <get_temperature_data>
    3920:	9f 93       	push	r25
    3922:	8f 93       	push	r24
    3924:	83 e2       	ldi	r24, 0x23	; 35
    3926:	94 e0       	ldi	r25, 0x04	; 4
    3928:	9f 93       	push	r25
    392a:	8f 93       	push	r24
    392c:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
			setHumidityData(get_humidity_data());
    3930:	07 de       	rcall	.-1010   	; 0x3540 <get_humidity_data>
    3932:	9d dd       	rcall	.-1222   	; 0x346e <setHumidityData>
    3934:	05 de       	rcall	.-1014   	; 0x3540 <get_humidity_data>
			printf(" Humidity data ----> %d ",get_humidity_data());
    3936:	9f 93       	push	r25
    3938:	8f 93       	push	r24
    393a:	8d e3       	ldi	r24, 0x3D	; 61
    393c:	94 e0       	ldi	r25, 0x04	; 4
    393e:	9f 93       	push	r25
    3940:	8f 93       	push	r24
    3942:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <printf>
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	62 e0       	ldi	r22, 0x02	; 2
		}

		payload=getLoRaPayload((uint8_t)2);
    3952:	ce 01       	movw	r24, r28
    3954:	47 96       	adiw	r24, 0x17	; 23
    3956:	92 dd       	rcall	.-1244   	; 0x347c <getLoRaPayload>
    3958:	86 e1       	ldi	r24, 0x16	; 22
    395a:	fe 01       	movw	r30, r28
    395c:	77 96       	adiw	r30, 0x17	; 23
    395e:	de 01       	movw	r26, r28
    3960:	11 96       	adiw	r26, 0x01	; 1
    3962:	01 90       	ld	r0, Z+
    3964:	0d 92       	st	X+, r0
    3966:	8a 95       	dec	r24
    3968:	e1 f7       	brne	.-8      	; 0x3962 <Application_Task+0x9a>
    396a:	63 e0       	ldi	r22, 0x03	; 3
    396c:	70 e0       	ldi	r23, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(50UL));
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
    3976:	0f ef       	ldi	r16, 0xFF	; 255
    3978:	1f ef       	ldi	r17, 0xFF	; 255
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    397a:	98 01       	movw	r18, r16
    397c:	46 e1       	ldi	r20, 0x16	; 22
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	be 01       	movw	r22, r28
    3982:	6f 5f       	subi	r22, 0xFF	; 255
    3984:	7f 4f       	sbci	r23, 0xFF	; 255
    3986:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <xMessageBuffer>
    398a:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <xMessageBuffer+0x1>
    398e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <xStreamBufferSend>
    3992:	a4 cf       	rjmp	.-184    	; 0x38dc <Application_Task+0x14>

00003994 <create_tasks_and_semaphores>:
    3994:	ef 92       	push	r14
	}
    3996:	ff 92       	push	r15
 EventBits_t measureEventGroup;
EventBits_t dataReadyEventGroup;
/*-----------------------------------------------------------*/

void create_tasks_and_semaphores(void)
{
    3998:	0f 93       	push	r16
	xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    399a:	41 e0       	ldi	r20, 0x01	; 1
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	84 e6       	ldi	r24, 0x64	; 100
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xStreamBufferGenericCreate>
    39a8:	90 93 5a 17 	sts	0x175A, r25	; 0x80175a <xMessageBuffer+0x1>
    39ac:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <xMessageBuffer>
	
	SensorDataPackage_create();
    39b0:	36 dd       	rcall	.-1428   	; 0x341e <SensorDataPackage_create>
	measureEventGroup=xEventGroupCreate();
    39b2:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    39b6:	09 2e       	mov	r0, r25
    39b8:	00 0c       	add	r0, r0
    39ba:	aa 0b       	sbc	r26, r26
    39bc:	bb 0b       	sbc	r27, r27
    39be:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <measureEventGroup>
    39c2:	90 93 60 17 	sts	0x1760, r25	; 0x801760 <measureEventGroup+0x1>
    39c6:	a0 93 61 17 	sts	0x1761, r26	; 0x801761 <measureEventGroup+0x2>
    39ca:	b0 93 62 17 	sts	0x1762, r27	; 0x801762 <measureEventGroup+0x3>
	dataReadyEventGroup=xEventGroupCreate();
    39ce:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    39d2:	ac 01       	movw	r20, r24
    39d4:	09 2e       	mov	r0, r25
    39d6:	00 0c       	add	r0, r0
    39d8:	66 0b       	sbc	r22, r22
    39da:	77 0b       	sbc	r23, r23
    39dc:	40 93 5b 17 	sts	0x175B, r20	; 0x80175b <dataReadyEventGroup>
    39e0:	50 93 5c 17 	sts	0x175C, r21	; 0x80175c <dataReadyEventGroup+0x1>
    39e4:	60 93 5d 17 	sts	0x175D, r22	; 0x80175d <dataReadyEventGroup+0x2>
    39e8:	70 93 5e 17 	sts	0x175E, r23	; 0x80175e <dataReadyEventGroup+0x3>
	Temp_Humidty_sensor_create(measureEventGroup,dataReadyEventGroup);
    39ec:	bc 01       	movw	r22, r24
    39ee:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <measureEventGroup>
    39f2:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <measureEventGroup+0x1>
    39f6:	67 dd       	rcall	.-1330   	; 0x34c6 <Temp_Humidty_sensor_create>
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    39f8:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <xTestSemaphore>
    39fc:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <xTestSemaphore+0x1>
    3a00:	89 2b       	or	r24, r25
    3a02:	89 f4       	brne	.+34     	; 0x3a26 <create_tasks_and_semaphores+0x92>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	0e 94 3d 07 	call	0xe7a	; 0xe7a <xQueueCreateMutex>
    3a0a:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <xTestSemaphore+0x1>
    3a0e:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3a12:	00 97       	sbiw	r24, 0x00	; 0
    3a14:	41 f0       	breq	.+16     	; 0x3a26 <create_tasks_and_semaphores+0x92>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3a16:	00 e0       	ldi	r16, 0x00	; 0
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	a9 01       	movw	r20, r18
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	0e 94 99 06 	call	0xd32	; 0xd32 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    3a26:	e1 2c       	mov	r14, r1
    3a28:	f1 2c       	mov	r15, r1
    3a2a:	03 e0       	ldi	r16, 0x03	; 3
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 ec       	ldi	r20, 0xC0	; 192
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	66 e5       	ldi	r22, 0x56	; 86
    3a36:	74 e0       	ldi	r23, 0x04	; 4
    3a38:	84 e6       	ldi	r24, 0x64	; 100
    3a3a:	9c e1       	ldi	r25, 0x1C	; 28
    3a3c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
xTaskCreate(
    3a40:	01 e0       	ldi	r16, 0x01	; 1
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 ec       	ldi	r20, 0xC0	; 192
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	62 e6       	ldi	r22, 0x62	; 98
    3a4c:	74 e0       	ldi	r23, 0x04	; 4
    3a4e:	8a e5       	ldi	r24, 0x5A	; 90
    3a50:	9c e1       	ldi	r25, 0x1C	; 28
    3a52:	0e 94 77 0d 	call	0x1aee	; 0x1aee <xTaskCreate>
	,  1 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	
	
}
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	08 95       	ret

00003a5e <initialiseSystem>:
	
}
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3a5e:	81 b1       	in	r24, 0x01	; 1
    3a60:	81 68       	ori	r24, 0x81	; 129
    3a62:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <stdio_initialise>
	// Let's create some tasks
	
    tempHum_init();
    3a6a:	75 dd       	rcall	.-1302   	; 0x3556 <tempHum_init>
	puts("Task0");
    3a6c:	87 e7       	ldi	r24, 0x77	; 119
    3a6e:	94 e0       	ldi	r25, 0x04	; 4
    3a70:	0e 94 56 2d 	call	0x5aac	; 0x5aac <puts>
	create_tasks_and_semaphores();
    3a74:	8f df       	rcall	.-226    	; 0x3994 <create_tasks_and_semaphores>
       // Always check what hih8120_initialise() returns
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3a76:	85 e0       	ldi	r24, 0x05	; 5
    3a78:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	1c d2       	rcall	.+1080   	; 0x3ebc <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
upLink_create(4,xMessageBuffer);
    3a84:	60 91 59 17 	lds	r22, 0x1759	; 0x801759 <xMessageBuffer>
    3a88:	70 91 5a 17 	lds	r23, 0x175A	; 0x80175a <xMessageBuffer+0x1>
    3a8c:	84 e0       	ldi	r24, 0x04	; 4
    3a8e:	a8 ce       	rjmp	.-688    	; 0x37e0 <upLink_create>
    3a90:	08 95       	ret

00003a92 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3a92:	e5 df       	rcall	.-54     	; 0x3a5e <initialiseSystem>
	//printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3a94:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <vTaskStartScheduler>

	/* Replace with your application code */
	
}
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	08 95       	ret

00003a9e <__fixunssfsi>:
    3a9e:	33 d0       	rcall	.+102    	; 0x3b06 <__fp_splitA>
    3aa0:	88 f0       	brcs	.+34     	; 0x3ac4 <__fixunssfsi+0x26>
    3aa2:	9f 57       	subi	r25, 0x7F	; 127
    3aa4:	90 f0       	brcs	.+36     	; 0x3aca <__fixunssfsi+0x2c>
    3aa6:	b9 2f       	mov	r27, r25
    3aa8:	99 27       	eor	r25, r25
    3aaa:	b7 51       	subi	r27, 0x17	; 23
    3aac:	a0 f0       	brcs	.+40     	; 0x3ad6 <__fixunssfsi+0x38>
    3aae:	d1 f0       	breq	.+52     	; 0x3ae4 <__fixunssfsi+0x46>
    3ab0:	66 0f       	add	r22, r22
    3ab2:	77 1f       	adc	r23, r23
    3ab4:	88 1f       	adc	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	1a f0       	brmi	.+6      	; 0x3ac0 <__fixunssfsi+0x22>
    3aba:	ba 95       	dec	r27
    3abc:	c9 f7       	brne	.-14     	; 0x3ab0 <__fixunssfsi+0x12>
    3abe:	12 c0       	rjmp	.+36     	; 0x3ae4 <__fixunssfsi+0x46>
    3ac0:	b1 30       	cpi	r27, 0x01	; 1
    3ac2:	81 f0       	breq	.+32     	; 0x3ae4 <__fixunssfsi+0x46>
    3ac4:	3a d0       	rcall	.+116    	; 0x3b3a <__fp_zero>
    3ac6:	b1 e0       	ldi	r27, 0x01	; 1
    3ac8:	08 95       	ret
    3aca:	37 c0       	rjmp	.+110    	; 0x3b3a <__fp_zero>
    3acc:	67 2f       	mov	r22, r23
    3ace:	78 2f       	mov	r23, r24
    3ad0:	88 27       	eor	r24, r24
    3ad2:	b8 5f       	subi	r27, 0xF8	; 248
    3ad4:	39 f0       	breq	.+14     	; 0x3ae4 <__fixunssfsi+0x46>
    3ad6:	b9 3f       	cpi	r27, 0xF9	; 249
    3ad8:	cc f3       	brlt	.-14     	; 0x3acc <__fixunssfsi+0x2e>
    3ada:	86 95       	lsr	r24
    3adc:	77 95       	ror	r23
    3ade:	67 95       	ror	r22
    3ae0:	b3 95       	inc	r27
    3ae2:	d9 f7       	brne	.-10     	; 0x3ada <__fixunssfsi+0x3c>
    3ae4:	3e f4       	brtc	.+14     	; 0x3af4 <__fixunssfsi+0x56>
    3ae6:	90 95       	com	r25
    3ae8:	80 95       	com	r24
    3aea:	70 95       	com	r23
    3aec:	61 95       	neg	r22
    3aee:	7f 4f       	sbci	r23, 0xFF	; 255
    3af0:	8f 4f       	sbci	r24, 0xFF	; 255
    3af2:	9f 4f       	sbci	r25, 0xFF	; 255
    3af4:	08 95       	ret

00003af6 <__fp_split3>:
    3af6:	57 fd       	sbrc	r21, 7
    3af8:	90 58       	subi	r25, 0x80	; 128
    3afa:	44 0f       	add	r20, r20
    3afc:	55 1f       	adc	r21, r21
    3afe:	59 f0       	breq	.+22     	; 0x3b16 <__fp_splitA+0x10>
    3b00:	5f 3f       	cpi	r21, 0xFF	; 255
    3b02:	71 f0       	breq	.+28     	; 0x3b20 <__fp_splitA+0x1a>
    3b04:	47 95       	ror	r20

00003b06 <__fp_splitA>:
    3b06:	88 0f       	add	r24, r24
    3b08:	97 fb       	bst	r25, 7
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	61 f0       	breq	.+24     	; 0x3b26 <__fp_splitA+0x20>
    3b0e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b10:	79 f0       	breq	.+30     	; 0x3b30 <__fp_splitA+0x2a>
    3b12:	87 95       	ror	r24
    3b14:	08 95       	ret
    3b16:	12 16       	cp	r1, r18
    3b18:	13 06       	cpc	r1, r19
    3b1a:	14 06       	cpc	r1, r20
    3b1c:	55 1f       	adc	r21, r21
    3b1e:	f2 cf       	rjmp	.-28     	; 0x3b04 <__fp_split3+0xe>
    3b20:	46 95       	lsr	r20
    3b22:	f1 df       	rcall	.-30     	; 0x3b06 <__fp_splitA>
    3b24:	08 c0       	rjmp	.+16     	; 0x3b36 <__fp_splitA+0x30>
    3b26:	16 16       	cp	r1, r22
    3b28:	17 06       	cpc	r1, r23
    3b2a:	18 06       	cpc	r1, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	f1 cf       	rjmp	.-30     	; 0x3b12 <__fp_splitA+0xc>
    3b30:	86 95       	lsr	r24
    3b32:	71 05       	cpc	r23, r1
    3b34:	61 05       	cpc	r22, r1
    3b36:	08 94       	sec
    3b38:	08 95       	ret

00003b3a <__fp_zero>:
    3b3a:	e8 94       	clt

00003b3c <__fp_szero>:
    3b3c:	bb 27       	eor	r27, r27
    3b3e:	66 27       	eor	r22, r22
    3b40:	77 27       	eor	r23, r23
    3b42:	cb 01       	movw	r24, r22
    3b44:	97 f9       	bld	r25, 7
    3b46:	08 95       	ret

00003b48 <_hihTwiCallback>:
    3b48:	65 30       	cpi	r22, 0x05	; 5
    3b4a:	f1 f4       	brne	.+60     	; 0x3b88 <_hihTwiCallback+0x40>
    3b4c:	fa 01       	movw	r30, r20
    3b4e:	80 81       	ld	r24, Z
    3b50:	8f 73       	andi	r24, 0x3F	; 63
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	98 2f       	mov	r25, r24
    3b56:	88 27       	eor	r24, r24
    3b58:	21 81       	ldd	r18, Z+1	; 0x01
    3b5a:	82 2b       	or	r24, r18
    3b5c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3b60:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3b64:	82 81       	ldd	r24, Z+2	; 0x02
    3b66:	f0 e4       	ldi	r31, 0x40	; 64
    3b68:	8f 9f       	mul	r24, r31
    3b6a:	c0 01       	movw	r24, r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	fa 01       	movw	r30, r20
    3b70:	23 81       	ldd	r18, Z+3	; 0x03
    3b72:	26 95       	lsr	r18
    3b74:	26 95       	lsr	r18
    3b76:	82 2b       	or	r24, r18
    3b78:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3b7c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	80 93 27 16 	sts	0x1627, r24	; 0x801627 <_measuringIsReady>
    3b86:	08 95       	ret
    3b88:	64 30       	cpi	r22, 0x04	; 4
    3b8a:	51 f0       	breq	.+20     	; 0x3ba0 <_hihTwiCallback+0x58>
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e4       	ldi	r25, 0x40	; 64
    3b90:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3b94:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3b98:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3b9c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3ba0:	08 95       	ret

00003ba2 <hih8120_initialise>:
    3ba2:	0f 93       	push	r16
    3ba4:	1f 93       	push	r17
    3ba6:	04 ea       	ldi	r16, 0xA4	; 164
    3ba8:	1d e1       	ldi	r17, 0x1D	; 29
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	34 e2       	ldi	r19, 0x24	; 36
    3bae:	44 ef       	ldi	r20, 0xF4	; 244
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	87 e2       	ldi	r24, 0x27	; 39
    3bb6:	0e 94 4f 28 	call	0x509e	; 0x509e <twiCreate>
    3bba:	90 93 29 16 	sts	0x1629, r25	; 0x801629 <_hih8120Handler+0x1>
    3bbe:	80 93 28 16 	sts	0x1628, r24	; 0x801628 <_hih8120Handler>
    3bc2:	21 e0       	ldi	r18, 0x01	; 1
    3bc4:	89 2b       	or	r24, r25
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <hih8120_initialise+0x28>
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	82 2f       	mov	r24, r18
    3bcc:	1f 91       	pop	r17
    3bce:	0f 91       	pop	r16
    3bd0:	08 95       	ret

00003bd2 <hih8120_wakeup>:
    3bd2:	80 91 28 16 	lds	r24, 0x1628	; 0x801628 <_hih8120Handler>
    3bd6:	90 91 29 16 	lds	r25, 0x1629	; 0x801629 <_hih8120Handler+0x1>
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	59 f0       	breq	.+22     	; 0x3bf4 <hih8120_wakeup+0x22>
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	0e 94 a0 28 	call	0x5140	; 0x5140 <twiTransmit>
    3be8:	84 30       	cpi	r24, 0x04	; 4
    3bea:	31 f4       	brne	.+12     	; 0x3bf8 <hih8120_wakeup+0x26>
    3bec:	10 92 27 16 	sts	0x1627, r1	; 0x801627 <_measuringIsReady>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	08 95       	ret
    3bf4:	82 e0       	ldi	r24, 0x02	; 2
    3bf6:	08 95       	ret
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	08 95       	ret

00003bfc <hih8120_measure>:
    3bfc:	80 91 28 16 	lds	r24, 0x1628	; 0x801628 <_hih8120Handler>
    3c00:	90 91 29 16 	lds	r25, 0x1629	; 0x801629 <_hih8120Handler+0x1>
    3c04:	00 97       	sbiw	r24, 0x00	; 0
    3c06:	39 f0       	breq	.+14     	; 0x3c16 <hih8120_measure+0x1a>
    3c08:	64 e0       	ldi	r22, 0x04	; 4
    3c0a:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <twiReceive>
    3c0e:	85 30       	cpi	r24, 0x05	; 5
    3c10:	21 f0       	breq	.+8      	; 0x3c1a <hih8120_measure+0x1e>
    3c12:	83 e0       	ldi	r24, 0x03	; 3
    3c14:	08 95       	ret
    3c16:	82 e0       	ldi	r24, 0x02	; 2
    3c18:	08 95       	ret
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	08 95       	ret

00003c1e <hih8120_getHumidity>:
    3c1e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3c22:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 ca 2a 	call	0x5594	; 0x5594 <__floatunsisf>
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	48 ec       	ldi	r20, 0xC8	; 200
    3c34:	52 e4       	ldi	r21, 0x42	; 66
    3c36:	0e 94 2f 2b 	call	0x565e	; 0x565e <__mulsf3>
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	38 ef       	ldi	r19, 0xF8	; 248
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	56 e4       	ldi	r21, 0x46	; 70
    3c42:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <__divsf3>
    3c46:	08 95       	ret

00003c48 <hih8120_getTemperature>:
    3c48:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3c4c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	0e 94 ca 2a 	call	0x5594	; 0x5594 <__floatunsisf>
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	45 e2       	ldi	r20, 0x25	; 37
    3c5e:	53 e4       	ldi	r21, 0x43	; 67
    3c60:	0e 94 2f 2b 	call	0x565e	; 0x565e <__mulsf3>
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	38 ef       	ldi	r19, 0xF8	; 248
    3c68:	4f e7       	ldi	r20, 0x7F	; 127
    3c6a:	56 e4       	ldi	r21, 0x46	; 70
    3c6c:	0e 94 5f 2a 	call	0x54be	; 0x54be <__divsf3>
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 e2       	ldi	r20, 0x20	; 32
    3c76:	52 e4       	ldi	r21, 0x42	; 66
    3c78:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__subsf3>
    3c7c:	08 95       	ret

00003c7e <_serialCallBack>:
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	1f 92       	push	r1
    3c88:	1f 92       	push	r1
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	8c 01       	movw	r16, r24
    3c90:	19 82       	std	Y+1, r1	; 0x01
    3c92:	2d c0       	rjmp	.+90     	; 0x3cee <_serialCallBack+0x70>
    3c94:	e0 91 61 16 	lds	r30, 0x1661	; 0x801661 <rec_buf_inp.2878>
    3c98:	ec 32       	cpi	r30, 0x2C	; 44
    3c9a:	50 f4       	brcc	.+20     	; 0x3cb0 <_serialCallBack+0x32>
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	8e 0f       	add	r24, r30
    3ca0:	80 93 61 16 	sts	0x1661, r24	; 0x801661 <rec_buf_inp.2878>
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	ed 56       	subi	r30, 0x6D	; 109
    3ca8:	f9 4e       	sbci	r31, 0xE9	; 233
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	80 83       	st	Z, r24
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <_serialCallBack+0x36>
    3cb0:	10 92 61 16 	sts	0x1661, r1	; 0x801661 <rec_buf_inp.2878>
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb6:	8a 30       	cpi	r24, 0x0A	; 10
    3cb8:	d1 f4       	brne	.+52     	; 0x3cee <_serialCallBack+0x70>
    3cba:	40 91 61 16 	lds	r20, 0x1661	; 0x801661 <rec_buf_inp.2878>
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	fa 01       	movw	r30, r20
    3cc2:	ef 56       	subi	r30, 0x6F	; 111
    3cc4:	f9 4e       	sbci	r31, 0xE9	; 233
    3cc6:	10 82       	st	Z, r1
    3cc8:	41 50       	subi	r20, 0x01	; 1
    3cca:	51 09       	sbc	r21, r1
    3ccc:	9e 01       	movw	r18, r28
    3cce:	2f 5f       	subi	r18, 0xFF	; 255
    3cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd2:	63 e9       	ldi	r22, 0x93	; 147
    3cd4:	76 e1       	ldi	r23, 0x16	; 22
    3cd6:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <_serialReplyBufferHandle>
    3cda:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <_serialReplyBufferHandle+0x1>
    3cde:	0e 94 99 0a 	call	0x1532	; 0x1532 <xStreamBufferSendFromISR>
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	81 11       	cpse	r24, r1
    3ce6:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    3cea:	10 92 61 16 	sts	0x1661, r1	; 0x801661 <rec_buf_inp.2878>
    3cee:	be 01       	movw	r22, r28
    3cf0:	6e 5f       	subi	r22, 0xFE	; 254
    3cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf4:	c8 01       	movw	r24, r16
    3cf6:	50 d5       	rcall	.+2720   	; 0x4798 <serial_getByte>
    3cf8:	88 23       	and	r24, r24
    3cfa:	61 f2       	breq	.-104    	; 0x3c94 <_serialCallBack+0x16>
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	08 95       	ret

00003d0a <_uploadMessage>:
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	8c 01       	movw	r16, r24
    3d14:	eb 01       	movw	r28, r22
    3d16:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <_serialReplyBufferHandle>
    3d1a:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <_serialReplyBufferHandle+0x1>
    3d1e:	0e 94 a4 09 	call	0x1348	; 0x1348 <xStreamBufferReset>
    3d22:	b8 01       	movw	r22, r16
    3d24:	8a e2       	ldi	r24, 0x2A	; 42
    3d26:	96 e1       	ldi	r25, 0x16	; 22
    3d28:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <strcpy>
    3d2c:	20 97       	sbiw	r28, 0x00	; 0
    3d2e:	79 f0       	breq	.+30     	; 0x3d4e <_uploadMessage+0x44>
    3d30:	ea e2       	ldi	r30, 0x2A	; 42
    3d32:	f6 e1       	ldi	r31, 0x16	; 22
    3d34:	01 90       	ld	r0, Z+
    3d36:	00 20       	and	r0, r0
    3d38:	e9 f7       	brne	.-6      	; 0x3d34 <_uploadMessage+0x2a>
    3d3a:	31 97       	sbiw	r30, 0x01	; 1
    3d3c:	80 e2       	ldi	r24, 0x20	; 32
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	91 83       	std	Z+1, r25	; 0x01
    3d42:	80 83       	st	Z, r24
    3d44:	be 01       	movw	r22, r28
    3d46:	8a e2       	ldi	r24, 0x2A	; 42
    3d48:	96 e1       	ldi	r25, 0x16	; 22
    3d4a:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <strcat>
    3d4e:	ea e2       	ldi	r30, 0x2A	; 42
    3d50:	f6 e1       	ldi	r31, 0x16	; 22
    3d52:	df 01       	movw	r26, r30
    3d54:	0d 90       	ld	r0, X+
    3d56:	00 20       	and	r0, r0
    3d58:	e9 f7       	brne	.-6      	; 0x3d54 <_uploadMessage+0x4a>
    3d5a:	11 97       	sbiw	r26, 0x01	; 1
    3d5c:	8d e0       	ldi	r24, 0x0D	; 13
    3d5e:	9a e0       	ldi	r25, 0x0A	; 10
    3d60:	11 96       	adiw	r26, 0x01	; 1
    3d62:	9c 93       	st	X, r25
    3d64:	8e 93       	st	-X, r24
    3d66:	12 96       	adiw	r26, 0x02	; 2
    3d68:	1c 92       	st	X, r1
    3d6a:	01 90       	ld	r0, Z+
    3d6c:	00 20       	and	r0, r0
    3d6e:	e9 f7       	brne	.-6      	; 0x3d6a <_uploadMessage+0x60>
    3d70:	31 97       	sbiw	r30, 0x01	; 1
    3d72:	ea 52       	subi	r30, 0x2A	; 42
    3d74:	f6 41       	sbci	r31, 0x16	; 22
    3d76:	ae 2f       	mov	r26, r30
    3d78:	8a e2       	ldi	r24, 0x2A	; 42
    3d7a:	96 e1       	ldi	r25, 0x16	; 22
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	6a 2f       	mov	r22, r26
    3d80:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <_rn2483_serial>
    3d84:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <_rn2483_serial+0x1>
    3d88:	b2 d4       	rcall	.+2404   	; 0x46ee <serial_sendBytes>
    3d8a:	81 11       	cpse	r24, r1
    3d8c:	11 c0       	rjmp	.+34     	; 0x3db0 <_uploadMessage+0xa6>
    3d8e:	08 e2       	ldi	r16, 0x28	; 40
    3d90:	15 e0       	ldi	r17, 0x05	; 5
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4d e2       	ldi	r20, 0x2D	; 45
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	6d ee       	ldi	r22, 0xED	; 237
    3d9c:	76 e1       	ldi	r23, 0x16	; 22
    3d9e:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <_serialReplyBufferHandle>
    3da2:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <_serialReplyBufferHandle+0x1>
    3da6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <xStreamBufferReceive>
    3daa:	8d ee       	ldi	r24, 0xED	; 237
    3dac:	96 e1       	ldi	r25, 0x16	; 22
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <_uploadMessage+0xaa>
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	08 95       	ret

00003dbe <_reply2ReturnCode>:
    3dbe:	2f 92       	push	r2
    3dc0:	3f 92       	push	r3
    3dc2:	4f 92       	push	r4
    3dc4:	5f 92       	push	r5
    3dc6:	6f 92       	push	r6
    3dc8:	7f 92       	push	r7
    3dca:	8f 92       	push	r8
    3dcc:	9f 92       	push	r9
    3dce:	af 92       	push	r10
    3dd0:	bf 92       	push	r11
    3dd2:	cf 92       	push	r12
    3dd4:	df 92       	push	r13
    3dd6:	ef 92       	push	r14
    3dd8:	ff 92       	push	r15
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	5c 01       	movw	r10, r24
    3de4:	fc 01       	movw	r30, r24
    3de6:	01 90       	ld	r0, Z+
    3de8:	00 20       	and	r0, r0
    3dea:	e9 f7       	brne	.-6      	; 0x3de6 <_reply2ReturnCode+0x28>
    3dec:	31 97       	sbiw	r30, 0x01	; 1
    3dee:	6f 01       	movw	r12, r30
    3df0:	c8 1a       	sub	r12, r24
    3df2:	d9 0a       	sbc	r13, r25
    3df4:	5c 2c       	mov	r5, r12
    3df6:	0f 2e       	mov	r0, r31
    3df8:	f6 e1       	ldi	r31, 0x16	; 22
    3dfa:	8f 2e       	mov	r8, r31
    3dfc:	f7 e0       	ldi	r31, 0x07	; 7
    3dfe:	9f 2e       	mov	r9, r31
    3e00:	f0 2d       	mov	r31, r0
    3e02:	e1 2c       	mov	r14, r1
    3e04:	f1 2c       	mov	r15, r1
    3e06:	4c 2c       	mov	r4, r12
    3e08:	37 01       	movw	r6, r14
    3e0a:	f4 01       	movw	r30, r8
    3e0c:	01 81       	ldd	r16, Z+1	; 0x01
    3e0e:	12 81       	ldd	r17, Z+2	; 0x02
    3e10:	e8 01       	movw	r28, r16
    3e12:	09 90       	ld	r0, Y+
    3e14:	00 20       	and	r0, r0
    3e16:	e9 f7       	brne	.-6      	; 0x3e12 <_reply2ReturnCode+0x54>
    3e18:	21 97       	sbiw	r28, 0x01	; 1
    3e1a:	c0 1b       	sub	r28, r16
    3e1c:	d1 0b       	sbc	r29, r17
    3e1e:	3c 2e       	mov	r3, r28
    3e20:	f9 e0       	ldi	r31, 0x09	; 9
    3e22:	cf 16       	cp	r12, r31
    3e24:	d1 04       	cpc	r13, r1
    3e26:	58 f0       	brcs	.+22     	; 0x3e3e <_reply2ReturnCode+0x80>
    3e28:	f4 01       	movw	r30, r8
    3e2a:	20 80       	ld	r2, Z
    3e2c:	fe e0       	ldi	r31, 0x0E	; 14
    3e2e:	2f 12       	cpse	r2, r31
    3e30:	06 c0       	rjmp	.+12     	; 0x3e3e <_reply2ReturnCode+0x80>
    3e32:	b8 01       	movw	r22, r16
    3e34:	c5 01       	movw	r24, r10
    3e36:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <strcasestr>
    3e3a:	89 2b       	or	r24, r25
    3e3c:	09 f5       	brne	.+66     	; 0x3e80 <_reply2ReturnCode+0xc2>
    3e3e:	44 2d       	mov	r20, r4
    3e40:	35 14       	cp	r3, r5
    3e42:	08 f4       	brcc	.+2      	; 0x3e46 <_reply2ReturnCode+0x88>
    3e44:	4c 2f       	mov	r20, r28
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	b8 01       	movw	r22, r16
    3e4a:	c5 01       	movw	r24, r10
    3e4c:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <strncasecmp>
    3e50:	89 2b       	or	r24, r25
    3e52:	49 f4       	brne	.+18     	; 0x3e66 <_reply2ReturnCode+0xa8>
    3e54:	f3 01       	movw	r30, r6
    3e56:	ee 0f       	add	r30, r30
    3e58:	ff 1f       	adc	r31, r31
    3e5a:	e6 0d       	add	r30, r6
    3e5c:	f7 1d       	adc	r31, r7
    3e5e:	ea 5e       	subi	r30, 0xEA	; 234
    3e60:	f8 4f       	sbci	r31, 0xF8	; 248
    3e62:	20 80       	ld	r2, Z
    3e64:	0d c0       	rjmp	.+26     	; 0x3e80 <_reply2ReturnCode+0xc2>
    3e66:	8f ef       	ldi	r24, 0xFF	; 255
    3e68:	e8 1a       	sub	r14, r24
    3e6a:	f8 0a       	sbc	r15, r24
    3e6c:	e3 e0       	ldi	r30, 0x03	; 3
    3e6e:	8e 0e       	add	r8, r30
    3e70:	91 1c       	adc	r9, r1
    3e72:	f1 e1       	ldi	r31, 0x11	; 17
    3e74:	ef 16       	cp	r14, r31
    3e76:	f1 04       	cpc	r15, r1
    3e78:	39 f6       	brne	.-114    	; 0x3e08 <_reply2ReturnCode+0x4a>
    3e7a:	68 94       	set
    3e7c:	22 24       	eor	r2, r2
    3e7e:	24 f8       	bld	r2, 4
    3e80:	82 2d       	mov	r24, r2
    3e82:	df 91       	pop	r29
    3e84:	cf 91       	pop	r28
    3e86:	1f 91       	pop	r17
    3e88:	0f 91       	pop	r16
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	bf 90       	pop	r11
    3e94:	af 90       	pop	r10
    3e96:	9f 90       	pop	r9
    3e98:	8f 90       	pop	r8
    3e9a:	7f 90       	pop	r7
    3e9c:	6f 90       	pop	r6
    3e9e:	5f 90       	pop	r5
    3ea0:	4f 90       	pop	r4
    3ea2:	3f 90       	pop	r3
    3ea4:	2f 90       	pop	r2
    3ea6:	08 95       	ret

00003ea8 <_uploadMessageRc>:
    3ea8:	30 df       	rcall	.-416    	; 0x3d0a <_uploadMessage>
    3eaa:	89 cf       	rjmp	.-238    	; 0x3dbe <_reply2ReturnCode>
    3eac:	08 95       	ret

00003eae <lora_driver_flushBuffers>:
    3eae:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <_serialReplyBufferHandle>
    3eb2:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <_serialReplyBufferHandle+0x1>
    3eb6:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <xStreamBufferReset>
    3eba:	08 95       	ret

00003ebc <lora_driver_initialise>:
    3ebc:	8f 92       	push	r8
    3ebe:	9f 92       	push	r9
    3ec0:	af 92       	push	r10
    3ec2:	cf 92       	push	r12
    3ec4:	ef 92       	push	r14
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	cf 93       	push	r28
    3ecc:	c8 2f       	mov	r28, r24
    3ece:	8b 01       	movw	r16, r22
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	88 ec       	ldi	r24, 0xC8	; 200
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xStreamBufferGenericCreate>
    3ede:	90 93 65 16 	sts	0x1665, r25	; 0x801665 <_serialReplyBufferHandle+0x1>
    3ee2:	80 93 64 16 	sts	0x1664, r24	; 0x801664 <_serialReplyBufferHandle>
    3ee6:	10 93 63 16 	sts	0x1663, r17	; 0x801663 <_downlinkMessageBuffer+0x1>
    3eea:	00 93 62 16 	sts	0x1662, r16	; 0x801662 <_downlinkMessageBuffer>
    3eee:	0f 2e       	mov	r0, r31
    3ef0:	ff e3       	ldi	r31, 0x3F	; 63
    3ef2:	8f 2e       	mov	r8, r31
    3ef4:	fe e1       	ldi	r31, 0x1E	; 30
    3ef6:	9f 2e       	mov	r9, r31
    3ef8:	f0 2d       	mov	r31, r0
    3efa:	68 94       	set
    3efc:	aa 24       	eor	r10, r10
    3efe:	a6 f8       	bld	r10, 6
    3f00:	68 94       	set
    3f02:	cc 24       	eor	r12, r12
    3f04:	c6 f8       	bld	r12, 6
    3f06:	e1 2c       	mov	r14, r1
    3f08:	00 e0       	ldi	r16, 0x00	; 0
    3f0a:	23 e0       	ldi	r18, 0x03	; 3
    3f0c:	40 e0       	ldi	r20, 0x00	; 0
    3f0e:	51 ee       	ldi	r21, 0xE1	; 225
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	8c 2f       	mov	r24, r28
    3f16:	1e d3       	rcall	.+1596   	; 0x4554 <serial_create>
    3f18:	90 93 67 16 	sts	0x1667, r25	; 0x801667 <_rn2483_serial+0x1>
    3f1c:	80 93 66 16 	sts	0x1666, r24	; 0x801666 <_rn2483_serial>
    3f20:	e7 e0       	ldi	r30, 0x07	; 7
    3f22:	f1 e0       	ldi	r31, 0x01	; 1
    3f24:	80 81       	ld	r24, Z
    3f26:	80 61       	ori	r24, 0x10	; 16
    3f28:	80 83       	st	Z, r24
    3f2a:	cf 91       	pop	r28
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	ef 90       	pop	r14
    3f32:	cf 90       	pop	r12
    3f34:	af 90       	pop	r10
    3f36:	9f 90       	pop	r9
    3f38:	8f 90       	pop	r8
    3f3a:	08 95       	ret

00003f3c <lora_driver_resetRn2483>:
    3f3c:	88 23       	and	r24, r24
    3f3e:	31 f0       	breq	.+12     	; 0x3f4c <lora_driver_resetRn2483+0x10>
    3f40:	e8 e0       	ldi	r30, 0x08	; 8
    3f42:	f1 e0       	ldi	r31, 0x01	; 1
    3f44:	80 81       	ld	r24, Z
    3f46:	8f 7e       	andi	r24, 0xEF	; 239
    3f48:	80 83       	st	Z, r24
    3f4a:	08 95       	ret
    3f4c:	e8 e0       	ldi	r30, 0x08	; 8
    3f4e:	f1 e0       	ldi	r31, 0x01	; 1
    3f50:	80 81       	ld	r24, Z
    3f52:	80 61       	ori	r24, 0x10	; 16
    3f54:	80 83       	st	Z, r24
    3f56:	08 95       	ret

00003f58 <lora_driver_rn2483FactoryReset>:
    3f58:	60 e0       	ldi	r22, 0x00	; 0
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	8c e9       	ldi	r24, 0x9C	; 156
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	d4 de       	rcall	.-600    	; 0x3d0a <_uploadMessage>
    3f62:	ed ee       	ldi	r30, 0xED	; 237
    3f64:	f6 e1       	ldi	r31, 0x16	; 22
    3f66:	01 90       	ld	r0, Z+
    3f68:	00 20       	and	r0, r0
    3f6a:	e9 f7       	brne	.-6      	; 0x3f66 <lora_driver_rn2483FactoryReset+0xe>
    3f6c:	31 97       	sbiw	r30, 0x01	; 1
    3f6e:	ed 5e       	subi	r30, 0xED	; 237
    3f70:	f6 41       	sbci	r31, 0x16	; 22
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	75 97       	sbiw	r30, 0x15	; 21
    3f76:	08 f0       	brcs	.+2      	; 0x3f7a <lora_driver_rn2483FactoryReset+0x22>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	08 95       	ret

00003f7c <lora_driver_getRn2483Hweui>:
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	ec 01       	movw	r28, r24
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	8d ea       	ldi	r24, 0xAD	; 173
    3f88:	94 e0       	ldi	r25, 0x04	; 4
    3f8a:	bf de       	rcall	.-642    	; 0x3d0a <_uploadMessage>
    3f8c:	ed ee       	ldi	r30, 0xED	; 237
    3f8e:	f6 e1       	ldi	r31, 0x16	; 22
    3f90:	01 90       	ld	r0, Z+
    3f92:	00 20       	and	r0, r0
    3f94:	e9 f7       	brne	.-6      	; 0x3f90 <lora_driver_getRn2483Hweui+0x14>
    3f96:	ee 5f       	subi	r30, 0xFE	; 254
    3f98:	f6 41       	sbci	r31, 0x16	; 22
    3f9a:	39 f4       	brne	.+14     	; 0x3faa <lora_driver_getRn2483Hweui+0x2e>
    3f9c:	6d ee       	ldi	r22, 0xED	; 237
    3f9e:	76 e1       	ldi	r23, 0x16	; 22
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <strcpy>
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <lora_driver_getRn2483Hweui+0x32>
    3faa:	18 82       	st	Y, r1
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <lora_driver_setDeviceIdentifier>:
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	01 90       	ld	r0, Z+
    3fb8:	00 20       	and	r0, r0
    3fba:	e9 f7       	brne	.-6      	; 0x3fb6 <lora_driver_setDeviceIdentifier+0x2>
    3fbc:	9f 01       	movw	r18, r30
    3fbe:	21 51       	subi	r18, 0x11	; 17
    3fc0:	31 09       	sbc	r19, r1
    3fc2:	28 17       	cp	r18, r24
    3fc4:	39 07       	cpc	r19, r25
    3fc6:	29 f4       	brne	.+10     	; 0x3fd2 <lora_driver_setDeviceIdentifier+0x1e>
    3fc8:	bc 01       	movw	r22, r24
    3fca:	8b ed       	ldi	r24, 0xDB	; 219
    3fcc:	94 e0       	ldi	r25, 0x04	; 4
    3fce:	6c cf       	rjmp	.-296    	; 0x3ea8 <_uploadMessageRc>
    3fd0:	08 95       	ret
    3fd2:	89 e0       	ldi	r24, 0x09	; 9
    3fd4:	08 95       	ret

00003fd6 <lora_driver_setApplicationIdentifier>:
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	01 90       	ld	r0, Z+
    3fda:	00 20       	and	r0, r0
    3fdc:	e9 f7       	brne	.-6      	; 0x3fd8 <lora_driver_setApplicationIdentifier+0x2>
    3fde:	9f 01       	movw	r18, r30
    3fe0:	21 51       	subi	r18, 0x11	; 17
    3fe2:	31 09       	sbc	r19, r1
    3fe4:	28 17       	cp	r18, r24
    3fe6:	39 07       	cpc	r19, r25
    3fe8:	29 f4       	brne	.+10     	; 0x3ff4 <lora_driver_setApplicationIdentifier+0x1e>
    3fea:	bc 01       	movw	r22, r24
    3fec:	8a ee       	ldi	r24, 0xEA	; 234
    3fee:	94 e0       	ldi	r25, 0x04	; 4
    3ff0:	5b cf       	rjmp	.-330    	; 0x3ea8 <_uploadMessageRc>
    3ff2:	08 95       	ret
    3ff4:	89 e0       	ldi	r24, 0x09	; 9
    3ff6:	08 95       	ret

00003ff8 <lora_driver_setApplicationKey>:
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	01 90       	ld	r0, Z+
    3ffc:	00 20       	and	r0, r0
    3ffe:	e9 f7       	brne	.-6      	; 0x3ffa <lora_driver_setApplicationKey+0x2>
    4000:	9f 01       	movw	r18, r30
    4002:	21 52       	subi	r18, 0x21	; 33
    4004:	31 09       	sbc	r19, r1
    4006:	28 17       	cp	r18, r24
    4008:	39 07       	cpc	r19, r25
    400a:	29 f4       	brne	.+10     	; 0x4016 <lora_driver_setApplicationKey+0x1e>
    400c:	bc 01       	movw	r22, r24
    400e:	89 ef       	ldi	r24, 0xF9	; 249
    4010:	94 e0       	ldi	r25, 0x04	; 4
    4012:	4a cf       	rjmp	.-364    	; 0x3ea8 <_uploadMessageRc>
    4014:	08 95       	ret
    4016:	89 e0       	ldi	r24, 0x09	; 9
    4018:	08 95       	ret

0000401a <lora_driver_saveMac>:
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	88 e3       	ldi	r24, 0x38	; 56
    4020:	95 e0       	ldi	r25, 0x05	; 5
    4022:	42 cf       	rjmp	.-380    	; 0x3ea8 <_uploadMessageRc>
    4024:	08 95       	ret

00004026 <lora_driver_join>:
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	e8 2f       	mov	r30, r24
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	ee 0f       	add	r30, r30
    4030:	ff 1f       	adc	r31, r31
    4032:	ee 5e       	subi	r30, 0xEE	; 238
    4034:	f8 4f       	sbci	r31, 0xF8	; 248
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	81 e4       	ldi	r24, 0x41	; 65
    403c:	95 e0       	ldi	r25, 0x05	; 5
    403e:	34 df       	rcall	.-408    	; 0x3ea8 <_uploadMessageRc>
    4040:	81 11       	cpse	r24, r1
    4042:	14 c0       	rjmp	.+40     	; 0x406c <lora_driver_join+0x46>
    4044:	08 e2       	ldi	r16, 0x28	; 40
    4046:	15 e0       	ldi	r17, 0x05	; 5
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	4d e2       	ldi	r20, 0x2D	; 45
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	6d ee       	ldi	r22, 0xED	; 237
    4052:	76 e1       	ldi	r23, 0x16	; 22
    4054:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <_serialReplyBufferHandle>
    4058:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <_serialReplyBufferHandle+0x1>
    405c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <xStreamBufferReceive>
    4060:	88 23       	and	r24, r24
    4062:	21 f0       	breq	.+8      	; 0x406c <lora_driver_join+0x46>
    4064:	8d ee       	ldi	r24, 0xED	; 237
    4066:	96 e1       	ldi	r25, 0x16	; 22
    4068:	aa de       	rcall	.-684    	; 0x3dbe <_reply2ReturnCode>
    406a:	03 c0       	rjmp	.+6      	; 0x4072 <lora_driver_join+0x4c>
    406c:	8d ee       	ldi	r24, 0xED	; 237
    406e:	96 e1       	ldi	r25, 0x16	; 22
    4070:	a6 de       	rcall	.-692    	; 0x3dbe <_reply2ReturnCode>
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	08 95       	ret

00004078 <lora_driver_sendUploadMessage>:
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	1f 92       	push	r1
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
    4086:	db 01       	movw	r26, r22
    4088:	11 96       	adiw	r26, 0x01	; 1
    408a:	9c 91       	ld	r25, X
    408c:	11 97       	sbiw	r26, 0x01	; 1
    408e:	95 31       	cpi	r25, 0x15	; 21
    4090:	08 f0       	brcs	.+2      	; 0x4094 <lora_driver_sendUploadMessage+0x1c>
    4092:	b4 c0       	rjmp	.+360    	; 0x41fc <lora_driver_sendUploadMessage+0x184>
    4094:	99 23       	and	r25, r25
    4096:	81 f1       	breq	.+96     	; 0x40f8 <lora_driver_sendUploadMessage+0x80>
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	27 2f       	mov	r18, r23
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	46 2f       	mov	r20, r22
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	fd 01       	movw	r30, r26
    40a6:	e4 0f       	add	r30, r20
    40a8:	f5 1f       	adc	r31, r21
    40aa:	92 81       	ldd	r25, Z+2	; 0x02
    40ac:	92 95       	swap	r25
    40ae:	9f 70       	andi	r25, 0x0F	; 15
    40b0:	9a 30       	cpi	r25, 0x0A	; 10
    40b2:	10 f0       	brcs	.+4      	; 0x40b8 <lora_driver_sendUploadMessage+0x40>
    40b4:	99 5c       	subi	r25, 0xC9	; 201
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <lora_driver_sendUploadMessage+0x42>
    40b8:	90 5d       	subi	r25, 0xD0	; 208
    40ba:	f9 01       	movw	r30, r18
    40bc:	e2 58       	subi	r30, 0x82	; 130
    40be:	f9 4e       	sbci	r31, 0xE9	; 233
    40c0:	90 83       	st	Z, r25
    40c2:	2f 5f       	subi	r18, 0xFF	; 255
    40c4:	3f 4f       	sbci	r19, 0xFF	; 255
    40c6:	fd 01       	movw	r30, r26
    40c8:	e4 0f       	add	r30, r20
    40ca:	f5 1f       	adc	r31, r21
    40cc:	92 81       	ldd	r25, Z+2	; 0x02
    40ce:	9f 70       	andi	r25, 0x0F	; 15
    40d0:	49 2f       	mov	r20, r25
    40d2:	50 e0       	ldi	r21, 0x00	; 0
    40d4:	4a 30       	cpi	r20, 0x0A	; 10
    40d6:	51 05       	cpc	r21, r1
    40d8:	14 f0       	brlt	.+4      	; 0x40de <lora_driver_sendUploadMessage+0x66>
    40da:	99 5c       	subi	r25, 0xC9	; 201
    40dc:	01 c0       	rjmp	.+2      	; 0x40e0 <lora_driver_sendUploadMessage+0x68>
    40de:	90 5d       	subi	r25, 0xD0	; 208
    40e0:	f9 01       	movw	r30, r18
    40e2:	e2 58       	subi	r30, 0x82	; 130
    40e4:	f9 4e       	sbci	r31, 0xE9	; 233
    40e6:	90 83       	st	Z, r25
    40e8:	7e 5f       	subi	r23, 0xFE	; 254
    40ea:	6f 5f       	subi	r22, 0xFF	; 255
    40ec:	11 96       	adiw	r26, 0x01	; 1
    40ee:	9c 91       	ld	r25, X
    40f0:	11 97       	sbiw	r26, 0x01	; 1
    40f2:	69 17       	cp	r22, r25
    40f4:	98 f2       	brcs	.-90     	; 0x409c <lora_driver_sendUploadMessage+0x24>
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <lora_driver_sendUploadMessage+0x82>
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	e7 2f       	mov	r30, r23
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	e2 58       	subi	r30, 0x82	; 130
    4100:	f9 4e       	sbci	r31, 0xE9	; 233
    4102:	10 82       	st	Z, r1
    4104:	4c 91       	ld	r20, X
    4106:	81 11       	cpse	r24, r1
    4108:	03 c0       	rjmp	.+6      	; 0x4110 <lora_driver_sendUploadMessage+0x98>
    410a:	8a e4       	ldi	r24, 0x4A	; 74
    410c:	95 e0       	ldi	r25, 0x05	; 5
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <lora_driver_sendUploadMessage+0x9c>
    4110:	8c e4       	ldi	r24, 0x4C	; 76
    4112:	95 e0       	ldi	r25, 0x05	; 5
    4114:	2e e7       	ldi	r18, 0x7E	; 126
    4116:	36 e1       	ldi	r19, 0x16	; 22
    4118:	3f 93       	push	r19
    411a:	2f 93       	push	r18
    411c:	1f 92       	push	r1
    411e:	4f 93       	push	r20
    4120:	9f 93       	push	r25
    4122:	8f 93       	push	r24
    4124:	80 e5       	ldi	r24, 0x50	; 80
    4126:	95 e0       	ldi	r25, 0x05	; 5
    4128:	9f 93       	push	r25
    412a:	8f 93       	push	r24
    412c:	80 ec       	ldi	r24, 0xC0	; 192
    412e:	96 e1       	ldi	r25, 0x16	; 22
    4130:	9f 93       	push	r25
    4132:	8f 93       	push	r24
    4134:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <sprintf>
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	80 ec       	ldi	r24, 0xC0	; 192
    413e:	96 e1       	ldi	r25, 0x16	; 22
    4140:	b3 de       	rcall	.-666    	; 0x3ea8 <_uploadMessageRc>
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	81 11       	cpse	r24, r1
    414e:	59 c0       	rjmp	.+178    	; 0x4202 <lora_driver_sendUploadMessage+0x18a>
    4150:	08 e2       	ldi	r16, 0x28	; 40
    4152:	15 e0       	ldi	r17, 0x05	; 5
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4d e2       	ldi	r20, 0x2D	; 45
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	6d ee       	ldi	r22, 0xED	; 237
    415e:	76 e1       	ldi	r23, 0x16	; 22
    4160:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <_serialReplyBufferHandle>
    4164:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <_serialReplyBufferHandle+0x1>
    4168:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <xStreamBufferReceive>
    416c:	88 23       	and	r24, r24
    416e:	09 f4       	brne	.+2      	; 0x4172 <lora_driver_sendUploadMessage+0xfa>
    4170:	47 c0       	rjmp	.+142    	; 0x4200 <lora_driver_sendUploadMessage+0x188>
    4172:	8d ee       	ldi	r24, 0xED	; 237
    4174:	96 e1       	ldi	r25, 0x16	; 22
    4176:	23 de       	rcall	.-954    	; 0x3dbe <_reply2ReturnCode>
    4178:	8e 30       	cpi	r24, 0x0E	; 14
    417a:	09 f0       	breq	.+2      	; 0x417e <lora_driver_sendUploadMessage+0x106>
    417c:	42 c0       	rjmp	.+132    	; 0x4202 <lora_driver_sendUploadMessage+0x18a>
    417e:	87 e0       	ldi	r24, 0x07	; 7
    4180:	89 83       	std	Y+1, r24	; 0x01
    4182:	80 91 62 16 	lds	r24, 0x1662	; 0x801662 <_downlinkMessageBuffer>
    4186:	90 91 63 16 	lds	r25, 0x1663	; 0x801663 <_downlinkMessageBuffer+0x1>
    418a:	89 2b       	or	r24, r25
    418c:	a9 f1       	breq	.+106    	; 0x41f8 <lora_driver_sendUploadMessage+0x180>
    418e:	be 01       	movw	r22, r28
    4190:	6f 5f       	subi	r22, 0xFF	; 255
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	8d ee       	ldi	r24, 0xED	; 237
    4196:	96 e1       	ldi	r25, 0x16	; 22
    4198:	68 d1       	rcall	.+720    	; 0x446a <decode_port_no>
    419a:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <_downlinkPayload>
    419e:	e9 81       	ldd	r30, Y+1	; 0x01
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	e3 51       	subi	r30, 0x13	; 19
    41a4:	f9 4e       	sbci	r31, 0xE9	; 233
    41a6:	df 01       	movw	r26, r30
    41a8:	0d 90       	ld	r0, X+
    41aa:	00 20       	and	r0, r0
    41ac:	e9 f7       	brne	.-6      	; 0x41a8 <lora_driver_sendUploadMessage+0x130>
    41ae:	11 97       	sbiw	r26, 0x01	; 1
    41b0:	ae 1b       	sub	r26, r30
    41b2:	bf 0b       	sbc	r27, r31
    41b4:	aa 23       	and	r26, r26
    41b6:	91 f0       	breq	.+36     	; 0x41dc <lora_driver_sendUploadMessage+0x164>
    41b8:	bb 27       	eor	r27, r27
    41ba:	cd 01       	movw	r24, r26
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	9c 01       	movw	r18, r24
    41c0:	12 f4       	brpl	.+4      	; 0x41c6 <lora_driver_sendUploadMessage+0x14e>
    41c2:	2f 5f       	subi	r18, 0xFF	; 255
    41c4:	3f 4f       	sbci	r19, 0xFF	; 255
    41c6:	35 95       	asr	r19
    41c8:	27 95       	ror	r18
    41ca:	20 93 69 16 	sts	0x1669, r18	; 0x801669 <_downlinkPayload+0x1>
    41ce:	af 01       	movw	r20, r30
    41d0:	4f 5f       	subi	r20, 0xFF	; 255
    41d2:	5f 4f       	sbci	r21, 0xFF	; 255
    41d4:	64 e1       	ldi	r22, 0x14	; 20
    41d6:	8a e6       	ldi	r24, 0x6A	; 106
    41d8:	96 e1       	ldi	r25, 0x16	; 22
    41da:	73 d1       	rcall	.+742    	; 0x44c2 <decode_hexadecimal_string_bytes>
    41dc:	01 e0       	ldi	r16, 0x01	; 1
    41de:	10 e0       	ldi	r17, 0x00	; 0
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	46 e1       	ldi	r20, 0x16	; 22
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	68 e6       	ldi	r22, 0x68	; 104
    41ea:	76 e1       	ldi	r23, 0x16	; 22
    41ec:	80 91 62 16 	lds	r24, 0x1662	; 0x801662 <_downlinkMessageBuffer>
    41f0:	90 91 63 16 	lds	r25, 0x1663	; 0x801663 <_downlinkMessageBuffer+0x1>
    41f4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <xStreamBufferSend>
    41f8:	8e e0       	ldi	r24, 0x0E	; 14
    41fa:	03 c0       	rjmp	.+6      	; 0x4202 <lora_driver_sendUploadMessage+0x18a>
    41fc:	84 e1       	ldi	r24, 0x14	; 20
    41fe:	01 c0       	rjmp	.+2      	; 0x4202 <lora_driver_sendUploadMessage+0x18a>
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	0f 90       	pop	r0
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	08 95       	ret

0000420e <lora_driver_setAdaptiveDataRate>:
    420e:	81 30       	cpi	r24, 0x01	; 1
    4210:	19 f0       	breq	.+6      	; 0x4218 <lora_driver_setAdaptiveDataRate+0xa>
    4212:	60 e6       	ldi	r22, 0x60	; 96
    4214:	75 e0       	ldi	r23, 0x05	; 5
    4216:	02 c0       	rjmp	.+4      	; 0x421c <lora_driver_setAdaptiveDataRate+0xe>
    4218:	69 e3       	ldi	r22, 0x39	; 57
    421a:	76 e0       	ldi	r23, 0x06	; 6
    421c:	84 e6       	ldi	r24, 0x64	; 100
    421e:	95 e0       	ldi	r25, 0x05	; 5
    4220:	43 ce       	rjmp	.-890    	; 0x3ea8 <_uploadMessageRc>
    4222:	08 95       	ret

00004224 <lora_driver_setReceiveDelay>:
    4224:	9f 93       	push	r25
    4226:	8f 93       	push	r24
    4228:	85 e9       	ldi	r24, 0x95	; 149
    422a:	95 e0       	ldi	r25, 0x05	; 5
    422c:	9f 93       	push	r25
    422e:	8f 93       	push	r24
    4230:	80 ec       	ldi	r24, 0xC0	; 192
    4232:	96 e1       	ldi	r25, 0x16	; 22
    4234:	9f 93       	push	r25
    4236:	8f 93       	push	r24
    4238:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <sprintf>
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	80 ec       	ldi	r24, 0xC0	; 192
    4242:	96 e1       	ldi	r25, 0x16	; 22
    4244:	31 de       	rcall	.-926    	; 0x3ea8 <_uploadMessageRc>
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	08 95       	ret

00004254 <lora_driver_configureToEu868>:
    4254:	2f 92       	push	r2
    4256:	3f 92       	push	r3
    4258:	4f 92       	push	r4
    425a:	5f 92       	push	r5
    425c:	6f 92       	push	r6
    425e:	7f 92       	push	r7
    4260:	8f 92       	push	r8
    4262:	9f 92       	push	r9
    4264:	af 92       	push	r10
    4266:	bf 92       	push	r11
    4268:	cf 92       	push	r12
    426a:	df 92       	push	r13
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	a0 97       	sbiw	r28, 0x20	; 32
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	62 ec       	ldi	r22, 0xC2	; 194
    428a:	75 e0       	ldi	r23, 0x05	; 5
    428c:	8e ec       	ldi	r24, 0xCE	; 206
    428e:	95 e0       	ldi	r25, 0x05	; 5
    4290:	3c dd       	rcall	.-1416   	; 0x3d0a <_uploadMessage>
    4292:	95 dd       	rcall	.-1238   	; 0x3dbe <_reply2ReturnCode>
    4294:	81 11       	cpse	r24, r1
    4296:	a3 c0       	rjmp	.+326    	; 0x43de <lora_driver_configureToEu868+0x18a>
    4298:	80 e2       	ldi	r24, 0x20	; 32
    429a:	e2 e2       	ldi	r30, 0x22	; 34
    429c:	f2 e0       	ldi	r31, 0x02	; 2
    429e:	de 01       	movw	r26, r28
    42a0:	11 96       	adiw	r26, 0x01	; 1
    42a2:	01 90       	ld	r0, Z+
    42a4:	0d 92       	st	X+, r0
    42a6:	8a 95       	dec	r24
    42a8:	e1 f7       	brne	.-8      	; 0x42a2 <lora_driver_configureToEu868+0x4e>
    42aa:	9e 01       	movw	r18, r28
    42ac:	2f 5f       	subi	r18, 0xFF	; 255
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	69 01       	movw	r12, r18
    42b2:	e1 2c       	mov	r14, r1
    42b4:	f1 2c       	mov	r15, r1
    42b6:	0f 2e       	mov	r0, r31
    42b8:	fa ed       	ldi	r31, 0xDA	; 218
    42ba:	af 2e       	mov	r10, r31
    42bc:	f5 e0       	ldi	r31, 0x05	; 5
    42be:	bf 2e       	mov	r11, r31
    42c0:	f0 2d       	mov	r31, r0
    42c2:	00 ec       	ldi	r16, 0xC0	; 192
    42c4:	16 e1       	ldi	r17, 0x16	; 22
    42c6:	0f 2e       	mov	r0, r31
    42c8:	f3 ef       	ldi	r31, 0xF3	; 243
    42ca:	4f 2e       	mov	r4, r31
    42cc:	f5 e0       	ldi	r31, 0x05	; 5
    42ce:	5f 2e       	mov	r5, r31
    42d0:	f0 2d       	mov	r31, r0
    42d2:	0f 2e       	mov	r0, r31
    42d4:	fa e0       	ldi	r31, 0x0A	; 10
    42d6:	8f 2e       	mov	r8, r31
    42d8:	f6 e0       	ldi	r31, 0x06	; 6
    42da:	9f 2e       	mov	r9, r31
    42dc:	f0 2d       	mov	r31, r0
    42de:	0f 2e       	mov	r0, r31
    42e0:	f4 e2       	ldi	r31, 0x24	; 36
    42e2:	6f 2e       	mov	r6, r31
    42e4:	f6 e0       	ldi	r31, 0x06	; 6
    42e6:	7f 2e       	mov	r7, r31
    42e8:	f0 2d       	mov	r31, r0
    42ea:	3e 2c       	mov	r3, r14
    42ec:	2f 2c       	mov	r2, r15
    42ee:	ff 92       	push	r15
    42f0:	ef 92       	push	r14
    42f2:	bf 92       	push	r11
    42f4:	af 92       	push	r10
    42f6:	1f 93       	push	r17
    42f8:	0f 93       	push	r16
    42fa:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <sprintf>
    42fe:	60 e0       	ldi	r22, 0x00	; 0
    4300:	70 e0       	ldi	r23, 0x00	; 0
    4302:	c8 01       	movw	r24, r16
    4304:	02 dd       	rcall	.-1532   	; 0x3d0a <_uploadMessage>
    4306:	5b dd       	rcall	.-1354   	; 0x3dbe <_reply2ReturnCode>
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	81 11       	cpse	r24, r1
    4316:	63 c0       	rjmp	.+198    	; 0x43de <lora_driver_configureToEu868+0x18a>
    4318:	32 e0       	ldi	r19, 0x02	; 2
    431a:	3e 15       	cp	r19, r14
    431c:	e8 f4       	brcc	.+58     	; 0x4358 <lora_driver_configureToEu868+0x104>
    431e:	f6 01       	movw	r30, r12
    4320:	83 81       	ldd	r24, Z+3	; 0x03
    4322:	8f 93       	push	r24
    4324:	82 81       	ldd	r24, Z+2	; 0x02
    4326:	8f 93       	push	r24
    4328:	81 81       	ldd	r24, Z+1	; 0x01
    432a:	8f 93       	push	r24
    432c:	80 81       	ld	r24, Z
    432e:	8f 93       	push	r24
    4330:	ff 92       	push	r15
    4332:	ef 92       	push	r14
    4334:	5f 92       	push	r5
    4336:	4f 92       	push	r4
    4338:	1f 93       	push	r17
    433a:	0f 93       	push	r16
    433c:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <sprintf>
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	c8 01       	movw	r24, r16
    4346:	e1 dc       	rcall	.-1598   	; 0x3d0a <_uploadMessage>
    4348:	3a dd       	rcall	.-1420   	; 0x3dbe <_reply2ReturnCode>
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	81 11       	cpse	r24, r1
    4356:	43 c0       	rjmp	.+134    	; 0x43de <lora_driver_configureToEu868+0x18a>
    4358:	2f 92       	push	r2
    435a:	3f 92       	push	r3
    435c:	9f 92       	push	r9
    435e:	8f 92       	push	r8
    4360:	1f 93       	push	r17
    4362:	0f 93       	push	r16
    4364:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <sprintf>
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	70 e0       	ldi	r23, 0x00	; 0
    436c:	c8 01       	movw	r24, r16
    436e:	cd dc       	rcall	.-1638   	; 0x3d0a <_uploadMessage>
    4370:	26 dd       	rcall	.-1460   	; 0x3dbe <_reply2ReturnCode>
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	81 11       	cpse	r24, r1
    4380:	2e c0       	rjmp	.+92     	; 0x43de <lora_driver_configureToEu868+0x18a>
    4382:	2f 92       	push	r2
    4384:	3f 92       	push	r3
    4386:	7f 92       	push	r7
    4388:	6f 92       	push	r6
    438a:	1f 93       	push	r17
    438c:	0f 93       	push	r16
    438e:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <sprintf>
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	70 e0       	ldi	r23, 0x00	; 0
    4396:	c8 01       	movw	r24, r16
    4398:	b8 dc       	rcall	.-1680   	; 0x3d0a <_uploadMessage>
    439a:	11 dd       	rcall	.-1502   	; 0x3dbe <_reply2ReturnCode>
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	81 11       	cpse	r24, r1
    43aa:	19 c0       	rjmp	.+50     	; 0x43de <lora_driver_configureToEu868+0x18a>
    43ac:	3f ef       	ldi	r19, 0xFF	; 255
    43ae:	e3 1a       	sub	r14, r19
    43b0:	f3 0a       	sbc	r15, r19
    43b2:	84 e0       	ldi	r24, 0x04	; 4
    43b4:	c8 0e       	add	r12, r24
    43b6:	d1 1c       	adc	r13, r1
    43b8:	98 e0       	ldi	r25, 0x08	; 8
    43ba:	e9 16       	cp	r14, r25
    43bc:	f1 04       	cpc	r15, r1
    43be:	09 f0       	breq	.+2      	; 0x43c2 <lora_driver_configureToEu868+0x16e>
    43c0:	94 cf       	rjmp	.-216    	; 0x42ea <lora_driver_configureToEu868+0x96>
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	8c e3       	ldi	r24, 0x3C	; 60
    43c8:	96 e0       	ldi	r25, 0x06	; 6
    43ca:	9f dc       	rcall	.-1730   	; 0x3d0a <_uploadMessage>
    43cc:	f8 dc       	rcall	.-1552   	; 0x3dbe <_reply2ReturnCode>
    43ce:	81 11       	cpse	r24, r1
    43d0:	06 c0       	rjmp	.+12     	; 0x43de <lora_driver_configureToEu868+0x18a>
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	8d e4       	ldi	r24, 0x4D	; 77
    43d8:	96 e0       	ldi	r25, 0x06	; 6
    43da:	97 dc       	rcall	.-1746   	; 0x3d0a <_uploadMessage>
    43dc:	f0 dc       	rcall	.-1568   	; 0x3dbe <_reply2ReturnCode>
    43de:	a0 96       	adiw	r28, 0x20	; 32
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	ff 90       	pop	r15
    43f4:	ef 90       	pop	r14
    43f6:	df 90       	pop	r13
    43f8:	cf 90       	pop	r12
    43fa:	bf 90       	pop	r11
    43fc:	af 90       	pop	r10
    43fe:	9f 90       	pop	r9
    4400:	8f 90       	pop	r8
    4402:	7f 90       	pop	r7
    4404:	6f 90       	pop	r6
    4406:	5f 90       	pop	r5
    4408:	4f 90       	pop	r4
    440a:	3f 90       	pop	r3
    440c:	2f 90       	pop	r2
    440e:	08 95       	ret

00004410 <lora_driver_setOtaaIdentity>:
    4410:	ef 92       	push	r14
    4412:	ff 92       	push	r15
    4414:	0f 93       	push	r16
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	ec 01       	movw	r28, r24
    441e:	8b 01       	movw	r16, r22
    4420:	7a 01       	movw	r14, r20
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	f4 de       	rcall	.-536    	; 0x420e <lora_driver_setAdaptiveDataRate>
    4426:	81 11       	cpse	r24, r1
    4428:	0d c0       	rjmp	.+26     	; 0x4444 <lora_driver_setOtaaIdentity+0x34>
    442a:	ce 01       	movw	r24, r28
    442c:	d4 dd       	rcall	.-1112   	; 0x3fd6 <lora_driver_setApplicationIdentifier>
    442e:	81 11       	cpse	r24, r1
    4430:	09 c0       	rjmp	.+18     	; 0x4444 <lora_driver_setOtaaIdentity+0x34>
    4432:	c8 01       	movw	r24, r16
    4434:	e1 dd       	rcall	.-1086   	; 0x3ff8 <lora_driver_setApplicationKey>
    4436:	81 11       	cpse	r24, r1
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <lora_driver_setOtaaIdentity+0x34>
    443a:	c7 01       	movw	r24, r14
    443c:	bb dd       	rcall	.-1162   	; 0x3fb4 <lora_driver_setDeviceIdentifier>
    443e:	81 11       	cpse	r24, r1
    4440:	01 c0       	rjmp	.+2      	; 0x4444 <lora_driver_setOtaaIdentity+0x34>
    4442:	eb dd       	rcall	.-1066   	; 0x401a <lora_driver_saveMac>
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	1f 91       	pop	r17
    444a:	0f 91       	pop	r16
    444c:	ff 90       	pop	r15
    444e:	ef 90       	pop	r14
    4450:	08 95       	ret

00004452 <lora_driver_mapReturnCodeToText>:
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	fc 01       	movw	r30, r24
    4456:	ee 0f       	add	r30, r30
    4458:	ff 1f       	adc	r31, r31
    445a:	8e 0f       	add	r24, r30
    445c:	9f 1f       	adc	r25, r31
    445e:	fc 01       	movw	r30, r24
    4460:	ea 5e       	subi	r30, 0xEA	; 234
    4462:	f8 4f       	sbci	r31, 0xF8	; 248
    4464:	81 81       	ldd	r24, Z+1	; 0x01
    4466:	92 81       	ldd	r25, Z+2	; 0x02
    4468:	08 95       	ret

0000446a <decode_port_no>:
    446a:	dc 01       	movw	r26, r24
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	29 f1       	breq	.+74     	; 0x44ba <decode_port_no+0x50>
    4470:	fb 01       	movw	r30, r22
    4472:	20 81       	ld	r18, Z
    4474:	fc 01       	movw	r30, r24
    4476:	01 90       	ld	r0, Z+
    4478:	00 20       	and	r0, r0
    447a:	e9 f7       	brne	.-6      	; 0x4476 <decode_port_no+0xc>
    447c:	31 97       	sbiw	r30, 0x01	; 1
    447e:	e8 1b       	sub	r30, r24
    4480:	f9 0b       	sbc	r31, r25
    4482:	82 2f       	mov	r24, r18
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	e8 17       	cp	r30, r24
    4488:	f9 07       	cpc	r31, r25
    448a:	c8 f0       	brcs	.+50     	; 0x44be <decode_port_no+0x54>
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	08 c0       	rjmp	.+16     	; 0x44a0 <decode_port_no+0x36>
    4490:	88 0f       	add	r24, r24
    4492:	38 2f       	mov	r19, r24
    4494:	33 0f       	add	r19, r19
    4496:	33 0f       	add	r19, r19
    4498:	83 0f       	add	r24, r19
    449a:	80 53       	subi	r24, 0x30	; 48
    449c:	89 0f       	add	r24, r25
    449e:	2f 5f       	subi	r18, 0xFF	; 255
    44a0:	fd 01       	movw	r30, r26
    44a2:	e2 0f       	add	r30, r18
    44a4:	f1 1d       	adc	r31, r1
    44a6:	90 81       	ld	r25, Z
    44a8:	30 ed       	ldi	r19, 0xD0	; 208
    44aa:	39 0f       	add	r19, r25
    44ac:	3a 30       	cpi	r19, 0x0A	; 10
    44ae:	10 f4       	brcc	.+4      	; 0x44b4 <decode_port_no+0x4a>
    44b0:	91 11       	cpse	r25, r1
    44b2:	ee cf       	rjmp	.-36     	; 0x4490 <decode_port_no+0x26>
    44b4:	fb 01       	movw	r30, r22
    44b6:	20 83       	st	Z, r18
    44b8:	08 95       	ret
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	08 95       	ret
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	08 95       	ret

000044c2 <decode_hexadecimal_string_bytes>:
    44c2:	0f 93       	push	r16
    44c4:	1f 93       	push	r17
    44c6:	cf 93       	push	r28
    44c8:	df 93       	push	r29
    44ca:	dc 01       	movw	r26, r24
    44cc:	ea 01       	movw	r28, r20
    44ce:	20 97       	sbiw	r28, 0x00	; 0
    44d0:	e1 f1       	breq	.+120    	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    44d2:	fa 01       	movw	r30, r20
    44d4:	01 90       	ld	r0, Z+
    44d6:	00 20       	and	r0, r0
    44d8:	e9 f7       	brne	.-6      	; 0x44d4 <decode_hexadecimal_string_bytes+0x12>
    44da:	31 97       	sbiw	r30, 0x01	; 1
    44dc:	e4 1b       	sub	r30, r20
    44de:	f5 0b       	sbc	r31, r21
    44e0:	32 97       	sbiw	r30, 0x02	; 2
    44e2:	10 f5       	brcc	.+68     	; 0x4528 <decode_hexadecimal_string_bytes+0x66>
    44e4:	32 c0       	rjmp	.+100    	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    44e6:	8d 01       	movw	r16, r26
    44e8:	04 0f       	add	r16, r20
    44ea:	15 1f       	adc	r17, r21
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	ae 01       	movw	r20, r28
    44f0:	42 0f       	add	r20, r18
    44f2:	53 1f       	adc	r21, r19
    44f4:	fa 01       	movw	r30, r20
    44f6:	90 81       	ld	r25, Z
    44f8:	91 34       	cpi	r25, 0x41	; 65
    44fa:	28 f0       	brcs	.+10     	; 0x4506 <decode_hexadecimal_string_bytes+0x44>
    44fc:	97 53       	subi	r25, 0x37	; 55
    44fe:	59 2f       	mov	r21, r25
    4500:	52 95       	swap	r21
    4502:	50 7f       	andi	r21, 0xF0	; 240
    4504:	03 c0       	rjmp	.+6      	; 0x450c <decode_hexadecimal_string_bytes+0x4a>
    4506:	59 2f       	mov	r21, r25
    4508:	52 95       	swap	r21
    450a:	50 7f       	andi	r21, 0xF0	; 240
    450c:	2c 0f       	add	r18, r28
    450e:	3d 1f       	adc	r19, r29
    4510:	f9 01       	movw	r30, r18
    4512:	91 81       	ldd	r25, Z+1	; 0x01
    4514:	91 34       	cpi	r25, 0x41	; 65
    4516:	10 f0       	brcs	.+4      	; 0x451c <decode_hexadecimal_string_bytes+0x5a>
    4518:	97 53       	subi	r25, 0x37	; 55
    451a:	01 c0       	rjmp	.+2      	; 0x451e <decode_hexadecimal_string_bytes+0x5c>
    451c:	90 53       	subi	r25, 0x30	; 48
    451e:	95 0f       	add	r25, r21
    4520:	f8 01       	movw	r30, r16
    4522:	90 83       	st	Z, r25
    4524:	8f 5f       	subi	r24, 0xFF	; 255
    4526:	01 c0       	rjmp	.+2      	; 0x452a <decode_hexadecimal_string_bytes+0x68>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	28 2f       	mov	r18, r24
    452c:	22 0f       	add	r18, r18
    452e:	48 2f       	mov	r20, r24
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	fe 01       	movw	r30, r28
    4534:	01 90       	ld	r0, Z+
    4536:	00 20       	and	r0, r0
    4538:	e9 f7       	brne	.-6      	; 0x4534 <decode_hexadecimal_string_bytes+0x72>
    453a:	31 97       	sbiw	r30, 0x01	; 1
    453c:	ec 1b       	sub	r30, r28
    453e:	fd 0b       	sbc	r31, r29
    4540:	4e 17       	cp	r20, r30
    4542:	5f 07       	cpc	r21, r31
    4544:	10 f4       	brcc	.+4      	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    4546:	86 13       	cpse	r24, r22
    4548:	ce cf       	rjmp	.-100    	; 0x44e6 <decode_hexadecimal_string_bytes+0x24>
    454a:	df 91       	pop	r29
    454c:	cf 91       	pop	r28
    454e:	1f 91       	pop	r17
    4550:	0f 91       	pop	r16
    4552:	08 95       	ret

00004554 <serial_create>:
    4554:	2f 92       	push	r2
    4556:	3f 92       	push	r3
    4558:	4f 92       	push	r4
    455a:	5f 92       	push	r5
    455c:	6f 92       	push	r6
    455e:	7f 92       	push	r7
    4560:	8f 92       	push	r8
    4562:	9f 92       	push	r9
    4564:	af 92       	push	r10
    4566:	cf 92       	push	r12
    4568:	ef 92       	push	r14
    456a:	ff 92       	push	r15
    456c:	0f 93       	push	r16
    456e:	1f 93       	push	r17
    4570:	cf 93       	push	r28
    4572:	df 93       	push	r29
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	f8 2e       	mov	r15, r24
    457a:	2a 01       	movw	r4, r20
    457c:	3b 01       	movw	r6, r22
    457e:	88 e0       	ldi	r24, 0x08	; 8
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 bf 2b 	call	0x577e	; 0x577e <malloc>
    4586:	8c 01       	movw	r16, r24
    4588:	8f 2d       	mov	r24, r15
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	fc 01       	movw	r30, r24
    458e:	ee 0f       	add	r30, r30
    4590:	ff 1f       	adc	r31, r31
    4592:	e6 5e       	subi	r30, 0xE6	; 230
    4594:	f8 4e       	sbci	r31, 0xE8	; 232
    4596:	11 83       	std	Z+1, r17	; 0x01
    4598:	00 83       	st	Z, r16
    459a:	01 15       	cp	r16, r1
    459c:	11 05       	cpc	r17, r1
    459e:	09 f4       	brne	.+2      	; 0x45a2 <serial_create+0x4e>
    45a0:	69 c0       	rjmp	.+210    	; 0x4674 <serial_create+0x120>
    45a2:	88 0f       	add	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	fc 01       	movw	r30, r24
    45a8:	e5 5f       	subi	r30, 0xF5	; 245
    45aa:	fd 4f       	sbci	r31, 0xFD	; 253
    45ac:	80 81       	ld	r24, Z
    45ae:	91 81       	ldd	r25, Z+1	; 0x01
    45b0:	d8 01       	movw	r26, r16
    45b2:	8d 93       	st	X+, r24
    45b4:	9c 93       	st	X, r25
    45b6:	8c 2d       	mov	r24, r12
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	88 0f       	add	r24, r24
    45bc:	99 1f       	adc	r25, r25
    45be:	88 0f       	add	r24, r24
    45c0:	99 1f       	adc	r25, r25
    45c2:	0e 94 bf 2b 	call	0x577e	; 0x577e <malloc>
    45c6:	1c 01       	movw	r2, r24
    45c8:	86 e0       	ldi	r24, 0x06	; 6
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	0e 94 bf 2b 	call	0x577e	; 0x577e <malloc>
    45d0:	7c 01       	movw	r14, r24
    45d2:	4c 2d       	mov	r20, r12
    45d4:	b1 01       	movw	r22, r2
    45d6:	f0 d6       	rcall	.+3552   	; 0x53b8 <fifo_init>
    45d8:	f8 01       	movw	r30, r16
    45da:	f5 82       	std	Z+5, r15	; 0x05
    45dc:	e4 82       	std	Z+4, r14	; 0x04
    45de:	8a 2d       	mov	r24, r10
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	0e 94 bf 2b 	call	0x577e	; 0x577e <malloc>
    45ee:	1c 01       	movw	r2, r24
    45f0:	86 e0       	ldi	r24, 0x06	; 6
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	0e 94 bf 2b 	call	0x577e	; 0x577e <malloc>
    45f8:	7c 01       	movw	r14, r24
    45fa:	4a 2d       	mov	r20, r10
    45fc:	b1 01       	movw	r22, r2
    45fe:	dc d6       	rcall	.+3512   	; 0x53b8 <fifo_init>
    4600:	d8 01       	movw	r26, r16
    4602:	13 96       	adiw	r26, 0x03	; 3
    4604:	fc 92       	st	X, r15
    4606:	ee 92       	st	-X, r14
    4608:	12 97       	sbiw	r26, 0x02	; 2
    460a:	17 96       	adiw	r26, 0x07	; 7
    460c:	9c 92       	st	X, r9
    460e:	8e 92       	st	-X, r8
    4610:	16 97       	sbiw	r26, 0x06	; 6
    4612:	ff b6       	in	r15, 0x3f	; 63
    4614:	f8 94       	cli
    4616:	ed 91       	ld	r30, X+
    4618:	fc 91       	ld	r31, X
    461a:	11 97       	sbiw	r26, 0x01	; 1
    461c:	36 97       	sbiw	r30, 0x06	; 6
    461e:	80 81       	ld	r24, Z
    4620:	82 60       	ori	r24, 0x02	; 2
    4622:	80 83       	st	Z, r24
    4624:	8d 90       	ld	r8, X+
    4626:	9c 90       	ld	r9, X
    4628:	c3 01       	movw	r24, r6
    462a:	b2 01       	movw	r22, r4
    462c:	b3 d7       	rcall	.+3942   	; 0x5594 <__floatunsisf>
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 e0       	ldi	r20, 0x00	; 0
    4634:	51 e4       	ldi	r21, 0x41	; 65
    4636:	0e 94 2f 2b 	call	0x565e	; 0x565e <__mulsf3>
    463a:	9b 01       	movw	r18, r22
    463c:	ac 01       	movw	r20, r24
    463e:	60 e0       	ldi	r22, 0x00	; 0
    4640:	74 e2       	ldi	r23, 0x24	; 36
    4642:	84 e7       	ldi	r24, 0x74	; 116
    4644:	9b e4       	ldi	r25, 0x4B	; 75
    4646:	3b d7       	rcall	.+3702   	; 0x54be <__divsf3>
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	5f e3       	ldi	r21, 0x3F	; 63
    4650:	cf d6       	rcall	.+3486   	; 0x53f0 <__subsf3>
    4652:	25 da       	rcall	.-2998   	; 0x3a9e <__fixunssfsi>
    4654:	f4 01       	movw	r30, r8
    4656:	32 97       	sbiw	r30, 0x02	; 2
    4658:	60 83       	st	Z, r22
    465a:	d8 01       	movw	r26, r16
    465c:	ed 91       	ld	r30, X+
    465e:	fc 91       	ld	r31, X
    4660:	11 97       	sbiw	r26, 0x01	; 1
    4662:	35 97       	sbiw	r30, 0x05	; 5
    4664:	88 e9       	ldi	r24, 0x98	; 152
    4666:	80 83       	st	Z, r24
    4668:	ed 91       	ld	r30, X+
    466a:	fc 91       	ld	r31, X
    466c:	34 97       	sbiw	r30, 0x04	; 4
    466e:	86 e0       	ldi	r24, 0x06	; 6
    4670:	80 83       	st	Z, r24
    4672:	ff be       	out	0x3f, r15	; 63
    4674:	c8 01       	movw	r24, r16
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	ff 90       	pop	r15
    4680:	ef 90       	pop	r14
    4682:	cf 90       	pop	r12
    4684:	af 90       	pop	r10
    4686:	9f 90       	pop	r9
    4688:	8f 90       	pop	r8
    468a:	7f 90       	pop	r7
    468c:	6f 90       	pop	r6
    468e:	5f 90       	pop	r5
    4690:	4f 90       	pop	r4
    4692:	3f 90       	pop	r3
    4694:	2f 90       	pop	r2
    4696:	08 95       	ret

00004698 <serial_sendByte>:
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	dc 01       	movw	r26, r24
    469e:	89 2b       	or	r24, r25
    46a0:	01 f1       	breq	.+64     	; 0x46e2 <serial_sendByte+0x4a>
    46a2:	12 96       	adiw	r26, 0x02	; 2
    46a4:	ed 91       	ld	r30, X+
    46a6:	fc 91       	ld	r31, X
    46a8:	13 97       	sbiw	r26, 0x03	; 3
    46aa:	93 81       	ldd	r25, Z+3	; 0x03
    46ac:	82 81       	ldd	r24, Z+2	; 0x02
    46ae:	25 81       	ldd	r18, Z+5	; 0x05
    46b0:	98 1b       	sub	r25, r24
    46b2:	92 23       	and	r25, r18
    46b4:	84 81       	ldd	r24, Z+4	; 0x04
    46b6:	98 17       	cp	r25, r24
    46b8:	b1 f0       	breq	.+44     	; 0x46e6 <serial_sendByte+0x4e>
    46ba:	83 81       	ldd	r24, Z+3	; 0x03
    46bc:	26 95       	lsr	r18
    46be:	28 23       	and	r18, r24
    46c0:	c0 81       	ld	r28, Z
    46c2:	d1 81       	ldd	r29, Z+1	; 0x01
    46c4:	c2 0f       	add	r28, r18
    46c6:	d1 1d       	adc	r29, r1
    46c8:	68 83       	st	Y, r22
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	95 81       	ldd	r25, Z+5	; 0x05
    46ce:	89 23       	and	r24, r25
    46d0:	83 83       	std	Z+3, r24	; 0x03
    46d2:	ed 91       	ld	r30, X+
    46d4:	fc 91       	ld	r31, X
    46d6:	35 97       	sbiw	r30, 0x05	; 5
    46d8:	80 81       	ld	r24, Z
    46da:	80 62       	ori	r24, 0x20	; 32
    46dc:	80 83       	st	Z, r24
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	03 c0       	rjmp	.+6      	; 0x46e8 <serial_sendByte+0x50>
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <serial_sendByte+0x50>
    46e6:	82 e0       	ldi	r24, 0x02	; 2
    46e8:	df 91       	pop	r29
    46ea:	cf 91       	pop	r28
    46ec:	08 95       	ret

000046ee <serial_sendBytes>:
    46ee:	ef 92       	push	r14
    46f0:	ff 92       	push	r15
    46f2:	0f 93       	push	r16
    46f4:	1f 93       	push	r17
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	7c 01       	movw	r14, r24
    46fc:	00 97       	sbiw	r24, 0x00	; 0
    46fe:	09 f4       	brne	.+2      	; 0x4702 <serial_sendBytes+0x14>
    4700:	41 c0       	rjmp	.+130    	; 0x4784 <serial_sendBytes+0x96>
    4702:	dc 01       	movw	r26, r24
    4704:	12 96       	adiw	r26, 0x02	; 2
    4706:	ed 91       	ld	r30, X+
    4708:	fc 91       	ld	r31, X
    470a:	13 97       	sbiw	r26, 0x03	; 3
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	82 81       	ldd	r24, Z+2	; 0x02
    4710:	98 1b       	sub	r25, r24
    4712:	85 81       	ldd	r24, Z+5	; 0x05
    4714:	98 23       	and	r25, r24
    4716:	84 81       	ldd	r24, Z+4	; 0x04
    4718:	89 1b       	sub	r24, r25
    471a:	86 17       	cp	r24, r22
    471c:	a8 f1       	brcs	.+106    	; 0x4788 <serial_sendBytes+0x9a>
    471e:	66 23       	and	r22, r22
    4720:	41 f1       	breq	.+80     	; 0x4772 <serial_sendBytes+0x84>
    4722:	84 2f       	mov	r24, r20
    4724:	95 2f       	mov	r25, r21
    4726:	dc 01       	movw	r26, r24
    4728:	61 50       	subi	r22, 0x01	; 1
    472a:	46 2f       	mov	r20, r22
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	4f 5f       	subi	r20, 0xFF	; 255
    4730:	5f 4f       	sbci	r21, 0xFF	; 255
    4732:	48 0f       	add	r20, r24
    4734:	59 1f       	adc	r21, r25
    4736:	e7 01       	movw	r28, r14
    4738:	ea 81       	ldd	r30, Y+2	; 0x02
    473a:	fb 81       	ldd	r31, Y+3	; 0x03
    473c:	93 81       	ldd	r25, Z+3	; 0x03
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	25 81       	ldd	r18, Z+5	; 0x05
    4742:	98 1b       	sub	r25, r24
    4744:	92 23       	and	r25, r18
    4746:	84 81       	ldd	r24, Z+4	; 0x04
    4748:	98 17       	cp	r25, r24
    474a:	79 f0       	breq	.+30     	; 0x476a <serial_sendBytes+0x7c>
    474c:	8c 91       	ld	r24, X
    474e:	93 81       	ldd	r25, Z+3	; 0x03
    4750:	26 95       	lsr	r18
    4752:	29 23       	and	r18, r25
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	8b 01       	movw	r16, r22
    475a:	02 0f       	add	r16, r18
    475c:	11 1d       	adc	r17, r1
    475e:	e8 01       	movw	r28, r16
    4760:	88 83       	st	Y, r24
    4762:	9f 5f       	subi	r25, 0xFF	; 255
    4764:	85 81       	ldd	r24, Z+5	; 0x05
    4766:	98 23       	and	r25, r24
    4768:	93 83       	std	Z+3, r25	; 0x03
    476a:	11 96       	adiw	r26, 0x01	; 1
    476c:	a4 17       	cp	r26, r20
    476e:	b5 07       	cpc	r27, r21
    4770:	11 f7       	brne	.-60     	; 0x4736 <serial_sendBytes+0x48>
    4772:	d7 01       	movw	r26, r14
    4774:	ed 91       	ld	r30, X+
    4776:	fc 91       	ld	r31, X
    4778:	35 97       	sbiw	r30, 0x05	; 5
    477a:	80 81       	ld	r24, Z
    477c:	80 62       	ori	r24, 0x20	; 32
    477e:	80 83       	st	Z, r24
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	03 c0       	rjmp	.+6      	; 0x478a <serial_sendBytes+0x9c>
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	01 c0       	rjmp	.+2      	; 0x478a <serial_sendBytes+0x9c>
    4788:	82 e0       	ldi	r24, 0x02	; 2
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	1f 91       	pop	r17
    4790:	0f 91       	pop	r16
    4792:	ff 90       	pop	r15
    4794:	ef 90       	pop	r14
    4796:	08 95       	ret

00004798 <serial_getByte>:
    4798:	00 97       	sbiw	r24, 0x00	; 0
    479a:	d1 f0       	breq	.+52     	; 0x47d0 <serial_getByte+0x38>
    479c:	dc 01       	movw	r26, r24
    479e:	14 96       	adiw	r26, 0x04	; 4
    47a0:	ed 91       	ld	r30, X+
    47a2:	fc 91       	ld	r31, X
    47a4:	15 97       	sbiw	r26, 0x05	; 5
    47a6:	93 81       	ldd	r25, Z+3	; 0x03
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	98 17       	cp	r25, r24
    47ac:	99 f0       	breq	.+38     	; 0x47d4 <serial_getByte+0x3c>
    47ae:	92 81       	ldd	r25, Z+2	; 0x02
    47b0:	85 81       	ldd	r24, Z+5	; 0x05
    47b2:	86 95       	lsr	r24
    47b4:	89 23       	and	r24, r25
    47b6:	a0 81       	ld	r26, Z
    47b8:	b1 81       	ldd	r27, Z+1	; 0x01
    47ba:	a8 0f       	add	r26, r24
    47bc:	b1 1d       	adc	r27, r1
    47be:	8c 91       	ld	r24, X
    47c0:	db 01       	movw	r26, r22
    47c2:	8c 93       	st	X, r24
    47c4:	9f 5f       	subi	r25, 0xFF	; 255
    47c6:	85 81       	ldd	r24, Z+5	; 0x05
    47c8:	98 23       	and	r25, r24
    47ca:	92 83       	std	Z+2, r25	; 0x02
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	08 95       	ret
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	08 95       	ret
    47d4:	83 e0       	ldi	r24, 0x03	; 3
    47d6:	08 95       	ret

000047d8 <__vector_25>:
    47d8:	1f 92       	push	r1
    47da:	0f 92       	push	r0
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	0f 92       	push	r0
    47e0:	11 24       	eor	r1, r1
    47e2:	0b b6       	in	r0, 0x3b	; 59
    47e4:	0f 92       	push	r0
    47e6:	2f 93       	push	r18
    47e8:	3f 93       	push	r19
    47ea:	4f 93       	push	r20
    47ec:	5f 93       	push	r21
    47ee:	6f 93       	push	r22
    47f0:	7f 93       	push	r23
    47f2:	8f 93       	push	r24
    47f4:	9f 93       	push	r25
    47f6:	af 93       	push	r26
    47f8:	bf 93       	push	r27
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	ef 93       	push	r30
    4800:	ff 93       	push	r31
    4802:	a0 91 1a 17 	lds	r26, 0x171A	; 0x80171a <_ser_handle>
    4806:	b0 91 1b 17 	lds	r27, 0x171B	; 0x80171b <_ser_handle+0x1>
    480a:	10 97       	sbiw	r26, 0x00	; 0
    480c:	11 f1       	breq	.+68     	; 0x4852 <__vector_25+0x7a>
    480e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4812:	14 96       	adiw	r26, 0x04	; 4
    4814:	ed 91       	ld	r30, X+
    4816:	fc 91       	ld	r31, X
    4818:	15 97       	sbiw	r26, 0x05	; 5
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	82 81       	ldd	r24, Z+2	; 0x02
    481e:	25 81       	ldd	r18, Z+5	; 0x05
    4820:	98 1b       	sub	r25, r24
    4822:	92 23       	and	r25, r18
    4824:	84 81       	ldd	r24, Z+4	; 0x04
    4826:	98 17       	cp	r25, r24
    4828:	61 f0       	breq	.+24     	; 0x4842 <__vector_25+0x6a>
    482a:	83 81       	ldd	r24, Z+3	; 0x03
    482c:	26 95       	lsr	r18
    482e:	28 23       	and	r18, r24
    4830:	c0 81       	ld	r28, Z
    4832:	d1 81       	ldd	r29, Z+1	; 0x01
    4834:	c2 0f       	add	r28, r18
    4836:	d1 1d       	adc	r29, r1
    4838:	68 83       	st	Y, r22
    483a:	8f 5f       	subi	r24, 0xFF	; 255
    483c:	95 81       	ldd	r25, Z+5	; 0x05
    483e:	89 23       	and	r24, r25
    4840:	83 83       	std	Z+3, r24	; 0x03
    4842:	16 96       	adiw	r26, 0x06	; 6
    4844:	ed 91       	ld	r30, X+
    4846:	fc 91       	ld	r31, X
    4848:	17 97       	sbiw	r26, 0x07	; 7
    484a:	30 97       	sbiw	r30, 0x00	; 0
    484c:	11 f0       	breq	.+4      	; 0x4852 <__vector_25+0x7a>
    484e:	cd 01       	movw	r24, r26
    4850:	19 95       	eicall
    4852:	ff 91       	pop	r31
    4854:	ef 91       	pop	r30
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	bf 91       	pop	r27
    485c:	af 91       	pop	r26
    485e:	9f 91       	pop	r25
    4860:	8f 91       	pop	r24
    4862:	7f 91       	pop	r23
    4864:	6f 91       	pop	r22
    4866:	5f 91       	pop	r21
    4868:	4f 91       	pop	r20
    486a:	3f 91       	pop	r19
    486c:	2f 91       	pop	r18
    486e:	0f 90       	pop	r0
    4870:	0b be       	out	0x3b, r0	; 59
    4872:	0f 90       	pop	r0
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	0f 90       	pop	r0
    4878:	1f 90       	pop	r1
    487a:	18 95       	reti

0000487c <__vector_26>:
    487c:	1f 92       	push	r1
    487e:	0f 92       	push	r0
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	0f 92       	push	r0
    4884:	11 24       	eor	r1, r1
    4886:	0b b6       	in	r0, 0x3b	; 59
    4888:	0f 92       	push	r0
    488a:	2f 93       	push	r18
    488c:	8f 93       	push	r24
    488e:	9f 93       	push	r25
    4890:	af 93       	push	r26
    4892:	bf 93       	push	r27
    4894:	ef 93       	push	r30
    4896:	ff 93       	push	r31
    4898:	e0 91 1a 17 	lds	r30, 0x171A	; 0x80171a <_ser_handle>
    489c:	f0 91 1b 17 	lds	r31, 0x171B	; 0x80171b <_ser_handle+0x1>
    48a0:	30 97       	sbiw	r30, 0x00	; 0
    48a2:	b9 f0       	breq	.+46     	; 0x48d2 <__vector_26+0x56>
    48a4:	02 80       	ldd	r0, Z+2	; 0x02
    48a6:	f3 81       	ldd	r31, Z+3	; 0x03
    48a8:	e0 2d       	mov	r30, r0
    48aa:	93 81       	ldd	r25, Z+3	; 0x03
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	98 17       	cp	r25, r24
    48b0:	b1 f0       	breq	.+44     	; 0x48de <__vector_26+0x62>
    48b2:	92 81       	ldd	r25, Z+2	; 0x02
    48b4:	85 81       	ldd	r24, Z+5	; 0x05
    48b6:	28 2f       	mov	r18, r24
    48b8:	26 95       	lsr	r18
    48ba:	29 23       	and	r18, r25
    48bc:	a0 81       	ld	r26, Z
    48be:	b1 81       	ldd	r27, Z+1	; 0x01
    48c0:	a2 0f       	add	r26, r18
    48c2:	b1 1d       	adc	r27, r1
    48c4:	2c 91       	ld	r18, X
    48c6:	9f 5f       	subi	r25, 0xFF	; 255
    48c8:	89 23       	and	r24, r25
    48ca:	82 83       	std	Z+2, r24	; 0x02
    48cc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    48d0:	0b c0       	rjmp	.+22     	; 0x48e8 <__vector_26+0x6c>
    48d2:	e1 ec       	ldi	r30, 0xC1	; 193
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	80 81       	ld	r24, Z
    48d8:	8f 7d       	andi	r24, 0xDF	; 223
    48da:	80 83       	st	Z, r24
    48dc:	05 c0       	rjmp	.+10     	; 0x48e8 <__vector_26+0x6c>
    48de:	e1 ec       	ldi	r30, 0xC1	; 193
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	8f 7d       	andi	r24, 0xDF	; 223
    48e6:	80 83       	st	Z, r24
    48e8:	ff 91       	pop	r31
    48ea:	ef 91       	pop	r30
    48ec:	bf 91       	pop	r27
    48ee:	af 91       	pop	r26
    48f0:	9f 91       	pop	r25
    48f2:	8f 91       	pop	r24
    48f4:	2f 91       	pop	r18
    48f6:	0f 90       	pop	r0
    48f8:	0b be       	out	0x3b, r0	; 59
    48fa:	0f 90       	pop	r0
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	0f 90       	pop	r0
    4900:	1f 90       	pop	r1
    4902:	18 95       	reti

00004904 <__vector_36>:
    4904:	1f 92       	push	r1
    4906:	0f 92       	push	r0
    4908:	0f b6       	in	r0, 0x3f	; 63
    490a:	0f 92       	push	r0
    490c:	11 24       	eor	r1, r1
    490e:	0b b6       	in	r0, 0x3b	; 59
    4910:	0f 92       	push	r0
    4912:	2f 93       	push	r18
    4914:	3f 93       	push	r19
    4916:	4f 93       	push	r20
    4918:	5f 93       	push	r21
    491a:	6f 93       	push	r22
    491c:	7f 93       	push	r23
    491e:	8f 93       	push	r24
    4920:	9f 93       	push	r25
    4922:	af 93       	push	r26
    4924:	bf 93       	push	r27
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	ef 93       	push	r30
    492c:	ff 93       	push	r31
    492e:	a0 91 1c 17 	lds	r26, 0x171C	; 0x80171c <_ser_handle+0x2>
    4932:	b0 91 1d 17 	lds	r27, 0x171D	; 0x80171d <_ser_handle+0x3>
    4936:	10 97       	sbiw	r26, 0x00	; 0
    4938:	11 f1       	breq	.+68     	; 0x497e <__vector_36+0x7a>
    493a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    493e:	14 96       	adiw	r26, 0x04	; 4
    4940:	ed 91       	ld	r30, X+
    4942:	fc 91       	ld	r31, X
    4944:	15 97       	sbiw	r26, 0x05	; 5
    4946:	93 81       	ldd	r25, Z+3	; 0x03
    4948:	82 81       	ldd	r24, Z+2	; 0x02
    494a:	25 81       	ldd	r18, Z+5	; 0x05
    494c:	98 1b       	sub	r25, r24
    494e:	92 23       	and	r25, r18
    4950:	84 81       	ldd	r24, Z+4	; 0x04
    4952:	98 17       	cp	r25, r24
    4954:	61 f0       	breq	.+24     	; 0x496e <__vector_36+0x6a>
    4956:	83 81       	ldd	r24, Z+3	; 0x03
    4958:	26 95       	lsr	r18
    495a:	28 23       	and	r18, r24
    495c:	c0 81       	ld	r28, Z
    495e:	d1 81       	ldd	r29, Z+1	; 0x01
    4960:	c2 0f       	add	r28, r18
    4962:	d1 1d       	adc	r29, r1
    4964:	68 83       	st	Y, r22
    4966:	8f 5f       	subi	r24, 0xFF	; 255
    4968:	95 81       	ldd	r25, Z+5	; 0x05
    496a:	89 23       	and	r24, r25
    496c:	83 83       	std	Z+3, r24	; 0x03
    496e:	16 96       	adiw	r26, 0x06	; 6
    4970:	ed 91       	ld	r30, X+
    4972:	fc 91       	ld	r31, X
    4974:	17 97       	sbiw	r26, 0x07	; 7
    4976:	30 97       	sbiw	r30, 0x00	; 0
    4978:	11 f0       	breq	.+4      	; 0x497e <__vector_36+0x7a>
    497a:	cd 01       	movw	r24, r26
    497c:	19 95       	eicall
    497e:	ff 91       	pop	r31
    4980:	ef 91       	pop	r30
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	bf 91       	pop	r27
    4988:	af 91       	pop	r26
    498a:	9f 91       	pop	r25
    498c:	8f 91       	pop	r24
    498e:	7f 91       	pop	r23
    4990:	6f 91       	pop	r22
    4992:	5f 91       	pop	r21
    4994:	4f 91       	pop	r20
    4996:	3f 91       	pop	r19
    4998:	2f 91       	pop	r18
    499a:	0f 90       	pop	r0
    499c:	0b be       	out	0x3b, r0	; 59
    499e:	0f 90       	pop	r0
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	0f 90       	pop	r0
    49a4:	1f 90       	pop	r1
    49a6:	18 95       	reti

000049a8 <__vector_37>:
    49a8:	1f 92       	push	r1
    49aa:	0f 92       	push	r0
    49ac:	0f b6       	in	r0, 0x3f	; 63
    49ae:	0f 92       	push	r0
    49b0:	11 24       	eor	r1, r1
    49b2:	0b b6       	in	r0, 0x3b	; 59
    49b4:	0f 92       	push	r0
    49b6:	2f 93       	push	r18
    49b8:	8f 93       	push	r24
    49ba:	9f 93       	push	r25
    49bc:	af 93       	push	r26
    49be:	bf 93       	push	r27
    49c0:	ef 93       	push	r30
    49c2:	ff 93       	push	r31
    49c4:	e0 91 1c 17 	lds	r30, 0x171C	; 0x80171c <_ser_handle+0x2>
    49c8:	f0 91 1d 17 	lds	r31, 0x171D	; 0x80171d <_ser_handle+0x3>
    49cc:	30 97       	sbiw	r30, 0x00	; 0
    49ce:	b9 f0       	breq	.+46     	; 0x49fe <__vector_37+0x56>
    49d0:	02 80       	ldd	r0, Z+2	; 0x02
    49d2:	f3 81       	ldd	r31, Z+3	; 0x03
    49d4:	e0 2d       	mov	r30, r0
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	82 81       	ldd	r24, Z+2	; 0x02
    49da:	98 17       	cp	r25, r24
    49dc:	b1 f0       	breq	.+44     	; 0x4a0a <__vector_37+0x62>
    49de:	92 81       	ldd	r25, Z+2	; 0x02
    49e0:	85 81       	ldd	r24, Z+5	; 0x05
    49e2:	28 2f       	mov	r18, r24
    49e4:	26 95       	lsr	r18
    49e6:	29 23       	and	r18, r25
    49e8:	a0 81       	ld	r26, Z
    49ea:	b1 81       	ldd	r27, Z+1	; 0x01
    49ec:	a2 0f       	add	r26, r18
    49ee:	b1 1d       	adc	r27, r1
    49f0:	2c 91       	ld	r18, X
    49f2:	9f 5f       	subi	r25, 0xFF	; 255
    49f4:	89 23       	and	r24, r25
    49f6:	82 83       	std	Z+2, r24	; 0x02
    49f8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    49fc:	0b c0       	rjmp	.+22     	; 0x4a14 <__vector_37+0x6c>
    49fe:	e9 ec       	ldi	r30, 0xC9	; 201
    4a00:	f0 e0       	ldi	r31, 0x00	; 0
    4a02:	80 81       	ld	r24, Z
    4a04:	8f 7d       	andi	r24, 0xDF	; 223
    4a06:	80 83       	st	Z, r24
    4a08:	05 c0       	rjmp	.+10     	; 0x4a14 <__vector_37+0x6c>
    4a0a:	e9 ec       	ldi	r30, 0xC9	; 201
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	8f 7d       	andi	r24, 0xDF	; 223
    4a12:	80 83       	st	Z, r24
    4a14:	ff 91       	pop	r31
    4a16:	ef 91       	pop	r30
    4a18:	bf 91       	pop	r27
    4a1a:	af 91       	pop	r26
    4a1c:	9f 91       	pop	r25
    4a1e:	8f 91       	pop	r24
    4a20:	2f 91       	pop	r18
    4a22:	0f 90       	pop	r0
    4a24:	0b be       	out	0x3b, r0	; 59
    4a26:	0f 90       	pop	r0
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	0f 90       	pop	r0
    4a2c:	1f 90       	pop	r1
    4a2e:	18 95       	reti

00004a30 <__vector_51>:
    4a30:	1f 92       	push	r1
    4a32:	0f 92       	push	r0
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	0f 92       	push	r0
    4a38:	11 24       	eor	r1, r1
    4a3a:	0b b6       	in	r0, 0x3b	; 59
    4a3c:	0f 92       	push	r0
    4a3e:	2f 93       	push	r18
    4a40:	3f 93       	push	r19
    4a42:	4f 93       	push	r20
    4a44:	5f 93       	push	r21
    4a46:	6f 93       	push	r22
    4a48:	7f 93       	push	r23
    4a4a:	8f 93       	push	r24
    4a4c:	9f 93       	push	r25
    4a4e:	af 93       	push	r26
    4a50:	bf 93       	push	r27
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	ef 93       	push	r30
    4a58:	ff 93       	push	r31
    4a5a:	a0 91 1e 17 	lds	r26, 0x171E	; 0x80171e <_ser_handle+0x4>
    4a5e:	b0 91 1f 17 	lds	r27, 0x171F	; 0x80171f <_ser_handle+0x5>
    4a62:	10 97       	sbiw	r26, 0x00	; 0
    4a64:	11 f1       	breq	.+68     	; 0x4aaa <__vector_51+0x7a>
    4a66:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4a6a:	14 96       	adiw	r26, 0x04	; 4
    4a6c:	ed 91       	ld	r30, X+
    4a6e:	fc 91       	ld	r31, X
    4a70:	15 97       	sbiw	r26, 0x05	; 5
    4a72:	93 81       	ldd	r25, Z+3	; 0x03
    4a74:	82 81       	ldd	r24, Z+2	; 0x02
    4a76:	25 81       	ldd	r18, Z+5	; 0x05
    4a78:	98 1b       	sub	r25, r24
    4a7a:	92 23       	and	r25, r18
    4a7c:	84 81       	ldd	r24, Z+4	; 0x04
    4a7e:	98 17       	cp	r25, r24
    4a80:	61 f0       	breq	.+24     	; 0x4a9a <__vector_51+0x6a>
    4a82:	83 81       	ldd	r24, Z+3	; 0x03
    4a84:	26 95       	lsr	r18
    4a86:	28 23       	and	r18, r24
    4a88:	c0 81       	ld	r28, Z
    4a8a:	d1 81       	ldd	r29, Z+1	; 0x01
    4a8c:	c2 0f       	add	r28, r18
    4a8e:	d1 1d       	adc	r29, r1
    4a90:	68 83       	st	Y, r22
    4a92:	8f 5f       	subi	r24, 0xFF	; 255
    4a94:	95 81       	ldd	r25, Z+5	; 0x05
    4a96:	89 23       	and	r24, r25
    4a98:	83 83       	std	Z+3, r24	; 0x03
    4a9a:	16 96       	adiw	r26, 0x06	; 6
    4a9c:	ed 91       	ld	r30, X+
    4a9e:	fc 91       	ld	r31, X
    4aa0:	17 97       	sbiw	r26, 0x07	; 7
    4aa2:	30 97       	sbiw	r30, 0x00	; 0
    4aa4:	11 f0       	breq	.+4      	; 0x4aaa <__vector_51+0x7a>
    4aa6:	cd 01       	movw	r24, r26
    4aa8:	19 95       	eicall
    4aaa:	ff 91       	pop	r31
    4aac:	ef 91       	pop	r30
    4aae:	df 91       	pop	r29
    4ab0:	cf 91       	pop	r28
    4ab2:	bf 91       	pop	r27
    4ab4:	af 91       	pop	r26
    4ab6:	9f 91       	pop	r25
    4ab8:	8f 91       	pop	r24
    4aba:	7f 91       	pop	r23
    4abc:	6f 91       	pop	r22
    4abe:	5f 91       	pop	r21
    4ac0:	4f 91       	pop	r20
    4ac2:	3f 91       	pop	r19
    4ac4:	2f 91       	pop	r18
    4ac6:	0f 90       	pop	r0
    4ac8:	0b be       	out	0x3b, r0	; 59
    4aca:	0f 90       	pop	r0
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	0f 90       	pop	r0
    4ad0:	1f 90       	pop	r1
    4ad2:	18 95       	reti

00004ad4 <__vector_52>:
    4ad4:	1f 92       	push	r1
    4ad6:	0f 92       	push	r0
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	0f 92       	push	r0
    4adc:	11 24       	eor	r1, r1
    4ade:	0b b6       	in	r0, 0x3b	; 59
    4ae0:	0f 92       	push	r0
    4ae2:	2f 93       	push	r18
    4ae4:	8f 93       	push	r24
    4ae6:	9f 93       	push	r25
    4ae8:	af 93       	push	r26
    4aea:	bf 93       	push	r27
    4aec:	ef 93       	push	r30
    4aee:	ff 93       	push	r31
    4af0:	e0 91 1e 17 	lds	r30, 0x171E	; 0x80171e <_ser_handle+0x4>
    4af4:	f0 91 1f 17 	lds	r31, 0x171F	; 0x80171f <_ser_handle+0x5>
    4af8:	30 97       	sbiw	r30, 0x00	; 0
    4afa:	b9 f0       	breq	.+46     	; 0x4b2a <__vector_52+0x56>
    4afc:	02 80       	ldd	r0, Z+2	; 0x02
    4afe:	f3 81       	ldd	r31, Z+3	; 0x03
    4b00:	e0 2d       	mov	r30, r0
    4b02:	93 81       	ldd	r25, Z+3	; 0x03
    4b04:	82 81       	ldd	r24, Z+2	; 0x02
    4b06:	98 17       	cp	r25, r24
    4b08:	b1 f0       	breq	.+44     	; 0x4b36 <__vector_52+0x62>
    4b0a:	92 81       	ldd	r25, Z+2	; 0x02
    4b0c:	85 81       	ldd	r24, Z+5	; 0x05
    4b0e:	28 2f       	mov	r18, r24
    4b10:	26 95       	lsr	r18
    4b12:	29 23       	and	r18, r25
    4b14:	a0 81       	ld	r26, Z
    4b16:	b1 81       	ldd	r27, Z+1	; 0x01
    4b18:	a2 0f       	add	r26, r18
    4b1a:	b1 1d       	adc	r27, r1
    4b1c:	2c 91       	ld	r18, X
    4b1e:	9f 5f       	subi	r25, 0xFF	; 255
    4b20:	89 23       	and	r24, r25
    4b22:	82 83       	std	Z+2, r24	; 0x02
    4b24:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b28:	0b c0       	rjmp	.+22     	; 0x4b40 <__vector_52+0x6c>
    4b2a:	e1 ed       	ldi	r30, 0xD1	; 209
    4b2c:	f0 e0       	ldi	r31, 0x00	; 0
    4b2e:	80 81       	ld	r24, Z
    4b30:	8f 7d       	andi	r24, 0xDF	; 223
    4b32:	80 83       	st	Z, r24
    4b34:	05 c0       	rjmp	.+10     	; 0x4b40 <__vector_52+0x6c>
    4b36:	e1 ed       	ldi	r30, 0xD1	; 209
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	80 81       	ld	r24, Z
    4b3c:	8f 7d       	andi	r24, 0xDF	; 223
    4b3e:	80 83       	st	Z, r24
    4b40:	ff 91       	pop	r31
    4b42:	ef 91       	pop	r30
    4b44:	bf 91       	pop	r27
    4b46:	af 91       	pop	r26
    4b48:	9f 91       	pop	r25
    4b4a:	8f 91       	pop	r24
    4b4c:	2f 91       	pop	r18
    4b4e:	0f 90       	pop	r0
    4b50:	0b be       	out	0x3b, r0	; 59
    4b52:	0f 90       	pop	r0
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	0f 90       	pop	r0
    4b58:	1f 90       	pop	r1
    4b5a:	18 95       	reti

00004b5c <__vector_54>:
    4b5c:	1f 92       	push	r1
    4b5e:	0f 92       	push	r0
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	0f 92       	push	r0
    4b64:	11 24       	eor	r1, r1
    4b66:	0b b6       	in	r0, 0x3b	; 59
    4b68:	0f 92       	push	r0
    4b6a:	2f 93       	push	r18
    4b6c:	3f 93       	push	r19
    4b6e:	4f 93       	push	r20
    4b70:	5f 93       	push	r21
    4b72:	6f 93       	push	r22
    4b74:	7f 93       	push	r23
    4b76:	8f 93       	push	r24
    4b78:	9f 93       	push	r25
    4b7a:	af 93       	push	r26
    4b7c:	bf 93       	push	r27
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
    4b82:	ef 93       	push	r30
    4b84:	ff 93       	push	r31
    4b86:	a0 91 20 17 	lds	r26, 0x1720	; 0x801720 <_ser_handle+0x6>
    4b8a:	b0 91 21 17 	lds	r27, 0x1721	; 0x801721 <_ser_handle+0x7>
    4b8e:	10 97       	sbiw	r26, 0x00	; 0
    4b90:	11 f1       	breq	.+68     	; 0x4bd6 <__vector_54+0x7a>
    4b92:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4b96:	14 96       	adiw	r26, 0x04	; 4
    4b98:	ed 91       	ld	r30, X+
    4b9a:	fc 91       	ld	r31, X
    4b9c:	15 97       	sbiw	r26, 0x05	; 5
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	82 81       	ldd	r24, Z+2	; 0x02
    4ba2:	25 81       	ldd	r18, Z+5	; 0x05
    4ba4:	98 1b       	sub	r25, r24
    4ba6:	92 23       	and	r25, r18
    4ba8:	84 81       	ldd	r24, Z+4	; 0x04
    4baa:	98 17       	cp	r25, r24
    4bac:	61 f0       	breq	.+24     	; 0x4bc6 <__vector_54+0x6a>
    4bae:	83 81       	ldd	r24, Z+3	; 0x03
    4bb0:	26 95       	lsr	r18
    4bb2:	28 23       	and	r18, r24
    4bb4:	c0 81       	ld	r28, Z
    4bb6:	d1 81       	ldd	r29, Z+1	; 0x01
    4bb8:	c2 0f       	add	r28, r18
    4bba:	d1 1d       	adc	r29, r1
    4bbc:	68 83       	st	Y, r22
    4bbe:	8f 5f       	subi	r24, 0xFF	; 255
    4bc0:	95 81       	ldd	r25, Z+5	; 0x05
    4bc2:	89 23       	and	r24, r25
    4bc4:	83 83       	std	Z+3, r24	; 0x03
    4bc6:	16 96       	adiw	r26, 0x06	; 6
    4bc8:	ed 91       	ld	r30, X+
    4bca:	fc 91       	ld	r31, X
    4bcc:	17 97       	sbiw	r26, 0x07	; 7
    4bce:	30 97       	sbiw	r30, 0x00	; 0
    4bd0:	11 f0       	breq	.+4      	; 0x4bd6 <__vector_54+0x7a>
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	19 95       	eicall
    4bd6:	ff 91       	pop	r31
    4bd8:	ef 91       	pop	r30
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	bf 91       	pop	r27
    4be0:	af 91       	pop	r26
    4be2:	9f 91       	pop	r25
    4be4:	8f 91       	pop	r24
    4be6:	7f 91       	pop	r23
    4be8:	6f 91       	pop	r22
    4bea:	5f 91       	pop	r21
    4bec:	4f 91       	pop	r20
    4bee:	3f 91       	pop	r19
    4bf0:	2f 91       	pop	r18
    4bf2:	0f 90       	pop	r0
    4bf4:	0b be       	out	0x3b, r0	; 59
    4bf6:	0f 90       	pop	r0
    4bf8:	0f be       	out	0x3f, r0	; 63
    4bfa:	0f 90       	pop	r0
    4bfc:	1f 90       	pop	r1
    4bfe:	18 95       	reti

00004c00 <__vector_55>:
    4c00:	1f 92       	push	r1
    4c02:	0f 92       	push	r0
    4c04:	0f b6       	in	r0, 0x3f	; 63
    4c06:	0f 92       	push	r0
    4c08:	11 24       	eor	r1, r1
    4c0a:	0b b6       	in	r0, 0x3b	; 59
    4c0c:	0f 92       	push	r0
    4c0e:	2f 93       	push	r18
    4c10:	8f 93       	push	r24
    4c12:	9f 93       	push	r25
    4c14:	af 93       	push	r26
    4c16:	bf 93       	push	r27
    4c18:	ef 93       	push	r30
    4c1a:	ff 93       	push	r31
    4c1c:	e0 91 20 17 	lds	r30, 0x1720	; 0x801720 <_ser_handle+0x6>
    4c20:	f0 91 21 17 	lds	r31, 0x1721	; 0x801721 <_ser_handle+0x7>
    4c24:	30 97       	sbiw	r30, 0x00	; 0
    4c26:	b9 f0       	breq	.+46     	; 0x4c56 <__vector_55+0x56>
    4c28:	02 80       	ldd	r0, Z+2	; 0x02
    4c2a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c2c:	e0 2d       	mov	r30, r0
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	82 81       	ldd	r24, Z+2	; 0x02
    4c32:	98 17       	cp	r25, r24
    4c34:	b1 f0       	breq	.+44     	; 0x4c62 <__vector_55+0x62>
    4c36:	92 81       	ldd	r25, Z+2	; 0x02
    4c38:	85 81       	ldd	r24, Z+5	; 0x05
    4c3a:	28 2f       	mov	r18, r24
    4c3c:	26 95       	lsr	r18
    4c3e:	29 23       	and	r18, r25
    4c40:	a0 81       	ld	r26, Z
    4c42:	b1 81       	ldd	r27, Z+1	; 0x01
    4c44:	a2 0f       	add	r26, r18
    4c46:	b1 1d       	adc	r27, r1
    4c48:	2c 91       	ld	r18, X
    4c4a:	9f 5f       	subi	r25, 0xFF	; 255
    4c4c:	89 23       	and	r24, r25
    4c4e:	82 83       	std	Z+2, r24	; 0x02
    4c50:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c54:	0b c0       	rjmp	.+22     	; 0x4c6c <__vector_55+0x6c>
    4c56:	e1 e3       	ldi	r30, 0x31	; 49
    4c58:	f1 e0       	ldi	r31, 0x01	; 1
    4c5a:	80 81       	ld	r24, Z
    4c5c:	8f 7d       	andi	r24, 0xDF	; 223
    4c5e:	80 83       	st	Z, r24
    4c60:	05 c0       	rjmp	.+10     	; 0x4c6c <__vector_55+0x6c>
    4c62:	e1 e3       	ldi	r30, 0x31	; 49
    4c64:	f1 e0       	ldi	r31, 0x01	; 1
    4c66:	80 81       	ld	r24, Z
    4c68:	8f 7d       	andi	r24, 0xDF	; 223
    4c6a:	80 83       	st	Z, r24
    4c6c:	ff 91       	pop	r31
    4c6e:	ef 91       	pop	r30
    4c70:	bf 91       	pop	r27
    4c72:	af 91       	pop	r26
    4c74:	9f 91       	pop	r25
    4c76:	8f 91       	pop	r24
    4c78:	2f 91       	pop	r18
    4c7a:	0f 90       	pop	r0
    4c7c:	0b be       	out	0x3b, r0	; 59
    4c7e:	0f 90       	pop	r0
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	0f 90       	pop	r0
    4c84:	1f 90       	pop	r1
    4c86:	18 95       	reti

00004c88 <usart_getchar>:
    4c88:	cf 93       	push	r28
    4c8a:	df 93       	push	r29
    4c8c:	1f 92       	push	r1
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	be 01       	movw	r22, r28
    4c94:	6f 5f       	subi	r22, 0xFF	; 255
    4c96:	7f 4f       	sbci	r23, 0xFF	; 255
    4c98:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_com_serial_instance>
    4c9c:	90 91 23 17 	lds	r25, 0x1723	; 0x801723 <_com_serial_instance+0x1>
    4ca0:	7b dd       	rcall	.-1290   	; 0x4798 <serial_getByte>
    4ca2:	81 11       	cpse	r24, r1
    4ca4:	f6 cf       	rjmp	.-20     	; 0x4c92 <usart_getchar+0xa>
    4ca6:	89 81       	ldd	r24, Y+1	; 0x01
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	0f 90       	pop	r0
    4cac:	df 91       	pop	r29
    4cae:	cf 91       	pop	r28
    4cb0:	08 95       	ret

00004cb2 <usart_putchar>:
    4cb2:	68 2f       	mov	r22, r24
    4cb4:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_com_serial_instance>
    4cb8:	90 91 23 17 	lds	r25, 0x1723	; 0x801723 <_com_serial_instance+0x1>
    4cbc:	ed dc       	rcall	.-1574   	; 0x4698 <serial_sendByte>
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	08 95       	ret

00004cc4 <stdio_initialise>:
    4cc4:	8f 92       	push	r8
    4cc6:	9f 92       	push	r9
    4cc8:	af 92       	push	r10
    4cca:	cf 92       	push	r12
    4ccc:	ef 92       	push	r14
    4cce:	0f 93       	push	r16
    4cd0:	81 2c       	mov	r8, r1
    4cd2:	91 2c       	mov	r9, r1
    4cd4:	68 94       	set
    4cd6:	aa 24       	eor	r10, r10
    4cd8:	a7 f8       	bld	r10, 7
    4cda:	68 94       	set
    4cdc:	cc 24       	eor	r12, r12
    4cde:	c7 f8       	bld	r12, 7
    4ce0:	e1 2c       	mov	r14, r1
    4ce2:	00 e0       	ldi	r16, 0x00	; 0
    4ce4:	23 e0       	ldi	r18, 0x03	; 3
    4ce6:	40 e0       	ldi	r20, 0x00	; 0
    4ce8:	51 ee       	ldi	r21, 0xE1	; 225
    4cea:	60 e0       	ldi	r22, 0x00	; 0
    4cec:	70 e0       	ldi	r23, 0x00	; 0
    4cee:	32 dc       	rcall	.-1948   	; 0x4554 <serial_create>
    4cf0:	90 93 23 17 	sts	0x1723, r25	; 0x801723 <_com_serial_instance+0x1>
    4cf4:	80 93 22 17 	sts	0x1722, r24	; 0x801722 <_com_serial_instance>
    4cf8:	e9 e6       	ldi	r30, 0x69	; 105
    4cfa:	f7 e1       	ldi	r31, 0x17	; 23
    4cfc:	83 e1       	ldi	r24, 0x13	; 19
    4cfe:	92 e0       	ldi	r25, 0x02	; 2
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	80 83       	st	Z, r24
    4d04:	93 83       	std	Z+3, r25	; 0x03
    4d06:	82 83       	std	Z+2, r24	; 0x02
    4d08:	0f 91       	pop	r16
    4d0a:	ef 90       	pop	r14
    4d0c:	cf 90       	pop	r12
    4d0e:	af 90       	pop	r10
    4d10:	9f 90       	pop	r9
    4d12:	8f 90       	pop	r8
    4d14:	08 95       	ret

00004d16 <_turn_off>:
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	fc 01       	movw	r30, r24
    4d1a:	ee 0f       	add	r30, r30
    4d1c:	ff 1f       	adc	r31, r31
    4d1e:	e8 0f       	add	r30, r24
    4d20:	f9 1f       	adc	r31, r25
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	ec 5d       	subi	r30, 0xDC	; 220
    4d28:	f8 4e       	sbci	r31, 0xE8	; 232
    4d2a:	23 81       	ldd	r18, Z+3	; 0x03
    4d2c:	21 11       	cpse	r18, r1
    4d2e:	1f c0       	rjmp	.+62     	; 0x4d6e <_turn_off+0x58>
    4d30:	9c 01       	movw	r18, r24
    4d32:	22 0f       	add	r18, r18
    4d34:	33 1f       	adc	r19, r19
    4d36:	f9 01       	movw	r30, r18
    4d38:	e8 0f       	add	r30, r24
    4d3a:	f9 1f       	adc	r31, r25
    4d3c:	ee 0f       	add	r30, r30
    4d3e:	ff 1f       	adc	r31, r31
    4d40:	ec 5d       	subi	r30, 0xDC	; 220
    4d42:	f8 4e       	sbci	r31, 0xE8	; 232
    4d44:	a0 81       	ld	r26, Z
    4d46:	b1 81       	ldd	r27, Z+1	; 0x01
    4d48:	4c 91       	ld	r20, X
    4d4a:	f9 01       	movw	r30, r18
    4d4c:	e8 0f       	add	r30, r24
    4d4e:	f9 1f       	adc	r31, r25
    4d50:	ee 0f       	add	r30, r30
    4d52:	ff 1f       	adc	r31, r31
    4d54:	ec 5d       	subi	r30, 0xDC	; 220
    4d56:	f8 4e       	sbci	r31, 0xE8	; 232
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	02 80       	ldd	r0, Z+2	; 0x02
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <_turn_off+0x4e>
    4d60:	88 0f       	add	r24, r24
    4d62:	99 1f       	adc	r25, r25
    4d64:	0a 94       	dec	r0
    4d66:	e2 f7       	brpl	.-8      	; 0x4d60 <_turn_off+0x4a>
    4d68:	84 2b       	or	r24, r20
    4d6a:	8c 93       	st	X, r24
    4d6c:	08 95       	ret
    4d6e:	fc 01       	movw	r30, r24
    4d70:	ee 0f       	add	r30, r30
    4d72:	ff 1f       	adc	r31, r31
    4d74:	df 01       	movw	r26, r30
    4d76:	a8 0f       	add	r26, r24
    4d78:	b9 1f       	adc	r27, r25
    4d7a:	aa 0f       	add	r26, r26
    4d7c:	bb 1f       	adc	r27, r27
    4d7e:	ac 5d       	subi	r26, 0xDC	; 220
    4d80:	b8 4e       	sbci	r27, 0xE8	; 232
    4d82:	0d 90       	ld	r0, X+
    4d84:	bc 91       	ld	r27, X
    4d86:	a0 2d       	mov	r26, r0
    4d88:	2c 91       	ld	r18, X
    4d8a:	e8 0f       	add	r30, r24
    4d8c:	f9 1f       	adc	r31, r25
    4d8e:	ee 0f       	add	r30, r30
    4d90:	ff 1f       	adc	r31, r31
    4d92:	ec 5d       	subi	r30, 0xDC	; 220
    4d94:	f8 4e       	sbci	r31, 0xE8	; 232
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	02 80       	ldd	r0, Z+2	; 0x02
    4d9c:	02 c0       	rjmp	.+4      	; 0x4da2 <_turn_off+0x8c>
    4d9e:	88 0f       	add	r24, r24
    4da0:	99 1f       	adc	r25, r25
    4da2:	0a 94       	dec	r0
    4da4:	e2 f7       	brpl	.-8      	; 0x4d9e <_turn_off+0x88>
    4da6:	80 95       	com	r24
    4da8:	82 23       	and	r24, r18
    4daa:	8c 93       	st	X, r24
    4dac:	08 95       	ret

00004dae <_turn_on>:
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	fc 01       	movw	r30, r24
    4db2:	ee 0f       	add	r30, r30
    4db4:	ff 1f       	adc	r31, r31
    4db6:	e8 0f       	add	r30, r24
    4db8:	f9 1f       	adc	r31, r25
    4dba:	ee 0f       	add	r30, r30
    4dbc:	ff 1f       	adc	r31, r31
    4dbe:	ec 5d       	subi	r30, 0xDC	; 220
    4dc0:	f8 4e       	sbci	r31, 0xE8	; 232
    4dc2:	23 81       	ldd	r18, Z+3	; 0x03
    4dc4:	21 11       	cpse	r18, r1
    4dc6:	20 c0       	rjmp	.+64     	; 0x4e08 <_turn_on+0x5a>
    4dc8:	9c 01       	movw	r18, r24
    4dca:	22 0f       	add	r18, r18
    4dcc:	33 1f       	adc	r19, r19
    4dce:	f9 01       	movw	r30, r18
    4dd0:	e8 0f       	add	r30, r24
    4dd2:	f9 1f       	adc	r31, r25
    4dd4:	ee 0f       	add	r30, r30
    4dd6:	ff 1f       	adc	r31, r31
    4dd8:	ec 5d       	subi	r30, 0xDC	; 220
    4dda:	f8 4e       	sbci	r31, 0xE8	; 232
    4ddc:	a0 81       	ld	r26, Z
    4dde:	b1 81       	ldd	r27, Z+1	; 0x01
    4de0:	4c 91       	ld	r20, X
    4de2:	f9 01       	movw	r30, r18
    4de4:	e8 0f       	add	r30, r24
    4de6:	f9 1f       	adc	r31, r25
    4de8:	ee 0f       	add	r30, r30
    4dea:	ff 1f       	adc	r31, r31
    4dec:	ec 5d       	subi	r30, 0xDC	; 220
    4dee:	f8 4e       	sbci	r31, 0xE8	; 232
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	02 80       	ldd	r0, Z+2	; 0x02
    4df6:	02 c0       	rjmp	.+4      	; 0x4dfc <_turn_on+0x4e>
    4df8:	88 0f       	add	r24, r24
    4dfa:	99 1f       	adc	r25, r25
    4dfc:	0a 94       	dec	r0
    4dfe:	e2 f7       	brpl	.-8      	; 0x4df8 <_turn_on+0x4a>
    4e00:	80 95       	com	r24
    4e02:	84 23       	and	r24, r20
    4e04:	8c 93       	st	X, r24
    4e06:	08 95       	ret
    4e08:	fc 01       	movw	r30, r24
    4e0a:	ee 0f       	add	r30, r30
    4e0c:	ff 1f       	adc	r31, r31
    4e0e:	df 01       	movw	r26, r30
    4e10:	a8 0f       	add	r26, r24
    4e12:	b9 1f       	adc	r27, r25
    4e14:	aa 0f       	add	r26, r26
    4e16:	bb 1f       	adc	r27, r27
    4e18:	ac 5d       	subi	r26, 0xDC	; 220
    4e1a:	b8 4e       	sbci	r27, 0xE8	; 232
    4e1c:	0d 90       	ld	r0, X+
    4e1e:	bc 91       	ld	r27, X
    4e20:	a0 2d       	mov	r26, r0
    4e22:	2c 91       	ld	r18, X
    4e24:	e8 0f       	add	r30, r24
    4e26:	f9 1f       	adc	r31, r25
    4e28:	ee 0f       	add	r30, r30
    4e2a:	ff 1f       	adc	r31, r31
    4e2c:	ec 5d       	subi	r30, 0xDC	; 220
    4e2e:	f8 4e       	sbci	r31, 0xE8	; 232
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	02 80       	ldd	r0, Z+2	; 0x02
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <_turn_on+0x8e>
    4e38:	88 0f       	add	r24, r24
    4e3a:	99 1f       	adc	r25, r25
    4e3c:	0a 94       	dec	r0
    4e3e:	e2 f7       	brpl	.-8      	; 0x4e38 <_turn_on+0x8a>
    4e40:	82 2b       	or	r24, r18
    4e42:	8c 93       	st	X, r24
    4e44:	08 95       	ret

00004e46 <_hal_led_task>:
    4e46:	cc 24       	eor	r12, r12
    4e48:	c3 94       	inc	r12
    4e4a:	d1 2c       	mov	r13, r1
    4e4c:	68 94       	set
    4e4e:	bb 24       	eor	r11, r11
    4e50:	b2 f8       	bld	r11, 2
    4e52:	c4 e2       	ldi	r28, 0x24	; 36
    4e54:	d7 e1       	ldi	r29, 0x17	; 23
    4e56:	10 e0       	ldi	r17, 0x00	; 0
    4e58:	8c 81       	ldd	r24, Y+4	; 0x04
    4e5a:	81 30       	cpi	r24, 0x01	; 1
    4e5c:	81 f0       	breq	.+32     	; 0x4e7e <_hal_led_task+0x38>
    4e5e:	18 f1       	brcs	.+70     	; 0x4ea6 <_hal_led_task+0x60>
    4e60:	82 30       	cpi	r24, 0x02	; 2
    4e62:	61 f5       	brne	.+88     	; 0x4ebc <_hal_led_task+0x76>
    4e64:	e8 81       	ld	r30, Y
    4e66:	f9 81       	ldd	r31, Y+1	; 0x01
    4e68:	20 81       	ld	r18, Z
    4e6a:	c6 01       	movw	r24, r12
    4e6c:	0a 80       	ldd	r0, Y+2	; 0x02
    4e6e:	02 c0       	rjmp	.+4      	; 0x4e74 <_hal_led_task+0x2e>
    4e70:	88 0f       	add	r24, r24
    4e72:	99 1f       	adc	r25, r25
    4e74:	0a 94       	dec	r0
    4e76:	e2 f7       	brpl	.-8      	; 0x4e70 <_hal_led_task+0x2a>
    4e78:	82 27       	eor	r24, r18
    4e7a:	80 83       	st	Z, r24
    4e7c:	1f c0       	rjmp	.+62     	; 0x4ebc <_hal_led_task+0x76>
    4e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e80:	8f 5f       	subi	r24, 0xFF	; 255
    4e82:	86 30       	cpi	r24, 0x06	; 6
    4e84:	10 f4       	brcc	.+4      	; 0x4e8a <_hal_led_task+0x44>
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	19 c0       	rjmp	.+50     	; 0x4ebc <_hal_led_task+0x76>
    4e8a:	1d 82       	std	Y+5, r1	; 0x05
    4e8c:	e8 81       	ld	r30, Y
    4e8e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e90:	20 81       	ld	r18, Z
    4e92:	c6 01       	movw	r24, r12
    4e94:	0a 80       	ldd	r0, Y+2	; 0x02
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <_hal_led_task+0x56>
    4e98:	88 0f       	add	r24, r24
    4e9a:	99 1f       	adc	r25, r25
    4e9c:	0a 94       	dec	r0
    4e9e:	e2 f7       	brpl	.-8      	; 0x4e98 <_hal_led_task+0x52>
    4ea0:	82 27       	eor	r24, r18
    4ea2:	80 83       	st	Z, r24
    4ea4:	0b c0       	rjmp	.+22     	; 0x4ebc <_hal_led_task+0x76>
    4ea6:	0d 81       	ldd	r16, Y+5	; 0x05
    4ea8:	00 23       	and	r16, r16
    4eaa:	29 f0       	breq	.+10     	; 0x4eb6 <_hal_led_task+0x70>
    4eac:	81 2f       	mov	r24, r17
    4eae:	7f df       	rcall	.-258    	; 0x4dae <_turn_on>
    4eb0:	01 50       	subi	r16, 0x01	; 1
    4eb2:	0d 83       	std	Y+5, r16	; 0x05
    4eb4:	03 c0       	rjmp	.+6      	; 0x4ebc <_hal_led_task+0x76>
    4eb6:	bc 82       	std	Y+4, r11	; 0x04
    4eb8:	81 2f       	mov	r24, r17
    4eba:	2d df       	rcall	.-422    	; 0x4d16 <_turn_off>
    4ebc:	1f 5f       	subi	r17, 0xFF	; 255
    4ebe:	26 96       	adiw	r28, 0x06	; 6
    4ec0:	14 30       	cpi	r17, 0x04	; 4
    4ec2:	51 f6       	brne	.-108    	; 0x4e58 <_hal_led_task+0x12>
    4ec4:	6c e0       	ldi	r22, 0x0C	; 12
    4ec6:	70 e0       	ldi	r23, 0x00	; 0
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vTaskDelay>
    4ed0:	c0 cf       	rjmp	.-128    	; 0x4e52 <_hal_led_task+0xc>

00004ed2 <status_leds_initialise>:
    4ed2:	ef 92       	push	r14
    4ed4:	ff 92       	push	r15
    4ed6:	0f 93       	push	r16
    4ed8:	1f 93       	push	r17
    4eda:	cf 93       	push	r28
    4edc:	df 93       	push	r29
    4ede:	08 2f       	mov	r16, r24
    4ee0:	80 e4       	ldi	r24, 0x40	; 64
    4ee2:	87 b9       	out	0x07, r24	; 7
    4ee4:	c4 e2       	ldi	r28, 0x24	; 36
    4ee6:	d7 e1       	ldi	r29, 0x17	; 23
    4ee8:	0f 2e       	mov	r0, r31
    4eea:	f8 e2       	ldi	r31, 0x28	; 40
    4eec:	ef 2e       	mov	r14, r31
    4eee:	f1 2c       	mov	r15, r1
    4ef0:	f0 2d       	mov	r31, r0
    4ef2:	f9 82       	std	Y+1, r15	; 0x01
    4ef4:	e8 82       	st	Y, r14
    4ef6:	86 e0       	ldi	r24, 0x06	; 6
    4ef8:	8a 83       	std	Y+2, r24	; 0x02
    4efa:	1b 82       	std	Y+3, r1	; 0x03
    4efc:	14 e0       	ldi	r17, 0x04	; 4
    4efe:	1c 83       	std	Y+4, r17	; 0x04
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	09 df       	rcall	.-494    	; 0x4d16 <_turn_off>
    4f04:	80 e8       	ldi	r24, 0x80	; 128
    4f06:	87 b9       	out	0x07, r24	; 7
    4f08:	ff 82       	std	Y+7, r15	; 0x07
    4f0a:	ee 82       	std	Y+6, r14	; 0x06
    4f0c:	87 e0       	ldi	r24, 0x07	; 7
    4f0e:	88 87       	std	Y+8, r24	; 0x08
    4f10:	19 86       	std	Y+9, r1	; 0x09
    4f12:	1a 87       	std	Y+10, r17	; 0x0a
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	ff de       	rcall	.-514    	; 0x4d16 <_turn_off>
    4f18:	80 e2       	ldi	r24, 0x20	; 32
    4f1a:	83 bb       	out	0x13, r24	; 19
    4f1c:	84 e3       	ldi	r24, 0x34	; 52
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	9d 87       	std	Y+13, r25	; 0x0d
    4f22:	8c 87       	std	Y+12, r24	; 0x0c
    4f24:	85 e0       	ldi	r24, 0x05	; 5
    4f26:	8e 87       	std	Y+14, r24	; 0x0e
    4f28:	1f 86       	std	Y+15, r1	; 0x0f
    4f2a:	18 8b       	std	Y+16, r17	; 0x10
    4f2c:	82 e0       	ldi	r24, 0x02	; 2
    4f2e:	f3 de       	rcall	.-538    	; 0x4d16 <_turn_off>
    4f30:	80 e1       	ldi	r24, 0x10	; 16
    4f32:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4f36:	82 e0       	ldi	r24, 0x02	; 2
    4f38:	91 e0       	ldi	r25, 0x01	; 1
    4f3a:	9b 8b       	std	Y+19, r25	; 0x13
    4f3c:	8a 8b       	std	Y+18, r24	; 0x12
    4f3e:	1c 8b       	std	Y+20, r17	; 0x14
    4f40:	1d 8a       	std	Y+21, r1	; 0x15
    4f42:	1e 8b       	std	Y+22, r17	; 0x16
    4f44:	83 e0       	ldi	r24, 0x03	; 3
    4f46:	e7 de       	rcall	.-562    	; 0x4d16 <_turn_off>
    4f48:	e1 2c       	mov	r14, r1
    4f4a:	f1 2c       	mov	r15, r1
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 ec       	ldi	r20, 0xC0	; 192
    4f52:	50 e0       	ldi	r21, 0x00	; 0
    4f54:	69 e4       	ldi	r22, 0x49	; 73
    4f56:	77 e0       	ldi	r23, 0x07	; 7
    4f58:	83 e2       	ldi	r24, 0x23	; 35
    4f5a:	97 e2       	ldi	r25, 0x27	; 39
    4f5c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <xTaskCreate>
    4f60:	df 91       	pop	r29
    4f62:	cf 91       	pop	r28
    4f64:	1f 91       	pop	r17
    4f66:	0f 91       	pop	r16
    4f68:	ff 90       	pop	r15
    4f6a:	ef 90       	pop	r14
    4f6c:	08 95       	ret

00004f6e <status_leds_slowBlink>:
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	fc 01       	movw	r30, r24
    4f76:	ee 0f       	add	r30, r30
    4f78:	ff 1f       	adc	r31, r31
    4f7a:	df 01       	movw	r26, r30
    4f7c:	a8 0f       	add	r26, r24
    4f7e:	b9 1f       	adc	r27, r25
    4f80:	aa 0f       	add	r26, r26
    4f82:	bb 1f       	adc	r27, r27
    4f84:	ac 5d       	subi	r26, 0xDC	; 220
    4f86:	b8 4e       	sbci	r27, 0xE8	; 232
    4f88:	cd 91       	ld	r28, X+
    4f8a:	dc 91       	ld	r29, X
    4f8c:	11 97       	sbiw	r26, 0x01	; 1
    4f8e:	48 81       	ld	r20, Y
    4f90:	21 e0       	ldi	r18, 0x01	; 1
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	12 96       	adiw	r26, 0x02	; 2
    4f96:	0c 90       	ld	r0, X
    4f98:	12 97       	sbiw	r26, 0x02	; 2
    4f9a:	02 c0       	rjmp	.+4      	; 0x4fa0 <status_leds_slowBlink+0x32>
    4f9c:	22 0f       	add	r18, r18
    4f9e:	33 1f       	adc	r19, r19
    4fa0:	0a 94       	dec	r0
    4fa2:	e2 f7       	brpl	.-8      	; 0x4f9c <status_leds_slowBlink+0x2e>
    4fa4:	24 27       	eor	r18, r20
    4fa6:	28 83       	st	Y, r18
    4fa8:	fd 01       	movw	r30, r26
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	84 83       	std	Z+4, r24	; 0x04
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	08 95       	ret

00004fb4 <status_leds_fastBlink>:
    4fb4:	cf 93       	push	r28
    4fb6:	df 93       	push	r29
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	fc 01       	movw	r30, r24
    4fbc:	ee 0f       	add	r30, r30
    4fbe:	ff 1f       	adc	r31, r31
    4fc0:	df 01       	movw	r26, r30
    4fc2:	a8 0f       	add	r26, r24
    4fc4:	b9 1f       	adc	r27, r25
    4fc6:	aa 0f       	add	r26, r26
    4fc8:	bb 1f       	adc	r27, r27
    4fca:	ac 5d       	subi	r26, 0xDC	; 220
    4fcc:	b8 4e       	sbci	r27, 0xE8	; 232
    4fce:	cd 91       	ld	r28, X+
    4fd0:	dc 91       	ld	r29, X
    4fd2:	11 97       	sbiw	r26, 0x01	; 1
    4fd4:	48 81       	ld	r20, Y
    4fd6:	21 e0       	ldi	r18, 0x01	; 1
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	12 96       	adiw	r26, 0x02	; 2
    4fdc:	0c 90       	ld	r0, X
    4fde:	12 97       	sbiw	r26, 0x02	; 2
    4fe0:	02 c0       	rjmp	.+4      	; 0x4fe6 <status_leds_fastBlink+0x32>
    4fe2:	22 0f       	add	r18, r18
    4fe4:	33 1f       	adc	r19, r19
    4fe6:	0a 94       	dec	r0
    4fe8:	e2 f7       	brpl	.-8      	; 0x4fe2 <status_leds_fastBlink+0x2e>
    4fea:	24 27       	eor	r18, r20
    4fec:	28 83       	st	Y, r18
    4fee:	fd 01       	movw	r30, r26
    4ff0:	82 e0       	ldi	r24, 0x02	; 2
    4ff2:	84 83       	std	Z+4, r24	; 0x04
    4ff4:	df 91       	pop	r29
    4ff6:	cf 91       	pop	r28
    4ff8:	08 95       	ret

00004ffa <status_leds_ledOn>:
    4ffa:	28 2f       	mov	r18, r24
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	f9 01       	movw	r30, r18
    5000:	ee 0f       	add	r30, r30
    5002:	ff 1f       	adc	r31, r31
    5004:	e2 0f       	add	r30, r18
    5006:	f3 1f       	adc	r31, r19
    5008:	ee 0f       	add	r30, r30
    500a:	ff 1f       	adc	r31, r31
    500c:	ec 5d       	subi	r30, 0xDC	; 220
    500e:	f8 4e       	sbci	r31, 0xE8	; 232
    5010:	93 e0       	ldi	r25, 0x03	; 3
    5012:	94 83       	std	Z+4, r25	; 0x04
    5014:	cc ce       	rjmp	.-616    	; 0x4dae <_turn_on>
    5016:	08 95       	ret

00005018 <status_leds_ledOff>:
    5018:	28 2f       	mov	r18, r24
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	f9 01       	movw	r30, r18
    501e:	ee 0f       	add	r30, r30
    5020:	ff 1f       	adc	r31, r31
    5022:	e2 0f       	add	r30, r18
    5024:	f3 1f       	adc	r31, r19
    5026:	ee 0f       	add	r30, r30
    5028:	ff 1f       	adc	r31, r31
    502a:	ec 5d       	subi	r30, 0xDC	; 220
    502c:	f8 4e       	sbci	r31, 0xE8	; 232
    502e:	94 e0       	ldi	r25, 0x04	; 4
    5030:	94 83       	std	Z+4, r25	; 0x04
    5032:	71 ce       	rjmp	.-798    	; 0x4d16 <_turn_off>
    5034:	08 95       	ret

00005036 <status_leds_longPuls>:
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	fc 01       	movw	r30, r24
    503a:	ee 0f       	add	r30, r30
    503c:	ff 1f       	adc	r31, r31
    503e:	df 01       	movw	r26, r30
    5040:	a8 0f       	add	r26, r24
    5042:	b9 1f       	adc	r27, r25
    5044:	aa 0f       	add	r26, r26
    5046:	bb 1f       	adc	r27, r27
    5048:	ac 5d       	subi	r26, 0xDC	; 220
    504a:	b8 4e       	sbci	r27, 0xE8	; 232
    504c:	26 e0       	ldi	r18, 0x06	; 6
    504e:	15 96       	adiw	r26, 0x05	; 5
    5050:	2c 93       	st	X, r18
    5052:	15 97       	sbiw	r26, 0x05	; 5
    5054:	fd 01       	movw	r30, r26
    5056:	14 82       	std	Z+4, r1	; 0x04
    5058:	08 95       	ret

0000505a <status_leds_shortPuls>:
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	fc 01       	movw	r30, r24
    505e:	ee 0f       	add	r30, r30
    5060:	ff 1f       	adc	r31, r31
    5062:	df 01       	movw	r26, r30
    5064:	a8 0f       	add	r26, r24
    5066:	b9 1f       	adc	r27, r25
    5068:	aa 0f       	add	r26, r26
    506a:	bb 1f       	adc	r27, r27
    506c:	ac 5d       	subi	r26, 0xDC	; 220
    506e:	b8 4e       	sbci	r27, 0xE8	; 232
    5070:	15 96       	adiw	r26, 0x05	; 5
    5072:	1c 92       	st	X, r1
    5074:	15 97       	sbiw	r26, 0x05	; 5
    5076:	fd 01       	movw	r30, r26
    5078:	14 82       	std	Z+4, r1	; 0x04
    507a:	08 95       	ret

0000507c <_initTwiInterface>:
    507c:	80 91 4a 17 	lds	r24, 0x174A	; 0x80174a <_twiIsInitiated>
    5080:	81 11       	cpse	r24, r1
    5082:	0c c0       	rjmp	.+24     	; 0x509c <_initTwiInterface+0x20>
    5084:	8c e0       	ldi	r24, 0x0C	; 12
    5086:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5090:	84 e0       	ldi	r24, 0x04	; 4
    5092:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	80 93 4a 17 	sts	0x174A, r24	; 0x80174a <_twiIsInitiated>
    509c:	08 95       	ret

0000509e <twiCreate>:
    509e:	af 92       	push	r10
    50a0:	bf 92       	push	r11
    50a2:	cf 92       	push	r12
    50a4:	df 92       	push	r13
    50a6:	ef 92       	push	r14
    50a8:	ff 92       	push	r15
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	a8 2e       	mov	r10, r24
    50b4:	b6 2e       	mov	r11, r22
    50b6:	69 01       	movw	r12, r18
    50b8:	7a 01       	movw	r14, r20
    50ba:	84 e0       	ldi	r24, 0x04	; 4
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	5f d3       	rcall	.+1726   	; 0x577e <malloc>
    50c0:	ec 01       	movw	r28, r24
    50c2:	89 2b       	or	r24, r25
    50c4:	61 f1       	breq	.+88     	; 0x511e <twiCreate+0x80>
    50c6:	a8 82       	st	Y, r10
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	b8 12       	cpse	r11, r24
    50cc:	12 c0       	rjmp	.+36     	; 0x50f2 <twiCreate+0x54>
    50ce:	c7 01       	movw	r24, r14
    50d0:	b6 01       	movw	r22, r12
    50d2:	20 ea       	ldi	r18, 0xA0	; 160
    50d4:	36 e8       	ldi	r19, 0x86	; 134
    50d6:	41 e0       	ldi	r20, 0x01	; 1
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	27 d3       	rcall	.+1614   	; 0x572a <__udivmodsi4>
    50dc:	da 01       	movw	r26, r20
    50de:	c9 01       	movw	r24, r18
    50e0:	40 97       	sbiw	r24, 0x10	; 16
    50e2:	a1 09       	sbc	r26, r1
    50e4:	b1 09       	sbc	r27, r1
    50e6:	b6 95       	lsr	r27
    50e8:	a7 95       	ror	r26
    50ea:	97 95       	ror	r25
    50ec:	87 95       	ror	r24
    50ee:	89 83       	std	Y+1, r24	; 0x01
    50f0:	11 c0       	rjmp	.+34     	; 0x5114 <twiCreate+0x76>
    50f2:	c7 01       	movw	r24, r14
    50f4:	b6 01       	movw	r22, r12
    50f6:	20 e8       	ldi	r18, 0x80	; 128
    50f8:	3a e1       	ldi	r19, 0x1A	; 26
    50fa:	46 e0       	ldi	r20, 0x06	; 6
    50fc:	50 e0       	ldi	r21, 0x00	; 0
    50fe:	15 d3       	rcall	.+1578   	; 0x572a <__udivmodsi4>
    5100:	da 01       	movw	r26, r20
    5102:	c9 01       	movw	r24, r18
    5104:	40 97       	sbiw	r24, 0x10	; 16
    5106:	a1 09       	sbc	r26, r1
    5108:	b1 09       	sbc	r27, r1
    510a:	b6 95       	lsr	r27
    510c:	a7 95       	ror	r26
    510e:	97 95       	ror	r25
    5110:	87 95       	ror	r24
    5112:	89 83       	std	Y+1, r24	; 0x01
    5114:	1b 83       	std	Y+3, r17	; 0x03
    5116:	0a 83       	std	Y+2, r16	; 0x02
    5118:	8c 2f       	mov	r24, r28
    511a:	9d 2f       	mov	r25, r29
    511c:	02 c0       	rjmp	.+4      	; 0x5122 <twiCreate+0x84>
    511e:	80 e0       	ldi	r24, 0x00	; 0
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	df 91       	pop	r29
    5124:	cf 91       	pop	r28
    5126:	1f 91       	pop	r17
    5128:	0f 91       	pop	r16
    512a:	ff 90       	pop	r15
    512c:	ef 90       	pop	r14
    512e:	df 90       	pop	r13
    5130:	cf 90       	pop	r12
    5132:	bf 90       	pop	r11
    5134:	af 90       	pop	r10
    5136:	08 95       	ret

00005138 <twiIsBusy>:
    5138:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    513c:	81 70       	andi	r24, 0x01	; 1
    513e:	08 95       	ret

00005140 <twiTransmit>:
    5140:	ff 92       	push	r15
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	00 97       	sbiw	r24, 0x00	; 0
    514c:	d1 f1       	breq	.+116    	; 0x51c2 <twiTransmit+0x82>
    514e:	4a 30       	cpi	r20, 0x0A	; 10
    5150:	d0 f5       	brcc	.+116    	; 0x51c6 <twiTransmit+0x86>
    5152:	f4 2e       	mov	r15, r20
    5154:	8b 01       	movw	r16, r22
    5156:	ec 01       	movw	r28, r24
    5158:	ef df       	rcall	.-34     	; 0x5138 <twiIsBusy>
    515a:	81 11       	cpse	r24, r1
    515c:	36 c0       	rjmp	.+108    	; 0x51ca <twiTransmit+0x8a>
    515e:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_twiCurrentHandler>
    5162:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_twiCurrentHandler+0x1>
    5166:	c8 17       	cp	r28, r24
    5168:	d9 07       	cpc	r29, r25
    516a:	41 f0       	breq	.+16     	; 0x517c <twiTransmit+0x3c>
    516c:	87 df       	rcall	.-242    	; 0x507c <_initTwiInterface>
    516e:	89 81       	ldd	r24, Y+1	; 0x01
    5170:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5174:	d0 93 3e 17 	sts	0x173E, r29	; 0x80173e <_twiCurrentHandler+0x1>
    5178:	c0 93 3d 17 	sts	0x173D, r28	; 0x80173d <_twiCurrentHandler>
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	8f 0d       	add	r24, r15
    5180:	80 93 3f 17 	sts	0x173F, r24	; 0x80173f <_twiMessageLen>
    5184:	88 81       	ld	r24, Y
    5186:	88 0f       	add	r24, r24
    5188:	80 93 40 17 	sts	0x1740, r24	; 0x801740 <_twiMessageBuffer>
    518c:	ff 20       	and	r15, r15
    518e:	89 f0       	breq	.+34     	; 0x51b2 <twiTransmit+0x72>
    5190:	f8 01       	movw	r30, r16
    5192:	a1 e4       	ldi	r26, 0x41	; 65
    5194:	b7 e1       	ldi	r27, 0x17	; 23
    5196:	4f ef       	ldi	r20, 0xFF	; 255
    5198:	4f 0d       	add	r20, r15
    519a:	64 2f       	mov	r22, r20
    519c:	70 e0       	ldi	r23, 0x00	; 0
    519e:	cb 01       	movw	r24, r22
    51a0:	01 96       	adiw	r24, 0x01	; 1
    51a2:	b8 01       	movw	r22, r16
    51a4:	68 0f       	add	r22, r24
    51a6:	79 1f       	adc	r23, r25
    51a8:	81 91       	ld	r24, Z+
    51aa:	8d 93       	st	X+, r24
    51ac:	e6 17       	cp	r30, r22
    51ae:	f7 07       	cpc	r31, r23
    51b0:	d9 f7       	brne	.-10     	; 0x51a8 <twiTransmit+0x68>
    51b2:	88 ef       	ldi	r24, 0xF8	; 248
    51b4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    51b8:	85 ea       	ldi	r24, 0xA5	; 165
    51ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    51be:	84 e0       	ldi	r24, 0x04	; 4
    51c0:	05 c0       	rjmp	.+10     	; 0x51cc <twiTransmit+0x8c>
    51c2:	86 e0       	ldi	r24, 0x06	; 6
    51c4:	03 c0       	rjmp	.+6      	; 0x51cc <twiTransmit+0x8c>
    51c6:	87 e0       	ldi	r24, 0x07	; 7
    51c8:	01 c0       	rjmp	.+2      	; 0x51cc <twiTransmit+0x8c>
    51ca:	82 e0       	ldi	r24, 0x02	; 2
    51cc:	df 91       	pop	r29
    51ce:	cf 91       	pop	r28
    51d0:	1f 91       	pop	r17
    51d2:	0f 91       	pop	r16
    51d4:	ff 90       	pop	r15
    51d6:	08 95       	ret

000051d8 <twiReceive>:
    51d8:	1f 93       	push	r17
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	00 97       	sbiw	r24, 0x00	; 0
    51e0:	29 f1       	breq	.+74     	; 0x522c <twiReceive+0x54>
    51e2:	6b 30       	cpi	r22, 0x0B	; 11
    51e4:	28 f5       	brcc	.+74     	; 0x5230 <twiReceive+0x58>
    51e6:	16 2f       	mov	r17, r22
    51e8:	ec 01       	movw	r28, r24
    51ea:	a6 df       	rcall	.-180    	; 0x5138 <twiIsBusy>
    51ec:	81 11       	cpse	r24, r1
    51ee:	22 c0       	rjmp	.+68     	; 0x5234 <twiReceive+0x5c>
    51f0:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_twiCurrentHandler>
    51f4:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_twiCurrentHandler+0x1>
    51f8:	c8 17       	cp	r28, r24
    51fa:	d9 07       	cpc	r29, r25
    51fc:	41 f0       	breq	.+16     	; 0x520e <twiReceive+0x36>
    51fe:	3e df       	rcall	.-388    	; 0x507c <_initTwiInterface>
    5200:	89 81       	ldd	r24, Y+1	; 0x01
    5202:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5206:	d0 93 3e 17 	sts	0x173E, r29	; 0x80173e <_twiCurrentHandler+0x1>
    520a:	c0 93 3d 17 	sts	0x173D, r28	; 0x80173d <_twiCurrentHandler>
    520e:	10 93 3f 17 	sts	0x173F, r17	; 0x80173f <_twiMessageLen>
    5212:	88 81       	ld	r24, Y
    5214:	88 0f       	add	r24, r24
    5216:	81 60       	ori	r24, 0x01	; 1
    5218:	80 93 40 17 	sts	0x1740, r24	; 0x801740 <_twiMessageBuffer>
    521c:	88 ef       	ldi	r24, 0xF8	; 248
    521e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5222:	85 ea       	ldi	r24, 0xA5	; 165
    5224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5228:	85 e0       	ldi	r24, 0x05	; 5
    522a:	05 c0       	rjmp	.+10     	; 0x5236 <twiReceive+0x5e>
    522c:	86 e0       	ldi	r24, 0x06	; 6
    522e:	03 c0       	rjmp	.+6      	; 0x5236 <twiReceive+0x5e>
    5230:	87 e0       	ldi	r24, 0x07	; 7
    5232:	01 c0       	rjmp	.+2      	; 0x5236 <twiReceive+0x5e>
    5234:	82 e0       	ldi	r24, 0x02	; 2
    5236:	df 91       	pop	r29
    5238:	cf 91       	pop	r28
    523a:	1f 91       	pop	r17
    523c:	08 95       	ret

0000523e <__vector_39>:
    523e:	1f 92       	push	r1
    5240:	0f 92       	push	r0
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	0f 92       	push	r0
    5246:	11 24       	eor	r1, r1
    5248:	0b b6       	in	r0, 0x3b	; 59
    524a:	0f 92       	push	r0
    524c:	2f 93       	push	r18
    524e:	3f 93       	push	r19
    5250:	4f 93       	push	r20
    5252:	5f 93       	push	r21
    5254:	6f 93       	push	r22
    5256:	7f 93       	push	r23
    5258:	8f 93       	push	r24
    525a:	9f 93       	push	r25
    525c:	af 93       	push	r26
    525e:	bf 93       	push	r27
    5260:	ef 93       	push	r30
    5262:	ff 93       	push	r31
    5264:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5268:	8e 2f       	mov	r24, r30
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	fc 01       	movw	r30, r24
    526e:	38 97       	sbiw	r30, 0x08	; 8
    5270:	e1 35       	cpi	r30, 0x51	; 81
    5272:	f1 05       	cpc	r31, r1
    5274:	08 f0       	brcs	.+2      	; 0x5278 <__vector_39+0x3a>
    5276:	75 c0       	rjmp	.+234    	; 0x5362 <__vector_39+0x124>
    5278:	88 27       	eor	r24, r24
    527a:	e4 58       	subi	r30, 0x84	; 132
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	8f 4f       	sbci	r24, 0xFF	; 255
    5280:	76 c2       	rjmp	.+1260   	; 0x576e <__tablejump2__>
    5282:	10 92 3c 17 	sts	0x173C, r1	; 0x80173c <_index.1885>
    5286:	e0 91 3c 17 	lds	r30, 0x173C	; 0x80173c <_index.1885>
    528a:	80 91 3f 17 	lds	r24, 0x173F	; 0x80173f <_twiMessageLen>
    528e:	e8 17       	cp	r30, r24
    5290:	70 f4       	brcc	.+28     	; 0x52ae <__vector_39+0x70>
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	8e 0f       	add	r24, r30
    5296:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <_index.1885>
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	e0 5c       	subi	r30, 0xC0	; 192
    529e:	f8 4e       	sbci	r31, 0xE8	; 232
    52a0:	80 81       	ld	r24, Z
    52a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    52a6:	85 e8       	ldi	r24, 0x85	; 133
    52a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52ac:	72 c0       	rjmp	.+228    	; 0x5392 <__vector_39+0x154>
    52ae:	84 e9       	ldi	r24, 0x94	; 148
    52b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52b4:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_twiCurrentHandler>
    52b8:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_twiCurrentHandler+0x1>
    52bc:	dc 01       	movw	r26, r24
    52be:	12 96       	adiw	r26, 0x02	; 2
    52c0:	ed 91       	ld	r30, X+
    52c2:	fc 91       	ld	r31, X
    52c4:	13 97       	sbiw	r26, 0x03	; 3
    52c6:	30 97       	sbiw	r30, 0x00	; 0
    52c8:	09 f4       	brne	.+2      	; 0x52cc <__vector_39+0x8e>
    52ca:	63 c0       	rjmp	.+198    	; 0x5392 <__vector_39+0x154>
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	40 e0       	ldi	r20, 0x00	; 0
    52d0:	50 e0       	ldi	r21, 0x00	; 0
    52d2:	64 e0       	ldi	r22, 0x04	; 4
    52d4:	19 95       	eicall
    52d6:	5d c0       	rjmp	.+186    	; 0x5392 <__vector_39+0x154>
    52d8:	e0 91 3c 17 	lds	r30, 0x173C	; 0x80173c <_index.1885>
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	8e 0f       	add	r24, r30
    52e0:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <_index.1885>
    52e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    52e8:	f0 e0       	ldi	r31, 0x00	; 0
    52ea:	e0 5c       	subi	r30, 0xC0	; 192
    52ec:	f8 4e       	sbci	r31, 0xE8	; 232
    52ee:	80 83       	st	Z, r24
    52f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    52f4:	80 34       	cpi	r24, 0x40	; 64
    52f6:	11 f4       	brne	.+4      	; 0x52fc <__vector_39+0xbe>
    52f8:	10 92 3c 17 	sts	0x173C, r1	; 0x80173c <_index.1885>
    52fc:	20 91 3c 17 	lds	r18, 0x173C	; 0x80173c <_index.1885>
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	80 91 3f 17 	lds	r24, 0x173F	; 0x80173f <_twiMessageLen>
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	28 17       	cp	r18, r24
    530c:	39 07       	cpc	r19, r25
    530e:	24 f4       	brge	.+8      	; 0x5318 <__vector_39+0xda>
    5310:	85 ec       	ldi	r24, 0xC5	; 197
    5312:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5316:	3d c0       	rjmp	.+122    	; 0x5392 <__vector_39+0x154>
    5318:	85 e8       	ldi	r24, 0x85	; 133
    531a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    531e:	39 c0       	rjmp	.+114    	; 0x5392 <__vector_39+0x154>
    5320:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5324:	e0 91 3c 17 	lds	r30, 0x173C	; 0x80173c <_index.1885>
    5328:	f0 e0       	ldi	r31, 0x00	; 0
    532a:	e0 5c       	subi	r30, 0xC0	; 192
    532c:	f8 4e       	sbci	r31, 0xE8	; 232
    532e:	80 83       	st	Z, r24
    5330:	84 e9       	ldi	r24, 0x94	; 148
    5332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5336:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_twiCurrentHandler>
    533a:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_twiCurrentHandler+0x1>
    533e:	dc 01       	movw	r26, r24
    5340:	12 96       	adiw	r26, 0x02	; 2
    5342:	ed 91       	ld	r30, X+
    5344:	fc 91       	ld	r31, X
    5346:	13 97       	sbiw	r26, 0x03	; 3
    5348:	30 97       	sbiw	r30, 0x00	; 0
    534a:	19 f1       	breq	.+70     	; 0x5392 <__vector_39+0x154>
    534c:	20 91 3f 17 	lds	r18, 0x173F	; 0x80173f <_twiMessageLen>
    5350:	40 e4       	ldi	r20, 0x40	; 64
    5352:	57 e1       	ldi	r21, 0x17	; 23
    5354:	65 e0       	ldi	r22, 0x05	; 5
    5356:	19 95       	eicall
    5358:	1c c0       	rjmp	.+56     	; 0x5392 <__vector_39+0x154>
    535a:	85 ea       	ldi	r24, 0xA5	; 165
    535c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5360:	18 c0       	rjmp	.+48     	; 0x5392 <__vector_39+0x154>
    5362:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5366:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    536a:	84 e0       	ldi	r24, 0x04	; 4
    536c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5370:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_twiCurrentHandler>
    5374:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_twiCurrentHandler+0x1>
    5378:	dc 01       	movw	r26, r24
    537a:	12 96       	adiw	r26, 0x02	; 2
    537c:	ed 91       	ld	r30, X+
    537e:	fc 91       	ld	r31, X
    5380:	13 97       	sbiw	r26, 0x03	; 3
    5382:	30 97       	sbiw	r30, 0x00	; 0
    5384:	31 f0       	breq	.+12     	; 0x5392 <__vector_39+0x154>
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	40 e0       	ldi	r20, 0x00	; 0
    538a:	50 e0       	ldi	r21, 0x00	; 0
    538c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5390:	19 95       	eicall
    5392:	ff 91       	pop	r31
    5394:	ef 91       	pop	r30
    5396:	bf 91       	pop	r27
    5398:	af 91       	pop	r26
    539a:	9f 91       	pop	r25
    539c:	8f 91       	pop	r24
    539e:	7f 91       	pop	r23
    53a0:	6f 91       	pop	r22
    53a2:	5f 91       	pop	r21
    53a4:	4f 91       	pop	r20
    53a6:	3f 91       	pop	r19
    53a8:	2f 91       	pop	r18
    53aa:	0f 90       	pop	r0
    53ac:	0b be       	out	0x3b, r0	; 59
    53ae:	0f 90       	pop	r0
    53b0:	0f be       	out	0x3f, r0	; 63
    53b2:	0f 90       	pop	r0
    53b4:	1f 90       	pop	r1
    53b6:	18 95       	reti

000053b8 <fifo_init>:
    53b8:	fc 01       	movw	r30, r24
    53ba:	41 11       	cpse	r20, r1
    53bc:	01 c0       	rjmp	.+2      	; 0x53c0 <fifo_init+0x8>
    53be:	00 d3       	rcall	.+1536   	; 0x59c0 <abort>
    53c0:	84 2f       	mov	r24, r20
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	9c 01       	movw	r18, r24
    53c6:	21 50       	subi	r18, 0x01	; 1
    53c8:	31 09       	sbc	r19, r1
    53ca:	82 23       	and	r24, r18
    53cc:	93 23       	and	r25, r19
    53ce:	89 2b       	or	r24, r25
    53d0:	09 f0       	breq	.+2      	; 0x53d4 <fifo_init+0x1c>
    53d2:	f6 d2       	rcall	.+1516   	; 0x59c0 <abort>
    53d4:	41 38       	cpi	r20, 0x81	; 129
    53d6:	08 f0       	brcs	.+2      	; 0x53da <fifo_init+0x22>
    53d8:	f3 d2       	rcall	.+1510   	; 0x59c0 <abort>
    53da:	12 82       	std	Z+2, r1	; 0x02
    53dc:	13 82       	std	Z+3, r1	; 0x03
    53de:	44 83       	std	Z+4, r20	; 0x04
    53e0:	44 0f       	add	r20, r20
    53e2:	41 50       	subi	r20, 0x01	; 1
    53e4:	45 83       	std	Z+5, r20	; 0x05
    53e6:	71 83       	std	Z+1, r23	; 0x01
    53e8:	60 83       	st	Z, r22
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	08 95       	ret

000053f0 <__subsf3>:
    53f0:	50 58       	subi	r21, 0x80	; 128

000053f2 <__addsf3>:
    53f2:	bb 27       	eor	r27, r27
    53f4:	aa 27       	eor	r26, r26
    53f6:	0e d0       	rcall	.+28     	; 0x5414 <__addsf3x>
    53f8:	21 c1       	rjmp	.+578    	; 0x563c <__fp_round>
    53fa:	12 d1       	rcall	.+548    	; 0x5620 <__fp_pscA>
    53fc:	30 f0       	brcs	.+12     	; 0x540a <__addsf3+0x18>
    53fe:	17 d1       	rcall	.+558    	; 0x562e <__fp_pscB>
    5400:	20 f0       	brcs	.+8      	; 0x540a <__addsf3+0x18>
    5402:	31 f4       	brne	.+12     	; 0x5410 <__addsf3+0x1e>
    5404:	9f 3f       	cpi	r25, 0xFF	; 255
    5406:	11 f4       	brne	.+4      	; 0x540c <__addsf3+0x1a>
    5408:	1e f4       	brtc	.+6      	; 0x5410 <__addsf3+0x1e>
    540a:	07 c1       	rjmp	.+526    	; 0x561a <__fp_nan>
    540c:	0e f4       	brtc	.+2      	; 0x5410 <__addsf3+0x1e>
    540e:	e0 95       	com	r30
    5410:	e7 fb       	bst	r30, 7
    5412:	fd c0       	rjmp	.+506    	; 0x560e <__fp_inf>

00005414 <__addsf3x>:
    5414:	e9 2f       	mov	r30, r25
    5416:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__fp_split3>
    541a:	78 f3       	brcs	.-34     	; 0x53fa <__addsf3+0x8>
    541c:	ba 17       	cp	r27, r26
    541e:	62 07       	cpc	r22, r18
    5420:	73 07       	cpc	r23, r19
    5422:	84 07       	cpc	r24, r20
    5424:	95 07       	cpc	r25, r21
    5426:	20 f0       	brcs	.+8      	; 0x5430 <__addsf3x+0x1c>
    5428:	79 f4       	brne	.+30     	; 0x5448 <__addsf3x+0x34>
    542a:	a6 f5       	brtc	.+104    	; 0x5494 <__addsf3x+0x80>
    542c:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <__fp_zero>
    5430:	0e f4       	brtc	.+2      	; 0x5434 <__addsf3x+0x20>
    5432:	e0 95       	com	r30
    5434:	0b 2e       	mov	r0, r27
    5436:	ba 2f       	mov	r27, r26
    5438:	a0 2d       	mov	r26, r0
    543a:	0b 01       	movw	r0, r22
    543c:	b9 01       	movw	r22, r18
    543e:	90 01       	movw	r18, r0
    5440:	0c 01       	movw	r0, r24
    5442:	ca 01       	movw	r24, r20
    5444:	a0 01       	movw	r20, r0
    5446:	11 24       	eor	r1, r1
    5448:	ff 27       	eor	r31, r31
    544a:	59 1b       	sub	r21, r25
    544c:	99 f0       	breq	.+38     	; 0x5474 <__addsf3x+0x60>
    544e:	59 3f       	cpi	r21, 0xF9	; 249
    5450:	50 f4       	brcc	.+20     	; 0x5466 <__addsf3x+0x52>
    5452:	50 3e       	cpi	r21, 0xE0	; 224
    5454:	68 f1       	brcs	.+90     	; 0x54b0 <__addsf3x+0x9c>
    5456:	1a 16       	cp	r1, r26
    5458:	f0 40       	sbci	r31, 0x00	; 0
    545a:	a2 2f       	mov	r26, r18
    545c:	23 2f       	mov	r18, r19
    545e:	34 2f       	mov	r19, r20
    5460:	44 27       	eor	r20, r20
    5462:	58 5f       	subi	r21, 0xF8	; 248
    5464:	f3 cf       	rjmp	.-26     	; 0x544c <__addsf3x+0x38>
    5466:	46 95       	lsr	r20
    5468:	37 95       	ror	r19
    546a:	27 95       	ror	r18
    546c:	a7 95       	ror	r26
    546e:	f0 40       	sbci	r31, 0x00	; 0
    5470:	53 95       	inc	r21
    5472:	c9 f7       	brne	.-14     	; 0x5466 <__addsf3x+0x52>
    5474:	7e f4       	brtc	.+30     	; 0x5494 <__addsf3x+0x80>
    5476:	1f 16       	cp	r1, r31
    5478:	ba 0b       	sbc	r27, r26
    547a:	62 0b       	sbc	r22, r18
    547c:	73 0b       	sbc	r23, r19
    547e:	84 0b       	sbc	r24, r20
    5480:	ba f0       	brmi	.+46     	; 0x54b0 <__addsf3x+0x9c>
    5482:	91 50       	subi	r25, 0x01	; 1
    5484:	a1 f0       	breq	.+40     	; 0x54ae <__addsf3x+0x9a>
    5486:	ff 0f       	add	r31, r31
    5488:	bb 1f       	adc	r27, r27
    548a:	66 1f       	adc	r22, r22
    548c:	77 1f       	adc	r23, r23
    548e:	88 1f       	adc	r24, r24
    5490:	c2 f7       	brpl	.-16     	; 0x5482 <__addsf3x+0x6e>
    5492:	0e c0       	rjmp	.+28     	; 0x54b0 <__addsf3x+0x9c>
    5494:	ba 0f       	add	r27, r26
    5496:	62 1f       	adc	r22, r18
    5498:	73 1f       	adc	r23, r19
    549a:	84 1f       	adc	r24, r20
    549c:	48 f4       	brcc	.+18     	; 0x54b0 <__addsf3x+0x9c>
    549e:	87 95       	ror	r24
    54a0:	77 95       	ror	r23
    54a2:	67 95       	ror	r22
    54a4:	b7 95       	ror	r27
    54a6:	f7 95       	ror	r31
    54a8:	9e 3f       	cpi	r25, 0xFE	; 254
    54aa:	08 f0       	brcs	.+2      	; 0x54ae <__addsf3x+0x9a>
    54ac:	b1 cf       	rjmp	.-158    	; 0x5410 <__addsf3+0x1e>
    54ae:	93 95       	inc	r25
    54b0:	88 0f       	add	r24, r24
    54b2:	08 f0       	brcs	.+2      	; 0x54b6 <__addsf3x+0xa2>
    54b4:	99 27       	eor	r25, r25
    54b6:	ee 0f       	add	r30, r30
    54b8:	97 95       	ror	r25
    54ba:	87 95       	ror	r24
    54bc:	08 95       	ret

000054be <__divsf3>:
    54be:	0d d0       	rcall	.+26     	; 0x54da <__divsf3x>
    54c0:	bd c0       	rjmp	.+378    	; 0x563c <__fp_round>
    54c2:	b5 d0       	rcall	.+362    	; 0x562e <__fp_pscB>
    54c4:	48 f0       	brcs	.+18     	; 0x54d8 <__divsf3+0x1a>
    54c6:	ac d0       	rcall	.+344    	; 0x5620 <__fp_pscA>
    54c8:	38 f0       	brcs	.+14     	; 0x54d8 <__divsf3+0x1a>
    54ca:	21 f4       	brne	.+8      	; 0x54d4 <__divsf3+0x16>
    54cc:	5f 3f       	cpi	r21, 0xFF	; 255
    54ce:	21 f0       	breq	.+8      	; 0x54d8 <__divsf3+0x1a>
    54d0:	9e c0       	rjmp	.+316    	; 0x560e <__fp_inf>
    54d2:	51 11       	cpse	r21, r1
    54d4:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__fp_szero>
    54d8:	a0 c0       	rjmp	.+320    	; 0x561a <__fp_nan>

000054da <__divsf3x>:
    54da:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__fp_split3>
    54de:	88 f3       	brcs	.-30     	; 0x54c2 <__divsf3+0x4>

000054e0 <__divsf3_pse>:
    54e0:	99 23       	and	r25, r25
    54e2:	b9 f3       	breq	.-18     	; 0x54d2 <__divsf3+0x14>
    54e4:	55 23       	and	r21, r21
    54e6:	a1 f3       	breq	.-24     	; 0x54d0 <__divsf3+0x12>
    54e8:	95 1b       	sub	r25, r21
    54ea:	55 0b       	sbc	r21, r21
    54ec:	bb 27       	eor	r27, r27
    54ee:	aa 27       	eor	r26, r26
    54f0:	62 17       	cp	r22, r18
    54f2:	73 07       	cpc	r23, r19
    54f4:	84 07       	cpc	r24, r20
    54f6:	38 f0       	brcs	.+14     	; 0x5506 <__divsf3_pse+0x26>
    54f8:	9f 5f       	subi	r25, 0xFF	; 255
    54fa:	5f 4f       	sbci	r21, 0xFF	; 255
    54fc:	22 0f       	add	r18, r18
    54fe:	33 1f       	adc	r19, r19
    5500:	44 1f       	adc	r20, r20
    5502:	aa 1f       	adc	r26, r26
    5504:	a9 f3       	breq	.-22     	; 0x54f0 <__divsf3_pse+0x10>
    5506:	34 d0       	rcall	.+104    	; 0x5570 <__divsf3_pse+0x90>
    5508:	0e 2e       	mov	r0, r30
    550a:	3a f0       	brmi	.+14     	; 0x551a <__divsf3_pse+0x3a>
    550c:	e0 e8       	ldi	r30, 0x80	; 128
    550e:	31 d0       	rcall	.+98     	; 0x5572 <__divsf3_pse+0x92>
    5510:	91 50       	subi	r25, 0x01	; 1
    5512:	50 40       	sbci	r21, 0x00	; 0
    5514:	e6 95       	lsr	r30
    5516:	00 1c       	adc	r0, r0
    5518:	ca f7       	brpl	.-14     	; 0x550c <__divsf3_pse+0x2c>
    551a:	2a d0       	rcall	.+84     	; 0x5570 <__divsf3_pse+0x90>
    551c:	fe 2f       	mov	r31, r30
    551e:	28 d0       	rcall	.+80     	; 0x5570 <__divsf3_pse+0x90>
    5520:	66 0f       	add	r22, r22
    5522:	77 1f       	adc	r23, r23
    5524:	88 1f       	adc	r24, r24
    5526:	bb 1f       	adc	r27, r27
    5528:	26 17       	cp	r18, r22
    552a:	37 07       	cpc	r19, r23
    552c:	48 07       	cpc	r20, r24
    552e:	ab 07       	cpc	r26, r27
    5530:	b0 e8       	ldi	r27, 0x80	; 128
    5532:	09 f0       	breq	.+2      	; 0x5536 <__divsf3_pse+0x56>
    5534:	bb 0b       	sbc	r27, r27
    5536:	80 2d       	mov	r24, r0
    5538:	bf 01       	movw	r22, r30
    553a:	ff 27       	eor	r31, r31
    553c:	93 58       	subi	r25, 0x83	; 131
    553e:	5f 4f       	sbci	r21, 0xFF	; 255
    5540:	32 f0       	brmi	.+12     	; 0x554e <__divsf3_pse+0x6e>
    5542:	9e 3f       	cpi	r25, 0xFE	; 254
    5544:	51 05       	cpc	r21, r1
    5546:	70 f0       	brcs	.+28     	; 0x5564 <__divsf3_pse+0x84>
    5548:	62 c0       	rjmp	.+196    	; 0x560e <__fp_inf>
    554a:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__fp_szero>
    554e:	5f 3f       	cpi	r21, 0xFF	; 255
    5550:	e4 f3       	brlt	.-8      	; 0x554a <__divsf3_pse+0x6a>
    5552:	98 3e       	cpi	r25, 0xE8	; 232
    5554:	d4 f3       	brlt	.-12     	; 0x554a <__divsf3_pse+0x6a>
    5556:	86 95       	lsr	r24
    5558:	77 95       	ror	r23
    555a:	67 95       	ror	r22
    555c:	b7 95       	ror	r27
    555e:	f7 95       	ror	r31
    5560:	9f 5f       	subi	r25, 0xFF	; 255
    5562:	c9 f7       	brne	.-14     	; 0x5556 <__divsf3_pse+0x76>
    5564:	88 0f       	add	r24, r24
    5566:	91 1d       	adc	r25, r1
    5568:	96 95       	lsr	r25
    556a:	87 95       	ror	r24
    556c:	97 f9       	bld	r25, 7
    556e:	08 95       	ret
    5570:	e1 e0       	ldi	r30, 0x01	; 1
    5572:	66 0f       	add	r22, r22
    5574:	77 1f       	adc	r23, r23
    5576:	88 1f       	adc	r24, r24
    5578:	bb 1f       	adc	r27, r27
    557a:	62 17       	cp	r22, r18
    557c:	73 07       	cpc	r23, r19
    557e:	84 07       	cpc	r24, r20
    5580:	ba 07       	cpc	r27, r26
    5582:	20 f0       	brcs	.+8      	; 0x558c <__divsf3_pse+0xac>
    5584:	62 1b       	sub	r22, r18
    5586:	73 0b       	sbc	r23, r19
    5588:	84 0b       	sbc	r24, r20
    558a:	ba 0b       	sbc	r27, r26
    558c:	ee 1f       	adc	r30, r30
    558e:	88 f7       	brcc	.-30     	; 0x5572 <__divsf3_pse+0x92>
    5590:	e0 95       	com	r30
    5592:	08 95       	ret

00005594 <__floatunsisf>:
    5594:	e8 94       	clt
    5596:	09 c0       	rjmp	.+18     	; 0x55aa <__floatsisf+0x12>

00005598 <__floatsisf>:
    5598:	97 fb       	bst	r25, 7
    559a:	3e f4       	brtc	.+14     	; 0x55aa <__floatsisf+0x12>
    559c:	90 95       	com	r25
    559e:	80 95       	com	r24
    55a0:	70 95       	com	r23
    55a2:	61 95       	neg	r22
    55a4:	7f 4f       	sbci	r23, 0xFF	; 255
    55a6:	8f 4f       	sbci	r24, 0xFF	; 255
    55a8:	9f 4f       	sbci	r25, 0xFF	; 255
    55aa:	99 23       	and	r25, r25
    55ac:	a9 f0       	breq	.+42     	; 0x55d8 <__floatsisf+0x40>
    55ae:	f9 2f       	mov	r31, r25
    55b0:	96 e9       	ldi	r25, 0x96	; 150
    55b2:	bb 27       	eor	r27, r27
    55b4:	93 95       	inc	r25
    55b6:	f6 95       	lsr	r31
    55b8:	87 95       	ror	r24
    55ba:	77 95       	ror	r23
    55bc:	67 95       	ror	r22
    55be:	b7 95       	ror	r27
    55c0:	f1 11       	cpse	r31, r1
    55c2:	f8 cf       	rjmp	.-16     	; 0x55b4 <__floatsisf+0x1c>
    55c4:	fa f4       	brpl	.+62     	; 0x5604 <__floatsisf+0x6c>
    55c6:	bb 0f       	add	r27, r27
    55c8:	11 f4       	brne	.+4      	; 0x55ce <__floatsisf+0x36>
    55ca:	60 ff       	sbrs	r22, 0
    55cc:	1b c0       	rjmp	.+54     	; 0x5604 <__floatsisf+0x6c>
    55ce:	6f 5f       	subi	r22, 0xFF	; 255
    55d0:	7f 4f       	sbci	r23, 0xFF	; 255
    55d2:	8f 4f       	sbci	r24, 0xFF	; 255
    55d4:	9f 4f       	sbci	r25, 0xFF	; 255
    55d6:	16 c0       	rjmp	.+44     	; 0x5604 <__floatsisf+0x6c>
    55d8:	88 23       	and	r24, r24
    55da:	11 f0       	breq	.+4      	; 0x55e0 <__floatsisf+0x48>
    55dc:	96 e9       	ldi	r25, 0x96	; 150
    55de:	11 c0       	rjmp	.+34     	; 0x5602 <__floatsisf+0x6a>
    55e0:	77 23       	and	r23, r23
    55e2:	21 f0       	breq	.+8      	; 0x55ec <__floatsisf+0x54>
    55e4:	9e e8       	ldi	r25, 0x8E	; 142
    55e6:	87 2f       	mov	r24, r23
    55e8:	76 2f       	mov	r23, r22
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <__floatsisf+0x5e>
    55ec:	66 23       	and	r22, r22
    55ee:	71 f0       	breq	.+28     	; 0x560c <__floatsisf+0x74>
    55f0:	96 e8       	ldi	r25, 0x86	; 134
    55f2:	86 2f       	mov	r24, r22
    55f4:	70 e0       	ldi	r23, 0x00	; 0
    55f6:	60 e0       	ldi	r22, 0x00	; 0
    55f8:	2a f0       	brmi	.+10     	; 0x5604 <__floatsisf+0x6c>
    55fa:	9a 95       	dec	r25
    55fc:	66 0f       	add	r22, r22
    55fe:	77 1f       	adc	r23, r23
    5600:	88 1f       	adc	r24, r24
    5602:	da f7       	brpl	.-10     	; 0x55fa <__floatsisf+0x62>
    5604:	88 0f       	add	r24, r24
    5606:	96 95       	lsr	r25
    5608:	87 95       	ror	r24
    560a:	97 f9       	bld	r25, 7
    560c:	08 95       	ret

0000560e <__fp_inf>:
    560e:	97 f9       	bld	r25, 7
    5610:	9f 67       	ori	r25, 0x7F	; 127
    5612:	80 e8       	ldi	r24, 0x80	; 128
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	60 e0       	ldi	r22, 0x00	; 0
    5618:	08 95       	ret

0000561a <__fp_nan>:
    561a:	9f ef       	ldi	r25, 0xFF	; 255
    561c:	80 ec       	ldi	r24, 0xC0	; 192
    561e:	08 95       	ret

00005620 <__fp_pscA>:
    5620:	00 24       	eor	r0, r0
    5622:	0a 94       	dec	r0
    5624:	16 16       	cp	r1, r22
    5626:	17 06       	cpc	r1, r23
    5628:	18 06       	cpc	r1, r24
    562a:	09 06       	cpc	r0, r25
    562c:	08 95       	ret

0000562e <__fp_pscB>:
    562e:	00 24       	eor	r0, r0
    5630:	0a 94       	dec	r0
    5632:	12 16       	cp	r1, r18
    5634:	13 06       	cpc	r1, r19
    5636:	14 06       	cpc	r1, r20
    5638:	05 06       	cpc	r0, r21
    563a:	08 95       	ret

0000563c <__fp_round>:
    563c:	09 2e       	mov	r0, r25
    563e:	03 94       	inc	r0
    5640:	00 0c       	add	r0, r0
    5642:	11 f4       	brne	.+4      	; 0x5648 <__fp_round+0xc>
    5644:	88 23       	and	r24, r24
    5646:	52 f0       	brmi	.+20     	; 0x565c <__fp_round+0x20>
    5648:	bb 0f       	add	r27, r27
    564a:	40 f4       	brcc	.+16     	; 0x565c <__fp_round+0x20>
    564c:	bf 2b       	or	r27, r31
    564e:	11 f4       	brne	.+4      	; 0x5654 <__fp_round+0x18>
    5650:	60 ff       	sbrs	r22, 0
    5652:	04 c0       	rjmp	.+8      	; 0x565c <__fp_round+0x20>
    5654:	6f 5f       	subi	r22, 0xFF	; 255
    5656:	7f 4f       	sbci	r23, 0xFF	; 255
    5658:	8f 4f       	sbci	r24, 0xFF	; 255
    565a:	9f 4f       	sbci	r25, 0xFF	; 255
    565c:	08 95       	ret

0000565e <__mulsf3>:
    565e:	0c d0       	rcall	.+24     	; 0x5678 <__mulsf3x>
    5660:	ed cf       	rjmp	.-38     	; 0x563c <__fp_round>
    5662:	de df       	rcall	.-68     	; 0x5620 <__fp_pscA>
    5664:	28 f0       	brcs	.+10     	; 0x5670 <__mulsf3+0x12>
    5666:	e3 df       	rcall	.-58     	; 0x562e <__fp_pscB>
    5668:	18 f0       	brcs	.+6      	; 0x5670 <__mulsf3+0x12>
    566a:	95 23       	and	r25, r21
    566c:	09 f0       	breq	.+2      	; 0x5670 <__mulsf3+0x12>
    566e:	cf cf       	rjmp	.-98     	; 0x560e <__fp_inf>
    5670:	d4 cf       	rjmp	.-88     	; 0x561a <__fp_nan>
    5672:	11 24       	eor	r1, r1
    5674:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__fp_szero>

00005678 <__mulsf3x>:
    5678:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__fp_split3>
    567c:	90 f3       	brcs	.-28     	; 0x5662 <__mulsf3+0x4>

0000567e <__mulsf3_pse>:
    567e:	95 9f       	mul	r25, r21
    5680:	c1 f3       	breq	.-16     	; 0x5672 <__mulsf3+0x14>
    5682:	95 0f       	add	r25, r21
    5684:	50 e0       	ldi	r21, 0x00	; 0
    5686:	55 1f       	adc	r21, r21
    5688:	62 9f       	mul	r22, r18
    568a:	f0 01       	movw	r30, r0
    568c:	72 9f       	mul	r23, r18
    568e:	bb 27       	eor	r27, r27
    5690:	f0 0d       	add	r31, r0
    5692:	b1 1d       	adc	r27, r1
    5694:	63 9f       	mul	r22, r19
    5696:	aa 27       	eor	r26, r26
    5698:	f0 0d       	add	r31, r0
    569a:	b1 1d       	adc	r27, r1
    569c:	aa 1f       	adc	r26, r26
    569e:	64 9f       	mul	r22, r20
    56a0:	66 27       	eor	r22, r22
    56a2:	b0 0d       	add	r27, r0
    56a4:	a1 1d       	adc	r26, r1
    56a6:	66 1f       	adc	r22, r22
    56a8:	82 9f       	mul	r24, r18
    56aa:	22 27       	eor	r18, r18
    56ac:	b0 0d       	add	r27, r0
    56ae:	a1 1d       	adc	r26, r1
    56b0:	62 1f       	adc	r22, r18
    56b2:	73 9f       	mul	r23, r19
    56b4:	b0 0d       	add	r27, r0
    56b6:	a1 1d       	adc	r26, r1
    56b8:	62 1f       	adc	r22, r18
    56ba:	83 9f       	mul	r24, r19
    56bc:	a0 0d       	add	r26, r0
    56be:	61 1d       	adc	r22, r1
    56c0:	22 1f       	adc	r18, r18
    56c2:	74 9f       	mul	r23, r20
    56c4:	33 27       	eor	r19, r19
    56c6:	a0 0d       	add	r26, r0
    56c8:	61 1d       	adc	r22, r1
    56ca:	23 1f       	adc	r18, r19
    56cc:	84 9f       	mul	r24, r20
    56ce:	60 0d       	add	r22, r0
    56d0:	21 1d       	adc	r18, r1
    56d2:	82 2f       	mov	r24, r18
    56d4:	76 2f       	mov	r23, r22
    56d6:	6a 2f       	mov	r22, r26
    56d8:	11 24       	eor	r1, r1
    56da:	9f 57       	subi	r25, 0x7F	; 127
    56dc:	50 40       	sbci	r21, 0x00	; 0
    56de:	92 f0       	brmi	.+36     	; 0x5704 <__mulsf3_pse+0x86>
    56e0:	e9 f0       	breq	.+58     	; 0x571c <__mulsf3_pse+0x9e>
    56e2:	88 23       	and	r24, r24
    56e4:	4a f0       	brmi	.+18     	; 0x56f8 <__mulsf3_pse+0x7a>
    56e6:	ee 0f       	add	r30, r30
    56e8:	ff 1f       	adc	r31, r31
    56ea:	bb 1f       	adc	r27, r27
    56ec:	66 1f       	adc	r22, r22
    56ee:	77 1f       	adc	r23, r23
    56f0:	88 1f       	adc	r24, r24
    56f2:	91 50       	subi	r25, 0x01	; 1
    56f4:	50 40       	sbci	r21, 0x00	; 0
    56f6:	a9 f7       	brne	.-22     	; 0x56e2 <__mulsf3_pse+0x64>
    56f8:	9e 3f       	cpi	r25, 0xFE	; 254
    56fa:	51 05       	cpc	r21, r1
    56fc:	78 f0       	brcs	.+30     	; 0x571c <__mulsf3_pse+0x9e>
    56fe:	87 cf       	rjmp	.-242    	; 0x560e <__fp_inf>
    5700:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__fp_szero>
    5704:	5f 3f       	cpi	r21, 0xFF	; 255
    5706:	e4 f3       	brlt	.-8      	; 0x5700 <__mulsf3_pse+0x82>
    5708:	98 3e       	cpi	r25, 0xE8	; 232
    570a:	d4 f3       	brlt	.-12     	; 0x5700 <__mulsf3_pse+0x82>
    570c:	86 95       	lsr	r24
    570e:	77 95       	ror	r23
    5710:	67 95       	ror	r22
    5712:	b7 95       	ror	r27
    5714:	f7 95       	ror	r31
    5716:	e7 95       	ror	r30
    5718:	9f 5f       	subi	r25, 0xFF	; 255
    571a:	c1 f7       	brne	.-16     	; 0x570c <__mulsf3_pse+0x8e>
    571c:	fe 2b       	or	r31, r30
    571e:	88 0f       	add	r24, r24
    5720:	91 1d       	adc	r25, r1
    5722:	96 95       	lsr	r25
    5724:	87 95       	ror	r24
    5726:	97 f9       	bld	r25, 7
    5728:	08 95       	ret

0000572a <__udivmodsi4>:
    572a:	a1 e2       	ldi	r26, 0x21	; 33
    572c:	1a 2e       	mov	r1, r26
    572e:	aa 1b       	sub	r26, r26
    5730:	bb 1b       	sub	r27, r27
    5732:	fd 01       	movw	r30, r26
    5734:	0d c0       	rjmp	.+26     	; 0x5750 <__udivmodsi4_ep>

00005736 <__udivmodsi4_loop>:
    5736:	aa 1f       	adc	r26, r26
    5738:	bb 1f       	adc	r27, r27
    573a:	ee 1f       	adc	r30, r30
    573c:	ff 1f       	adc	r31, r31
    573e:	a2 17       	cp	r26, r18
    5740:	b3 07       	cpc	r27, r19
    5742:	e4 07       	cpc	r30, r20
    5744:	f5 07       	cpc	r31, r21
    5746:	20 f0       	brcs	.+8      	; 0x5750 <__udivmodsi4_ep>
    5748:	a2 1b       	sub	r26, r18
    574a:	b3 0b       	sbc	r27, r19
    574c:	e4 0b       	sbc	r30, r20
    574e:	f5 0b       	sbc	r31, r21

00005750 <__udivmodsi4_ep>:
    5750:	66 1f       	adc	r22, r22
    5752:	77 1f       	adc	r23, r23
    5754:	88 1f       	adc	r24, r24
    5756:	99 1f       	adc	r25, r25
    5758:	1a 94       	dec	r1
    575a:	69 f7       	brne	.-38     	; 0x5736 <__udivmodsi4_loop>
    575c:	60 95       	com	r22
    575e:	70 95       	com	r23
    5760:	80 95       	com	r24
    5762:	90 95       	com	r25
    5764:	9b 01       	movw	r18, r22
    5766:	ac 01       	movw	r20, r24
    5768:	bd 01       	movw	r22, r26
    576a:	cf 01       	movw	r24, r30
    576c:	08 95       	ret

0000576e <__tablejump2__>:
    576e:	ee 0f       	add	r30, r30
    5770:	ff 1f       	adc	r31, r31
    5772:	88 1f       	adc	r24, r24
    5774:	8b bf       	out	0x3b, r24	; 59
    5776:	07 90       	elpm	r0, Z+
    5778:	f6 91       	elpm	r31, Z
    577a:	e0 2d       	mov	r30, r0
    577c:	19 94       	eijmp

0000577e <malloc>:
    577e:	0f 93       	push	r16
    5780:	1f 93       	push	r17
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	82 30       	cpi	r24, 0x02	; 2
    5788:	91 05       	cpc	r25, r1
    578a:	10 f4       	brcc	.+4      	; 0x5790 <malloc+0x12>
    578c:	82 e0       	ldi	r24, 0x02	; 2
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	e0 91 67 17 	lds	r30, 0x1767	; 0x801767 <__flp>
    5794:	f0 91 68 17 	lds	r31, 0x1768	; 0x801768 <__flp+0x1>
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	a0 e0       	ldi	r26, 0x00	; 0
    579e:	b0 e0       	ldi	r27, 0x00	; 0
    57a0:	30 97       	sbiw	r30, 0x00	; 0
    57a2:	19 f1       	breq	.+70     	; 0x57ea <malloc+0x6c>
    57a4:	40 81       	ld	r20, Z
    57a6:	51 81       	ldd	r21, Z+1	; 0x01
    57a8:	02 81       	ldd	r16, Z+2	; 0x02
    57aa:	13 81       	ldd	r17, Z+3	; 0x03
    57ac:	48 17       	cp	r20, r24
    57ae:	59 07       	cpc	r21, r25
    57b0:	c8 f0       	brcs	.+50     	; 0x57e4 <malloc+0x66>
    57b2:	84 17       	cp	r24, r20
    57b4:	95 07       	cpc	r25, r21
    57b6:	69 f4       	brne	.+26     	; 0x57d2 <malloc+0x54>
    57b8:	10 97       	sbiw	r26, 0x00	; 0
    57ba:	31 f0       	breq	.+12     	; 0x57c8 <malloc+0x4a>
    57bc:	12 96       	adiw	r26, 0x02	; 2
    57be:	0c 93       	st	X, r16
    57c0:	12 97       	sbiw	r26, 0x02	; 2
    57c2:	13 96       	adiw	r26, 0x03	; 3
    57c4:	1c 93       	st	X, r17
    57c6:	27 c0       	rjmp	.+78     	; 0x5816 <malloc+0x98>
    57c8:	00 93 67 17 	sts	0x1767, r16	; 0x801767 <__flp>
    57cc:	10 93 68 17 	sts	0x1768, r17	; 0x801768 <__flp+0x1>
    57d0:	22 c0       	rjmp	.+68     	; 0x5816 <malloc+0x98>
    57d2:	21 15       	cp	r18, r1
    57d4:	31 05       	cpc	r19, r1
    57d6:	19 f0       	breq	.+6      	; 0x57de <malloc+0x60>
    57d8:	42 17       	cp	r20, r18
    57da:	53 07       	cpc	r21, r19
    57dc:	18 f4       	brcc	.+6      	; 0x57e4 <malloc+0x66>
    57de:	9a 01       	movw	r18, r20
    57e0:	bd 01       	movw	r22, r26
    57e2:	ef 01       	movw	r28, r30
    57e4:	df 01       	movw	r26, r30
    57e6:	f8 01       	movw	r30, r16
    57e8:	db cf       	rjmp	.-74     	; 0x57a0 <malloc+0x22>
    57ea:	21 15       	cp	r18, r1
    57ec:	31 05       	cpc	r19, r1
    57ee:	f9 f0       	breq	.+62     	; 0x582e <malloc+0xb0>
    57f0:	28 1b       	sub	r18, r24
    57f2:	39 0b       	sbc	r19, r25
    57f4:	24 30       	cpi	r18, 0x04	; 4
    57f6:	31 05       	cpc	r19, r1
    57f8:	80 f4       	brcc	.+32     	; 0x581a <malloc+0x9c>
    57fa:	8a 81       	ldd	r24, Y+2	; 0x02
    57fc:	9b 81       	ldd	r25, Y+3	; 0x03
    57fe:	61 15       	cp	r22, r1
    5800:	71 05       	cpc	r23, r1
    5802:	21 f0       	breq	.+8      	; 0x580c <malloc+0x8e>
    5804:	fb 01       	movw	r30, r22
    5806:	93 83       	std	Z+3, r25	; 0x03
    5808:	82 83       	std	Z+2, r24	; 0x02
    580a:	04 c0       	rjmp	.+8      	; 0x5814 <malloc+0x96>
    580c:	90 93 68 17 	sts	0x1768, r25	; 0x801768 <__flp+0x1>
    5810:	80 93 67 17 	sts	0x1767, r24	; 0x801767 <__flp>
    5814:	fe 01       	movw	r30, r28
    5816:	32 96       	adiw	r30, 0x02	; 2
    5818:	44 c0       	rjmp	.+136    	; 0x58a2 <malloc+0x124>
    581a:	fe 01       	movw	r30, r28
    581c:	e2 0f       	add	r30, r18
    581e:	f3 1f       	adc	r31, r19
    5820:	81 93       	st	Z+, r24
    5822:	91 93       	st	Z+, r25
    5824:	22 50       	subi	r18, 0x02	; 2
    5826:	31 09       	sbc	r19, r1
    5828:	39 83       	std	Y+1, r19	; 0x01
    582a:	28 83       	st	Y, r18
    582c:	3a c0       	rjmp	.+116    	; 0x58a2 <malloc+0x124>
    582e:	20 91 65 17 	lds	r18, 0x1765	; 0x801765 <__brkval>
    5832:	30 91 66 17 	lds	r19, 0x1766	; 0x801766 <__brkval+0x1>
    5836:	23 2b       	or	r18, r19
    5838:	41 f4       	brne	.+16     	; 0x584a <malloc+0xcc>
    583a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    583e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5842:	30 93 66 17 	sts	0x1766, r19	; 0x801766 <__brkval+0x1>
    5846:	20 93 65 17 	sts	0x1765, r18	; 0x801765 <__brkval>
    584a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    584e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5852:	21 15       	cp	r18, r1
    5854:	31 05       	cpc	r19, r1
    5856:	41 f4       	brne	.+16     	; 0x5868 <malloc+0xea>
    5858:	2d b7       	in	r18, 0x3d	; 61
    585a:	3e b7       	in	r19, 0x3e	; 62
    585c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5860:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5864:	24 1b       	sub	r18, r20
    5866:	35 0b       	sbc	r19, r21
    5868:	e0 91 65 17 	lds	r30, 0x1765	; 0x801765 <__brkval>
    586c:	f0 91 66 17 	lds	r31, 0x1766	; 0x801766 <__brkval+0x1>
    5870:	e2 17       	cp	r30, r18
    5872:	f3 07       	cpc	r31, r19
    5874:	a0 f4       	brcc	.+40     	; 0x589e <malloc+0x120>
    5876:	2e 1b       	sub	r18, r30
    5878:	3f 0b       	sbc	r19, r31
    587a:	28 17       	cp	r18, r24
    587c:	39 07       	cpc	r19, r25
    587e:	78 f0       	brcs	.+30     	; 0x589e <malloc+0x120>
    5880:	ac 01       	movw	r20, r24
    5882:	4e 5f       	subi	r20, 0xFE	; 254
    5884:	5f 4f       	sbci	r21, 0xFF	; 255
    5886:	24 17       	cp	r18, r20
    5888:	35 07       	cpc	r19, r21
    588a:	48 f0       	brcs	.+18     	; 0x589e <malloc+0x120>
    588c:	4e 0f       	add	r20, r30
    588e:	5f 1f       	adc	r21, r31
    5890:	50 93 66 17 	sts	0x1766, r21	; 0x801766 <__brkval+0x1>
    5894:	40 93 65 17 	sts	0x1765, r20	; 0x801765 <__brkval>
    5898:	81 93       	st	Z+, r24
    589a:	91 93       	st	Z+, r25
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <malloc+0x124>
    589e:	e0 e0       	ldi	r30, 0x00	; 0
    58a0:	f0 e0       	ldi	r31, 0x00	; 0
    58a2:	cf 01       	movw	r24, r30
    58a4:	df 91       	pop	r29
    58a6:	cf 91       	pop	r28
    58a8:	1f 91       	pop	r17
    58aa:	0f 91       	pop	r16
    58ac:	08 95       	ret

000058ae <free>:
    58ae:	cf 93       	push	r28
    58b0:	df 93       	push	r29
    58b2:	00 97       	sbiw	r24, 0x00	; 0
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <free+0xa>
    58b6:	81 c0       	rjmp	.+258    	; 0x59ba <free+0x10c>
    58b8:	fc 01       	movw	r30, r24
    58ba:	32 97       	sbiw	r30, 0x02	; 2
    58bc:	13 82       	std	Z+3, r1	; 0x03
    58be:	12 82       	std	Z+2, r1	; 0x02
    58c0:	a0 91 67 17 	lds	r26, 0x1767	; 0x801767 <__flp>
    58c4:	b0 91 68 17 	lds	r27, 0x1768	; 0x801768 <__flp+0x1>
    58c8:	10 97       	sbiw	r26, 0x00	; 0
    58ca:	81 f4       	brne	.+32     	; 0x58ec <free+0x3e>
    58cc:	20 81       	ld	r18, Z
    58ce:	31 81       	ldd	r19, Z+1	; 0x01
    58d0:	82 0f       	add	r24, r18
    58d2:	93 1f       	adc	r25, r19
    58d4:	20 91 65 17 	lds	r18, 0x1765	; 0x801765 <__brkval>
    58d8:	30 91 66 17 	lds	r19, 0x1766	; 0x801766 <__brkval+0x1>
    58dc:	28 17       	cp	r18, r24
    58de:	39 07       	cpc	r19, r25
    58e0:	51 f5       	brne	.+84     	; 0x5936 <free+0x88>
    58e2:	f0 93 66 17 	sts	0x1766, r31	; 0x801766 <__brkval+0x1>
    58e6:	e0 93 65 17 	sts	0x1765, r30	; 0x801765 <__brkval>
    58ea:	67 c0       	rjmp	.+206    	; 0x59ba <free+0x10c>
    58ec:	ed 01       	movw	r28, r26
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	ce 17       	cp	r28, r30
    58f4:	df 07       	cpc	r29, r31
    58f6:	40 f4       	brcc	.+16     	; 0x5908 <free+0x5a>
    58f8:	4a 81       	ldd	r20, Y+2	; 0x02
    58fa:	5b 81       	ldd	r21, Y+3	; 0x03
    58fc:	9e 01       	movw	r18, r28
    58fe:	41 15       	cp	r20, r1
    5900:	51 05       	cpc	r21, r1
    5902:	f1 f0       	breq	.+60     	; 0x5940 <free+0x92>
    5904:	ea 01       	movw	r28, r20
    5906:	f5 cf       	rjmp	.-22     	; 0x58f2 <free+0x44>
    5908:	d3 83       	std	Z+3, r29	; 0x03
    590a:	c2 83       	std	Z+2, r28	; 0x02
    590c:	40 81       	ld	r20, Z
    590e:	51 81       	ldd	r21, Z+1	; 0x01
    5910:	84 0f       	add	r24, r20
    5912:	95 1f       	adc	r25, r21
    5914:	c8 17       	cp	r28, r24
    5916:	d9 07       	cpc	r29, r25
    5918:	59 f4       	brne	.+22     	; 0x5930 <free+0x82>
    591a:	88 81       	ld	r24, Y
    591c:	99 81       	ldd	r25, Y+1	; 0x01
    591e:	84 0f       	add	r24, r20
    5920:	95 1f       	adc	r25, r21
    5922:	02 96       	adiw	r24, 0x02	; 2
    5924:	91 83       	std	Z+1, r25	; 0x01
    5926:	80 83       	st	Z, r24
    5928:	8a 81       	ldd	r24, Y+2	; 0x02
    592a:	9b 81       	ldd	r25, Y+3	; 0x03
    592c:	93 83       	std	Z+3, r25	; 0x03
    592e:	82 83       	std	Z+2, r24	; 0x02
    5930:	21 15       	cp	r18, r1
    5932:	31 05       	cpc	r19, r1
    5934:	29 f4       	brne	.+10     	; 0x5940 <free+0x92>
    5936:	f0 93 68 17 	sts	0x1768, r31	; 0x801768 <__flp+0x1>
    593a:	e0 93 67 17 	sts	0x1767, r30	; 0x801767 <__flp>
    593e:	3d c0       	rjmp	.+122    	; 0x59ba <free+0x10c>
    5940:	e9 01       	movw	r28, r18
    5942:	fb 83       	std	Y+3, r31	; 0x03
    5944:	ea 83       	std	Y+2, r30	; 0x02
    5946:	49 91       	ld	r20, Y+
    5948:	59 91       	ld	r21, Y+
    594a:	c4 0f       	add	r28, r20
    594c:	d5 1f       	adc	r29, r21
    594e:	ec 17       	cp	r30, r28
    5950:	fd 07       	cpc	r31, r29
    5952:	61 f4       	brne	.+24     	; 0x596c <free+0xbe>
    5954:	80 81       	ld	r24, Z
    5956:	91 81       	ldd	r25, Z+1	; 0x01
    5958:	84 0f       	add	r24, r20
    595a:	95 1f       	adc	r25, r21
    595c:	02 96       	adiw	r24, 0x02	; 2
    595e:	e9 01       	movw	r28, r18
    5960:	99 83       	std	Y+1, r25	; 0x01
    5962:	88 83       	st	Y, r24
    5964:	82 81       	ldd	r24, Z+2	; 0x02
    5966:	93 81       	ldd	r25, Z+3	; 0x03
    5968:	9b 83       	std	Y+3, r25	; 0x03
    596a:	8a 83       	std	Y+2, r24	; 0x02
    596c:	e0 e0       	ldi	r30, 0x00	; 0
    596e:	f0 e0       	ldi	r31, 0x00	; 0
    5970:	12 96       	adiw	r26, 0x02	; 2
    5972:	8d 91       	ld	r24, X+
    5974:	9c 91       	ld	r25, X
    5976:	13 97       	sbiw	r26, 0x03	; 3
    5978:	00 97       	sbiw	r24, 0x00	; 0
    597a:	19 f0       	breq	.+6      	; 0x5982 <free+0xd4>
    597c:	fd 01       	movw	r30, r26
    597e:	dc 01       	movw	r26, r24
    5980:	f7 cf       	rjmp	.-18     	; 0x5970 <free+0xc2>
    5982:	8d 91       	ld	r24, X+
    5984:	9c 91       	ld	r25, X
    5986:	11 97       	sbiw	r26, 0x01	; 1
    5988:	9d 01       	movw	r18, r26
    598a:	2e 5f       	subi	r18, 0xFE	; 254
    598c:	3f 4f       	sbci	r19, 0xFF	; 255
    598e:	82 0f       	add	r24, r18
    5990:	93 1f       	adc	r25, r19
    5992:	20 91 65 17 	lds	r18, 0x1765	; 0x801765 <__brkval>
    5996:	30 91 66 17 	lds	r19, 0x1766	; 0x801766 <__brkval+0x1>
    599a:	28 17       	cp	r18, r24
    599c:	39 07       	cpc	r19, r25
    599e:	69 f4       	brne	.+26     	; 0x59ba <free+0x10c>
    59a0:	30 97       	sbiw	r30, 0x00	; 0
    59a2:	29 f4       	brne	.+10     	; 0x59ae <free+0x100>
    59a4:	10 92 68 17 	sts	0x1768, r1	; 0x801768 <__flp+0x1>
    59a8:	10 92 67 17 	sts	0x1767, r1	; 0x801767 <__flp>
    59ac:	02 c0       	rjmp	.+4      	; 0x59b2 <free+0x104>
    59ae:	13 82       	std	Z+3, r1	; 0x03
    59b0:	12 82       	std	Z+2, r1	; 0x02
    59b2:	b0 93 66 17 	sts	0x1766, r27	; 0x801766 <__brkval+0x1>
    59b6:	a0 93 65 17 	sts	0x1765, r26	; 0x801765 <__brkval>
    59ba:	df 91       	pop	r29
    59bc:	cf 91       	pop	r28
    59be:	08 95       	ret

000059c0 <abort>:
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	f8 94       	cli
    59c6:	7d c3       	rjmp	.+1786   	; 0x60c2 <_exit>

000059c8 <memcpy>:
    59c8:	fb 01       	movw	r30, r22
    59ca:	dc 01       	movw	r26, r24
    59cc:	02 c0       	rjmp	.+4      	; 0x59d2 <memcpy+0xa>
    59ce:	01 90       	ld	r0, Z+
    59d0:	0d 92       	st	X+, r0
    59d2:	41 50       	subi	r20, 0x01	; 1
    59d4:	50 40       	sbci	r21, 0x00	; 0
    59d6:	d8 f7       	brcc	.-10     	; 0x59ce <memcpy+0x6>
    59d8:	08 95       	ret

000059da <memset>:
    59da:	dc 01       	movw	r26, r24
    59dc:	01 c0       	rjmp	.+2      	; 0x59e0 <memset+0x6>
    59de:	6d 93       	st	X+, r22
    59e0:	41 50       	subi	r20, 0x01	; 1
    59e2:	50 40       	sbci	r21, 0x00	; 0
    59e4:	e0 f7       	brcc	.-8      	; 0x59de <memset+0x4>
    59e6:	08 95       	ret

000059e8 <strcasestr>:
    59e8:	fb 01       	movw	r30, r22
    59ea:	51 91       	ld	r21, Z+
    59ec:	55 23       	and	r21, r21
    59ee:	b1 f0       	breq	.+44     	; 0x5a1c <strcasestr+0x34>
    59f0:	bf 01       	movw	r22, r30
    59f2:	dc 01       	movw	r26, r24
    59f4:	05 2e       	mov	r0, r21
    59f6:	4d 91       	ld	r20, X+
    59f8:	44 23       	and	r20, r20
    59fa:	69 f0       	breq	.+26     	; 0x5a16 <strcasestr+0x2e>
    59fc:	10 d0       	rcall	.+32     	; 0x5a1e <strcasestr+0x36>
    59fe:	d9 f7       	brne	.-10     	; 0x59f6 <strcasestr+0xe>
    5a00:	cd 01       	movw	r24, r26
    5a02:	01 90       	ld	r0, Z+
    5a04:	00 20       	and	r0, r0
    5a06:	49 f0       	breq	.+18     	; 0x5a1a <strcasestr+0x32>
    5a08:	4d 91       	ld	r20, X+
    5a0a:	41 11       	cpse	r20, r1
    5a0c:	08 d0       	rcall	.+16     	; 0x5a1e <strcasestr+0x36>
    5a0e:	c9 f3       	breq	.-14     	; 0x5a02 <strcasestr+0x1a>
    5a10:	fb 01       	movw	r30, r22
    5a12:	41 11       	cpse	r20, r1
    5a14:	ee cf       	rjmp	.-36     	; 0x59f2 <strcasestr+0xa>
    5a16:	81 e0       	ldi	r24, 0x01	; 1
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	01 97       	sbiw	r24, 0x01	; 1
    5a1c:	08 95       	ret
    5a1e:	40 25       	eor	r20, r0
    5a20:	39 f0       	breq	.+14     	; 0x5a30 <strcasestr+0x48>
    5a22:	40 32       	cpi	r20, 0x20	; 32
    5a24:	29 f4       	brne	.+10     	; 0x5a30 <strcasestr+0x48>
    5a26:	40 29       	or	r20, r0
    5a28:	4b 57       	subi	r20, 0x7B	; 123
    5a2a:	46 5e       	subi	r20, 0xE6	; 230
    5a2c:	08 f0       	brcs	.+2      	; 0x5a30 <strcasestr+0x48>
    5a2e:	18 94       	sez
    5a30:	08 95       	ret

00005a32 <strcat>:
    5a32:	fb 01       	movw	r30, r22
    5a34:	dc 01       	movw	r26, r24
    5a36:	0d 90       	ld	r0, X+
    5a38:	00 20       	and	r0, r0
    5a3a:	e9 f7       	brne	.-6      	; 0x5a36 <strcat+0x4>
    5a3c:	11 97       	sbiw	r26, 0x01	; 1
    5a3e:	01 90       	ld	r0, Z+
    5a40:	0d 92       	st	X+, r0
    5a42:	00 20       	and	r0, r0
    5a44:	e1 f7       	brne	.-8      	; 0x5a3e <strcat+0xc>
    5a46:	08 95       	ret

00005a48 <strcpy>:
    5a48:	fb 01       	movw	r30, r22
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	01 90       	ld	r0, Z+
    5a4e:	0d 92       	st	X+, r0
    5a50:	00 20       	and	r0, r0
    5a52:	e1 f7       	brne	.-8      	; 0x5a4c <strcpy+0x4>
    5a54:	08 95       	ret

00005a56 <strncasecmp>:
    5a56:	fb 01       	movw	r30, r22
    5a58:	dc 01       	movw	r26, r24
    5a5a:	41 50       	subi	r20, 0x01	; 1
    5a5c:	50 40       	sbci	r21, 0x00	; 0
    5a5e:	88 f0       	brcs	.+34     	; 0x5a82 <strncasecmp+0x2c>
    5a60:	8d 91       	ld	r24, X+
    5a62:	81 34       	cpi	r24, 0x41	; 65
    5a64:	1c f0       	brlt	.+6      	; 0x5a6c <strncasecmp+0x16>
    5a66:	8b 35       	cpi	r24, 0x5B	; 91
    5a68:	0c f4       	brge	.+2      	; 0x5a6c <strncasecmp+0x16>
    5a6a:	80 5e       	subi	r24, 0xE0	; 224
    5a6c:	61 91       	ld	r22, Z+
    5a6e:	61 34       	cpi	r22, 0x41	; 65
    5a70:	1c f0       	brlt	.+6      	; 0x5a78 <strncasecmp+0x22>
    5a72:	6b 35       	cpi	r22, 0x5B	; 91
    5a74:	0c f4       	brge	.+2      	; 0x5a78 <strncasecmp+0x22>
    5a76:	60 5e       	subi	r22, 0xE0	; 224
    5a78:	86 1b       	sub	r24, r22
    5a7a:	61 11       	cpse	r22, r1
    5a7c:	71 f3       	breq	.-36     	; 0x5a5a <strncasecmp+0x4>
    5a7e:	99 0b       	sbc	r25, r25
    5a80:	08 95       	ret
    5a82:	88 1b       	sub	r24, r24
    5a84:	fc cf       	rjmp	.-8      	; 0x5a7e <strncasecmp+0x28>

00005a86 <printf>:
    5a86:	cf 93       	push	r28
    5a88:	df 93       	push	r29
    5a8a:	cd b7       	in	r28, 0x3d	; 61
    5a8c:	de b7       	in	r29, 0x3e	; 62
    5a8e:	ae 01       	movw	r20, r28
    5a90:	4a 5f       	subi	r20, 0xFA	; 250
    5a92:	5f 4f       	sbci	r21, 0xFF	; 255
    5a94:	fa 01       	movw	r30, r20
    5a96:	61 91       	ld	r22, Z+
    5a98:	71 91       	ld	r23, Z+
    5a9a:	af 01       	movw	r20, r30
    5a9c:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <__iob+0x2>
    5aa0:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <__iob+0x3>
    5aa4:	61 d0       	rcall	.+194    	; 0x5b68 <vfprintf>
    5aa6:	df 91       	pop	r29
    5aa8:	cf 91       	pop	r28
    5aaa:	08 95       	ret

00005aac <puts>:
    5aac:	0f 93       	push	r16
    5aae:	1f 93       	push	r17
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29
    5ab4:	e0 91 6b 17 	lds	r30, 0x176B	; 0x80176b <__iob+0x2>
    5ab8:	f0 91 6c 17 	lds	r31, 0x176C	; 0x80176c <__iob+0x3>
    5abc:	23 81       	ldd	r18, Z+3	; 0x03
    5abe:	21 ff       	sbrs	r18, 1
    5ac0:	1b c0       	rjmp	.+54     	; 0x5af8 <puts+0x4c>
    5ac2:	8c 01       	movw	r16, r24
    5ac4:	d0 e0       	ldi	r29, 0x00	; 0
    5ac6:	c0 e0       	ldi	r28, 0x00	; 0
    5ac8:	f8 01       	movw	r30, r16
    5aca:	81 91       	ld	r24, Z+
    5acc:	8f 01       	movw	r16, r30
    5ace:	60 91 6b 17 	lds	r22, 0x176B	; 0x80176b <__iob+0x2>
    5ad2:	70 91 6c 17 	lds	r23, 0x176C	; 0x80176c <__iob+0x3>
    5ad6:	db 01       	movw	r26, r22
    5ad8:	18 96       	adiw	r26, 0x08	; 8
    5ada:	ed 91       	ld	r30, X+
    5adc:	fc 91       	ld	r31, X
    5ade:	19 97       	sbiw	r26, 0x09	; 9
    5ae0:	88 23       	and	r24, r24
    5ae2:	31 f0       	breq	.+12     	; 0x5af0 <puts+0x44>
    5ae4:	19 95       	eicall
    5ae6:	89 2b       	or	r24, r25
    5ae8:	79 f3       	breq	.-34     	; 0x5ac8 <puts+0x1c>
    5aea:	df ef       	ldi	r29, 0xFF	; 255
    5aec:	cf ef       	ldi	r28, 0xFF	; 255
    5aee:	ec cf       	rjmp	.-40     	; 0x5ac8 <puts+0x1c>
    5af0:	8a e0       	ldi	r24, 0x0A	; 10
    5af2:	19 95       	eicall
    5af4:	89 2b       	or	r24, r25
    5af6:	19 f0       	breq	.+6      	; 0x5afe <puts+0x52>
    5af8:	8f ef       	ldi	r24, 0xFF	; 255
    5afa:	9f ef       	ldi	r25, 0xFF	; 255
    5afc:	02 c0       	rjmp	.+4      	; 0x5b02 <puts+0x56>
    5afe:	8d 2f       	mov	r24, r29
    5b00:	9c 2f       	mov	r25, r28
    5b02:	df 91       	pop	r29
    5b04:	cf 91       	pop	r28
    5b06:	1f 91       	pop	r17
    5b08:	0f 91       	pop	r16
    5b0a:	08 95       	ret

00005b0c <sprintf>:
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	cd b7       	in	r28, 0x3d	; 61
    5b16:	de b7       	in	r29, 0x3e	; 62
    5b18:	2e 97       	sbiw	r28, 0x0e	; 14
    5b1a:	0f b6       	in	r0, 0x3f	; 63
    5b1c:	f8 94       	cli
    5b1e:	de bf       	out	0x3e, r29	; 62
    5b20:	0f be       	out	0x3f, r0	; 63
    5b22:	cd bf       	out	0x3d, r28	; 61
    5b24:	0e 89       	ldd	r16, Y+22	; 0x16
    5b26:	1f 89       	ldd	r17, Y+23	; 0x17
    5b28:	86 e0       	ldi	r24, 0x06	; 6
    5b2a:	8c 83       	std	Y+4, r24	; 0x04
    5b2c:	1a 83       	std	Y+2, r17	; 0x02
    5b2e:	09 83       	std	Y+1, r16	; 0x01
    5b30:	8f ef       	ldi	r24, 0xFF	; 255
    5b32:	9f e7       	ldi	r25, 0x7F	; 127
    5b34:	9e 83       	std	Y+6, r25	; 0x06
    5b36:	8d 83       	std	Y+5, r24	; 0x05
    5b38:	ae 01       	movw	r20, r28
    5b3a:	46 5e       	subi	r20, 0xE6	; 230
    5b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b3e:	68 8d       	ldd	r22, Y+24	; 0x18
    5b40:	79 8d       	ldd	r23, Y+25	; 0x19
    5b42:	ce 01       	movw	r24, r28
    5b44:	01 96       	adiw	r24, 0x01	; 1
    5b46:	10 d0       	rcall	.+32     	; 0x5b68 <vfprintf>
    5b48:	ef 81       	ldd	r30, Y+7	; 0x07
    5b4a:	f8 85       	ldd	r31, Y+8	; 0x08
    5b4c:	e0 0f       	add	r30, r16
    5b4e:	f1 1f       	adc	r31, r17
    5b50:	10 82       	st	Z, r1
    5b52:	2e 96       	adiw	r28, 0x0e	; 14
    5b54:	0f b6       	in	r0, 0x3f	; 63
    5b56:	f8 94       	cli
    5b58:	de bf       	out	0x3e, r29	; 62
    5b5a:	0f be       	out	0x3f, r0	; 63
    5b5c:	cd bf       	out	0x3d, r28	; 61
    5b5e:	df 91       	pop	r29
    5b60:	cf 91       	pop	r28
    5b62:	1f 91       	pop	r17
    5b64:	0f 91       	pop	r16
    5b66:	08 95       	ret

00005b68 <vfprintf>:
    5b68:	2f 92       	push	r2
    5b6a:	3f 92       	push	r3
    5b6c:	4f 92       	push	r4
    5b6e:	5f 92       	push	r5
    5b70:	6f 92       	push	r6
    5b72:	7f 92       	push	r7
    5b74:	8f 92       	push	r8
    5b76:	9f 92       	push	r9
    5b78:	af 92       	push	r10
    5b7a:	bf 92       	push	r11
    5b7c:	cf 92       	push	r12
    5b7e:	df 92       	push	r13
    5b80:	ef 92       	push	r14
    5b82:	ff 92       	push	r15
    5b84:	0f 93       	push	r16
    5b86:	1f 93       	push	r17
    5b88:	cf 93       	push	r28
    5b8a:	df 93       	push	r29
    5b8c:	cd b7       	in	r28, 0x3d	; 61
    5b8e:	de b7       	in	r29, 0x3e	; 62
    5b90:	2b 97       	sbiw	r28, 0x0b	; 11
    5b92:	0f b6       	in	r0, 0x3f	; 63
    5b94:	f8 94       	cli
    5b96:	de bf       	out	0x3e, r29	; 62
    5b98:	0f be       	out	0x3f, r0	; 63
    5b9a:	cd bf       	out	0x3d, r28	; 61
    5b9c:	6c 01       	movw	r12, r24
    5b9e:	7b 01       	movw	r14, r22
    5ba0:	8a 01       	movw	r16, r20
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	17 82       	std	Z+7, r1	; 0x07
    5ba6:	16 82       	std	Z+6, r1	; 0x06
    5ba8:	83 81       	ldd	r24, Z+3	; 0x03
    5baa:	81 ff       	sbrs	r24, 1
    5bac:	bf c1       	rjmp	.+894    	; 0x5f2c <vfprintf+0x3c4>
    5bae:	ce 01       	movw	r24, r28
    5bb0:	01 96       	adiw	r24, 0x01	; 1
    5bb2:	3c 01       	movw	r6, r24
    5bb4:	f6 01       	movw	r30, r12
    5bb6:	93 81       	ldd	r25, Z+3	; 0x03
    5bb8:	f7 01       	movw	r30, r14
    5bba:	93 fd       	sbrc	r25, 3
    5bbc:	85 91       	lpm	r24, Z+
    5bbe:	93 ff       	sbrs	r25, 3
    5bc0:	81 91       	ld	r24, Z+
    5bc2:	7f 01       	movw	r14, r30
    5bc4:	88 23       	and	r24, r24
    5bc6:	09 f4       	brne	.+2      	; 0x5bca <vfprintf+0x62>
    5bc8:	ad c1       	rjmp	.+858    	; 0x5f24 <vfprintf+0x3bc>
    5bca:	85 32       	cpi	r24, 0x25	; 37
    5bcc:	39 f4       	brne	.+14     	; 0x5bdc <vfprintf+0x74>
    5bce:	93 fd       	sbrc	r25, 3
    5bd0:	85 91       	lpm	r24, Z+
    5bd2:	93 ff       	sbrs	r25, 3
    5bd4:	81 91       	ld	r24, Z+
    5bd6:	7f 01       	movw	r14, r30
    5bd8:	85 32       	cpi	r24, 0x25	; 37
    5bda:	21 f4       	brne	.+8      	; 0x5be4 <vfprintf+0x7c>
    5bdc:	b6 01       	movw	r22, r12
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	d6 d1       	rcall	.+940    	; 0x5f8e <fputc>
    5be2:	e8 cf       	rjmp	.-48     	; 0x5bb4 <vfprintf+0x4c>
    5be4:	91 2c       	mov	r9, r1
    5be6:	21 2c       	mov	r2, r1
    5be8:	31 2c       	mov	r3, r1
    5bea:	ff e1       	ldi	r31, 0x1F	; 31
    5bec:	f3 15       	cp	r31, r3
    5bee:	d8 f0       	brcs	.+54     	; 0x5c26 <vfprintf+0xbe>
    5bf0:	8b 32       	cpi	r24, 0x2B	; 43
    5bf2:	79 f0       	breq	.+30     	; 0x5c12 <vfprintf+0xaa>
    5bf4:	38 f4       	brcc	.+14     	; 0x5c04 <vfprintf+0x9c>
    5bf6:	80 32       	cpi	r24, 0x20	; 32
    5bf8:	79 f0       	breq	.+30     	; 0x5c18 <vfprintf+0xb0>
    5bfa:	83 32       	cpi	r24, 0x23	; 35
    5bfc:	a1 f4       	brne	.+40     	; 0x5c26 <vfprintf+0xbe>
    5bfe:	23 2d       	mov	r18, r3
    5c00:	20 61       	ori	r18, 0x10	; 16
    5c02:	1d c0       	rjmp	.+58     	; 0x5c3e <vfprintf+0xd6>
    5c04:	8d 32       	cpi	r24, 0x2D	; 45
    5c06:	61 f0       	breq	.+24     	; 0x5c20 <vfprintf+0xb8>
    5c08:	80 33       	cpi	r24, 0x30	; 48
    5c0a:	69 f4       	brne	.+26     	; 0x5c26 <vfprintf+0xbe>
    5c0c:	23 2d       	mov	r18, r3
    5c0e:	21 60       	ori	r18, 0x01	; 1
    5c10:	16 c0       	rjmp	.+44     	; 0x5c3e <vfprintf+0xd6>
    5c12:	83 2d       	mov	r24, r3
    5c14:	82 60       	ori	r24, 0x02	; 2
    5c16:	38 2e       	mov	r3, r24
    5c18:	e3 2d       	mov	r30, r3
    5c1a:	e4 60       	ori	r30, 0x04	; 4
    5c1c:	3e 2e       	mov	r3, r30
    5c1e:	2a c0       	rjmp	.+84     	; 0x5c74 <vfprintf+0x10c>
    5c20:	f3 2d       	mov	r31, r3
    5c22:	f8 60       	ori	r31, 0x08	; 8
    5c24:	1d c0       	rjmp	.+58     	; 0x5c60 <vfprintf+0xf8>
    5c26:	37 fc       	sbrc	r3, 7
    5c28:	2d c0       	rjmp	.+90     	; 0x5c84 <vfprintf+0x11c>
    5c2a:	20 ed       	ldi	r18, 0xD0	; 208
    5c2c:	28 0f       	add	r18, r24
    5c2e:	2a 30       	cpi	r18, 0x0A	; 10
    5c30:	40 f0       	brcs	.+16     	; 0x5c42 <vfprintf+0xda>
    5c32:	8e 32       	cpi	r24, 0x2E	; 46
    5c34:	b9 f4       	brne	.+46     	; 0x5c64 <vfprintf+0xfc>
    5c36:	36 fc       	sbrc	r3, 6
    5c38:	75 c1       	rjmp	.+746    	; 0x5f24 <vfprintf+0x3bc>
    5c3a:	23 2d       	mov	r18, r3
    5c3c:	20 64       	ori	r18, 0x40	; 64
    5c3e:	32 2e       	mov	r3, r18
    5c40:	19 c0       	rjmp	.+50     	; 0x5c74 <vfprintf+0x10c>
    5c42:	36 fe       	sbrs	r3, 6
    5c44:	06 c0       	rjmp	.+12     	; 0x5c52 <vfprintf+0xea>
    5c46:	8a e0       	ldi	r24, 0x0A	; 10
    5c48:	98 9e       	mul	r9, r24
    5c4a:	20 0d       	add	r18, r0
    5c4c:	11 24       	eor	r1, r1
    5c4e:	92 2e       	mov	r9, r18
    5c50:	11 c0       	rjmp	.+34     	; 0x5c74 <vfprintf+0x10c>
    5c52:	ea e0       	ldi	r30, 0x0A	; 10
    5c54:	2e 9e       	mul	r2, r30
    5c56:	20 0d       	add	r18, r0
    5c58:	11 24       	eor	r1, r1
    5c5a:	22 2e       	mov	r2, r18
    5c5c:	f3 2d       	mov	r31, r3
    5c5e:	f0 62       	ori	r31, 0x20	; 32
    5c60:	3f 2e       	mov	r3, r31
    5c62:	08 c0       	rjmp	.+16     	; 0x5c74 <vfprintf+0x10c>
    5c64:	8c 36       	cpi	r24, 0x6C	; 108
    5c66:	21 f4       	brne	.+8      	; 0x5c70 <vfprintf+0x108>
    5c68:	83 2d       	mov	r24, r3
    5c6a:	80 68       	ori	r24, 0x80	; 128
    5c6c:	38 2e       	mov	r3, r24
    5c6e:	02 c0       	rjmp	.+4      	; 0x5c74 <vfprintf+0x10c>
    5c70:	88 36       	cpi	r24, 0x68	; 104
    5c72:	41 f4       	brne	.+16     	; 0x5c84 <vfprintf+0x11c>
    5c74:	f7 01       	movw	r30, r14
    5c76:	93 fd       	sbrc	r25, 3
    5c78:	85 91       	lpm	r24, Z+
    5c7a:	93 ff       	sbrs	r25, 3
    5c7c:	81 91       	ld	r24, Z+
    5c7e:	7f 01       	movw	r14, r30
    5c80:	81 11       	cpse	r24, r1
    5c82:	b3 cf       	rjmp	.-154    	; 0x5bea <vfprintf+0x82>
    5c84:	98 2f       	mov	r25, r24
    5c86:	9f 7d       	andi	r25, 0xDF	; 223
    5c88:	95 54       	subi	r25, 0x45	; 69
    5c8a:	93 30       	cpi	r25, 0x03	; 3
    5c8c:	28 f4       	brcc	.+10     	; 0x5c98 <vfprintf+0x130>
    5c8e:	0c 5f       	subi	r16, 0xFC	; 252
    5c90:	1f 4f       	sbci	r17, 0xFF	; 255
    5c92:	9f e3       	ldi	r25, 0x3F	; 63
    5c94:	99 83       	std	Y+1, r25	; 0x01
    5c96:	0d c0       	rjmp	.+26     	; 0x5cb2 <vfprintf+0x14a>
    5c98:	83 36       	cpi	r24, 0x63	; 99
    5c9a:	31 f0       	breq	.+12     	; 0x5ca8 <vfprintf+0x140>
    5c9c:	83 37       	cpi	r24, 0x73	; 115
    5c9e:	71 f0       	breq	.+28     	; 0x5cbc <vfprintf+0x154>
    5ca0:	83 35       	cpi	r24, 0x53	; 83
    5ca2:	09 f0       	breq	.+2      	; 0x5ca6 <vfprintf+0x13e>
    5ca4:	55 c0       	rjmp	.+170    	; 0x5d50 <vfprintf+0x1e8>
    5ca6:	20 c0       	rjmp	.+64     	; 0x5ce8 <vfprintf+0x180>
    5ca8:	f8 01       	movw	r30, r16
    5caa:	80 81       	ld	r24, Z
    5cac:	89 83       	std	Y+1, r24	; 0x01
    5cae:	0e 5f       	subi	r16, 0xFE	; 254
    5cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb2:	88 24       	eor	r8, r8
    5cb4:	83 94       	inc	r8
    5cb6:	91 2c       	mov	r9, r1
    5cb8:	53 01       	movw	r10, r6
    5cba:	12 c0       	rjmp	.+36     	; 0x5ce0 <vfprintf+0x178>
    5cbc:	28 01       	movw	r4, r16
    5cbe:	f2 e0       	ldi	r31, 0x02	; 2
    5cc0:	4f 0e       	add	r4, r31
    5cc2:	51 1c       	adc	r5, r1
    5cc4:	f8 01       	movw	r30, r16
    5cc6:	a0 80       	ld	r10, Z
    5cc8:	b1 80       	ldd	r11, Z+1	; 0x01
    5cca:	36 fe       	sbrs	r3, 6
    5ccc:	03 c0       	rjmp	.+6      	; 0x5cd4 <vfprintf+0x16c>
    5cce:	69 2d       	mov	r22, r9
    5cd0:	70 e0       	ldi	r23, 0x00	; 0
    5cd2:	02 c0       	rjmp	.+4      	; 0x5cd8 <vfprintf+0x170>
    5cd4:	6f ef       	ldi	r22, 0xFF	; 255
    5cd6:	7f ef       	ldi	r23, 0xFF	; 255
    5cd8:	c5 01       	movw	r24, r10
    5cda:	4e d1       	rcall	.+668    	; 0x5f78 <strnlen>
    5cdc:	4c 01       	movw	r8, r24
    5cde:	82 01       	movw	r16, r4
    5ce0:	f3 2d       	mov	r31, r3
    5ce2:	ff 77       	andi	r31, 0x7F	; 127
    5ce4:	3f 2e       	mov	r3, r31
    5ce6:	15 c0       	rjmp	.+42     	; 0x5d12 <vfprintf+0x1aa>
    5ce8:	28 01       	movw	r4, r16
    5cea:	22 e0       	ldi	r18, 0x02	; 2
    5cec:	42 0e       	add	r4, r18
    5cee:	51 1c       	adc	r5, r1
    5cf0:	f8 01       	movw	r30, r16
    5cf2:	a0 80       	ld	r10, Z
    5cf4:	b1 80       	ldd	r11, Z+1	; 0x01
    5cf6:	36 fe       	sbrs	r3, 6
    5cf8:	03 c0       	rjmp	.+6      	; 0x5d00 <vfprintf+0x198>
    5cfa:	69 2d       	mov	r22, r9
    5cfc:	70 e0       	ldi	r23, 0x00	; 0
    5cfe:	02 c0       	rjmp	.+4      	; 0x5d04 <vfprintf+0x19c>
    5d00:	6f ef       	ldi	r22, 0xFF	; 255
    5d02:	7f ef       	ldi	r23, 0xFF	; 255
    5d04:	c5 01       	movw	r24, r10
    5d06:	2d d1       	rcall	.+602    	; 0x5f62 <strnlen_P>
    5d08:	4c 01       	movw	r8, r24
    5d0a:	f3 2d       	mov	r31, r3
    5d0c:	f0 68       	ori	r31, 0x80	; 128
    5d0e:	3f 2e       	mov	r3, r31
    5d10:	82 01       	movw	r16, r4
    5d12:	33 fc       	sbrc	r3, 3
    5d14:	19 c0       	rjmp	.+50     	; 0x5d48 <vfprintf+0x1e0>
    5d16:	82 2d       	mov	r24, r2
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	88 16       	cp	r8, r24
    5d1c:	99 06       	cpc	r9, r25
    5d1e:	a0 f4       	brcc	.+40     	; 0x5d48 <vfprintf+0x1e0>
    5d20:	b6 01       	movw	r22, r12
    5d22:	80 e2       	ldi	r24, 0x20	; 32
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	33 d1       	rcall	.+614    	; 0x5f8e <fputc>
    5d28:	2a 94       	dec	r2
    5d2a:	f5 cf       	rjmp	.-22     	; 0x5d16 <vfprintf+0x1ae>
    5d2c:	f5 01       	movw	r30, r10
    5d2e:	37 fc       	sbrc	r3, 7
    5d30:	85 91       	lpm	r24, Z+
    5d32:	37 fe       	sbrs	r3, 7
    5d34:	81 91       	ld	r24, Z+
    5d36:	5f 01       	movw	r10, r30
    5d38:	b6 01       	movw	r22, r12
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	28 d1       	rcall	.+592    	; 0x5f8e <fputc>
    5d3e:	21 10       	cpse	r2, r1
    5d40:	2a 94       	dec	r2
    5d42:	21 e0       	ldi	r18, 0x01	; 1
    5d44:	82 1a       	sub	r8, r18
    5d46:	91 08       	sbc	r9, r1
    5d48:	81 14       	cp	r8, r1
    5d4a:	91 04       	cpc	r9, r1
    5d4c:	79 f7       	brne	.-34     	; 0x5d2c <vfprintf+0x1c4>
    5d4e:	e1 c0       	rjmp	.+450    	; 0x5f12 <vfprintf+0x3aa>
    5d50:	84 36       	cpi	r24, 0x64	; 100
    5d52:	11 f0       	breq	.+4      	; 0x5d58 <vfprintf+0x1f0>
    5d54:	89 36       	cpi	r24, 0x69	; 105
    5d56:	39 f5       	brne	.+78     	; 0x5da6 <vfprintf+0x23e>
    5d58:	f8 01       	movw	r30, r16
    5d5a:	37 fe       	sbrs	r3, 7
    5d5c:	07 c0       	rjmp	.+14     	; 0x5d6c <vfprintf+0x204>
    5d5e:	60 81       	ld	r22, Z
    5d60:	71 81       	ldd	r23, Z+1	; 0x01
    5d62:	82 81       	ldd	r24, Z+2	; 0x02
    5d64:	93 81       	ldd	r25, Z+3	; 0x03
    5d66:	0c 5f       	subi	r16, 0xFC	; 252
    5d68:	1f 4f       	sbci	r17, 0xFF	; 255
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <vfprintf+0x214>
    5d6c:	60 81       	ld	r22, Z
    5d6e:	71 81       	ldd	r23, Z+1	; 0x01
    5d70:	07 2e       	mov	r0, r23
    5d72:	00 0c       	add	r0, r0
    5d74:	88 0b       	sbc	r24, r24
    5d76:	99 0b       	sbc	r25, r25
    5d78:	0e 5f       	subi	r16, 0xFE	; 254
    5d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d7c:	f3 2d       	mov	r31, r3
    5d7e:	ff 76       	andi	r31, 0x6F	; 111
    5d80:	3f 2e       	mov	r3, r31
    5d82:	97 ff       	sbrs	r25, 7
    5d84:	09 c0       	rjmp	.+18     	; 0x5d98 <vfprintf+0x230>
    5d86:	90 95       	com	r25
    5d88:	80 95       	com	r24
    5d8a:	70 95       	com	r23
    5d8c:	61 95       	neg	r22
    5d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d90:	8f 4f       	sbci	r24, 0xFF	; 255
    5d92:	9f 4f       	sbci	r25, 0xFF	; 255
    5d94:	f0 68       	ori	r31, 0x80	; 128
    5d96:	3f 2e       	mov	r3, r31
    5d98:	2a e0       	ldi	r18, 0x0A	; 10
    5d9a:	30 e0       	ldi	r19, 0x00	; 0
    5d9c:	a3 01       	movw	r20, r6
    5d9e:	33 d1       	rcall	.+614    	; 0x6006 <__ultoa_invert>
    5da0:	88 2e       	mov	r8, r24
    5da2:	86 18       	sub	r8, r6
    5da4:	44 c0       	rjmp	.+136    	; 0x5e2e <vfprintf+0x2c6>
    5da6:	85 37       	cpi	r24, 0x75	; 117
    5da8:	31 f4       	brne	.+12     	; 0x5db6 <vfprintf+0x24e>
    5daa:	23 2d       	mov	r18, r3
    5dac:	2f 7e       	andi	r18, 0xEF	; 239
    5dae:	b2 2e       	mov	r11, r18
    5db0:	2a e0       	ldi	r18, 0x0A	; 10
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	25 c0       	rjmp	.+74     	; 0x5e00 <vfprintf+0x298>
    5db6:	93 2d       	mov	r25, r3
    5db8:	99 7f       	andi	r25, 0xF9	; 249
    5dba:	b9 2e       	mov	r11, r25
    5dbc:	8f 36       	cpi	r24, 0x6F	; 111
    5dbe:	c1 f0       	breq	.+48     	; 0x5df0 <vfprintf+0x288>
    5dc0:	18 f4       	brcc	.+6      	; 0x5dc8 <vfprintf+0x260>
    5dc2:	88 35       	cpi	r24, 0x58	; 88
    5dc4:	79 f0       	breq	.+30     	; 0x5de4 <vfprintf+0x27c>
    5dc6:	ae c0       	rjmp	.+348    	; 0x5f24 <vfprintf+0x3bc>
    5dc8:	80 37       	cpi	r24, 0x70	; 112
    5dca:	19 f0       	breq	.+6      	; 0x5dd2 <vfprintf+0x26a>
    5dcc:	88 37       	cpi	r24, 0x78	; 120
    5dce:	21 f0       	breq	.+8      	; 0x5dd8 <vfprintf+0x270>
    5dd0:	a9 c0       	rjmp	.+338    	; 0x5f24 <vfprintf+0x3bc>
    5dd2:	e9 2f       	mov	r30, r25
    5dd4:	e0 61       	ori	r30, 0x10	; 16
    5dd6:	be 2e       	mov	r11, r30
    5dd8:	b4 fe       	sbrs	r11, 4
    5dda:	0d c0       	rjmp	.+26     	; 0x5df6 <vfprintf+0x28e>
    5ddc:	fb 2d       	mov	r31, r11
    5dde:	f4 60       	ori	r31, 0x04	; 4
    5de0:	bf 2e       	mov	r11, r31
    5de2:	09 c0       	rjmp	.+18     	; 0x5df6 <vfprintf+0x28e>
    5de4:	34 fe       	sbrs	r3, 4
    5de6:	0a c0       	rjmp	.+20     	; 0x5dfc <vfprintf+0x294>
    5de8:	29 2f       	mov	r18, r25
    5dea:	26 60       	ori	r18, 0x06	; 6
    5dec:	b2 2e       	mov	r11, r18
    5dee:	06 c0       	rjmp	.+12     	; 0x5dfc <vfprintf+0x294>
    5df0:	28 e0       	ldi	r18, 0x08	; 8
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	05 c0       	rjmp	.+10     	; 0x5e00 <vfprintf+0x298>
    5df6:	20 e1       	ldi	r18, 0x10	; 16
    5df8:	30 e0       	ldi	r19, 0x00	; 0
    5dfa:	02 c0       	rjmp	.+4      	; 0x5e00 <vfprintf+0x298>
    5dfc:	20 e1       	ldi	r18, 0x10	; 16
    5dfe:	32 e0       	ldi	r19, 0x02	; 2
    5e00:	f8 01       	movw	r30, r16
    5e02:	b7 fe       	sbrs	r11, 7
    5e04:	07 c0       	rjmp	.+14     	; 0x5e14 <vfprintf+0x2ac>
    5e06:	60 81       	ld	r22, Z
    5e08:	71 81       	ldd	r23, Z+1	; 0x01
    5e0a:	82 81       	ldd	r24, Z+2	; 0x02
    5e0c:	93 81       	ldd	r25, Z+3	; 0x03
    5e0e:	0c 5f       	subi	r16, 0xFC	; 252
    5e10:	1f 4f       	sbci	r17, 0xFF	; 255
    5e12:	06 c0       	rjmp	.+12     	; 0x5e20 <vfprintf+0x2b8>
    5e14:	60 81       	ld	r22, Z
    5e16:	71 81       	ldd	r23, Z+1	; 0x01
    5e18:	80 e0       	ldi	r24, 0x00	; 0
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	0e 5f       	subi	r16, 0xFE	; 254
    5e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5e20:	a3 01       	movw	r20, r6
    5e22:	f1 d0       	rcall	.+482    	; 0x6006 <__ultoa_invert>
    5e24:	88 2e       	mov	r8, r24
    5e26:	86 18       	sub	r8, r6
    5e28:	fb 2d       	mov	r31, r11
    5e2a:	ff 77       	andi	r31, 0x7F	; 127
    5e2c:	3f 2e       	mov	r3, r31
    5e2e:	36 fe       	sbrs	r3, 6
    5e30:	0d c0       	rjmp	.+26     	; 0x5e4c <vfprintf+0x2e4>
    5e32:	23 2d       	mov	r18, r3
    5e34:	2e 7f       	andi	r18, 0xFE	; 254
    5e36:	a2 2e       	mov	r10, r18
    5e38:	89 14       	cp	r8, r9
    5e3a:	58 f4       	brcc	.+22     	; 0x5e52 <vfprintf+0x2ea>
    5e3c:	34 fe       	sbrs	r3, 4
    5e3e:	0b c0       	rjmp	.+22     	; 0x5e56 <vfprintf+0x2ee>
    5e40:	32 fc       	sbrc	r3, 2
    5e42:	09 c0       	rjmp	.+18     	; 0x5e56 <vfprintf+0x2ee>
    5e44:	83 2d       	mov	r24, r3
    5e46:	8e 7e       	andi	r24, 0xEE	; 238
    5e48:	a8 2e       	mov	r10, r24
    5e4a:	05 c0       	rjmp	.+10     	; 0x5e56 <vfprintf+0x2ee>
    5e4c:	b8 2c       	mov	r11, r8
    5e4e:	a3 2c       	mov	r10, r3
    5e50:	03 c0       	rjmp	.+6      	; 0x5e58 <vfprintf+0x2f0>
    5e52:	b8 2c       	mov	r11, r8
    5e54:	01 c0       	rjmp	.+2      	; 0x5e58 <vfprintf+0x2f0>
    5e56:	b9 2c       	mov	r11, r9
    5e58:	a4 fe       	sbrs	r10, 4
    5e5a:	0f c0       	rjmp	.+30     	; 0x5e7a <vfprintf+0x312>
    5e5c:	fe 01       	movw	r30, r28
    5e5e:	e8 0d       	add	r30, r8
    5e60:	f1 1d       	adc	r31, r1
    5e62:	80 81       	ld	r24, Z
    5e64:	80 33       	cpi	r24, 0x30	; 48
    5e66:	21 f4       	brne	.+8      	; 0x5e70 <vfprintf+0x308>
    5e68:	9a 2d       	mov	r25, r10
    5e6a:	99 7e       	andi	r25, 0xE9	; 233
    5e6c:	a9 2e       	mov	r10, r25
    5e6e:	09 c0       	rjmp	.+18     	; 0x5e82 <vfprintf+0x31a>
    5e70:	a2 fe       	sbrs	r10, 2
    5e72:	06 c0       	rjmp	.+12     	; 0x5e80 <vfprintf+0x318>
    5e74:	b3 94       	inc	r11
    5e76:	b3 94       	inc	r11
    5e78:	04 c0       	rjmp	.+8      	; 0x5e82 <vfprintf+0x31a>
    5e7a:	8a 2d       	mov	r24, r10
    5e7c:	86 78       	andi	r24, 0x86	; 134
    5e7e:	09 f0       	breq	.+2      	; 0x5e82 <vfprintf+0x31a>
    5e80:	b3 94       	inc	r11
    5e82:	a3 fc       	sbrc	r10, 3
    5e84:	10 c0       	rjmp	.+32     	; 0x5ea6 <vfprintf+0x33e>
    5e86:	a0 fe       	sbrs	r10, 0
    5e88:	06 c0       	rjmp	.+12     	; 0x5e96 <vfprintf+0x32e>
    5e8a:	b2 14       	cp	r11, r2
    5e8c:	80 f4       	brcc	.+32     	; 0x5eae <vfprintf+0x346>
    5e8e:	28 0c       	add	r2, r8
    5e90:	92 2c       	mov	r9, r2
    5e92:	9b 18       	sub	r9, r11
    5e94:	0d c0       	rjmp	.+26     	; 0x5eb0 <vfprintf+0x348>
    5e96:	b2 14       	cp	r11, r2
    5e98:	58 f4       	brcc	.+22     	; 0x5eb0 <vfprintf+0x348>
    5e9a:	b6 01       	movw	r22, r12
    5e9c:	80 e2       	ldi	r24, 0x20	; 32
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	76 d0       	rcall	.+236    	; 0x5f8e <fputc>
    5ea2:	b3 94       	inc	r11
    5ea4:	f8 cf       	rjmp	.-16     	; 0x5e96 <vfprintf+0x32e>
    5ea6:	b2 14       	cp	r11, r2
    5ea8:	18 f4       	brcc	.+6      	; 0x5eb0 <vfprintf+0x348>
    5eaa:	2b 18       	sub	r2, r11
    5eac:	02 c0       	rjmp	.+4      	; 0x5eb2 <vfprintf+0x34a>
    5eae:	98 2c       	mov	r9, r8
    5eb0:	21 2c       	mov	r2, r1
    5eb2:	a4 fe       	sbrs	r10, 4
    5eb4:	0f c0       	rjmp	.+30     	; 0x5ed4 <vfprintf+0x36c>
    5eb6:	b6 01       	movw	r22, r12
    5eb8:	80 e3       	ldi	r24, 0x30	; 48
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	68 d0       	rcall	.+208    	; 0x5f8e <fputc>
    5ebe:	a2 fe       	sbrs	r10, 2
    5ec0:	16 c0       	rjmp	.+44     	; 0x5eee <vfprintf+0x386>
    5ec2:	a1 fc       	sbrc	r10, 1
    5ec4:	03 c0       	rjmp	.+6      	; 0x5ecc <vfprintf+0x364>
    5ec6:	88 e7       	ldi	r24, 0x78	; 120
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	02 c0       	rjmp	.+4      	; 0x5ed0 <vfprintf+0x368>
    5ecc:	88 e5       	ldi	r24, 0x58	; 88
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	b6 01       	movw	r22, r12
    5ed2:	0c c0       	rjmp	.+24     	; 0x5eec <vfprintf+0x384>
    5ed4:	8a 2d       	mov	r24, r10
    5ed6:	86 78       	andi	r24, 0x86	; 134
    5ed8:	51 f0       	breq	.+20     	; 0x5eee <vfprintf+0x386>
    5eda:	a1 fe       	sbrs	r10, 1
    5edc:	02 c0       	rjmp	.+4      	; 0x5ee2 <vfprintf+0x37a>
    5ede:	8b e2       	ldi	r24, 0x2B	; 43
    5ee0:	01 c0       	rjmp	.+2      	; 0x5ee4 <vfprintf+0x37c>
    5ee2:	80 e2       	ldi	r24, 0x20	; 32
    5ee4:	a7 fc       	sbrc	r10, 7
    5ee6:	8d e2       	ldi	r24, 0x2D	; 45
    5ee8:	b6 01       	movw	r22, r12
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	50 d0       	rcall	.+160    	; 0x5f8e <fputc>
    5eee:	89 14       	cp	r8, r9
    5ef0:	30 f4       	brcc	.+12     	; 0x5efe <vfprintf+0x396>
    5ef2:	b6 01       	movw	r22, r12
    5ef4:	80 e3       	ldi	r24, 0x30	; 48
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	4a d0       	rcall	.+148    	; 0x5f8e <fputc>
    5efa:	9a 94       	dec	r9
    5efc:	f8 cf       	rjmp	.-16     	; 0x5eee <vfprintf+0x386>
    5efe:	8a 94       	dec	r8
    5f00:	f3 01       	movw	r30, r6
    5f02:	e8 0d       	add	r30, r8
    5f04:	f1 1d       	adc	r31, r1
    5f06:	80 81       	ld	r24, Z
    5f08:	b6 01       	movw	r22, r12
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	40 d0       	rcall	.+128    	; 0x5f8e <fputc>
    5f0e:	81 10       	cpse	r8, r1
    5f10:	f6 cf       	rjmp	.-20     	; 0x5efe <vfprintf+0x396>
    5f12:	22 20       	and	r2, r2
    5f14:	09 f4       	brne	.+2      	; 0x5f18 <vfprintf+0x3b0>
    5f16:	4e ce       	rjmp	.-868    	; 0x5bb4 <vfprintf+0x4c>
    5f18:	b6 01       	movw	r22, r12
    5f1a:	80 e2       	ldi	r24, 0x20	; 32
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	37 d0       	rcall	.+110    	; 0x5f8e <fputc>
    5f20:	2a 94       	dec	r2
    5f22:	f7 cf       	rjmp	.-18     	; 0x5f12 <vfprintf+0x3aa>
    5f24:	f6 01       	movw	r30, r12
    5f26:	86 81       	ldd	r24, Z+6	; 0x06
    5f28:	97 81       	ldd	r25, Z+7	; 0x07
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <vfprintf+0x3c8>
    5f2c:	8f ef       	ldi	r24, 0xFF	; 255
    5f2e:	9f ef       	ldi	r25, 0xFF	; 255
    5f30:	2b 96       	adiw	r28, 0x0b	; 11
    5f32:	0f b6       	in	r0, 0x3f	; 63
    5f34:	f8 94       	cli
    5f36:	de bf       	out	0x3e, r29	; 62
    5f38:	0f be       	out	0x3f, r0	; 63
    5f3a:	cd bf       	out	0x3d, r28	; 61
    5f3c:	df 91       	pop	r29
    5f3e:	cf 91       	pop	r28
    5f40:	1f 91       	pop	r17
    5f42:	0f 91       	pop	r16
    5f44:	ff 90       	pop	r15
    5f46:	ef 90       	pop	r14
    5f48:	df 90       	pop	r13
    5f4a:	cf 90       	pop	r12
    5f4c:	bf 90       	pop	r11
    5f4e:	af 90       	pop	r10
    5f50:	9f 90       	pop	r9
    5f52:	8f 90       	pop	r8
    5f54:	7f 90       	pop	r7
    5f56:	6f 90       	pop	r6
    5f58:	5f 90       	pop	r5
    5f5a:	4f 90       	pop	r4
    5f5c:	3f 90       	pop	r3
    5f5e:	2f 90       	pop	r2
    5f60:	08 95       	ret

00005f62 <strnlen_P>:
    5f62:	fc 01       	movw	r30, r24
    5f64:	05 90       	lpm	r0, Z+
    5f66:	61 50       	subi	r22, 0x01	; 1
    5f68:	70 40       	sbci	r23, 0x00	; 0
    5f6a:	01 10       	cpse	r0, r1
    5f6c:	d8 f7       	brcc	.-10     	; 0x5f64 <strnlen_P+0x2>
    5f6e:	80 95       	com	r24
    5f70:	90 95       	com	r25
    5f72:	8e 0f       	add	r24, r30
    5f74:	9f 1f       	adc	r25, r31
    5f76:	08 95       	ret

00005f78 <strnlen>:
    5f78:	fc 01       	movw	r30, r24
    5f7a:	61 50       	subi	r22, 0x01	; 1
    5f7c:	70 40       	sbci	r23, 0x00	; 0
    5f7e:	01 90       	ld	r0, Z+
    5f80:	01 10       	cpse	r0, r1
    5f82:	d8 f7       	brcc	.-10     	; 0x5f7a <strnlen+0x2>
    5f84:	80 95       	com	r24
    5f86:	90 95       	com	r25
    5f88:	8e 0f       	add	r24, r30
    5f8a:	9f 1f       	adc	r25, r31
    5f8c:	08 95       	ret

00005f8e <fputc>:
    5f8e:	0f 93       	push	r16
    5f90:	1f 93       	push	r17
    5f92:	cf 93       	push	r28
    5f94:	df 93       	push	r29
    5f96:	fb 01       	movw	r30, r22
    5f98:	23 81       	ldd	r18, Z+3	; 0x03
    5f9a:	21 fd       	sbrc	r18, 1
    5f9c:	03 c0       	rjmp	.+6      	; 0x5fa4 <fputc+0x16>
    5f9e:	8f ef       	ldi	r24, 0xFF	; 255
    5fa0:	9f ef       	ldi	r25, 0xFF	; 255
    5fa2:	2c c0       	rjmp	.+88     	; 0x5ffc <fputc+0x6e>
    5fa4:	22 ff       	sbrs	r18, 2
    5fa6:	16 c0       	rjmp	.+44     	; 0x5fd4 <fputc+0x46>
    5fa8:	46 81       	ldd	r20, Z+6	; 0x06
    5faa:	57 81       	ldd	r21, Z+7	; 0x07
    5fac:	24 81       	ldd	r18, Z+4	; 0x04
    5fae:	35 81       	ldd	r19, Z+5	; 0x05
    5fb0:	42 17       	cp	r20, r18
    5fb2:	53 07       	cpc	r21, r19
    5fb4:	44 f4       	brge	.+16     	; 0x5fc6 <fputc+0x38>
    5fb6:	a0 81       	ld	r26, Z
    5fb8:	b1 81       	ldd	r27, Z+1	; 0x01
    5fba:	9d 01       	movw	r18, r26
    5fbc:	2f 5f       	subi	r18, 0xFF	; 255
    5fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc0:	31 83       	std	Z+1, r19	; 0x01
    5fc2:	20 83       	st	Z, r18
    5fc4:	8c 93       	st	X, r24
    5fc6:	26 81       	ldd	r18, Z+6	; 0x06
    5fc8:	37 81       	ldd	r19, Z+7	; 0x07
    5fca:	2f 5f       	subi	r18, 0xFF	; 255
    5fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    5fce:	37 83       	std	Z+7, r19	; 0x07
    5fd0:	26 83       	std	Z+6, r18	; 0x06
    5fd2:	14 c0       	rjmp	.+40     	; 0x5ffc <fputc+0x6e>
    5fd4:	8b 01       	movw	r16, r22
    5fd6:	ec 01       	movw	r28, r24
    5fd8:	fb 01       	movw	r30, r22
    5fda:	00 84       	ldd	r0, Z+8	; 0x08
    5fdc:	f1 85       	ldd	r31, Z+9	; 0x09
    5fde:	e0 2d       	mov	r30, r0
    5fe0:	19 95       	eicall
    5fe2:	89 2b       	or	r24, r25
    5fe4:	e1 f6       	brne	.-72     	; 0x5f9e <fputc+0x10>
    5fe6:	d8 01       	movw	r26, r16
    5fe8:	16 96       	adiw	r26, 0x06	; 6
    5fea:	8d 91       	ld	r24, X+
    5fec:	9c 91       	ld	r25, X
    5fee:	17 97       	sbiw	r26, 0x07	; 7
    5ff0:	01 96       	adiw	r24, 0x01	; 1
    5ff2:	17 96       	adiw	r26, 0x07	; 7
    5ff4:	9c 93       	st	X, r25
    5ff6:	8e 93       	st	-X, r24
    5ff8:	16 97       	sbiw	r26, 0x06	; 6
    5ffa:	ce 01       	movw	r24, r28
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	1f 91       	pop	r17
    6002:	0f 91       	pop	r16
    6004:	08 95       	ret

00006006 <__ultoa_invert>:
    6006:	fa 01       	movw	r30, r20
    6008:	aa 27       	eor	r26, r26
    600a:	28 30       	cpi	r18, 0x08	; 8
    600c:	51 f1       	breq	.+84     	; 0x6062 <__ultoa_invert+0x5c>
    600e:	20 31       	cpi	r18, 0x10	; 16
    6010:	81 f1       	breq	.+96     	; 0x6072 <__ultoa_invert+0x6c>
    6012:	e8 94       	clt
    6014:	6f 93       	push	r22
    6016:	6e 7f       	andi	r22, 0xFE	; 254
    6018:	6e 5f       	subi	r22, 0xFE	; 254
    601a:	7f 4f       	sbci	r23, 0xFF	; 255
    601c:	8f 4f       	sbci	r24, 0xFF	; 255
    601e:	9f 4f       	sbci	r25, 0xFF	; 255
    6020:	af 4f       	sbci	r26, 0xFF	; 255
    6022:	b1 e0       	ldi	r27, 0x01	; 1
    6024:	3e d0       	rcall	.+124    	; 0x60a2 <__ultoa_invert+0x9c>
    6026:	b4 e0       	ldi	r27, 0x04	; 4
    6028:	3c d0       	rcall	.+120    	; 0x60a2 <__ultoa_invert+0x9c>
    602a:	67 0f       	add	r22, r23
    602c:	78 1f       	adc	r23, r24
    602e:	89 1f       	adc	r24, r25
    6030:	9a 1f       	adc	r25, r26
    6032:	a1 1d       	adc	r26, r1
    6034:	68 0f       	add	r22, r24
    6036:	79 1f       	adc	r23, r25
    6038:	8a 1f       	adc	r24, r26
    603a:	91 1d       	adc	r25, r1
    603c:	a1 1d       	adc	r26, r1
    603e:	6a 0f       	add	r22, r26
    6040:	71 1d       	adc	r23, r1
    6042:	81 1d       	adc	r24, r1
    6044:	91 1d       	adc	r25, r1
    6046:	a1 1d       	adc	r26, r1
    6048:	20 d0       	rcall	.+64     	; 0x608a <__ultoa_invert+0x84>
    604a:	09 f4       	brne	.+2      	; 0x604e <__ultoa_invert+0x48>
    604c:	68 94       	set
    604e:	3f 91       	pop	r19
    6050:	2a e0       	ldi	r18, 0x0A	; 10
    6052:	26 9f       	mul	r18, r22
    6054:	11 24       	eor	r1, r1
    6056:	30 19       	sub	r19, r0
    6058:	30 5d       	subi	r19, 0xD0	; 208
    605a:	31 93       	st	Z+, r19
    605c:	de f6       	brtc	.-74     	; 0x6014 <__ultoa_invert+0xe>
    605e:	cf 01       	movw	r24, r30
    6060:	08 95       	ret
    6062:	46 2f       	mov	r20, r22
    6064:	47 70       	andi	r20, 0x07	; 7
    6066:	40 5d       	subi	r20, 0xD0	; 208
    6068:	41 93       	st	Z+, r20
    606a:	b3 e0       	ldi	r27, 0x03	; 3
    606c:	0f d0       	rcall	.+30     	; 0x608c <__ultoa_invert+0x86>
    606e:	c9 f7       	brne	.-14     	; 0x6062 <__ultoa_invert+0x5c>
    6070:	f6 cf       	rjmp	.-20     	; 0x605e <__ultoa_invert+0x58>
    6072:	46 2f       	mov	r20, r22
    6074:	4f 70       	andi	r20, 0x0F	; 15
    6076:	40 5d       	subi	r20, 0xD0	; 208
    6078:	4a 33       	cpi	r20, 0x3A	; 58
    607a:	18 f0       	brcs	.+6      	; 0x6082 <__ultoa_invert+0x7c>
    607c:	49 5d       	subi	r20, 0xD9	; 217
    607e:	31 fd       	sbrc	r19, 1
    6080:	40 52       	subi	r20, 0x20	; 32
    6082:	41 93       	st	Z+, r20
    6084:	02 d0       	rcall	.+4      	; 0x608a <__ultoa_invert+0x84>
    6086:	a9 f7       	brne	.-22     	; 0x6072 <__ultoa_invert+0x6c>
    6088:	ea cf       	rjmp	.-44     	; 0x605e <__ultoa_invert+0x58>
    608a:	b4 e0       	ldi	r27, 0x04	; 4
    608c:	a6 95       	lsr	r26
    608e:	97 95       	ror	r25
    6090:	87 95       	ror	r24
    6092:	77 95       	ror	r23
    6094:	67 95       	ror	r22
    6096:	ba 95       	dec	r27
    6098:	c9 f7       	brne	.-14     	; 0x608c <__ultoa_invert+0x86>
    609a:	00 97       	sbiw	r24, 0x00	; 0
    609c:	61 05       	cpc	r22, r1
    609e:	71 05       	cpc	r23, r1
    60a0:	08 95       	ret
    60a2:	9b 01       	movw	r18, r22
    60a4:	ac 01       	movw	r20, r24
    60a6:	0a 2e       	mov	r0, r26
    60a8:	06 94       	lsr	r0
    60aa:	57 95       	ror	r21
    60ac:	47 95       	ror	r20
    60ae:	37 95       	ror	r19
    60b0:	27 95       	ror	r18
    60b2:	ba 95       	dec	r27
    60b4:	c9 f7       	brne	.-14     	; 0x60a8 <__ultoa_invert+0xa2>
    60b6:	62 0f       	add	r22, r18
    60b8:	73 1f       	adc	r23, r19
    60ba:	84 1f       	adc	r24, r20
    60bc:	95 1f       	adc	r25, r21
    60be:	a0 1d       	adc	r26, r0
    60c0:	08 95       	ret

000060c2 <_exit>:
    60c2:	f8 94       	cli

000060c4 <__stop_program>:
    60c4:	ff cf       	rjmp	.-2      	; 0x60c4 <__stop_program>
