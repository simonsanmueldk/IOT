
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000638  00800200  00006aa6  00006b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001069  00800838  00800838  00007172  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000071d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  00007210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eb43  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bb4  00000000  00000000  0001698b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007666  00000000  00000000  0001a53f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a04  00000000  00000000  00021ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004630  00000000  00000000  000245ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c83c  00000000  00000000  00028bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  00035418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ac c7       	rjmp	.+3928   	; 0xf8a <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 12 29 	jmp	0x5224	; 0x5224 <__vector_25>
      68:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__vector_36>
      94:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 45 2e 	jmp	0x5c8a	; 0x5c8a <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 3e 2a 	jmp	0x547c	; 0x547c <__vector_51>
      d0:	0c 94 90 2a 	jmp	0x5520	; 0x5520 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <__vector_54>
      dc:	0c 94 26 2b 	jmp	0x564c	; 0x564c <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f 1d       	adc	r25, r15
      e6:	9f 1d       	adc	r25, r15
      e8:	9f 1d       	adc	r25, r15
      ea:	d6 1d       	adc	r29, r6
      ec:	de 1d       	adc	r29, r14
      ee:	f3 1d       	adc	r31, r3
      f0:	9f 1d       	adc	r25, r15
      f2:	9f 1d       	adc	r25, r15
      f4:	d6 1d       	adc	r29, r6
      f6:	de 1d       	adc	r29, r14
      f8:	67 2e       	mov	r6, r23
      fa:	d7 2e       	mov	r13, r23
      fc:	d7 2e       	mov	r13, r23
      fe:	d7 2e       	mov	r13, r23
     100:	d7 2e       	mov	r13, r23
     102:	d7 2e       	mov	r13, r23
     104:	d7 2e       	mov	r13, r23
     106:	d7 2e       	mov	r13, r23
     108:	67 2e       	mov	r6, r23
     10a:	d7 2e       	mov	r13, r23
     10c:	d7 2e       	mov	r13, r23
     10e:	d7 2e       	mov	r13, r23
     110:	d7 2e       	mov	r13, r23
     112:	d7 2e       	mov	r13, r23
     114:	d7 2e       	mov	r13, r23
     116:	d7 2e       	mov	r13, r23
     118:	69 2e       	mov	r6, r25
     11a:	d7 2e       	mov	r13, r23
     11c:	d7 2e       	mov	r13, r23
     11e:	d7 2e       	mov	r13, r23
     120:	d7 2e       	mov	r13, r23
     122:	d7 2e       	mov	r13, r23
     124:	d7 2e       	mov	r13, r23
     126:	d7 2e       	mov	r13, r23
     128:	d7 2e       	mov	r13, r23
     12a:	d7 2e       	mov	r13, r23
     12c:	d7 2e       	mov	r13, r23
     12e:	d7 2e       	mov	r13, r23
     130:	d7 2e       	mov	r13, r23
     132:	d7 2e       	mov	r13, r23
     134:	d7 2e       	mov	r13, r23
     136:	d7 2e       	mov	r13, r23
     138:	69 2e       	mov	r6, r25
     13a:	d7 2e       	mov	r13, r23
     13c:	d7 2e       	mov	r13, r23
     13e:	d7 2e       	mov	r13, r23
     140:	d7 2e       	mov	r13, r23
     142:	d7 2e       	mov	r13, r23
     144:	d7 2e       	mov	r13, r23
     146:	d7 2e       	mov	r13, r23
     148:	d7 2e       	mov	r13, r23
     14a:	d7 2e       	mov	r13, r23
     14c:	d7 2e       	mov	r13, r23
     14e:	d7 2e       	mov	r13, r23
     150:	d7 2e       	mov	r13, r23
     152:	d7 2e       	mov	r13, r23
     154:	d7 2e       	mov	r13, r23
     156:	d7 2e       	mov	r13, r23
     158:	d3 2e       	mov	r13, r19
     15a:	d7 2e       	mov	r13, r23
     15c:	d7 2e       	mov	r13, r23
     15e:	d7 2e       	mov	r13, r23
     160:	d7 2e       	mov	r13, r23
     162:	d7 2e       	mov	r13, r23
     164:	d7 2e       	mov	r13, r23
     166:	d7 2e       	mov	r13, r23
     168:	9e 2e       	mov	r9, r30
     16a:	d7 2e       	mov	r13, r23
     16c:	d7 2e       	mov	r13, r23
     16e:	d7 2e       	mov	r13, r23
     170:	d7 2e       	mov	r13, r23
     172:	d7 2e       	mov	r13, r23
     174:	d7 2e       	mov	r13, r23
     176:	d7 2e       	mov	r13, r23
     178:	d7 2e       	mov	r13, r23
     17a:	d7 2e       	mov	r13, r23
     17c:	d7 2e       	mov	r13, r23
     17e:	d7 2e       	mov	r13, r23
     180:	d7 2e       	mov	r13, r23
     182:	d7 2e       	mov	r13, r23
     184:	d7 2e       	mov	r13, r23
     186:	d7 2e       	mov	r13, r23
     188:	92 2e       	mov	r9, r18
     18a:	d7 2e       	mov	r13, r23
     18c:	d7 2e       	mov	r13, r23
     18e:	d7 2e       	mov	r13, r23
     190:	d7 2e       	mov	r13, r23
     192:	d7 2e       	mov	r13, r23
     194:	d7 2e       	mov	r13, r23
     196:	d7 2e       	mov	r13, r23
     198:	b6 2e       	mov	r11, r22

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <prvCheckTasksWaitingTermination>
     19e:	80 91 5b 16 	lds	r24, 0x165B	; 0x80165b <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	2b d6       	rcall	.+3158   	; 0xdfe <vPortYield>
     1a8:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 ea       	ldi	r30, 0xA6	; 166
     1e4:	fa e6       	ldi	r31, 0x6A	; 106
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 33       	cpi	r26, 0x38	; 56
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a8 e3       	ldi	r26, 0x38	; 56
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a1 3a       	cpi	r26, 0xA1	; 161
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 34 21 	call	0x4268	; 0x4268 <main>
     20a:	0c 94 51 35 	jmp	0x6aa2	; 0x6aa2 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <application_task_create>:
	}
}

//Create Application Task
void application_task_create(UBaseType_t task_priority)
{
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
	xTaskCreate(
     216:	e1 2c       	mov	r14, r1
     218:	f1 2c       	mov	r15, r1
     21a:	08 2f       	mov	r16, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 ec       	ldi	r20, 0xC0	; 192
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6f e6       	ldi	r22, 0x6F	; 111
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	88 ec       	ldi	r24, 0xC8	; 200
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // Stack size
	,  NULL
	,  task_priority  // Priority of the task
	,  NULL );
	
}
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <application_run>:

//Method to run the application
void application_run(TickType_t* xLastWakeTime,TickType_t xFrequency)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	66 97       	sbiw	r28, 0x16	; 22
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	5c 01       	movw	r10, r24
     266:	2a 01       	movw	r4, r20
     268:	3b 01       	movw	r6, r22
	//Set Bits
	xEventGroupSetBits(_meassureEventGroup, CO2_BIT | TEMPERATURE_HUMIDITY_BIT);
     26a:	43 e0       	ldi	r20, 0x03	; 3
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_meassureEventGroup>
     276:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_meassureEventGroup+0x1>
     27a:	0c d3       	rcall	.+1560   	; 0x894 <xEventGroupSetBits>
	dataReadyEventBits=xEventGroupWaitBits(_dataReadyEventGroup,CO2_BIT | TEMPERATURE_HUMIDITY_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     27c:	cc 24       	eor	r12, r12
     27e:	ca 94       	dec	r12
     280:	dc 2c       	mov	r13, r12
     282:	76 01       	movw	r14, r12
     284:	01 e0       	ldi	r16, 0x01	; 1
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	43 e0       	ldi	r20, 0x03	; 3
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <_dataReadyEventGroup>
     294:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <_dataReadyEventGroup+0x1>
     298:	5d d2       	rcall	.+1210   	; 0x754 <xEventGroupWaitBits>
     29a:	60 93 56 18 	sts	0x1856, r22	; 0x801856 <dataReadyEventBits>
     29e:	70 93 57 18 	sts	0x1857, r23	; 0x801857 <dataReadyEventBits+0x1>
     2a2:	80 93 58 18 	sts	0x1858, r24	; 0x801858 <dataReadyEventBits+0x2>
     2a6:	90 93 59 18 	sts	0x1859, r25	; 0x801859 <dataReadyEventBits+0x3>
	
	// If both temperature/humidity and CO2 bits are ready
	if ((dataReadyEventBits & (CO2_BIT | TEMPERATURE_HUMIDITY_BIT) ) == (CO2_BIT | TEMPERATURE_HUMIDITY_BIT))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <application_run+0x88>
     2be:	53 c0       	rjmp	.+166    	; 0x366 <application_run+0x12e>
	{
		// Set the temperature data
		setTemperatureData(get_temperature_data());
     2c0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <get_temperature_data>
     2c4:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <setTemperatureData>
		printf("Temperature data ---> %d ",get_temperature_data()); // Just for troubleshooting purpose
     2c8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <get_temperature_data>
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	8b e7       	ldi	r24, 0x7B	; 123
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
		// Set the humidity data
		setHumidityData(get_humidity_data());
     2dc:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <get_humidity_data>
     2e0:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <setHumidityData>
		printf(" Humidity data ---> %d ",get_humidity_data()); // Just for troubleshooting purpose
     2e4:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <get_humidity_data>
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	85 e9       	ldi	r24, 0x95	; 149
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
		// Set the CO2 data
		setCO2Ppm(get_CO2_data());
     2f8:	81 d0       	rcall	.+258    	; 0x3fc <get_CO2_data>
     2fa:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <setCO2Ppm>
		printf("CO2 data ---> %i ",get_CO2_data()); // Just for troubleshooting purpose
     2fe:	7e d0       	rcall	.+252    	; 0x3fc <get_CO2_data>
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	8d ea       	ldi	r24, 0xAD	; 173
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
		
		//Set the payload
		payload=getLoRaPayload((uint8_t)2);
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <getLoRaPayload>
     31a:	86 e1       	ldi	r24, 0x16	; 22
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	aa e5       	ldi	r26, 0x5A	; 90
     322:	b8 e1       	ldi	r27, 0x18	; 24
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <application_run+0xec>
		vTaskDelay(pdMS_TO_TICKS(50UL)); // Delay
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
		//Send the payload so Uplink can recieve it
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
     338:	0f ef       	ldi	r16, 0xFF	; 255
     33a:	1f ef       	ldi	r17, 0xFF	; 255
     33c:	98 01       	movw	r18, r16
     33e:	46 e1       	ldi	r20, 0x16	; 22
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	6a e5       	ldi	r22, 0x5A	; 90
     344:	78 e1       	ldi	r23, 0x18	; 24
     346:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <xMessageBuffer>
     34a:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <xMessageBuffer+0x1>
     34e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xStreamBufferSend>
		xTaskDelayUntil(xLastWakeTime, xFrequency ); // Delay
     352:	b3 01       	movw	r22, r6
     354:	a2 01       	movw	r20, r4
     356:	c5 01       	movw	r24, r10
     358:	0e 94 47 13 	call	0x268e	; 0x268e <xTaskDelayUntil>
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	}
	
}
     366:	66 96       	adiw	r28, 0x16	; 22
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	7f 90       	pop	r7
     388:	6f 90       	pop	r6
     38a:	5f 90       	pop	r5
     38c:	4f 90       	pop	r4
     38e:	08 95       	ret

00000390 <Application_Task>:
extern EventGroupHandle_t _meassureEventGroup ;
extern EventGroupHandle_t _dataReadyEventGroup;


void Application_Task(void* pvParameters)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <Application_Task+0x6>
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	// Type of ticks
	TickType_t xLastWakeTime;
	// Upload message every 5 minutes (300000 ms)
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL);
	xLastWakeTime = xTaskGetTickCount();
     39c:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskGetTickCount>
     3a0:	69 83       	std	Y+1, r22	; 0x01
     3a2:	7a 83       	std	Y+2, r23	; 0x02
     3a4:	8b 83       	std	Y+3, r24	; 0x03
     3a6:	9c 83       	std	Y+4, r25	; 0x04
	
	//Infinite loop to run the application
	for (;;)
	{
		application_run(&xLastWakeTime,xFrequency);
     3a8:	48 ea       	ldi	r20, 0xA8	; 168
     3aa:	58 e4       	ldi	r21, 0x48	; 72
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	41 df       	rcall	.-382    	; 0x238 <application_run>
     3b6:	f8 cf       	rjmp	.-16     	; 0x3a8 <Application_Task+0x18>

000003b8 <myCo2CallBack>:
	if(NULL == new_co2_data)
	{
		return NULL;
	}
	// Set the default valuew
	new_co2_data->co2_Data=co2_data;
     3b8:	90 93 74 18 	sts	0x1874, r25	; 0x801874 <co2_data+0x1>
     3bc:	80 93 73 18 	sts	0x1873, r24	; 0x801873 <co2_data>
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <_dataReadyEventGroup>
     3cc:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <_dataReadyEventGroup+0x1>
     3d0:	61 c2       	rjmp	.+1218   	; 0x894 <xEventGroupSetBits>
     3d2:	08 95       	ret

000003d4 <co2_task_create>:

}

// Method that creates task
void co2_task_create(UBaseType_t task_priority)
{
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
	xTaskCreate(
     3da:	e1 2c       	mov	r14, r1
     3dc:	f1 2c       	mov	r15, r1
     3de:	08 2f       	mov	r16, r24
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 ec       	ldi	r20, 0xC0	; 192
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	6f eb       	ldi	r22, 0xBF	; 191
     3ea:	72 e0       	ldi	r23, 0x02	; 2
     3ec:	83 e3       	ldi	r24, 0x33	; 51
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
	,  "CO2 Task" // Name of task
	,  configMINIMAL_STACK_SIZE // Stack size
	,  NULL
	,  task_priority // Priority of task
	,  NULL );
}
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <get_CO2_data>:
};

// Method to get current CO2 Data
uint16_t get_CO2_data(){
	return (uint16_t)co2_data;
}
     3fc:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <co2_data>
     400:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <co2_data+0x1>
     404:	08 95       	ret

00000406 <CO2_taskRun>:


void CO2_taskRun() {
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
	EventBits_t event_measure;
	event_measure = xEventGroupWaitBits(
     410:	cc 24       	eor	r12, r12
     412:	ca 94       	dec	r12
     414:	dc 2c       	mov	r13, r12
     416:	76 01       	movw	r14, r12
     418:	01 e0       	ldi	r16, 0x01	; 1
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	42 e0       	ldi	r20, 0x02	; 2
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_meassureEventGroup>
     428:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_meassureEventGroup+0x1>
     42c:	93 d1       	rcall	.+806    	; 0x754 <xEventGroupWaitBits>
	_meassureEventGroup,
	CO2_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
	if ((event_measure & CO2_BIT)==CO2_BIT)
     42e:	61 ff       	sbrs	r22, 1
     430:	14 c0       	rjmp	.+40     	; 0x45a <CO2_taskRun+0x54>
	{
		// Delay
		vTaskDelay(pdMS_TO_TICKS(100UL));
     432:	66 e0       	ldi	r22, 0x06	; 6
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
		// Take Measuring
		rc = mh_z19_takeMeassuring();
     43e:	0e 94 6e 27 	call	0x4edc	; 0x4edc <mh_z19_takeMeassuring>
     442:	80 93 72 18 	sts	0x1872, r24	; 0x801872 <rc>
		
		// In cas ethe measuring failed
		if (rc != MHZ19_OK)
     446:	88 23       	and	r24, r24
     448:	41 f0       	breq	.+16     	; 0x45a <CO2_taskRun+0x54>
		{
			// Print for troubleshooting
			printf("CO2 task got wrong");
     44a:	88 ec       	ldi	r24, 0xC8	; 200
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
		}
	}		
}
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <CO2_Sensor_Task>:


void CO2_Sensor_Task(void *pvParameters){
	(void)pvParameters;
	// Injecting created callback method
	mh_z19_injectCallBack(myCo2CallBack);
     466:	8c ed       	ldi	r24, 0xDC	; 220
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <mh_z19_injectCallBack>
	
	// Infinite loop to run the task to measure CO2
	for(;;)
	{
		//Task method to measure CO2
		CO2_taskRun();
     46e:	cb df       	rcall	.-106    	; 0x406 <CO2_taskRun>
     470:	fe cf       	rjmp	.-4      	; 0x46e <CO2_Sensor_Task+0x8>

00000472 <Configuration_SetMinTemperature>:
uint16_t min_humidity_data;
uint16_t max_humidity_data;

// Method to set min temperature
void Configuration_SetMinTemperature(int16_t temperature_data)
{
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
	// Use the semaphore and mutex
	if( xSemaphoreTake(mutex, pdMS_TO_TICKS(200))==pdTRUE)
     47a:	4c e0       	ldi	r20, 0x0C	; 12
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     486:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     48a:	0e 94 91 0a 	call	0x1522	; 0x1522 <xQueueSemaphoreTake>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	79 f4       	brne	.+30     	; 0x4b0 <Configuration_SetMinTemperature+0x3e>
	{
		// Rewrite the min_temperature_data with temperature_data
		min_temperature_data=temperature_data;
     492:	d0 93 7e 18 	sts	0x187E, r29	; 0x80187e <min_temperature_data+0x1>
     496:	c0 93 7d 18 	sts	0x187D, r28	; 0x80187d <min_temperature_data>
		// Since its finished xSemaphoreGive()
		xSemaphoreGive(mutex);
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	a9 01       	movw	r20, r18
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     4aa:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     4ae:	bf d6       	rcall	.+3454   	; 0x122e <xQueueGenericSend>
	}
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <Configuration_SetMaxTemperature>:

// Method to set max temperature
void Configuration_SetMaxTemperature(int16_t temperature_data)
{
     4b8:	0f 93       	push	r16
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
	// Use the semaphore and mutex
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     4c0:	4f ef       	ldi	r20, 0xFF	; 255
     4c2:	5f ef       	ldi	r21, 0xFF	; 255
     4c4:	ba 01       	movw	r22, r20
     4c6:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     4ca:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     4ce:	0e 94 91 0a 	call	0x1522	; 0x1522 <xQueueSemaphoreTake>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	79 f4       	brne	.+30     	; 0x4f4 <Configuration_SetMaxTemperature+0x3c>
	{
		// Rewrite the max_temperature_data with temperature_data
		max_temperature_data=temperature_data;
     4d6:	d0 93 84 18 	sts	0x1884, r29	; 0x801884 <max_temperature_data+0x1>
     4da:	c0 93 83 18 	sts	0x1883, r28	; 0x801883 <max_temperature_data>
		// Since its finished xSemaphoreGive()
		xSemaphoreGive(mutex);
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     4ee:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     4f2:	9d d6       	rcall	.+3386   	; 0x122e <xQueueGenericSend>
	}
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <Configuration_SetMinHumidity>:

// Method to set min humidity
void Configuration_SetMinHumidity(uint16_t humidity_data)
{
     4fc:	0f 93       	push	r16
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
	// Use the semaphore and mutex
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     504:	4f ef       	ldi	r20, 0xFF	; 255
     506:	5f ef       	ldi	r21, 0xFF	; 255
     508:	ba 01       	movw	r22, r20
     50a:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     50e:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     512:	0e 94 91 0a 	call	0x1522	; 0x1522 <xQueueSemaphoreTake>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	79 f4       	brne	.+30     	; 0x538 <Configuration_SetMinHumidity+0x3c>
	{
	// Rewrite the min_humidity_data with humidity_data
	min_humidity_data=humidity_data;
     51a:	d0 93 80 18 	sts	0x1880, r29	; 0x801880 <min_humidity_data+0x1>
     51e:	c0 93 7f 18 	sts	0x187F, r28	; 0x80187f <min_humidity_data>
	// Since its finished xSemaphoreGive()
	xSemaphoreGive(mutex);	
     522:	00 e0       	ldi	r16, 0x00	; 0
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     532:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     536:	7b d6       	rcall	.+3318   	; 0x122e <xQueueGenericSend>
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <Configuration_SetMaxHumidity>:

// Method to set max humidity
void Configuration_SetMaxHumidity(uint16_t humidity_data)
{
     540:	0f 93       	push	r16
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
	// Use the semaphore and mutex
	if( xSemaphoreTake(mutex, portMAX_DELAY)==pdTRUE)
     548:	4f ef       	ldi	r20, 0xFF	; 255
     54a:	5f ef       	ldi	r21, 0xFF	; 255
     54c:	ba 01       	movw	r22, r20
     54e:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     552:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     556:	e5 d7       	rcall	.+4042   	; 0x1522 <xQueueSemaphoreTake>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	79 f4       	brne	.+30     	; 0x57a <Configuration_SetMaxHumidity+0x3a>
	{
	// Rewrite the min_humidity_data with humidity_data
	max_humidity_data=humidity_data;
     55c:	d0 93 82 18 	sts	0x1882, r29	; 0x801882 <max_humidity_data+0x1>
     560:	c0 93 81 18 	sts	0x1881, r28	; 0x801881 <max_humidity_data>
	xSemaphoreGive(mutex);
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <mutex>
     574:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <mutex+0x1>
     578:	5a d6       	rcall	.+3252   	; 0x122e <xQueueGenericSend>
	}
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <Configuration_GetMaxTemperature>:

// Method to get max temperature
int16_t Configuration_GetMaxTemperature()
{
	return max_temperature_data;	
}
     582:	80 91 83 18 	lds	r24, 0x1883	; 0x801883 <max_temperature_data>
     586:	90 91 84 18 	lds	r25, 0x1884	; 0x801884 <max_temperature_data+0x1>
     58a:	08 95       	ret

0000058c <Configuration_GetMinTemperature>:

// Method to get min temperature
int16_t Configuration_GetMinTemperature()
{
	return min_temperature_data;
}
     58c:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <min_temperature_data>
     590:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <min_temperature_data+0x1>
     594:	08 95       	ret

00000596 <Configuration_GetMaxHumidity>:

// Method to get max humidity
uint16_t Configuration_GetMaxHumidity()
{
	return max_humidity_data;
}
     596:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <max_humidity_data>
     59a:	90 91 82 18 	lds	r25, 0x1882	; 0x801882 <max_humidity_data+0x1>
     59e:	08 95       	ret

000005a0 <Configuration_GetMinHumidity>:

// Method to get min humidity
uint16_t Configuration_GetMinHumidity()
{	
	return min_humidity_data;
}
     5a0:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <min_humidity_data>
     5a4:	90 91 80 18 	lds	r25, 0x1880	; 0x801880 <min_humidity_data+0x1>
     5a8:	08 95       	ret

000005aa <lora_DownLinkHandler_create>:
	}
}

// Create the task method
void lora_DownLinkHandler_create(UBaseType_t priority)
{
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
	xTaskCreate(
     5b0:	20 91 52 18 	lds	r18, 0x1852	; 0x801852 <downlinkMessageBuffer>
     5b4:	30 91 53 18 	lds	r19, 0x1853	; 0x801853 <downlinkMessageBuffer+0x1>
     5b8:	e1 2c       	mov	r14, r1
     5ba:	f1 2c       	mov	r15, r1
     5bc:	08 2f       	mov	r16, r24
     5be:	48 e8       	ldi	r20, 0x88	; 136
     5c0:	51 e0       	ldi	r21, 0x01	; 1
     5c2:	6b ed       	ldi	r22, 0xDB	; 219
     5c4:	72 e0       	ldi	r23, 0x02	; 2
     5c6:	84 e7       	ldi	r24, 0x74	; 116
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
	"LoraWanDownlink", // Name of the task
	configMINIMAL_STACK_SIZE+200, // Stack size
	(void*)downlinkMessageBuffer, // Message buffer
	priority, // Task priority
	NULL );
}
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <lora_DownLinkHandler_task>:

// Task method to recieve data
void lora_DownLinkHandler_task()
{     
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	// Size of recieved bytes
	size_t xReceivedBytes;
	
	// Set xReceivedBytes that are recieved from message buffer
	xReceivedBytes=xMessageBufferReceive(
     5e6:	0f ef       	ldi	r16, 0xFF	; 255
     5e8:	1f ef       	ldi	r17, 0xFF	; 255
     5ea:	98 01       	movw	r18, r16
     5ec:	46 e1       	ldi	r20, 0x16	; 22
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	68 e3       	ldi	r22, 0x38	; 56
     5f2:	78 e0       	ldi	r23, 0x08	; 8
     5f4:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <downlinkMessageBuffer>
     5f8:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <downlinkMessageBuffer+0x1>
     5fc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <xStreamBufferReceive>
	(void*)&_downlink_payload, // Payload
	sizeof(lora_driver_payload_t), // Size of payload
	portMAX_DELAY);
	
	// If recieved bytes are more than zero (meaning we recieved actual data)
	if (xReceivedBytes>0)
     600:	89 2b       	or	r24, r25
     602:	09 f4       	brne	.+2      	; 0x606 <lora_DownLinkHandler_task+0x30>
     604:	68 c0       	rjmp	.+208    	; 0x6d6 <lora_DownLinkHandler_task+0x100>
	{	
		//Print at which port how many bytes we have revied. For troubleshooting purpose
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len);
     606:	c8 e3       	ldi	r28, 0x38	; 56
     608:	d8 e0       	ldi	r29, 0x08	; 8
     60a:	99 81       	ldd	r25, Y+1	; 0x01
     60c:	88 81       	ld	r24, Y
     60e:	1f 92       	push	r1
     610:	9f 93       	push	r25
     612:	1f 92       	push	r1
     614:	8f 93       	push	r24
     616:	8b ee       	ldi	r24, 0xEB	; 235
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
		
			// Continue only in case we recieved every needed data
			if (8==_downlink_payload.len )
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	88 30       	cpi	r24, 0x08	; 8
     632:	09 f0       	breq	.+2      	; 0x636 <lora_DownLinkHandler_task+0x60>
     634:	4a c0       	rjmp	.+148    	; 0x6ca <lora_DownLinkHandler_task+0xf4>
			{
				// Transform recieved bytes into the unsigned integer of 2 bytes representing Maximum Temperature value
				uint16_t maxTemperature = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     636:	6e 01       	movw	r12, r28
     638:	0a 81       	ldd	r16, Y+2	; 0x02
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	10 2f       	mov	r17, r16
     63e:	00 27       	eor	r16, r16
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	08 0f       	add	r16, r24
     644:	11 1d       	adc	r17, r1
				printf("MAXTemperature %d", maxTemperature);
     646:	1f 93       	push	r17
     648:	0f 93       	push	r16
     64a:	8d e1       	ldi	r24, 0x1D	; 29
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
				
				// Transform recieved bytes into the unsigned integer of 2 bytes representing Minimum Temperature value
				uint16_t minTemperature = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     656:	ec 80       	ldd	r14, Y+4	; 0x04
     658:	f1 2c       	mov	r15, r1
     65a:	fe 2c       	mov	r15, r14
     65c:	ee 24       	eor	r14, r14
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	e8 0e       	add	r14, r24
     662:	f1 1c       	adc	r15, r1
				printf("MINTemperature %d", minTemperature);
     664:	ff 92       	push	r15
     666:	ef 92       	push	r14
     668:	8f e2       	ldi	r24, 0x2F	; 47
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
				
				// Transform recieved bytes into the unsigned integer of 2 bytes representing Maximum Humidity value
				uint16_t maxHumidity = (_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
     674:	fe 01       	movw	r30, r28
     676:	ce 81       	ldd	r28, Y+6	; 0x06
     678:	d0 e0       	ldi	r29, 0x00	; 0
     67a:	dc 2f       	mov	r29, r28
     67c:	cc 27       	eor	r28, r28
     67e:	87 81       	ldd	r24, Z+7	; 0x07
     680:	c8 0f       	add	r28, r24
     682:	d1 1d       	adc	r29, r1
				printf("MAXHumidity %d", maxHumidity);
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	81 e4       	ldi	r24, 0x41	; 65
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
				
				// Transform recieved bytes into the unsigned integer of 2 bytes representing Minimum Humidity value
				uint16_t minHumidity = (_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
     694:	f6 01       	movw	r30, r12
     696:	80 85       	ldd	r24, Z+8	; 0x08
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	98 2f       	mov	r25, r24
     69c:	88 27       	eor	r24, r24
     69e:	21 85       	ldd	r18, Z+9	; 0x09
     6a0:	6c 01       	movw	r12, r24
     6a2:	c2 0e       	add	r12, r18
     6a4:	d1 1c       	adc	r13, r1
				
				// Set the recieved data in the Configuration
				Configuration_SetMinTemperature(minTemperature);
     6a6:	c7 01       	movw	r24, r14
     6a8:	e4 de       	rcall	.-568    	; 0x472 <Configuration_SetMinTemperature>
				Configuration_SetMinHumidity(minHumidity);
     6aa:	c6 01       	movw	r24, r12
     6ac:	27 df       	rcall	.-434    	; 0x4fc <Configuration_SetMinHumidity>
				Configuration_SetMaxTemperature(maxTemperature);
     6ae:	c8 01       	movw	r24, r16
     6b0:	03 df       	rcall	.-506    	; 0x4b8 <Configuration_SetMaxTemperature>
				Configuration_SetMaxHumidity(maxHumidity);
     6b2:	8c 2f       	mov	r24, r28
     6b4:	9d 2f       	mov	r25, r29
     6b6:	44 df       	rcall	.-376    	; 0x540 <Configuration_SetMaxHumidity>
     6b8:	8d b7       	in	r24, 0x3d	; 61
     6ba:	9e b7       	in	r25, 0x3e	; 62
     6bc:	0c 96       	adiw	r24, 0x0c	; 12
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	9e bf       	out	0x3e, r25	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	8d bf       	out	0x3d, r24	; 61
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <lora_DownLinkHandler_task+0x100>
     6ca:	64 e5       	ldi	r22, 0x54	; 84
			}
			else
			{
				// Retry in 2.5 minutes
				vTaskDelay(pdMS_TO_TICKS(150000)); 			}
     6cc:	74 e2       	ldi	r23, 0x24	; 36
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
     6d6:	df 91       	pop	r29
	}
}
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	08 95       	ret

000006e8 <lora_DownLinkHandler_startTask>:
     6e8:	76 df       	rcall	.-276    	; 0x5d6 <lora_DownLinkHandler_task>
void lora_DownLinkHandler_startTask(){
	// Infinite loop that call the task method to recieve data
	for(;;)
	{
		// Task method to recieve data
		lora_DownLinkHandler_task();
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <lora_DownLinkHandler_startTask>

000006ec <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     6ec:	0f 93       	push	r16
     6ee:	01 11       	cpse	r16, r1
     6f0:	0c c0       	rjmp	.+24     	; 0x70a <prvTestWaitCondition+0x1e>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	82 23       	and	r24, r18
     6f8:	93 23       	and	r25, r19
     6fa:	a4 23       	and	r26, r20
     6fc:	b5 23       	and	r27, r21
     6fe:	89 2b       	or	r24, r25
     700:	8a 2b       	or	r24, r26
     702:	8b 2b       	or	r24, r27
     704:	79 f4       	brne	.+30     	; 0x724 <prvTestWaitCondition+0x38>
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	10 c0       	rjmp	.+32     	; 0x72a <prvTestWaitCondition+0x3e>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	82 23       	and	r24, r18
     710:	93 23       	and	r25, r19
     712:	a4 23       	and	r26, r20
     714:	b5 23       	and	r27, r21
     716:	28 17       	cp	r18, r24
     718:	39 07       	cpc	r19, r25
     71a:	4a 07       	cpc	r20, r26
     71c:	5b 07       	cpc	r21, r27
     71e:	21 f0       	breq	.+8      	; 0x728 <prvTestWaitCondition+0x3c>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	03 c0       	rjmp	.+6      	; 0x72a <prvTestWaitCondition+0x3e>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	01 c0       	rjmp	.+2      	; 0x72a <prvTestWaitCondition+0x3e>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <xEventGroupCreate>:
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8f e0       	ldi	r24, 0x0F	; 15
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	af d1       	rcall	.+862    	; 0xa96 <pvPortMalloc>
     738:	ec 01       	movw	r28, r24
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	39 f0       	breq	.+14     	; 0x74c <xEventGroupCreate+0x1e>
     73e:	fc 01       	movw	r30, r24
     740:	11 92       	st	Z+, r1
     742:	11 92       	st	Z+, r1
     744:	11 92       	st	Z+, r1
     746:	11 92       	st	Z+, r1
     748:	cf 01       	movw	r24, r30
     74a:	8b d2       	rcall	.+1302   	; 0xc62 <vListInitialise>
     74c:	ce 01       	movw	r24, r28
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <xEventGroupWaitBits>:
     754:	2f 92       	push	r2
     756:	3f 92       	push	r3
     758:	4f 92       	push	r4
     75a:	5f 92       	push	r5
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
     77a:	4a 01       	movw	r8, r20
     77c:	5b 01       	movw	r10, r22
     77e:	62 2e       	mov	r6, r18
     780:	70 2e       	mov	r7, r16
     782:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskSuspendAll>
     786:	28 80       	ld	r2, Y
     788:	39 80       	ldd	r3, Y+1	; 0x01
     78a:	4a 80       	ldd	r4, Y+2	; 0x02
     78c:	5b 80       	ldd	r5, Y+3	; 0x03
     78e:	a5 01       	movw	r20, r10
     790:	94 01       	movw	r18, r8
     792:	c2 01       	movw	r24, r4
     794:	b1 01       	movw	r22, r2
     796:	aa df       	rcall	.-172    	; 0x6ec <prvTestWaitCondition>
     798:	88 23       	and	r24, r24
     79a:	a1 f0       	breq	.+40     	; 0x7c4 <xEventGroupWaitBits+0x70>
     79c:	66 20       	and	r6, r6
     79e:	89 f1       	breq	.+98     	; 0x802 <xEventGroupWaitBits+0xae>
     7a0:	d5 01       	movw	r26, r10
     7a2:	c4 01       	movw	r24, r8
     7a4:	80 95       	com	r24
     7a6:	90 95       	com	r25
     7a8:	a0 95       	com	r26
     7aa:	b0 95       	com	r27
     7ac:	82 21       	and	r24, r2
     7ae:	93 21       	and	r25, r3
     7b0:	a4 21       	and	r26, r4
     7b2:	b5 21       	and	r27, r5
     7b4:	88 83       	st	Y, r24
     7b6:	99 83       	std	Y+1, r25	; 0x01
     7b8:	aa 83       	std	Y+2, r26	; 0x02
     7ba:	bb 83       	std	Y+3, r27	; 0x03
     7bc:	c1 2c       	mov	r12, r1
     7be:	d1 2c       	mov	r13, r1
     7c0:	76 01       	movw	r14, r12
     7c2:	22 c0       	rjmp	.+68     	; 0x808 <xEventGroupWaitBits+0xb4>
     7c4:	c1 14       	cp	r12, r1
     7c6:	d1 04       	cpc	r13, r1
     7c8:	e1 04       	cpc	r14, r1
     7ca:	f1 04       	cpc	r15, r1
     7cc:	e9 f0       	breq	.+58     	; 0x808 <xEventGroupWaitBits+0xb4>
     7ce:	61 10       	cpse	r6, r1
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <xEventGroupWaitBits+0x86>
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	ba 01       	movw	r22, r20
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <xEventGroupWaitBits+0x8e>
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	71 10       	cpse	r7, r1
     7e4:	74 60       	ori	r23, 0x04	; 4
     7e6:	48 29       	or	r20, r8
     7e8:	59 29       	or	r21, r9
     7ea:	6a 29       	or	r22, r10
     7ec:	7b 29       	or	r23, r11
     7ee:	97 01       	movw	r18, r14
     7f0:	86 01       	movw	r16, r12
     7f2:	ce 01       	movw	r24, r28
     7f4:	04 96       	adiw	r24, 0x04	; 4
     7f6:	0e 94 43 14 	call	0x2886	; 0x2886 <vTaskPlaceOnUnorderedEventList>
     7fa:	21 2c       	mov	r2, r1
     7fc:	31 2c       	mov	r3, r1
     7fe:	21 01       	movw	r4, r2
     800:	03 c0       	rjmp	.+6      	; 0x808 <xEventGroupWaitBits+0xb4>
     802:	c1 2c       	mov	r12, r1
     804:	d1 2c       	mov	r13, r1
     806:	76 01       	movw	r14, r12
     808:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
     80c:	cd 28       	or	r12, r13
     80e:	ce 28       	or	r12, r14
     810:	cf 28       	or	r12, r15
     812:	59 f1       	breq	.+86     	; 0x86a <xEventGroupWaitBits+0x116>
     814:	81 11       	cpse	r24, r1
     816:	01 c0       	rjmp	.+2      	; 0x81a <xEventGroupWaitBits+0xc6>
     818:	f2 d2       	rcall	.+1508   	; 0xdfe <vPortYield>
     81a:	0e 94 05 18 	call	0x300a	; 0x300a <uxTaskResetEventItemValue>
     81e:	6b 01       	movw	r12, r22
     820:	7c 01       	movw	r14, r24
     822:	91 fd       	sbrc	r25, 1
     824:	1f c0       	rjmp	.+62     	; 0x864 <xEventGroupWaitBits+0x110>
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	0f 92       	push	r0
     82c:	c8 80       	ld	r12, Y
     82e:	d9 80       	ldd	r13, Y+1	; 0x01
     830:	ea 80       	ldd	r14, Y+2	; 0x02
     832:	fb 80       	ldd	r15, Y+3	; 0x03
     834:	07 2d       	mov	r16, r7
     836:	a5 01       	movw	r20, r10
     838:	94 01       	movw	r18, r8
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	56 df       	rcall	.-340    	; 0x6ec <prvTestWaitCondition>
     840:	88 23       	and	r24, r24
     842:	71 f0       	breq	.+28     	; 0x860 <xEventGroupWaitBits+0x10c>
     844:	66 20       	and	r6, r6
     846:	61 f0       	breq	.+24     	; 0x860 <xEventGroupWaitBits+0x10c>
     848:	80 94       	com	r8
     84a:	90 94       	com	r9
     84c:	a0 94       	com	r10
     84e:	b0 94       	com	r11
     850:	8c 20       	and	r8, r12
     852:	9d 20       	and	r9, r13
     854:	ae 20       	and	r10, r14
     856:	bf 20       	and	r11, r15
     858:	88 82       	st	Y, r8
     85a:	99 82       	std	Y+1, r9	; 0x01
     85c:	aa 82       	std	Y+2, r10	; 0x02
     85e:	bb 82       	std	Y+3, r11	; 0x03
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	16 01       	movw	r2, r12
     866:	27 01       	movw	r4, r14
     868:	55 24       	eor	r5, r5
     86a:	c2 01       	movw	r24, r4
     86c:	b1 01       	movw	r22, r2
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	bf 90       	pop	r11
     880:	af 90       	pop	r10
     882:	9f 90       	pop	r9
     884:	8f 90       	pop	r8
     886:	7f 90       	pop	r7
     888:	6f 90       	pop	r6
     88a:	5f 90       	pop	r5
     88c:	4f 90       	pop	r4
     88e:	3f 90       	pop	r3
     890:	2f 90       	pop	r2
     892:	08 95       	ret

00000894 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     894:	4f 92       	push	r4
     896:	5f 92       	push	r5
     898:	6f 92       	push	r6
     89a:	7f 92       	push	r7
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	6a 01       	movw	r12, r20
     8b4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8b6:	8c 01       	movw	r16, r24
     8b8:	09 5f       	subi	r16, 0xF9	; 249
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     8bc:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     8c0:	eb 85       	ldd	r30, Y+11	; 0x0b
     8c2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     8c4:	88 81       	ld	r24, Y
     8c6:	99 81       	ldd	r25, Y+1	; 0x01
     8c8:	aa 81       	ldd	r26, Y+2	; 0x02
     8ca:	bb 81       	ldd	r27, Y+3	; 0x03
     8cc:	c8 2a       	or	r12, r24
     8ce:	d9 2a       	or	r13, r25
     8d0:	ea 2a       	or	r14, r26
     8d2:	fb 2a       	or	r15, r27
     8d4:	c8 82       	st	Y, r12
     8d6:	d9 82       	std	Y+1, r13	; 0x01
     8d8:	ea 82       	std	Y+2, r14	; 0x02
     8da:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     8dc:	c1 2c       	mov	r12, r1
     8de:	d1 2c       	mov	r13, r1
     8e0:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8e2:	3d c0       	rjmp	.+122    	; 0x95e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     8e4:	a4 80       	ldd	r10, Z+4	; 0x04
     8e6:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	a2 81       	ldd	r26, Z+2	; 0x02
     8ee:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     8f0:	ac 01       	movw	r20, r24
     8f2:	bd 01       	movw	r22, r26
     8f4:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     8f6:	b2 fd       	sbrc	r27, 2
     8f8:	0e c0       	rjmp	.+28     	; 0x916 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     8fa:	48 80       	ld	r4, Y
     8fc:	59 80       	ldd	r5, Y+1	; 0x01
     8fe:	6a 80       	ldd	r6, Y+2	; 0x02
     900:	7b 80       	ldd	r7, Y+3	; 0x03
     902:	44 22       	and	r4, r20
     904:	55 22       	and	r5, r21
     906:	66 22       	and	r6, r22
     908:	77 22       	and	r7, r23
     90a:	45 28       	or	r4, r5
     90c:	46 28       	or	r4, r6
     90e:	47 28       	or	r4, r7
     910:	89 f4       	brne	.+34     	; 0x934 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	12 c0       	rjmp	.+36     	; 0x93a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     916:	48 80       	ld	r4, Y
     918:	59 80       	ldd	r5, Y+1	; 0x01
     91a:	6a 80       	ldd	r6, Y+2	; 0x02
     91c:	7b 80       	ldd	r7, Y+3	; 0x03
     91e:	44 22       	and	r4, r20
     920:	55 22       	and	r5, r21
     922:	66 22       	and	r6, r22
     924:	77 22       	and	r7, r23
     926:	44 15       	cp	r20, r4
     928:	55 05       	cpc	r21, r5
     92a:	66 05       	cpc	r22, r6
     92c:	77 05       	cpc	r23, r7
     92e:	21 f0       	breq	.+8      	; 0x938 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	03 c0       	rjmp	.+6      	; 0x93a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	01 c0       	rjmp	.+2      	; 0x93a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     938:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     93a:	22 23       	and	r18, r18
     93c:	71 f0       	breq	.+28     	; 0x95a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     93e:	b0 ff       	sbrs	r27, 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     942:	c4 2a       	or	r12, r20
     944:	d5 2a       	or	r13, r21
     946:	e6 2a       	or	r14, r22
     948:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     94a:	48 81       	ld	r20, Y
     94c:	59 81       	ldd	r21, Y+1	; 0x01
     94e:	6a 81       	ldd	r22, Y+2	; 0x02
     950:	7b 81       	ldd	r23, Y+3	; 0x03
     952:	72 60       	ori	r23, 0x02	; 2
     954:	cf 01       	movw	r24, r30
     956:	0e 94 7e 15 	call	0x2afc	; 0x2afc <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     95a:	ea 2d       	mov	r30, r10
     95c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     95e:	e0 17       	cp	r30, r16
     960:	f1 07       	cpc	r31, r17
     962:	09 f0       	breq	.+2      	; 0x966 <xEventGroupSetBits+0xd2>
     964:	bf cf       	rjmp	.-130    	; 0x8e4 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     966:	c0 94       	com	r12
     968:	d0 94       	com	r13
     96a:	e0 94       	com	r14
     96c:	f0 94       	com	r15
     96e:	88 81       	ld	r24, Y
     970:	99 81       	ldd	r25, Y+1	; 0x01
     972:	aa 81       	ldd	r26, Y+2	; 0x02
     974:	bb 81       	ldd	r27, Y+3	; 0x03
     976:	c8 22       	and	r12, r24
     978:	d9 22       	and	r13, r25
     97a:	ea 22       	and	r14, r26
     97c:	fb 22       	and	r15, r27
     97e:	c8 82       	st	Y, r12
     980:	d9 82       	std	Y+1, r13	; 0x01
     982:	ea 82       	std	Y+2, r14	; 0x02
     984:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     986:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     98a:	68 81       	ld	r22, Y
     98c:	79 81       	ldd	r23, Y+1	; 0x01
     98e:	8a 81       	ldd	r24, Y+2	; 0x02
     990:	9b 81       	ldd	r25, Y+3	; 0x03
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	7f 90       	pop	r7
     9a8:	6f 90       	pop	r6
     9aa:	5f 90       	pop	r5
     9ac:	4f 90       	pop	r4
     9ae:	08 95       	ret

000009b0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     9b0:	ea e5       	ldi	r30, 0x5A	; 90
     9b2:	f8 e0       	ldi	r31, 0x08	; 8
     9b4:	ae e5       	ldi	r26, 0x5E	; 94
     9b6:	b8 e0       	ldi	r27, 0x08	; 8
     9b8:	b1 83       	std	Z+1, r27	; 0x01
     9ba:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     9bc:	13 82       	std	Z+3, r1	; 0x03
     9be:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     9c0:	e6 e0       	ldi	r30, 0x06	; 6
     9c2:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     9c4:	f0 93 59 08 	sts	0x0859, r31	; 0x800859 <pxEnd+0x1>
     9c8:	e0 93 58 08 	sts	0x0858, r30	; 0x800858 <pxEnd>
    pxEnd->xBlockSize = 0;
     9cc:	13 82       	std	Z+3, r1	; 0x03
     9ce:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     9d0:	11 82       	std	Z+1, r1	; 0x01
     9d2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     9d4:	88 ea       	ldi	r24, 0xA8	; 168
     9d6:	9d e0       	ldi	r25, 0x0D	; 13
     9d8:	13 96       	adiw	r26, 0x03	; 3
     9da:	9c 93       	st	X, r25
     9dc:	8e 93       	st	-X, r24
     9de:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     9e0:	ed 93       	st	X+, r30
     9e2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9e4:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xMinimumEverFreeBytesRemaining+0x1>
     9e8:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9ec:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <xFreeBytesRemaining+0x1>
     9f0:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e8       	ldi	r25, 0x80	; 128
     9f8:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <xBlockAllocatedBit+0x1>
     9fc:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <xBlockAllocatedBit>
     a00:	08 95       	ret

00000a02 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     a08:	aa e5       	ldi	r26, 0x5A	; 90
     a0a:	b8 e0       	ldi	r27, 0x08	; 8
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <prvInsertBlockIntoFreeList+0xe>
     a0e:	df 01       	movw	r26, r30
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	ec 17       	cp	r30, r28
     a18:	fd 07       	cpc	r31, r29
     a1a:	c8 f3       	brcs	.-14     	; 0xa0e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     a1c:	12 96       	adiw	r26, 0x02	; 2
     a1e:	8d 91       	ld	r24, X+
     a20:	9c 91       	ld	r25, X
     a22:	13 97       	sbiw	r26, 0x03	; 3
     a24:	9d 01       	movw	r18, r26
     a26:	28 0f       	add	r18, r24
     a28:	39 1f       	adc	r19, r25
     a2a:	c2 17       	cp	r28, r18
     a2c:	d3 07       	cpc	r29, r19
     a2e:	49 f4       	brne	.+18     	; 0xa42 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     a30:	2a 81       	ldd	r18, Y+2	; 0x02
     a32:	3b 81       	ldd	r19, Y+3	; 0x03
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	13 96       	adiw	r26, 0x03	; 3
     a3a:	9c 93       	st	X, r25
     a3c:	8e 93       	st	-X, r24
     a3e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     a40:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	9b 81       	ldd	r25, Y+3	; 0x03
     a46:	9e 01       	movw	r18, r28
     a48:	28 0f       	add	r18, r24
     a4a:	39 1f       	adc	r19, r25
     a4c:	e2 17       	cp	r30, r18
     a4e:	f3 07       	cpc	r31, r19
     a50:	c1 f4       	brne	.+48     	; 0xa82 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a52:	20 91 58 08 	lds	r18, 0x0858	; 0x800858 <pxEnd>
     a56:	30 91 59 08 	lds	r19, 0x0859	; 0x800859 <pxEnd+0x1>
     a5a:	e2 17       	cp	r30, r18
     a5c:	f3 07       	cpc	r31, r19
     a5e:	71 f0       	breq	.+28     	; 0xa7c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a60:	22 81       	ldd	r18, Z+2	; 0x02
     a62:	33 81       	ldd	r19, Z+3	; 0x03
     a64:	82 0f       	add	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	9b 83       	std	Y+3, r25	; 0x03
     a6a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	11 97       	sbiw	r26, 0x01	; 1
     a72:	80 81       	ld	r24, Z
     a74:	91 81       	ldd	r25, Z+1	; 0x01
     a76:	99 83       	std	Y+1, r25	; 0x01
     a78:	88 83       	st	Y, r24
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a7c:	39 83       	std	Y+1, r19	; 0x01
     a7e:	28 83       	st	Y, r18
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a82:	f9 83       	std	Y+1, r31	; 0x01
     a84:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a86:	ca 17       	cp	r28, r26
     a88:	db 07       	cpc	r29, r27
     a8a:	11 f0       	breq	.+4      	; 0xa90 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a8c:	cd 93       	st	X+, r28
     a8e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     aa4:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     aa8:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <pxEnd>
     aac:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <pxEnd+0x1>
     ab0:	89 2b       	or	r24, r25
     ab2:	09 f4       	brne	.+2      	; 0xab6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     ab4:	7d df       	rcall	.-262    	; 0x9b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ab6:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xBlockAllocatedBit>
     aba:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xBlockAllocatedBit+0x1>
     abe:	80 23       	and	r24, r16
     ac0:	91 23       	and	r25, r17
     ac2:	89 2b       	or	r24, r25
     ac4:	09 f0       	breq	.+2      	; 0xac8 <pvPortMalloc+0x32>
     ac6:	76 c0       	rjmp	.+236    	; 0xbb4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     ac8:	01 15       	cp	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	49 f0       	breq	.+18     	; 0xae0 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     ace:	c8 01       	movw	r24, r16
     ad0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     ad2:	08 17       	cp	r16, r24
     ad4:	19 07       	cpc	r17, r25
     ad6:	18 f0       	brcs	.+6      	; 0xade <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     ad8:	00 e0       	ldi	r16, 0x00	; 0
     ada:	10 e0       	ldi	r17, 0x00	; 0
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     ade:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     ae0:	01 15       	cp	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	09 f4       	brne	.+2      	; 0xae8 <pvPortMalloc+0x52>
     ae6:	69 c0       	rjmp	.+210    	; 0xbba <pvPortMalloc+0x124>
     ae8:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <xFreeBytesRemaining>
     aec:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <xFreeBytesRemaining+0x1>
     af0:	80 17       	cp	r24, r16
     af2:	91 07       	cpc	r25, r17
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <pvPortMalloc+0x62>
     af6:	64 c0       	rjmp	.+200    	; 0xbc0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     af8:	c0 91 5a 08 	lds	r28, 0x085A	; 0x80085a <xStart>
     afc:	d0 91 5b 08 	lds	r29, 0x085B	; 0x80085b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     b00:	ea e5       	ldi	r30, 0x5A	; 90
     b02:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     b06:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     b08:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	9b 81       	ldd	r25, Y+3	; 0x03
     b0e:	80 17       	cp	r24, r16
     b10:	91 07       	cpc	r25, r17
     b12:	20 f4       	brcc	.+8      	; 0xb1c <pvPortMalloc+0x86>
     b14:	88 81       	ld	r24, Y
     b16:	99 81       	ldd	r25, Y+1	; 0x01
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	a9 f7       	brne	.-22     	; 0xb06 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     b1c:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <pxEnd>
     b20:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <pxEnd+0x1>
     b24:	c8 17       	cp	r28, r24
     b26:	d9 07       	cpc	r29, r25
     b28:	09 f4       	brne	.+2      	; 0xb2c <pvPortMalloc+0x96>
     b2a:	4d c0       	rjmp	.+154    	; 0xbc6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     b2c:	e0 80       	ld	r14, Z
     b2e:	f1 80       	ldd	r15, Z+1	; 0x01
     b30:	84 e0       	ldi	r24, 0x04	; 4
     b32:	e8 0e       	add	r14, r24
     b34:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b36:	88 81       	ld	r24, Y
     b38:	99 81       	ldd	r25, Y+1	; 0x01
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b3e:	2a 81       	ldd	r18, Y+2	; 0x02
     b40:	3b 81       	ldd	r19, Y+3	; 0x03
     b42:	20 1b       	sub	r18, r16
     b44:	31 0b       	sbc	r19, r17
     b46:	29 30       	cpi	r18, 0x09	; 9
     b48:	31 05       	cpc	r19, r1
     b4a:	48 f0       	brcs	.+18     	; 0xb5e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b4c:	ce 01       	movw	r24, r28
     b4e:	80 0f       	add	r24, r16
     b50:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b52:	fc 01       	movw	r30, r24
     b54:	33 83       	std	Z+3, r19	; 0x03
     b56:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b58:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b5a:	0a 83       	std	Y+2, r16	; 0x02
     b5c:	52 df       	rcall	.-348    	; 0xa02 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b5e:	2a 81       	ldd	r18, Y+2	; 0x02
     b60:	3b 81       	ldd	r19, Y+3	; 0x03
     b62:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <xFreeBytesRemaining>
     b66:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <xFreeBytesRemaining+0x1>
     b6a:	82 1b       	sub	r24, r18
     b6c:	93 0b       	sbc	r25, r19
     b6e:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <xFreeBytesRemaining+0x1>
     b72:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b76:	40 91 54 08 	lds	r20, 0x0854	; 0x800854 <xMinimumEverFreeBytesRemaining>
     b7a:	50 91 55 08 	lds	r21, 0x0855	; 0x800855 <xMinimumEverFreeBytesRemaining+0x1>
     b7e:	84 17       	cp	r24, r20
     b80:	95 07       	cpc	r25, r21
     b82:	20 f4       	brcc	.+8      	; 0xb8c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b84:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xMinimumEverFreeBytesRemaining+0x1>
     b88:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b8c:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xBlockAllocatedBit>
     b90:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xBlockAllocatedBit+0x1>
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	3b 83       	std	Y+3, r19	; 0x03
     b9a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     ba0:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <xNumberOfSuccessfulAllocations>
     ba4:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <xNumberOfSuccessfulAllocations+0x1>
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <xNumberOfSuccessfulAllocations+0x1>
     bae:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <xNumberOfSuccessfulAllocations>
     bb2:	0b c0       	rjmp	.+22     	; 0xbca <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     bb4:	e1 2c       	mov	r14, r1
     bb6:	f1 2c       	mov	r15, r1
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <pvPortMalloc+0x134>
     bba:	e1 2c       	mov	r14, r1
     bbc:	f1 2c       	mov	r15, r1
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <pvPortMalloc+0x134>
     bc0:	e1 2c       	mov	r14, r1
     bc2:	f1 2c       	mov	r15, r1
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <pvPortMalloc+0x134>
     bc6:	e1 2c       	mov	r14, r1
     bc8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     bca:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     bd4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     bd8:	c7 01       	movw	r24, r14
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	91 f1       	breq	.+100    	; 0xc58 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     bf4:	ec 01       	movw	r28, r24
     bf6:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     bf8:	4a 81       	ldd	r20, Y+2	; 0x02
     bfa:	5b 81       	ldd	r21, Y+3	; 0x03
     bfc:	20 91 4e 08 	lds	r18, 0x084E	; 0x80084e <xBlockAllocatedBit>
     c00:	30 91 4f 08 	lds	r19, 0x084F	; 0x80084f <xBlockAllocatedBit+0x1>
     c04:	ba 01       	movw	r22, r20
     c06:	62 23       	and	r22, r18
     c08:	73 23       	and	r23, r19
     c0a:	67 2b       	or	r22, r23
     c0c:	29 f1       	breq	.+74     	; 0xc58 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     c0e:	68 81       	ld	r22, Y
     c10:	79 81       	ldd	r23, Y+1	; 0x01
     c12:	67 2b       	or	r22, r23
     c14:	09 f5       	brne	.+66     	; 0xc58 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     c16:	20 95       	com	r18
     c18:	30 95       	com	r19
     c1a:	24 23       	and	r18, r20
     c1c:	35 23       	and	r19, r21
     c1e:	3b 83       	std	Y+3, r19	; 0x03
     c20:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     c22:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	9b 81       	ldd	r25, Y+3	; 0x03
     c2a:	20 91 56 08 	lds	r18, 0x0856	; 0x800856 <xFreeBytesRemaining>
     c2e:	30 91 57 08 	lds	r19, 0x0857	; 0x800857 <xFreeBytesRemaining+0x1>
     c32:	82 0f       	add	r24, r18
     c34:	93 1f       	adc	r25, r19
     c36:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <xFreeBytesRemaining+0x1>
     c3a:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     c3e:	ce 01       	movw	r24, r28
     c40:	e0 de       	rcall	.-576    	; 0xa02 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     c42:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <xNumberOfSuccessfulFrees>
     c46:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <xNumberOfSuccessfulFrees+0x1>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	90 93 51 08 	sts	0x0851, r25	; 0x800851 <xNumberOfSuccessfulFrees+0x1>
     c50:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c54:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c62:	fc 01       	movw	r30, r24
     c64:	03 96       	adiw	r24, 0x03	; 3
     c66:	92 83       	std	Z+2, r25	; 0x02
     c68:	81 83       	std	Z+1, r24	; 0x01
     c6a:	4f ef       	ldi	r20, 0xFF	; 255
     c6c:	5f ef       	ldi	r21, 0xFF	; 255
     c6e:	ba 01       	movw	r22, r20
     c70:	43 83       	std	Z+3, r20	; 0x03
     c72:	54 83       	std	Z+4, r21	; 0x04
     c74:	65 83       	std	Z+5, r22	; 0x05
     c76:	76 83       	std	Z+6, r23	; 0x06
     c78:	90 87       	std	Z+8, r25	; 0x08
     c7a:	87 83       	std	Z+7, r24	; 0x07
     c7c:	92 87       	std	Z+10, r25	; 0x0a
     c7e:	81 87       	std	Z+9, r24	; 0x09
     c80:	10 82       	st	Z, r1
     c82:	08 95       	ret

00000c84 <vListInitialiseItem>:
     c84:	fc 01       	movw	r30, r24
     c86:	13 86       	std	Z+11, r1	; 0x0b
     c88:	12 86       	std	Z+10, r1	; 0x0a
     c8a:	08 95       	ret

00000c8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c96:	08 81       	ld	r16, Y
     c98:	19 81       	ldd	r17, Y+1	; 0x01
     c9a:	2a 81       	ldd	r18, Y+2	; 0x02
     c9c:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c9e:	0f 3f       	cpi	r16, 0xFF	; 255
     ca0:	4f ef       	ldi	r20, 0xFF	; 255
     ca2:	14 07       	cpc	r17, r20
     ca4:	24 07       	cpc	r18, r20
     ca6:	34 07       	cpc	r19, r20
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     caa:	fc 01       	movw	r30, r24
     cac:	a1 85       	ldd	r26, Z+9	; 0x09
     cae:	b2 85       	ldd	r27, Z+10	; 0x0a
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     cb2:	dc 01       	movw	r26, r24
     cb4:	13 96       	adiw	r26, 0x03	; 3
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <vListInsert+0x2e>
     cb8:	df 01       	movw	r26, r30
     cba:	14 96       	adiw	r26, 0x04	; 4
     cbc:	ed 91       	ld	r30, X+
     cbe:	fc 91       	ld	r31, X
     cc0:	15 97       	sbiw	r26, 0x05	; 5
     cc2:	40 81       	ld	r20, Z
     cc4:	51 81       	ldd	r21, Z+1	; 0x01
     cc6:	62 81       	ldd	r22, Z+2	; 0x02
     cc8:	73 81       	ldd	r23, Z+3	; 0x03
     cca:	04 17       	cp	r16, r20
     ccc:	15 07       	cpc	r17, r21
     cce:	26 07       	cpc	r18, r22
     cd0:	37 07       	cpc	r19, r23
     cd2:	90 f7       	brcc	.-28     	; 0xcb8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     cd4:	14 96       	adiw	r26, 0x04	; 4
     cd6:	ed 91       	ld	r30, X+
     cd8:	fc 91       	ld	r31, X
     cda:	15 97       	sbiw	r26, 0x05	; 5
     cdc:	fd 83       	std	Y+5, r31	; 0x05
     cde:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ce0:	d7 83       	std	Z+7, r29	; 0x07
     ce2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     ce4:	bf 83       	std	Y+7, r27	; 0x07
     ce6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     ce8:	15 96       	adiw	r26, 0x05	; 5
     cea:	dc 93       	st	X, r29
     cec:	ce 93       	st	-X, r28
     cee:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     cf0:	9b 87       	std	Y+11, r25	; 0x0b
     cf2:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 81       	ld	r18, Z
     cf8:	2f 5f       	subi	r18, 0xFF	; 255
     cfa:	20 83       	st	Z, r18
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	08 95       	ret

00000d06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     d0c:	a2 85       	ldd	r26, Z+10	; 0x0a
     d0e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d10:	c4 81       	ldd	r28, Z+4	; 0x04
     d12:	d5 81       	ldd	r29, Z+5	; 0x05
     d14:	86 81       	ldd	r24, Z+6	; 0x06
     d16:	97 81       	ldd	r25, Z+7	; 0x07
     d18:	9f 83       	std	Y+7, r25	; 0x07
     d1a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d1c:	c6 81       	ldd	r28, Z+6	; 0x06
     d1e:	d7 81       	ldd	r29, Z+7	; 0x07
     d20:	84 81       	ldd	r24, Z+4	; 0x04
     d22:	95 81       	ldd	r25, Z+5	; 0x05
     d24:	9d 83       	std	Y+5, r25	; 0x05
     d26:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	8d 91       	ld	r24, X+
     d2c:	9c 91       	ld	r25, X
     d2e:	12 97       	sbiw	r26, 0x02	; 2
     d30:	e8 17       	cp	r30, r24
     d32:	f9 07       	cpc	r31, r25
     d34:	31 f4       	brne	.+12     	; 0xd42 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d36:	86 81       	ldd	r24, Z+6	; 0x06
     d38:	97 81       	ldd	r25, Z+7	; 0x07
     d3a:	12 96       	adiw	r26, 0x02	; 2
     d3c:	9c 93       	st	X, r25
     d3e:	8e 93       	st	-X, r24
     d40:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d42:	13 86       	std	Z+11, r1	; 0x0b
     d44:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d46:	8c 91       	ld	r24, X
     d48:	81 50       	subi	r24, 0x01	; 1
     d4a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d4c:	8c 91       	ld	r24, X
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d54:	a8 95       	wdr
     d56:	90 ec       	ldi	r25, 0xC0	; 192
     d58:	88 e1       	ldi	r24, 0x18	; 24
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	a8 95       	wdr
     d60:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d6a:	08 95       	ret

00000d6c <pxPortInitialiseStack>:
     d6c:	fc 01       	movw	r30, r24
     d6e:	60 83       	st	Z, r22
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	70 83       	st	Z, r23
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	10 82       	st	Z, r1
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	10 82       	st	Z, r1
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	20 e8       	ldi	r18, 0x80	; 128
     d80:	20 83       	st	Z, r18
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	10 82       	st	Z, r1
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	10 82       	st	Z, r1
     d8a:	31 97       	sbiw	r30, 0x01	; 1
     d8c:	10 82       	st	Z, r1
     d8e:	77 97       	sbiw	r30, 0x17	; 23
     d90:	40 83       	st	Z, r20
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	50 83       	st	Z, r21
     d96:	86 97       	sbiw	r24, 0x26	; 38
     d98:	08 95       	ret

00000d9a <xPortStartScheduler>:
     d9a:	dc df       	rcall	.-72     	; 0xd54 <prvSetupTimerInterrupt>
     d9c:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
     da0:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
     da4:	cd 91       	ld	r28, X+
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	dd 91       	ld	r29, X+
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	9f 90       	pop	r9
     dda:	8f 90       	pop	r8
     ddc:	7f 90       	pop	r7
     dde:	6f 90       	pop	r6
     de0:	5f 90       	pop	r5
     de2:	4f 90       	pop	r4
     de4:	3f 90       	pop	r3
     de6:	2f 90       	pop	r2
     de8:	1f 90       	pop	r1
     dea:	0f 90       	pop	r0
     dec:	0c be       	out	0x3c, r0	; 60
     dee:	0f 90       	pop	r0
     df0:	0b be       	out	0x3b, r0	; 59
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	08 95       	ret
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	08 95       	ret

00000dfe <vPortYield>:
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	0f 92       	push	r0
     e06:	0b b6       	in	r0, 0x3b	; 59
     e08:	0f 92       	push	r0
     e0a:	0c b6       	in	r0, 0x3c	; 60
     e0c:	0f 92       	push	r0
     e0e:	1f 92       	push	r1
     e10:	11 24       	eor	r1, r1
     e12:	2f 92       	push	r2
     e14:	3f 92       	push	r3
     e16:	4f 92       	push	r4
     e18:	5f 92       	push	r5
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
     e4e:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
     e52:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
     e56:	0d b6       	in	r0, 0x3d	; 61
     e58:	0d 92       	st	X+, r0
     e5a:	0e b6       	in	r0, 0x3e	; 62
     e5c:	0d 92       	st	X+, r0
     e5e:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskSwitchContext>
     e62:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
     e66:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
     e6a:	cd 91       	ld	r28, X+
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	dd 91       	ld	r29, X+
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	5f 90       	pop	r5
     ea8:	4f 90       	pop	r4
     eaa:	3f 90       	pop	r3
     eac:	2f 90       	pop	r2
     eae:	1f 90       	pop	r1
     eb0:	0f 90       	pop	r0
     eb2:	0c be       	out	0x3c, r0	; 60
     eb4:	0f 90       	pop	r0
     eb6:	0b be       	out	0x3b, r0	; 59
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	08 95       	ret

00000ec0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	0b b6       	in	r0, 0x3b	; 59
     eca:	0f 92       	push	r0
     ecc:	0c b6       	in	r0, 0x3c	; 60
     ece:	0f 92       	push	r0
     ed0:	1f 92       	push	r1
     ed2:	11 24       	eor	r1, r1
     ed4:	2f 92       	push	r2
     ed6:	3f 92       	push	r3
     ed8:	4f 92       	push	r4
     eda:	5f 92       	push	r5
     edc:	6f 92       	push	r6
     ede:	7f 92       	push	r7
     ee0:	8f 92       	push	r8
     ee2:	9f 92       	push	r9
     ee4:	af 92       	push	r10
     ee6:	bf 92       	push	r11
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
     f14:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
     f18:	0d b6       	in	r0, 0x3d	; 61
     f1a:	0d 92       	st	X+, r0
     f1c:	0e b6       	in	r0, 0x3e	; 62
     f1e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     f20:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     f22:	0e 94 3f 11 	call	0x227e	; 0x227e <xTaskIncrementTick>
     f26:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f28:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     f2c:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
     f30:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
     f34:	cd 91       	ld	r28, X+
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	dd 91       	ld	r29, X+
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	bf 90       	pop	r11
     f66:	af 90       	pop	r10
     f68:	9f 90       	pop	r9
     f6a:	8f 90       	pop	r8
     f6c:	7f 90       	pop	r7
     f6e:	6f 90       	pop	r6
     f70:	5f 90       	pop	r5
     f72:	4f 90       	pop	r4
     f74:	3f 90       	pop	r3
     f76:	2f 90       	pop	r2
     f78:	1f 90       	pop	r1
     f7a:	0f 90       	pop	r0
     f7c:	0c be       	out	0x3c, r0	; 60
     f7e:	0f 90       	pop	r0
     f80:	0b be       	out	0x3b, r0	; 59
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f88:	08 95       	ret

00000f8a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f8a:	9a df       	rcall	.-204    	; 0xec0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f8c:	18 95       	reti

00000f8e <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f8e:	dc 01       	movw	r26, r24
     f90:	53 96       	adiw	r26, 0x13	; 19
     f92:	2c 91       	ld	r18, X
     f94:	53 97       	sbiw	r26, 0x13	; 19
     f96:	22 23       	and	r18, r18
     f98:	41 f0       	breq	.+16     	; 0xfaa <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f9a:	5a 96       	adiw	r26, 0x1a	; 26
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	5b 97       	sbiw	r26, 0x1b	; 27
     fa2:	90 81       	ld	r25, Z
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	89 1b       	sub	r24, r25
     fa8:	08 95       	ret
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	08 95       	ret

00000fae <prvIsQueueEmpty>:
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	0f 92       	push	r0
     fb4:	fc 01       	movw	r30, r24
     fb6:	86 8d       	ldd	r24, Z+30	; 0x1e
     fb8:	81 11       	cpse	r24, r1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <prvIsQueueEmpty+0x12>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <prvIsQueueEmpty+0x14>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	08 95       	ret

00000fc8 <prvIsQueueFull>:
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	0f 92       	push	r0
     fce:	fc 01       	movw	r30, r24
     fd0:	26 8d       	ldd	r18, Z+30	; 0x1e
     fd2:	87 8d       	ldd	r24, Z+31	; 0x1f
     fd4:	28 13       	cpse	r18, r24
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <prvIsQueueFull+0x14>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	01 c0       	rjmp	.+2      	; 0xfde <prvIsQueueFull+0x16>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	08 95       	ret

00000fe4 <prvCopyDataToQueue>:
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	04 2f       	mov	r16, r20
     ff0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ff2:	48 a1       	ldd	r20, Y+32	; 0x20
     ff4:	41 11       	cpse	r20, r1
     ff6:	0c c0       	rjmp	.+24     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     ff8:	88 81       	ld	r24, Y
     ffa:	99 81       	ldd	r25, Y+1	; 0x01
     ffc:	89 2b       	or	r24, r25
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1000:	42 c0       	rjmp	.+132    	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	0e 94 43 17 	call	0x2e86	; 0x2e86 <xTaskPriorityDisinherit>
    100a:	1d 82       	std	Y+5, r1	; 0x05
    100c:	1c 82       	std	Y+4, r1	; 0x04
    100e:	42 c0       	rjmp	.+132    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    1010:	01 11       	cpse	r16, r1
    1012:	17 c0       	rjmp	.+46     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <memcpy>
    101e:	28 a1       	ldd	r18, Y+32	; 0x20
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	82 0f       	add	r24, r18
    1026:	91 1d       	adc	r25, r1
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	82 17       	cp	r24, r18
    1032:	93 07       	cpc	r25, r19
    1034:	50 f1       	brcs	.+84     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1036:	88 81       	ld	r24, Y
    1038:	99 81       	ldd	r25, Y+1	; 0x01
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	29 c0       	rjmp	.+82     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <memcpy>
    104c:	88 a1       	ldd	r24, Y+32	; 0x20
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	91 95       	neg	r25
    1052:	81 95       	neg	r24
    1054:	91 09       	sbc	r25, r1
    1056:	2e 81       	ldd	r18, Y+6	; 0x06
    1058:	3f 81       	ldd	r19, Y+7	; 0x07
    105a:	28 0f       	add	r18, r24
    105c:	39 1f       	adc	r19, r25
    105e:	3f 83       	std	Y+7, r19	; 0x07
    1060:	2e 83       	std	Y+6, r18	; 0x06
    1062:	48 81       	ld	r20, Y
    1064:	59 81       	ldd	r21, Y+1	; 0x01
    1066:	24 17       	cp	r18, r20
    1068:	35 07       	cpc	r19, r21
    106a:	30 f4       	brcc	.+12     	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	3d 81       	ldd	r19, Y+5	; 0x05
    1070:	82 0f       	add	r24, r18
    1072:	93 1f       	adc	r25, r19
    1074:	9f 83       	std	Y+7, r25	; 0x07
    1076:	8e 83       	std	Y+6, r24	; 0x06
    1078:	02 30       	cpi	r16, 0x02	; 2
    107a:	49 f4       	brne	.+18     	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
    107c:	11 23       	and	r17, r17
    107e:	49 f0       	breq	.+18     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    1080:	11 50       	subi	r17, 0x01	; 1
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	1f 5f       	subi	r17, 0xFF	; 255
    1096:	1e 8f       	std	Y+30, r17	; 0x1e
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <prvCopyDataFromQueue>:
    10a2:	fc 01       	movw	r30, r24
    10a4:	40 a1       	ldd	r20, Z+32	; 0x20
    10a6:	44 23       	and	r20, r20
    10a8:	a9 f0       	breq	.+42     	; 0x10d4 <prvCopyDataFromQueue+0x32>
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	26 81       	ldd	r18, Z+6	; 0x06
    10ae:	37 81       	ldd	r19, Z+7	; 0x07
    10b0:	24 0f       	add	r18, r20
    10b2:	35 1f       	adc	r19, r21
    10b4:	37 83       	std	Z+7, r19	; 0x07
    10b6:	26 83       	std	Z+6, r18	; 0x06
    10b8:	84 81       	ldd	r24, Z+4	; 0x04
    10ba:	95 81       	ldd	r25, Z+5	; 0x05
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <prvCopyDataFromQueue+0x28>
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	97 83       	std	Z+7, r25	; 0x07
    10c8:	86 83       	std	Z+6, r24	; 0x06
    10ca:	cb 01       	movw	r24, r22
    10cc:	66 81       	ldd	r22, Z+6	; 0x06
    10ce:	77 81       	ldd	r23, Z+7	; 0x07
    10d0:	0c 94 d4 31 	jmp	0x63a8	; 0x63a8 <memcpy>
    10d4:	08 95       	ret

000010d6 <prvUnlockQueue>:
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	0f 92       	push	r0
    10e4:	1a a1       	ldd	r17, Y+34	; 0x22
    10e6:	0b c0       	rjmp	.+22     	; 0x10fe <prvUnlockQueue+0x28>
    10e8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ea:	88 23       	and	r24, r24
    10ec:	51 f0       	breq	.+20     	; 0x1102 <prvUnlockQueue+0x2c>
    10ee:	ce 01       	movw	r24, r28
    10f0:	43 96       	adiw	r24, 0x13	; 19
    10f2:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    10f6:	81 11       	cpse	r24, r1
    10f8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <vTaskMissedYield>
    10fc:	11 50       	subi	r17, 0x01	; 1
    10fe:	11 16       	cp	r1, r17
    1100:	9c f3       	brlt	.-26     	; 0x10e8 <prvUnlockQueue+0x12>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	8a a3       	std	Y+34, r24	; 0x22
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	0f 92       	push	r0
    1110:	19 a1       	ldd	r17, Y+33	; 0x21
    1112:	0b c0       	rjmp	.+22     	; 0x112a <prvUnlockQueue+0x54>
    1114:	88 85       	ldd	r24, Y+8	; 0x08
    1116:	88 23       	and	r24, r24
    1118:	51 f0       	breq	.+20     	; 0x112e <prvUnlockQueue+0x58>
    111a:	ce 01       	movw	r24, r28
    111c:	08 96       	adiw	r24, 0x08	; 8
    111e:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    1122:	81 11       	cpse	r24, r1
    1124:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <vTaskMissedYield>
    1128:	11 50       	subi	r17, 0x01	; 1
    112a:	11 16       	cp	r1, r17
    112c:	9c f3       	brlt	.-26     	; 0x1114 <prvUnlockQueue+0x3e>
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	89 a3       	std	Y+33, r24	; 0x21
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	08 95       	ret

0000113e <xQueueGenericReset>:
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	0f 92       	push	r0
    114a:	e8 81       	ld	r30, Y
    114c:	f9 81       	ldd	r31, Y+1	; 0x01
    114e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1150:	28 a1       	ldd	r18, Y+32	; 0x20
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	82 9f       	mul	r24, r18
    1158:	a0 01       	movw	r20, r0
    115a:	83 9f       	mul	r24, r19
    115c:	50 0d       	add	r21, r0
    115e:	92 9f       	mul	r25, r18
    1160:	50 0d       	add	r21, r0
    1162:	11 24       	eor	r1, r1
    1164:	4e 0f       	add	r20, r30
    1166:	5f 1f       	adc	r21, r31
    1168:	5d 83       	std	Y+5, r21	; 0x05
    116a:	4c 83       	std	Y+4, r20	; 0x04
    116c:	1e 8e       	std	Y+30, r1	; 0x1e
    116e:	fb 83       	std	Y+3, r31	; 0x03
    1170:	ea 83       	std	Y+2, r30	; 0x02
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	28 9f       	mul	r18, r24
    1176:	a0 01       	movw	r20, r0
    1178:	29 9f       	mul	r18, r25
    117a:	50 0d       	add	r21, r0
    117c:	38 9f       	mul	r19, r24
    117e:	50 0d       	add	r21, r0
    1180:	11 24       	eor	r1, r1
    1182:	cf 01       	movw	r24, r30
    1184:	84 0f       	add	r24, r20
    1186:	95 1f       	adc	r25, r21
    1188:	9f 83       	std	Y+7, r25	; 0x07
    118a:	8e 83       	std	Y+6, r24	; 0x06
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	89 a3       	std	Y+33, r24	; 0x21
    1190:	8a a3       	std	Y+34, r24	; 0x22
    1192:	61 11       	cpse	r22, r1
    1194:	0b c0       	rjmp	.+22     	; 0x11ac <xQueueGenericReset+0x6e>
    1196:	88 85       	ldd	r24, Y+8	; 0x08
    1198:	88 23       	and	r24, r24
    119a:	71 f0       	breq	.+28     	; 0x11b8 <xQueueGenericReset+0x7a>
    119c:	ce 01       	movw	r24, r28
    119e:	08 96       	adiw	r24, 0x08	; 8
    11a0:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    11a4:	88 23       	and	r24, r24
    11a6:	41 f0       	breq	.+16     	; 0x11b8 <xQueueGenericReset+0x7a>
    11a8:	2a de       	rcall	.-940    	; 0xdfe <vPortYield>
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <xQueueGenericReset+0x7a>
    11ac:	ce 01       	movw	r24, r28
    11ae:	08 96       	adiw	r24, 0x08	; 8
    11b0:	58 dd       	rcall	.-1360   	; 0xc62 <vListInitialise>
    11b2:	ce 01       	movw	r24, r28
    11b4:	43 96       	adiw	r24, 0x13	; 19
    11b6:	55 dd       	rcall	.-1366   	; 0xc62 <vListInitialise>
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <prvInitialiseNewQueue>:
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	f8 01       	movw	r30, r16
    11ca:	61 11       	cpse	r22, r1
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <prvInitialiseNewQueue+0x10>
    11ce:	11 83       	std	Z+1, r17	; 0x01
    11d0:	00 83       	st	Z, r16
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <prvInitialiseNewQueue+0x14>
    11d4:	51 83       	std	Z+1, r21	; 0x01
    11d6:	40 83       	st	Z, r20
    11d8:	87 8f       	std	Z+31, r24	; 0x1f
    11da:	60 a3       	std	Z+32, r22	; 0x20
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	cf 01       	movw	r24, r30
    11e0:	ae df       	rcall	.-164    	; 0x113e <xQueueGenericReset>
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <xQueueGenericCreate>:
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	f8 2e       	mov	r15, r24
    11f8:	e6 2e       	mov	r14, r22
    11fa:	d4 2e       	mov	r13, r20
    11fc:	86 9f       	mul	r24, r22
    11fe:	c0 01       	movw	r24, r0
    1200:	11 24       	eor	r1, r1
    1202:	83 96       	adiw	r24, 0x23	; 35
    1204:	48 dc       	rcall	.-1904   	; 0xa96 <pvPortMalloc>
    1206:	ec 01       	movw	r28, r24
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	41 f0       	breq	.+16     	; 0x121c <xQueueGenericCreate+0x34>
    120c:	8c 01       	movw	r16, r24
    120e:	2d 2d       	mov	r18, r13
    1210:	ac 01       	movw	r20, r24
    1212:	4d 5d       	subi	r20, 0xDD	; 221
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	6e 2d       	mov	r22, r14
    1218:	8f 2d       	mov	r24, r15
    121a:	d4 df       	rcall	.-88     	; 0x11c4 <prvInitialiseNewQueue>
    121c:	ce 01       	movw	r24, r28
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	08 95       	ret

0000122e <xQueueGenericSend>:
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	29 97       	sbiw	r28, 0x09	; 9
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	7c 01       	movw	r14, r24
    1250:	6b 01       	movw	r12, r22
    1252:	2e 83       	std	Y+6, r18	; 0x06
    1254:	3f 83       	std	Y+7, r19	; 0x07
    1256:	48 87       	std	Y+8, r20	; 0x08
    1258:	59 87       	std	Y+9, r21	; 0x09
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	0f 92       	push	r0
    1262:	f7 01       	movw	r30, r14
    1264:	96 8d       	ldd	r25, Z+30	; 0x1e
    1266:	87 8d       	ldd	r24, Z+31	; 0x1f
    1268:	98 17       	cp	r25, r24
    126a:	10 f0       	brcs	.+4      	; 0x1270 <xQueueGenericSend+0x42>
    126c:	02 30       	cpi	r16, 0x02	; 2
    126e:	b1 f4       	brne	.+44     	; 0x129c <xQueueGenericSend+0x6e>
    1270:	40 2f       	mov	r20, r16
    1272:	b6 01       	movw	r22, r12
    1274:	c7 01       	movw	r24, r14
    1276:	b6 de       	rcall	.-660    	; 0xfe4 <prvCopyDataToQueue>
    1278:	f7 01       	movw	r30, r14
    127a:	93 89       	ldd	r25, Z+19	; 0x13
    127c:	99 23       	and	r25, r25
    127e:	41 f0       	breq	.+16     	; 0x1290 <xQueueGenericSend+0x62>
    1280:	c7 01       	movw	r24, r14
    1282:	43 96       	adiw	r24, 0x13	; 19
    1284:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    1288:	88 23       	and	r24, r24
    128a:	21 f0       	breq	.+8      	; 0x1294 <xQueueGenericSend+0x66>
    128c:	b8 dd       	rcall	.-1168   	; 0xdfe <vPortYield>
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <xQueueGenericSend+0x66>
    1290:	81 11       	cpse	r24, r1
    1292:	b5 dd       	rcall	.-1174   	; 0xdfe <vPortYield>
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	4c c0       	rjmp	.+152    	; 0x1334 <xQueueGenericSend+0x106>
    129c:	8e 81       	ldd	r24, Y+6	; 0x06
    129e:	9f 81       	ldd	r25, Y+7	; 0x07
    12a0:	a8 85       	ldd	r26, Y+8	; 0x08
    12a2:	b9 85       	ldd	r27, Y+9	; 0x09
    12a4:	89 2b       	or	r24, r25
    12a6:	8a 2b       	or	r24, r26
    12a8:	8b 2b       	or	r24, r27
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <xQueueGenericSend+0x86>
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	40 c0       	rjmp	.+128    	; 0x1334 <xQueueGenericSend+0x106>
    12b4:	11 11       	cpse	r17, r1
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <xQueueGenericSend+0x94>
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <vTaskInternalSetTimeOutState>
    12c0:	11 e0       	ldi	r17, 0x01	; 1
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	c7 d7       	rcall	.+3982   	; 0x2256 <vTaskSuspendAll>
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	0f 92       	push	r0
    12ce:	f7 01       	movw	r30, r14
    12d0:	81 a1       	ldd	r24, Z+33	; 0x21
    12d2:	8f 3f       	cpi	r24, 0xFF	; 255
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <xQueueGenericSend+0xaa>
    12d6:	11 a2       	std	Z+33, r1	; 0x21
    12d8:	f7 01       	movw	r30, r14
    12da:	82 a1       	ldd	r24, Z+34	; 0x22
    12dc:	8f 3f       	cpi	r24, 0xFF	; 255
    12de:	09 f4       	brne	.+2      	; 0x12e2 <xQueueGenericSend+0xb4>
    12e0:	12 a2       	std	Z+34, r1	; 0x22
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	be 01       	movw	r22, r28
    12e8:	6a 5f       	subi	r22, 0xFA	; 250
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <xTaskCheckForTimeOut>
    12f4:	81 11       	cpse	r24, r1
    12f6:	19 c0       	rjmp	.+50     	; 0x132a <xQueueGenericSend+0xfc>
    12f8:	c7 01       	movw	r24, r14
    12fa:	66 de       	rcall	.-820    	; 0xfc8 <prvIsQueueFull>
    12fc:	88 23       	and	r24, r24
    12fe:	81 f0       	breq	.+32     	; 0x1320 <xQueueGenericSend+0xf2>
    1300:	4e 81       	ldd	r20, Y+6	; 0x06
    1302:	5f 81       	ldd	r21, Y+7	; 0x07
    1304:	68 85       	ldd	r22, Y+8	; 0x08
    1306:	79 85       	ldd	r23, Y+9	; 0x09
    1308:	c7 01       	movw	r24, r14
    130a:	08 96       	adiw	r24, 0x08	; 8
    130c:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskPlaceOnEventList>
    1310:	c7 01       	movw	r24, r14
    1312:	e1 de       	rcall	.-574    	; 0x10d6 <prvUnlockQueue>
    1314:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
    1318:	81 11       	cpse	r24, r1
    131a:	a0 cf       	rjmp	.-192    	; 0x125c <xQueueGenericSend+0x2e>
    131c:	70 dd       	rcall	.-1312   	; 0xdfe <vPortYield>
    131e:	9e cf       	rjmp	.-196    	; 0x125c <xQueueGenericSend+0x2e>
    1320:	c7 01       	movw	r24, r14
    1322:	d9 de       	rcall	.-590    	; 0x10d6 <prvUnlockQueue>
    1324:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
    1328:	99 cf       	rjmp	.-206    	; 0x125c <xQueueGenericSend+0x2e>
    132a:	c7 01       	movw	r24, r14
    132c:	d4 de       	rcall	.-600    	; 0x10d6 <prvUnlockQueue>
    132e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	29 96       	adiw	r28, 0x09	; 9
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	08 95       	ret

00001352 <prvInitialiseMutex>:
    1352:	0f 93       	push	r16
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f0       	breq	.+26     	; 0x1372 <prvInitialiseMutex+0x20>
    1358:	fc 01       	movw	r30, r24
    135a:	15 82       	std	Z+5, r1	; 0x05
    135c:	14 82       	std	Z+4, r1	; 0x04
    135e:	11 82       	std	Z+1, r1	; 0x01
    1360:	10 82       	st	Z, r1
    1362:	16 82       	std	Z+6, r1	; 0x06
    1364:	00 e0       	ldi	r16, 0x00	; 0
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	a9 01       	movw	r20, r18
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	5e df       	rcall	.-324    	; 0x122e <xQueueGenericSend>
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <xQueueCreateMutex>:
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	48 2f       	mov	r20, r24
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	33 df       	rcall	.-410    	; 0x11e8 <xQueueGenericCreate>
    1382:	ec 01       	movw	r28, r24
    1384:	e6 df       	rcall	.-52     	; 0x1352 <prvInitialiseMutex>
    1386:	ce 01       	movw	r24, r28
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <xQueueGenericSendFromISR>:
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	8a 01       	movw	r16, r20
    139c:	fc 01       	movw	r30, r24
    139e:	56 8d       	ldd	r21, Z+30	; 0x1e
    13a0:	37 8d       	ldd	r19, Z+31	; 0x1f
    13a2:	53 17       	cp	r21, r19
    13a4:	10 f0       	brcs	.+4      	; 0x13aa <xQueueGenericSendFromISR+0x1c>
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	f9 f4       	brne	.+62     	; 0x13e8 <xQueueGenericSendFromISR+0x5a>
    13aa:	42 2f       	mov	r20, r18
    13ac:	78 01       	movw	r14, r16
    13ae:	ec 01       	movw	r28, r24
    13b0:	1a a1       	ldd	r17, Y+34	; 0x22
    13b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13b4:	ce 01       	movw	r24, r28
    13b6:	16 de       	rcall	.-980    	; 0xfe4 <prvCopyDataToQueue>
    13b8:	1f 3f       	cpi	r17, 0xFF	; 255
    13ba:	81 f4       	brne	.+32     	; 0x13dc <xQueueGenericSendFromISR+0x4e>
    13bc:	8b 89       	ldd	r24, Y+19	; 0x13
    13be:	88 23       	and	r24, r24
    13c0:	a9 f0       	breq	.+42     	; 0x13ec <xQueueGenericSendFromISR+0x5e>
    13c2:	ce 01       	movw	r24, r28
    13c4:	43 96       	adiw	r24, 0x13	; 19
    13c6:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    13ca:	88 23       	and	r24, r24
    13cc:	89 f0       	breq	.+34     	; 0x13f0 <xQueueGenericSendFromISR+0x62>
    13ce:	e1 14       	cp	r14, r1
    13d0:	f1 04       	cpc	r15, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <xQueueGenericSendFromISR+0x66>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	f7 01       	movw	r30, r14
    13d8:	80 83       	st	Z, r24
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <xQueueGenericSendFromISR+0x68>
    13dc:	ff 24       	eor	r15, r15
    13de:	f3 94       	inc	r15
    13e0:	f1 0e       	add	r15, r17
    13e2:	fa a2       	std	Y+34, r15	; 0x22
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	07 c0       	rjmp	.+14     	; 0x13f6 <xQueueGenericSendFromISR+0x68>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <xQueueGenericSendFromISR+0x68>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <xQueueGenericSendFromISR+0x68>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <xQueueGenericSendFromISR+0x68>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	08 95       	ret

00001404 <xQueueReceive>:
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	29 97       	sbiw	r28, 0x09	; 9
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	8c 01       	movw	r16, r24
    1426:	6b 01       	movw	r12, r22
    1428:	2e 83       	std	Y+6, r18	; 0x06
    142a:	3f 83       	std	Y+7, r19	; 0x07
    142c:	48 87       	std	Y+8, r20	; 0x08
    142e:	59 87       	std	Y+9, r21	; 0x09
    1430:	e1 2c       	mov	r14, r1
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	0f 92       	push	r0
    1438:	f8 01       	movw	r30, r16
    143a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    143c:	ff 20       	and	r15, r15
    143e:	99 f0       	breq	.+38     	; 0x1466 <xQueueReceive+0x62>
    1440:	b6 01       	movw	r22, r12
    1442:	c8 01       	movw	r24, r16
    1444:	2e de       	rcall	.-932    	; 0x10a2 <prvCopyDataFromQueue>
    1446:	fa 94       	dec	r15
    1448:	f8 01       	movw	r30, r16
    144a:	f6 8e       	std	Z+30, r15	; 0x1e
    144c:	80 85       	ldd	r24, Z+8	; 0x08
    144e:	88 23       	and	r24, r24
    1450:	31 f0       	breq	.+12     	; 0x145e <xQueueReceive+0x5a>
    1452:	c8 01       	movw	r24, r16
    1454:	08 96       	adiw	r24, 0x08	; 8
    1456:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    145a:	81 11       	cpse	r24, r1
    145c:	d0 dc       	rcall	.-1632   	; 0xdfe <vPortYield>
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	4f c0       	rjmp	.+158    	; 0x1504 <xQueueReceive+0x100>
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	a8 85       	ldd	r26, Y+8	; 0x08
    146c:	b9 85       	ldd	r27, Y+9	; 0x09
    146e:	89 2b       	or	r24, r25
    1470:	8a 2b       	or	r24, r26
    1472:	8b 2b       	or	r24, r27
    1474:	21 f4       	brne	.+8      	; 0x147e <xQueueReceive+0x7a>
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	43 c0       	rjmp	.+134    	; 0x1504 <xQueueReceive+0x100>
    147e:	e1 10       	cpse	r14, r1
    1480:	06 c0       	rjmp	.+12     	; 0x148e <xQueueReceive+0x8a>
    1482:	ce 01       	movw	r24, r28
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <vTaskInternalSetTimeOutState>
    148a:	ee 24       	eor	r14, r14
    148c:	e3 94       	inc	r14
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	e1 d6       	rcall	.+3522   	; 0x2256 <vTaskSuspendAll>
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	0f 92       	push	r0
    149a:	f8 01       	movw	r30, r16
    149c:	81 a1       	ldd	r24, Z+33	; 0x21
    149e:	8f 3f       	cpi	r24, 0xFF	; 255
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <xQueueReceive+0xa0>
    14a2:	11 a2       	std	Z+33, r1	; 0x21
    14a4:	f8 01       	movw	r30, r16
    14a6:	82 a1       	ldd	r24, Z+34	; 0x22
    14a8:	8f 3f       	cpi	r24, 0xFF	; 255
    14aa:	09 f4       	brne	.+2      	; 0x14ae <xQueueReceive+0xaa>
    14ac:	12 a2       	std	Z+34, r1	; 0x22
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	be 01       	movw	r22, r28
    14b4:	6a 5f       	subi	r22, 0xFA	; 250
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	ce 01       	movw	r24, r28
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <xTaskCheckForTimeOut>
    14c0:	81 11       	cpse	r24, r1
    14c2:	17 c0       	rjmp	.+46     	; 0x14f2 <xQueueReceive+0xee>
    14c4:	c8 01       	movw	r24, r16
    14c6:	73 dd       	rcall	.-1306   	; 0xfae <prvIsQueueEmpty>
    14c8:	88 23       	and	r24, r24
    14ca:	79 f0       	breq	.+30     	; 0x14ea <xQueueReceive+0xe6>
    14cc:	4e 81       	ldd	r20, Y+6	; 0x06
    14ce:	5f 81       	ldd	r21, Y+7	; 0x07
    14d0:	68 85       	ldd	r22, Y+8	; 0x08
    14d2:	79 85       	ldd	r23, Y+9	; 0x09
    14d4:	c8 01       	movw	r24, r16
    14d6:	43 96       	adiw	r24, 0x13	; 19
    14d8:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskPlaceOnEventList>
    14dc:	c8 01       	movw	r24, r16
    14de:	fb dd       	rcall	.-1034   	; 0x10d6 <prvUnlockQueue>
    14e0:	fa d7       	rcall	.+4084   	; 0x24d6 <xTaskResumeAll>
    14e2:	81 11       	cpse	r24, r1
    14e4:	a6 cf       	rjmp	.-180    	; 0x1432 <xQueueReceive+0x2e>
    14e6:	8b dc       	rcall	.-1770   	; 0xdfe <vPortYield>
    14e8:	a4 cf       	rjmp	.-184    	; 0x1432 <xQueueReceive+0x2e>
    14ea:	c8 01       	movw	r24, r16
    14ec:	f4 dd       	rcall	.-1048   	; 0x10d6 <prvUnlockQueue>
    14ee:	f3 d7       	rcall	.+4070   	; 0x24d6 <xTaskResumeAll>
    14f0:	a0 cf       	rjmp	.-192    	; 0x1432 <xQueueReceive+0x2e>
    14f2:	c8 01       	movw	r24, r16
    14f4:	f0 dd       	rcall	.-1056   	; 0x10d6 <prvUnlockQueue>
    14f6:	ef d7       	rcall	.+4062   	; 0x24d6 <xTaskResumeAll>
    14f8:	c8 01       	movw	r24, r16
    14fa:	59 dd       	rcall	.-1358   	; 0xfae <prvIsQueueEmpty>
    14fc:	88 23       	and	r24, r24
    14fe:	09 f4       	brne	.+2      	; 0x1502 <xQueueReceive+0xfe>
    1500:	98 cf       	rjmp	.-208    	; 0x1432 <xQueueReceive+0x2e>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	29 96       	adiw	r28, 0x09	; 9
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	08 95       	ret

00001522 <xQueueSemaphoreTake>:
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	29 97       	sbiw	r28, 0x09	; 9
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	8c 01       	movw	r16, r24
    1540:	4e 83       	std	Y+6, r20	; 0x06
    1542:	5f 83       	std	Y+7, r21	; 0x07
    1544:	68 87       	std	Y+8, r22	; 0x08
    1546:	79 87       	std	Y+9, r23	; 0x09
    1548:	e1 2c       	mov	r14, r1
    154a:	f1 2c       	mov	r15, r1
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	0f 92       	push	r0
    1552:	f8 01       	movw	r30, r16
    1554:	86 8d       	ldd	r24, Z+30	; 0x1e
    1556:	88 23       	and	r24, r24
    1558:	c9 f0       	breq	.+50     	; 0x158c <xQueueSemaphoreTake+0x6a>
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	86 8f       	std	Z+30, r24	; 0x1e
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	89 2b       	or	r24, r25
    1564:	29 f4       	brne	.+10     	; 0x1570 <xQueueSemaphoreTake+0x4e>
    1566:	0e 94 2f 18 	call	0x305e	; 0x305e <pvTaskIncrementMutexHeldCount>
    156a:	f8 01       	movw	r30, r16
    156c:	95 83       	std	Z+5, r25	; 0x05
    156e:	84 83       	std	Z+4, r24	; 0x04
    1570:	f8 01       	movw	r30, r16
    1572:	80 85       	ldd	r24, Z+8	; 0x08
    1574:	88 23       	and	r24, r24
    1576:	31 f0       	breq	.+12     	; 0x1584 <xQueueSemaphoreTake+0x62>
    1578:	c8 01       	movw	r24, r16
    157a:	08 96       	adiw	r24, 0x08	; 8
    157c:	0e 94 cf 14 	call	0x299e	; 0x299e <xTaskRemoveFromEventList>
    1580:	81 11       	cpse	r24, r1
    1582:	3d dc       	rcall	.-1926   	; 0xdfe <vPortYield>
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	6f c0       	rjmp	.+222    	; 0x166a <xQueueSemaphoreTake+0x148>
    158c:	8e 81       	ldd	r24, Y+6	; 0x06
    158e:	9f 81       	ldd	r25, Y+7	; 0x07
    1590:	a8 85       	ldd	r26, Y+8	; 0x08
    1592:	b9 85       	ldd	r27, Y+9	; 0x09
    1594:	89 2b       	or	r24, r25
    1596:	8a 2b       	or	r24, r26
    1598:	8b 2b       	or	r24, r27
    159a:	21 f4       	brne	.+8      	; 0x15a4 <xQueueSemaphoreTake+0x82>
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	63 c0       	rjmp	.+198    	; 0x166a <xQueueSemaphoreTake+0x148>
    15a4:	f1 10       	cpse	r15, r1
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <xQueueSemaphoreTake+0x92>
    15a8:	ce 01       	movw	r24, r28
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <vTaskInternalSetTimeOutState>
    15b0:	ff 24       	eor	r15, r15
    15b2:	f3 94       	inc	r15
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	4e d6       	rcall	.+3228   	; 0x2256 <vTaskSuspendAll>
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
    15c0:	f8 01       	movw	r30, r16
    15c2:	81 a1       	ldd	r24, Z+33	; 0x21
    15c4:	8f 3f       	cpi	r24, 0xFF	; 255
    15c6:	09 f4       	brne	.+2      	; 0x15ca <xQueueSemaphoreTake+0xa8>
    15c8:	11 a2       	std	Z+33, r1	; 0x21
    15ca:	f8 01       	movw	r30, r16
    15cc:	82 a1       	ldd	r24, Z+34	; 0x22
    15ce:	8f 3f       	cpi	r24, 0xFF	; 255
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <xQueueSemaphoreTake+0xb2>
    15d2:	12 a2       	std	Z+34, r1	; 0x22
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	be 01       	movw	r22, r28
    15da:	6a 5f       	subi	r22, 0xFA	; 250
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <xTaskCheckForTimeOut>
    15e6:	81 11       	cpse	r24, r1
    15e8:	26 c0       	rjmp	.+76     	; 0x1636 <xQueueSemaphoreTake+0x114>
    15ea:	c8 01       	movw	r24, r16
    15ec:	e0 dc       	rcall	.-1600   	; 0xfae <prvIsQueueEmpty>
    15ee:	88 23       	and	r24, r24
    15f0:	f1 f0       	breq	.+60     	; 0x162e <xQueueSemaphoreTake+0x10c>
    15f2:	f8 01       	movw	r30, r16
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	89 2b       	or	r24, r25
    15fa:	51 f4       	brne	.+20     	; 0x1610 <xQueueSemaphoreTake+0xee>
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	0f 92       	push	r0
    1602:	84 81       	ldd	r24, Z+4	; 0x04
    1604:	95 81       	ldd	r25, Z+5	; 0x05
    1606:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskPriorityInherit>
    160a:	e8 2e       	mov	r14, r24
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	4e 81       	ldd	r20, Y+6	; 0x06
    1612:	5f 81       	ldd	r21, Y+7	; 0x07
    1614:	68 85       	ldd	r22, Y+8	; 0x08
    1616:	79 85       	ldd	r23, Y+9	; 0x09
    1618:	c8 01       	movw	r24, r16
    161a:	43 96       	adiw	r24, 0x13	; 19
    161c:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskPlaceOnEventList>
    1620:	c8 01       	movw	r24, r16
    1622:	59 dd       	rcall	.-1358   	; 0x10d6 <prvUnlockQueue>
    1624:	58 d7       	rcall	.+3760   	; 0x24d6 <xTaskResumeAll>
    1626:	81 11       	cpse	r24, r1
    1628:	91 cf       	rjmp	.-222    	; 0x154c <xQueueSemaphoreTake+0x2a>
    162a:	e9 db       	rcall	.-2094   	; 0xdfe <vPortYield>
    162c:	8f cf       	rjmp	.-226    	; 0x154c <xQueueSemaphoreTake+0x2a>
    162e:	c8 01       	movw	r24, r16
    1630:	52 dd       	rcall	.-1372   	; 0x10d6 <prvUnlockQueue>
    1632:	51 d7       	rcall	.+3746   	; 0x24d6 <xTaskResumeAll>
    1634:	8b cf       	rjmp	.-234    	; 0x154c <xQueueSemaphoreTake+0x2a>
    1636:	c8 01       	movw	r24, r16
    1638:	4e dd       	rcall	.-1380   	; 0x10d6 <prvUnlockQueue>
    163a:	4d d7       	rcall	.+3738   	; 0x24d6 <xTaskResumeAll>
    163c:	c8 01       	movw	r24, r16
    163e:	b7 dc       	rcall	.-1682   	; 0xfae <prvIsQueueEmpty>
    1640:	88 23       	and	r24, r24
    1642:	09 f4       	brne	.+2      	; 0x1646 <xQueueSemaphoreTake+0x124>
    1644:	83 cf       	rjmp	.-250    	; 0x154c <xQueueSemaphoreTake+0x2a>
    1646:	ee 20       	and	r14, r14
    1648:	79 f0       	breq	.+30     	; 0x1668 <xQueueSemaphoreTake+0x146>
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	0f 92       	push	r0
    1650:	c8 01       	movw	r24, r16
    1652:	9d dc       	rcall	.-1734   	; 0xf8e <prvGetDisinheritPriorityAfterTimeout>
    1654:	68 2f       	mov	r22, r24
    1656:	f8 01       	movw	r30, r16
    1658:	84 81       	ldd	r24, Z+4	; 0x04
    165a:	95 81       	ldd	r25, Z+5	; 0x05
    165c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <vTaskPriorityDisinheritAfterTimeout>
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	01 c0       	rjmp	.+2      	; 0x166a <xQueueSemaphoreTake+0x148>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	29 96       	adiw	r28, 0x09	; 9
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	08 95       	ret

00001684 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	0f 92       	push	r0
    1690:	89 a1       	ldd	r24, Y+33	; 0x21
    1692:	8f 3f       	cpi	r24, 0xFF	; 255
    1694:	09 f4       	brne	.+2      	; 0x1698 <vQueueWaitForMessageRestricted+0x14>
    1696:	19 a2       	std	Y+33, r1	; 0x21
    1698:	8a a1       	ldd	r24, Y+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <vQueueWaitForMessageRestricted+0x1c>
    169e:	1a a2       	std	Y+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a6:	81 11       	cpse	r24, r1
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16aa:	ce 01       	movw	r24, r28
    16ac:	43 96       	adiw	r24, 0x13	; 19
    16ae:	0e 94 8d 14 	call	0x291a	; 0x291a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    16b2:	ce 01       	movw	r24, r28
    16b4:	10 dd       	rcall	.-1504   	; 0x10d6 <prvUnlockQueue>
    }
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    16bc:	fc 01       	movw	r30, r24
    16be:	44 81       	ldd	r20, Z+4	; 0x04
    16c0:	55 81       	ldd	r21, Z+5	; 0x05
    16c2:	22 81       	ldd	r18, Z+2	; 0x02
    16c4:	33 81       	ldd	r19, Z+3	; 0x03
    16c6:	24 0f       	add	r18, r20
    16c8:	35 1f       	adc	r19, r21
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	b9 01       	movw	r22, r18
    16d0:	68 1b       	sub	r22, r24
    16d2:	79 0b       	sbc	r23, r25
    16d4:	cb 01       	movw	r24, r22
    16d6:	64 17       	cp	r22, r20
    16d8:	75 07       	cpc	r23, r21
    16da:	10 f0       	brcs	.+4      	; 0x16e0 <prvBytesInBuffer+0x24>
    16dc:	84 1b       	sub	r24, r20
    16de:	95 0b       	sbc	r25, r21
    16e0:	08 95       	ret

000016e2 <prvInitialiseNewStreamBuffer>:
    16e2:	0f 93       	push	r16
    16e4:	fc 01       	movw	r30, r24
    16e6:	8f e0       	ldi	r24, 0x0F	; 15
    16e8:	df 01       	movw	r26, r30
    16ea:	1d 92       	st	X+, r1
    16ec:	8a 95       	dec	r24
    16ee:	e9 f7       	brne	.-6      	; 0x16ea <prvInitialiseNewStreamBuffer+0x8>
    16f0:	75 87       	std	Z+13, r23	; 0x0d
    16f2:	64 87       	std	Z+12, r22	; 0x0c
    16f4:	55 83       	std	Z+5, r21	; 0x05
    16f6:	44 83       	std	Z+4, r20	; 0x04
    16f8:	37 83       	std	Z+7, r19	; 0x07
    16fa:	26 83       	std	Z+6, r18	; 0x06
    16fc:	06 87       	std	Z+14, r16	; 0x0e
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <prvWriteBytesToBuffer>:
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	6c 01       	movw	r12, r24
    1718:	5b 01       	movw	r10, r22
    171a:	7a 01       	movw	r14, r20
    171c:	fc 01       	movw	r30, r24
    171e:	c2 81       	ldd	r28, Z+2	; 0x02
    1720:	d3 81       	ldd	r29, Z+3	; 0x03
    1722:	04 81       	ldd	r16, Z+4	; 0x04
    1724:	15 81       	ldd	r17, Z+5	; 0x05
    1726:	0c 1b       	sub	r16, r28
    1728:	1d 0b       	sbc	r17, r29
    172a:	40 17       	cp	r20, r16
    172c:	51 07       	cpc	r21, r17
    172e:	08 f4       	brcc	.+2      	; 0x1732 <prvWriteBytesToBuffer+0x30>
    1730:	8a 01       	movw	r16, r20
    1732:	f6 01       	movw	r30, r12
    1734:	84 85       	ldd	r24, Z+12	; 0x0c
    1736:	95 85       	ldd	r25, Z+13	; 0x0d
    1738:	a8 01       	movw	r20, r16
    173a:	b5 01       	movw	r22, r10
    173c:	8c 0f       	add	r24, r28
    173e:	9d 1f       	adc	r25, r29
    1740:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <memcpy>
    1744:	0e 15       	cp	r16, r14
    1746:	1f 05       	cpc	r17, r15
    1748:	58 f4       	brcc	.+22     	; 0x1760 <prvWriteBytesToBuffer+0x5e>
    174a:	a7 01       	movw	r20, r14
    174c:	40 1b       	sub	r20, r16
    174e:	51 0b       	sbc	r21, r17
    1750:	b5 01       	movw	r22, r10
    1752:	60 0f       	add	r22, r16
    1754:	71 1f       	adc	r23, r17
    1756:	f6 01       	movw	r30, r12
    1758:	84 85       	ldd	r24, Z+12	; 0x0c
    175a:	95 85       	ldd	r25, Z+13	; 0x0d
    175c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <memcpy>
    1760:	ce 01       	movw	r24, r28
    1762:	8e 0d       	add	r24, r14
    1764:	9f 1d       	adc	r25, r15
    1766:	f6 01       	movw	r30, r12
    1768:	24 81       	ldd	r18, Z+4	; 0x04
    176a:	35 81       	ldd	r19, Z+5	; 0x05
    176c:	82 17       	cp	r24, r18
    176e:	93 07       	cpc	r25, r19
    1770:	10 f0       	brcs	.+4      	; 0x1776 <prvWriteBytesToBuffer+0x74>
    1772:	82 1b       	sub	r24, r18
    1774:	93 0b       	sbc	r25, r19
    1776:	f6 01       	movw	r30, r12
    1778:	93 83       	std	Z+3, r25	; 0x03
    177a:	82 83       	std	Z+2, r24	; 0x02
    177c:	c7 01       	movw	r24, r14
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	08 95       	ret

00001794 <prvWriteMessageToBuffer>:
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	1f 92       	push	r1
    17a6:	1f 92       	push	r1
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	7c 01       	movw	r14, r24
    17ae:	6b 01       	movw	r12, r22
    17b0:	5a 83       	std	Y+2, r21	; 0x02
    17b2:	49 83       	std	Y+1, r20	; 0x01
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	c1 f0       	breq	.+48     	; 0x17ea <prvWriteMessageToBuffer+0x56>
    17ba:	fc 01       	movw	r30, r24
    17bc:	86 85       	ldd	r24, Z+14	; 0x0e
    17be:	80 fd       	sbrc	r24, 0
    17c0:	08 c0       	rjmp	.+16     	; 0x17d2 <prvWriteMessageToBuffer+0x3e>
    17c2:	42 17       	cp	r20, r18
    17c4:	53 07       	cpc	r21, r19
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <prvWriteMessageToBuffer+0x36>
    17c8:	9a 01       	movw	r18, r20
    17ca:	3a 83       	std	Y+2, r19	; 0x02
    17cc:	29 83       	std	Y+1, r18	; 0x01
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <prvWriteMessageToBuffer+0x5c>
    17d2:	20 17       	cp	r18, r16
    17d4:	31 07       	cpc	r19, r17
    17d6:	58 f0       	brcs	.+22     	; 0x17ee <prvWriteMessageToBuffer+0x5a>
    17d8:	42 e0       	ldi	r20, 0x02	; 2
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	be 01       	movw	r22, r28
    17de:	6f 5f       	subi	r22, 0xFF	; 255
    17e0:	7f 4f       	sbci	r23, 0xFF	; 255
    17e2:	c7 01       	movw	r24, r14
    17e4:	8e df       	rcall	.-228    	; 0x1702 <prvWriteBytesToBuffer>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <prvWriteMessageToBuffer+0x5c>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <prvWriteMessageToBuffer+0x5c>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	88 23       	and	r24, r24
    17f2:	31 f0       	breq	.+12     	; 0x1800 <prvWriteMessageToBuffer+0x6c>
    17f4:	49 81       	ldd	r20, Y+1	; 0x01
    17f6:	5a 81       	ldd	r21, Y+2	; 0x02
    17f8:	b6 01       	movw	r22, r12
    17fa:	c7 01       	movw	r24, r14
    17fc:	82 df       	rcall	.-252    	; 0x1702 <prvWriteBytesToBuffer>
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <prvWriteMessageToBuffer+0x70>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	08 95       	ret

0000181a <prvReadBytesFromBuffer>:
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	7c 01       	movw	r14, r24
    1830:	5b 01       	movw	r10, r22
    1832:	e9 01       	movw	r28, r18
    1834:	42 17       	cp	r20, r18
    1836:	53 07       	cpc	r21, r19
    1838:	08 f4       	brcc	.+2      	; 0x183c <prvReadBytesFromBuffer+0x22>
    183a:	ea 01       	movw	r28, r20
    183c:	20 97       	sbiw	r28, 0x00	; 0
    183e:	81 f1       	breq	.+96     	; 0x18a0 <prvReadBytesFromBuffer+0x86>
    1840:	f7 01       	movw	r30, r14
    1842:	00 81       	ld	r16, Z
    1844:	11 81       	ldd	r17, Z+1	; 0x01
    1846:	84 81       	ldd	r24, Z+4	; 0x04
    1848:	95 81       	ldd	r25, Z+5	; 0x05
    184a:	80 1b       	sub	r24, r16
    184c:	91 0b       	sbc	r25, r17
    184e:	6e 01       	movw	r12, r28
    1850:	8c 17       	cp	r24, r28
    1852:	9d 07       	cpc	r25, r29
    1854:	08 f4       	brcc	.+2      	; 0x1858 <prvReadBytesFromBuffer+0x3e>
    1856:	6c 01       	movw	r12, r24
    1858:	f7 01       	movw	r30, r14
    185a:	64 85       	ldd	r22, Z+12	; 0x0c
    185c:	75 85       	ldd	r23, Z+13	; 0x0d
    185e:	60 0f       	add	r22, r16
    1860:	71 1f       	adc	r23, r17
    1862:	a6 01       	movw	r20, r12
    1864:	c5 01       	movw	r24, r10
    1866:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <memcpy>
    186a:	cc 16       	cp	r12, r28
    186c:	dd 06       	cpc	r13, r29
    186e:	58 f4       	brcc	.+22     	; 0x1886 <prvReadBytesFromBuffer+0x6c>
    1870:	ae 01       	movw	r20, r28
    1872:	4c 19       	sub	r20, r12
    1874:	5d 09       	sbc	r21, r13
    1876:	f7 01       	movw	r30, r14
    1878:	64 85       	ldd	r22, Z+12	; 0x0c
    187a:	75 85       	ldd	r23, Z+13	; 0x0d
    187c:	c5 01       	movw	r24, r10
    187e:	8c 0d       	add	r24, r12
    1880:	9d 1d       	adc	r25, r13
    1882:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <memcpy>
    1886:	0c 0f       	add	r16, r28
    1888:	1d 1f       	adc	r17, r29
    188a:	f7 01       	movw	r30, r14
    188c:	84 81       	ldd	r24, Z+4	; 0x04
    188e:	95 81       	ldd	r25, Z+5	; 0x05
    1890:	08 17       	cp	r16, r24
    1892:	19 07       	cpc	r17, r25
    1894:	10 f0       	brcs	.+4      	; 0x189a <prvReadBytesFromBuffer+0x80>
    1896:	08 1b       	sub	r16, r24
    1898:	19 0b       	sbc	r17, r25
    189a:	f7 01       	movw	r30, r14
    189c:	11 83       	std	Z+1, r17	; 0x01
    189e:	00 83       	st	Z, r16
    18a0:	ce 01       	movw	r24, r28
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	bf 90       	pop	r11
    18b4:	af 90       	pop	r10
    18b6:	08 95       	ret

000018b8 <prvReadMessageFromBuffer>:
    18b8:	6f 92       	push	r6
    18ba:	7f 92       	push	r7
    18bc:	8f 92       	push	r8
    18be:	9f 92       	push	r9
    18c0:	af 92       	push	r10
    18c2:	bf 92       	push	r11
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	1f 92       	push	r1
    18d6:	1f 92       	push	r1
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	6c 01       	movw	r12, r24
    18de:	4b 01       	movw	r8, r22
    18e0:	5a 01       	movw	r10, r20
    18e2:	79 01       	movw	r14, r18
    18e4:	01 15       	cp	r16, r1
    18e6:	11 05       	cpc	r17, r1
    18e8:	b1 f0       	breq	.+44     	; 0x1916 <prvReadMessageFromBuffer+0x5e>
    18ea:	fc 01       	movw	r30, r24
    18ec:	60 80       	ld	r6, Z
    18ee:	71 80       	ldd	r7, Z+1	; 0x01
    18f0:	a8 01       	movw	r20, r16
    18f2:	be 01       	movw	r22, r28
    18f4:	6f 5f       	subi	r22, 0xFF	; 255
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	90 df       	rcall	.-224    	; 0x181a <prvReadBytesFromBuffer>
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	e0 1a       	sub	r14, r16
    1900:	f1 0a       	sbc	r15, r17
    1902:	a8 16       	cp	r10, r24
    1904:	b9 06       	cpc	r11, r25
    1906:	30 f4       	brcc	.+12     	; 0x1914 <prvReadMessageFromBuffer+0x5c>
    1908:	f6 01       	movw	r30, r12
    190a:	71 82       	std	Z+1, r7	; 0x01
    190c:	60 82       	st	Z, r6
    190e:	a1 2c       	mov	r10, r1
    1910:	b1 2c       	mov	r11, r1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <prvReadMessageFromBuffer+0x5e>
    1914:	5c 01       	movw	r10, r24
    1916:	97 01       	movw	r18, r14
    1918:	a5 01       	movw	r20, r10
    191a:	b4 01       	movw	r22, r8
    191c:	c6 01       	movw	r24, r12
    191e:	7d df       	rcall	.-262    	; 0x181a <prvReadBytesFromBuffer>
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	bf 90       	pop	r11
    1936:	af 90       	pop	r10
    1938:	9f 90       	pop	r9
    193a:	8f 90       	pop	r8
    193c:	7f 90       	pop	r7
    193e:	6f 90       	pop	r6
    1940:	08 95       	ret

00001942 <xStreamBufferGenericCreate>:
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	6b 01       	movw	r12, r22
    1954:	41 30       	cpi	r20, 0x01	; 1
    1956:	11 f4       	brne	.+4      	; 0x195c <xStreamBufferGenericCreate+0x1a>
    1958:	01 e0       	ldi	r16, 0x01	; 1
    195a:	01 c0       	rjmp	.+2      	; 0x195e <xStreamBufferGenericCreate+0x1c>
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	c1 14       	cp	r12, r1
    1960:	d1 04       	cpc	r13, r1
    1962:	19 f4       	brne	.+6      	; 0x196a <xStreamBufferGenericCreate+0x28>
    1964:	cc 24       	eor	r12, r12
    1966:	c3 94       	inc	r12
    1968:	d1 2c       	mov	r13, r1
    196a:	ce 01       	movw	r24, r28
    196c:	40 96       	adiw	r24, 0x10	; 16
    196e:	c8 17       	cp	r28, r24
    1970:	d9 07       	cpc	r29, r25
    1972:	20 f4       	brcc	.+8      	; 0x197c <xStreamBufferGenericCreate+0x3a>
    1974:	21 96       	adiw	r28, 0x01	; 1
    1976:	8f d8       	rcall	.-3810   	; 0xa96 <pvPortMalloc>
    1978:	7c 01       	movw	r14, r24
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <xStreamBufferGenericCreate+0x3e>
    197c:	e1 2c       	mov	r14, r1
    197e:	f1 2c       	mov	r15, r1
    1980:	e1 14       	cp	r14, r1
    1982:	f1 04       	cpc	r15, r1
    1984:	39 f0       	breq	.+14     	; 0x1994 <xStreamBufferGenericCreate+0x52>
    1986:	96 01       	movw	r18, r12
    1988:	ae 01       	movw	r20, r28
    198a:	b7 01       	movw	r22, r14
    198c:	61 5f       	subi	r22, 0xF1	; 241
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	c7 01       	movw	r24, r14
    1992:	a7 de       	rcall	.-690    	; 0x16e2 <prvInitialiseNewStreamBuffer>
    1994:	c7 01       	movw	r24, r14
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	08 95       	ret

000019a6 <xStreamBufferReset>:
    19a6:	0f 93       	push	r16
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	0f 92       	push	r0
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 85       	ldd	r18, Z+8	; 0x08
    19b2:	31 85       	ldd	r19, Z+9	; 0x09
    19b4:	23 2b       	or	r18, r19
    19b6:	71 f4       	brne	.+28     	; 0x19d4 <xStreamBufferReset+0x2e>
    19b8:	22 85       	ldd	r18, Z+10	; 0x0a
    19ba:	33 85       	ldd	r19, Z+11	; 0x0b
    19bc:	23 2b       	or	r18, r19
    19be:	61 f4       	brne	.+24     	; 0x19d8 <xStreamBufferReset+0x32>
    19c0:	26 81       	ldd	r18, Z+6	; 0x06
    19c2:	37 81       	ldd	r19, Z+7	; 0x07
    19c4:	44 81       	ldd	r20, Z+4	; 0x04
    19c6:	55 81       	ldd	r21, Z+5	; 0x05
    19c8:	64 85       	ldd	r22, Z+12	; 0x0c
    19ca:	75 85       	ldd	r23, Z+13	; 0x0d
    19cc:	06 85       	ldd	r16, Z+14	; 0x0e
    19ce:	89 de       	rcall	.-750    	; 0x16e2 <prvInitialiseNewStreamBuffer>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <xStreamBufferReset+0x34>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <xStreamBufferReset+0x34>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <xStreamBufferSpacesAvailable>:
    19e2:	fc 01       	movw	r30, r24
    19e4:	24 81       	ldd	r18, Z+4	; 0x04
    19e6:	35 81       	ldd	r19, Z+5	; 0x05
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	42 81       	ldd	r20, Z+2	; 0x02
    19f2:	53 81       	ldd	r21, Z+3	; 0x03
    19f4:	84 1b       	sub	r24, r20
    19f6:	95 0b       	sbc	r25, r21
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	82 17       	cp	r24, r18
    19fc:	93 07       	cpc	r25, r19
    19fe:	10 f0       	brcs	.+4      	; 0x1a04 <xStreamBufferSpacesAvailable+0x22>
    1a00:	82 1b       	sub	r24, r18
    1a02:	93 0b       	sbc	r25, r19
    1a04:	08 95       	ret

00001a06 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1a06:	2f 92       	push	r2
    1a08:	3f 92       	push	r3
    1a0a:	4f 92       	push	r4
    1a0c:	5f 92       	push	r5
    1a0e:	6f 92       	push	r6
    1a10:	7f 92       	push	r7
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	4c 01       	movw	r8, r24
    1a3c:	7b 87       	std	Y+11, r23	; 0x0b
    1a3e:	6a 87       	std	Y+10, r22	; 0x0a
    1a40:	1a 01       	movw	r2, r20
    1a42:	0e 83       	std	Y+6, r16	; 0x06
    1a44:	1f 83       	std	Y+7, r17	; 0x07
    1a46:	28 87       	std	Y+8, r18	; 0x08
    1a48:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	84 81       	ldd	r24, Z+4	; 0x04
    1a4e:	95 81       	ldd	r25, Z+5	; 0x05
    1a50:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a52:	26 85       	ldd	r18, Z+14	; 0x0e
    1a54:	20 ff       	sbrs	r18, 0
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a58:	2a 01       	movw	r4, r20
    1a5a:	f2 e0       	ldi	r31, 0x02	; 2
    1a5c:	4f 0e       	add	r4, r31
    1a5e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a60:	84 15       	cp	r24, r4
    1a62:	95 05       	cpc	r25, r5
    1a64:	58 f4       	brcc	.+22     	; 0x1a7c <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1a66:	1e 82       	std	Y+6, r1	; 0x06
    1a68:	1f 82       	std	Y+7, r1	; 0x07
    1a6a:	18 86       	std	Y+8, r1	; 0x08
    1a6c:	19 86       	std	Y+9, r1	; 0x09
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a70:	84 17       	cp	r24, r20
    1a72:	95 07       	cpc	r25, r21
    1a74:	10 f0       	brcs	.+4      	; 0x1a7a <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1a76:	2a 01       	movw	r4, r20
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1a7a:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	a8 85       	ldd	r26, Y+8	; 0x08
    1a82:	b9 85       	ldd	r27, Y+9	; 0x09
    1a84:	89 2b       	or	r24, r25
    1a86:	8a 2b       	or	r24, r26
    1a88:	8b 2b       	or	r24, r27
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <xStreamBufferSend+0x88>
    1a8c:	38 c0       	rjmp	.+112    	; 0x1afe <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	0e 94 18 16 	call	0x2c30	; 0x2c30 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a9c:	c4 01       	movw	r24, r8
    1a9e:	a1 df       	rcall	.-190    	; 0x19e2 <xStreamBufferSpacesAvailable>
    1aa0:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1aa2:	84 15       	cp	r24, r4
    1aa4:	95 05       	cpc	r25, r5
    1aa6:	40 f5       	brcc	.+80     	; 0x1af8 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 02 1b 	call	0x3604	; 0x3604 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1ab2:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <xTaskGetCurrentTaskHandle>
    1ab6:	f4 01       	movw	r30, r8
    1ab8:	93 87       	std	Z+11, r25	; 0x0b
    1aba:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1ac0:	ae 80       	ldd	r10, Y+6	; 0x06
    1ac2:	bf 80       	ldd	r11, Y+7	; 0x07
    1ac4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac6:	d9 84       	ldd	r13, Y+9	; 0x09
    1ac8:	e1 2c       	mov	r14, r1
    1aca:	f1 2c       	mov	r15, r1
    1acc:	00 e0       	ldi	r16, 0x00	; 0
    1ace:	10 e0       	ldi	r17, 0x00	; 0
    1ad0:	98 01       	movw	r18, r16
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	ba 01       	movw	r22, r20
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	0e 94 41 18 	call	0x3082	; 0x3082 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1ade:	f4 01       	movw	r30, r8
    1ae0:	13 86       	std	Z+11, r1	; 0x0b
    1ae2:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1ae4:	be 01       	movw	r22, r28
    1ae6:	6a 5f       	subi	r22, 0xFA	; 250
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <xTaskCheckForTimeOut>
    1af2:	88 23       	and	r24, r24
    1af4:	81 f2       	breq	.-96     	; 0x1a96 <xStreamBufferSend+0x90>
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
                    break;
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1afe:	61 2c       	mov	r6, r1
    1b00:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1b02:	61 14       	cp	r6, r1
    1b04:	71 04       	cpc	r7, r1
    1b06:	19 f4       	brne	.+6      	; 0x1b0e <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b08:	c4 01       	movw	r24, r8
    1b0a:	6b df       	rcall	.-298    	; 0x19e2 <xStreamBufferSpacesAvailable>
    1b0c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b0e:	82 01       	movw	r16, r4
    1b10:	93 01       	movw	r18, r6
    1b12:	a1 01       	movw	r20, r2
    1b14:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b16:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b18:	c4 01       	movw	r24, r8
    1b1a:	3c de       	rcall	.-904    	; 0x1794 <prvWriteMessageToBuffer>
    1b1c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1b1e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b20:	e9 f0       	breq	.+58     	; 0x1b5c <xStreamBufferSend+0x156>
    1b22:	c4 01       	movw	r24, r8
    1b24:	cb dd       	rcall	.-1130   	; 0x16bc <prvBytesInBuffer>
    1b26:	f4 01       	movw	r30, r8
    1b28:	26 81       	ldd	r18, Z+6	; 0x06
    1b2a:	37 81       	ldd	r19, Z+7	; 0x07
    1b2c:	82 17       	cp	r24, r18
    1b2e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1b30:	a8 f0       	brcs	.+42     	; 0x1b5c <xStreamBufferSend+0x156>
    1b32:	91 d3       	rcall	.+1826   	; 0x2256 <vTaskSuspendAll>
    1b34:	f4 01       	movw	r30, r8
    1b36:	80 85       	ldd	r24, Z+8	; 0x08
    1b38:	91 85       	ldd	r25, Z+9	; 0x09
    1b3a:	89 2b       	or	r24, r25
    1b3c:	71 f0       	breq	.+28     	; 0x1b5a <xStreamBufferSend+0x154>
    1b3e:	80 85       	ldd	r24, Z+8	; 0x08
    1b40:	91 85       	ldd	r25, Z+9	; 0x09
    1b42:	e1 2c       	mov	r14, r1
    1b44:	f1 2c       	mov	r15, r1
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	a9 01       	movw	r20, r18
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <xTaskGenericNotify>
    1b54:	f4 01       	movw	r30, r8
    1b56:	11 86       	std	Z+9, r1	; 0x09
    1b58:	10 86       	std	Z+8, r1	; 0x08
    1b5a:	bd d4       	rcall	.+2426   	; 0x24d6 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1b5c:	c6 01       	movw	r24, r12
    1b5e:	2b 96       	adiw	r28, 0x0b	; 11
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	9f 90       	pop	r9
    1b80:	8f 90       	pop	r8
    1b82:	7f 90       	pop	r7
    1b84:	6f 90       	pop	r6
    1b86:	5f 90       	pop	r5
    1b88:	4f 90       	pop	r4
    1b8a:	3f 90       	pop	r3
    1b8c:	2f 90       	pop	r2
    1b8e:	08 95       	ret

00001b90 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	7b 01       	movw	r14, r22
    1ba8:	5a 01       	movw	r10, r20
    1baa:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bae:	80 ff       	sbrs	r24, 0
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1bb2:	8a 01       	movw	r16, r20
    1bb4:	0e 5f       	subi	r16, 0xFE	; 254
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1bba:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	11 df       	rcall	.-478    	; 0x19e2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	a5 01       	movw	r20, r10
    1bc4:	b7 01       	movw	r22, r14
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	e5 dd       	rcall	.-1078   	; 0x1794 <prvWriteMessageToBuffer>
    1bca:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1bcc:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1bce:	c1 f0       	breq	.+48     	; 0x1c00 <xStreamBufferSendFromISR+0x70>
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	74 dd       	rcall	.-1304   	; 0x16bc <prvBytesInBuffer>
    1bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd8:	82 17       	cp	r24, r18
    1bda:	93 07       	cpc	r25, r19
    1bdc:	88 f0       	brcs	.+34     	; 0x1c00 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1bde:	88 85       	ldd	r24, Y+8	; 0x08
    1be0:	99 85       	ldd	r25, Y+9	; 0x09
    1be2:	89 2b       	or	r24, r25
    1be4:	69 f0       	breq	.+26     	; 0x1c00 <xStreamBufferSendFromISR+0x70>
    1be6:	88 85       	ldd	r24, Y+8	; 0x08
    1be8:	99 85       	ldd	r25, Y+9	; 0x09
    1bea:	e1 2c       	mov	r14, r1
    1bec:	f1 2c       	mov	r15, r1
    1bee:	00 e0       	ldi	r16, 0x00	; 0
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <xTaskGenericNotifyFromISR>
    1bfc:	19 86       	std	Y+9, r1	; 0x09
    1bfe:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1c00:	c5 01       	movw	r24, r10
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	bf 90       	pop	r11
    1c14:	af 90       	pop	r10
    1c16:	08 95       	ret

00001c18 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1c18:	4f 92       	push	r4
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	ec 01       	movw	r28, r24
    1c3a:	2b 01       	movw	r4, r22
    1c3c:	3a 01       	movw	r6, r20
    1c3e:	58 01       	movw	r10, r16
    1c40:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c44:	80 ff       	sbrs	r24, 0
    1c46:	05 c0       	rjmp	.+10     	; 0x1c52 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c48:	68 94       	set
    1c4a:	88 24       	eor	r8, r8
    1c4c:	81 f8       	bld	r8, 1
    1c4e:	91 2c       	mov	r9, r1
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1c52:	81 2c       	mov	r8, r1
    1c54:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c56:	a1 14       	cp	r10, r1
    1c58:	b1 04       	cpc	r11, r1
    1c5a:	c1 04       	cpc	r12, r1
    1c5c:	d1 04       	cpc	r13, r1
    1c5e:	41 f1       	breq	.+80     	; 0x1cb0 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c66:	ce 01       	movw	r24, r28
    1c68:	29 dd       	rcall	.-1454   	; 0x16bc <prvBytesInBuffer>
    1c6a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c6c:	88 16       	cp	r8, r24
    1c6e:	99 06       	cpc	r9, r25
    1c70:	48 f0       	brcs	.+18     	; 0x1c84 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 02 1b 	call	0x3604	; 0x3604 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1c7c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <xTaskGetCurrentTaskHandle>
    1c80:	99 87       	std	Y+9, r25	; 0x09
    1c82:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c88:	8e 14       	cp	r8, r14
    1c8a:	9f 04       	cpc	r9, r15
    1c8c:	a0 f0       	brcs	.+40     	; 0x1cb6 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1c8e:	e1 2c       	mov	r14, r1
    1c90:	f1 2c       	mov	r15, r1
    1c92:	00 e0       	ldi	r16, 0x00	; 0
    1c94:	10 e0       	ldi	r17, 0x00	; 0
    1c96:	98 01       	movw	r18, r16
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	ba 01       	movw	r22, r20
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	0e 94 41 18 	call	0x3082	; 0x3082 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1ca4:	19 86       	std	Y+9, r1	; 0x09
    1ca6:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ca8:	ce 01       	movw	r24, r28
    1caa:	08 dd       	rcall	.-1520   	; 0x16bc <prvBytesInBuffer>
    1cac:	7c 01       	movw	r14, r24
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	04 dd       	rcall	.-1528   	; 0x16bc <prvBytesInBuffer>
    1cb4:	7c 01       	movw	r14, r24
    1cb6:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1cb8:	9f 04       	cpc	r9, r15
    1cba:	e8 f4       	brcc	.+58     	; 0x1cf6 <xStreamBufferReceive+0xde>
    1cbc:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1cbe:	97 01       	movw	r18, r14
    1cc0:	a3 01       	movw	r20, r6
    1cc2:	b2 01       	movw	r22, r4
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	f8 dd       	rcall	.-1040   	; 0x18b8 <prvReadMessageFromBuffer>
    1cc8:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1cca:	89 2b       	or	r24, r25
    1ccc:	b1 f0       	breq	.+44     	; 0x1cfa <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1cce:	c3 d2       	rcall	.+1414   	; 0x2256 <vTaskSuspendAll>
    1cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cd4:	89 2b       	or	r24, r25
    1cd6:	69 f0       	breq	.+26     	; 0x1cf2 <xStreamBufferReceive+0xda>
    1cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cdc:	e1 2c       	mov	r14, r1
    1cde:	f1 2c       	mov	r15, r1
    1ce0:	00 e0       	ldi	r16, 0x00	; 0
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	a9 01       	movw	r20, r18
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <xTaskGenericNotify>
    1cee:	1b 86       	std	Y+11, r1	; 0x0b
    1cf0:	1a 86       	std	Y+10, r1	; 0x0a
    1cf2:	f1 d3       	rcall	.+2018   	; 0x24d6 <xTaskResumeAll>
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <xStreamBufferReceive+0xe2>
    1cf6:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	df 90       	pop	r13
    1d0a:	cf 90       	pop	r12
    1d0c:	bf 90       	pop	r11
    1d0e:	af 90       	pop	r10
    1d10:	9f 90       	pop	r9
    1d12:	8f 90       	pop	r8
    1d14:	7f 90       	pop	r7
    1d16:	6f 90       	pop	r6
    1d18:	5f 90       	pop	r5
    1d1a:	4f 90       	pop	r4
    1d1c:	08 95       	ret

00001d1e <prvResetNextTaskUnblockTime>:
    1d1e:	e0 91 43 16 	lds	r30, 0x1643	; 0x801643 <pxDelayedTaskList>
    1d22:	f0 91 44 16 	lds	r31, 0x1644	; 0x801644 <pxDelayedTaskList+0x1>
    1d26:	80 81       	ld	r24, Z
    1d28:	81 11       	cpse	r24, r1
    1d2a:	0c c0       	rjmp	.+24     	; 0x1d44 <prvResetNextTaskUnblockTime+0x26>
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	9f ef       	ldi	r25, 0xFF	; 255
    1d30:	dc 01       	movw	r26, r24
    1d32:	80 93 0d 16 	sts	0x160D, r24	; 0x80160d <xNextTaskUnblockTime>
    1d36:	90 93 0e 16 	sts	0x160E, r25	; 0x80160e <xNextTaskUnblockTime+0x1>
    1d3a:	a0 93 0f 16 	sts	0x160F, r26	; 0x80160f <xNextTaskUnblockTime+0x2>
    1d3e:	b0 93 10 16 	sts	0x1610, r27	; 0x801610 <xNextTaskUnblockTime+0x3>
    1d42:	08 95       	ret
    1d44:	e0 91 43 16 	lds	r30, 0x1643	; 0x801643 <pxDelayedTaskList>
    1d48:	f0 91 44 16 	lds	r31, 0x1644	; 0x801644 <pxDelayedTaskList+0x1>
    1d4c:	07 80       	ldd	r0, Z+7	; 0x07
    1d4e:	f0 85       	ldd	r31, Z+8	; 0x08
    1d50:	e0 2d       	mov	r30, r0
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	a2 81       	ldd	r26, Z+2	; 0x02
    1d58:	b3 81       	ldd	r27, Z+3	; 0x03
    1d5a:	80 93 0d 16 	sts	0x160D, r24	; 0x80160d <xNextTaskUnblockTime>
    1d5e:	90 93 0e 16 	sts	0x160E, r25	; 0x80160e <xNextTaskUnblockTime+0x1>
    1d62:	a0 93 0f 16 	sts	0x160F, r26	; 0x80160f <xNextTaskUnblockTime+0x2>
    1d66:	b0 93 10 16 	sts	0x1610, r27	; 0x801610 <xNextTaskUnblockTime+0x3>
    1d6a:	08 95       	ret

00001d6c <prvDeleteTCB>:
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	ec 01       	movw	r28, r24
    1d72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d76:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <vPortFree>
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <vPortFree>
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <prvInitialiseNewTask>:
    1d86:	4f 92       	push	r4
    1d88:	5f 92       	push	r5
    1d8a:	6f 92       	push	r6
    1d8c:	7f 92       	push	r7
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	2c 01       	movw	r4, r24
    1da6:	5b 01       	movw	r10, r22
    1da8:	4a 01       	movw	r8, r20
    1daa:	39 01       	movw	r6, r18
    1dac:	e6 01       	movw	r28, r12
    1dae:	65 ea       	ldi	r22, 0xA5	; 165
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db6:	0e 94 dd 31 	call	0x63ba	; 0x63ba <memset>
    1dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbe:	21 e0       	ldi	r18, 0x01	; 1
    1dc0:	82 1a       	sub	r8, r18
    1dc2:	91 08       	sbc	r9, r1
    1dc4:	88 0e       	add	r8, r24
    1dc6:	99 1e       	adc	r9, r25
    1dc8:	a1 14       	cp	r10, r1
    1dca:	b1 04       	cpc	r11, r1
    1dcc:	89 f4       	brne	.+34     	; 0x1df0 <prvInitialiseNewTask+0x6a>
    1dce:	15 c0       	rjmp	.+42     	; 0x1dfa <prvInitialiseNewTask+0x74>
    1dd0:	82 2f       	mov	r24, r18
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	f5 01       	movw	r30, r10
    1dd6:	e8 0f       	add	r30, r24
    1dd8:	f9 1f       	adc	r31, r25
    1dda:	30 81       	ld	r19, Z
    1ddc:	de 01       	movw	r26, r28
    1dde:	a8 0f       	add	r26, r24
    1de0:	b9 1f       	adc	r27, r25
    1de2:	5d 96       	adiw	r26, 0x1d	; 29
    1de4:	3c 93       	st	X, r19
    1de6:	80 81       	ld	r24, Z
    1de8:	88 23       	and	r24, r24
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <prvInitialiseNewTask+0x70>
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <prvInitialiseNewTask+0x6c>
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	20 31       	cpi	r18, 0x10	; 16
    1df4:	68 f3       	brcs	.-38     	; 0x1dd0 <prvInitialiseNewTask+0x4a>
    1df6:	1c a6       	std	Y+44, r1	; 0x2c
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <prvInitialiseNewTask+0x76>
    1dfa:	1d 8e       	std	Y+29, r1	; 0x1d
    1dfc:	0a 30       	cpi	r16, 0x0A	; 10
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <prvInitialiseNewTask+0x7c>
    1e00:	09 e0       	ldi	r16, 0x09	; 9
    1e02:	0a 8f       	std	Y+26, r16	; 0x1a
    1e04:	0d a7       	std	Y+45, r16	; 0x2d
    1e06:	1e a6       	std	Y+46, r1	; 0x2e
    1e08:	ce 01       	movw	r24, r28
    1e0a:	02 96       	adiw	r24, 0x02	; 2
    1e0c:	0e 94 42 06 	call	0xc84	; 0xc84 <vListInitialiseItem>
    1e10:	ce 01       	movw	r24, r28
    1e12:	0e 96       	adiw	r24, 0x0e	; 14
    1e14:	0e 94 42 06 	call	0xc84	; 0xc84 <vListInitialiseItem>
    1e18:	db 87       	std	Y+11, r29	; 0x0b
    1e1a:	ca 87       	std	Y+10, r28	; 0x0a
    1e1c:	8a e0       	ldi	r24, 0x0A	; 10
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	80 1b       	sub	r24, r16
    1e26:	91 09       	sbc	r25, r1
    1e28:	a1 09       	sbc	r26, r1
    1e2a:	b1 09       	sbc	r27, r1
    1e2c:	8e 87       	std	Y+14, r24	; 0x0e
    1e2e:	9f 87       	std	Y+15, r25	; 0x0f
    1e30:	a8 8b       	std	Y+16, r26	; 0x10
    1e32:	b9 8b       	std	Y+17, r27	; 0x11
    1e34:	df 8b       	std	Y+23, r29	; 0x17
    1e36:	ce 8b       	std	Y+22, r28	; 0x16
    1e38:	84 e0       	ldi	r24, 0x04	; 4
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	bf 96       	adiw	r30, 0x2f	; 47
    1e3e:	df 01       	movw	r26, r30
    1e40:	1d 92       	st	X+, r1
    1e42:	8a 95       	dec	r24
    1e44:	e9 f7       	brne	.-6      	; 0x1e40 <prvInitialiseNewTask+0xba>
    1e46:	1b aa       	std	Y+51, r1	; 0x33
    1e48:	a3 01       	movw	r20, r6
    1e4a:	b2 01       	movw	r22, r4
    1e4c:	c4 01       	movw	r24, r8
    1e4e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <pxPortInitialiseStack>
    1e52:	99 83       	std	Y+1, r25	; 0x01
    1e54:	88 83       	st	Y, r24
    1e56:	e1 14       	cp	r14, r1
    1e58:	f1 04       	cpc	r15, r1
    1e5a:	19 f0       	breq	.+6      	; 0x1e62 <prvInitialiseNewTask+0xdc>
    1e5c:	f7 01       	movw	r30, r14
    1e5e:	d1 83       	std	Z+1, r29	; 0x01
    1e60:	c0 83       	st	Z, r28
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	df 90       	pop	r13
    1e6e:	cf 90       	pop	r12
    1e70:	bf 90       	pop	r11
    1e72:	af 90       	pop	r10
    1e74:	9f 90       	pop	r9
    1e76:	8f 90       	pop	r8
    1e78:	7f 90       	pop	r7
    1e7a:	6f 90       	pop	r6
    1e7c:	5f 90       	pop	r5
    1e7e:	4f 90       	pop	r4
    1e80:	08 95       	ret

00001e82 <prvInitialiseTaskLists>:
    1e82:	cf 93       	push	r28
    1e84:	c0 e0       	ldi	r28, 0x00	; 0
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <prvInitialiseTaskLists+0x18>
    1e88:	2b e0       	ldi	r18, 0x0B	; 11
    1e8a:	c2 9f       	mul	r28, r18
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	85 5a       	subi	r24, 0xA5	; 165
    1e92:	99 4e       	sbci	r25, 0xE9	; 233
    1e94:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    1e98:	cf 5f       	subi	r28, 0xFF	; 255
    1e9a:	ca 30       	cpi	r28, 0x0A	; 10
    1e9c:	a8 f3       	brcs	.-22     	; 0x1e88 <prvInitialiseTaskLists+0x6>
    1e9e:	80 e5       	ldi	r24, 0x50	; 80
    1ea0:	96 e1       	ldi	r25, 0x16	; 22
    1ea2:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    1ea6:	85 e4       	ldi	r24, 0x45	; 69
    1ea8:	96 e1       	ldi	r25, 0x16	; 22
    1eaa:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    1eae:	86 e3       	ldi	r24, 0x36	; 54
    1eb0:	96 e1       	ldi	r25, 0x16	; 22
    1eb2:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    1eb6:	8b e2       	ldi	r24, 0x2B	; 43
    1eb8:	96 e1       	ldi	r25, 0x16	; 22
    1eba:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    1ebe:	8f e1       	ldi	r24, 0x1F	; 31
    1ec0:	96 e1       	ldi	r25, 0x16	; 22
    1ec2:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    1ec6:	80 e5       	ldi	r24, 0x50	; 80
    1ec8:	96 e1       	ldi	r25, 0x16	; 22
    1eca:	90 93 44 16 	sts	0x1644, r25	; 0x801644 <pxDelayedTaskList+0x1>
    1ece:	80 93 43 16 	sts	0x1643, r24	; 0x801643 <pxDelayedTaskList>
    1ed2:	85 e4       	ldi	r24, 0x45	; 69
    1ed4:	96 e1       	ldi	r25, 0x16	; 22
    1ed6:	90 93 42 16 	sts	0x1642, r25	; 0x801642 <pxOverflowDelayedTaskList+0x1>
    1eda:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <pxOverflowDelayedTaskList>
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <prvAddNewTaskToReadyList>:
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	ec 01       	movw	r28, r24
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	0f 92       	push	r0
    1eee:	80 91 1e 16 	lds	r24, 0x161E	; 0x80161e <uxCurrentNumberOfTasks>
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	80 93 1e 16 	sts	0x161E, r24	; 0x80161e <uxCurrentNumberOfTasks>
    1ef8:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    1efc:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    1f00:	89 2b       	or	r24, r25
    1f02:	51 f4       	brne	.+20     	; 0x1f18 <prvAddNewTaskToReadyList+0x36>
    1f04:	d0 93 ca 16 	sts	0x16CA, r29	; 0x8016ca <pxCurrentTCB+0x1>
    1f08:	c0 93 c9 16 	sts	0x16C9, r28	; 0x8016c9 <pxCurrentTCB>
    1f0c:	80 91 1e 16 	lds	r24, 0x161E	; 0x80161e <uxCurrentNumberOfTasks>
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 f4       	brne	.+36     	; 0x1f38 <prvAddNewTaskToReadyList+0x56>
    1f14:	b6 df       	rcall	.-148    	; 0x1e82 <prvInitialiseTaskLists>
    1f16:	10 c0       	rjmp	.+32     	; 0x1f38 <prvAddNewTaskToReadyList+0x56>
    1f18:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <xSchedulerRunning>
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	0c c0       	rjmp	.+24     	; 0x1f38 <prvAddNewTaskToReadyList+0x56>
    1f20:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    1f24:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    1f28:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f2c:	89 17       	cp	r24, r25
    1f2e:	20 f0       	brcs	.+8      	; 0x1f38 <prvAddNewTaskToReadyList+0x56>
    1f30:	d0 93 ca 16 	sts	0x16CA, r29	; 0x8016ca <pxCurrentTCB+0x1>
    1f34:	c0 93 c9 16 	sts	0x16C9, r28	; 0x8016c9 <pxCurrentTCB>
    1f38:	80 91 11 16 	lds	r24, 0x1611	; 0x801611 <uxTaskNumber>
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	80 93 11 16 	sts	0x1611, r24	; 0x801611 <uxTaskNumber>
    1f42:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f44:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    1f48:	8e 17       	cp	r24, r30
    1f4a:	10 f4       	brcc	.+4      	; 0x1f50 <prvAddNewTaskToReadyList+0x6e>
    1f4c:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <uxTopReadyPriority>
    1f50:	8b e0       	ldi	r24, 0x0B	; 11
    1f52:	8e 9f       	mul	r24, r30
    1f54:	f0 01       	movw	r30, r0
    1f56:	11 24       	eor	r1, r1
    1f58:	e5 5a       	subi	r30, 0xA5	; 165
    1f5a:	f9 4e       	sbci	r31, 0xE9	; 233
    1f5c:	01 80       	ldd	r0, Z+1	; 0x01
    1f5e:	f2 81       	ldd	r31, Z+2	; 0x02
    1f60:	e0 2d       	mov	r30, r0
    1f62:	ff 83       	std	Y+7, r31	; 0x07
    1f64:	ee 83       	std	Y+6, r30	; 0x06
    1f66:	26 81       	ldd	r18, Z+6	; 0x06
    1f68:	37 81       	ldd	r19, Z+7	; 0x07
    1f6a:	39 87       	std	Y+9, r19	; 0x09
    1f6c:	28 87       	std	Y+8, r18	; 0x08
    1f6e:	a6 81       	ldd	r26, Z+6	; 0x06
    1f70:	b7 81       	ldd	r27, Z+7	; 0x07
    1f72:	9e 01       	movw	r18, r28
    1f74:	2e 5f       	subi	r18, 0xFE	; 254
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	15 96       	adiw	r26, 0x05	; 5
    1f7a:	3c 93       	st	X, r19
    1f7c:	2e 93       	st	-X, r18
    1f7e:	14 97       	sbiw	r26, 0x04	; 4
    1f80:	37 83       	std	Z+7, r19	; 0x07
    1f82:	26 83       	std	Z+6, r18	; 0x06
    1f84:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f86:	8e 9f       	mul	r24, r30
    1f88:	f0 01       	movw	r30, r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	e5 5a       	subi	r30, 0xA5	; 165
    1f8e:	f9 4e       	sbci	r31, 0xE9	; 233
    1f90:	fd 87       	std	Y+13, r31	; 0x0d
    1f92:	ec 87       	std	Y+12, r30	; 0x0c
    1f94:	80 81       	ld	r24, Z
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	80 83       	st	Z, r24
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <xSchedulerRunning>
    1fa2:	88 23       	and	r24, r24
    1fa4:	51 f0       	breq	.+20     	; 0x1fba <prvAddNewTaskToReadyList+0xd8>
    1fa6:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    1faa:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    1fae:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fb2:	98 17       	cp	r25, r24
    1fb4:	10 f4       	brcc	.+4      	; 0x1fba <prvAddNewTaskToReadyList+0xd8>
    1fb6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <prvCheckTasksWaitingTermination>:
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	1b c0       	rjmp	.+54     	; 0x1ffc <prvCheckTasksWaitingTermination+0x3c>
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	0f 92       	push	r0
    1fcc:	e0 91 32 16 	lds	r30, 0x1632	; 0x801632 <xTasksWaitingTermination+0x7>
    1fd0:	f0 91 33 16 	lds	r31, 0x1633	; 0x801633 <xTasksWaitingTermination+0x8>
    1fd4:	c0 85       	ldd	r28, Z+8	; 0x08
    1fd6:	d1 85       	ldd	r29, Z+9	; 0x09
    1fd8:	ce 01       	movw	r24, r28
    1fda:	02 96       	adiw	r24, 0x02	; 2
    1fdc:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
    1fe0:	80 91 1e 16 	lds	r24, 0x161E	; 0x80161e <uxCurrentNumberOfTasks>
    1fe4:	81 50       	subi	r24, 0x01	; 1
    1fe6:	80 93 1e 16 	sts	0x161E, r24	; 0x80161e <uxCurrentNumberOfTasks>
    1fea:	80 91 2a 16 	lds	r24, 0x162A	; 0x80162a <uxDeletedTasksWaitingCleanUp>
    1fee:	81 50       	subi	r24, 0x01	; 1
    1ff0:	80 93 2a 16 	sts	0x162A, r24	; 0x80162a <uxDeletedTasksWaitingCleanUp>
    1ff4:	0f 90       	pop	r0
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	b8 de       	rcall	.-656    	; 0x1d6c <prvDeleteTCB>
    1ffc:	80 91 2a 16 	lds	r24, 0x162A	; 0x80162a <uxDeletedTasksWaitingCleanUp>
    2000:	81 11       	cpse	r24, r1
    2002:	e1 cf       	rjmp	.-62     	; 0x1fc6 <prvCheckTasksWaitingTermination+0x6>
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	08 95       	ret

0000200a <prvAddCurrentTaskToDelayedList>:
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	6b 01       	movw	r12, r22
    2020:	7c 01       	movw	r14, r24
    2022:	c4 2f       	mov	r28, r20
    2024:	80 90 1a 16 	lds	r8, 0x161A	; 0x80161a <xTickCount>
    2028:	90 90 1b 16 	lds	r9, 0x161B	; 0x80161b <xTickCount+0x1>
    202c:	a0 90 1c 16 	lds	r10, 0x161C	; 0x80161c <xTickCount+0x2>
    2030:	b0 90 1d 16 	lds	r11, 0x161D	; 0x80161d <xTickCount+0x3>
    2034:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2038:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    203c:	02 96       	adiw	r24, 0x02	; 2
    203e:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	c8 16       	cp	r12, r24
    2046:	d8 06       	cpc	r13, r24
    2048:	e8 06       	cpc	r14, r24
    204a:	f8 06       	cpc	r15, r24
    204c:	b1 f5       	brne	.+108    	; 0x20ba <prvAddCurrentTaskToDelayedList+0xb0>
    204e:	cc 23       	and	r28, r28
    2050:	a1 f1       	breq	.+104    	; 0x20ba <prvAddCurrentTaskToDelayedList+0xb0>
    2052:	ef e1       	ldi	r30, 0x1F	; 31
    2054:	f6 e1       	ldi	r31, 0x16	; 22
    2056:	a1 81       	ldd	r26, Z+1	; 0x01
    2058:	b2 81       	ldd	r27, Z+2	; 0x02
    205a:	c0 91 c9 16 	lds	r28, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    205e:	d0 91 ca 16 	lds	r29, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2062:	bf 83       	std	Y+7, r27	; 0x07
    2064:	ae 83       	std	Y+6, r26	; 0x06
    2066:	c0 91 c9 16 	lds	r28, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    206a:	d0 91 ca 16 	lds	r29, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    206e:	16 96       	adiw	r26, 0x06	; 6
    2070:	8d 91       	ld	r24, X+
    2072:	9c 91       	ld	r25, X
    2074:	17 97       	sbiw	r26, 0x07	; 7
    2076:	99 87       	std	Y+9, r25	; 0x09
    2078:	88 87       	std	Y+8, r24	; 0x08
    207a:	16 96       	adiw	r26, 0x06	; 6
    207c:	cd 91       	ld	r28, X+
    207e:	dc 91       	ld	r29, X
    2080:	17 97       	sbiw	r26, 0x07	; 7
    2082:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2086:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    208a:	02 96       	adiw	r24, 0x02	; 2
    208c:	9d 83       	std	Y+5, r25	; 0x05
    208e:	8c 83       	std	Y+4, r24	; 0x04
    2090:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2094:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2098:	02 96       	adiw	r24, 0x02	; 2
    209a:	17 96       	adiw	r26, 0x07	; 7
    209c:	9c 93       	st	X, r25
    209e:	8e 93       	st	-X, r24
    20a0:	16 97       	sbiw	r26, 0x06	; 6
    20a2:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    20a6:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    20aa:	1d 96       	adiw	r26, 0x0d	; 13
    20ac:	fc 93       	st	X, r31
    20ae:	ee 93       	st	-X, r30
    20b0:	1c 97       	sbiw	r26, 0x0c	; 12
    20b2:	80 81       	ld	r24, Z
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	80 83       	st	Z, r24
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <prvAddCurrentTaskToDelayedList+0x12e>
    20ba:	c8 0c       	add	r12, r8
    20bc:	d9 1c       	adc	r13, r9
    20be:	ea 1c       	adc	r14, r10
    20c0:	fb 1c       	adc	r15, r11
    20c2:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    20c6:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    20ca:	c2 82       	std	Z+2, r12	; 0x02
    20cc:	d3 82       	std	Z+3, r13	; 0x03
    20ce:	e4 82       	std	Z+4, r14	; 0x04
    20d0:	f5 82       	std	Z+5, r15	; 0x05
    20d2:	c8 14       	cp	r12, r8
    20d4:	d9 04       	cpc	r13, r9
    20d6:	ea 04       	cpc	r14, r10
    20d8:	fb 04       	cpc	r15, r11
    20da:	68 f4       	brcc	.+26     	; 0x20f6 <prvAddCurrentTaskToDelayedList+0xec>
    20dc:	60 91 c9 16 	lds	r22, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    20e0:	70 91 ca 16 	lds	r23, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    20e4:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxOverflowDelayedTaskList>
    20e8:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <pxOverflowDelayedTaskList+0x1>
    20ec:	6e 5f       	subi	r22, 0xFE	; 254
    20ee:	7f 4f       	sbci	r23, 0xFF	; 255
    20f0:	0e 94 46 06 	call	0xc8c	; 0xc8c <vListInsert>
    20f4:	21 c0       	rjmp	.+66     	; 0x2138 <prvAddCurrentTaskToDelayedList+0x12e>
    20f6:	60 91 c9 16 	lds	r22, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    20fa:	70 91 ca 16 	lds	r23, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    20fe:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <pxDelayedTaskList>
    2102:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <pxDelayedTaskList+0x1>
    2106:	6e 5f       	subi	r22, 0xFE	; 254
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	0e 94 46 06 	call	0xc8c	; 0xc8c <vListInsert>
    210e:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <xNextTaskUnblockTime>
    2112:	90 91 0e 16 	lds	r25, 0x160E	; 0x80160e <xNextTaskUnblockTime+0x1>
    2116:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <xNextTaskUnblockTime+0x2>
    211a:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <xNextTaskUnblockTime+0x3>
    211e:	c8 16       	cp	r12, r24
    2120:	d9 06       	cpc	r13, r25
    2122:	ea 06       	cpc	r14, r26
    2124:	fb 06       	cpc	r15, r27
    2126:	40 f4       	brcc	.+16     	; 0x2138 <prvAddCurrentTaskToDelayedList+0x12e>
    2128:	c0 92 0d 16 	sts	0x160D, r12	; 0x80160d <xNextTaskUnblockTime>
    212c:	d0 92 0e 16 	sts	0x160E, r13	; 0x80160e <xNextTaskUnblockTime+0x1>
    2130:	e0 92 0f 16 	sts	0x160F, r14	; 0x80160f <xNextTaskUnblockTime+0x2>
    2134:	f0 92 10 16 	sts	0x1610, r15	; 0x801610 <xNextTaskUnblockTime+0x3>
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	bf 90       	pop	r11
    2146:	af 90       	pop	r10
    2148:	9f 90       	pop	r9
    214a:	8f 90       	pop	r8
    214c:	08 95       	ret

0000214e <xTaskCreate>:
    214e:	2f 92       	push	r2
    2150:	3f 92       	push	r3
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	3c 01       	movw	r6, r24
    2172:	1b 01       	movw	r2, r22
    2174:	4a 01       	movw	r8, r20
    2176:	29 01       	movw	r4, r18
    2178:	ca 01       	movw	r24, r20
    217a:	0e 94 4b 05 	call	0xa96	; 0xa96 <pvPortMalloc>
    217e:	6c 01       	movw	r12, r24
    2180:	89 2b       	or	r24, r25
    2182:	71 f0       	breq	.+28     	; 0x21a0 <xTaskCreate+0x52>
    2184:	84 e3       	ldi	r24, 0x34	; 52
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 4b 05 	call	0xa96	; 0xa96 <pvPortMalloc>
    218c:	ec 01       	movw	r28, r24
    218e:	89 2b       	or	r24, r25
    2190:	19 f0       	breq	.+6      	; 0x2198 <xTaskCreate+0x4a>
    2192:	dc 8e       	std	Y+28, r13	; 0x1c
    2194:	cb 8e       	std	Y+27, r12	; 0x1b
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <xTaskCreate+0x56>
    2198:	c6 01       	movw	r24, r12
    219a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <vPortFree>
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <xTaskCreate+0x56>
    21a0:	c0 e0       	ldi	r28, 0x00	; 0
    21a2:	d0 e0       	ldi	r29, 0x00	; 0
    21a4:	20 97       	sbiw	r28, 0x00	; 0
    21a6:	61 f0       	breq	.+24     	; 0x21c0 <xTaskCreate+0x72>
    21a8:	a1 2c       	mov	r10, r1
    21aa:	b1 2c       	mov	r11, r1
    21ac:	6e 01       	movw	r12, r28
    21ae:	92 01       	movw	r18, r4
    21b0:	a4 01       	movw	r20, r8
    21b2:	b1 01       	movw	r22, r2
    21b4:	c3 01       	movw	r24, r6
    21b6:	e7 dd       	rcall	.-1074   	; 0x1d86 <prvInitialiseNewTask>
    21b8:	ce 01       	movw	r24, r28
    21ba:	93 de       	rcall	.-730    	; 0x1ee2 <prvAddNewTaskToReadyList>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <xTaskCreate+0x74>
    21c0:	8f ef       	ldi	r24, 0xFF	; 255
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	bf 90       	pop	r11
    21d2:	af 90       	pop	r10
    21d4:	9f 90       	pop	r9
    21d6:	8f 90       	pop	r8
    21d8:	7f 90       	pop	r7
    21da:	6f 90       	pop	r6
    21dc:	5f 90       	pop	r5
    21de:	4f 90       	pop	r4
    21e0:	3f 90       	pop	r3
    21e2:	2f 90       	pop	r2
    21e4:	08 95       	ret

000021e6 <vTaskStartScheduler>:
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	0f 2e       	mov	r0, r31
    21ee:	fb e0       	ldi	r31, 0x0B	; 11
    21f0:	ef 2e       	mov	r14, r31
    21f2:	f6 e1       	ldi	r31, 0x16	; 22
    21f4:	ff 2e       	mov	r15, r31
    21f6:	f0 2d       	mov	r31, r0
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 ec       	ldi	r20, 0xC0	; 192
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	60 e5       	ldi	r22, 0x50	; 80
    2204:	73 e0       	ldi	r23, 0x03	; 3
    2206:	8d ec       	ldi	r24, 0xCD	; 205
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a1 df       	rcall	.-190    	; 0x214e <xTaskCreate>
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	11 f4       	brne	.+4      	; 0x2214 <__stack+0x15>
    2210:	0e 94 a6 1b 	call	0x374c	; 0x374c <xTimerCreateTimerTask>
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	c9 f4       	brne	.+50     	; 0x224a <__stack+0x4b>
    2218:	f8 94       	cli
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	dc 01       	movw	r26, r24
    2220:	80 93 0d 16 	sts	0x160D, r24	; 0x80160d <xNextTaskUnblockTime>
    2224:	90 93 0e 16 	sts	0x160E, r25	; 0x80160e <xNextTaskUnblockTime+0x1>
    2228:	a0 93 0f 16 	sts	0x160F, r26	; 0x80160f <xNextTaskUnblockTime+0x2>
    222c:	b0 93 10 16 	sts	0x1610, r27	; 0x801610 <xNextTaskUnblockTime+0x3>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 18 16 	sts	0x1618, r24	; 0x801618 <xSchedulerRunning>
    2236:	10 92 1a 16 	sts	0x161A, r1	; 0x80161a <xTickCount>
    223a:	10 92 1b 16 	sts	0x161B, r1	; 0x80161b <xTickCount+0x1>
    223e:	10 92 1c 16 	sts	0x161C, r1	; 0x80161c <xTickCount+0x2>
    2242:	10 92 1d 16 	sts	0x161D, r1	; 0x80161d <xTickCount+0x3>
    2246:	0e 94 cd 06 	call	0xd9a	; 0xd9a <xPortStartScheduler>
    224a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	08 95       	ret

00002256 <vTaskSuspendAll>:
    2256:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	80 93 0a 16 	sts	0x160A, r24	; 0x80160a <uxSchedulerSuspended>
    2260:	08 95       	ret

00002262 <xTaskGetTickCount>:
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	0f 92       	push	r0
    2268:	60 91 1a 16 	lds	r22, 0x161A	; 0x80161a <xTickCount>
    226c:	70 91 1b 16 	lds	r23, 0x161B	; 0x80161b <xTickCount+0x1>
    2270:	80 91 1c 16 	lds	r24, 0x161C	; 0x80161c <xTickCount+0x2>
    2274:	90 91 1d 16 	lds	r25, 0x161D	; 0x80161d <xTickCount+0x3>
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	08 95       	ret

0000227e <xTaskIncrementTick>:
    227e:	cf 92       	push	r12
    2280:	df 92       	push	r13
    2282:	ef 92       	push	r14
    2284:	ff 92       	push	r15
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    228e:	81 11       	cpse	r24, r1
    2290:	05 c1       	rjmp	.+522    	; 0x249c <xTaskIncrementTick+0x21e>
    2292:	c0 90 1a 16 	lds	r12, 0x161A	; 0x80161a <xTickCount>
    2296:	d0 90 1b 16 	lds	r13, 0x161B	; 0x80161b <xTickCount+0x1>
    229a:	e0 90 1c 16 	lds	r14, 0x161C	; 0x80161c <xTickCount+0x2>
    229e:	f0 90 1d 16 	lds	r15, 0x161D	; 0x80161d <xTickCount+0x3>
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	c8 1a       	sub	r12, r24
    22a6:	d8 0a       	sbc	r13, r24
    22a8:	e8 0a       	sbc	r14, r24
    22aa:	f8 0a       	sbc	r15, r24
    22ac:	c0 92 1a 16 	sts	0x161A, r12	; 0x80161a <xTickCount>
    22b0:	d0 92 1b 16 	sts	0x161B, r13	; 0x80161b <xTickCount+0x1>
    22b4:	e0 92 1c 16 	sts	0x161C, r14	; 0x80161c <xTickCount+0x2>
    22b8:	f0 92 1d 16 	sts	0x161D, r15	; 0x80161d <xTickCount+0x3>
    22bc:	c1 14       	cp	r12, r1
    22be:	d1 04       	cpc	r13, r1
    22c0:	e1 04       	cpc	r14, r1
    22c2:	f1 04       	cpc	r15, r1
    22c4:	b1 f4       	brne	.+44     	; 0x22f2 <xTaskIncrementTick+0x74>
    22c6:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <pxDelayedTaskList>
    22ca:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <pxDelayedTaskList+0x1>
    22ce:	20 91 41 16 	lds	r18, 0x1641	; 0x801641 <pxOverflowDelayedTaskList>
    22d2:	30 91 42 16 	lds	r19, 0x1642	; 0x801642 <pxOverflowDelayedTaskList+0x1>
    22d6:	30 93 44 16 	sts	0x1644, r19	; 0x801644 <pxDelayedTaskList+0x1>
    22da:	20 93 43 16 	sts	0x1643, r18	; 0x801643 <pxDelayedTaskList>
    22de:	90 93 42 16 	sts	0x1642, r25	; 0x801642 <pxOverflowDelayedTaskList+0x1>
    22e2:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <pxOverflowDelayedTaskList>
    22e6:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <xNumOfOverflows>
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	80 93 12 16 	sts	0x1612, r24	; 0x801612 <xNumOfOverflows>
    22f0:	16 dd       	rcall	.-1492   	; 0x1d1e <prvResetNextTaskUnblockTime>
    22f2:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <xNextTaskUnblockTime>
    22f6:	90 91 0e 16 	lds	r25, 0x160E	; 0x80160e <xNextTaskUnblockTime+0x1>
    22fa:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <xNextTaskUnblockTime+0x2>
    22fe:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <xNextTaskUnblockTime+0x3>
    2302:	c8 16       	cp	r12, r24
    2304:	d9 06       	cpc	r13, r25
    2306:	ea 06       	cpc	r14, r26
    2308:	fb 06       	cpc	r15, r27
    230a:	20 f4       	brcc	.+8      	; 0x2314 <xTaskIncrementTick+0x96>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	b2 c0       	rjmp	.+356    	; 0x2474 <xTaskIncrementTick+0x1f6>
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <xTaskIncrementTick+0x98>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	e0 91 43 16 	lds	r30, 0x1643	; 0x801643 <pxDelayedTaskList>
    231a:	f0 91 44 16 	lds	r31, 0x1644	; 0x801644 <pxDelayedTaskList+0x1>
    231e:	90 81       	ld	r25, Z
    2320:	91 11       	cpse	r25, r1
    2322:	0c c0       	rjmp	.+24     	; 0x233c <xTaskIncrementTick+0xbe>
    2324:	4f ef       	ldi	r20, 0xFF	; 255
    2326:	5f ef       	ldi	r21, 0xFF	; 255
    2328:	ba 01       	movw	r22, r20
    232a:	40 93 0d 16 	sts	0x160D, r20	; 0x80160d <xNextTaskUnblockTime>
    232e:	50 93 0e 16 	sts	0x160E, r21	; 0x80160e <xNextTaskUnblockTime+0x1>
    2332:	60 93 0f 16 	sts	0x160F, r22	; 0x80160f <xNextTaskUnblockTime+0x2>
    2336:	70 93 10 16 	sts	0x1610, r23	; 0x801610 <xNextTaskUnblockTime+0x3>
    233a:	9c c0       	rjmp	.+312    	; 0x2474 <xTaskIncrementTick+0x1f6>
    233c:	e0 91 43 16 	lds	r30, 0x1643	; 0x801643 <pxDelayedTaskList>
    2340:	f0 91 44 16 	lds	r31, 0x1644	; 0x801644 <pxDelayedTaskList+0x1>
    2344:	07 80       	ldd	r0, Z+7	; 0x07
    2346:	f0 85       	ldd	r31, Z+8	; 0x08
    2348:	e0 2d       	mov	r30, r0
    234a:	00 84       	ldd	r0, Z+8	; 0x08
    234c:	f1 85       	ldd	r31, Z+9	; 0x09
    234e:	e0 2d       	mov	r30, r0
    2350:	42 81       	ldd	r20, Z+2	; 0x02
    2352:	53 81       	ldd	r21, Z+3	; 0x03
    2354:	64 81       	ldd	r22, Z+4	; 0x04
    2356:	75 81       	ldd	r23, Z+5	; 0x05
    2358:	c4 16       	cp	r12, r20
    235a:	d5 06       	cpc	r13, r21
    235c:	e6 06       	cpc	r14, r22
    235e:	f7 06       	cpc	r15, r23
    2360:	48 f4       	brcc	.+18     	; 0x2374 <xTaskIncrementTick+0xf6>
    2362:	40 93 0d 16 	sts	0x160D, r20	; 0x80160d <xNextTaskUnblockTime>
    2366:	50 93 0e 16 	sts	0x160E, r21	; 0x80160e <xNextTaskUnblockTime+0x1>
    236a:	60 93 0f 16 	sts	0x160F, r22	; 0x80160f <xNextTaskUnblockTime+0x2>
    236e:	70 93 10 16 	sts	0x1610, r23	; 0x801610 <xNextTaskUnblockTime+0x3>
    2372:	80 c0       	rjmp	.+256    	; 0x2474 <xTaskIncrementTick+0x1f6>
    2374:	a4 85       	ldd	r26, Z+12	; 0x0c
    2376:	b5 85       	ldd	r27, Z+13	; 0x0d
    2378:	c6 81       	ldd	r28, Z+6	; 0x06
    237a:	d7 81       	ldd	r29, Z+7	; 0x07
    237c:	20 85       	ldd	r18, Z+8	; 0x08
    237e:	31 85       	ldd	r19, Z+9	; 0x09
    2380:	3f 83       	std	Y+7, r19	; 0x07
    2382:	2e 83       	std	Y+6, r18	; 0x06
    2384:	c0 85       	ldd	r28, Z+8	; 0x08
    2386:	d1 85       	ldd	r29, Z+9	; 0x09
    2388:	26 81       	ldd	r18, Z+6	; 0x06
    238a:	37 81       	ldd	r19, Z+7	; 0x07
    238c:	3d 83       	std	Y+5, r19	; 0x05
    238e:	2c 83       	std	Y+4, r18	; 0x04
    2390:	11 96       	adiw	r26, 0x01	; 1
    2392:	4d 91       	ld	r20, X+
    2394:	5c 91       	ld	r21, X
    2396:	12 97       	sbiw	r26, 0x02	; 2
    2398:	9f 01       	movw	r18, r30
    239a:	2e 5f       	subi	r18, 0xFE	; 254
    239c:	3f 4f       	sbci	r19, 0xFF	; 255
    239e:	42 17       	cp	r20, r18
    23a0:	53 07       	cpc	r21, r19
    23a2:	31 f4       	brne	.+12     	; 0x23b0 <xTaskIncrementTick+0x132>
    23a4:	40 85       	ldd	r20, Z+8	; 0x08
    23a6:	51 85       	ldd	r21, Z+9	; 0x09
    23a8:	12 96       	adiw	r26, 0x02	; 2
    23aa:	5c 93       	st	X, r21
    23ac:	4e 93       	st	-X, r20
    23ae:	11 97       	sbiw	r26, 0x01	; 1
    23b0:	15 86       	std	Z+13, r1	; 0x0d
    23b2:	14 86       	std	Z+12, r1	; 0x0c
    23b4:	9c 91       	ld	r25, X
    23b6:	91 50       	subi	r25, 0x01	; 1
    23b8:	9c 93       	st	X, r25
    23ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    23bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    23be:	10 97       	sbiw	r26, 0x00	; 0
    23c0:	09 f1       	breq	.+66     	; 0x2404 <xTaskIncrementTick+0x186>
    23c2:	c2 89       	ldd	r28, Z+18	; 0x12
    23c4:	d3 89       	ldd	r29, Z+19	; 0x13
    23c6:	44 89       	ldd	r20, Z+20	; 0x14
    23c8:	55 89       	ldd	r21, Z+21	; 0x15
    23ca:	5f 83       	std	Y+7, r21	; 0x07
    23cc:	4e 83       	std	Y+6, r20	; 0x06
    23ce:	c4 89       	ldd	r28, Z+20	; 0x14
    23d0:	d5 89       	ldd	r29, Z+21	; 0x15
    23d2:	42 89       	ldd	r20, Z+18	; 0x12
    23d4:	53 89       	ldd	r21, Z+19	; 0x13
    23d6:	5d 83       	std	Y+5, r21	; 0x05
    23d8:	4c 83       	std	Y+4, r20	; 0x04
    23da:	11 96       	adiw	r26, 0x01	; 1
    23dc:	6d 91       	ld	r22, X+
    23de:	7c 91       	ld	r23, X
    23e0:	12 97       	sbiw	r26, 0x02	; 2
    23e2:	af 01       	movw	r20, r30
    23e4:	42 5f       	subi	r20, 0xF2	; 242
    23e6:	5f 4f       	sbci	r21, 0xFF	; 255
    23e8:	64 17       	cp	r22, r20
    23ea:	75 07       	cpc	r23, r21
    23ec:	31 f4       	brne	.+12     	; 0x23fa <xTaskIncrementTick+0x17c>
    23ee:	44 89       	ldd	r20, Z+20	; 0x14
    23f0:	55 89       	ldd	r21, Z+21	; 0x15
    23f2:	12 96       	adiw	r26, 0x02	; 2
    23f4:	5c 93       	st	X, r21
    23f6:	4e 93       	st	-X, r20
    23f8:	11 97       	sbiw	r26, 0x01	; 1
    23fa:	11 8e       	std	Z+25, r1	; 0x19
    23fc:	10 8e       	std	Z+24, r1	; 0x18
    23fe:	9c 91       	ld	r25, X
    2400:	91 50       	subi	r25, 0x01	; 1
    2402:	9c 93       	st	X, r25
    2404:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2406:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <uxTopReadyPriority>
    240a:	9a 17       	cp	r25, r26
    240c:	10 f4       	brcc	.+4      	; 0x2412 <xTaskIncrementTick+0x194>
    240e:	a0 93 19 16 	sts	0x1619, r26	; 0x801619 <uxTopReadyPriority>
    2412:	9b e0       	ldi	r25, 0x0B	; 11
    2414:	9a 9f       	mul	r25, r26
    2416:	d0 01       	movw	r26, r0
    2418:	11 24       	eor	r1, r1
    241a:	a5 5a       	subi	r26, 0xA5	; 165
    241c:	b9 4e       	sbci	r27, 0xE9	; 233
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	0d 90       	ld	r0, X+
    2422:	bc 91       	ld	r27, X
    2424:	a0 2d       	mov	r26, r0
    2426:	b7 83       	std	Z+7, r27	; 0x07
    2428:	a6 83       	std	Z+6, r26	; 0x06
    242a:	16 96       	adiw	r26, 0x06	; 6
    242c:	4d 91       	ld	r20, X+
    242e:	5c 91       	ld	r21, X
    2430:	17 97       	sbiw	r26, 0x07	; 7
    2432:	51 87       	std	Z+9, r21	; 0x09
    2434:	40 87       	std	Z+8, r20	; 0x08
    2436:	16 96       	adiw	r26, 0x06	; 6
    2438:	cd 91       	ld	r28, X+
    243a:	dc 91       	ld	r29, X
    243c:	17 97       	sbiw	r26, 0x07	; 7
    243e:	3d 83       	std	Y+5, r19	; 0x05
    2440:	2c 83       	std	Y+4, r18	; 0x04
    2442:	17 96       	adiw	r26, 0x07	; 7
    2444:	3c 93       	st	X, r19
    2446:	2e 93       	st	-X, r18
    2448:	16 97       	sbiw	r26, 0x06	; 6
    244a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    244c:	9a 9f       	mul	r25, r26
    244e:	d0 01       	movw	r26, r0
    2450:	11 24       	eor	r1, r1
    2452:	a5 5a       	subi	r26, 0xA5	; 165
    2454:	b9 4e       	sbci	r27, 0xE9	; 233
    2456:	b5 87       	std	Z+13, r27	; 0x0d
    2458:	a4 87       	std	Z+12, r26	; 0x0c
    245a:	9c 91       	ld	r25, X
    245c:	9f 5f       	subi	r25, 0xFF	; 255
    245e:	9c 93       	st	X, r25
    2460:	22 8d       	ldd	r18, Z+26	; 0x1a
    2462:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2466:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    246a:	92 8d       	ldd	r25, Z+26	; 0x1a
    246c:	29 17       	cp	r18, r25
    246e:	08 f0       	brcs	.+2      	; 0x2472 <xTaskIncrementTick+0x1f4>
    2470:	4f cf       	rjmp	.-354    	; 0x2310 <xTaskIncrementTick+0x92>
    2472:	51 cf       	rjmp	.-350    	; 0x2316 <xTaskIncrementTick+0x98>
    2474:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2478:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    247c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    247e:	9b e0       	ldi	r25, 0x0B	; 11
    2480:	e9 9f       	mul	r30, r25
    2482:	f0 01       	movw	r30, r0
    2484:	11 24       	eor	r1, r1
    2486:	e5 5a       	subi	r30, 0xA5	; 165
    2488:	f9 4e       	sbci	r31, 0xE9	; 233
    248a:	90 81       	ld	r25, Z
    248c:	92 30       	cpi	r25, 0x02	; 2
    248e:	08 f0       	brcs	.+2      	; 0x2492 <xTaskIncrementTick+0x214>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <xYieldPending>
    2496:	91 11       	cpse	r25, r1
    2498:	16 c0       	rjmp	.+44     	; 0x24c6 <xTaskIncrementTick+0x248>
    249a:	16 c0       	rjmp	.+44     	; 0x24c8 <xTaskIncrementTick+0x24a>
    249c:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <xPendedTicks>
    24a0:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <xPendedTicks+0x1>
    24a4:	a0 91 16 16 	lds	r26, 0x1616	; 0x801616 <xPendedTicks+0x2>
    24a8:	b0 91 17 16 	lds	r27, 0x1617	; 0x801617 <xPendedTicks+0x3>
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	a1 1d       	adc	r26, r1
    24b0:	b1 1d       	adc	r27, r1
    24b2:	80 93 14 16 	sts	0x1614, r24	; 0x801614 <xPendedTicks>
    24b6:	90 93 15 16 	sts	0x1615, r25	; 0x801615 <xPendedTicks+0x1>
    24ba:	a0 93 16 16 	sts	0x1616, r26	; 0x801616 <xPendedTicks+0x2>
    24be:	b0 93 17 16 	sts	0x1617, r27	; 0x801617 <xPendedTicks+0x3>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <xTaskIncrementTick+0x24a>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	08 95       	ret

000024d6 <xTaskResumeAll>:
    24d6:	cf 92       	push	r12
    24d8:	df 92       	push	r13
    24da:	ef 92       	push	r14
    24dc:	ff 92       	push	r15
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	0f 92       	push	r0
    24e8:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    24ec:	81 50       	subi	r24, 0x01	; 1
    24ee:	80 93 0a 16 	sts	0x160A, r24	; 0x80160a <uxSchedulerSuspended>
    24f2:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    24f6:	81 11       	cpse	r24, r1
    24f8:	be c0       	rjmp	.+380    	; 0x2676 <xTaskResumeAll+0x1a0>
    24fa:	80 91 1e 16 	lds	r24, 0x161E	; 0x80161e <uxCurrentNumberOfTasks>
    24fe:	81 11       	cpse	r24, r1
    2500:	88 c0       	rjmp	.+272    	; 0x2612 <xTaskResumeAll+0x13c>
    2502:	bc c0       	rjmp	.+376    	; 0x267c <xTaskResumeAll+0x1a6>
    2504:	e0 91 3d 16 	lds	r30, 0x163D	; 0x80163d <xPendingReadyList+0x7>
    2508:	f0 91 3e 16 	lds	r31, 0x163E	; 0x80163e <xPendingReadyList+0x8>
    250c:	00 84       	ldd	r0, Z+8	; 0x08
    250e:	f1 85       	ldd	r31, Z+9	; 0x09
    2510:	e0 2d       	mov	r30, r0
    2512:	a0 8d       	ldd	r26, Z+24	; 0x18
    2514:	b1 8d       	ldd	r27, Z+25	; 0x19
    2516:	c2 89       	ldd	r28, Z+18	; 0x12
    2518:	d3 89       	ldd	r29, Z+19	; 0x13
    251a:	84 89       	ldd	r24, Z+20	; 0x14
    251c:	95 89       	ldd	r25, Z+21	; 0x15
    251e:	9f 83       	std	Y+7, r25	; 0x07
    2520:	8e 83       	std	Y+6, r24	; 0x06
    2522:	c4 89       	ldd	r28, Z+20	; 0x14
    2524:	d5 89       	ldd	r29, Z+21	; 0x15
    2526:	82 89       	ldd	r24, Z+18	; 0x12
    2528:	93 89       	ldd	r25, Z+19	; 0x13
    252a:	9d 83       	std	Y+5, r25	; 0x05
    252c:	8c 83       	std	Y+4, r24	; 0x04
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	2d 91       	ld	r18, X+
    2532:	3c 91       	ld	r19, X
    2534:	12 97       	sbiw	r26, 0x02	; 2
    2536:	cf 01       	movw	r24, r30
    2538:	0e 96       	adiw	r24, 0x0e	; 14
    253a:	28 17       	cp	r18, r24
    253c:	39 07       	cpc	r19, r25
    253e:	31 f4       	brne	.+12     	; 0x254c <xTaskResumeAll+0x76>
    2540:	84 89       	ldd	r24, Z+20	; 0x14
    2542:	95 89       	ldd	r25, Z+21	; 0x15
    2544:	12 96       	adiw	r26, 0x02	; 2
    2546:	9c 93       	st	X, r25
    2548:	8e 93       	st	-X, r24
    254a:	11 97       	sbiw	r26, 0x01	; 1
    254c:	11 8e       	std	Z+25, r1	; 0x19
    254e:	10 8e       	std	Z+24, r1	; 0x18
    2550:	8c 91       	ld	r24, X
    2552:	81 50       	subi	r24, 0x01	; 1
    2554:	8c 93       	st	X, r24
    2556:	a4 85       	ldd	r26, Z+12	; 0x0c
    2558:	b5 85       	ldd	r27, Z+13	; 0x0d
    255a:	c6 81       	ldd	r28, Z+6	; 0x06
    255c:	d7 81       	ldd	r29, Z+7	; 0x07
    255e:	80 85       	ldd	r24, Z+8	; 0x08
    2560:	91 85       	ldd	r25, Z+9	; 0x09
    2562:	9f 83       	std	Y+7, r25	; 0x07
    2564:	8e 83       	std	Y+6, r24	; 0x06
    2566:	c0 85       	ldd	r28, Z+8	; 0x08
    2568:	d1 85       	ldd	r29, Z+9	; 0x09
    256a:	86 81       	ldd	r24, Z+6	; 0x06
    256c:	97 81       	ldd	r25, Z+7	; 0x07
    256e:	9d 83       	std	Y+5, r25	; 0x05
    2570:	8c 83       	std	Y+4, r24	; 0x04
    2572:	11 96       	adiw	r26, 0x01	; 1
    2574:	8d 91       	ld	r24, X+
    2576:	9c 91       	ld	r25, X
    2578:	12 97       	sbiw	r26, 0x02	; 2
    257a:	9f 01       	movw	r18, r30
    257c:	2e 5f       	subi	r18, 0xFE	; 254
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	82 17       	cp	r24, r18
    2582:	93 07       	cpc	r25, r19
    2584:	31 f4       	brne	.+12     	; 0x2592 <xTaskResumeAll+0xbc>
    2586:	80 85       	ldd	r24, Z+8	; 0x08
    2588:	91 85       	ldd	r25, Z+9	; 0x09
    258a:	12 96       	adiw	r26, 0x02	; 2
    258c:	9c 93       	st	X, r25
    258e:	8e 93       	st	-X, r24
    2590:	11 97       	sbiw	r26, 0x01	; 1
    2592:	15 86       	std	Z+13, r1	; 0x0d
    2594:	14 86       	std	Z+12, r1	; 0x0c
    2596:	8c 91       	ld	r24, X
    2598:	81 50       	subi	r24, 0x01	; 1
    259a:	8c 93       	st	X, r24
    259c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    259e:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    25a2:	8a 17       	cp	r24, r26
    25a4:	10 f4       	brcc	.+4      	; 0x25aa <xTaskResumeAll+0xd4>
    25a6:	a0 93 19 16 	sts	0x1619, r26	; 0x801619 <uxTopReadyPriority>
    25aa:	8b e0       	ldi	r24, 0x0B	; 11
    25ac:	8a 9f       	mul	r24, r26
    25ae:	d0 01       	movw	r26, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	a5 5a       	subi	r26, 0xA5	; 165
    25b4:	b9 4e       	sbci	r27, 0xE9	; 233
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	0d 90       	ld	r0, X+
    25ba:	bc 91       	ld	r27, X
    25bc:	a0 2d       	mov	r26, r0
    25be:	b7 83       	std	Z+7, r27	; 0x07
    25c0:	a6 83       	std	Z+6, r26	; 0x06
    25c2:	16 96       	adiw	r26, 0x06	; 6
    25c4:	4d 91       	ld	r20, X+
    25c6:	5c 91       	ld	r21, X
    25c8:	17 97       	sbiw	r26, 0x07	; 7
    25ca:	51 87       	std	Z+9, r21	; 0x09
    25cc:	40 87       	std	Z+8, r20	; 0x08
    25ce:	16 96       	adiw	r26, 0x06	; 6
    25d0:	cd 91       	ld	r28, X+
    25d2:	dc 91       	ld	r29, X
    25d4:	17 97       	sbiw	r26, 0x07	; 7
    25d6:	3d 83       	std	Y+5, r19	; 0x05
    25d8:	2c 83       	std	Y+4, r18	; 0x04
    25da:	17 96       	adiw	r26, 0x07	; 7
    25dc:	3c 93       	st	X, r19
    25de:	2e 93       	st	-X, r18
    25e0:	16 97       	sbiw	r26, 0x06	; 6
    25e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25e4:	8a 9f       	mul	r24, r26
    25e6:	d0 01       	movw	r26, r0
    25e8:	11 24       	eor	r1, r1
    25ea:	a5 5a       	subi	r26, 0xA5	; 165
    25ec:	b9 4e       	sbci	r27, 0xE9	; 233
    25ee:	b5 87       	std	Z+13, r27	; 0x0d
    25f0:	a4 87       	std	Z+12, r26	; 0x0c
    25f2:	8c 91       	ld	r24, X
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	8c 93       	st	X, r24
    25f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    25fa:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    25fe:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2602:	5a 96       	adiw	r26, 0x1a	; 26
    2604:	8c 91       	ld	r24, X
    2606:	98 17       	cp	r25, r24
    2608:	30 f0       	brcs	.+12     	; 0x2616 <xTaskResumeAll+0x140>
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <xYieldPending>
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <xTaskResumeAll+0x140>
    2612:	e0 e0       	ldi	r30, 0x00	; 0
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <xPendingReadyList>
    261a:	81 11       	cpse	r24, r1
    261c:	73 cf       	rjmp	.-282    	; 0x2504 <xTaskResumeAll+0x2e>
    261e:	ef 2b       	or	r30, r31
    2620:	09 f0       	breq	.+2      	; 0x2624 <xTaskResumeAll+0x14e>
    2622:	7d db       	rcall	.-2310   	; 0x1d1e <prvResetNextTaskUnblockTime>
    2624:	c0 90 14 16 	lds	r12, 0x1614	; 0x801614 <xPendedTicks>
    2628:	d0 90 15 16 	lds	r13, 0x1615	; 0x801615 <xPendedTicks+0x1>
    262c:	e0 90 16 16 	lds	r14, 0x1616	; 0x801616 <xPendedTicks+0x2>
    2630:	f0 90 17 16 	lds	r15, 0x1617	; 0x801617 <xPendedTicks+0x3>
    2634:	c1 14       	cp	r12, r1
    2636:	d1 04       	cpc	r13, r1
    2638:	e1 04       	cpc	r14, r1
    263a:	f1 04       	cpc	r15, r1
    263c:	a1 f0       	breq	.+40     	; 0x2666 <xTaskResumeAll+0x190>
    263e:	1f de       	rcall	.-962    	; 0x227e <xTaskIncrementTick>
    2640:	88 23       	and	r24, r24
    2642:	19 f0       	breq	.+6      	; 0x264a <xTaskResumeAll+0x174>
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <xYieldPending>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	c8 1a       	sub	r12, r24
    264e:	d1 08       	sbc	r13, r1
    2650:	e1 08       	sbc	r14, r1
    2652:	f1 08       	sbc	r15, r1
    2654:	a1 f7       	brne	.-24     	; 0x263e <xTaskResumeAll+0x168>
    2656:	10 92 14 16 	sts	0x1614, r1	; 0x801614 <xPendedTicks>
    265a:	10 92 15 16 	sts	0x1615, r1	; 0x801615 <xPendedTicks+0x1>
    265e:	10 92 16 16 	sts	0x1616, r1	; 0x801616 <xPendedTicks+0x2>
    2662:	10 92 17 16 	sts	0x1617, r1	; 0x801617 <xPendedTicks+0x3>
    2666:	80 91 13 16 	lds	r24, 0x1613	; 0x801613 <xYieldPending>
    266a:	88 23       	and	r24, r24
    266c:	31 f0       	breq	.+12     	; 0x267a <xTaskResumeAll+0x1a4>
    266e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	03 c0       	rjmp	.+6      	; 0x267c <xTaskResumeAll+0x1a6>
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	01 c0       	rjmp	.+2      	; 0x267c <xTaskResumeAll+0x1a6>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	0f 90       	pop	r0
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	ff 90       	pop	r15
    2686:	ef 90       	pop	r14
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	08 95       	ret

0000268e <xTaskDelayUntil>:
    268e:	8f 92       	push	r8
    2690:	9f 92       	push	r9
    2692:	af 92       	push	r10
    2694:	bf 92       	push	r11
    2696:	cf 92       	push	r12
    2698:	df 92       	push	r13
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	ec 01       	movw	r28, r24
    26a6:	6a 01       	movw	r12, r20
    26a8:	7b 01       	movw	r14, r22
    26aa:	d5 dd       	rcall	.-1110   	; 0x2256 <vTaskSuspendAll>
    26ac:	80 90 1a 16 	lds	r8, 0x161A	; 0x80161a <xTickCount>
    26b0:	90 90 1b 16 	lds	r9, 0x161B	; 0x80161b <xTickCount+0x1>
    26b4:	a0 90 1c 16 	lds	r10, 0x161C	; 0x80161c <xTickCount+0x2>
    26b8:	b0 90 1d 16 	lds	r11, 0x161D	; 0x80161d <xTickCount+0x3>
    26bc:	88 81       	ld	r24, Y
    26be:	99 81       	ldd	r25, Y+1	; 0x01
    26c0:	aa 81       	ldd	r26, Y+2	; 0x02
    26c2:	bb 81       	ldd	r27, Y+3	; 0x03
    26c4:	ac 01       	movw	r20, r24
    26c6:	bd 01       	movw	r22, r26
    26c8:	4c 0d       	add	r20, r12
    26ca:	5d 1d       	adc	r21, r13
    26cc:	6e 1d       	adc	r22, r14
    26ce:	7f 1d       	adc	r23, r15
    26d0:	88 16       	cp	r8, r24
    26d2:	99 06       	cpc	r9, r25
    26d4:	aa 06       	cpc	r10, r26
    26d6:	bb 06       	cpc	r11, r27
    26d8:	60 f4       	brcc	.+24     	; 0x26f2 <xTaskDelayUntil+0x64>
    26da:	48 17       	cp	r20, r24
    26dc:	59 07       	cpc	r21, r25
    26de:	6a 07       	cpc	r22, r26
    26e0:	7b 07       	cpc	r23, r27
    26e2:	98 f4       	brcc	.+38     	; 0x270a <xTaskDelayUntil+0x7c>
    26e4:	84 16       	cp	r8, r20
    26e6:	95 06       	cpc	r9, r21
    26e8:	a6 06       	cpc	r10, r22
    26ea:	b7 06       	cpc	r11, r23
    26ec:	80 f0       	brcs	.+32     	; 0x270e <xTaskDelayUntil+0x80>
    26ee:	10 e0       	ldi	r17, 0x00	; 0
    26f0:	13 c0       	rjmp	.+38     	; 0x2718 <xTaskDelayUntil+0x8a>
    26f2:	48 17       	cp	r20, r24
    26f4:	59 07       	cpc	r21, r25
    26f6:	6a 07       	cpc	r22, r26
    26f8:	7b 07       	cpc	r23, r27
    26fa:	58 f0       	brcs	.+22     	; 0x2712 <xTaskDelayUntil+0x84>
    26fc:	84 16       	cp	r8, r20
    26fe:	95 06       	cpc	r9, r21
    2700:	a6 06       	cpc	r10, r22
    2702:	b7 06       	cpc	r11, r23
    2704:	40 f0       	brcs	.+16     	; 0x2716 <xTaskDelayUntil+0x88>
    2706:	10 e0       	ldi	r17, 0x00	; 0
    2708:	07 c0       	rjmp	.+14     	; 0x2718 <xTaskDelayUntil+0x8a>
    270a:	10 e0       	ldi	r17, 0x00	; 0
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <xTaskDelayUntil+0x8a>
    270e:	11 e0       	ldi	r17, 0x01	; 1
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <xTaskDelayUntil+0x8a>
    2712:	11 e0       	ldi	r17, 0x01	; 1
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <xTaskDelayUntil+0x8a>
    2716:	11 e0       	ldi	r17, 0x01	; 1
    2718:	48 83       	st	Y, r20
    271a:	59 83       	std	Y+1, r21	; 0x01
    271c:	6a 83       	std	Y+2, r22	; 0x02
    271e:	7b 83       	std	Y+3, r23	; 0x03
    2720:	11 23       	and	r17, r17
    2722:	41 f0       	breq	.+16     	; 0x2734 <xTaskDelayUntil+0xa6>
    2724:	cb 01       	movw	r24, r22
    2726:	ba 01       	movw	r22, r20
    2728:	68 19       	sub	r22, r8
    272a:	79 09       	sbc	r23, r9
    272c:	8a 09       	sbc	r24, r10
    272e:	9b 09       	sbc	r25, r11
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	6b dc       	rcall	.-1834   	; 0x200a <prvAddCurrentTaskToDelayedList>
    2734:	d0 de       	rcall	.-608    	; 0x24d6 <xTaskResumeAll>
    2736:	81 11       	cpse	r24, r1
    2738:	02 c0       	rjmp	.+4      	; 0x273e <xTaskDelayUntil+0xb0>
    273a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    273e:	81 2f       	mov	r24, r17
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	df 90       	pop	r13
    274c:	cf 90       	pop	r12
    274e:	bf 90       	pop	r11
    2750:	af 90       	pop	r10
    2752:	9f 90       	pop	r9
    2754:	8f 90       	pop	r8
    2756:	08 95       	ret

00002758 <vTaskDelay>:
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	6b 01       	movw	r12, r22
    2762:	7c 01       	movw	r14, r24
    2764:	67 2b       	or	r22, r23
    2766:	68 2b       	or	r22, r24
    2768:	69 2b       	or	r22, r25
    276a:	39 f0       	breq	.+14     	; 0x277a <vTaskDelay+0x22>
    276c:	74 dd       	rcall	.-1304   	; 0x2256 <vTaskSuspendAll>
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	c7 01       	movw	r24, r14
    2772:	b6 01       	movw	r22, r12
    2774:	4a dc       	rcall	.-1900   	; 0x200a <prvAddCurrentTaskToDelayedList>
    2776:	af de       	rcall	.-674    	; 0x24d6 <xTaskResumeAll>
    2778:	01 c0       	rjmp	.+2      	; 0x277c <vTaskDelay+0x24>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	81 11       	cpse	r24, r1
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <vTaskDelay+0x2c>
    2780:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	08 95       	ret

0000278e <vTaskSwitchContext>:
    278e:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    2792:	88 23       	and	r24, r24
    2794:	21 f0       	breq	.+8      	; 0x279e <vTaskSwitchContext+0x10>
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <xYieldPending>
    279c:	08 95       	ret
    279e:	10 92 13 16 	sts	0x1613, r1	; 0x801613 <xYieldPending>
    27a2:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    27a6:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    27aa:	20 81       	ld	r18, Z
    27ac:	31 81       	ldd	r19, Z+1	; 0x01
    27ae:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    27b2:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    27b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    27b8:	94 8d       	ldd	r25, Z+28	; 0x1c
    27ba:	82 17       	cp	r24, r18
    27bc:	93 07       	cpc	r25, r19
    27be:	60 f0       	brcs	.+24     	; 0x27d8 <vTaskSwitchContext+0x4a>
    27c0:	60 91 c9 16 	lds	r22, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    27c4:	70 91 ca 16 	lds	r23, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    27c8:	63 5e       	subi	r22, 0xE3	; 227
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    27d0:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    27d4:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <vApplicationStackOverflowHook>
    27d8:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <vTaskSwitchContext+0x52>
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	9b e0       	ldi	r25, 0x0B	; 11
    27e6:	92 9f       	mul	r25, r18
    27e8:	f0 01       	movw	r30, r0
    27ea:	93 9f       	mul	r25, r19
    27ec:	f0 0d       	add	r31, r0
    27ee:	11 24       	eor	r1, r1
    27f0:	e5 5a       	subi	r30, 0xA5	; 165
    27f2:	f9 4e       	sbci	r31, 0xE9	; 233
    27f4:	90 81       	ld	r25, Z
    27f6:	99 23       	and	r25, r25
    27f8:	91 f3       	breq	.-28     	; 0x27de <vTaskSwitchContext+0x50>
    27fa:	9b e0       	ldi	r25, 0x0B	; 11
    27fc:	92 9f       	mul	r25, r18
    27fe:	a0 01       	movw	r20, r0
    2800:	93 9f       	mul	r25, r19
    2802:	50 0d       	add	r21, r0
    2804:	11 24       	eor	r1, r1
    2806:	df 01       	movw	r26, r30
    2808:	01 80       	ldd	r0, Z+1	; 0x01
    280a:	f2 81       	ldd	r31, Z+2	; 0x02
    280c:	e0 2d       	mov	r30, r0
    280e:	04 80       	ldd	r0, Z+4	; 0x04
    2810:	f5 81       	ldd	r31, Z+5	; 0x05
    2812:	e0 2d       	mov	r30, r0
    2814:	12 96       	adiw	r26, 0x02	; 2
    2816:	fc 93       	st	X, r31
    2818:	ee 93       	st	-X, r30
    281a:	11 97       	sbiw	r26, 0x01	; 1
    281c:	42 5a       	subi	r20, 0xA2	; 162
    281e:	59 4e       	sbci	r21, 0xE9	; 233
    2820:	e4 17       	cp	r30, r20
    2822:	f5 07       	cpc	r31, r21
    2824:	29 f4       	brne	.+10     	; 0x2830 <vTaskSwitchContext+0xa2>
    2826:	44 81       	ldd	r20, Z+4	; 0x04
    2828:	55 81       	ldd	r21, Z+5	; 0x05
    282a:	fd 01       	movw	r30, r26
    282c:	52 83       	std	Z+2, r21	; 0x02
    282e:	41 83       	std	Z+1, r20	; 0x01
    2830:	9b e0       	ldi	r25, 0x0B	; 11
    2832:	92 9f       	mul	r25, r18
    2834:	f0 01       	movw	r30, r0
    2836:	93 9f       	mul	r25, r19
    2838:	f0 0d       	add	r31, r0
    283a:	11 24       	eor	r1, r1
    283c:	e5 5a       	subi	r30, 0xA5	; 165
    283e:	f9 4e       	sbci	r31, 0xE9	; 233
    2840:	01 80       	ldd	r0, Z+1	; 0x01
    2842:	f2 81       	ldd	r31, Z+2	; 0x02
    2844:	e0 2d       	mov	r30, r0
    2846:	20 85       	ldd	r18, Z+8	; 0x08
    2848:	31 85       	ldd	r19, Z+9	; 0x09
    284a:	30 93 ca 16 	sts	0x16CA, r19	; 0x8016ca <pxCurrentTCB+0x1>
    284e:	20 93 c9 16 	sts	0x16C9, r18	; 0x8016c9 <pxCurrentTCB>
    2852:	80 93 19 16 	sts	0x1619, r24	; 0x801619 <uxTopReadyPriority>
    2856:	08 95       	ret

00002858 <vTaskPlaceOnEventList>:
    2858:	cf 92       	push	r12
    285a:	df 92       	push	r13
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	6a 01       	movw	r12, r20
    2862:	7b 01       	movw	r14, r22
    2864:	60 91 c9 16 	lds	r22, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2868:	70 91 ca 16 	lds	r23, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    286c:	62 5f       	subi	r22, 0xF2	; 242
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	0e 94 46 06 	call	0xc8c	; 0xc8c <vListInsert>
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	c7 01       	movw	r24, r14
    2878:	b6 01       	movw	r22, r12
    287a:	c7 db       	rcall	.-2162   	; 0x200a <prvAddCurrentTaskToDelayedList>
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	cf 90       	pop	r12
    2884:	08 95       	ret

00002886 <vTaskPlaceOnUnorderedEventList>:
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	fc 01       	movw	r30, r24
    2890:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2894:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2898:	70 68       	ori	r23, 0x80	; 128
    289a:	1e 96       	adiw	r26, 0x0e	; 14
    289c:	4d 93       	st	X+, r20
    289e:	5d 93       	st	X+, r21
    28a0:	6d 93       	st	X+, r22
    28a2:	7c 93       	st	X, r23
    28a4:	51 97       	sbiw	r26, 0x11	; 17
    28a6:	a1 81       	ldd	r26, Z+1	; 0x01
    28a8:	b2 81       	ldd	r27, Z+2	; 0x02
    28aa:	c0 91 c9 16 	lds	r28, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    28ae:	d0 91 ca 16 	lds	r29, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    28b2:	bb 8b       	std	Y+19, r27	; 0x13
    28b4:	aa 8b       	std	Y+18, r26	; 0x12
    28b6:	c0 91 c9 16 	lds	r28, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    28ba:	d0 91 ca 16 	lds	r29, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    28be:	16 96       	adiw	r26, 0x06	; 6
    28c0:	8d 91       	ld	r24, X+
    28c2:	9c 91       	ld	r25, X
    28c4:	17 97       	sbiw	r26, 0x07	; 7
    28c6:	9d 8b       	std	Y+21, r25	; 0x15
    28c8:	8c 8b       	std	Y+20, r24	; 0x14
    28ca:	16 96       	adiw	r26, 0x06	; 6
    28cc:	cd 91       	ld	r28, X+
    28ce:	dc 91       	ld	r29, X
    28d0:	17 97       	sbiw	r26, 0x07	; 7
    28d2:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    28d6:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    28da:	0e 96       	adiw	r24, 0x0e	; 14
    28dc:	9d 83       	std	Y+5, r25	; 0x05
    28de:	8c 83       	std	Y+4, r24	; 0x04
    28e0:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    28e4:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    28e8:	0e 96       	adiw	r24, 0x0e	; 14
    28ea:	17 96       	adiw	r26, 0x07	; 7
    28ec:	9c 93       	st	X, r25
    28ee:	8e 93       	st	-X, r24
    28f0:	16 97       	sbiw	r26, 0x06	; 6
    28f2:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    28f6:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    28fa:	59 96       	adiw	r26, 0x19	; 25
    28fc:	fc 93       	st	X, r31
    28fe:	ee 93       	st	-X, r30
    2900:	58 97       	sbiw	r26, 0x18	; 24
    2902:	80 81       	ld	r24, Z
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	80 83       	st	Z, r24
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	c9 01       	movw	r24, r18
    290c:	b8 01       	movw	r22, r16
    290e:	7d db       	rcall	.-2310   	; 0x200a <prvAddCurrentTaskToDelayedList>
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	08 95       	ret

0000291a <vTaskPlaceOnEventListRestricted>:
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	fc 01       	movw	r30, r24
    2920:	cb 01       	movw	r24, r22
    2922:	ba 01       	movw	r22, r20
    2924:	a1 81       	ldd	r26, Z+1	; 0x01
    2926:	b2 81       	ldd	r27, Z+2	; 0x02
    2928:	c0 91 c9 16 	lds	r28, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    292c:	d0 91 ca 16 	lds	r29, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2930:	bb 8b       	std	Y+19, r27	; 0x13
    2932:	aa 8b       	std	Y+18, r26	; 0x12
    2934:	c0 91 c9 16 	lds	r28, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2938:	d0 91 ca 16 	lds	r29, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    293c:	16 96       	adiw	r26, 0x06	; 6
    293e:	4d 91       	ld	r20, X+
    2940:	5c 91       	ld	r21, X
    2942:	17 97       	sbiw	r26, 0x07	; 7
    2944:	5d 8b       	std	Y+21, r21	; 0x15
    2946:	4c 8b       	std	Y+20, r20	; 0x14
    2948:	16 96       	adiw	r26, 0x06	; 6
    294a:	cd 91       	ld	r28, X+
    294c:	dc 91       	ld	r29, X
    294e:	17 97       	sbiw	r26, 0x07	; 7
    2950:	40 91 c9 16 	lds	r20, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2954:	50 91 ca 16 	lds	r21, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2958:	42 5f       	subi	r20, 0xF2	; 242
    295a:	5f 4f       	sbci	r21, 0xFF	; 255
    295c:	5d 83       	std	Y+5, r21	; 0x05
    295e:	4c 83       	std	Y+4, r20	; 0x04
    2960:	40 91 c9 16 	lds	r20, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2964:	50 91 ca 16 	lds	r21, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2968:	42 5f       	subi	r20, 0xF2	; 242
    296a:	5f 4f       	sbci	r21, 0xFF	; 255
    296c:	17 96       	adiw	r26, 0x07	; 7
    296e:	5c 93       	st	X, r21
    2970:	4e 93       	st	-X, r20
    2972:	16 97       	sbiw	r26, 0x06	; 6
    2974:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2978:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    297c:	59 96       	adiw	r26, 0x19	; 25
    297e:	fc 93       	st	X, r31
    2980:	ee 93       	st	-X, r30
    2982:	58 97       	sbiw	r26, 0x18	; 24
    2984:	30 81       	ld	r19, Z
    2986:	3f 5f       	subi	r19, 0xFF	; 255
    2988:	30 83       	st	Z, r19
    298a:	22 23       	and	r18, r18
    298c:	19 f0       	breq	.+6      	; 0x2994 <vTaskPlaceOnEventListRestricted+0x7a>
    298e:	6f ef       	ldi	r22, 0xFF	; 255
    2990:	7f ef       	ldi	r23, 0xFF	; 255
    2992:	cb 01       	movw	r24, r22
    2994:	42 2f       	mov	r20, r18
    2996:	39 db       	rcall	.-2446   	; 0x200a <prvAddCurrentTaskToDelayedList>
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <xTaskRemoveFromEventList>:
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	dc 01       	movw	r26, r24
    29a4:	17 96       	adiw	r26, 0x07	; 7
    29a6:	ed 91       	ld	r30, X+
    29a8:	fc 91       	ld	r31, X
    29aa:	18 97       	sbiw	r26, 0x08	; 8
    29ac:	00 84       	ldd	r0, Z+8	; 0x08
    29ae:	f1 85       	ldd	r31, Z+9	; 0x09
    29b0:	e0 2d       	mov	r30, r0
    29b2:	a0 8d       	ldd	r26, Z+24	; 0x18
    29b4:	b1 8d       	ldd	r27, Z+25	; 0x19
    29b6:	c2 89       	ldd	r28, Z+18	; 0x12
    29b8:	d3 89       	ldd	r29, Z+19	; 0x13
    29ba:	84 89       	ldd	r24, Z+20	; 0x14
    29bc:	95 89       	ldd	r25, Z+21	; 0x15
    29be:	9f 83       	std	Y+7, r25	; 0x07
    29c0:	8e 83       	std	Y+6, r24	; 0x06
    29c2:	c4 89       	ldd	r28, Z+20	; 0x14
    29c4:	d5 89       	ldd	r29, Z+21	; 0x15
    29c6:	82 89       	ldd	r24, Z+18	; 0x12
    29c8:	93 89       	ldd	r25, Z+19	; 0x13
    29ca:	9d 83       	std	Y+5, r25	; 0x05
    29cc:	8c 83       	std	Y+4, r24	; 0x04
    29ce:	11 96       	adiw	r26, 0x01	; 1
    29d0:	8d 91       	ld	r24, X+
    29d2:	9c 91       	ld	r25, X
    29d4:	12 97       	sbiw	r26, 0x02	; 2
    29d6:	9f 01       	movw	r18, r30
    29d8:	22 5f       	subi	r18, 0xF2	; 242
    29da:	3f 4f       	sbci	r19, 0xFF	; 255
    29dc:	82 17       	cp	r24, r18
    29de:	93 07       	cpc	r25, r19
    29e0:	31 f4       	brne	.+12     	; 0x29ee <xTaskRemoveFromEventList+0x50>
    29e2:	84 89       	ldd	r24, Z+20	; 0x14
    29e4:	95 89       	ldd	r25, Z+21	; 0x15
    29e6:	12 96       	adiw	r26, 0x02	; 2
    29e8:	9c 93       	st	X, r25
    29ea:	8e 93       	st	-X, r24
    29ec:	11 97       	sbiw	r26, 0x01	; 1
    29ee:	11 8e       	std	Z+25, r1	; 0x19
    29f0:	10 8e       	std	Z+24, r1	; 0x18
    29f2:	8c 91       	ld	r24, X
    29f4:	81 50       	subi	r24, 0x01	; 1
    29f6:	8c 93       	st	X, r24
    29f8:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    29fc:	81 11       	cpse	r24, r1
    29fe:	52 c0       	rjmp	.+164    	; 0x2aa4 <xTaskRemoveFromEventList+0x106>
    2a00:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a02:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a04:	c6 81       	ldd	r28, Z+6	; 0x06
    2a06:	d7 81       	ldd	r29, Z+7	; 0x07
    2a08:	80 85       	ldd	r24, Z+8	; 0x08
    2a0a:	91 85       	ldd	r25, Z+9	; 0x09
    2a0c:	9f 83       	std	Y+7, r25	; 0x07
    2a0e:	8e 83       	std	Y+6, r24	; 0x06
    2a10:	c0 85       	ldd	r28, Z+8	; 0x08
    2a12:	d1 85       	ldd	r29, Z+9	; 0x09
    2a14:	86 81       	ldd	r24, Z+6	; 0x06
    2a16:	97 81       	ldd	r25, Z+7	; 0x07
    2a18:	9d 83       	std	Y+5, r25	; 0x05
    2a1a:	8c 83       	std	Y+4, r24	; 0x04
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	8d 91       	ld	r24, X+
    2a20:	9c 91       	ld	r25, X
    2a22:	12 97       	sbiw	r26, 0x02	; 2
    2a24:	9f 01       	movw	r18, r30
    2a26:	2e 5f       	subi	r18, 0xFE	; 254
    2a28:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2a:	82 17       	cp	r24, r18
    2a2c:	93 07       	cpc	r25, r19
    2a2e:	31 f4       	brne	.+12     	; 0x2a3c <xTaskRemoveFromEventList+0x9e>
    2a30:	80 85       	ldd	r24, Z+8	; 0x08
    2a32:	91 85       	ldd	r25, Z+9	; 0x09
    2a34:	12 96       	adiw	r26, 0x02	; 2
    2a36:	9c 93       	st	X, r25
    2a38:	8e 93       	st	-X, r24
    2a3a:	11 97       	sbiw	r26, 0x01	; 1
    2a3c:	15 86       	std	Z+13, r1	; 0x0d
    2a3e:	14 86       	std	Z+12, r1	; 0x0c
    2a40:	8c 91       	ld	r24, X
    2a42:	81 50       	subi	r24, 0x01	; 1
    2a44:	8c 93       	st	X, r24
    2a46:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a48:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    2a4c:	8a 17       	cp	r24, r26
    2a4e:	10 f4       	brcc	.+4      	; 0x2a54 <xTaskRemoveFromEventList+0xb6>
    2a50:	a0 93 19 16 	sts	0x1619, r26	; 0x801619 <uxTopReadyPriority>
    2a54:	8b e0       	ldi	r24, 0x0B	; 11
    2a56:	8a 9f       	mul	r24, r26
    2a58:	d0 01       	movw	r26, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	a5 5a       	subi	r26, 0xA5	; 165
    2a5e:	b9 4e       	sbci	r27, 0xE9	; 233
    2a60:	11 96       	adiw	r26, 0x01	; 1
    2a62:	0d 90       	ld	r0, X+
    2a64:	bc 91       	ld	r27, X
    2a66:	a0 2d       	mov	r26, r0
    2a68:	b7 83       	std	Z+7, r27	; 0x07
    2a6a:	a6 83       	std	Z+6, r26	; 0x06
    2a6c:	16 96       	adiw	r26, 0x06	; 6
    2a6e:	4d 91       	ld	r20, X+
    2a70:	5c 91       	ld	r21, X
    2a72:	17 97       	sbiw	r26, 0x07	; 7
    2a74:	51 87       	std	Z+9, r21	; 0x09
    2a76:	40 87       	std	Z+8, r20	; 0x08
    2a78:	16 96       	adiw	r26, 0x06	; 6
    2a7a:	cd 91       	ld	r28, X+
    2a7c:	dc 91       	ld	r29, X
    2a7e:	17 97       	sbiw	r26, 0x07	; 7
    2a80:	3d 83       	std	Y+5, r19	; 0x05
    2a82:	2c 83       	std	Y+4, r18	; 0x04
    2a84:	17 96       	adiw	r26, 0x07	; 7
    2a86:	3c 93       	st	X, r19
    2a88:	2e 93       	st	-X, r18
    2a8a:	16 97       	sbiw	r26, 0x06	; 6
    2a8c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a8e:	8a 9f       	mul	r24, r26
    2a90:	d0 01       	movw	r26, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	a5 5a       	subi	r26, 0xA5	; 165
    2a96:	b9 4e       	sbci	r27, 0xE9	; 233
    2a98:	b5 87       	std	Z+13, r27	; 0x0d
    2a9a:	a4 87       	std	Z+12, r26	; 0x0c
    2a9c:	8c 91       	ld	r24, X
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	8c 93       	st	X, r24
    2aa2:	1c c0       	rjmp	.+56     	; 0x2adc <xTaskRemoveFromEventList+0x13e>
    2aa4:	46 e3       	ldi	r20, 0x36	; 54
    2aa6:	56 e1       	ldi	r21, 0x16	; 22
    2aa8:	da 01       	movw	r26, r20
    2aaa:	11 96       	adiw	r26, 0x01	; 1
    2aac:	cd 91       	ld	r28, X+
    2aae:	dc 91       	ld	r29, X
    2ab0:	12 97       	sbiw	r26, 0x02	; 2
    2ab2:	d3 8b       	std	Z+19, r29	; 0x13
    2ab4:	c2 8b       	std	Z+18, r28	; 0x12
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aba:	95 8b       	std	Z+21, r25	; 0x15
    2abc:	84 8b       	std	Z+20, r24	; 0x14
    2abe:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	15 96       	adiw	r26, 0x05	; 5
    2ac6:	3c 93       	st	X, r19
    2ac8:	2e 93       	st	-X, r18
    2aca:	14 97       	sbiw	r26, 0x04	; 4
    2acc:	3f 83       	std	Y+7, r19	; 0x07
    2ace:	2e 83       	std	Y+6, r18	; 0x06
    2ad0:	51 8f       	std	Z+25, r21	; 0x19
    2ad2:	40 8f       	std	Z+24, r20	; 0x18
    2ad4:	da 01       	movw	r26, r20
    2ad6:	8c 91       	ld	r24, X
    2ad8:	8f 5f       	subi	r24, 0xFF	; 255
    2ada:	8c 93       	st	X, r24
    2adc:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ade:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2ae2:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2ae6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ae8:	89 17       	cp	r24, r25
    2aea:	20 f4       	brcc	.+8      	; 0x2af4 <xTaskRemoveFromEventList+0x156>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <xYieldPending>
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <xTaskRemoveFromEventList+0x158>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	08 95       	ret

00002afc <vTaskRemoveFromUnorderedEventList>:
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	dc 01       	movw	r26, r24
    2b02:	70 68       	ori	r23, 0x80	; 128
    2b04:	4d 93       	st	X+, r20
    2b06:	5d 93       	st	X+, r21
    2b08:	6d 93       	st	X+, r22
    2b0a:	7c 93       	st	X, r23
    2b0c:	13 97       	sbiw	r26, 0x03	; 3
    2b0e:	18 96       	adiw	r26, 0x08	; 8
    2b10:	ed 91       	ld	r30, X+
    2b12:	fc 91       	ld	r31, X
    2b14:	19 97       	sbiw	r26, 0x09	; 9
    2b16:	1a 96       	adiw	r26, 0x0a	; 10
    2b18:	4d 91       	ld	r20, X+
    2b1a:	5c 91       	ld	r21, X
    2b1c:	1b 97       	sbiw	r26, 0x0b	; 11
    2b1e:	14 96       	adiw	r26, 0x04	; 4
    2b20:	8d 91       	ld	r24, X+
    2b22:	9c 91       	ld	r25, X
    2b24:	15 97       	sbiw	r26, 0x05	; 5
    2b26:	16 96       	adiw	r26, 0x06	; 6
    2b28:	2d 91       	ld	r18, X+
    2b2a:	3c 91       	ld	r19, X
    2b2c:	17 97       	sbiw	r26, 0x07	; 7
    2b2e:	ec 01       	movw	r28, r24
    2b30:	3f 83       	std	Y+7, r19	; 0x07
    2b32:	2e 83       	std	Y+6, r18	; 0x06
    2b34:	16 96       	adiw	r26, 0x06	; 6
    2b36:	8d 91       	ld	r24, X+
    2b38:	9c 91       	ld	r25, X
    2b3a:	17 97       	sbiw	r26, 0x07	; 7
    2b3c:	14 96       	adiw	r26, 0x04	; 4
    2b3e:	2d 91       	ld	r18, X+
    2b40:	3c 91       	ld	r19, X
    2b42:	15 97       	sbiw	r26, 0x05	; 5
    2b44:	ec 01       	movw	r28, r24
    2b46:	3d 83       	std	Y+5, r19	; 0x05
    2b48:	2c 83       	std	Y+4, r18	; 0x04
    2b4a:	ea 01       	movw	r28, r20
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	a8 17       	cp	r26, r24
    2b52:	b9 07       	cpc	r27, r25
    2b54:	31 f4       	brne	.+12     	; 0x2b62 <vTaskRemoveFromUnorderedEventList+0x66>
    2b56:	16 96       	adiw	r26, 0x06	; 6
    2b58:	8d 91       	ld	r24, X+
    2b5a:	9c 91       	ld	r25, X
    2b5c:	17 97       	sbiw	r26, 0x07	; 7
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	1b 96       	adiw	r26, 0x0b	; 11
    2b64:	1c 92       	st	X, r1
    2b66:	1e 92       	st	-X, r1
    2b68:	1a 97       	sbiw	r26, 0x0a	; 10
    2b6a:	da 01       	movw	r26, r20
    2b6c:	8c 91       	ld	r24, X
    2b6e:	81 50       	subi	r24, 0x01	; 1
    2b70:	8c 93       	st	X, r24
    2b72:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b74:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b76:	c6 81       	ldd	r28, Z+6	; 0x06
    2b78:	d7 81       	ldd	r29, Z+7	; 0x07
    2b7a:	80 85       	ldd	r24, Z+8	; 0x08
    2b7c:	91 85       	ldd	r25, Z+9	; 0x09
    2b7e:	9f 83       	std	Y+7, r25	; 0x07
    2b80:	8e 83       	std	Y+6, r24	; 0x06
    2b82:	c0 85       	ldd	r28, Z+8	; 0x08
    2b84:	d1 85       	ldd	r29, Z+9	; 0x09
    2b86:	86 81       	ldd	r24, Z+6	; 0x06
    2b88:	97 81       	ldd	r25, Z+7	; 0x07
    2b8a:	9d 83       	std	Y+5, r25	; 0x05
    2b8c:	8c 83       	std	Y+4, r24	; 0x04
    2b8e:	11 96       	adiw	r26, 0x01	; 1
    2b90:	8d 91       	ld	r24, X+
    2b92:	9c 91       	ld	r25, X
    2b94:	12 97       	sbiw	r26, 0x02	; 2
    2b96:	9f 01       	movw	r18, r30
    2b98:	2e 5f       	subi	r18, 0xFE	; 254
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	82 17       	cp	r24, r18
    2b9e:	93 07       	cpc	r25, r19
    2ba0:	31 f4       	brne	.+12     	; 0x2bae <vTaskRemoveFromUnorderedEventList+0xb2>
    2ba2:	80 85       	ldd	r24, Z+8	; 0x08
    2ba4:	91 85       	ldd	r25, Z+9	; 0x09
    2ba6:	12 96       	adiw	r26, 0x02	; 2
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
    2bac:	11 97       	sbiw	r26, 0x01	; 1
    2bae:	15 86       	std	Z+13, r1	; 0x0d
    2bb0:	14 86       	std	Z+12, r1	; 0x0c
    2bb2:	8c 91       	ld	r24, X
    2bb4:	81 50       	subi	r24, 0x01	; 1
    2bb6:	8c 93       	st	X, r24
    2bb8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bba:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    2bbe:	8a 17       	cp	r24, r26
    2bc0:	10 f4       	brcc	.+4      	; 0x2bc6 <vTaskRemoveFromUnorderedEventList+0xca>
    2bc2:	a0 93 19 16 	sts	0x1619, r26	; 0x801619 <uxTopReadyPriority>
    2bc6:	8b e0       	ldi	r24, 0x0B	; 11
    2bc8:	8a 9f       	mul	r24, r26
    2bca:	d0 01       	movw	r26, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	a5 5a       	subi	r26, 0xA5	; 165
    2bd0:	b9 4e       	sbci	r27, 0xE9	; 233
    2bd2:	11 96       	adiw	r26, 0x01	; 1
    2bd4:	0d 90       	ld	r0, X+
    2bd6:	bc 91       	ld	r27, X
    2bd8:	a0 2d       	mov	r26, r0
    2bda:	b7 83       	std	Z+7, r27	; 0x07
    2bdc:	a6 83       	std	Z+6, r26	; 0x06
    2bde:	16 96       	adiw	r26, 0x06	; 6
    2be0:	4d 91       	ld	r20, X+
    2be2:	5c 91       	ld	r21, X
    2be4:	17 97       	sbiw	r26, 0x07	; 7
    2be6:	51 87       	std	Z+9, r21	; 0x09
    2be8:	40 87       	std	Z+8, r20	; 0x08
    2bea:	16 96       	adiw	r26, 0x06	; 6
    2bec:	cd 91       	ld	r28, X+
    2bee:	dc 91       	ld	r29, X
    2bf0:	17 97       	sbiw	r26, 0x07	; 7
    2bf2:	3d 83       	std	Y+5, r19	; 0x05
    2bf4:	2c 83       	std	Y+4, r18	; 0x04
    2bf6:	17 96       	adiw	r26, 0x07	; 7
    2bf8:	3c 93       	st	X, r19
    2bfa:	2e 93       	st	-X, r18
    2bfc:	16 97       	sbiw	r26, 0x06	; 6
    2bfe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c00:	8a 9f       	mul	r24, r26
    2c02:	d0 01       	movw	r26, r0
    2c04:	11 24       	eor	r1, r1
    2c06:	a5 5a       	subi	r26, 0xA5	; 165
    2c08:	b9 4e       	sbci	r27, 0xE9	; 233
    2c0a:	b5 87       	std	Z+13, r27	; 0x0d
    2c0c:	a4 87       	std	Z+12, r26	; 0x0c
    2c0e:	8c 91       	ld	r24, X
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	8c 93       	st	X, r24
    2c14:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c16:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2c1a:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2c1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c20:	89 17       	cp	r24, r25
    2c22:	18 f4       	brcc	.+6      	; 0x2c2a <vTaskRemoveFromUnorderedEventList+0x12e>
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <xYieldPending>
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	08 95       	ret

00002c30 <vTaskSetTimeOutState>:
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	0f 92       	push	r0
    2c36:	20 91 12 16 	lds	r18, 0x1612	; 0x801612 <xNumOfOverflows>
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 83       	st	Z, r18
    2c3e:	40 91 1a 16 	lds	r20, 0x161A	; 0x80161a <xTickCount>
    2c42:	50 91 1b 16 	lds	r21, 0x161B	; 0x80161b <xTickCount+0x1>
    2c46:	60 91 1c 16 	lds	r22, 0x161C	; 0x80161c <xTickCount+0x2>
    2c4a:	70 91 1d 16 	lds	r23, 0x161D	; 0x80161d <xTickCount+0x3>
    2c4e:	41 83       	std	Z+1, r20	; 0x01
    2c50:	52 83       	std	Z+2, r21	; 0x02
    2c52:	63 83       	std	Z+3, r22	; 0x03
    2c54:	74 83       	std	Z+4, r23	; 0x04
    2c56:	0f 90       	pop	r0
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	08 95       	ret

00002c5c <vTaskInternalSetTimeOutState>:
    2c5c:	20 91 12 16 	lds	r18, 0x1612	; 0x801612 <xNumOfOverflows>
    2c60:	fc 01       	movw	r30, r24
    2c62:	20 83       	st	Z, r18
    2c64:	40 91 1a 16 	lds	r20, 0x161A	; 0x80161a <xTickCount>
    2c68:	50 91 1b 16 	lds	r21, 0x161B	; 0x80161b <xTickCount+0x1>
    2c6c:	60 91 1c 16 	lds	r22, 0x161C	; 0x80161c <xTickCount+0x2>
    2c70:	70 91 1d 16 	lds	r23, 0x161D	; 0x80161d <xTickCount+0x3>
    2c74:	41 83       	std	Z+1, r20	; 0x01
    2c76:	52 83       	std	Z+2, r21	; 0x02
    2c78:	63 83       	std	Z+3, r22	; 0x03
    2c7a:	74 83       	std	Z+4, r23	; 0x04
    2c7c:	08 95       	ret

00002c7e <xTaskCheckForTimeOut>:
    2c7e:	8f 92       	push	r8
    2c80:	9f 92       	push	r9
    2c82:	af 92       	push	r10
    2c84:	bf 92       	push	r11
    2c86:	cf 92       	push	r12
    2c88:	df 92       	push	r13
    2c8a:	ef 92       	push	r14
    2c8c:	ff 92       	push	r15
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	fb 01       	movw	r30, r22
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	0f 92       	push	r0
    2c9e:	c0 90 1a 16 	lds	r12, 0x161A	; 0x80161a <xTickCount>
    2ca2:	d0 90 1b 16 	lds	r13, 0x161B	; 0x80161b <xTickCount+0x1>
    2ca6:	e0 90 1c 16 	lds	r14, 0x161C	; 0x80161c <xTickCount+0x2>
    2caa:	f0 90 1d 16 	lds	r15, 0x161D	; 0x80161d <xTickCount+0x3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	0d 91       	ld	r16, X+
    2cb4:	1d 91       	ld	r17, X+
    2cb6:	2d 91       	ld	r18, X+
    2cb8:	3c 91       	ld	r19, X
    2cba:	14 97       	sbiw	r26, 0x04	; 4
    2cbc:	46 01       	movw	r8, r12
    2cbe:	57 01       	movw	r10, r14
    2cc0:	80 1a       	sub	r8, r16
    2cc2:	91 0a       	sbc	r9, r17
    2cc4:	a2 0a       	sbc	r10, r18
    2cc6:	b3 0a       	sbc	r11, r19
    2cc8:	40 81       	ld	r20, Z
    2cca:	51 81       	ldd	r21, Z+1	; 0x01
    2ccc:	62 81       	ldd	r22, Z+2	; 0x02
    2cce:	73 81       	ldd	r23, Z+3	; 0x03
    2cd0:	4f 3f       	cpi	r20, 0xFF	; 255
    2cd2:	bf ef       	ldi	r27, 0xFF	; 255
    2cd4:	5b 07       	cpc	r21, r27
    2cd6:	6b 07       	cpc	r22, r27
    2cd8:	7b 07       	cpc	r23, r27
    2cda:	39 f1       	breq	.+78     	; 0x2d2a <xTaskCheckForTimeOut+0xac>
    2cdc:	ec 01       	movw	r28, r24
    2cde:	b8 81       	ld	r27, Y
    2ce0:	a0 91 12 16 	lds	r26, 0x1612	; 0x801612 <xNumOfOverflows>
    2ce4:	ba 17       	cp	r27, r26
    2ce6:	59 f0       	breq	.+22     	; 0x2cfe <xTaskCheckForTimeOut+0x80>
    2ce8:	c0 16       	cp	r12, r16
    2cea:	d1 06       	cpc	r13, r17
    2cec:	e2 06       	cpc	r14, r18
    2cee:	f3 06       	cpc	r15, r19
    2cf0:	30 f0       	brcs	.+12     	; 0x2cfe <xTaskCheckForTimeOut+0x80>
    2cf2:	10 82       	st	Z, r1
    2cf4:	11 82       	std	Z+1, r1	; 0x01
    2cf6:	12 82       	std	Z+2, r1	; 0x02
    2cf8:	13 82       	std	Z+3, r1	; 0x03
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	17 c0       	rjmp	.+46     	; 0x2d2c <xTaskCheckForTimeOut+0xae>
    2cfe:	84 16       	cp	r8, r20
    2d00:	95 06       	cpc	r9, r21
    2d02:	a6 06       	cpc	r10, r22
    2d04:	b7 06       	cpc	r11, r23
    2d06:	58 f4       	brcc	.+22     	; 0x2d1e <xTaskCheckForTimeOut+0xa0>
    2d08:	48 19       	sub	r20, r8
    2d0a:	59 09       	sbc	r21, r9
    2d0c:	6a 09       	sbc	r22, r10
    2d0e:	7b 09       	sbc	r23, r11
    2d10:	40 83       	st	Z, r20
    2d12:	51 83       	std	Z+1, r21	; 0x01
    2d14:	62 83       	std	Z+2, r22	; 0x02
    2d16:	73 83       	std	Z+3, r23	; 0x03
    2d18:	a1 df       	rcall	.-190    	; 0x2c5c <vTaskInternalSetTimeOutState>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	07 c0       	rjmp	.+14     	; 0x2d2c <xTaskCheckForTimeOut+0xae>
    2d1e:	10 82       	st	Z, r1
    2d20:	11 82       	std	Z+1, r1	; 0x01
    2d22:	12 82       	std	Z+2, r1	; 0x02
    2d24:	13 82       	std	Z+3, r1	; 0x03
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	01 c0       	rjmp	.+2      	; 0x2d2c <xTaskCheckForTimeOut+0xae>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	df 90       	pop	r13
    2d3e:	cf 90       	pop	r12
    2d40:	bf 90       	pop	r11
    2d42:	af 90       	pop	r10
    2d44:	9f 90       	pop	r9
    2d46:	8f 90       	pop	r8
    2d48:	08 95       	ret

00002d4a <vTaskMissedYield>:
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <xYieldPending>
    2d50:	08 95       	ret

00002d52 <xTaskGetCurrentTaskHandle>:
    2d52:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2d56:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2d5a:	08 95       	ret

00002d5c <xTaskGetSchedulerState>:
    2d5c:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <xSchedulerRunning>
    2d60:	88 23       	and	r24, r24
    2d62:	31 f0       	breq	.+12     	; 0x2d70 <xTaskGetSchedulerState+0x14>
    2d64:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <uxSchedulerSuspended>
    2d68:	81 11       	cpse	r24, r1
    2d6a:	04 c0       	rjmp	.+8      	; 0x2d74 <xTaskGetSchedulerState+0x18>
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	08 95       	ret
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	08 95       	ret
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	08 95       	ret

00002d78 <xTaskPriorityInherit>:
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	fc 01       	movw	r30, r24
    2d82:	89 2b       	or	r24, r25
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <xTaskPriorityInherit+0x10>
    2d86:	77 c0       	rjmp	.+238    	; 0x2e76 <xTaskPriorityInherit+0xfe>
    2d88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d8a:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2d8e:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2d92:	5a 96       	adiw	r26, 0x1a	; 26
    2d94:	9c 91       	ld	r25, X
    2d96:	89 17       	cp	r24, r25
    2d98:	08 f0       	brcs	.+2      	; 0x2d9c <xTaskPriorityInherit+0x24>
    2d9a:	63 c0       	rjmp	.+198    	; 0x2e62 <xTaskPriorityInherit+0xea>
    2d9c:	46 85       	ldd	r20, Z+14	; 0x0e
    2d9e:	57 85       	ldd	r21, Z+15	; 0x0f
    2da0:	60 89       	ldd	r22, Z+16	; 0x10
    2da2:	71 89       	ldd	r23, Z+17	; 0x11
    2da4:	77 23       	and	r23, r23
    2da6:	94 f0       	brlt	.+36     	; 0x2dcc <xTaskPriorityInherit+0x54>
    2da8:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2dac:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2db0:	5a 96       	adiw	r26, 0x1a	; 26
    2db2:	9c 91       	ld	r25, X
    2db4:	4a e0       	ldi	r20, 0x0A	; 10
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	70 e0       	ldi	r23, 0x00	; 0
    2dbc:	49 1b       	sub	r20, r25
    2dbe:	51 09       	sbc	r21, r1
    2dc0:	61 09       	sbc	r22, r1
    2dc2:	71 09       	sbc	r23, r1
    2dc4:	46 87       	std	Z+14, r20	; 0x0e
    2dc6:	57 87       	std	Z+15, r21	; 0x0f
    2dc8:	60 8b       	std	Z+16, r22	; 0x10
    2dca:	71 8b       	std	Z+17, r23	; 0x11
    2dcc:	24 85       	ldd	r18, Z+12	; 0x0c
    2dce:	35 85       	ldd	r19, Z+13	; 0x0d
    2dd0:	4b e0       	ldi	r20, 0x0B	; 11
    2dd2:	84 9f       	mul	r24, r20
    2dd4:	c0 01       	movw	r24, r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	85 5a       	subi	r24, 0xA5	; 165
    2dda:	99 4e       	sbci	r25, 0xE9	; 233
    2ddc:	28 17       	cp	r18, r24
    2dde:	39 07       	cpc	r19, r25
    2de0:	b9 f5       	brne	.+110    	; 0x2e50 <xTaskPriorityInherit+0xd8>
    2de2:	ef 01       	movw	r28, r30
    2de4:	8f 01       	movw	r16, r30
    2de6:	0e 5f       	subi	r16, 0xFE	; 254
    2de8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dea:	c8 01       	movw	r24, r16
    2dec:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
    2df0:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2df4:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2df8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2dfa:	ea 8f       	std	Y+26, r30	; 0x1a
    2dfc:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    2e00:	8e 17       	cp	r24, r30
    2e02:	10 f4       	brcc	.+4      	; 0x2e08 <xTaskPriorityInherit+0x90>
    2e04:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <uxTopReadyPriority>
    2e08:	8b e0       	ldi	r24, 0x0B	; 11
    2e0a:	8e 9f       	mul	r24, r30
    2e0c:	f0 01       	movw	r30, r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	e5 5a       	subi	r30, 0xA5	; 165
    2e12:	f9 4e       	sbci	r31, 0xE9	; 233
    2e14:	01 80       	ldd	r0, Z+1	; 0x01
    2e16:	f2 81       	ldd	r31, Z+2	; 0x02
    2e18:	e0 2d       	mov	r30, r0
    2e1a:	ff 83       	std	Y+7, r31	; 0x07
    2e1c:	ee 83       	std	Y+6, r30	; 0x06
    2e1e:	26 81       	ldd	r18, Z+6	; 0x06
    2e20:	37 81       	ldd	r19, Z+7	; 0x07
    2e22:	39 87       	std	Y+9, r19	; 0x09
    2e24:	28 87       	std	Y+8, r18	; 0x08
    2e26:	a6 81       	ldd	r26, Z+6	; 0x06
    2e28:	b7 81       	ldd	r27, Z+7	; 0x07
    2e2a:	15 96       	adiw	r26, 0x05	; 5
    2e2c:	1c 93       	st	X, r17
    2e2e:	0e 93       	st	-X, r16
    2e30:	14 97       	sbiw	r26, 0x04	; 4
    2e32:	17 83       	std	Z+7, r17	; 0x07
    2e34:	06 83       	std	Z+6, r16	; 0x06
    2e36:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e38:	8e 9f       	mul	r24, r30
    2e3a:	f0 01       	movw	r30, r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	e5 5a       	subi	r30, 0xA5	; 165
    2e40:	f9 4e       	sbci	r31, 0xE9	; 233
    2e42:	fd 87       	std	Y+13, r31	; 0x0d
    2e44:	ec 87       	std	Y+12, r30	; 0x0c
    2e46:	80 81       	ld	r24, Z
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	80 83       	st	Z, r24
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	16 c0       	rjmp	.+44     	; 0x2e7c <xTaskPriorityInherit+0x104>
    2e50:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2e54:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2e58:	5a 96       	adiw	r26, 0x1a	; 26
    2e5a:	8c 91       	ld	r24, X
    2e5c:	82 8f       	std	Z+26, r24	; 0x1a
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0d c0       	rjmp	.+26     	; 0x2e7c <xTaskPriorityInherit+0x104>
    2e62:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e64:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    2e68:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    2e6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e6e:	98 17       	cp	r25, r24
    2e70:	20 f0       	brcs	.+8      	; 0x2e7a <xTaskPriorityInherit+0x102>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <xTaskPriorityInherit+0x104>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <xTaskPriorityInherit+0x104>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	08 95       	ret

00002e86 <xTaskPriorityDisinherit>:
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	fc 01       	movw	r30, r24
    2e90:	89 2b       	or	r24, r25
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <xTaskPriorityDisinherit+0x10>
    2e94:	49 c0       	rjmp	.+146    	; 0x2f28 <xTaskPriorityDisinherit+0xa2>
    2e96:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e98:	81 50       	subi	r24, 0x01	; 1
    2e9a:	86 a7       	std	Z+46, r24	; 0x2e
    2e9c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e9e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2ea0:	29 17       	cp	r18, r25
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <xTaskPriorityDisinherit+0x20>
    2ea4:	43 c0       	rjmp	.+134    	; 0x2f2c <xTaskPriorityDisinherit+0xa6>
    2ea6:	81 11       	cpse	r24, r1
    2ea8:	43 c0       	rjmp	.+134    	; 0x2f30 <xTaskPriorityDisinherit+0xaa>
    2eaa:	ef 01       	movw	r28, r30
    2eac:	8f 01       	movw	r16, r30
    2eae:	0e 5f       	subi	r16, 0xFE	; 254
    2eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb2:	c8 01       	movw	r24, r16
    2eb4:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
    2eb8:	ed a5       	ldd	r30, Y+45	; 0x2d
    2eba:	ea 8f       	std	Y+26, r30	; 0x1a
    2ebc:	8a e0       	ldi	r24, 0x0A	; 10
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a0 e0       	ldi	r26, 0x00	; 0
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	8e 1b       	sub	r24, r30
    2ec6:	91 09       	sbc	r25, r1
    2ec8:	a1 09       	sbc	r26, r1
    2eca:	b1 09       	sbc	r27, r1
    2ecc:	8e 87       	std	Y+14, r24	; 0x0e
    2ece:	9f 87       	std	Y+15, r25	; 0x0f
    2ed0:	a8 8b       	std	Y+16, r26	; 0x10
    2ed2:	b9 8b       	std	Y+17, r27	; 0x11
    2ed4:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    2ed8:	8e 17       	cp	r24, r30
    2eda:	10 f4       	brcc	.+4      	; 0x2ee0 <xTaskPriorityDisinherit+0x5a>
    2edc:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <uxTopReadyPriority>
    2ee0:	8b e0       	ldi	r24, 0x0B	; 11
    2ee2:	8e 9f       	mul	r24, r30
    2ee4:	f0 01       	movw	r30, r0
    2ee6:	11 24       	eor	r1, r1
    2ee8:	e5 5a       	subi	r30, 0xA5	; 165
    2eea:	f9 4e       	sbci	r31, 0xE9	; 233
    2eec:	01 80       	ldd	r0, Z+1	; 0x01
    2eee:	f2 81       	ldd	r31, Z+2	; 0x02
    2ef0:	e0 2d       	mov	r30, r0
    2ef2:	ff 83       	std	Y+7, r31	; 0x07
    2ef4:	ee 83       	std	Y+6, r30	; 0x06
    2ef6:	26 81       	ldd	r18, Z+6	; 0x06
    2ef8:	37 81       	ldd	r19, Z+7	; 0x07
    2efa:	39 87       	std	Y+9, r19	; 0x09
    2efc:	28 87       	std	Y+8, r18	; 0x08
    2efe:	a6 81       	ldd	r26, Z+6	; 0x06
    2f00:	b7 81       	ldd	r27, Z+7	; 0x07
    2f02:	15 96       	adiw	r26, 0x05	; 5
    2f04:	1c 93       	st	X, r17
    2f06:	0e 93       	st	-X, r16
    2f08:	14 97       	sbiw	r26, 0x04	; 4
    2f0a:	17 83       	std	Z+7, r17	; 0x07
    2f0c:	06 83       	std	Z+6, r16	; 0x06
    2f0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f10:	8e 9f       	mul	r24, r30
    2f12:	f0 01       	movw	r30, r0
    2f14:	11 24       	eor	r1, r1
    2f16:	e5 5a       	subi	r30, 0xA5	; 165
    2f18:	f9 4e       	sbci	r31, 0xE9	; 233
    2f1a:	fd 87       	std	Y+13, r31	; 0x0d
    2f1c:	ec 87       	std	Y+12, r30	; 0x0c
    2f1e:	80 81       	ld	r24, Z
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	80 83       	st	Z, r24
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	05 c0       	rjmp	.+10     	; 0x2f32 <xTaskPriorityDisinherit+0xac>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <xTaskPriorityDisinherit+0xac>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <xTaskPriorityDisinherit+0xac>
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	08 95       	ret

00002f3c <vTaskPriorityDisinheritAfterTimeout>:
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	fc 01       	movw	r30, r24
    2f46:	89 2b       	or	r24, r25
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <vTaskPriorityDisinheritAfterTimeout+0x10>
    2f4a:	5a c0       	rjmp	.+180    	; 0x3000 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f4c:	85 a5       	ldd	r24, Z+45	; 0x2d
    2f4e:	86 17       	cp	r24, r22
    2f50:	08 f4       	brcc	.+2      	; 0x2f54 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f52:	86 2f       	mov	r24, r22
    2f54:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f56:	89 17       	cp	r24, r25
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <vTaskPriorityDisinheritAfterTimeout+0x20>
    2f5a:	52 c0       	rjmp	.+164    	; 0x3000 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f5c:	26 a5       	ldd	r18, Z+46	; 0x2e
    2f5e:	21 30       	cpi	r18, 0x01	; 1
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2f62:	4e c0       	rjmp	.+156    	; 0x3000 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f64:	82 8f       	std	Z+26, r24	; 0x1a
    2f66:	46 85       	ldd	r20, Z+14	; 0x0e
    2f68:	57 85       	ldd	r21, Z+15	; 0x0f
    2f6a:	60 89       	ldd	r22, Z+16	; 0x10
    2f6c:	71 89       	ldd	r23, Z+17	; 0x11
    2f6e:	77 23       	and	r23, r23
    2f70:	64 f0       	brlt	.+24     	; 0x2f8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2f72:	4a e0       	ldi	r20, 0x0A	; 10
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	48 1b       	sub	r20, r24
    2f7c:	51 09       	sbc	r21, r1
    2f7e:	61 09       	sbc	r22, r1
    2f80:	71 09       	sbc	r23, r1
    2f82:	46 87       	std	Z+14, r20	; 0x0e
    2f84:	57 87       	std	Z+15, r21	; 0x0f
    2f86:	60 8b       	std	Z+16, r22	; 0x10
    2f88:	71 8b       	std	Z+17, r23	; 0x11
    2f8a:	24 85       	ldd	r18, Z+12	; 0x0c
    2f8c:	35 85       	ldd	r19, Z+13	; 0x0d
    2f8e:	4b e0       	ldi	r20, 0x0B	; 11
    2f90:	94 9f       	mul	r25, r20
    2f92:	c0 01       	movw	r24, r0
    2f94:	11 24       	eor	r1, r1
    2f96:	85 5a       	subi	r24, 0xA5	; 165
    2f98:	99 4e       	sbci	r25, 0xE9	; 233
    2f9a:	28 17       	cp	r18, r24
    2f9c:	39 07       	cpc	r19, r25
    2f9e:	81 f5       	brne	.+96     	; 0x3000 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2fa0:	ef 01       	movw	r28, r30
    2fa2:	8f 01       	movw	r16, r30
    2fa4:	0e 5f       	subi	r16, 0xFE	; 254
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	c8 01       	movw	r24, r16
    2faa:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
    2fae:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fb0:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    2fb4:	8e 17       	cp	r24, r30
    2fb6:	10 f4       	brcc	.+4      	; 0x2fbc <vTaskPriorityDisinheritAfterTimeout+0x80>
    2fb8:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <uxTopReadyPriority>
    2fbc:	8b e0       	ldi	r24, 0x0B	; 11
    2fbe:	8e 9f       	mul	r24, r30
    2fc0:	f0 01       	movw	r30, r0
    2fc2:	11 24       	eor	r1, r1
    2fc4:	e5 5a       	subi	r30, 0xA5	; 165
    2fc6:	f9 4e       	sbci	r31, 0xE9	; 233
    2fc8:	01 80       	ldd	r0, Z+1	; 0x01
    2fca:	f2 81       	ldd	r31, Z+2	; 0x02
    2fcc:	e0 2d       	mov	r30, r0
    2fce:	ff 83       	std	Y+7, r31	; 0x07
    2fd0:	ee 83       	std	Y+6, r30	; 0x06
    2fd2:	26 81       	ldd	r18, Z+6	; 0x06
    2fd4:	37 81       	ldd	r19, Z+7	; 0x07
    2fd6:	39 87       	std	Y+9, r19	; 0x09
    2fd8:	28 87       	std	Y+8, r18	; 0x08
    2fda:	a6 81       	ldd	r26, Z+6	; 0x06
    2fdc:	b7 81       	ldd	r27, Z+7	; 0x07
    2fde:	15 96       	adiw	r26, 0x05	; 5
    2fe0:	1c 93       	st	X, r17
    2fe2:	0e 93       	st	-X, r16
    2fe4:	14 97       	sbiw	r26, 0x04	; 4
    2fe6:	17 83       	std	Z+7, r17	; 0x07
    2fe8:	06 83       	std	Z+6, r16	; 0x06
    2fea:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fec:	8e 9f       	mul	r24, r30
    2fee:	f0 01       	movw	r30, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	e5 5a       	subi	r30, 0xA5	; 165
    2ff4:	f9 4e       	sbci	r31, 0xE9	; 233
    2ff6:	fd 87       	std	Y+13, r31	; 0x0d
    2ff8:	ec 87       	std	Y+12, r30	; 0x0c
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	80 83       	st	Z, r24
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	08 95       	ret

0000300a <uxTaskResetEventItemValue>:
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    3016:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    301a:	66 85       	ldd	r22, Z+14	; 0x0e
    301c:	77 85       	ldd	r23, Z+15	; 0x0f
    301e:	80 89       	ldd	r24, Z+16	; 0x10
    3020:	91 89       	ldd	r25, Z+17	; 0x11
    3022:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    3026:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    302a:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    302e:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    3032:	5a 96       	adiw	r26, 0x1a	; 26
    3034:	2c 91       	ld	r18, X
    3036:	0f 2e       	mov	r0, r31
    3038:	fa e0       	ldi	r31, 0x0A	; 10
    303a:	cf 2e       	mov	r12, r31
    303c:	d1 2c       	mov	r13, r1
    303e:	e1 2c       	mov	r14, r1
    3040:	f1 2c       	mov	r15, r1
    3042:	f0 2d       	mov	r31, r0
    3044:	c2 1a       	sub	r12, r18
    3046:	d1 08       	sbc	r13, r1
    3048:	e1 08       	sbc	r14, r1
    304a:	f1 08       	sbc	r15, r1
    304c:	c6 86       	std	Z+14, r12	; 0x0e
    304e:	d7 86       	std	Z+15, r13	; 0x0f
    3050:	e0 8a       	std	Z+16, r14	; 0x10
    3052:	f1 8a       	std	Z+17, r15	; 0x11
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	df 90       	pop	r13
    305a:	cf 90       	pop	r12
    305c:	08 95       	ret

0000305e <pvTaskIncrementMutexHeldCount>:
    305e:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    3062:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    3066:	89 2b       	or	r24, r25
    3068:	39 f0       	breq	.+14     	; 0x3078 <pvTaskIncrementMutexHeldCount+0x1a>
    306a:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    306e:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    3072:	86 a5       	ldd	r24, Z+46	; 0x2e
    3074:	8f 5f       	subi	r24, 0xFF	; 255
    3076:	86 a7       	std	Z+46, r24	; 0x2e
    3078:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    307c:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    3080:	08 95       	ret

00003082 <xTaskGenericNotifyWait>:
    3082:	4f 92       	push	r4
    3084:	5f 92       	push	r5
    3086:	6f 92       	push	r6
    3088:	7f 92       	push	r7
    308a:	af 92       	push	r10
    308c:	bf 92       	push	r11
    308e:	cf 92       	push	r12
    3090:	df 92       	push	r13
    3092:	ef 92       	push	r14
    3094:	ff 92       	push	r15
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	28 01       	movw	r4, r16
    30a0:	39 01       	movw	r6, r18
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	0f 92       	push	r0
    30a8:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    30ac:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    30b0:	c8 2f       	mov	r28, r24
    30b2:	d0 e0       	ldi	r29, 0x00	; 0
    30b4:	ec 0f       	add	r30, r28
    30b6:	fd 1f       	adc	r31, r29
    30b8:	83 a9       	ldd	r24, Z+51	; 0x33
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	79 f1       	breq	.+94     	; 0x311c <xTaskGenericNotifyWait+0x9a>
    30be:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    30c2:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    30c6:	ce 01       	movw	r24, r28
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	e8 0f       	add	r30, r24
    30d2:	f9 1f       	adc	r31, r25
    30d4:	87 a5       	ldd	r24, Z+47	; 0x2f
    30d6:	90 a9       	ldd	r25, Z+48	; 0x30
    30d8:	a1 a9       	ldd	r26, Z+49	; 0x31
    30da:	b2 a9       	ldd	r27, Z+50	; 0x32
    30dc:	40 95       	com	r20
    30de:	50 95       	com	r21
    30e0:	60 95       	com	r22
    30e2:	70 95       	com	r23
    30e4:	48 23       	and	r20, r24
    30e6:	59 23       	and	r21, r25
    30e8:	6a 23       	and	r22, r26
    30ea:	7b 23       	and	r23, r27
    30ec:	47 a7       	std	Z+47, r20	; 0x2f
    30ee:	50 ab       	std	Z+48, r21	; 0x30
    30f0:	61 ab       	std	Z+49, r22	; 0x31
    30f2:	72 ab       	std	Z+50, r23	; 0x32
    30f4:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    30f8:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    30fc:	ec 0f       	add	r30, r28
    30fe:	fd 1f       	adc	r31, r29
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	83 ab       	std	Z+51, r24	; 0x33
    3104:	a1 14       	cp	r10, r1
    3106:	b1 04       	cpc	r11, r1
    3108:	c1 04       	cpc	r12, r1
    310a:	d1 04       	cpc	r13, r1
    310c:	39 f0       	breq	.+14     	; 0x311c <xTaskGenericNotifyWait+0x9a>
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	c6 01       	movw	r24, r12
    3112:	b5 01       	movw	r22, r10
    3114:	0e 94 05 10 	call	0x200a	; 0x200a <prvAddCurrentTaskToDelayedList>
    3118:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    311c:	0f 90       	pop	r0
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	0f 92       	push	r0
    3126:	e1 14       	cp	r14, r1
    3128:	f1 04       	cpc	r15, r1
    312a:	a1 f0       	breq	.+40     	; 0x3154 <xTaskGenericNotifyWait+0xd2>
    312c:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    3130:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    3134:	ce 01       	movw	r24, r28
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	e8 0f       	add	r30, r24
    3140:	f9 1f       	adc	r31, r25
    3142:	87 a5       	ldd	r24, Z+47	; 0x2f
    3144:	90 a9       	ldd	r25, Z+48	; 0x30
    3146:	a1 a9       	ldd	r26, Z+49	; 0x31
    3148:	b2 a9       	ldd	r27, Z+50	; 0x32
    314a:	f7 01       	movw	r30, r14
    314c:	80 83       	st	Z, r24
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	a2 83       	std	Z+2, r26	; 0x02
    3152:	b3 83       	std	Z+3, r27	; 0x03
    3154:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    3158:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    315c:	ec 0f       	add	r30, r28
    315e:	fd 1f       	adc	r31, r29
    3160:	83 a9       	ldd	r24, Z+51	; 0x33
    3162:	82 30       	cpi	r24, 0x02	; 2
    3164:	e9 f4       	brne	.+58     	; 0x31a0 <xTaskGenericNotifyWait+0x11e>
    3166:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    316a:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    316e:	ce 01       	movw	r24, r28
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	e8 0f       	add	r30, r24
    317a:	f9 1f       	adc	r31, r25
    317c:	87 a5       	ldd	r24, Z+47	; 0x2f
    317e:	90 a9       	ldd	r25, Z+48	; 0x30
    3180:	a1 a9       	ldd	r26, Z+49	; 0x31
    3182:	b2 a9       	ldd	r27, Z+50	; 0x32
    3184:	40 94       	com	r4
    3186:	50 94       	com	r5
    3188:	60 94       	com	r6
    318a:	70 94       	com	r7
    318c:	48 22       	and	r4, r24
    318e:	59 22       	and	r5, r25
    3190:	6a 22       	and	r6, r26
    3192:	7b 22       	and	r7, r27
    3194:	47 a6       	std	Z+47, r4	; 0x2f
    3196:	50 aa       	std	Z+48, r5	; 0x30
    3198:	61 aa       	std	Z+49, r6	; 0x31
    319a:	72 aa       	std	Z+50, r7	; 0x32
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <xTaskGenericNotifyWait+0x120>
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	20 91 c9 16 	lds	r18, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    31a6:	30 91 ca 16 	lds	r19, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    31aa:	c2 0f       	add	r28, r18
    31ac:	d3 1f       	adc	r29, r19
    31ae:	1b aa       	std	Y+51, r1	; 0x33
    31b0:	0f 90       	pop	r0
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	7f 90       	pop	r7
    31ca:	6f 90       	pop	r6
    31cc:	5f 90       	pop	r5
    31ce:	4f 90       	pop	r4
    31d0:	08 95       	ret

000031d2 <xTaskGenericNotify>:
    31d2:	8f 92       	push	r8
    31d4:	9f 92       	push	r9
    31d6:	af 92       	push	r10
    31d8:	bf 92       	push	r11
    31da:	ef 92       	push	r14
    31dc:	ff 92       	push	r15
    31de:	0f 93       	push	r16
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	dc 01       	movw	r26, r24
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	0f 92       	push	r0
    31ec:	e1 14       	cp	r14, r1
    31ee:	f1 04       	cpc	r15, r1
    31f0:	89 f0       	breq	.+34     	; 0x3214 <xTaskGenericNotify+0x42>
    31f2:	e6 2f       	mov	r30, r22
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	ee 0f       	add	r30, r30
    31f8:	ff 1f       	adc	r31, r31
    31fa:	ee 0f       	add	r30, r30
    31fc:	ff 1f       	adc	r31, r31
    31fe:	e8 0f       	add	r30, r24
    3200:	f9 1f       	adc	r31, r25
    3202:	87 a4       	ldd	r8, Z+47	; 0x2f
    3204:	90 a8       	ldd	r9, Z+48	; 0x30
    3206:	a1 a8       	ldd	r10, Z+49	; 0x31
    3208:	b2 a8       	ldd	r11, Z+50	; 0x32
    320a:	f7 01       	movw	r30, r14
    320c:	80 82       	st	Z, r8
    320e:	91 82       	std	Z+1, r9	; 0x01
    3210:	a2 82       	std	Z+2, r10	; 0x02
    3212:	b3 82       	std	Z+3, r11	; 0x03
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	fd 01       	movw	r30, r26
    3218:	e6 0f       	add	r30, r22
    321a:	f7 1f       	adc	r31, r23
    321c:	83 a9       	ldd	r24, Z+51	; 0x33
    321e:	92 e0       	ldi	r25, 0x02	; 2
    3220:	93 ab       	std	Z+51, r25	; 0x33
    3222:	02 30       	cpi	r16, 0x02	; 2
    3224:	01 f1       	breq	.+64     	; 0x3266 <xTaskGenericNotify+0x94>
    3226:	18 f4       	brcc	.+6      	; 0x322e <xTaskGenericNotify+0x5c>
    3228:	01 30       	cpi	r16, 0x01	; 1
    322a:	31 f0       	breq	.+12     	; 0x3238 <xTaskGenericNotify+0x66>
    322c:	4d c0       	rjmp	.+154    	; 0x32c8 <xTaskGenericNotify+0xf6>
    322e:	03 30       	cpi	r16, 0x03	; 3
    3230:	79 f1       	breq	.+94     	; 0x3290 <xTaskGenericNotify+0xbe>
    3232:	04 30       	cpi	r16, 0x04	; 4
    3234:	d1 f1       	breq	.+116    	; 0x32aa <xTaskGenericNotify+0xd8>
    3236:	48 c0       	rjmp	.+144    	; 0x32c8 <xTaskGenericNotify+0xf6>
    3238:	66 0f       	add	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	fd 01       	movw	r30, r26
    3242:	e6 0f       	add	r30, r22
    3244:	f7 1f       	adc	r31, r23
    3246:	87 a4       	ldd	r8, Z+47	; 0x2f
    3248:	90 a8       	ldd	r9, Z+48	; 0x30
    324a:	a1 a8       	ldd	r10, Z+49	; 0x31
    324c:	b2 a8       	ldd	r11, Z+50	; 0x32
    324e:	ba 01       	movw	r22, r20
    3250:	a9 01       	movw	r20, r18
    3252:	48 29       	or	r20, r8
    3254:	59 29       	or	r21, r9
    3256:	6a 29       	or	r22, r10
    3258:	7b 29       	or	r23, r11
    325a:	47 a7       	std	Z+47, r20	; 0x2f
    325c:	50 ab       	std	Z+48, r21	; 0x30
    325e:	61 ab       	std	Z+49, r22	; 0x31
    3260:	72 ab       	std	Z+50, r23	; 0x32
    3262:	01 e0       	ldi	r16, 0x01	; 1
    3264:	34 c0       	rjmp	.+104    	; 0x32ce <xTaskGenericNotify+0xfc>
    3266:	66 0f       	add	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	66 0f       	add	r22, r22
    326c:	77 1f       	adc	r23, r23
    326e:	fd 01       	movw	r30, r26
    3270:	e6 0f       	add	r30, r22
    3272:	f7 1f       	adc	r31, r23
    3274:	47 a5       	ldd	r20, Z+47	; 0x2f
    3276:	50 a9       	ldd	r21, Z+48	; 0x30
    3278:	61 a9       	ldd	r22, Z+49	; 0x31
    327a:	72 a9       	ldd	r23, Z+50	; 0x32
    327c:	4f 5f       	subi	r20, 0xFF	; 255
    327e:	5f 4f       	sbci	r21, 0xFF	; 255
    3280:	6f 4f       	sbci	r22, 0xFF	; 255
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	47 a7       	std	Z+47, r20	; 0x2f
    3286:	50 ab       	std	Z+48, r21	; 0x30
    3288:	61 ab       	std	Z+49, r22	; 0x31
    328a:	72 ab       	std	Z+50, r23	; 0x32
    328c:	01 e0       	ldi	r16, 0x01	; 1
    328e:	1f c0       	rjmp	.+62     	; 0x32ce <xTaskGenericNotify+0xfc>
    3290:	66 0f       	add	r22, r22
    3292:	77 1f       	adc	r23, r23
    3294:	66 0f       	add	r22, r22
    3296:	77 1f       	adc	r23, r23
    3298:	fd 01       	movw	r30, r26
    329a:	e6 0f       	add	r30, r22
    329c:	f7 1f       	adc	r31, r23
    329e:	27 a7       	std	Z+47, r18	; 0x2f
    32a0:	30 ab       	std	Z+48, r19	; 0x30
    32a2:	41 ab       	std	Z+49, r20	; 0x31
    32a4:	52 ab       	std	Z+50, r21	; 0x32
    32a6:	01 e0       	ldi	r16, 0x01	; 1
    32a8:	12 c0       	rjmp	.+36     	; 0x32ce <xTaskGenericNotify+0xfc>
    32aa:	82 30       	cpi	r24, 0x02	; 2
    32ac:	79 f0       	breq	.+30     	; 0x32cc <xTaskGenericNotify+0xfa>
    32ae:	66 0f       	add	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	fd 01       	movw	r30, r26
    32b8:	e6 0f       	add	r30, r22
    32ba:	f7 1f       	adc	r31, r23
    32bc:	27 a7       	std	Z+47, r18	; 0x2f
    32be:	30 ab       	std	Z+48, r19	; 0x30
    32c0:	41 ab       	std	Z+49, r20	; 0x31
    32c2:	52 ab       	std	Z+50, r21	; 0x32
    32c4:	01 e0       	ldi	r16, 0x01	; 1
    32c6:	03 c0       	rjmp	.+6      	; 0x32ce <xTaskGenericNotify+0xfc>
    32c8:	01 e0       	ldi	r16, 0x01	; 1
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <xTaskGenericNotify+0xfc>
    32cc:	00 e0       	ldi	r16, 0x00	; 0
    32ce:	81 30       	cpi	r24, 0x01	; 1
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <xTaskGenericNotify+0x102>
    32d2:	69 c0       	rjmp	.+210    	; 0x33a6 <xTaskGenericNotify+0x1d4>
    32d4:	1c 96       	adiw	r26, 0x0c	; 12
    32d6:	ed 91       	ld	r30, X+
    32d8:	fc 91       	ld	r31, X
    32da:	1d 97       	sbiw	r26, 0x0d	; 13
    32dc:	16 96       	adiw	r26, 0x06	; 6
    32de:	cd 91       	ld	r28, X+
    32e0:	dc 91       	ld	r29, X
    32e2:	17 97       	sbiw	r26, 0x07	; 7
    32e4:	18 96       	adiw	r26, 0x08	; 8
    32e6:	8d 91       	ld	r24, X+
    32e8:	9c 91       	ld	r25, X
    32ea:	19 97       	sbiw	r26, 0x09	; 9
    32ec:	9f 83       	std	Y+7, r25	; 0x07
    32ee:	8e 83       	std	Y+6, r24	; 0x06
    32f0:	18 96       	adiw	r26, 0x08	; 8
    32f2:	cd 91       	ld	r28, X+
    32f4:	dc 91       	ld	r29, X
    32f6:	19 97       	sbiw	r26, 0x09	; 9
    32f8:	16 96       	adiw	r26, 0x06	; 6
    32fa:	8d 91       	ld	r24, X+
    32fc:	9c 91       	ld	r25, X
    32fe:	17 97       	sbiw	r26, 0x07	; 7
    3300:	9d 83       	std	Y+5, r25	; 0x05
    3302:	8c 83       	std	Y+4, r24	; 0x04
    3304:	81 81       	ldd	r24, Z+1	; 0x01
    3306:	92 81       	ldd	r25, Z+2	; 0x02
    3308:	9d 01       	movw	r18, r26
    330a:	2e 5f       	subi	r18, 0xFE	; 254
    330c:	3f 4f       	sbci	r19, 0xFF	; 255
    330e:	82 17       	cp	r24, r18
    3310:	93 07       	cpc	r25, r19
    3312:	31 f4       	brne	.+12     	; 0x3320 <xTaskGenericNotify+0x14e>
    3314:	18 96       	adiw	r26, 0x08	; 8
    3316:	8d 91       	ld	r24, X+
    3318:	9c 91       	ld	r25, X
    331a:	19 97       	sbiw	r26, 0x09	; 9
    331c:	92 83       	std	Z+2, r25	; 0x02
    331e:	81 83       	std	Z+1, r24	; 0x01
    3320:	1d 96       	adiw	r26, 0x0d	; 13
    3322:	1c 92       	st	X, r1
    3324:	1e 92       	st	-X, r1
    3326:	1c 97       	sbiw	r26, 0x0c	; 12
    3328:	80 81       	ld	r24, Z
    332a:	81 50       	subi	r24, 0x01	; 1
    332c:	80 83       	st	Z, r24
    332e:	5a 96       	adiw	r26, 0x1a	; 26
    3330:	ec 91       	ld	r30, X
    3332:	5a 97       	sbiw	r26, 0x1a	; 26
    3334:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <uxTopReadyPriority>
    3338:	8e 17       	cp	r24, r30
    333a:	10 f4       	brcc	.+4      	; 0x3340 <xTaskGenericNotify+0x16e>
    333c:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <uxTopReadyPriority>
    3340:	8b e0       	ldi	r24, 0x0B	; 11
    3342:	8e 9f       	mul	r24, r30
    3344:	f0 01       	movw	r30, r0
    3346:	11 24       	eor	r1, r1
    3348:	e5 5a       	subi	r30, 0xA5	; 165
    334a:	f9 4e       	sbci	r31, 0xE9	; 233
    334c:	01 80       	ldd	r0, Z+1	; 0x01
    334e:	f2 81       	ldd	r31, Z+2	; 0x02
    3350:	e0 2d       	mov	r30, r0
    3352:	17 96       	adiw	r26, 0x07	; 7
    3354:	fc 93       	st	X, r31
    3356:	ee 93       	st	-X, r30
    3358:	16 97       	sbiw	r26, 0x06	; 6
    335a:	46 81       	ldd	r20, Z+6	; 0x06
    335c:	57 81       	ldd	r21, Z+7	; 0x07
    335e:	19 96       	adiw	r26, 0x09	; 9
    3360:	5c 93       	st	X, r21
    3362:	4e 93       	st	-X, r20
    3364:	18 97       	sbiw	r26, 0x08	; 8
    3366:	c6 81       	ldd	r28, Z+6	; 0x06
    3368:	d7 81       	ldd	r29, Z+7	; 0x07
    336a:	3d 83       	std	Y+5, r19	; 0x05
    336c:	2c 83       	std	Y+4, r18	; 0x04
    336e:	37 83       	std	Z+7, r19	; 0x07
    3370:	26 83       	std	Z+6, r18	; 0x06
    3372:	5a 96       	adiw	r26, 0x1a	; 26
    3374:	ec 91       	ld	r30, X
    3376:	5a 97       	sbiw	r26, 0x1a	; 26
    3378:	8e 9f       	mul	r24, r30
    337a:	f0 01       	movw	r30, r0
    337c:	11 24       	eor	r1, r1
    337e:	e5 5a       	subi	r30, 0xA5	; 165
    3380:	f9 4e       	sbci	r31, 0xE9	; 233
    3382:	1d 96       	adiw	r26, 0x0d	; 13
    3384:	fc 93       	st	X, r31
    3386:	ee 93       	st	-X, r30
    3388:	1c 97       	sbiw	r26, 0x0c	; 12
    338a:	80 81       	ld	r24, Z
    338c:	8f 5f       	subi	r24, 0xFF	; 255
    338e:	80 83       	st	Z, r24
    3390:	5a 96       	adiw	r26, 0x1a	; 26
    3392:	9c 91       	ld	r25, X
    3394:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    3398:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    339c:	82 8d       	ldd	r24, Z+26	; 0x1a
    339e:	89 17       	cp	r24, r25
    33a0:	10 f4       	brcc	.+4      	; 0x33a6 <xTaskGenericNotify+0x1d4>
    33a2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	80 2f       	mov	r24, r16
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	bf 90       	pop	r11
    33b8:	af 90       	pop	r10
    33ba:	9f 90       	pop	r9
    33bc:	8f 90       	pop	r8
    33be:	08 95       	ret

000033c0 <xTaskGenericNotifyFromISR>:
    33c0:	8f 92       	push	r8
    33c2:	9f 92       	push	r9
    33c4:	af 92       	push	r10
    33c6:	bf 92       	push	r11
    33c8:	cf 92       	push	r12
    33ca:	df 92       	push	r13
    33cc:	ef 92       	push	r14
    33ce:	ff 92       	push	r15
    33d0:	0f 93       	push	r16
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	dc 01       	movw	r26, r24
    33d8:	e1 14       	cp	r14, r1
    33da:	f1 04       	cpc	r15, r1
    33dc:	89 f0       	breq	.+34     	; 0x3400 <xTaskGenericNotifyFromISR+0x40>
    33de:	e6 2f       	mov	r30, r22
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	ee 0f       	add	r30, r30
    33e4:	ff 1f       	adc	r31, r31
    33e6:	ee 0f       	add	r30, r30
    33e8:	ff 1f       	adc	r31, r31
    33ea:	e8 0f       	add	r30, r24
    33ec:	f9 1f       	adc	r31, r25
    33ee:	87 a4       	ldd	r8, Z+47	; 0x2f
    33f0:	90 a8       	ldd	r9, Z+48	; 0x30
    33f2:	a1 a8       	ldd	r10, Z+49	; 0x31
    33f4:	b2 a8       	ldd	r11, Z+50	; 0x32
    33f6:	f7 01       	movw	r30, r14
    33f8:	80 82       	st	Z, r8
    33fa:	91 82       	std	Z+1, r9	; 0x01
    33fc:	a2 82       	std	Z+2, r10	; 0x02
    33fe:	b3 82       	std	Z+3, r11	; 0x03
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	fd 01       	movw	r30, r26
    3404:	e6 0f       	add	r30, r22
    3406:	f7 1f       	adc	r31, r23
    3408:	93 a9       	ldd	r25, Z+51	; 0x33
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	83 ab       	std	Z+51, r24	; 0x33
    340e:	02 30       	cpi	r16, 0x02	; 2
    3410:	01 f1       	breq	.+64     	; 0x3452 <xTaskGenericNotifyFromISR+0x92>
    3412:	18 f4       	brcc	.+6      	; 0x341a <xTaskGenericNotifyFromISR+0x5a>
    3414:	01 30       	cpi	r16, 0x01	; 1
    3416:	31 f0       	breq	.+12     	; 0x3424 <xTaskGenericNotifyFromISR+0x64>
    3418:	4d c0       	rjmp	.+154    	; 0x34b4 <xTaskGenericNotifyFromISR+0xf4>
    341a:	03 30       	cpi	r16, 0x03	; 3
    341c:	79 f1       	breq	.+94     	; 0x347c <xTaskGenericNotifyFromISR+0xbc>
    341e:	04 30       	cpi	r16, 0x04	; 4
    3420:	d1 f1       	breq	.+116    	; 0x3496 <xTaskGenericNotifyFromISR+0xd6>
    3422:	48 c0       	rjmp	.+144    	; 0x34b4 <xTaskGenericNotifyFromISR+0xf4>
    3424:	66 0f       	add	r22, r22
    3426:	77 1f       	adc	r23, r23
    3428:	66 0f       	add	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	fd 01       	movw	r30, r26
    342e:	e6 0f       	add	r30, r22
    3430:	f7 1f       	adc	r31, r23
    3432:	87 a4       	ldd	r8, Z+47	; 0x2f
    3434:	90 a8       	ldd	r9, Z+48	; 0x30
    3436:	a1 a8       	ldd	r10, Z+49	; 0x31
    3438:	b2 a8       	ldd	r11, Z+50	; 0x32
    343a:	ba 01       	movw	r22, r20
    343c:	a9 01       	movw	r20, r18
    343e:	48 29       	or	r20, r8
    3440:	59 29       	or	r21, r9
    3442:	6a 29       	or	r22, r10
    3444:	7b 29       	or	r23, r11
    3446:	47 a7       	std	Z+47, r20	; 0x2f
    3448:	50 ab       	std	Z+48, r21	; 0x30
    344a:	61 ab       	std	Z+49, r22	; 0x31
    344c:	72 ab       	std	Z+50, r23	; 0x32
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	34 c0       	rjmp	.+104    	; 0x34ba <xTaskGenericNotifyFromISR+0xfa>
    3452:	66 0f       	add	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	66 0f       	add	r22, r22
    3458:	77 1f       	adc	r23, r23
    345a:	fd 01       	movw	r30, r26
    345c:	e6 0f       	add	r30, r22
    345e:	f7 1f       	adc	r31, r23
    3460:	47 a5       	ldd	r20, Z+47	; 0x2f
    3462:	50 a9       	ldd	r21, Z+48	; 0x30
    3464:	61 a9       	ldd	r22, Z+49	; 0x31
    3466:	72 a9       	ldd	r23, Z+50	; 0x32
    3468:	4f 5f       	subi	r20, 0xFF	; 255
    346a:	5f 4f       	sbci	r21, 0xFF	; 255
    346c:	6f 4f       	sbci	r22, 0xFF	; 255
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	47 a7       	std	Z+47, r20	; 0x2f
    3472:	50 ab       	std	Z+48, r21	; 0x30
    3474:	61 ab       	std	Z+49, r22	; 0x31
    3476:	72 ab       	std	Z+50, r23	; 0x32
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	1f c0       	rjmp	.+62     	; 0x34ba <xTaskGenericNotifyFromISR+0xfa>
    347c:	66 0f       	add	r22, r22
    347e:	77 1f       	adc	r23, r23
    3480:	66 0f       	add	r22, r22
    3482:	77 1f       	adc	r23, r23
    3484:	fd 01       	movw	r30, r26
    3486:	e6 0f       	add	r30, r22
    3488:	f7 1f       	adc	r31, r23
    348a:	27 a7       	std	Z+47, r18	; 0x2f
    348c:	30 ab       	std	Z+48, r19	; 0x30
    348e:	41 ab       	std	Z+49, r20	; 0x31
    3490:	52 ab       	std	Z+50, r21	; 0x32
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	12 c0       	rjmp	.+36     	; 0x34ba <xTaskGenericNotifyFromISR+0xfa>
    3496:	92 30       	cpi	r25, 0x02	; 2
    3498:	79 f0       	breq	.+30     	; 0x34b8 <xTaskGenericNotifyFromISR+0xf8>
    349a:	66 0f       	add	r22, r22
    349c:	77 1f       	adc	r23, r23
    349e:	66 0f       	add	r22, r22
    34a0:	77 1f       	adc	r23, r23
    34a2:	fd 01       	movw	r30, r26
    34a4:	e6 0f       	add	r30, r22
    34a6:	f7 1f       	adc	r31, r23
    34a8:	27 a7       	std	Z+47, r18	; 0x2f
    34aa:	30 ab       	std	Z+48, r19	; 0x30
    34ac:	41 ab       	std	Z+49, r20	; 0x31
    34ae:	52 ab       	std	Z+50, r21	; 0x32
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	03 c0       	rjmp	.+6      	; 0x34ba <xTaskGenericNotifyFromISR+0xfa>
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	01 c0       	rjmp	.+2      	; 0x34ba <xTaskGenericNotifyFromISR+0xfa>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	91 30       	cpi	r25, 0x01	; 1
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <xTaskGenericNotifyFromISR+0x100>
    34be:	96 c0       	rjmp	.+300    	; 0x35ec <xTaskGenericNotifyFromISR+0x22c>
    34c0:	90 91 0a 16 	lds	r25, 0x160A	; 0x80160a <uxSchedulerSuspended>
    34c4:	91 11       	cpse	r25, r1
    34c6:	5f c0       	rjmp	.+190    	; 0x3586 <xTaskGenericNotifyFromISR+0x1c6>
    34c8:	1c 96       	adiw	r26, 0x0c	; 12
    34ca:	ed 91       	ld	r30, X+
    34cc:	fc 91       	ld	r31, X
    34ce:	1d 97       	sbiw	r26, 0x0d	; 13
    34d0:	16 96       	adiw	r26, 0x06	; 6
    34d2:	cd 91       	ld	r28, X+
    34d4:	dc 91       	ld	r29, X
    34d6:	17 97       	sbiw	r26, 0x07	; 7
    34d8:	18 96       	adiw	r26, 0x08	; 8
    34da:	2d 91       	ld	r18, X+
    34dc:	3c 91       	ld	r19, X
    34de:	19 97       	sbiw	r26, 0x09	; 9
    34e0:	3f 83       	std	Y+7, r19	; 0x07
    34e2:	2e 83       	std	Y+6, r18	; 0x06
    34e4:	18 96       	adiw	r26, 0x08	; 8
    34e6:	cd 91       	ld	r28, X+
    34e8:	dc 91       	ld	r29, X
    34ea:	19 97       	sbiw	r26, 0x09	; 9
    34ec:	16 96       	adiw	r26, 0x06	; 6
    34ee:	2d 91       	ld	r18, X+
    34f0:	3c 91       	ld	r19, X
    34f2:	17 97       	sbiw	r26, 0x07	; 7
    34f4:	3d 83       	std	Y+5, r19	; 0x05
    34f6:	2c 83       	std	Y+4, r18	; 0x04
    34f8:	41 81       	ldd	r20, Z+1	; 0x01
    34fa:	52 81       	ldd	r21, Z+2	; 0x02
    34fc:	9d 01       	movw	r18, r26
    34fe:	2e 5f       	subi	r18, 0xFE	; 254
    3500:	3f 4f       	sbci	r19, 0xFF	; 255
    3502:	42 17       	cp	r20, r18
    3504:	53 07       	cpc	r21, r19
    3506:	31 f4       	brne	.+12     	; 0x3514 <xTaskGenericNotifyFromISR+0x154>
    3508:	18 96       	adiw	r26, 0x08	; 8
    350a:	4d 91       	ld	r20, X+
    350c:	5c 91       	ld	r21, X
    350e:	19 97       	sbiw	r26, 0x09	; 9
    3510:	52 83       	std	Z+2, r21	; 0x02
    3512:	41 83       	std	Z+1, r20	; 0x01
    3514:	1d 96       	adiw	r26, 0x0d	; 13
    3516:	1c 92       	st	X, r1
    3518:	1e 92       	st	-X, r1
    351a:	1c 97       	sbiw	r26, 0x0c	; 12
    351c:	90 81       	ld	r25, Z
    351e:	91 50       	subi	r25, 0x01	; 1
    3520:	90 83       	st	Z, r25
    3522:	5a 96       	adiw	r26, 0x1a	; 26
    3524:	ec 91       	ld	r30, X
    3526:	5a 97       	sbiw	r26, 0x1a	; 26
    3528:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <uxTopReadyPriority>
    352c:	9e 17       	cp	r25, r30
    352e:	10 f4       	brcc	.+4      	; 0x3534 <xTaskGenericNotifyFromISR+0x174>
    3530:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <uxTopReadyPriority>
    3534:	9b e0       	ldi	r25, 0x0B	; 11
    3536:	9e 9f       	mul	r25, r30
    3538:	f0 01       	movw	r30, r0
    353a:	11 24       	eor	r1, r1
    353c:	e5 5a       	subi	r30, 0xA5	; 165
    353e:	f9 4e       	sbci	r31, 0xE9	; 233
    3540:	01 80       	ldd	r0, Z+1	; 0x01
    3542:	f2 81       	ldd	r31, Z+2	; 0x02
    3544:	e0 2d       	mov	r30, r0
    3546:	17 96       	adiw	r26, 0x07	; 7
    3548:	fc 93       	st	X, r31
    354a:	ee 93       	st	-X, r30
    354c:	16 97       	sbiw	r26, 0x06	; 6
    354e:	46 81       	ldd	r20, Z+6	; 0x06
    3550:	57 81       	ldd	r21, Z+7	; 0x07
    3552:	19 96       	adiw	r26, 0x09	; 9
    3554:	5c 93       	st	X, r21
    3556:	4e 93       	st	-X, r20
    3558:	18 97       	sbiw	r26, 0x08	; 8
    355a:	c6 81       	ldd	r28, Z+6	; 0x06
    355c:	d7 81       	ldd	r29, Z+7	; 0x07
    355e:	3d 83       	std	Y+5, r19	; 0x05
    3560:	2c 83       	std	Y+4, r18	; 0x04
    3562:	37 83       	std	Z+7, r19	; 0x07
    3564:	26 83       	std	Z+6, r18	; 0x06
    3566:	5a 96       	adiw	r26, 0x1a	; 26
    3568:	ec 91       	ld	r30, X
    356a:	5a 97       	sbiw	r26, 0x1a	; 26
    356c:	9e 9f       	mul	r25, r30
    356e:	f0 01       	movw	r30, r0
    3570:	11 24       	eor	r1, r1
    3572:	e5 5a       	subi	r30, 0xA5	; 165
    3574:	f9 4e       	sbci	r31, 0xE9	; 233
    3576:	1d 96       	adiw	r26, 0x0d	; 13
    3578:	fc 93       	st	X, r31
    357a:	ee 93       	st	-X, r30
    357c:	1c 97       	sbiw	r26, 0x0c	; 12
    357e:	90 81       	ld	r25, Z
    3580:	9f 5f       	subi	r25, 0xFF	; 255
    3582:	90 83       	st	Z, r25
    3584:	21 c0       	rjmp	.+66     	; 0x35c8 <xTaskGenericNotifyFromISR+0x208>
    3586:	66 e3       	ldi	r22, 0x36	; 54
    3588:	76 e1       	ldi	r23, 0x16	; 22
    358a:	fb 01       	movw	r30, r22
    358c:	c1 81       	ldd	r28, Z+1	; 0x01
    358e:	d2 81       	ldd	r29, Z+2	; 0x02
    3590:	53 96       	adiw	r26, 0x13	; 19
    3592:	dc 93       	st	X, r29
    3594:	ce 93       	st	-X, r28
    3596:	52 97       	sbiw	r26, 0x12	; 18
    3598:	2e 81       	ldd	r18, Y+6	; 0x06
    359a:	3f 81       	ldd	r19, Y+7	; 0x07
    359c:	55 96       	adiw	r26, 0x15	; 21
    359e:	3c 93       	st	X, r19
    35a0:	2e 93       	st	-X, r18
    35a2:	54 97       	sbiw	r26, 0x14	; 20
    35a4:	4e 81       	ldd	r20, Y+6	; 0x06
    35a6:	5f 81       	ldd	r21, Y+7	; 0x07
    35a8:	9d 01       	movw	r18, r26
    35aa:	22 5f       	subi	r18, 0xF2	; 242
    35ac:	3f 4f       	sbci	r19, 0xFF	; 255
    35ae:	fa 01       	movw	r30, r20
    35b0:	35 83       	std	Z+5, r19	; 0x05
    35b2:	24 83       	std	Z+4, r18	; 0x04
    35b4:	3f 83       	std	Y+7, r19	; 0x07
    35b6:	2e 83       	std	Y+6, r18	; 0x06
    35b8:	59 96       	adiw	r26, 0x19	; 25
    35ba:	7c 93       	st	X, r23
    35bc:	6e 93       	st	-X, r22
    35be:	58 97       	sbiw	r26, 0x18	; 24
    35c0:	fb 01       	movw	r30, r22
    35c2:	90 81       	ld	r25, Z
    35c4:	9f 5f       	subi	r25, 0xFF	; 255
    35c6:	90 83       	st	Z, r25
    35c8:	5a 96       	adiw	r26, 0x1a	; 26
    35ca:	2c 91       	ld	r18, X
    35cc:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    35d0:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>
    35d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    35d6:	92 17       	cp	r25, r18
    35d8:	48 f4       	brcc	.+18     	; 0x35ec <xTaskGenericNotifyFromISR+0x22c>
    35da:	c1 14       	cp	r12, r1
    35dc:	d1 04       	cpc	r13, r1
    35de:	19 f0       	breq	.+6      	; 0x35e6 <xTaskGenericNotifyFromISR+0x226>
    35e0:	91 e0       	ldi	r25, 0x01	; 1
    35e2:	f6 01       	movw	r30, r12
    35e4:	90 83       	st	Z, r25
    35e6:	91 e0       	ldi	r25, 0x01	; 1
    35e8:	90 93 13 16 	sts	0x1613, r25	; 0x801613 <xYieldPending>
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	0f 91       	pop	r16
    35f2:	ff 90       	pop	r15
    35f4:	ef 90       	pop	r14
    35f6:	df 90       	pop	r13
    35f8:	cf 90       	pop	r12
    35fa:	bf 90       	pop	r11
    35fc:	af 90       	pop	r10
    35fe:	9f 90       	pop	r9
    3600:	8f 90       	pop	r8
    3602:	08 95       	ret

00003604 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	21 f4       	brne	.+8      	; 0x3610 <xTaskGenericNotifyStateClear+0xc>
    3608:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxCurrentTCB>
    360c:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	fc 01       	movw	r30, r24
    361a:	e6 0f       	add	r30, r22
    361c:	f7 1f       	adc	r31, r23
    361e:	23 a9       	ldd	r18, Z+51	; 0x33
    3620:	22 30       	cpi	r18, 0x02	; 2
    3622:	31 f4       	brne	.+12     	; 0x3630 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3624:	fc 01       	movw	r30, r24
    3626:	e6 0f       	add	r30, r22
    3628:	f7 1f       	adc	r31, r23
    362a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3630:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3632:	0f 90       	pop	r0
    3634:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3636:	08 95       	ret

00003638 <prvGetNextExpireTime>:
    3638:	dc 01       	movw	r26, r24
    363a:	e0 91 d5 16 	lds	r30, 0x16D5	; 0x8016d5 <pxCurrentTimerList>
    363e:	f0 91 d6 16 	lds	r31, 0x16D6	; 0x8016d6 <pxCurrentTimerList+0x1>
    3642:	80 81       	ld	r24, Z
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	81 11       	cpse	r24, r1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 93       	st	X, r25
    364c:	91 11       	cpse	r25, r1
    364e:	08 c0       	rjmp	.+16     	; 0x3660 <prvGetNextExpireTime+0x28>
    3650:	07 80       	ldd	r0, Z+7	; 0x07
    3652:	f0 85       	ldd	r31, Z+8	; 0x08
    3654:	e0 2d       	mov	r30, r0
    3656:	60 81       	ld	r22, Z
    3658:	71 81       	ldd	r23, Z+1	; 0x01
    365a:	82 81       	ldd	r24, Z+2	; 0x02
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	08 95       	ret
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	cb 01       	movw	r24, r22
    3666:	08 95       	ret

00003668 <prvInsertTimerInActiveList>:
    3668:	cf 92       	push	r12
    366a:	df 92       	push	r13
    366c:	ef 92       	push	r14
    366e:	ff 92       	push	r15
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	fc 01       	movw	r30, r24
    3676:	42 83       	std	Z+2, r20	; 0x02
    3678:	53 83       	std	Z+3, r21	; 0x03
    367a:	64 83       	std	Z+4, r22	; 0x04
    367c:	75 83       	std	Z+5, r23	; 0x05
    367e:	93 87       	std	Z+11, r25	; 0x0b
    3680:	82 87       	std	Z+10, r24	; 0x0a
    3682:	04 17       	cp	r16, r20
    3684:	15 07       	cpc	r17, r21
    3686:	26 07       	cpc	r18, r22
    3688:	37 07       	cpc	r19, r23
    368a:	c0 f0       	brcs	.+48     	; 0x36bc <prvInsertTimerInActiveList+0x54>
    368c:	0c 19       	sub	r16, r12
    368e:	1d 09       	sbc	r17, r13
    3690:	2e 09       	sbc	r18, r14
    3692:	3f 09       	sbc	r19, r15
    3694:	86 85       	ldd	r24, Z+14	; 0x0e
    3696:	97 85       	ldd	r25, Z+15	; 0x0f
    3698:	a0 89       	ldd	r26, Z+16	; 0x10
    369a:	b1 89       	ldd	r27, Z+17	; 0x11
    369c:	08 17       	cp	r16, r24
    369e:	19 07       	cpc	r17, r25
    36a0:	2a 07       	cpc	r18, r26
    36a2:	3b 07       	cpc	r19, r27
    36a4:	00 f5       	brcc	.+64     	; 0x36e6 <prvInsertTimerInActiveList+0x7e>
    36a6:	bf 01       	movw	r22, r30
    36a8:	6e 5f       	subi	r22, 0xFE	; 254
    36aa:	7f 4f       	sbci	r23, 0xFF	; 255
    36ac:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <pxOverflowTimerList>
    36b0:	90 91 d4 16 	lds	r25, 0x16D4	; 0x8016d4 <pxOverflowTimerList+0x1>
    36b4:	0e 94 46 06 	call	0xc8c	; 0xc8c <vListInsert>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	18 c0       	rjmp	.+48     	; 0x36ec <prvInsertTimerInActiveList+0x84>
    36bc:	0c 15       	cp	r16, r12
    36be:	1d 05       	cpc	r17, r13
    36c0:	2e 05       	cpc	r18, r14
    36c2:	3f 05       	cpc	r19, r15
    36c4:	28 f4       	brcc	.+10     	; 0x36d0 <prvInsertTimerInActiveList+0x68>
    36c6:	4c 15       	cp	r20, r12
    36c8:	5d 05       	cpc	r21, r13
    36ca:	6e 05       	cpc	r22, r14
    36cc:	7f 05       	cpc	r23, r15
    36ce:	68 f4       	brcc	.+26     	; 0x36ea <prvInsertTimerInActiveList+0x82>
    36d0:	bf 01       	movw	r22, r30
    36d2:	6e 5f       	subi	r22, 0xFE	; 254
    36d4:	7f 4f       	sbci	r23, 0xFF	; 255
    36d6:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <pxCurrentTimerList>
    36da:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <pxCurrentTimerList+0x1>
    36de:	0e 94 46 06 	call	0xc8c	; 0xc8c <vListInsert>
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	03 c0       	rjmp	.+6      	; 0x36ec <prvInsertTimerInActiveList+0x84>
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <prvInsertTimerInActiveList+0x84>
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	ff 90       	pop	r15
    36f2:	ef 90       	pop	r14
    36f4:	df 90       	pop	r13
    36f6:	cf 90       	pop	r12
    36f8:	08 95       	ret

000036fa <prvCheckForValidListAndQueue>:
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	0f 92       	push	r0
    3700:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <xTimerQueue>
    3704:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    3708:	89 2b       	or	r24, r25
    370a:	e9 f4       	brne	.+58     	; 0x3746 <prvCheckForValidListAndQueue+0x4c>
    370c:	82 ee       	ldi	r24, 0xE2	; 226
    370e:	96 e1       	ldi	r25, 0x16	; 22
    3710:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    3714:	87 ed       	ldi	r24, 0xD7	; 215
    3716:	96 e1       	ldi	r25, 0x16	; 22
    3718:	0e 94 31 06 	call	0xc62	; 0xc62 <vListInitialise>
    371c:	82 ee       	ldi	r24, 0xE2	; 226
    371e:	96 e1       	ldi	r25, 0x16	; 22
    3720:	90 93 d6 16 	sts	0x16D6, r25	; 0x8016d6 <pxCurrentTimerList+0x1>
    3724:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <pxCurrentTimerList>
    3728:	87 ed       	ldi	r24, 0xD7	; 215
    372a:	96 e1       	ldi	r25, 0x16	; 22
    372c:	90 93 d4 16 	sts	0x16D4, r25	; 0x8016d4 <pxOverflowTimerList+0x1>
    3730:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <pxOverflowTimerList>
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	67 e0       	ldi	r22, 0x07	; 7
    3738:	8a e0       	ldi	r24, 0x0A	; 10
    373a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <xQueueGenericCreate>
    373e:	90 93 d2 16 	sts	0x16D2, r25	; 0x8016d2 <xTimerQueue+0x1>
    3742:	80 93 d1 16 	sts	0x16D1, r24	; 0x8016d1 <xTimerQueue>
    3746:	0f 90       	pop	r0
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	08 95       	ret

0000374c <xTimerCreateTimerTask>:
    374c:	ef 92       	push	r14
    374e:	ff 92       	push	r15
    3750:	0f 93       	push	r16
    3752:	d3 df       	rcall	.-90     	; 0x36fa <prvCheckForValidListAndQueue>
    3754:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <xTimerQueue>
    3758:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    375c:	89 2b       	or	r24, r25
    375e:	91 f0       	breq	.+36     	; 0x3784 <xTimerCreateTimerTask+0x38>
    3760:	0f 2e       	mov	r0, r31
    3762:	ff ec       	ldi	r31, 0xCF	; 207
    3764:	ef 2e       	mov	r14, r31
    3766:	f6 e1       	ldi	r31, 0x16	; 22
    3768:	ff 2e       	mov	r15, r31
    376a:	f0 2d       	mov	r31, r0
    376c:	03 e0       	ldi	r16, 0x03	; 3
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 ec       	ldi	r20, 0xC0	; 192
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	65 e5       	ldi	r22, 0x55	; 85
    3778:	73 e0       	ldi	r23, 0x03	; 3
    377a:	87 ed       	ldi	r24, 0xD7	; 215
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
    3782:	01 c0       	rjmp	.+2      	; 0x3786 <xTimerCreateTimerTask+0x3a>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	0f 91       	pop	r16
    3788:	ff 90       	pop	r15
    378a:	ef 90       	pop	r14
    378c:	08 95       	ret

0000378e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    378e:	8f 92       	push	r8
    3790:	9f 92       	push	r9
    3792:	af 92       	push	r10
    3794:	bf 92       	push	r11
    3796:	cf 92       	push	r12
    3798:	df 92       	push	r13
    379a:	ef 92       	push	r14
    379c:	ff 92       	push	r15
    379e:	0f 93       	push	r16
    37a0:	1f 93       	push	r17
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	27 97       	sbiw	r28, 0x07	; 7
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    37b6:	e0 91 d1 16 	lds	r30, 0x16D1	; 0x8016d1 <xTimerQueue>
    37ba:	f0 91 d2 16 	lds	r31, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    37be:	30 97       	sbiw	r30, 0x00	; 0
    37c0:	81 f1       	breq	.+96     	; 0x3822 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    37c2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    37c4:	2a 83       	std	Y+2, r18	; 0x02
    37c6:	3b 83       	std	Y+3, r19	; 0x03
    37c8:	4c 83       	std	Y+4, r20	; 0x04
    37ca:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    37cc:	9f 83       	std	Y+7, r25	; 0x07
    37ce:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    37d0:	66 30       	cpi	r22, 0x06	; 6
    37d2:	f4 f4       	brge	.+60     	; 0x3810 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    37d4:	c3 da       	rcall	.-2682   	; 0x2d5c <xTaskGetSchedulerState>
    37d6:	82 30       	cpi	r24, 0x02	; 2
    37d8:	69 f4       	brne	.+26     	; 0x37f4 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    37da:	00 e0       	ldi	r16, 0x00	; 0
    37dc:	a7 01       	movw	r20, r14
    37de:	96 01       	movw	r18, r12
    37e0:	be 01       	movw	r22, r28
    37e2:	6f 5f       	subi	r22, 0xFF	; 255
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <xTimerQueue>
    37ea:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    37ee:	0e 94 17 09 	call	0x122e	; 0x122e <xQueueGenericSend>
    37f2:	18 c0       	rjmp	.+48     	; 0x3824 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    37f4:	00 e0       	ldi	r16, 0x00	; 0
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	a9 01       	movw	r20, r18
    37fc:	be 01       	movw	r22, r28
    37fe:	6f 5f       	subi	r22, 0xFF	; 255
    3800:	7f 4f       	sbci	r23, 0xFF	; 255
    3802:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <xTimerQueue>
    3806:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    380a:	0e 94 17 09 	call	0x122e	; 0x122e <xQueueGenericSend>
    380e:	0a c0       	rjmp	.+20     	; 0x3824 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	a8 01       	movw	r20, r16
    3814:	be 01       	movw	r22, r28
    3816:	6f 5f       	subi	r22, 0xFF	; 255
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	cf 01       	movw	r24, r30
    381c:	0e 94 c7 09 	call	0x138e	; 0x138e <xQueueGenericSendFromISR>
    3820:	01 c0       	rjmp	.+2      	; 0x3824 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3822:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3824:	27 96       	adiw	r28, 0x07	; 7
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	bf 90       	pop	r11
    3842:	af 90       	pop	r10
    3844:	9f 90       	pop	r9
    3846:	8f 90       	pop	r8
    3848:	08 95       	ret

0000384a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    384a:	8f 92       	push	r8
    384c:	9f 92       	push	r9
    384e:	af 92       	push	r10
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3862:	3b c0       	rjmp	.+118    	; 0x38da <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3864:	07 80       	ldd	r0, Z+7	; 0x07
    3866:	f0 85       	ldd	r31, Z+8	; 0x08
    3868:	e0 2d       	mov	r30, r0
    386a:	80 80       	ld	r8, Z
    386c:	91 80       	ldd	r9, Z+1	; 0x01
    386e:	a2 80       	ldd	r10, Z+2	; 0x02
    3870:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3872:	c0 85       	ldd	r28, Z+8	; 0x08
    3874:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3876:	8e 01       	movw	r16, r28
    3878:	0e 5f       	subi	r16, 0xFE	; 254
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	c8 01       	movw	r24, r16
    387e:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3882:	ec 89       	ldd	r30, Y+20	; 0x14
    3884:	fd 89       	ldd	r31, Y+21	; 0x15
    3886:	ce 01       	movw	r24, r28
    3888:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    388a:	8e 89       	ldd	r24, Y+22	; 0x16
    388c:	82 ff       	sbrs	r24, 2
    388e:	25 c0       	rjmp	.+74     	; 0x38da <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3890:	8e 85       	ldd	r24, Y+14	; 0x0e
    3892:	9f 85       	ldd	r25, Y+15	; 0x0f
    3894:	a8 89       	ldd	r26, Y+16	; 0x10
    3896:	b9 89       	ldd	r27, Y+17	; 0x11
    3898:	88 0d       	add	r24, r8
    389a:	99 1d       	adc	r25, r9
    389c:	aa 1d       	adc	r26, r10
    389e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    38a0:	88 16       	cp	r8, r24
    38a2:	99 06       	cpc	r9, r25
    38a4:	aa 06       	cpc	r10, r26
    38a6:	bb 06       	cpc	r11, r27
    38a8:	70 f4       	brcc	.+28     	; 0x38c6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    38aa:	8a 83       	std	Y+2, r24	; 0x02
    38ac:	9b 83       	std	Y+3, r25	; 0x03
    38ae:	ac 83       	std	Y+4, r26	; 0x04
    38b0:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    38b2:	db 87       	std	Y+11, r29	; 0x0b
    38b4:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    38b6:	b8 01       	movw	r22, r16
    38b8:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <pxCurrentTimerList>
    38bc:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <pxCurrentTimerList+0x1>
    38c0:	0e 94 46 06 	call	0xc8c	; 0xc8c <vListInsert>
    38c4:	0a c0       	rjmp	.+20     	; 0x38da <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    38c6:	c1 2c       	mov	r12, r1
    38c8:	d1 2c       	mov	r13, r1
    38ca:	76 01       	movw	r14, r12
    38cc:	00 e0       	ldi	r16, 0x00	; 0
    38ce:	10 e0       	ldi	r17, 0x00	; 0
    38d0:	a5 01       	movw	r20, r10
    38d2:	94 01       	movw	r18, r8
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	ce 01       	movw	r24, r28
    38d8:	5a df       	rcall	.-332    	; 0x378e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    38da:	e0 91 d5 16 	lds	r30, 0x16D5	; 0x8016d5 <pxCurrentTimerList>
    38de:	f0 91 d6 16 	lds	r31, 0x16D6	; 0x8016d6 <pxCurrentTimerList+0x1>
    38e2:	80 81       	ld	r24, Z
    38e4:	81 11       	cpse	r24, r1
    38e6:	be cf       	rjmp	.-132    	; 0x3864 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    38e8:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <pxOverflowTimerList>
    38ec:	90 91 d4 16 	lds	r25, 0x16D4	; 0x8016d4 <pxOverflowTimerList+0x1>
    38f0:	90 93 d6 16 	sts	0x16D6, r25	; 0x8016d6 <pxCurrentTimerList+0x1>
    38f4:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    38f8:	f0 93 d4 16 	sts	0x16D4, r31	; 0x8016d4 <pxOverflowTimerList+0x1>
    38fc:	e0 93 d3 16 	sts	0x16D3, r30	; 0x8016d3 <pxOverflowTimerList>
    }
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	bf 90       	pop	r11
    3912:	af 90       	pop	r10
    3914:	9f 90       	pop	r9
    3916:	8f 90       	pop	r8
    3918:	08 95       	ret

0000391a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    391a:	cf 92       	push	r12
    391c:	df 92       	push	r13
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3928:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskGetTickCount>
    392c:	6b 01       	movw	r12, r22
    392e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3930:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <xLastTime.2436>
    3934:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <xLastTime.2436+0x1>
    3938:	a0 91 cd 16 	lds	r26, 0x16CD	; 0x8016cd <xLastTime.2436+0x2>
    393c:	b0 91 ce 16 	lds	r27, 0x16CE	; 0x8016ce <xLastTime.2436+0x3>
    3940:	c8 16       	cp	r12, r24
    3942:	d9 06       	cpc	r13, r25
    3944:	ea 06       	cpc	r14, r26
    3946:	fb 06       	cpc	r15, r27
    3948:	20 f4       	brcc	.+8      	; 0x3952 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    394a:	7f df       	rcall	.-258    	; 0x384a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	88 83       	st	Y, r24
    3950:	01 c0       	rjmp	.+2      	; 0x3954 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3952:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3954:	c0 92 cb 16 	sts	0x16CB, r12	; 0x8016cb <xLastTime.2436>
    3958:	d0 92 cc 16 	sts	0x16CC, r13	; 0x8016cc <xLastTime.2436+0x1>
    395c:	e0 92 cd 16 	sts	0x16CD, r14	; 0x8016cd <xLastTime.2436+0x2>
    3960:	f0 92 ce 16 	sts	0x16CE, r15	; 0x8016ce <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3964:	c7 01       	movw	r24, r14
    3966:	b6 01       	movw	r22, r12
    3968:	df 91       	pop	r29
    396a:	cf 91       	pop	r28
    396c:	ff 90       	pop	r15
    396e:	ef 90       	pop	r14
    3970:	df 90       	pop	r13
    3972:	cf 90       	pop	r12
    3974:	08 95       	ret

00003976 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3976:	4f 92       	push	r4
    3978:	5f 92       	push	r5
    397a:	6f 92       	push	r6
    397c:	7f 92       	push	r7
    397e:	8f 92       	push	r8
    3980:	9f 92       	push	r9
    3982:	af 92       	push	r10
    3984:	bf 92       	push	r11
    3986:	cf 92       	push	r12
    3988:	df 92       	push	r13
    398a:	ef 92       	push	r14
    398c:	ff 92       	push	r15
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	4b 01       	movw	r8, r22
    3998:	5c 01       	movw	r10, r24
    399a:	29 01       	movw	r4, r18
    399c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    399e:	e0 91 d5 16 	lds	r30, 0x16D5	; 0x8016d5 <pxCurrentTimerList>
    39a2:	f0 91 d6 16 	lds	r31, 0x16D6	; 0x8016d6 <pxCurrentTimerList+0x1>
    39a6:	07 80       	ldd	r0, Z+7	; 0x07
    39a8:	f0 85       	ldd	r31, Z+8	; 0x08
    39aa:	e0 2d       	mov	r30, r0
    39ac:	c0 85       	ldd	r28, Z+8	; 0x08
    39ae:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    39b0:	ce 01       	movw	r24, r28
    39b2:	02 96       	adiw	r24, 0x02	; 2
    39b4:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    39b8:	8e 89       	ldd	r24, Y+22	; 0x16
    39ba:	82 ff       	sbrs	r24, 2
    39bc:	1b c0       	rjmp	.+54     	; 0x39f4 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    39be:	4e 85       	ldd	r20, Y+14	; 0x0e
    39c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    39c2:	68 89       	ldd	r22, Y+16	; 0x10
    39c4:	79 89       	ldd	r23, Y+17	; 0x11
    39c6:	48 0d       	add	r20, r8
    39c8:	59 1d       	adc	r21, r9
    39ca:	6a 1d       	adc	r22, r10
    39cc:	7b 1d       	adc	r23, r11
    39ce:	75 01       	movw	r14, r10
    39d0:	64 01       	movw	r12, r8
    39d2:	93 01       	movw	r18, r6
    39d4:	82 01       	movw	r16, r4
    39d6:	ce 01       	movw	r24, r28
    39d8:	47 de       	rcall	.-882    	; 0x3668 <prvInsertTimerInActiveList>
    39da:	88 23       	and	r24, r24
    39dc:	69 f0       	breq	.+26     	; 0x39f8 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    39de:	c1 2c       	mov	r12, r1
    39e0:	d1 2c       	mov	r13, r1
    39e2:	76 01       	movw	r14, r12
    39e4:	00 e0       	ldi	r16, 0x00	; 0
    39e6:	10 e0       	ldi	r17, 0x00	; 0
    39e8:	a5 01       	movw	r20, r10
    39ea:	94 01       	movw	r18, r8
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	ce 01       	movw	r24, r28
    39f0:	ce de       	rcall	.-612    	; 0x378e <xTimerGenericCommand>
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    39f4:	8e 7f       	andi	r24, 0xFE	; 254
    39f6:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    39f8:	ec 89       	ldd	r30, Y+20	; 0x14
    39fa:	fd 89       	ldd	r31, Y+21	; 0x15
    39fc:	ce 01       	movw	r24, r28
    39fe:	19 95       	eicall
    }
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	bf 90       	pop	r11
    3a12:	af 90       	pop	r10
    3a14:	9f 90       	pop	r9
    3a16:	8f 90       	pop	r8
    3a18:	7f 90       	pop	r7
    3a1a:	6f 90       	pop	r6
    3a1c:	5f 90       	pop	r5
    3a1e:	4f 90       	pop	r4
    3a20:	08 95       	ret

00003a22 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3a22:	8f 92       	push	r8
    3a24:	9f 92       	push	r9
    3a26:	af 92       	push	r10
    3a28:	bf 92       	push	r11
    3a2a:	cf 92       	push	r12
    3a2c:	df 92       	push	r13
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	1f 93       	push	r17
    3a34:	cf 93       	push	r28
    3a36:	df 93       	push	r29
    3a38:	1f 92       	push	r1
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	6b 01       	movw	r12, r22
    3a40:	7c 01       	movw	r14, r24
    3a42:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3a44:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a48:	ce 01       	movw	r24, r28
    3a4a:	01 96       	adiw	r24, 0x01	; 1
    3a4c:	66 df       	rcall	.-308    	; 0x391a <prvSampleTimeNow>
    3a4e:	4b 01       	movw	r8, r22
    3a50:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	81 11       	cpse	r24, r1
    3a56:	2d c0       	rjmp	.+90     	; 0x3ab2 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3a58:	11 11       	cpse	r17, r1
    3a5a:	0d c0       	rjmp	.+26     	; 0x3a76 <prvProcessTimerOrBlockTask+0x54>
    3a5c:	8c 14       	cp	r8, r12
    3a5e:	9d 04       	cpc	r9, r13
    3a60:	ae 04       	cpc	r10, r14
    3a62:	bf 04       	cpc	r11, r15
    3a64:	40 f0       	brcs	.+16     	; 0x3a76 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3a66:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3a6a:	a5 01       	movw	r20, r10
    3a6c:	94 01       	movw	r18, r8
    3a6e:	c7 01       	movw	r24, r14
    3a70:	b6 01       	movw	r22, r12
    3a72:	81 df       	rcall	.-254    	; 0x3976 <prvProcessExpiredTimer>
    3a74:	20 c0       	rjmp	.+64     	; 0x3ab6 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3a76:	11 23       	and	r17, r17
    3a78:	41 f0       	breq	.+16     	; 0x3a8a <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3a7a:	e0 91 d3 16 	lds	r30, 0x16D3	; 0x8016d3 <pxOverflowTimerList>
    3a7e:	f0 91 d4 16 	lds	r31, 0x16D4	; 0x8016d4 <pxOverflowTimerList+0x1>
    3a82:	80 81       	ld	r24, Z
    3a84:	11 e0       	ldi	r17, 0x01	; 1
    3a86:	81 11       	cpse	r24, r1
    3a88:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3a8a:	b7 01       	movw	r22, r14
    3a8c:	a6 01       	movw	r20, r12
    3a8e:	48 19       	sub	r20, r8
    3a90:	59 09       	sbc	r21, r9
    3a92:	6a 09       	sbc	r22, r10
    3a94:	7b 09       	sbc	r23, r11
    3a96:	21 2f       	mov	r18, r17
    3a98:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <xTimerQueue>
    3a9c:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    3aa0:	0e 94 42 0b 	call	0x1684	; 0x1684 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3aa4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
    3aa8:	81 11       	cpse	r24, r1
    3aaa:	05 c0       	rjmp	.+10     	; 0x3ab6 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3aac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    3ab0:	02 c0       	rjmp	.+4      	; 0x3ab6 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3ab2:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xTaskResumeAll>
            }
        }
    }
    3ab6:	0f 90       	pop	r0
    3ab8:	df 91       	pop	r29
    3aba:	cf 91       	pop	r28
    3abc:	1f 91       	pop	r17
    3abe:	ff 90       	pop	r15
    3ac0:	ef 90       	pop	r14
    3ac2:	df 90       	pop	r13
    3ac4:	cf 90       	pop	r12
    3ac6:	bf 90       	pop	r11
    3ac8:	af 90       	pop	r10
    3aca:	9f 90       	pop	r9
    3acc:	8f 90       	pop	r8
    3ace:	08 95       	ret

00003ad0 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3ad0:	af 92       	push	r10
    3ad2:	bf 92       	push	r11
    3ad4:	cf 92       	push	r12
    3ad6:	df 92       	push	r13
    3ad8:	ef 92       	push	r14
    3ada:	ff 92       	push	r15
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	28 97       	sbiw	r28, 0x08	; 8
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3af4:	82 c0       	rjmp	.+260    	; 0x3bfa <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	88 23       	and	r24, r24
    3afa:	0c f4       	brge	.+2      	; 0x3afe <prvProcessReceivedCommands+0x2e>
    3afc:	7e c0       	rjmp	.+252    	; 0x3bfa <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3afe:	ae 80       	ldd	r10, Y+6	; 0x06
    3b00:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3b02:	d5 01       	movw	r26, r10
    3b04:	1c 96       	adiw	r26, 0x0c	; 12
    3b06:	8d 91       	ld	r24, X+
    3b08:	9c 91       	ld	r25, X
    3b0a:	1d 97       	sbiw	r26, 0x0d	; 13
    3b0c:	89 2b       	or	r24, r25
    3b0e:	21 f0       	breq	.+8      	; 0x3b18 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b10:	c5 01       	movw	r24, r10
    3b12:	02 96       	adiw	r24, 0x02	; 2
    3b14:	0e 94 83 06 	call	0xd06	; 0xd06 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3b18:	ce 01       	movw	r24, r28
    3b1a:	08 96       	adiw	r24, 0x08	; 8
    3b1c:	fe de       	rcall	.-516    	; 0x391a <prvSampleTimeNow>
    3b1e:	8b 01       	movw	r16, r22
    3b20:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3b22:	e9 81       	ldd	r30, Y+1	; 0x01
    3b24:	0e 2e       	mov	r0, r30
    3b26:	00 0c       	add	r0, r0
    3b28:	ff 0b       	sbc	r31, r31
    3b2a:	ea 30       	cpi	r30, 0x0A	; 10
    3b2c:	f1 05       	cpc	r31, r1
    3b2e:	08 f0       	brcs	.+2      	; 0x3b32 <prvProcessReceivedCommands+0x62>
    3b30:	64 c0       	rjmp	.+200    	; 0x3bfa <prvProcessReceivedCommands+0x12a>
    3b32:	88 27       	eor	r24, r24
    3b34:	ee 58       	subi	r30, 0x8E	; 142
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	8f 4f       	sbci	r24, 0xFF	; 255
    3b3a:	0c 94 a7 30 	jmp	0x614e	; 0x614e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b3e:	f5 01       	movw	r30, r10
    3b40:	86 89       	ldd	r24, Z+22	; 0x16
    3b42:	81 60       	ori	r24, 0x01	; 1
    3b44:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3b46:	ca 80       	ldd	r12, Y+2	; 0x02
    3b48:	db 80       	ldd	r13, Y+3	; 0x03
    3b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    3b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b4e:	46 85       	ldd	r20, Z+14	; 0x0e
    3b50:	57 85       	ldd	r21, Z+15	; 0x0f
    3b52:	60 89       	ldd	r22, Z+16	; 0x10
    3b54:	71 89       	ldd	r23, Z+17	; 0x11
    3b56:	4c 0d       	add	r20, r12
    3b58:	5d 1d       	adc	r21, r13
    3b5a:	6e 1d       	adc	r22, r14
    3b5c:	7f 1d       	adc	r23, r15
    3b5e:	c5 01       	movw	r24, r10
    3b60:	83 dd       	rcall	.-1274   	; 0x3668 <prvInsertTimerInActiveList>
    3b62:	88 23       	and	r24, r24
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <prvProcessReceivedCommands+0x98>
    3b66:	49 c0       	rjmp	.+146    	; 0x3bfa <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b68:	d5 01       	movw	r26, r10
    3b6a:	54 96       	adiw	r26, 0x14	; 20
    3b6c:	ed 91       	ld	r30, X+
    3b6e:	fc 91       	ld	r31, X
    3b70:	55 97       	sbiw	r26, 0x15	; 21
    3b72:	c5 01       	movw	r24, r10
    3b74:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b76:	f5 01       	movw	r30, r10
    3b78:	86 89       	ldd	r24, Z+22	; 0x16
    3b7a:	82 ff       	sbrs	r24, 2
    3b7c:	3e c0       	rjmp	.+124    	; 0x3bfa <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3b7e:	4a 81       	ldd	r20, Y+2	; 0x02
    3b80:	5b 81       	ldd	r21, Y+3	; 0x03
    3b82:	6c 81       	ldd	r22, Y+4	; 0x04
    3b84:	7d 81       	ldd	r23, Y+5	; 0x05
    3b86:	86 85       	ldd	r24, Z+14	; 0x0e
    3b88:	97 85       	ldd	r25, Z+15	; 0x0f
    3b8a:	a0 89       	ldd	r26, Z+16	; 0x10
    3b8c:	b1 89       	ldd	r27, Z+17	; 0x11
    3b8e:	9a 01       	movw	r18, r20
    3b90:	ab 01       	movw	r20, r22
    3b92:	28 0f       	add	r18, r24
    3b94:	39 1f       	adc	r19, r25
    3b96:	4a 1f       	adc	r20, r26
    3b98:	5b 1f       	adc	r21, r27
    3b9a:	c1 2c       	mov	r12, r1
    3b9c:	d1 2c       	mov	r13, r1
    3b9e:	76 01       	movw	r14, r12
    3ba0:	00 e0       	ldi	r16, 0x00	; 0
    3ba2:	10 e0       	ldi	r17, 0x00	; 0
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	c5 01       	movw	r24, r10
    3ba8:	f2 dd       	rcall	.-1052   	; 0x378e <xTimerGenericCommand>
    3baa:	27 c0       	rjmp	.+78     	; 0x3bfa <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bac:	d5 01       	movw	r26, r10
    3bae:	56 96       	adiw	r26, 0x16	; 22
    3bb0:	8c 91       	ld	r24, X
    3bb2:	56 97       	sbiw	r26, 0x16	; 22
    3bb4:	8e 7f       	andi	r24, 0xFE	; 254
    3bb6:	56 96       	adiw	r26, 0x16	; 22
    3bb8:	8c 93       	st	X, r24
                        break;
    3bba:	1f c0       	rjmp	.+62     	; 0x3bfa <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3bbc:	f5 01       	movw	r30, r10
    3bbe:	86 89       	ldd	r24, Z+22	; 0x16
    3bc0:	81 60       	ori	r24, 0x01	; 1
    3bc2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3bc4:	4a 81       	ldd	r20, Y+2	; 0x02
    3bc6:	5b 81       	ldd	r21, Y+3	; 0x03
    3bc8:	6c 81       	ldd	r22, Y+4	; 0x04
    3bca:	7d 81       	ldd	r23, Y+5	; 0x05
    3bcc:	46 87       	std	Z+14, r20	; 0x0e
    3bce:	57 87       	std	Z+15, r21	; 0x0f
    3bd0:	60 8b       	std	Z+16, r22	; 0x10
    3bd2:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3bd4:	40 0f       	add	r20, r16
    3bd6:	51 1f       	adc	r21, r17
    3bd8:	62 1f       	adc	r22, r18
    3bda:	73 1f       	adc	r23, r19
    3bdc:	68 01       	movw	r12, r16
    3bde:	79 01       	movw	r14, r18
    3be0:	c5 01       	movw	r24, r10
    3be2:	42 dd       	rcall	.-1404   	; 0x3668 <prvInsertTimerInActiveList>
                        break;
    3be4:	0a c0       	rjmp	.+20     	; 0x3bfa <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3be6:	f5 01       	movw	r30, r10
    3be8:	86 89       	ldd	r24, Z+22	; 0x16
    3bea:	81 fd       	sbrc	r24, 1
    3bec:	04 c0       	rjmp	.+8      	; 0x3bf6 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3bee:	c5 01       	movw	r24, r10
    3bf0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <vPortFree>
    3bf4:	02 c0       	rjmp	.+4      	; 0x3bfa <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bf6:	8e 7f       	andi	r24, 0xFE	; 254
    3bf8:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	a9 01       	movw	r20, r18
    3c00:	be 01       	movw	r22, r28
    3c02:	6f 5f       	subi	r22, 0xFF	; 255
    3c04:	7f 4f       	sbci	r23, 0xFF	; 255
    3c06:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <xTimerQueue>
    3c0a:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <xTimerQueue+0x1>
    3c0e:	0e 94 02 0a 	call	0x1404	; 0x1404 <xQueueReceive>
    3c12:	81 11       	cpse	r24, r1
    3c14:	70 cf       	rjmp	.-288    	; 0x3af6 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3c16:	28 96       	adiw	r28, 0x08	; 8
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	df 91       	pop	r29
    3c24:	cf 91       	pop	r28
    3c26:	1f 91       	pop	r17
    3c28:	0f 91       	pop	r16
    3c2a:	ff 90       	pop	r15
    3c2c:	ef 90       	pop	r14
    3c2e:	df 90       	pop	r13
    3c30:	cf 90       	pop	r12
    3c32:	bf 90       	pop	r11
    3c34:	af 90       	pop	r10
    3c36:	08 95       	ret

00003c38 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3c38:	08 95       	ret

00003c3a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3c3a:	84 b1       	in	r24, 0x04	; 4
    3c3c:	80 68       	ori	r24, 0x80	; 128
    3c3e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3c40:	85 b1       	in	r24, 0x05	; 5
    3c42:	80 68       	ori	r24, 0x80	; 128
    3c44:	85 b9       	out	0x05, r24	; 5
    3c46:	08 95       	ret

00003c48 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3c48:	83 b1       	in	r24, 0x03	; 3
    3c4a:	80 68       	ori	r24, 0x80	; 128
    3c4c:	83 b9       	out	0x03, r24	; 3
    3c4e:	08 95       	ret

00003c50 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3c50:	f4 df       	rcall	.-24     	; 0x3c3a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c52:	2f ef       	ldi	r18, 0xFF	; 255
    3c54:	80 e7       	ldi	r24, 0x70	; 112
    3c56:	92 e0       	ldi	r25, 0x02	; 2
    3c58:	21 50       	subi	r18, 0x01	; 1
    3c5a:	80 40       	sbci	r24, 0x00	; 0
    3c5c:	90 40       	sbci	r25, 0x00	; 0
    3c5e:	e1 f7       	brne	.-8      	; 0x3c58 <vApplicationMallocFailedHook+0x8>
    3c60:	00 c0       	rjmp	.+0      	; 0x3c62 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3c62:	00 00       	nop
    3c64:	f1 df       	rcall	.-30     	; 0x3c48 <prvBlinkMainLed>
    3c66:	f5 cf       	rjmp	.-22     	; 0x3c52 <vApplicationMallocFailedHook+0x2>

00003c68 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3c68:	e8 df       	rcall	.-48     	; 0x3c3a <prvSetMainLedOn>
    3c6a:	2f ef       	ldi	r18, 0xFF	; 255
    3c6c:	87 ea       	ldi	r24, 0xA7	; 167
    3c6e:	91 e6       	ldi	r25, 0x61	; 97
    3c70:	21 50       	subi	r18, 0x01	; 1
    3c72:	80 40       	sbci	r24, 0x00	; 0
    3c74:	90 40       	sbci	r25, 0x00	; 0
    3c76:	e1 f7       	brne	.-8      	; 0x3c70 <vApplicationStackOverflowHook+0x8>
    3c78:	00 c0       	rjmp	.+0      	; 0x3c7a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3c7a:	00 00       	nop
    3c7c:	e5 df       	rcall	.-54     	; 0x3c48 <prvBlinkMainLed>
    3c7e:	f5 cf       	rjmp	.-22     	; 0x3c6a <vApplicationStackOverflowHook+0x2>

00003c80 <conditioner_controller_create>:
uint16_t max_humidity;


// Method to create a task to controll the actuator
void conditioner_controller_create(UBaseType_t priority)
{
    3c80:	ef 92       	push	r14
    3c82:	ff 92       	push	r15
    3c84:	0f 93       	push	r16
	xTaskCreate(
    3c86:	e1 2c       	mov	r14, r1
    3c88:	f1 2c       	mov	r15, r1
    3c8a:	08 2f       	mov	r16, r24
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	48 e8       	ldi	r20, 0x88	; 136
    3c92:	51 e0       	ldi	r21, 0x01	; 1
    3c94:	6d e5       	ldi	r22, 0x5D	; 93
    3c96:	73 e0       	ldi	r23, 0x03	; 3
    3c98:	8f ec       	ldi	r24, 0xCF	; 207
    3c9a:	9e e1       	ldi	r25, 0x1E	; 30
    3c9c:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
	configMINIMAL_STACK_SIZE+200, // Stack size
	NULL,
	priority, // Task priority
	NULL );
	
}
    3ca0:	0f 91       	pop	r16
    3ca2:	ff 90       	pop	r15
    3ca4:	ef 90       	pop	r14
    3ca6:	08 95       	ret

00003ca8 <Conditioner_task>:
}

void Conditioner_task()
{
	// Wait a few second
	vTaskDelay(6000);
    3ca8:	60 e7       	ldi	r22, 0x70	; 112
    3caa:	77 e1       	ldi	r23, 0x17	; 23
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
	
	// Set the variables representing curent values with a real data
	current_humiditiy=get_humidity_data();
    3cb4:	f4 d0       	rcall	.+488    	; 0x3e9e <get_humidity_data>
    3cb6:	90 93 88 18 	sts	0x1888, r25	; 0x801888 <current_humiditiy+0x1>
    3cba:	80 93 87 18 	sts	0x1887, r24	; 0x801887 <current_humiditiy>
	current_temperature=get_temperature_data();
    3cbe:	e4 d0       	rcall	.+456    	; 0x3e88 <get_temperature_data>
    3cc0:	90 93 8c 18 	sts	0x188C, r25	; 0x80188c <current_temperature+0x1>
    3cc4:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <current_temperature>
    3cc8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Configuration_GetMinHumidity>
	
	// Set the variables representing max/min values with a real data
	min_humidity=Configuration_GetMinHumidity();
    3ccc:	90 93 8e 18 	sts	0x188E, r25	; 0x80188e <min_humidity+0x1>
    3cd0:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <min_humidity>
    3cd4:	0e 94 cb 02 	call	0x596	; 0x596 <Configuration_GetMaxHumidity>
	max_humidity=Configuration_GetMaxHumidity();
    3cd8:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <max_humidity+0x1>
    3cdc:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <max_humidity>
    3ce0:	0e 94 c6 02 	call	0x58c	; 0x58c <Configuration_GetMinTemperature>
	min_temperature=Configuration_GetMinTemperature();
    3ce4:	90 93 8a 18 	sts	0x188A, r25	; 0x80188a <min_temperature+0x1>
    3ce8:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <min_temperature>
    3cec:	0e 94 c1 02 	call	0x582	; 0x582 <Configuration_GetMaxTemperature>
	max_temperature=Configuration_GetMaxTemperature();
    3cf0:	90 93 90 18 	sts	0x1890, r25	; 0x801890 <max_temperature+0x1>
    3cf4:	80 93 8f 18 	sts	0x188F, r24	; 0x80188f <max_temperature>
    3cf8:	60 91 8d 18 	lds	r22, 0x188D	; 0x80188d <min_humidity>
	
	// Check if the configuration values are set
	uint16_t temp=min_humidity+max_humidity+min_temperature+max_temperature;
    3cfc:	70 91 8e 18 	lds	r23, 0x188E	; 0x80188e <min_humidity+0x1>
    3d00:	40 91 85 18 	lds	r20, 0x1885	; 0x801885 <max_humidity>
    3d04:	50 91 86 18 	lds	r21, 0x1886	; 0x801886 <max_humidity+0x1>
    3d08:	9b 01       	movw	r18, r22
    3d0a:	24 0f       	add	r18, r20
    3d0c:	35 1f       	adc	r19, r21
    3d0e:	e0 91 89 18 	lds	r30, 0x1889	; 0x801889 <min_temperature>
    3d12:	f0 91 8a 18 	lds	r31, 0x188A	; 0x80188a <min_temperature+0x1>
    3d16:	2e 0f       	add	r18, r30
    3d18:	3f 1f       	adc	r19, r31
    3d1a:	28 0f       	add	r18, r24
    3d1c:	39 1f       	adc	r19, r25
    3d1e:	21 15       	cp	r18, r1
	
	// If the configuration is not empty  AND the current humidity is bellow min value OR current temperature is bellow minimum value
	if (temp!=0 && ((current_humiditiy<min_humidity ) || (current_temperature<min_temperature )))
    3d20:	31 05       	cpc	r19, r1
    3d22:	d9 f0       	breq	.+54     	; 0x3d5a <Conditioner_task+0xb2>
    3d24:	a0 91 87 18 	lds	r26, 0x1887	; 0x801887 <current_humiditiy>
    3d28:	b0 91 88 18 	lds	r27, 0x1888	; 0x801888 <current_humiditiy+0x1>
    3d2c:	a6 17       	cp	r26, r22
    3d2e:	b7 07       	cpc	r27, r23
    3d30:	38 f0       	brcs	.+14     	; 0x3d40 <Conditioner_task+0x98>
    3d32:	60 91 8b 18 	lds	r22, 0x188B	; 0x80188b <current_temperature>
    3d36:	70 91 8c 18 	lds	r23, 0x188C	; 0x80188c <current_temperature+0x1>
    3d3a:	6e 17       	cp	r22, r30
    3d3c:	7f 07       	cpc	r23, r31
    3d3e:	68 f4       	brcc	.+26     	; 0x3d5a <Conditioner_task+0xb2>
    3d40:	83 e7       	ldi	r24, 0x73	; 115
	{
		printf("MOVING the Servo");// Print just for troubleshooting purpose
    3d42:	93 e0       	ldi	r25, 0x03	; 3
    3d44:	9f 93       	push	r25
    3d46:	8f 93       	push	r24
    3d48:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    3d4c:	64 e6       	ldi	r22, 0x64	; 100
		// Method to move the actuator
		rc_servo_setPosition((uint8_t)0,100);
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <rc_servo_setPosition>
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	08 95       	ret
    3d5a:	23 2b       	or	r18, r19
	}
	// If the configuration is not empty  AND the current humidity is above maximum value OR current temperature is above maximum value
	else if (temp!=0 && ((current_humiditiy>max_humidity) || (current_temperature>max_temperature)))
    3d5c:	d9 f0       	breq	.+54     	; 0x3d94 <Conditioner_task+0xec>
    3d5e:	20 91 87 18 	lds	r18, 0x1887	; 0x801887 <current_humiditiy>
    3d62:	30 91 88 18 	lds	r19, 0x1888	; 0x801888 <current_humiditiy+0x1>
    3d66:	42 17       	cp	r20, r18
    3d68:	53 07       	cpc	r21, r19
    3d6a:	38 f0       	brcs	.+14     	; 0x3d7a <Conditioner_task+0xd2>
    3d6c:	20 91 8b 18 	lds	r18, 0x188B	; 0x80188b <current_temperature>
    3d70:	30 91 8c 18 	lds	r19, 0x188C	; 0x80188c <current_temperature+0x1>
    3d74:	82 17       	cp	r24, r18
    3d76:	93 07       	cpc	r25, r19
    3d78:	68 f4       	brcc	.+26     	; 0x3d94 <Conditioner_task+0xec>
    3d7a:	83 e7       	ldi	r24, 0x73	; 115
	{
		printf("MOVING the Servo"); // Print just for troubleshooting purpose
    3d7c:	93 e0       	ldi	r25, 0x03	; 3
    3d7e:	9f 93       	push	r25
    3d80:	8f 93       	push	r24
    3d82:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    3d86:	6c e9       	ldi	r22, 0x9C	; 156
		// Method to move the actuator to the other side
		rc_servo_setPosition((uint8_t)0,-100);
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <rc_servo_setPosition>
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	08 95       	ret
    3d94:	60 e0       	ldi	r22, 0x00	; 0
	}
	else
	{
		// Method to move the actuator to the middle possition
		rc_servo_setPosition((uint8_t)0,0);
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <rc_servo_setPosition>
    3d9c:	08 95       	ret

00003d9e <Conditioner_Task_Run>:
    3d9e:	84 df       	rcall	.-248    	; 0x3ca8 <Conditioner_task>
{	
	(void)pvParameters;
	for (;;)
	{
		// Method to controlls the actuator
		Conditioner_task();
    3da0:	fe cf       	rjmp	.-4      	; 0x3d9e <Conditioner_Task_Run>

00003da2 <create_message_buffer>:
 const size_t xMessageBufferSizeBytes = 100;
 
// Method to create a message buffer
void create_message_buffer()
{
	xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );
    3da2:	41 e0       	ldi	r20, 0x01	; 1
    3da4:	60 e0       	ldi	r22, 0x00	; 0
    3da6:	70 e0       	ldi	r23, 0x00	; 0
    3da8:	84 e6       	ldi	r24, 0x64	; 100
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferGenericCreate>
    3db0:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <xMessageBuffer+0x1>
    3db4:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <xMessageBuffer>
	downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);;
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	8c e2       	ldi	r24, 0x2C	; 44
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferGenericCreate>
    3dc6:	90 93 53 18 	sts	0x1853, r25	; 0x801853 <downlinkMessageBuffer+0x1>
    3dca:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <downlinkMessageBuffer>
    3dce:	08 95       	ret

00003dd0 <create_mutex>:
}
 
// Method to create mutex
void create_mutex()
{
	mutex = xSemaphoreCreateMutex();
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	0e 94 bb 09 	call	0x1376	; 0x1376 <xQueueCreateMutex>
    3dd6:	90 93 55 18 	sts	0x1855, r25	; 0x801855 <mutex+0x1>
    3dda:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <mutex>
    3dde:	08 95       	ret

00003de0 <create_event_groups>:
}
 
// Method to create event groups
void create_event_groups()
{
	_meassureEventGroup=xEventGroupCreate();
    3de0:	0e 94 97 03 	call	0x72e	; 0x72e <xEventGroupCreate>
    3de4:	90 93 51 18 	sts	0x1851, r25	; 0x801851 <_meassureEventGroup+0x1>
    3de8:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <_meassureEventGroup>
	_dataReadyEventGroup=xEventGroupCreate();
    3dec:	0e 94 97 03 	call	0x72e	; 0x72e <xEventGroupCreate>
    3df0:	90 93 71 18 	sts	0x1871, r25	; 0x801871 <_dataReadyEventGroup+0x1>
    3df4:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <_dataReadyEventGroup>
    3df8:	08 95       	ret

00003dfa <SensorDataPackage_create>:

SensorDataPackage_t packet;

//Create method - calling pvPortMalloc()
SensorDataPackage_t SensorDataPackage_create(){
	packet = pvPortMalloc(sizeof(SensorDataPackage));
    3dfa:	86 e0       	ldi	r24, 0x06	; 6
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	0e 94 4b 05 	call	0xa96	; 0xa96 <pvPortMalloc>
    3e02:	90 93 92 18 	sts	0x1892, r25	; 0x801892 <packet+0x1>
    3e06:	80 93 91 18 	sts	0x1891, r24	; 0x801891 <packet>
	if (NULL == packet){
    3e0a:	00 97       	sbiw	r24, 0x00	; 0
    3e0c:	11 f4       	brne	.+4      	; 0x3e12 <SensorDataPackage_create+0x18>
		return NULL;
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
	}
	return packet;
}
    3e12:	08 95       	ret

00003e14 <setCO2Ppm>:

//Set co2Ppm variable inside packet to CO2 value (ppm)
void setCO2Ppm(uint16_t pppm)
{
	packet->co2Ppm=pppm;
    3e14:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <packet>
    3e18:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <packet+0x1>
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
    3e20:	08 95       	ret

00003e22 <setTemperatureData>:
}

//Set temperatureData variable inside packet to Temperature value (data)
void setTemperatureData(uint16_t data)
{
packet->temperatureData=data;	
    3e22:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <packet>
    3e26:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <packet+0x1>
    3e2a:	93 83       	std	Z+3, r25	; 0x03
    3e2c:	82 83       	std	Z+2, r24	; 0x02
    3e2e:	08 95       	ret

00003e30 <setHumidityData>:
}

//Set humidityData variable inside packet to Humidity value (data)
void setHumidityData(uint16_t data)
{	 
packet->humidityData=data;	
    3e30:	e0 91 91 18 	lds	r30, 0x1891	; 0x801891 <packet>
    3e34:	f0 91 92 18 	lds	r31, 0x1892	; 0x801892 <packet+0x1>
    3e38:	95 83       	std	Z+5, r25	; 0x05
    3e3a:	84 83       	std	Z+4, r24	; 0x04
    3e3c:	08 95       	ret

00003e3e <getLoRaPayload>:
}

//Method to get payload containing all set values
lora_driver_payload_t getLoRaPayload(uint8_t portNo){
	//6 bytes long payload
	payload.len = 6;
    3e3e:	ed ee       	ldi	r30, 0xED	; 237
    3e40:	f6 e1       	ldi	r31, 0x16	; 22
    3e42:	26 e0       	ldi	r18, 0x06	; 6
    3e44:	21 83       	std	Z+1, r18	; 0x01
	
	//Select a port number
	payload.portNo = portNo;
    3e46:	60 83       	st	Z, r22
	
	//Transform the value for each byte
	payload.bytes[0]=(uint8_t)(packet->co2Ppm>>8);
    3e48:	a0 91 91 18 	lds	r26, 0x1891	; 0x801891 <packet>
    3e4c:	b0 91 92 18 	lds	r27, 0x1892	; 0x801892 <packet+0x1>
    3e50:	2c 91       	ld	r18, X
    3e52:	11 96       	adiw	r26, 0x01	; 1
    3e54:	3c 91       	ld	r19, X
    3e56:	11 97       	sbiw	r26, 0x01	; 1
    3e58:	32 83       	std	Z+2, r19	; 0x02
	payload.bytes[1] =(uint8_t) (packet->co2Ppm & 0xFF);
    3e5a:	23 83       	std	Z+3, r18	; 0x03
	payload.bytes[2]=(uint8_t)(packet->temperatureData>>8);
    3e5c:	12 96       	adiw	r26, 0x02	; 2
    3e5e:	2c 91       	ld	r18, X
    3e60:	12 97       	sbiw	r26, 0x02	; 2
    3e62:	13 96       	adiw	r26, 0x03	; 3
    3e64:	3c 91       	ld	r19, X
    3e66:	13 97       	sbiw	r26, 0x03	; 3
    3e68:	34 83       	std	Z+4, r19	; 0x04
	payload.bytes[3] = (uint8_t)(packet->temperatureData &  0xFF);
    3e6a:	25 83       	std	Z+5, r18	; 0x05
	payload.bytes[4]=(uint8_t)(packet->humidityData>>8);
    3e6c:	14 96       	adiw	r26, 0x04	; 4
    3e6e:	2c 91       	ld	r18, X
    3e70:	14 97       	sbiw	r26, 0x04	; 4
    3e72:	15 96       	adiw	r26, 0x05	; 5
    3e74:	3c 91       	ld	r19, X
    3e76:	36 83       	std	Z+6, r19	; 0x06
	payload.bytes[5] = (uint8_t)(packet->humidityData &  0xFF);
    3e78:	27 83       	std	Z+7, r18	; 0x07
	
	return payload;
    3e7a:	26 e1       	ldi	r18, 0x16	; 22
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	01 90       	ld	r0, Z+
    3e80:	0d 92       	st	X+, r0
    3e82:	2a 95       	dec	r18
    3e84:	e1 f7       	brne	.-8      	; 0x3e7e <getLoRaPayload+0x40>
	}
    3e86:	08 95       	ret

00003e88 <get_temperature_data>:
	
}
// Get temperature data
uint16_t get_temperature_data()
{
	return (uint16_t)temperature;
    3e88:	60 91 05 17 	lds	r22, 0x1705	; 0x801705 <temperature>
    3e8c:	70 91 06 17 	lds	r23, 0x1706	; 0x801706 <temperature+0x1>
    3e90:	80 91 07 17 	lds	r24, 0x1707	; 0x801707 <temperature+0x2>
    3e94:	90 91 08 17 	lds	r25, 0x1708	; 0x801708 <temperature+0x3>
    3e98:	f1 d1       	rcall	.+994    	; 0x427c <__fixunssfsi>
}
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	08 95       	ret

00003e9e <get_humidity_data>:

// Get humidity data
uint16_t get_humidity_data()
{
	return humidity;
}
    3e9e:	80 91 03 17 	lds	r24, 0x1703	; 0x801703 <humidity>
    3ea2:	90 91 04 17 	lds	r25, 0x1704	; 0x801704 <humidity+0x1>
    3ea6:	08 95       	ret

00003ea8 <tempHum_taskCreate>:


//Method to create a task to measure the temperature and humidity
void tempHum_taskCreate(UBaseType_t task_priority){
    3ea8:	ef 92       	push	r14
    3eaa:	ff 92       	push	r15
    3eac:	0f 93       	push	r16
	xTaskCreate(
    3eae:	e1 2c       	mov	r14, r1
    3eb0:	f1 2c       	mov	r15, r1
    3eb2:	08 2f       	mov	r16, r24
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 ec       	ldi	r20, 0xC0	; 192
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	64 e8       	ldi	r22, 0x84	; 132
    3ebe:	73 e0       	ldi	r23, 0x03	; 3
    3ec0:	8b ed       	ldi	r24, 0xDB	; 219
    3ec2:	9f e1       	ldi	r25, 0x1F	; 31
    3ec4:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
	,  "Temperature_Humidity"  // A name of task
	,  configMINIMAL_STACK_SIZE  // This stack size
	,  NULL
	,  task_priority // Priority od the task
	,  NULL );
}
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	ef 90       	pop	r14
    3ece:	08 95       	ret

00003ed0 <tempHum_Run>:


// Task to run for the temperature/humididty sensors to work
void tempHum_Run() {
    3ed0:	cf 92       	push	r12
    3ed2:	df 92       	push	r13
    3ed4:	ef 92       	push	r14
    3ed6:	ff 92       	push	r15
    3ed8:	0f 93       	push	r16
	event_measure = xEventGroupWaitBits(
    3eda:	cc 24       	eor	r12, r12
    3edc:	ca 94       	dec	r12
    3ede:	dc 2c       	mov	r13, r12
    3ee0:	76 01       	movw	r14, r12
    3ee2:	01 e0       	ldi	r16, 0x01	; 1
    3ee4:	21 e0       	ldi	r18, 0x01	; 1
    3ee6:	41 e0       	ldi	r20, 0x01	; 1
    3ee8:	50 e0       	ldi	r21, 0x00	; 0
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	70 e0       	ldi	r23, 0x00	; 0
    3eee:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_meassureEventGroup>
    3ef2:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_meassureEventGroup+0x1>
    3ef6:	0e 94 aa 03 	call	0x754	; 0x754 <xEventGroupWaitBits>
    3efa:	60 93 93 18 	sts	0x1893, r22	; 0x801893 <event_measure>
    3efe:	70 93 94 18 	sts	0x1894, r23	; 0x801894 <event_measure+0x1>
    3f02:	80 93 95 18 	sts	0x1895, r24	; 0x801895 <event_measure+0x2>
    3f06:	90 93 96 18 	sts	0x1896, r25	; 0x801896 <event_measure+0x3>
	TEMPERATURE_HUMIDITY_BIT,
	pdTRUE,
	pdTRUE,
	portMAX_DELAY);
		
	if ((event_measure & TEMPERATURE_HUMIDITY_BIT) ==TEMPERATURE_HUMIDITY_BIT)
    3f0a:	60 ff       	sbrs	r22, 0
    3f0c:	4e c0       	rjmp	.+156    	; 0x3faa <tempHum_Run+0xda>
	{
		vTaskDelay( pdMS_TO_TICKS(100UL));
    3f0e:	66 e0       	ldi	r22, 0x06	; 6
    3f10:	70 e0       	ldi	r23, 0x00	; 0
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
		if (HIH8120_OK != hih8120_wakeup())
    3f1a:	87 d2       	rcall	.+1294   	; 0x442a <hih8120_wakeup>
    3f1c:	88 23       	and	r24, r24
    3f1e:	c1 f0       	breq	.+48     	; 0x3f50 <tempHum_Run+0x80>
		{
			//In case the sensor is not ready yet then delay method
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f20:	66 e0       	ldi	r22, 0x06	; 6
    3f22:	70 e0       	ldi	r23, 0x00	; 0
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
			//Print error message for a troubleshhoting purpose
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    3f2c:	89 e9       	ldi	r24, 0x99	; 153
    3f2e:	93 e0       	ldi	r25, 0x03	; 3
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
			while(HIH8120_OK == hih8120_wakeup())
    3f38:	0f 90       	pop	r0
    3f3a:	0f 90       	pop	r0
    3f3c:	06 c0       	rjmp	.+12     	; 0x3f4a <tempHum_Run+0x7a>
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
    3f3e:	63 e0       	ldi	r22, 0x03	; 3
    3f40:	70 e0       	ldi	r23, 0x00	; 0
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
		{
			//In case the sensor is not ready yet then delay method
			vTaskDelay(pdMS_TO_TICKS(100UL));
			//Print error message for a troubleshhoting purpose
			printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
			while(HIH8120_OK == hih8120_wakeup())
    3f4a:	6f d2       	rcall	.+1246   	; 0x442a <hih8120_wakeup>
    3f4c:	88 23       	and	r24, r24
			{
				vTaskDelay(pdMS_TO_TICKS(50UL));
			}
		}
		//Perform measurement of temperature and humidity 
		hih8120_measure();
    3f4e:	b9 f3       	breq	.-18     	; 0x3f3e <tempHum_Run+0x6e>
    3f50:	81 d2       	rcall	.+1282   	; 0x4454 <hih8120_measure>
		//Delay method
		vTaskDelay(pdMS_TO_TICKS(50UL));
    3f52:	63 e0       	ldi	r22, 0x03	; 3
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
		if (HIH8120_OK == hih8120_measure() )
    3f5e:	7a d2       	rcall	.+1268   	; 0x4454 <hih8120_measure>
    3f60:	81 11       	cpse	r24, r1
    3f62:	23 c0       	rjmp	.+70     	; 0x3faa <tempHum_Run+0xda>
		{
			//Delay method
			vTaskDelay(pdMS_TO_TICKS(100UL));
    3f64:	66 e0       	ldi	r22, 0x06	; 6
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
			//Get the measured temperature and humidity
			humidity =  hih8120_getHumidityPercent_x10();
    3f70:	96 d2       	rcall	.+1324   	; 0x449e <hih8120_getHumidityPercent_x10>
    3f72:	90 93 04 17 	sts	0x1704, r25	; 0x801704 <humidity+0x1>
    3f76:	80 93 03 17 	sts	0x1703, r24	; 0x801703 <humidity>
			temperature = hih8120_getTemperature_x10();
    3f7a:	b5 d2       	rcall	.+1386   	; 0x44e6 <hih8120_getTemperature_x10>
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	99 0f       	add	r25, r25
    3f80:	88 0b       	sbc	r24, r24
    3f82:	99 0b       	sbc	r25, r25
    3f84:	a9 d1       	rcall	.+850    	; 0x42d8 <__floatsisf>
    3f86:	60 93 05 17 	sts	0x1705, r22	; 0x801705 <temperature>
    3f8a:	70 93 06 17 	sts	0x1706, r23	; 0x801706 <temperature+0x1>
    3f8e:	80 93 07 17 	sts	0x1707, r24	; 0x801707 <temperature+0x2>
    3f92:	90 93 08 17 	sts	0x1708, r25	; 0x801708 <temperature+0x3>
			//Set the bits of the event group
			xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
    3f96:	42 e0       	ldi	r20, 0x02	; 2
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	60 e0       	ldi	r22, 0x00	; 0
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <_dataReadyEventGroup>
    3fa2:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <_dataReadyEventGroup+0x1>
    3fa6:	0e 94 4a 04 	call	0x894	; 0x894 <xEventGroupSetBits>
		}
	}
}
    3faa:	0f 91       	pop	r16
    3fac:	ff 90       	pop	r15
    3fae:	ef 90       	pop	r14
    3fb0:	df 90       	pop	r13
    3fb2:	cf 90       	pop	r12
    3fb4:	08 95       	ret

00003fb6 <tempHum_Task>:
	(void)pvParameters;
	//Infinite loop that runs the task
	for(;;)
	{
		//Calling method to performs measurements
		tempHum_Run();
    3fb6:	8c df       	rcall	.-232    	; 0x3ed0 <tempHum_Run>
    3fb8:	fe cf       	rjmp	.-4      	; 0x3fb6 <tempHum_Task>

00003fba <uplink_lora_setup>:
	NULL );
}

// Calling required LoRa Serup methods
static void uplink_lora_setup(void)
{
    3fba:	0f 93       	push	r16
    3fbc:	1f 93       	push	r17
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	cd b7       	in	r28, 0x3d	; 61
    3fc4:	de b7       	in	r29, 0x3e	; 62
    3fc6:	64 97       	sbiw	r28, 0x14	; 20
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	de bf       	out	0x3e, r29	; 62
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3fd8:	fe d3       	rcall	.+2044   	; 0x47d6 <lora_driver_rn2483FactoryReset>
    3fda:	7a d6       	rcall	.+3316   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    3fdc:	9f 93       	push	r25
    3fde:	8f 93       	push	r24
    3fe0:	83 ed       	ldi	r24, 0xD3	; 211
    3fe2:	93 e0       	ldi	r25, 0x03	; 3
    3fe4:	9f 93       	push	r25
    3fe6:	8f 93       	push	r24
    3fe8:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3fec:	72 d5       	rcall	.+2788   	; 0x4ad2 <lora_driver_configureToEu868>
    3fee:	70 d6       	rcall	.+3296   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    3ff0:	9f 93       	push	r25
    3ff2:	8f 93       	push	r24
    3ff4:	86 ee       	ldi	r24, 0xE6	; 230
    3ff6:	93 e0       	ldi	r25, 0x03	; 3
    3ff8:	9f 93       	push	r25
    3ffa:	8f 93       	push	r24
    3ffc:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    4000:	8f ef       	ldi	r24, 0xFF	; 255
    4002:	93 e0       	ldi	r25, 0x03	; 3
	puts("Try to join1");
    4004:	0e 94 46 32 	call	0x648c	; 0x648c <puts>
    4008:	8e 01       	movw	r16, r28
    400a:	0f 5f       	subi	r16, 0xFF	; 255
	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    400c:	1f 4f       	sbci	r17, 0xFF	; 255
    400e:	c8 01       	movw	r24, r16
    4010:	f4 d3       	rcall	.+2024   	; 0x47fa <lora_driver_getRn2483Hweui>
    4012:	5e d6       	rcall	.+3260   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    4014:	1f 93       	push	r17
    4016:	0f 93       	push	r16
    4018:	9f 93       	push	r25
    401a:	8f 93       	push	r24
    401c:	8c e0       	ldi	r24, 0x0C	; 12
    401e:	94 e0       	ldi	r25, 0x04	; 4
    4020:	9f 93       	push	r25
    4022:	8f 93       	push	r24
    4024:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    4028:	c8 01       	movw	r24, r16
    402a:	03 d4       	rcall	.+2054   	; 0x4832 <lora_driver_setDeviceIdentifier>
    402c:	51 d6       	rcall	.+3234   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    402e:	9f 93       	push	r25
    4030:	8f 93       	push	r24
    4032:	1f 93       	push	r17
    4034:	0f 93       	push	r16
    4036:	80 e2       	ldi	r24, 0x20	; 32
    4038:	94 e0       	ldi	r25, 0x04	; 4
    403a:	9f 93       	push	r25
    403c:	8f 93       	push	r24
    403e:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    4042:	85 e3       	ldi	r24, 0x35	; 53
    4044:	94 e0       	ldi	r25, 0x04	; 4
	puts("Try to join2");
    4046:	0e 94 46 32 	call	0x648c	; 0x648c <puts>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    404a:	a8 01       	movw	r20, r16
    404c:	62 e4       	ldi	r22, 0x42	; 66
    404e:	74 e0       	ldi	r23, 0x04	; 4
    4050:	83 e6       	ldi	r24, 0x63	; 99
    4052:	94 e0       	ldi	r25, 0x04	; 4
    4054:	1c d6       	rcall	.+3128   	; 0x4c8e <lora_driver_setOtaaIdentity>
    4056:	3c d6       	rcall	.+3192   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    4058:	9f 93       	push	r25
    405a:	8f 93       	push	r24
    405c:	1f 93       	push	r17
    405e:	0f 93       	push	r16
    4060:	82 e4       	ldi	r24, 0x42	; 66
    4062:	94 e0       	ldi	r25, 0x04	; 4
    4064:	9f 93       	push	r25
    4066:	8f 93       	push	r24
    4068:	83 e6       	ldi	r24, 0x63	; 99
    406a:	94 e0       	ldi	r25, 0x04	; 4
    406c:	9f 93       	push	r25
    406e:	8f 93       	push	r24
    4070:	84 e7       	ldi	r24, 0x74	; 116
    4072:	94 e0       	ldi	r25, 0x04	; 4
    4074:	9f 93       	push	r25
    4076:	8f 93       	push	r24
    4078:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    407c:	0d d4       	rcall	.+2074   	; 0x4898 <lora_driver_saveMac>
    407e:	28 d6       	rcall	.+3152   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    4080:	9f 93       	push	r25
    4082:	8f 93       	push	r24
    4084:	8a ea       	ldi	r24, 0xAA	; 170
    4086:	94 e0       	ldi	r25, 0x04	; 4
    4088:	9f 93       	push	r25
    408a:	8f 93       	push	r24
    408c:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    4090:	0f b6       	in	r0, 0x3f	; 63
    4092:	f8 94       	cli
    4094:	de bf       	out	0x3e, r29	; 62
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	cd bf       	out	0x3d, r28	; 61
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	f7 d4       	rcall	.+2542   	; 0x4a8c <lora_driver_setAdaptiveDataRate>
    409e:	18 d6       	rcall	.+3120   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    40a0:	9f 93       	push	r25
    40a2:	8f 93       	push	r24
    40a4:	89 eb       	ldi	r24, 0xB9	; 185
    40a6:	94 e0       	ldi	r25, 0x04	; 4
    40a8:	9f 93       	push	r25
    40aa:	8f 93       	push	r24
    40ac:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
	puts("Try to join3");
    40b0:	8a ed       	ldi	r24, 0xDA	; 218
    40b2:	94 e0       	ldi	r25, 0x04	; 4
    40b4:	0e 94 46 32 	call	0x648c	; 0x648c <puts>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    40b8:	84 ef       	ldi	r24, 0xF4	; 244
    40ba:	91 e0       	ldi	r25, 0x01	; 1
    40bc:	f2 d4       	rcall	.+2532   	; 0x4aa2 <lora_driver_setReceiveDelay>
    40be:	08 d6       	rcall	.+3088   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    40c0:	9f 93       	push	r25
    40c2:	8f 93       	push	r24
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	8f 93       	push	r24
    40c8:	84 ef       	ldi	r24, 0xF4	; 244
    40ca:	8f 93       	push	r24
    40cc:	87 ee       	ldi	r24, 0xE7	; 231
    40ce:	94 e0       	ldi	r25, 0x04	; 4
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    40d8:	0f b6       	in	r0, 0x3f	; 63
    40da:	f8 94       	cli
    40dc:	de bf       	out	0x3e, r29	; 62
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    40e2:	1a e0       	ldi	r17, 0x0A	; 10
	
	
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	de d3       	rcall	.+1980   	; 0x48a4 <lora_driver_join>
    40e8:	08 2f       	mov	r16, r24
    40ea:	f2 d5       	rcall	.+3044   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    40ec:	9f 93       	push	r25
    40ee:	8f 93       	push	r24
    40f0:	1f 92       	push	r1
    40f2:	1f 93       	push	r17
    40f4:	87 e0       	ldi	r24, 0x07	; 7
    40f6:	95 e0       	ldi	r25, 0x05	; 5
    40f8:	9f 93       	push	r25
    40fa:	8f 93       	push	r24
    40fc:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	08 30       	cpi	r16, 0x08	; 8
    410e:	59 f0       	breq	.+22     	; 0x4126 <uplink_lora_setup+0x16c>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4116:	66 e3       	ldi	r22, 0x36	; 54
    4118:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
    4122:	11 50       	subi	r17, 0x01	; 1
    4124:	f9 f6       	brne	.-66     	; 0x40e4 <uplink_lora_setup+0x12a>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4126:	08 30       	cpi	r16, 0x08	; 8
    4128:	21 f4       	brne	.+8      	; 0x4132 <uplink_lora_setup+0x178>

	if (rc == LORA_ACCEPTED)
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    4130:	0d c0       	rjmp	.+26     	; 0x414c <uplink_lora_setup+0x192>
    4132:	87 e2       	ldi	r24, 0x27	; 39
		while (1)
		{
			taskYIELD();
		}
	}
}
    4134:	95 e0       	ldi	r25, 0x05	; 5
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
	}
	else
	{
		puts("went wrong");
    4136:	0e 94 46 32 	call	0x648c	; 0x648c <puts>
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <status_leds_ledOff>
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    4146:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    414a:	fd cf       	rjmp	.-6      	; 0x4146 <uplink_lora_setup+0x18c>
    414c:	64 96       	adiw	r28, 0x14	; 20
    414e:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    4150:	f8 94       	cli
    4152:	de bf       	out	0x3e, r29	; 62
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	cd bf       	out	0x3d, r28	; 61
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	08 95       	ret

00004162 <upLink_create>:
    4162:	ef 92       	push	r14
    4164:	ff 92       	push	r15
	}
}

//Method to create an UplinkHandler Task
void upLink_create(UBaseType_t priority)
{
    4166:	0f 93       	push	r16
	xTaskCreate(
    4168:	20 91 4e 18 	lds	r18, 0x184E	; 0x80184e <xMessageBuffer>
    416c:	30 91 4f 18 	lds	r19, 0x184F	; 0x80184f <xMessageBuffer+0x1>
    4170:	e1 2c       	mov	r14, r1
    4172:	f1 2c       	mov	r15, r1
    4174:	08 2f       	mov	r16, r24
    4176:	48 e8       	ldi	r20, 0x88	; 136
    4178:	51 e0       	ldi	r21, 0x01	; 1
    417a:	62 e3       	ldi	r22, 0x32	; 50
    417c:	75 e0       	ldi	r23, 0x05	; 5
    417e:	85 e0       	ldi	r24, 0x05	; 5
    4180:	91 e2       	ldi	r25, 0x21	; 33
    4182:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
	"LoraUpLink", // Name of the task
	configMINIMAL_STACK_SIZE+200, // Stack size
	(void*)xMessageBuffer, // Message buffer
	priority, //Task priority
	NULL );
}
    4186:	0f 91       	pop	r16
    4188:	ff 90       	pop	r15
    418a:	ef 90       	pop	r14
    418c:	08 95       	ret

0000418e <send>:
		// Method to send the bytes through LoRaWan
		send(xBytesSent);
	}
}

void send(size_t xBytesSent){
    418e:	0f 93       	push	r16
    4190:	1f 93       	push	r17
	
	//Set recieved message buffer to xBytesSent so they can be send
	xBytesSent = xMessageBufferReceive(
    4192:	0f ef       	ldi	r16, 0xFF	; 255
    4194:	1f ef       	ldi	r17, 0xFF	; 255
    4196:	98 01       	movw	r18, r16
    4198:	46 e1       	ldi	r20, 0x16	; 22
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	69 e0       	ldi	r22, 0x09	; 9
    419e:	77 e1       	ldi	r23, 0x17	; 23
    41a0:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <xMessageBuffer>
    41a4:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <xMessageBuffer+0x1>
    41a8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <xStreamBufferReceive>
	(void*) &_uplink_payload, // Object to be send
	sizeof(_uplink_payload), // Size of object
	portMAX_DELAY);
	
	//Only send if xBytesSent is not empty
	if (xBytesSent>0)
    41ac:	89 2b       	or	r24, r25
    41ae:	a1 f0       	breq	.+40     	; 0x41d8 <send+0x4a>
	{
		status_leds_shortPuls(led_ST4);  // Pulse the led for troubleshooting purpose
    41b0:	83 e0       	ldi	r24, 0x03	; 3
    41b2:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <status_leds_shortPuls>
		
		//Print the return code for troubleshooting purpose and send the data by LoRa Driver
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    41b6:	69 e0       	ldi	r22, 0x09	; 9
    41b8:	77 e1       	ldi	r23, 0x17	; 23
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	9c d3       	rcall	.+1848   	; 0x48f6 <lora_driver_sendUploadMessage>
    41be:	88 d5       	rcall	.+2832   	; 0x4cd0 <lora_driver_mapReturnCodeToText>
    41c0:	9f 93       	push	r25
    41c2:	8f 93       	push	r24
    41c4:	8d e3       	ldi	r24, 0x3D	; 61
    41c6:	95 e0       	ldi	r25, 0x05	; 5
    41c8:	9f 93       	push	r25
    41ca:	8f 93       	push	r24
    41cc:	0e 94 33 32 	call	0x6466	; 0x6466 <printf>
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
	}
}
    41d8:	1f 91       	pop	r17
    41da:	0f 91       	pop	r16
    41dc:	08 95       	ret

000041de <lora_Handler_task>:


void lora_Handler_task()
{
	// Hardware reset of LoRaWAN
	lora_driver_resetRn2483(1);
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	ec d2       	rcall	.+1496   	; 0x47ba <lora_driver_resetRn2483>
	vTaskDelay(2UL);
    41e2:	62 e0       	ldi	r22, 0x02	; 2
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
	lora_driver_resetRn2483(0);
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	e4 d2       	rcall	.+1480   	; 0x47ba <lora_driver_resetRn2483>
	
	// Delay so the device has a time to wake up
	vTaskDelay(150UL);
    41f2:	66 e9       	ldi	r22, 0x96	; 150
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>

	
	lora_driver_flushBuffers(); // Getting rid of first version after reset!
    41fe:	96 d2       	rcall	.+1324   	; 0x472c <lora_driver_flushBuffers>
	uplink_lora_setup(); // Setting up the LoraWan
    4200:	dc de       	rcall	.-584    	; 0x3fba <uplink_lora_setup>
	size_t xBytesSent;
	
	for(;;)
	{
		// Method to send the bytes through LoRaWan
		send(xBytesSent);
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	c3 df       	rcall	.-122    	; 0x418e <send>
    4208:	fc cf       	rjmp	.-8      	; 0x4202 <lora_Handler_task+0x24>

0000420a <upLinkHandler_StartTask>:
    420a:	e9 df       	rcall	.-46     	; 0x41de <lora_Handler_task>

0000420c <create_tasks>:
extern MessageBufferHandle_t downlinkMessageBuffer;

// Method that creates needed tasks with its prioority
void create_tasks()
{
	application_task_create(3);
    420c:	83 e0       	ldi	r24, 0x03	; 3
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	0e 94 08 01 	call	0x210	; 0x210 <application_task_create>
	co2_task_create(1);
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <co2_task_create>
	tempHum_taskCreate(1);
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	45 de       	rcall	.-886    	; 0x3ea8 <tempHum_taskCreate>
	SensorDataPackage_create();
    421e:	ed dd       	rcall	.-1062   	; 0x3dfa <SensorDataPackage_create>
	conditioner_controller_create(4);
    4220:	84 e0       	ldi	r24, 0x04	; 4
    4222:	2e cd       	rjmp	.-1444   	; 0x3c80 <conditioner_controller_create>
    4224:	08 95       	ret

00004226 <drivers_initialisation>:
    4226:	e9 d0       	rcall	.+466    	; 0x43fa <hih8120_initialise>

// Method that initialise sensors and servo
void drivers_initialisation()
{	
	  hih8120_initialise(); // Initialise Temperature/Humidity sensor
	  mh_z19_initialise(ser_USART3); // Initialise CO2 sensor
    4228:	83 e0       	ldi	r24, 0x03	; 3
	  rc_servo_initialise(); // Initialise RC Servo
    422a:	2e d6       	rcall	.+3164   	; 0x4e88 <mh_z19_initialise>
    422c:	9e c6       	rjmp	.+3388   	; 0x4f6a <rc_servo_initialise>
    422e:	08 95       	ret

00004230 <createUtility>:
}

// Method that create Utility
void createUtility()
{
	create_event_groups(); // Create event groups
    4230:	d7 dd       	rcall	.-1106   	; 0x3de0 <create_event_groups>
	create_message_buffer(); // Create message buffer
    4232:	b7 dd       	rcall	.-1170   	; 0x3da2 <create_message_buffer>
	create_mutex(); // Create mutex
    4234:	cd cd       	rjmp	.-1126   	; 0x3dd0 <create_mutex>
    4236:	08 95       	ret

00004238 <initialiseSystem>:
    4238:	81 b1       	in	r24, 0x01	; 1

// Method that initialise the system
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    423a:	81 68       	ori	r24, 0x81	; 129
    423c:	81 b9       	out	0x01, r24	; 1
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	0e 94 88 2b 	call	0x5710	; 0x5710 <stdio_initialise>
	drivers_initialisation();
    4244:	f0 df       	rcall	.-32     	; 0x4226 <drivers_initialisation>
	create_tasks();
    4246:	e2 df       	rcall	.-60     	; 0x420c <create_tasks>
    4248:	85 e0       	ldi	r24, 0x05	; 5
	status_leds_initialise(5); // Priority 5 for internal task
    424a:	0e 94 8f 2c 	call	0x591e	; 0x591e <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	createUtility();
    424e:	f0 df       	rcall	.-32     	; 0x4230 <createUtility>
    4250:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <downlinkMessageBuffer>
	lora_driver_initialise(1, downlinkMessageBuffer);
    4254:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <downlinkMessageBuffer+0x1>
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	6f d2       	rcall	.+1246   	; 0x473a <lora_driver_initialise>
	// Create UpLinkTask and start it up with priority 4 and setup the LoRaWan
	upLink_create(4);
    425c:	84 e0       	ldi	r24, 0x04	; 4
    425e:	81 df       	rcall	.-254    	; 0x4162 <upLink_create>
    4260:	85 e0       	ldi	r24, 0x05	; 5
	// Create DownlinkTask and start it up with priority 5
	lora_DownLinkHandler_create(5);
    4262:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <lora_DownLinkHandler_create>
    4266:	08 95       	ret

00004268 <main>:
    4268:	e7 df       	rcall	.-50     	; 0x4238 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Initialise system must be done as the very first thing
	printf("Program started \n"); // Print just for troubleshooting purpose
    426a:	82 e5       	ldi	r24, 0x52	; 82
    426c:	95 e0       	ldi	r25, 0x05	; 5
    426e:	0e 94 46 32 	call	0x648c	; 0x648c <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    4272:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <vTaskStartScheduler>
	
}
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	08 95       	ret

0000427c <__fixunssfsi>:
    427c:	70 d0       	rcall	.+224    	; 0x435e <__fp_splitA>
    427e:	88 f0       	brcs	.+34     	; 0x42a2 <__fixunssfsi+0x26>
    4280:	9f 57       	subi	r25, 0x7F	; 127
    4282:	90 f0       	brcs	.+36     	; 0x42a8 <__fixunssfsi+0x2c>
    4284:	b9 2f       	mov	r27, r25
    4286:	99 27       	eor	r25, r25
    4288:	b7 51       	subi	r27, 0x17	; 23
    428a:	a0 f0       	brcs	.+40     	; 0x42b4 <__fixunssfsi+0x38>
    428c:	d1 f0       	breq	.+52     	; 0x42c2 <__fixunssfsi+0x46>
    428e:	66 0f       	add	r22, r22
    4290:	77 1f       	adc	r23, r23
    4292:	88 1f       	adc	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	1a f0       	brmi	.+6      	; 0x429e <__fixunssfsi+0x22>
    4298:	ba 95       	dec	r27
    429a:	c9 f7       	brne	.-14     	; 0x428e <__fixunssfsi+0x12>
    429c:	12 c0       	rjmp	.+36     	; 0x42c2 <__fixunssfsi+0x46>
    429e:	b1 30       	cpi	r27, 0x01	; 1
    42a0:	81 f0       	breq	.+32     	; 0x42c2 <__fixunssfsi+0x46>
    42a2:	77 d0       	rcall	.+238    	; 0x4392 <__fp_zero>
    42a4:	b1 e0       	ldi	r27, 0x01	; 1
    42a6:	08 95       	ret
    42a8:	74 c0       	rjmp	.+232    	; 0x4392 <__fp_zero>
    42aa:	67 2f       	mov	r22, r23
    42ac:	78 2f       	mov	r23, r24
    42ae:	88 27       	eor	r24, r24
    42b0:	b8 5f       	subi	r27, 0xF8	; 248
    42b2:	39 f0       	breq	.+14     	; 0x42c2 <__fixunssfsi+0x46>
    42b4:	b9 3f       	cpi	r27, 0xF9	; 249
    42b6:	cc f3       	brlt	.-14     	; 0x42aa <__fixunssfsi+0x2e>
    42b8:	86 95       	lsr	r24
    42ba:	77 95       	ror	r23
    42bc:	67 95       	ror	r22
    42be:	b3 95       	inc	r27
    42c0:	d9 f7       	brne	.-10     	; 0x42b8 <__fixunssfsi+0x3c>
    42c2:	3e f4       	brtc	.+14     	; 0x42d2 <__fixunssfsi+0x56>
    42c4:	90 95       	com	r25
    42c6:	80 95       	com	r24
    42c8:	70 95       	com	r23
    42ca:	61 95       	neg	r22
    42cc:	7f 4f       	sbci	r23, 0xFF	; 255
    42ce:	8f 4f       	sbci	r24, 0xFF	; 255
    42d0:	9f 4f       	sbci	r25, 0xFF	; 255
    42d2:	08 95       	ret

000042d4 <__floatunsisf>:
    42d4:	e8 94       	clt
    42d6:	09 c0       	rjmp	.+18     	; 0x42ea <__floatsisf+0x12>

000042d8 <__floatsisf>:
    42d8:	97 fb       	bst	r25, 7
    42da:	3e f4       	brtc	.+14     	; 0x42ea <__floatsisf+0x12>
    42dc:	90 95       	com	r25
    42de:	80 95       	com	r24
    42e0:	70 95       	com	r23
    42e2:	61 95       	neg	r22
    42e4:	7f 4f       	sbci	r23, 0xFF	; 255
    42e6:	8f 4f       	sbci	r24, 0xFF	; 255
    42e8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ea:	99 23       	and	r25, r25
    42ec:	a9 f0       	breq	.+42     	; 0x4318 <__floatsisf+0x40>
    42ee:	f9 2f       	mov	r31, r25
    42f0:	96 e9       	ldi	r25, 0x96	; 150
    42f2:	bb 27       	eor	r27, r27
    42f4:	93 95       	inc	r25
    42f6:	f6 95       	lsr	r31
    42f8:	87 95       	ror	r24
    42fa:	77 95       	ror	r23
    42fc:	67 95       	ror	r22
    42fe:	b7 95       	ror	r27
    4300:	f1 11       	cpse	r31, r1
    4302:	f8 cf       	rjmp	.-16     	; 0x42f4 <__floatsisf+0x1c>
    4304:	fa f4       	brpl	.+62     	; 0x4344 <__floatsisf+0x6c>
    4306:	bb 0f       	add	r27, r27
    4308:	11 f4       	brne	.+4      	; 0x430e <__floatsisf+0x36>
    430a:	60 ff       	sbrs	r22, 0
    430c:	1b c0       	rjmp	.+54     	; 0x4344 <__floatsisf+0x6c>
    430e:	6f 5f       	subi	r22, 0xFF	; 255
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	8f 4f       	sbci	r24, 0xFF	; 255
    4314:	9f 4f       	sbci	r25, 0xFF	; 255
    4316:	16 c0       	rjmp	.+44     	; 0x4344 <__floatsisf+0x6c>
    4318:	88 23       	and	r24, r24
    431a:	11 f0       	breq	.+4      	; 0x4320 <__floatsisf+0x48>
    431c:	96 e9       	ldi	r25, 0x96	; 150
    431e:	11 c0       	rjmp	.+34     	; 0x4342 <__floatsisf+0x6a>
    4320:	77 23       	and	r23, r23
    4322:	21 f0       	breq	.+8      	; 0x432c <__floatsisf+0x54>
    4324:	9e e8       	ldi	r25, 0x8E	; 142
    4326:	87 2f       	mov	r24, r23
    4328:	76 2f       	mov	r23, r22
    432a:	05 c0       	rjmp	.+10     	; 0x4336 <__floatsisf+0x5e>
    432c:	66 23       	and	r22, r22
    432e:	71 f0       	breq	.+28     	; 0x434c <__floatsisf+0x74>
    4330:	96 e8       	ldi	r25, 0x86	; 134
    4332:	86 2f       	mov	r24, r22
    4334:	70 e0       	ldi	r23, 0x00	; 0
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	2a f0       	brmi	.+10     	; 0x4344 <__floatsisf+0x6c>
    433a:	9a 95       	dec	r25
    433c:	66 0f       	add	r22, r22
    433e:	77 1f       	adc	r23, r23
    4340:	88 1f       	adc	r24, r24
    4342:	da f7       	brpl	.-10     	; 0x433a <__floatsisf+0x62>
    4344:	88 0f       	add	r24, r24
    4346:	96 95       	lsr	r25
    4348:	87 95       	ror	r24
    434a:	97 f9       	bld	r25, 7
    434c:	08 95       	ret

0000434e <__fp_split3>:
    434e:	57 fd       	sbrc	r21, 7
    4350:	90 58       	subi	r25, 0x80	; 128
    4352:	44 0f       	add	r20, r20
    4354:	55 1f       	adc	r21, r21
    4356:	59 f0       	breq	.+22     	; 0x436e <__fp_splitA+0x10>
    4358:	5f 3f       	cpi	r21, 0xFF	; 255
    435a:	71 f0       	breq	.+28     	; 0x4378 <__fp_splitA+0x1a>
    435c:	47 95       	ror	r20

0000435e <__fp_splitA>:
    435e:	88 0f       	add	r24, r24
    4360:	97 fb       	bst	r25, 7
    4362:	99 1f       	adc	r25, r25
    4364:	61 f0       	breq	.+24     	; 0x437e <__fp_splitA+0x20>
    4366:	9f 3f       	cpi	r25, 0xFF	; 255
    4368:	79 f0       	breq	.+30     	; 0x4388 <__fp_splitA+0x2a>
    436a:	87 95       	ror	r24
    436c:	08 95       	ret
    436e:	12 16       	cp	r1, r18
    4370:	13 06       	cpc	r1, r19
    4372:	14 06       	cpc	r1, r20
    4374:	55 1f       	adc	r21, r21
    4376:	f2 cf       	rjmp	.-28     	; 0x435c <__fp_split3+0xe>
    4378:	46 95       	lsr	r20
    437a:	f1 df       	rcall	.-30     	; 0x435e <__fp_splitA>
    437c:	08 c0       	rjmp	.+16     	; 0x438e <__fp_splitA+0x30>
    437e:	16 16       	cp	r1, r22
    4380:	17 06       	cpc	r1, r23
    4382:	18 06       	cpc	r1, r24
    4384:	99 1f       	adc	r25, r25
    4386:	f1 cf       	rjmp	.-30     	; 0x436a <__fp_splitA+0xc>
    4388:	86 95       	lsr	r24
    438a:	71 05       	cpc	r23, r1
    438c:	61 05       	cpc	r22, r1
    438e:	08 94       	sec
    4390:	08 95       	ret

00004392 <__fp_zero>:
    4392:	e8 94       	clt

00004394 <__fp_szero>:
    4394:	bb 27       	eor	r27, r27
    4396:	66 27       	eor	r22, r22
    4398:	77 27       	eor	r23, r23
    439a:	cb 01       	movw	r24, r22
    439c:	97 f9       	bld	r25, 7
    439e:	08 95       	ret

000043a0 <_hihTwiCallback>:
    43a0:	65 30       	cpi	r22, 0x05	; 5
    43a2:	f1 f4       	brne	.+60     	; 0x43e0 <_hihTwiCallback+0x40>
    43a4:	fa 01       	movw	r30, r20
    43a6:	80 81       	ld	r24, Z
    43a8:	8f 73       	andi	r24, 0x3F	; 63
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	98 2f       	mov	r25, r24
    43ae:	88 27       	eor	r24, r24
    43b0:	21 81       	ldd	r18, Z+1	; 0x01
    43b2:	82 2b       	or	r24, r18
    43b4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    43b8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    43bc:	82 81       	ldd	r24, Z+2	; 0x02
    43be:	f0 e4       	ldi	r31, 0x40	; 64
    43c0:	8f 9f       	mul	r24, r31
    43c2:	c0 01       	movw	r24, r0
    43c4:	11 24       	eor	r1, r1
    43c6:	fa 01       	movw	r30, r20
    43c8:	23 81       	ldd	r18, Z+3	; 0x03
    43ca:	26 95       	lsr	r18
    43cc:	26 95       	lsr	r18
    43ce:	82 2b       	or	r24, r18
    43d0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    43d4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <_measuringIsReady>
    43de:	08 95       	ret
    43e0:	64 30       	cpi	r22, 0x04	; 4
    43e2:	51 f0       	breq	.+20     	; 0x43f8 <_hihTwiCallback+0x58>
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	90 e4       	ldi	r25, 0x40	; 64
    43e8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    43ec:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    43f0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    43f4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    43f8:	08 95       	ret

000043fa <hih8120_initialise>:
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	00 ed       	ldi	r16, 0xD0	; 208
    4400:	11 e2       	ldi	r17, 0x21	; 33
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	34 e2       	ldi	r19, 0x24	; 36
    4406:	44 ef       	ldi	r20, 0xF4	; 244
    4408:	50 e0       	ldi	r21, 0x00	; 0
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	87 e2       	ldi	r24, 0x27	; 39
    440e:	0e 94 75 2d 	call	0x5aea	; 0x5aea <twiCreate>
    4412:	90 93 21 17 	sts	0x1721, r25	; 0x801721 <_hih8120Handler+0x1>
    4416:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <_hih8120Handler>
    441a:	21 e0       	ldi	r18, 0x01	; 1
    441c:	89 2b       	or	r24, r25
    441e:	09 f0       	breq	.+2      	; 0x4422 <hih8120_initialise+0x28>
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	82 2f       	mov	r24, r18
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	08 95       	ret

0000442a <hih8120_wakeup>:
    442a:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <_hih8120Handler>
    442e:	90 91 21 17 	lds	r25, 0x1721	; 0x801721 <_hih8120Handler+0x1>
    4432:	00 97       	sbiw	r24, 0x00	; 0
    4434:	59 f0       	breq	.+22     	; 0x444c <hih8120_wakeup+0x22>
    4436:	40 e0       	ldi	r20, 0x00	; 0
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <twiTransmit>
    4440:	84 30       	cpi	r24, 0x04	; 4
    4442:	31 f4       	brne	.+12     	; 0x4450 <hih8120_wakeup+0x26>
    4444:	10 92 1f 17 	sts	0x171F, r1	; 0x80171f <_measuringIsReady>
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	08 95       	ret
    444c:	82 e0       	ldi	r24, 0x02	; 2
    444e:	08 95       	ret
    4450:	83 e0       	ldi	r24, 0x03	; 3
    4452:	08 95       	ret

00004454 <hih8120_measure>:
    4454:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <_hih8120Handler>
    4458:	90 91 21 17 	lds	r25, 0x1721	; 0x801721 <_hih8120Handler+0x1>
    445c:	00 97       	sbiw	r24, 0x00	; 0
    445e:	39 f0       	breq	.+14     	; 0x446e <hih8120_measure+0x1a>
    4460:	64 e0       	ldi	r22, 0x04	; 4
    4462:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <twiReceive>
    4466:	85 30       	cpi	r24, 0x05	; 5
    4468:	21 f0       	breq	.+8      	; 0x4472 <hih8120_measure+0x1e>
    446a:	83 e0       	ldi	r24, 0x03	; 3
    446c:	08 95       	ret
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	08 95       	ret
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	08 95       	ret

00004476 <hih8120_getHumidity>:
    4476:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    447a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	28 df       	rcall	.-432    	; 0x42d4 <__floatunsisf>
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	48 ec       	ldi	r20, 0xC8	; 200
    448a:	52 e4       	ldi	r21, 0x42	; 66
    448c:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsf3>
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	38 ef       	ldi	r19, 0xF8	; 248
    4494:	4f e7       	ldi	r20, 0x7F	; 127
    4496:	56 e4       	ldi	r21, 0x46	; 70
    4498:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <__divsf3>
    449c:	08 95       	ret

0000449e <hih8120_getHumidityPercent_x10>:
    449e:	eb df       	rcall	.-42     	; 0x4476 <hih8120_getHumidity>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e2       	ldi	r20, 0x20	; 32
    44a6:	51 e4       	ldi	r21, 0x41	; 65
    44a8:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsf3>
    44ac:	e7 de       	rcall	.-562    	; 0x427c <__fixunssfsi>
    44ae:	cb 01       	movw	r24, r22
    44b0:	08 95       	ret

000044b2 <hih8120_getTemperature>:
    44b2:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    44b6:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0a df       	rcall	.-492    	; 0x42d4 <__floatunsisf>
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	45 e2       	ldi	r20, 0x25	; 37
    44c6:	53 e4       	ldi	r21, 0x43	; 67
    44c8:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsf3>
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	38 ef       	ldi	r19, 0xF8	; 248
    44d0:	4f e7       	ldi	r20, 0x7F	; 127
    44d2:	56 e4       	ldi	r21, 0x46	; 70
    44d4:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divsf3>
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	40 e2       	ldi	r20, 0x20	; 32
    44de:	52 e4       	ldi	r21, 0x42	; 66
    44e0:	0c 94 1e 2f 	jmp	0x5e3c	; 0x5e3c <__subsf3>
    44e4:	08 95       	ret

000044e6 <hih8120_getTemperature_x10>:
    44e6:	e5 df       	rcall	.-54     	; 0x44b2 <hih8120_getTemperature>
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	40 e2       	ldi	r20, 0x20	; 32
    44ee:	51 e4       	ldi	r21, 0x41	; 65
    44f0:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsf3>
    44f4:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__fixsfsi>
    44f8:	cb 01       	movw	r24, r22
    44fa:	08 95       	ret

000044fc <_serialCallBack>:
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	1f 92       	push	r1
    4506:	1f 92       	push	r1
    4508:	cd b7       	in	r28, 0x3d	; 61
    450a:	de b7       	in	r29, 0x3e	; 62
    450c:	8c 01       	movw	r16, r24
    450e:	19 82       	std	Y+1, r1	; 0x01
    4510:	2d c0       	rjmp	.+90     	; 0x456c <_serialCallBack+0x70>
    4512:	e0 91 59 17 	lds	r30, 0x1759	; 0x801759 <rec_buf_inp.2878>
    4516:	ec 32       	cpi	r30, 0x2C	; 44
    4518:	50 f4       	brcc	.+20     	; 0x452e <_serialCallBack+0x32>
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	8e 0f       	add	r24, r30
    451e:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <rec_buf_inp.2878>
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	e5 57       	subi	r30, 0x75	; 117
    4526:	f8 4e       	sbci	r31, 0xE8	; 232
    4528:	8a 81       	ldd	r24, Y+2	; 0x02
    452a:	80 83       	st	Z, r24
    452c:	02 c0       	rjmp	.+4      	; 0x4532 <_serialCallBack+0x36>
    452e:	10 92 59 17 	sts	0x1759, r1	; 0x801759 <rec_buf_inp.2878>
    4532:	8a 81       	ldd	r24, Y+2	; 0x02
    4534:	8a 30       	cpi	r24, 0x0A	; 10
    4536:	d1 f4       	brne	.+52     	; 0x456c <_serialCallBack+0x70>
    4538:	40 91 59 17 	lds	r20, 0x1759	; 0x801759 <rec_buf_inp.2878>
    453c:	50 e0       	ldi	r21, 0x00	; 0
    453e:	fa 01       	movw	r30, r20
    4540:	e7 57       	subi	r30, 0x77	; 119
    4542:	f8 4e       	sbci	r31, 0xE8	; 232
    4544:	10 82       	st	Z, r1
    4546:	41 50       	subi	r20, 0x01	; 1
    4548:	51 09       	sbc	r21, r1
    454a:	9e 01       	movw	r18, r28
    454c:	2f 5f       	subi	r18, 0xFF	; 255
    454e:	3f 4f       	sbci	r19, 0xFF	; 255
    4550:	6b e8       	ldi	r22, 0x8B	; 139
    4552:	77 e1       	ldi	r23, 0x17	; 23
    4554:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <_serialReplyBufferHandle>
    4558:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <_serialReplyBufferHandle+0x1>
    455c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferSendFromISR>
    4560:	89 81       	ldd	r24, Y+1	; 0x01
    4562:	81 11       	cpse	r24, r1
    4564:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vPortYield>
    4568:	10 92 59 17 	sts	0x1759, r1	; 0x801759 <rec_buf_inp.2878>
    456c:	be 01       	movw	r22, r28
    456e:	6e 5f       	subi	r22, 0xFE	; 254
    4570:	7f 4f       	sbci	r23, 0xFF	; 255
    4572:	c8 01       	movw	r24, r16
    4574:	37 d6       	rcall	.+3182   	; 0x51e4 <serial_getByte>
    4576:	88 23       	and	r24, r24
    4578:	61 f2       	breq	.-104    	; 0x4512 <_serialCallBack+0x16>
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	1f 91       	pop	r17
    4584:	0f 91       	pop	r16
    4586:	08 95       	ret

00004588 <_uploadMessage>:
    4588:	0f 93       	push	r16
    458a:	1f 93       	push	r17
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	8c 01       	movw	r16, r24
    4592:	eb 01       	movw	r28, r22
    4594:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <_serialReplyBufferHandle>
    4598:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <_serialReplyBufferHandle+0x1>
    459c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReset>
    45a0:	b8 01       	movw	r22, r16
    45a2:	82 e2       	ldi	r24, 0x22	; 34
    45a4:	97 e1       	ldi	r25, 0x17	; 23
    45a6:	0e 94 14 32 	call	0x6428	; 0x6428 <strcpy>
    45aa:	20 97       	sbiw	r28, 0x00	; 0
    45ac:	79 f0       	breq	.+30     	; 0x45cc <_uploadMessage+0x44>
    45ae:	e2 e2       	ldi	r30, 0x22	; 34
    45b0:	f7 e1       	ldi	r31, 0x17	; 23
    45b2:	01 90       	ld	r0, Z+
    45b4:	00 20       	and	r0, r0
    45b6:	e9 f7       	brne	.-6      	; 0x45b2 <_uploadMessage+0x2a>
    45b8:	31 97       	sbiw	r30, 0x01	; 1
    45ba:	80 e2       	ldi	r24, 0x20	; 32
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	91 83       	std	Z+1, r25	; 0x01
    45c0:	80 83       	st	Z, r24
    45c2:	be 01       	movw	r22, r28
    45c4:	82 e2       	ldi	r24, 0x22	; 34
    45c6:	97 e1       	ldi	r25, 0x17	; 23
    45c8:	0e 94 09 32 	call	0x6412	; 0x6412 <strcat>
    45cc:	e2 e2       	ldi	r30, 0x22	; 34
    45ce:	f7 e1       	ldi	r31, 0x17	; 23
    45d0:	df 01       	movw	r26, r30
    45d2:	0d 90       	ld	r0, X+
    45d4:	00 20       	and	r0, r0
    45d6:	e9 f7       	brne	.-6      	; 0x45d2 <_uploadMessage+0x4a>
    45d8:	11 97       	sbiw	r26, 0x01	; 1
    45da:	8d e0       	ldi	r24, 0x0D	; 13
    45dc:	9a e0       	ldi	r25, 0x0A	; 10
    45de:	11 96       	adiw	r26, 0x01	; 1
    45e0:	9c 93       	st	X, r25
    45e2:	8e 93       	st	-X, r24
    45e4:	12 96       	adiw	r26, 0x02	; 2
    45e6:	1c 92       	st	X, r1
    45e8:	01 90       	ld	r0, Z+
    45ea:	00 20       	and	r0, r0
    45ec:	e9 f7       	brne	.-6      	; 0x45e8 <_uploadMessage+0x60>
    45ee:	31 97       	sbiw	r30, 0x01	; 1
    45f0:	e2 52       	subi	r30, 0x22	; 34
    45f2:	f7 41       	sbci	r31, 0x17	; 23
    45f4:	ae 2f       	mov	r26, r30
    45f6:	82 e2       	ldi	r24, 0x22	; 34
    45f8:	97 e1       	ldi	r25, 0x17	; 23
    45fa:	ac 01       	movw	r20, r24
    45fc:	6a 2f       	mov	r22, r26
    45fe:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <_rn2483_serial>
    4602:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <_rn2483_serial+0x1>
    4606:	99 d5       	rcall	.+2866   	; 0x513a <serial_sendBytes>
    4608:	81 11       	cpse	r24, r1
    460a:	11 c0       	rjmp	.+34     	; 0x462e <_uploadMessage+0xa6>
    460c:	08 e2       	ldi	r16, 0x28	; 40
    460e:	15 e0       	ldi	r17, 0x05	; 5
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	4d e2       	ldi	r20, 0x2D	; 45
    4616:	50 e0       	ldi	r21, 0x00	; 0
    4618:	65 ee       	ldi	r22, 0xE5	; 229
    461a:	77 e1       	ldi	r23, 0x17	; 23
    461c:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <_serialReplyBufferHandle>
    4620:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <_serialReplyBufferHandle+0x1>
    4624:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <xStreamBufferReceive>
    4628:	85 ee       	ldi	r24, 0xE5	; 229
    462a:	97 e1       	ldi	r25, 0x17	; 23
    462c:	02 c0       	rjmp	.+4      	; 0x4632 <_uploadMessage+0xaa>
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	1f 91       	pop	r17
    4638:	0f 91       	pop	r16
    463a:	08 95       	ret

0000463c <_reply2ReturnCode>:
    463c:	2f 92       	push	r2
    463e:	3f 92       	push	r3
    4640:	4f 92       	push	r4
    4642:	5f 92       	push	r5
    4644:	6f 92       	push	r6
    4646:	7f 92       	push	r7
    4648:	8f 92       	push	r8
    464a:	9f 92       	push	r9
    464c:	af 92       	push	r10
    464e:	bf 92       	push	r11
    4650:	cf 92       	push	r12
    4652:	df 92       	push	r13
    4654:	ef 92       	push	r14
    4656:	ff 92       	push	r15
    4658:	0f 93       	push	r16
    465a:	1f 93       	push	r17
    465c:	cf 93       	push	r28
    465e:	df 93       	push	r29
    4660:	5c 01       	movw	r10, r24
    4662:	fc 01       	movw	r30, r24
    4664:	01 90       	ld	r0, Z+
    4666:	00 20       	and	r0, r0
    4668:	e9 f7       	brne	.-6      	; 0x4664 <_reply2ReturnCode+0x28>
    466a:	31 97       	sbiw	r30, 0x01	; 1
    466c:	6f 01       	movw	r12, r30
    466e:	c8 1a       	sub	r12, r24
    4670:	d9 0a       	sbc	r13, r25
    4672:	5c 2c       	mov	r5, r12
    4674:	0f 2e       	mov	r0, r31
    4676:	fc ef       	ldi	r31, 0xFC	; 252
    4678:	8f 2e       	mov	r8, r31
    467a:	f7 e0       	ldi	r31, 0x07	; 7
    467c:	9f 2e       	mov	r9, r31
    467e:	f0 2d       	mov	r31, r0
    4680:	e1 2c       	mov	r14, r1
    4682:	f1 2c       	mov	r15, r1
    4684:	4c 2c       	mov	r4, r12
    4686:	37 01       	movw	r6, r14
    4688:	f4 01       	movw	r30, r8
    468a:	01 81       	ldd	r16, Z+1	; 0x01
    468c:	12 81       	ldd	r17, Z+2	; 0x02
    468e:	e8 01       	movw	r28, r16
    4690:	09 90       	ld	r0, Y+
    4692:	00 20       	and	r0, r0
    4694:	e9 f7       	brne	.-6      	; 0x4690 <_reply2ReturnCode+0x54>
    4696:	21 97       	sbiw	r28, 0x01	; 1
    4698:	c0 1b       	sub	r28, r16
    469a:	d1 0b       	sbc	r29, r17
    469c:	3c 2e       	mov	r3, r28
    469e:	f9 e0       	ldi	r31, 0x09	; 9
    46a0:	cf 16       	cp	r12, r31
    46a2:	d1 04       	cpc	r13, r1
    46a4:	58 f0       	brcs	.+22     	; 0x46bc <_reply2ReturnCode+0x80>
    46a6:	f4 01       	movw	r30, r8
    46a8:	20 80       	ld	r2, Z
    46aa:	fe e0       	ldi	r31, 0x0E	; 14
    46ac:	2f 12       	cpse	r2, r31
    46ae:	06 c0       	rjmp	.+12     	; 0x46bc <_reply2ReturnCode+0x80>
    46b0:	b8 01       	movw	r22, r16
    46b2:	c5 01       	movw	r24, r10
    46b4:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <strcasestr>
    46b8:	89 2b       	or	r24, r25
    46ba:	09 f5       	brne	.+66     	; 0x46fe <_reply2ReturnCode+0xc2>
    46bc:	44 2d       	mov	r20, r4
    46be:	35 14       	cp	r3, r5
    46c0:	08 f4       	brcc	.+2      	; 0x46c4 <_reply2ReturnCode+0x88>
    46c2:	4c 2f       	mov	r20, r28
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	b8 01       	movw	r22, r16
    46c8:	c5 01       	movw	r24, r10
    46ca:	0e 94 1b 32 	call	0x6436	; 0x6436 <strncasecmp>
    46ce:	89 2b       	or	r24, r25
    46d0:	49 f4       	brne	.+18     	; 0x46e4 <_reply2ReturnCode+0xa8>
    46d2:	f3 01       	movw	r30, r6
    46d4:	ee 0f       	add	r30, r30
    46d6:	ff 1f       	adc	r31, r31
    46d8:	e6 0d       	add	r30, r6
    46da:	f7 1d       	adc	r31, r7
    46dc:	e4 50       	subi	r30, 0x04	; 4
    46de:	f8 4f       	sbci	r31, 0xF8	; 248
    46e0:	20 80       	ld	r2, Z
    46e2:	0d c0       	rjmp	.+26     	; 0x46fe <_reply2ReturnCode+0xc2>
    46e4:	8f ef       	ldi	r24, 0xFF	; 255
    46e6:	e8 1a       	sub	r14, r24
    46e8:	f8 0a       	sbc	r15, r24
    46ea:	e3 e0       	ldi	r30, 0x03	; 3
    46ec:	8e 0e       	add	r8, r30
    46ee:	91 1c       	adc	r9, r1
    46f0:	f1 e1       	ldi	r31, 0x11	; 17
    46f2:	ef 16       	cp	r14, r31
    46f4:	f1 04       	cpc	r15, r1
    46f6:	39 f6       	brne	.-114    	; 0x4686 <_reply2ReturnCode+0x4a>
    46f8:	68 94       	set
    46fa:	22 24       	eor	r2, r2
    46fc:	24 f8       	bld	r2, 4
    46fe:	82 2d       	mov	r24, r2
    4700:	df 91       	pop	r29
    4702:	cf 91       	pop	r28
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	ff 90       	pop	r15
    470a:	ef 90       	pop	r14
    470c:	df 90       	pop	r13
    470e:	cf 90       	pop	r12
    4710:	bf 90       	pop	r11
    4712:	af 90       	pop	r10
    4714:	9f 90       	pop	r9
    4716:	8f 90       	pop	r8
    4718:	7f 90       	pop	r7
    471a:	6f 90       	pop	r6
    471c:	5f 90       	pop	r5
    471e:	4f 90       	pop	r4
    4720:	3f 90       	pop	r3
    4722:	2f 90       	pop	r2
    4724:	08 95       	ret

00004726 <_uploadMessageRc>:
    4726:	30 df       	rcall	.-416    	; 0x4588 <_uploadMessage>
    4728:	89 cf       	rjmp	.-238    	; 0x463c <_reply2ReturnCode>
    472a:	08 95       	ret

0000472c <lora_driver_flushBuffers>:
    472c:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <_serialReplyBufferHandle>
    4730:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <_serialReplyBufferHandle+0x1>
    4734:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <xStreamBufferReset>
    4738:	08 95       	ret

0000473a <lora_driver_initialise>:
    473a:	8f 92       	push	r8
    473c:	9f 92       	push	r9
    473e:	af 92       	push	r10
    4740:	cf 92       	push	r12
    4742:	ef 92       	push	r14
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	c8 2f       	mov	r28, r24
    474c:	8b 01       	movw	r16, r22
    474e:	41 e0       	ldi	r20, 0x01	; 1
    4750:	60 e0       	ldi	r22, 0x00	; 0
    4752:	70 e0       	ldi	r23, 0x00	; 0
    4754:	88 ec       	ldi	r24, 0xC8	; 200
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferGenericCreate>
    475c:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <_serialReplyBufferHandle+0x1>
    4760:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <_serialReplyBufferHandle>
    4764:	10 93 5b 17 	sts	0x175B, r17	; 0x80175b <_downlinkMessageBuffer+0x1>
    4768:	00 93 5a 17 	sts	0x175A, r16	; 0x80175a <_downlinkMessageBuffer>
    476c:	0f 2e       	mov	r0, r31
    476e:	fe e7       	ldi	r31, 0x7E	; 126
    4770:	8f 2e       	mov	r8, r31
    4772:	f2 e2       	ldi	r31, 0x22	; 34
    4774:	9f 2e       	mov	r9, r31
    4776:	f0 2d       	mov	r31, r0
    4778:	68 94       	set
    477a:	aa 24       	eor	r10, r10
    477c:	a6 f8       	bld	r10, 6
    477e:	68 94       	set
    4780:	cc 24       	eor	r12, r12
    4782:	c6 f8       	bld	r12, 6
    4784:	e1 2c       	mov	r14, r1
    4786:	00 e0       	ldi	r16, 0x00	; 0
    4788:	23 e0       	ldi	r18, 0x03	; 3
    478a:	40 e0       	ldi	r20, 0x00	; 0
    478c:	51 ee       	ldi	r21, 0xE1	; 225
    478e:	60 e0       	ldi	r22, 0x00	; 0
    4790:	70 e0       	ldi	r23, 0x00	; 0
    4792:	8c 2f       	mov	r24, r28
    4794:	06 d4       	rcall	.+2060   	; 0x4fa2 <serial_create>
    4796:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <_rn2483_serial+0x1>
    479a:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <_rn2483_serial>
    479e:	e7 e0       	ldi	r30, 0x07	; 7
    47a0:	f1 e0       	ldi	r31, 0x01	; 1
    47a2:	80 81       	ld	r24, Z
    47a4:	80 61       	ori	r24, 0x10	; 16
    47a6:	80 83       	st	Z, r24
    47a8:	cf 91       	pop	r28
    47aa:	1f 91       	pop	r17
    47ac:	0f 91       	pop	r16
    47ae:	ef 90       	pop	r14
    47b0:	cf 90       	pop	r12
    47b2:	af 90       	pop	r10
    47b4:	9f 90       	pop	r9
    47b6:	8f 90       	pop	r8
    47b8:	08 95       	ret

000047ba <lora_driver_resetRn2483>:
    47ba:	88 23       	and	r24, r24
    47bc:	31 f0       	breq	.+12     	; 0x47ca <lora_driver_resetRn2483+0x10>
    47be:	e8 e0       	ldi	r30, 0x08	; 8
    47c0:	f1 e0       	ldi	r31, 0x01	; 1
    47c2:	80 81       	ld	r24, Z
    47c4:	8f 7e       	andi	r24, 0xEF	; 239
    47c6:	80 83       	st	Z, r24
    47c8:	08 95       	ret
    47ca:	e8 e0       	ldi	r30, 0x08	; 8
    47cc:	f1 e0       	ldi	r31, 0x01	; 1
    47ce:	80 81       	ld	r24, Z
    47d0:	80 61       	ori	r24, 0x10	; 16
    47d2:	80 83       	st	Z, r24
    47d4:	08 95       	ret

000047d6 <lora_driver_rn2483FactoryReset>:
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	70 e0       	ldi	r23, 0x00	; 0
    47da:	82 e8       	ldi	r24, 0x82	; 130
    47dc:	95 e0       	ldi	r25, 0x05	; 5
    47de:	d4 de       	rcall	.-600    	; 0x4588 <_uploadMessage>
    47e0:	e5 ee       	ldi	r30, 0xE5	; 229
    47e2:	f7 e1       	ldi	r31, 0x17	; 23
    47e4:	01 90       	ld	r0, Z+
    47e6:	00 20       	and	r0, r0
    47e8:	e9 f7       	brne	.-6      	; 0x47e4 <lora_driver_rn2483FactoryReset+0xe>
    47ea:	31 97       	sbiw	r30, 0x01	; 1
    47ec:	e5 5e       	subi	r30, 0xE5	; 229
    47ee:	f7 41       	sbci	r31, 0x17	; 23
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	75 97       	sbiw	r30, 0x15	; 21
    47f4:	08 f0       	brcs	.+2      	; 0x47f8 <lora_driver_rn2483FactoryReset+0x22>
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	08 95       	ret

000047fa <lora_driver_getRn2483Hweui>:
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	ec 01       	movw	r28, r24
    4800:	60 e0       	ldi	r22, 0x00	; 0
    4802:	70 e0       	ldi	r23, 0x00	; 0
    4804:	83 e9       	ldi	r24, 0x93	; 147
    4806:	95 e0       	ldi	r25, 0x05	; 5
    4808:	bf de       	rcall	.-642    	; 0x4588 <_uploadMessage>
    480a:	e5 ee       	ldi	r30, 0xE5	; 229
    480c:	f7 e1       	ldi	r31, 0x17	; 23
    480e:	01 90       	ld	r0, Z+
    4810:	00 20       	and	r0, r0
    4812:	e9 f7       	brne	.-6      	; 0x480e <lora_driver_getRn2483Hweui+0x14>
    4814:	e6 5f       	subi	r30, 0xF6	; 246
    4816:	f7 41       	sbci	r31, 0x17	; 23
    4818:	39 f4       	brne	.+14     	; 0x4828 <lora_driver_getRn2483Hweui+0x2e>
    481a:	65 ee       	ldi	r22, 0xE5	; 229
    481c:	77 e1       	ldi	r23, 0x17	; 23
    481e:	ce 01       	movw	r24, r28
    4820:	0e 94 14 32 	call	0x6428	; 0x6428 <strcpy>
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	02 c0       	rjmp	.+4      	; 0x482c <lora_driver_getRn2483Hweui+0x32>
    4828:	18 82       	st	Y, r1
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	08 95       	ret

00004832 <lora_driver_setDeviceIdentifier>:
    4832:	fc 01       	movw	r30, r24
    4834:	01 90       	ld	r0, Z+
    4836:	00 20       	and	r0, r0
    4838:	e9 f7       	brne	.-6      	; 0x4834 <lora_driver_setDeviceIdentifier+0x2>
    483a:	9f 01       	movw	r18, r30
    483c:	21 51       	subi	r18, 0x11	; 17
    483e:	31 09       	sbc	r19, r1
    4840:	28 17       	cp	r18, r24
    4842:	39 07       	cpc	r19, r25
    4844:	29 f4       	brne	.+10     	; 0x4850 <lora_driver_setDeviceIdentifier+0x1e>
    4846:	bc 01       	movw	r22, r24
    4848:	81 ec       	ldi	r24, 0xC1	; 193
    484a:	95 e0       	ldi	r25, 0x05	; 5
    484c:	6c cf       	rjmp	.-296    	; 0x4726 <_uploadMessageRc>
    484e:	08 95       	ret
    4850:	89 e0       	ldi	r24, 0x09	; 9
    4852:	08 95       	ret

00004854 <lora_driver_setApplicationIdentifier>:
    4854:	fc 01       	movw	r30, r24
    4856:	01 90       	ld	r0, Z+
    4858:	00 20       	and	r0, r0
    485a:	e9 f7       	brne	.-6      	; 0x4856 <lora_driver_setApplicationIdentifier+0x2>
    485c:	9f 01       	movw	r18, r30
    485e:	21 51       	subi	r18, 0x11	; 17
    4860:	31 09       	sbc	r19, r1
    4862:	28 17       	cp	r18, r24
    4864:	39 07       	cpc	r19, r25
    4866:	29 f4       	brne	.+10     	; 0x4872 <lora_driver_setApplicationIdentifier+0x1e>
    4868:	bc 01       	movw	r22, r24
    486a:	80 ed       	ldi	r24, 0xD0	; 208
    486c:	95 e0       	ldi	r25, 0x05	; 5
    486e:	5b cf       	rjmp	.-330    	; 0x4726 <_uploadMessageRc>
    4870:	08 95       	ret
    4872:	89 e0       	ldi	r24, 0x09	; 9
    4874:	08 95       	ret

00004876 <lora_driver_setApplicationKey>:
    4876:	fc 01       	movw	r30, r24
    4878:	01 90       	ld	r0, Z+
    487a:	00 20       	and	r0, r0
    487c:	e9 f7       	brne	.-6      	; 0x4878 <lora_driver_setApplicationKey+0x2>
    487e:	9f 01       	movw	r18, r30
    4880:	21 52       	subi	r18, 0x21	; 33
    4882:	31 09       	sbc	r19, r1
    4884:	28 17       	cp	r18, r24
    4886:	39 07       	cpc	r19, r25
    4888:	29 f4       	brne	.+10     	; 0x4894 <lora_driver_setApplicationKey+0x1e>
    488a:	bc 01       	movw	r22, r24
    488c:	8f ed       	ldi	r24, 0xDF	; 223
    488e:	95 e0       	ldi	r25, 0x05	; 5
    4890:	4a cf       	rjmp	.-364    	; 0x4726 <_uploadMessageRc>
    4892:	08 95       	ret
    4894:	89 e0       	ldi	r24, 0x09	; 9
    4896:	08 95       	ret

00004898 <lora_driver_saveMac>:
    4898:	60 e0       	ldi	r22, 0x00	; 0
    489a:	70 e0       	ldi	r23, 0x00	; 0
    489c:	8e e1       	ldi	r24, 0x1E	; 30
    489e:	96 e0       	ldi	r25, 0x06	; 6
    48a0:	42 cf       	rjmp	.-380    	; 0x4726 <_uploadMessageRc>
    48a2:	08 95       	ret

000048a4 <lora_driver_join>:
    48a4:	0f 93       	push	r16
    48a6:	1f 93       	push	r17
    48a8:	e8 2f       	mov	r30, r24
    48aa:	f0 e0       	ldi	r31, 0x00	; 0
    48ac:	ee 0f       	add	r30, r30
    48ae:	ff 1f       	adc	r31, r31
    48b0:	e8 50       	subi	r30, 0x08	; 8
    48b2:	f8 4f       	sbci	r31, 0xF8	; 248
    48b4:	60 81       	ld	r22, Z
    48b6:	71 81       	ldd	r23, Z+1	; 0x01
    48b8:	87 e2       	ldi	r24, 0x27	; 39
    48ba:	96 e0       	ldi	r25, 0x06	; 6
    48bc:	34 df       	rcall	.-408    	; 0x4726 <_uploadMessageRc>
    48be:	81 11       	cpse	r24, r1
    48c0:	14 c0       	rjmp	.+40     	; 0x48ea <lora_driver_join+0x46>
    48c2:	08 e2       	ldi	r16, 0x28	; 40
    48c4:	15 e0       	ldi	r17, 0x05	; 5
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	4d e2       	ldi	r20, 0x2D	; 45
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	65 ee       	ldi	r22, 0xE5	; 229
    48d0:	77 e1       	ldi	r23, 0x17	; 23
    48d2:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <_serialReplyBufferHandle>
    48d6:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <_serialReplyBufferHandle+0x1>
    48da:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <xStreamBufferReceive>
    48de:	88 23       	and	r24, r24
    48e0:	21 f0       	breq	.+8      	; 0x48ea <lora_driver_join+0x46>
    48e2:	85 ee       	ldi	r24, 0xE5	; 229
    48e4:	97 e1       	ldi	r25, 0x17	; 23
    48e6:	aa de       	rcall	.-684    	; 0x463c <_reply2ReturnCode>
    48e8:	03 c0       	rjmp	.+6      	; 0x48f0 <lora_driver_join+0x4c>
    48ea:	85 ee       	ldi	r24, 0xE5	; 229
    48ec:	97 e1       	ldi	r25, 0x17	; 23
    48ee:	a6 de       	rcall	.-692    	; 0x463c <_reply2ReturnCode>
    48f0:	1f 91       	pop	r17
    48f2:	0f 91       	pop	r16
    48f4:	08 95       	ret

000048f6 <lora_driver_sendUploadMessage>:
    48f6:	0f 93       	push	r16
    48f8:	1f 93       	push	r17
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	1f 92       	push	r1
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	db 01       	movw	r26, r22
    4906:	11 96       	adiw	r26, 0x01	; 1
    4908:	9c 91       	ld	r25, X
    490a:	11 97       	sbiw	r26, 0x01	; 1
    490c:	95 31       	cpi	r25, 0x15	; 21
    490e:	08 f0       	brcs	.+2      	; 0x4912 <lora_driver_sendUploadMessage+0x1c>
    4910:	b4 c0       	rjmp	.+360    	; 0x4a7a <lora_driver_sendUploadMessage+0x184>
    4912:	99 23       	and	r25, r25
    4914:	81 f1       	breq	.+96     	; 0x4976 <lora_driver_sendUploadMessage+0x80>
    4916:	60 e0       	ldi	r22, 0x00	; 0
    4918:	70 e0       	ldi	r23, 0x00	; 0
    491a:	27 2f       	mov	r18, r23
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	46 2f       	mov	r20, r22
    4920:	50 e0       	ldi	r21, 0x00	; 0
    4922:	fd 01       	movw	r30, r26
    4924:	e4 0f       	add	r30, r20
    4926:	f5 1f       	adc	r31, r21
    4928:	92 81       	ldd	r25, Z+2	; 0x02
    492a:	92 95       	swap	r25
    492c:	9f 70       	andi	r25, 0x0F	; 15
    492e:	9a 30       	cpi	r25, 0x0A	; 10
    4930:	10 f0       	brcs	.+4      	; 0x4936 <lora_driver_sendUploadMessage+0x40>
    4932:	99 5c       	subi	r25, 0xC9	; 201
    4934:	01 c0       	rjmp	.+2      	; 0x4938 <lora_driver_sendUploadMessage+0x42>
    4936:	90 5d       	subi	r25, 0xD0	; 208
    4938:	f9 01       	movw	r30, r18
    493a:	ea 58       	subi	r30, 0x8A	; 138
    493c:	f8 4e       	sbci	r31, 0xE8	; 232
    493e:	90 83       	st	Z, r25
    4940:	2f 5f       	subi	r18, 0xFF	; 255
    4942:	3f 4f       	sbci	r19, 0xFF	; 255
    4944:	fd 01       	movw	r30, r26
    4946:	e4 0f       	add	r30, r20
    4948:	f5 1f       	adc	r31, r21
    494a:	92 81       	ldd	r25, Z+2	; 0x02
    494c:	9f 70       	andi	r25, 0x0F	; 15
    494e:	49 2f       	mov	r20, r25
    4950:	50 e0       	ldi	r21, 0x00	; 0
    4952:	4a 30       	cpi	r20, 0x0A	; 10
    4954:	51 05       	cpc	r21, r1
    4956:	14 f0       	brlt	.+4      	; 0x495c <lora_driver_sendUploadMessage+0x66>
    4958:	99 5c       	subi	r25, 0xC9	; 201
    495a:	01 c0       	rjmp	.+2      	; 0x495e <lora_driver_sendUploadMessage+0x68>
    495c:	90 5d       	subi	r25, 0xD0	; 208
    495e:	f9 01       	movw	r30, r18
    4960:	ea 58       	subi	r30, 0x8A	; 138
    4962:	f8 4e       	sbci	r31, 0xE8	; 232
    4964:	90 83       	st	Z, r25
    4966:	7e 5f       	subi	r23, 0xFE	; 254
    4968:	6f 5f       	subi	r22, 0xFF	; 255
    496a:	11 96       	adiw	r26, 0x01	; 1
    496c:	9c 91       	ld	r25, X
    496e:	11 97       	sbiw	r26, 0x01	; 1
    4970:	69 17       	cp	r22, r25
    4972:	98 f2       	brcs	.-90     	; 0x491a <lora_driver_sendUploadMessage+0x24>
    4974:	01 c0       	rjmp	.+2      	; 0x4978 <lora_driver_sendUploadMessage+0x82>
    4976:	70 e0       	ldi	r23, 0x00	; 0
    4978:	e7 2f       	mov	r30, r23
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	ea 58       	subi	r30, 0x8A	; 138
    497e:	f8 4e       	sbci	r31, 0xE8	; 232
    4980:	10 82       	st	Z, r1
    4982:	4c 91       	ld	r20, X
    4984:	81 11       	cpse	r24, r1
    4986:	03 c0       	rjmp	.+6      	; 0x498e <lora_driver_sendUploadMessage+0x98>
    4988:	80 e3       	ldi	r24, 0x30	; 48
    498a:	96 e0       	ldi	r25, 0x06	; 6
    498c:	02 c0       	rjmp	.+4      	; 0x4992 <lora_driver_sendUploadMessage+0x9c>
    498e:	82 e3       	ldi	r24, 0x32	; 50
    4990:	96 e0       	ldi	r25, 0x06	; 6
    4992:	26 e7       	ldi	r18, 0x76	; 118
    4994:	37 e1       	ldi	r19, 0x17	; 23
    4996:	3f 93       	push	r19
    4998:	2f 93       	push	r18
    499a:	1f 92       	push	r1
    499c:	4f 93       	push	r20
    499e:	9f 93       	push	r25
    49a0:	8f 93       	push	r24
    49a2:	86 e3       	ldi	r24, 0x36	; 54
    49a4:	96 e0       	ldi	r25, 0x06	; 6
    49a6:	9f 93       	push	r25
    49a8:	8f 93       	push	r24
    49aa:	88 eb       	ldi	r24, 0xB8	; 184
    49ac:	97 e1       	ldi	r25, 0x17	; 23
    49ae:	9f 93       	push	r25
    49b0:	8f 93       	push	r24
    49b2:	0e 94 76 32 	call	0x64ec	; 0x64ec <sprintf>
    49b6:	60 e0       	ldi	r22, 0x00	; 0
    49b8:	70 e0       	ldi	r23, 0x00	; 0
    49ba:	88 eb       	ldi	r24, 0xB8	; 184
    49bc:	97 e1       	ldi	r25, 0x17	; 23
    49be:	b3 de       	rcall	.-666    	; 0x4726 <_uploadMessageRc>
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	de bf       	out	0x3e, r29	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	cd bf       	out	0x3d, r28	; 61
    49ca:	81 11       	cpse	r24, r1
    49cc:	59 c0       	rjmp	.+178    	; 0x4a80 <lora_driver_sendUploadMessage+0x18a>
    49ce:	08 e2       	ldi	r16, 0x28	; 40
    49d0:	15 e0       	ldi	r17, 0x05	; 5
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	4d e2       	ldi	r20, 0x2D	; 45
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	65 ee       	ldi	r22, 0xE5	; 229
    49dc:	77 e1       	ldi	r23, 0x17	; 23
    49de:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <_serialReplyBufferHandle>
    49e2:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <_serialReplyBufferHandle+0x1>
    49e6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <xStreamBufferReceive>
    49ea:	88 23       	and	r24, r24
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <lora_driver_sendUploadMessage+0xfa>
    49ee:	47 c0       	rjmp	.+142    	; 0x4a7e <lora_driver_sendUploadMessage+0x188>
    49f0:	85 ee       	ldi	r24, 0xE5	; 229
    49f2:	97 e1       	ldi	r25, 0x17	; 23
    49f4:	23 de       	rcall	.-954    	; 0x463c <_reply2ReturnCode>
    49f6:	8e 30       	cpi	r24, 0x0E	; 14
    49f8:	09 f0       	breq	.+2      	; 0x49fc <lora_driver_sendUploadMessage+0x106>
    49fa:	42 c0       	rjmp	.+132    	; 0x4a80 <lora_driver_sendUploadMessage+0x18a>
    49fc:	87 e0       	ldi	r24, 0x07	; 7
    49fe:	89 83       	std	Y+1, r24	; 0x01
    4a00:	80 91 5a 17 	lds	r24, 0x175A	; 0x80175a <_downlinkMessageBuffer>
    4a04:	90 91 5b 17 	lds	r25, 0x175B	; 0x80175b <_downlinkMessageBuffer+0x1>
    4a08:	89 2b       	or	r24, r25
    4a0a:	a9 f1       	breq	.+106    	; 0x4a76 <lora_driver_sendUploadMessage+0x180>
    4a0c:	be 01       	movw	r22, r28
    4a0e:	6f 5f       	subi	r22, 0xFF	; 255
    4a10:	7f 4f       	sbci	r23, 0xFF	; 255
    4a12:	85 ee       	ldi	r24, 0xE5	; 229
    4a14:	97 e1       	ldi	r25, 0x17	; 23
    4a16:	68 d1       	rcall	.+720    	; 0x4ce8 <decode_port_no>
    4a18:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <_downlinkPayload>
    4a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    4a1e:	f0 e0       	ldi	r31, 0x00	; 0
    4a20:	eb 51       	subi	r30, 0x1B	; 27
    4a22:	f8 4e       	sbci	r31, 0xE8	; 232
    4a24:	df 01       	movw	r26, r30
    4a26:	0d 90       	ld	r0, X+
    4a28:	00 20       	and	r0, r0
    4a2a:	e9 f7       	brne	.-6      	; 0x4a26 <lora_driver_sendUploadMessage+0x130>
    4a2c:	11 97       	sbiw	r26, 0x01	; 1
    4a2e:	ae 1b       	sub	r26, r30
    4a30:	bf 0b       	sbc	r27, r31
    4a32:	aa 23       	and	r26, r26
    4a34:	91 f0       	breq	.+36     	; 0x4a5a <lora_driver_sendUploadMessage+0x164>
    4a36:	bb 27       	eor	r27, r27
    4a38:	cd 01       	movw	r24, r26
    4a3a:	01 97       	sbiw	r24, 0x01	; 1
    4a3c:	9c 01       	movw	r18, r24
    4a3e:	12 f4       	brpl	.+4      	; 0x4a44 <lora_driver_sendUploadMessage+0x14e>
    4a40:	2f 5f       	subi	r18, 0xFF	; 255
    4a42:	3f 4f       	sbci	r19, 0xFF	; 255
    4a44:	35 95       	asr	r19
    4a46:	27 95       	ror	r18
    4a48:	20 93 61 17 	sts	0x1761, r18	; 0x801761 <_downlinkPayload+0x1>
    4a4c:	af 01       	movw	r20, r30
    4a4e:	4f 5f       	subi	r20, 0xFF	; 255
    4a50:	5f 4f       	sbci	r21, 0xFF	; 255
    4a52:	64 e1       	ldi	r22, 0x14	; 20
    4a54:	82 e6       	ldi	r24, 0x62	; 98
    4a56:	97 e1       	ldi	r25, 0x17	; 23
    4a58:	73 d1       	rcall	.+742    	; 0x4d40 <decode_hexadecimal_string_bytes>
    4a5a:	01 e0       	ldi	r16, 0x01	; 1
    4a5c:	10 e0       	ldi	r17, 0x00	; 0
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	46 e1       	ldi	r20, 0x16	; 22
    4a64:	50 e0       	ldi	r21, 0x00	; 0
    4a66:	60 e6       	ldi	r22, 0x60	; 96
    4a68:	77 e1       	ldi	r23, 0x17	; 23
    4a6a:	80 91 5a 17 	lds	r24, 0x175A	; 0x80175a <_downlinkMessageBuffer>
    4a6e:	90 91 5b 17 	lds	r25, 0x175B	; 0x80175b <_downlinkMessageBuffer+0x1>
    4a72:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xStreamBufferSend>
    4a76:	8e e0       	ldi	r24, 0x0E	; 14
    4a78:	03 c0       	rjmp	.+6      	; 0x4a80 <lora_driver_sendUploadMessage+0x18a>
    4a7a:	84 e1       	ldi	r24, 0x14	; 20
    4a7c:	01 c0       	rjmp	.+2      	; 0x4a80 <lora_driver_sendUploadMessage+0x18a>
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	0f 90       	pop	r0
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	08 95       	ret

00004a8c <lora_driver_setAdaptiveDataRate>:
    4a8c:	81 30       	cpi	r24, 0x01	; 1
    4a8e:	19 f0       	breq	.+6      	; 0x4a96 <lora_driver_setAdaptiveDataRate+0xa>
    4a90:	66 e4       	ldi	r22, 0x46	; 70
    4a92:	76 e0       	ldi	r23, 0x06	; 6
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <lora_driver_setAdaptiveDataRate+0xe>
    4a96:	6f e1       	ldi	r22, 0x1F	; 31
    4a98:	77 e0       	ldi	r23, 0x07	; 7
    4a9a:	8a e4       	ldi	r24, 0x4A	; 74
    4a9c:	96 e0       	ldi	r25, 0x06	; 6
    4a9e:	43 ce       	rjmp	.-890    	; 0x4726 <_uploadMessageRc>
    4aa0:	08 95       	ret

00004aa2 <lora_driver_setReceiveDelay>:
    4aa2:	9f 93       	push	r25
    4aa4:	8f 93       	push	r24
    4aa6:	8b e7       	ldi	r24, 0x7B	; 123
    4aa8:	96 e0       	ldi	r25, 0x06	; 6
    4aaa:	9f 93       	push	r25
    4aac:	8f 93       	push	r24
    4aae:	88 eb       	ldi	r24, 0xB8	; 184
    4ab0:	97 e1       	ldi	r25, 0x17	; 23
    4ab2:	9f 93       	push	r25
    4ab4:	8f 93       	push	r24
    4ab6:	0e 94 76 32 	call	0x64ec	; 0x64ec <sprintf>
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	88 eb       	ldi	r24, 0xB8	; 184
    4ac0:	97 e1       	ldi	r25, 0x17	; 23
    4ac2:	31 de       	rcall	.-926    	; 0x4726 <_uploadMessageRc>
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	08 95       	ret

00004ad2 <lora_driver_configureToEu868>:
    4ad2:	2f 92       	push	r2
    4ad4:	3f 92       	push	r3
    4ad6:	4f 92       	push	r4
    4ad8:	5f 92       	push	r5
    4ada:	6f 92       	push	r6
    4adc:	7f 92       	push	r7
    4ade:	8f 92       	push	r8
    4ae0:	9f 92       	push	r9
    4ae2:	af 92       	push	r10
    4ae4:	bf 92       	push	r11
    4ae6:	cf 92       	push	r12
    4ae8:	df 92       	push	r13
    4aea:	ef 92       	push	r14
    4aec:	ff 92       	push	r15
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62
    4afa:	a0 97       	sbiw	r28, 0x20	; 32
    4afc:	0f b6       	in	r0, 0x3f	; 63
    4afe:	f8 94       	cli
    4b00:	de bf       	out	0x3e, r29	; 62
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	cd bf       	out	0x3d, r28	; 61
    4b06:	68 ea       	ldi	r22, 0xA8	; 168
    4b08:	76 e0       	ldi	r23, 0x06	; 6
    4b0a:	84 eb       	ldi	r24, 0xB4	; 180
    4b0c:	96 e0       	ldi	r25, 0x06	; 6
    4b0e:	3c dd       	rcall	.-1416   	; 0x4588 <_uploadMessage>
    4b10:	95 dd       	rcall	.-1238   	; 0x463c <_reply2ReturnCode>
    4b12:	81 11       	cpse	r24, r1
    4b14:	a3 c0       	rjmp	.+326    	; 0x4c5c <lora_driver_configureToEu868+0x18a>
    4b16:	80 e2       	ldi	r24, 0x20	; 32
    4b18:	e2 e2       	ldi	r30, 0x22	; 34
    4b1a:	f2 e0       	ldi	r31, 0x02	; 2
    4b1c:	de 01       	movw	r26, r28
    4b1e:	11 96       	adiw	r26, 0x01	; 1
    4b20:	01 90       	ld	r0, Z+
    4b22:	0d 92       	st	X+, r0
    4b24:	8a 95       	dec	r24
    4b26:	e1 f7       	brne	.-8      	; 0x4b20 <lora_driver_configureToEu868+0x4e>
    4b28:	9e 01       	movw	r18, r28
    4b2a:	2f 5f       	subi	r18, 0xFF	; 255
    4b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2e:	69 01       	movw	r12, r18
    4b30:	e1 2c       	mov	r14, r1
    4b32:	f1 2c       	mov	r15, r1
    4b34:	0f 2e       	mov	r0, r31
    4b36:	f0 ec       	ldi	r31, 0xC0	; 192
    4b38:	af 2e       	mov	r10, r31
    4b3a:	f6 e0       	ldi	r31, 0x06	; 6
    4b3c:	bf 2e       	mov	r11, r31
    4b3e:	f0 2d       	mov	r31, r0
    4b40:	08 eb       	ldi	r16, 0xB8	; 184
    4b42:	17 e1       	ldi	r17, 0x17	; 23
    4b44:	0f 2e       	mov	r0, r31
    4b46:	f9 ed       	ldi	r31, 0xD9	; 217
    4b48:	4f 2e       	mov	r4, r31
    4b4a:	f6 e0       	ldi	r31, 0x06	; 6
    4b4c:	5f 2e       	mov	r5, r31
    4b4e:	f0 2d       	mov	r31, r0
    4b50:	0f 2e       	mov	r0, r31
    4b52:	f0 ef       	ldi	r31, 0xF0	; 240
    4b54:	8f 2e       	mov	r8, r31
    4b56:	f6 e0       	ldi	r31, 0x06	; 6
    4b58:	9f 2e       	mov	r9, r31
    4b5a:	f0 2d       	mov	r31, r0
    4b5c:	0f 2e       	mov	r0, r31
    4b5e:	fa e0       	ldi	r31, 0x0A	; 10
    4b60:	6f 2e       	mov	r6, r31
    4b62:	f7 e0       	ldi	r31, 0x07	; 7
    4b64:	7f 2e       	mov	r7, r31
    4b66:	f0 2d       	mov	r31, r0
    4b68:	3e 2c       	mov	r3, r14
    4b6a:	2f 2c       	mov	r2, r15
    4b6c:	ff 92       	push	r15
    4b6e:	ef 92       	push	r14
    4b70:	bf 92       	push	r11
    4b72:	af 92       	push	r10
    4b74:	1f 93       	push	r17
    4b76:	0f 93       	push	r16
    4b78:	0e 94 76 32 	call	0x64ec	; 0x64ec <sprintf>
    4b7c:	60 e0       	ldi	r22, 0x00	; 0
    4b7e:	70 e0       	ldi	r23, 0x00	; 0
    4b80:	c8 01       	movw	r24, r16
    4b82:	02 dd       	rcall	.-1532   	; 0x4588 <_uploadMessage>
    4b84:	5b dd       	rcall	.-1354   	; 0x463c <_reply2ReturnCode>
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	0f 90       	pop	r0
    4b92:	81 11       	cpse	r24, r1
    4b94:	63 c0       	rjmp	.+198    	; 0x4c5c <lora_driver_configureToEu868+0x18a>
    4b96:	32 e0       	ldi	r19, 0x02	; 2
    4b98:	3e 15       	cp	r19, r14
    4b9a:	e8 f4       	brcc	.+58     	; 0x4bd6 <lora_driver_configureToEu868+0x104>
    4b9c:	f6 01       	movw	r30, r12
    4b9e:	83 81       	ldd	r24, Z+3	; 0x03
    4ba0:	8f 93       	push	r24
    4ba2:	82 81       	ldd	r24, Z+2	; 0x02
    4ba4:	8f 93       	push	r24
    4ba6:	81 81       	ldd	r24, Z+1	; 0x01
    4ba8:	8f 93       	push	r24
    4baa:	80 81       	ld	r24, Z
    4bac:	8f 93       	push	r24
    4bae:	ff 92       	push	r15
    4bb0:	ef 92       	push	r14
    4bb2:	5f 92       	push	r5
    4bb4:	4f 92       	push	r4
    4bb6:	1f 93       	push	r17
    4bb8:	0f 93       	push	r16
    4bba:	0e 94 76 32 	call	0x64ec	; 0x64ec <sprintf>
    4bbe:	60 e0       	ldi	r22, 0x00	; 0
    4bc0:	70 e0       	ldi	r23, 0x00	; 0
    4bc2:	c8 01       	movw	r24, r16
    4bc4:	e1 dc       	rcall	.-1598   	; 0x4588 <_uploadMessage>
    4bc6:	3a dd       	rcall	.-1420   	; 0x463c <_reply2ReturnCode>
    4bc8:	0f b6       	in	r0, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	cd bf       	out	0x3d, r28	; 61
    4bd2:	81 11       	cpse	r24, r1
    4bd4:	43 c0       	rjmp	.+134    	; 0x4c5c <lora_driver_configureToEu868+0x18a>
    4bd6:	2f 92       	push	r2
    4bd8:	3f 92       	push	r3
    4bda:	9f 92       	push	r9
    4bdc:	8f 92       	push	r8
    4bde:	1f 93       	push	r17
    4be0:	0f 93       	push	r16
    4be2:	0e 94 76 32 	call	0x64ec	; 0x64ec <sprintf>
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	70 e0       	ldi	r23, 0x00	; 0
    4bea:	c8 01       	movw	r24, r16
    4bec:	cd dc       	rcall	.-1638   	; 0x4588 <_uploadMessage>
    4bee:	26 dd       	rcall	.-1460   	; 0x463c <_reply2ReturnCode>
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	81 11       	cpse	r24, r1
    4bfe:	2e c0       	rjmp	.+92     	; 0x4c5c <lora_driver_configureToEu868+0x18a>
    4c00:	2f 92       	push	r2
    4c02:	3f 92       	push	r3
    4c04:	7f 92       	push	r7
    4c06:	6f 92       	push	r6
    4c08:	1f 93       	push	r17
    4c0a:	0f 93       	push	r16
    4c0c:	0e 94 76 32 	call	0x64ec	; 0x64ec <sprintf>
    4c10:	60 e0       	ldi	r22, 0x00	; 0
    4c12:	70 e0       	ldi	r23, 0x00	; 0
    4c14:	c8 01       	movw	r24, r16
    4c16:	b8 dc       	rcall	.-1680   	; 0x4588 <_uploadMessage>
    4c18:	11 dd       	rcall	.-1502   	; 0x463c <_reply2ReturnCode>
    4c1a:	0f 90       	pop	r0
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	0f 90       	pop	r0
    4c24:	0f 90       	pop	r0
    4c26:	81 11       	cpse	r24, r1
    4c28:	19 c0       	rjmp	.+50     	; 0x4c5c <lora_driver_configureToEu868+0x18a>
    4c2a:	3f ef       	ldi	r19, 0xFF	; 255
    4c2c:	e3 1a       	sub	r14, r19
    4c2e:	f3 0a       	sbc	r15, r19
    4c30:	84 e0       	ldi	r24, 0x04	; 4
    4c32:	c8 0e       	add	r12, r24
    4c34:	d1 1c       	adc	r13, r1
    4c36:	98 e0       	ldi	r25, 0x08	; 8
    4c38:	e9 16       	cp	r14, r25
    4c3a:	f1 04       	cpc	r15, r1
    4c3c:	09 f0       	breq	.+2      	; 0x4c40 <lora_driver_configureToEu868+0x16e>
    4c3e:	94 cf       	rjmp	.-216    	; 0x4b68 <lora_driver_configureToEu868+0x96>
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	70 e0       	ldi	r23, 0x00	; 0
    4c44:	82 e2       	ldi	r24, 0x22	; 34
    4c46:	97 e0       	ldi	r25, 0x07	; 7
    4c48:	9f dc       	rcall	.-1730   	; 0x4588 <_uploadMessage>
    4c4a:	f8 dc       	rcall	.-1552   	; 0x463c <_reply2ReturnCode>
    4c4c:	81 11       	cpse	r24, r1
    4c4e:	06 c0       	rjmp	.+12     	; 0x4c5c <lora_driver_configureToEu868+0x18a>
    4c50:	60 e0       	ldi	r22, 0x00	; 0
    4c52:	70 e0       	ldi	r23, 0x00	; 0
    4c54:	83 e3       	ldi	r24, 0x33	; 51
    4c56:	97 e0       	ldi	r25, 0x07	; 7
    4c58:	97 dc       	rcall	.-1746   	; 0x4588 <_uploadMessage>
    4c5a:	f0 dc       	rcall	.-1568   	; 0x463c <_reply2ReturnCode>
    4c5c:	a0 96       	adiw	r28, 0x20	; 32
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	f8 94       	cli
    4c62:	de bf       	out	0x3e, r29	; 62
    4c64:	0f be       	out	0x3f, r0	; 63
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	df 91       	pop	r29
    4c6a:	cf 91       	pop	r28
    4c6c:	1f 91       	pop	r17
    4c6e:	0f 91       	pop	r16
    4c70:	ff 90       	pop	r15
    4c72:	ef 90       	pop	r14
    4c74:	df 90       	pop	r13
    4c76:	cf 90       	pop	r12
    4c78:	bf 90       	pop	r11
    4c7a:	af 90       	pop	r10
    4c7c:	9f 90       	pop	r9
    4c7e:	8f 90       	pop	r8
    4c80:	7f 90       	pop	r7
    4c82:	6f 90       	pop	r6
    4c84:	5f 90       	pop	r5
    4c86:	4f 90       	pop	r4
    4c88:	3f 90       	pop	r3
    4c8a:	2f 90       	pop	r2
    4c8c:	08 95       	ret

00004c8e <lora_driver_setOtaaIdentity>:
    4c8e:	ef 92       	push	r14
    4c90:	ff 92       	push	r15
    4c92:	0f 93       	push	r16
    4c94:	1f 93       	push	r17
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	ec 01       	movw	r28, r24
    4c9c:	8b 01       	movw	r16, r22
    4c9e:	7a 01       	movw	r14, r20
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	f4 de       	rcall	.-536    	; 0x4a8c <lora_driver_setAdaptiveDataRate>
    4ca4:	81 11       	cpse	r24, r1
    4ca6:	0d c0       	rjmp	.+26     	; 0x4cc2 <lora_driver_setOtaaIdentity+0x34>
    4ca8:	ce 01       	movw	r24, r28
    4caa:	d4 dd       	rcall	.-1112   	; 0x4854 <lora_driver_setApplicationIdentifier>
    4cac:	81 11       	cpse	r24, r1
    4cae:	09 c0       	rjmp	.+18     	; 0x4cc2 <lora_driver_setOtaaIdentity+0x34>
    4cb0:	c8 01       	movw	r24, r16
    4cb2:	e1 dd       	rcall	.-1086   	; 0x4876 <lora_driver_setApplicationKey>
    4cb4:	81 11       	cpse	r24, r1
    4cb6:	05 c0       	rjmp	.+10     	; 0x4cc2 <lora_driver_setOtaaIdentity+0x34>
    4cb8:	c7 01       	movw	r24, r14
    4cba:	bb dd       	rcall	.-1162   	; 0x4832 <lora_driver_setDeviceIdentifier>
    4cbc:	81 11       	cpse	r24, r1
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <lora_driver_setOtaaIdentity+0x34>
    4cc0:	eb dd       	rcall	.-1066   	; 0x4898 <lora_driver_saveMac>
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	08 95       	ret

00004cd0 <lora_driver_mapReturnCodeToText>:
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	ee 0f       	add	r30, r30
    4cd6:	ff 1f       	adc	r31, r31
    4cd8:	8e 0f       	add	r24, r30
    4cda:	9f 1f       	adc	r25, r31
    4cdc:	fc 01       	movw	r30, r24
    4cde:	e4 50       	subi	r30, 0x04	; 4
    4ce0:	f8 4f       	sbci	r31, 0xF8	; 248
    4ce2:	81 81       	ldd	r24, Z+1	; 0x01
    4ce4:	92 81       	ldd	r25, Z+2	; 0x02
    4ce6:	08 95       	ret

00004ce8 <decode_port_no>:
    4ce8:	dc 01       	movw	r26, r24
    4cea:	00 97       	sbiw	r24, 0x00	; 0
    4cec:	29 f1       	breq	.+74     	; 0x4d38 <decode_port_no+0x50>
    4cee:	fb 01       	movw	r30, r22
    4cf0:	20 81       	ld	r18, Z
    4cf2:	fc 01       	movw	r30, r24
    4cf4:	01 90       	ld	r0, Z+
    4cf6:	00 20       	and	r0, r0
    4cf8:	e9 f7       	brne	.-6      	; 0x4cf4 <decode_port_no+0xc>
    4cfa:	31 97       	sbiw	r30, 0x01	; 1
    4cfc:	e8 1b       	sub	r30, r24
    4cfe:	f9 0b       	sbc	r31, r25
    4d00:	82 2f       	mov	r24, r18
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	e8 17       	cp	r30, r24
    4d06:	f9 07       	cpc	r31, r25
    4d08:	c8 f0       	brcs	.+50     	; 0x4d3c <decode_port_no+0x54>
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	08 c0       	rjmp	.+16     	; 0x4d1e <decode_port_no+0x36>
    4d0e:	88 0f       	add	r24, r24
    4d10:	38 2f       	mov	r19, r24
    4d12:	33 0f       	add	r19, r19
    4d14:	33 0f       	add	r19, r19
    4d16:	83 0f       	add	r24, r19
    4d18:	80 53       	subi	r24, 0x30	; 48
    4d1a:	89 0f       	add	r24, r25
    4d1c:	2f 5f       	subi	r18, 0xFF	; 255
    4d1e:	fd 01       	movw	r30, r26
    4d20:	e2 0f       	add	r30, r18
    4d22:	f1 1d       	adc	r31, r1
    4d24:	90 81       	ld	r25, Z
    4d26:	30 ed       	ldi	r19, 0xD0	; 208
    4d28:	39 0f       	add	r19, r25
    4d2a:	3a 30       	cpi	r19, 0x0A	; 10
    4d2c:	10 f4       	brcc	.+4      	; 0x4d32 <decode_port_no+0x4a>
    4d2e:	91 11       	cpse	r25, r1
    4d30:	ee cf       	rjmp	.-36     	; 0x4d0e <decode_port_no+0x26>
    4d32:	fb 01       	movw	r30, r22
    4d34:	20 83       	st	Z, r18
    4d36:	08 95       	ret
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	08 95       	ret
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	08 95       	ret

00004d40 <decode_hexadecimal_string_bytes>:
    4d40:	0f 93       	push	r16
    4d42:	1f 93       	push	r17
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	dc 01       	movw	r26, r24
    4d4a:	ea 01       	movw	r28, r20
    4d4c:	20 97       	sbiw	r28, 0x00	; 0
    4d4e:	e1 f1       	breq	.+120    	; 0x4dc8 <decode_hexadecimal_string_bytes+0x88>
    4d50:	fa 01       	movw	r30, r20
    4d52:	01 90       	ld	r0, Z+
    4d54:	00 20       	and	r0, r0
    4d56:	e9 f7       	brne	.-6      	; 0x4d52 <decode_hexadecimal_string_bytes+0x12>
    4d58:	31 97       	sbiw	r30, 0x01	; 1
    4d5a:	e4 1b       	sub	r30, r20
    4d5c:	f5 0b       	sbc	r31, r21
    4d5e:	32 97       	sbiw	r30, 0x02	; 2
    4d60:	10 f5       	brcc	.+68     	; 0x4da6 <decode_hexadecimal_string_bytes+0x66>
    4d62:	32 c0       	rjmp	.+100    	; 0x4dc8 <decode_hexadecimal_string_bytes+0x88>
    4d64:	8d 01       	movw	r16, r26
    4d66:	04 0f       	add	r16, r20
    4d68:	15 1f       	adc	r17, r21
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	ae 01       	movw	r20, r28
    4d6e:	42 0f       	add	r20, r18
    4d70:	53 1f       	adc	r21, r19
    4d72:	fa 01       	movw	r30, r20
    4d74:	90 81       	ld	r25, Z
    4d76:	91 34       	cpi	r25, 0x41	; 65
    4d78:	28 f0       	brcs	.+10     	; 0x4d84 <decode_hexadecimal_string_bytes+0x44>
    4d7a:	97 53       	subi	r25, 0x37	; 55
    4d7c:	59 2f       	mov	r21, r25
    4d7e:	52 95       	swap	r21
    4d80:	50 7f       	andi	r21, 0xF0	; 240
    4d82:	03 c0       	rjmp	.+6      	; 0x4d8a <decode_hexadecimal_string_bytes+0x4a>
    4d84:	59 2f       	mov	r21, r25
    4d86:	52 95       	swap	r21
    4d88:	50 7f       	andi	r21, 0xF0	; 240
    4d8a:	2c 0f       	add	r18, r28
    4d8c:	3d 1f       	adc	r19, r29
    4d8e:	f9 01       	movw	r30, r18
    4d90:	91 81       	ldd	r25, Z+1	; 0x01
    4d92:	91 34       	cpi	r25, 0x41	; 65
    4d94:	10 f0       	brcs	.+4      	; 0x4d9a <decode_hexadecimal_string_bytes+0x5a>
    4d96:	97 53       	subi	r25, 0x37	; 55
    4d98:	01 c0       	rjmp	.+2      	; 0x4d9c <decode_hexadecimal_string_bytes+0x5c>
    4d9a:	90 53       	subi	r25, 0x30	; 48
    4d9c:	95 0f       	add	r25, r21
    4d9e:	f8 01       	movw	r30, r16
    4da0:	90 83       	st	Z, r25
    4da2:	8f 5f       	subi	r24, 0xFF	; 255
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <decode_hexadecimal_string_bytes+0x68>
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	28 2f       	mov	r18, r24
    4daa:	22 0f       	add	r18, r18
    4dac:	48 2f       	mov	r20, r24
    4dae:	50 e0       	ldi	r21, 0x00	; 0
    4db0:	fe 01       	movw	r30, r28
    4db2:	01 90       	ld	r0, Z+
    4db4:	00 20       	and	r0, r0
    4db6:	e9 f7       	brne	.-6      	; 0x4db2 <decode_hexadecimal_string_bytes+0x72>
    4db8:	31 97       	sbiw	r30, 0x01	; 1
    4dba:	ec 1b       	sub	r30, r28
    4dbc:	fd 0b       	sbc	r31, r29
    4dbe:	4e 17       	cp	r20, r30
    4dc0:	5f 07       	cpc	r21, r31
    4dc2:	10 f4       	brcc	.+4      	; 0x4dc8 <decode_hexadecimal_string_bytes+0x88>
    4dc4:	86 13       	cpse	r24, r22
    4dc6:	ce cf       	rjmp	.-100    	; 0x4d64 <decode_hexadecimal_string_bytes+0x24>
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	08 95       	ret

00004dd2 <_serialCallBack>:
    4dd2:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <crc_sum.1945>
    4dd6:	86 0f       	add	r24, r22
    4dd8:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <crc_sum.1945>
    4ddc:	90 91 18 18 	lds	r25, 0x1818	; 0x801818 <_mh_state>
    4de0:	91 30       	cpi	r25, 0x01	; 1
    4de2:	79 f0       	breq	.+30     	; 0x4e02 <_serialCallBack+0x30>
    4de4:	28 f0       	brcs	.+10     	; 0x4df0 <_serialCallBack+0x1e>
    4de6:	92 30       	cpi	r25, 0x02	; 2
    4de8:	a9 f0       	breq	.+42     	; 0x4e14 <_serialCallBack+0x42>
    4dea:	93 30       	cpi	r25, 0x03	; 3
    4dec:	19 f1       	breq	.+70     	; 0x4e34 <_serialCallBack+0x62>
    4dee:	08 95       	ret
    4df0:	6f 3f       	cpi	r22, 0xFF	; 255
    4df2:	09 f0       	breq	.+2      	; 0x4df6 <_serialCallBack+0x24>
    4df4:	48 c0       	rjmp	.+144    	; 0x4e86 <_serialCallBack+0xb4>
    4df6:	10 92 15 18 	sts	0x1815, r1	; 0x801815 <crc_sum.1945>
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mh_state>
    4e00:	08 95       	ret
    4e02:	66 38       	cpi	r22, 0x86	; 134
    4e04:	09 f0       	breq	.+2      	; 0x4e08 <_serialCallBack+0x36>
    4e06:	3f c0       	rjmp	.+126    	; 0x4e86 <_serialCallBack+0xb4>
    4e08:	10 92 14 18 	sts	0x1814, r1	; 0x801814 <inDex.1943>
    4e0c:	82 e0       	ldi	r24, 0x02	; 2
    4e0e:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mh_state>
    4e12:	08 95       	ret
    4e14:	e0 91 14 18 	lds	r30, 0x1814	; 0x801814 <inDex.1943>
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	8e 0f       	add	r24, r30
    4e1c:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <inDex.1943>
    4e20:	f0 e0       	ldi	r31, 0x00	; 0
    4e22:	ee 5e       	subi	r30, 0xEE	; 238
    4e24:	f7 4e       	sbci	r31, 0xE7	; 231
    4e26:	60 83       	st	Z, r22
    4e28:	82 30       	cpi	r24, 0x02	; 2
    4e2a:	69 f5       	brne	.+90     	; 0x4e86 <_serialCallBack+0xb4>
    4e2c:	83 e0       	ldi	r24, 0x03	; 3
    4e2e:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <_mh_state>
    4e32:	08 95       	ret
    4e34:	90 91 14 18 	lds	r25, 0x1814	; 0x801814 <inDex.1943>
    4e38:	21 e0       	ldi	r18, 0x01	; 1
    4e3a:	29 0f       	add	r18, r25
    4e3c:	20 93 14 18 	sts	0x1814, r18	; 0x801814 <inDex.1943>
    4e40:	96 30       	cpi	r25, 0x06	; 6
    4e42:	09 f5       	brne	.+66     	; 0x4e86 <_serialCallBack+0xb4>
    4e44:	81 11       	cpse	r24, r1
    4e46:	0e c0       	rjmp	.+28     	; 0x4e64 <_serialCallBack+0x92>
    4e48:	e2 e1       	ldi	r30, 0x12	; 18
    4e4a:	f8 e1       	ldi	r31, 0x18	; 24
    4e4c:	80 81       	ld	r24, Z
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	98 2f       	mov	r25, r24
    4e52:	88 27       	eor	r24, r24
    4e54:	21 81       	ldd	r18, Z+1	; 0x01
    4e56:	82 0f       	add	r24, r18
    4e58:	91 1d       	adc	r25, r1
    4e5a:	90 93 1a 18 	sts	0x181A, r25	; 0x80181a <_ppm+0x1>
    4e5e:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <_ppm>
    4e62:	04 c0       	rjmp	.+8      	; 0x4e6c <_serialCallBack+0x9a>
    4e64:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <_ppm+0x1>
    4e68:	10 92 19 18 	sts	0x1819, r1	; 0x801819 <_ppm>
    4e6c:	10 92 18 18 	sts	0x1818, r1	; 0x801818 <_mh_state>
    4e70:	e0 91 16 18 	lds	r30, 0x1816	; 0x801816 <_appCallBack>
    4e74:	f0 91 17 18 	lds	r31, 0x1817	; 0x801817 <_appCallBack+0x1>
    4e78:	30 97       	sbiw	r30, 0x00	; 0
    4e7a:	29 f0       	breq	.+10     	; 0x4e86 <_serialCallBack+0xb4>
    4e7c:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <_ppm>
    4e80:	90 91 1a 18 	lds	r25, 0x181A	; 0x80181a <_ppm+0x1>
    4e84:	19 95       	eicall
    4e86:	08 95       	ret

00004e88 <mh_z19_initialise>:
    4e88:	8f 92       	push	r8
    4e8a:	9f 92       	push	r9
    4e8c:	af 92       	push	r10
    4e8e:	cf 92       	push	r12
    4e90:	ef 92       	push	r14
    4e92:	0f 93       	push	r16
    4e94:	0f 2e       	mov	r0, r31
    4e96:	f9 ee       	ldi	r31, 0xE9	; 233
    4e98:	8f 2e       	mov	r8, r31
    4e9a:	f6 e2       	ldi	r31, 0x26	; 38
    4e9c:	9f 2e       	mov	r9, r31
    4e9e:	f0 2d       	mov	r31, r0
    4ea0:	68 94       	set
    4ea2:	aa 24       	eor	r10, r10
    4ea4:	a4 f8       	bld	r10, 4
    4ea6:	68 94       	set
    4ea8:	cc 24       	eor	r12, r12
    4eaa:	c4 f8       	bld	r12, 4
    4eac:	e1 2c       	mov	r14, r1
    4eae:	00 e0       	ldi	r16, 0x00	; 0
    4eb0:	23 e0       	ldi	r18, 0x03	; 3
    4eb2:	40 e8       	ldi	r20, 0x80	; 128
    4eb4:	55 e2       	ldi	r21, 0x25	; 37
    4eb6:	60 e0       	ldi	r22, 0x00	; 0
    4eb8:	70 e0       	ldi	r23, 0x00	; 0
    4eba:	73 d0       	rcall	.+230    	; 0x4fa2 <serial_create>
    4ebc:	90 93 1c 18 	sts	0x181C, r25	; 0x80181c <_serial+0x1>
    4ec0:	80 93 1b 18 	sts	0x181B, r24	; 0x80181b <_serial>
    4ec4:	0f 91       	pop	r16
    4ec6:	ef 90       	pop	r14
    4ec8:	cf 90       	pop	r12
    4eca:	af 90       	pop	r10
    4ecc:	9f 90       	pop	r9
    4ece:	8f 90       	pop	r8
    4ed0:	08 95       	ret

00004ed2 <mh_z19_injectCallBack>:
    4ed2:	90 93 17 18 	sts	0x1817, r25	; 0x801817 <_appCallBack+0x1>
    4ed6:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <_appCallBack>
    4eda:	08 95       	ret

00004edc <mh_z19_takeMeassuring>:
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	cd b7       	in	r28, 0x3d	; 61
    4ee2:	de b7       	in	r29, 0x3e	; 62
    4ee4:	29 97       	sbiw	r28, 0x09	; 9
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	de bf       	out	0x3e, r29	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	cd bf       	out	0x3d, r28	; 61
    4ef0:	89 e0       	ldi	r24, 0x09	; 9
    4ef2:	e2 e4       	ldi	r30, 0x42	; 66
    4ef4:	f2 e0       	ldi	r31, 0x02	; 2
    4ef6:	9e 01       	movw	r18, r28
    4ef8:	2f 5f       	subi	r18, 0xFF	; 255
    4efa:	3f 4f       	sbci	r19, 0xFF	; 255
    4efc:	d9 01       	movw	r26, r18
    4efe:	01 90       	ld	r0, Z+
    4f00:	0d 92       	st	X+, r0
    4f02:	8a 95       	dec	r24
    4f04:	e1 f7       	brne	.-8      	; 0x4efe <mh_z19_takeMeassuring+0x22>
    4f06:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <_ppm+0x1>
    4f0a:	10 92 19 18 	sts	0x1819, r1	; 0x801819 <_ppm>
    4f0e:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <_serial>
    4f12:	90 91 1c 18 	lds	r25, 0x181C	; 0x80181c <_serial+0x1>
    4f16:	00 97       	sbiw	r24, 0x00	; 0
    4f18:	31 f0       	breq	.+12     	; 0x4f26 <mh_z19_takeMeassuring+0x4a>
    4f1a:	42 2f       	mov	r20, r18
    4f1c:	53 2f       	mov	r21, r19
    4f1e:	69 e0       	ldi	r22, 0x09	; 9
    4f20:	0c d1       	rcall	.+536    	; 0x513a <serial_sendBytes>
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	01 c0       	rjmp	.+2      	; 0x4f28 <mh_z19_takeMeassuring+0x4c>
    4f26:	82 e0       	ldi	r24, 0x02	; 2
    4f28:	29 96       	adiw	r28, 0x09	; 9
    4f2a:	0f b6       	in	r0, 0x3f	; 63
    4f2c:	f8 94       	cli
    4f2e:	de bf       	out	0x3e, r29	; 62
    4f30:	0f be       	out	0x3f, r0	; 63
    4f32:	cd bf       	out	0x3d, r28	; 61
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	08 95       	ret

00004f3a <rc_servo_setPosition>:
    4f3a:	65 36       	cpi	r22, 0x65	; 101
    4f3c:	0c f0       	brlt	.+2      	; 0x4f40 <rc_servo_setPosition+0x6>
    4f3e:	64 e6       	ldi	r22, 0x64	; 100
    4f40:	6c 39       	cpi	r22, 0x9C	; 156
    4f42:	0c f4       	brge	.+2      	; 0x4f46 <rc_servo_setPosition+0xc>
    4f44:	6c e9       	ldi	r22, 0x9C	; 156
    4f46:	96 ef       	ldi	r25, 0xF6	; 246
    4f48:	69 02       	muls	r22, r25
    4f4a:	b0 01       	movw	r22, r0
    4f4c:	11 24       	eor	r1, r1
    4f4e:	68 54       	subi	r22, 0x48	; 72
    4f50:	74 4f       	sbci	r23, 0xF4	; 244
    4f52:	81 11       	cpse	r24, r1
    4f54:	05 c0       	rjmp	.+10     	; 0x4f60 <rc_servo_setPosition+0x26>
    4f56:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4f5a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4f5e:	08 95       	ret
    4f60:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4f64:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4f68:	08 95       	ret

00004f6a <rc_servo_initialise>:
    4f6a:	ea e0       	ldi	r30, 0x0A	; 10
    4f6c:	f1 e0       	ldi	r31, 0x01	; 1
    4f6e:	80 81       	ld	r24, Z
    4f70:	88 61       	ori	r24, 0x18	; 24
    4f72:	80 83       	st	Z, r24
    4f74:	8f e3       	ldi	r24, 0x3F	; 63
    4f76:	9c e9       	ldi	r25, 0x9C	; 156
    4f78:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4f7c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4f80:	60 e0       	ldi	r22, 0x00	; 0
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	da df       	rcall	.-76     	; 0x4f3a <rc_servo_setPosition>
    4f86:	60 e0       	ldi	r22, 0x00	; 0
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	d7 df       	rcall	.-82     	; 0x4f3a <rc_servo_setPosition>
    4f8c:	e0 e2       	ldi	r30, 0x20	; 32
    4f8e:	f1 e0       	ldi	r31, 0x01	; 1
    4f90:	80 81       	ld	r24, Z
    4f92:	82 6a       	ori	r24, 0xA2	; 162
    4f94:	80 83       	st	Z, r24
    4f96:	e1 e2       	ldi	r30, 0x21	; 33
    4f98:	f1 e0       	ldi	r31, 0x01	; 1
    4f9a:	80 81       	ld	r24, Z
    4f9c:	8a 61       	ori	r24, 0x1A	; 26
    4f9e:	80 83       	st	Z, r24
    4fa0:	08 95       	ret

00004fa2 <serial_create>:
    4fa2:	2f 92       	push	r2
    4fa4:	3f 92       	push	r3
    4fa6:	4f 92       	push	r4
    4fa8:	5f 92       	push	r5
    4faa:	6f 92       	push	r6
    4fac:	7f 92       	push	r7
    4fae:	8f 92       	push	r8
    4fb0:	9f 92       	push	r9
    4fb2:	af 92       	push	r10
    4fb4:	cf 92       	push	r12
    4fb6:	ef 92       	push	r14
    4fb8:	ff 92       	push	r15
    4fba:	0f 93       	push	r16
    4fbc:	1f 93       	push	r17
    4fbe:	cf 93       	push	r28
    4fc0:	df 93       	push	r29
    4fc2:	cd b7       	in	r28, 0x3d	; 61
    4fc4:	de b7       	in	r29, 0x3e	; 62
    4fc6:	f8 2e       	mov	r15, r24
    4fc8:	2a 01       	movw	r4, r20
    4fca:	3b 01       	movw	r6, r22
    4fcc:	88 e0       	ldi	r24, 0x08	; 8
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	0e 94 af 30 	call	0x615e	; 0x615e <malloc>
    4fd4:	8c 01       	movw	r16, r24
    4fd6:	8f 2d       	mov	r24, r15
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	fc 01       	movw	r30, r24
    4fdc:	ee 0f       	add	r30, r30
    4fde:	ff 1f       	adc	r31, r31
    4fe0:	e3 5e       	subi	r30, 0xE3	; 227
    4fe2:	f7 4e       	sbci	r31, 0xE7	; 231
    4fe4:	11 83       	std	Z+1, r17	; 0x01
    4fe6:	00 83       	st	Z, r16
    4fe8:	01 15       	cp	r16, r1
    4fea:	11 05       	cpc	r17, r1
    4fec:	09 f4       	brne	.+2      	; 0x4ff0 <serial_create+0x4e>
    4fee:	68 c0       	rjmp	.+208    	; 0x50c0 <serial_create+0x11e>
    4ff0:	88 0f       	add	r24, r24
    4ff2:	99 1f       	adc	r25, r25
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	e5 5f       	subi	r30, 0xF5	; 245
    4ff8:	fd 4f       	sbci	r31, 0xFD	; 253
    4ffa:	80 81       	ld	r24, Z
    4ffc:	91 81       	ldd	r25, Z+1	; 0x01
    4ffe:	d8 01       	movw	r26, r16
    5000:	8d 93       	st	X+, r24
    5002:	9c 93       	st	X, r25
    5004:	8c 2d       	mov	r24, r12
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	88 0f       	add	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	88 0f       	add	r24, r24
    500e:	99 1f       	adc	r25, r25
    5010:	0e 94 af 30 	call	0x615e	; 0x615e <malloc>
    5014:	1c 01       	movw	r2, r24
    5016:	86 e0       	ldi	r24, 0x06	; 6
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	0e 94 af 30 	call	0x615e	; 0x615e <malloc>
    501e:	7c 01       	movw	r14, r24
    5020:	4c 2d       	mov	r20, r12
    5022:	b1 01       	movw	r22, r2
    5024:	ef d6       	rcall	.+3550   	; 0x5e04 <fifo_init>
    5026:	f8 01       	movw	r30, r16
    5028:	f5 82       	std	Z+5, r15	; 0x05
    502a:	e4 82       	std	Z+4, r14	; 0x04
    502c:	8a 2d       	mov	r24, r10
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	88 0f       	add	r24, r24
    5032:	99 1f       	adc	r25, r25
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	0e 94 af 30 	call	0x615e	; 0x615e <malloc>
    503c:	1c 01       	movw	r2, r24
    503e:	86 e0       	ldi	r24, 0x06	; 6
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	0e 94 af 30 	call	0x615e	; 0x615e <malloc>
    5046:	7c 01       	movw	r14, r24
    5048:	4a 2d       	mov	r20, r10
    504a:	b1 01       	movw	r22, r2
    504c:	db d6       	rcall	.+3510   	; 0x5e04 <fifo_init>
    504e:	d8 01       	movw	r26, r16
    5050:	13 96       	adiw	r26, 0x03	; 3
    5052:	fc 92       	st	X, r15
    5054:	ee 92       	st	-X, r14
    5056:	12 97       	sbiw	r26, 0x02	; 2
    5058:	17 96       	adiw	r26, 0x07	; 7
    505a:	9c 92       	st	X, r9
    505c:	8e 92       	st	-X, r8
    505e:	16 97       	sbiw	r26, 0x06	; 6
    5060:	ff b6       	in	r15, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	ed 91       	ld	r30, X+
    5066:	fc 91       	ld	r31, X
    5068:	11 97       	sbiw	r26, 0x01	; 1
    506a:	36 97       	sbiw	r30, 0x06	; 6
    506c:	80 81       	ld	r24, Z
    506e:	82 60       	ori	r24, 0x02	; 2
    5070:	80 83       	st	Z, r24
    5072:	8d 90       	ld	r8, X+
    5074:	9c 90       	ld	r9, X
    5076:	c3 01       	movw	r24, r6
    5078:	b2 01       	movw	r22, r4
    507a:	2c d9       	rcall	.-3496   	; 0x42d4 <__floatunsisf>
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e0       	ldi	r20, 0x00	; 0
    5082:	51 e4       	ldi	r21, 0x41	; 65
    5084:	dc d7       	rcall	.+4024   	; 0x603e <__mulsf3>
    5086:	9b 01       	movw	r18, r22
    5088:	ac 01       	movw	r20, r24
    508a:	60 e0       	ldi	r22, 0x00	; 0
    508c:	74 e2       	ldi	r23, 0x24	; 36
    508e:	84 e7       	ldi	r24, 0x74	; 116
    5090:	9b e4       	ldi	r25, 0x4B	; 75
    5092:	3b d7       	rcall	.+3702   	; 0x5f0a <__divsf3>
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	40 e8       	ldi	r20, 0x80	; 128
    509a:	5f e3       	ldi	r21, 0x3F	; 63
    509c:	cf d6       	rcall	.+3486   	; 0x5e3c <__subsf3>
    509e:	ee d8       	rcall	.-3620   	; 0x427c <__fixunssfsi>
    50a0:	f4 01       	movw	r30, r8
    50a2:	32 97       	sbiw	r30, 0x02	; 2
    50a4:	60 83       	st	Z, r22
    50a6:	d8 01       	movw	r26, r16
    50a8:	ed 91       	ld	r30, X+
    50aa:	fc 91       	ld	r31, X
    50ac:	11 97       	sbiw	r26, 0x01	; 1
    50ae:	35 97       	sbiw	r30, 0x05	; 5
    50b0:	88 e9       	ldi	r24, 0x98	; 152
    50b2:	80 83       	st	Z, r24
    50b4:	ed 91       	ld	r30, X+
    50b6:	fc 91       	ld	r31, X
    50b8:	34 97       	sbiw	r30, 0x04	; 4
    50ba:	86 e0       	ldi	r24, 0x06	; 6
    50bc:	80 83       	st	Z, r24
    50be:	ff be       	out	0x3f, r15	; 63
    50c0:	c8 01       	movw	r24, r16
    50c2:	df 91       	pop	r29
    50c4:	cf 91       	pop	r28
    50c6:	1f 91       	pop	r17
    50c8:	0f 91       	pop	r16
    50ca:	ff 90       	pop	r15
    50cc:	ef 90       	pop	r14
    50ce:	cf 90       	pop	r12
    50d0:	af 90       	pop	r10
    50d2:	9f 90       	pop	r9
    50d4:	8f 90       	pop	r8
    50d6:	7f 90       	pop	r7
    50d8:	6f 90       	pop	r6
    50da:	5f 90       	pop	r5
    50dc:	4f 90       	pop	r4
    50de:	3f 90       	pop	r3
    50e0:	2f 90       	pop	r2
    50e2:	08 95       	ret

000050e4 <serial_sendByte>:
    50e4:	cf 93       	push	r28
    50e6:	df 93       	push	r29
    50e8:	dc 01       	movw	r26, r24
    50ea:	89 2b       	or	r24, r25
    50ec:	01 f1       	breq	.+64     	; 0x512e <serial_sendByte+0x4a>
    50ee:	12 96       	adiw	r26, 0x02	; 2
    50f0:	ed 91       	ld	r30, X+
    50f2:	fc 91       	ld	r31, X
    50f4:	13 97       	sbiw	r26, 0x03	; 3
    50f6:	93 81       	ldd	r25, Z+3	; 0x03
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	25 81       	ldd	r18, Z+5	; 0x05
    50fc:	98 1b       	sub	r25, r24
    50fe:	92 23       	and	r25, r18
    5100:	84 81       	ldd	r24, Z+4	; 0x04
    5102:	98 17       	cp	r25, r24
    5104:	b1 f0       	breq	.+44     	; 0x5132 <serial_sendByte+0x4e>
    5106:	83 81       	ldd	r24, Z+3	; 0x03
    5108:	26 95       	lsr	r18
    510a:	28 23       	and	r18, r24
    510c:	c0 81       	ld	r28, Z
    510e:	d1 81       	ldd	r29, Z+1	; 0x01
    5110:	c2 0f       	add	r28, r18
    5112:	d1 1d       	adc	r29, r1
    5114:	68 83       	st	Y, r22
    5116:	8f 5f       	subi	r24, 0xFF	; 255
    5118:	95 81       	ldd	r25, Z+5	; 0x05
    511a:	89 23       	and	r24, r25
    511c:	83 83       	std	Z+3, r24	; 0x03
    511e:	ed 91       	ld	r30, X+
    5120:	fc 91       	ld	r31, X
    5122:	35 97       	sbiw	r30, 0x05	; 5
    5124:	80 81       	ld	r24, Z
    5126:	80 62       	ori	r24, 0x20	; 32
    5128:	80 83       	st	Z, r24
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	03 c0       	rjmp	.+6      	; 0x5134 <serial_sendByte+0x50>
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	01 c0       	rjmp	.+2      	; 0x5134 <serial_sendByte+0x50>
    5132:	82 e0       	ldi	r24, 0x02	; 2
    5134:	df 91       	pop	r29
    5136:	cf 91       	pop	r28
    5138:	08 95       	ret

0000513a <serial_sendBytes>:
    513a:	ef 92       	push	r14
    513c:	ff 92       	push	r15
    513e:	0f 93       	push	r16
    5140:	1f 93       	push	r17
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	7c 01       	movw	r14, r24
    5148:	00 97       	sbiw	r24, 0x00	; 0
    514a:	09 f4       	brne	.+2      	; 0x514e <serial_sendBytes+0x14>
    514c:	41 c0       	rjmp	.+130    	; 0x51d0 <serial_sendBytes+0x96>
    514e:	dc 01       	movw	r26, r24
    5150:	12 96       	adiw	r26, 0x02	; 2
    5152:	ed 91       	ld	r30, X+
    5154:	fc 91       	ld	r31, X
    5156:	13 97       	sbiw	r26, 0x03	; 3
    5158:	93 81       	ldd	r25, Z+3	; 0x03
    515a:	82 81       	ldd	r24, Z+2	; 0x02
    515c:	98 1b       	sub	r25, r24
    515e:	85 81       	ldd	r24, Z+5	; 0x05
    5160:	98 23       	and	r25, r24
    5162:	84 81       	ldd	r24, Z+4	; 0x04
    5164:	89 1b       	sub	r24, r25
    5166:	86 17       	cp	r24, r22
    5168:	a8 f1       	brcs	.+106    	; 0x51d4 <serial_sendBytes+0x9a>
    516a:	66 23       	and	r22, r22
    516c:	41 f1       	breq	.+80     	; 0x51be <serial_sendBytes+0x84>
    516e:	84 2f       	mov	r24, r20
    5170:	95 2f       	mov	r25, r21
    5172:	dc 01       	movw	r26, r24
    5174:	61 50       	subi	r22, 0x01	; 1
    5176:	46 2f       	mov	r20, r22
    5178:	50 e0       	ldi	r21, 0x00	; 0
    517a:	4f 5f       	subi	r20, 0xFF	; 255
    517c:	5f 4f       	sbci	r21, 0xFF	; 255
    517e:	48 0f       	add	r20, r24
    5180:	59 1f       	adc	r21, r25
    5182:	e7 01       	movw	r28, r14
    5184:	ea 81       	ldd	r30, Y+2	; 0x02
    5186:	fb 81       	ldd	r31, Y+3	; 0x03
    5188:	93 81       	ldd	r25, Z+3	; 0x03
    518a:	82 81       	ldd	r24, Z+2	; 0x02
    518c:	25 81       	ldd	r18, Z+5	; 0x05
    518e:	98 1b       	sub	r25, r24
    5190:	92 23       	and	r25, r18
    5192:	84 81       	ldd	r24, Z+4	; 0x04
    5194:	98 17       	cp	r25, r24
    5196:	79 f0       	breq	.+30     	; 0x51b6 <serial_sendBytes+0x7c>
    5198:	8c 91       	ld	r24, X
    519a:	93 81       	ldd	r25, Z+3	; 0x03
    519c:	26 95       	lsr	r18
    519e:	29 23       	and	r18, r25
    51a0:	60 81       	ld	r22, Z
    51a2:	71 81       	ldd	r23, Z+1	; 0x01
    51a4:	8b 01       	movw	r16, r22
    51a6:	02 0f       	add	r16, r18
    51a8:	11 1d       	adc	r17, r1
    51aa:	e8 01       	movw	r28, r16
    51ac:	88 83       	st	Y, r24
    51ae:	9f 5f       	subi	r25, 0xFF	; 255
    51b0:	85 81       	ldd	r24, Z+5	; 0x05
    51b2:	98 23       	and	r25, r24
    51b4:	93 83       	std	Z+3, r25	; 0x03
    51b6:	11 96       	adiw	r26, 0x01	; 1
    51b8:	a4 17       	cp	r26, r20
    51ba:	b5 07       	cpc	r27, r21
    51bc:	11 f7       	brne	.-60     	; 0x5182 <serial_sendBytes+0x48>
    51be:	d7 01       	movw	r26, r14
    51c0:	ed 91       	ld	r30, X+
    51c2:	fc 91       	ld	r31, X
    51c4:	35 97       	sbiw	r30, 0x05	; 5
    51c6:	80 81       	ld	r24, Z
    51c8:	80 62       	ori	r24, 0x20	; 32
    51ca:	80 83       	st	Z, r24
    51cc:	80 e0       	ldi	r24, 0x00	; 0
    51ce:	03 c0       	rjmp	.+6      	; 0x51d6 <serial_sendBytes+0x9c>
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	01 c0       	rjmp	.+2      	; 0x51d6 <serial_sendBytes+0x9c>
    51d4:	82 e0       	ldi	r24, 0x02	; 2
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	08 95       	ret

000051e4 <serial_getByte>:
    51e4:	00 97       	sbiw	r24, 0x00	; 0
    51e6:	d1 f0       	breq	.+52     	; 0x521c <serial_getByte+0x38>
    51e8:	dc 01       	movw	r26, r24
    51ea:	14 96       	adiw	r26, 0x04	; 4
    51ec:	ed 91       	ld	r30, X+
    51ee:	fc 91       	ld	r31, X
    51f0:	15 97       	sbiw	r26, 0x05	; 5
    51f2:	93 81       	ldd	r25, Z+3	; 0x03
    51f4:	82 81       	ldd	r24, Z+2	; 0x02
    51f6:	98 17       	cp	r25, r24
    51f8:	99 f0       	breq	.+38     	; 0x5220 <serial_getByte+0x3c>
    51fa:	92 81       	ldd	r25, Z+2	; 0x02
    51fc:	85 81       	ldd	r24, Z+5	; 0x05
    51fe:	86 95       	lsr	r24
    5200:	89 23       	and	r24, r25
    5202:	a0 81       	ld	r26, Z
    5204:	b1 81       	ldd	r27, Z+1	; 0x01
    5206:	a8 0f       	add	r26, r24
    5208:	b1 1d       	adc	r27, r1
    520a:	8c 91       	ld	r24, X
    520c:	db 01       	movw	r26, r22
    520e:	8c 93       	st	X, r24
    5210:	9f 5f       	subi	r25, 0xFF	; 255
    5212:	85 81       	ldd	r24, Z+5	; 0x05
    5214:	98 23       	and	r25, r24
    5216:	92 83       	std	Z+2, r25	; 0x02
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	08 95       	ret
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	08 95       	ret
    5220:	83 e0       	ldi	r24, 0x03	; 3
    5222:	08 95       	ret

00005224 <__vector_25>:
    5224:	1f 92       	push	r1
    5226:	0f 92       	push	r0
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	0f 92       	push	r0
    522c:	11 24       	eor	r1, r1
    522e:	0b b6       	in	r0, 0x3b	; 59
    5230:	0f 92       	push	r0
    5232:	2f 93       	push	r18
    5234:	3f 93       	push	r19
    5236:	4f 93       	push	r20
    5238:	5f 93       	push	r21
    523a:	6f 93       	push	r22
    523c:	7f 93       	push	r23
    523e:	8f 93       	push	r24
    5240:	9f 93       	push	r25
    5242:	af 93       	push	r26
    5244:	bf 93       	push	r27
    5246:	cf 93       	push	r28
    5248:	df 93       	push	r29
    524a:	ef 93       	push	r30
    524c:	ff 93       	push	r31
    524e:	a0 91 1d 18 	lds	r26, 0x181D	; 0x80181d <_ser_handle>
    5252:	b0 91 1e 18 	lds	r27, 0x181E	; 0x80181e <_ser_handle+0x1>
    5256:	10 97       	sbiw	r26, 0x00	; 0
    5258:	11 f1       	breq	.+68     	; 0x529e <__vector_25+0x7a>
    525a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    525e:	14 96       	adiw	r26, 0x04	; 4
    5260:	ed 91       	ld	r30, X+
    5262:	fc 91       	ld	r31, X
    5264:	15 97       	sbiw	r26, 0x05	; 5
    5266:	93 81       	ldd	r25, Z+3	; 0x03
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	25 81       	ldd	r18, Z+5	; 0x05
    526c:	98 1b       	sub	r25, r24
    526e:	92 23       	and	r25, r18
    5270:	84 81       	ldd	r24, Z+4	; 0x04
    5272:	98 17       	cp	r25, r24
    5274:	61 f0       	breq	.+24     	; 0x528e <__vector_25+0x6a>
    5276:	83 81       	ldd	r24, Z+3	; 0x03
    5278:	26 95       	lsr	r18
    527a:	28 23       	and	r18, r24
    527c:	c0 81       	ld	r28, Z
    527e:	d1 81       	ldd	r29, Z+1	; 0x01
    5280:	c2 0f       	add	r28, r18
    5282:	d1 1d       	adc	r29, r1
    5284:	68 83       	st	Y, r22
    5286:	8f 5f       	subi	r24, 0xFF	; 255
    5288:	95 81       	ldd	r25, Z+5	; 0x05
    528a:	89 23       	and	r24, r25
    528c:	83 83       	std	Z+3, r24	; 0x03
    528e:	16 96       	adiw	r26, 0x06	; 6
    5290:	ed 91       	ld	r30, X+
    5292:	fc 91       	ld	r31, X
    5294:	17 97       	sbiw	r26, 0x07	; 7
    5296:	30 97       	sbiw	r30, 0x00	; 0
    5298:	11 f0       	breq	.+4      	; 0x529e <__vector_25+0x7a>
    529a:	cd 01       	movw	r24, r26
    529c:	19 95       	eicall
    529e:	ff 91       	pop	r31
    52a0:	ef 91       	pop	r30
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	bf 91       	pop	r27
    52a8:	af 91       	pop	r26
    52aa:	9f 91       	pop	r25
    52ac:	8f 91       	pop	r24
    52ae:	7f 91       	pop	r23
    52b0:	6f 91       	pop	r22
    52b2:	5f 91       	pop	r21
    52b4:	4f 91       	pop	r20
    52b6:	3f 91       	pop	r19
    52b8:	2f 91       	pop	r18
    52ba:	0f 90       	pop	r0
    52bc:	0b be       	out	0x3b, r0	; 59
    52be:	0f 90       	pop	r0
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	0f 90       	pop	r0
    52c4:	1f 90       	pop	r1
    52c6:	18 95       	reti

000052c8 <__vector_26>:
    52c8:	1f 92       	push	r1
    52ca:	0f 92       	push	r0
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	0f 92       	push	r0
    52d0:	11 24       	eor	r1, r1
    52d2:	0b b6       	in	r0, 0x3b	; 59
    52d4:	0f 92       	push	r0
    52d6:	2f 93       	push	r18
    52d8:	8f 93       	push	r24
    52da:	9f 93       	push	r25
    52dc:	af 93       	push	r26
    52de:	bf 93       	push	r27
    52e0:	ef 93       	push	r30
    52e2:	ff 93       	push	r31
    52e4:	e0 91 1d 18 	lds	r30, 0x181D	; 0x80181d <_ser_handle>
    52e8:	f0 91 1e 18 	lds	r31, 0x181E	; 0x80181e <_ser_handle+0x1>
    52ec:	30 97       	sbiw	r30, 0x00	; 0
    52ee:	b9 f0       	breq	.+46     	; 0x531e <__vector_26+0x56>
    52f0:	02 80       	ldd	r0, Z+2	; 0x02
    52f2:	f3 81       	ldd	r31, Z+3	; 0x03
    52f4:	e0 2d       	mov	r30, r0
    52f6:	93 81       	ldd	r25, Z+3	; 0x03
    52f8:	82 81       	ldd	r24, Z+2	; 0x02
    52fa:	98 17       	cp	r25, r24
    52fc:	b1 f0       	breq	.+44     	; 0x532a <__vector_26+0x62>
    52fe:	92 81       	ldd	r25, Z+2	; 0x02
    5300:	85 81       	ldd	r24, Z+5	; 0x05
    5302:	28 2f       	mov	r18, r24
    5304:	26 95       	lsr	r18
    5306:	29 23       	and	r18, r25
    5308:	a0 81       	ld	r26, Z
    530a:	b1 81       	ldd	r27, Z+1	; 0x01
    530c:	a2 0f       	add	r26, r18
    530e:	b1 1d       	adc	r27, r1
    5310:	2c 91       	ld	r18, X
    5312:	9f 5f       	subi	r25, 0xFF	; 255
    5314:	89 23       	and	r24, r25
    5316:	82 83       	std	Z+2, r24	; 0x02
    5318:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    531c:	0b c0       	rjmp	.+22     	; 0x5334 <__vector_26+0x6c>
    531e:	e1 ec       	ldi	r30, 0xC1	; 193
    5320:	f0 e0       	ldi	r31, 0x00	; 0
    5322:	80 81       	ld	r24, Z
    5324:	8f 7d       	andi	r24, 0xDF	; 223
    5326:	80 83       	st	Z, r24
    5328:	05 c0       	rjmp	.+10     	; 0x5334 <__vector_26+0x6c>
    532a:	e1 ec       	ldi	r30, 0xC1	; 193
    532c:	f0 e0       	ldi	r31, 0x00	; 0
    532e:	80 81       	ld	r24, Z
    5330:	8f 7d       	andi	r24, 0xDF	; 223
    5332:	80 83       	st	Z, r24
    5334:	ff 91       	pop	r31
    5336:	ef 91       	pop	r30
    5338:	bf 91       	pop	r27
    533a:	af 91       	pop	r26
    533c:	9f 91       	pop	r25
    533e:	8f 91       	pop	r24
    5340:	2f 91       	pop	r18
    5342:	0f 90       	pop	r0
    5344:	0b be       	out	0x3b, r0	; 59
    5346:	0f 90       	pop	r0
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	0f 90       	pop	r0
    534c:	1f 90       	pop	r1
    534e:	18 95       	reti

00005350 <__vector_36>:
    5350:	1f 92       	push	r1
    5352:	0f 92       	push	r0
    5354:	0f b6       	in	r0, 0x3f	; 63
    5356:	0f 92       	push	r0
    5358:	11 24       	eor	r1, r1
    535a:	0b b6       	in	r0, 0x3b	; 59
    535c:	0f 92       	push	r0
    535e:	2f 93       	push	r18
    5360:	3f 93       	push	r19
    5362:	4f 93       	push	r20
    5364:	5f 93       	push	r21
    5366:	6f 93       	push	r22
    5368:	7f 93       	push	r23
    536a:	8f 93       	push	r24
    536c:	9f 93       	push	r25
    536e:	af 93       	push	r26
    5370:	bf 93       	push	r27
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	ef 93       	push	r30
    5378:	ff 93       	push	r31
    537a:	a0 91 1f 18 	lds	r26, 0x181F	; 0x80181f <_ser_handle+0x2>
    537e:	b0 91 20 18 	lds	r27, 0x1820	; 0x801820 <_ser_handle+0x3>
    5382:	10 97       	sbiw	r26, 0x00	; 0
    5384:	11 f1       	breq	.+68     	; 0x53ca <__vector_36+0x7a>
    5386:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    538a:	14 96       	adiw	r26, 0x04	; 4
    538c:	ed 91       	ld	r30, X+
    538e:	fc 91       	ld	r31, X
    5390:	15 97       	sbiw	r26, 0x05	; 5
    5392:	93 81       	ldd	r25, Z+3	; 0x03
    5394:	82 81       	ldd	r24, Z+2	; 0x02
    5396:	25 81       	ldd	r18, Z+5	; 0x05
    5398:	98 1b       	sub	r25, r24
    539a:	92 23       	and	r25, r18
    539c:	84 81       	ldd	r24, Z+4	; 0x04
    539e:	98 17       	cp	r25, r24
    53a0:	61 f0       	breq	.+24     	; 0x53ba <__vector_36+0x6a>
    53a2:	83 81       	ldd	r24, Z+3	; 0x03
    53a4:	26 95       	lsr	r18
    53a6:	28 23       	and	r18, r24
    53a8:	c0 81       	ld	r28, Z
    53aa:	d1 81       	ldd	r29, Z+1	; 0x01
    53ac:	c2 0f       	add	r28, r18
    53ae:	d1 1d       	adc	r29, r1
    53b0:	68 83       	st	Y, r22
    53b2:	8f 5f       	subi	r24, 0xFF	; 255
    53b4:	95 81       	ldd	r25, Z+5	; 0x05
    53b6:	89 23       	and	r24, r25
    53b8:	83 83       	std	Z+3, r24	; 0x03
    53ba:	16 96       	adiw	r26, 0x06	; 6
    53bc:	ed 91       	ld	r30, X+
    53be:	fc 91       	ld	r31, X
    53c0:	17 97       	sbiw	r26, 0x07	; 7
    53c2:	30 97       	sbiw	r30, 0x00	; 0
    53c4:	11 f0       	breq	.+4      	; 0x53ca <__vector_36+0x7a>
    53c6:	cd 01       	movw	r24, r26
    53c8:	19 95       	eicall
    53ca:	ff 91       	pop	r31
    53cc:	ef 91       	pop	r30
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	bf 91       	pop	r27
    53d4:	af 91       	pop	r26
    53d6:	9f 91       	pop	r25
    53d8:	8f 91       	pop	r24
    53da:	7f 91       	pop	r23
    53dc:	6f 91       	pop	r22
    53de:	5f 91       	pop	r21
    53e0:	4f 91       	pop	r20
    53e2:	3f 91       	pop	r19
    53e4:	2f 91       	pop	r18
    53e6:	0f 90       	pop	r0
    53e8:	0b be       	out	0x3b, r0	; 59
    53ea:	0f 90       	pop	r0
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	0f 90       	pop	r0
    53f0:	1f 90       	pop	r1
    53f2:	18 95       	reti

000053f4 <__vector_37>:
    53f4:	1f 92       	push	r1
    53f6:	0f 92       	push	r0
    53f8:	0f b6       	in	r0, 0x3f	; 63
    53fa:	0f 92       	push	r0
    53fc:	11 24       	eor	r1, r1
    53fe:	0b b6       	in	r0, 0x3b	; 59
    5400:	0f 92       	push	r0
    5402:	2f 93       	push	r18
    5404:	8f 93       	push	r24
    5406:	9f 93       	push	r25
    5408:	af 93       	push	r26
    540a:	bf 93       	push	r27
    540c:	ef 93       	push	r30
    540e:	ff 93       	push	r31
    5410:	e0 91 1f 18 	lds	r30, 0x181F	; 0x80181f <_ser_handle+0x2>
    5414:	f0 91 20 18 	lds	r31, 0x1820	; 0x801820 <_ser_handle+0x3>
    5418:	30 97       	sbiw	r30, 0x00	; 0
    541a:	b9 f0       	breq	.+46     	; 0x544a <__vector_37+0x56>
    541c:	02 80       	ldd	r0, Z+2	; 0x02
    541e:	f3 81       	ldd	r31, Z+3	; 0x03
    5420:	e0 2d       	mov	r30, r0
    5422:	93 81       	ldd	r25, Z+3	; 0x03
    5424:	82 81       	ldd	r24, Z+2	; 0x02
    5426:	98 17       	cp	r25, r24
    5428:	b1 f0       	breq	.+44     	; 0x5456 <__vector_37+0x62>
    542a:	92 81       	ldd	r25, Z+2	; 0x02
    542c:	85 81       	ldd	r24, Z+5	; 0x05
    542e:	28 2f       	mov	r18, r24
    5430:	26 95       	lsr	r18
    5432:	29 23       	and	r18, r25
    5434:	a0 81       	ld	r26, Z
    5436:	b1 81       	ldd	r27, Z+1	; 0x01
    5438:	a2 0f       	add	r26, r18
    543a:	b1 1d       	adc	r27, r1
    543c:	2c 91       	ld	r18, X
    543e:	9f 5f       	subi	r25, 0xFF	; 255
    5440:	89 23       	and	r24, r25
    5442:	82 83       	std	Z+2, r24	; 0x02
    5444:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5448:	0b c0       	rjmp	.+22     	; 0x5460 <__vector_37+0x6c>
    544a:	e9 ec       	ldi	r30, 0xC9	; 201
    544c:	f0 e0       	ldi	r31, 0x00	; 0
    544e:	80 81       	ld	r24, Z
    5450:	8f 7d       	andi	r24, 0xDF	; 223
    5452:	80 83       	st	Z, r24
    5454:	05 c0       	rjmp	.+10     	; 0x5460 <__vector_37+0x6c>
    5456:	e9 ec       	ldi	r30, 0xC9	; 201
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	80 81       	ld	r24, Z
    545c:	8f 7d       	andi	r24, 0xDF	; 223
    545e:	80 83       	st	Z, r24
    5460:	ff 91       	pop	r31
    5462:	ef 91       	pop	r30
    5464:	bf 91       	pop	r27
    5466:	af 91       	pop	r26
    5468:	9f 91       	pop	r25
    546a:	8f 91       	pop	r24
    546c:	2f 91       	pop	r18
    546e:	0f 90       	pop	r0
    5470:	0b be       	out	0x3b, r0	; 59
    5472:	0f 90       	pop	r0
    5474:	0f be       	out	0x3f, r0	; 63
    5476:	0f 90       	pop	r0
    5478:	1f 90       	pop	r1
    547a:	18 95       	reti

0000547c <__vector_51>:
    547c:	1f 92       	push	r1
    547e:	0f 92       	push	r0
    5480:	0f b6       	in	r0, 0x3f	; 63
    5482:	0f 92       	push	r0
    5484:	11 24       	eor	r1, r1
    5486:	0b b6       	in	r0, 0x3b	; 59
    5488:	0f 92       	push	r0
    548a:	2f 93       	push	r18
    548c:	3f 93       	push	r19
    548e:	4f 93       	push	r20
    5490:	5f 93       	push	r21
    5492:	6f 93       	push	r22
    5494:	7f 93       	push	r23
    5496:	8f 93       	push	r24
    5498:	9f 93       	push	r25
    549a:	af 93       	push	r26
    549c:	bf 93       	push	r27
    549e:	cf 93       	push	r28
    54a0:	df 93       	push	r29
    54a2:	ef 93       	push	r30
    54a4:	ff 93       	push	r31
    54a6:	a0 91 21 18 	lds	r26, 0x1821	; 0x801821 <_ser_handle+0x4>
    54aa:	b0 91 22 18 	lds	r27, 0x1822	; 0x801822 <_ser_handle+0x5>
    54ae:	10 97       	sbiw	r26, 0x00	; 0
    54b0:	11 f1       	breq	.+68     	; 0x54f6 <__vector_51+0x7a>
    54b2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    54b6:	14 96       	adiw	r26, 0x04	; 4
    54b8:	ed 91       	ld	r30, X+
    54ba:	fc 91       	ld	r31, X
    54bc:	15 97       	sbiw	r26, 0x05	; 5
    54be:	93 81       	ldd	r25, Z+3	; 0x03
    54c0:	82 81       	ldd	r24, Z+2	; 0x02
    54c2:	25 81       	ldd	r18, Z+5	; 0x05
    54c4:	98 1b       	sub	r25, r24
    54c6:	92 23       	and	r25, r18
    54c8:	84 81       	ldd	r24, Z+4	; 0x04
    54ca:	98 17       	cp	r25, r24
    54cc:	61 f0       	breq	.+24     	; 0x54e6 <__vector_51+0x6a>
    54ce:	83 81       	ldd	r24, Z+3	; 0x03
    54d0:	26 95       	lsr	r18
    54d2:	28 23       	and	r18, r24
    54d4:	c0 81       	ld	r28, Z
    54d6:	d1 81       	ldd	r29, Z+1	; 0x01
    54d8:	c2 0f       	add	r28, r18
    54da:	d1 1d       	adc	r29, r1
    54dc:	68 83       	st	Y, r22
    54de:	8f 5f       	subi	r24, 0xFF	; 255
    54e0:	95 81       	ldd	r25, Z+5	; 0x05
    54e2:	89 23       	and	r24, r25
    54e4:	83 83       	std	Z+3, r24	; 0x03
    54e6:	16 96       	adiw	r26, 0x06	; 6
    54e8:	ed 91       	ld	r30, X+
    54ea:	fc 91       	ld	r31, X
    54ec:	17 97       	sbiw	r26, 0x07	; 7
    54ee:	30 97       	sbiw	r30, 0x00	; 0
    54f0:	11 f0       	breq	.+4      	; 0x54f6 <__vector_51+0x7a>
    54f2:	cd 01       	movw	r24, r26
    54f4:	19 95       	eicall
    54f6:	ff 91       	pop	r31
    54f8:	ef 91       	pop	r30
    54fa:	df 91       	pop	r29
    54fc:	cf 91       	pop	r28
    54fe:	bf 91       	pop	r27
    5500:	af 91       	pop	r26
    5502:	9f 91       	pop	r25
    5504:	8f 91       	pop	r24
    5506:	7f 91       	pop	r23
    5508:	6f 91       	pop	r22
    550a:	5f 91       	pop	r21
    550c:	4f 91       	pop	r20
    550e:	3f 91       	pop	r19
    5510:	2f 91       	pop	r18
    5512:	0f 90       	pop	r0
    5514:	0b be       	out	0x3b, r0	; 59
    5516:	0f 90       	pop	r0
    5518:	0f be       	out	0x3f, r0	; 63
    551a:	0f 90       	pop	r0
    551c:	1f 90       	pop	r1
    551e:	18 95       	reti

00005520 <__vector_52>:
    5520:	1f 92       	push	r1
    5522:	0f 92       	push	r0
    5524:	0f b6       	in	r0, 0x3f	; 63
    5526:	0f 92       	push	r0
    5528:	11 24       	eor	r1, r1
    552a:	0b b6       	in	r0, 0x3b	; 59
    552c:	0f 92       	push	r0
    552e:	2f 93       	push	r18
    5530:	8f 93       	push	r24
    5532:	9f 93       	push	r25
    5534:	af 93       	push	r26
    5536:	bf 93       	push	r27
    5538:	ef 93       	push	r30
    553a:	ff 93       	push	r31
    553c:	e0 91 21 18 	lds	r30, 0x1821	; 0x801821 <_ser_handle+0x4>
    5540:	f0 91 22 18 	lds	r31, 0x1822	; 0x801822 <_ser_handle+0x5>
    5544:	30 97       	sbiw	r30, 0x00	; 0
    5546:	b9 f0       	breq	.+46     	; 0x5576 <__vector_52+0x56>
    5548:	02 80       	ldd	r0, Z+2	; 0x02
    554a:	f3 81       	ldd	r31, Z+3	; 0x03
    554c:	e0 2d       	mov	r30, r0
    554e:	93 81       	ldd	r25, Z+3	; 0x03
    5550:	82 81       	ldd	r24, Z+2	; 0x02
    5552:	98 17       	cp	r25, r24
    5554:	b1 f0       	breq	.+44     	; 0x5582 <__vector_52+0x62>
    5556:	92 81       	ldd	r25, Z+2	; 0x02
    5558:	85 81       	ldd	r24, Z+5	; 0x05
    555a:	28 2f       	mov	r18, r24
    555c:	26 95       	lsr	r18
    555e:	29 23       	and	r18, r25
    5560:	a0 81       	ld	r26, Z
    5562:	b1 81       	ldd	r27, Z+1	; 0x01
    5564:	a2 0f       	add	r26, r18
    5566:	b1 1d       	adc	r27, r1
    5568:	2c 91       	ld	r18, X
    556a:	9f 5f       	subi	r25, 0xFF	; 255
    556c:	89 23       	and	r24, r25
    556e:	82 83       	std	Z+2, r24	; 0x02
    5570:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5574:	0b c0       	rjmp	.+22     	; 0x558c <__vector_52+0x6c>
    5576:	e1 ed       	ldi	r30, 0xD1	; 209
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	80 81       	ld	r24, Z
    557c:	8f 7d       	andi	r24, 0xDF	; 223
    557e:	80 83       	st	Z, r24
    5580:	05 c0       	rjmp	.+10     	; 0x558c <__vector_52+0x6c>
    5582:	e1 ed       	ldi	r30, 0xD1	; 209
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	80 81       	ld	r24, Z
    5588:	8f 7d       	andi	r24, 0xDF	; 223
    558a:	80 83       	st	Z, r24
    558c:	ff 91       	pop	r31
    558e:	ef 91       	pop	r30
    5590:	bf 91       	pop	r27
    5592:	af 91       	pop	r26
    5594:	9f 91       	pop	r25
    5596:	8f 91       	pop	r24
    5598:	2f 91       	pop	r18
    559a:	0f 90       	pop	r0
    559c:	0b be       	out	0x3b, r0	; 59
    559e:	0f 90       	pop	r0
    55a0:	0f be       	out	0x3f, r0	; 63
    55a2:	0f 90       	pop	r0
    55a4:	1f 90       	pop	r1
    55a6:	18 95       	reti

000055a8 <__vector_54>:
    55a8:	1f 92       	push	r1
    55aa:	0f 92       	push	r0
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	0f 92       	push	r0
    55b0:	11 24       	eor	r1, r1
    55b2:	0b b6       	in	r0, 0x3b	; 59
    55b4:	0f 92       	push	r0
    55b6:	2f 93       	push	r18
    55b8:	3f 93       	push	r19
    55ba:	4f 93       	push	r20
    55bc:	5f 93       	push	r21
    55be:	6f 93       	push	r22
    55c0:	7f 93       	push	r23
    55c2:	8f 93       	push	r24
    55c4:	9f 93       	push	r25
    55c6:	af 93       	push	r26
    55c8:	bf 93       	push	r27
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	ef 93       	push	r30
    55d0:	ff 93       	push	r31
    55d2:	a0 91 23 18 	lds	r26, 0x1823	; 0x801823 <_ser_handle+0x6>
    55d6:	b0 91 24 18 	lds	r27, 0x1824	; 0x801824 <_ser_handle+0x7>
    55da:	10 97       	sbiw	r26, 0x00	; 0
    55dc:	11 f1       	breq	.+68     	; 0x5622 <__vector_54+0x7a>
    55de:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    55e2:	14 96       	adiw	r26, 0x04	; 4
    55e4:	ed 91       	ld	r30, X+
    55e6:	fc 91       	ld	r31, X
    55e8:	15 97       	sbiw	r26, 0x05	; 5
    55ea:	93 81       	ldd	r25, Z+3	; 0x03
    55ec:	82 81       	ldd	r24, Z+2	; 0x02
    55ee:	25 81       	ldd	r18, Z+5	; 0x05
    55f0:	98 1b       	sub	r25, r24
    55f2:	92 23       	and	r25, r18
    55f4:	84 81       	ldd	r24, Z+4	; 0x04
    55f6:	98 17       	cp	r25, r24
    55f8:	61 f0       	breq	.+24     	; 0x5612 <__vector_54+0x6a>
    55fa:	83 81       	ldd	r24, Z+3	; 0x03
    55fc:	26 95       	lsr	r18
    55fe:	28 23       	and	r18, r24
    5600:	c0 81       	ld	r28, Z
    5602:	d1 81       	ldd	r29, Z+1	; 0x01
    5604:	c2 0f       	add	r28, r18
    5606:	d1 1d       	adc	r29, r1
    5608:	68 83       	st	Y, r22
    560a:	8f 5f       	subi	r24, 0xFF	; 255
    560c:	95 81       	ldd	r25, Z+5	; 0x05
    560e:	89 23       	and	r24, r25
    5610:	83 83       	std	Z+3, r24	; 0x03
    5612:	16 96       	adiw	r26, 0x06	; 6
    5614:	ed 91       	ld	r30, X+
    5616:	fc 91       	ld	r31, X
    5618:	17 97       	sbiw	r26, 0x07	; 7
    561a:	30 97       	sbiw	r30, 0x00	; 0
    561c:	11 f0       	breq	.+4      	; 0x5622 <__vector_54+0x7a>
    561e:	cd 01       	movw	r24, r26
    5620:	19 95       	eicall
    5622:	ff 91       	pop	r31
    5624:	ef 91       	pop	r30
    5626:	df 91       	pop	r29
    5628:	cf 91       	pop	r28
    562a:	bf 91       	pop	r27
    562c:	af 91       	pop	r26
    562e:	9f 91       	pop	r25
    5630:	8f 91       	pop	r24
    5632:	7f 91       	pop	r23
    5634:	6f 91       	pop	r22
    5636:	5f 91       	pop	r21
    5638:	4f 91       	pop	r20
    563a:	3f 91       	pop	r19
    563c:	2f 91       	pop	r18
    563e:	0f 90       	pop	r0
    5640:	0b be       	out	0x3b, r0	; 59
    5642:	0f 90       	pop	r0
    5644:	0f be       	out	0x3f, r0	; 63
    5646:	0f 90       	pop	r0
    5648:	1f 90       	pop	r1
    564a:	18 95       	reti

0000564c <__vector_55>:
    564c:	1f 92       	push	r1
    564e:	0f 92       	push	r0
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	0f 92       	push	r0
    5654:	11 24       	eor	r1, r1
    5656:	0b b6       	in	r0, 0x3b	; 59
    5658:	0f 92       	push	r0
    565a:	2f 93       	push	r18
    565c:	8f 93       	push	r24
    565e:	9f 93       	push	r25
    5660:	af 93       	push	r26
    5662:	bf 93       	push	r27
    5664:	ef 93       	push	r30
    5666:	ff 93       	push	r31
    5668:	e0 91 23 18 	lds	r30, 0x1823	; 0x801823 <_ser_handle+0x6>
    566c:	f0 91 24 18 	lds	r31, 0x1824	; 0x801824 <_ser_handle+0x7>
    5670:	30 97       	sbiw	r30, 0x00	; 0
    5672:	b9 f0       	breq	.+46     	; 0x56a2 <__vector_55+0x56>
    5674:	02 80       	ldd	r0, Z+2	; 0x02
    5676:	f3 81       	ldd	r31, Z+3	; 0x03
    5678:	e0 2d       	mov	r30, r0
    567a:	93 81       	ldd	r25, Z+3	; 0x03
    567c:	82 81       	ldd	r24, Z+2	; 0x02
    567e:	98 17       	cp	r25, r24
    5680:	b1 f0       	breq	.+44     	; 0x56ae <__vector_55+0x62>
    5682:	92 81       	ldd	r25, Z+2	; 0x02
    5684:	85 81       	ldd	r24, Z+5	; 0x05
    5686:	28 2f       	mov	r18, r24
    5688:	26 95       	lsr	r18
    568a:	29 23       	and	r18, r25
    568c:	a0 81       	ld	r26, Z
    568e:	b1 81       	ldd	r27, Z+1	; 0x01
    5690:	a2 0f       	add	r26, r18
    5692:	b1 1d       	adc	r27, r1
    5694:	2c 91       	ld	r18, X
    5696:	9f 5f       	subi	r25, 0xFF	; 255
    5698:	89 23       	and	r24, r25
    569a:	82 83       	std	Z+2, r24	; 0x02
    569c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    56a0:	0b c0       	rjmp	.+22     	; 0x56b8 <__vector_55+0x6c>
    56a2:	e1 e3       	ldi	r30, 0x31	; 49
    56a4:	f1 e0       	ldi	r31, 0x01	; 1
    56a6:	80 81       	ld	r24, Z
    56a8:	8f 7d       	andi	r24, 0xDF	; 223
    56aa:	80 83       	st	Z, r24
    56ac:	05 c0       	rjmp	.+10     	; 0x56b8 <__vector_55+0x6c>
    56ae:	e1 e3       	ldi	r30, 0x31	; 49
    56b0:	f1 e0       	ldi	r31, 0x01	; 1
    56b2:	80 81       	ld	r24, Z
    56b4:	8f 7d       	andi	r24, 0xDF	; 223
    56b6:	80 83       	st	Z, r24
    56b8:	ff 91       	pop	r31
    56ba:	ef 91       	pop	r30
    56bc:	bf 91       	pop	r27
    56be:	af 91       	pop	r26
    56c0:	9f 91       	pop	r25
    56c2:	8f 91       	pop	r24
    56c4:	2f 91       	pop	r18
    56c6:	0f 90       	pop	r0
    56c8:	0b be       	out	0x3b, r0	; 59
    56ca:	0f 90       	pop	r0
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	0f 90       	pop	r0
    56d0:	1f 90       	pop	r1
    56d2:	18 95       	reti

000056d4 <usart_getchar>:
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	1f 92       	push	r1
    56da:	cd b7       	in	r28, 0x3d	; 61
    56dc:	de b7       	in	r29, 0x3e	; 62
    56de:	be 01       	movw	r22, r28
    56e0:	6f 5f       	subi	r22, 0xFF	; 255
    56e2:	7f 4f       	sbci	r23, 0xFF	; 255
    56e4:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <_com_serial_instance>
    56e8:	90 91 26 18 	lds	r25, 0x1826	; 0x801826 <_com_serial_instance+0x1>
    56ec:	7b dd       	rcall	.-1290   	; 0x51e4 <serial_getByte>
    56ee:	81 11       	cpse	r24, r1
    56f0:	f6 cf       	rjmp	.-20     	; 0x56de <usart_getchar+0xa>
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	0f 90       	pop	r0
    56f8:	df 91       	pop	r29
    56fa:	cf 91       	pop	r28
    56fc:	08 95       	ret

000056fe <usart_putchar>:
    56fe:	68 2f       	mov	r22, r24
    5700:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <_com_serial_instance>
    5704:	90 91 26 18 	lds	r25, 0x1826	; 0x801826 <_com_serial_instance+0x1>
    5708:	ed dc       	rcall	.-1574   	; 0x50e4 <serial_sendByte>
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	08 95       	ret

00005710 <stdio_initialise>:
    5710:	8f 92       	push	r8
    5712:	9f 92       	push	r9
    5714:	af 92       	push	r10
    5716:	cf 92       	push	r12
    5718:	ef 92       	push	r14
    571a:	0f 93       	push	r16
    571c:	81 2c       	mov	r8, r1
    571e:	91 2c       	mov	r9, r1
    5720:	68 94       	set
    5722:	aa 24       	eor	r10, r10
    5724:	a7 f8       	bld	r10, 7
    5726:	68 94       	set
    5728:	cc 24       	eor	r12, r12
    572a:	c7 f8       	bld	r12, 7
    572c:	e1 2c       	mov	r14, r1
    572e:	00 e0       	ldi	r16, 0x00	; 0
    5730:	23 e0       	ldi	r18, 0x03	; 3
    5732:	40 e0       	ldi	r20, 0x00	; 0
    5734:	51 ee       	ldi	r21, 0xE1	; 225
    5736:	60 e0       	ldi	r22, 0x00	; 0
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	33 dc       	rcall	.-1946   	; 0x4fa2 <serial_create>
    573c:	90 93 26 18 	sts	0x1826, r25	; 0x801826 <_com_serial_instance+0x1>
    5740:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <_com_serial_instance>
    5744:	eb e9       	ldi	r30, 0x9B	; 155
    5746:	f8 e1       	ldi	r31, 0x18	; 24
    5748:	83 e1       	ldi	r24, 0x13	; 19
    574a:	92 e0       	ldi	r25, 0x02	; 2
    574c:	91 83       	std	Z+1, r25	; 0x01
    574e:	80 83       	st	Z, r24
    5750:	93 83       	std	Z+3, r25	; 0x03
    5752:	82 83       	std	Z+2, r24	; 0x02
    5754:	0f 91       	pop	r16
    5756:	ef 90       	pop	r14
    5758:	cf 90       	pop	r12
    575a:	af 90       	pop	r10
    575c:	9f 90       	pop	r9
    575e:	8f 90       	pop	r8
    5760:	08 95       	ret

00005762 <_turn_off>:
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	fc 01       	movw	r30, r24
    5766:	ee 0f       	add	r30, r30
    5768:	ff 1f       	adc	r31, r31
    576a:	e8 0f       	add	r30, r24
    576c:	f9 1f       	adc	r31, r25
    576e:	ee 0f       	add	r30, r30
    5770:	ff 1f       	adc	r31, r31
    5772:	e9 5d       	subi	r30, 0xD9	; 217
    5774:	f7 4e       	sbci	r31, 0xE7	; 231
    5776:	23 81       	ldd	r18, Z+3	; 0x03
    5778:	21 11       	cpse	r18, r1
    577a:	1f c0       	rjmp	.+62     	; 0x57ba <_turn_off+0x58>
    577c:	9c 01       	movw	r18, r24
    577e:	22 0f       	add	r18, r18
    5780:	33 1f       	adc	r19, r19
    5782:	f9 01       	movw	r30, r18
    5784:	e8 0f       	add	r30, r24
    5786:	f9 1f       	adc	r31, r25
    5788:	ee 0f       	add	r30, r30
    578a:	ff 1f       	adc	r31, r31
    578c:	e9 5d       	subi	r30, 0xD9	; 217
    578e:	f7 4e       	sbci	r31, 0xE7	; 231
    5790:	a0 81       	ld	r26, Z
    5792:	b1 81       	ldd	r27, Z+1	; 0x01
    5794:	4c 91       	ld	r20, X
    5796:	f9 01       	movw	r30, r18
    5798:	e8 0f       	add	r30, r24
    579a:	f9 1f       	adc	r31, r25
    579c:	ee 0f       	add	r30, r30
    579e:	ff 1f       	adc	r31, r31
    57a0:	e9 5d       	subi	r30, 0xD9	; 217
    57a2:	f7 4e       	sbci	r31, 0xE7	; 231
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	02 80       	ldd	r0, Z+2	; 0x02
    57aa:	02 c0       	rjmp	.+4      	; 0x57b0 <_turn_off+0x4e>
    57ac:	88 0f       	add	r24, r24
    57ae:	99 1f       	adc	r25, r25
    57b0:	0a 94       	dec	r0
    57b2:	e2 f7       	brpl	.-8      	; 0x57ac <_turn_off+0x4a>
    57b4:	84 2b       	or	r24, r20
    57b6:	8c 93       	st	X, r24
    57b8:	08 95       	ret
    57ba:	fc 01       	movw	r30, r24
    57bc:	ee 0f       	add	r30, r30
    57be:	ff 1f       	adc	r31, r31
    57c0:	df 01       	movw	r26, r30
    57c2:	a8 0f       	add	r26, r24
    57c4:	b9 1f       	adc	r27, r25
    57c6:	aa 0f       	add	r26, r26
    57c8:	bb 1f       	adc	r27, r27
    57ca:	a9 5d       	subi	r26, 0xD9	; 217
    57cc:	b7 4e       	sbci	r27, 0xE7	; 231
    57ce:	0d 90       	ld	r0, X+
    57d0:	bc 91       	ld	r27, X
    57d2:	a0 2d       	mov	r26, r0
    57d4:	2c 91       	ld	r18, X
    57d6:	e8 0f       	add	r30, r24
    57d8:	f9 1f       	adc	r31, r25
    57da:	ee 0f       	add	r30, r30
    57dc:	ff 1f       	adc	r31, r31
    57de:	e9 5d       	subi	r30, 0xD9	; 217
    57e0:	f7 4e       	sbci	r31, 0xE7	; 231
    57e2:	81 e0       	ldi	r24, 0x01	; 1
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	02 80       	ldd	r0, Z+2	; 0x02
    57e8:	02 c0       	rjmp	.+4      	; 0x57ee <_turn_off+0x8c>
    57ea:	88 0f       	add	r24, r24
    57ec:	99 1f       	adc	r25, r25
    57ee:	0a 94       	dec	r0
    57f0:	e2 f7       	brpl	.-8      	; 0x57ea <_turn_off+0x88>
    57f2:	80 95       	com	r24
    57f4:	82 23       	and	r24, r18
    57f6:	8c 93       	st	X, r24
    57f8:	08 95       	ret

000057fa <_turn_on>:
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	fc 01       	movw	r30, r24
    57fe:	ee 0f       	add	r30, r30
    5800:	ff 1f       	adc	r31, r31
    5802:	e8 0f       	add	r30, r24
    5804:	f9 1f       	adc	r31, r25
    5806:	ee 0f       	add	r30, r30
    5808:	ff 1f       	adc	r31, r31
    580a:	e9 5d       	subi	r30, 0xD9	; 217
    580c:	f7 4e       	sbci	r31, 0xE7	; 231
    580e:	23 81       	ldd	r18, Z+3	; 0x03
    5810:	21 11       	cpse	r18, r1
    5812:	20 c0       	rjmp	.+64     	; 0x5854 <_turn_on+0x5a>
    5814:	9c 01       	movw	r18, r24
    5816:	22 0f       	add	r18, r18
    5818:	33 1f       	adc	r19, r19
    581a:	f9 01       	movw	r30, r18
    581c:	e8 0f       	add	r30, r24
    581e:	f9 1f       	adc	r31, r25
    5820:	ee 0f       	add	r30, r30
    5822:	ff 1f       	adc	r31, r31
    5824:	e9 5d       	subi	r30, 0xD9	; 217
    5826:	f7 4e       	sbci	r31, 0xE7	; 231
    5828:	a0 81       	ld	r26, Z
    582a:	b1 81       	ldd	r27, Z+1	; 0x01
    582c:	4c 91       	ld	r20, X
    582e:	f9 01       	movw	r30, r18
    5830:	e8 0f       	add	r30, r24
    5832:	f9 1f       	adc	r31, r25
    5834:	ee 0f       	add	r30, r30
    5836:	ff 1f       	adc	r31, r31
    5838:	e9 5d       	subi	r30, 0xD9	; 217
    583a:	f7 4e       	sbci	r31, 0xE7	; 231
    583c:	81 e0       	ldi	r24, 0x01	; 1
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	02 80       	ldd	r0, Z+2	; 0x02
    5842:	02 c0       	rjmp	.+4      	; 0x5848 <_turn_on+0x4e>
    5844:	88 0f       	add	r24, r24
    5846:	99 1f       	adc	r25, r25
    5848:	0a 94       	dec	r0
    584a:	e2 f7       	brpl	.-8      	; 0x5844 <_turn_on+0x4a>
    584c:	80 95       	com	r24
    584e:	84 23       	and	r24, r20
    5850:	8c 93       	st	X, r24
    5852:	08 95       	ret
    5854:	fc 01       	movw	r30, r24
    5856:	ee 0f       	add	r30, r30
    5858:	ff 1f       	adc	r31, r31
    585a:	df 01       	movw	r26, r30
    585c:	a8 0f       	add	r26, r24
    585e:	b9 1f       	adc	r27, r25
    5860:	aa 0f       	add	r26, r26
    5862:	bb 1f       	adc	r27, r27
    5864:	a9 5d       	subi	r26, 0xD9	; 217
    5866:	b7 4e       	sbci	r27, 0xE7	; 231
    5868:	0d 90       	ld	r0, X+
    586a:	bc 91       	ld	r27, X
    586c:	a0 2d       	mov	r26, r0
    586e:	2c 91       	ld	r18, X
    5870:	e8 0f       	add	r30, r24
    5872:	f9 1f       	adc	r31, r25
    5874:	ee 0f       	add	r30, r30
    5876:	ff 1f       	adc	r31, r31
    5878:	e9 5d       	subi	r30, 0xD9	; 217
    587a:	f7 4e       	sbci	r31, 0xE7	; 231
    587c:	81 e0       	ldi	r24, 0x01	; 1
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	02 80       	ldd	r0, Z+2	; 0x02
    5882:	02 c0       	rjmp	.+4      	; 0x5888 <_turn_on+0x8e>
    5884:	88 0f       	add	r24, r24
    5886:	99 1f       	adc	r25, r25
    5888:	0a 94       	dec	r0
    588a:	e2 f7       	brpl	.-8      	; 0x5884 <_turn_on+0x8a>
    588c:	82 2b       	or	r24, r18
    588e:	8c 93       	st	X, r24
    5890:	08 95       	ret

00005892 <_hal_led_task>:
    5892:	cc 24       	eor	r12, r12
    5894:	c3 94       	inc	r12
    5896:	d1 2c       	mov	r13, r1
    5898:	68 94       	set
    589a:	bb 24       	eor	r11, r11
    589c:	b2 f8       	bld	r11, 2
    589e:	c7 e2       	ldi	r28, 0x27	; 39
    58a0:	d8 e1       	ldi	r29, 0x18	; 24
    58a2:	10 e0       	ldi	r17, 0x00	; 0
    58a4:	8c 81       	ldd	r24, Y+4	; 0x04
    58a6:	81 30       	cpi	r24, 0x01	; 1
    58a8:	81 f0       	breq	.+32     	; 0x58ca <_hal_led_task+0x38>
    58aa:	18 f1       	brcs	.+70     	; 0x58f2 <_hal_led_task+0x60>
    58ac:	82 30       	cpi	r24, 0x02	; 2
    58ae:	61 f5       	brne	.+88     	; 0x5908 <_hal_led_task+0x76>
    58b0:	e8 81       	ld	r30, Y
    58b2:	f9 81       	ldd	r31, Y+1	; 0x01
    58b4:	20 81       	ld	r18, Z
    58b6:	c6 01       	movw	r24, r12
    58b8:	0a 80       	ldd	r0, Y+2	; 0x02
    58ba:	02 c0       	rjmp	.+4      	; 0x58c0 <_hal_led_task+0x2e>
    58bc:	88 0f       	add	r24, r24
    58be:	99 1f       	adc	r25, r25
    58c0:	0a 94       	dec	r0
    58c2:	e2 f7       	brpl	.-8      	; 0x58bc <_hal_led_task+0x2a>
    58c4:	82 27       	eor	r24, r18
    58c6:	80 83       	st	Z, r24
    58c8:	1f c0       	rjmp	.+62     	; 0x5908 <_hal_led_task+0x76>
    58ca:	8d 81       	ldd	r24, Y+5	; 0x05
    58cc:	8f 5f       	subi	r24, 0xFF	; 255
    58ce:	86 30       	cpi	r24, 0x06	; 6
    58d0:	10 f4       	brcc	.+4      	; 0x58d6 <_hal_led_task+0x44>
    58d2:	8d 83       	std	Y+5, r24	; 0x05
    58d4:	19 c0       	rjmp	.+50     	; 0x5908 <_hal_led_task+0x76>
    58d6:	1d 82       	std	Y+5, r1	; 0x05
    58d8:	e8 81       	ld	r30, Y
    58da:	f9 81       	ldd	r31, Y+1	; 0x01
    58dc:	20 81       	ld	r18, Z
    58de:	c6 01       	movw	r24, r12
    58e0:	0a 80       	ldd	r0, Y+2	; 0x02
    58e2:	02 c0       	rjmp	.+4      	; 0x58e8 <_hal_led_task+0x56>
    58e4:	88 0f       	add	r24, r24
    58e6:	99 1f       	adc	r25, r25
    58e8:	0a 94       	dec	r0
    58ea:	e2 f7       	brpl	.-8      	; 0x58e4 <_hal_led_task+0x52>
    58ec:	82 27       	eor	r24, r18
    58ee:	80 83       	st	Z, r24
    58f0:	0b c0       	rjmp	.+22     	; 0x5908 <_hal_led_task+0x76>
    58f2:	0d 81       	ldd	r16, Y+5	; 0x05
    58f4:	00 23       	and	r16, r16
    58f6:	29 f0       	breq	.+10     	; 0x5902 <_hal_led_task+0x70>
    58f8:	81 2f       	mov	r24, r17
    58fa:	7f df       	rcall	.-258    	; 0x57fa <_turn_on>
    58fc:	01 50       	subi	r16, 0x01	; 1
    58fe:	0d 83       	std	Y+5, r16	; 0x05
    5900:	03 c0       	rjmp	.+6      	; 0x5908 <_hal_led_task+0x76>
    5902:	bc 82       	std	Y+4, r11	; 0x04
    5904:	81 2f       	mov	r24, r17
    5906:	2d df       	rcall	.-422    	; 0x5762 <_turn_off>
    5908:	1f 5f       	subi	r17, 0xFF	; 255
    590a:	26 96       	adiw	r28, 0x06	; 6
    590c:	14 30       	cpi	r17, 0x04	; 4
    590e:	51 f6       	brne	.-108    	; 0x58a4 <_hal_led_task+0x12>
    5910:	6c e0       	ldi	r22, 0x0C	; 12
    5912:	70 e0       	ldi	r23, 0x00	; 0
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	0e 94 ac 13 	call	0x2758	; 0x2758 <vTaskDelay>
    591c:	c0 cf       	rjmp	.-128    	; 0x589e <_hal_led_task+0xc>

0000591e <status_leds_initialise>:
    591e:	ef 92       	push	r14
    5920:	ff 92       	push	r15
    5922:	0f 93       	push	r16
    5924:	1f 93       	push	r17
    5926:	cf 93       	push	r28
    5928:	df 93       	push	r29
    592a:	08 2f       	mov	r16, r24
    592c:	80 e4       	ldi	r24, 0x40	; 64
    592e:	87 b9       	out	0x07, r24	; 7
    5930:	c7 e2       	ldi	r28, 0x27	; 39
    5932:	d8 e1       	ldi	r29, 0x18	; 24
    5934:	0f 2e       	mov	r0, r31
    5936:	f8 e2       	ldi	r31, 0x28	; 40
    5938:	ef 2e       	mov	r14, r31
    593a:	f1 2c       	mov	r15, r1
    593c:	f0 2d       	mov	r31, r0
    593e:	f9 82       	std	Y+1, r15	; 0x01
    5940:	e8 82       	st	Y, r14
    5942:	86 e0       	ldi	r24, 0x06	; 6
    5944:	8a 83       	std	Y+2, r24	; 0x02
    5946:	1b 82       	std	Y+3, r1	; 0x03
    5948:	14 e0       	ldi	r17, 0x04	; 4
    594a:	1c 83       	std	Y+4, r17	; 0x04
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	09 df       	rcall	.-494    	; 0x5762 <_turn_off>
    5950:	80 e8       	ldi	r24, 0x80	; 128
    5952:	87 b9       	out	0x07, r24	; 7
    5954:	ff 82       	std	Y+7, r15	; 0x07
    5956:	ee 82       	std	Y+6, r14	; 0x06
    5958:	87 e0       	ldi	r24, 0x07	; 7
    595a:	88 87       	std	Y+8, r24	; 0x08
    595c:	19 86       	std	Y+9, r1	; 0x09
    595e:	1a 87       	std	Y+10, r17	; 0x0a
    5960:	81 e0       	ldi	r24, 0x01	; 1
    5962:	ff de       	rcall	.-514    	; 0x5762 <_turn_off>
    5964:	80 e2       	ldi	r24, 0x20	; 32
    5966:	83 bb       	out	0x13, r24	; 19
    5968:	84 e3       	ldi	r24, 0x34	; 52
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	9d 87       	std	Y+13, r25	; 0x0d
    596e:	8c 87       	std	Y+12, r24	; 0x0c
    5970:	85 e0       	ldi	r24, 0x05	; 5
    5972:	8e 87       	std	Y+14, r24	; 0x0e
    5974:	1f 86       	std	Y+15, r1	; 0x0f
    5976:	18 8b       	std	Y+16, r17	; 0x10
    5978:	82 e0       	ldi	r24, 0x02	; 2
    597a:	f3 de       	rcall	.-538    	; 0x5762 <_turn_off>
    597c:	80 e1       	ldi	r24, 0x10	; 16
    597e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5982:	82 e0       	ldi	r24, 0x02	; 2
    5984:	91 e0       	ldi	r25, 0x01	; 1
    5986:	9b 8b       	std	Y+19, r25	; 0x13
    5988:	8a 8b       	std	Y+18, r24	; 0x12
    598a:	1c 8b       	std	Y+20, r17	; 0x14
    598c:	1d 8a       	std	Y+21, r1	; 0x15
    598e:	1e 8b       	std	Y+22, r17	; 0x16
    5990:	83 e0       	ldi	r24, 0x03	; 3
    5992:	e7 de       	rcall	.-562    	; 0x5762 <_turn_off>
    5994:	e1 2c       	mov	r14, r1
    5996:	f1 2c       	mov	r15, r1
    5998:	20 e0       	ldi	r18, 0x00	; 0
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	40 ec       	ldi	r20, 0xC0	; 192
    599e:	50 e0       	ldi	r21, 0x00	; 0
    59a0:	6f e2       	ldi	r22, 0x2F	; 47
    59a2:	78 e0       	ldi	r23, 0x08	; 8
    59a4:	89 e4       	ldi	r24, 0x49	; 73
    59a6:	9c e2       	ldi	r25, 0x2C	; 44
    59a8:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskCreate>
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	1f 91       	pop	r17
    59b2:	0f 91       	pop	r16
    59b4:	ff 90       	pop	r15
    59b6:	ef 90       	pop	r14
    59b8:	08 95       	ret

000059ba <status_leds_slowBlink>:
    59ba:	cf 93       	push	r28
    59bc:	df 93       	push	r29
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	fc 01       	movw	r30, r24
    59c2:	ee 0f       	add	r30, r30
    59c4:	ff 1f       	adc	r31, r31
    59c6:	df 01       	movw	r26, r30
    59c8:	a8 0f       	add	r26, r24
    59ca:	b9 1f       	adc	r27, r25
    59cc:	aa 0f       	add	r26, r26
    59ce:	bb 1f       	adc	r27, r27
    59d0:	a9 5d       	subi	r26, 0xD9	; 217
    59d2:	b7 4e       	sbci	r27, 0xE7	; 231
    59d4:	cd 91       	ld	r28, X+
    59d6:	dc 91       	ld	r29, X
    59d8:	11 97       	sbiw	r26, 0x01	; 1
    59da:	48 81       	ld	r20, Y
    59dc:	21 e0       	ldi	r18, 0x01	; 1
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	12 96       	adiw	r26, 0x02	; 2
    59e2:	0c 90       	ld	r0, X
    59e4:	12 97       	sbiw	r26, 0x02	; 2
    59e6:	02 c0       	rjmp	.+4      	; 0x59ec <status_leds_slowBlink+0x32>
    59e8:	22 0f       	add	r18, r18
    59ea:	33 1f       	adc	r19, r19
    59ec:	0a 94       	dec	r0
    59ee:	e2 f7       	brpl	.-8      	; 0x59e8 <status_leds_slowBlink+0x2e>
    59f0:	24 27       	eor	r18, r20
    59f2:	28 83       	st	Y, r18
    59f4:	fd 01       	movw	r30, r26
    59f6:	81 e0       	ldi	r24, 0x01	; 1
    59f8:	84 83       	std	Z+4, r24	; 0x04
    59fa:	df 91       	pop	r29
    59fc:	cf 91       	pop	r28
    59fe:	08 95       	ret

00005a00 <status_leds_fastBlink>:
    5a00:	cf 93       	push	r28
    5a02:	df 93       	push	r29
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	fc 01       	movw	r30, r24
    5a08:	ee 0f       	add	r30, r30
    5a0a:	ff 1f       	adc	r31, r31
    5a0c:	df 01       	movw	r26, r30
    5a0e:	a8 0f       	add	r26, r24
    5a10:	b9 1f       	adc	r27, r25
    5a12:	aa 0f       	add	r26, r26
    5a14:	bb 1f       	adc	r27, r27
    5a16:	a9 5d       	subi	r26, 0xD9	; 217
    5a18:	b7 4e       	sbci	r27, 0xE7	; 231
    5a1a:	cd 91       	ld	r28, X+
    5a1c:	dc 91       	ld	r29, X
    5a1e:	11 97       	sbiw	r26, 0x01	; 1
    5a20:	48 81       	ld	r20, Y
    5a22:	21 e0       	ldi	r18, 0x01	; 1
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	12 96       	adiw	r26, 0x02	; 2
    5a28:	0c 90       	ld	r0, X
    5a2a:	12 97       	sbiw	r26, 0x02	; 2
    5a2c:	02 c0       	rjmp	.+4      	; 0x5a32 <status_leds_fastBlink+0x32>
    5a2e:	22 0f       	add	r18, r18
    5a30:	33 1f       	adc	r19, r19
    5a32:	0a 94       	dec	r0
    5a34:	e2 f7       	brpl	.-8      	; 0x5a2e <status_leds_fastBlink+0x2e>
    5a36:	24 27       	eor	r18, r20
    5a38:	28 83       	st	Y, r18
    5a3a:	fd 01       	movw	r30, r26
    5a3c:	82 e0       	ldi	r24, 0x02	; 2
    5a3e:	84 83       	std	Z+4, r24	; 0x04
    5a40:	df 91       	pop	r29
    5a42:	cf 91       	pop	r28
    5a44:	08 95       	ret

00005a46 <status_leds_ledOn>:
    5a46:	28 2f       	mov	r18, r24
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	f9 01       	movw	r30, r18
    5a4c:	ee 0f       	add	r30, r30
    5a4e:	ff 1f       	adc	r31, r31
    5a50:	e2 0f       	add	r30, r18
    5a52:	f3 1f       	adc	r31, r19
    5a54:	ee 0f       	add	r30, r30
    5a56:	ff 1f       	adc	r31, r31
    5a58:	e9 5d       	subi	r30, 0xD9	; 217
    5a5a:	f7 4e       	sbci	r31, 0xE7	; 231
    5a5c:	93 e0       	ldi	r25, 0x03	; 3
    5a5e:	94 83       	std	Z+4, r25	; 0x04
    5a60:	cc ce       	rjmp	.-616    	; 0x57fa <_turn_on>
    5a62:	08 95       	ret

00005a64 <status_leds_ledOff>:
    5a64:	28 2f       	mov	r18, r24
    5a66:	30 e0       	ldi	r19, 0x00	; 0
    5a68:	f9 01       	movw	r30, r18
    5a6a:	ee 0f       	add	r30, r30
    5a6c:	ff 1f       	adc	r31, r31
    5a6e:	e2 0f       	add	r30, r18
    5a70:	f3 1f       	adc	r31, r19
    5a72:	ee 0f       	add	r30, r30
    5a74:	ff 1f       	adc	r31, r31
    5a76:	e9 5d       	subi	r30, 0xD9	; 217
    5a78:	f7 4e       	sbci	r31, 0xE7	; 231
    5a7a:	94 e0       	ldi	r25, 0x04	; 4
    5a7c:	94 83       	std	Z+4, r25	; 0x04
    5a7e:	71 ce       	rjmp	.-798    	; 0x5762 <_turn_off>
    5a80:	08 95       	ret

00005a82 <status_leds_longPuls>:
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	fc 01       	movw	r30, r24
    5a86:	ee 0f       	add	r30, r30
    5a88:	ff 1f       	adc	r31, r31
    5a8a:	df 01       	movw	r26, r30
    5a8c:	a8 0f       	add	r26, r24
    5a8e:	b9 1f       	adc	r27, r25
    5a90:	aa 0f       	add	r26, r26
    5a92:	bb 1f       	adc	r27, r27
    5a94:	a9 5d       	subi	r26, 0xD9	; 217
    5a96:	b7 4e       	sbci	r27, 0xE7	; 231
    5a98:	26 e0       	ldi	r18, 0x06	; 6
    5a9a:	15 96       	adiw	r26, 0x05	; 5
    5a9c:	2c 93       	st	X, r18
    5a9e:	15 97       	sbiw	r26, 0x05	; 5
    5aa0:	fd 01       	movw	r30, r26
    5aa2:	14 82       	std	Z+4, r1	; 0x04
    5aa4:	08 95       	ret

00005aa6 <status_leds_shortPuls>:
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	fc 01       	movw	r30, r24
    5aaa:	ee 0f       	add	r30, r30
    5aac:	ff 1f       	adc	r31, r31
    5aae:	df 01       	movw	r26, r30
    5ab0:	a8 0f       	add	r26, r24
    5ab2:	b9 1f       	adc	r27, r25
    5ab4:	aa 0f       	add	r26, r26
    5ab6:	bb 1f       	adc	r27, r27
    5ab8:	a9 5d       	subi	r26, 0xD9	; 217
    5aba:	b7 4e       	sbci	r27, 0xE7	; 231
    5abc:	15 96       	adiw	r26, 0x05	; 5
    5abe:	1c 92       	st	X, r1
    5ac0:	15 97       	sbiw	r26, 0x05	; 5
    5ac2:	fd 01       	movw	r30, r26
    5ac4:	14 82       	std	Z+4, r1	; 0x04
    5ac6:	08 95       	ret

00005ac8 <_initTwiInterface>:
    5ac8:	80 91 4d 18 	lds	r24, 0x184D	; 0x80184d <_twiIsInitiated>
    5acc:	81 11       	cpse	r24, r1
    5ace:	0c c0       	rjmp	.+24     	; 0x5ae8 <_initTwiInterface+0x20>
    5ad0:	8c e0       	ldi	r24, 0x0C	; 12
    5ad2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5ad6:	8f ef       	ldi	r24, 0xFF	; 255
    5ad8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5adc:	84 e0       	ldi	r24, 0x04	; 4
    5ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	80 93 4d 18 	sts	0x184D, r24	; 0x80184d <_twiIsInitiated>
    5ae8:	08 95       	ret

00005aea <twiCreate>:
    5aea:	af 92       	push	r10
    5aec:	bf 92       	push	r11
    5aee:	cf 92       	push	r12
    5af0:	df 92       	push	r13
    5af2:	ef 92       	push	r14
    5af4:	ff 92       	push	r15
    5af6:	0f 93       	push	r16
    5af8:	1f 93       	push	r17
    5afa:	cf 93       	push	r28
    5afc:	df 93       	push	r29
    5afe:	a8 2e       	mov	r10, r24
    5b00:	b6 2e       	mov	r11, r22
    5b02:	69 01       	movw	r12, r18
    5b04:	7a 01       	movw	r14, r20
    5b06:	84 e0       	ldi	r24, 0x04	; 4
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	29 d3       	rcall	.+1618   	; 0x615e <malloc>
    5b0c:	ec 01       	movw	r28, r24
    5b0e:	89 2b       	or	r24, r25
    5b10:	61 f1       	breq	.+88     	; 0x5b6a <twiCreate+0x80>
    5b12:	a8 82       	st	Y, r10
    5b14:	81 e0       	ldi	r24, 0x01	; 1
    5b16:	b8 12       	cpse	r11, r24
    5b18:	12 c0       	rjmp	.+36     	; 0x5b3e <twiCreate+0x54>
    5b1a:	c7 01       	movw	r24, r14
    5b1c:	b6 01       	movw	r22, r12
    5b1e:	20 ea       	ldi	r18, 0xA0	; 160
    5b20:	36 e8       	ldi	r19, 0x86	; 134
    5b22:	41 e0       	ldi	r20, 0x01	; 1
    5b24:	50 e0       	ldi	r21, 0x00	; 0
    5b26:	f1 d2       	rcall	.+1506   	; 0x610a <__udivmodsi4>
    5b28:	da 01       	movw	r26, r20
    5b2a:	c9 01       	movw	r24, r18
    5b2c:	40 97       	sbiw	r24, 0x10	; 16
    5b2e:	a1 09       	sbc	r26, r1
    5b30:	b1 09       	sbc	r27, r1
    5b32:	b6 95       	lsr	r27
    5b34:	a7 95       	ror	r26
    5b36:	97 95       	ror	r25
    5b38:	87 95       	ror	r24
    5b3a:	89 83       	std	Y+1, r24	; 0x01
    5b3c:	11 c0       	rjmp	.+34     	; 0x5b60 <twiCreate+0x76>
    5b3e:	c7 01       	movw	r24, r14
    5b40:	b6 01       	movw	r22, r12
    5b42:	20 e8       	ldi	r18, 0x80	; 128
    5b44:	3a e1       	ldi	r19, 0x1A	; 26
    5b46:	46 e0       	ldi	r20, 0x06	; 6
    5b48:	50 e0       	ldi	r21, 0x00	; 0
    5b4a:	df d2       	rcall	.+1470   	; 0x610a <__udivmodsi4>
    5b4c:	da 01       	movw	r26, r20
    5b4e:	c9 01       	movw	r24, r18
    5b50:	40 97       	sbiw	r24, 0x10	; 16
    5b52:	a1 09       	sbc	r26, r1
    5b54:	b1 09       	sbc	r27, r1
    5b56:	b6 95       	lsr	r27
    5b58:	a7 95       	ror	r26
    5b5a:	97 95       	ror	r25
    5b5c:	87 95       	ror	r24
    5b5e:	89 83       	std	Y+1, r24	; 0x01
    5b60:	1b 83       	std	Y+3, r17	; 0x03
    5b62:	0a 83       	std	Y+2, r16	; 0x02
    5b64:	8c 2f       	mov	r24, r28
    5b66:	9d 2f       	mov	r25, r29
    5b68:	02 c0       	rjmp	.+4      	; 0x5b6e <twiCreate+0x84>
    5b6a:	80 e0       	ldi	r24, 0x00	; 0
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	df 90       	pop	r13
    5b7c:	cf 90       	pop	r12
    5b7e:	bf 90       	pop	r11
    5b80:	af 90       	pop	r10
    5b82:	08 95       	ret

00005b84 <twiIsBusy>:
    5b84:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b88:	81 70       	andi	r24, 0x01	; 1
    5b8a:	08 95       	ret

00005b8c <twiTransmit>:
    5b8c:	ff 92       	push	r15
    5b8e:	0f 93       	push	r16
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	00 97       	sbiw	r24, 0x00	; 0
    5b98:	d1 f1       	breq	.+116    	; 0x5c0e <twiTransmit+0x82>
    5b9a:	4a 30       	cpi	r20, 0x0A	; 10
    5b9c:	d0 f5       	brcc	.+116    	; 0x5c12 <twiTransmit+0x86>
    5b9e:	f4 2e       	mov	r15, r20
    5ba0:	8b 01       	movw	r16, r22
    5ba2:	ec 01       	movw	r28, r24
    5ba4:	ef df       	rcall	.-34     	; 0x5b84 <twiIsBusy>
    5ba6:	81 11       	cpse	r24, r1
    5ba8:	36 c0       	rjmp	.+108    	; 0x5c16 <twiTransmit+0x8a>
    5baa:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_twiCurrentHandler>
    5bae:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_twiCurrentHandler+0x1>
    5bb2:	c8 17       	cp	r28, r24
    5bb4:	d9 07       	cpc	r29, r25
    5bb6:	41 f0       	breq	.+16     	; 0x5bc8 <twiTransmit+0x3c>
    5bb8:	87 df       	rcall	.-242    	; 0x5ac8 <_initTwiInterface>
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5bc0:	d0 93 41 18 	sts	0x1841, r29	; 0x801841 <_twiCurrentHandler+0x1>
    5bc4:	c0 93 40 18 	sts	0x1840, r28	; 0x801840 <_twiCurrentHandler>
    5bc8:	81 e0       	ldi	r24, 0x01	; 1
    5bca:	8f 0d       	add	r24, r15
    5bcc:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <_twiMessageLen>
    5bd0:	88 81       	ld	r24, Y
    5bd2:	88 0f       	add	r24, r24
    5bd4:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <_twiMessageBuffer>
    5bd8:	ff 20       	and	r15, r15
    5bda:	89 f0       	breq	.+34     	; 0x5bfe <twiTransmit+0x72>
    5bdc:	f8 01       	movw	r30, r16
    5bde:	a4 e4       	ldi	r26, 0x44	; 68
    5be0:	b8 e1       	ldi	r27, 0x18	; 24
    5be2:	4f ef       	ldi	r20, 0xFF	; 255
    5be4:	4f 0d       	add	r20, r15
    5be6:	64 2f       	mov	r22, r20
    5be8:	70 e0       	ldi	r23, 0x00	; 0
    5bea:	cb 01       	movw	r24, r22
    5bec:	01 96       	adiw	r24, 0x01	; 1
    5bee:	b8 01       	movw	r22, r16
    5bf0:	68 0f       	add	r22, r24
    5bf2:	79 1f       	adc	r23, r25
    5bf4:	81 91       	ld	r24, Z+
    5bf6:	8d 93       	st	X+, r24
    5bf8:	e6 17       	cp	r30, r22
    5bfa:	f7 07       	cpc	r31, r23
    5bfc:	d9 f7       	brne	.-10     	; 0x5bf4 <twiTransmit+0x68>
    5bfe:	88 ef       	ldi	r24, 0xF8	; 248
    5c00:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c04:	85 ea       	ldi	r24, 0xA5	; 165
    5c06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c0a:	84 e0       	ldi	r24, 0x04	; 4
    5c0c:	05 c0       	rjmp	.+10     	; 0x5c18 <twiTransmit+0x8c>
    5c0e:	86 e0       	ldi	r24, 0x06	; 6
    5c10:	03 c0       	rjmp	.+6      	; 0x5c18 <twiTransmit+0x8c>
    5c12:	87 e0       	ldi	r24, 0x07	; 7
    5c14:	01 c0       	rjmp	.+2      	; 0x5c18 <twiTransmit+0x8c>
    5c16:	82 e0       	ldi	r24, 0x02	; 2
    5c18:	df 91       	pop	r29
    5c1a:	cf 91       	pop	r28
    5c1c:	1f 91       	pop	r17
    5c1e:	0f 91       	pop	r16
    5c20:	ff 90       	pop	r15
    5c22:	08 95       	ret

00005c24 <twiReceive>:
    5c24:	1f 93       	push	r17
    5c26:	cf 93       	push	r28
    5c28:	df 93       	push	r29
    5c2a:	00 97       	sbiw	r24, 0x00	; 0
    5c2c:	29 f1       	breq	.+74     	; 0x5c78 <twiReceive+0x54>
    5c2e:	6b 30       	cpi	r22, 0x0B	; 11
    5c30:	28 f5       	brcc	.+74     	; 0x5c7c <twiReceive+0x58>
    5c32:	16 2f       	mov	r17, r22
    5c34:	ec 01       	movw	r28, r24
    5c36:	a6 df       	rcall	.-180    	; 0x5b84 <twiIsBusy>
    5c38:	81 11       	cpse	r24, r1
    5c3a:	22 c0       	rjmp	.+68     	; 0x5c80 <twiReceive+0x5c>
    5c3c:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_twiCurrentHandler>
    5c40:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_twiCurrentHandler+0x1>
    5c44:	c8 17       	cp	r28, r24
    5c46:	d9 07       	cpc	r29, r25
    5c48:	41 f0       	breq	.+16     	; 0x5c5a <twiReceive+0x36>
    5c4a:	3e df       	rcall	.-388    	; 0x5ac8 <_initTwiInterface>
    5c4c:	89 81       	ldd	r24, Y+1	; 0x01
    5c4e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5c52:	d0 93 41 18 	sts	0x1841, r29	; 0x801841 <_twiCurrentHandler+0x1>
    5c56:	c0 93 40 18 	sts	0x1840, r28	; 0x801840 <_twiCurrentHandler>
    5c5a:	10 93 42 18 	sts	0x1842, r17	; 0x801842 <_twiMessageLen>
    5c5e:	88 81       	ld	r24, Y
    5c60:	88 0f       	add	r24, r24
    5c62:	81 60       	ori	r24, 0x01	; 1
    5c64:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <_twiMessageBuffer>
    5c68:	88 ef       	ldi	r24, 0xF8	; 248
    5c6a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c6e:	85 ea       	ldi	r24, 0xA5	; 165
    5c70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c74:	85 e0       	ldi	r24, 0x05	; 5
    5c76:	05 c0       	rjmp	.+10     	; 0x5c82 <twiReceive+0x5e>
    5c78:	86 e0       	ldi	r24, 0x06	; 6
    5c7a:	03 c0       	rjmp	.+6      	; 0x5c82 <twiReceive+0x5e>
    5c7c:	87 e0       	ldi	r24, 0x07	; 7
    5c7e:	01 c0       	rjmp	.+2      	; 0x5c82 <twiReceive+0x5e>
    5c80:	82 e0       	ldi	r24, 0x02	; 2
    5c82:	df 91       	pop	r29
    5c84:	cf 91       	pop	r28
    5c86:	1f 91       	pop	r17
    5c88:	08 95       	ret

00005c8a <__vector_39>:
    5c8a:	1f 92       	push	r1
    5c8c:	0f 92       	push	r0
    5c8e:	0f b6       	in	r0, 0x3f	; 63
    5c90:	0f 92       	push	r0
    5c92:	11 24       	eor	r1, r1
    5c94:	0b b6       	in	r0, 0x3b	; 59
    5c96:	0f 92       	push	r0
    5c98:	2f 93       	push	r18
    5c9a:	3f 93       	push	r19
    5c9c:	4f 93       	push	r20
    5c9e:	5f 93       	push	r21
    5ca0:	6f 93       	push	r22
    5ca2:	7f 93       	push	r23
    5ca4:	8f 93       	push	r24
    5ca6:	9f 93       	push	r25
    5ca8:	af 93       	push	r26
    5caa:	bf 93       	push	r27
    5cac:	ef 93       	push	r30
    5cae:	ff 93       	push	r31
    5cb0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5cb4:	8e 2f       	mov	r24, r30
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	fc 01       	movw	r30, r24
    5cba:	38 97       	sbiw	r30, 0x08	; 8
    5cbc:	e1 35       	cpi	r30, 0x51	; 81
    5cbe:	f1 05       	cpc	r31, r1
    5cc0:	08 f0       	brcs	.+2      	; 0x5cc4 <__vector_39+0x3a>
    5cc2:	75 c0       	rjmp	.+234    	; 0x5dae <__vector_39+0x124>
    5cc4:	88 27       	eor	r24, r24
    5cc6:	e4 58       	subi	r30, 0x84	; 132
    5cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cca:	8f 4f       	sbci	r24, 0xFF	; 255
    5ccc:	40 c2       	rjmp	.+1152   	; 0x614e <__tablejump2__>
    5cce:	10 92 3f 18 	sts	0x183F, r1	; 0x80183f <_index.1885>
    5cd2:	e0 91 3f 18 	lds	r30, 0x183F	; 0x80183f <_index.1885>
    5cd6:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <_twiMessageLen>
    5cda:	e8 17       	cp	r30, r24
    5cdc:	70 f4       	brcc	.+28     	; 0x5cfa <__vector_39+0x70>
    5cde:	81 e0       	ldi	r24, 0x01	; 1
    5ce0:	8e 0f       	add	r24, r30
    5ce2:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <_index.1885>
    5ce6:	f0 e0       	ldi	r31, 0x00	; 0
    5ce8:	ed 5b       	subi	r30, 0xBD	; 189
    5cea:	f7 4e       	sbci	r31, 0xE7	; 231
    5cec:	80 81       	ld	r24, Z
    5cee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5cf2:	85 e8       	ldi	r24, 0x85	; 133
    5cf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cf8:	72 c0       	rjmp	.+228    	; 0x5dde <__vector_39+0x154>
    5cfa:	84 e9       	ldi	r24, 0x94	; 148
    5cfc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d00:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_twiCurrentHandler>
    5d04:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_twiCurrentHandler+0x1>
    5d08:	dc 01       	movw	r26, r24
    5d0a:	12 96       	adiw	r26, 0x02	; 2
    5d0c:	ed 91       	ld	r30, X+
    5d0e:	fc 91       	ld	r31, X
    5d10:	13 97       	sbiw	r26, 0x03	; 3
    5d12:	30 97       	sbiw	r30, 0x00	; 0
    5d14:	09 f4       	brne	.+2      	; 0x5d18 <__vector_39+0x8e>
    5d16:	63 c0       	rjmp	.+198    	; 0x5dde <__vector_39+0x154>
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	40 e0       	ldi	r20, 0x00	; 0
    5d1c:	50 e0       	ldi	r21, 0x00	; 0
    5d1e:	64 e0       	ldi	r22, 0x04	; 4
    5d20:	19 95       	eicall
    5d22:	5d c0       	rjmp	.+186    	; 0x5dde <__vector_39+0x154>
    5d24:	e0 91 3f 18 	lds	r30, 0x183F	; 0x80183f <_index.1885>
    5d28:	81 e0       	ldi	r24, 0x01	; 1
    5d2a:	8e 0f       	add	r24, r30
    5d2c:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <_index.1885>
    5d30:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d34:	f0 e0       	ldi	r31, 0x00	; 0
    5d36:	ed 5b       	subi	r30, 0xBD	; 189
    5d38:	f7 4e       	sbci	r31, 0xE7	; 231
    5d3a:	80 83       	st	Z, r24
    5d3c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d40:	80 34       	cpi	r24, 0x40	; 64
    5d42:	11 f4       	brne	.+4      	; 0x5d48 <__vector_39+0xbe>
    5d44:	10 92 3f 18 	sts	0x183F, r1	; 0x80183f <_index.1885>
    5d48:	20 91 3f 18 	lds	r18, 0x183F	; 0x80183f <_index.1885>
    5d4c:	30 e0       	ldi	r19, 0x00	; 0
    5d4e:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <_twiMessageLen>
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	01 97       	sbiw	r24, 0x01	; 1
    5d56:	28 17       	cp	r18, r24
    5d58:	39 07       	cpc	r19, r25
    5d5a:	24 f4       	brge	.+8      	; 0x5d64 <__vector_39+0xda>
    5d5c:	85 ec       	ldi	r24, 0xC5	; 197
    5d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d62:	3d c0       	rjmp	.+122    	; 0x5dde <__vector_39+0x154>
    5d64:	85 e8       	ldi	r24, 0x85	; 133
    5d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d6a:	39 c0       	rjmp	.+114    	; 0x5dde <__vector_39+0x154>
    5d6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d70:	e0 91 3f 18 	lds	r30, 0x183F	; 0x80183f <_index.1885>
    5d74:	f0 e0       	ldi	r31, 0x00	; 0
    5d76:	ed 5b       	subi	r30, 0xBD	; 189
    5d78:	f7 4e       	sbci	r31, 0xE7	; 231
    5d7a:	80 83       	st	Z, r24
    5d7c:	84 e9       	ldi	r24, 0x94	; 148
    5d7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d82:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_twiCurrentHandler>
    5d86:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_twiCurrentHandler+0x1>
    5d8a:	dc 01       	movw	r26, r24
    5d8c:	12 96       	adiw	r26, 0x02	; 2
    5d8e:	ed 91       	ld	r30, X+
    5d90:	fc 91       	ld	r31, X
    5d92:	13 97       	sbiw	r26, 0x03	; 3
    5d94:	30 97       	sbiw	r30, 0x00	; 0
    5d96:	19 f1       	breq	.+70     	; 0x5dde <__vector_39+0x154>
    5d98:	20 91 42 18 	lds	r18, 0x1842	; 0x801842 <_twiMessageLen>
    5d9c:	43 e4       	ldi	r20, 0x43	; 67
    5d9e:	58 e1       	ldi	r21, 0x18	; 24
    5da0:	65 e0       	ldi	r22, 0x05	; 5
    5da2:	19 95       	eicall
    5da4:	1c c0       	rjmp	.+56     	; 0x5dde <__vector_39+0x154>
    5da6:	85 ea       	ldi	r24, 0xA5	; 165
    5da8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dac:	18 c0       	rjmp	.+48     	; 0x5dde <__vector_39+0x154>
    5dae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5db2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5db6:	84 e0       	ldi	r24, 0x04	; 4
    5db8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dbc:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_twiCurrentHandler>
    5dc0:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_twiCurrentHandler+0x1>
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	12 96       	adiw	r26, 0x02	; 2
    5dc8:	ed 91       	ld	r30, X+
    5dca:	fc 91       	ld	r31, X
    5dcc:	13 97       	sbiw	r26, 0x03	; 3
    5dce:	30 97       	sbiw	r30, 0x00	; 0
    5dd0:	31 f0       	breq	.+12     	; 0x5dde <__vector_39+0x154>
    5dd2:	20 e0       	ldi	r18, 0x00	; 0
    5dd4:	40 e0       	ldi	r20, 0x00	; 0
    5dd6:	50 e0       	ldi	r21, 0x00	; 0
    5dd8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5ddc:	19 95       	eicall
    5dde:	ff 91       	pop	r31
    5de0:	ef 91       	pop	r30
    5de2:	bf 91       	pop	r27
    5de4:	af 91       	pop	r26
    5de6:	9f 91       	pop	r25
    5de8:	8f 91       	pop	r24
    5dea:	7f 91       	pop	r23
    5dec:	6f 91       	pop	r22
    5dee:	5f 91       	pop	r21
    5df0:	4f 91       	pop	r20
    5df2:	3f 91       	pop	r19
    5df4:	2f 91       	pop	r18
    5df6:	0f 90       	pop	r0
    5df8:	0b be       	out	0x3b, r0	; 59
    5dfa:	0f 90       	pop	r0
    5dfc:	0f be       	out	0x3f, r0	; 63
    5dfe:	0f 90       	pop	r0
    5e00:	1f 90       	pop	r1
    5e02:	18 95       	reti

00005e04 <fifo_init>:
    5e04:	fc 01       	movw	r30, r24
    5e06:	41 11       	cpse	r20, r1
    5e08:	01 c0       	rjmp	.+2      	; 0x5e0c <fifo_init+0x8>
    5e0a:	ca d2       	rcall	.+1428   	; 0x63a0 <abort>
    5e0c:	84 2f       	mov	r24, r20
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	9c 01       	movw	r18, r24
    5e12:	21 50       	subi	r18, 0x01	; 1
    5e14:	31 09       	sbc	r19, r1
    5e16:	82 23       	and	r24, r18
    5e18:	93 23       	and	r25, r19
    5e1a:	89 2b       	or	r24, r25
    5e1c:	09 f0       	breq	.+2      	; 0x5e20 <fifo_init+0x1c>
    5e1e:	c0 d2       	rcall	.+1408   	; 0x63a0 <abort>
    5e20:	41 38       	cpi	r20, 0x81	; 129
    5e22:	08 f0       	brcs	.+2      	; 0x5e26 <fifo_init+0x22>
    5e24:	bd d2       	rcall	.+1402   	; 0x63a0 <abort>
    5e26:	12 82       	std	Z+2, r1	; 0x02
    5e28:	13 82       	std	Z+3, r1	; 0x03
    5e2a:	44 83       	std	Z+4, r20	; 0x04
    5e2c:	44 0f       	add	r20, r20
    5e2e:	41 50       	subi	r20, 0x01	; 1
    5e30:	45 83       	std	Z+5, r20	; 0x05
    5e32:	71 83       	std	Z+1, r23	; 0x01
    5e34:	60 83       	st	Z, r22
    5e36:	80 e0       	ldi	r24, 0x00	; 0
    5e38:	90 e0       	ldi	r25, 0x00	; 0
    5e3a:	08 95       	ret

00005e3c <__subsf3>:
    5e3c:	50 58       	subi	r21, 0x80	; 128

00005e3e <__addsf3>:
    5e3e:	bb 27       	eor	r27, r27
    5e40:	aa 27       	eor	r26, r26
    5e42:	0e d0       	rcall	.+28     	; 0x5e60 <__addsf3x>
    5e44:	eb c0       	rjmp	.+470    	; 0x601c <__fp_round>
    5e46:	dc d0       	rcall	.+440    	; 0x6000 <__fp_pscA>
    5e48:	30 f0       	brcs	.+12     	; 0x5e56 <__addsf3+0x18>
    5e4a:	e1 d0       	rcall	.+450    	; 0x600e <__fp_pscB>
    5e4c:	20 f0       	brcs	.+8      	; 0x5e56 <__addsf3+0x18>
    5e4e:	31 f4       	brne	.+12     	; 0x5e5c <__addsf3+0x1e>
    5e50:	9f 3f       	cpi	r25, 0xFF	; 255
    5e52:	11 f4       	brne	.+4      	; 0x5e58 <__addsf3+0x1a>
    5e54:	1e f4       	brtc	.+6      	; 0x5e5c <__addsf3+0x1e>
    5e56:	d1 c0       	rjmp	.+418    	; 0x5ffa <__fp_nan>
    5e58:	0e f4       	brtc	.+2      	; 0x5e5c <__addsf3+0x1e>
    5e5a:	e0 95       	com	r30
    5e5c:	e7 fb       	bst	r30, 7
    5e5e:	c7 c0       	rjmp	.+398    	; 0x5fee <__fp_inf>

00005e60 <__addsf3x>:
    5e60:	e9 2f       	mov	r30, r25
    5e62:	0e 94 a7 21 	call	0x434e	; 0x434e <__fp_split3>
    5e66:	78 f3       	brcs	.-34     	; 0x5e46 <__addsf3+0x8>
    5e68:	ba 17       	cp	r27, r26
    5e6a:	62 07       	cpc	r22, r18
    5e6c:	73 07       	cpc	r23, r19
    5e6e:	84 07       	cpc	r24, r20
    5e70:	95 07       	cpc	r25, r21
    5e72:	20 f0       	brcs	.+8      	; 0x5e7c <__addsf3x+0x1c>
    5e74:	79 f4       	brne	.+30     	; 0x5e94 <__addsf3x+0x34>
    5e76:	a6 f5       	brtc	.+104    	; 0x5ee0 <__addsf3x+0x80>
    5e78:	0c 94 c9 21 	jmp	0x4392	; 0x4392 <__fp_zero>
    5e7c:	0e f4       	brtc	.+2      	; 0x5e80 <__addsf3x+0x20>
    5e7e:	e0 95       	com	r30
    5e80:	0b 2e       	mov	r0, r27
    5e82:	ba 2f       	mov	r27, r26
    5e84:	a0 2d       	mov	r26, r0
    5e86:	0b 01       	movw	r0, r22
    5e88:	b9 01       	movw	r22, r18
    5e8a:	90 01       	movw	r18, r0
    5e8c:	0c 01       	movw	r0, r24
    5e8e:	ca 01       	movw	r24, r20
    5e90:	a0 01       	movw	r20, r0
    5e92:	11 24       	eor	r1, r1
    5e94:	ff 27       	eor	r31, r31
    5e96:	59 1b       	sub	r21, r25
    5e98:	99 f0       	breq	.+38     	; 0x5ec0 <__addsf3x+0x60>
    5e9a:	59 3f       	cpi	r21, 0xF9	; 249
    5e9c:	50 f4       	brcc	.+20     	; 0x5eb2 <__addsf3x+0x52>
    5e9e:	50 3e       	cpi	r21, 0xE0	; 224
    5ea0:	68 f1       	brcs	.+90     	; 0x5efc <__addsf3x+0x9c>
    5ea2:	1a 16       	cp	r1, r26
    5ea4:	f0 40       	sbci	r31, 0x00	; 0
    5ea6:	a2 2f       	mov	r26, r18
    5ea8:	23 2f       	mov	r18, r19
    5eaa:	34 2f       	mov	r19, r20
    5eac:	44 27       	eor	r20, r20
    5eae:	58 5f       	subi	r21, 0xF8	; 248
    5eb0:	f3 cf       	rjmp	.-26     	; 0x5e98 <__addsf3x+0x38>
    5eb2:	46 95       	lsr	r20
    5eb4:	37 95       	ror	r19
    5eb6:	27 95       	ror	r18
    5eb8:	a7 95       	ror	r26
    5eba:	f0 40       	sbci	r31, 0x00	; 0
    5ebc:	53 95       	inc	r21
    5ebe:	c9 f7       	brne	.-14     	; 0x5eb2 <__addsf3x+0x52>
    5ec0:	7e f4       	brtc	.+30     	; 0x5ee0 <__addsf3x+0x80>
    5ec2:	1f 16       	cp	r1, r31
    5ec4:	ba 0b       	sbc	r27, r26
    5ec6:	62 0b       	sbc	r22, r18
    5ec8:	73 0b       	sbc	r23, r19
    5eca:	84 0b       	sbc	r24, r20
    5ecc:	ba f0       	brmi	.+46     	; 0x5efc <__addsf3x+0x9c>
    5ece:	91 50       	subi	r25, 0x01	; 1
    5ed0:	a1 f0       	breq	.+40     	; 0x5efa <__addsf3x+0x9a>
    5ed2:	ff 0f       	add	r31, r31
    5ed4:	bb 1f       	adc	r27, r27
    5ed6:	66 1f       	adc	r22, r22
    5ed8:	77 1f       	adc	r23, r23
    5eda:	88 1f       	adc	r24, r24
    5edc:	c2 f7       	brpl	.-16     	; 0x5ece <__addsf3x+0x6e>
    5ede:	0e c0       	rjmp	.+28     	; 0x5efc <__addsf3x+0x9c>
    5ee0:	ba 0f       	add	r27, r26
    5ee2:	62 1f       	adc	r22, r18
    5ee4:	73 1f       	adc	r23, r19
    5ee6:	84 1f       	adc	r24, r20
    5ee8:	48 f4       	brcc	.+18     	; 0x5efc <__addsf3x+0x9c>
    5eea:	87 95       	ror	r24
    5eec:	77 95       	ror	r23
    5eee:	67 95       	ror	r22
    5ef0:	b7 95       	ror	r27
    5ef2:	f7 95       	ror	r31
    5ef4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef6:	08 f0       	brcs	.+2      	; 0x5efa <__addsf3x+0x9a>
    5ef8:	b1 cf       	rjmp	.-158    	; 0x5e5c <__addsf3+0x1e>
    5efa:	93 95       	inc	r25
    5efc:	88 0f       	add	r24, r24
    5efe:	08 f0       	brcs	.+2      	; 0x5f02 <__addsf3x+0xa2>
    5f00:	99 27       	eor	r25, r25
    5f02:	ee 0f       	add	r30, r30
    5f04:	97 95       	ror	r25
    5f06:	87 95       	ror	r24
    5f08:	08 95       	ret

00005f0a <__divsf3>:
    5f0a:	0d d0       	rcall	.+26     	; 0x5f26 <__divsf3x>
    5f0c:	87 c0       	rjmp	.+270    	; 0x601c <__fp_round>
    5f0e:	7f d0       	rcall	.+254    	; 0x600e <__fp_pscB>
    5f10:	48 f0       	brcs	.+18     	; 0x5f24 <__divsf3+0x1a>
    5f12:	76 d0       	rcall	.+236    	; 0x6000 <__fp_pscA>
    5f14:	38 f0       	brcs	.+14     	; 0x5f24 <__divsf3+0x1a>
    5f16:	21 f4       	brne	.+8      	; 0x5f20 <__divsf3+0x16>
    5f18:	5f 3f       	cpi	r21, 0xFF	; 255
    5f1a:	21 f0       	breq	.+8      	; 0x5f24 <__divsf3+0x1a>
    5f1c:	68 c0       	rjmp	.+208    	; 0x5fee <__fp_inf>
    5f1e:	51 11       	cpse	r21, r1
    5f20:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__fp_szero>
    5f24:	6a c0       	rjmp	.+212    	; 0x5ffa <__fp_nan>

00005f26 <__divsf3x>:
    5f26:	0e 94 a7 21 	call	0x434e	; 0x434e <__fp_split3>
    5f2a:	88 f3       	brcs	.-30     	; 0x5f0e <__divsf3+0x4>

00005f2c <__divsf3_pse>:
    5f2c:	99 23       	and	r25, r25
    5f2e:	b9 f3       	breq	.-18     	; 0x5f1e <__divsf3+0x14>
    5f30:	55 23       	and	r21, r21
    5f32:	a1 f3       	breq	.-24     	; 0x5f1c <__divsf3+0x12>
    5f34:	95 1b       	sub	r25, r21
    5f36:	55 0b       	sbc	r21, r21
    5f38:	bb 27       	eor	r27, r27
    5f3a:	aa 27       	eor	r26, r26
    5f3c:	62 17       	cp	r22, r18
    5f3e:	73 07       	cpc	r23, r19
    5f40:	84 07       	cpc	r24, r20
    5f42:	38 f0       	brcs	.+14     	; 0x5f52 <__divsf3_pse+0x26>
    5f44:	9f 5f       	subi	r25, 0xFF	; 255
    5f46:	5f 4f       	sbci	r21, 0xFF	; 255
    5f48:	22 0f       	add	r18, r18
    5f4a:	33 1f       	adc	r19, r19
    5f4c:	44 1f       	adc	r20, r20
    5f4e:	aa 1f       	adc	r26, r26
    5f50:	a9 f3       	breq	.-22     	; 0x5f3c <__divsf3_pse+0x10>
    5f52:	34 d0       	rcall	.+104    	; 0x5fbc <__divsf3_pse+0x90>
    5f54:	0e 2e       	mov	r0, r30
    5f56:	3a f0       	brmi	.+14     	; 0x5f66 <__divsf3_pse+0x3a>
    5f58:	e0 e8       	ldi	r30, 0x80	; 128
    5f5a:	31 d0       	rcall	.+98     	; 0x5fbe <__divsf3_pse+0x92>
    5f5c:	91 50       	subi	r25, 0x01	; 1
    5f5e:	50 40       	sbci	r21, 0x00	; 0
    5f60:	e6 95       	lsr	r30
    5f62:	00 1c       	adc	r0, r0
    5f64:	ca f7       	brpl	.-14     	; 0x5f58 <__divsf3_pse+0x2c>
    5f66:	2a d0       	rcall	.+84     	; 0x5fbc <__divsf3_pse+0x90>
    5f68:	fe 2f       	mov	r31, r30
    5f6a:	28 d0       	rcall	.+80     	; 0x5fbc <__divsf3_pse+0x90>
    5f6c:	66 0f       	add	r22, r22
    5f6e:	77 1f       	adc	r23, r23
    5f70:	88 1f       	adc	r24, r24
    5f72:	bb 1f       	adc	r27, r27
    5f74:	26 17       	cp	r18, r22
    5f76:	37 07       	cpc	r19, r23
    5f78:	48 07       	cpc	r20, r24
    5f7a:	ab 07       	cpc	r26, r27
    5f7c:	b0 e8       	ldi	r27, 0x80	; 128
    5f7e:	09 f0       	breq	.+2      	; 0x5f82 <__divsf3_pse+0x56>
    5f80:	bb 0b       	sbc	r27, r27
    5f82:	80 2d       	mov	r24, r0
    5f84:	bf 01       	movw	r22, r30
    5f86:	ff 27       	eor	r31, r31
    5f88:	93 58       	subi	r25, 0x83	; 131
    5f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f8c:	32 f0       	brmi	.+12     	; 0x5f9a <__divsf3_pse+0x6e>
    5f8e:	9e 3f       	cpi	r25, 0xFE	; 254
    5f90:	51 05       	cpc	r21, r1
    5f92:	70 f0       	brcs	.+28     	; 0x5fb0 <__divsf3_pse+0x84>
    5f94:	2c c0       	rjmp	.+88     	; 0x5fee <__fp_inf>
    5f96:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__fp_szero>
    5f9a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f9c:	e4 f3       	brlt	.-8      	; 0x5f96 <__divsf3_pse+0x6a>
    5f9e:	98 3e       	cpi	r25, 0xE8	; 232
    5fa0:	d4 f3       	brlt	.-12     	; 0x5f96 <__divsf3_pse+0x6a>
    5fa2:	86 95       	lsr	r24
    5fa4:	77 95       	ror	r23
    5fa6:	67 95       	ror	r22
    5fa8:	b7 95       	ror	r27
    5faa:	f7 95       	ror	r31
    5fac:	9f 5f       	subi	r25, 0xFF	; 255
    5fae:	c9 f7       	brne	.-14     	; 0x5fa2 <__divsf3_pse+0x76>
    5fb0:	88 0f       	add	r24, r24
    5fb2:	91 1d       	adc	r25, r1
    5fb4:	96 95       	lsr	r25
    5fb6:	87 95       	ror	r24
    5fb8:	97 f9       	bld	r25, 7
    5fba:	08 95       	ret
    5fbc:	e1 e0       	ldi	r30, 0x01	; 1
    5fbe:	66 0f       	add	r22, r22
    5fc0:	77 1f       	adc	r23, r23
    5fc2:	88 1f       	adc	r24, r24
    5fc4:	bb 1f       	adc	r27, r27
    5fc6:	62 17       	cp	r22, r18
    5fc8:	73 07       	cpc	r23, r19
    5fca:	84 07       	cpc	r24, r20
    5fcc:	ba 07       	cpc	r27, r26
    5fce:	20 f0       	brcs	.+8      	; 0x5fd8 <__divsf3_pse+0xac>
    5fd0:	62 1b       	sub	r22, r18
    5fd2:	73 0b       	sbc	r23, r19
    5fd4:	84 0b       	sbc	r24, r20
    5fd6:	ba 0b       	sbc	r27, r26
    5fd8:	ee 1f       	adc	r30, r30
    5fda:	88 f7       	brcc	.-30     	; 0x5fbe <__divsf3_pse+0x92>
    5fdc:	e0 95       	com	r30
    5fde:	08 95       	ret

00005fe0 <__fixsfsi>:
    5fe0:	0e 94 3e 21 	call	0x427c	; 0x427c <__fixunssfsi>
    5fe4:	68 94       	set
    5fe6:	b1 11       	cpse	r27, r1
    5fe8:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__fp_szero>
    5fec:	08 95       	ret

00005fee <__fp_inf>:
    5fee:	97 f9       	bld	r25, 7
    5ff0:	9f 67       	ori	r25, 0x7F	; 127
    5ff2:	80 e8       	ldi	r24, 0x80	; 128
    5ff4:	70 e0       	ldi	r23, 0x00	; 0
    5ff6:	60 e0       	ldi	r22, 0x00	; 0
    5ff8:	08 95       	ret

00005ffa <__fp_nan>:
    5ffa:	9f ef       	ldi	r25, 0xFF	; 255
    5ffc:	80 ec       	ldi	r24, 0xC0	; 192
    5ffe:	08 95       	ret

00006000 <__fp_pscA>:
    6000:	00 24       	eor	r0, r0
    6002:	0a 94       	dec	r0
    6004:	16 16       	cp	r1, r22
    6006:	17 06       	cpc	r1, r23
    6008:	18 06       	cpc	r1, r24
    600a:	09 06       	cpc	r0, r25
    600c:	08 95       	ret

0000600e <__fp_pscB>:
    600e:	00 24       	eor	r0, r0
    6010:	0a 94       	dec	r0
    6012:	12 16       	cp	r1, r18
    6014:	13 06       	cpc	r1, r19
    6016:	14 06       	cpc	r1, r20
    6018:	05 06       	cpc	r0, r21
    601a:	08 95       	ret

0000601c <__fp_round>:
    601c:	09 2e       	mov	r0, r25
    601e:	03 94       	inc	r0
    6020:	00 0c       	add	r0, r0
    6022:	11 f4       	brne	.+4      	; 0x6028 <__fp_round+0xc>
    6024:	88 23       	and	r24, r24
    6026:	52 f0       	brmi	.+20     	; 0x603c <__fp_round+0x20>
    6028:	bb 0f       	add	r27, r27
    602a:	40 f4       	brcc	.+16     	; 0x603c <__fp_round+0x20>
    602c:	bf 2b       	or	r27, r31
    602e:	11 f4       	brne	.+4      	; 0x6034 <__fp_round+0x18>
    6030:	60 ff       	sbrs	r22, 0
    6032:	04 c0       	rjmp	.+8      	; 0x603c <__fp_round+0x20>
    6034:	6f 5f       	subi	r22, 0xFF	; 255
    6036:	7f 4f       	sbci	r23, 0xFF	; 255
    6038:	8f 4f       	sbci	r24, 0xFF	; 255
    603a:	9f 4f       	sbci	r25, 0xFF	; 255
    603c:	08 95       	ret

0000603e <__mulsf3>:
    603e:	0c d0       	rcall	.+24     	; 0x6058 <__mulsf3x>
    6040:	ed cf       	rjmp	.-38     	; 0x601c <__fp_round>
    6042:	de df       	rcall	.-68     	; 0x6000 <__fp_pscA>
    6044:	28 f0       	brcs	.+10     	; 0x6050 <__mulsf3+0x12>
    6046:	e3 df       	rcall	.-58     	; 0x600e <__fp_pscB>
    6048:	18 f0       	brcs	.+6      	; 0x6050 <__mulsf3+0x12>
    604a:	95 23       	and	r25, r21
    604c:	09 f0       	breq	.+2      	; 0x6050 <__mulsf3+0x12>
    604e:	cf cf       	rjmp	.-98     	; 0x5fee <__fp_inf>
    6050:	d4 cf       	rjmp	.-88     	; 0x5ffa <__fp_nan>
    6052:	11 24       	eor	r1, r1
    6054:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__fp_szero>

00006058 <__mulsf3x>:
    6058:	0e 94 a7 21 	call	0x434e	; 0x434e <__fp_split3>
    605c:	90 f3       	brcs	.-28     	; 0x6042 <__mulsf3+0x4>

0000605e <__mulsf3_pse>:
    605e:	95 9f       	mul	r25, r21
    6060:	c1 f3       	breq	.-16     	; 0x6052 <__mulsf3+0x14>
    6062:	95 0f       	add	r25, r21
    6064:	50 e0       	ldi	r21, 0x00	; 0
    6066:	55 1f       	adc	r21, r21
    6068:	62 9f       	mul	r22, r18
    606a:	f0 01       	movw	r30, r0
    606c:	72 9f       	mul	r23, r18
    606e:	bb 27       	eor	r27, r27
    6070:	f0 0d       	add	r31, r0
    6072:	b1 1d       	adc	r27, r1
    6074:	63 9f       	mul	r22, r19
    6076:	aa 27       	eor	r26, r26
    6078:	f0 0d       	add	r31, r0
    607a:	b1 1d       	adc	r27, r1
    607c:	aa 1f       	adc	r26, r26
    607e:	64 9f       	mul	r22, r20
    6080:	66 27       	eor	r22, r22
    6082:	b0 0d       	add	r27, r0
    6084:	a1 1d       	adc	r26, r1
    6086:	66 1f       	adc	r22, r22
    6088:	82 9f       	mul	r24, r18
    608a:	22 27       	eor	r18, r18
    608c:	b0 0d       	add	r27, r0
    608e:	a1 1d       	adc	r26, r1
    6090:	62 1f       	adc	r22, r18
    6092:	73 9f       	mul	r23, r19
    6094:	b0 0d       	add	r27, r0
    6096:	a1 1d       	adc	r26, r1
    6098:	62 1f       	adc	r22, r18
    609a:	83 9f       	mul	r24, r19
    609c:	a0 0d       	add	r26, r0
    609e:	61 1d       	adc	r22, r1
    60a0:	22 1f       	adc	r18, r18
    60a2:	74 9f       	mul	r23, r20
    60a4:	33 27       	eor	r19, r19
    60a6:	a0 0d       	add	r26, r0
    60a8:	61 1d       	adc	r22, r1
    60aa:	23 1f       	adc	r18, r19
    60ac:	84 9f       	mul	r24, r20
    60ae:	60 0d       	add	r22, r0
    60b0:	21 1d       	adc	r18, r1
    60b2:	82 2f       	mov	r24, r18
    60b4:	76 2f       	mov	r23, r22
    60b6:	6a 2f       	mov	r22, r26
    60b8:	11 24       	eor	r1, r1
    60ba:	9f 57       	subi	r25, 0x7F	; 127
    60bc:	50 40       	sbci	r21, 0x00	; 0
    60be:	92 f0       	brmi	.+36     	; 0x60e4 <__mulsf3_pse+0x86>
    60c0:	e9 f0       	breq	.+58     	; 0x60fc <__mulsf3_pse+0x9e>
    60c2:	88 23       	and	r24, r24
    60c4:	4a f0       	brmi	.+18     	; 0x60d8 <__mulsf3_pse+0x7a>
    60c6:	ee 0f       	add	r30, r30
    60c8:	ff 1f       	adc	r31, r31
    60ca:	bb 1f       	adc	r27, r27
    60cc:	66 1f       	adc	r22, r22
    60ce:	77 1f       	adc	r23, r23
    60d0:	88 1f       	adc	r24, r24
    60d2:	91 50       	subi	r25, 0x01	; 1
    60d4:	50 40       	sbci	r21, 0x00	; 0
    60d6:	a9 f7       	brne	.-22     	; 0x60c2 <__mulsf3_pse+0x64>
    60d8:	9e 3f       	cpi	r25, 0xFE	; 254
    60da:	51 05       	cpc	r21, r1
    60dc:	78 f0       	brcs	.+30     	; 0x60fc <__mulsf3_pse+0x9e>
    60de:	87 cf       	rjmp	.-242    	; 0x5fee <__fp_inf>
    60e0:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__fp_szero>
    60e4:	5f 3f       	cpi	r21, 0xFF	; 255
    60e6:	e4 f3       	brlt	.-8      	; 0x60e0 <__mulsf3_pse+0x82>
    60e8:	98 3e       	cpi	r25, 0xE8	; 232
    60ea:	d4 f3       	brlt	.-12     	; 0x60e0 <__mulsf3_pse+0x82>
    60ec:	86 95       	lsr	r24
    60ee:	77 95       	ror	r23
    60f0:	67 95       	ror	r22
    60f2:	b7 95       	ror	r27
    60f4:	f7 95       	ror	r31
    60f6:	e7 95       	ror	r30
    60f8:	9f 5f       	subi	r25, 0xFF	; 255
    60fa:	c1 f7       	brne	.-16     	; 0x60ec <__mulsf3_pse+0x8e>
    60fc:	fe 2b       	or	r31, r30
    60fe:	88 0f       	add	r24, r24
    6100:	91 1d       	adc	r25, r1
    6102:	96 95       	lsr	r25
    6104:	87 95       	ror	r24
    6106:	97 f9       	bld	r25, 7
    6108:	08 95       	ret

0000610a <__udivmodsi4>:
    610a:	a1 e2       	ldi	r26, 0x21	; 33
    610c:	1a 2e       	mov	r1, r26
    610e:	aa 1b       	sub	r26, r26
    6110:	bb 1b       	sub	r27, r27
    6112:	fd 01       	movw	r30, r26
    6114:	0d c0       	rjmp	.+26     	; 0x6130 <__udivmodsi4_ep>

00006116 <__udivmodsi4_loop>:
    6116:	aa 1f       	adc	r26, r26
    6118:	bb 1f       	adc	r27, r27
    611a:	ee 1f       	adc	r30, r30
    611c:	ff 1f       	adc	r31, r31
    611e:	a2 17       	cp	r26, r18
    6120:	b3 07       	cpc	r27, r19
    6122:	e4 07       	cpc	r30, r20
    6124:	f5 07       	cpc	r31, r21
    6126:	20 f0       	brcs	.+8      	; 0x6130 <__udivmodsi4_ep>
    6128:	a2 1b       	sub	r26, r18
    612a:	b3 0b       	sbc	r27, r19
    612c:	e4 0b       	sbc	r30, r20
    612e:	f5 0b       	sbc	r31, r21

00006130 <__udivmodsi4_ep>:
    6130:	66 1f       	adc	r22, r22
    6132:	77 1f       	adc	r23, r23
    6134:	88 1f       	adc	r24, r24
    6136:	99 1f       	adc	r25, r25
    6138:	1a 94       	dec	r1
    613a:	69 f7       	brne	.-38     	; 0x6116 <__udivmodsi4_loop>
    613c:	60 95       	com	r22
    613e:	70 95       	com	r23
    6140:	80 95       	com	r24
    6142:	90 95       	com	r25
    6144:	9b 01       	movw	r18, r22
    6146:	ac 01       	movw	r20, r24
    6148:	bd 01       	movw	r22, r26
    614a:	cf 01       	movw	r24, r30
    614c:	08 95       	ret

0000614e <__tablejump2__>:
    614e:	ee 0f       	add	r30, r30
    6150:	ff 1f       	adc	r31, r31
    6152:	88 1f       	adc	r24, r24
    6154:	8b bf       	out	0x3b, r24	; 59
    6156:	07 90       	elpm	r0, Z+
    6158:	f6 91       	elpm	r31, Z
    615a:	e0 2d       	mov	r30, r0
    615c:	19 94       	eijmp

0000615e <malloc>:
    615e:	0f 93       	push	r16
    6160:	1f 93       	push	r17
    6162:	cf 93       	push	r28
    6164:	df 93       	push	r29
    6166:	82 30       	cpi	r24, 0x02	; 2
    6168:	91 05       	cpc	r25, r1
    616a:	10 f4       	brcc	.+4      	; 0x6170 <malloc+0x12>
    616c:	82 e0       	ldi	r24, 0x02	; 2
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	e0 91 99 18 	lds	r30, 0x1899	; 0x801899 <__flp>
    6174:	f0 91 9a 18 	lds	r31, 0x189A	; 0x80189a <__flp+0x1>
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	a0 e0       	ldi	r26, 0x00	; 0
    617e:	b0 e0       	ldi	r27, 0x00	; 0
    6180:	30 97       	sbiw	r30, 0x00	; 0
    6182:	19 f1       	breq	.+70     	; 0x61ca <malloc+0x6c>
    6184:	40 81       	ld	r20, Z
    6186:	51 81       	ldd	r21, Z+1	; 0x01
    6188:	02 81       	ldd	r16, Z+2	; 0x02
    618a:	13 81       	ldd	r17, Z+3	; 0x03
    618c:	48 17       	cp	r20, r24
    618e:	59 07       	cpc	r21, r25
    6190:	c8 f0       	brcs	.+50     	; 0x61c4 <malloc+0x66>
    6192:	84 17       	cp	r24, r20
    6194:	95 07       	cpc	r25, r21
    6196:	69 f4       	brne	.+26     	; 0x61b2 <malloc+0x54>
    6198:	10 97       	sbiw	r26, 0x00	; 0
    619a:	31 f0       	breq	.+12     	; 0x61a8 <malloc+0x4a>
    619c:	12 96       	adiw	r26, 0x02	; 2
    619e:	0c 93       	st	X, r16
    61a0:	12 97       	sbiw	r26, 0x02	; 2
    61a2:	13 96       	adiw	r26, 0x03	; 3
    61a4:	1c 93       	st	X, r17
    61a6:	27 c0       	rjmp	.+78     	; 0x61f6 <malloc+0x98>
    61a8:	00 93 99 18 	sts	0x1899, r16	; 0x801899 <__flp>
    61ac:	10 93 9a 18 	sts	0x189A, r17	; 0x80189a <__flp+0x1>
    61b0:	22 c0       	rjmp	.+68     	; 0x61f6 <malloc+0x98>
    61b2:	21 15       	cp	r18, r1
    61b4:	31 05       	cpc	r19, r1
    61b6:	19 f0       	breq	.+6      	; 0x61be <malloc+0x60>
    61b8:	42 17       	cp	r20, r18
    61ba:	53 07       	cpc	r21, r19
    61bc:	18 f4       	brcc	.+6      	; 0x61c4 <malloc+0x66>
    61be:	9a 01       	movw	r18, r20
    61c0:	bd 01       	movw	r22, r26
    61c2:	ef 01       	movw	r28, r30
    61c4:	df 01       	movw	r26, r30
    61c6:	f8 01       	movw	r30, r16
    61c8:	db cf       	rjmp	.-74     	; 0x6180 <malloc+0x22>
    61ca:	21 15       	cp	r18, r1
    61cc:	31 05       	cpc	r19, r1
    61ce:	f9 f0       	breq	.+62     	; 0x620e <malloc+0xb0>
    61d0:	28 1b       	sub	r18, r24
    61d2:	39 0b       	sbc	r19, r25
    61d4:	24 30       	cpi	r18, 0x04	; 4
    61d6:	31 05       	cpc	r19, r1
    61d8:	80 f4       	brcc	.+32     	; 0x61fa <malloc+0x9c>
    61da:	8a 81       	ldd	r24, Y+2	; 0x02
    61dc:	9b 81       	ldd	r25, Y+3	; 0x03
    61de:	61 15       	cp	r22, r1
    61e0:	71 05       	cpc	r23, r1
    61e2:	21 f0       	breq	.+8      	; 0x61ec <malloc+0x8e>
    61e4:	fb 01       	movw	r30, r22
    61e6:	93 83       	std	Z+3, r25	; 0x03
    61e8:	82 83       	std	Z+2, r24	; 0x02
    61ea:	04 c0       	rjmp	.+8      	; 0x61f4 <malloc+0x96>
    61ec:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <__flp+0x1>
    61f0:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <__flp>
    61f4:	fe 01       	movw	r30, r28
    61f6:	32 96       	adiw	r30, 0x02	; 2
    61f8:	44 c0       	rjmp	.+136    	; 0x6282 <malloc+0x124>
    61fa:	fe 01       	movw	r30, r28
    61fc:	e2 0f       	add	r30, r18
    61fe:	f3 1f       	adc	r31, r19
    6200:	81 93       	st	Z+, r24
    6202:	91 93       	st	Z+, r25
    6204:	22 50       	subi	r18, 0x02	; 2
    6206:	31 09       	sbc	r19, r1
    6208:	39 83       	std	Y+1, r19	; 0x01
    620a:	28 83       	st	Y, r18
    620c:	3a c0       	rjmp	.+116    	; 0x6282 <malloc+0x124>
    620e:	20 91 97 18 	lds	r18, 0x1897	; 0x801897 <__brkval>
    6212:	30 91 98 18 	lds	r19, 0x1898	; 0x801898 <__brkval+0x1>
    6216:	23 2b       	or	r18, r19
    6218:	41 f4       	brne	.+16     	; 0x622a <malloc+0xcc>
    621a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    621e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6222:	30 93 98 18 	sts	0x1898, r19	; 0x801898 <__brkval+0x1>
    6226:	20 93 97 18 	sts	0x1897, r18	; 0x801897 <__brkval>
    622a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    622e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6232:	21 15       	cp	r18, r1
    6234:	31 05       	cpc	r19, r1
    6236:	41 f4       	brne	.+16     	; 0x6248 <malloc+0xea>
    6238:	2d b7       	in	r18, 0x3d	; 61
    623a:	3e b7       	in	r19, 0x3e	; 62
    623c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6240:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6244:	24 1b       	sub	r18, r20
    6246:	35 0b       	sbc	r19, r21
    6248:	e0 91 97 18 	lds	r30, 0x1897	; 0x801897 <__brkval>
    624c:	f0 91 98 18 	lds	r31, 0x1898	; 0x801898 <__brkval+0x1>
    6250:	e2 17       	cp	r30, r18
    6252:	f3 07       	cpc	r31, r19
    6254:	a0 f4       	brcc	.+40     	; 0x627e <malloc+0x120>
    6256:	2e 1b       	sub	r18, r30
    6258:	3f 0b       	sbc	r19, r31
    625a:	28 17       	cp	r18, r24
    625c:	39 07       	cpc	r19, r25
    625e:	78 f0       	brcs	.+30     	; 0x627e <malloc+0x120>
    6260:	ac 01       	movw	r20, r24
    6262:	4e 5f       	subi	r20, 0xFE	; 254
    6264:	5f 4f       	sbci	r21, 0xFF	; 255
    6266:	24 17       	cp	r18, r20
    6268:	35 07       	cpc	r19, r21
    626a:	48 f0       	brcs	.+18     	; 0x627e <malloc+0x120>
    626c:	4e 0f       	add	r20, r30
    626e:	5f 1f       	adc	r21, r31
    6270:	50 93 98 18 	sts	0x1898, r21	; 0x801898 <__brkval+0x1>
    6274:	40 93 97 18 	sts	0x1897, r20	; 0x801897 <__brkval>
    6278:	81 93       	st	Z+, r24
    627a:	91 93       	st	Z+, r25
    627c:	02 c0       	rjmp	.+4      	; 0x6282 <malloc+0x124>
    627e:	e0 e0       	ldi	r30, 0x00	; 0
    6280:	f0 e0       	ldi	r31, 0x00	; 0
    6282:	cf 01       	movw	r24, r30
    6284:	df 91       	pop	r29
    6286:	cf 91       	pop	r28
    6288:	1f 91       	pop	r17
    628a:	0f 91       	pop	r16
    628c:	08 95       	ret

0000628e <free>:
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	00 97       	sbiw	r24, 0x00	; 0
    6294:	09 f4       	brne	.+2      	; 0x6298 <free+0xa>
    6296:	81 c0       	rjmp	.+258    	; 0x639a <free+0x10c>
    6298:	fc 01       	movw	r30, r24
    629a:	32 97       	sbiw	r30, 0x02	; 2
    629c:	13 82       	std	Z+3, r1	; 0x03
    629e:	12 82       	std	Z+2, r1	; 0x02
    62a0:	a0 91 99 18 	lds	r26, 0x1899	; 0x801899 <__flp>
    62a4:	b0 91 9a 18 	lds	r27, 0x189A	; 0x80189a <__flp+0x1>
    62a8:	10 97       	sbiw	r26, 0x00	; 0
    62aa:	81 f4       	brne	.+32     	; 0x62cc <free+0x3e>
    62ac:	20 81       	ld	r18, Z
    62ae:	31 81       	ldd	r19, Z+1	; 0x01
    62b0:	82 0f       	add	r24, r18
    62b2:	93 1f       	adc	r25, r19
    62b4:	20 91 97 18 	lds	r18, 0x1897	; 0x801897 <__brkval>
    62b8:	30 91 98 18 	lds	r19, 0x1898	; 0x801898 <__brkval+0x1>
    62bc:	28 17       	cp	r18, r24
    62be:	39 07       	cpc	r19, r25
    62c0:	51 f5       	brne	.+84     	; 0x6316 <free+0x88>
    62c2:	f0 93 98 18 	sts	0x1898, r31	; 0x801898 <__brkval+0x1>
    62c6:	e0 93 97 18 	sts	0x1897, r30	; 0x801897 <__brkval>
    62ca:	67 c0       	rjmp	.+206    	; 0x639a <free+0x10c>
    62cc:	ed 01       	movw	r28, r26
    62ce:	20 e0       	ldi	r18, 0x00	; 0
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	ce 17       	cp	r28, r30
    62d4:	df 07       	cpc	r29, r31
    62d6:	40 f4       	brcc	.+16     	; 0x62e8 <free+0x5a>
    62d8:	4a 81       	ldd	r20, Y+2	; 0x02
    62da:	5b 81       	ldd	r21, Y+3	; 0x03
    62dc:	9e 01       	movw	r18, r28
    62de:	41 15       	cp	r20, r1
    62e0:	51 05       	cpc	r21, r1
    62e2:	f1 f0       	breq	.+60     	; 0x6320 <free+0x92>
    62e4:	ea 01       	movw	r28, r20
    62e6:	f5 cf       	rjmp	.-22     	; 0x62d2 <free+0x44>
    62e8:	d3 83       	std	Z+3, r29	; 0x03
    62ea:	c2 83       	std	Z+2, r28	; 0x02
    62ec:	40 81       	ld	r20, Z
    62ee:	51 81       	ldd	r21, Z+1	; 0x01
    62f0:	84 0f       	add	r24, r20
    62f2:	95 1f       	adc	r25, r21
    62f4:	c8 17       	cp	r28, r24
    62f6:	d9 07       	cpc	r29, r25
    62f8:	59 f4       	brne	.+22     	; 0x6310 <free+0x82>
    62fa:	88 81       	ld	r24, Y
    62fc:	99 81       	ldd	r25, Y+1	; 0x01
    62fe:	84 0f       	add	r24, r20
    6300:	95 1f       	adc	r25, r21
    6302:	02 96       	adiw	r24, 0x02	; 2
    6304:	91 83       	std	Z+1, r25	; 0x01
    6306:	80 83       	st	Z, r24
    6308:	8a 81       	ldd	r24, Y+2	; 0x02
    630a:	9b 81       	ldd	r25, Y+3	; 0x03
    630c:	93 83       	std	Z+3, r25	; 0x03
    630e:	82 83       	std	Z+2, r24	; 0x02
    6310:	21 15       	cp	r18, r1
    6312:	31 05       	cpc	r19, r1
    6314:	29 f4       	brne	.+10     	; 0x6320 <free+0x92>
    6316:	f0 93 9a 18 	sts	0x189A, r31	; 0x80189a <__flp+0x1>
    631a:	e0 93 99 18 	sts	0x1899, r30	; 0x801899 <__flp>
    631e:	3d c0       	rjmp	.+122    	; 0x639a <free+0x10c>
    6320:	e9 01       	movw	r28, r18
    6322:	fb 83       	std	Y+3, r31	; 0x03
    6324:	ea 83       	std	Y+2, r30	; 0x02
    6326:	49 91       	ld	r20, Y+
    6328:	59 91       	ld	r21, Y+
    632a:	c4 0f       	add	r28, r20
    632c:	d5 1f       	adc	r29, r21
    632e:	ec 17       	cp	r30, r28
    6330:	fd 07       	cpc	r31, r29
    6332:	61 f4       	brne	.+24     	; 0x634c <free+0xbe>
    6334:	80 81       	ld	r24, Z
    6336:	91 81       	ldd	r25, Z+1	; 0x01
    6338:	84 0f       	add	r24, r20
    633a:	95 1f       	adc	r25, r21
    633c:	02 96       	adiw	r24, 0x02	; 2
    633e:	e9 01       	movw	r28, r18
    6340:	99 83       	std	Y+1, r25	; 0x01
    6342:	88 83       	st	Y, r24
    6344:	82 81       	ldd	r24, Z+2	; 0x02
    6346:	93 81       	ldd	r25, Z+3	; 0x03
    6348:	9b 83       	std	Y+3, r25	; 0x03
    634a:	8a 83       	std	Y+2, r24	; 0x02
    634c:	e0 e0       	ldi	r30, 0x00	; 0
    634e:	f0 e0       	ldi	r31, 0x00	; 0
    6350:	12 96       	adiw	r26, 0x02	; 2
    6352:	8d 91       	ld	r24, X+
    6354:	9c 91       	ld	r25, X
    6356:	13 97       	sbiw	r26, 0x03	; 3
    6358:	00 97       	sbiw	r24, 0x00	; 0
    635a:	19 f0       	breq	.+6      	; 0x6362 <free+0xd4>
    635c:	fd 01       	movw	r30, r26
    635e:	dc 01       	movw	r26, r24
    6360:	f7 cf       	rjmp	.-18     	; 0x6350 <free+0xc2>
    6362:	8d 91       	ld	r24, X+
    6364:	9c 91       	ld	r25, X
    6366:	11 97       	sbiw	r26, 0x01	; 1
    6368:	9d 01       	movw	r18, r26
    636a:	2e 5f       	subi	r18, 0xFE	; 254
    636c:	3f 4f       	sbci	r19, 0xFF	; 255
    636e:	82 0f       	add	r24, r18
    6370:	93 1f       	adc	r25, r19
    6372:	20 91 97 18 	lds	r18, 0x1897	; 0x801897 <__brkval>
    6376:	30 91 98 18 	lds	r19, 0x1898	; 0x801898 <__brkval+0x1>
    637a:	28 17       	cp	r18, r24
    637c:	39 07       	cpc	r19, r25
    637e:	69 f4       	brne	.+26     	; 0x639a <free+0x10c>
    6380:	30 97       	sbiw	r30, 0x00	; 0
    6382:	29 f4       	brne	.+10     	; 0x638e <free+0x100>
    6384:	10 92 9a 18 	sts	0x189A, r1	; 0x80189a <__flp+0x1>
    6388:	10 92 99 18 	sts	0x1899, r1	; 0x801899 <__flp>
    638c:	02 c0       	rjmp	.+4      	; 0x6392 <free+0x104>
    638e:	13 82       	std	Z+3, r1	; 0x03
    6390:	12 82       	std	Z+2, r1	; 0x02
    6392:	b0 93 98 18 	sts	0x1898, r27	; 0x801898 <__brkval+0x1>
    6396:	a0 93 97 18 	sts	0x1897, r26	; 0x801897 <__brkval>
    639a:	df 91       	pop	r29
    639c:	cf 91       	pop	r28
    639e:	08 95       	ret

000063a0 <abort>:
    63a0:	81 e0       	ldi	r24, 0x01	; 1
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	f8 94       	cli
    63a6:	7d c3       	rjmp	.+1786   	; 0x6aa2 <_exit>

000063a8 <memcpy>:
    63a8:	fb 01       	movw	r30, r22
    63aa:	dc 01       	movw	r26, r24
    63ac:	02 c0       	rjmp	.+4      	; 0x63b2 <memcpy+0xa>
    63ae:	01 90       	ld	r0, Z+
    63b0:	0d 92       	st	X+, r0
    63b2:	41 50       	subi	r20, 0x01	; 1
    63b4:	50 40       	sbci	r21, 0x00	; 0
    63b6:	d8 f7       	brcc	.-10     	; 0x63ae <memcpy+0x6>
    63b8:	08 95       	ret

000063ba <memset>:
    63ba:	dc 01       	movw	r26, r24
    63bc:	01 c0       	rjmp	.+2      	; 0x63c0 <memset+0x6>
    63be:	6d 93       	st	X+, r22
    63c0:	41 50       	subi	r20, 0x01	; 1
    63c2:	50 40       	sbci	r21, 0x00	; 0
    63c4:	e0 f7       	brcc	.-8      	; 0x63be <memset+0x4>
    63c6:	08 95       	ret

000063c8 <strcasestr>:
    63c8:	fb 01       	movw	r30, r22
    63ca:	51 91       	ld	r21, Z+
    63cc:	55 23       	and	r21, r21
    63ce:	b1 f0       	breq	.+44     	; 0x63fc <strcasestr+0x34>
    63d0:	bf 01       	movw	r22, r30
    63d2:	dc 01       	movw	r26, r24
    63d4:	05 2e       	mov	r0, r21
    63d6:	4d 91       	ld	r20, X+
    63d8:	44 23       	and	r20, r20
    63da:	69 f0       	breq	.+26     	; 0x63f6 <strcasestr+0x2e>
    63dc:	10 d0       	rcall	.+32     	; 0x63fe <strcasestr+0x36>
    63de:	d9 f7       	brne	.-10     	; 0x63d6 <strcasestr+0xe>
    63e0:	cd 01       	movw	r24, r26
    63e2:	01 90       	ld	r0, Z+
    63e4:	00 20       	and	r0, r0
    63e6:	49 f0       	breq	.+18     	; 0x63fa <strcasestr+0x32>
    63e8:	4d 91       	ld	r20, X+
    63ea:	41 11       	cpse	r20, r1
    63ec:	08 d0       	rcall	.+16     	; 0x63fe <strcasestr+0x36>
    63ee:	c9 f3       	breq	.-14     	; 0x63e2 <strcasestr+0x1a>
    63f0:	fb 01       	movw	r30, r22
    63f2:	41 11       	cpse	r20, r1
    63f4:	ee cf       	rjmp	.-36     	; 0x63d2 <strcasestr+0xa>
    63f6:	81 e0       	ldi	r24, 0x01	; 1
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	01 97       	sbiw	r24, 0x01	; 1
    63fc:	08 95       	ret
    63fe:	40 25       	eor	r20, r0
    6400:	39 f0       	breq	.+14     	; 0x6410 <strcasestr+0x48>
    6402:	40 32       	cpi	r20, 0x20	; 32
    6404:	29 f4       	brne	.+10     	; 0x6410 <strcasestr+0x48>
    6406:	40 29       	or	r20, r0
    6408:	4b 57       	subi	r20, 0x7B	; 123
    640a:	46 5e       	subi	r20, 0xE6	; 230
    640c:	08 f0       	brcs	.+2      	; 0x6410 <strcasestr+0x48>
    640e:	18 94       	sez
    6410:	08 95       	ret

00006412 <strcat>:
    6412:	fb 01       	movw	r30, r22
    6414:	dc 01       	movw	r26, r24
    6416:	0d 90       	ld	r0, X+
    6418:	00 20       	and	r0, r0
    641a:	e9 f7       	brne	.-6      	; 0x6416 <strcat+0x4>
    641c:	11 97       	sbiw	r26, 0x01	; 1
    641e:	01 90       	ld	r0, Z+
    6420:	0d 92       	st	X+, r0
    6422:	00 20       	and	r0, r0
    6424:	e1 f7       	brne	.-8      	; 0x641e <strcat+0xc>
    6426:	08 95       	ret

00006428 <strcpy>:
    6428:	fb 01       	movw	r30, r22
    642a:	dc 01       	movw	r26, r24
    642c:	01 90       	ld	r0, Z+
    642e:	0d 92       	st	X+, r0
    6430:	00 20       	and	r0, r0
    6432:	e1 f7       	brne	.-8      	; 0x642c <strcpy+0x4>
    6434:	08 95       	ret

00006436 <strncasecmp>:
    6436:	fb 01       	movw	r30, r22
    6438:	dc 01       	movw	r26, r24
    643a:	41 50       	subi	r20, 0x01	; 1
    643c:	50 40       	sbci	r21, 0x00	; 0
    643e:	88 f0       	brcs	.+34     	; 0x6462 <strncasecmp+0x2c>
    6440:	8d 91       	ld	r24, X+
    6442:	81 34       	cpi	r24, 0x41	; 65
    6444:	1c f0       	brlt	.+6      	; 0x644c <strncasecmp+0x16>
    6446:	8b 35       	cpi	r24, 0x5B	; 91
    6448:	0c f4       	brge	.+2      	; 0x644c <strncasecmp+0x16>
    644a:	80 5e       	subi	r24, 0xE0	; 224
    644c:	61 91       	ld	r22, Z+
    644e:	61 34       	cpi	r22, 0x41	; 65
    6450:	1c f0       	brlt	.+6      	; 0x6458 <strncasecmp+0x22>
    6452:	6b 35       	cpi	r22, 0x5B	; 91
    6454:	0c f4       	brge	.+2      	; 0x6458 <strncasecmp+0x22>
    6456:	60 5e       	subi	r22, 0xE0	; 224
    6458:	86 1b       	sub	r24, r22
    645a:	61 11       	cpse	r22, r1
    645c:	71 f3       	breq	.-36     	; 0x643a <strncasecmp+0x4>
    645e:	99 0b       	sbc	r25, r25
    6460:	08 95       	ret
    6462:	88 1b       	sub	r24, r24
    6464:	fc cf       	rjmp	.-8      	; 0x645e <strncasecmp+0x28>

00006466 <printf>:
    6466:	cf 93       	push	r28
    6468:	df 93       	push	r29
    646a:	cd b7       	in	r28, 0x3d	; 61
    646c:	de b7       	in	r29, 0x3e	; 62
    646e:	ae 01       	movw	r20, r28
    6470:	4a 5f       	subi	r20, 0xFA	; 250
    6472:	5f 4f       	sbci	r21, 0xFF	; 255
    6474:	fa 01       	movw	r30, r20
    6476:	61 91       	ld	r22, Z+
    6478:	71 91       	ld	r23, Z+
    647a:	af 01       	movw	r20, r30
    647c:	80 91 9d 18 	lds	r24, 0x189D	; 0x80189d <__iob+0x2>
    6480:	90 91 9e 18 	lds	r25, 0x189E	; 0x80189e <__iob+0x3>
    6484:	61 d0       	rcall	.+194    	; 0x6548 <vfprintf>
    6486:	df 91       	pop	r29
    6488:	cf 91       	pop	r28
    648a:	08 95       	ret

0000648c <puts>:
    648c:	0f 93       	push	r16
    648e:	1f 93       	push	r17
    6490:	cf 93       	push	r28
    6492:	df 93       	push	r29
    6494:	e0 91 9d 18 	lds	r30, 0x189D	; 0x80189d <__iob+0x2>
    6498:	f0 91 9e 18 	lds	r31, 0x189E	; 0x80189e <__iob+0x3>
    649c:	23 81       	ldd	r18, Z+3	; 0x03
    649e:	21 ff       	sbrs	r18, 1
    64a0:	1b c0       	rjmp	.+54     	; 0x64d8 <puts+0x4c>
    64a2:	8c 01       	movw	r16, r24
    64a4:	d0 e0       	ldi	r29, 0x00	; 0
    64a6:	c0 e0       	ldi	r28, 0x00	; 0
    64a8:	f8 01       	movw	r30, r16
    64aa:	81 91       	ld	r24, Z+
    64ac:	8f 01       	movw	r16, r30
    64ae:	60 91 9d 18 	lds	r22, 0x189D	; 0x80189d <__iob+0x2>
    64b2:	70 91 9e 18 	lds	r23, 0x189E	; 0x80189e <__iob+0x3>
    64b6:	db 01       	movw	r26, r22
    64b8:	18 96       	adiw	r26, 0x08	; 8
    64ba:	ed 91       	ld	r30, X+
    64bc:	fc 91       	ld	r31, X
    64be:	19 97       	sbiw	r26, 0x09	; 9
    64c0:	88 23       	and	r24, r24
    64c2:	31 f0       	breq	.+12     	; 0x64d0 <puts+0x44>
    64c4:	19 95       	eicall
    64c6:	89 2b       	or	r24, r25
    64c8:	79 f3       	breq	.-34     	; 0x64a8 <puts+0x1c>
    64ca:	df ef       	ldi	r29, 0xFF	; 255
    64cc:	cf ef       	ldi	r28, 0xFF	; 255
    64ce:	ec cf       	rjmp	.-40     	; 0x64a8 <puts+0x1c>
    64d0:	8a e0       	ldi	r24, 0x0A	; 10
    64d2:	19 95       	eicall
    64d4:	89 2b       	or	r24, r25
    64d6:	19 f0       	breq	.+6      	; 0x64de <puts+0x52>
    64d8:	8f ef       	ldi	r24, 0xFF	; 255
    64da:	9f ef       	ldi	r25, 0xFF	; 255
    64dc:	02 c0       	rjmp	.+4      	; 0x64e2 <puts+0x56>
    64de:	8d 2f       	mov	r24, r29
    64e0:	9c 2f       	mov	r25, r28
    64e2:	df 91       	pop	r29
    64e4:	cf 91       	pop	r28
    64e6:	1f 91       	pop	r17
    64e8:	0f 91       	pop	r16
    64ea:	08 95       	ret

000064ec <sprintf>:
    64ec:	0f 93       	push	r16
    64ee:	1f 93       	push	r17
    64f0:	cf 93       	push	r28
    64f2:	df 93       	push	r29
    64f4:	cd b7       	in	r28, 0x3d	; 61
    64f6:	de b7       	in	r29, 0x3e	; 62
    64f8:	2e 97       	sbiw	r28, 0x0e	; 14
    64fa:	0f b6       	in	r0, 0x3f	; 63
    64fc:	f8 94       	cli
    64fe:	de bf       	out	0x3e, r29	; 62
    6500:	0f be       	out	0x3f, r0	; 63
    6502:	cd bf       	out	0x3d, r28	; 61
    6504:	0e 89       	ldd	r16, Y+22	; 0x16
    6506:	1f 89       	ldd	r17, Y+23	; 0x17
    6508:	86 e0       	ldi	r24, 0x06	; 6
    650a:	8c 83       	std	Y+4, r24	; 0x04
    650c:	1a 83       	std	Y+2, r17	; 0x02
    650e:	09 83       	std	Y+1, r16	; 0x01
    6510:	8f ef       	ldi	r24, 0xFF	; 255
    6512:	9f e7       	ldi	r25, 0x7F	; 127
    6514:	9e 83       	std	Y+6, r25	; 0x06
    6516:	8d 83       	std	Y+5, r24	; 0x05
    6518:	ae 01       	movw	r20, r28
    651a:	46 5e       	subi	r20, 0xE6	; 230
    651c:	5f 4f       	sbci	r21, 0xFF	; 255
    651e:	68 8d       	ldd	r22, Y+24	; 0x18
    6520:	79 8d       	ldd	r23, Y+25	; 0x19
    6522:	ce 01       	movw	r24, r28
    6524:	01 96       	adiw	r24, 0x01	; 1
    6526:	10 d0       	rcall	.+32     	; 0x6548 <vfprintf>
    6528:	ef 81       	ldd	r30, Y+7	; 0x07
    652a:	f8 85       	ldd	r31, Y+8	; 0x08
    652c:	e0 0f       	add	r30, r16
    652e:	f1 1f       	adc	r31, r17
    6530:	10 82       	st	Z, r1
    6532:	2e 96       	adiw	r28, 0x0e	; 14
    6534:	0f b6       	in	r0, 0x3f	; 63
    6536:	f8 94       	cli
    6538:	de bf       	out	0x3e, r29	; 62
    653a:	0f be       	out	0x3f, r0	; 63
    653c:	cd bf       	out	0x3d, r28	; 61
    653e:	df 91       	pop	r29
    6540:	cf 91       	pop	r28
    6542:	1f 91       	pop	r17
    6544:	0f 91       	pop	r16
    6546:	08 95       	ret

00006548 <vfprintf>:
    6548:	2f 92       	push	r2
    654a:	3f 92       	push	r3
    654c:	4f 92       	push	r4
    654e:	5f 92       	push	r5
    6550:	6f 92       	push	r6
    6552:	7f 92       	push	r7
    6554:	8f 92       	push	r8
    6556:	9f 92       	push	r9
    6558:	af 92       	push	r10
    655a:	bf 92       	push	r11
    655c:	cf 92       	push	r12
    655e:	df 92       	push	r13
    6560:	ef 92       	push	r14
    6562:	ff 92       	push	r15
    6564:	0f 93       	push	r16
    6566:	1f 93       	push	r17
    6568:	cf 93       	push	r28
    656a:	df 93       	push	r29
    656c:	cd b7       	in	r28, 0x3d	; 61
    656e:	de b7       	in	r29, 0x3e	; 62
    6570:	2b 97       	sbiw	r28, 0x0b	; 11
    6572:	0f b6       	in	r0, 0x3f	; 63
    6574:	f8 94       	cli
    6576:	de bf       	out	0x3e, r29	; 62
    6578:	0f be       	out	0x3f, r0	; 63
    657a:	cd bf       	out	0x3d, r28	; 61
    657c:	6c 01       	movw	r12, r24
    657e:	7b 01       	movw	r14, r22
    6580:	8a 01       	movw	r16, r20
    6582:	fc 01       	movw	r30, r24
    6584:	17 82       	std	Z+7, r1	; 0x07
    6586:	16 82       	std	Z+6, r1	; 0x06
    6588:	83 81       	ldd	r24, Z+3	; 0x03
    658a:	81 ff       	sbrs	r24, 1
    658c:	bf c1       	rjmp	.+894    	; 0x690c <vfprintf+0x3c4>
    658e:	ce 01       	movw	r24, r28
    6590:	01 96       	adiw	r24, 0x01	; 1
    6592:	3c 01       	movw	r6, r24
    6594:	f6 01       	movw	r30, r12
    6596:	93 81       	ldd	r25, Z+3	; 0x03
    6598:	f7 01       	movw	r30, r14
    659a:	93 fd       	sbrc	r25, 3
    659c:	85 91       	lpm	r24, Z+
    659e:	93 ff       	sbrs	r25, 3
    65a0:	81 91       	ld	r24, Z+
    65a2:	7f 01       	movw	r14, r30
    65a4:	88 23       	and	r24, r24
    65a6:	09 f4       	brne	.+2      	; 0x65aa <vfprintf+0x62>
    65a8:	ad c1       	rjmp	.+858    	; 0x6904 <vfprintf+0x3bc>
    65aa:	85 32       	cpi	r24, 0x25	; 37
    65ac:	39 f4       	brne	.+14     	; 0x65bc <vfprintf+0x74>
    65ae:	93 fd       	sbrc	r25, 3
    65b0:	85 91       	lpm	r24, Z+
    65b2:	93 ff       	sbrs	r25, 3
    65b4:	81 91       	ld	r24, Z+
    65b6:	7f 01       	movw	r14, r30
    65b8:	85 32       	cpi	r24, 0x25	; 37
    65ba:	21 f4       	brne	.+8      	; 0x65c4 <vfprintf+0x7c>
    65bc:	b6 01       	movw	r22, r12
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	d6 d1       	rcall	.+940    	; 0x696e <fputc>
    65c2:	e8 cf       	rjmp	.-48     	; 0x6594 <vfprintf+0x4c>
    65c4:	91 2c       	mov	r9, r1
    65c6:	21 2c       	mov	r2, r1
    65c8:	31 2c       	mov	r3, r1
    65ca:	ff e1       	ldi	r31, 0x1F	; 31
    65cc:	f3 15       	cp	r31, r3
    65ce:	d8 f0       	brcs	.+54     	; 0x6606 <vfprintf+0xbe>
    65d0:	8b 32       	cpi	r24, 0x2B	; 43
    65d2:	79 f0       	breq	.+30     	; 0x65f2 <vfprintf+0xaa>
    65d4:	38 f4       	brcc	.+14     	; 0x65e4 <vfprintf+0x9c>
    65d6:	80 32       	cpi	r24, 0x20	; 32
    65d8:	79 f0       	breq	.+30     	; 0x65f8 <vfprintf+0xb0>
    65da:	83 32       	cpi	r24, 0x23	; 35
    65dc:	a1 f4       	brne	.+40     	; 0x6606 <vfprintf+0xbe>
    65de:	23 2d       	mov	r18, r3
    65e0:	20 61       	ori	r18, 0x10	; 16
    65e2:	1d c0       	rjmp	.+58     	; 0x661e <vfprintf+0xd6>
    65e4:	8d 32       	cpi	r24, 0x2D	; 45
    65e6:	61 f0       	breq	.+24     	; 0x6600 <vfprintf+0xb8>
    65e8:	80 33       	cpi	r24, 0x30	; 48
    65ea:	69 f4       	brne	.+26     	; 0x6606 <vfprintf+0xbe>
    65ec:	23 2d       	mov	r18, r3
    65ee:	21 60       	ori	r18, 0x01	; 1
    65f0:	16 c0       	rjmp	.+44     	; 0x661e <vfprintf+0xd6>
    65f2:	83 2d       	mov	r24, r3
    65f4:	82 60       	ori	r24, 0x02	; 2
    65f6:	38 2e       	mov	r3, r24
    65f8:	e3 2d       	mov	r30, r3
    65fa:	e4 60       	ori	r30, 0x04	; 4
    65fc:	3e 2e       	mov	r3, r30
    65fe:	2a c0       	rjmp	.+84     	; 0x6654 <vfprintf+0x10c>
    6600:	f3 2d       	mov	r31, r3
    6602:	f8 60       	ori	r31, 0x08	; 8
    6604:	1d c0       	rjmp	.+58     	; 0x6640 <vfprintf+0xf8>
    6606:	37 fc       	sbrc	r3, 7
    6608:	2d c0       	rjmp	.+90     	; 0x6664 <vfprintf+0x11c>
    660a:	20 ed       	ldi	r18, 0xD0	; 208
    660c:	28 0f       	add	r18, r24
    660e:	2a 30       	cpi	r18, 0x0A	; 10
    6610:	40 f0       	brcs	.+16     	; 0x6622 <vfprintf+0xda>
    6612:	8e 32       	cpi	r24, 0x2E	; 46
    6614:	b9 f4       	brne	.+46     	; 0x6644 <vfprintf+0xfc>
    6616:	36 fc       	sbrc	r3, 6
    6618:	75 c1       	rjmp	.+746    	; 0x6904 <vfprintf+0x3bc>
    661a:	23 2d       	mov	r18, r3
    661c:	20 64       	ori	r18, 0x40	; 64
    661e:	32 2e       	mov	r3, r18
    6620:	19 c0       	rjmp	.+50     	; 0x6654 <vfprintf+0x10c>
    6622:	36 fe       	sbrs	r3, 6
    6624:	06 c0       	rjmp	.+12     	; 0x6632 <vfprintf+0xea>
    6626:	8a e0       	ldi	r24, 0x0A	; 10
    6628:	98 9e       	mul	r9, r24
    662a:	20 0d       	add	r18, r0
    662c:	11 24       	eor	r1, r1
    662e:	92 2e       	mov	r9, r18
    6630:	11 c0       	rjmp	.+34     	; 0x6654 <vfprintf+0x10c>
    6632:	ea e0       	ldi	r30, 0x0A	; 10
    6634:	2e 9e       	mul	r2, r30
    6636:	20 0d       	add	r18, r0
    6638:	11 24       	eor	r1, r1
    663a:	22 2e       	mov	r2, r18
    663c:	f3 2d       	mov	r31, r3
    663e:	f0 62       	ori	r31, 0x20	; 32
    6640:	3f 2e       	mov	r3, r31
    6642:	08 c0       	rjmp	.+16     	; 0x6654 <vfprintf+0x10c>
    6644:	8c 36       	cpi	r24, 0x6C	; 108
    6646:	21 f4       	brne	.+8      	; 0x6650 <vfprintf+0x108>
    6648:	83 2d       	mov	r24, r3
    664a:	80 68       	ori	r24, 0x80	; 128
    664c:	38 2e       	mov	r3, r24
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <vfprintf+0x10c>
    6650:	88 36       	cpi	r24, 0x68	; 104
    6652:	41 f4       	brne	.+16     	; 0x6664 <vfprintf+0x11c>
    6654:	f7 01       	movw	r30, r14
    6656:	93 fd       	sbrc	r25, 3
    6658:	85 91       	lpm	r24, Z+
    665a:	93 ff       	sbrs	r25, 3
    665c:	81 91       	ld	r24, Z+
    665e:	7f 01       	movw	r14, r30
    6660:	81 11       	cpse	r24, r1
    6662:	b3 cf       	rjmp	.-154    	; 0x65ca <vfprintf+0x82>
    6664:	98 2f       	mov	r25, r24
    6666:	9f 7d       	andi	r25, 0xDF	; 223
    6668:	95 54       	subi	r25, 0x45	; 69
    666a:	93 30       	cpi	r25, 0x03	; 3
    666c:	28 f4       	brcc	.+10     	; 0x6678 <vfprintf+0x130>
    666e:	0c 5f       	subi	r16, 0xFC	; 252
    6670:	1f 4f       	sbci	r17, 0xFF	; 255
    6672:	9f e3       	ldi	r25, 0x3F	; 63
    6674:	99 83       	std	Y+1, r25	; 0x01
    6676:	0d c0       	rjmp	.+26     	; 0x6692 <vfprintf+0x14a>
    6678:	83 36       	cpi	r24, 0x63	; 99
    667a:	31 f0       	breq	.+12     	; 0x6688 <vfprintf+0x140>
    667c:	83 37       	cpi	r24, 0x73	; 115
    667e:	71 f0       	breq	.+28     	; 0x669c <vfprintf+0x154>
    6680:	83 35       	cpi	r24, 0x53	; 83
    6682:	09 f0       	breq	.+2      	; 0x6686 <vfprintf+0x13e>
    6684:	55 c0       	rjmp	.+170    	; 0x6730 <vfprintf+0x1e8>
    6686:	20 c0       	rjmp	.+64     	; 0x66c8 <vfprintf+0x180>
    6688:	f8 01       	movw	r30, r16
    668a:	80 81       	ld	r24, Z
    668c:	89 83       	std	Y+1, r24	; 0x01
    668e:	0e 5f       	subi	r16, 0xFE	; 254
    6690:	1f 4f       	sbci	r17, 0xFF	; 255
    6692:	88 24       	eor	r8, r8
    6694:	83 94       	inc	r8
    6696:	91 2c       	mov	r9, r1
    6698:	53 01       	movw	r10, r6
    669a:	12 c0       	rjmp	.+36     	; 0x66c0 <vfprintf+0x178>
    669c:	28 01       	movw	r4, r16
    669e:	f2 e0       	ldi	r31, 0x02	; 2
    66a0:	4f 0e       	add	r4, r31
    66a2:	51 1c       	adc	r5, r1
    66a4:	f8 01       	movw	r30, r16
    66a6:	a0 80       	ld	r10, Z
    66a8:	b1 80       	ldd	r11, Z+1	; 0x01
    66aa:	36 fe       	sbrs	r3, 6
    66ac:	03 c0       	rjmp	.+6      	; 0x66b4 <vfprintf+0x16c>
    66ae:	69 2d       	mov	r22, r9
    66b0:	70 e0       	ldi	r23, 0x00	; 0
    66b2:	02 c0       	rjmp	.+4      	; 0x66b8 <vfprintf+0x170>
    66b4:	6f ef       	ldi	r22, 0xFF	; 255
    66b6:	7f ef       	ldi	r23, 0xFF	; 255
    66b8:	c5 01       	movw	r24, r10
    66ba:	4e d1       	rcall	.+668    	; 0x6958 <strnlen>
    66bc:	4c 01       	movw	r8, r24
    66be:	82 01       	movw	r16, r4
    66c0:	f3 2d       	mov	r31, r3
    66c2:	ff 77       	andi	r31, 0x7F	; 127
    66c4:	3f 2e       	mov	r3, r31
    66c6:	15 c0       	rjmp	.+42     	; 0x66f2 <vfprintf+0x1aa>
    66c8:	28 01       	movw	r4, r16
    66ca:	22 e0       	ldi	r18, 0x02	; 2
    66cc:	42 0e       	add	r4, r18
    66ce:	51 1c       	adc	r5, r1
    66d0:	f8 01       	movw	r30, r16
    66d2:	a0 80       	ld	r10, Z
    66d4:	b1 80       	ldd	r11, Z+1	; 0x01
    66d6:	36 fe       	sbrs	r3, 6
    66d8:	03 c0       	rjmp	.+6      	; 0x66e0 <vfprintf+0x198>
    66da:	69 2d       	mov	r22, r9
    66dc:	70 e0       	ldi	r23, 0x00	; 0
    66de:	02 c0       	rjmp	.+4      	; 0x66e4 <vfprintf+0x19c>
    66e0:	6f ef       	ldi	r22, 0xFF	; 255
    66e2:	7f ef       	ldi	r23, 0xFF	; 255
    66e4:	c5 01       	movw	r24, r10
    66e6:	2d d1       	rcall	.+602    	; 0x6942 <strnlen_P>
    66e8:	4c 01       	movw	r8, r24
    66ea:	f3 2d       	mov	r31, r3
    66ec:	f0 68       	ori	r31, 0x80	; 128
    66ee:	3f 2e       	mov	r3, r31
    66f0:	82 01       	movw	r16, r4
    66f2:	33 fc       	sbrc	r3, 3
    66f4:	19 c0       	rjmp	.+50     	; 0x6728 <vfprintf+0x1e0>
    66f6:	82 2d       	mov	r24, r2
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	88 16       	cp	r8, r24
    66fc:	99 06       	cpc	r9, r25
    66fe:	a0 f4       	brcc	.+40     	; 0x6728 <vfprintf+0x1e0>
    6700:	b6 01       	movw	r22, r12
    6702:	80 e2       	ldi	r24, 0x20	; 32
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	33 d1       	rcall	.+614    	; 0x696e <fputc>
    6708:	2a 94       	dec	r2
    670a:	f5 cf       	rjmp	.-22     	; 0x66f6 <vfprintf+0x1ae>
    670c:	f5 01       	movw	r30, r10
    670e:	37 fc       	sbrc	r3, 7
    6710:	85 91       	lpm	r24, Z+
    6712:	37 fe       	sbrs	r3, 7
    6714:	81 91       	ld	r24, Z+
    6716:	5f 01       	movw	r10, r30
    6718:	b6 01       	movw	r22, r12
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	28 d1       	rcall	.+592    	; 0x696e <fputc>
    671e:	21 10       	cpse	r2, r1
    6720:	2a 94       	dec	r2
    6722:	21 e0       	ldi	r18, 0x01	; 1
    6724:	82 1a       	sub	r8, r18
    6726:	91 08       	sbc	r9, r1
    6728:	81 14       	cp	r8, r1
    672a:	91 04       	cpc	r9, r1
    672c:	79 f7       	brne	.-34     	; 0x670c <vfprintf+0x1c4>
    672e:	e1 c0       	rjmp	.+450    	; 0x68f2 <vfprintf+0x3aa>
    6730:	84 36       	cpi	r24, 0x64	; 100
    6732:	11 f0       	breq	.+4      	; 0x6738 <vfprintf+0x1f0>
    6734:	89 36       	cpi	r24, 0x69	; 105
    6736:	39 f5       	brne	.+78     	; 0x6786 <vfprintf+0x23e>
    6738:	f8 01       	movw	r30, r16
    673a:	37 fe       	sbrs	r3, 7
    673c:	07 c0       	rjmp	.+14     	; 0x674c <vfprintf+0x204>
    673e:	60 81       	ld	r22, Z
    6740:	71 81       	ldd	r23, Z+1	; 0x01
    6742:	82 81       	ldd	r24, Z+2	; 0x02
    6744:	93 81       	ldd	r25, Z+3	; 0x03
    6746:	0c 5f       	subi	r16, 0xFC	; 252
    6748:	1f 4f       	sbci	r17, 0xFF	; 255
    674a:	08 c0       	rjmp	.+16     	; 0x675c <vfprintf+0x214>
    674c:	60 81       	ld	r22, Z
    674e:	71 81       	ldd	r23, Z+1	; 0x01
    6750:	07 2e       	mov	r0, r23
    6752:	00 0c       	add	r0, r0
    6754:	88 0b       	sbc	r24, r24
    6756:	99 0b       	sbc	r25, r25
    6758:	0e 5f       	subi	r16, 0xFE	; 254
    675a:	1f 4f       	sbci	r17, 0xFF	; 255
    675c:	f3 2d       	mov	r31, r3
    675e:	ff 76       	andi	r31, 0x6F	; 111
    6760:	3f 2e       	mov	r3, r31
    6762:	97 ff       	sbrs	r25, 7
    6764:	09 c0       	rjmp	.+18     	; 0x6778 <vfprintf+0x230>
    6766:	90 95       	com	r25
    6768:	80 95       	com	r24
    676a:	70 95       	com	r23
    676c:	61 95       	neg	r22
    676e:	7f 4f       	sbci	r23, 0xFF	; 255
    6770:	8f 4f       	sbci	r24, 0xFF	; 255
    6772:	9f 4f       	sbci	r25, 0xFF	; 255
    6774:	f0 68       	ori	r31, 0x80	; 128
    6776:	3f 2e       	mov	r3, r31
    6778:	2a e0       	ldi	r18, 0x0A	; 10
    677a:	30 e0       	ldi	r19, 0x00	; 0
    677c:	a3 01       	movw	r20, r6
    677e:	33 d1       	rcall	.+614    	; 0x69e6 <__ultoa_invert>
    6780:	88 2e       	mov	r8, r24
    6782:	86 18       	sub	r8, r6
    6784:	44 c0       	rjmp	.+136    	; 0x680e <vfprintf+0x2c6>
    6786:	85 37       	cpi	r24, 0x75	; 117
    6788:	31 f4       	brne	.+12     	; 0x6796 <vfprintf+0x24e>
    678a:	23 2d       	mov	r18, r3
    678c:	2f 7e       	andi	r18, 0xEF	; 239
    678e:	b2 2e       	mov	r11, r18
    6790:	2a e0       	ldi	r18, 0x0A	; 10
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	25 c0       	rjmp	.+74     	; 0x67e0 <vfprintf+0x298>
    6796:	93 2d       	mov	r25, r3
    6798:	99 7f       	andi	r25, 0xF9	; 249
    679a:	b9 2e       	mov	r11, r25
    679c:	8f 36       	cpi	r24, 0x6F	; 111
    679e:	c1 f0       	breq	.+48     	; 0x67d0 <vfprintf+0x288>
    67a0:	18 f4       	brcc	.+6      	; 0x67a8 <vfprintf+0x260>
    67a2:	88 35       	cpi	r24, 0x58	; 88
    67a4:	79 f0       	breq	.+30     	; 0x67c4 <vfprintf+0x27c>
    67a6:	ae c0       	rjmp	.+348    	; 0x6904 <vfprintf+0x3bc>
    67a8:	80 37       	cpi	r24, 0x70	; 112
    67aa:	19 f0       	breq	.+6      	; 0x67b2 <vfprintf+0x26a>
    67ac:	88 37       	cpi	r24, 0x78	; 120
    67ae:	21 f0       	breq	.+8      	; 0x67b8 <vfprintf+0x270>
    67b0:	a9 c0       	rjmp	.+338    	; 0x6904 <vfprintf+0x3bc>
    67b2:	e9 2f       	mov	r30, r25
    67b4:	e0 61       	ori	r30, 0x10	; 16
    67b6:	be 2e       	mov	r11, r30
    67b8:	b4 fe       	sbrs	r11, 4
    67ba:	0d c0       	rjmp	.+26     	; 0x67d6 <vfprintf+0x28e>
    67bc:	fb 2d       	mov	r31, r11
    67be:	f4 60       	ori	r31, 0x04	; 4
    67c0:	bf 2e       	mov	r11, r31
    67c2:	09 c0       	rjmp	.+18     	; 0x67d6 <vfprintf+0x28e>
    67c4:	34 fe       	sbrs	r3, 4
    67c6:	0a c0       	rjmp	.+20     	; 0x67dc <vfprintf+0x294>
    67c8:	29 2f       	mov	r18, r25
    67ca:	26 60       	ori	r18, 0x06	; 6
    67cc:	b2 2e       	mov	r11, r18
    67ce:	06 c0       	rjmp	.+12     	; 0x67dc <vfprintf+0x294>
    67d0:	28 e0       	ldi	r18, 0x08	; 8
    67d2:	30 e0       	ldi	r19, 0x00	; 0
    67d4:	05 c0       	rjmp	.+10     	; 0x67e0 <vfprintf+0x298>
    67d6:	20 e1       	ldi	r18, 0x10	; 16
    67d8:	30 e0       	ldi	r19, 0x00	; 0
    67da:	02 c0       	rjmp	.+4      	; 0x67e0 <vfprintf+0x298>
    67dc:	20 e1       	ldi	r18, 0x10	; 16
    67de:	32 e0       	ldi	r19, 0x02	; 2
    67e0:	f8 01       	movw	r30, r16
    67e2:	b7 fe       	sbrs	r11, 7
    67e4:	07 c0       	rjmp	.+14     	; 0x67f4 <vfprintf+0x2ac>
    67e6:	60 81       	ld	r22, Z
    67e8:	71 81       	ldd	r23, Z+1	; 0x01
    67ea:	82 81       	ldd	r24, Z+2	; 0x02
    67ec:	93 81       	ldd	r25, Z+3	; 0x03
    67ee:	0c 5f       	subi	r16, 0xFC	; 252
    67f0:	1f 4f       	sbci	r17, 0xFF	; 255
    67f2:	06 c0       	rjmp	.+12     	; 0x6800 <vfprintf+0x2b8>
    67f4:	60 81       	ld	r22, Z
    67f6:	71 81       	ldd	r23, Z+1	; 0x01
    67f8:	80 e0       	ldi	r24, 0x00	; 0
    67fa:	90 e0       	ldi	r25, 0x00	; 0
    67fc:	0e 5f       	subi	r16, 0xFE	; 254
    67fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6800:	a3 01       	movw	r20, r6
    6802:	f1 d0       	rcall	.+482    	; 0x69e6 <__ultoa_invert>
    6804:	88 2e       	mov	r8, r24
    6806:	86 18       	sub	r8, r6
    6808:	fb 2d       	mov	r31, r11
    680a:	ff 77       	andi	r31, 0x7F	; 127
    680c:	3f 2e       	mov	r3, r31
    680e:	36 fe       	sbrs	r3, 6
    6810:	0d c0       	rjmp	.+26     	; 0x682c <vfprintf+0x2e4>
    6812:	23 2d       	mov	r18, r3
    6814:	2e 7f       	andi	r18, 0xFE	; 254
    6816:	a2 2e       	mov	r10, r18
    6818:	89 14       	cp	r8, r9
    681a:	58 f4       	brcc	.+22     	; 0x6832 <vfprintf+0x2ea>
    681c:	34 fe       	sbrs	r3, 4
    681e:	0b c0       	rjmp	.+22     	; 0x6836 <vfprintf+0x2ee>
    6820:	32 fc       	sbrc	r3, 2
    6822:	09 c0       	rjmp	.+18     	; 0x6836 <vfprintf+0x2ee>
    6824:	83 2d       	mov	r24, r3
    6826:	8e 7e       	andi	r24, 0xEE	; 238
    6828:	a8 2e       	mov	r10, r24
    682a:	05 c0       	rjmp	.+10     	; 0x6836 <vfprintf+0x2ee>
    682c:	b8 2c       	mov	r11, r8
    682e:	a3 2c       	mov	r10, r3
    6830:	03 c0       	rjmp	.+6      	; 0x6838 <vfprintf+0x2f0>
    6832:	b8 2c       	mov	r11, r8
    6834:	01 c0       	rjmp	.+2      	; 0x6838 <vfprintf+0x2f0>
    6836:	b9 2c       	mov	r11, r9
    6838:	a4 fe       	sbrs	r10, 4
    683a:	0f c0       	rjmp	.+30     	; 0x685a <vfprintf+0x312>
    683c:	fe 01       	movw	r30, r28
    683e:	e8 0d       	add	r30, r8
    6840:	f1 1d       	adc	r31, r1
    6842:	80 81       	ld	r24, Z
    6844:	80 33       	cpi	r24, 0x30	; 48
    6846:	21 f4       	brne	.+8      	; 0x6850 <vfprintf+0x308>
    6848:	9a 2d       	mov	r25, r10
    684a:	99 7e       	andi	r25, 0xE9	; 233
    684c:	a9 2e       	mov	r10, r25
    684e:	09 c0       	rjmp	.+18     	; 0x6862 <vfprintf+0x31a>
    6850:	a2 fe       	sbrs	r10, 2
    6852:	06 c0       	rjmp	.+12     	; 0x6860 <vfprintf+0x318>
    6854:	b3 94       	inc	r11
    6856:	b3 94       	inc	r11
    6858:	04 c0       	rjmp	.+8      	; 0x6862 <vfprintf+0x31a>
    685a:	8a 2d       	mov	r24, r10
    685c:	86 78       	andi	r24, 0x86	; 134
    685e:	09 f0       	breq	.+2      	; 0x6862 <vfprintf+0x31a>
    6860:	b3 94       	inc	r11
    6862:	a3 fc       	sbrc	r10, 3
    6864:	10 c0       	rjmp	.+32     	; 0x6886 <vfprintf+0x33e>
    6866:	a0 fe       	sbrs	r10, 0
    6868:	06 c0       	rjmp	.+12     	; 0x6876 <vfprintf+0x32e>
    686a:	b2 14       	cp	r11, r2
    686c:	80 f4       	brcc	.+32     	; 0x688e <vfprintf+0x346>
    686e:	28 0c       	add	r2, r8
    6870:	92 2c       	mov	r9, r2
    6872:	9b 18       	sub	r9, r11
    6874:	0d c0       	rjmp	.+26     	; 0x6890 <vfprintf+0x348>
    6876:	b2 14       	cp	r11, r2
    6878:	58 f4       	brcc	.+22     	; 0x6890 <vfprintf+0x348>
    687a:	b6 01       	movw	r22, r12
    687c:	80 e2       	ldi	r24, 0x20	; 32
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	76 d0       	rcall	.+236    	; 0x696e <fputc>
    6882:	b3 94       	inc	r11
    6884:	f8 cf       	rjmp	.-16     	; 0x6876 <vfprintf+0x32e>
    6886:	b2 14       	cp	r11, r2
    6888:	18 f4       	brcc	.+6      	; 0x6890 <vfprintf+0x348>
    688a:	2b 18       	sub	r2, r11
    688c:	02 c0       	rjmp	.+4      	; 0x6892 <vfprintf+0x34a>
    688e:	98 2c       	mov	r9, r8
    6890:	21 2c       	mov	r2, r1
    6892:	a4 fe       	sbrs	r10, 4
    6894:	0f c0       	rjmp	.+30     	; 0x68b4 <vfprintf+0x36c>
    6896:	b6 01       	movw	r22, r12
    6898:	80 e3       	ldi	r24, 0x30	; 48
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	68 d0       	rcall	.+208    	; 0x696e <fputc>
    689e:	a2 fe       	sbrs	r10, 2
    68a0:	16 c0       	rjmp	.+44     	; 0x68ce <vfprintf+0x386>
    68a2:	a1 fc       	sbrc	r10, 1
    68a4:	03 c0       	rjmp	.+6      	; 0x68ac <vfprintf+0x364>
    68a6:	88 e7       	ldi	r24, 0x78	; 120
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	02 c0       	rjmp	.+4      	; 0x68b0 <vfprintf+0x368>
    68ac:	88 e5       	ldi	r24, 0x58	; 88
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	b6 01       	movw	r22, r12
    68b2:	0c c0       	rjmp	.+24     	; 0x68cc <vfprintf+0x384>
    68b4:	8a 2d       	mov	r24, r10
    68b6:	86 78       	andi	r24, 0x86	; 134
    68b8:	51 f0       	breq	.+20     	; 0x68ce <vfprintf+0x386>
    68ba:	a1 fe       	sbrs	r10, 1
    68bc:	02 c0       	rjmp	.+4      	; 0x68c2 <vfprintf+0x37a>
    68be:	8b e2       	ldi	r24, 0x2B	; 43
    68c0:	01 c0       	rjmp	.+2      	; 0x68c4 <vfprintf+0x37c>
    68c2:	80 e2       	ldi	r24, 0x20	; 32
    68c4:	a7 fc       	sbrc	r10, 7
    68c6:	8d e2       	ldi	r24, 0x2D	; 45
    68c8:	b6 01       	movw	r22, r12
    68ca:	90 e0       	ldi	r25, 0x00	; 0
    68cc:	50 d0       	rcall	.+160    	; 0x696e <fputc>
    68ce:	89 14       	cp	r8, r9
    68d0:	30 f4       	brcc	.+12     	; 0x68de <vfprintf+0x396>
    68d2:	b6 01       	movw	r22, r12
    68d4:	80 e3       	ldi	r24, 0x30	; 48
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	4a d0       	rcall	.+148    	; 0x696e <fputc>
    68da:	9a 94       	dec	r9
    68dc:	f8 cf       	rjmp	.-16     	; 0x68ce <vfprintf+0x386>
    68de:	8a 94       	dec	r8
    68e0:	f3 01       	movw	r30, r6
    68e2:	e8 0d       	add	r30, r8
    68e4:	f1 1d       	adc	r31, r1
    68e6:	80 81       	ld	r24, Z
    68e8:	b6 01       	movw	r22, r12
    68ea:	90 e0       	ldi	r25, 0x00	; 0
    68ec:	40 d0       	rcall	.+128    	; 0x696e <fputc>
    68ee:	81 10       	cpse	r8, r1
    68f0:	f6 cf       	rjmp	.-20     	; 0x68de <vfprintf+0x396>
    68f2:	22 20       	and	r2, r2
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <vfprintf+0x3b0>
    68f6:	4e ce       	rjmp	.-868    	; 0x6594 <vfprintf+0x4c>
    68f8:	b6 01       	movw	r22, r12
    68fa:	80 e2       	ldi	r24, 0x20	; 32
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	37 d0       	rcall	.+110    	; 0x696e <fputc>
    6900:	2a 94       	dec	r2
    6902:	f7 cf       	rjmp	.-18     	; 0x68f2 <vfprintf+0x3aa>
    6904:	f6 01       	movw	r30, r12
    6906:	86 81       	ldd	r24, Z+6	; 0x06
    6908:	97 81       	ldd	r25, Z+7	; 0x07
    690a:	02 c0       	rjmp	.+4      	; 0x6910 <vfprintf+0x3c8>
    690c:	8f ef       	ldi	r24, 0xFF	; 255
    690e:	9f ef       	ldi	r25, 0xFF	; 255
    6910:	2b 96       	adiw	r28, 0x0b	; 11
    6912:	0f b6       	in	r0, 0x3f	; 63
    6914:	f8 94       	cli
    6916:	de bf       	out	0x3e, r29	; 62
    6918:	0f be       	out	0x3f, r0	; 63
    691a:	cd bf       	out	0x3d, r28	; 61
    691c:	df 91       	pop	r29
    691e:	cf 91       	pop	r28
    6920:	1f 91       	pop	r17
    6922:	0f 91       	pop	r16
    6924:	ff 90       	pop	r15
    6926:	ef 90       	pop	r14
    6928:	df 90       	pop	r13
    692a:	cf 90       	pop	r12
    692c:	bf 90       	pop	r11
    692e:	af 90       	pop	r10
    6930:	9f 90       	pop	r9
    6932:	8f 90       	pop	r8
    6934:	7f 90       	pop	r7
    6936:	6f 90       	pop	r6
    6938:	5f 90       	pop	r5
    693a:	4f 90       	pop	r4
    693c:	3f 90       	pop	r3
    693e:	2f 90       	pop	r2
    6940:	08 95       	ret

00006942 <strnlen_P>:
    6942:	fc 01       	movw	r30, r24
    6944:	05 90       	lpm	r0, Z+
    6946:	61 50       	subi	r22, 0x01	; 1
    6948:	70 40       	sbci	r23, 0x00	; 0
    694a:	01 10       	cpse	r0, r1
    694c:	d8 f7       	brcc	.-10     	; 0x6944 <strnlen_P+0x2>
    694e:	80 95       	com	r24
    6950:	90 95       	com	r25
    6952:	8e 0f       	add	r24, r30
    6954:	9f 1f       	adc	r25, r31
    6956:	08 95       	ret

00006958 <strnlen>:
    6958:	fc 01       	movw	r30, r24
    695a:	61 50       	subi	r22, 0x01	; 1
    695c:	70 40       	sbci	r23, 0x00	; 0
    695e:	01 90       	ld	r0, Z+
    6960:	01 10       	cpse	r0, r1
    6962:	d8 f7       	brcc	.-10     	; 0x695a <strnlen+0x2>
    6964:	80 95       	com	r24
    6966:	90 95       	com	r25
    6968:	8e 0f       	add	r24, r30
    696a:	9f 1f       	adc	r25, r31
    696c:	08 95       	ret

0000696e <fputc>:
    696e:	0f 93       	push	r16
    6970:	1f 93       	push	r17
    6972:	cf 93       	push	r28
    6974:	df 93       	push	r29
    6976:	fb 01       	movw	r30, r22
    6978:	23 81       	ldd	r18, Z+3	; 0x03
    697a:	21 fd       	sbrc	r18, 1
    697c:	03 c0       	rjmp	.+6      	; 0x6984 <fputc+0x16>
    697e:	8f ef       	ldi	r24, 0xFF	; 255
    6980:	9f ef       	ldi	r25, 0xFF	; 255
    6982:	2c c0       	rjmp	.+88     	; 0x69dc <fputc+0x6e>
    6984:	22 ff       	sbrs	r18, 2
    6986:	16 c0       	rjmp	.+44     	; 0x69b4 <fputc+0x46>
    6988:	46 81       	ldd	r20, Z+6	; 0x06
    698a:	57 81       	ldd	r21, Z+7	; 0x07
    698c:	24 81       	ldd	r18, Z+4	; 0x04
    698e:	35 81       	ldd	r19, Z+5	; 0x05
    6990:	42 17       	cp	r20, r18
    6992:	53 07       	cpc	r21, r19
    6994:	44 f4       	brge	.+16     	; 0x69a6 <fputc+0x38>
    6996:	a0 81       	ld	r26, Z
    6998:	b1 81       	ldd	r27, Z+1	; 0x01
    699a:	9d 01       	movw	r18, r26
    699c:	2f 5f       	subi	r18, 0xFF	; 255
    699e:	3f 4f       	sbci	r19, 0xFF	; 255
    69a0:	31 83       	std	Z+1, r19	; 0x01
    69a2:	20 83       	st	Z, r18
    69a4:	8c 93       	st	X, r24
    69a6:	26 81       	ldd	r18, Z+6	; 0x06
    69a8:	37 81       	ldd	r19, Z+7	; 0x07
    69aa:	2f 5f       	subi	r18, 0xFF	; 255
    69ac:	3f 4f       	sbci	r19, 0xFF	; 255
    69ae:	37 83       	std	Z+7, r19	; 0x07
    69b0:	26 83       	std	Z+6, r18	; 0x06
    69b2:	14 c0       	rjmp	.+40     	; 0x69dc <fputc+0x6e>
    69b4:	8b 01       	movw	r16, r22
    69b6:	ec 01       	movw	r28, r24
    69b8:	fb 01       	movw	r30, r22
    69ba:	00 84       	ldd	r0, Z+8	; 0x08
    69bc:	f1 85       	ldd	r31, Z+9	; 0x09
    69be:	e0 2d       	mov	r30, r0
    69c0:	19 95       	eicall
    69c2:	89 2b       	or	r24, r25
    69c4:	e1 f6       	brne	.-72     	; 0x697e <fputc+0x10>
    69c6:	d8 01       	movw	r26, r16
    69c8:	16 96       	adiw	r26, 0x06	; 6
    69ca:	8d 91       	ld	r24, X+
    69cc:	9c 91       	ld	r25, X
    69ce:	17 97       	sbiw	r26, 0x07	; 7
    69d0:	01 96       	adiw	r24, 0x01	; 1
    69d2:	17 96       	adiw	r26, 0x07	; 7
    69d4:	9c 93       	st	X, r25
    69d6:	8e 93       	st	-X, r24
    69d8:	16 97       	sbiw	r26, 0x06	; 6
    69da:	ce 01       	movw	r24, r28
    69dc:	df 91       	pop	r29
    69de:	cf 91       	pop	r28
    69e0:	1f 91       	pop	r17
    69e2:	0f 91       	pop	r16
    69e4:	08 95       	ret

000069e6 <__ultoa_invert>:
    69e6:	fa 01       	movw	r30, r20
    69e8:	aa 27       	eor	r26, r26
    69ea:	28 30       	cpi	r18, 0x08	; 8
    69ec:	51 f1       	breq	.+84     	; 0x6a42 <__ultoa_invert+0x5c>
    69ee:	20 31       	cpi	r18, 0x10	; 16
    69f0:	81 f1       	breq	.+96     	; 0x6a52 <__ultoa_invert+0x6c>
    69f2:	e8 94       	clt
    69f4:	6f 93       	push	r22
    69f6:	6e 7f       	andi	r22, 0xFE	; 254
    69f8:	6e 5f       	subi	r22, 0xFE	; 254
    69fa:	7f 4f       	sbci	r23, 0xFF	; 255
    69fc:	8f 4f       	sbci	r24, 0xFF	; 255
    69fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6a00:	af 4f       	sbci	r26, 0xFF	; 255
    6a02:	b1 e0       	ldi	r27, 0x01	; 1
    6a04:	3e d0       	rcall	.+124    	; 0x6a82 <__ultoa_invert+0x9c>
    6a06:	b4 e0       	ldi	r27, 0x04	; 4
    6a08:	3c d0       	rcall	.+120    	; 0x6a82 <__ultoa_invert+0x9c>
    6a0a:	67 0f       	add	r22, r23
    6a0c:	78 1f       	adc	r23, r24
    6a0e:	89 1f       	adc	r24, r25
    6a10:	9a 1f       	adc	r25, r26
    6a12:	a1 1d       	adc	r26, r1
    6a14:	68 0f       	add	r22, r24
    6a16:	79 1f       	adc	r23, r25
    6a18:	8a 1f       	adc	r24, r26
    6a1a:	91 1d       	adc	r25, r1
    6a1c:	a1 1d       	adc	r26, r1
    6a1e:	6a 0f       	add	r22, r26
    6a20:	71 1d       	adc	r23, r1
    6a22:	81 1d       	adc	r24, r1
    6a24:	91 1d       	adc	r25, r1
    6a26:	a1 1d       	adc	r26, r1
    6a28:	20 d0       	rcall	.+64     	; 0x6a6a <__ultoa_invert+0x84>
    6a2a:	09 f4       	brne	.+2      	; 0x6a2e <__ultoa_invert+0x48>
    6a2c:	68 94       	set
    6a2e:	3f 91       	pop	r19
    6a30:	2a e0       	ldi	r18, 0x0A	; 10
    6a32:	26 9f       	mul	r18, r22
    6a34:	11 24       	eor	r1, r1
    6a36:	30 19       	sub	r19, r0
    6a38:	30 5d       	subi	r19, 0xD0	; 208
    6a3a:	31 93       	st	Z+, r19
    6a3c:	de f6       	brtc	.-74     	; 0x69f4 <__ultoa_invert+0xe>
    6a3e:	cf 01       	movw	r24, r30
    6a40:	08 95       	ret
    6a42:	46 2f       	mov	r20, r22
    6a44:	47 70       	andi	r20, 0x07	; 7
    6a46:	40 5d       	subi	r20, 0xD0	; 208
    6a48:	41 93       	st	Z+, r20
    6a4a:	b3 e0       	ldi	r27, 0x03	; 3
    6a4c:	0f d0       	rcall	.+30     	; 0x6a6c <__ultoa_invert+0x86>
    6a4e:	c9 f7       	brne	.-14     	; 0x6a42 <__ultoa_invert+0x5c>
    6a50:	f6 cf       	rjmp	.-20     	; 0x6a3e <__ultoa_invert+0x58>
    6a52:	46 2f       	mov	r20, r22
    6a54:	4f 70       	andi	r20, 0x0F	; 15
    6a56:	40 5d       	subi	r20, 0xD0	; 208
    6a58:	4a 33       	cpi	r20, 0x3A	; 58
    6a5a:	18 f0       	brcs	.+6      	; 0x6a62 <__ultoa_invert+0x7c>
    6a5c:	49 5d       	subi	r20, 0xD9	; 217
    6a5e:	31 fd       	sbrc	r19, 1
    6a60:	40 52       	subi	r20, 0x20	; 32
    6a62:	41 93       	st	Z+, r20
    6a64:	02 d0       	rcall	.+4      	; 0x6a6a <__ultoa_invert+0x84>
    6a66:	a9 f7       	brne	.-22     	; 0x6a52 <__ultoa_invert+0x6c>
    6a68:	ea cf       	rjmp	.-44     	; 0x6a3e <__ultoa_invert+0x58>
    6a6a:	b4 e0       	ldi	r27, 0x04	; 4
    6a6c:	a6 95       	lsr	r26
    6a6e:	97 95       	ror	r25
    6a70:	87 95       	ror	r24
    6a72:	77 95       	ror	r23
    6a74:	67 95       	ror	r22
    6a76:	ba 95       	dec	r27
    6a78:	c9 f7       	brne	.-14     	; 0x6a6c <__ultoa_invert+0x86>
    6a7a:	00 97       	sbiw	r24, 0x00	; 0
    6a7c:	61 05       	cpc	r22, r1
    6a7e:	71 05       	cpc	r23, r1
    6a80:	08 95       	ret
    6a82:	9b 01       	movw	r18, r22
    6a84:	ac 01       	movw	r20, r24
    6a86:	0a 2e       	mov	r0, r26
    6a88:	06 94       	lsr	r0
    6a8a:	57 95       	ror	r21
    6a8c:	47 95       	ror	r20
    6a8e:	37 95       	ror	r19
    6a90:	27 95       	ror	r18
    6a92:	ba 95       	dec	r27
    6a94:	c9 f7       	brne	.-14     	; 0x6a88 <__ultoa_invert+0xa2>
    6a96:	62 0f       	add	r22, r18
    6a98:	73 1f       	adc	r23, r19
    6a9a:	84 1f       	adc	r24, r20
    6a9c:	95 1f       	adc	r25, r21
    6a9e:	a0 1d       	adc	r26, r0
    6aa0:	08 95       	ret

00006aa2 <_exit>:
    6aa2:	f8 94       	cli

00006aa4 <__stop_program>:
    6aa4:	ff cf       	rjmp	.-2      	; 0x6aa4 <__stop_program>
