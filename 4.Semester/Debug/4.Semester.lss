
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ce  00800200  00005958  000059ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff9  008006ce  008006ce  00005eba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005eba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a08  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cc92  00000000  00000000  00006960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030e1  00000000  00000000  000135f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000061d8  00000000  00000000  000166d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024b4  00000000  00000000  0001c8ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003faf  00000000  00000000  0001ed60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bca2  00000000  00000000  00022d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0002e9b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ef c3       	rjmp	.+2014   	; 0x810 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 35 20 	jmp	0x406a	; 0x406a <__vector_25>
      68:	0c 94 87 20 	jmp	0x410e	; 0x410e <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__vector_36>
      94:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_51>
      d0:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__vector_54>
      dc:	0c 94 49 22 	jmp	0x4492	; 0x4492 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 17       	cp	r16, r28
      e6:	0c 17       	cp	r16, r28
      e8:	0c 17       	cp	r16, r28
      ea:	43 17       	cp	r20, r19
      ec:	4b 17       	cp	r20, r27
      ee:	60 17       	cp	r22, r16
      f0:	0c 17       	cp	r16, r28
      f2:	0c 17       	cp	r16, r28
      f4:	43 17       	cp	r20, r19
      f6:	4b 17       	cp	r20, r27
      f8:	8a 25       	eor	r24, r10
      fa:	fa 25       	eor	r31, r10
      fc:	fa 25       	eor	r31, r10
      fe:	fa 25       	eor	r31, r10
     100:	fa 25       	eor	r31, r10
     102:	fa 25       	eor	r31, r10
     104:	fa 25       	eor	r31, r10
     106:	fa 25       	eor	r31, r10
     108:	8a 25       	eor	r24, r10
     10a:	fa 25       	eor	r31, r10
     10c:	fa 25       	eor	r31, r10
     10e:	fa 25       	eor	r31, r10
     110:	fa 25       	eor	r31, r10
     112:	fa 25       	eor	r31, r10
     114:	fa 25       	eor	r31, r10
     116:	fa 25       	eor	r31, r10
     118:	8c 25       	eor	r24, r12
     11a:	fa 25       	eor	r31, r10
     11c:	fa 25       	eor	r31, r10
     11e:	fa 25       	eor	r31, r10
     120:	fa 25       	eor	r31, r10
     122:	fa 25       	eor	r31, r10
     124:	fa 25       	eor	r31, r10
     126:	fa 25       	eor	r31, r10
     128:	fa 25       	eor	r31, r10
     12a:	fa 25       	eor	r31, r10
     12c:	fa 25       	eor	r31, r10
     12e:	fa 25       	eor	r31, r10
     130:	fa 25       	eor	r31, r10
     132:	fa 25       	eor	r31, r10
     134:	fa 25       	eor	r31, r10
     136:	fa 25       	eor	r31, r10
     138:	8c 25       	eor	r24, r12
     13a:	fa 25       	eor	r31, r10
     13c:	fa 25       	eor	r31, r10
     13e:	fa 25       	eor	r31, r10
     140:	fa 25       	eor	r31, r10
     142:	fa 25       	eor	r31, r10
     144:	fa 25       	eor	r31, r10
     146:	fa 25       	eor	r31, r10
     148:	fa 25       	eor	r31, r10
     14a:	fa 25       	eor	r31, r10
     14c:	fa 25       	eor	r31, r10
     14e:	fa 25       	eor	r31, r10
     150:	fa 25       	eor	r31, r10
     152:	fa 25       	eor	r31, r10
     154:	fa 25       	eor	r31, r10
     156:	fa 25       	eor	r31, r10
     158:	f6 25       	eor	r31, r6
     15a:	fa 25       	eor	r31, r10
     15c:	fa 25       	eor	r31, r10
     15e:	fa 25       	eor	r31, r10
     160:	fa 25       	eor	r31, r10
     162:	fa 25       	eor	r31, r10
     164:	fa 25       	eor	r31, r10
     166:	fa 25       	eor	r31, r10
     168:	c1 25       	eor	r28, r1
     16a:	fa 25       	eor	r31, r10
     16c:	fa 25       	eor	r31, r10
     16e:	fa 25       	eor	r31, r10
     170:	fa 25       	eor	r31, r10
     172:	fa 25       	eor	r31, r10
     174:	fa 25       	eor	r31, r10
     176:	fa 25       	eor	r31, r10
     178:	fa 25       	eor	r31, r10
     17a:	fa 25       	eor	r31, r10
     17c:	fa 25       	eor	r31, r10
     17e:	fa 25       	eor	r31, r10
     180:	fa 25       	eor	r31, r10
     182:	fa 25       	eor	r31, r10
     184:	fa 25       	eor	r31, r10
     186:	fa 25       	eor	r31, r10
     188:	b5 25       	eor	r27, r5
     18a:	fa 25       	eor	r31, r10
     18c:	fa 25       	eor	r31, r10
     18e:	fa 25       	eor	r31, r10
     190:	fa 25       	eor	r31, r10
     192:	fa 25       	eor	r31, r10
     194:	fa 25       	eor	r31, r10
     196:	fa 25       	eor	r31, r10
     198:	d9 25       	eor	r29, r9

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <prvCheckTasksWaitingTermination>
     19e:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	6e d2       	rcall	.+1244   	; 0x684 <vPortYield>
     1a8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 89 14 	call	0x2912	; 0x2912 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <prvProcessTimerOrBlockTask>
     1c6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	16 e0       	ldi	r17, 0x06	; 6
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e8 e5       	ldi	r30, 0x58	; 88
     1e4:	f9 e5       	ldi	r31, 0x59	; 89
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 3c       	cpi	r26, 0xCE	; 206
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	26 e1       	ldi	r18, 0x16	; 22
     1f8:	ae ec       	ldi	r26, 0xCE	; 206
     1fa:	b6 e0       	ldi	r27, 0x06	; 6
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a7 3c       	cpi	r26, 0xC7	; 199
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <main>
     20a:	0c 94 aa 2c 	jmp	0x5954	; 0x5954 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
     214:	8f e0       	ldi	r24, 0x0F	; 15
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	81 d0       	rcall	.+258    	; 0x31c <pvPortMalloc>
     21a:	ec 01       	movw	r28, r24

        if( pxEventBits != NULL )
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	39 f0       	breq	.+14     	; 0x22e <xEventGroupCreate+0x1e>
        {
            pxEventBits->uxEventBits = 0;
     220:	fc 01       	movw	r30, r24
     222:	11 92       	st	Z+, r1
     224:	11 92       	st	Z+, r1
     226:	11 92       	st	Z+, r1
     228:	11 92       	st	Z+, r1
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     22a:	cf 01       	movw	r24, r30
     22c:	5d d1       	rcall	.+698    	; 0x4e8 <vListInitialise>
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
    }
     22e:	ce 01       	movw	r24, r28
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     236:	ea ed       	ldi	r30, 0xDA	; 218
     238:	f6 e0       	ldi	r31, 0x06	; 6
     23a:	ae ed       	ldi	r26, 0xDE	; 222
     23c:	b6 e0       	ldi	r27, 0x06	; 6
     23e:	b1 83       	std	Z+1, r27	; 0x01
     240:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     242:	13 82       	std	Z+3, r1	; 0x03
     244:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     246:	e6 e8       	ldi	r30, 0x86	; 134
     248:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     24a:	f0 93 d9 06 	sts	0x06D9, r31	; 0x8006d9 <pxEnd+0x1>
     24e:	e0 93 d8 06 	sts	0x06D8, r30	; 0x8006d8 <pxEnd>
    pxEnd->xBlockSize = 0;
     252:	13 82       	std	Z+3, r1	; 0x03
     254:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     25a:	88 ea       	ldi	r24, 0xA8	; 168
     25c:	9d e0       	ldi	r25, 0x0D	; 13
     25e:	13 96       	adiw	r26, 0x03	; 3
     260:	9c 93       	st	X, r25
     262:	8e 93       	st	-X, r24
     264:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     266:	ed 93       	st	X+, r30
     268:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     26a:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <xMinimumEverFreeBytesRemaining+0x1>
     26e:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     272:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <xFreeBytesRemaining+0x1>
     276:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e8       	ldi	r25, 0x80	; 128
     27e:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <__data_end+0x1>
     282:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <__data_end>
     286:	08 95       	ret

00000288 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     28e:	aa ed       	ldi	r26, 0xDA	; 218
     290:	b6 e0       	ldi	r27, 0x06	; 6
     292:	01 c0       	rjmp	.+2      	; 0x296 <prvInsertBlockIntoFreeList+0xe>
     294:	df 01       	movw	r26, r30
     296:	ed 91       	ld	r30, X+
     298:	fc 91       	ld	r31, X
     29a:	11 97       	sbiw	r26, 0x01	; 1
     29c:	ec 17       	cp	r30, r28
     29e:	fd 07       	cpc	r31, r29
     2a0:	c8 f3       	brcs	.-14     	; 0x294 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     2a2:	12 96       	adiw	r26, 0x02	; 2
     2a4:	8d 91       	ld	r24, X+
     2a6:	9c 91       	ld	r25, X
     2a8:	13 97       	sbiw	r26, 0x03	; 3
     2aa:	9d 01       	movw	r18, r26
     2ac:	28 0f       	add	r18, r24
     2ae:	39 1f       	adc	r19, r25
     2b0:	c2 17       	cp	r28, r18
     2b2:	d3 07       	cpc	r29, r19
     2b4:	49 f4       	brne	.+18     	; 0x2c8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     2b6:	2a 81       	ldd	r18, Y+2	; 0x02
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	82 0f       	add	r24, r18
     2bc:	93 1f       	adc	r25, r19
     2be:	13 96       	adiw	r26, 0x03	; 3
     2c0:	9c 93       	st	X, r25
     2c2:	8e 93       	st	-X, r24
     2c4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2c6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	9e 01       	movw	r18, r28
     2ce:	28 0f       	add	r18, r24
     2d0:	39 1f       	adc	r19, r25
     2d2:	e2 17       	cp	r30, r18
     2d4:	f3 07       	cpc	r31, r19
     2d6:	c1 f4       	brne	.+48     	; 0x308 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2d8:	20 91 d8 06 	lds	r18, 0x06D8	; 0x8006d8 <pxEnd>
     2dc:	30 91 d9 06 	lds	r19, 0x06D9	; 0x8006d9 <pxEnd+0x1>
     2e0:	e2 17       	cp	r30, r18
     2e2:	f3 07       	cpc	r31, r19
     2e4:	71 f0       	breq	.+28     	; 0x302 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	33 81       	ldd	r19, Z+3	; 0x03
     2ea:	82 0f       	add	r24, r18
     2ec:	93 1f       	adc	r25, r19
     2ee:	9b 83       	std	Y+3, r25	; 0x03
     2f0:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2f2:	ed 91       	ld	r30, X+
     2f4:	fc 91       	ld	r31, X
     2f6:	11 97       	sbiw	r26, 0x01	; 1
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	99 83       	std	Y+1, r25	; 0x01
     2fe:	88 83       	st	Y, r24
     300:	05 c0       	rjmp	.+10     	; 0x30c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     302:	39 83       	std	Y+1, r19	; 0x01
     304:	28 83       	st	Y, r18
     306:	02 c0       	rjmp	.+4      	; 0x30c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     308:	f9 83       	std	Y+1, r31	; 0x01
     30a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     30c:	ca 17       	cp	r28, r26
     30e:	db 07       	cpc	r29, r27
     310:	11 f0       	breq	.+4      	; 0x316 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     312:	cd 93       	st	X+, r28
     314:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     32a:	0e 94 a7 0c 	call	0x194e	; 0x194e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     32e:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <pxEnd>
     332:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <pxEnd+0x1>
     336:	89 2b       	or	r24, r25
     338:	09 f4       	brne	.+2      	; 0x33c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     33a:	7d df       	rcall	.-262    	; 0x236 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     33c:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <__data_end>
     340:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <__data_end+0x1>
     344:	80 23       	and	r24, r16
     346:	91 23       	and	r25, r17
     348:	89 2b       	or	r24, r25
     34a:	09 f0       	breq	.+2      	; 0x34e <pvPortMalloc+0x32>
     34c:	76 c0       	rjmp	.+236    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     34e:	01 15       	cp	r16, r1
     350:	11 05       	cpc	r17, r1
     352:	49 f0       	breq	.+18     	; 0x366 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     354:	c8 01       	movw	r24, r16
     356:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     358:	08 17       	cp	r16, r24
     35a:	19 07       	cpc	r17, r25
     35c:	18 f0       	brcs	.+6      	; 0x364 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	01 c0       	rjmp	.+2      	; 0x366 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     364:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     366:	01 15       	cp	r16, r1
     368:	11 05       	cpc	r17, r1
     36a:	09 f4       	brne	.+2      	; 0x36e <pvPortMalloc+0x52>
     36c:	69 c0       	rjmp	.+210    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     36e:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <xFreeBytesRemaining>
     372:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <xFreeBytesRemaining+0x1>
     376:	80 17       	cp	r24, r16
     378:	91 07       	cpc	r25, r17
     37a:	08 f4       	brcc	.+2      	; 0x37e <pvPortMalloc+0x62>
     37c:	64 c0       	rjmp	.+200    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     37e:	c0 91 da 06 	lds	r28, 0x06DA	; 0x8006da <xStart>
     382:	d0 91 db 06 	lds	r29, 0x06DB	; 0x8006db <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     386:	ea ed       	ldi	r30, 0xDA	; 218
     388:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     38a:	02 c0       	rjmp	.+4      	; 0x390 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     38c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     38e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	9b 81       	ldd	r25, Y+3	; 0x03
     394:	80 17       	cp	r24, r16
     396:	91 07       	cpc	r25, r17
     398:	20 f4       	brcc	.+8      	; 0x3a2 <pvPortMalloc+0x86>
     39a:	88 81       	ld	r24, Y
     39c:	99 81       	ldd	r25, Y+1	; 0x01
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	a9 f7       	brne	.-22     	; 0x38c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     3a2:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <pxEnd>
     3a6:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <pxEnd+0x1>
     3aa:	c8 17       	cp	r28, r24
     3ac:	d9 07       	cpc	r29, r25
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <pvPortMalloc+0x96>
     3b0:	4d c0       	rjmp	.+154    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     3b2:	e0 80       	ld	r14, Z
     3b4:	f1 80       	ldd	r15, Z+1	; 0x01
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	e8 0e       	add	r14, r24
     3ba:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     3bc:	88 81       	ld	r24, Y
     3be:	99 81       	ldd	r25, Y+1	; 0x01
     3c0:	91 83       	std	Z+1, r25	; 0x01
     3c2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     3c4:	2a 81       	ldd	r18, Y+2	; 0x02
     3c6:	3b 81       	ldd	r19, Y+3	; 0x03
     3c8:	20 1b       	sub	r18, r16
     3ca:	31 0b       	sbc	r19, r17
     3cc:	29 30       	cpi	r18, 0x09	; 9
     3ce:	31 05       	cpc	r19, r1
     3d0:	48 f0       	brcs	.+18     	; 0x3e4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3d2:	ce 01       	movw	r24, r28
     3d4:	80 0f       	add	r24, r16
     3d6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3d8:	fc 01       	movw	r30, r24
     3da:	33 83       	std	Z+3, r19	; 0x03
     3dc:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3de:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3e0:	0a 83       	std	Y+2, r16	; 0x02
     3e2:	52 df       	rcall	.-348    	; 0x288 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3e4:	2a 81       	ldd	r18, Y+2	; 0x02
     3e6:	3b 81       	ldd	r19, Y+3	; 0x03
     3e8:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <xFreeBytesRemaining>
     3ec:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <xFreeBytesRemaining+0x1>
     3f0:	82 1b       	sub	r24, r18
     3f2:	93 0b       	sbc	r25, r19
     3f4:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <xFreeBytesRemaining+0x1>
     3f8:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3fc:	40 91 d4 06 	lds	r20, 0x06D4	; 0x8006d4 <xMinimumEverFreeBytesRemaining>
     400:	50 91 d5 06 	lds	r21, 0x06D5	; 0x8006d5 <xMinimumEverFreeBytesRemaining+0x1>
     404:	84 17       	cp	r24, r20
     406:	95 07       	cpc	r25, r21
     408:	20 f4       	brcc	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     40a:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <xMinimumEverFreeBytesRemaining+0x1>
     40e:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     412:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <__data_end>
     416:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <__data_end+0x1>
     41a:	28 2b       	or	r18, r24
     41c:	39 2b       	or	r19, r25
     41e:	3b 83       	std	Y+3, r19	; 0x03
     420:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     422:	19 82       	std	Y+1, r1	; 0x01
     424:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     426:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <xNumberOfSuccessfulAllocations>
     42a:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <xNumberOfSuccessfulAllocations+0x1>
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <xNumberOfSuccessfulAllocations+0x1>
     434:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <xNumberOfSuccessfulAllocations>
     438:	0b c0       	rjmp	.+22     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     43a:	e1 2c       	mov	r14, r1
     43c:	f1 2c       	mov	r15, r1
     43e:	08 c0       	rjmp	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     440:	e1 2c       	mov	r14, r1
     442:	f1 2c       	mov	r15, r1
     444:	05 c0       	rjmp	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     446:	e1 2c       	mov	r14, r1
     448:	f1 2c       	mov	r15, r1
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	e1 2c       	mov	r14, r1
     44e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     450:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     454:	e1 14       	cp	r14, r1
     456:	f1 04       	cpc	r15, r1
     458:	11 f4       	brne	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     45a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     45e:	c7 01       	movw	r24, r14
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	08 95       	ret

0000046e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     476:	00 97       	sbiw	r24, 0x00	; 0
     478:	91 f1       	breq	.+100    	; 0x4de <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     47a:	ec 01       	movw	r28, r24
     47c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     47e:	4a 81       	ldd	r20, Y+2	; 0x02
     480:	5b 81       	ldd	r21, Y+3	; 0x03
     482:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <__data_end>
     486:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <__data_end+0x1>
     48a:	ba 01       	movw	r22, r20
     48c:	62 23       	and	r22, r18
     48e:	73 23       	and	r23, r19
     490:	67 2b       	or	r22, r23
     492:	29 f1       	breq	.+74     	; 0x4de <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     494:	68 81       	ld	r22, Y
     496:	79 81       	ldd	r23, Y+1	; 0x01
     498:	67 2b       	or	r22, r23
     49a:	09 f5       	brne	.+66     	; 0x4de <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     49c:	20 95       	com	r18
     49e:	30 95       	com	r19
     4a0:	24 23       	and	r18, r20
     4a2:	35 23       	and	r19, r21
     4a4:	3b 83       	std	Y+3, r19	; 0x03
     4a6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     4a8:	0e 94 a7 0c 	call	0x194e	; 0x194e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	20 91 d6 06 	lds	r18, 0x06D6	; 0x8006d6 <xFreeBytesRemaining>
     4b4:	30 91 d7 06 	lds	r19, 0x06D7	; 0x8006d7 <xFreeBytesRemaining+0x1>
     4b8:	82 0f       	add	r24, r18
     4ba:	93 1f       	adc	r25, r19
     4bc:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <xFreeBytesRemaining+0x1>
     4c0:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4c4:	ce 01       	movw	r24, r28
     4c6:	e0 de       	rcall	.-576    	; 0x288 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4c8:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <xNumberOfSuccessfulFrees>
     4cc:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <xNumberOfSuccessfulFrees+0x1>
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <xNumberOfSuccessfulFrees+0x1>
     4d6:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4da:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	08 95       	ret

000004e8 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4e8:	fc 01       	movw	r30, r24
     4ea:	03 96       	adiw	r24, 0x03	; 3
     4ec:	92 83       	std	Z+2, r25	; 0x02
     4ee:	81 83       	std	Z+1, r24	; 0x01
     4f0:	4f ef       	ldi	r20, 0xFF	; 255
     4f2:	5f ef       	ldi	r21, 0xFF	; 255
     4f4:	ba 01       	movw	r22, r20
     4f6:	43 83       	std	Z+3, r20	; 0x03
     4f8:	54 83       	std	Z+4, r21	; 0x04
     4fa:	65 83       	std	Z+5, r22	; 0x05
     4fc:	76 83       	std	Z+6, r23	; 0x06
     4fe:	90 87       	std	Z+8, r25	; 0x08
     500:	87 83       	std	Z+7, r24	; 0x07
     502:	92 87       	std	Z+10, r25	; 0x0a
     504:	81 87       	std	Z+9, r24	; 0x09
     506:	10 82       	st	Z, r1
     508:	08 95       	ret

0000050a <vListInitialiseItem>:
     50a:	fc 01       	movw	r30, r24
     50c:	13 86       	std	Z+11, r1	; 0x0b
     50e:	12 86       	std	Z+10, r1	; 0x0a
     510:	08 95       	ret

00000512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     51c:	08 81       	ld	r16, Y
     51e:	19 81       	ldd	r17, Y+1	; 0x01
     520:	2a 81       	ldd	r18, Y+2	; 0x02
     522:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     524:	0f 3f       	cpi	r16, 0xFF	; 255
     526:	4f ef       	ldi	r20, 0xFF	; 255
     528:	14 07       	cpc	r17, r20
     52a:	24 07       	cpc	r18, r20
     52c:	34 07       	cpc	r19, r20
     52e:	21 f4       	brne	.+8      	; 0x538 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     530:	fc 01       	movw	r30, r24
     532:	a1 85       	ldd	r26, Z+9	; 0x09
     534:	b2 85       	ldd	r27, Z+10	; 0x0a
     536:	11 c0       	rjmp	.+34     	; 0x55a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     538:	dc 01       	movw	r26, r24
     53a:	13 96       	adiw	r26, 0x03	; 3
     53c:	01 c0       	rjmp	.+2      	; 0x540 <vListInsert+0x2e>
     53e:	df 01       	movw	r26, r30
     540:	14 96       	adiw	r26, 0x04	; 4
     542:	ed 91       	ld	r30, X+
     544:	fc 91       	ld	r31, X
     546:	15 97       	sbiw	r26, 0x05	; 5
     548:	40 81       	ld	r20, Z
     54a:	51 81       	ldd	r21, Z+1	; 0x01
     54c:	62 81       	ldd	r22, Z+2	; 0x02
     54e:	73 81       	ldd	r23, Z+3	; 0x03
     550:	04 17       	cp	r16, r20
     552:	15 07       	cpc	r17, r21
     554:	26 07       	cpc	r18, r22
     556:	37 07       	cpc	r19, r23
     558:	90 f7       	brcc	.-28     	; 0x53e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     55a:	14 96       	adiw	r26, 0x04	; 4
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	15 97       	sbiw	r26, 0x05	; 5
     562:	fd 83       	std	Y+5, r31	; 0x05
     564:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     566:	d7 83       	std	Z+7, r29	; 0x07
     568:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     56a:	bf 83       	std	Y+7, r27	; 0x07
     56c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     56e:	15 96       	adiw	r26, 0x05	; 5
     570:	dc 93       	st	X, r29
     572:	ce 93       	st	-X, r28
     574:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     576:	9b 87       	std	Y+11, r25	; 0x0b
     578:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     57a:	fc 01       	movw	r30, r24
     57c:	20 81       	ld	r18, Z
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	20 83       	st	Z, r18
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret

0000058c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     592:	a2 85       	ldd	r26, Z+10	; 0x0a
     594:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     596:	c4 81       	ldd	r28, Z+4	; 0x04
     598:	d5 81       	ldd	r29, Z+5	; 0x05
     59a:	86 81       	ldd	r24, Z+6	; 0x06
     59c:	97 81       	ldd	r25, Z+7	; 0x07
     59e:	9f 83       	std	Y+7, r25	; 0x07
     5a0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5a2:	c6 81       	ldd	r28, Z+6	; 0x06
     5a4:	d7 81       	ldd	r29, Z+7	; 0x07
     5a6:	84 81       	ldd	r24, Z+4	; 0x04
     5a8:	95 81       	ldd	r25, Z+5	; 0x05
     5aa:	9d 83       	std	Y+5, r25	; 0x05
     5ac:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	8d 91       	ld	r24, X+
     5b2:	9c 91       	ld	r25, X
     5b4:	12 97       	sbiw	r26, 0x02	; 2
     5b6:	e8 17       	cp	r30, r24
     5b8:	f9 07       	cpc	r31, r25
     5ba:	31 f4       	brne	.+12     	; 0x5c8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5bc:	86 81       	ldd	r24, Z+6	; 0x06
     5be:	97 81       	ldd	r25, Z+7	; 0x07
     5c0:	12 96       	adiw	r26, 0x02	; 2
     5c2:	9c 93       	st	X, r25
     5c4:	8e 93       	st	-X, r24
     5c6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5c8:	13 86       	std	Z+11, r1	; 0x0b
     5ca:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5cc:	8c 91       	ld	r24, X
     5ce:	81 50       	subi	r24, 0x01	; 1
     5d0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5d2:	8c 91       	ld	r24, X
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5da:	a8 95       	wdr
     5dc:	90 ec       	ldi	r25, 0xC0	; 192
     5de:	88 e1       	ldi	r24, 0x18	; 24
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	a8 95       	wdr
     5e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5f0:	08 95       	ret

000005f2 <pxPortInitialiseStack>:
     5f2:	fc 01       	movw	r30, r24
     5f4:	60 83       	st	Z, r22
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	70 83       	st	Z, r23
     5fa:	31 97       	sbiw	r30, 0x01	; 1
     5fc:	10 82       	st	Z, r1
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	10 82       	st	Z, r1
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	20 e8       	ldi	r18, 0x80	; 128
     606:	20 83       	st	Z, r18
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	10 82       	st	Z, r1
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	10 82       	st	Z, r1
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	10 82       	st	Z, r1
     614:	77 97       	sbiw	r30, 0x17	; 23
     616:	40 83       	st	Z, r20
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	50 83       	st	Z, r21
     61c:	86 97       	sbiw	r24, 0x26	; 38
     61e:	08 95       	ret

00000620 <xPortStartScheduler>:
     620:	dc df       	rcall	.-72     	; 0x5da <prvSetupTimerInterrupt>
     622:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
     626:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
     62a:	cd 91       	ld	r28, X+
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	dd 91       	ld	r29, X+
     630:	de bf       	out	0x3e, r29	; 62
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	7f 91       	pop	r23
     644:	6f 91       	pop	r22
     646:	5f 91       	pop	r21
     648:	4f 91       	pop	r20
     64a:	3f 91       	pop	r19
     64c:	2f 91       	pop	r18
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	7f 90       	pop	r7
     664:	6f 90       	pop	r6
     666:	5f 90       	pop	r5
     668:	4f 90       	pop	r4
     66a:	3f 90       	pop	r3
     66c:	2f 90       	pop	r2
     66e:	1f 90       	pop	r1
     670:	0f 90       	pop	r0
     672:	0c be       	out	0x3c, r0	; 60
     674:	0f 90       	pop	r0
     676:	0b be       	out	0x3b, r0	; 59
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	08 95       	ret
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	08 95       	ret

00000684 <vPortYield>:
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	0f 92       	push	r0
     68c:	0b b6       	in	r0, 0x3b	; 59
     68e:	0f 92       	push	r0
     690:	0c b6       	in	r0, 0x3c	; 60
     692:	0f 92       	push	r0
     694:	1f 92       	push	r1
     696:	11 24       	eor	r1, r1
     698:	2f 92       	push	r2
     69a:	3f 92       	push	r3
     69c:	4f 92       	push	r4
     69e:	5f 92       	push	r5
     6a0:	6f 92       	push	r6
     6a2:	7f 92       	push	r7
     6a4:	8f 92       	push	r8
     6a6:	9f 92       	push	r9
     6a8:	af 92       	push	r10
     6aa:	bf 92       	push	r11
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	6f 93       	push	r22
     6c2:	7f 93       	push	r23
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
     6d4:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
     6d8:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
     6dc:	0d b6       	in	r0, 0x3d	; 61
     6de:	0d 92       	st	X+, r0
     6e0:	0e b6       	in	r0, 0x3e	; 62
     6e2:	0d 92       	st	X+, r0
     6e4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <vTaskSwitchContext>
     6e8:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
     6ec:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
     6f0:	cd 91       	ld	r28, X+
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	dd 91       	ld	r29, X+
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	ff 91       	pop	r31
     6fa:	ef 91       	pop	r30
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	9f 90       	pop	r9
     726:	8f 90       	pop	r8
     728:	7f 90       	pop	r7
     72a:	6f 90       	pop	r6
     72c:	5f 90       	pop	r5
     72e:	4f 90       	pop	r4
     730:	3f 90       	pop	r3
     732:	2f 90       	pop	r2
     734:	1f 90       	pop	r1
     736:	0f 90       	pop	r0
     738:	0c be       	out	0x3c, r0	; 60
     73a:	0f 90       	pop	r0
     73c:	0b be       	out	0x3b, r0	; 59
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	08 95       	ret

00000746 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	0f 92       	push	r0
     74e:	0b b6       	in	r0, 0x3b	; 59
     750:	0f 92       	push	r0
     752:	0c b6       	in	r0, 0x3c	; 60
     754:	0f 92       	push	r0
     756:	1f 92       	push	r1
     758:	11 24       	eor	r1, r1
     75a:	2f 92       	push	r2
     75c:	3f 92       	push	r3
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
     796:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
     79a:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
     79e:	0d b6       	in	r0, 0x3d	; 61
     7a0:	0d 92       	st	X+, r0
     7a2:	0e b6       	in	r0, 0x3e	; 62
     7a4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     7a6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     7a8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <xTaskIncrementTick>
     7ac:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     7ae:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     7b2:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
     7b6:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
     7ba:	cd 91       	ld	r28, X+
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	dd 91       	ld	r29, X+
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	1f 90       	pop	r1
     800:	0f 90       	pop	r0
     802:	0c be       	out	0x3c, r0	; 60
     804:	0f 90       	pop	r0
     806:	0b be       	out	0x3b, r0	; 59
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     80e:	08 95       	ret

00000810 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     810:	9a df       	rcall	.-204    	; 0x746 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     812:	18 95       	reti

00000814 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	0f 92       	push	r0
     81a:	fc 01       	movw	r30, r24
     81c:	86 8d       	ldd	r24, Z+30	; 0x1e
     81e:	81 11       	cpse	r24, r1
     820:	02 c0       	rjmp	.+4      	; 0x826 <prvIsQueueEmpty+0x12>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	01 c0       	rjmp	.+2      	; 0x828 <prvIsQueueEmpty+0x14>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	08 95       	ret

0000082e <prvIsQueueFull>:
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	0f 92       	push	r0
     834:	fc 01       	movw	r30, r24
     836:	26 8d       	ldd	r18, Z+30	; 0x1e
     838:	87 8d       	ldd	r24, Z+31	; 0x1f
     83a:	28 13       	cpse	r18, r24
     83c:	02 c0       	rjmp	.+4      	; 0x842 <prvIsQueueFull+0x14>
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	01 c0       	rjmp	.+2      	; 0x844 <prvIsQueueFull+0x16>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	08 95       	ret

0000084a <prvCopyDataToQueue>:
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	04 2f       	mov	r16, r20
     856:	1e 8d       	ldd	r17, Y+30	; 0x1e
     858:	48 a1       	ldd	r20, Y+32	; 0x20
     85a:	41 11       	cpse	r20, r1
     85c:	0c c0       	rjmp	.+24     	; 0x876 <prvCopyDataToQueue+0x2c>
     85e:	88 81       	ld	r24, Y
     860:	99 81       	ldd	r25, Y+1	; 0x01
     862:	89 2b       	or	r24, r25
     864:	09 f0       	breq	.+2      	; 0x868 <prvCopyDataToQueue+0x1e>
     866:	42 c0       	rjmp	.+132    	; 0x8ec <prvCopyDataToQueue+0xa2>
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	9d 81       	ldd	r25, Y+5	; 0x05
     86c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <xTaskPriorityDisinherit>
     870:	1d 82       	std	Y+5, r1	; 0x05
     872:	1c 82       	std	Y+4, r1	; 0x04
     874:	42 c0       	rjmp	.+132    	; 0x8fa <prvCopyDataToQueue+0xb0>
     876:	01 11       	cpse	r16, r1
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <prvCopyDataToQueue+0x5e>
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	9b 81       	ldd	r25, Y+3	; 0x03
     880:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
     884:	28 a1       	ldd	r18, Y+32	; 0x20
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	9b 81       	ldd	r25, Y+3	; 0x03
     88a:	82 0f       	add	r24, r18
     88c:	91 1d       	adc	r25, r1
     88e:	9b 83       	std	Y+3, r25	; 0x03
     890:	8a 83       	std	Y+2, r24	; 0x02
     892:	2c 81       	ldd	r18, Y+4	; 0x04
     894:	3d 81       	ldd	r19, Y+5	; 0x05
     896:	82 17       	cp	r24, r18
     898:	93 07       	cpc	r25, r19
     89a:	50 f1       	brcs	.+84     	; 0x8f0 <prvCopyDataToQueue+0xa6>
     89c:	88 81       	ld	r24, Y
     89e:	99 81       	ldd	r25, Y+1	; 0x01
     8a0:	9b 83       	std	Y+3, r25	; 0x03
     8a2:	8a 83       	std	Y+2, r24	; 0x02
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	29 c0       	rjmp	.+82     	; 0x8fa <prvCopyDataToQueue+0xb0>
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	8e 81       	ldd	r24, Y+6	; 0x06
     8ac:	9f 81       	ldd	r25, Y+7	; 0x07
     8ae:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
     8b2:	88 a1       	ldd	r24, Y+32	; 0x20
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	91 95       	neg	r25
     8b8:	81 95       	neg	r24
     8ba:	91 09       	sbc	r25, r1
     8bc:	2e 81       	ldd	r18, Y+6	; 0x06
     8be:	3f 81       	ldd	r19, Y+7	; 0x07
     8c0:	28 0f       	add	r18, r24
     8c2:	39 1f       	adc	r19, r25
     8c4:	3f 83       	std	Y+7, r19	; 0x07
     8c6:	2e 83       	std	Y+6, r18	; 0x06
     8c8:	48 81       	ld	r20, Y
     8ca:	59 81       	ldd	r21, Y+1	; 0x01
     8cc:	24 17       	cp	r18, r20
     8ce:	35 07       	cpc	r19, r21
     8d0:	30 f4       	brcc	.+12     	; 0x8de <prvCopyDataToQueue+0x94>
     8d2:	2c 81       	ldd	r18, Y+4	; 0x04
     8d4:	3d 81       	ldd	r19, Y+5	; 0x05
     8d6:	82 0f       	add	r24, r18
     8d8:	93 1f       	adc	r25, r19
     8da:	9f 83       	std	Y+7, r25	; 0x07
     8dc:	8e 83       	std	Y+6, r24	; 0x06
     8de:	02 30       	cpi	r16, 0x02	; 2
     8e0:	49 f4       	brne	.+18     	; 0x8f4 <prvCopyDataToQueue+0xaa>
     8e2:	11 23       	and	r17, r17
     8e4:	49 f0       	breq	.+18     	; 0x8f8 <prvCopyDataToQueue+0xae>
     8e6:	11 50       	subi	r17, 0x01	; 1
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <prvCopyDataToQueue+0xb0>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <prvCopyDataToQueue+0xb0>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <prvCopyDataToQueue+0xb0>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <prvCopyDataToQueue+0xb0>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	1f 5f       	subi	r17, 0xFF	; 255
     8fc:	1e 8f       	std	Y+30, r17	; 0x1e
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <prvCopyDataFromQueue>:
     908:	fc 01       	movw	r30, r24
     90a:	40 a1       	ldd	r20, Z+32	; 0x20
     90c:	44 23       	and	r20, r20
     90e:	a9 f0       	breq	.+42     	; 0x93a <prvCopyDataFromQueue+0x32>
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	26 81       	ldd	r18, Z+6	; 0x06
     914:	37 81       	ldd	r19, Z+7	; 0x07
     916:	24 0f       	add	r18, r20
     918:	35 1f       	adc	r19, r21
     91a:	37 83       	std	Z+7, r19	; 0x07
     91c:	26 83       	std	Z+6, r18	; 0x06
     91e:	84 81       	ldd	r24, Z+4	; 0x04
     920:	95 81       	ldd	r25, Z+5	; 0x05
     922:	28 17       	cp	r18, r24
     924:	39 07       	cpc	r19, r25
     926:	20 f0       	brcs	.+8      	; 0x930 <prvCopyDataFromQueue+0x28>
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	97 83       	std	Z+7, r25	; 0x07
     92e:	86 83       	std	Z+6, r24	; 0x06
     930:	cb 01       	movw	r24, r22
     932:	66 81       	ldd	r22, Z+6	; 0x06
     934:	77 81       	ldd	r23, Z+7	; 0x07
     936:	0c 94 2d 29 	jmp	0x525a	; 0x525a <memcpy>
     93a:	08 95       	ret

0000093c <prvUnlockQueue>:
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	0f 92       	push	r0
     94a:	1a a1       	ldd	r17, Y+34	; 0x22
     94c:	0b c0       	rjmp	.+22     	; 0x964 <prvUnlockQueue+0x28>
     94e:	8b 89       	ldd	r24, Y+19	; 0x13
     950:	88 23       	and	r24, r24
     952:	51 f0       	breq	.+20     	; 0x968 <prvUnlockQueue+0x2c>
     954:	ce 01       	movw	r24, r28
     956:	43 96       	adiw	r24, 0x13	; 19
     958:	0e 94 01 10 	call	0x2002	; 0x2002 <xTaskRemoveFromEventList>
     95c:	81 11       	cpse	r24, r1
     95e:	0e 94 3d 11 	call	0x227a	; 0x227a <vTaskMissedYield>
     962:	11 50       	subi	r17, 0x01	; 1
     964:	11 16       	cp	r1, r17
     966:	9c f3       	brlt	.-26     	; 0x94e <prvUnlockQueue+0x12>
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	8a a3       	std	Y+34, r24	; 0x22
     96c:	0f 90       	pop	r0
     96e:	0f be       	out	0x3f, r0	; 63
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	0f 92       	push	r0
     976:	19 a1       	ldd	r17, Y+33	; 0x21
     978:	0b c0       	rjmp	.+22     	; 0x990 <prvUnlockQueue+0x54>
     97a:	88 85       	ldd	r24, Y+8	; 0x08
     97c:	88 23       	and	r24, r24
     97e:	51 f0       	breq	.+20     	; 0x994 <prvUnlockQueue+0x58>
     980:	ce 01       	movw	r24, r28
     982:	08 96       	adiw	r24, 0x08	; 8
     984:	0e 94 01 10 	call	0x2002	; 0x2002 <xTaskRemoveFromEventList>
     988:	81 11       	cpse	r24, r1
     98a:	0e 94 3d 11 	call	0x227a	; 0x227a <vTaskMissedYield>
     98e:	11 50       	subi	r17, 0x01	; 1
     990:	11 16       	cp	r1, r17
     992:	9c f3       	brlt	.-26     	; 0x97a <prvUnlockQueue+0x3e>
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	89 a3       	std	Y+33, r24	; 0x21
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	08 95       	ret

000009a4 <xQueueGenericReset>:
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	0f 92       	push	r0
     9b0:	e8 81       	ld	r30, Y
     9b2:	f9 81       	ldd	r31, Y+1	; 0x01
     9b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9b6:	28 a1       	ldd	r18, Y+32	; 0x20
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	82 9f       	mul	r24, r18
     9be:	a0 01       	movw	r20, r0
     9c0:	83 9f       	mul	r24, r19
     9c2:	50 0d       	add	r21, r0
     9c4:	92 9f       	mul	r25, r18
     9c6:	50 0d       	add	r21, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	4e 0f       	add	r20, r30
     9cc:	5f 1f       	adc	r21, r31
     9ce:	5d 83       	std	Y+5, r21	; 0x05
     9d0:	4c 83       	std	Y+4, r20	; 0x04
     9d2:	1e 8e       	std	Y+30, r1	; 0x1e
     9d4:	fb 83       	std	Y+3, r31	; 0x03
     9d6:	ea 83       	std	Y+2, r30	; 0x02
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	28 9f       	mul	r18, r24
     9dc:	a0 01       	movw	r20, r0
     9de:	29 9f       	mul	r18, r25
     9e0:	50 0d       	add	r21, r0
     9e2:	38 9f       	mul	r19, r24
     9e4:	50 0d       	add	r21, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	cf 01       	movw	r24, r30
     9ea:	84 0f       	add	r24, r20
     9ec:	95 1f       	adc	r25, r21
     9ee:	9f 83       	std	Y+7, r25	; 0x07
     9f0:	8e 83       	std	Y+6, r24	; 0x06
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	89 a3       	std	Y+33, r24	; 0x21
     9f6:	8a a3       	std	Y+34, r24	; 0x22
     9f8:	61 11       	cpse	r22, r1
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <xQueueGenericReset+0x6e>
     9fc:	88 85       	ldd	r24, Y+8	; 0x08
     9fe:	88 23       	and	r24, r24
     a00:	71 f0       	breq	.+28     	; 0xa1e <xQueueGenericReset+0x7a>
     a02:	ce 01       	movw	r24, r28
     a04:	08 96       	adiw	r24, 0x08	; 8
     a06:	0e 94 01 10 	call	0x2002	; 0x2002 <xTaskRemoveFromEventList>
     a0a:	88 23       	and	r24, r24
     a0c:	41 f0       	breq	.+16     	; 0xa1e <xQueueGenericReset+0x7a>
     a0e:	3a de       	rcall	.-908    	; 0x684 <vPortYield>
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <xQueueGenericReset+0x7a>
     a12:	ce 01       	movw	r24, r28
     a14:	08 96       	adiw	r24, 0x08	; 8
     a16:	68 dd       	rcall	.-1328   	; 0x4e8 <vListInitialise>
     a18:	ce 01       	movw	r24, r28
     a1a:	43 96       	adiw	r24, 0x13	; 19
     a1c:	65 dd       	rcall	.-1334   	; 0x4e8 <vListInitialise>
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <prvInitialiseNewQueue>:
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	f8 01       	movw	r30, r16
     a30:	61 11       	cpse	r22, r1
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <prvInitialiseNewQueue+0x10>
     a34:	11 83       	std	Z+1, r17	; 0x01
     a36:	00 83       	st	Z, r16
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <prvInitialiseNewQueue+0x14>
     a3a:	51 83       	std	Z+1, r21	; 0x01
     a3c:	40 83       	st	Z, r20
     a3e:	87 8f       	std	Z+31, r24	; 0x1f
     a40:	60 a3       	std	Z+32, r22	; 0x20
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	cf 01       	movw	r24, r30
     a46:	ae df       	rcall	.-164    	; 0x9a4 <xQueueGenericReset>
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <xQueueGenericCreate>:
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	f8 2e       	mov	r15, r24
     a5e:	e6 2e       	mov	r14, r22
     a60:	d4 2e       	mov	r13, r20
     a62:	86 9f       	mul	r24, r22
     a64:	c0 01       	movw	r24, r0
     a66:	11 24       	eor	r1, r1
     a68:	83 96       	adiw	r24, 0x23	; 35
     a6a:	58 dc       	rcall	.-1872   	; 0x31c <pvPortMalloc>
     a6c:	ec 01       	movw	r28, r24
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	41 f0       	breq	.+16     	; 0xa82 <xQueueGenericCreate+0x34>
     a72:	8c 01       	movw	r16, r24
     a74:	2d 2d       	mov	r18, r13
     a76:	ac 01       	movw	r20, r24
     a78:	4d 5d       	subi	r20, 0xDD	; 221
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	6e 2d       	mov	r22, r14
     a7e:	8f 2d       	mov	r24, r15
     a80:	d4 df       	rcall	.-88     	; 0xa2a <prvInitialiseNewQueue>
     a82:	ce 01       	movw	r24, r28
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	08 95       	ret

00000a94 <xQueueGenericSend>:
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	29 97       	sbiw	r28, 0x09	; 9
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	7c 01       	movw	r14, r24
     ab6:	6b 01       	movw	r12, r22
     ab8:	2e 83       	std	Y+6, r18	; 0x06
     aba:	3f 83       	std	Y+7, r19	; 0x07
     abc:	48 87       	std	Y+8, r20	; 0x08
     abe:	59 87       	std	Y+9, r21	; 0x09
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	0f 92       	push	r0
     ac8:	f7 01       	movw	r30, r14
     aca:	96 8d       	ldd	r25, Z+30	; 0x1e
     acc:	87 8d       	ldd	r24, Z+31	; 0x1f
     ace:	98 17       	cp	r25, r24
     ad0:	10 f0       	brcs	.+4      	; 0xad6 <xQueueGenericSend+0x42>
     ad2:	02 30       	cpi	r16, 0x02	; 2
     ad4:	b1 f4       	brne	.+44     	; 0xb02 <xQueueGenericSend+0x6e>
     ad6:	40 2f       	mov	r20, r16
     ad8:	b6 01       	movw	r22, r12
     ada:	c7 01       	movw	r24, r14
     adc:	b6 de       	rcall	.-660    	; 0x84a <prvCopyDataToQueue>
     ade:	f7 01       	movw	r30, r14
     ae0:	93 89       	ldd	r25, Z+19	; 0x13
     ae2:	99 23       	and	r25, r25
     ae4:	41 f0       	breq	.+16     	; 0xaf6 <xQueueGenericSend+0x62>
     ae6:	c7 01       	movw	r24, r14
     ae8:	43 96       	adiw	r24, 0x13	; 19
     aea:	0e 94 01 10 	call	0x2002	; 0x2002 <xTaskRemoveFromEventList>
     aee:	88 23       	and	r24, r24
     af0:	21 f0       	breq	.+8      	; 0xafa <xQueueGenericSend+0x66>
     af2:	c8 dd       	rcall	.-1136   	; 0x684 <vPortYield>
     af4:	02 c0       	rjmp	.+4      	; 0xafa <xQueueGenericSend+0x66>
     af6:	81 11       	cpse	r24, r1
     af8:	c5 dd       	rcall	.-1142   	; 0x684 <vPortYield>
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	4c c0       	rjmp	.+152    	; 0xb9a <xQueueGenericSend+0x106>
     b02:	8e 81       	ldd	r24, Y+6	; 0x06
     b04:	9f 81       	ldd	r25, Y+7	; 0x07
     b06:	a8 85       	ldd	r26, Y+8	; 0x08
     b08:	b9 85       	ldd	r27, Y+9	; 0x09
     b0a:	89 2b       	or	r24, r25
     b0c:	8a 2b       	or	r24, r26
     b0e:	8b 2b       	or	r24, r27
     b10:	21 f4       	brne	.+8      	; 0xb1a <xQueueGenericSend+0x86>
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	40 c0       	rjmp	.+128    	; 0xb9a <xQueueGenericSend+0x106>
     b1a:	11 11       	cpse	r17, r1
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <xQueueGenericSend+0x94>
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskInternalSetTimeOutState>
     b26:	11 e0       	ldi	r17, 0x01	; 1
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	10 d7       	rcall	.+3616   	; 0x194e <vTaskSuspendAll>
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	0f 92       	push	r0
     b34:	f7 01       	movw	r30, r14
     b36:	81 a1       	ldd	r24, Z+33	; 0x21
     b38:	8f 3f       	cpi	r24, 0xFF	; 255
     b3a:	09 f4       	brne	.+2      	; 0xb3e <xQueueGenericSend+0xaa>
     b3c:	11 a2       	std	Z+33, r1	; 0x21
     b3e:	f7 01       	movw	r30, r14
     b40:	82 a1       	ldd	r24, Z+34	; 0x22
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	09 f4       	brne	.+2      	; 0xb48 <xQueueGenericSend+0xb4>
     b46:	12 a2       	std	Z+34, r1	; 0x22
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	be 01       	movw	r22, r28
     b4e:	6a 5f       	subi	r22, 0xFA	; 250
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 d7 10 	call	0x21ae	; 0x21ae <xTaskCheckForTimeOut>
     b5a:	81 11       	cpse	r24, r1
     b5c:	19 c0       	rjmp	.+50     	; 0xb90 <xQueueGenericSend+0xfc>
     b5e:	c7 01       	movw	r24, r14
     b60:	66 de       	rcall	.-820    	; 0x82e <prvIsQueueFull>
     b62:	88 23       	and	r24, r24
     b64:	81 f0       	breq	.+32     	; 0xb86 <xQueueGenericSend+0xf2>
     b66:	4e 81       	ldd	r20, Y+6	; 0x06
     b68:	5f 81       	ldd	r21, Y+7	; 0x07
     b6a:	68 85       	ldd	r22, Y+8	; 0x08
     b6c:	79 85       	ldd	r23, Y+9	; 0x09
     b6e:	c7 01       	movw	r24, r14
     b70:	08 96       	adiw	r24, 0x08	; 8
     b72:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <vTaskPlaceOnEventList>
     b76:	c7 01       	movw	r24, r14
     b78:	e1 de       	rcall	.-574    	; 0x93c <prvUnlockQueue>
     b7a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
     b7e:	81 11       	cpse	r24, r1
     b80:	a0 cf       	rjmp	.-192    	; 0xac2 <xQueueGenericSend+0x2e>
     b82:	80 dd       	rcall	.-1280   	; 0x684 <vPortYield>
     b84:	9e cf       	rjmp	.-196    	; 0xac2 <xQueueGenericSend+0x2e>
     b86:	c7 01       	movw	r24, r14
     b88:	d9 de       	rcall	.-590    	; 0x93c <prvUnlockQueue>
     b8a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
     b8e:	99 cf       	rjmp	.-206    	; 0xac2 <xQueueGenericSend+0x2e>
     b90:	c7 01       	movw	r24, r14
     b92:	d4 de       	rcall	.-600    	; 0x93c <prvUnlockQueue>
     b94:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	29 96       	adiw	r28, 0x09	; 9
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	08 95       	ret

00000bb8 <prvInitialiseMutex>:
     bb8:	0f 93       	push	r16
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	69 f0       	breq	.+26     	; 0xbd8 <prvInitialiseMutex+0x20>
     bbe:	fc 01       	movw	r30, r24
     bc0:	15 82       	std	Z+5, r1	; 0x05
     bc2:	14 82       	std	Z+4, r1	; 0x04
     bc4:	11 82       	std	Z+1, r1	; 0x01
     bc6:	10 82       	st	Z, r1
     bc8:	16 82       	std	Z+6, r1	; 0x06
     bca:	00 e0       	ldi	r16, 0x00	; 0
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	a9 01       	movw	r20, r18
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	5e df       	rcall	.-324    	; 0xa94 <xQueueGenericSend>
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <xQueueCreateMutex>:
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	48 2f       	mov	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	33 df       	rcall	.-410    	; 0xa4e <xQueueGenericCreate>
     be8:	ec 01       	movw	r28, r24
     bea:	e6 df       	rcall	.-52     	; 0xbb8 <prvInitialiseMutex>
     bec:	ce 01       	movw	r24, r28
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <xQueueGenericSendFromISR>:
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	8a 01       	movw	r16, r20
     c02:	fc 01       	movw	r30, r24
     c04:	56 8d       	ldd	r21, Z+30	; 0x1e
     c06:	37 8d       	ldd	r19, Z+31	; 0x1f
     c08:	53 17       	cp	r21, r19
     c0a:	10 f0       	brcs	.+4      	; 0xc10 <xQueueGenericSendFromISR+0x1c>
     c0c:	22 30       	cpi	r18, 0x02	; 2
     c0e:	f9 f4       	brne	.+62     	; 0xc4e <xQueueGenericSendFromISR+0x5a>
     c10:	42 2f       	mov	r20, r18
     c12:	78 01       	movw	r14, r16
     c14:	ec 01       	movw	r28, r24
     c16:	1a a1       	ldd	r17, Y+34	; 0x22
     c18:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c1a:	ce 01       	movw	r24, r28
     c1c:	16 de       	rcall	.-980    	; 0x84a <prvCopyDataToQueue>
     c1e:	1f 3f       	cpi	r17, 0xFF	; 255
     c20:	81 f4       	brne	.+32     	; 0xc42 <xQueueGenericSendFromISR+0x4e>
     c22:	8b 89       	ldd	r24, Y+19	; 0x13
     c24:	88 23       	and	r24, r24
     c26:	a9 f0       	breq	.+42     	; 0xc52 <xQueueGenericSendFromISR+0x5e>
     c28:	ce 01       	movw	r24, r28
     c2a:	43 96       	adiw	r24, 0x13	; 19
     c2c:	0e 94 01 10 	call	0x2002	; 0x2002 <xTaskRemoveFromEventList>
     c30:	88 23       	and	r24, r24
     c32:	89 f0       	breq	.+34     	; 0xc56 <xQueueGenericSendFromISR+0x62>
     c34:	e1 14       	cp	r14, r1
     c36:	f1 04       	cpc	r15, r1
     c38:	81 f0       	breq	.+32     	; 0xc5a <xQueueGenericSendFromISR+0x66>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	f7 01       	movw	r30, r14
     c3e:	80 83       	st	Z, r24
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <xQueueGenericSendFromISR+0x68>
     c42:	ff 24       	eor	r15, r15
     c44:	f3 94       	inc	r15
     c46:	f1 0e       	add	r15, r17
     c48:	fa a2       	std	Y+34, r15	; 0x22
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	07 c0       	rjmp	.+14     	; 0xc5c <xQueueGenericSendFromISR+0x68>
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <xQueueGenericSendFromISR+0x68>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <xQueueGenericSendFromISR+0x68>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <xQueueGenericSendFromISR+0x68>
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	08 95       	ret

00000c6a <xQueueReceive>:
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	29 97       	sbiw	r28, 0x09	; 9
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	8c 01       	movw	r16, r24
     c8c:	6b 01       	movw	r12, r22
     c8e:	2e 83       	std	Y+6, r18	; 0x06
     c90:	3f 83       	std	Y+7, r19	; 0x07
     c92:	48 87       	std	Y+8, r20	; 0x08
     c94:	59 87       	std	Y+9, r21	; 0x09
     c96:	e1 2c       	mov	r14, r1
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	0f 92       	push	r0
     c9e:	f8 01       	movw	r30, r16
     ca0:	f6 8c       	ldd	r15, Z+30	; 0x1e
     ca2:	ff 20       	and	r15, r15
     ca4:	99 f0       	breq	.+38     	; 0xccc <xQueueReceive+0x62>
     ca6:	b6 01       	movw	r22, r12
     ca8:	c8 01       	movw	r24, r16
     caa:	2e de       	rcall	.-932    	; 0x908 <prvCopyDataFromQueue>
     cac:	fa 94       	dec	r15
     cae:	f8 01       	movw	r30, r16
     cb0:	f6 8e       	std	Z+30, r15	; 0x1e
     cb2:	80 85       	ldd	r24, Z+8	; 0x08
     cb4:	88 23       	and	r24, r24
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <xQueueReceive+0x5a>
     cb8:	c8 01       	movw	r24, r16
     cba:	08 96       	adiw	r24, 0x08	; 8
     cbc:	0e 94 01 10 	call	0x2002	; 0x2002 <xTaskRemoveFromEventList>
     cc0:	81 11       	cpse	r24, r1
     cc2:	e0 dc       	rcall	.-1600   	; 0x684 <vPortYield>
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	4f c0       	rjmp	.+158    	; 0xd6a <xQueueReceive+0x100>
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	a8 85       	ldd	r26, Y+8	; 0x08
     cd2:	b9 85       	ldd	r27, Y+9	; 0x09
     cd4:	89 2b       	or	r24, r25
     cd6:	8a 2b       	or	r24, r26
     cd8:	8b 2b       	or	r24, r27
     cda:	21 f4       	brne	.+8      	; 0xce4 <xQueueReceive+0x7a>
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	43 c0       	rjmp	.+134    	; 0xd6a <xQueueReceive+0x100>
     ce4:	e1 10       	cpse	r14, r1
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <xQueueReceive+0x8a>
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskInternalSetTimeOutState>
     cf0:	ee 24       	eor	r14, r14
     cf2:	e3 94       	inc	r14
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	2a d6       	rcall	.+3156   	; 0x194e <vTaskSuspendAll>
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	0f 92       	push	r0
     d00:	f8 01       	movw	r30, r16
     d02:	81 a1       	ldd	r24, Z+33	; 0x21
     d04:	8f 3f       	cpi	r24, 0xFF	; 255
     d06:	09 f4       	brne	.+2      	; 0xd0a <xQueueReceive+0xa0>
     d08:	11 a2       	std	Z+33, r1	; 0x21
     d0a:	f8 01       	movw	r30, r16
     d0c:	82 a1       	ldd	r24, Z+34	; 0x22
     d0e:	8f 3f       	cpi	r24, 0xFF	; 255
     d10:	09 f4       	brne	.+2      	; 0xd14 <xQueueReceive+0xaa>
     d12:	12 a2       	std	Z+34, r1	; 0x22
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	be 01       	movw	r22, r28
     d1a:	6a 5f       	subi	r22, 0xFA	; 250
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 d7 10 	call	0x21ae	; 0x21ae <xTaskCheckForTimeOut>
     d26:	81 11       	cpse	r24, r1
     d28:	17 c0       	rjmp	.+46     	; 0xd58 <xQueueReceive+0xee>
     d2a:	c8 01       	movw	r24, r16
     d2c:	73 dd       	rcall	.-1306   	; 0x814 <prvIsQueueEmpty>
     d2e:	88 23       	and	r24, r24
     d30:	79 f0       	breq	.+30     	; 0xd50 <xQueueReceive+0xe6>
     d32:	4e 81       	ldd	r20, Y+6	; 0x06
     d34:	5f 81       	ldd	r21, Y+7	; 0x07
     d36:	68 85       	ldd	r22, Y+8	; 0x08
     d38:	79 85       	ldd	r23, Y+9	; 0x09
     d3a:	c8 01       	movw	r24, r16
     d3c:	43 96       	adiw	r24, 0x13	; 19
     d3e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <vTaskPlaceOnEventList>
     d42:	c8 01       	movw	r24, r16
     d44:	fb dd       	rcall	.-1034   	; 0x93c <prvUnlockQueue>
     d46:	43 d7       	rcall	.+3718   	; 0x1bce <xTaskResumeAll>
     d48:	81 11       	cpse	r24, r1
     d4a:	a6 cf       	rjmp	.-180    	; 0xc98 <xQueueReceive+0x2e>
     d4c:	9b dc       	rcall	.-1738   	; 0x684 <vPortYield>
     d4e:	a4 cf       	rjmp	.-184    	; 0xc98 <xQueueReceive+0x2e>
     d50:	c8 01       	movw	r24, r16
     d52:	f4 dd       	rcall	.-1048   	; 0x93c <prvUnlockQueue>
     d54:	3c d7       	rcall	.+3704   	; 0x1bce <xTaskResumeAll>
     d56:	a0 cf       	rjmp	.-192    	; 0xc98 <xQueueReceive+0x2e>
     d58:	c8 01       	movw	r24, r16
     d5a:	f0 dd       	rcall	.-1056   	; 0x93c <prvUnlockQueue>
     d5c:	38 d7       	rcall	.+3696   	; 0x1bce <xTaskResumeAll>
     d5e:	c8 01       	movw	r24, r16
     d60:	59 dd       	rcall	.-1358   	; 0x814 <prvIsQueueEmpty>
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <xQueueReceive+0xfe>
     d66:	98 cf       	rjmp	.-208    	; 0xc98 <xQueueReceive+0x2e>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	29 96       	adiw	r28, 0x09	; 9
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	0f 92       	push	r0
     d94:	89 a1       	ldd	r24, Y+33	; 0x21
     d96:	8f 3f       	cpi	r24, 0xFF	; 255
     d98:	09 f4       	brne	.+2      	; 0xd9c <vQueueWaitForMessageRestricted+0x14>
     d9a:	19 a2       	std	Y+33, r1	; 0x21
     d9c:	8a a1       	ldd	r24, Y+34	; 0x22
     d9e:	8f 3f       	cpi	r24, 0xFF	; 255
     da0:	09 f4       	brne	.+2      	; 0xda4 <vQueueWaitForMessageRestricted+0x1c>
     da2:	1a a2       	std	Y+34, r1	; 0x22
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     da8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     daa:	81 11       	cpse	r24, r1
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     dae:	ce 01       	movw	r24, r28
     db0:	43 96       	adiw	r24, 0x13	; 19
     db2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     db6:	ce 01       	movw	r24, r28
     db8:	c1 dd       	rcall	.-1150   	; 0x93c <prvUnlockQueue>
    }
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     dc0:	fc 01       	movw	r30, r24
     dc2:	44 81       	ldd	r20, Z+4	; 0x04
     dc4:	55 81       	ldd	r21, Z+5	; 0x05
     dc6:	22 81       	ldd	r18, Z+2	; 0x02
     dc8:	33 81       	ldd	r19, Z+3	; 0x03
     dca:	24 0f       	add	r18, r20
     dcc:	35 1f       	adc	r19, r21
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	b9 01       	movw	r22, r18
     dd4:	68 1b       	sub	r22, r24
     dd6:	79 0b       	sbc	r23, r25
     dd8:	cb 01       	movw	r24, r22
     dda:	64 17       	cp	r22, r20
     ddc:	75 07       	cpc	r23, r21
     dde:	10 f0       	brcs	.+4      	; 0xde4 <prvBytesInBuffer+0x24>
     de0:	84 1b       	sub	r24, r20
     de2:	95 0b       	sbc	r25, r21
     de4:	08 95       	ret

00000de6 <prvInitialiseNewStreamBuffer>:
     de6:	0f 93       	push	r16
     de8:	fc 01       	movw	r30, r24
     dea:	8f e0       	ldi	r24, 0x0F	; 15
     dec:	df 01       	movw	r26, r30
     dee:	1d 92       	st	X+, r1
     df0:	8a 95       	dec	r24
     df2:	e9 f7       	brne	.-6      	; 0xdee <prvInitialiseNewStreamBuffer+0x8>
     df4:	75 87       	std	Z+13, r23	; 0x0d
     df6:	64 87       	std	Z+12, r22	; 0x0c
     df8:	55 83       	std	Z+5, r21	; 0x05
     dfa:	44 83       	std	Z+4, r20	; 0x04
     dfc:	37 83       	std	Z+7, r19	; 0x07
     dfe:	26 83       	std	Z+6, r18	; 0x06
     e00:	06 87       	std	Z+14, r16	; 0x0e
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <prvWriteBytesToBuffer>:
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	6c 01       	movw	r12, r24
     e1c:	5b 01       	movw	r10, r22
     e1e:	7a 01       	movw	r14, r20
     e20:	fc 01       	movw	r30, r24
     e22:	c2 81       	ldd	r28, Z+2	; 0x02
     e24:	d3 81       	ldd	r29, Z+3	; 0x03
     e26:	04 81       	ldd	r16, Z+4	; 0x04
     e28:	15 81       	ldd	r17, Z+5	; 0x05
     e2a:	0c 1b       	sub	r16, r28
     e2c:	1d 0b       	sbc	r17, r29
     e2e:	40 17       	cp	r20, r16
     e30:	51 07       	cpc	r21, r17
     e32:	08 f4       	brcc	.+2      	; 0xe36 <prvWriteBytesToBuffer+0x30>
     e34:	8a 01       	movw	r16, r20
     e36:	f6 01       	movw	r30, r12
     e38:	84 85       	ldd	r24, Z+12	; 0x0c
     e3a:	95 85       	ldd	r25, Z+13	; 0x0d
     e3c:	a8 01       	movw	r20, r16
     e3e:	b5 01       	movw	r22, r10
     e40:	8c 0f       	add	r24, r28
     e42:	9d 1f       	adc	r25, r29
     e44:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
     e48:	0e 15       	cp	r16, r14
     e4a:	1f 05       	cpc	r17, r15
     e4c:	58 f4       	brcc	.+22     	; 0xe64 <prvWriteBytesToBuffer+0x5e>
     e4e:	a7 01       	movw	r20, r14
     e50:	40 1b       	sub	r20, r16
     e52:	51 0b       	sbc	r21, r17
     e54:	b5 01       	movw	r22, r10
     e56:	60 0f       	add	r22, r16
     e58:	71 1f       	adc	r23, r17
     e5a:	f6 01       	movw	r30, r12
     e5c:	84 85       	ldd	r24, Z+12	; 0x0c
     e5e:	95 85       	ldd	r25, Z+13	; 0x0d
     e60:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
     e64:	ce 01       	movw	r24, r28
     e66:	8e 0d       	add	r24, r14
     e68:	9f 1d       	adc	r25, r15
     e6a:	f6 01       	movw	r30, r12
     e6c:	24 81       	ldd	r18, Z+4	; 0x04
     e6e:	35 81       	ldd	r19, Z+5	; 0x05
     e70:	82 17       	cp	r24, r18
     e72:	93 07       	cpc	r25, r19
     e74:	10 f0       	brcs	.+4      	; 0xe7a <prvWriteBytesToBuffer+0x74>
     e76:	82 1b       	sub	r24, r18
     e78:	93 0b       	sbc	r25, r19
     e7a:	f6 01       	movw	r30, r12
     e7c:	93 83       	std	Z+3, r25	; 0x03
     e7e:	82 83       	std	Z+2, r24	; 0x02
     e80:	c7 01       	movw	r24, r14
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	08 95       	ret

00000e98 <prvWriteMessageToBuffer>:
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	1f 92       	push	r1
     eaa:	1f 92       	push	r1
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	7c 01       	movw	r14, r24
     eb2:	6b 01       	movw	r12, r22
     eb4:	5a 83       	std	Y+2, r21	; 0x02
     eb6:	49 83       	std	Y+1, r20	; 0x01
     eb8:	21 15       	cp	r18, r1
     eba:	31 05       	cpc	r19, r1
     ebc:	c1 f0       	breq	.+48     	; 0xeee <prvWriteMessageToBuffer+0x56>
     ebe:	fc 01       	movw	r30, r24
     ec0:	86 85       	ldd	r24, Z+14	; 0x0e
     ec2:	80 fd       	sbrc	r24, 0
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <prvWriteMessageToBuffer+0x3e>
     ec6:	42 17       	cp	r20, r18
     ec8:	53 07       	cpc	r21, r19
     eca:	08 f4       	brcc	.+2      	; 0xece <prvWriteMessageToBuffer+0x36>
     ecc:	9a 01       	movw	r18, r20
     ece:	3a 83       	std	Y+2, r19	; 0x02
     ed0:	29 83       	std	Y+1, r18	; 0x01
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <prvWriteMessageToBuffer+0x5c>
     ed6:	20 17       	cp	r18, r16
     ed8:	31 07       	cpc	r19, r17
     eda:	58 f0       	brcs	.+22     	; 0xef2 <prvWriteMessageToBuffer+0x5a>
     edc:	42 e0       	ldi	r20, 0x02	; 2
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	be 01       	movw	r22, r28
     ee2:	6f 5f       	subi	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	c7 01       	movw	r24, r14
     ee8:	8e df       	rcall	.-228    	; 0xe06 <prvWriteBytesToBuffer>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <prvWriteMessageToBuffer+0x5c>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <prvWriteMessageToBuffer+0x5c>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	88 23       	and	r24, r24
     ef6:	31 f0       	breq	.+12     	; 0xf04 <prvWriteMessageToBuffer+0x6c>
     ef8:	49 81       	ldd	r20, Y+1	; 0x01
     efa:	5a 81       	ldd	r21, Y+2	; 0x02
     efc:	b6 01       	movw	r22, r12
     efe:	c7 01       	movw	r24, r14
     f00:	82 df       	rcall	.-252    	; 0xe06 <prvWriteBytesToBuffer>
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <prvWriteMessageToBuffer+0x70>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	08 95       	ret

00000f1e <prvReadBytesFromBuffer>:
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	7c 01       	movw	r14, r24
     f34:	5b 01       	movw	r10, r22
     f36:	e9 01       	movw	r28, r18
     f38:	42 17       	cp	r20, r18
     f3a:	53 07       	cpc	r21, r19
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <prvReadBytesFromBuffer+0x22>
     f3e:	ea 01       	movw	r28, r20
     f40:	20 97       	sbiw	r28, 0x00	; 0
     f42:	81 f1       	breq	.+96     	; 0xfa4 <prvReadBytesFromBuffer+0x86>
     f44:	f7 01       	movw	r30, r14
     f46:	00 81       	ld	r16, Z
     f48:	11 81       	ldd	r17, Z+1	; 0x01
     f4a:	84 81       	ldd	r24, Z+4	; 0x04
     f4c:	95 81       	ldd	r25, Z+5	; 0x05
     f4e:	80 1b       	sub	r24, r16
     f50:	91 0b       	sbc	r25, r17
     f52:	6e 01       	movw	r12, r28
     f54:	8c 17       	cp	r24, r28
     f56:	9d 07       	cpc	r25, r29
     f58:	08 f4       	brcc	.+2      	; 0xf5c <prvReadBytesFromBuffer+0x3e>
     f5a:	6c 01       	movw	r12, r24
     f5c:	f7 01       	movw	r30, r14
     f5e:	64 85       	ldd	r22, Z+12	; 0x0c
     f60:	75 85       	ldd	r23, Z+13	; 0x0d
     f62:	60 0f       	add	r22, r16
     f64:	71 1f       	adc	r23, r17
     f66:	a6 01       	movw	r20, r12
     f68:	c5 01       	movw	r24, r10
     f6a:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
     f6e:	cc 16       	cp	r12, r28
     f70:	dd 06       	cpc	r13, r29
     f72:	58 f4       	brcc	.+22     	; 0xf8a <prvReadBytesFromBuffer+0x6c>
     f74:	ae 01       	movw	r20, r28
     f76:	4c 19       	sub	r20, r12
     f78:	5d 09       	sbc	r21, r13
     f7a:	f7 01       	movw	r30, r14
     f7c:	64 85       	ldd	r22, Z+12	; 0x0c
     f7e:	75 85       	ldd	r23, Z+13	; 0x0d
     f80:	c5 01       	movw	r24, r10
     f82:	8c 0d       	add	r24, r12
     f84:	9d 1d       	adc	r25, r13
     f86:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
     f8a:	0c 0f       	add	r16, r28
     f8c:	1d 1f       	adc	r17, r29
     f8e:	f7 01       	movw	r30, r14
     f90:	84 81       	ldd	r24, Z+4	; 0x04
     f92:	95 81       	ldd	r25, Z+5	; 0x05
     f94:	08 17       	cp	r16, r24
     f96:	19 07       	cpc	r17, r25
     f98:	10 f0       	brcs	.+4      	; 0xf9e <prvReadBytesFromBuffer+0x80>
     f9a:	08 1b       	sub	r16, r24
     f9c:	19 0b       	sbc	r17, r25
     f9e:	f7 01       	movw	r30, r14
     fa0:	11 83       	std	Z+1, r17	; 0x01
     fa2:	00 83       	st	Z, r16
     fa4:	ce 01       	movw	r24, r28
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	08 95       	ret

00000fbc <prvReadMessageFromBuffer>:
     fbc:	6f 92       	push	r6
     fbe:	7f 92       	push	r7
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	1f 92       	push	r1
     fda:	1f 92       	push	r1
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	6c 01       	movw	r12, r24
     fe2:	4b 01       	movw	r8, r22
     fe4:	5a 01       	movw	r10, r20
     fe6:	79 01       	movw	r14, r18
     fe8:	01 15       	cp	r16, r1
     fea:	11 05       	cpc	r17, r1
     fec:	b1 f0       	breq	.+44     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
     fee:	fc 01       	movw	r30, r24
     ff0:	60 80       	ld	r6, Z
     ff2:	71 80       	ldd	r7, Z+1	; 0x01
     ff4:	a8 01       	movw	r20, r16
     ff6:	be 01       	movw	r22, r28
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	90 df       	rcall	.-224    	; 0xf1e <prvReadBytesFromBuffer>
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	e0 1a       	sub	r14, r16
    1004:	f1 0a       	sbc	r15, r17
    1006:	a8 16       	cp	r10, r24
    1008:	b9 06       	cpc	r11, r25
    100a:	30 f4       	brcc	.+12     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100c:	f6 01       	movw	r30, r12
    100e:	71 82       	std	Z+1, r7	; 0x01
    1010:	60 82       	st	Z, r6
    1012:	a1 2c       	mov	r10, r1
    1014:	b1 2c       	mov	r11, r1
    1016:	01 c0       	rjmp	.+2      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1018:	5c 01       	movw	r10, r24
    101a:	97 01       	movw	r18, r14
    101c:	a5 01       	movw	r20, r10
    101e:	b4 01       	movw	r22, r8
    1020:	c6 01       	movw	r24, r12
    1022:	7d df       	rcall	.-262    	; 0xf1e <prvReadBytesFromBuffer>
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
    103c:	9f 90       	pop	r9
    103e:	8f 90       	pop	r8
    1040:	7f 90       	pop	r7
    1042:	6f 90       	pop	r6
    1044:	08 95       	ret

00001046 <xStreamBufferGenericCreate>:
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	6b 01       	movw	r12, r22
    1058:	41 30       	cpi	r20, 0x01	; 1
    105a:	11 f4       	brne	.+4      	; 0x1060 <xStreamBufferGenericCreate+0x1a>
    105c:	01 e0       	ldi	r16, 0x01	; 1
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <xStreamBufferGenericCreate+0x1c>
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	c1 14       	cp	r12, r1
    1064:	d1 04       	cpc	r13, r1
    1066:	19 f4       	brne	.+6      	; 0x106e <xStreamBufferGenericCreate+0x28>
    1068:	cc 24       	eor	r12, r12
    106a:	c3 94       	inc	r12
    106c:	d1 2c       	mov	r13, r1
    106e:	ce 01       	movw	r24, r28
    1070:	40 96       	adiw	r24, 0x10	; 16
    1072:	c8 17       	cp	r28, r24
    1074:	d9 07       	cpc	r29, r25
    1076:	20 f4       	brcc	.+8      	; 0x1080 <xStreamBufferGenericCreate+0x3a>
    1078:	21 96       	adiw	r28, 0x01	; 1
    107a:	50 d9       	rcall	.-3424   	; 0x31c <pvPortMalloc>
    107c:	7c 01       	movw	r14, r24
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <xStreamBufferGenericCreate+0x3e>
    1080:	e1 2c       	mov	r14, r1
    1082:	f1 2c       	mov	r15, r1
    1084:	e1 14       	cp	r14, r1
    1086:	f1 04       	cpc	r15, r1
    1088:	39 f0       	breq	.+14     	; 0x1098 <xStreamBufferGenericCreate+0x52>
    108a:	96 01       	movw	r18, r12
    108c:	ae 01       	movw	r20, r28
    108e:	b7 01       	movw	r22, r14
    1090:	61 5f       	subi	r22, 0xF1	; 241
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	c7 01       	movw	r24, r14
    1096:	a7 de       	rcall	.-690    	; 0xde6 <prvInitialiseNewStreamBuffer>
    1098:	c7 01       	movw	r24, r14
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	08 95       	ret

000010aa <xStreamBufferReset>:
    10aa:	0f 93       	push	r16
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	0f 92       	push	r0
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 85       	ldd	r18, Z+8	; 0x08
    10b6:	31 85       	ldd	r19, Z+9	; 0x09
    10b8:	23 2b       	or	r18, r19
    10ba:	71 f4       	brne	.+28     	; 0x10d8 <xStreamBufferReset+0x2e>
    10bc:	22 85       	ldd	r18, Z+10	; 0x0a
    10be:	33 85       	ldd	r19, Z+11	; 0x0b
    10c0:	23 2b       	or	r18, r19
    10c2:	61 f4       	brne	.+24     	; 0x10dc <xStreamBufferReset+0x32>
    10c4:	26 81       	ldd	r18, Z+6	; 0x06
    10c6:	37 81       	ldd	r19, Z+7	; 0x07
    10c8:	44 81       	ldd	r20, Z+4	; 0x04
    10ca:	55 81       	ldd	r21, Z+5	; 0x05
    10cc:	64 85       	ldd	r22, Z+12	; 0x0c
    10ce:	75 85       	ldd	r23, Z+13	; 0x0d
    10d0:	06 85       	ldd	r16, Z+14	; 0x0e
    10d2:	89 de       	rcall	.-750    	; 0xde6 <prvInitialiseNewStreamBuffer>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <xStreamBufferReset+0x34>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	01 c0       	rjmp	.+2      	; 0x10de <xStreamBufferReset+0x34>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <xStreamBufferSpacesAvailable>:
    10e6:	fc 01       	movw	r30, r24
    10e8:	24 81       	ldd	r18, Z+4	; 0x04
    10ea:	35 81       	ldd	r19, Z+5	; 0x05
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	42 81       	ldd	r20, Z+2	; 0x02
    10f6:	53 81       	ldd	r21, Z+3	; 0x03
    10f8:	84 1b       	sub	r24, r20
    10fa:	95 0b       	sbc	r25, r21
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	82 17       	cp	r24, r18
    1100:	93 07       	cpc	r25, r19
    1102:	10 f0       	brcs	.+4      	; 0x1108 <xStreamBufferSpacesAvailable+0x22>
    1104:	82 1b       	sub	r24, r18
    1106:	93 0b       	sbc	r25, r19
    1108:	08 95       	ret

0000110a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    110a:	2f 92       	push	r2
    110c:	3f 92       	push	r3
    110e:	4f 92       	push	r4
    1110:	5f 92       	push	r5
    1112:	6f 92       	push	r6
    1114:	7f 92       	push	r7
    1116:	8f 92       	push	r8
    1118:	9f 92       	push	r9
    111a:	af 92       	push	r10
    111c:	bf 92       	push	r11
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	2b 97       	sbiw	r28, 0x0b	; 11
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	4c 01       	movw	r8, r24
    1140:	7b 87       	std	Y+11, r23	; 0x0b
    1142:	6a 87       	std	Y+10, r22	; 0x0a
    1144:	1a 01       	movw	r2, r20
    1146:	0e 83       	std	Y+6, r16	; 0x06
    1148:	1f 83       	std	Y+7, r17	; 0x07
    114a:	28 87       	std	Y+8, r18	; 0x08
    114c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    114e:	fc 01       	movw	r30, r24
    1150:	84 81       	ldd	r24, Z+4	; 0x04
    1152:	95 81       	ldd	r25, Z+5	; 0x05
    1154:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1156:	26 85       	ldd	r18, Z+14	; 0x0e
    1158:	20 ff       	sbrs	r18, 0
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    115c:	2a 01       	movw	r4, r20
    115e:	f2 e0       	ldi	r31, 0x02	; 2
    1160:	4f 0e       	add	r4, r31
    1162:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1164:	84 15       	cp	r24, r4
    1166:	95 05       	cpc	r25, r5
    1168:	58 f4       	brcc	.+22     	; 0x1180 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    116a:	1e 82       	std	Y+6, r1	; 0x06
    116c:	1f 82       	std	Y+7, r1	; 0x07
    116e:	18 86       	std	Y+8, r1	; 0x08
    1170:	19 86       	std	Y+9, r1	; 0x09
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1174:	84 17       	cp	r24, r20
    1176:	95 07       	cpc	r25, r21
    1178:	10 f0       	brcs	.+4      	; 0x117e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    117a:	2a 01       	movw	r4, r20
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    117e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	9f 81       	ldd	r25, Y+7	; 0x07
    1184:	a8 85       	ldd	r26, Y+8	; 0x08
    1186:	b9 85       	ldd	r27, Y+9	; 0x09
    1188:	89 2b       	or	r24, r25
    118a:	8a 2b       	or	r24, r26
    118c:	8b 2b       	or	r24, r27
    118e:	09 f4       	brne	.+2      	; 0x1192 <xStreamBufferSend+0x88>
    1190:	36 c0       	rjmp	.+108    	; 0x11fe <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	e4 d7       	rcall	.+4040   	; 0x2160 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    119e:	c4 01       	movw	r24, r8
    11a0:	a2 df       	rcall	.-188    	; 0x10e6 <xStreamBufferSpacesAvailable>
    11a2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    11a4:	84 15       	cp	r24, r4
    11a6:	95 05       	cpc	r25, r5
    11a8:	38 f5       	brcc	.+78     	; 0x11f8 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    11b4:	0e 94 41 11 	call	0x2282	; 0x2282 <xTaskGetCurrentTaskHandle>
    11b8:	f4 01       	movw	r30, r8
    11ba:	93 87       	std	Z+11, r25	; 0x0b
    11bc:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    11c2:	ae 80       	ldd	r10, Y+6	; 0x06
    11c4:	bf 80       	ldd	r11, Y+7	; 0x07
    11c6:	c8 84       	ldd	r12, Y+8	; 0x08
    11c8:	d9 84       	ldd	r13, Y+9	; 0x09
    11ca:	e1 2c       	mov	r14, r1
    11cc:	f1 2c       	mov	r15, r1
    11ce:	00 e0       	ldi	r16, 0x00	; 0
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    11d2:	98 01       	movw	r18, r16
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	ba 01       	movw	r22, r20
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    11e0:	f4 01       	movw	r30, r8
    11e2:	13 86       	std	Z+11, r1	; 0x0b
    11e4:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    11e6:	be 01       	movw	r22, r28
    11e8:	6a 5f       	subi	r22, 0xFA	; 250
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	de d7       	rcall	.+4028   	; 0x21ae <xTaskCheckForTimeOut>
    11f2:	88 23       	and	r24, r24
    11f4:	89 f2       	breq	.-94     	; 0x1198 <xStreamBufferSend+0x8e>
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
                    break;
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    11fe:	61 2c       	mov	r6, r1
    1200:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1202:	61 14       	cp	r6, r1
    1204:	71 04       	cpc	r7, r1
    1206:	19 f4       	brne	.+6      	; 0x120e <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1208:	c4 01       	movw	r24, r8
    120a:	6d df       	rcall	.-294    	; 0x10e6 <xStreamBufferSpacesAvailable>
    120c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    120e:	82 01       	movw	r16, r4
    1210:	93 01       	movw	r18, r6
    1212:	a1 01       	movw	r20, r2
    1214:	6a 85       	ldd	r22, Y+10	; 0x0a
    1216:	7b 85       	ldd	r23, Y+11	; 0x0b
    1218:	c4 01       	movw	r24, r8
    121a:	3e de       	rcall	.-900    	; 0xe98 <prvWriteMessageToBuffer>
    121c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    121e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1220:	e9 f0       	breq	.+58     	; 0x125c <xStreamBufferSend+0x152>
    1222:	c4 01       	movw	r24, r8
    1224:	cd dd       	rcall	.-1126   	; 0xdc0 <prvBytesInBuffer>
    1226:	f4 01       	movw	r30, r8
    1228:	26 81       	ldd	r18, Z+6	; 0x06
    122a:	37 81       	ldd	r19, Z+7	; 0x07
    122c:	82 17       	cp	r24, r18
    122e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1230:	a8 f0       	brcs	.+42     	; 0x125c <xStreamBufferSend+0x152>
    1232:	8d d3       	rcall	.+1818   	; 0x194e <vTaskSuspendAll>
    1234:	f4 01       	movw	r30, r8
    1236:	80 85       	ldd	r24, Z+8	; 0x08
    1238:	91 85       	ldd	r25, Z+9	; 0x09
    123a:	89 2b       	or	r24, r25
    123c:	71 f0       	breq	.+28     	; 0x125a <xStreamBufferSend+0x150>
    123e:	80 85       	ldd	r24, Z+8	; 0x08
    1240:	91 85       	ldd	r25, Z+9	; 0x09
    1242:	e1 2c       	mov	r14, r1
    1244:	f1 2c       	mov	r15, r1
    1246:	00 e0       	ldi	r16, 0x00	; 0
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	0e 94 56 12 	call	0x24ac	; 0x24ac <xTaskGenericNotify>
    1254:	f4 01       	movw	r30, r8
    1256:	11 86       	std	Z+9, r1	; 0x09
    1258:	10 86       	std	Z+8, r1	; 0x08
    125a:	b9 d4       	rcall	.+2418   	; 0x1bce <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    125c:	c6 01       	movw	r24, r12
    125e:	2b 96       	adiw	r28, 0x0b	; 11
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	2f 90       	pop	r2
    128e:	08 95       	ret

00001290 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	ec 01       	movw	r28, r24
    12a6:	7b 01       	movw	r14, r22
    12a8:	5a 01       	movw	r10, r20
    12aa:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ae:	80 ff       	sbrs	r24, 0
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12b2:	8a 01       	movw	r16, r20
    12b4:	0e 5f       	subi	r16, 0xFE	; 254
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    12ba:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12bc:	ce 01       	movw	r24, r28
    12be:	13 df       	rcall	.-474    	; 0x10e6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12c0:	9c 01       	movw	r18, r24
    12c2:	a5 01       	movw	r20, r10
    12c4:	b7 01       	movw	r22, r14
    12c6:	ce 01       	movw	r24, r28
    12c8:	e7 dd       	rcall	.-1074   	; 0xe98 <prvWriteMessageToBuffer>
    12ca:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    12cc:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12ce:	c1 f0       	breq	.+48     	; 0x1300 <xStreamBufferSendFromISR+0x70>
    12d0:	ce 01       	movw	r24, r28
    12d2:	76 dd       	rcall	.-1300   	; 0xdc0 <prvBytesInBuffer>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	82 17       	cp	r24, r18
    12da:	93 07       	cpc	r25, r19
    12dc:	88 f0       	brcs	.+34     	; 0x1300 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    12de:	88 85       	ldd	r24, Y+8	; 0x08
    12e0:	99 85       	ldd	r25, Y+9	; 0x09
    12e2:	89 2b       	or	r24, r25
    12e4:	69 f0       	breq	.+26     	; 0x1300 <xStreamBufferSendFromISR+0x70>
    12e6:	88 85       	ldd	r24, Y+8	; 0x08
    12e8:	99 85       	ldd	r25, Y+9	; 0x09
    12ea:	e1 2c       	mov	r14, r1
    12ec:	f1 2c       	mov	r15, r1
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 4d 13 	call	0x269a	; 0x269a <xTaskGenericNotifyFromISR>
    12fc:	19 86       	std	Y+9, r1	; 0x09
    12fe:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1300:	c5 01       	movw	r24, r10
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	08 95       	ret

00001318 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1318:	4f 92       	push	r4
    131a:	5f 92       	push	r5
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	2b 01       	movw	r4, r22
    133c:	3a 01       	movw	r6, r20
    133e:	58 01       	movw	r10, r16
    1340:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1342:	8e 85       	ldd	r24, Y+14	; 0x0e
    1344:	80 ff       	sbrs	r24, 0
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1348:	68 94       	set
    134a:	88 24       	eor	r8, r8
    134c:	81 f8       	bld	r8, 1
    134e:	91 2c       	mov	r9, r1
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1352:	81 2c       	mov	r8, r1
    1354:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1356:	a1 14       	cp	r10, r1
    1358:	b1 04       	cpc	r11, r1
    135a:	c1 04       	cpc	r12, r1
    135c:	d1 04       	cpc	r13, r1
    135e:	31 f1       	breq	.+76     	; 0x13ac <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1366:	ce 01       	movw	r24, r28
    1368:	2b dd       	rcall	.-1450   	; 0xdc0 <prvBytesInBuffer>
    136a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    136c:	88 16       	cp	r8, r24
    136e:	99 06       	cpc	r9, r25
    1370:	40 f0       	brcs	.+16     	; 0x1382 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    137c:	82 d7       	rcall	.+3844   	; 0x2282 <xTaskGetCurrentTaskHandle>
    137e:	99 87       	std	Y+9, r25	; 0x09
    1380:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1386:	8e 14       	cp	r8, r14
    1388:	9f 04       	cpc	r9, r15
    138a:	98 f0       	brcs	.+38     	; 0x13b2 <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    138c:	e1 2c       	mov	r14, r1
    138e:	f1 2c       	mov	r15, r1
    1390:	00 e0       	ldi	r16, 0x00	; 0
    1392:	10 e0       	ldi	r17, 0x00	; 0
    1394:	98 01       	movw	r18, r16
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	ba 01       	movw	r22, r20
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	df d7       	rcall	.+4030   	; 0x235e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13a0:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13a2:	18 86       	std	Y+8, r1	; 0x08
    13a4:	ce 01       	movw	r24, r28
    13a6:	0c dd       	rcall	.-1512   	; 0xdc0 <prvBytesInBuffer>
    13a8:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <xStreamBufferReceive+0x9a>
    13ac:	ce 01       	movw	r24, r28
    13ae:	08 dd       	rcall	.-1520   	; 0xdc0 <prvBytesInBuffer>
    13b0:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    13b2:	8e 14       	cp	r8, r14
    13b4:	9f 04       	cpc	r9, r15
    13b6:	e8 f4       	brcc	.+58     	; 0x13f2 <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    13b8:	84 01       	movw	r16, r8
    13ba:	97 01       	movw	r18, r14
    13bc:	a3 01       	movw	r20, r6
    13be:	b2 01       	movw	r22, r4
    13c0:	ce 01       	movw	r24, r28
    13c2:	fc dd       	rcall	.-1032   	; 0xfbc <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    13c4:	6c 01       	movw	r12, r24
    13c6:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    13c8:	b1 f0       	breq	.+44     	; 0x13f6 <xStreamBufferReceive+0xde>
    13ca:	c1 d2       	rcall	.+1410   	; 0x194e <vTaskSuspendAll>
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	89 2b       	or	r24, r25
    13d2:	69 f0       	breq	.+26     	; 0x13ee <xStreamBufferReceive+0xd6>
    13d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d8:	e1 2c       	mov	r14, r1
    13da:	f1 2c       	mov	r15, r1
    13dc:	00 e0       	ldi	r16, 0x00	; 0
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	0e 94 56 12 	call	0x24ac	; 0x24ac <xTaskGenericNotify>
    13ea:	1b 86       	std	Y+11, r1	; 0x0b
    13ec:	1a 86       	std	Y+10, r1	; 0x0a
    13ee:	ef d3       	rcall	.+2014   	; 0x1bce <xTaskResumeAll>
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    13f2:	c1 2c       	mov	r12, r1
    13f4:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    13f6:	c6 01       	movw	r24, r12
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	7f 90       	pop	r7
    1412:	6f 90       	pop	r6
    1414:	5f 90       	pop	r5
    1416:	4f 90       	pop	r4
    1418:	08 95       	ret

0000141a <prvResetNextTaskUnblockTime>:
    141a:	e0 91 c3 14 	lds	r30, 0x14C3	; 0x8014c3 <pxDelayedTaskList>
    141e:	f0 91 c4 14 	lds	r31, 0x14C4	; 0x8014c4 <pxDelayedTaskList+0x1>
    1422:	80 81       	ld	r24, Z
    1424:	81 11       	cpse	r24, r1
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <prvResetNextTaskUnblockTime+0x26>
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	9f ef       	ldi	r25, 0xFF	; 255
    142c:	dc 01       	movw	r26, r24
    142e:	80 93 8d 14 	sts	0x148D, r24	; 0x80148d <xNextTaskUnblockTime>
    1432:	90 93 8e 14 	sts	0x148E, r25	; 0x80148e <xNextTaskUnblockTime+0x1>
    1436:	a0 93 8f 14 	sts	0x148F, r26	; 0x80148f <xNextTaskUnblockTime+0x2>
    143a:	b0 93 90 14 	sts	0x1490, r27	; 0x801490 <xNextTaskUnblockTime+0x3>
    143e:	08 95       	ret
    1440:	e0 91 c3 14 	lds	r30, 0x14C3	; 0x8014c3 <pxDelayedTaskList>
    1444:	f0 91 c4 14 	lds	r31, 0x14C4	; 0x8014c4 <pxDelayedTaskList+0x1>
    1448:	07 80       	ldd	r0, Z+7	; 0x07
    144a:	f0 85       	ldd	r31, Z+8	; 0x08
    144c:	e0 2d       	mov	r30, r0
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	a2 81       	ldd	r26, Z+2	; 0x02
    1454:	b3 81       	ldd	r27, Z+3	; 0x03
    1456:	80 93 8d 14 	sts	0x148D, r24	; 0x80148d <xNextTaskUnblockTime>
    145a:	90 93 8e 14 	sts	0x148E, r25	; 0x80148e <xNextTaskUnblockTime+0x1>
    145e:	a0 93 8f 14 	sts	0x148F, r26	; 0x80148f <xNextTaskUnblockTime+0x2>
    1462:	b0 93 90 14 	sts	0x1490, r27	; 0x801490 <xNextTaskUnblockTime+0x3>
    1466:	08 95       	ret

00001468 <prvDeleteTCB>:
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1472:	0e 94 37 02 	call	0x46e	; 0x46e <vPortFree>
    1476:	ce 01       	movw	r24, r28
    1478:	0e 94 37 02 	call	0x46e	; 0x46e <vPortFree>
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <prvInitialiseNewTask>:
    1482:	4f 92       	push	r4
    1484:	5f 92       	push	r5
    1486:	6f 92       	push	r6
    1488:	7f 92       	push	r7
    148a:	8f 92       	push	r8
    148c:	9f 92       	push	r9
    148e:	af 92       	push	r10
    1490:	bf 92       	push	r11
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	2c 01       	movw	r4, r24
    14a2:	5b 01       	movw	r10, r22
    14a4:	4a 01       	movw	r8, r20
    14a6:	39 01       	movw	r6, r18
    14a8:	e6 01       	movw	r28, r12
    14aa:	65 ea       	ldi	r22, 0xA5	; 165
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b2:	0e 94 36 29 	call	0x526c	; 0x526c <memset>
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	82 1a       	sub	r8, r18
    14be:	91 08       	sbc	r9, r1
    14c0:	88 0e       	add	r8, r24
    14c2:	99 1e       	adc	r9, r25
    14c4:	a1 14       	cp	r10, r1
    14c6:	b1 04       	cpc	r11, r1
    14c8:	89 f4       	brne	.+34     	; 0x14ec <prvInitialiseNewTask+0x6a>
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <prvInitialiseNewTask+0x74>
    14cc:	82 2f       	mov	r24, r18
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	f5 01       	movw	r30, r10
    14d2:	e8 0f       	add	r30, r24
    14d4:	f9 1f       	adc	r31, r25
    14d6:	30 81       	ld	r19, Z
    14d8:	de 01       	movw	r26, r28
    14da:	a8 0f       	add	r26, r24
    14dc:	b9 1f       	adc	r27, r25
    14de:	5d 96       	adiw	r26, 0x1d	; 29
    14e0:	3c 93       	st	X, r19
    14e2:	80 81       	ld	r24, Z
    14e4:	88 23       	and	r24, r24
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <prvInitialiseNewTask+0x70>
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <prvInitialiseNewTask+0x6c>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	20 31       	cpi	r18, 0x10	; 16
    14f0:	68 f3       	brcs	.-38     	; 0x14cc <prvInitialiseNewTask+0x4a>
    14f2:	1c a6       	std	Y+44, r1	; 0x2c
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <prvInitialiseNewTask+0x76>
    14f6:	1d 8e       	std	Y+29, r1	; 0x1d
    14f8:	0a 30       	cpi	r16, 0x0A	; 10
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <prvInitialiseNewTask+0x7c>
    14fc:	09 e0       	ldi	r16, 0x09	; 9
    14fe:	0a 8f       	std	Y+26, r16	; 0x1a
    1500:	0d a7       	std	Y+45, r16	; 0x2d
    1502:	1e a6       	std	Y+46, r1	; 0x2e
    1504:	ce 01       	movw	r24, r28
    1506:	02 96       	adiw	r24, 0x02	; 2
    1508:	00 d8       	rcall	.-4096   	; 0x50a <vListInitialiseItem>
    150a:	ce 01       	movw	r24, r28
    150c:	0e 96       	adiw	r24, 0x0e	; 14
    150e:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
    1512:	db 87       	std	Y+11, r29	; 0x0b
    1514:	ca 87       	std	Y+10, r28	; 0x0a
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	80 1b       	sub	r24, r16
    1520:	91 09       	sbc	r25, r1
    1522:	a1 09       	sbc	r26, r1
    1524:	b1 09       	sbc	r27, r1
    1526:	8e 87       	std	Y+14, r24	; 0x0e
    1528:	9f 87       	std	Y+15, r25	; 0x0f
    152a:	a8 8b       	std	Y+16, r26	; 0x10
    152c:	b9 8b       	std	Y+17, r27	; 0x11
    152e:	df 8b       	std	Y+23, r29	; 0x17
    1530:	ce 8b       	std	Y+22, r28	; 0x16
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	fe 01       	movw	r30, r28
    1536:	bf 96       	adiw	r30, 0x2f	; 47
    1538:	df 01       	movw	r26, r30
    153a:	1d 92       	st	X+, r1
    153c:	8a 95       	dec	r24
    153e:	e9 f7       	brne	.-6      	; 0x153a <prvInitialiseNewTask+0xb8>
    1540:	1b aa       	std	Y+51, r1	; 0x33
    1542:	a3 01       	movw	r20, r6
    1544:	b2 01       	movw	r22, r4
    1546:	c4 01       	movw	r24, r8
    1548:	54 d8       	rcall	.-3928   	; 0x5f2 <pxPortInitialiseStack>
    154a:	99 83       	std	Y+1, r25	; 0x01
    154c:	88 83       	st	Y, r24
    154e:	e1 14       	cp	r14, r1
    1550:	f1 04       	cpc	r15, r1
    1552:	19 f0       	breq	.+6      	; 0x155a <prvInitialiseNewTask+0xd8>
    1554:	f7 01       	movw	r30, r14
    1556:	d1 83       	std	Z+1, r29	; 0x01
    1558:	c0 83       	st	Z, r28
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	08 95       	ret

0000157a <prvInitialiseTaskLists>:
    157a:	cf 93       	push	r28
    157c:	c0 e0       	ldi	r28, 0x00	; 0
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <prvInitialiseTaskLists+0x18>
    1580:	2b e0       	ldi	r18, 0x0B	; 11
    1582:	c2 9f       	mul	r28, r18
    1584:	c0 01       	movw	r24, r0
    1586:	11 24       	eor	r1, r1
    1588:	85 52       	subi	r24, 0x25	; 37
    158a:	9b 4e       	sbci	r25, 0xEB	; 235
    158c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    1590:	cf 5f       	subi	r28, 0xFF	; 255
    1592:	ca 30       	cpi	r28, 0x0A	; 10
    1594:	a8 f3       	brcs	.-22     	; 0x1580 <prvInitialiseTaskLists+0x6>
    1596:	80 ed       	ldi	r24, 0xD0	; 208
    1598:	94 e1       	ldi	r25, 0x14	; 20
    159a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    159e:	85 ec       	ldi	r24, 0xC5	; 197
    15a0:	94 e1       	ldi	r25, 0x14	; 20
    15a2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    15a6:	86 eb       	ldi	r24, 0xB6	; 182
    15a8:	94 e1       	ldi	r25, 0x14	; 20
    15aa:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    15ae:	8b ea       	ldi	r24, 0xAB	; 171
    15b0:	94 e1       	ldi	r25, 0x14	; 20
    15b2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    15b6:	8f e9       	ldi	r24, 0x9F	; 159
    15b8:	94 e1       	ldi	r25, 0x14	; 20
    15ba:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    15be:	80 ed       	ldi	r24, 0xD0	; 208
    15c0:	94 e1       	ldi	r25, 0x14	; 20
    15c2:	90 93 c4 14 	sts	0x14C4, r25	; 0x8014c4 <pxDelayedTaskList+0x1>
    15c6:	80 93 c3 14 	sts	0x14C3, r24	; 0x8014c3 <pxDelayedTaskList>
    15ca:	85 ec       	ldi	r24, 0xC5	; 197
    15cc:	94 e1       	ldi	r25, 0x14	; 20
    15ce:	90 93 c2 14 	sts	0x14C2, r25	; 0x8014c2 <pxOverflowDelayedTaskList+0x1>
    15d2:	80 93 c1 14 	sts	0x14C1, r24	; 0x8014c1 <pxOverflowDelayedTaskList>
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <prvAddNewTaskToReadyList>:
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	0f 92       	push	r0
    15e6:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <uxCurrentNumberOfTasks>
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	80 93 9e 14 	sts	0x149E, r24	; 0x80149e <uxCurrentNumberOfTasks>
    15f0:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    15f4:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    15f8:	89 2b       	or	r24, r25
    15fa:	51 f4       	brne	.+20     	; 0x1610 <prvAddNewTaskToReadyList+0x36>
    15fc:	d0 93 4a 15 	sts	0x154A, r29	; 0x80154a <pxCurrentTCB+0x1>
    1600:	c0 93 49 15 	sts	0x1549, r28	; 0x801549 <pxCurrentTCB>
    1604:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <uxCurrentNumberOfTasks>
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 f4       	brne	.+36     	; 0x1630 <prvAddNewTaskToReadyList+0x56>
    160c:	b6 df       	rcall	.-148    	; 0x157a <prvInitialiseTaskLists>
    160e:	10 c0       	rjmp	.+32     	; 0x1630 <prvAddNewTaskToReadyList+0x56>
    1610:	80 91 98 14 	lds	r24, 0x1498	; 0x801498 <xSchedulerRunning>
    1614:	81 11       	cpse	r24, r1
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <prvAddNewTaskToReadyList+0x56>
    1618:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    161c:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1620:	92 8d       	ldd	r25, Z+26	; 0x1a
    1622:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1624:	89 17       	cp	r24, r25
    1626:	20 f0       	brcs	.+8      	; 0x1630 <prvAddNewTaskToReadyList+0x56>
    1628:	d0 93 4a 15 	sts	0x154A, r29	; 0x80154a <pxCurrentTCB+0x1>
    162c:	c0 93 49 15 	sts	0x1549, r28	; 0x801549 <pxCurrentTCB>
    1630:	80 91 91 14 	lds	r24, 0x1491	; 0x801491 <uxTaskNumber>
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	80 93 91 14 	sts	0x1491, r24	; 0x801491 <uxTaskNumber>
    163a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    163c:	80 91 99 14 	lds	r24, 0x1499	; 0x801499 <uxTopReadyPriority>
    1640:	8e 17       	cp	r24, r30
    1642:	10 f4       	brcc	.+4      	; 0x1648 <prvAddNewTaskToReadyList+0x6e>
    1644:	e0 93 99 14 	sts	0x1499, r30	; 0x801499 <uxTopReadyPriority>
    1648:	8b e0       	ldi	r24, 0x0B	; 11
    164a:	8e 9f       	mul	r24, r30
    164c:	f0 01       	movw	r30, r0
    164e:	11 24       	eor	r1, r1
    1650:	e5 52       	subi	r30, 0x25	; 37
    1652:	fb 4e       	sbci	r31, 0xEB	; 235
    1654:	01 80       	ldd	r0, Z+1	; 0x01
    1656:	f2 81       	ldd	r31, Z+2	; 0x02
    1658:	e0 2d       	mov	r30, r0
    165a:	ff 83       	std	Y+7, r31	; 0x07
    165c:	ee 83       	std	Y+6, r30	; 0x06
    165e:	26 81       	ldd	r18, Z+6	; 0x06
    1660:	37 81       	ldd	r19, Z+7	; 0x07
    1662:	39 87       	std	Y+9, r19	; 0x09
    1664:	28 87       	std	Y+8, r18	; 0x08
    1666:	a6 81       	ldd	r26, Z+6	; 0x06
    1668:	b7 81       	ldd	r27, Z+7	; 0x07
    166a:	9e 01       	movw	r18, r28
    166c:	2e 5f       	subi	r18, 0xFE	; 254
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	15 96       	adiw	r26, 0x05	; 5
    1672:	3c 93       	st	X, r19
    1674:	2e 93       	st	-X, r18
    1676:	14 97       	sbiw	r26, 0x04	; 4
    1678:	37 83       	std	Z+7, r19	; 0x07
    167a:	26 83       	std	Z+6, r18	; 0x06
    167c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    167e:	8e 9f       	mul	r24, r30
    1680:	f0 01       	movw	r30, r0
    1682:	11 24       	eor	r1, r1
    1684:	e5 52       	subi	r30, 0x25	; 37
    1686:	fb 4e       	sbci	r31, 0xEB	; 235
    1688:	fd 87       	std	Y+13, r31	; 0x0d
    168a:	ec 87       	std	Y+12, r30	; 0x0c
    168c:	80 81       	ld	r24, Z
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	80 83       	st	Z, r24
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	80 91 98 14 	lds	r24, 0x1498	; 0x801498 <xSchedulerRunning>
    169a:	88 23       	and	r24, r24
    169c:	51 f0       	breq	.+20     	; 0x16b2 <prvAddNewTaskToReadyList+0xd8>
    169e:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    16a2:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    16a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    16a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16aa:	98 17       	cp	r25, r24
    16ac:	10 f4       	brcc	.+4      	; 0x16b2 <prvAddNewTaskToReadyList+0xd8>
    16ae:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	08 95       	ret

000016b8 <prvCheckTasksWaitingTermination>:
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	1b c0       	rjmp	.+54     	; 0x16f4 <prvCheckTasksWaitingTermination+0x3c>
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	0f 92       	push	r0
    16c4:	e0 91 b2 14 	lds	r30, 0x14B2	; 0x8014b2 <xTasksWaitingTermination+0x7>
    16c8:	f0 91 b3 14 	lds	r31, 0x14B3	; 0x8014b3 <xTasksWaitingTermination+0x8>
    16cc:	c0 85       	ldd	r28, Z+8	; 0x08
    16ce:	d1 85       	ldd	r29, Z+9	; 0x09
    16d0:	ce 01       	movw	r24, r28
    16d2:	02 96       	adiw	r24, 0x02	; 2
    16d4:	0e 94 c6 02 	call	0x58c	; 0x58c <uxListRemove>
    16d8:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <uxCurrentNumberOfTasks>
    16dc:	81 50       	subi	r24, 0x01	; 1
    16de:	80 93 9e 14 	sts	0x149E, r24	; 0x80149e <uxCurrentNumberOfTasks>
    16e2:	80 91 aa 14 	lds	r24, 0x14AA	; 0x8014aa <uxDeletedTasksWaitingCleanUp>
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	80 93 aa 14 	sts	0x14AA, r24	; 0x8014aa <uxDeletedTasksWaitingCleanUp>
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	ce 01       	movw	r24, r28
    16f2:	ba de       	rcall	.-652    	; 0x1468 <prvDeleteTCB>
    16f4:	80 91 aa 14 	lds	r24, 0x14AA	; 0x8014aa <uxDeletedTasksWaitingCleanUp>
    16f8:	81 11       	cpse	r24, r1
    16fa:	e1 cf       	rjmp	.-62     	; 0x16be <prvCheckTasksWaitingTermination+0x6>
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <prvAddCurrentTaskToDelayedList>:
    1702:	8f 92       	push	r8
    1704:	9f 92       	push	r9
    1706:	af 92       	push	r10
    1708:	bf 92       	push	r11
    170a:	cf 92       	push	r12
    170c:	df 92       	push	r13
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	6b 01       	movw	r12, r22
    1718:	7c 01       	movw	r14, r24
    171a:	c4 2f       	mov	r28, r20
    171c:	80 90 9a 14 	lds	r8, 0x149A	; 0x80149a <xTickCount>
    1720:	90 90 9b 14 	lds	r9, 0x149B	; 0x80149b <xTickCount+0x1>
    1724:	a0 90 9c 14 	lds	r10, 0x149C	; 0x80149c <xTickCount+0x2>
    1728:	b0 90 9d 14 	lds	r11, 0x149D	; 0x80149d <xTickCount+0x3>
    172c:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    1730:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1734:	02 96       	adiw	r24, 0x02	; 2
    1736:	0e 94 c6 02 	call	0x58c	; 0x58c <uxListRemove>
    173a:	8f ef       	ldi	r24, 0xFF	; 255
    173c:	c8 16       	cp	r12, r24
    173e:	d8 06       	cpc	r13, r24
    1740:	e8 06       	cpc	r14, r24
    1742:	f8 06       	cpc	r15, r24
    1744:	b1 f5       	brne	.+108    	; 0x17b2 <prvAddCurrentTaskToDelayedList+0xb0>
    1746:	cc 23       	and	r28, r28
    1748:	a1 f1       	breq	.+104    	; 0x17b2 <prvAddCurrentTaskToDelayedList+0xb0>
    174a:	ef e9       	ldi	r30, 0x9F	; 159
    174c:	f4 e1       	ldi	r31, 0x14	; 20
    174e:	a1 81       	ldd	r26, Z+1	; 0x01
    1750:	b2 81       	ldd	r27, Z+2	; 0x02
    1752:	c0 91 49 15 	lds	r28, 0x1549	; 0x801549 <pxCurrentTCB>
    1756:	d0 91 4a 15 	lds	r29, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    175a:	bf 83       	std	Y+7, r27	; 0x07
    175c:	ae 83       	std	Y+6, r26	; 0x06
    175e:	c0 91 49 15 	lds	r28, 0x1549	; 0x801549 <pxCurrentTCB>
    1762:	d0 91 4a 15 	lds	r29, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1766:	16 96       	adiw	r26, 0x06	; 6
    1768:	8d 91       	ld	r24, X+
    176a:	9c 91       	ld	r25, X
    176c:	17 97       	sbiw	r26, 0x07	; 7
    176e:	99 87       	std	Y+9, r25	; 0x09
    1770:	88 87       	std	Y+8, r24	; 0x08
    1772:	16 96       	adiw	r26, 0x06	; 6
    1774:	cd 91       	ld	r28, X+
    1776:	dc 91       	ld	r29, X
    1778:	17 97       	sbiw	r26, 0x07	; 7
    177a:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    177e:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1782:	02 96       	adiw	r24, 0x02	; 2
    1784:	9d 83       	std	Y+5, r25	; 0x05
    1786:	8c 83       	std	Y+4, r24	; 0x04
    1788:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    178c:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1790:	02 96       	adiw	r24, 0x02	; 2
    1792:	17 96       	adiw	r26, 0x07	; 7
    1794:	9c 93       	st	X, r25
    1796:	8e 93       	st	-X, r24
    1798:	16 97       	sbiw	r26, 0x06	; 6
    179a:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
    179e:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    17a2:	1d 96       	adiw	r26, 0x0d	; 13
    17a4:	fc 93       	st	X, r31
    17a6:	ee 93       	st	-X, r30
    17a8:	1c 97       	sbiw	r26, 0x0c	; 12
    17aa:	80 81       	ld	r24, Z
    17ac:	8f 5f       	subi	r24, 0xFF	; 255
    17ae:	80 83       	st	Z, r24
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <prvAddCurrentTaskToDelayedList+0x12e>
    17b2:	c8 0c       	add	r12, r8
    17b4:	d9 1c       	adc	r13, r9
    17b6:	ea 1c       	adc	r14, r10
    17b8:	fb 1c       	adc	r15, r11
    17ba:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    17be:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    17c2:	c2 82       	std	Z+2, r12	; 0x02
    17c4:	d3 82       	std	Z+3, r13	; 0x03
    17c6:	e4 82       	std	Z+4, r14	; 0x04
    17c8:	f5 82       	std	Z+5, r15	; 0x05
    17ca:	c8 14       	cp	r12, r8
    17cc:	d9 04       	cpc	r13, r9
    17ce:	ea 04       	cpc	r14, r10
    17d0:	fb 04       	cpc	r15, r11
    17d2:	68 f4       	brcc	.+26     	; 0x17ee <prvAddCurrentTaskToDelayedList+0xec>
    17d4:	60 91 49 15 	lds	r22, 0x1549	; 0x801549 <pxCurrentTCB>
    17d8:	70 91 4a 15 	lds	r23, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    17dc:	80 91 c1 14 	lds	r24, 0x14C1	; 0x8014c1 <pxOverflowDelayedTaskList>
    17e0:	90 91 c2 14 	lds	r25, 0x14C2	; 0x8014c2 <pxOverflowDelayedTaskList+0x1>
    17e4:	6e 5f       	subi	r22, 0xFE	; 254
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	0e 94 89 02 	call	0x512	; 0x512 <vListInsert>
    17ec:	21 c0       	rjmp	.+66     	; 0x1830 <prvAddCurrentTaskToDelayedList+0x12e>
    17ee:	60 91 49 15 	lds	r22, 0x1549	; 0x801549 <pxCurrentTCB>
    17f2:	70 91 4a 15 	lds	r23, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    17f6:	80 91 c3 14 	lds	r24, 0x14C3	; 0x8014c3 <pxDelayedTaskList>
    17fa:	90 91 c4 14 	lds	r25, 0x14C4	; 0x8014c4 <pxDelayedTaskList+0x1>
    17fe:	6e 5f       	subi	r22, 0xFE	; 254
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	0e 94 89 02 	call	0x512	; 0x512 <vListInsert>
    1806:	80 91 8d 14 	lds	r24, 0x148D	; 0x80148d <xNextTaskUnblockTime>
    180a:	90 91 8e 14 	lds	r25, 0x148E	; 0x80148e <xNextTaskUnblockTime+0x1>
    180e:	a0 91 8f 14 	lds	r26, 0x148F	; 0x80148f <xNextTaskUnblockTime+0x2>
    1812:	b0 91 90 14 	lds	r27, 0x1490	; 0x801490 <xNextTaskUnblockTime+0x3>
    1816:	c8 16       	cp	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	ea 06       	cpc	r14, r26
    181c:	fb 06       	cpc	r15, r27
    181e:	40 f4       	brcc	.+16     	; 0x1830 <prvAddCurrentTaskToDelayedList+0x12e>
    1820:	c0 92 8d 14 	sts	0x148D, r12	; 0x80148d <xNextTaskUnblockTime>
    1824:	d0 92 8e 14 	sts	0x148E, r13	; 0x80148e <xNextTaskUnblockTime+0x1>
    1828:	e0 92 8f 14 	sts	0x148F, r14	; 0x80148f <xNextTaskUnblockTime+0x2>
    182c:	f0 92 90 14 	sts	0x1490, r15	; 0x801490 <xNextTaskUnblockTime+0x3>
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	bf 90       	pop	r11
    183e:	af 90       	pop	r10
    1840:	9f 90       	pop	r9
    1842:	8f 90       	pop	r8
    1844:	08 95       	ret

00001846 <xTaskCreate>:
    1846:	2f 92       	push	r2
    1848:	3f 92       	push	r3
    184a:	4f 92       	push	r4
    184c:	5f 92       	push	r5
    184e:	6f 92       	push	r6
    1850:	7f 92       	push	r7
    1852:	8f 92       	push	r8
    1854:	9f 92       	push	r9
    1856:	af 92       	push	r10
    1858:	bf 92       	push	r11
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	3c 01       	movw	r6, r24
    186a:	1b 01       	movw	r2, r22
    186c:	4a 01       	movw	r8, r20
    186e:	29 01       	movw	r4, r18
    1870:	ca 01       	movw	r24, r20
    1872:	0e 94 8e 01 	call	0x31c	; 0x31c <pvPortMalloc>
    1876:	6c 01       	movw	r12, r24
    1878:	89 2b       	or	r24, r25
    187a:	71 f0       	breq	.+28     	; 0x1898 <xTaskCreate+0x52>
    187c:	84 e3       	ldi	r24, 0x34	; 52
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 8e 01 	call	0x31c	; 0x31c <pvPortMalloc>
    1884:	ec 01       	movw	r28, r24
    1886:	89 2b       	or	r24, r25
    1888:	19 f0       	breq	.+6      	; 0x1890 <xTaskCreate+0x4a>
    188a:	dc 8e       	std	Y+28, r13	; 0x1c
    188c:	cb 8e       	std	Y+27, r12	; 0x1b
    188e:	06 c0       	rjmp	.+12     	; 0x189c <xTaskCreate+0x56>
    1890:	c6 01       	movw	r24, r12
    1892:	0e 94 37 02 	call	0x46e	; 0x46e <vPortFree>
    1896:	02 c0       	rjmp	.+4      	; 0x189c <xTaskCreate+0x56>
    1898:	c0 e0       	ldi	r28, 0x00	; 0
    189a:	d0 e0       	ldi	r29, 0x00	; 0
    189c:	20 97       	sbiw	r28, 0x00	; 0
    189e:	61 f0       	breq	.+24     	; 0x18b8 <xTaskCreate+0x72>
    18a0:	a1 2c       	mov	r10, r1
    18a2:	b1 2c       	mov	r11, r1
    18a4:	6e 01       	movw	r12, r28
    18a6:	92 01       	movw	r18, r4
    18a8:	a4 01       	movw	r20, r8
    18aa:	b1 01       	movw	r22, r2
    18ac:	c3 01       	movw	r24, r6
    18ae:	e9 dd       	rcall	.-1070   	; 0x1482 <prvInitialiseNewTask>
    18b0:	ce 01       	movw	r24, r28
    18b2:	93 de       	rcall	.-730    	; 0x15da <prvAddNewTaskToReadyList>
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <xTaskCreate+0x74>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	0f 91       	pop	r16
    18c0:	ff 90       	pop	r15
    18c2:	ef 90       	pop	r14
    18c4:	df 90       	pop	r13
    18c6:	cf 90       	pop	r12
    18c8:	bf 90       	pop	r11
    18ca:	af 90       	pop	r10
    18cc:	9f 90       	pop	r9
    18ce:	8f 90       	pop	r8
    18d0:	7f 90       	pop	r7
    18d2:	6f 90       	pop	r6
    18d4:	5f 90       	pop	r5
    18d6:	4f 90       	pop	r4
    18d8:	3f 90       	pop	r3
    18da:	2f 90       	pop	r2
    18dc:	08 95       	ret

000018de <vTaskStartScheduler>:
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	0f 2e       	mov	r0, r31
    18e6:	fb e8       	ldi	r31, 0x8B	; 139
    18e8:	ef 2e       	mov	r14, r31
    18ea:	f4 e1       	ldi	r31, 0x14	; 20
    18ec:	ff 2e       	mov	r15, r31
    18ee:	f0 2d       	mov	r31, r0
    18f0:	00 e0       	ldi	r16, 0x00	; 0
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 ec       	ldi	r20, 0xC0	; 192
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	62 e4       	ldi	r22, 0x42	; 66
    18fc:	72 e0       	ldi	r23, 0x02	; 2
    18fe:	8d ec       	ldi	r24, 0xCD	; 205
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a1 df       	rcall	.-190    	; 0x1846 <xTaskCreate>
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	11 f4       	brne	.+4      	; 0x190c <vTaskStartScheduler+0x2e>
    1908:	0e 94 13 15 	call	0x2a26	; 0x2a26 <xTimerCreateTimerTask>
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	c9 f4       	brne	.+50     	; 0x1942 <vTaskStartScheduler+0x64>
    1910:	f8 94       	cli
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	9f ef       	ldi	r25, 0xFF	; 255
    1916:	dc 01       	movw	r26, r24
    1918:	80 93 8d 14 	sts	0x148D, r24	; 0x80148d <xNextTaskUnblockTime>
    191c:	90 93 8e 14 	sts	0x148E, r25	; 0x80148e <xNextTaskUnblockTime+0x1>
    1920:	a0 93 8f 14 	sts	0x148F, r26	; 0x80148f <xNextTaskUnblockTime+0x2>
    1924:	b0 93 90 14 	sts	0x1490, r27	; 0x801490 <xNextTaskUnblockTime+0x3>
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 98 14 	sts	0x1498, r24	; 0x801498 <xSchedulerRunning>
    192e:	10 92 9a 14 	sts	0x149A, r1	; 0x80149a <xTickCount>
    1932:	10 92 9b 14 	sts	0x149B, r1	; 0x80149b <xTickCount+0x1>
    1936:	10 92 9c 14 	sts	0x149C, r1	; 0x80149c <xTickCount+0x2>
    193a:	10 92 9d 14 	sts	0x149D, r1	; 0x80149d <xTickCount+0x3>
    193e:	0e 94 10 03 	call	0x620	; 0x620 <xPortStartScheduler>
    1942:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	08 95       	ret

0000194e <vTaskSuspendAll>:
    194e:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	80 93 8a 14 	sts	0x148A, r24	; 0x80148a <uxSchedulerSuspended>
    1958:	08 95       	ret

0000195a <xTaskGetTickCount>:
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	0f 92       	push	r0
    1960:	60 91 9a 14 	lds	r22, 0x149A	; 0x80149a <xTickCount>
    1964:	70 91 9b 14 	lds	r23, 0x149B	; 0x80149b <xTickCount+0x1>
    1968:	80 91 9c 14 	lds	r24, 0x149C	; 0x80149c <xTickCount+0x2>
    196c:	90 91 9d 14 	lds	r25, 0x149D	; 0x80149d <xTickCount+0x3>
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	08 95       	ret

00001976 <xTaskIncrementTick>:
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    1986:	81 11       	cpse	r24, r1
    1988:	05 c1       	rjmp	.+522    	; 0x1b94 <xTaskIncrementTick+0x21e>
    198a:	c0 90 9a 14 	lds	r12, 0x149A	; 0x80149a <xTickCount>
    198e:	d0 90 9b 14 	lds	r13, 0x149B	; 0x80149b <xTickCount+0x1>
    1992:	e0 90 9c 14 	lds	r14, 0x149C	; 0x80149c <xTickCount+0x2>
    1996:	f0 90 9d 14 	lds	r15, 0x149D	; 0x80149d <xTickCount+0x3>
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	c8 1a       	sub	r12, r24
    199e:	d8 0a       	sbc	r13, r24
    19a0:	e8 0a       	sbc	r14, r24
    19a2:	f8 0a       	sbc	r15, r24
    19a4:	c0 92 9a 14 	sts	0x149A, r12	; 0x80149a <xTickCount>
    19a8:	d0 92 9b 14 	sts	0x149B, r13	; 0x80149b <xTickCount+0x1>
    19ac:	e0 92 9c 14 	sts	0x149C, r14	; 0x80149c <xTickCount+0x2>
    19b0:	f0 92 9d 14 	sts	0x149D, r15	; 0x80149d <xTickCount+0x3>
    19b4:	c1 14       	cp	r12, r1
    19b6:	d1 04       	cpc	r13, r1
    19b8:	e1 04       	cpc	r14, r1
    19ba:	f1 04       	cpc	r15, r1
    19bc:	b1 f4       	brne	.+44     	; 0x19ea <xTaskIncrementTick+0x74>
    19be:	80 91 c3 14 	lds	r24, 0x14C3	; 0x8014c3 <pxDelayedTaskList>
    19c2:	90 91 c4 14 	lds	r25, 0x14C4	; 0x8014c4 <pxDelayedTaskList+0x1>
    19c6:	20 91 c1 14 	lds	r18, 0x14C1	; 0x8014c1 <pxOverflowDelayedTaskList>
    19ca:	30 91 c2 14 	lds	r19, 0x14C2	; 0x8014c2 <pxOverflowDelayedTaskList+0x1>
    19ce:	30 93 c4 14 	sts	0x14C4, r19	; 0x8014c4 <pxDelayedTaskList+0x1>
    19d2:	20 93 c3 14 	sts	0x14C3, r18	; 0x8014c3 <pxDelayedTaskList>
    19d6:	90 93 c2 14 	sts	0x14C2, r25	; 0x8014c2 <pxOverflowDelayedTaskList+0x1>
    19da:	80 93 c1 14 	sts	0x14C1, r24	; 0x8014c1 <pxOverflowDelayedTaskList>
    19de:	80 91 92 14 	lds	r24, 0x1492	; 0x801492 <xNumOfOverflows>
    19e2:	8f 5f       	subi	r24, 0xFF	; 255
    19e4:	80 93 92 14 	sts	0x1492, r24	; 0x801492 <xNumOfOverflows>
    19e8:	18 dd       	rcall	.-1488   	; 0x141a <prvResetNextTaskUnblockTime>
    19ea:	80 91 8d 14 	lds	r24, 0x148D	; 0x80148d <xNextTaskUnblockTime>
    19ee:	90 91 8e 14 	lds	r25, 0x148E	; 0x80148e <xNextTaskUnblockTime+0x1>
    19f2:	a0 91 8f 14 	lds	r26, 0x148F	; 0x80148f <xNextTaskUnblockTime+0x2>
    19f6:	b0 91 90 14 	lds	r27, 0x1490	; 0x801490 <xNextTaskUnblockTime+0x3>
    19fa:	c8 16       	cp	r12, r24
    19fc:	d9 06       	cpc	r13, r25
    19fe:	ea 06       	cpc	r14, r26
    1a00:	fb 06       	cpc	r15, r27
    1a02:	20 f4       	brcc	.+8      	; 0x1a0c <xTaskIncrementTick+0x96>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	b2 c0       	rjmp	.+356    	; 0x1b6c <xTaskIncrementTick+0x1f6>
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <xTaskIncrementTick+0x98>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	e0 91 c3 14 	lds	r30, 0x14C3	; 0x8014c3 <pxDelayedTaskList>
    1a12:	f0 91 c4 14 	lds	r31, 0x14C4	; 0x8014c4 <pxDelayedTaskList+0x1>
    1a16:	90 81       	ld	r25, Z
    1a18:	91 11       	cpse	r25, r1
    1a1a:	0c c0       	rjmp	.+24     	; 0x1a34 <xTaskIncrementTick+0xbe>
    1a1c:	4f ef       	ldi	r20, 0xFF	; 255
    1a1e:	5f ef       	ldi	r21, 0xFF	; 255
    1a20:	ba 01       	movw	r22, r20
    1a22:	40 93 8d 14 	sts	0x148D, r20	; 0x80148d <xNextTaskUnblockTime>
    1a26:	50 93 8e 14 	sts	0x148E, r21	; 0x80148e <xNextTaskUnblockTime+0x1>
    1a2a:	60 93 8f 14 	sts	0x148F, r22	; 0x80148f <xNextTaskUnblockTime+0x2>
    1a2e:	70 93 90 14 	sts	0x1490, r23	; 0x801490 <xNextTaskUnblockTime+0x3>
    1a32:	9c c0       	rjmp	.+312    	; 0x1b6c <xTaskIncrementTick+0x1f6>
    1a34:	e0 91 c3 14 	lds	r30, 0x14C3	; 0x8014c3 <pxDelayedTaskList>
    1a38:	f0 91 c4 14 	lds	r31, 0x14C4	; 0x8014c4 <pxDelayedTaskList+0x1>
    1a3c:	07 80       	ldd	r0, Z+7	; 0x07
    1a3e:	f0 85       	ldd	r31, Z+8	; 0x08
    1a40:	e0 2d       	mov	r30, r0
    1a42:	00 84       	ldd	r0, Z+8	; 0x08
    1a44:	f1 85       	ldd	r31, Z+9	; 0x09
    1a46:	e0 2d       	mov	r30, r0
    1a48:	42 81       	ldd	r20, Z+2	; 0x02
    1a4a:	53 81       	ldd	r21, Z+3	; 0x03
    1a4c:	64 81       	ldd	r22, Z+4	; 0x04
    1a4e:	75 81       	ldd	r23, Z+5	; 0x05
    1a50:	c4 16       	cp	r12, r20
    1a52:	d5 06       	cpc	r13, r21
    1a54:	e6 06       	cpc	r14, r22
    1a56:	f7 06       	cpc	r15, r23
    1a58:	48 f4       	brcc	.+18     	; 0x1a6c <xTaskIncrementTick+0xf6>
    1a5a:	40 93 8d 14 	sts	0x148D, r20	; 0x80148d <xNextTaskUnblockTime>
    1a5e:	50 93 8e 14 	sts	0x148E, r21	; 0x80148e <xNextTaskUnblockTime+0x1>
    1a62:	60 93 8f 14 	sts	0x148F, r22	; 0x80148f <xNextTaskUnblockTime+0x2>
    1a66:	70 93 90 14 	sts	0x1490, r23	; 0x801490 <xNextTaskUnblockTime+0x3>
    1a6a:	80 c0       	rjmp	.+256    	; 0x1b6c <xTaskIncrementTick+0x1f6>
    1a6c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a6e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a70:	c6 81       	ldd	r28, Z+6	; 0x06
    1a72:	d7 81       	ldd	r29, Z+7	; 0x07
    1a74:	20 85       	ldd	r18, Z+8	; 0x08
    1a76:	31 85       	ldd	r19, Z+9	; 0x09
    1a78:	3f 83       	std	Y+7, r19	; 0x07
    1a7a:	2e 83       	std	Y+6, r18	; 0x06
    1a7c:	c0 85       	ldd	r28, Z+8	; 0x08
    1a7e:	d1 85       	ldd	r29, Z+9	; 0x09
    1a80:	26 81       	ldd	r18, Z+6	; 0x06
    1a82:	37 81       	ldd	r19, Z+7	; 0x07
    1a84:	3d 83       	std	Y+5, r19	; 0x05
    1a86:	2c 83       	std	Y+4, r18	; 0x04
    1a88:	11 96       	adiw	r26, 0x01	; 1
    1a8a:	4d 91       	ld	r20, X+
    1a8c:	5c 91       	ld	r21, X
    1a8e:	12 97       	sbiw	r26, 0x02	; 2
    1a90:	9f 01       	movw	r18, r30
    1a92:	2e 5f       	subi	r18, 0xFE	; 254
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	42 17       	cp	r20, r18
    1a98:	53 07       	cpc	r21, r19
    1a9a:	31 f4       	brne	.+12     	; 0x1aa8 <xTaskIncrementTick+0x132>
    1a9c:	40 85       	ldd	r20, Z+8	; 0x08
    1a9e:	51 85       	ldd	r21, Z+9	; 0x09
    1aa0:	12 96       	adiw	r26, 0x02	; 2
    1aa2:	5c 93       	st	X, r21
    1aa4:	4e 93       	st	-X, r20
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
    1aa8:	15 86       	std	Z+13, r1	; 0x0d
    1aaa:	14 86       	std	Z+12, r1	; 0x0c
    1aac:	9c 91       	ld	r25, X
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	9c 93       	st	X, r25
    1ab2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ab4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ab6:	10 97       	sbiw	r26, 0x00	; 0
    1ab8:	09 f1       	breq	.+66     	; 0x1afc <xTaskIncrementTick+0x186>
    1aba:	c2 89       	ldd	r28, Z+18	; 0x12
    1abc:	d3 89       	ldd	r29, Z+19	; 0x13
    1abe:	44 89       	ldd	r20, Z+20	; 0x14
    1ac0:	55 89       	ldd	r21, Z+21	; 0x15
    1ac2:	5f 83       	std	Y+7, r21	; 0x07
    1ac4:	4e 83       	std	Y+6, r20	; 0x06
    1ac6:	c4 89       	ldd	r28, Z+20	; 0x14
    1ac8:	d5 89       	ldd	r29, Z+21	; 0x15
    1aca:	42 89       	ldd	r20, Z+18	; 0x12
    1acc:	53 89       	ldd	r21, Z+19	; 0x13
    1ace:	5d 83       	std	Y+5, r21	; 0x05
    1ad0:	4c 83       	std	Y+4, r20	; 0x04
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	6d 91       	ld	r22, X+
    1ad6:	7c 91       	ld	r23, X
    1ad8:	12 97       	sbiw	r26, 0x02	; 2
    1ada:	af 01       	movw	r20, r30
    1adc:	42 5f       	subi	r20, 0xF2	; 242
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	64 17       	cp	r22, r20
    1ae2:	75 07       	cpc	r23, r21
    1ae4:	31 f4       	brne	.+12     	; 0x1af2 <xTaskIncrementTick+0x17c>
    1ae6:	44 89       	ldd	r20, Z+20	; 0x14
    1ae8:	55 89       	ldd	r21, Z+21	; 0x15
    1aea:	12 96       	adiw	r26, 0x02	; 2
    1aec:	5c 93       	st	X, r21
    1aee:	4e 93       	st	-X, r20
    1af0:	11 97       	sbiw	r26, 0x01	; 1
    1af2:	11 8e       	std	Z+25, r1	; 0x19
    1af4:	10 8e       	std	Z+24, r1	; 0x18
    1af6:	9c 91       	ld	r25, X
    1af8:	91 50       	subi	r25, 0x01	; 1
    1afa:	9c 93       	st	X, r25
    1afc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1afe:	90 91 99 14 	lds	r25, 0x1499	; 0x801499 <uxTopReadyPriority>
    1b02:	9a 17       	cp	r25, r26
    1b04:	10 f4       	brcc	.+4      	; 0x1b0a <xTaskIncrementTick+0x194>
    1b06:	a0 93 99 14 	sts	0x1499, r26	; 0x801499 <uxTopReadyPriority>
    1b0a:	9b e0       	ldi	r25, 0x0B	; 11
    1b0c:	9a 9f       	mul	r25, r26
    1b0e:	d0 01       	movw	r26, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	a5 52       	subi	r26, 0x25	; 37
    1b14:	bb 4e       	sbci	r27, 0xEB	; 235
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	0d 90       	ld	r0, X+
    1b1a:	bc 91       	ld	r27, X
    1b1c:	a0 2d       	mov	r26, r0
    1b1e:	b7 83       	std	Z+7, r27	; 0x07
    1b20:	a6 83       	std	Z+6, r26	; 0x06
    1b22:	16 96       	adiw	r26, 0x06	; 6
    1b24:	4d 91       	ld	r20, X+
    1b26:	5c 91       	ld	r21, X
    1b28:	17 97       	sbiw	r26, 0x07	; 7
    1b2a:	51 87       	std	Z+9, r21	; 0x09
    1b2c:	40 87       	std	Z+8, r20	; 0x08
    1b2e:	16 96       	adiw	r26, 0x06	; 6
    1b30:	cd 91       	ld	r28, X+
    1b32:	dc 91       	ld	r29, X
    1b34:	17 97       	sbiw	r26, 0x07	; 7
    1b36:	3d 83       	std	Y+5, r19	; 0x05
    1b38:	2c 83       	std	Y+4, r18	; 0x04
    1b3a:	17 96       	adiw	r26, 0x07	; 7
    1b3c:	3c 93       	st	X, r19
    1b3e:	2e 93       	st	-X, r18
    1b40:	16 97       	sbiw	r26, 0x06	; 6
    1b42:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b44:	9a 9f       	mul	r25, r26
    1b46:	d0 01       	movw	r26, r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	a5 52       	subi	r26, 0x25	; 37
    1b4c:	bb 4e       	sbci	r27, 0xEB	; 235
    1b4e:	b5 87       	std	Z+13, r27	; 0x0d
    1b50:	a4 87       	std	Z+12, r26	; 0x0c
    1b52:	9c 91       	ld	r25, X
    1b54:	9f 5f       	subi	r25, 0xFF	; 255
    1b56:	9c 93       	st	X, r25
    1b58:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b5a:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    1b5e:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1b62:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b64:	29 17       	cp	r18, r25
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <xTaskIncrementTick+0x1f4>
    1b68:	4f cf       	rjmp	.-354    	; 0x1a08 <xTaskIncrementTick+0x92>
    1b6a:	51 cf       	rjmp	.-350    	; 0x1a0e <xTaskIncrementTick+0x98>
    1b6c:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    1b70:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1b74:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b76:	9b e0       	ldi	r25, 0x0B	; 11
    1b78:	e9 9f       	mul	r30, r25
    1b7a:	f0 01       	movw	r30, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	e5 52       	subi	r30, 0x25	; 37
    1b80:	fb 4e       	sbci	r31, 0xEB	; 235
    1b82:	90 81       	ld	r25, Z
    1b84:	92 30       	cpi	r25, 0x02	; 2
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <xTaskIncrementTick+0x214>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 91 93 14 	lds	r25, 0x1493	; 0x801493 <xYieldPending>
    1b8e:	91 11       	cpse	r25, r1
    1b90:	16 c0       	rjmp	.+44     	; 0x1bbe <xTaskIncrementTick+0x248>
    1b92:	16 c0       	rjmp	.+44     	; 0x1bc0 <xTaskIncrementTick+0x24a>
    1b94:	80 91 94 14 	lds	r24, 0x1494	; 0x801494 <xPendedTicks>
    1b98:	90 91 95 14 	lds	r25, 0x1495	; 0x801495 <xPendedTicks+0x1>
    1b9c:	a0 91 96 14 	lds	r26, 0x1496	; 0x801496 <xPendedTicks+0x2>
    1ba0:	b0 91 97 14 	lds	r27, 0x1497	; 0x801497 <xPendedTicks+0x3>
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	b1 1d       	adc	r27, r1
    1baa:	80 93 94 14 	sts	0x1494, r24	; 0x801494 <xPendedTicks>
    1bae:	90 93 95 14 	sts	0x1495, r25	; 0x801495 <xPendedTicks+0x1>
    1bb2:	a0 93 96 14 	sts	0x1496, r26	; 0x801496 <xPendedTicks+0x2>
    1bb6:	b0 93 97 14 	sts	0x1497, r27	; 0x801497 <xPendedTicks+0x3>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <xTaskIncrementTick+0x24a>
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	08 95       	ret

00001bce <xTaskResumeAll>:
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	0f 92       	push	r0
    1be0:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    1be4:	81 50       	subi	r24, 0x01	; 1
    1be6:	80 93 8a 14 	sts	0x148A, r24	; 0x80148a <uxSchedulerSuspended>
    1bea:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	be c0       	rjmp	.+380    	; 0x1d6e <xTaskResumeAll+0x1a0>
    1bf2:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <uxCurrentNumberOfTasks>
    1bf6:	81 11       	cpse	r24, r1
    1bf8:	88 c0       	rjmp	.+272    	; 0x1d0a <xTaskResumeAll+0x13c>
    1bfa:	bc c0       	rjmp	.+376    	; 0x1d74 <xTaskResumeAll+0x1a6>
    1bfc:	e0 91 bd 14 	lds	r30, 0x14BD	; 0x8014bd <xPendingReadyList+0x7>
    1c00:	f0 91 be 14 	lds	r31, 0x14BE	; 0x8014be <xPendingReadyList+0x8>
    1c04:	00 84       	ldd	r0, Z+8	; 0x08
    1c06:	f1 85       	ldd	r31, Z+9	; 0x09
    1c08:	e0 2d       	mov	r30, r0
    1c0a:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c0c:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c0e:	c2 89       	ldd	r28, Z+18	; 0x12
    1c10:	d3 89       	ldd	r29, Z+19	; 0x13
    1c12:	84 89       	ldd	r24, Z+20	; 0x14
    1c14:	95 89       	ldd	r25, Z+21	; 0x15
    1c16:	9f 83       	std	Y+7, r25	; 0x07
    1c18:	8e 83       	std	Y+6, r24	; 0x06
    1c1a:	c4 89       	ldd	r28, Z+20	; 0x14
    1c1c:	d5 89       	ldd	r29, Z+21	; 0x15
    1c1e:	82 89       	ldd	r24, Z+18	; 0x12
    1c20:	93 89       	ldd	r25, Z+19	; 0x13
    1c22:	9d 83       	std	Y+5, r25	; 0x05
    1c24:	8c 83       	std	Y+4, r24	; 0x04
    1c26:	11 96       	adiw	r26, 0x01	; 1
    1c28:	2d 91       	ld	r18, X+
    1c2a:	3c 91       	ld	r19, X
    1c2c:	12 97       	sbiw	r26, 0x02	; 2
    1c2e:	cf 01       	movw	r24, r30
    1c30:	0e 96       	adiw	r24, 0x0e	; 14
    1c32:	28 17       	cp	r18, r24
    1c34:	39 07       	cpc	r19, r25
    1c36:	31 f4       	brne	.+12     	; 0x1c44 <xTaskResumeAll+0x76>
    1c38:	84 89       	ldd	r24, Z+20	; 0x14
    1c3a:	95 89       	ldd	r25, Z+21	; 0x15
    1c3c:	12 96       	adiw	r26, 0x02	; 2
    1c3e:	9c 93       	st	X, r25
    1c40:	8e 93       	st	-X, r24
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	11 8e       	std	Z+25, r1	; 0x19
    1c46:	10 8e       	std	Z+24, r1	; 0x18
    1c48:	8c 91       	ld	r24, X
    1c4a:	81 50       	subi	r24, 0x01	; 1
    1c4c:	8c 93       	st	X, r24
    1c4e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c50:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c52:	c6 81       	ldd	r28, Z+6	; 0x06
    1c54:	d7 81       	ldd	r29, Z+7	; 0x07
    1c56:	80 85       	ldd	r24, Z+8	; 0x08
    1c58:	91 85       	ldd	r25, Z+9	; 0x09
    1c5a:	9f 83       	std	Y+7, r25	; 0x07
    1c5c:	8e 83       	std	Y+6, r24	; 0x06
    1c5e:	c0 85       	ldd	r28, Z+8	; 0x08
    1c60:	d1 85       	ldd	r29, Z+9	; 0x09
    1c62:	86 81       	ldd	r24, Z+6	; 0x06
    1c64:	97 81       	ldd	r25, Z+7	; 0x07
    1c66:	9d 83       	std	Y+5, r25	; 0x05
    1c68:	8c 83       	std	Y+4, r24	; 0x04
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	8d 91       	ld	r24, X+
    1c6e:	9c 91       	ld	r25, X
    1c70:	12 97       	sbiw	r26, 0x02	; 2
    1c72:	9f 01       	movw	r18, r30
    1c74:	2e 5f       	subi	r18, 0xFE	; 254
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	82 17       	cp	r24, r18
    1c7a:	93 07       	cpc	r25, r19
    1c7c:	31 f4       	brne	.+12     	; 0x1c8a <xTaskResumeAll+0xbc>
    1c7e:	80 85       	ldd	r24, Z+8	; 0x08
    1c80:	91 85       	ldd	r25, Z+9	; 0x09
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	9c 93       	st	X, r25
    1c86:	8e 93       	st	-X, r24
    1c88:	11 97       	sbiw	r26, 0x01	; 1
    1c8a:	15 86       	std	Z+13, r1	; 0x0d
    1c8c:	14 86       	std	Z+12, r1	; 0x0c
    1c8e:	8c 91       	ld	r24, X
    1c90:	81 50       	subi	r24, 0x01	; 1
    1c92:	8c 93       	st	X, r24
    1c94:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c96:	80 91 99 14 	lds	r24, 0x1499	; 0x801499 <uxTopReadyPriority>
    1c9a:	8a 17       	cp	r24, r26
    1c9c:	10 f4       	brcc	.+4      	; 0x1ca2 <xTaskResumeAll+0xd4>
    1c9e:	a0 93 99 14 	sts	0x1499, r26	; 0x801499 <uxTopReadyPriority>
    1ca2:	8b e0       	ldi	r24, 0x0B	; 11
    1ca4:	8a 9f       	mul	r24, r26
    1ca6:	d0 01       	movw	r26, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	a5 52       	subi	r26, 0x25	; 37
    1cac:	bb 4e       	sbci	r27, 0xEB	; 235
    1cae:	11 96       	adiw	r26, 0x01	; 1
    1cb0:	0d 90       	ld	r0, X+
    1cb2:	bc 91       	ld	r27, X
    1cb4:	a0 2d       	mov	r26, r0
    1cb6:	b7 83       	std	Z+7, r27	; 0x07
    1cb8:	a6 83       	std	Z+6, r26	; 0x06
    1cba:	16 96       	adiw	r26, 0x06	; 6
    1cbc:	4d 91       	ld	r20, X+
    1cbe:	5c 91       	ld	r21, X
    1cc0:	17 97       	sbiw	r26, 0x07	; 7
    1cc2:	51 87       	std	Z+9, r21	; 0x09
    1cc4:	40 87       	std	Z+8, r20	; 0x08
    1cc6:	16 96       	adiw	r26, 0x06	; 6
    1cc8:	cd 91       	ld	r28, X+
    1cca:	dc 91       	ld	r29, X
    1ccc:	17 97       	sbiw	r26, 0x07	; 7
    1cce:	3d 83       	std	Y+5, r19	; 0x05
    1cd0:	2c 83       	std	Y+4, r18	; 0x04
    1cd2:	17 96       	adiw	r26, 0x07	; 7
    1cd4:	3c 93       	st	X, r19
    1cd6:	2e 93       	st	-X, r18
    1cd8:	16 97       	sbiw	r26, 0x06	; 6
    1cda:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cdc:	8a 9f       	mul	r24, r26
    1cde:	d0 01       	movw	r26, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	a5 52       	subi	r26, 0x25	; 37
    1ce4:	bb 4e       	sbci	r27, 0xEB	; 235
    1ce6:	b5 87       	std	Z+13, r27	; 0x0d
    1ce8:	a4 87       	std	Z+12, r26	; 0x0c
    1cea:	8c 91       	ld	r24, X
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	8c 93       	st	X, r24
    1cf0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cf2:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
    1cf6:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1cfa:	5a 96       	adiw	r26, 0x1a	; 26
    1cfc:	8c 91       	ld	r24, X
    1cfe:	98 17       	cp	r25, r24
    1d00:	30 f0       	brcs	.+12     	; 0x1d0e <xTaskResumeAll+0x140>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 93 93 14 	sts	0x1493, r24	; 0x801493 <xYieldPending>
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <xTaskResumeAll+0x140>
    1d0a:	e0 e0       	ldi	r30, 0x00	; 0
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 91 b6 14 	lds	r24, 0x14B6	; 0x8014b6 <xPendingReadyList>
    1d12:	81 11       	cpse	r24, r1
    1d14:	73 cf       	rjmp	.-282    	; 0x1bfc <xTaskResumeAll+0x2e>
    1d16:	ef 2b       	or	r30, r31
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <xTaskResumeAll+0x14e>
    1d1a:	7f db       	rcall	.-2306   	; 0x141a <prvResetNextTaskUnblockTime>
    1d1c:	c0 90 94 14 	lds	r12, 0x1494	; 0x801494 <xPendedTicks>
    1d20:	d0 90 95 14 	lds	r13, 0x1495	; 0x801495 <xPendedTicks+0x1>
    1d24:	e0 90 96 14 	lds	r14, 0x1496	; 0x801496 <xPendedTicks+0x2>
    1d28:	f0 90 97 14 	lds	r15, 0x1497	; 0x801497 <xPendedTicks+0x3>
    1d2c:	c1 14       	cp	r12, r1
    1d2e:	d1 04       	cpc	r13, r1
    1d30:	e1 04       	cpc	r14, r1
    1d32:	f1 04       	cpc	r15, r1
    1d34:	a1 f0       	breq	.+40     	; 0x1d5e <xTaskResumeAll+0x190>
    1d36:	1f de       	rcall	.-962    	; 0x1976 <xTaskIncrementTick>
    1d38:	88 23       	and	r24, r24
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <xTaskResumeAll+0x174>
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 93 14 	sts	0x1493, r24	; 0x801493 <xYieldPending>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	c8 1a       	sub	r12, r24
    1d46:	d1 08       	sbc	r13, r1
    1d48:	e1 08       	sbc	r14, r1
    1d4a:	f1 08       	sbc	r15, r1
    1d4c:	a1 f7       	brne	.-24     	; 0x1d36 <xTaskResumeAll+0x168>
    1d4e:	10 92 94 14 	sts	0x1494, r1	; 0x801494 <xPendedTicks>
    1d52:	10 92 95 14 	sts	0x1495, r1	; 0x801495 <xPendedTicks+0x1>
    1d56:	10 92 96 14 	sts	0x1496, r1	; 0x801496 <xPendedTicks+0x2>
    1d5a:	10 92 97 14 	sts	0x1497, r1	; 0x801497 <xPendedTicks+0x3>
    1d5e:	80 91 93 14 	lds	r24, 0x1493	; 0x801493 <xYieldPending>
    1d62:	88 23       	and	r24, r24
    1d64:	31 f0       	breq	.+12     	; 0x1d72 <xTaskResumeAll+0x1a4>
    1d66:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <xTaskResumeAll+0x1a6>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <xTaskResumeAll+0x1a6>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	08 95       	ret

00001d86 <xTaskDelayUntil>:
    1d86:	8f 92       	push	r8
    1d88:	9f 92       	push	r9
    1d8a:	af 92       	push	r10
    1d8c:	bf 92       	push	r11
    1d8e:	cf 92       	push	r12
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ec 01       	movw	r28, r24
    1d9e:	6a 01       	movw	r12, r20
    1da0:	7b 01       	movw	r14, r22
    1da2:	d5 dd       	rcall	.-1110   	; 0x194e <vTaskSuspendAll>
    1da4:	80 90 9a 14 	lds	r8, 0x149A	; 0x80149a <xTickCount>
    1da8:	90 90 9b 14 	lds	r9, 0x149B	; 0x80149b <xTickCount+0x1>
    1dac:	a0 90 9c 14 	lds	r10, 0x149C	; 0x80149c <xTickCount+0x2>
    1db0:	b0 90 9d 14 	lds	r11, 0x149D	; 0x80149d <xTickCount+0x3>
    1db4:	88 81       	ld	r24, Y
    1db6:	99 81       	ldd	r25, Y+1	; 0x01
    1db8:	aa 81       	ldd	r26, Y+2	; 0x02
    1dba:	bb 81       	ldd	r27, Y+3	; 0x03
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	bd 01       	movw	r22, r26
    1dc0:	4c 0d       	add	r20, r12
    1dc2:	5d 1d       	adc	r21, r13
    1dc4:	6e 1d       	adc	r22, r14
    1dc6:	7f 1d       	adc	r23, r15
    1dc8:	88 16       	cp	r8, r24
    1dca:	99 06       	cpc	r9, r25
    1dcc:	aa 06       	cpc	r10, r26
    1dce:	bb 06       	cpc	r11, r27
    1dd0:	60 f4       	brcc	.+24     	; 0x1dea <xTaskDelayUntil+0x64>
    1dd2:	48 17       	cp	r20, r24
    1dd4:	59 07       	cpc	r21, r25
    1dd6:	6a 07       	cpc	r22, r26
    1dd8:	7b 07       	cpc	r23, r27
    1dda:	98 f4       	brcc	.+38     	; 0x1e02 <xTaskDelayUntil+0x7c>
    1ddc:	84 16       	cp	r8, r20
    1dde:	95 06       	cpc	r9, r21
    1de0:	a6 06       	cpc	r10, r22
    1de2:	b7 06       	cpc	r11, r23
    1de4:	80 f0       	brcs	.+32     	; 0x1e06 <xTaskDelayUntil+0x80>
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <xTaskDelayUntil+0x8a>
    1dea:	48 17       	cp	r20, r24
    1dec:	59 07       	cpc	r21, r25
    1dee:	6a 07       	cpc	r22, r26
    1df0:	7b 07       	cpc	r23, r27
    1df2:	58 f0       	brcs	.+22     	; 0x1e0a <xTaskDelayUntil+0x84>
    1df4:	84 16       	cp	r8, r20
    1df6:	95 06       	cpc	r9, r21
    1df8:	a6 06       	cpc	r10, r22
    1dfa:	b7 06       	cpc	r11, r23
    1dfc:	40 f0       	brcs	.+16     	; 0x1e0e <xTaskDelayUntil+0x88>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	07 c0       	rjmp	.+14     	; 0x1e10 <xTaskDelayUntil+0x8a>
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	05 c0       	rjmp	.+10     	; 0x1e10 <xTaskDelayUntil+0x8a>
    1e06:	11 e0       	ldi	r17, 0x01	; 1
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <xTaskDelayUntil+0x8a>
    1e0a:	11 e0       	ldi	r17, 0x01	; 1
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <xTaskDelayUntil+0x8a>
    1e0e:	11 e0       	ldi	r17, 0x01	; 1
    1e10:	48 83       	st	Y, r20
    1e12:	59 83       	std	Y+1, r21	; 0x01
    1e14:	6a 83       	std	Y+2, r22	; 0x02
    1e16:	7b 83       	std	Y+3, r23	; 0x03
    1e18:	11 23       	and	r17, r17
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <xTaskDelayUntil+0xa6>
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	ba 01       	movw	r22, r20
    1e20:	68 19       	sub	r22, r8
    1e22:	79 09       	sbc	r23, r9
    1e24:	8a 09       	sbc	r24, r10
    1e26:	9b 09       	sbc	r25, r11
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	6b dc       	rcall	.-1834   	; 0x1702 <prvAddCurrentTaskToDelayedList>
    1e2c:	d0 de       	rcall	.-608    	; 0x1bce <xTaskResumeAll>
    1e2e:	81 11       	cpse	r24, r1
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <xTaskDelayUntil+0xb0>
    1e32:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    1e36:	81 2f       	mov	r24, r17
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	08 95       	ret

00001e50 <vTaskDelay>:
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	6b 01       	movw	r12, r22
    1e5a:	7c 01       	movw	r14, r24
    1e5c:	67 2b       	or	r22, r23
    1e5e:	68 2b       	or	r22, r24
    1e60:	69 2b       	or	r22, r25
    1e62:	39 f0       	breq	.+14     	; 0x1e72 <vTaskDelay+0x22>
    1e64:	74 dd       	rcall	.-1304   	; 0x194e <vTaskSuspendAll>
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	c7 01       	movw	r24, r14
    1e6a:	b6 01       	movw	r22, r12
    1e6c:	4a dc       	rcall	.-1900   	; 0x1702 <prvAddCurrentTaskToDelayedList>
    1e6e:	af de       	rcall	.-674    	; 0x1bce <xTaskResumeAll>
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <vTaskDelay+0x24>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	81 11       	cpse	r24, r1
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vTaskDelay+0x2c>
    1e78:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	cf 90       	pop	r12
    1e84:	08 95       	ret

00001e86 <vTaskSwitchContext>:
    1e86:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    1e8a:	88 23       	and	r24, r24
    1e8c:	21 f0       	breq	.+8      	; 0x1e96 <vTaskSwitchContext+0x10>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	80 93 93 14 	sts	0x1493, r24	; 0x801493 <xYieldPending>
    1e94:	08 95       	ret
    1e96:	10 92 93 14 	sts	0x1493, r1	; 0x801493 <xYieldPending>
    1e9a:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    1e9e:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1ea2:	20 81       	ld	r18, Z
    1ea4:	31 81       	ldd	r19, Z+1	; 0x01
    1ea6:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    1eaa:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1eae:	83 8d       	ldd	r24, Z+27	; 0x1b
    1eb0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1eb2:	82 17       	cp	r24, r18
    1eb4:	93 07       	cpc	r25, r19
    1eb6:	60 f0       	brcs	.+24     	; 0x1ed0 <vTaskSwitchContext+0x4a>
    1eb8:	60 91 49 15 	lds	r22, 0x1549	; 0x801549 <pxCurrentTCB>
    1ebc:	70 91 4a 15 	lds	r23, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1ec0:	63 5e       	subi	r22, 0xE3	; 227
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    1ec8:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1ecc:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <vApplicationStackOverflowHook>
    1ed0:	80 91 99 14 	lds	r24, 0x1499	; 0x801499 <uxTopReadyPriority>
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <vTaskSwitchContext+0x52>
    1ed6:	81 50       	subi	r24, 0x01	; 1
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	9b e0       	ldi	r25, 0x0B	; 11
    1ede:	92 9f       	mul	r25, r18
    1ee0:	f0 01       	movw	r30, r0
    1ee2:	93 9f       	mul	r25, r19
    1ee4:	f0 0d       	add	r31, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	e5 52       	subi	r30, 0x25	; 37
    1eea:	fb 4e       	sbci	r31, 0xEB	; 235
    1eec:	90 81       	ld	r25, Z
    1eee:	99 23       	and	r25, r25
    1ef0:	91 f3       	breq	.-28     	; 0x1ed6 <vTaskSwitchContext+0x50>
    1ef2:	9b e0       	ldi	r25, 0x0B	; 11
    1ef4:	92 9f       	mul	r25, r18
    1ef6:	a0 01       	movw	r20, r0
    1ef8:	93 9f       	mul	r25, r19
    1efa:	50 0d       	add	r21, r0
    1efc:	11 24       	eor	r1, r1
    1efe:	df 01       	movw	r26, r30
    1f00:	01 80       	ldd	r0, Z+1	; 0x01
    1f02:	f2 81       	ldd	r31, Z+2	; 0x02
    1f04:	e0 2d       	mov	r30, r0
    1f06:	04 80       	ldd	r0, Z+4	; 0x04
    1f08:	f5 81       	ldd	r31, Z+5	; 0x05
    1f0a:	e0 2d       	mov	r30, r0
    1f0c:	12 96       	adiw	r26, 0x02	; 2
    1f0e:	fc 93       	st	X, r31
    1f10:	ee 93       	st	-X, r30
    1f12:	11 97       	sbiw	r26, 0x01	; 1
    1f14:	42 52       	subi	r20, 0x22	; 34
    1f16:	5b 4e       	sbci	r21, 0xEB	; 235
    1f18:	e4 17       	cp	r30, r20
    1f1a:	f5 07       	cpc	r31, r21
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <vTaskSwitchContext+0xa2>
    1f1e:	44 81       	ldd	r20, Z+4	; 0x04
    1f20:	55 81       	ldd	r21, Z+5	; 0x05
    1f22:	fd 01       	movw	r30, r26
    1f24:	52 83       	std	Z+2, r21	; 0x02
    1f26:	41 83       	std	Z+1, r20	; 0x01
    1f28:	9b e0       	ldi	r25, 0x0B	; 11
    1f2a:	92 9f       	mul	r25, r18
    1f2c:	f0 01       	movw	r30, r0
    1f2e:	93 9f       	mul	r25, r19
    1f30:	f0 0d       	add	r31, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	e5 52       	subi	r30, 0x25	; 37
    1f36:	fb 4e       	sbci	r31, 0xEB	; 235
    1f38:	01 80       	ldd	r0, Z+1	; 0x01
    1f3a:	f2 81       	ldd	r31, Z+2	; 0x02
    1f3c:	e0 2d       	mov	r30, r0
    1f3e:	20 85       	ldd	r18, Z+8	; 0x08
    1f40:	31 85       	ldd	r19, Z+9	; 0x09
    1f42:	30 93 4a 15 	sts	0x154A, r19	; 0x80154a <pxCurrentTCB+0x1>
    1f46:	20 93 49 15 	sts	0x1549, r18	; 0x801549 <pxCurrentTCB>
    1f4a:	80 93 99 14 	sts	0x1499, r24	; 0x801499 <uxTopReadyPriority>
    1f4e:	08 95       	ret

00001f50 <vTaskPlaceOnEventList>:
    1f50:	cf 92       	push	r12
    1f52:	df 92       	push	r13
    1f54:	ef 92       	push	r14
    1f56:	ff 92       	push	r15
    1f58:	6a 01       	movw	r12, r20
    1f5a:	7b 01       	movw	r14, r22
    1f5c:	60 91 49 15 	lds	r22, 0x1549	; 0x801549 <pxCurrentTCB>
    1f60:	70 91 4a 15 	lds	r23, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1f64:	62 5f       	subi	r22, 0xF2	; 242
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	0e 94 89 02 	call	0x512	; 0x512 <vListInsert>
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	c7 01       	movw	r24, r14
    1f70:	b6 01       	movw	r22, r12
    1f72:	c7 db       	rcall	.-2162   	; 0x1702 <prvAddCurrentTaskToDelayedList>
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	df 90       	pop	r13
    1f7a:	cf 90       	pop	r12
    1f7c:	08 95       	ret

00001f7e <vTaskPlaceOnEventListRestricted>:
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	fc 01       	movw	r30, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	ba 01       	movw	r22, r20
    1f88:	a1 81       	ldd	r26, Z+1	; 0x01
    1f8a:	b2 81       	ldd	r27, Z+2	; 0x02
    1f8c:	c0 91 49 15 	lds	r28, 0x1549	; 0x801549 <pxCurrentTCB>
    1f90:	d0 91 4a 15 	lds	r29, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1f94:	bb 8b       	std	Y+19, r27	; 0x13
    1f96:	aa 8b       	std	Y+18, r26	; 0x12
    1f98:	c0 91 49 15 	lds	r28, 0x1549	; 0x801549 <pxCurrentTCB>
    1f9c:	d0 91 4a 15 	lds	r29, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1fa0:	16 96       	adiw	r26, 0x06	; 6
    1fa2:	4d 91       	ld	r20, X+
    1fa4:	5c 91       	ld	r21, X
    1fa6:	17 97       	sbiw	r26, 0x07	; 7
    1fa8:	5d 8b       	std	Y+21, r21	; 0x15
    1faa:	4c 8b       	std	Y+20, r20	; 0x14
    1fac:	16 96       	adiw	r26, 0x06	; 6
    1fae:	cd 91       	ld	r28, X+
    1fb0:	dc 91       	ld	r29, X
    1fb2:	17 97       	sbiw	r26, 0x07	; 7
    1fb4:	40 91 49 15 	lds	r20, 0x1549	; 0x801549 <pxCurrentTCB>
    1fb8:	50 91 4a 15 	lds	r21, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1fbc:	42 5f       	subi	r20, 0xF2	; 242
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc0:	5d 83       	std	Y+5, r21	; 0x05
    1fc2:	4c 83       	std	Y+4, r20	; 0x04
    1fc4:	40 91 49 15 	lds	r20, 0x1549	; 0x801549 <pxCurrentTCB>
    1fc8:	50 91 4a 15 	lds	r21, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1fcc:	42 5f       	subi	r20, 0xF2	; 242
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	17 96       	adiw	r26, 0x07	; 7
    1fd2:	5c 93       	st	X, r21
    1fd4:	4e 93       	st	-X, r20
    1fd6:	16 97       	sbiw	r26, 0x06	; 6
    1fd8:	a0 91 49 15 	lds	r26, 0x1549	; 0x801549 <pxCurrentTCB>
    1fdc:	b0 91 4a 15 	lds	r27, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    1fe0:	59 96       	adiw	r26, 0x19	; 25
    1fe2:	fc 93       	st	X, r31
    1fe4:	ee 93       	st	-X, r30
    1fe6:	58 97       	sbiw	r26, 0x18	; 24
    1fe8:	30 81       	ld	r19, Z
    1fea:	3f 5f       	subi	r19, 0xFF	; 255
    1fec:	30 83       	st	Z, r19
    1fee:	22 23       	and	r18, r18
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <vTaskPlaceOnEventListRestricted+0x7a>
    1ff2:	6f ef       	ldi	r22, 0xFF	; 255
    1ff4:	7f ef       	ldi	r23, 0xFF	; 255
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	42 2f       	mov	r20, r18
    1ffa:	83 db       	rcall	.-2298   	; 0x1702 <prvAddCurrentTaskToDelayedList>
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	08 95       	ret

00002002 <xTaskRemoveFromEventList>:
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	dc 01       	movw	r26, r24
    2008:	17 96       	adiw	r26, 0x07	; 7
    200a:	ed 91       	ld	r30, X+
    200c:	fc 91       	ld	r31, X
    200e:	18 97       	sbiw	r26, 0x08	; 8
    2010:	00 84       	ldd	r0, Z+8	; 0x08
    2012:	f1 85       	ldd	r31, Z+9	; 0x09
    2014:	e0 2d       	mov	r30, r0
    2016:	a0 8d       	ldd	r26, Z+24	; 0x18
    2018:	b1 8d       	ldd	r27, Z+25	; 0x19
    201a:	c2 89       	ldd	r28, Z+18	; 0x12
    201c:	d3 89       	ldd	r29, Z+19	; 0x13
    201e:	84 89       	ldd	r24, Z+20	; 0x14
    2020:	95 89       	ldd	r25, Z+21	; 0x15
    2022:	9f 83       	std	Y+7, r25	; 0x07
    2024:	8e 83       	std	Y+6, r24	; 0x06
    2026:	c4 89       	ldd	r28, Z+20	; 0x14
    2028:	d5 89       	ldd	r29, Z+21	; 0x15
    202a:	82 89       	ldd	r24, Z+18	; 0x12
    202c:	93 89       	ldd	r25, Z+19	; 0x13
    202e:	9d 83       	std	Y+5, r25	; 0x05
    2030:	8c 83       	std	Y+4, r24	; 0x04
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	8d 91       	ld	r24, X+
    2036:	9c 91       	ld	r25, X
    2038:	12 97       	sbiw	r26, 0x02	; 2
    203a:	9f 01       	movw	r18, r30
    203c:	22 5f       	subi	r18, 0xF2	; 242
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	82 17       	cp	r24, r18
    2042:	93 07       	cpc	r25, r19
    2044:	31 f4       	brne	.+12     	; 0x2052 <xTaskRemoveFromEventList+0x50>
    2046:	84 89       	ldd	r24, Z+20	; 0x14
    2048:	95 89       	ldd	r25, Z+21	; 0x15
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
    2050:	11 97       	sbiw	r26, 0x01	; 1
    2052:	11 8e       	std	Z+25, r1	; 0x19
    2054:	10 8e       	std	Z+24, r1	; 0x18
    2056:	8c 91       	ld	r24, X
    2058:	81 50       	subi	r24, 0x01	; 1
    205a:	8c 93       	st	X, r24
    205c:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    2060:	81 11       	cpse	r24, r1
    2062:	52 c0       	rjmp	.+164    	; 0x2108 <xTaskRemoveFromEventList+0x106>
    2064:	a4 85       	ldd	r26, Z+12	; 0x0c
    2066:	b5 85       	ldd	r27, Z+13	; 0x0d
    2068:	c6 81       	ldd	r28, Z+6	; 0x06
    206a:	d7 81       	ldd	r29, Z+7	; 0x07
    206c:	80 85       	ldd	r24, Z+8	; 0x08
    206e:	91 85       	ldd	r25, Z+9	; 0x09
    2070:	9f 83       	std	Y+7, r25	; 0x07
    2072:	8e 83       	std	Y+6, r24	; 0x06
    2074:	c0 85       	ldd	r28, Z+8	; 0x08
    2076:	d1 85       	ldd	r29, Z+9	; 0x09
    2078:	86 81       	ldd	r24, Z+6	; 0x06
    207a:	97 81       	ldd	r25, Z+7	; 0x07
    207c:	9d 83       	std	Y+5, r25	; 0x05
    207e:	8c 83       	std	Y+4, r24	; 0x04
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	8d 91       	ld	r24, X+
    2084:	9c 91       	ld	r25, X
    2086:	12 97       	sbiw	r26, 0x02	; 2
    2088:	9f 01       	movw	r18, r30
    208a:	2e 5f       	subi	r18, 0xFE	; 254
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	82 17       	cp	r24, r18
    2090:	93 07       	cpc	r25, r19
    2092:	31 f4       	brne	.+12     	; 0x20a0 <xTaskRemoveFromEventList+0x9e>
    2094:	80 85       	ldd	r24, Z+8	; 0x08
    2096:	91 85       	ldd	r25, Z+9	; 0x09
    2098:	12 96       	adiw	r26, 0x02	; 2
    209a:	9c 93       	st	X, r25
    209c:	8e 93       	st	-X, r24
    209e:	11 97       	sbiw	r26, 0x01	; 1
    20a0:	15 86       	std	Z+13, r1	; 0x0d
    20a2:	14 86       	std	Z+12, r1	; 0x0c
    20a4:	8c 91       	ld	r24, X
    20a6:	81 50       	subi	r24, 0x01	; 1
    20a8:	8c 93       	st	X, r24
    20aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20ac:	80 91 99 14 	lds	r24, 0x1499	; 0x801499 <uxTopReadyPriority>
    20b0:	8a 17       	cp	r24, r26
    20b2:	10 f4       	brcc	.+4      	; 0x20b8 <xTaskRemoveFromEventList+0xb6>
    20b4:	a0 93 99 14 	sts	0x1499, r26	; 0x801499 <uxTopReadyPriority>
    20b8:	8b e0       	ldi	r24, 0x0B	; 11
    20ba:	8a 9f       	mul	r24, r26
    20bc:	d0 01       	movw	r26, r0
    20be:	11 24       	eor	r1, r1
    20c0:	a5 52       	subi	r26, 0x25	; 37
    20c2:	bb 4e       	sbci	r27, 0xEB	; 235
    20c4:	11 96       	adiw	r26, 0x01	; 1
    20c6:	0d 90       	ld	r0, X+
    20c8:	bc 91       	ld	r27, X
    20ca:	a0 2d       	mov	r26, r0
    20cc:	b7 83       	std	Z+7, r27	; 0x07
    20ce:	a6 83       	std	Z+6, r26	; 0x06
    20d0:	16 96       	adiw	r26, 0x06	; 6
    20d2:	4d 91       	ld	r20, X+
    20d4:	5c 91       	ld	r21, X
    20d6:	17 97       	sbiw	r26, 0x07	; 7
    20d8:	51 87       	std	Z+9, r21	; 0x09
    20da:	40 87       	std	Z+8, r20	; 0x08
    20dc:	16 96       	adiw	r26, 0x06	; 6
    20de:	cd 91       	ld	r28, X+
    20e0:	dc 91       	ld	r29, X
    20e2:	17 97       	sbiw	r26, 0x07	; 7
    20e4:	3d 83       	std	Y+5, r19	; 0x05
    20e6:	2c 83       	std	Y+4, r18	; 0x04
    20e8:	17 96       	adiw	r26, 0x07	; 7
    20ea:	3c 93       	st	X, r19
    20ec:	2e 93       	st	-X, r18
    20ee:	16 97       	sbiw	r26, 0x06	; 6
    20f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20f2:	8a 9f       	mul	r24, r26
    20f4:	d0 01       	movw	r26, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	a5 52       	subi	r26, 0x25	; 37
    20fa:	bb 4e       	sbci	r27, 0xEB	; 235
    20fc:	b5 87       	std	Z+13, r27	; 0x0d
    20fe:	a4 87       	std	Z+12, r26	; 0x0c
    2100:	8c 91       	ld	r24, X
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	8c 93       	st	X, r24
    2106:	1c c0       	rjmp	.+56     	; 0x2140 <xTaskRemoveFromEventList+0x13e>
    2108:	46 eb       	ldi	r20, 0xB6	; 182
    210a:	54 e1       	ldi	r21, 0x14	; 20
    210c:	da 01       	movw	r26, r20
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	cd 91       	ld	r28, X+
    2112:	dc 91       	ld	r29, X
    2114:	12 97       	sbiw	r26, 0x02	; 2
    2116:	d3 8b       	std	Z+19, r29	; 0x13
    2118:	c2 8b       	std	Z+18, r28	; 0x12
    211a:	8e 81       	ldd	r24, Y+6	; 0x06
    211c:	9f 81       	ldd	r25, Y+7	; 0x07
    211e:	95 8b       	std	Z+21, r25	; 0x15
    2120:	84 8b       	std	Z+20, r24	; 0x14
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	dc 01       	movw	r26, r24
    2128:	15 96       	adiw	r26, 0x05	; 5
    212a:	3c 93       	st	X, r19
    212c:	2e 93       	st	-X, r18
    212e:	14 97       	sbiw	r26, 0x04	; 4
    2130:	3f 83       	std	Y+7, r19	; 0x07
    2132:	2e 83       	std	Y+6, r18	; 0x06
    2134:	51 8f       	std	Z+25, r21	; 0x19
    2136:	40 8f       	std	Z+24, r20	; 0x18
    2138:	da 01       	movw	r26, r20
    213a:	8c 91       	ld	r24, X
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	8c 93       	st	X, r24
    2140:	92 8d       	ldd	r25, Z+26	; 0x1a
    2142:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    2146:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    214a:	82 8d       	ldd	r24, Z+26	; 0x1a
    214c:	89 17       	cp	r24, r25
    214e:	20 f4       	brcc	.+8      	; 0x2158 <xTaskRemoveFromEventList+0x156>
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	80 93 93 14 	sts	0x1493, r24	; 0x801493 <xYieldPending>
    2156:	01 c0       	rjmp	.+2      	; 0x215a <xTaskRemoveFromEventList+0x158>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	08 95       	ret

00002160 <vTaskSetTimeOutState>:
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	0f 92       	push	r0
    2166:	20 91 92 14 	lds	r18, 0x1492	; 0x801492 <xNumOfOverflows>
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18
    216e:	40 91 9a 14 	lds	r20, 0x149A	; 0x80149a <xTickCount>
    2172:	50 91 9b 14 	lds	r21, 0x149B	; 0x80149b <xTickCount+0x1>
    2176:	60 91 9c 14 	lds	r22, 0x149C	; 0x80149c <xTickCount+0x2>
    217a:	70 91 9d 14 	lds	r23, 0x149D	; 0x80149d <xTickCount+0x3>
    217e:	41 83       	std	Z+1, r20	; 0x01
    2180:	52 83       	std	Z+2, r21	; 0x02
    2182:	63 83       	std	Z+3, r22	; 0x03
    2184:	74 83       	std	Z+4, r23	; 0x04
    2186:	0f 90       	pop	r0
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	08 95       	ret

0000218c <vTaskInternalSetTimeOutState>:
    218c:	20 91 92 14 	lds	r18, 0x1492	; 0x801492 <xNumOfOverflows>
    2190:	fc 01       	movw	r30, r24
    2192:	20 83       	st	Z, r18
    2194:	40 91 9a 14 	lds	r20, 0x149A	; 0x80149a <xTickCount>
    2198:	50 91 9b 14 	lds	r21, 0x149B	; 0x80149b <xTickCount+0x1>
    219c:	60 91 9c 14 	lds	r22, 0x149C	; 0x80149c <xTickCount+0x2>
    21a0:	70 91 9d 14 	lds	r23, 0x149D	; 0x80149d <xTickCount+0x3>
    21a4:	41 83       	std	Z+1, r20	; 0x01
    21a6:	52 83       	std	Z+2, r21	; 0x02
    21a8:	63 83       	std	Z+3, r22	; 0x03
    21aa:	74 83       	std	Z+4, r23	; 0x04
    21ac:	08 95       	ret

000021ae <xTaskCheckForTimeOut>:
    21ae:	8f 92       	push	r8
    21b0:	9f 92       	push	r9
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	fb 01       	movw	r30, r22
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	0f 92       	push	r0
    21ce:	c0 90 9a 14 	lds	r12, 0x149A	; 0x80149a <xTickCount>
    21d2:	d0 90 9b 14 	lds	r13, 0x149B	; 0x80149b <xTickCount+0x1>
    21d6:	e0 90 9c 14 	lds	r14, 0x149C	; 0x80149c <xTickCount+0x2>
    21da:	f0 90 9d 14 	lds	r15, 0x149D	; 0x80149d <xTickCount+0x3>
    21de:	dc 01       	movw	r26, r24
    21e0:	11 96       	adiw	r26, 0x01	; 1
    21e2:	0d 91       	ld	r16, X+
    21e4:	1d 91       	ld	r17, X+
    21e6:	2d 91       	ld	r18, X+
    21e8:	3c 91       	ld	r19, X
    21ea:	14 97       	sbiw	r26, 0x04	; 4
    21ec:	46 01       	movw	r8, r12
    21ee:	57 01       	movw	r10, r14
    21f0:	80 1a       	sub	r8, r16
    21f2:	91 0a       	sbc	r9, r17
    21f4:	a2 0a       	sbc	r10, r18
    21f6:	b3 0a       	sbc	r11, r19
    21f8:	40 81       	ld	r20, Z
    21fa:	51 81       	ldd	r21, Z+1	; 0x01
    21fc:	62 81       	ldd	r22, Z+2	; 0x02
    21fe:	73 81       	ldd	r23, Z+3	; 0x03
    2200:	4f 3f       	cpi	r20, 0xFF	; 255
    2202:	bf ef       	ldi	r27, 0xFF	; 255
    2204:	5b 07       	cpc	r21, r27
    2206:	6b 07       	cpc	r22, r27
    2208:	7b 07       	cpc	r23, r27
    220a:	39 f1       	breq	.+78     	; 0x225a <__stack+0x5b>
    220c:	ec 01       	movw	r28, r24
    220e:	b8 81       	ld	r27, Y
    2210:	a0 91 92 14 	lds	r26, 0x1492	; 0x801492 <xNumOfOverflows>
    2214:	ba 17       	cp	r27, r26
    2216:	59 f0       	breq	.+22     	; 0x222e <__stack+0x2f>
    2218:	c0 16       	cp	r12, r16
    221a:	d1 06       	cpc	r13, r17
    221c:	e2 06       	cpc	r14, r18
    221e:	f3 06       	cpc	r15, r19
    2220:	30 f0       	brcs	.+12     	; 0x222e <__stack+0x2f>
    2222:	10 82       	st	Z, r1
    2224:	11 82       	std	Z+1, r1	; 0x01
    2226:	12 82       	std	Z+2, r1	; 0x02
    2228:	13 82       	std	Z+3, r1	; 0x03
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	17 c0       	rjmp	.+46     	; 0x225c <__stack+0x5d>
    222e:	84 16       	cp	r8, r20
    2230:	95 06       	cpc	r9, r21
    2232:	a6 06       	cpc	r10, r22
    2234:	b7 06       	cpc	r11, r23
    2236:	58 f4       	brcc	.+22     	; 0x224e <__stack+0x4f>
    2238:	48 19       	sub	r20, r8
    223a:	59 09       	sbc	r21, r9
    223c:	6a 09       	sbc	r22, r10
    223e:	7b 09       	sbc	r23, r11
    2240:	40 83       	st	Z, r20
    2242:	51 83       	std	Z+1, r21	; 0x01
    2244:	62 83       	std	Z+2, r22	; 0x02
    2246:	73 83       	std	Z+3, r23	; 0x03
    2248:	a1 df       	rcall	.-190    	; 0x218c <vTaskInternalSetTimeOutState>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	07 c0       	rjmp	.+14     	; 0x225c <__stack+0x5d>
    224e:	10 82       	st	Z, r1
    2250:	11 82       	std	Z+1, r1	; 0x01
    2252:	12 82       	std	Z+2, r1	; 0x02
    2254:	13 82       	std	Z+3, r1	; 0x03
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	01 c0       	rjmp	.+2      	; 0x225c <__stack+0x5d>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	1f 91       	pop	r17
    2266:	0f 91       	pop	r16
    2268:	ff 90       	pop	r15
    226a:	ef 90       	pop	r14
    226c:	df 90       	pop	r13
    226e:	cf 90       	pop	r12
    2270:	bf 90       	pop	r11
    2272:	af 90       	pop	r10
    2274:	9f 90       	pop	r9
    2276:	8f 90       	pop	r8
    2278:	08 95       	ret

0000227a <vTaskMissedYield>:
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 93 14 	sts	0x1493, r24	; 0x801493 <xYieldPending>
    2280:	08 95       	ret

00002282 <xTaskGetCurrentTaskHandle>:
    2282:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    2286:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    228a:	08 95       	ret

0000228c <xTaskGetSchedulerState>:
    228c:	80 91 98 14 	lds	r24, 0x1498	; 0x801498 <xSchedulerRunning>
    2290:	88 23       	and	r24, r24
    2292:	31 f0       	breq	.+12     	; 0x22a0 <xTaskGetSchedulerState+0x14>
    2294:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <uxSchedulerSuspended>
    2298:	81 11       	cpse	r24, r1
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <xTaskGetSchedulerState+0x18>
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	08 95       	ret
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	08 95       	ret
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	08 95       	ret

000022a8 <xTaskPriorityDisinherit>:
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	fc 01       	movw	r30, r24
    22b2:	89 2b       	or	r24, r25
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <xTaskPriorityDisinherit+0x10>
    22b6:	49 c0       	rjmp	.+146    	; 0x234a <xTaskPriorityDisinherit+0xa2>
    22b8:	86 a5       	ldd	r24, Z+46	; 0x2e
    22ba:	81 50       	subi	r24, 0x01	; 1
    22bc:	86 a7       	std	Z+46, r24	; 0x2e
    22be:	22 8d       	ldd	r18, Z+26	; 0x1a
    22c0:	95 a5       	ldd	r25, Z+45	; 0x2d
    22c2:	29 17       	cp	r18, r25
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <xTaskPriorityDisinherit+0x20>
    22c6:	43 c0       	rjmp	.+134    	; 0x234e <xTaskPriorityDisinherit+0xa6>
    22c8:	81 11       	cpse	r24, r1
    22ca:	43 c0       	rjmp	.+134    	; 0x2352 <xTaskPriorityDisinherit+0xaa>
    22cc:	ef 01       	movw	r28, r30
    22ce:	8f 01       	movw	r16, r30
    22d0:	0e 5f       	subi	r16, 0xFE	; 254
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	c8 01       	movw	r24, r16
    22d6:	0e 94 c6 02 	call	0x58c	; 0x58c <uxListRemove>
    22da:	ed a5       	ldd	r30, Y+45	; 0x2d
    22dc:	ea 8f       	std	Y+26, r30	; 0x1a
    22de:	8a e0       	ldi	r24, 0x0A	; 10
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e0       	ldi	r26, 0x00	; 0
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	8e 1b       	sub	r24, r30
    22e8:	91 09       	sbc	r25, r1
    22ea:	a1 09       	sbc	r26, r1
    22ec:	b1 09       	sbc	r27, r1
    22ee:	8e 87       	std	Y+14, r24	; 0x0e
    22f0:	9f 87       	std	Y+15, r25	; 0x0f
    22f2:	a8 8b       	std	Y+16, r26	; 0x10
    22f4:	b9 8b       	std	Y+17, r27	; 0x11
    22f6:	80 91 99 14 	lds	r24, 0x1499	; 0x801499 <uxTopReadyPriority>
    22fa:	8e 17       	cp	r24, r30
    22fc:	10 f4       	brcc	.+4      	; 0x2302 <xTaskPriorityDisinherit+0x5a>
    22fe:	e0 93 99 14 	sts	0x1499, r30	; 0x801499 <uxTopReadyPriority>
    2302:	8b e0       	ldi	r24, 0x0B	; 11
    2304:	8e 9f       	mul	r24, r30
    2306:	f0 01       	movw	r30, r0
    2308:	11 24       	eor	r1, r1
    230a:	e5 52       	subi	r30, 0x25	; 37
    230c:	fb 4e       	sbci	r31, 0xEB	; 235
    230e:	01 80       	ldd	r0, Z+1	; 0x01
    2310:	f2 81       	ldd	r31, Z+2	; 0x02
    2312:	e0 2d       	mov	r30, r0
    2314:	ff 83       	std	Y+7, r31	; 0x07
    2316:	ee 83       	std	Y+6, r30	; 0x06
    2318:	26 81       	ldd	r18, Z+6	; 0x06
    231a:	37 81       	ldd	r19, Z+7	; 0x07
    231c:	39 87       	std	Y+9, r19	; 0x09
    231e:	28 87       	std	Y+8, r18	; 0x08
    2320:	a6 81       	ldd	r26, Z+6	; 0x06
    2322:	b7 81       	ldd	r27, Z+7	; 0x07
    2324:	15 96       	adiw	r26, 0x05	; 5
    2326:	1c 93       	st	X, r17
    2328:	0e 93       	st	-X, r16
    232a:	14 97       	sbiw	r26, 0x04	; 4
    232c:	17 83       	std	Z+7, r17	; 0x07
    232e:	06 83       	std	Z+6, r16	; 0x06
    2330:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2332:	8e 9f       	mul	r24, r30
    2334:	f0 01       	movw	r30, r0
    2336:	11 24       	eor	r1, r1
    2338:	e5 52       	subi	r30, 0x25	; 37
    233a:	fb 4e       	sbci	r31, 0xEB	; 235
    233c:	fd 87       	std	Y+13, r31	; 0x0d
    233e:	ec 87       	std	Y+12, r30	; 0x0c
    2340:	80 81       	ld	r24, Z
    2342:	8f 5f       	subi	r24, 0xFF	; 255
    2344:	80 83       	st	Z, r24
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <xTaskPriorityDisinherit+0xac>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <xTaskPriorityDisinherit+0xac>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <xTaskPriorityDisinherit+0xac>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <xTaskGenericNotifyWait>:
    235e:	4f 92       	push	r4
    2360:	5f 92       	push	r5
    2362:	6f 92       	push	r6
    2364:	7f 92       	push	r7
    2366:	af 92       	push	r10
    2368:	bf 92       	push	r11
    236a:	cf 92       	push	r12
    236c:	df 92       	push	r13
    236e:	ef 92       	push	r14
    2370:	ff 92       	push	r15
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	28 01       	movw	r4, r16
    237c:	39 01       	movw	r6, r18
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	0f 92       	push	r0
    2384:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    2388:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    238c:	c8 2f       	mov	r28, r24
    238e:	d0 e0       	ldi	r29, 0x00	; 0
    2390:	ec 0f       	add	r30, r28
    2392:	fd 1f       	adc	r31, r29
    2394:	83 a9       	ldd	r24, Z+51	; 0x33
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	71 f1       	breq	.+92     	; 0x23f6 <xTaskGenericNotifyWait+0x98>
    239a:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    239e:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    23a2:	ce 01       	movw	r24, r28
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	e8 0f       	add	r30, r24
    23ae:	f9 1f       	adc	r31, r25
    23b0:	87 a5       	ldd	r24, Z+47	; 0x2f
    23b2:	90 a9       	ldd	r25, Z+48	; 0x30
    23b4:	a1 a9       	ldd	r26, Z+49	; 0x31
    23b6:	b2 a9       	ldd	r27, Z+50	; 0x32
    23b8:	40 95       	com	r20
    23ba:	50 95       	com	r21
    23bc:	60 95       	com	r22
    23be:	70 95       	com	r23
    23c0:	48 23       	and	r20, r24
    23c2:	59 23       	and	r21, r25
    23c4:	6a 23       	and	r22, r26
    23c6:	7b 23       	and	r23, r27
    23c8:	47 a7       	std	Z+47, r20	; 0x2f
    23ca:	50 ab       	std	Z+48, r21	; 0x30
    23cc:	61 ab       	std	Z+49, r22	; 0x31
    23ce:	72 ab       	std	Z+50, r23	; 0x32
    23d0:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    23d4:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    23d8:	ec 0f       	add	r30, r28
    23da:	fd 1f       	adc	r31, r29
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	83 ab       	std	Z+51, r24	; 0x33
    23e0:	a1 14       	cp	r10, r1
    23e2:	b1 04       	cpc	r11, r1
    23e4:	c1 04       	cpc	r12, r1
    23e6:	d1 04       	cpc	r13, r1
    23e8:	31 f0       	breq	.+12     	; 0x23f6 <xTaskGenericNotifyWait+0x98>
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	c6 01       	movw	r24, r12
    23ee:	b5 01       	movw	r22, r10
    23f0:	88 d9       	rcall	.-3312   	; 0x1702 <prvAddCurrentTaskToDelayedList>
    23f2:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	0f 92       	push	r0
    2400:	e1 14       	cp	r14, r1
    2402:	f1 04       	cpc	r15, r1
    2404:	a1 f0       	breq	.+40     	; 0x242e <xTaskGenericNotifyWait+0xd0>
    2406:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    240a:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    240e:	ce 01       	movw	r24, r28
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	e8 0f       	add	r30, r24
    241a:	f9 1f       	adc	r31, r25
    241c:	87 a5       	ldd	r24, Z+47	; 0x2f
    241e:	90 a9       	ldd	r25, Z+48	; 0x30
    2420:	a1 a9       	ldd	r26, Z+49	; 0x31
    2422:	b2 a9       	ldd	r27, Z+50	; 0x32
    2424:	f7 01       	movw	r30, r14
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
    242e:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    2432:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    2436:	ec 0f       	add	r30, r28
    2438:	fd 1f       	adc	r31, r29
    243a:	83 a9       	ldd	r24, Z+51	; 0x33
    243c:	82 30       	cpi	r24, 0x02	; 2
    243e:	e9 f4       	brne	.+58     	; 0x247a <xTaskGenericNotifyWait+0x11c>
    2440:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    2444:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    2448:	ce 01       	movw	r24, r28
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	e8 0f       	add	r30, r24
    2454:	f9 1f       	adc	r31, r25
    2456:	87 a5       	ldd	r24, Z+47	; 0x2f
    2458:	90 a9       	ldd	r25, Z+48	; 0x30
    245a:	a1 a9       	ldd	r26, Z+49	; 0x31
    245c:	b2 a9       	ldd	r27, Z+50	; 0x32
    245e:	40 94       	com	r4
    2460:	50 94       	com	r5
    2462:	60 94       	com	r6
    2464:	70 94       	com	r7
    2466:	48 22       	and	r4, r24
    2468:	59 22       	and	r5, r25
    246a:	6a 22       	and	r6, r26
    246c:	7b 22       	and	r7, r27
    246e:	47 a6       	std	Z+47, r4	; 0x2f
    2470:	50 aa       	std	Z+48, r5	; 0x30
    2472:	61 aa       	std	Z+49, r6	; 0x31
    2474:	72 aa       	std	Z+50, r7	; 0x32
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	01 c0       	rjmp	.+2      	; 0x247c <xTaskGenericNotifyWait+0x11e>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	20 91 49 15 	lds	r18, 0x1549	; 0x801549 <pxCurrentTCB>
    2480:	30 91 4a 15 	lds	r19, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    2484:	c2 0f       	add	r28, r18
    2486:	d3 1f       	adc	r29, r19
    2488:	1b aa       	std	Y+51, r1	; 0x33
    248a:	0f 90       	pop	r0
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	bf 90       	pop	r11
    24a0:	af 90       	pop	r10
    24a2:	7f 90       	pop	r7
    24a4:	6f 90       	pop	r6
    24a6:	5f 90       	pop	r5
    24a8:	4f 90       	pop	r4
    24aa:	08 95       	ret

000024ac <xTaskGenericNotify>:
    24ac:	8f 92       	push	r8
    24ae:	9f 92       	push	r9
    24b0:	af 92       	push	r10
    24b2:	bf 92       	push	r11
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	dc 01       	movw	r26, r24
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	0f 92       	push	r0
    24c6:	e1 14       	cp	r14, r1
    24c8:	f1 04       	cpc	r15, r1
    24ca:	89 f0       	breq	.+34     	; 0x24ee <xTaskGenericNotify+0x42>
    24cc:	e6 2f       	mov	r30, r22
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	e8 0f       	add	r30, r24
    24da:	f9 1f       	adc	r31, r25
    24dc:	87 a4       	ldd	r8, Z+47	; 0x2f
    24de:	90 a8       	ldd	r9, Z+48	; 0x30
    24e0:	a1 a8       	ldd	r10, Z+49	; 0x31
    24e2:	b2 a8       	ldd	r11, Z+50	; 0x32
    24e4:	f7 01       	movw	r30, r14
    24e6:	80 82       	st	Z, r8
    24e8:	91 82       	std	Z+1, r9	; 0x01
    24ea:	a2 82       	std	Z+2, r10	; 0x02
    24ec:	b3 82       	std	Z+3, r11	; 0x03
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	fd 01       	movw	r30, r26
    24f2:	e6 0f       	add	r30, r22
    24f4:	f7 1f       	adc	r31, r23
    24f6:	83 a9       	ldd	r24, Z+51	; 0x33
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	93 ab       	std	Z+51, r25	; 0x33
    24fc:	02 30       	cpi	r16, 0x02	; 2
    24fe:	01 f1       	breq	.+64     	; 0x2540 <xTaskGenericNotify+0x94>
    2500:	18 f4       	brcc	.+6      	; 0x2508 <xTaskGenericNotify+0x5c>
    2502:	01 30       	cpi	r16, 0x01	; 1
    2504:	31 f0       	breq	.+12     	; 0x2512 <xTaskGenericNotify+0x66>
    2506:	4d c0       	rjmp	.+154    	; 0x25a2 <xTaskGenericNotify+0xf6>
    2508:	03 30       	cpi	r16, 0x03	; 3
    250a:	79 f1       	breq	.+94     	; 0x256a <xTaskGenericNotify+0xbe>
    250c:	04 30       	cpi	r16, 0x04	; 4
    250e:	d1 f1       	breq	.+116    	; 0x2584 <xTaskGenericNotify+0xd8>
    2510:	48 c0       	rjmp	.+144    	; 0x25a2 <xTaskGenericNotify+0xf6>
    2512:	66 0f       	add	r22, r22
    2514:	77 1f       	adc	r23, r23
    2516:	66 0f       	add	r22, r22
    2518:	77 1f       	adc	r23, r23
    251a:	fd 01       	movw	r30, r26
    251c:	e6 0f       	add	r30, r22
    251e:	f7 1f       	adc	r31, r23
    2520:	87 a4       	ldd	r8, Z+47	; 0x2f
    2522:	90 a8       	ldd	r9, Z+48	; 0x30
    2524:	a1 a8       	ldd	r10, Z+49	; 0x31
    2526:	b2 a8       	ldd	r11, Z+50	; 0x32
    2528:	ba 01       	movw	r22, r20
    252a:	a9 01       	movw	r20, r18
    252c:	48 29       	or	r20, r8
    252e:	59 29       	or	r21, r9
    2530:	6a 29       	or	r22, r10
    2532:	7b 29       	or	r23, r11
    2534:	47 a7       	std	Z+47, r20	; 0x2f
    2536:	50 ab       	std	Z+48, r21	; 0x30
    2538:	61 ab       	std	Z+49, r22	; 0x31
    253a:	72 ab       	std	Z+50, r23	; 0x32
    253c:	01 e0       	ldi	r16, 0x01	; 1
    253e:	34 c0       	rjmp	.+104    	; 0x25a8 <xTaskGenericNotify+0xfc>
    2540:	66 0f       	add	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	66 0f       	add	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	fd 01       	movw	r30, r26
    254a:	e6 0f       	add	r30, r22
    254c:	f7 1f       	adc	r31, r23
    254e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2550:	50 a9       	ldd	r21, Z+48	; 0x30
    2552:	61 a9       	ldd	r22, Z+49	; 0x31
    2554:	72 a9       	ldd	r23, Z+50	; 0x32
    2556:	4f 5f       	subi	r20, 0xFF	; 255
    2558:	5f 4f       	sbci	r21, 0xFF	; 255
    255a:	6f 4f       	sbci	r22, 0xFF	; 255
    255c:	7f 4f       	sbci	r23, 0xFF	; 255
    255e:	47 a7       	std	Z+47, r20	; 0x2f
    2560:	50 ab       	std	Z+48, r21	; 0x30
    2562:	61 ab       	std	Z+49, r22	; 0x31
    2564:	72 ab       	std	Z+50, r23	; 0x32
    2566:	01 e0       	ldi	r16, 0x01	; 1
    2568:	1f c0       	rjmp	.+62     	; 0x25a8 <xTaskGenericNotify+0xfc>
    256a:	66 0f       	add	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	66 0f       	add	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	fd 01       	movw	r30, r26
    2574:	e6 0f       	add	r30, r22
    2576:	f7 1f       	adc	r31, r23
    2578:	27 a7       	std	Z+47, r18	; 0x2f
    257a:	30 ab       	std	Z+48, r19	; 0x30
    257c:	41 ab       	std	Z+49, r20	; 0x31
    257e:	52 ab       	std	Z+50, r21	; 0x32
    2580:	01 e0       	ldi	r16, 0x01	; 1
    2582:	12 c0       	rjmp	.+36     	; 0x25a8 <xTaskGenericNotify+0xfc>
    2584:	82 30       	cpi	r24, 0x02	; 2
    2586:	79 f0       	breq	.+30     	; 0x25a6 <xTaskGenericNotify+0xfa>
    2588:	66 0f       	add	r22, r22
    258a:	77 1f       	adc	r23, r23
    258c:	66 0f       	add	r22, r22
    258e:	77 1f       	adc	r23, r23
    2590:	fd 01       	movw	r30, r26
    2592:	e6 0f       	add	r30, r22
    2594:	f7 1f       	adc	r31, r23
    2596:	27 a7       	std	Z+47, r18	; 0x2f
    2598:	30 ab       	std	Z+48, r19	; 0x30
    259a:	41 ab       	std	Z+49, r20	; 0x31
    259c:	52 ab       	std	Z+50, r21	; 0x32
    259e:	01 e0       	ldi	r16, 0x01	; 1
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <xTaskGenericNotify+0xfc>
    25a2:	01 e0       	ldi	r16, 0x01	; 1
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <xTaskGenericNotify+0xfc>
    25a6:	00 e0       	ldi	r16, 0x00	; 0
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	09 f0       	breq	.+2      	; 0x25ae <xTaskGenericNotify+0x102>
    25ac:	69 c0       	rjmp	.+210    	; 0x2680 <xTaskGenericNotify+0x1d4>
    25ae:	1c 96       	adiw	r26, 0x0c	; 12
    25b0:	ed 91       	ld	r30, X+
    25b2:	fc 91       	ld	r31, X
    25b4:	1d 97       	sbiw	r26, 0x0d	; 13
    25b6:	16 96       	adiw	r26, 0x06	; 6
    25b8:	cd 91       	ld	r28, X+
    25ba:	dc 91       	ld	r29, X
    25bc:	17 97       	sbiw	r26, 0x07	; 7
    25be:	18 96       	adiw	r26, 0x08	; 8
    25c0:	8d 91       	ld	r24, X+
    25c2:	9c 91       	ld	r25, X
    25c4:	19 97       	sbiw	r26, 0x09	; 9
    25c6:	9f 83       	std	Y+7, r25	; 0x07
    25c8:	8e 83       	std	Y+6, r24	; 0x06
    25ca:	18 96       	adiw	r26, 0x08	; 8
    25cc:	cd 91       	ld	r28, X+
    25ce:	dc 91       	ld	r29, X
    25d0:	19 97       	sbiw	r26, 0x09	; 9
    25d2:	16 96       	adiw	r26, 0x06	; 6
    25d4:	8d 91       	ld	r24, X+
    25d6:	9c 91       	ld	r25, X
    25d8:	17 97       	sbiw	r26, 0x07	; 7
    25da:	9d 83       	std	Y+5, r25	; 0x05
    25dc:	8c 83       	std	Y+4, r24	; 0x04
    25de:	81 81       	ldd	r24, Z+1	; 0x01
    25e0:	92 81       	ldd	r25, Z+2	; 0x02
    25e2:	9d 01       	movw	r18, r26
    25e4:	2e 5f       	subi	r18, 0xFE	; 254
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	82 17       	cp	r24, r18
    25ea:	93 07       	cpc	r25, r19
    25ec:	31 f4       	brne	.+12     	; 0x25fa <xTaskGenericNotify+0x14e>
    25ee:	18 96       	adiw	r26, 0x08	; 8
    25f0:	8d 91       	ld	r24, X+
    25f2:	9c 91       	ld	r25, X
    25f4:	19 97       	sbiw	r26, 0x09	; 9
    25f6:	92 83       	std	Z+2, r25	; 0x02
    25f8:	81 83       	std	Z+1, r24	; 0x01
    25fa:	1d 96       	adiw	r26, 0x0d	; 13
    25fc:	1c 92       	st	X, r1
    25fe:	1e 92       	st	-X, r1
    2600:	1c 97       	sbiw	r26, 0x0c	; 12
    2602:	80 81       	ld	r24, Z
    2604:	81 50       	subi	r24, 0x01	; 1
    2606:	80 83       	st	Z, r24
    2608:	5a 96       	adiw	r26, 0x1a	; 26
    260a:	ec 91       	ld	r30, X
    260c:	5a 97       	sbiw	r26, 0x1a	; 26
    260e:	80 91 99 14 	lds	r24, 0x1499	; 0x801499 <uxTopReadyPriority>
    2612:	8e 17       	cp	r24, r30
    2614:	10 f4       	brcc	.+4      	; 0x261a <xTaskGenericNotify+0x16e>
    2616:	e0 93 99 14 	sts	0x1499, r30	; 0x801499 <uxTopReadyPriority>
    261a:	8b e0       	ldi	r24, 0x0B	; 11
    261c:	8e 9f       	mul	r24, r30
    261e:	f0 01       	movw	r30, r0
    2620:	11 24       	eor	r1, r1
    2622:	e5 52       	subi	r30, 0x25	; 37
    2624:	fb 4e       	sbci	r31, 0xEB	; 235
    2626:	01 80       	ldd	r0, Z+1	; 0x01
    2628:	f2 81       	ldd	r31, Z+2	; 0x02
    262a:	e0 2d       	mov	r30, r0
    262c:	17 96       	adiw	r26, 0x07	; 7
    262e:	fc 93       	st	X, r31
    2630:	ee 93       	st	-X, r30
    2632:	16 97       	sbiw	r26, 0x06	; 6
    2634:	46 81       	ldd	r20, Z+6	; 0x06
    2636:	57 81       	ldd	r21, Z+7	; 0x07
    2638:	19 96       	adiw	r26, 0x09	; 9
    263a:	5c 93       	st	X, r21
    263c:	4e 93       	st	-X, r20
    263e:	18 97       	sbiw	r26, 0x08	; 8
    2640:	c6 81       	ldd	r28, Z+6	; 0x06
    2642:	d7 81       	ldd	r29, Z+7	; 0x07
    2644:	3d 83       	std	Y+5, r19	; 0x05
    2646:	2c 83       	std	Y+4, r18	; 0x04
    2648:	37 83       	std	Z+7, r19	; 0x07
    264a:	26 83       	std	Z+6, r18	; 0x06
    264c:	5a 96       	adiw	r26, 0x1a	; 26
    264e:	ec 91       	ld	r30, X
    2650:	5a 97       	sbiw	r26, 0x1a	; 26
    2652:	8e 9f       	mul	r24, r30
    2654:	f0 01       	movw	r30, r0
    2656:	11 24       	eor	r1, r1
    2658:	e5 52       	subi	r30, 0x25	; 37
    265a:	fb 4e       	sbci	r31, 0xEB	; 235
    265c:	1d 96       	adiw	r26, 0x0d	; 13
    265e:	fc 93       	st	X, r31
    2660:	ee 93       	st	-X, r30
    2662:	1c 97       	sbiw	r26, 0x0c	; 12
    2664:	80 81       	ld	r24, Z
    2666:	8f 5f       	subi	r24, 0xFF	; 255
    2668:	80 83       	st	Z, r24
    266a:	5a 96       	adiw	r26, 0x1a	; 26
    266c:	9c 91       	ld	r25, X
    266e:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    2672:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    2676:	82 8d       	ldd	r24, Z+26	; 0x1a
    2678:	89 17       	cp	r24, r25
    267a:	10 f4       	brcc	.+4      	; 0x2680 <xTaskGenericNotify+0x1d4>
    267c:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    2680:	0f 90       	pop	r0
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	80 2f       	mov	r24, r16
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	0f 91       	pop	r16
    268c:	ff 90       	pop	r15
    268e:	ef 90       	pop	r14
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	9f 90       	pop	r9
    2696:	8f 90       	pop	r8
    2698:	08 95       	ret

0000269a <xTaskGenericNotifyFromISR>:
    269a:	8f 92       	push	r8
    269c:	9f 92       	push	r9
    269e:	af 92       	push	r10
    26a0:	bf 92       	push	r11
    26a2:	cf 92       	push	r12
    26a4:	df 92       	push	r13
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	dc 01       	movw	r26, r24
    26b2:	e1 14       	cp	r14, r1
    26b4:	f1 04       	cpc	r15, r1
    26b6:	89 f0       	breq	.+34     	; 0x26da <xTaskGenericNotifyFromISR+0x40>
    26b8:	e6 2f       	mov	r30, r22
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	e8 0f       	add	r30, r24
    26c6:	f9 1f       	adc	r31, r25
    26c8:	87 a4       	ldd	r8, Z+47	; 0x2f
    26ca:	90 a8       	ldd	r9, Z+48	; 0x30
    26cc:	a1 a8       	ldd	r10, Z+49	; 0x31
    26ce:	b2 a8       	ldd	r11, Z+50	; 0x32
    26d0:	f7 01       	movw	r30, r14
    26d2:	80 82       	st	Z, r8
    26d4:	91 82       	std	Z+1, r9	; 0x01
    26d6:	a2 82       	std	Z+2, r10	; 0x02
    26d8:	b3 82       	std	Z+3, r11	; 0x03
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	fd 01       	movw	r30, r26
    26de:	e6 0f       	add	r30, r22
    26e0:	f7 1f       	adc	r31, r23
    26e2:	93 a9       	ldd	r25, Z+51	; 0x33
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	83 ab       	std	Z+51, r24	; 0x33
    26e8:	02 30       	cpi	r16, 0x02	; 2
    26ea:	01 f1       	breq	.+64     	; 0x272c <xTaskGenericNotifyFromISR+0x92>
    26ec:	18 f4       	brcc	.+6      	; 0x26f4 <xTaskGenericNotifyFromISR+0x5a>
    26ee:	01 30       	cpi	r16, 0x01	; 1
    26f0:	31 f0       	breq	.+12     	; 0x26fe <xTaskGenericNotifyFromISR+0x64>
    26f2:	4d c0       	rjmp	.+154    	; 0x278e <xTaskGenericNotifyFromISR+0xf4>
    26f4:	03 30       	cpi	r16, 0x03	; 3
    26f6:	79 f1       	breq	.+94     	; 0x2756 <xTaskGenericNotifyFromISR+0xbc>
    26f8:	04 30       	cpi	r16, 0x04	; 4
    26fa:	d1 f1       	breq	.+116    	; 0x2770 <xTaskGenericNotifyFromISR+0xd6>
    26fc:	48 c0       	rjmp	.+144    	; 0x278e <xTaskGenericNotifyFromISR+0xf4>
    26fe:	66 0f       	add	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	66 0f       	add	r22, r22
    2704:	77 1f       	adc	r23, r23
    2706:	fd 01       	movw	r30, r26
    2708:	e6 0f       	add	r30, r22
    270a:	f7 1f       	adc	r31, r23
    270c:	87 a4       	ldd	r8, Z+47	; 0x2f
    270e:	90 a8       	ldd	r9, Z+48	; 0x30
    2710:	a1 a8       	ldd	r10, Z+49	; 0x31
    2712:	b2 a8       	ldd	r11, Z+50	; 0x32
    2714:	ba 01       	movw	r22, r20
    2716:	a9 01       	movw	r20, r18
    2718:	48 29       	or	r20, r8
    271a:	59 29       	or	r21, r9
    271c:	6a 29       	or	r22, r10
    271e:	7b 29       	or	r23, r11
    2720:	47 a7       	std	Z+47, r20	; 0x2f
    2722:	50 ab       	std	Z+48, r21	; 0x30
    2724:	61 ab       	std	Z+49, r22	; 0x31
    2726:	72 ab       	std	Z+50, r23	; 0x32
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	34 c0       	rjmp	.+104    	; 0x2794 <xTaskGenericNotifyFromISR+0xfa>
    272c:	66 0f       	add	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	66 0f       	add	r22, r22
    2732:	77 1f       	adc	r23, r23
    2734:	fd 01       	movw	r30, r26
    2736:	e6 0f       	add	r30, r22
    2738:	f7 1f       	adc	r31, r23
    273a:	47 a5       	ldd	r20, Z+47	; 0x2f
    273c:	50 a9       	ldd	r21, Z+48	; 0x30
    273e:	61 a9       	ldd	r22, Z+49	; 0x31
    2740:	72 a9       	ldd	r23, Z+50	; 0x32
    2742:	4f 5f       	subi	r20, 0xFF	; 255
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	6f 4f       	sbci	r22, 0xFF	; 255
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	47 a7       	std	Z+47, r20	; 0x2f
    274c:	50 ab       	std	Z+48, r21	; 0x30
    274e:	61 ab       	std	Z+49, r22	; 0x31
    2750:	72 ab       	std	Z+50, r23	; 0x32
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	1f c0       	rjmp	.+62     	; 0x2794 <xTaskGenericNotifyFromISR+0xfa>
    2756:	66 0f       	add	r22, r22
    2758:	77 1f       	adc	r23, r23
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	fd 01       	movw	r30, r26
    2760:	e6 0f       	add	r30, r22
    2762:	f7 1f       	adc	r31, r23
    2764:	27 a7       	std	Z+47, r18	; 0x2f
    2766:	30 ab       	std	Z+48, r19	; 0x30
    2768:	41 ab       	std	Z+49, r20	; 0x31
    276a:	52 ab       	std	Z+50, r21	; 0x32
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	12 c0       	rjmp	.+36     	; 0x2794 <xTaskGenericNotifyFromISR+0xfa>
    2770:	92 30       	cpi	r25, 0x02	; 2
    2772:	79 f0       	breq	.+30     	; 0x2792 <xTaskGenericNotifyFromISR+0xf8>
    2774:	66 0f       	add	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	66 0f       	add	r22, r22
    277a:	77 1f       	adc	r23, r23
    277c:	fd 01       	movw	r30, r26
    277e:	e6 0f       	add	r30, r22
    2780:	f7 1f       	adc	r31, r23
    2782:	27 a7       	std	Z+47, r18	; 0x2f
    2784:	30 ab       	std	Z+48, r19	; 0x30
    2786:	41 ab       	std	Z+49, r20	; 0x31
    2788:	52 ab       	std	Z+50, r21	; 0x32
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <xTaskGenericNotifyFromISR+0xfa>
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <xTaskGenericNotifyFromISR+0xfa>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	91 30       	cpi	r25, 0x01	; 1
    2796:	09 f0       	breq	.+2      	; 0x279a <xTaskGenericNotifyFromISR+0x100>
    2798:	96 c0       	rjmp	.+300    	; 0x28c6 <xTaskGenericNotifyFromISR+0x22c>
    279a:	90 91 8a 14 	lds	r25, 0x148A	; 0x80148a <uxSchedulerSuspended>
    279e:	91 11       	cpse	r25, r1
    27a0:	5f c0       	rjmp	.+190    	; 0x2860 <xTaskGenericNotifyFromISR+0x1c6>
    27a2:	1c 96       	adiw	r26, 0x0c	; 12
    27a4:	ed 91       	ld	r30, X+
    27a6:	fc 91       	ld	r31, X
    27a8:	1d 97       	sbiw	r26, 0x0d	; 13
    27aa:	16 96       	adiw	r26, 0x06	; 6
    27ac:	cd 91       	ld	r28, X+
    27ae:	dc 91       	ld	r29, X
    27b0:	17 97       	sbiw	r26, 0x07	; 7
    27b2:	18 96       	adiw	r26, 0x08	; 8
    27b4:	2d 91       	ld	r18, X+
    27b6:	3c 91       	ld	r19, X
    27b8:	19 97       	sbiw	r26, 0x09	; 9
    27ba:	3f 83       	std	Y+7, r19	; 0x07
    27bc:	2e 83       	std	Y+6, r18	; 0x06
    27be:	18 96       	adiw	r26, 0x08	; 8
    27c0:	cd 91       	ld	r28, X+
    27c2:	dc 91       	ld	r29, X
    27c4:	19 97       	sbiw	r26, 0x09	; 9
    27c6:	16 96       	adiw	r26, 0x06	; 6
    27c8:	2d 91       	ld	r18, X+
    27ca:	3c 91       	ld	r19, X
    27cc:	17 97       	sbiw	r26, 0x07	; 7
    27ce:	3d 83       	std	Y+5, r19	; 0x05
    27d0:	2c 83       	std	Y+4, r18	; 0x04
    27d2:	41 81       	ldd	r20, Z+1	; 0x01
    27d4:	52 81       	ldd	r21, Z+2	; 0x02
    27d6:	9d 01       	movw	r18, r26
    27d8:	2e 5f       	subi	r18, 0xFE	; 254
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	42 17       	cp	r20, r18
    27de:	53 07       	cpc	r21, r19
    27e0:	31 f4       	brne	.+12     	; 0x27ee <xTaskGenericNotifyFromISR+0x154>
    27e2:	18 96       	adiw	r26, 0x08	; 8
    27e4:	4d 91       	ld	r20, X+
    27e6:	5c 91       	ld	r21, X
    27e8:	19 97       	sbiw	r26, 0x09	; 9
    27ea:	52 83       	std	Z+2, r21	; 0x02
    27ec:	41 83       	std	Z+1, r20	; 0x01
    27ee:	1d 96       	adiw	r26, 0x0d	; 13
    27f0:	1c 92       	st	X, r1
    27f2:	1e 92       	st	-X, r1
    27f4:	1c 97       	sbiw	r26, 0x0c	; 12
    27f6:	90 81       	ld	r25, Z
    27f8:	91 50       	subi	r25, 0x01	; 1
    27fa:	90 83       	st	Z, r25
    27fc:	5a 96       	adiw	r26, 0x1a	; 26
    27fe:	ec 91       	ld	r30, X
    2800:	5a 97       	sbiw	r26, 0x1a	; 26
    2802:	90 91 99 14 	lds	r25, 0x1499	; 0x801499 <uxTopReadyPriority>
    2806:	9e 17       	cp	r25, r30
    2808:	10 f4       	brcc	.+4      	; 0x280e <xTaskGenericNotifyFromISR+0x174>
    280a:	e0 93 99 14 	sts	0x1499, r30	; 0x801499 <uxTopReadyPriority>
    280e:	9b e0       	ldi	r25, 0x0B	; 11
    2810:	9e 9f       	mul	r25, r30
    2812:	f0 01       	movw	r30, r0
    2814:	11 24       	eor	r1, r1
    2816:	e5 52       	subi	r30, 0x25	; 37
    2818:	fb 4e       	sbci	r31, 0xEB	; 235
    281a:	01 80       	ldd	r0, Z+1	; 0x01
    281c:	f2 81       	ldd	r31, Z+2	; 0x02
    281e:	e0 2d       	mov	r30, r0
    2820:	17 96       	adiw	r26, 0x07	; 7
    2822:	fc 93       	st	X, r31
    2824:	ee 93       	st	-X, r30
    2826:	16 97       	sbiw	r26, 0x06	; 6
    2828:	46 81       	ldd	r20, Z+6	; 0x06
    282a:	57 81       	ldd	r21, Z+7	; 0x07
    282c:	19 96       	adiw	r26, 0x09	; 9
    282e:	5c 93       	st	X, r21
    2830:	4e 93       	st	-X, r20
    2832:	18 97       	sbiw	r26, 0x08	; 8
    2834:	c6 81       	ldd	r28, Z+6	; 0x06
    2836:	d7 81       	ldd	r29, Z+7	; 0x07
    2838:	3d 83       	std	Y+5, r19	; 0x05
    283a:	2c 83       	std	Y+4, r18	; 0x04
    283c:	37 83       	std	Z+7, r19	; 0x07
    283e:	26 83       	std	Z+6, r18	; 0x06
    2840:	5a 96       	adiw	r26, 0x1a	; 26
    2842:	ec 91       	ld	r30, X
    2844:	5a 97       	sbiw	r26, 0x1a	; 26
    2846:	9e 9f       	mul	r25, r30
    2848:	f0 01       	movw	r30, r0
    284a:	11 24       	eor	r1, r1
    284c:	e5 52       	subi	r30, 0x25	; 37
    284e:	fb 4e       	sbci	r31, 0xEB	; 235
    2850:	1d 96       	adiw	r26, 0x0d	; 13
    2852:	fc 93       	st	X, r31
    2854:	ee 93       	st	-X, r30
    2856:	1c 97       	sbiw	r26, 0x0c	; 12
    2858:	90 81       	ld	r25, Z
    285a:	9f 5f       	subi	r25, 0xFF	; 255
    285c:	90 83       	st	Z, r25
    285e:	21 c0       	rjmp	.+66     	; 0x28a2 <xTaskGenericNotifyFromISR+0x208>
    2860:	66 eb       	ldi	r22, 0xB6	; 182
    2862:	74 e1       	ldi	r23, 0x14	; 20
    2864:	fb 01       	movw	r30, r22
    2866:	c1 81       	ldd	r28, Z+1	; 0x01
    2868:	d2 81       	ldd	r29, Z+2	; 0x02
    286a:	53 96       	adiw	r26, 0x13	; 19
    286c:	dc 93       	st	X, r29
    286e:	ce 93       	st	-X, r28
    2870:	52 97       	sbiw	r26, 0x12	; 18
    2872:	2e 81       	ldd	r18, Y+6	; 0x06
    2874:	3f 81       	ldd	r19, Y+7	; 0x07
    2876:	55 96       	adiw	r26, 0x15	; 21
    2878:	3c 93       	st	X, r19
    287a:	2e 93       	st	-X, r18
    287c:	54 97       	sbiw	r26, 0x14	; 20
    287e:	4e 81       	ldd	r20, Y+6	; 0x06
    2880:	5f 81       	ldd	r21, Y+7	; 0x07
    2882:	9d 01       	movw	r18, r26
    2884:	22 5f       	subi	r18, 0xF2	; 242
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	fa 01       	movw	r30, r20
    288a:	35 83       	std	Z+5, r19	; 0x05
    288c:	24 83       	std	Z+4, r18	; 0x04
    288e:	3f 83       	std	Y+7, r19	; 0x07
    2890:	2e 83       	std	Y+6, r18	; 0x06
    2892:	59 96       	adiw	r26, 0x19	; 25
    2894:	7c 93       	st	X, r23
    2896:	6e 93       	st	-X, r22
    2898:	58 97       	sbiw	r26, 0x18	; 24
    289a:	fb 01       	movw	r30, r22
    289c:	90 81       	ld	r25, Z
    289e:	9f 5f       	subi	r25, 0xFF	; 255
    28a0:	90 83       	st	Z, r25
    28a2:	5a 96       	adiw	r26, 0x1a	; 26
    28a4:	2c 91       	ld	r18, X
    28a6:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <pxCurrentTCB>
    28aa:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <pxCurrentTCB+0x1>
    28ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    28b0:	92 17       	cp	r25, r18
    28b2:	48 f4       	brcc	.+18     	; 0x28c6 <xTaskGenericNotifyFromISR+0x22c>
    28b4:	c1 14       	cp	r12, r1
    28b6:	d1 04       	cpc	r13, r1
    28b8:	19 f0       	breq	.+6      	; 0x28c0 <xTaskGenericNotifyFromISR+0x226>
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	f6 01       	movw	r30, r12
    28be:	90 83       	st	Z, r25
    28c0:	91 e0       	ldi	r25, 0x01	; 1
    28c2:	90 93 93 14 	sts	0x1493, r25	; 0x801493 <xYieldPending>
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	0f 91       	pop	r16
    28cc:	ff 90       	pop	r15
    28ce:	ef 90       	pop	r14
    28d0:	df 90       	pop	r13
    28d2:	cf 90       	pop	r12
    28d4:	bf 90       	pop	r11
    28d6:	af 90       	pop	r10
    28d8:	9f 90       	pop	r9
    28da:	8f 90       	pop	r8
    28dc:	08 95       	ret

000028de <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	21 f4       	brne	.+8      	; 0x28ea <xTaskGenericNotifyStateClear+0xc>
    28e2:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <pxCurrentTCB>
    28e6:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	fc 01       	movw	r30, r24
    28f4:	e6 0f       	add	r30, r22
    28f6:	f7 1f       	adc	r31, r23
    28f8:	23 a9       	ldd	r18, Z+51	; 0x33
    28fa:	22 30       	cpi	r18, 0x02	; 2
    28fc:	31 f4       	brne	.+12     	; 0x290a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    28fe:	fc 01       	movw	r30, r24
    2900:	e6 0f       	add	r30, r22
    2902:	f7 1f       	adc	r31, r23
    2904:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	01 c0       	rjmp	.+2      	; 0x290c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    290a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2910:	08 95       	ret

00002912 <prvGetNextExpireTime>:
    2912:	dc 01       	movw	r26, r24
    2914:	e0 91 55 15 	lds	r30, 0x1555	; 0x801555 <pxCurrentTimerList>
    2918:	f0 91 56 15 	lds	r31, 0x1556	; 0x801556 <pxCurrentTimerList+0x1>
    291c:	80 81       	ld	r24, Z
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	81 11       	cpse	r24, r1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 93       	st	X, r25
    2926:	91 11       	cpse	r25, r1
    2928:	08 c0       	rjmp	.+16     	; 0x293a <prvGetNextExpireTime+0x28>
    292a:	07 80       	ldd	r0, Z+7	; 0x07
    292c:	f0 85       	ldd	r31, Z+8	; 0x08
    292e:	e0 2d       	mov	r30, r0
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	08 95       	ret
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	cb 01       	movw	r24, r22
    2940:	08 95       	ret

00002942 <prvInsertTimerInActiveList>:
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	fc 01       	movw	r30, r24
    2950:	42 83       	std	Z+2, r20	; 0x02
    2952:	53 83       	std	Z+3, r21	; 0x03
    2954:	64 83       	std	Z+4, r22	; 0x04
    2956:	75 83       	std	Z+5, r23	; 0x05
    2958:	93 87       	std	Z+11, r25	; 0x0b
    295a:	82 87       	std	Z+10, r24	; 0x0a
    295c:	04 17       	cp	r16, r20
    295e:	15 07       	cpc	r17, r21
    2960:	26 07       	cpc	r18, r22
    2962:	37 07       	cpc	r19, r23
    2964:	c0 f0       	brcs	.+48     	; 0x2996 <prvInsertTimerInActiveList+0x54>
    2966:	0c 19       	sub	r16, r12
    2968:	1d 09       	sbc	r17, r13
    296a:	2e 09       	sbc	r18, r14
    296c:	3f 09       	sbc	r19, r15
    296e:	86 85       	ldd	r24, Z+14	; 0x0e
    2970:	97 85       	ldd	r25, Z+15	; 0x0f
    2972:	a0 89       	ldd	r26, Z+16	; 0x10
    2974:	b1 89       	ldd	r27, Z+17	; 0x11
    2976:	08 17       	cp	r16, r24
    2978:	19 07       	cpc	r17, r25
    297a:	2a 07       	cpc	r18, r26
    297c:	3b 07       	cpc	r19, r27
    297e:	00 f5       	brcc	.+64     	; 0x29c0 <prvInsertTimerInActiveList+0x7e>
    2980:	bf 01       	movw	r22, r30
    2982:	6e 5f       	subi	r22, 0xFE	; 254
    2984:	7f 4f       	sbci	r23, 0xFF	; 255
    2986:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <pxOverflowTimerList>
    298a:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <pxOverflowTimerList+0x1>
    298e:	0e 94 89 02 	call	0x512	; 0x512 <vListInsert>
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	18 c0       	rjmp	.+48     	; 0x29c6 <prvInsertTimerInActiveList+0x84>
    2996:	0c 15       	cp	r16, r12
    2998:	1d 05       	cpc	r17, r13
    299a:	2e 05       	cpc	r18, r14
    299c:	3f 05       	cpc	r19, r15
    299e:	28 f4       	brcc	.+10     	; 0x29aa <prvInsertTimerInActiveList+0x68>
    29a0:	4c 15       	cp	r20, r12
    29a2:	5d 05       	cpc	r21, r13
    29a4:	6e 05       	cpc	r22, r14
    29a6:	7f 05       	cpc	r23, r15
    29a8:	68 f4       	brcc	.+26     	; 0x29c4 <prvInsertTimerInActiveList+0x82>
    29aa:	bf 01       	movw	r22, r30
    29ac:	6e 5f       	subi	r22, 0xFE	; 254
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <pxCurrentTimerList>
    29b4:	90 91 56 15 	lds	r25, 0x1556	; 0x801556 <pxCurrentTimerList+0x1>
    29b8:	0e 94 89 02 	call	0x512	; 0x512 <vListInsert>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	03 c0       	rjmp	.+6      	; 0x29c6 <prvInsertTimerInActiveList+0x84>
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	01 c0       	rjmp	.+2      	; 0x29c6 <prvInsertTimerInActiveList+0x84>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	ff 90       	pop	r15
    29cc:	ef 90       	pop	r14
    29ce:	df 90       	pop	r13
    29d0:	cf 90       	pop	r12
    29d2:	08 95       	ret

000029d4 <prvCheckForValidListAndQueue>:
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	0f 92       	push	r0
    29da:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <xTimerQueue>
    29de:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <xTimerQueue+0x1>
    29e2:	89 2b       	or	r24, r25
    29e4:	e9 f4       	brne	.+58     	; 0x2a20 <prvCheckForValidListAndQueue+0x4c>
    29e6:	82 e6       	ldi	r24, 0x62	; 98
    29e8:	95 e1       	ldi	r25, 0x15	; 21
    29ea:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    29ee:	87 e5       	ldi	r24, 0x57	; 87
    29f0:	95 e1       	ldi	r25, 0x15	; 21
    29f2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vListInitialise>
    29f6:	82 e6       	ldi	r24, 0x62	; 98
    29f8:	95 e1       	ldi	r25, 0x15	; 21
    29fa:	90 93 56 15 	sts	0x1556, r25	; 0x801556 <pxCurrentTimerList+0x1>
    29fe:	80 93 55 15 	sts	0x1555, r24	; 0x801555 <pxCurrentTimerList>
    2a02:	87 e5       	ldi	r24, 0x57	; 87
    2a04:	95 e1       	ldi	r25, 0x15	; 21
    2a06:	90 93 54 15 	sts	0x1554, r25	; 0x801554 <pxOverflowTimerList+0x1>
    2a0a:	80 93 53 15 	sts	0x1553, r24	; 0x801553 <pxOverflowTimerList>
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	67 e0       	ldi	r22, 0x07	; 7
    2a12:	8a e0       	ldi	r24, 0x0A	; 10
    2a14:	0e 94 27 05 	call	0xa4e	; 0xa4e <xQueueGenericCreate>
    2a18:	90 93 52 15 	sts	0x1552, r25	; 0x801552 <xTimerQueue+0x1>
    2a1c:	80 93 51 15 	sts	0x1551, r24	; 0x801551 <xTimerQueue>
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	08 95       	ret

00002a26 <xTimerCreateTimerTask>:
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	d3 df       	rcall	.-90     	; 0x29d4 <prvCheckForValidListAndQueue>
    2a2e:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <xTimerQueue>
    2a32:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <xTimerQueue+0x1>
    2a36:	89 2b       	or	r24, r25
    2a38:	91 f0       	breq	.+36     	; 0x2a5e <xTimerCreateTimerTask+0x38>
    2a3a:	0f 2e       	mov	r0, r31
    2a3c:	ff e4       	ldi	r31, 0x4F	; 79
    2a3e:	ef 2e       	mov	r14, r31
    2a40:	f5 e1       	ldi	r31, 0x15	; 21
    2a42:	ff 2e       	mov	r15, r31
    2a44:	f0 2d       	mov	r31, r0
    2a46:	03 e0       	ldi	r16, 0x03	; 3
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 ec       	ldi	r20, 0xC0	; 192
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	67 e4       	ldi	r22, 0x47	; 71
    2a52:	72 e0       	ldi	r23, 0x02	; 2
    2a54:	87 ed       	ldi	r24, 0xD7	; 215
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskCreate>
    2a5c:	01 c0       	rjmp	.+2      	; 0x2a60 <xTimerCreateTimerTask+0x3a>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	08 95       	ret

00002a68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2a68:	8f 92       	push	r8
    2a6a:	9f 92       	push	r9
    2a6c:	af 92       	push	r10
    2a6e:	bf 92       	push	r11
    2a70:	cf 92       	push	r12
    2a72:	df 92       	push	r13
    2a74:	ef 92       	push	r14
    2a76:	ff 92       	push	r15
    2a78:	0f 93       	push	r16
    2a7a:	1f 93       	push	r17
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	27 97       	sbiw	r28, 0x07	; 7
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a90:	e0 91 51 15 	lds	r30, 0x1551	; 0x801551 <xTimerQueue>
    2a94:	f0 91 52 15 	lds	r31, 0x1552	; 0x801552 <xTimerQueue+0x1>
    2a98:	30 97       	sbiw	r30, 0x00	; 0
    2a9a:	81 f1       	breq	.+96     	; 0x2afc <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a9c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a9e:	2a 83       	std	Y+2, r18	; 0x02
    2aa0:	3b 83       	std	Y+3, r19	; 0x03
    2aa2:	4c 83       	std	Y+4, r20	; 0x04
    2aa4:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2aa6:	9f 83       	std	Y+7, r25	; 0x07
    2aa8:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2aaa:	66 30       	cpi	r22, 0x06	; 6
    2aac:	f4 f4       	brge	.+60     	; 0x2aea <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2aae:	ee db       	rcall	.-2084   	; 0x228c <xTaskGetSchedulerState>
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	69 f4       	brne	.+26     	; 0x2ace <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ab4:	00 e0       	ldi	r16, 0x00	; 0
    2ab6:	a7 01       	movw	r20, r14
    2ab8:	96 01       	movw	r18, r12
    2aba:	be 01       	movw	r22, r28
    2abc:	6f 5f       	subi	r22, 0xFF	; 255
    2abe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac0:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <xTimerQueue>
    2ac4:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <xTimerQueue+0x1>
    2ac8:	0e 94 4a 05 	call	0xa94	; 0xa94 <xQueueGenericSend>
    2acc:	18 c0       	rjmp	.+48     	; 0x2afe <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ace:	00 e0       	ldi	r16, 0x00	; 0
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	be 01       	movw	r22, r28
    2ad8:	6f 5f       	subi	r22, 0xFF	; 255
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <xTimerQueue>
    2ae0:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <xTimerQueue+0x1>
    2ae4:	0e 94 4a 05 	call	0xa94	; 0xa94 <xQueueGenericSend>
    2ae8:	0a c0       	rjmp	.+20     	; 0x2afe <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	a8 01       	movw	r20, r16
    2aee:	be 01       	movw	r22, r28
    2af0:	6f 5f       	subi	r22, 0xFF	; 255
    2af2:	7f 4f       	sbci	r23, 0xFF	; 255
    2af4:	cf 01       	movw	r24, r30
    2af6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <xQueueGenericSendFromISR>
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2afc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2afe:	27 96       	adiw	r28, 0x07	; 7
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	9f 90       	pop	r9
    2b20:	8f 90       	pop	r8
    2b22:	08 95       	ret

00002b24 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b24:	8f 92       	push	r8
    2b26:	9f 92       	push	r9
    2b28:	af 92       	push	r10
    2b2a:	bf 92       	push	r11
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b3c:	3b c0       	rjmp	.+118    	; 0x2bb4 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b3e:	07 80       	ldd	r0, Z+7	; 0x07
    2b40:	f0 85       	ldd	r31, Z+8	; 0x08
    2b42:	e0 2d       	mov	r30, r0
    2b44:	80 80       	ld	r8, Z
    2b46:	91 80       	ldd	r9, Z+1	; 0x01
    2b48:	a2 80       	ldd	r10, Z+2	; 0x02
    2b4a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b4c:	c0 85       	ldd	r28, Z+8	; 0x08
    2b4e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b50:	8e 01       	movw	r16, r28
    2b52:	0e 5f       	subi	r16, 0xFE	; 254
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	c8 01       	movw	r24, r16
    2b58:	0e 94 c6 02 	call	0x58c	; 0x58c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b5c:	ec 89       	ldd	r30, Y+20	; 0x14
    2b5e:	fd 89       	ldd	r31, Y+21	; 0x15
    2b60:	ce 01       	movw	r24, r28
    2b62:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b64:	8e 89       	ldd	r24, Y+22	; 0x16
    2b66:	82 ff       	sbrs	r24, 2
    2b68:	25 c0       	rjmp	.+74     	; 0x2bb4 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b6e:	a8 89       	ldd	r26, Y+16	; 0x10
    2b70:	b9 89       	ldd	r27, Y+17	; 0x11
    2b72:	88 0d       	add	r24, r8
    2b74:	99 1d       	adc	r25, r9
    2b76:	aa 1d       	adc	r26, r10
    2b78:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2b7a:	88 16       	cp	r8, r24
    2b7c:	99 06       	cpc	r9, r25
    2b7e:	aa 06       	cpc	r10, r26
    2b80:	bb 06       	cpc	r11, r27
    2b82:	70 f4       	brcc	.+28     	; 0x2ba0 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b84:	8a 83       	std	Y+2, r24	; 0x02
    2b86:	9b 83       	std	Y+3, r25	; 0x03
    2b88:	ac 83       	std	Y+4, r26	; 0x04
    2b8a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b8c:	db 87       	std	Y+11, r29	; 0x0b
    2b8e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b90:	b8 01       	movw	r22, r16
    2b92:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <pxCurrentTimerList>
    2b96:	90 91 56 15 	lds	r25, 0x1556	; 0x801556 <pxCurrentTimerList+0x1>
    2b9a:	0e 94 89 02 	call	0x512	; 0x512 <vListInsert>
    2b9e:	0a c0       	rjmp	.+20     	; 0x2bb4 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ba0:	c1 2c       	mov	r12, r1
    2ba2:	d1 2c       	mov	r13, r1
    2ba4:	76 01       	movw	r14, r12
    2ba6:	00 e0       	ldi	r16, 0x00	; 0
    2ba8:	10 e0       	ldi	r17, 0x00	; 0
    2baa:	a5 01       	movw	r20, r10
    2bac:	94 01       	movw	r18, r8
    2bae:	60 e0       	ldi	r22, 0x00	; 0
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	5a df       	rcall	.-332    	; 0x2a68 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bb4:	e0 91 55 15 	lds	r30, 0x1555	; 0x801555 <pxCurrentTimerList>
    2bb8:	f0 91 56 15 	lds	r31, 0x1556	; 0x801556 <pxCurrentTimerList+0x1>
    2bbc:	80 81       	ld	r24, Z
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	be cf       	rjmp	.-132    	; 0x2b3e <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2bc2:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <pxOverflowTimerList>
    2bc6:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <pxOverflowTimerList+0x1>
    2bca:	90 93 56 15 	sts	0x1556, r25	; 0x801556 <pxCurrentTimerList+0x1>
    2bce:	80 93 55 15 	sts	0x1555, r24	; 0x801555 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2bd2:	f0 93 54 15 	sts	0x1554, r31	; 0x801554 <pxOverflowTimerList+0x1>
    2bd6:	e0 93 53 15 	sts	0x1553, r30	; 0x801553 <pxOverflowTimerList>
    }
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	bf 90       	pop	r11
    2bec:	af 90       	pop	r10
    2bee:	9f 90       	pop	r9
    2bf0:	8f 90       	pop	r8
    2bf2:	08 95       	ret

00002bf4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c02:	0e 94 ad 0c 	call	0x195a	; 0x195a <xTaskGetTickCount>
    2c06:	6b 01       	movw	r12, r22
    2c08:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2c0a:	80 91 4b 15 	lds	r24, 0x154B	; 0x80154b <xLastTime.2436>
    2c0e:	90 91 4c 15 	lds	r25, 0x154C	; 0x80154c <xLastTime.2436+0x1>
    2c12:	a0 91 4d 15 	lds	r26, 0x154D	; 0x80154d <xLastTime.2436+0x2>
    2c16:	b0 91 4e 15 	lds	r27, 0x154E	; 0x80154e <xLastTime.2436+0x3>
    2c1a:	c8 16       	cp	r12, r24
    2c1c:	d9 06       	cpc	r13, r25
    2c1e:	ea 06       	cpc	r14, r26
    2c20:	fb 06       	cpc	r15, r27
    2c22:	20 f4       	brcc	.+8      	; 0x2c2c <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2c24:	7f df       	rcall	.-258    	; 0x2b24 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	88 83       	st	Y, r24
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2c2c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2c2e:	c0 92 4b 15 	sts	0x154B, r12	; 0x80154b <xLastTime.2436>
    2c32:	d0 92 4c 15 	sts	0x154C, r13	; 0x80154c <xLastTime.2436+0x1>
    2c36:	e0 92 4d 15 	sts	0x154D, r14	; 0x80154d <xLastTime.2436+0x2>
    2c3a:	f0 92 4e 15 	sts	0x154E, r15	; 0x80154e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2c3e:	c7 01       	movw	r24, r14
    2c40:	b6 01       	movw	r22, r12
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	ff 90       	pop	r15
    2c48:	ef 90       	pop	r14
    2c4a:	df 90       	pop	r13
    2c4c:	cf 90       	pop	r12
    2c4e:	08 95       	ret

00002c50 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2c50:	4f 92       	push	r4
    2c52:	5f 92       	push	r5
    2c54:	6f 92       	push	r6
    2c56:	7f 92       	push	r7
    2c58:	8f 92       	push	r8
    2c5a:	9f 92       	push	r9
    2c5c:	af 92       	push	r10
    2c5e:	bf 92       	push	r11
    2c60:	cf 92       	push	r12
    2c62:	df 92       	push	r13
    2c64:	ef 92       	push	r14
    2c66:	ff 92       	push	r15
    2c68:	0f 93       	push	r16
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	4b 01       	movw	r8, r22
    2c72:	5c 01       	movw	r10, r24
    2c74:	29 01       	movw	r4, r18
    2c76:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c78:	e0 91 55 15 	lds	r30, 0x1555	; 0x801555 <pxCurrentTimerList>
    2c7c:	f0 91 56 15 	lds	r31, 0x1556	; 0x801556 <pxCurrentTimerList+0x1>
    2c80:	07 80       	ldd	r0, Z+7	; 0x07
    2c82:	f0 85       	ldd	r31, Z+8	; 0x08
    2c84:	e0 2d       	mov	r30, r0
    2c86:	c0 85       	ldd	r28, Z+8	; 0x08
    2c88:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	02 96       	adiw	r24, 0x02	; 2
    2c8e:	0e 94 c6 02 	call	0x58c	; 0x58c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c92:	8e 89       	ldd	r24, Y+22	; 0x16
    2c94:	82 ff       	sbrs	r24, 2
    2c96:	1b c0       	rjmp	.+54     	; 0x2cce <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c98:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c9c:	68 89       	ldd	r22, Y+16	; 0x10
    2c9e:	79 89       	ldd	r23, Y+17	; 0x11
    2ca0:	48 0d       	add	r20, r8
    2ca2:	59 1d       	adc	r21, r9
    2ca4:	6a 1d       	adc	r22, r10
    2ca6:	7b 1d       	adc	r23, r11
    2ca8:	75 01       	movw	r14, r10
    2caa:	64 01       	movw	r12, r8
    2cac:	93 01       	movw	r18, r6
    2cae:	82 01       	movw	r16, r4
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	47 de       	rcall	.-882    	; 0x2942 <prvInsertTimerInActiveList>
    2cb4:	88 23       	and	r24, r24
    2cb6:	69 f0       	breq	.+26     	; 0x2cd2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cb8:	c1 2c       	mov	r12, r1
    2cba:	d1 2c       	mov	r13, r1
    2cbc:	76 01       	movw	r14, r12
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	10 e0       	ldi	r17, 0x00	; 0
    2cc2:	a5 01       	movw	r20, r10
    2cc4:	94 01       	movw	r18, r8
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	ce 01       	movw	r24, r28
    2cca:	ce de       	rcall	.-612    	; 0x2a68 <xTimerGenericCommand>
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2cce:	8e 7f       	andi	r24, 0xFE	; 254
    2cd0:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cd2:	ec 89       	ldd	r30, Y+20	; 0x14
    2cd4:	fd 89       	ldd	r31, Y+21	; 0x15
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	19 95       	eicall
    }
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	df 90       	pop	r13
    2ce8:	cf 90       	pop	r12
    2cea:	bf 90       	pop	r11
    2cec:	af 90       	pop	r10
    2cee:	9f 90       	pop	r9
    2cf0:	8f 90       	pop	r8
    2cf2:	7f 90       	pop	r7
    2cf4:	6f 90       	pop	r6
    2cf6:	5f 90       	pop	r5
    2cf8:	4f 90       	pop	r4
    2cfa:	08 95       	ret

00002cfc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2cfc:	8f 92       	push	r8
    2cfe:	9f 92       	push	r9
    2d00:	af 92       	push	r10
    2d02:	bf 92       	push	r11
    2d04:	cf 92       	push	r12
    2d06:	df 92       	push	r13
    2d08:	ef 92       	push	r14
    2d0a:	ff 92       	push	r15
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	1f 92       	push	r1
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	6b 01       	movw	r12, r22
    2d1a:	7c 01       	movw	r14, r24
    2d1c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2d1e:	0e 94 a7 0c 	call	0x194e	; 0x194e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d22:	ce 01       	movw	r24, r28
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	66 df       	rcall	.-308    	; 0x2bf4 <prvSampleTimeNow>
    2d28:	4b 01       	movw	r8, r22
    2d2a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	81 11       	cpse	r24, r1
    2d30:	2d c0       	rjmp	.+90     	; 0x2d8c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d32:	11 11       	cpse	r17, r1
    2d34:	0d c0       	rjmp	.+26     	; 0x2d50 <prvProcessTimerOrBlockTask+0x54>
    2d36:	8c 14       	cp	r8, r12
    2d38:	9d 04       	cpc	r9, r13
    2d3a:	ae 04       	cpc	r10, r14
    2d3c:	bf 04       	cpc	r11, r15
    2d3e:	40 f0       	brcs	.+16     	; 0x2d50 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2d40:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2d44:	a5 01       	movw	r20, r10
    2d46:	94 01       	movw	r18, r8
    2d48:	c7 01       	movw	r24, r14
    2d4a:	b6 01       	movw	r22, r12
    2d4c:	81 df       	rcall	.-254    	; 0x2c50 <prvProcessExpiredTimer>
    2d4e:	20 c0       	rjmp	.+64     	; 0x2d90 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2d50:	11 23       	and	r17, r17
    2d52:	41 f0       	breq	.+16     	; 0x2d64 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d54:	e0 91 53 15 	lds	r30, 0x1553	; 0x801553 <pxOverflowTimerList>
    2d58:	f0 91 54 15 	lds	r31, 0x1554	; 0x801554 <pxOverflowTimerList+0x1>
    2d5c:	80 81       	ld	r24, Z
    2d5e:	11 e0       	ldi	r17, 0x01	; 1
    2d60:	81 11       	cpse	r24, r1
    2d62:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2d64:	b7 01       	movw	r22, r14
    2d66:	a6 01       	movw	r20, r12
    2d68:	48 19       	sub	r20, r8
    2d6a:	59 09       	sbc	r21, r9
    2d6c:	6a 09       	sbc	r22, r10
    2d6e:	7b 09       	sbc	r23, r11
    2d70:	21 2f       	mov	r18, r17
    2d72:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <xTimerQueue>
    2d76:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <xTimerQueue+0x1>
    2d7a:	0e 94 c4 06 	call	0xd88	; 0xd88 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2d7e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
    2d82:	81 11       	cpse	r24, r1
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2d86:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2d8c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <xTaskResumeAll>
            }
        }
    }
    2d90:	0f 90       	pop	r0
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	1f 91       	pop	r17
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	df 90       	pop	r13
    2d9e:	cf 90       	pop	r12
    2da0:	bf 90       	pop	r11
    2da2:	af 90       	pop	r10
    2da4:	9f 90       	pop	r9
    2da6:	8f 90       	pop	r8
    2da8:	08 95       	ret

00002daa <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2daa:	af 92       	push	r10
    2dac:	bf 92       	push	r11
    2dae:	cf 92       	push	r12
    2db0:	df 92       	push	r13
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	28 97       	sbiw	r28, 0x08	; 8
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2dce:	82 c0       	rjmp	.+260    	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	88 23       	and	r24, r24
    2dd4:	0c f4       	brge	.+2      	; 0x2dd8 <prvProcessReceivedCommands+0x2e>
    2dd6:	7e c0       	rjmp	.+252    	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2dd8:	ae 80       	ldd	r10, Y+6	; 0x06
    2dda:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2ddc:	d5 01       	movw	r26, r10
    2dde:	1c 96       	adiw	r26, 0x0c	; 12
    2de0:	8d 91       	ld	r24, X+
    2de2:	9c 91       	ld	r25, X
    2de4:	1d 97       	sbiw	r26, 0x0d	; 13
    2de6:	89 2b       	or	r24, r25
    2de8:	21 f0       	breq	.+8      	; 0x2df2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2dea:	c5 01       	movw	r24, r10
    2dec:	02 96       	adiw	r24, 0x02	; 2
    2dee:	0e 94 c6 02 	call	0x58c	; 0x58c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2df2:	ce 01       	movw	r24, r28
    2df4:	08 96       	adiw	r24, 0x08	; 8
    2df6:	fe de       	rcall	.-516    	; 0x2bf4 <prvSampleTimeNow>
    2df8:	8b 01       	movw	r16, r22
    2dfa:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfe:	0e 2e       	mov	r0, r30
    2e00:	00 0c       	add	r0, r0
    2e02:	ff 0b       	sbc	r31, r31
    2e04:	ea 30       	cpi	r30, 0x0A	; 10
    2e06:	f1 05       	cpc	r31, r1
    2e08:	08 f0       	brcs	.+2      	; 0x2e0c <prvProcessReceivedCommands+0x62>
    2e0a:	64 c0       	rjmp	.+200    	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
    2e0c:	88 27       	eor	r24, r24
    2e0e:	ee 58       	subi	r30, 0x8E	; 142
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	8f 4f       	sbci	r24, 0xFF	; 255
    2e14:	0c 94 00 28 	jmp	0x5000	; 0x5000 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e18:	f5 01       	movw	r30, r10
    2e1a:	86 89       	ldd	r24, Z+22	; 0x16
    2e1c:	81 60       	ori	r24, 0x01	; 1
    2e1e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e20:	ca 80       	ldd	r12, Y+2	; 0x02
    2e22:	db 80       	ldd	r13, Y+3	; 0x03
    2e24:	ec 80       	ldd	r14, Y+4	; 0x04
    2e26:	fd 80       	ldd	r15, Y+5	; 0x05
    2e28:	46 85       	ldd	r20, Z+14	; 0x0e
    2e2a:	57 85       	ldd	r21, Z+15	; 0x0f
    2e2c:	60 89       	ldd	r22, Z+16	; 0x10
    2e2e:	71 89       	ldd	r23, Z+17	; 0x11
    2e30:	4c 0d       	add	r20, r12
    2e32:	5d 1d       	adc	r21, r13
    2e34:	6e 1d       	adc	r22, r14
    2e36:	7f 1d       	adc	r23, r15
    2e38:	c5 01       	movw	r24, r10
    2e3a:	83 dd       	rcall	.-1274   	; 0x2942 <prvInsertTimerInActiveList>
    2e3c:	88 23       	and	r24, r24
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <prvProcessReceivedCommands+0x98>
    2e40:	49 c0       	rjmp	.+146    	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e42:	d5 01       	movw	r26, r10
    2e44:	54 96       	adiw	r26, 0x14	; 20
    2e46:	ed 91       	ld	r30, X+
    2e48:	fc 91       	ld	r31, X
    2e4a:	55 97       	sbiw	r26, 0x15	; 21
    2e4c:	c5 01       	movw	r24, r10
    2e4e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e50:	f5 01       	movw	r30, r10
    2e52:	86 89       	ldd	r24, Z+22	; 0x16
    2e54:	82 ff       	sbrs	r24, 2
    2e56:	3e c0       	rjmp	.+124    	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2e58:	4a 81       	ldd	r20, Y+2	; 0x02
    2e5a:	5b 81       	ldd	r21, Y+3	; 0x03
    2e5c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e5e:	7d 81       	ldd	r23, Y+5	; 0x05
    2e60:	86 85       	ldd	r24, Z+14	; 0x0e
    2e62:	97 85       	ldd	r25, Z+15	; 0x0f
    2e64:	a0 89       	ldd	r26, Z+16	; 0x10
    2e66:	b1 89       	ldd	r27, Z+17	; 0x11
    2e68:	9a 01       	movw	r18, r20
    2e6a:	ab 01       	movw	r20, r22
    2e6c:	28 0f       	add	r18, r24
    2e6e:	39 1f       	adc	r19, r25
    2e70:	4a 1f       	adc	r20, r26
    2e72:	5b 1f       	adc	r21, r27
    2e74:	c1 2c       	mov	r12, r1
    2e76:	d1 2c       	mov	r13, r1
    2e78:	76 01       	movw	r14, r12
    2e7a:	00 e0       	ldi	r16, 0x00	; 0
    2e7c:	10 e0       	ldi	r17, 0x00	; 0
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	c5 01       	movw	r24, r10
    2e82:	f2 dd       	rcall	.-1052   	; 0x2a68 <xTimerGenericCommand>
    2e84:	27 c0       	rjmp	.+78     	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e86:	d5 01       	movw	r26, r10
    2e88:	56 96       	adiw	r26, 0x16	; 22
    2e8a:	8c 91       	ld	r24, X
    2e8c:	56 97       	sbiw	r26, 0x16	; 22
    2e8e:	8e 7f       	andi	r24, 0xFE	; 254
    2e90:	56 96       	adiw	r26, 0x16	; 22
    2e92:	8c 93       	st	X, r24
                        break;
    2e94:	1f c0       	rjmp	.+62     	; 0x2ed4 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e96:	f5 01       	movw	r30, r10
    2e98:	86 89       	ldd	r24, Z+22	; 0x16
    2e9a:	81 60       	ori	r24, 0x01	; 1
    2e9c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2e9e:	4a 81       	ldd	r20, Y+2	; 0x02
    2ea0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ea2:	6c 81       	ldd	r22, Y+4	; 0x04
    2ea4:	7d 81       	ldd	r23, Y+5	; 0x05
    2ea6:	46 87       	std	Z+14, r20	; 0x0e
    2ea8:	57 87       	std	Z+15, r21	; 0x0f
    2eaa:	60 8b       	std	Z+16, r22	; 0x10
    2eac:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2eae:	40 0f       	add	r20, r16
    2eb0:	51 1f       	adc	r21, r17
    2eb2:	62 1f       	adc	r22, r18
    2eb4:	73 1f       	adc	r23, r19
    2eb6:	68 01       	movw	r12, r16
    2eb8:	79 01       	movw	r14, r18
    2eba:	c5 01       	movw	r24, r10
    2ebc:	42 dd       	rcall	.-1404   	; 0x2942 <prvInsertTimerInActiveList>
                        break;
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2ec0:	f5 01       	movw	r30, r10
    2ec2:	86 89       	ldd	r24, Z+22	; 0x16
    2ec4:	81 fd       	sbrc	r24, 1
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2ec8:	c5 01       	movw	r24, r10
    2eca:	0e 94 37 02 	call	0x46e	; 0x46e <vPortFree>
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ed0:	8e 7f       	andi	r24, 0xFE	; 254
    2ed2:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	a9 01       	movw	r20, r18
    2eda:	be 01       	movw	r22, r28
    2edc:	6f 5f       	subi	r22, 0xFF	; 255
    2ede:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee0:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <xTimerQueue>
    2ee4:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <xTimerQueue+0x1>
    2ee8:	0e 94 35 06 	call	0xc6a	; 0xc6a <xQueueReceive>
    2eec:	81 11       	cpse	r24, r1
    2eee:	70 cf       	rjmp	.-288    	; 0x2dd0 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2ef0:	28 96       	adiw	r28, 0x08	; 8
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	cf 90       	pop	r12
    2f0c:	bf 90       	pop	r11
    2f0e:	af 90       	pop	r10
    2f10:	08 95       	ret

00002f12 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2f12:	08 95       	ret

00002f14 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2f14:	84 b1       	in	r24, 0x04	; 4
    2f16:	80 68       	ori	r24, 0x80	; 128
    2f18:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2f1a:	85 b1       	in	r24, 0x05	; 5
    2f1c:	80 68       	ori	r24, 0x80	; 128
    2f1e:	85 b9       	out	0x05, r24	; 5
    2f20:	08 95       	ret

00002f22 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2f22:	83 b1       	in	r24, 0x03	; 3
    2f24:	80 68       	ori	r24, 0x80	; 128
    2f26:	83 b9       	out	0x03, r24	; 3
    2f28:	08 95       	ret

00002f2a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f2a:	f4 df       	rcall	.-24     	; 0x2f14 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f2c:	2f ef       	ldi	r18, 0xFF	; 255
    2f2e:	80 e7       	ldi	r24, 0x70	; 112
    2f30:	92 e0       	ldi	r25, 0x02	; 2
    2f32:	21 50       	subi	r18, 0x01	; 1
    2f34:	80 40       	sbci	r24, 0x00	; 0
    2f36:	90 40       	sbci	r25, 0x00	; 0
    2f38:	e1 f7       	brne	.-8      	; 0x2f32 <vApplicationMallocFailedHook+0x8>
    2f3a:	00 c0       	rjmp	.+0      	; 0x2f3c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2f3c:	00 00       	nop
    2f3e:	f1 df       	rcall	.-30     	; 0x2f22 <prvBlinkMainLed>
    2f40:	f5 cf       	rjmp	.-22     	; 0x2f2c <vApplicationMallocFailedHook+0x2>

00002f42 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2f42:	e8 df       	rcall	.-48     	; 0x2f14 <prvSetMainLedOn>
    2f44:	2f ef       	ldi	r18, 0xFF	; 255
    2f46:	87 ea       	ldi	r24, 0xA7	; 167
    2f48:	91 e6       	ldi	r25, 0x61	; 97
    2f4a:	21 50       	subi	r18, 0x01	; 1
    2f4c:	80 40       	sbci	r24, 0x00	; 0
    2f4e:	90 40       	sbci	r25, 0x00	; 0
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <vApplicationStackOverflowHook+0x8>
    2f52:	00 c0       	rjmp	.+0      	; 0x2f54 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2f54:	00 00       	nop
    2f56:	e5 df       	rcall	.-54     	; 0x2f22 <prvBlinkMainLed>
    2f58:	f5 cf       	rjmp	.-22     	; 0x2f44 <vApplicationStackOverflowHook+0x2>

00002f5a <tempHum_taskRun>:
	portMAX_DELAY);	'
	*/
	
	//xTaskDelayUntil( &xLastWakeTime, xFrequency );
	
	if (HIH8120_OK != hih8120_wakeup())
    2f5a:	84 d2       	rcall	.+1288   	; 0x3464 <hih8120_wakeup>
    2f5c:	88 23       	and	r24, r24
    2f5e:	c1 f0       	breq	.+48     	; 0x2f90 <tempHum_taskRun+0x36>
	{
		vTaskDelay(pdMS_TO_TICKS(100));
    2f60:	66 e0       	ldi	r22, 0x06	; 6
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
		printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
    2f6c:	84 e6       	ldi	r24, 0x64	; 100
    2f6e:	92 e0       	ldi	r25, 0x02	; 2
    2f70:	9f 93       	push	r25
    2f72:	8f 93       	push	r24
    2f74:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>
		while(HIH8120_OK == hih8120_wakeup())
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	06 c0       	rjmp	.+12     	; 0x2f8a <tempHum_taskRun+0x30>
		{
			vTaskDelay(pdMS_TO_TICKS(50UL));
    2f7e:	63 e0       	ldi	r22, 0x03	; 3
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
	
	if (HIH8120_OK != hih8120_wakeup())
	{
		vTaskDelay(pdMS_TO_TICKS(100));
		printf("\n ---Temp/humidity sensor couldn't wake up trying again--");
		while(HIH8120_OK == hih8120_wakeup())
    2f8a:	6c d2       	rcall	.+1240   	; 0x3464 <hih8120_wakeup>
    2f8c:	88 23       	and	r24, r24
		{
			vTaskDelay(pdMS_TO_TICKS(50UL));
		}
	}
	hih8120_measure();
    2f8e:	b9 f3       	breq	.-18     	; 0x2f7e <tempHum_taskRun+0x24>
    2f90:	7e d2       	rcall	.+1276   	; 0x348e <hih8120_measure>
	vTaskDelay(pdMS_TO_TICKS(5UL));
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	cb 01       	movw	r24, r22
    2f98:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
	
	if (HIH8120_OK != hih8120_measure() )
    2f9c:	78 d2       	rcall	.+1264   	; 0x348e <hih8120_measure>
    2f9e:	88 23       	and	r24, r24
    2fa0:	11 f1       	breq	.+68     	; 0x2fe6 <tempHum_taskRun+0x8c>
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
    2fa2:	66 e0       	ldi	r22, 0x06	; 6
    2fa4:	70 e0       	ldi	r23, 0x00	; 0
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
		while(HIH8120_OK ==  hih8120_measure())
    2fae:	06 c0       	rjmp	.+12     	; 0x2fbc <tempHum_taskRun+0x62>
		{
			vTaskDelay(pdMS_TO_TICKS(50UL));
    2fb0:	63 e0       	ldi	r22, 0x03	; 3
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
	vTaskDelay(pdMS_TO_TICKS(5UL));
	
	if (HIH8120_OK != hih8120_measure() )
	{
		vTaskDelay(pdMS_TO_TICKS(100UL));
		while(HIH8120_OK ==  hih8120_measure())
    2fbc:	68 d2       	rcall	.+1232   	; 0x348e <hih8120_measure>
    2fbe:	88 23       	and	r24, r24
    2fc0:	b9 f3       	breq	.-18     	; 0x2fb0 <tempHum_taskRun+0x56>
		{
			vTaskDelay(pdMS_TO_TICKS(50UL));
		}
		humidity =  hih8120_getHumidity();
    2fc2:	76 d2       	rcall	.+1260   	; 0x34b0 <hih8120_getHumidity>
    2fc4:	60 93 6d 15 	sts	0x156D, r22	; 0x80156d <humidity>
    2fc8:	70 93 6e 15 	sts	0x156E, r23	; 0x80156e <humidity+0x1>
    2fcc:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <humidity+0x2>
    2fd0:	90 93 70 15 	sts	0x1570, r25	; 0x801570 <humidity+0x3>
		temperature = hih8120_getTemperature();
    2fd4:	82 d2       	rcall	.+1284   	; 0x34da <hih8120_getTemperature>
    2fd6:	60 93 71 15 	sts	0x1571, r22	; 0x801571 <temperature>
    2fda:	70 93 72 15 	sts	0x1572, r23	; 0x801572 <temperature+0x1>
    2fde:	80 93 73 15 	sts	0x1573, r24	; 0x801573 <temperature+0x2>
    2fe2:	90 93 74 15 	sts	0x1574, r25	; 0x801574 <temperature+0x3>
    2fe6:	08 95       	ret

00002fe8 <tempHum_getDataFromTempHumSensorTask>:
    2fe8:	88 e3       	ldi	r24, 0x38	; 56
void tempHum_getDataFromTempHumSensorTask( void *pvParameters )
{
	/*Set event bits in group
	xEventGroupSetBits(_dataReadyEventGroup, TEMPERATURE_HUMIDITY_READY_BIT);
	*/
	xFrequency = 5000/portTICK_PERIOD_MS; // 1000 ms
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	a0 e0       	ldi	r26, 0x00	; 0
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	80 93 b7 16 	sts	0x16B7, r24	; 0x8016b7 <xFrequency>
    2ff4:	90 93 b8 16 	sts	0x16B8, r25	; 0x8016b8 <xFrequency+0x1>
    2ff8:	a0 93 b9 16 	sts	0x16B9, r26	; 0x8016b9 <xFrequency+0x2>
    2ffc:	b0 93 ba 16 	sts	0x16BA, r27	; 0x8016ba <xFrequency+0x3>
	//Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3000:	0e 94 ad 0c 	call	0x195a	; 0x195a <xTaskGetTickCount>
    3004:	60 93 b3 16 	sts	0x16B3, r22	; 0x8016b3 <xLastWakeTime>
    3008:	70 93 b4 16 	sts	0x16B4, r23	; 0x8016b4 <xLastWakeTime+0x1>
    300c:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xLastWakeTime+0x2>
    3010:	90 93 b6 16 	sts	0x16B6, r25	; 0x8016b6 <xLastWakeTime+0x3>
	_meassureEventGroup = xEventGroupCreate();
    3014:	0e 94 08 01 	call	0x210	; 0x210 <xEventGroupCreate>
    3018:	90 93 78 15 	sts	0x1578, r25	; 0x801578 <_meassureEventGroup+0x1>
    301c:	80 93 77 15 	sts	0x1577, r24	; 0x801577 <_meassureEventGroup>
	_dataReadyEventGroup =xEventGroupCreate();
    3020:	0e 94 08 01 	call	0x210	; 0x210 <xEventGroupCreate>
    3024:	90 93 76 15 	sts	0x1576, r25	; 0x801576 <_dataReadyEventGroup+0x1>
    3028:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <_dataReadyEventGroup>
	
	for(;;)
	{
		tempHum_taskRun();
    302c:	96 df       	rcall	.-212    	; 0x2f5a <tempHum_taskRun>
    302e:	fe cf       	rjmp	.-4      	; 0x302c <tempHum_getDataFromTempHumSensorTask+0x44>

00003030 <task3>:
		
		payload=getLoRaPayload((uint8_t)2);
		vTaskDelay( pdMS_TO_TICKS(50UL) );
		xMessageBufferSend(xMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
		
	}
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	ec 01       	movw	r28, r24
    3036:	0e 94 ad 0c 	call	0x195a	; 0x195a <xTaskGetTickCount>
    303a:	0e 94 ad 0c 	call	0x195a	; 0x195a <xTaskGetTickCount>
    303e:	ce 01       	movw	r24, r28
    3040:	d3 df       	rcall	.-90     	; 0x2fe8 <tempHum_getDataFromTempHumSensorTask>
    3042:	8e e9       	ldi	r24, 0x9E	; 158
    3044:	92 e0       	ldi	r25, 0x02	; 2
    3046:	0e 94 9f 29 	call	0x533e	; 0x533e <puts>
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	08 95       	ret

00003050 <create_tasks_and_semaphores>:




void create_tasks_and_semaphores(void)
{
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
	
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3056:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTestSemaphore>
    305a:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTestSemaphore+0x1>
    305e:	89 2b       	or	r24, r25
    3060:	89 f4       	brne	.+34     	; 0x3084 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xQueueCreateMutex>
    3068:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <xTestSemaphore+0x1>
    306c:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	41 f0       	breq	.+16     	; 0x3084 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3074:	00 e0       	ldi	r16, 0x00	; 0
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	a9 01       	movw	r20, r18
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	0e 94 4a 05 	call	0xa94	; 0xa94 <xQueueGenericSend>
	//,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	//,  NULL
	//,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	//,  NULL );
	
	xTaskCreate(
    3084:	e1 2c       	mov	r14, r1
    3086:	f1 2c       	mov	r15, r1
    3088:	03 e0       	ldi	r16, 0x03	; 3
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 ec       	ldi	r20, 0xC0	; 192
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	64 ea       	ldi	r22, 0xA4	; 164
    3094:	72 e0       	ldi	r23, 0x02	; 2
    3096:	88 e1       	ldi	r24, 0x18	; 24
    3098:	98 e1       	ldi	r25, 0x18	; 24
    309a:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskCreate>
	,  "Task3"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	08 95       	ret

000030a6 <initialiseSystem>:
}
/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    30a6:	81 b1       	in	r24, 0x01	; 1
    30a8:	81 68       	ori	r24, 0x81	; 129
    30aa:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	0e 94 ab 22 	call	0x4556	; 0x4556 <stdio_initialise>
	// Let's create some tasks
	
	if ( HIH8120_OK == hih8120_initialise() )
    30b2:	c0 d1       	rcall	.+896    	; 0x3434 <hih8120_initialise>
    30b4:	81 11       	cpse	r24, r1
    30b6:	05 c0       	rjmp	.+10     	; 0x30c2 <initialiseSystem+0x1c>
{
	puts("Task0");
    30b8:	8a ea       	ldi	r24, 0xAA	; 170
    30ba:	92 e0       	ldi	r25, 0x02	; 2
    30bc:	0e 94 9f 29 	call	0x533e	; 0x533e <puts>
	create_tasks_and_semaphores();
    30c0:	c7 df       	rcall	.-114    	; 0x3050 <create_tasks_and_semaphores>
}
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    30c2:	85 e0       	ldi	r24, 0x05	; 5
    30c4:	0e 94 b2 23 	call	0x4764	; 0x4764 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    30c8:	60 e0       	ldi	r22, 0x00	; 0
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    30ce:	3f d3       	rcall	.+1662   	; 0x374e <lora_driver_initialise>
    30d0:	83 e0       	ldi	r24, 0x03	; 3
    30d2:	1a c1       	rjmp	.+564    	; 0x3308 <lora_handler_initialise>
    30d4:	08 95       	ret

000030d6 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    30d6:	e7 df       	rcall	.-50     	; 0x30a6 <initialiseSystem>
	//printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    30d8:	0e 94 6f 0c 	call	0x18de	; 0x18de <vTaskStartScheduler>

	/* Replace with your application code */
	
}
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	08 95       	ret

000030e2 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	64 97       	sbiw	r28, 0x14	; 20
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	0e 94 00 24 	call	0x4800	; 0x4800 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3100:	74 d3       	rcall	.+1768   	; 0x37ea <lora_driver_rn2483FactoryReset>
    3102:	f0 d5       	rcall	.+3040   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    3104:	9f 93       	push	r25
    3106:	8f 93       	push	r24
    3108:	80 eb       	ldi	r24, 0xB0	; 176
    310a:	92 e0       	ldi	r25, 0x02	; 2
    310c:	9f 93       	push	r25
    310e:	8f 93       	push	r24
    3110:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3114:	e8 d4       	rcall	.+2512   	; 0x3ae6 <lora_driver_configureToEu868>
    3116:	e6 d5       	rcall	.+3020   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    3118:	9f 93       	push	r25
    311a:	8f 93       	push	r24
    311c:	83 ec       	ldi	r24, 0xC3	; 195
    311e:	92 e0       	ldi	r25, 0x02	; 2
    3120:	9f 93       	push	r25
    3122:	8f 93       	push	r24
    3124:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>
    3128:	8e 01       	movw	r16, r28
    312a:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	c8 01       	movw	r24, r16
    3130:	6e d3       	rcall	.+1756   	; 0x380e <lora_driver_getRn2483Hweui>
    3132:	d8 d5       	rcall	.+2992   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3134:	1f 93       	push	r17
    3136:	0f 93       	push	r16
    3138:	9f 93       	push	r25
    313a:	8f 93       	push	r24
    313c:	8c ed       	ldi	r24, 0xDC	; 220
    313e:	92 e0       	ldi	r25, 0x02	; 2
    3140:	9f 93       	push	r25
    3142:	8f 93       	push	r24
    3144:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3148:	c8 01       	movw	r24, r16
    314a:	7d d3       	rcall	.+1786   	; 0x3846 <lora_driver_setDeviceIdentifier>
    314c:	cb d5       	rcall	.+2966   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    314e:	9f 93       	push	r25
    3150:	8f 93       	push	r24
    3152:	1f 93       	push	r17
    3154:	0f 93       	push	r16
    3156:	80 ef       	ldi	r24, 0xF0	; 240
    3158:	92 e0       	ldi	r25, 0x02	; 2
    315a:	9f 93       	push	r25
    315c:	8f 93       	push	r24
    315e:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3162:	a8 01       	movw	r20, r16
    3164:	65 e0       	ldi	r22, 0x05	; 5
    3166:	73 e0       	ldi	r23, 0x03	; 3
    3168:	86 e2       	ldi	r24, 0x26	; 38
    316a:	93 e0       	ldi	r25, 0x03	; 3
    316c:	9a d5       	rcall	.+2868   	; 0x3ca2 <lora_driver_setOtaaIdentity>
    316e:	ba d5       	rcall	.+2932   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    3170:	9f 93       	push	r25
    3172:	8f 93       	push	r24
    3174:	1f 93       	push	r17
    3176:	0f 93       	push	r16
    3178:	85 e0       	ldi	r24, 0x05	; 5
    317a:	93 e0       	ldi	r25, 0x03	; 3
    317c:	9f 93       	push	r25
    317e:	8f 93       	push	r24
    3180:	86 e2       	ldi	r24, 0x26	; 38
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	9f 93       	push	r25
    3186:	8f 93       	push	r24
    3188:	87 e3       	ldi	r24, 0x37	; 55
    318a:	93 e0       	ldi	r25, 0x03	; 3
    318c:	9f 93       	push	r25
    318e:	8f 93       	push	r24
    3190:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3194:	8b d3       	rcall	.+1814   	; 0x38ac <lora_driver_saveMac>
    3196:	a6 d5       	rcall	.+2892   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    3198:	9f 93       	push	r25
    319a:	8f 93       	push	r24
    319c:	8d e6       	ldi	r24, 0x6D	; 109
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	9f 93       	push	r25
    31a2:	8f 93       	push	r24
    31a4:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	75 d4       	rcall	.+2282   	; 0x3aa0 <lora_driver_setAdaptiveDataRate>
    31b6:	96 d5       	rcall	.+2860   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    31b8:	9f 93       	push	r25
    31ba:	8f 93       	push	r24
    31bc:	8c e7       	ldi	r24, 0x7C	; 124
    31be:	93 e0       	ldi	r25, 0x03	; 3
    31c0:	9f 93       	push	r25
    31c2:	8f 93       	push	r24
    31c4:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    31c8:	84 ef       	ldi	r24, 0xF4	; 244
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	74 d4       	rcall	.+2280   	; 0x3ab6 <lora_driver_setReceiveDelay>
    31ce:	8a d5       	rcall	.+2836   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    31d0:	9f 93       	push	r25
    31d2:	8f 93       	push	r24
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	8f 93       	push	r24
    31d8:	84 ef       	ldi	r24, 0xF4	; 244
    31da:	8f 93       	push	r24
    31dc:	8d e9       	ldi	r24, 0x9D	; 157
    31de:	93 e0       	ldi	r25, 0x03	; 3
    31e0:	9f 93       	push	r25
    31e2:	8f 93       	push	r24
    31e4:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    31f2:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	60 d3       	rcall	.+1728   	; 0x38b8 <lora_driver_join>
    31f8:	08 2f       	mov	r16, r24
    31fa:	74 d5       	rcall	.+2792   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    31fc:	9f 93       	push	r25
    31fe:	8f 93       	push	r24
    3200:	1f 92       	push	r1
    3202:	1f 93       	push	r17
    3204:	8d eb       	ldi	r24, 0xBD	; 189
    3206:	93 e0       	ldi	r25, 0x03	; 3
    3208:	9f 93       	push	r25
    320a:	8f 93       	push	r24
    320c:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	08 30       	cpi	r16, 0x08	; 8
    321e:	59 f0       	breq	.+22     	; 0x3236 <_lora_setup+0x154>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	0e 94 64 24 	call	0x48c8	; 0x48c8 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3226:	66 e3       	ldi	r22, 0x36	; 54
    3228:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
    3232:	11 50       	subi	r17, 0x01	; 1
    3234:	f9 f6       	brne	.-66     	; 0x31f4 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3236:	08 30       	cpi	r16, 0x08	; 8
    3238:	21 f4       	brne	.+8      	; 0x3242 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	0e 94 46 24 	call	0x488c	; 0x488c <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3240:	09 c0       	rjmp	.+18     	; 0x3254 <_lora_setup+0x172>
    3242:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3244:	0e 94 55 24 	call	0x48aa	; 0x48aa <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	0e 94 23 24 	call	0x4846	; 0x4846 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    324e:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3252:	fd cf       	rjmp	.-6      	; 0x324e <_lora_setup+0x16c>
    3254:	64 96       	adiw	r28, 0x14	; 20
    3256:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	08 95       	ret

0000326a <lora_handler_task>:
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    326e:	00 d0       	rcall	.+0      	; 0x3270 <lora_handler_task+0x6>
    3270:	1f 92       	push	r1
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	aa d2       	rcall	.+1364   	; 0x37ce <lora_driver_resetRn2483>
	vTaskDelay(2);
    327a:	62 e0       	ldi	r22, 0x02	; 2
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	a2 d2       	rcall	.+1348   	; 0x37ce <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    328a:	66 e9       	ldi	r22, 0x96	; 150
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
 
	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3296:	54 d2       	rcall	.+1192   	; 0x3740 <lora_driver_flushBuffers>

	_lora_setup();
    3298:	24 df       	rcall	.-440    	; 0x30e2 <_lora_setup>
    329a:	e9 e7       	ldi	r30, 0x79	; 121

	_uplink_payload.len = 6;
    329c:	f5 e1       	ldi	r31, 0x15	; 21
    329e:	86 e0       	ldi	r24, 0x06	; 6
    32a0:	81 83       	std	Z+1, r24	; 0x01
    32a2:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    32a4:	80 83       	st	Z, r24
    32a6:	0e 94 ad 0c 	call	0x195a	; 0x195a <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    32aa:	69 83       	std	Y+1, r22	; 0x01
    32ac:	7a 83       	std	Y+2, r23	; 0x02
    32ae:	8b 83       	std	Y+3, r24	; 0x03
    32b0:	9c 83       	std	Y+4, r25	; 0x04
    32b2:	48 ea       	ldi	r20, 0xA8	; 168

	for(;;)
	{ 
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    32b4:	58 e4       	ldi	r21, 0x48	; 72
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	ce 01       	movw	r24, r28
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskDelayUntil>
    32c2:	e9 e7       	ldi	r30, 0x79	; 121
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    32c4:	f5 e1       	ldi	r31, 0x15	; 21
    32c6:	80 e3       	ldi	r24, 0x30	; 48
    32c8:	82 83       	std	Z+2, r24	; 0x02
    32ca:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    32cc:	83 83       	std	Z+3, r24	; 0x03
    32ce:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    32d0:	84 83       	std	Z+4, r24	; 0x04
    32d2:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    32d4:	85 83       	std	Z+5, r24	; 0x05
    32d6:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    32d8:	86 83       	std	Z+6, r24	; 0x06
    32da:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    32dc:	87 83       	std	Z+7, r24	; 0x07
    32de:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    32e0:	0e 94 76 24 	call	0x48ec	; 0x48ec <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    32e4:	69 e7       	ldi	r22, 0x79	; 121
    32e6:	75 e1       	ldi	r23, 0x15	; 21
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	0f d3       	rcall	.+1566   	; 0x390a <lora_driver_sendUploadMessage>
    32ec:	fb d4       	rcall	.+2550   	; 0x3ce4 <lora_driver_mapReturnCodeToText>
    32ee:	9f 93       	push	r25
    32f0:	8f 93       	push	r24
    32f2:	8d ed       	ldi	r24, 0xDD	; 221
    32f4:	93 e0       	ldi	r25, 0x03	; 3
    32f6:	9f 93       	push	r25
    32f8:	8f 93       	push	r24
    32fa:	0e 94 8c 29 	call	0x5318	; 0x5318 <printf>
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	d5 cf       	rjmp	.-86     	; 0x32b2 <lora_handler_task+0x48>

00003308 <lora_handler_initialise>:
    3308:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    330a:	ff 92       	push	r15
    330c:	0f 93       	push	r16
	xTaskCreate(
    330e:	e1 2c       	mov	r14, r1
    3310:	f1 2c       	mov	r15, r1
    3312:	08 2f       	mov	r16, r24
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	48 e8       	ldi	r20, 0x88	; 136
    331a:	51 e0       	ldi	r21, 0x01	; 1
    331c:	62 ef       	ldi	r22, 0xF2	; 242
    331e:	73 e0       	ldi	r23, 0x03	; 3
    3320:	85 e3       	ldi	r24, 0x35	; 53
    3322:	99 e1       	ldi	r25, 0x19	; 25
    3324:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	08 95       	ret

00003330 <__fixunssfsi>:
    3330:	33 d0       	rcall	.+102    	; 0x3398 <__fp_splitA>
    3332:	88 f0       	brcs	.+34     	; 0x3356 <__fixunssfsi+0x26>
    3334:	9f 57       	subi	r25, 0x7F	; 127
    3336:	90 f0       	brcs	.+36     	; 0x335c <__fixunssfsi+0x2c>
    3338:	b9 2f       	mov	r27, r25
    333a:	99 27       	eor	r25, r25
    333c:	b7 51       	subi	r27, 0x17	; 23
    333e:	a0 f0       	brcs	.+40     	; 0x3368 <__fixunssfsi+0x38>
    3340:	d1 f0       	breq	.+52     	; 0x3376 <__fixunssfsi+0x46>
    3342:	66 0f       	add	r22, r22
    3344:	77 1f       	adc	r23, r23
    3346:	88 1f       	adc	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	1a f0       	brmi	.+6      	; 0x3352 <__fixunssfsi+0x22>
    334c:	ba 95       	dec	r27
    334e:	c9 f7       	brne	.-14     	; 0x3342 <__fixunssfsi+0x12>
    3350:	12 c0       	rjmp	.+36     	; 0x3376 <__fixunssfsi+0x46>
    3352:	b1 30       	cpi	r27, 0x01	; 1
    3354:	81 f0       	breq	.+32     	; 0x3376 <__fixunssfsi+0x46>
    3356:	3a d0       	rcall	.+116    	; 0x33cc <__fp_zero>
    3358:	b1 e0       	ldi	r27, 0x01	; 1
    335a:	08 95       	ret
    335c:	37 c0       	rjmp	.+110    	; 0x33cc <__fp_zero>
    335e:	67 2f       	mov	r22, r23
    3360:	78 2f       	mov	r23, r24
    3362:	88 27       	eor	r24, r24
    3364:	b8 5f       	subi	r27, 0xF8	; 248
    3366:	39 f0       	breq	.+14     	; 0x3376 <__fixunssfsi+0x46>
    3368:	b9 3f       	cpi	r27, 0xF9	; 249
    336a:	cc f3       	brlt	.-14     	; 0x335e <__fixunssfsi+0x2e>
    336c:	86 95       	lsr	r24
    336e:	77 95       	ror	r23
    3370:	67 95       	ror	r22
    3372:	b3 95       	inc	r27
    3374:	d9 f7       	brne	.-10     	; 0x336c <__fixunssfsi+0x3c>
    3376:	3e f4       	brtc	.+14     	; 0x3386 <__fixunssfsi+0x56>
    3378:	90 95       	com	r25
    337a:	80 95       	com	r24
    337c:	70 95       	com	r23
    337e:	61 95       	neg	r22
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	8f 4f       	sbci	r24, 0xFF	; 255
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	08 95       	ret

00003388 <__fp_split3>:
    3388:	57 fd       	sbrc	r21, 7
    338a:	90 58       	subi	r25, 0x80	; 128
    338c:	44 0f       	add	r20, r20
    338e:	55 1f       	adc	r21, r21
    3390:	59 f0       	breq	.+22     	; 0x33a8 <__fp_splitA+0x10>
    3392:	5f 3f       	cpi	r21, 0xFF	; 255
    3394:	71 f0       	breq	.+28     	; 0x33b2 <__fp_splitA+0x1a>
    3396:	47 95       	ror	r20

00003398 <__fp_splitA>:
    3398:	88 0f       	add	r24, r24
    339a:	97 fb       	bst	r25, 7
    339c:	99 1f       	adc	r25, r25
    339e:	61 f0       	breq	.+24     	; 0x33b8 <__fp_splitA+0x20>
    33a0:	9f 3f       	cpi	r25, 0xFF	; 255
    33a2:	79 f0       	breq	.+30     	; 0x33c2 <__fp_splitA+0x2a>
    33a4:	87 95       	ror	r24
    33a6:	08 95       	ret
    33a8:	12 16       	cp	r1, r18
    33aa:	13 06       	cpc	r1, r19
    33ac:	14 06       	cpc	r1, r20
    33ae:	55 1f       	adc	r21, r21
    33b0:	f2 cf       	rjmp	.-28     	; 0x3396 <__fp_split3+0xe>
    33b2:	46 95       	lsr	r20
    33b4:	f1 df       	rcall	.-30     	; 0x3398 <__fp_splitA>
    33b6:	08 c0       	rjmp	.+16     	; 0x33c8 <__fp_splitA+0x30>
    33b8:	16 16       	cp	r1, r22
    33ba:	17 06       	cpc	r1, r23
    33bc:	18 06       	cpc	r1, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	f1 cf       	rjmp	.-30     	; 0x33a4 <__fp_splitA+0xc>
    33c2:	86 95       	lsr	r24
    33c4:	71 05       	cpc	r23, r1
    33c6:	61 05       	cpc	r22, r1
    33c8:	08 94       	sec
    33ca:	08 95       	ret

000033cc <__fp_zero>:
    33cc:	e8 94       	clt

000033ce <__fp_szero>:
    33ce:	bb 27       	eor	r27, r27
    33d0:	66 27       	eor	r22, r22
    33d2:	77 27       	eor	r23, r23
    33d4:	cb 01       	movw	r24, r22
    33d6:	97 f9       	bld	r25, 7
    33d8:	08 95       	ret

000033da <_hihTwiCallback>:
    33da:	65 30       	cpi	r22, 0x05	; 5
    33dc:	f1 f4       	brne	.+60     	; 0x341a <_hihTwiCallback+0x40>
    33de:	fa 01       	movw	r30, r20
    33e0:	80 81       	ld	r24, Z
    33e2:	8f 73       	andi	r24, 0x3F	; 63
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	98 2f       	mov	r25, r24
    33e8:	88 27       	eor	r24, r24
    33ea:	21 81       	ldd	r18, Z+1	; 0x01
    33ec:	82 2b       	or	r24, r18
    33ee:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    33f2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	f0 e4       	ldi	r31, 0x40	; 64
    33fa:	8f 9f       	mul	r24, r31
    33fc:	c0 01       	movw	r24, r0
    33fe:	11 24       	eor	r1, r1
    3400:	fa 01       	movw	r30, r20
    3402:	23 81       	ldd	r18, Z+3	; 0x03
    3404:	26 95       	lsr	r18
    3406:	26 95       	lsr	r18
    3408:	82 2b       	or	r24, r18
    340a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    340e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	80 93 8f 15 	sts	0x158F, r24	; 0x80158f <_measuringIsReady>
    3418:	08 95       	ret
    341a:	64 30       	cpi	r22, 0x04	; 4
    341c:	51 f0       	breq	.+20     	; 0x3432 <_hihTwiCallback+0x58>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e4       	ldi	r25, 0x40	; 64
    3422:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3426:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    342a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    342e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3432:	08 95       	ret

00003434 <hih8120_initialise>:
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	0d ee       	ldi	r16, 0xED	; 237
    343a:	19 e1       	ldi	r17, 0x19	; 25
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	34 e2       	ldi	r19, 0x24	; 36
    3440:	44 ef       	ldi	r20, 0xF4	; 244
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	87 e2       	ldi	r24, 0x27	; 39
    3448:	0e 94 98 24 	call	0x4930	; 0x4930 <twiCreate>
    344c:	90 93 91 15 	sts	0x1591, r25	; 0x801591 <_hih8120Handler+0x1>
    3450:	80 93 90 15 	sts	0x1590, r24	; 0x801590 <_hih8120Handler>
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	89 2b       	or	r24, r25
    3458:	09 f0       	breq	.+2      	; 0x345c <hih8120_initialise+0x28>
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	82 2f       	mov	r24, r18
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <hih8120_wakeup>:
    3464:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <_hih8120Handler>
    3468:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <_hih8120Handler+0x1>
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	59 f0       	breq	.+22     	; 0x3486 <hih8120_wakeup+0x22>
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	70 e0       	ldi	r23, 0x00	; 0
    3476:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <twiTransmit>
    347a:	84 30       	cpi	r24, 0x04	; 4
    347c:	31 f4       	brne	.+12     	; 0x348a <hih8120_wakeup+0x26>
    347e:	10 92 8f 15 	sts	0x158F, r1	; 0x80158f <_measuringIsReady>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	08 95       	ret
    3486:	82 e0       	ldi	r24, 0x02	; 2
    3488:	08 95       	ret
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	08 95       	ret

0000348e <hih8120_measure>:
    348e:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <_hih8120Handler>
    3492:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <_hih8120Handler+0x1>
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	39 f0       	breq	.+14     	; 0x34a8 <hih8120_measure+0x1a>
    349a:	64 e0       	ldi	r22, 0x04	; 4
    349c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <twiReceive>
    34a0:	85 30       	cpi	r24, 0x05	; 5
    34a2:	21 f0       	breq	.+8      	; 0x34ac <hih8120_measure+0x1e>
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	08 95       	ret
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	08 95       	ret
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	08 95       	ret

000034b0 <hih8120_getHumidity>:
    34b0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    34b4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__floatunsisf>
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	48 ec       	ldi	r20, 0xC8	; 200
    34c6:	52 e4       	ldi	r21, 0x42	; 66
    34c8:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__mulsf3>
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	38 ef       	ldi	r19, 0xF8	; 248
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	56 e4       	ldi	r21, 0x46	; 70
    34d4:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__divsf3>
    34d8:	08 95       	ret

000034da <hih8120_getTemperature>:
    34da:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    34de:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__floatunsisf>
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	45 e2       	ldi	r20, 0x25	; 37
    34f0:	53 e4       	ldi	r21, 0x43	; 67
    34f2:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__mulsf3>
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	38 ef       	ldi	r19, 0xF8	; 248
    34fa:	4f e7       	ldi	r20, 0x7F	; 127
    34fc:	56 e4       	ldi	r21, 0x46	; 70
    34fe:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__divsf3>
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e2       	ldi	r20, 0x20	; 32
    3508:	52 e4       	ldi	r21, 0x42	; 66
    350a:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__subsf3>
    350e:	08 95       	ret

00003510 <_serialCallBack>:
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	1f 92       	push	r1
    351a:	1f 92       	push	r1
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	8c 01       	movw	r16, r24
    3522:	19 82       	std	Y+1, r1	; 0x01
    3524:	2d c0       	rjmp	.+90     	; 0x3580 <_serialCallBack+0x70>
    3526:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <rec_buf_inp.2878>
    352a:	ec 32       	cpi	r30, 0x2C	; 44
    352c:	50 f4       	brcc	.+20     	; 0x3542 <_serialCallBack+0x32>
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	8e 0f       	add	r24, r30
    3532:	80 93 c9 15 	sts	0x15C9, r24	; 0x8015c9 <rec_buf_inp.2878>
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	e5 50       	subi	r30, 0x05	; 5
    353a:	fa 4e       	sbci	r31, 0xEA	; 234
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	80 83       	st	Z, r24
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <_serialCallBack+0x36>
    3542:	10 92 c9 15 	sts	0x15C9, r1	; 0x8015c9 <rec_buf_inp.2878>
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	8a 30       	cpi	r24, 0x0A	; 10
    354a:	d1 f4       	brne	.+52     	; 0x3580 <_serialCallBack+0x70>
    354c:	40 91 c9 15 	lds	r20, 0x15C9	; 0x8015c9 <rec_buf_inp.2878>
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	fa 01       	movw	r30, r20
    3554:	e7 50       	subi	r30, 0x07	; 7
    3556:	fa 4e       	sbci	r31, 0xEA	; 234
    3558:	10 82       	st	Z, r1
    355a:	41 50       	subi	r20, 0x01	; 1
    355c:	51 09       	sbc	r21, r1
    355e:	9e 01       	movw	r18, r28
    3560:	2f 5f       	subi	r18, 0xFF	; 255
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	6b ef       	ldi	r22, 0xFB	; 251
    3566:	75 e1       	ldi	r23, 0x15	; 21
    3568:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <_serialReplyBufferHandle>
    356c:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <_serialReplyBufferHandle+0x1>
    3570:	0e 94 48 09 	call	0x1290	; 0x1290 <xStreamBufferSendFromISR>
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	81 11       	cpse	r24, r1
    3578:	0e 94 42 03 	call	0x684	; 0x684 <vPortYield>
    357c:	10 92 c9 15 	sts	0x15C9, r1	; 0x8015c9 <rec_buf_inp.2878>
    3580:	be 01       	movw	r22, r28
    3582:	6e 5f       	subi	r22, 0xFE	; 254
    3584:	7f 4f       	sbci	r23, 0xFF	; 255
    3586:	c8 01       	movw	r24, r16
    3588:	50 d5       	rcall	.+2720   	; 0x402a <serial_getByte>
    358a:	88 23       	and	r24, r24
    358c:	61 f2       	breq	.-104    	; 0x3526 <_serialCallBack+0x16>
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	08 95       	ret

0000359c <_uploadMessage>:
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	8c 01       	movw	r16, r24
    35a6:	eb 01       	movw	r28, r22
    35a8:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <_serialReplyBufferHandle>
    35ac:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <_serialReplyBufferHandle+0x1>
    35b0:	0e 94 55 08 	call	0x10aa	; 0x10aa <xStreamBufferReset>
    35b4:	b8 01       	movw	r22, r16
    35b6:	82 e9       	ldi	r24, 0x92	; 146
    35b8:	95 e1       	ldi	r25, 0x15	; 21
    35ba:	0e 94 6d 29 	call	0x52da	; 0x52da <strcpy>
    35be:	20 97       	sbiw	r28, 0x00	; 0
    35c0:	79 f0       	breq	.+30     	; 0x35e0 <_uploadMessage+0x44>
    35c2:	e2 e9       	ldi	r30, 0x92	; 146
    35c4:	f5 e1       	ldi	r31, 0x15	; 21
    35c6:	01 90       	ld	r0, Z+
    35c8:	00 20       	and	r0, r0
    35ca:	e9 f7       	brne	.-6      	; 0x35c6 <_uploadMessage+0x2a>
    35cc:	31 97       	sbiw	r30, 0x01	; 1
    35ce:	80 e2       	ldi	r24, 0x20	; 32
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	80 83       	st	Z, r24
    35d6:	be 01       	movw	r22, r28
    35d8:	82 e9       	ldi	r24, 0x92	; 146
    35da:	95 e1       	ldi	r25, 0x15	; 21
    35dc:	0e 94 62 29 	call	0x52c4	; 0x52c4 <strcat>
    35e0:	e2 e9       	ldi	r30, 0x92	; 146
    35e2:	f5 e1       	ldi	r31, 0x15	; 21
    35e4:	df 01       	movw	r26, r30
    35e6:	0d 90       	ld	r0, X+
    35e8:	00 20       	and	r0, r0
    35ea:	e9 f7       	brne	.-6      	; 0x35e6 <_uploadMessage+0x4a>
    35ec:	11 97       	sbiw	r26, 0x01	; 1
    35ee:	8d e0       	ldi	r24, 0x0D	; 13
    35f0:	9a e0       	ldi	r25, 0x0A	; 10
    35f2:	11 96       	adiw	r26, 0x01	; 1
    35f4:	9c 93       	st	X, r25
    35f6:	8e 93       	st	-X, r24
    35f8:	12 96       	adiw	r26, 0x02	; 2
    35fa:	1c 92       	st	X, r1
    35fc:	01 90       	ld	r0, Z+
    35fe:	00 20       	and	r0, r0
    3600:	e9 f7       	brne	.-6      	; 0x35fc <_uploadMessage+0x60>
    3602:	31 97       	sbiw	r30, 0x01	; 1
    3604:	e2 59       	subi	r30, 0x92	; 146
    3606:	f5 41       	sbci	r31, 0x15	; 21
    3608:	ae 2f       	mov	r26, r30
    360a:	82 e9       	ldi	r24, 0x92	; 146
    360c:	95 e1       	ldi	r25, 0x15	; 21
    360e:	ac 01       	movw	r20, r24
    3610:	6a 2f       	mov	r22, r26
    3612:	80 91 ce 15 	lds	r24, 0x15CE	; 0x8015ce <_rn2483_serial>
    3616:	90 91 cf 15 	lds	r25, 0x15CF	; 0x8015cf <_rn2483_serial+0x1>
    361a:	b2 d4       	rcall	.+2404   	; 0x3f80 <serial_sendBytes>
    361c:	81 11       	cpse	r24, r1
    361e:	11 c0       	rjmp	.+34     	; 0x3642 <_uploadMessage+0xa6>
    3620:	08 e2       	ldi	r16, 0x28	; 40
    3622:	15 e0       	ldi	r17, 0x05	; 5
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	4d e2       	ldi	r20, 0x2D	; 45
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	65 e5       	ldi	r22, 0x55	; 85
    362e:	76 e1       	ldi	r23, 0x16	; 22
    3630:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <_serialReplyBufferHandle>
    3634:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <_serialReplyBufferHandle+0x1>
    3638:	0e 94 8c 09 	call	0x1318	; 0x1318 <xStreamBufferReceive>
    363c:	85 e5       	ldi	r24, 0x55	; 85
    363e:	96 e1       	ldi	r25, 0x16	; 22
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <_uploadMessage+0xaa>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	08 95       	ret

00003650 <_reply2ReturnCode>:
    3650:	2f 92       	push	r2
    3652:	3f 92       	push	r3
    3654:	4f 92       	push	r4
    3656:	5f 92       	push	r5
    3658:	6f 92       	push	r6
    365a:	7f 92       	push	r7
    365c:	8f 92       	push	r8
    365e:	9f 92       	push	r9
    3660:	af 92       	push	r10
    3662:	bf 92       	push	r11
    3664:	cf 92       	push	r12
    3666:	df 92       	push	r13
    3668:	ef 92       	push	r14
    366a:	ff 92       	push	r15
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	5c 01       	movw	r10, r24
    3676:	fc 01       	movw	r30, r24
    3678:	01 90       	ld	r0, Z+
    367a:	00 20       	and	r0, r0
    367c:	e9 f7       	brne	.-6      	; 0x3678 <_reply2ReturnCode+0x28>
    367e:	31 97       	sbiw	r30, 0x01	; 1
    3680:	6f 01       	movw	r12, r30
    3682:	c8 1a       	sub	r12, r24
    3684:	d9 0a       	sbc	r13, r25
    3686:	5c 2c       	mov	r5, r12
    3688:	0f 2e       	mov	r0, r31
    368a:	f2 e9       	ldi	r31, 0x92	; 146
    368c:	8f 2e       	mov	r8, r31
    368e:	f6 e0       	ldi	r31, 0x06	; 6
    3690:	9f 2e       	mov	r9, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	e1 2c       	mov	r14, r1
    3696:	f1 2c       	mov	r15, r1
    3698:	4c 2c       	mov	r4, r12
    369a:	37 01       	movw	r6, r14
    369c:	f4 01       	movw	r30, r8
    369e:	01 81       	ldd	r16, Z+1	; 0x01
    36a0:	12 81       	ldd	r17, Z+2	; 0x02
    36a2:	e8 01       	movw	r28, r16
    36a4:	09 90       	ld	r0, Y+
    36a6:	00 20       	and	r0, r0
    36a8:	e9 f7       	brne	.-6      	; 0x36a4 <_reply2ReturnCode+0x54>
    36aa:	21 97       	sbiw	r28, 0x01	; 1
    36ac:	c0 1b       	sub	r28, r16
    36ae:	d1 0b       	sbc	r29, r17
    36b0:	3c 2e       	mov	r3, r28
    36b2:	f9 e0       	ldi	r31, 0x09	; 9
    36b4:	cf 16       	cp	r12, r31
    36b6:	d1 04       	cpc	r13, r1
    36b8:	58 f0       	brcs	.+22     	; 0x36d0 <_reply2ReturnCode+0x80>
    36ba:	f4 01       	movw	r30, r8
    36bc:	20 80       	ld	r2, Z
    36be:	fe e0       	ldi	r31, 0x0E	; 14
    36c0:	2f 12       	cpse	r2, r31
    36c2:	06 c0       	rjmp	.+12     	; 0x36d0 <_reply2ReturnCode+0x80>
    36c4:	b8 01       	movw	r22, r16
    36c6:	c5 01       	movw	r24, r10
    36c8:	0e 94 3d 29 	call	0x527a	; 0x527a <strcasestr>
    36cc:	89 2b       	or	r24, r25
    36ce:	09 f5       	brne	.+66     	; 0x3712 <_reply2ReturnCode+0xc2>
    36d0:	44 2d       	mov	r20, r4
    36d2:	35 14       	cp	r3, r5
    36d4:	08 f4       	brcc	.+2      	; 0x36d8 <_reply2ReturnCode+0x88>
    36d6:	4c 2f       	mov	r20, r28
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	b8 01       	movw	r22, r16
    36dc:	c5 01       	movw	r24, r10
    36de:	0e 94 74 29 	call	0x52e8	; 0x52e8 <strncasecmp>
    36e2:	89 2b       	or	r24, r25
    36e4:	49 f4       	brne	.+18     	; 0x36f8 <_reply2ReturnCode+0xa8>
    36e6:	f3 01       	movw	r30, r6
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	e6 0d       	add	r30, r6
    36ee:	f7 1d       	adc	r31, r7
    36f0:	ee 56       	subi	r30, 0x6E	; 110
    36f2:	f9 4f       	sbci	r31, 0xF9	; 249
    36f4:	20 80       	ld	r2, Z
    36f6:	0d c0       	rjmp	.+26     	; 0x3712 <_reply2ReturnCode+0xc2>
    36f8:	8f ef       	ldi	r24, 0xFF	; 255
    36fa:	e8 1a       	sub	r14, r24
    36fc:	f8 0a       	sbc	r15, r24
    36fe:	e3 e0       	ldi	r30, 0x03	; 3
    3700:	8e 0e       	add	r8, r30
    3702:	91 1c       	adc	r9, r1
    3704:	f1 e1       	ldi	r31, 0x11	; 17
    3706:	ef 16       	cp	r14, r31
    3708:	f1 04       	cpc	r15, r1
    370a:	39 f6       	brne	.-114    	; 0x369a <_reply2ReturnCode+0x4a>
    370c:	68 94       	set
    370e:	22 24       	eor	r2, r2
    3710:	24 f8       	bld	r2, 4
    3712:	82 2d       	mov	r24, r2
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	df 90       	pop	r13
    3722:	cf 90       	pop	r12
    3724:	bf 90       	pop	r11
    3726:	af 90       	pop	r10
    3728:	9f 90       	pop	r9
    372a:	8f 90       	pop	r8
    372c:	7f 90       	pop	r7
    372e:	6f 90       	pop	r6
    3730:	5f 90       	pop	r5
    3732:	4f 90       	pop	r4
    3734:	3f 90       	pop	r3
    3736:	2f 90       	pop	r2
    3738:	08 95       	ret

0000373a <_uploadMessageRc>:
    373a:	30 df       	rcall	.-416    	; 0x359c <_uploadMessage>
    373c:	89 cf       	rjmp	.-238    	; 0x3650 <_reply2ReturnCode>
    373e:	08 95       	ret

00003740 <lora_driver_flushBuffers>:
    3740:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <_serialReplyBufferHandle>
    3744:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <_serialReplyBufferHandle+0x1>
    3748:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <xStreamBufferReset>
    374c:	08 95       	ret

0000374e <lora_driver_initialise>:
    374e:	8f 92       	push	r8
    3750:	9f 92       	push	r9
    3752:	af 92       	push	r10
    3754:	cf 92       	push	r12
    3756:	ef 92       	push	r14
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	c8 2f       	mov	r28, r24
    3760:	8b 01       	movw	r16, r22
    3762:	41 e0       	ldi	r20, 0x01	; 1
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	88 ec       	ldi	r24, 0xC8	; 200
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	0e 94 23 08 	call	0x1046	; 0x1046 <xStreamBufferGenericCreate>
    3770:	90 93 cd 15 	sts	0x15CD, r25	; 0x8015cd <_serialReplyBufferHandle+0x1>
    3774:	80 93 cc 15 	sts	0x15CC, r24	; 0x8015cc <_serialReplyBufferHandle>
    3778:	10 93 cb 15 	sts	0x15CB, r17	; 0x8015cb <_downlinkMessageBuffer+0x1>
    377c:	00 93 ca 15 	sts	0x15CA, r16	; 0x8015ca <_downlinkMessageBuffer>
    3780:	0f 2e       	mov	r0, r31
    3782:	f8 e8       	ldi	r31, 0x88	; 136
    3784:	8f 2e       	mov	r8, r31
    3786:	fa e1       	ldi	r31, 0x1A	; 26
    3788:	9f 2e       	mov	r9, r31
    378a:	f0 2d       	mov	r31, r0
    378c:	68 94       	set
    378e:	aa 24       	eor	r10, r10
    3790:	a6 f8       	bld	r10, 6
    3792:	68 94       	set
    3794:	cc 24       	eor	r12, r12
    3796:	c6 f8       	bld	r12, 6
    3798:	e1 2c       	mov	r14, r1
    379a:	00 e0       	ldi	r16, 0x00	; 0
    379c:	23 e0       	ldi	r18, 0x03	; 3
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	51 ee       	ldi	r21, 0xE1	; 225
    37a2:	60 e0       	ldi	r22, 0x00	; 0
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	8c 2f       	mov	r24, r28
    37a8:	1e d3       	rcall	.+1596   	; 0x3de6 <serial_create>
    37aa:	90 93 cf 15 	sts	0x15CF, r25	; 0x8015cf <_rn2483_serial+0x1>
    37ae:	80 93 ce 15 	sts	0x15CE, r24	; 0x8015ce <_rn2483_serial>
    37b2:	e7 e0       	ldi	r30, 0x07	; 7
    37b4:	f1 e0       	ldi	r31, 0x01	; 1
    37b6:	80 81       	ld	r24, Z
    37b8:	80 61       	ori	r24, 0x10	; 16
    37ba:	80 83       	st	Z, r24
    37bc:	cf 91       	pop	r28
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	ef 90       	pop	r14
    37c4:	cf 90       	pop	r12
    37c6:	af 90       	pop	r10
    37c8:	9f 90       	pop	r9
    37ca:	8f 90       	pop	r8
    37cc:	08 95       	ret

000037ce <lora_driver_resetRn2483>:
    37ce:	88 23       	and	r24, r24
    37d0:	31 f0       	breq	.+12     	; 0x37de <lora_driver_resetRn2483+0x10>
    37d2:	e8 e0       	ldi	r30, 0x08	; 8
    37d4:	f1 e0       	ldi	r31, 0x01	; 1
    37d6:	80 81       	ld	r24, Z
    37d8:	8f 7e       	andi	r24, 0xEF	; 239
    37da:	80 83       	st	Z, r24
    37dc:	08 95       	ret
    37de:	e8 e0       	ldi	r30, 0x08	; 8
    37e0:	f1 e0       	ldi	r31, 0x01	; 1
    37e2:	80 81       	ld	r24, Z
    37e4:	80 61       	ori	r24, 0x10	; 16
    37e6:	80 83       	st	Z, r24
    37e8:	08 95       	ret

000037ea <lora_driver_rn2483FactoryReset>:
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	88 e1       	ldi	r24, 0x18	; 24
    37f0:	94 e0       	ldi	r25, 0x04	; 4
    37f2:	d4 de       	rcall	.-600    	; 0x359c <_uploadMessage>
    37f4:	e5 e5       	ldi	r30, 0x55	; 85
    37f6:	f6 e1       	ldi	r31, 0x16	; 22
    37f8:	01 90       	ld	r0, Z+
    37fa:	00 20       	and	r0, r0
    37fc:	e9 f7       	brne	.-6      	; 0x37f8 <lora_driver_rn2483FactoryReset+0xe>
    37fe:	31 97       	sbiw	r30, 0x01	; 1
    3800:	e5 55       	subi	r30, 0x55	; 85
    3802:	f6 41       	sbci	r31, 0x16	; 22
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	75 97       	sbiw	r30, 0x15	; 21
    3808:	08 f0       	brcs	.+2      	; 0x380c <lora_driver_rn2483FactoryReset+0x22>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	08 95       	ret

0000380e <lora_driver_getRn2483Hweui>:
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	ec 01       	movw	r28, r24
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	89 e2       	ldi	r24, 0x29	; 41
    381a:	94 e0       	ldi	r25, 0x04	; 4
    381c:	bf de       	rcall	.-642    	; 0x359c <_uploadMessage>
    381e:	e5 e5       	ldi	r30, 0x55	; 85
    3820:	f6 e1       	ldi	r31, 0x16	; 22
    3822:	01 90       	ld	r0, Z+
    3824:	00 20       	and	r0, r0
    3826:	e9 f7       	brne	.-6      	; 0x3822 <lora_driver_getRn2483Hweui+0x14>
    3828:	e6 56       	subi	r30, 0x66	; 102
    382a:	f6 41       	sbci	r31, 0x16	; 22
    382c:	39 f4       	brne	.+14     	; 0x383c <lora_driver_getRn2483Hweui+0x2e>
    382e:	65 e5       	ldi	r22, 0x55	; 85
    3830:	76 e1       	ldi	r23, 0x16	; 22
    3832:	ce 01       	movw	r24, r28
    3834:	0e 94 6d 29 	call	0x52da	; 0x52da <strcpy>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <lora_driver_getRn2483Hweui+0x32>
    383c:	18 82       	st	Y, r1
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <lora_driver_setDeviceIdentifier>:
    3846:	fc 01       	movw	r30, r24
    3848:	01 90       	ld	r0, Z+
    384a:	00 20       	and	r0, r0
    384c:	e9 f7       	brne	.-6      	; 0x3848 <lora_driver_setDeviceIdentifier+0x2>
    384e:	9f 01       	movw	r18, r30
    3850:	21 51       	subi	r18, 0x11	; 17
    3852:	31 09       	sbc	r19, r1
    3854:	28 17       	cp	r18, r24
    3856:	39 07       	cpc	r19, r25
    3858:	29 f4       	brne	.+10     	; 0x3864 <lora_driver_setDeviceIdentifier+0x1e>
    385a:	bc 01       	movw	r22, r24
    385c:	87 e5       	ldi	r24, 0x57	; 87
    385e:	94 e0       	ldi	r25, 0x04	; 4
    3860:	6c cf       	rjmp	.-296    	; 0x373a <_uploadMessageRc>
    3862:	08 95       	ret
    3864:	89 e0       	ldi	r24, 0x09	; 9
    3866:	08 95       	ret

00003868 <lora_driver_setApplicationIdentifier>:
    3868:	fc 01       	movw	r30, r24
    386a:	01 90       	ld	r0, Z+
    386c:	00 20       	and	r0, r0
    386e:	e9 f7       	brne	.-6      	; 0x386a <lora_driver_setApplicationIdentifier+0x2>
    3870:	9f 01       	movw	r18, r30
    3872:	21 51       	subi	r18, 0x11	; 17
    3874:	31 09       	sbc	r19, r1
    3876:	28 17       	cp	r18, r24
    3878:	39 07       	cpc	r19, r25
    387a:	29 f4       	brne	.+10     	; 0x3886 <lora_driver_setApplicationIdentifier+0x1e>
    387c:	bc 01       	movw	r22, r24
    387e:	86 e6       	ldi	r24, 0x66	; 102
    3880:	94 e0       	ldi	r25, 0x04	; 4
    3882:	5b cf       	rjmp	.-330    	; 0x373a <_uploadMessageRc>
    3884:	08 95       	ret
    3886:	89 e0       	ldi	r24, 0x09	; 9
    3888:	08 95       	ret

0000388a <lora_driver_setApplicationKey>:
    388a:	fc 01       	movw	r30, r24
    388c:	01 90       	ld	r0, Z+
    388e:	00 20       	and	r0, r0
    3890:	e9 f7       	brne	.-6      	; 0x388c <lora_driver_setApplicationKey+0x2>
    3892:	9f 01       	movw	r18, r30
    3894:	21 52       	subi	r18, 0x21	; 33
    3896:	31 09       	sbc	r19, r1
    3898:	28 17       	cp	r18, r24
    389a:	39 07       	cpc	r19, r25
    389c:	29 f4       	brne	.+10     	; 0x38a8 <lora_driver_setApplicationKey+0x1e>
    389e:	bc 01       	movw	r22, r24
    38a0:	85 e7       	ldi	r24, 0x75	; 117
    38a2:	94 e0       	ldi	r25, 0x04	; 4
    38a4:	4a cf       	rjmp	.-364    	; 0x373a <_uploadMessageRc>
    38a6:	08 95       	ret
    38a8:	89 e0       	ldi	r24, 0x09	; 9
    38aa:	08 95       	ret

000038ac <lora_driver_saveMac>:
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	84 eb       	ldi	r24, 0xB4	; 180
    38b2:	94 e0       	ldi	r25, 0x04	; 4
    38b4:	42 cf       	rjmp	.-380    	; 0x373a <_uploadMessageRc>
    38b6:	08 95       	ret

000038b8 <lora_driver_join>:
    38b8:	0f 93       	push	r16
    38ba:	1f 93       	push	r17
    38bc:	e8 2f       	mov	r30, r24
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	ee 0f       	add	r30, r30
    38c2:	ff 1f       	adc	r31, r31
    38c4:	e2 57       	subi	r30, 0x72	; 114
    38c6:	f9 4f       	sbci	r31, 0xF9	; 249
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	8d eb       	ldi	r24, 0xBD	; 189
    38ce:	94 e0       	ldi	r25, 0x04	; 4
    38d0:	34 df       	rcall	.-408    	; 0x373a <_uploadMessageRc>
    38d2:	81 11       	cpse	r24, r1
    38d4:	14 c0       	rjmp	.+40     	; 0x38fe <lora_driver_join+0x46>
    38d6:	08 e2       	ldi	r16, 0x28	; 40
    38d8:	15 e0       	ldi	r17, 0x05	; 5
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4d e2       	ldi	r20, 0x2D	; 45
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	65 e5       	ldi	r22, 0x55	; 85
    38e4:	76 e1       	ldi	r23, 0x16	; 22
    38e6:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <_serialReplyBufferHandle>
    38ea:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <_serialReplyBufferHandle+0x1>
    38ee:	0e 94 8c 09 	call	0x1318	; 0x1318 <xStreamBufferReceive>
    38f2:	88 23       	and	r24, r24
    38f4:	21 f0       	breq	.+8      	; 0x38fe <lora_driver_join+0x46>
    38f6:	85 e5       	ldi	r24, 0x55	; 85
    38f8:	96 e1       	ldi	r25, 0x16	; 22
    38fa:	aa de       	rcall	.-684    	; 0x3650 <_reply2ReturnCode>
    38fc:	03 c0       	rjmp	.+6      	; 0x3904 <lora_driver_join+0x4c>
    38fe:	85 e5       	ldi	r24, 0x55	; 85
    3900:	96 e1       	ldi	r25, 0x16	; 22
    3902:	a6 de       	rcall	.-692    	; 0x3650 <_reply2ReturnCode>
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	08 95       	ret

0000390a <lora_driver_sendUploadMessage>:
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	1f 92       	push	r1
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	db 01       	movw	r26, r22
    391a:	11 96       	adiw	r26, 0x01	; 1
    391c:	9c 91       	ld	r25, X
    391e:	11 97       	sbiw	r26, 0x01	; 1
    3920:	95 31       	cpi	r25, 0x15	; 21
    3922:	08 f0       	brcs	.+2      	; 0x3926 <lora_driver_sendUploadMessage+0x1c>
    3924:	b4 c0       	rjmp	.+360    	; 0x3a8e <lora_driver_sendUploadMessage+0x184>
    3926:	99 23       	and	r25, r25
    3928:	81 f1       	breq	.+96     	; 0x398a <lora_driver_sendUploadMessage+0x80>
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	27 2f       	mov	r18, r23
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	46 2f       	mov	r20, r22
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	fd 01       	movw	r30, r26
    3938:	e4 0f       	add	r30, r20
    393a:	f5 1f       	adc	r31, r21
    393c:	92 81       	ldd	r25, Z+2	; 0x02
    393e:	92 95       	swap	r25
    3940:	9f 70       	andi	r25, 0x0F	; 15
    3942:	9a 30       	cpi	r25, 0x0A	; 10
    3944:	10 f0       	brcs	.+4      	; 0x394a <lora_driver_sendUploadMessage+0x40>
    3946:	99 5c       	subi	r25, 0xC9	; 201
    3948:	01 c0       	rjmp	.+2      	; 0x394c <lora_driver_sendUploadMessage+0x42>
    394a:	90 5d       	subi	r25, 0xD0	; 208
    394c:	f9 01       	movw	r30, r18
    394e:	ea 51       	subi	r30, 0x1A	; 26
    3950:	fa 4e       	sbci	r31, 0xEA	; 234
    3952:	90 83       	st	Z, r25
    3954:	2f 5f       	subi	r18, 0xFF	; 255
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	fd 01       	movw	r30, r26
    395a:	e4 0f       	add	r30, r20
    395c:	f5 1f       	adc	r31, r21
    395e:	92 81       	ldd	r25, Z+2	; 0x02
    3960:	9f 70       	andi	r25, 0x0F	; 15
    3962:	49 2f       	mov	r20, r25
    3964:	50 e0       	ldi	r21, 0x00	; 0
    3966:	4a 30       	cpi	r20, 0x0A	; 10
    3968:	51 05       	cpc	r21, r1
    396a:	14 f0       	brlt	.+4      	; 0x3970 <lora_driver_sendUploadMessage+0x66>
    396c:	99 5c       	subi	r25, 0xC9	; 201
    396e:	01 c0       	rjmp	.+2      	; 0x3972 <lora_driver_sendUploadMessage+0x68>
    3970:	90 5d       	subi	r25, 0xD0	; 208
    3972:	f9 01       	movw	r30, r18
    3974:	ea 51       	subi	r30, 0x1A	; 26
    3976:	fa 4e       	sbci	r31, 0xEA	; 234
    3978:	90 83       	st	Z, r25
    397a:	7e 5f       	subi	r23, 0xFE	; 254
    397c:	6f 5f       	subi	r22, 0xFF	; 255
    397e:	11 96       	adiw	r26, 0x01	; 1
    3980:	9c 91       	ld	r25, X
    3982:	11 97       	sbiw	r26, 0x01	; 1
    3984:	69 17       	cp	r22, r25
    3986:	98 f2       	brcs	.-90     	; 0x392e <lora_driver_sendUploadMessage+0x24>
    3988:	01 c0       	rjmp	.+2      	; 0x398c <lora_driver_sendUploadMessage+0x82>
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	e7 2f       	mov	r30, r23
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	ea 51       	subi	r30, 0x1A	; 26
    3992:	fa 4e       	sbci	r31, 0xEA	; 234
    3994:	10 82       	st	Z, r1
    3996:	4c 91       	ld	r20, X
    3998:	81 11       	cpse	r24, r1
    399a:	03 c0       	rjmp	.+6      	; 0x39a2 <lora_driver_sendUploadMessage+0x98>
    399c:	86 ec       	ldi	r24, 0xC6	; 198
    399e:	94 e0       	ldi	r25, 0x04	; 4
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <lora_driver_sendUploadMessage+0x9c>
    39a2:	88 ec       	ldi	r24, 0xC8	; 200
    39a4:	94 e0       	ldi	r25, 0x04	; 4
    39a6:	26 ee       	ldi	r18, 0xE6	; 230
    39a8:	35 e1       	ldi	r19, 0x15	; 21
    39aa:	3f 93       	push	r19
    39ac:	2f 93       	push	r18
    39ae:	1f 92       	push	r1
    39b0:	4f 93       	push	r20
    39b2:	9f 93       	push	r25
    39b4:	8f 93       	push	r24
    39b6:	8c ec       	ldi	r24, 0xCC	; 204
    39b8:	94 e0       	ldi	r25, 0x04	; 4
    39ba:	9f 93       	push	r25
    39bc:	8f 93       	push	r24
    39be:	88 e2       	ldi	r24, 0x28	; 40
    39c0:	96 e1       	ldi	r25, 0x16	; 22
    39c2:	9f 93       	push	r25
    39c4:	8f 93       	push	r24
    39c6:	0e 94 cf 29 	call	0x539e	; 0x539e <sprintf>
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	88 e2       	ldi	r24, 0x28	; 40
    39d0:	96 e1       	ldi	r25, 0x16	; 22
    39d2:	b3 de       	rcall	.-666    	; 0x373a <_uploadMessageRc>
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	81 11       	cpse	r24, r1
    39e0:	59 c0       	rjmp	.+178    	; 0x3a94 <lora_driver_sendUploadMessage+0x18a>
    39e2:	08 e2       	ldi	r16, 0x28	; 40
    39e4:	15 e0       	ldi	r17, 0x05	; 5
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	4d e2       	ldi	r20, 0x2D	; 45
    39ec:	50 e0       	ldi	r21, 0x00	; 0
    39ee:	65 e5       	ldi	r22, 0x55	; 85
    39f0:	76 e1       	ldi	r23, 0x16	; 22
    39f2:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <_serialReplyBufferHandle>
    39f6:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <_serialReplyBufferHandle+0x1>
    39fa:	0e 94 8c 09 	call	0x1318	; 0x1318 <xStreamBufferReceive>
    39fe:	88 23       	and	r24, r24
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <lora_driver_sendUploadMessage+0xfa>
    3a02:	47 c0       	rjmp	.+142    	; 0x3a92 <lora_driver_sendUploadMessage+0x188>
    3a04:	85 e5       	ldi	r24, 0x55	; 85
    3a06:	96 e1       	ldi	r25, 0x16	; 22
    3a08:	23 de       	rcall	.-954    	; 0x3650 <_reply2ReturnCode>
    3a0a:	8e 30       	cpi	r24, 0x0E	; 14
    3a0c:	09 f0       	breq	.+2      	; 0x3a10 <lora_driver_sendUploadMessage+0x106>
    3a0e:	42 c0       	rjmp	.+132    	; 0x3a94 <lora_driver_sendUploadMessage+0x18a>
    3a10:	87 e0       	ldi	r24, 0x07	; 7
    3a12:	89 83       	std	Y+1, r24	; 0x01
    3a14:	80 91 ca 15 	lds	r24, 0x15CA	; 0x8015ca <_downlinkMessageBuffer>
    3a18:	90 91 cb 15 	lds	r25, 0x15CB	; 0x8015cb <_downlinkMessageBuffer+0x1>
    3a1c:	89 2b       	or	r24, r25
    3a1e:	a9 f1       	breq	.+106    	; 0x3a8a <lora_driver_sendUploadMessage+0x180>
    3a20:	be 01       	movw	r22, r28
    3a22:	6f 5f       	subi	r22, 0xFF	; 255
    3a24:	7f 4f       	sbci	r23, 0xFF	; 255
    3a26:	85 e5       	ldi	r24, 0x55	; 85
    3a28:	96 e1       	ldi	r25, 0x16	; 22
    3a2a:	68 d1       	rcall	.+720    	; 0x3cfc <decode_port_no>
    3a2c:	80 93 d0 15 	sts	0x15D0, r24	; 0x8015d0 <_downlinkPayload>
    3a30:	e9 81       	ldd	r30, Y+1	; 0x01
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	eb 5a       	subi	r30, 0xAB	; 171
    3a36:	f9 4e       	sbci	r31, 0xE9	; 233
    3a38:	df 01       	movw	r26, r30
    3a3a:	0d 90       	ld	r0, X+
    3a3c:	00 20       	and	r0, r0
    3a3e:	e9 f7       	brne	.-6      	; 0x3a3a <lora_driver_sendUploadMessage+0x130>
    3a40:	11 97       	sbiw	r26, 0x01	; 1
    3a42:	ae 1b       	sub	r26, r30
    3a44:	bf 0b       	sbc	r27, r31
    3a46:	aa 23       	and	r26, r26
    3a48:	91 f0       	breq	.+36     	; 0x3a6e <lora_driver_sendUploadMessage+0x164>
    3a4a:	bb 27       	eor	r27, r27
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	9c 01       	movw	r18, r24
    3a52:	12 f4       	brpl	.+4      	; 0x3a58 <lora_driver_sendUploadMessage+0x14e>
    3a54:	2f 5f       	subi	r18, 0xFF	; 255
    3a56:	3f 4f       	sbci	r19, 0xFF	; 255
    3a58:	35 95       	asr	r19
    3a5a:	27 95       	ror	r18
    3a5c:	20 93 d1 15 	sts	0x15D1, r18	; 0x8015d1 <_downlinkPayload+0x1>
    3a60:	af 01       	movw	r20, r30
    3a62:	4f 5f       	subi	r20, 0xFF	; 255
    3a64:	5f 4f       	sbci	r21, 0xFF	; 255
    3a66:	64 e1       	ldi	r22, 0x14	; 20
    3a68:	82 ed       	ldi	r24, 0xD2	; 210
    3a6a:	95 e1       	ldi	r25, 0x15	; 21
    3a6c:	73 d1       	rcall	.+742    	; 0x3d54 <decode_hexadecimal_string_bytes>
    3a6e:	01 e0       	ldi	r16, 0x01	; 1
    3a70:	10 e0       	ldi	r17, 0x00	; 0
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	46 e1       	ldi	r20, 0x16	; 22
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	60 ed       	ldi	r22, 0xD0	; 208
    3a7c:	75 e1       	ldi	r23, 0x15	; 21
    3a7e:	80 91 ca 15 	lds	r24, 0x15CA	; 0x8015ca <_downlinkMessageBuffer>
    3a82:	90 91 cb 15 	lds	r25, 0x15CB	; 0x8015cb <_downlinkMessageBuffer+0x1>
    3a86:	0e 94 85 08 	call	0x110a	; 0x110a <xStreamBufferSend>
    3a8a:	8e e0       	ldi	r24, 0x0E	; 14
    3a8c:	03 c0       	rjmp	.+6      	; 0x3a94 <lora_driver_sendUploadMessage+0x18a>
    3a8e:	84 e1       	ldi	r24, 0x14	; 20
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <lora_driver_sendUploadMessage+0x18a>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	0f 90       	pop	r0
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	08 95       	ret

00003aa0 <lora_driver_setAdaptiveDataRate>:
    3aa0:	81 30       	cpi	r24, 0x01	; 1
    3aa2:	19 f0       	breq	.+6      	; 0x3aaa <lora_driver_setAdaptiveDataRate+0xa>
    3aa4:	6c ed       	ldi	r22, 0xDC	; 220
    3aa6:	74 e0       	ldi	r23, 0x04	; 4
    3aa8:	02 c0       	rjmp	.+4      	; 0x3aae <lora_driver_setAdaptiveDataRate+0xe>
    3aaa:	65 eb       	ldi	r22, 0xB5	; 181
    3aac:	75 e0       	ldi	r23, 0x05	; 5
    3aae:	80 ee       	ldi	r24, 0xE0	; 224
    3ab0:	94 e0       	ldi	r25, 0x04	; 4
    3ab2:	43 ce       	rjmp	.-890    	; 0x373a <_uploadMessageRc>
    3ab4:	08 95       	ret

00003ab6 <lora_driver_setReceiveDelay>:
    3ab6:	9f 93       	push	r25
    3ab8:	8f 93       	push	r24
    3aba:	81 e1       	ldi	r24, 0x11	; 17
    3abc:	95 e0       	ldi	r25, 0x05	; 5
    3abe:	9f 93       	push	r25
    3ac0:	8f 93       	push	r24
    3ac2:	88 e2       	ldi	r24, 0x28	; 40
    3ac4:	96 e1       	ldi	r25, 0x16	; 22
    3ac6:	9f 93       	push	r25
    3ac8:	8f 93       	push	r24
    3aca:	0e 94 cf 29 	call	0x539e	; 0x539e <sprintf>
    3ace:	60 e0       	ldi	r22, 0x00	; 0
    3ad0:	70 e0       	ldi	r23, 0x00	; 0
    3ad2:	88 e2       	ldi	r24, 0x28	; 40
    3ad4:	96 e1       	ldi	r25, 0x16	; 22
    3ad6:	31 de       	rcall	.-926    	; 0x373a <_uploadMessageRc>
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	08 95       	ret

00003ae6 <lora_driver_configureToEu868>:
    3ae6:	2f 92       	push	r2
    3ae8:	3f 92       	push	r3
    3aea:	4f 92       	push	r4
    3aec:	5f 92       	push	r5
    3aee:	6f 92       	push	r6
    3af0:	7f 92       	push	r7
    3af2:	8f 92       	push	r8
    3af4:	9f 92       	push	r9
    3af6:	af 92       	push	r10
    3af8:	bf 92       	push	r11
    3afa:	cf 92       	push	r12
    3afc:	df 92       	push	r13
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	a0 97       	sbiw	r28, 0x20	; 32
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	6e e3       	ldi	r22, 0x3E	; 62
    3b1c:	75 e0       	ldi	r23, 0x05	; 5
    3b1e:	8a e4       	ldi	r24, 0x4A	; 74
    3b20:	95 e0       	ldi	r25, 0x05	; 5
    3b22:	3c dd       	rcall	.-1416   	; 0x359c <_uploadMessage>
    3b24:	95 dd       	rcall	.-1238   	; 0x3650 <_reply2ReturnCode>
    3b26:	81 11       	cpse	r24, r1
    3b28:	a3 c0       	rjmp	.+326    	; 0x3c70 <lora_driver_configureToEu868+0x18a>
    3b2a:	80 e2       	ldi	r24, 0x20	; 32
    3b2c:	e2 e2       	ldi	r30, 0x22	; 34
    3b2e:	f2 e0       	ldi	r31, 0x02	; 2
    3b30:	de 01       	movw	r26, r28
    3b32:	11 96       	adiw	r26, 0x01	; 1
    3b34:	01 90       	ld	r0, Z+
    3b36:	0d 92       	st	X+, r0
    3b38:	8a 95       	dec	r24
    3b3a:	e1 f7       	brne	.-8      	; 0x3b34 <lora_driver_configureToEu868+0x4e>
    3b3c:	9e 01       	movw	r18, r28
    3b3e:	2f 5f       	subi	r18, 0xFF	; 255
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	69 01       	movw	r12, r18
    3b44:	e1 2c       	mov	r14, r1
    3b46:	f1 2c       	mov	r15, r1
    3b48:	0f 2e       	mov	r0, r31
    3b4a:	f6 e5       	ldi	r31, 0x56	; 86
    3b4c:	af 2e       	mov	r10, r31
    3b4e:	f5 e0       	ldi	r31, 0x05	; 5
    3b50:	bf 2e       	mov	r11, r31
    3b52:	f0 2d       	mov	r31, r0
    3b54:	08 e2       	ldi	r16, 0x28	; 40
    3b56:	16 e1       	ldi	r17, 0x16	; 22
    3b58:	0f 2e       	mov	r0, r31
    3b5a:	ff e6       	ldi	r31, 0x6F	; 111
    3b5c:	4f 2e       	mov	r4, r31
    3b5e:	f5 e0       	ldi	r31, 0x05	; 5
    3b60:	5f 2e       	mov	r5, r31
    3b62:	f0 2d       	mov	r31, r0
    3b64:	0f 2e       	mov	r0, r31
    3b66:	f6 e8       	ldi	r31, 0x86	; 134
    3b68:	8f 2e       	mov	r8, r31
    3b6a:	f5 e0       	ldi	r31, 0x05	; 5
    3b6c:	9f 2e       	mov	r9, r31
    3b6e:	f0 2d       	mov	r31, r0
    3b70:	0f 2e       	mov	r0, r31
    3b72:	f0 ea       	ldi	r31, 0xA0	; 160
    3b74:	6f 2e       	mov	r6, r31
    3b76:	f5 e0       	ldi	r31, 0x05	; 5
    3b78:	7f 2e       	mov	r7, r31
    3b7a:	f0 2d       	mov	r31, r0
    3b7c:	3e 2c       	mov	r3, r14
    3b7e:	2f 2c       	mov	r2, r15
    3b80:	ff 92       	push	r15
    3b82:	ef 92       	push	r14
    3b84:	bf 92       	push	r11
    3b86:	af 92       	push	r10
    3b88:	1f 93       	push	r17
    3b8a:	0f 93       	push	r16
    3b8c:	0e 94 cf 29 	call	0x539e	; 0x539e <sprintf>
    3b90:	60 e0       	ldi	r22, 0x00	; 0
    3b92:	70 e0       	ldi	r23, 0x00	; 0
    3b94:	c8 01       	movw	r24, r16
    3b96:	02 dd       	rcall	.-1532   	; 0x359c <_uploadMessage>
    3b98:	5b dd       	rcall	.-1354   	; 0x3650 <_reply2ReturnCode>
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	81 11       	cpse	r24, r1
    3ba8:	63 c0       	rjmp	.+198    	; 0x3c70 <lora_driver_configureToEu868+0x18a>
    3baa:	32 e0       	ldi	r19, 0x02	; 2
    3bac:	3e 15       	cp	r19, r14
    3bae:	e8 f4       	brcc	.+58     	; 0x3bea <lora_driver_configureToEu868+0x104>
    3bb0:	f6 01       	movw	r30, r12
    3bb2:	83 81       	ldd	r24, Z+3	; 0x03
    3bb4:	8f 93       	push	r24
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	8f 93       	push	r24
    3bba:	81 81       	ldd	r24, Z+1	; 0x01
    3bbc:	8f 93       	push	r24
    3bbe:	80 81       	ld	r24, Z
    3bc0:	8f 93       	push	r24
    3bc2:	ff 92       	push	r15
    3bc4:	ef 92       	push	r14
    3bc6:	5f 92       	push	r5
    3bc8:	4f 92       	push	r4
    3bca:	1f 93       	push	r17
    3bcc:	0f 93       	push	r16
    3bce:	0e 94 cf 29 	call	0x539e	; 0x539e <sprintf>
    3bd2:	60 e0       	ldi	r22, 0x00	; 0
    3bd4:	70 e0       	ldi	r23, 0x00	; 0
    3bd6:	c8 01       	movw	r24, r16
    3bd8:	e1 dc       	rcall	.-1598   	; 0x359c <_uploadMessage>
    3bda:	3a dd       	rcall	.-1420   	; 0x3650 <_reply2ReturnCode>
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	f8 94       	cli
    3be0:	de bf       	out	0x3e, r29	; 62
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	cd bf       	out	0x3d, r28	; 61
    3be6:	81 11       	cpse	r24, r1
    3be8:	43 c0       	rjmp	.+134    	; 0x3c70 <lora_driver_configureToEu868+0x18a>
    3bea:	2f 92       	push	r2
    3bec:	3f 92       	push	r3
    3bee:	9f 92       	push	r9
    3bf0:	8f 92       	push	r8
    3bf2:	1f 93       	push	r17
    3bf4:	0f 93       	push	r16
    3bf6:	0e 94 cf 29 	call	0x539e	; 0x539e <sprintf>
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	c8 01       	movw	r24, r16
    3c00:	cd dc       	rcall	.-1638   	; 0x359c <_uploadMessage>
    3c02:	26 dd       	rcall	.-1460   	; 0x3650 <_reply2ReturnCode>
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	81 11       	cpse	r24, r1
    3c12:	2e c0       	rjmp	.+92     	; 0x3c70 <lora_driver_configureToEu868+0x18a>
    3c14:	2f 92       	push	r2
    3c16:	3f 92       	push	r3
    3c18:	7f 92       	push	r7
    3c1a:	6f 92       	push	r6
    3c1c:	1f 93       	push	r17
    3c1e:	0f 93       	push	r16
    3c20:	0e 94 cf 29 	call	0x539e	; 0x539e <sprintf>
    3c24:	60 e0       	ldi	r22, 0x00	; 0
    3c26:	70 e0       	ldi	r23, 0x00	; 0
    3c28:	c8 01       	movw	r24, r16
    3c2a:	b8 dc       	rcall	.-1680   	; 0x359c <_uploadMessage>
    3c2c:	11 dd       	rcall	.-1502   	; 0x3650 <_reply2ReturnCode>
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	19 c0       	rjmp	.+50     	; 0x3c70 <lora_driver_configureToEu868+0x18a>
    3c3e:	3f ef       	ldi	r19, 0xFF	; 255
    3c40:	e3 1a       	sub	r14, r19
    3c42:	f3 0a       	sbc	r15, r19
    3c44:	84 e0       	ldi	r24, 0x04	; 4
    3c46:	c8 0e       	add	r12, r24
    3c48:	d1 1c       	adc	r13, r1
    3c4a:	98 e0       	ldi	r25, 0x08	; 8
    3c4c:	e9 16       	cp	r14, r25
    3c4e:	f1 04       	cpc	r15, r1
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <lora_driver_configureToEu868+0x16e>
    3c52:	94 cf       	rjmp	.-216    	; 0x3b7c <lora_driver_configureToEu868+0x96>
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	70 e0       	ldi	r23, 0x00	; 0
    3c58:	88 eb       	ldi	r24, 0xB8	; 184
    3c5a:	95 e0       	ldi	r25, 0x05	; 5
    3c5c:	9f dc       	rcall	.-1730   	; 0x359c <_uploadMessage>
    3c5e:	f8 dc       	rcall	.-1552   	; 0x3650 <_reply2ReturnCode>
    3c60:	81 11       	cpse	r24, r1
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <lora_driver_configureToEu868+0x18a>
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	70 e0       	ldi	r23, 0x00	; 0
    3c68:	89 ec       	ldi	r24, 0xC9	; 201
    3c6a:	95 e0       	ldi	r25, 0x05	; 5
    3c6c:	97 dc       	rcall	.-1746   	; 0x359c <_uploadMessage>
    3c6e:	f0 dc       	rcall	.-1568   	; 0x3650 <_reply2ReturnCode>
    3c70:	a0 96       	adiw	r28, 0x20	; 32
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	ff 90       	pop	r15
    3c86:	ef 90       	pop	r14
    3c88:	df 90       	pop	r13
    3c8a:	cf 90       	pop	r12
    3c8c:	bf 90       	pop	r11
    3c8e:	af 90       	pop	r10
    3c90:	9f 90       	pop	r9
    3c92:	8f 90       	pop	r8
    3c94:	7f 90       	pop	r7
    3c96:	6f 90       	pop	r6
    3c98:	5f 90       	pop	r5
    3c9a:	4f 90       	pop	r4
    3c9c:	3f 90       	pop	r3
    3c9e:	2f 90       	pop	r2
    3ca0:	08 95       	ret

00003ca2 <lora_driver_setOtaaIdentity>:
    3ca2:	ef 92       	push	r14
    3ca4:	ff 92       	push	r15
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	ec 01       	movw	r28, r24
    3cb0:	8b 01       	movw	r16, r22
    3cb2:	7a 01       	movw	r14, r20
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	f4 de       	rcall	.-536    	; 0x3aa0 <lora_driver_setAdaptiveDataRate>
    3cb8:	81 11       	cpse	r24, r1
    3cba:	0d c0       	rjmp	.+26     	; 0x3cd6 <lora_driver_setOtaaIdentity+0x34>
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	d4 dd       	rcall	.-1112   	; 0x3868 <lora_driver_setApplicationIdentifier>
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	09 c0       	rjmp	.+18     	; 0x3cd6 <lora_driver_setOtaaIdentity+0x34>
    3cc4:	c8 01       	movw	r24, r16
    3cc6:	e1 dd       	rcall	.-1086   	; 0x388a <lora_driver_setApplicationKey>
    3cc8:	81 11       	cpse	r24, r1
    3cca:	05 c0       	rjmp	.+10     	; 0x3cd6 <lora_driver_setOtaaIdentity+0x34>
    3ccc:	c7 01       	movw	r24, r14
    3cce:	bb dd       	rcall	.-1162   	; 0x3846 <lora_driver_setDeviceIdentifier>
    3cd0:	81 11       	cpse	r24, r1
    3cd2:	01 c0       	rjmp	.+2      	; 0x3cd6 <lora_driver_setOtaaIdentity+0x34>
    3cd4:	eb dd       	rcall	.-1066   	; 0x38ac <lora_driver_saveMac>
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	ff 90       	pop	r15
    3ce0:	ef 90       	pop	r14
    3ce2:	08 95       	ret

00003ce4 <lora_driver_mapReturnCodeToText>:
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	ee 0f       	add	r30, r30
    3cea:	ff 1f       	adc	r31, r31
    3cec:	8e 0f       	add	r24, r30
    3cee:	9f 1f       	adc	r25, r31
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	ee 56       	subi	r30, 0x6E	; 110
    3cf4:	f9 4f       	sbci	r31, 0xF9	; 249
    3cf6:	81 81       	ldd	r24, Z+1	; 0x01
    3cf8:	92 81       	ldd	r25, Z+2	; 0x02
    3cfa:	08 95       	ret

00003cfc <decode_port_no>:
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	29 f1       	breq	.+74     	; 0x3d4c <decode_port_no+0x50>
    3d02:	fb 01       	movw	r30, r22
    3d04:	20 81       	ld	r18, Z
    3d06:	fc 01       	movw	r30, r24
    3d08:	01 90       	ld	r0, Z+
    3d0a:	00 20       	and	r0, r0
    3d0c:	e9 f7       	brne	.-6      	; 0x3d08 <decode_port_no+0xc>
    3d0e:	31 97       	sbiw	r30, 0x01	; 1
    3d10:	e8 1b       	sub	r30, r24
    3d12:	f9 0b       	sbc	r31, r25
    3d14:	82 2f       	mov	r24, r18
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	e8 17       	cp	r30, r24
    3d1a:	f9 07       	cpc	r31, r25
    3d1c:	c8 f0       	brcs	.+50     	; 0x3d50 <decode_port_no+0x54>
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	08 c0       	rjmp	.+16     	; 0x3d32 <decode_port_no+0x36>
    3d22:	88 0f       	add	r24, r24
    3d24:	38 2f       	mov	r19, r24
    3d26:	33 0f       	add	r19, r19
    3d28:	33 0f       	add	r19, r19
    3d2a:	83 0f       	add	r24, r19
    3d2c:	80 53       	subi	r24, 0x30	; 48
    3d2e:	89 0f       	add	r24, r25
    3d30:	2f 5f       	subi	r18, 0xFF	; 255
    3d32:	fd 01       	movw	r30, r26
    3d34:	e2 0f       	add	r30, r18
    3d36:	f1 1d       	adc	r31, r1
    3d38:	90 81       	ld	r25, Z
    3d3a:	30 ed       	ldi	r19, 0xD0	; 208
    3d3c:	39 0f       	add	r19, r25
    3d3e:	3a 30       	cpi	r19, 0x0A	; 10
    3d40:	10 f4       	brcc	.+4      	; 0x3d46 <decode_port_no+0x4a>
    3d42:	91 11       	cpse	r25, r1
    3d44:	ee cf       	rjmp	.-36     	; 0x3d22 <decode_port_no+0x26>
    3d46:	fb 01       	movw	r30, r22
    3d48:	20 83       	st	Z, r18
    3d4a:	08 95       	ret
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	08 95       	ret
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	08 95       	ret

00003d54 <decode_hexadecimal_string_bytes>:
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	ea 01       	movw	r28, r20
    3d60:	20 97       	sbiw	r28, 0x00	; 0
    3d62:	e1 f1       	breq	.+120    	; 0x3ddc <decode_hexadecimal_string_bytes+0x88>
    3d64:	fa 01       	movw	r30, r20
    3d66:	01 90       	ld	r0, Z+
    3d68:	00 20       	and	r0, r0
    3d6a:	e9 f7       	brne	.-6      	; 0x3d66 <decode_hexadecimal_string_bytes+0x12>
    3d6c:	31 97       	sbiw	r30, 0x01	; 1
    3d6e:	e4 1b       	sub	r30, r20
    3d70:	f5 0b       	sbc	r31, r21
    3d72:	32 97       	sbiw	r30, 0x02	; 2
    3d74:	10 f5       	brcc	.+68     	; 0x3dba <decode_hexadecimal_string_bytes+0x66>
    3d76:	32 c0       	rjmp	.+100    	; 0x3ddc <decode_hexadecimal_string_bytes+0x88>
    3d78:	8d 01       	movw	r16, r26
    3d7a:	04 0f       	add	r16, r20
    3d7c:	15 1f       	adc	r17, r21
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	ae 01       	movw	r20, r28
    3d82:	42 0f       	add	r20, r18
    3d84:	53 1f       	adc	r21, r19
    3d86:	fa 01       	movw	r30, r20
    3d88:	90 81       	ld	r25, Z
    3d8a:	91 34       	cpi	r25, 0x41	; 65
    3d8c:	28 f0       	brcs	.+10     	; 0x3d98 <decode_hexadecimal_string_bytes+0x44>
    3d8e:	97 53       	subi	r25, 0x37	; 55
    3d90:	59 2f       	mov	r21, r25
    3d92:	52 95       	swap	r21
    3d94:	50 7f       	andi	r21, 0xF0	; 240
    3d96:	03 c0       	rjmp	.+6      	; 0x3d9e <decode_hexadecimal_string_bytes+0x4a>
    3d98:	59 2f       	mov	r21, r25
    3d9a:	52 95       	swap	r21
    3d9c:	50 7f       	andi	r21, 0xF0	; 240
    3d9e:	2c 0f       	add	r18, r28
    3da0:	3d 1f       	adc	r19, r29
    3da2:	f9 01       	movw	r30, r18
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	91 34       	cpi	r25, 0x41	; 65
    3da8:	10 f0       	brcs	.+4      	; 0x3dae <decode_hexadecimal_string_bytes+0x5a>
    3daa:	97 53       	subi	r25, 0x37	; 55
    3dac:	01 c0       	rjmp	.+2      	; 0x3db0 <decode_hexadecimal_string_bytes+0x5c>
    3dae:	90 53       	subi	r25, 0x30	; 48
    3db0:	95 0f       	add	r25, r21
    3db2:	f8 01       	movw	r30, r16
    3db4:	90 83       	st	Z, r25
    3db6:	8f 5f       	subi	r24, 0xFF	; 255
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <decode_hexadecimal_string_bytes+0x68>
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	22 0f       	add	r18, r18
    3dc0:	48 2f       	mov	r20, r24
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	00 20       	and	r0, r0
    3dca:	e9 f7       	brne	.-6      	; 0x3dc6 <decode_hexadecimal_string_bytes+0x72>
    3dcc:	31 97       	sbiw	r30, 0x01	; 1
    3dce:	ec 1b       	sub	r30, r28
    3dd0:	fd 0b       	sbc	r31, r29
    3dd2:	4e 17       	cp	r20, r30
    3dd4:	5f 07       	cpc	r21, r31
    3dd6:	10 f4       	brcc	.+4      	; 0x3ddc <decode_hexadecimal_string_bytes+0x88>
    3dd8:	86 13       	cpse	r24, r22
    3dda:	ce cf       	rjmp	.-100    	; 0x3d78 <decode_hexadecimal_string_bytes+0x24>
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	1f 91       	pop	r17
    3de2:	0f 91       	pop	r16
    3de4:	08 95       	ret

00003de6 <serial_create>:
    3de6:	2f 92       	push	r2
    3de8:	3f 92       	push	r3
    3dea:	4f 92       	push	r4
    3dec:	5f 92       	push	r5
    3dee:	6f 92       	push	r6
    3df0:	7f 92       	push	r7
    3df2:	8f 92       	push	r8
    3df4:	9f 92       	push	r9
    3df6:	af 92       	push	r10
    3df8:	cf 92       	push	r12
    3dfa:	ef 92       	push	r14
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	f8 2e       	mov	r15, r24
    3e0c:	2a 01       	movw	r4, r20
    3e0e:	3b 01       	movw	r6, r22
    3e10:	88 e0       	ldi	r24, 0x08	; 8
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	0e 94 08 28 	call	0x5010	; 0x5010 <malloc>
    3e18:	8c 01       	movw	r16, r24
    3e1a:	8f 2d       	mov	r24, r15
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	fc 01       	movw	r30, r24
    3e20:	ee 0f       	add	r30, r30
    3e22:	ff 1f       	adc	r31, r31
    3e24:	ee 57       	subi	r30, 0x7E	; 126
    3e26:	f9 4e       	sbci	r31, 0xE9	; 233
    3e28:	11 83       	std	Z+1, r17	; 0x01
    3e2a:	00 83       	st	Z, r16
    3e2c:	01 15       	cp	r16, r1
    3e2e:	11 05       	cpc	r17, r1
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <serial_create+0x4e>
    3e32:	69 c0       	rjmp	.+210    	; 0x3f06 <serial_create+0x120>
    3e34:	88 0f       	add	r24, r24
    3e36:	99 1f       	adc	r25, r25
    3e38:	fc 01       	movw	r30, r24
    3e3a:	e5 5f       	subi	r30, 0xF5	; 245
    3e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    3e3e:	80 81       	ld	r24, Z
    3e40:	91 81       	ldd	r25, Z+1	; 0x01
    3e42:	d8 01       	movw	r26, r16
    3e44:	8d 93       	st	X+, r24
    3e46:	9c 93       	st	X, r25
    3e48:	8c 2d       	mov	r24, r12
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	88 0f       	add	r24, r24
    3e4e:	99 1f       	adc	r25, r25
    3e50:	88 0f       	add	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	0e 94 08 28 	call	0x5010	; 0x5010 <malloc>
    3e58:	1c 01       	movw	r2, r24
    3e5a:	86 e0       	ldi	r24, 0x06	; 6
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 08 28 	call	0x5010	; 0x5010 <malloc>
    3e62:	7c 01       	movw	r14, r24
    3e64:	4c 2d       	mov	r20, r12
    3e66:	b1 01       	movw	r22, r2
    3e68:	f0 d6       	rcall	.+3552   	; 0x4c4a <fifo_init>
    3e6a:	f8 01       	movw	r30, r16
    3e6c:	f5 82       	std	Z+5, r15	; 0x05
    3e6e:	e4 82       	std	Z+4, r14	; 0x04
    3e70:	8a 2d       	mov	r24, r10
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	0e 94 08 28 	call	0x5010	; 0x5010 <malloc>
    3e80:	1c 01       	movw	r2, r24
    3e82:	86 e0       	ldi	r24, 0x06	; 6
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	0e 94 08 28 	call	0x5010	; 0x5010 <malloc>
    3e8a:	7c 01       	movw	r14, r24
    3e8c:	4a 2d       	mov	r20, r10
    3e8e:	b1 01       	movw	r22, r2
    3e90:	dc d6       	rcall	.+3512   	; 0x4c4a <fifo_init>
    3e92:	d8 01       	movw	r26, r16
    3e94:	13 96       	adiw	r26, 0x03	; 3
    3e96:	fc 92       	st	X, r15
    3e98:	ee 92       	st	-X, r14
    3e9a:	12 97       	sbiw	r26, 0x02	; 2
    3e9c:	17 96       	adiw	r26, 0x07	; 7
    3e9e:	9c 92       	st	X, r9
    3ea0:	8e 92       	st	-X, r8
    3ea2:	16 97       	sbiw	r26, 0x06	; 6
    3ea4:	ff b6       	in	r15, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	ed 91       	ld	r30, X+
    3eaa:	fc 91       	ld	r31, X
    3eac:	11 97       	sbiw	r26, 0x01	; 1
    3eae:	36 97       	sbiw	r30, 0x06	; 6
    3eb0:	80 81       	ld	r24, Z
    3eb2:	82 60       	ori	r24, 0x02	; 2
    3eb4:	80 83       	st	Z, r24
    3eb6:	8d 90       	ld	r8, X+
    3eb8:	9c 90       	ld	r9, X
    3eba:	c3 01       	movw	r24, r6
    3ebc:	b2 01       	movw	r22, r4
    3ebe:	b3 d7       	rcall	.+3942   	; 0x4e26 <__floatunsisf>
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	51 e4       	ldi	r21, 0x41	; 65
    3ec8:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__mulsf3>
    3ecc:	9b 01       	movw	r18, r22
    3ece:	ac 01       	movw	r20, r24
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	74 e2       	ldi	r23, 0x24	; 36
    3ed4:	84 e7       	ldi	r24, 0x74	; 116
    3ed6:	9b e4       	ldi	r25, 0x4B	; 75
    3ed8:	3b d7       	rcall	.+3702   	; 0x4d50 <__divsf3>
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e8       	ldi	r20, 0x80	; 128
    3ee0:	5f e3       	ldi	r21, 0x3F	; 63
    3ee2:	cf d6       	rcall	.+3486   	; 0x4c82 <__subsf3>
    3ee4:	25 da       	rcall	.-2998   	; 0x3330 <__fixunssfsi>
    3ee6:	f4 01       	movw	r30, r8
    3ee8:	32 97       	sbiw	r30, 0x02	; 2
    3eea:	60 83       	st	Z, r22
    3eec:	d8 01       	movw	r26, r16
    3eee:	ed 91       	ld	r30, X+
    3ef0:	fc 91       	ld	r31, X
    3ef2:	11 97       	sbiw	r26, 0x01	; 1
    3ef4:	35 97       	sbiw	r30, 0x05	; 5
    3ef6:	88 e9       	ldi	r24, 0x98	; 152
    3ef8:	80 83       	st	Z, r24
    3efa:	ed 91       	ld	r30, X+
    3efc:	fc 91       	ld	r31, X
    3efe:	34 97       	sbiw	r30, 0x04	; 4
    3f00:	86 e0       	ldi	r24, 0x06	; 6
    3f02:	80 83       	st	Z, r24
    3f04:	ff be       	out	0x3f, r15	; 63
    3f06:	c8 01       	movw	r24, r16
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	1f 91       	pop	r17
    3f0e:	0f 91       	pop	r16
    3f10:	ff 90       	pop	r15
    3f12:	ef 90       	pop	r14
    3f14:	cf 90       	pop	r12
    3f16:	af 90       	pop	r10
    3f18:	9f 90       	pop	r9
    3f1a:	8f 90       	pop	r8
    3f1c:	7f 90       	pop	r7
    3f1e:	6f 90       	pop	r6
    3f20:	5f 90       	pop	r5
    3f22:	4f 90       	pop	r4
    3f24:	3f 90       	pop	r3
    3f26:	2f 90       	pop	r2
    3f28:	08 95       	ret

00003f2a <serial_sendByte>:
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	dc 01       	movw	r26, r24
    3f30:	89 2b       	or	r24, r25
    3f32:	01 f1       	breq	.+64     	; 0x3f74 <serial_sendByte+0x4a>
    3f34:	12 96       	adiw	r26, 0x02	; 2
    3f36:	ed 91       	ld	r30, X+
    3f38:	fc 91       	ld	r31, X
    3f3a:	13 97       	sbiw	r26, 0x03	; 3
    3f3c:	93 81       	ldd	r25, Z+3	; 0x03
    3f3e:	82 81       	ldd	r24, Z+2	; 0x02
    3f40:	25 81       	ldd	r18, Z+5	; 0x05
    3f42:	98 1b       	sub	r25, r24
    3f44:	92 23       	and	r25, r18
    3f46:	84 81       	ldd	r24, Z+4	; 0x04
    3f48:	98 17       	cp	r25, r24
    3f4a:	b1 f0       	breq	.+44     	; 0x3f78 <serial_sendByte+0x4e>
    3f4c:	83 81       	ldd	r24, Z+3	; 0x03
    3f4e:	26 95       	lsr	r18
    3f50:	28 23       	and	r18, r24
    3f52:	c0 81       	ld	r28, Z
    3f54:	d1 81       	ldd	r29, Z+1	; 0x01
    3f56:	c2 0f       	add	r28, r18
    3f58:	d1 1d       	adc	r29, r1
    3f5a:	68 83       	st	Y, r22
    3f5c:	8f 5f       	subi	r24, 0xFF	; 255
    3f5e:	95 81       	ldd	r25, Z+5	; 0x05
    3f60:	89 23       	and	r24, r25
    3f62:	83 83       	std	Z+3, r24	; 0x03
    3f64:	ed 91       	ld	r30, X+
    3f66:	fc 91       	ld	r31, X
    3f68:	35 97       	sbiw	r30, 0x05	; 5
    3f6a:	80 81       	ld	r24, Z
    3f6c:	80 62       	ori	r24, 0x20	; 32
    3f6e:	80 83       	st	Z, r24
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	03 c0       	rjmp	.+6      	; 0x3f7a <serial_sendByte+0x50>
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <serial_sendByte+0x50>
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	08 95       	ret

00003f80 <serial_sendBytes>:
    3f80:	ef 92       	push	r14
    3f82:	ff 92       	push	r15
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	7c 01       	movw	r14, r24
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <serial_sendBytes+0x14>
    3f92:	41 c0       	rjmp	.+130    	; 0x4016 <serial_sendBytes+0x96>
    3f94:	dc 01       	movw	r26, r24
    3f96:	12 96       	adiw	r26, 0x02	; 2
    3f98:	ed 91       	ld	r30, X+
    3f9a:	fc 91       	ld	r31, X
    3f9c:	13 97       	sbiw	r26, 0x03	; 3
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	82 81       	ldd	r24, Z+2	; 0x02
    3fa2:	98 1b       	sub	r25, r24
    3fa4:	85 81       	ldd	r24, Z+5	; 0x05
    3fa6:	98 23       	and	r25, r24
    3fa8:	84 81       	ldd	r24, Z+4	; 0x04
    3faa:	89 1b       	sub	r24, r25
    3fac:	86 17       	cp	r24, r22
    3fae:	a8 f1       	brcs	.+106    	; 0x401a <serial_sendBytes+0x9a>
    3fb0:	66 23       	and	r22, r22
    3fb2:	41 f1       	breq	.+80     	; 0x4004 <serial_sendBytes+0x84>
    3fb4:	84 2f       	mov	r24, r20
    3fb6:	95 2f       	mov	r25, r21
    3fb8:	dc 01       	movw	r26, r24
    3fba:	61 50       	subi	r22, 0x01	; 1
    3fbc:	46 2f       	mov	r20, r22
    3fbe:	50 e0       	ldi	r21, 0x00	; 0
    3fc0:	4f 5f       	subi	r20, 0xFF	; 255
    3fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc4:	48 0f       	add	r20, r24
    3fc6:	59 1f       	adc	r21, r25
    3fc8:	e7 01       	movw	r28, r14
    3fca:	ea 81       	ldd	r30, Y+2	; 0x02
    3fcc:	fb 81       	ldd	r31, Y+3	; 0x03
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	82 81       	ldd	r24, Z+2	; 0x02
    3fd2:	25 81       	ldd	r18, Z+5	; 0x05
    3fd4:	98 1b       	sub	r25, r24
    3fd6:	92 23       	and	r25, r18
    3fd8:	84 81       	ldd	r24, Z+4	; 0x04
    3fda:	98 17       	cp	r25, r24
    3fdc:	79 f0       	breq	.+30     	; 0x3ffc <serial_sendBytes+0x7c>
    3fde:	8c 91       	ld	r24, X
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	26 95       	lsr	r18
    3fe4:	29 23       	and	r18, r25
    3fe6:	60 81       	ld	r22, Z
    3fe8:	71 81       	ldd	r23, Z+1	; 0x01
    3fea:	8b 01       	movw	r16, r22
    3fec:	02 0f       	add	r16, r18
    3fee:	11 1d       	adc	r17, r1
    3ff0:	e8 01       	movw	r28, r16
    3ff2:	88 83       	st	Y, r24
    3ff4:	9f 5f       	subi	r25, 0xFF	; 255
    3ff6:	85 81       	ldd	r24, Z+5	; 0x05
    3ff8:	98 23       	and	r25, r24
    3ffa:	93 83       	std	Z+3, r25	; 0x03
    3ffc:	11 96       	adiw	r26, 0x01	; 1
    3ffe:	a4 17       	cp	r26, r20
    4000:	b5 07       	cpc	r27, r21
    4002:	11 f7       	brne	.-60     	; 0x3fc8 <serial_sendBytes+0x48>
    4004:	d7 01       	movw	r26, r14
    4006:	ed 91       	ld	r30, X+
    4008:	fc 91       	ld	r31, X
    400a:	35 97       	sbiw	r30, 0x05	; 5
    400c:	80 81       	ld	r24, Z
    400e:	80 62       	ori	r24, 0x20	; 32
    4010:	80 83       	st	Z, r24
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	03 c0       	rjmp	.+6      	; 0x401c <serial_sendBytes+0x9c>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	01 c0       	rjmp	.+2      	; 0x401c <serial_sendBytes+0x9c>
    401a:	82 e0       	ldi	r24, 0x02	; 2
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	1f 91       	pop	r17
    4022:	0f 91       	pop	r16
    4024:	ff 90       	pop	r15
    4026:	ef 90       	pop	r14
    4028:	08 95       	ret

0000402a <serial_getByte>:
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	d1 f0       	breq	.+52     	; 0x4062 <serial_getByte+0x38>
    402e:	dc 01       	movw	r26, r24
    4030:	14 96       	adiw	r26, 0x04	; 4
    4032:	ed 91       	ld	r30, X+
    4034:	fc 91       	ld	r31, X
    4036:	15 97       	sbiw	r26, 0x05	; 5
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	82 81       	ldd	r24, Z+2	; 0x02
    403c:	98 17       	cp	r25, r24
    403e:	99 f0       	breq	.+38     	; 0x4066 <serial_getByte+0x3c>
    4040:	92 81       	ldd	r25, Z+2	; 0x02
    4042:	85 81       	ldd	r24, Z+5	; 0x05
    4044:	86 95       	lsr	r24
    4046:	89 23       	and	r24, r25
    4048:	a0 81       	ld	r26, Z
    404a:	b1 81       	ldd	r27, Z+1	; 0x01
    404c:	a8 0f       	add	r26, r24
    404e:	b1 1d       	adc	r27, r1
    4050:	8c 91       	ld	r24, X
    4052:	db 01       	movw	r26, r22
    4054:	8c 93       	st	X, r24
    4056:	9f 5f       	subi	r25, 0xFF	; 255
    4058:	85 81       	ldd	r24, Z+5	; 0x05
    405a:	98 23       	and	r25, r24
    405c:	92 83       	std	Z+2, r25	; 0x02
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	08 95       	ret
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	08 95       	ret
    4066:	83 e0       	ldi	r24, 0x03	; 3
    4068:	08 95       	ret

0000406a <__vector_25>:
    406a:	1f 92       	push	r1
    406c:	0f 92       	push	r0
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	0f 92       	push	r0
    4072:	11 24       	eor	r1, r1
    4074:	0b b6       	in	r0, 0x3b	; 59
    4076:	0f 92       	push	r0
    4078:	2f 93       	push	r18
    407a:	3f 93       	push	r19
    407c:	4f 93       	push	r20
    407e:	5f 93       	push	r21
    4080:	6f 93       	push	r22
    4082:	7f 93       	push	r23
    4084:	8f 93       	push	r24
    4086:	9f 93       	push	r25
    4088:	af 93       	push	r26
    408a:	bf 93       	push	r27
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	ef 93       	push	r30
    4092:	ff 93       	push	r31
    4094:	a0 91 82 16 	lds	r26, 0x1682	; 0x801682 <_ser_handle>
    4098:	b0 91 83 16 	lds	r27, 0x1683	; 0x801683 <_ser_handle+0x1>
    409c:	10 97       	sbiw	r26, 0x00	; 0
    409e:	11 f1       	breq	.+68     	; 0x40e4 <__vector_25+0x7a>
    40a0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    40a4:	14 96       	adiw	r26, 0x04	; 4
    40a6:	ed 91       	ld	r30, X+
    40a8:	fc 91       	ld	r31, X
    40aa:	15 97       	sbiw	r26, 0x05	; 5
    40ac:	93 81       	ldd	r25, Z+3	; 0x03
    40ae:	82 81       	ldd	r24, Z+2	; 0x02
    40b0:	25 81       	ldd	r18, Z+5	; 0x05
    40b2:	98 1b       	sub	r25, r24
    40b4:	92 23       	and	r25, r18
    40b6:	84 81       	ldd	r24, Z+4	; 0x04
    40b8:	98 17       	cp	r25, r24
    40ba:	61 f0       	breq	.+24     	; 0x40d4 <__vector_25+0x6a>
    40bc:	83 81       	ldd	r24, Z+3	; 0x03
    40be:	26 95       	lsr	r18
    40c0:	28 23       	and	r18, r24
    40c2:	c0 81       	ld	r28, Z
    40c4:	d1 81       	ldd	r29, Z+1	; 0x01
    40c6:	c2 0f       	add	r28, r18
    40c8:	d1 1d       	adc	r29, r1
    40ca:	68 83       	st	Y, r22
    40cc:	8f 5f       	subi	r24, 0xFF	; 255
    40ce:	95 81       	ldd	r25, Z+5	; 0x05
    40d0:	89 23       	and	r24, r25
    40d2:	83 83       	std	Z+3, r24	; 0x03
    40d4:	16 96       	adiw	r26, 0x06	; 6
    40d6:	ed 91       	ld	r30, X+
    40d8:	fc 91       	ld	r31, X
    40da:	17 97       	sbiw	r26, 0x07	; 7
    40dc:	30 97       	sbiw	r30, 0x00	; 0
    40de:	11 f0       	breq	.+4      	; 0x40e4 <__vector_25+0x7a>
    40e0:	cd 01       	movw	r24, r26
    40e2:	19 95       	eicall
    40e4:	ff 91       	pop	r31
    40e6:	ef 91       	pop	r30
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	bf 91       	pop	r27
    40ee:	af 91       	pop	r26
    40f0:	9f 91       	pop	r25
    40f2:	8f 91       	pop	r24
    40f4:	7f 91       	pop	r23
    40f6:	6f 91       	pop	r22
    40f8:	5f 91       	pop	r21
    40fa:	4f 91       	pop	r20
    40fc:	3f 91       	pop	r19
    40fe:	2f 91       	pop	r18
    4100:	0f 90       	pop	r0
    4102:	0b be       	out	0x3b, r0	; 59
    4104:	0f 90       	pop	r0
    4106:	0f be       	out	0x3f, r0	; 63
    4108:	0f 90       	pop	r0
    410a:	1f 90       	pop	r1
    410c:	18 95       	reti

0000410e <__vector_26>:
    410e:	1f 92       	push	r1
    4110:	0f 92       	push	r0
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	0f 92       	push	r0
    4116:	11 24       	eor	r1, r1
    4118:	0b b6       	in	r0, 0x3b	; 59
    411a:	0f 92       	push	r0
    411c:	2f 93       	push	r18
    411e:	8f 93       	push	r24
    4120:	9f 93       	push	r25
    4122:	af 93       	push	r26
    4124:	bf 93       	push	r27
    4126:	ef 93       	push	r30
    4128:	ff 93       	push	r31
    412a:	e0 91 82 16 	lds	r30, 0x1682	; 0x801682 <_ser_handle>
    412e:	f0 91 83 16 	lds	r31, 0x1683	; 0x801683 <_ser_handle+0x1>
    4132:	30 97       	sbiw	r30, 0x00	; 0
    4134:	b9 f0       	breq	.+46     	; 0x4164 <__vector_26+0x56>
    4136:	02 80       	ldd	r0, Z+2	; 0x02
    4138:	f3 81       	ldd	r31, Z+3	; 0x03
    413a:	e0 2d       	mov	r30, r0
    413c:	93 81       	ldd	r25, Z+3	; 0x03
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	98 17       	cp	r25, r24
    4142:	b1 f0       	breq	.+44     	; 0x4170 <__vector_26+0x62>
    4144:	92 81       	ldd	r25, Z+2	; 0x02
    4146:	85 81       	ldd	r24, Z+5	; 0x05
    4148:	28 2f       	mov	r18, r24
    414a:	26 95       	lsr	r18
    414c:	29 23       	and	r18, r25
    414e:	a0 81       	ld	r26, Z
    4150:	b1 81       	ldd	r27, Z+1	; 0x01
    4152:	a2 0f       	add	r26, r18
    4154:	b1 1d       	adc	r27, r1
    4156:	2c 91       	ld	r18, X
    4158:	9f 5f       	subi	r25, 0xFF	; 255
    415a:	89 23       	and	r24, r25
    415c:	82 83       	std	Z+2, r24	; 0x02
    415e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4162:	0b c0       	rjmp	.+22     	; 0x417a <__vector_26+0x6c>
    4164:	e1 ec       	ldi	r30, 0xC1	; 193
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	80 81       	ld	r24, Z
    416a:	8f 7d       	andi	r24, 0xDF	; 223
    416c:	80 83       	st	Z, r24
    416e:	05 c0       	rjmp	.+10     	; 0x417a <__vector_26+0x6c>
    4170:	e1 ec       	ldi	r30, 0xC1	; 193
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	80 81       	ld	r24, Z
    4176:	8f 7d       	andi	r24, 0xDF	; 223
    4178:	80 83       	st	Z, r24
    417a:	ff 91       	pop	r31
    417c:	ef 91       	pop	r30
    417e:	bf 91       	pop	r27
    4180:	af 91       	pop	r26
    4182:	9f 91       	pop	r25
    4184:	8f 91       	pop	r24
    4186:	2f 91       	pop	r18
    4188:	0f 90       	pop	r0
    418a:	0b be       	out	0x3b, r0	; 59
    418c:	0f 90       	pop	r0
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	0f 90       	pop	r0
    4192:	1f 90       	pop	r1
    4194:	18 95       	reti

00004196 <__vector_36>:
    4196:	1f 92       	push	r1
    4198:	0f 92       	push	r0
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	0f 92       	push	r0
    419e:	11 24       	eor	r1, r1
    41a0:	0b b6       	in	r0, 0x3b	; 59
    41a2:	0f 92       	push	r0
    41a4:	2f 93       	push	r18
    41a6:	3f 93       	push	r19
    41a8:	4f 93       	push	r20
    41aa:	5f 93       	push	r21
    41ac:	6f 93       	push	r22
    41ae:	7f 93       	push	r23
    41b0:	8f 93       	push	r24
    41b2:	9f 93       	push	r25
    41b4:	af 93       	push	r26
    41b6:	bf 93       	push	r27
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	ef 93       	push	r30
    41be:	ff 93       	push	r31
    41c0:	a0 91 84 16 	lds	r26, 0x1684	; 0x801684 <_ser_handle+0x2>
    41c4:	b0 91 85 16 	lds	r27, 0x1685	; 0x801685 <_ser_handle+0x3>
    41c8:	10 97       	sbiw	r26, 0x00	; 0
    41ca:	11 f1       	breq	.+68     	; 0x4210 <__vector_36+0x7a>
    41cc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    41d0:	14 96       	adiw	r26, 0x04	; 4
    41d2:	ed 91       	ld	r30, X+
    41d4:	fc 91       	ld	r31, X
    41d6:	15 97       	sbiw	r26, 0x05	; 5
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	25 81       	ldd	r18, Z+5	; 0x05
    41de:	98 1b       	sub	r25, r24
    41e0:	92 23       	and	r25, r18
    41e2:	84 81       	ldd	r24, Z+4	; 0x04
    41e4:	98 17       	cp	r25, r24
    41e6:	61 f0       	breq	.+24     	; 0x4200 <__vector_36+0x6a>
    41e8:	83 81       	ldd	r24, Z+3	; 0x03
    41ea:	26 95       	lsr	r18
    41ec:	28 23       	and	r18, r24
    41ee:	c0 81       	ld	r28, Z
    41f0:	d1 81       	ldd	r29, Z+1	; 0x01
    41f2:	c2 0f       	add	r28, r18
    41f4:	d1 1d       	adc	r29, r1
    41f6:	68 83       	st	Y, r22
    41f8:	8f 5f       	subi	r24, 0xFF	; 255
    41fa:	95 81       	ldd	r25, Z+5	; 0x05
    41fc:	89 23       	and	r24, r25
    41fe:	83 83       	std	Z+3, r24	; 0x03
    4200:	16 96       	adiw	r26, 0x06	; 6
    4202:	ed 91       	ld	r30, X+
    4204:	fc 91       	ld	r31, X
    4206:	17 97       	sbiw	r26, 0x07	; 7
    4208:	30 97       	sbiw	r30, 0x00	; 0
    420a:	11 f0       	breq	.+4      	; 0x4210 <__vector_36+0x7a>
    420c:	cd 01       	movw	r24, r26
    420e:	19 95       	eicall
    4210:	ff 91       	pop	r31
    4212:	ef 91       	pop	r30
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	bf 91       	pop	r27
    421a:	af 91       	pop	r26
    421c:	9f 91       	pop	r25
    421e:	8f 91       	pop	r24
    4220:	7f 91       	pop	r23
    4222:	6f 91       	pop	r22
    4224:	5f 91       	pop	r21
    4226:	4f 91       	pop	r20
    4228:	3f 91       	pop	r19
    422a:	2f 91       	pop	r18
    422c:	0f 90       	pop	r0
    422e:	0b be       	out	0x3b, r0	; 59
    4230:	0f 90       	pop	r0
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	0f 90       	pop	r0
    4236:	1f 90       	pop	r1
    4238:	18 95       	reti

0000423a <__vector_37>:
    423a:	1f 92       	push	r1
    423c:	0f 92       	push	r0
    423e:	0f b6       	in	r0, 0x3f	; 63
    4240:	0f 92       	push	r0
    4242:	11 24       	eor	r1, r1
    4244:	0b b6       	in	r0, 0x3b	; 59
    4246:	0f 92       	push	r0
    4248:	2f 93       	push	r18
    424a:	8f 93       	push	r24
    424c:	9f 93       	push	r25
    424e:	af 93       	push	r26
    4250:	bf 93       	push	r27
    4252:	ef 93       	push	r30
    4254:	ff 93       	push	r31
    4256:	e0 91 84 16 	lds	r30, 0x1684	; 0x801684 <_ser_handle+0x2>
    425a:	f0 91 85 16 	lds	r31, 0x1685	; 0x801685 <_ser_handle+0x3>
    425e:	30 97       	sbiw	r30, 0x00	; 0
    4260:	b9 f0       	breq	.+46     	; 0x4290 <__vector_37+0x56>
    4262:	02 80       	ldd	r0, Z+2	; 0x02
    4264:	f3 81       	ldd	r31, Z+3	; 0x03
    4266:	e0 2d       	mov	r30, r0
    4268:	93 81       	ldd	r25, Z+3	; 0x03
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	98 17       	cp	r25, r24
    426e:	b1 f0       	breq	.+44     	; 0x429c <__vector_37+0x62>
    4270:	92 81       	ldd	r25, Z+2	; 0x02
    4272:	85 81       	ldd	r24, Z+5	; 0x05
    4274:	28 2f       	mov	r18, r24
    4276:	26 95       	lsr	r18
    4278:	29 23       	and	r18, r25
    427a:	a0 81       	ld	r26, Z
    427c:	b1 81       	ldd	r27, Z+1	; 0x01
    427e:	a2 0f       	add	r26, r18
    4280:	b1 1d       	adc	r27, r1
    4282:	2c 91       	ld	r18, X
    4284:	9f 5f       	subi	r25, 0xFF	; 255
    4286:	89 23       	and	r24, r25
    4288:	82 83       	std	Z+2, r24	; 0x02
    428a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    428e:	0b c0       	rjmp	.+22     	; 0x42a6 <__vector_37+0x6c>
    4290:	e9 ec       	ldi	r30, 0xC9	; 201
    4292:	f0 e0       	ldi	r31, 0x00	; 0
    4294:	80 81       	ld	r24, Z
    4296:	8f 7d       	andi	r24, 0xDF	; 223
    4298:	80 83       	st	Z, r24
    429a:	05 c0       	rjmp	.+10     	; 0x42a6 <__vector_37+0x6c>
    429c:	e9 ec       	ldi	r30, 0xC9	; 201
    429e:	f0 e0       	ldi	r31, 0x00	; 0
    42a0:	80 81       	ld	r24, Z
    42a2:	8f 7d       	andi	r24, 0xDF	; 223
    42a4:	80 83       	st	Z, r24
    42a6:	ff 91       	pop	r31
    42a8:	ef 91       	pop	r30
    42aa:	bf 91       	pop	r27
    42ac:	af 91       	pop	r26
    42ae:	9f 91       	pop	r25
    42b0:	8f 91       	pop	r24
    42b2:	2f 91       	pop	r18
    42b4:	0f 90       	pop	r0
    42b6:	0b be       	out	0x3b, r0	; 59
    42b8:	0f 90       	pop	r0
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	0f 90       	pop	r0
    42be:	1f 90       	pop	r1
    42c0:	18 95       	reti

000042c2 <__vector_51>:
    42c2:	1f 92       	push	r1
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1
    42cc:	0b b6       	in	r0, 0x3b	; 59
    42ce:	0f 92       	push	r0
    42d0:	2f 93       	push	r18
    42d2:	3f 93       	push	r19
    42d4:	4f 93       	push	r20
    42d6:	5f 93       	push	r21
    42d8:	6f 93       	push	r22
    42da:	7f 93       	push	r23
    42dc:	8f 93       	push	r24
    42de:	9f 93       	push	r25
    42e0:	af 93       	push	r26
    42e2:	bf 93       	push	r27
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	ef 93       	push	r30
    42ea:	ff 93       	push	r31
    42ec:	a0 91 86 16 	lds	r26, 0x1686	; 0x801686 <_ser_handle+0x4>
    42f0:	b0 91 87 16 	lds	r27, 0x1687	; 0x801687 <_ser_handle+0x5>
    42f4:	10 97       	sbiw	r26, 0x00	; 0
    42f6:	11 f1       	breq	.+68     	; 0x433c <__vector_51+0x7a>
    42f8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    42fc:	14 96       	adiw	r26, 0x04	; 4
    42fe:	ed 91       	ld	r30, X+
    4300:	fc 91       	ld	r31, X
    4302:	15 97       	sbiw	r26, 0x05	; 5
    4304:	93 81       	ldd	r25, Z+3	; 0x03
    4306:	82 81       	ldd	r24, Z+2	; 0x02
    4308:	25 81       	ldd	r18, Z+5	; 0x05
    430a:	98 1b       	sub	r25, r24
    430c:	92 23       	and	r25, r18
    430e:	84 81       	ldd	r24, Z+4	; 0x04
    4310:	98 17       	cp	r25, r24
    4312:	61 f0       	breq	.+24     	; 0x432c <__vector_51+0x6a>
    4314:	83 81       	ldd	r24, Z+3	; 0x03
    4316:	26 95       	lsr	r18
    4318:	28 23       	and	r18, r24
    431a:	c0 81       	ld	r28, Z
    431c:	d1 81       	ldd	r29, Z+1	; 0x01
    431e:	c2 0f       	add	r28, r18
    4320:	d1 1d       	adc	r29, r1
    4322:	68 83       	st	Y, r22
    4324:	8f 5f       	subi	r24, 0xFF	; 255
    4326:	95 81       	ldd	r25, Z+5	; 0x05
    4328:	89 23       	and	r24, r25
    432a:	83 83       	std	Z+3, r24	; 0x03
    432c:	16 96       	adiw	r26, 0x06	; 6
    432e:	ed 91       	ld	r30, X+
    4330:	fc 91       	ld	r31, X
    4332:	17 97       	sbiw	r26, 0x07	; 7
    4334:	30 97       	sbiw	r30, 0x00	; 0
    4336:	11 f0       	breq	.+4      	; 0x433c <__vector_51+0x7a>
    4338:	cd 01       	movw	r24, r26
    433a:	19 95       	eicall
    433c:	ff 91       	pop	r31
    433e:	ef 91       	pop	r30
    4340:	df 91       	pop	r29
    4342:	cf 91       	pop	r28
    4344:	bf 91       	pop	r27
    4346:	af 91       	pop	r26
    4348:	9f 91       	pop	r25
    434a:	8f 91       	pop	r24
    434c:	7f 91       	pop	r23
    434e:	6f 91       	pop	r22
    4350:	5f 91       	pop	r21
    4352:	4f 91       	pop	r20
    4354:	3f 91       	pop	r19
    4356:	2f 91       	pop	r18
    4358:	0f 90       	pop	r0
    435a:	0b be       	out	0x3b, r0	; 59
    435c:	0f 90       	pop	r0
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	0f 90       	pop	r0
    4362:	1f 90       	pop	r1
    4364:	18 95       	reti

00004366 <__vector_52>:
    4366:	1f 92       	push	r1
    4368:	0f 92       	push	r0
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	0f 92       	push	r0
    436e:	11 24       	eor	r1, r1
    4370:	0b b6       	in	r0, 0x3b	; 59
    4372:	0f 92       	push	r0
    4374:	2f 93       	push	r18
    4376:	8f 93       	push	r24
    4378:	9f 93       	push	r25
    437a:	af 93       	push	r26
    437c:	bf 93       	push	r27
    437e:	ef 93       	push	r30
    4380:	ff 93       	push	r31
    4382:	e0 91 86 16 	lds	r30, 0x1686	; 0x801686 <_ser_handle+0x4>
    4386:	f0 91 87 16 	lds	r31, 0x1687	; 0x801687 <_ser_handle+0x5>
    438a:	30 97       	sbiw	r30, 0x00	; 0
    438c:	b9 f0       	breq	.+46     	; 0x43bc <__vector_52+0x56>
    438e:	02 80       	ldd	r0, Z+2	; 0x02
    4390:	f3 81       	ldd	r31, Z+3	; 0x03
    4392:	e0 2d       	mov	r30, r0
    4394:	93 81       	ldd	r25, Z+3	; 0x03
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	98 17       	cp	r25, r24
    439a:	b1 f0       	breq	.+44     	; 0x43c8 <__vector_52+0x62>
    439c:	92 81       	ldd	r25, Z+2	; 0x02
    439e:	85 81       	ldd	r24, Z+5	; 0x05
    43a0:	28 2f       	mov	r18, r24
    43a2:	26 95       	lsr	r18
    43a4:	29 23       	and	r18, r25
    43a6:	a0 81       	ld	r26, Z
    43a8:	b1 81       	ldd	r27, Z+1	; 0x01
    43aa:	a2 0f       	add	r26, r18
    43ac:	b1 1d       	adc	r27, r1
    43ae:	2c 91       	ld	r18, X
    43b0:	9f 5f       	subi	r25, 0xFF	; 255
    43b2:	89 23       	and	r24, r25
    43b4:	82 83       	std	Z+2, r24	; 0x02
    43b6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    43ba:	0b c0       	rjmp	.+22     	; 0x43d2 <__vector_52+0x6c>
    43bc:	e1 ed       	ldi	r30, 0xD1	; 209
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	80 81       	ld	r24, Z
    43c2:	8f 7d       	andi	r24, 0xDF	; 223
    43c4:	80 83       	st	Z, r24
    43c6:	05 c0       	rjmp	.+10     	; 0x43d2 <__vector_52+0x6c>
    43c8:	e1 ed       	ldi	r30, 0xD1	; 209
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	8f 7d       	andi	r24, 0xDF	; 223
    43d0:	80 83       	st	Z, r24
    43d2:	ff 91       	pop	r31
    43d4:	ef 91       	pop	r30
    43d6:	bf 91       	pop	r27
    43d8:	af 91       	pop	r26
    43da:	9f 91       	pop	r25
    43dc:	8f 91       	pop	r24
    43de:	2f 91       	pop	r18
    43e0:	0f 90       	pop	r0
    43e2:	0b be       	out	0x3b, r0	; 59
    43e4:	0f 90       	pop	r0
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	0f 90       	pop	r0
    43ea:	1f 90       	pop	r1
    43ec:	18 95       	reti

000043ee <__vector_54>:
    43ee:	1f 92       	push	r1
    43f0:	0f 92       	push	r0
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	0f 92       	push	r0
    43f6:	11 24       	eor	r1, r1
    43f8:	0b b6       	in	r0, 0x3b	; 59
    43fa:	0f 92       	push	r0
    43fc:	2f 93       	push	r18
    43fe:	3f 93       	push	r19
    4400:	4f 93       	push	r20
    4402:	5f 93       	push	r21
    4404:	6f 93       	push	r22
    4406:	7f 93       	push	r23
    4408:	8f 93       	push	r24
    440a:	9f 93       	push	r25
    440c:	af 93       	push	r26
    440e:	bf 93       	push	r27
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	ef 93       	push	r30
    4416:	ff 93       	push	r31
    4418:	a0 91 88 16 	lds	r26, 0x1688	; 0x801688 <_ser_handle+0x6>
    441c:	b0 91 89 16 	lds	r27, 0x1689	; 0x801689 <_ser_handle+0x7>
    4420:	10 97       	sbiw	r26, 0x00	; 0
    4422:	11 f1       	breq	.+68     	; 0x4468 <__vector_54+0x7a>
    4424:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4428:	14 96       	adiw	r26, 0x04	; 4
    442a:	ed 91       	ld	r30, X+
    442c:	fc 91       	ld	r31, X
    442e:	15 97       	sbiw	r26, 0x05	; 5
    4430:	93 81       	ldd	r25, Z+3	; 0x03
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	25 81       	ldd	r18, Z+5	; 0x05
    4436:	98 1b       	sub	r25, r24
    4438:	92 23       	and	r25, r18
    443a:	84 81       	ldd	r24, Z+4	; 0x04
    443c:	98 17       	cp	r25, r24
    443e:	61 f0       	breq	.+24     	; 0x4458 <__vector_54+0x6a>
    4440:	83 81       	ldd	r24, Z+3	; 0x03
    4442:	26 95       	lsr	r18
    4444:	28 23       	and	r18, r24
    4446:	c0 81       	ld	r28, Z
    4448:	d1 81       	ldd	r29, Z+1	; 0x01
    444a:	c2 0f       	add	r28, r18
    444c:	d1 1d       	adc	r29, r1
    444e:	68 83       	st	Y, r22
    4450:	8f 5f       	subi	r24, 0xFF	; 255
    4452:	95 81       	ldd	r25, Z+5	; 0x05
    4454:	89 23       	and	r24, r25
    4456:	83 83       	std	Z+3, r24	; 0x03
    4458:	16 96       	adiw	r26, 0x06	; 6
    445a:	ed 91       	ld	r30, X+
    445c:	fc 91       	ld	r31, X
    445e:	17 97       	sbiw	r26, 0x07	; 7
    4460:	30 97       	sbiw	r30, 0x00	; 0
    4462:	11 f0       	breq	.+4      	; 0x4468 <__vector_54+0x7a>
    4464:	cd 01       	movw	r24, r26
    4466:	19 95       	eicall
    4468:	ff 91       	pop	r31
    446a:	ef 91       	pop	r30
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	bf 91       	pop	r27
    4472:	af 91       	pop	r26
    4474:	9f 91       	pop	r25
    4476:	8f 91       	pop	r24
    4478:	7f 91       	pop	r23
    447a:	6f 91       	pop	r22
    447c:	5f 91       	pop	r21
    447e:	4f 91       	pop	r20
    4480:	3f 91       	pop	r19
    4482:	2f 91       	pop	r18
    4484:	0f 90       	pop	r0
    4486:	0b be       	out	0x3b, r0	; 59
    4488:	0f 90       	pop	r0
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	0f 90       	pop	r0
    448e:	1f 90       	pop	r1
    4490:	18 95       	reti

00004492 <__vector_55>:
    4492:	1f 92       	push	r1
    4494:	0f 92       	push	r0
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	0f 92       	push	r0
    449a:	11 24       	eor	r1, r1
    449c:	0b b6       	in	r0, 0x3b	; 59
    449e:	0f 92       	push	r0
    44a0:	2f 93       	push	r18
    44a2:	8f 93       	push	r24
    44a4:	9f 93       	push	r25
    44a6:	af 93       	push	r26
    44a8:	bf 93       	push	r27
    44aa:	ef 93       	push	r30
    44ac:	ff 93       	push	r31
    44ae:	e0 91 88 16 	lds	r30, 0x1688	; 0x801688 <_ser_handle+0x6>
    44b2:	f0 91 89 16 	lds	r31, 0x1689	; 0x801689 <_ser_handle+0x7>
    44b6:	30 97       	sbiw	r30, 0x00	; 0
    44b8:	b9 f0       	breq	.+46     	; 0x44e8 <__vector_55+0x56>
    44ba:	02 80       	ldd	r0, Z+2	; 0x02
    44bc:	f3 81       	ldd	r31, Z+3	; 0x03
    44be:	e0 2d       	mov	r30, r0
    44c0:	93 81       	ldd	r25, Z+3	; 0x03
    44c2:	82 81       	ldd	r24, Z+2	; 0x02
    44c4:	98 17       	cp	r25, r24
    44c6:	b1 f0       	breq	.+44     	; 0x44f4 <__vector_55+0x62>
    44c8:	92 81       	ldd	r25, Z+2	; 0x02
    44ca:	85 81       	ldd	r24, Z+5	; 0x05
    44cc:	28 2f       	mov	r18, r24
    44ce:	26 95       	lsr	r18
    44d0:	29 23       	and	r18, r25
    44d2:	a0 81       	ld	r26, Z
    44d4:	b1 81       	ldd	r27, Z+1	; 0x01
    44d6:	a2 0f       	add	r26, r18
    44d8:	b1 1d       	adc	r27, r1
    44da:	2c 91       	ld	r18, X
    44dc:	9f 5f       	subi	r25, 0xFF	; 255
    44de:	89 23       	and	r24, r25
    44e0:	82 83       	std	Z+2, r24	; 0x02
    44e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    44e6:	0b c0       	rjmp	.+22     	; 0x44fe <__vector_55+0x6c>
    44e8:	e1 e3       	ldi	r30, 0x31	; 49
    44ea:	f1 e0       	ldi	r31, 0x01	; 1
    44ec:	80 81       	ld	r24, Z
    44ee:	8f 7d       	andi	r24, 0xDF	; 223
    44f0:	80 83       	st	Z, r24
    44f2:	05 c0       	rjmp	.+10     	; 0x44fe <__vector_55+0x6c>
    44f4:	e1 e3       	ldi	r30, 0x31	; 49
    44f6:	f1 e0       	ldi	r31, 0x01	; 1
    44f8:	80 81       	ld	r24, Z
    44fa:	8f 7d       	andi	r24, 0xDF	; 223
    44fc:	80 83       	st	Z, r24
    44fe:	ff 91       	pop	r31
    4500:	ef 91       	pop	r30
    4502:	bf 91       	pop	r27
    4504:	af 91       	pop	r26
    4506:	9f 91       	pop	r25
    4508:	8f 91       	pop	r24
    450a:	2f 91       	pop	r18
    450c:	0f 90       	pop	r0
    450e:	0b be       	out	0x3b, r0	; 59
    4510:	0f 90       	pop	r0
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	0f 90       	pop	r0
    4516:	1f 90       	pop	r1
    4518:	18 95       	reti

0000451a <usart_getchar>:
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	1f 92       	push	r1
    4520:	cd b7       	in	r28, 0x3d	; 61
    4522:	de b7       	in	r29, 0x3e	; 62
    4524:	be 01       	movw	r22, r28
    4526:	6f 5f       	subi	r22, 0xFF	; 255
    4528:	7f 4f       	sbci	r23, 0xFF	; 255
    452a:	80 91 8a 16 	lds	r24, 0x168A	; 0x80168a <_com_serial_instance>
    452e:	90 91 8b 16 	lds	r25, 0x168B	; 0x80168b <_com_serial_instance+0x1>
    4532:	7b dd       	rcall	.-1290   	; 0x402a <serial_getByte>
    4534:	81 11       	cpse	r24, r1
    4536:	f6 cf       	rjmp	.-20     	; 0x4524 <usart_getchar+0xa>
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	0f 90       	pop	r0
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	08 95       	ret

00004544 <usart_putchar>:
    4544:	68 2f       	mov	r22, r24
    4546:	80 91 8a 16 	lds	r24, 0x168A	; 0x80168a <_com_serial_instance>
    454a:	90 91 8b 16 	lds	r25, 0x168B	; 0x80168b <_com_serial_instance+0x1>
    454e:	ed dc       	rcall	.-1574   	; 0x3f2a <serial_sendByte>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	08 95       	ret

00004556 <stdio_initialise>:
    4556:	8f 92       	push	r8
    4558:	9f 92       	push	r9
    455a:	af 92       	push	r10
    455c:	cf 92       	push	r12
    455e:	ef 92       	push	r14
    4560:	0f 93       	push	r16
    4562:	81 2c       	mov	r8, r1
    4564:	91 2c       	mov	r9, r1
    4566:	68 94       	set
    4568:	aa 24       	eor	r10, r10
    456a:	a7 f8       	bld	r10, 7
    456c:	68 94       	set
    456e:	cc 24       	eor	r12, r12
    4570:	c7 f8       	bld	r12, 7
    4572:	e1 2c       	mov	r14, r1
    4574:	00 e0       	ldi	r16, 0x00	; 0
    4576:	23 e0       	ldi	r18, 0x03	; 3
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	51 ee       	ldi	r21, 0xE1	; 225
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	32 dc       	rcall	.-1948   	; 0x3de6 <serial_create>
    4582:	90 93 8b 16 	sts	0x168B, r25	; 0x80168b <_com_serial_instance+0x1>
    4586:	80 93 8a 16 	sts	0x168A, r24	; 0x80168a <_com_serial_instance>
    458a:	e1 ec       	ldi	r30, 0xC1	; 193
    458c:	f6 e1       	ldi	r31, 0x16	; 22
    458e:	83 e1       	ldi	r24, 0x13	; 19
    4590:	92 e0       	ldi	r25, 0x02	; 2
    4592:	91 83       	std	Z+1, r25	; 0x01
    4594:	80 83       	st	Z, r24
    4596:	93 83       	std	Z+3, r25	; 0x03
    4598:	82 83       	std	Z+2, r24	; 0x02
    459a:	0f 91       	pop	r16
    459c:	ef 90       	pop	r14
    459e:	cf 90       	pop	r12
    45a0:	af 90       	pop	r10
    45a2:	9f 90       	pop	r9
    45a4:	8f 90       	pop	r8
    45a6:	08 95       	ret

000045a8 <_turn_off>:
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	fc 01       	movw	r30, r24
    45ac:	ee 0f       	add	r30, r30
    45ae:	ff 1f       	adc	r31, r31
    45b0:	e8 0f       	add	r30, r24
    45b2:	f9 1f       	adc	r31, r25
    45b4:	ee 0f       	add	r30, r30
    45b6:	ff 1f       	adc	r31, r31
    45b8:	e4 57       	subi	r30, 0x74	; 116
    45ba:	f9 4e       	sbci	r31, 0xE9	; 233
    45bc:	23 81       	ldd	r18, Z+3	; 0x03
    45be:	21 11       	cpse	r18, r1
    45c0:	1f c0       	rjmp	.+62     	; 0x4600 <_turn_off+0x58>
    45c2:	9c 01       	movw	r18, r24
    45c4:	22 0f       	add	r18, r18
    45c6:	33 1f       	adc	r19, r19
    45c8:	f9 01       	movw	r30, r18
    45ca:	e8 0f       	add	r30, r24
    45cc:	f9 1f       	adc	r31, r25
    45ce:	ee 0f       	add	r30, r30
    45d0:	ff 1f       	adc	r31, r31
    45d2:	e4 57       	subi	r30, 0x74	; 116
    45d4:	f9 4e       	sbci	r31, 0xE9	; 233
    45d6:	a0 81       	ld	r26, Z
    45d8:	b1 81       	ldd	r27, Z+1	; 0x01
    45da:	4c 91       	ld	r20, X
    45dc:	f9 01       	movw	r30, r18
    45de:	e8 0f       	add	r30, r24
    45e0:	f9 1f       	adc	r31, r25
    45e2:	ee 0f       	add	r30, r30
    45e4:	ff 1f       	adc	r31, r31
    45e6:	e4 57       	subi	r30, 0x74	; 116
    45e8:	f9 4e       	sbci	r31, 0xE9	; 233
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	02 80       	ldd	r0, Z+2	; 0x02
    45f0:	02 c0       	rjmp	.+4      	; 0x45f6 <_turn_off+0x4e>
    45f2:	88 0f       	add	r24, r24
    45f4:	99 1f       	adc	r25, r25
    45f6:	0a 94       	dec	r0
    45f8:	e2 f7       	brpl	.-8      	; 0x45f2 <_turn_off+0x4a>
    45fa:	84 2b       	or	r24, r20
    45fc:	8c 93       	st	X, r24
    45fe:	08 95       	ret
    4600:	fc 01       	movw	r30, r24
    4602:	ee 0f       	add	r30, r30
    4604:	ff 1f       	adc	r31, r31
    4606:	df 01       	movw	r26, r30
    4608:	a8 0f       	add	r26, r24
    460a:	b9 1f       	adc	r27, r25
    460c:	aa 0f       	add	r26, r26
    460e:	bb 1f       	adc	r27, r27
    4610:	a4 57       	subi	r26, 0x74	; 116
    4612:	b9 4e       	sbci	r27, 0xE9	; 233
    4614:	0d 90       	ld	r0, X+
    4616:	bc 91       	ld	r27, X
    4618:	a0 2d       	mov	r26, r0
    461a:	2c 91       	ld	r18, X
    461c:	e8 0f       	add	r30, r24
    461e:	f9 1f       	adc	r31, r25
    4620:	ee 0f       	add	r30, r30
    4622:	ff 1f       	adc	r31, r31
    4624:	e4 57       	subi	r30, 0x74	; 116
    4626:	f9 4e       	sbci	r31, 0xE9	; 233
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	02 80       	ldd	r0, Z+2	; 0x02
    462e:	02 c0       	rjmp	.+4      	; 0x4634 <_turn_off+0x8c>
    4630:	88 0f       	add	r24, r24
    4632:	99 1f       	adc	r25, r25
    4634:	0a 94       	dec	r0
    4636:	e2 f7       	brpl	.-8      	; 0x4630 <_turn_off+0x88>
    4638:	80 95       	com	r24
    463a:	82 23       	and	r24, r18
    463c:	8c 93       	st	X, r24
    463e:	08 95       	ret

00004640 <_turn_on>:
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	fc 01       	movw	r30, r24
    4644:	ee 0f       	add	r30, r30
    4646:	ff 1f       	adc	r31, r31
    4648:	e8 0f       	add	r30, r24
    464a:	f9 1f       	adc	r31, r25
    464c:	ee 0f       	add	r30, r30
    464e:	ff 1f       	adc	r31, r31
    4650:	e4 57       	subi	r30, 0x74	; 116
    4652:	f9 4e       	sbci	r31, 0xE9	; 233
    4654:	23 81       	ldd	r18, Z+3	; 0x03
    4656:	21 11       	cpse	r18, r1
    4658:	20 c0       	rjmp	.+64     	; 0x469a <_turn_on+0x5a>
    465a:	9c 01       	movw	r18, r24
    465c:	22 0f       	add	r18, r18
    465e:	33 1f       	adc	r19, r19
    4660:	f9 01       	movw	r30, r18
    4662:	e8 0f       	add	r30, r24
    4664:	f9 1f       	adc	r31, r25
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	e4 57       	subi	r30, 0x74	; 116
    466c:	f9 4e       	sbci	r31, 0xE9	; 233
    466e:	a0 81       	ld	r26, Z
    4670:	b1 81       	ldd	r27, Z+1	; 0x01
    4672:	4c 91       	ld	r20, X
    4674:	f9 01       	movw	r30, r18
    4676:	e8 0f       	add	r30, r24
    4678:	f9 1f       	adc	r31, r25
    467a:	ee 0f       	add	r30, r30
    467c:	ff 1f       	adc	r31, r31
    467e:	e4 57       	subi	r30, 0x74	; 116
    4680:	f9 4e       	sbci	r31, 0xE9	; 233
    4682:	81 e0       	ldi	r24, 0x01	; 1
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	02 80       	ldd	r0, Z+2	; 0x02
    4688:	02 c0       	rjmp	.+4      	; 0x468e <_turn_on+0x4e>
    468a:	88 0f       	add	r24, r24
    468c:	99 1f       	adc	r25, r25
    468e:	0a 94       	dec	r0
    4690:	e2 f7       	brpl	.-8      	; 0x468a <_turn_on+0x4a>
    4692:	80 95       	com	r24
    4694:	84 23       	and	r24, r20
    4696:	8c 93       	st	X, r24
    4698:	08 95       	ret
    469a:	fc 01       	movw	r30, r24
    469c:	ee 0f       	add	r30, r30
    469e:	ff 1f       	adc	r31, r31
    46a0:	df 01       	movw	r26, r30
    46a2:	a8 0f       	add	r26, r24
    46a4:	b9 1f       	adc	r27, r25
    46a6:	aa 0f       	add	r26, r26
    46a8:	bb 1f       	adc	r27, r27
    46aa:	a4 57       	subi	r26, 0x74	; 116
    46ac:	b9 4e       	sbci	r27, 0xE9	; 233
    46ae:	0d 90       	ld	r0, X+
    46b0:	bc 91       	ld	r27, X
    46b2:	a0 2d       	mov	r26, r0
    46b4:	2c 91       	ld	r18, X
    46b6:	e8 0f       	add	r30, r24
    46b8:	f9 1f       	adc	r31, r25
    46ba:	ee 0f       	add	r30, r30
    46bc:	ff 1f       	adc	r31, r31
    46be:	e4 57       	subi	r30, 0x74	; 116
    46c0:	f9 4e       	sbci	r31, 0xE9	; 233
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	02 80       	ldd	r0, Z+2	; 0x02
    46c8:	02 c0       	rjmp	.+4      	; 0x46ce <_turn_on+0x8e>
    46ca:	88 0f       	add	r24, r24
    46cc:	99 1f       	adc	r25, r25
    46ce:	0a 94       	dec	r0
    46d0:	e2 f7       	brpl	.-8      	; 0x46ca <_turn_on+0x8a>
    46d2:	82 2b       	or	r24, r18
    46d4:	8c 93       	st	X, r24
    46d6:	08 95       	ret

000046d8 <_hal_led_task>:
    46d8:	cc 24       	eor	r12, r12
    46da:	c3 94       	inc	r12
    46dc:	d1 2c       	mov	r13, r1
    46de:	68 94       	set
    46e0:	bb 24       	eor	r11, r11
    46e2:	b2 f8       	bld	r11, 2
    46e4:	cc e8       	ldi	r28, 0x8C	; 140
    46e6:	d6 e1       	ldi	r29, 0x16	; 22
    46e8:	10 e0       	ldi	r17, 0x00	; 0
    46ea:	8c 81       	ldd	r24, Y+4	; 0x04
    46ec:	81 30       	cpi	r24, 0x01	; 1
    46ee:	81 f0       	breq	.+32     	; 0x4710 <_hal_led_task+0x38>
    46f0:	18 f1       	brcs	.+70     	; 0x4738 <_hal_led_task+0x60>
    46f2:	82 30       	cpi	r24, 0x02	; 2
    46f4:	61 f5       	brne	.+88     	; 0x474e <_hal_led_task+0x76>
    46f6:	e8 81       	ld	r30, Y
    46f8:	f9 81       	ldd	r31, Y+1	; 0x01
    46fa:	20 81       	ld	r18, Z
    46fc:	c6 01       	movw	r24, r12
    46fe:	0a 80       	ldd	r0, Y+2	; 0x02
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <_hal_led_task+0x2e>
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	0a 94       	dec	r0
    4708:	e2 f7       	brpl	.-8      	; 0x4702 <_hal_led_task+0x2a>
    470a:	82 27       	eor	r24, r18
    470c:	80 83       	st	Z, r24
    470e:	1f c0       	rjmp	.+62     	; 0x474e <_hal_led_task+0x76>
    4710:	8d 81       	ldd	r24, Y+5	; 0x05
    4712:	8f 5f       	subi	r24, 0xFF	; 255
    4714:	86 30       	cpi	r24, 0x06	; 6
    4716:	10 f4       	brcc	.+4      	; 0x471c <_hal_led_task+0x44>
    4718:	8d 83       	std	Y+5, r24	; 0x05
    471a:	19 c0       	rjmp	.+50     	; 0x474e <_hal_led_task+0x76>
    471c:	1d 82       	std	Y+5, r1	; 0x05
    471e:	e8 81       	ld	r30, Y
    4720:	f9 81       	ldd	r31, Y+1	; 0x01
    4722:	20 81       	ld	r18, Z
    4724:	c6 01       	movw	r24, r12
    4726:	0a 80       	ldd	r0, Y+2	; 0x02
    4728:	02 c0       	rjmp	.+4      	; 0x472e <_hal_led_task+0x56>
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	0a 94       	dec	r0
    4730:	e2 f7       	brpl	.-8      	; 0x472a <_hal_led_task+0x52>
    4732:	82 27       	eor	r24, r18
    4734:	80 83       	st	Z, r24
    4736:	0b c0       	rjmp	.+22     	; 0x474e <_hal_led_task+0x76>
    4738:	0d 81       	ldd	r16, Y+5	; 0x05
    473a:	00 23       	and	r16, r16
    473c:	29 f0       	breq	.+10     	; 0x4748 <_hal_led_task+0x70>
    473e:	81 2f       	mov	r24, r17
    4740:	7f df       	rcall	.-258    	; 0x4640 <_turn_on>
    4742:	01 50       	subi	r16, 0x01	; 1
    4744:	0d 83       	std	Y+5, r16	; 0x05
    4746:	03 c0       	rjmp	.+6      	; 0x474e <_hal_led_task+0x76>
    4748:	bc 82       	std	Y+4, r11	; 0x04
    474a:	81 2f       	mov	r24, r17
    474c:	2d df       	rcall	.-422    	; 0x45a8 <_turn_off>
    474e:	1f 5f       	subi	r17, 0xFF	; 255
    4750:	26 96       	adiw	r28, 0x06	; 6
    4752:	14 30       	cpi	r17, 0x04	; 4
    4754:	51 f6       	brne	.-108    	; 0x46ea <_hal_led_task+0x12>
    4756:	6c e0       	ldi	r22, 0x0C	; 12
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskDelay>
    4762:	c0 cf       	rjmp	.-128    	; 0x46e4 <_hal_led_task+0xc>

00004764 <status_leds_initialise>:
    4764:	ef 92       	push	r14
    4766:	ff 92       	push	r15
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	08 2f       	mov	r16, r24
    4772:	80 e4       	ldi	r24, 0x40	; 64
    4774:	87 b9       	out	0x07, r24	; 7
    4776:	cc e8       	ldi	r28, 0x8C	; 140
    4778:	d6 e1       	ldi	r29, 0x16	; 22
    477a:	0f 2e       	mov	r0, r31
    477c:	f8 e2       	ldi	r31, 0x28	; 40
    477e:	ef 2e       	mov	r14, r31
    4780:	f1 2c       	mov	r15, r1
    4782:	f0 2d       	mov	r31, r0
    4784:	f9 82       	std	Y+1, r15	; 0x01
    4786:	e8 82       	st	Y, r14
    4788:	86 e0       	ldi	r24, 0x06	; 6
    478a:	8a 83       	std	Y+2, r24	; 0x02
    478c:	1b 82       	std	Y+3, r1	; 0x03
    478e:	14 e0       	ldi	r17, 0x04	; 4
    4790:	1c 83       	std	Y+4, r17	; 0x04
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	09 df       	rcall	.-494    	; 0x45a8 <_turn_off>
    4796:	80 e8       	ldi	r24, 0x80	; 128
    4798:	87 b9       	out	0x07, r24	; 7
    479a:	ff 82       	std	Y+7, r15	; 0x07
    479c:	ee 82       	std	Y+6, r14	; 0x06
    479e:	87 e0       	ldi	r24, 0x07	; 7
    47a0:	88 87       	std	Y+8, r24	; 0x08
    47a2:	19 86       	std	Y+9, r1	; 0x09
    47a4:	1a 87       	std	Y+10, r17	; 0x0a
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	ff de       	rcall	.-514    	; 0x45a8 <_turn_off>
    47aa:	80 e2       	ldi	r24, 0x20	; 32
    47ac:	83 bb       	out	0x13, r24	; 19
    47ae:	84 e3       	ldi	r24, 0x34	; 52
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	9d 87       	std	Y+13, r25	; 0x0d
    47b4:	8c 87       	std	Y+12, r24	; 0x0c
    47b6:	85 e0       	ldi	r24, 0x05	; 5
    47b8:	8e 87       	std	Y+14, r24	; 0x0e
    47ba:	1f 86       	std	Y+15, r1	; 0x0f
    47bc:	18 8b       	std	Y+16, r17	; 0x10
    47be:	82 e0       	ldi	r24, 0x02	; 2
    47c0:	f3 de       	rcall	.-538    	; 0x45a8 <_turn_off>
    47c2:	80 e1       	ldi	r24, 0x10	; 16
    47c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    47c8:	82 e0       	ldi	r24, 0x02	; 2
    47ca:	91 e0       	ldi	r25, 0x01	; 1
    47cc:	9b 8b       	std	Y+19, r25	; 0x13
    47ce:	8a 8b       	std	Y+18, r24	; 0x12
    47d0:	1c 8b       	std	Y+20, r17	; 0x14
    47d2:	1d 8a       	std	Y+21, r1	; 0x15
    47d4:	1e 8b       	std	Y+22, r17	; 0x16
    47d6:	83 e0       	ldi	r24, 0x03	; 3
    47d8:	e7 de       	rcall	.-562    	; 0x45a8 <_turn_off>
    47da:	e1 2c       	mov	r14, r1
    47dc:	f1 2c       	mov	r15, r1
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	40 ec       	ldi	r20, 0xC0	; 192
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	65 ec       	ldi	r22, 0xC5	; 197
    47e8:	76 e0       	ldi	r23, 0x06	; 6
    47ea:	8c e6       	ldi	r24, 0x6C	; 108
    47ec:	93 e2       	ldi	r25, 0x23	; 35
    47ee:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskCreate>
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	ff 90       	pop	r15
    47fc:	ef 90       	pop	r14
    47fe:	08 95       	ret

00004800 <status_leds_slowBlink>:
    4800:	cf 93       	push	r28
    4802:	df 93       	push	r29
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	fc 01       	movw	r30, r24
    4808:	ee 0f       	add	r30, r30
    480a:	ff 1f       	adc	r31, r31
    480c:	df 01       	movw	r26, r30
    480e:	a8 0f       	add	r26, r24
    4810:	b9 1f       	adc	r27, r25
    4812:	aa 0f       	add	r26, r26
    4814:	bb 1f       	adc	r27, r27
    4816:	a4 57       	subi	r26, 0x74	; 116
    4818:	b9 4e       	sbci	r27, 0xE9	; 233
    481a:	cd 91       	ld	r28, X+
    481c:	dc 91       	ld	r29, X
    481e:	11 97       	sbiw	r26, 0x01	; 1
    4820:	48 81       	ld	r20, Y
    4822:	21 e0       	ldi	r18, 0x01	; 1
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	12 96       	adiw	r26, 0x02	; 2
    4828:	0c 90       	ld	r0, X
    482a:	12 97       	sbiw	r26, 0x02	; 2
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <status_leds_slowBlink+0x32>
    482e:	22 0f       	add	r18, r18
    4830:	33 1f       	adc	r19, r19
    4832:	0a 94       	dec	r0
    4834:	e2 f7       	brpl	.-8      	; 0x482e <status_leds_slowBlink+0x2e>
    4836:	24 27       	eor	r18, r20
    4838:	28 83       	st	Y, r18
    483a:	fd 01       	movw	r30, r26
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	84 83       	std	Z+4, r24	; 0x04
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	08 95       	ret

00004846 <status_leds_fastBlink>:
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	fc 01       	movw	r30, r24
    484e:	ee 0f       	add	r30, r30
    4850:	ff 1f       	adc	r31, r31
    4852:	df 01       	movw	r26, r30
    4854:	a8 0f       	add	r26, r24
    4856:	b9 1f       	adc	r27, r25
    4858:	aa 0f       	add	r26, r26
    485a:	bb 1f       	adc	r27, r27
    485c:	a4 57       	subi	r26, 0x74	; 116
    485e:	b9 4e       	sbci	r27, 0xE9	; 233
    4860:	cd 91       	ld	r28, X+
    4862:	dc 91       	ld	r29, X
    4864:	11 97       	sbiw	r26, 0x01	; 1
    4866:	48 81       	ld	r20, Y
    4868:	21 e0       	ldi	r18, 0x01	; 1
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	12 96       	adiw	r26, 0x02	; 2
    486e:	0c 90       	ld	r0, X
    4870:	12 97       	sbiw	r26, 0x02	; 2
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <status_leds_fastBlink+0x32>
    4874:	22 0f       	add	r18, r18
    4876:	33 1f       	adc	r19, r19
    4878:	0a 94       	dec	r0
    487a:	e2 f7       	brpl	.-8      	; 0x4874 <status_leds_fastBlink+0x2e>
    487c:	24 27       	eor	r18, r20
    487e:	28 83       	st	Y, r18
    4880:	fd 01       	movw	r30, r26
    4882:	82 e0       	ldi	r24, 0x02	; 2
    4884:	84 83       	std	Z+4, r24	; 0x04
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	08 95       	ret

0000488c <status_leds_ledOn>:
    488c:	28 2f       	mov	r18, r24
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	f9 01       	movw	r30, r18
    4892:	ee 0f       	add	r30, r30
    4894:	ff 1f       	adc	r31, r31
    4896:	e2 0f       	add	r30, r18
    4898:	f3 1f       	adc	r31, r19
    489a:	ee 0f       	add	r30, r30
    489c:	ff 1f       	adc	r31, r31
    489e:	e4 57       	subi	r30, 0x74	; 116
    48a0:	f9 4e       	sbci	r31, 0xE9	; 233
    48a2:	93 e0       	ldi	r25, 0x03	; 3
    48a4:	94 83       	std	Z+4, r25	; 0x04
    48a6:	cc ce       	rjmp	.-616    	; 0x4640 <_turn_on>
    48a8:	08 95       	ret

000048aa <status_leds_ledOff>:
    48aa:	28 2f       	mov	r18, r24
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	f9 01       	movw	r30, r18
    48b0:	ee 0f       	add	r30, r30
    48b2:	ff 1f       	adc	r31, r31
    48b4:	e2 0f       	add	r30, r18
    48b6:	f3 1f       	adc	r31, r19
    48b8:	ee 0f       	add	r30, r30
    48ba:	ff 1f       	adc	r31, r31
    48bc:	e4 57       	subi	r30, 0x74	; 116
    48be:	f9 4e       	sbci	r31, 0xE9	; 233
    48c0:	94 e0       	ldi	r25, 0x04	; 4
    48c2:	94 83       	std	Z+4, r25	; 0x04
    48c4:	71 ce       	rjmp	.-798    	; 0x45a8 <_turn_off>
    48c6:	08 95       	ret

000048c8 <status_leds_longPuls>:
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	fc 01       	movw	r30, r24
    48cc:	ee 0f       	add	r30, r30
    48ce:	ff 1f       	adc	r31, r31
    48d0:	df 01       	movw	r26, r30
    48d2:	a8 0f       	add	r26, r24
    48d4:	b9 1f       	adc	r27, r25
    48d6:	aa 0f       	add	r26, r26
    48d8:	bb 1f       	adc	r27, r27
    48da:	a4 57       	subi	r26, 0x74	; 116
    48dc:	b9 4e       	sbci	r27, 0xE9	; 233
    48de:	26 e0       	ldi	r18, 0x06	; 6
    48e0:	15 96       	adiw	r26, 0x05	; 5
    48e2:	2c 93       	st	X, r18
    48e4:	15 97       	sbiw	r26, 0x05	; 5
    48e6:	fd 01       	movw	r30, r26
    48e8:	14 82       	std	Z+4, r1	; 0x04
    48ea:	08 95       	ret

000048ec <status_leds_shortPuls>:
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	fc 01       	movw	r30, r24
    48f0:	ee 0f       	add	r30, r30
    48f2:	ff 1f       	adc	r31, r31
    48f4:	df 01       	movw	r26, r30
    48f6:	a8 0f       	add	r26, r24
    48f8:	b9 1f       	adc	r27, r25
    48fa:	aa 0f       	add	r26, r26
    48fc:	bb 1f       	adc	r27, r27
    48fe:	a4 57       	subi	r26, 0x74	; 116
    4900:	b9 4e       	sbci	r27, 0xE9	; 233
    4902:	15 96       	adiw	r26, 0x05	; 5
    4904:	1c 92       	st	X, r1
    4906:	15 97       	sbiw	r26, 0x05	; 5
    4908:	fd 01       	movw	r30, r26
    490a:	14 82       	std	Z+4, r1	; 0x04
    490c:	08 95       	ret

0000490e <_initTwiInterface>:
    490e:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <_twiIsInitiated>
    4912:	81 11       	cpse	r24, r1
    4914:	0c c0       	rjmp	.+24     	; 0x492e <_initTwiInterface+0x20>
    4916:	8c e0       	ldi	r24, 0x0C	; 12
    4918:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    491c:	8f ef       	ldi	r24, 0xFF	; 255
    491e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4922:	84 e0       	ldi	r24, 0x04	; 4
    4924:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <_twiIsInitiated>
    492e:	08 95       	ret

00004930 <twiCreate>:
    4930:	af 92       	push	r10
    4932:	bf 92       	push	r11
    4934:	cf 92       	push	r12
    4936:	df 92       	push	r13
    4938:	ef 92       	push	r14
    493a:	ff 92       	push	r15
    493c:	0f 93       	push	r16
    493e:	1f 93       	push	r17
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	a8 2e       	mov	r10, r24
    4946:	b6 2e       	mov	r11, r22
    4948:	69 01       	movw	r12, r18
    494a:	7a 01       	movw	r14, r20
    494c:	84 e0       	ldi	r24, 0x04	; 4
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	5f d3       	rcall	.+1726   	; 0x5010 <malloc>
    4952:	ec 01       	movw	r28, r24
    4954:	89 2b       	or	r24, r25
    4956:	61 f1       	breq	.+88     	; 0x49b0 <twiCreate+0x80>
    4958:	a8 82       	st	Y, r10
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	b8 12       	cpse	r11, r24
    495e:	12 c0       	rjmp	.+36     	; 0x4984 <twiCreate+0x54>
    4960:	c7 01       	movw	r24, r14
    4962:	b6 01       	movw	r22, r12
    4964:	20 ea       	ldi	r18, 0xA0	; 160
    4966:	36 e8       	ldi	r19, 0x86	; 134
    4968:	41 e0       	ldi	r20, 0x01	; 1
    496a:	50 e0       	ldi	r21, 0x00	; 0
    496c:	27 d3       	rcall	.+1614   	; 0x4fbc <__udivmodsi4>
    496e:	da 01       	movw	r26, r20
    4970:	c9 01       	movw	r24, r18
    4972:	40 97       	sbiw	r24, 0x10	; 16
    4974:	a1 09       	sbc	r26, r1
    4976:	b1 09       	sbc	r27, r1
    4978:	b6 95       	lsr	r27
    497a:	a7 95       	ror	r26
    497c:	97 95       	ror	r25
    497e:	87 95       	ror	r24
    4980:	89 83       	std	Y+1, r24	; 0x01
    4982:	11 c0       	rjmp	.+34     	; 0x49a6 <twiCreate+0x76>
    4984:	c7 01       	movw	r24, r14
    4986:	b6 01       	movw	r22, r12
    4988:	20 e8       	ldi	r18, 0x80	; 128
    498a:	3a e1       	ldi	r19, 0x1A	; 26
    498c:	46 e0       	ldi	r20, 0x06	; 6
    498e:	50 e0       	ldi	r21, 0x00	; 0
    4990:	15 d3       	rcall	.+1578   	; 0x4fbc <__udivmodsi4>
    4992:	da 01       	movw	r26, r20
    4994:	c9 01       	movw	r24, r18
    4996:	40 97       	sbiw	r24, 0x10	; 16
    4998:	a1 09       	sbc	r26, r1
    499a:	b1 09       	sbc	r27, r1
    499c:	b6 95       	lsr	r27
    499e:	a7 95       	ror	r26
    49a0:	97 95       	ror	r25
    49a2:	87 95       	ror	r24
    49a4:	89 83       	std	Y+1, r24	; 0x01
    49a6:	1b 83       	std	Y+3, r17	; 0x03
    49a8:	0a 83       	std	Y+2, r16	; 0x02
    49aa:	8c 2f       	mov	r24, r28
    49ac:	9d 2f       	mov	r25, r29
    49ae:	02 c0       	rjmp	.+4      	; 0x49b4 <twiCreate+0x84>
    49b0:	80 e0       	ldi	r24, 0x00	; 0
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	1f 91       	pop	r17
    49ba:	0f 91       	pop	r16
    49bc:	ff 90       	pop	r15
    49be:	ef 90       	pop	r14
    49c0:	df 90       	pop	r13
    49c2:	cf 90       	pop	r12
    49c4:	bf 90       	pop	r11
    49c6:	af 90       	pop	r10
    49c8:	08 95       	ret

000049ca <twiIsBusy>:
    49ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    49ce:	81 70       	andi	r24, 0x01	; 1
    49d0:	08 95       	ret

000049d2 <twiTransmit>:
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	00 97       	sbiw	r24, 0x00	; 0
    49de:	d1 f1       	breq	.+116    	; 0x4a54 <twiTransmit+0x82>
    49e0:	4a 30       	cpi	r20, 0x0A	; 10
    49e2:	d0 f5       	brcc	.+116    	; 0x4a58 <twiTransmit+0x86>
    49e4:	f4 2e       	mov	r15, r20
    49e6:	8b 01       	movw	r16, r22
    49e8:	ec 01       	movw	r28, r24
    49ea:	ef df       	rcall	.-34     	; 0x49ca <twiIsBusy>
    49ec:	81 11       	cpse	r24, r1
    49ee:	36 c0       	rjmp	.+108    	; 0x4a5c <twiTransmit+0x8a>
    49f0:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_twiCurrentHandler>
    49f4:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_twiCurrentHandler+0x1>
    49f8:	c8 17       	cp	r28, r24
    49fa:	d9 07       	cpc	r29, r25
    49fc:	41 f0       	breq	.+16     	; 0x4a0e <twiTransmit+0x3c>
    49fe:	87 df       	rcall	.-242    	; 0x490e <_initTwiInterface>
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4a06:	d0 93 a6 16 	sts	0x16A6, r29	; 0x8016a6 <_twiCurrentHandler+0x1>
    4a0a:	c0 93 a5 16 	sts	0x16A5, r28	; 0x8016a5 <_twiCurrentHandler>
    4a0e:	81 e0       	ldi	r24, 0x01	; 1
    4a10:	8f 0d       	add	r24, r15
    4a12:	80 93 a7 16 	sts	0x16A7, r24	; 0x8016a7 <_twiMessageLen>
    4a16:	88 81       	ld	r24, Y
    4a18:	88 0f       	add	r24, r24
    4a1a:	80 93 a8 16 	sts	0x16A8, r24	; 0x8016a8 <_twiMessageBuffer>
    4a1e:	ff 20       	and	r15, r15
    4a20:	89 f0       	breq	.+34     	; 0x4a44 <twiTransmit+0x72>
    4a22:	f8 01       	movw	r30, r16
    4a24:	a9 ea       	ldi	r26, 0xA9	; 169
    4a26:	b6 e1       	ldi	r27, 0x16	; 22
    4a28:	4f ef       	ldi	r20, 0xFF	; 255
    4a2a:	4f 0d       	add	r20, r15
    4a2c:	64 2f       	mov	r22, r20
    4a2e:	70 e0       	ldi	r23, 0x00	; 0
    4a30:	cb 01       	movw	r24, r22
    4a32:	01 96       	adiw	r24, 0x01	; 1
    4a34:	b8 01       	movw	r22, r16
    4a36:	68 0f       	add	r22, r24
    4a38:	79 1f       	adc	r23, r25
    4a3a:	81 91       	ld	r24, Z+
    4a3c:	8d 93       	st	X+, r24
    4a3e:	e6 17       	cp	r30, r22
    4a40:	f7 07       	cpc	r31, r23
    4a42:	d9 f7       	brne	.-10     	; 0x4a3a <twiTransmit+0x68>
    4a44:	88 ef       	ldi	r24, 0xF8	; 248
    4a46:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4a4a:	85 ea       	ldi	r24, 0xA5	; 165
    4a4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a50:	84 e0       	ldi	r24, 0x04	; 4
    4a52:	05 c0       	rjmp	.+10     	; 0x4a5e <twiTransmit+0x8c>
    4a54:	86 e0       	ldi	r24, 0x06	; 6
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <twiTransmit+0x8c>
    4a58:	87 e0       	ldi	r24, 0x07	; 7
    4a5a:	01 c0       	rjmp	.+2      	; 0x4a5e <twiTransmit+0x8c>
    4a5c:	82 e0       	ldi	r24, 0x02	; 2
    4a5e:	df 91       	pop	r29
    4a60:	cf 91       	pop	r28
    4a62:	1f 91       	pop	r17
    4a64:	0f 91       	pop	r16
    4a66:	ff 90       	pop	r15
    4a68:	08 95       	ret

00004a6a <twiReceive>:
    4a6a:	1f 93       	push	r17
    4a6c:	cf 93       	push	r28
    4a6e:	df 93       	push	r29
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	29 f1       	breq	.+74     	; 0x4abe <twiReceive+0x54>
    4a74:	6b 30       	cpi	r22, 0x0B	; 11
    4a76:	28 f5       	brcc	.+74     	; 0x4ac2 <twiReceive+0x58>
    4a78:	16 2f       	mov	r17, r22
    4a7a:	ec 01       	movw	r28, r24
    4a7c:	a6 df       	rcall	.-180    	; 0x49ca <twiIsBusy>
    4a7e:	81 11       	cpse	r24, r1
    4a80:	22 c0       	rjmp	.+68     	; 0x4ac6 <twiReceive+0x5c>
    4a82:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_twiCurrentHandler>
    4a86:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_twiCurrentHandler+0x1>
    4a8a:	c8 17       	cp	r28, r24
    4a8c:	d9 07       	cpc	r29, r25
    4a8e:	41 f0       	breq	.+16     	; 0x4aa0 <twiReceive+0x36>
    4a90:	3e df       	rcall	.-388    	; 0x490e <_initTwiInterface>
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4a98:	d0 93 a6 16 	sts	0x16A6, r29	; 0x8016a6 <_twiCurrentHandler+0x1>
    4a9c:	c0 93 a5 16 	sts	0x16A5, r28	; 0x8016a5 <_twiCurrentHandler>
    4aa0:	10 93 a7 16 	sts	0x16A7, r17	; 0x8016a7 <_twiMessageLen>
    4aa4:	88 81       	ld	r24, Y
    4aa6:	88 0f       	add	r24, r24
    4aa8:	81 60       	ori	r24, 0x01	; 1
    4aaa:	80 93 a8 16 	sts	0x16A8, r24	; 0x8016a8 <_twiMessageBuffer>
    4aae:	88 ef       	ldi	r24, 0xF8	; 248
    4ab0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ab4:	85 ea       	ldi	r24, 0xA5	; 165
    4ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4aba:	85 e0       	ldi	r24, 0x05	; 5
    4abc:	05 c0       	rjmp	.+10     	; 0x4ac8 <twiReceive+0x5e>
    4abe:	86 e0       	ldi	r24, 0x06	; 6
    4ac0:	03 c0       	rjmp	.+6      	; 0x4ac8 <twiReceive+0x5e>
    4ac2:	87 e0       	ldi	r24, 0x07	; 7
    4ac4:	01 c0       	rjmp	.+2      	; 0x4ac8 <twiReceive+0x5e>
    4ac6:	82 e0       	ldi	r24, 0x02	; 2
    4ac8:	df 91       	pop	r29
    4aca:	cf 91       	pop	r28
    4acc:	1f 91       	pop	r17
    4ace:	08 95       	ret

00004ad0 <__vector_39>:
    4ad0:	1f 92       	push	r1
    4ad2:	0f 92       	push	r0
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	0f 92       	push	r0
    4ad8:	11 24       	eor	r1, r1
    4ada:	0b b6       	in	r0, 0x3b	; 59
    4adc:	0f 92       	push	r0
    4ade:	2f 93       	push	r18
    4ae0:	3f 93       	push	r19
    4ae2:	4f 93       	push	r20
    4ae4:	5f 93       	push	r21
    4ae6:	6f 93       	push	r22
    4ae8:	7f 93       	push	r23
    4aea:	8f 93       	push	r24
    4aec:	9f 93       	push	r25
    4aee:	af 93       	push	r26
    4af0:	bf 93       	push	r27
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
    4af6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4afa:	8e 2f       	mov	r24, r30
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	fc 01       	movw	r30, r24
    4b00:	38 97       	sbiw	r30, 0x08	; 8
    4b02:	e1 35       	cpi	r30, 0x51	; 81
    4b04:	f1 05       	cpc	r31, r1
    4b06:	08 f0       	brcs	.+2      	; 0x4b0a <__vector_39+0x3a>
    4b08:	75 c0       	rjmp	.+234    	; 0x4bf4 <__vector_39+0x124>
    4b0a:	88 27       	eor	r24, r24
    4b0c:	e4 58       	subi	r30, 0x84	; 132
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	8f 4f       	sbci	r24, 0xFF	; 255
    4b12:	76 c2       	rjmp	.+1260   	; 0x5000 <__tablejump2__>
    4b14:	10 92 a4 16 	sts	0x16A4, r1	; 0x8016a4 <_index.1885>
    4b18:	e0 91 a4 16 	lds	r30, 0x16A4	; 0x8016a4 <_index.1885>
    4b1c:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <_twiMessageLen>
    4b20:	e8 17       	cp	r30, r24
    4b22:	70 f4       	brcc	.+28     	; 0x4b40 <__vector_39+0x70>
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	8e 0f       	add	r24, r30
    4b28:	80 93 a4 16 	sts	0x16A4, r24	; 0x8016a4 <_index.1885>
    4b2c:	f0 e0       	ldi	r31, 0x00	; 0
    4b2e:	e8 55       	subi	r30, 0x58	; 88
    4b30:	f9 4e       	sbci	r31, 0xE9	; 233
    4b32:	80 81       	ld	r24, Z
    4b34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4b38:	85 e8       	ldi	r24, 0x85	; 133
    4b3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b3e:	72 c0       	rjmp	.+228    	; 0x4c24 <__vector_39+0x154>
    4b40:	84 e9       	ldi	r24, 0x94	; 148
    4b42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b46:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_twiCurrentHandler>
    4b4a:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_twiCurrentHandler+0x1>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	12 96       	adiw	r26, 0x02	; 2
    4b52:	ed 91       	ld	r30, X+
    4b54:	fc 91       	ld	r31, X
    4b56:	13 97       	sbiw	r26, 0x03	; 3
    4b58:	30 97       	sbiw	r30, 0x00	; 0
    4b5a:	09 f4       	brne	.+2      	; 0x4b5e <__vector_39+0x8e>
    4b5c:	63 c0       	rjmp	.+198    	; 0x4c24 <__vector_39+0x154>
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	40 e0       	ldi	r20, 0x00	; 0
    4b62:	50 e0       	ldi	r21, 0x00	; 0
    4b64:	64 e0       	ldi	r22, 0x04	; 4
    4b66:	19 95       	eicall
    4b68:	5d c0       	rjmp	.+186    	; 0x4c24 <__vector_39+0x154>
    4b6a:	e0 91 a4 16 	lds	r30, 0x16A4	; 0x8016a4 <_index.1885>
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	8e 0f       	add	r24, r30
    4b72:	80 93 a4 16 	sts	0x16A4, r24	; 0x8016a4 <_index.1885>
    4b76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4b7a:	f0 e0       	ldi	r31, 0x00	; 0
    4b7c:	e8 55       	subi	r30, 0x58	; 88
    4b7e:	f9 4e       	sbci	r31, 0xE9	; 233
    4b80:	80 83       	st	Z, r24
    4b82:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4b86:	80 34       	cpi	r24, 0x40	; 64
    4b88:	11 f4       	brne	.+4      	; 0x4b8e <__vector_39+0xbe>
    4b8a:	10 92 a4 16 	sts	0x16A4, r1	; 0x8016a4 <_index.1885>
    4b8e:	20 91 a4 16 	lds	r18, 0x16A4	; 0x8016a4 <_index.1885>
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <_twiMessageLen>
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	28 17       	cp	r18, r24
    4b9e:	39 07       	cpc	r19, r25
    4ba0:	24 f4       	brge	.+8      	; 0x4baa <__vector_39+0xda>
    4ba2:	85 ec       	ldi	r24, 0xC5	; 197
    4ba4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ba8:	3d c0       	rjmp	.+122    	; 0x4c24 <__vector_39+0x154>
    4baa:	85 e8       	ldi	r24, 0x85	; 133
    4bac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bb0:	39 c0       	rjmp	.+114    	; 0x4c24 <__vector_39+0x154>
    4bb2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4bb6:	e0 91 a4 16 	lds	r30, 0x16A4	; 0x8016a4 <_index.1885>
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	e8 55       	subi	r30, 0x58	; 88
    4bbe:	f9 4e       	sbci	r31, 0xE9	; 233
    4bc0:	80 83       	st	Z, r24
    4bc2:	84 e9       	ldi	r24, 0x94	; 148
    4bc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bc8:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_twiCurrentHandler>
    4bcc:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_twiCurrentHandler+0x1>
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	12 96       	adiw	r26, 0x02	; 2
    4bd4:	ed 91       	ld	r30, X+
    4bd6:	fc 91       	ld	r31, X
    4bd8:	13 97       	sbiw	r26, 0x03	; 3
    4bda:	30 97       	sbiw	r30, 0x00	; 0
    4bdc:	19 f1       	breq	.+70     	; 0x4c24 <__vector_39+0x154>
    4bde:	20 91 a7 16 	lds	r18, 0x16A7	; 0x8016a7 <_twiMessageLen>
    4be2:	48 ea       	ldi	r20, 0xA8	; 168
    4be4:	56 e1       	ldi	r21, 0x16	; 22
    4be6:	65 e0       	ldi	r22, 0x05	; 5
    4be8:	19 95       	eicall
    4bea:	1c c0       	rjmp	.+56     	; 0x4c24 <__vector_39+0x154>
    4bec:	85 ea       	ldi	r24, 0xA5	; 165
    4bee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bf2:	18 c0       	rjmp	.+48     	; 0x4c24 <__vector_39+0x154>
    4bf4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4bf8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4bfc:	84 e0       	ldi	r24, 0x04	; 4
    4bfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c02:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_twiCurrentHandler>
    4c06:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_twiCurrentHandler+0x1>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	12 96       	adiw	r26, 0x02	; 2
    4c0e:	ed 91       	ld	r30, X+
    4c10:	fc 91       	ld	r31, X
    4c12:	13 97       	sbiw	r26, 0x03	; 3
    4c14:	30 97       	sbiw	r30, 0x00	; 0
    4c16:	31 f0       	breq	.+12     	; 0x4c24 <__vector_39+0x154>
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	40 e0       	ldi	r20, 0x00	; 0
    4c1c:	50 e0       	ldi	r21, 0x00	; 0
    4c1e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4c22:	19 95       	eicall
    4c24:	ff 91       	pop	r31
    4c26:	ef 91       	pop	r30
    4c28:	bf 91       	pop	r27
    4c2a:	af 91       	pop	r26
    4c2c:	9f 91       	pop	r25
    4c2e:	8f 91       	pop	r24
    4c30:	7f 91       	pop	r23
    4c32:	6f 91       	pop	r22
    4c34:	5f 91       	pop	r21
    4c36:	4f 91       	pop	r20
    4c38:	3f 91       	pop	r19
    4c3a:	2f 91       	pop	r18
    4c3c:	0f 90       	pop	r0
    4c3e:	0b be       	out	0x3b, r0	; 59
    4c40:	0f 90       	pop	r0
    4c42:	0f be       	out	0x3f, r0	; 63
    4c44:	0f 90       	pop	r0
    4c46:	1f 90       	pop	r1
    4c48:	18 95       	reti

00004c4a <fifo_init>:
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	41 11       	cpse	r20, r1
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <fifo_init+0x8>
    4c50:	00 d3       	rcall	.+1536   	; 0x5252 <abort>
    4c52:	84 2f       	mov	r24, r20
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	9c 01       	movw	r18, r24
    4c58:	21 50       	subi	r18, 0x01	; 1
    4c5a:	31 09       	sbc	r19, r1
    4c5c:	82 23       	and	r24, r18
    4c5e:	93 23       	and	r25, r19
    4c60:	89 2b       	or	r24, r25
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <fifo_init+0x1c>
    4c64:	f6 d2       	rcall	.+1516   	; 0x5252 <abort>
    4c66:	41 38       	cpi	r20, 0x81	; 129
    4c68:	08 f0       	brcs	.+2      	; 0x4c6c <fifo_init+0x22>
    4c6a:	f3 d2       	rcall	.+1510   	; 0x5252 <abort>
    4c6c:	12 82       	std	Z+2, r1	; 0x02
    4c6e:	13 82       	std	Z+3, r1	; 0x03
    4c70:	44 83       	std	Z+4, r20	; 0x04
    4c72:	44 0f       	add	r20, r20
    4c74:	41 50       	subi	r20, 0x01	; 1
    4c76:	45 83       	std	Z+5, r20	; 0x05
    4c78:	71 83       	std	Z+1, r23	; 0x01
    4c7a:	60 83       	st	Z, r22
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	08 95       	ret

00004c82 <__subsf3>:
    4c82:	50 58       	subi	r21, 0x80	; 128

00004c84 <__addsf3>:
    4c84:	bb 27       	eor	r27, r27
    4c86:	aa 27       	eor	r26, r26
    4c88:	0e d0       	rcall	.+28     	; 0x4ca6 <__addsf3x>
    4c8a:	21 c1       	rjmp	.+578    	; 0x4ece <__fp_round>
    4c8c:	12 d1       	rcall	.+548    	; 0x4eb2 <__fp_pscA>
    4c8e:	30 f0       	brcs	.+12     	; 0x4c9c <__addsf3+0x18>
    4c90:	17 d1       	rcall	.+558    	; 0x4ec0 <__fp_pscB>
    4c92:	20 f0       	brcs	.+8      	; 0x4c9c <__addsf3+0x18>
    4c94:	31 f4       	brne	.+12     	; 0x4ca2 <__addsf3+0x1e>
    4c96:	9f 3f       	cpi	r25, 0xFF	; 255
    4c98:	11 f4       	brne	.+4      	; 0x4c9e <__addsf3+0x1a>
    4c9a:	1e f4       	brtc	.+6      	; 0x4ca2 <__addsf3+0x1e>
    4c9c:	07 c1       	rjmp	.+526    	; 0x4eac <__fp_nan>
    4c9e:	0e f4       	brtc	.+2      	; 0x4ca2 <__addsf3+0x1e>
    4ca0:	e0 95       	com	r30
    4ca2:	e7 fb       	bst	r30, 7
    4ca4:	fd c0       	rjmp	.+506    	; 0x4ea0 <__fp_inf>

00004ca6 <__addsf3x>:
    4ca6:	e9 2f       	mov	r30, r25
    4ca8:	0e 94 c4 19 	call	0x3388	; 0x3388 <__fp_split3>
    4cac:	78 f3       	brcs	.-34     	; 0x4c8c <__addsf3+0x8>
    4cae:	ba 17       	cp	r27, r26
    4cb0:	62 07       	cpc	r22, r18
    4cb2:	73 07       	cpc	r23, r19
    4cb4:	84 07       	cpc	r24, r20
    4cb6:	95 07       	cpc	r25, r21
    4cb8:	20 f0       	brcs	.+8      	; 0x4cc2 <__addsf3x+0x1c>
    4cba:	79 f4       	brne	.+30     	; 0x4cda <__addsf3x+0x34>
    4cbc:	a6 f5       	brtc	.+104    	; 0x4d26 <__addsf3x+0x80>
    4cbe:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__fp_zero>
    4cc2:	0e f4       	brtc	.+2      	; 0x4cc6 <__addsf3x+0x20>
    4cc4:	e0 95       	com	r30
    4cc6:	0b 2e       	mov	r0, r27
    4cc8:	ba 2f       	mov	r27, r26
    4cca:	a0 2d       	mov	r26, r0
    4ccc:	0b 01       	movw	r0, r22
    4cce:	b9 01       	movw	r22, r18
    4cd0:	90 01       	movw	r18, r0
    4cd2:	0c 01       	movw	r0, r24
    4cd4:	ca 01       	movw	r24, r20
    4cd6:	a0 01       	movw	r20, r0
    4cd8:	11 24       	eor	r1, r1
    4cda:	ff 27       	eor	r31, r31
    4cdc:	59 1b       	sub	r21, r25
    4cde:	99 f0       	breq	.+38     	; 0x4d06 <__addsf3x+0x60>
    4ce0:	59 3f       	cpi	r21, 0xF9	; 249
    4ce2:	50 f4       	brcc	.+20     	; 0x4cf8 <__addsf3x+0x52>
    4ce4:	50 3e       	cpi	r21, 0xE0	; 224
    4ce6:	68 f1       	brcs	.+90     	; 0x4d42 <__addsf3x+0x9c>
    4ce8:	1a 16       	cp	r1, r26
    4cea:	f0 40       	sbci	r31, 0x00	; 0
    4cec:	a2 2f       	mov	r26, r18
    4cee:	23 2f       	mov	r18, r19
    4cf0:	34 2f       	mov	r19, r20
    4cf2:	44 27       	eor	r20, r20
    4cf4:	58 5f       	subi	r21, 0xF8	; 248
    4cf6:	f3 cf       	rjmp	.-26     	; 0x4cde <__addsf3x+0x38>
    4cf8:	46 95       	lsr	r20
    4cfa:	37 95       	ror	r19
    4cfc:	27 95       	ror	r18
    4cfe:	a7 95       	ror	r26
    4d00:	f0 40       	sbci	r31, 0x00	; 0
    4d02:	53 95       	inc	r21
    4d04:	c9 f7       	brne	.-14     	; 0x4cf8 <__addsf3x+0x52>
    4d06:	7e f4       	brtc	.+30     	; 0x4d26 <__addsf3x+0x80>
    4d08:	1f 16       	cp	r1, r31
    4d0a:	ba 0b       	sbc	r27, r26
    4d0c:	62 0b       	sbc	r22, r18
    4d0e:	73 0b       	sbc	r23, r19
    4d10:	84 0b       	sbc	r24, r20
    4d12:	ba f0       	brmi	.+46     	; 0x4d42 <__addsf3x+0x9c>
    4d14:	91 50       	subi	r25, 0x01	; 1
    4d16:	a1 f0       	breq	.+40     	; 0x4d40 <__addsf3x+0x9a>
    4d18:	ff 0f       	add	r31, r31
    4d1a:	bb 1f       	adc	r27, r27
    4d1c:	66 1f       	adc	r22, r22
    4d1e:	77 1f       	adc	r23, r23
    4d20:	88 1f       	adc	r24, r24
    4d22:	c2 f7       	brpl	.-16     	; 0x4d14 <__addsf3x+0x6e>
    4d24:	0e c0       	rjmp	.+28     	; 0x4d42 <__addsf3x+0x9c>
    4d26:	ba 0f       	add	r27, r26
    4d28:	62 1f       	adc	r22, r18
    4d2a:	73 1f       	adc	r23, r19
    4d2c:	84 1f       	adc	r24, r20
    4d2e:	48 f4       	brcc	.+18     	; 0x4d42 <__addsf3x+0x9c>
    4d30:	87 95       	ror	r24
    4d32:	77 95       	ror	r23
    4d34:	67 95       	ror	r22
    4d36:	b7 95       	ror	r27
    4d38:	f7 95       	ror	r31
    4d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    4d3c:	08 f0       	brcs	.+2      	; 0x4d40 <__addsf3x+0x9a>
    4d3e:	b1 cf       	rjmp	.-158    	; 0x4ca2 <__addsf3+0x1e>
    4d40:	93 95       	inc	r25
    4d42:	88 0f       	add	r24, r24
    4d44:	08 f0       	brcs	.+2      	; 0x4d48 <__addsf3x+0xa2>
    4d46:	99 27       	eor	r25, r25
    4d48:	ee 0f       	add	r30, r30
    4d4a:	97 95       	ror	r25
    4d4c:	87 95       	ror	r24
    4d4e:	08 95       	ret

00004d50 <__divsf3>:
    4d50:	0d d0       	rcall	.+26     	; 0x4d6c <__divsf3x>
    4d52:	bd c0       	rjmp	.+378    	; 0x4ece <__fp_round>
    4d54:	b5 d0       	rcall	.+362    	; 0x4ec0 <__fp_pscB>
    4d56:	48 f0       	brcs	.+18     	; 0x4d6a <__divsf3+0x1a>
    4d58:	ac d0       	rcall	.+344    	; 0x4eb2 <__fp_pscA>
    4d5a:	38 f0       	brcs	.+14     	; 0x4d6a <__divsf3+0x1a>
    4d5c:	21 f4       	brne	.+8      	; 0x4d66 <__divsf3+0x16>
    4d5e:	5f 3f       	cpi	r21, 0xFF	; 255
    4d60:	21 f0       	breq	.+8      	; 0x4d6a <__divsf3+0x1a>
    4d62:	9e c0       	rjmp	.+316    	; 0x4ea0 <__fp_inf>
    4d64:	51 11       	cpse	r21, r1
    4d66:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__fp_szero>
    4d6a:	a0 c0       	rjmp	.+320    	; 0x4eac <__fp_nan>

00004d6c <__divsf3x>:
    4d6c:	0e 94 c4 19 	call	0x3388	; 0x3388 <__fp_split3>
    4d70:	88 f3       	brcs	.-30     	; 0x4d54 <__divsf3+0x4>

00004d72 <__divsf3_pse>:
    4d72:	99 23       	and	r25, r25
    4d74:	b9 f3       	breq	.-18     	; 0x4d64 <__divsf3+0x14>
    4d76:	55 23       	and	r21, r21
    4d78:	a1 f3       	breq	.-24     	; 0x4d62 <__divsf3+0x12>
    4d7a:	95 1b       	sub	r25, r21
    4d7c:	55 0b       	sbc	r21, r21
    4d7e:	bb 27       	eor	r27, r27
    4d80:	aa 27       	eor	r26, r26
    4d82:	62 17       	cp	r22, r18
    4d84:	73 07       	cpc	r23, r19
    4d86:	84 07       	cpc	r24, r20
    4d88:	38 f0       	brcs	.+14     	; 0x4d98 <__divsf3_pse+0x26>
    4d8a:	9f 5f       	subi	r25, 0xFF	; 255
    4d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8e:	22 0f       	add	r18, r18
    4d90:	33 1f       	adc	r19, r19
    4d92:	44 1f       	adc	r20, r20
    4d94:	aa 1f       	adc	r26, r26
    4d96:	a9 f3       	breq	.-22     	; 0x4d82 <__divsf3_pse+0x10>
    4d98:	34 d0       	rcall	.+104    	; 0x4e02 <__divsf3_pse+0x90>
    4d9a:	0e 2e       	mov	r0, r30
    4d9c:	3a f0       	brmi	.+14     	; 0x4dac <__divsf3_pse+0x3a>
    4d9e:	e0 e8       	ldi	r30, 0x80	; 128
    4da0:	31 d0       	rcall	.+98     	; 0x4e04 <__divsf3_pse+0x92>
    4da2:	91 50       	subi	r25, 0x01	; 1
    4da4:	50 40       	sbci	r21, 0x00	; 0
    4da6:	e6 95       	lsr	r30
    4da8:	00 1c       	adc	r0, r0
    4daa:	ca f7       	brpl	.-14     	; 0x4d9e <__divsf3_pse+0x2c>
    4dac:	2a d0       	rcall	.+84     	; 0x4e02 <__divsf3_pse+0x90>
    4dae:	fe 2f       	mov	r31, r30
    4db0:	28 d0       	rcall	.+80     	; 0x4e02 <__divsf3_pse+0x90>
    4db2:	66 0f       	add	r22, r22
    4db4:	77 1f       	adc	r23, r23
    4db6:	88 1f       	adc	r24, r24
    4db8:	bb 1f       	adc	r27, r27
    4dba:	26 17       	cp	r18, r22
    4dbc:	37 07       	cpc	r19, r23
    4dbe:	48 07       	cpc	r20, r24
    4dc0:	ab 07       	cpc	r26, r27
    4dc2:	b0 e8       	ldi	r27, 0x80	; 128
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <__divsf3_pse+0x56>
    4dc6:	bb 0b       	sbc	r27, r27
    4dc8:	80 2d       	mov	r24, r0
    4dca:	bf 01       	movw	r22, r30
    4dcc:	ff 27       	eor	r31, r31
    4dce:	93 58       	subi	r25, 0x83	; 131
    4dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd2:	32 f0       	brmi	.+12     	; 0x4de0 <__divsf3_pse+0x6e>
    4dd4:	9e 3f       	cpi	r25, 0xFE	; 254
    4dd6:	51 05       	cpc	r21, r1
    4dd8:	70 f0       	brcs	.+28     	; 0x4df6 <__divsf3_pse+0x84>
    4dda:	62 c0       	rjmp	.+196    	; 0x4ea0 <__fp_inf>
    4ddc:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__fp_szero>
    4de0:	5f 3f       	cpi	r21, 0xFF	; 255
    4de2:	e4 f3       	brlt	.-8      	; 0x4ddc <__divsf3_pse+0x6a>
    4de4:	98 3e       	cpi	r25, 0xE8	; 232
    4de6:	d4 f3       	brlt	.-12     	; 0x4ddc <__divsf3_pse+0x6a>
    4de8:	86 95       	lsr	r24
    4dea:	77 95       	ror	r23
    4dec:	67 95       	ror	r22
    4dee:	b7 95       	ror	r27
    4df0:	f7 95       	ror	r31
    4df2:	9f 5f       	subi	r25, 0xFF	; 255
    4df4:	c9 f7       	brne	.-14     	; 0x4de8 <__divsf3_pse+0x76>
    4df6:	88 0f       	add	r24, r24
    4df8:	91 1d       	adc	r25, r1
    4dfa:	96 95       	lsr	r25
    4dfc:	87 95       	ror	r24
    4dfe:	97 f9       	bld	r25, 7
    4e00:	08 95       	ret
    4e02:	e1 e0       	ldi	r30, 0x01	; 1
    4e04:	66 0f       	add	r22, r22
    4e06:	77 1f       	adc	r23, r23
    4e08:	88 1f       	adc	r24, r24
    4e0a:	bb 1f       	adc	r27, r27
    4e0c:	62 17       	cp	r22, r18
    4e0e:	73 07       	cpc	r23, r19
    4e10:	84 07       	cpc	r24, r20
    4e12:	ba 07       	cpc	r27, r26
    4e14:	20 f0       	brcs	.+8      	; 0x4e1e <__divsf3_pse+0xac>
    4e16:	62 1b       	sub	r22, r18
    4e18:	73 0b       	sbc	r23, r19
    4e1a:	84 0b       	sbc	r24, r20
    4e1c:	ba 0b       	sbc	r27, r26
    4e1e:	ee 1f       	adc	r30, r30
    4e20:	88 f7       	brcc	.-30     	; 0x4e04 <__divsf3_pse+0x92>
    4e22:	e0 95       	com	r30
    4e24:	08 95       	ret

00004e26 <__floatunsisf>:
    4e26:	e8 94       	clt
    4e28:	09 c0       	rjmp	.+18     	; 0x4e3c <__floatsisf+0x12>

00004e2a <__floatsisf>:
    4e2a:	97 fb       	bst	r25, 7
    4e2c:	3e f4       	brtc	.+14     	; 0x4e3c <__floatsisf+0x12>
    4e2e:	90 95       	com	r25
    4e30:	80 95       	com	r24
    4e32:	70 95       	com	r23
    4e34:	61 95       	neg	r22
    4e36:	7f 4f       	sbci	r23, 0xFF	; 255
    4e38:	8f 4f       	sbci	r24, 0xFF	; 255
    4e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e3c:	99 23       	and	r25, r25
    4e3e:	a9 f0       	breq	.+42     	; 0x4e6a <__floatsisf+0x40>
    4e40:	f9 2f       	mov	r31, r25
    4e42:	96 e9       	ldi	r25, 0x96	; 150
    4e44:	bb 27       	eor	r27, r27
    4e46:	93 95       	inc	r25
    4e48:	f6 95       	lsr	r31
    4e4a:	87 95       	ror	r24
    4e4c:	77 95       	ror	r23
    4e4e:	67 95       	ror	r22
    4e50:	b7 95       	ror	r27
    4e52:	f1 11       	cpse	r31, r1
    4e54:	f8 cf       	rjmp	.-16     	; 0x4e46 <__floatsisf+0x1c>
    4e56:	fa f4       	brpl	.+62     	; 0x4e96 <__floatsisf+0x6c>
    4e58:	bb 0f       	add	r27, r27
    4e5a:	11 f4       	brne	.+4      	; 0x4e60 <__floatsisf+0x36>
    4e5c:	60 ff       	sbrs	r22, 0
    4e5e:	1b c0       	rjmp	.+54     	; 0x4e96 <__floatsisf+0x6c>
    4e60:	6f 5f       	subi	r22, 0xFF	; 255
    4e62:	7f 4f       	sbci	r23, 0xFF	; 255
    4e64:	8f 4f       	sbci	r24, 0xFF	; 255
    4e66:	9f 4f       	sbci	r25, 0xFF	; 255
    4e68:	16 c0       	rjmp	.+44     	; 0x4e96 <__floatsisf+0x6c>
    4e6a:	88 23       	and	r24, r24
    4e6c:	11 f0       	breq	.+4      	; 0x4e72 <__floatsisf+0x48>
    4e6e:	96 e9       	ldi	r25, 0x96	; 150
    4e70:	11 c0       	rjmp	.+34     	; 0x4e94 <__floatsisf+0x6a>
    4e72:	77 23       	and	r23, r23
    4e74:	21 f0       	breq	.+8      	; 0x4e7e <__floatsisf+0x54>
    4e76:	9e e8       	ldi	r25, 0x8E	; 142
    4e78:	87 2f       	mov	r24, r23
    4e7a:	76 2f       	mov	r23, r22
    4e7c:	05 c0       	rjmp	.+10     	; 0x4e88 <__floatsisf+0x5e>
    4e7e:	66 23       	and	r22, r22
    4e80:	71 f0       	breq	.+28     	; 0x4e9e <__floatsisf+0x74>
    4e82:	96 e8       	ldi	r25, 0x86	; 134
    4e84:	86 2f       	mov	r24, r22
    4e86:	70 e0       	ldi	r23, 0x00	; 0
    4e88:	60 e0       	ldi	r22, 0x00	; 0
    4e8a:	2a f0       	brmi	.+10     	; 0x4e96 <__floatsisf+0x6c>
    4e8c:	9a 95       	dec	r25
    4e8e:	66 0f       	add	r22, r22
    4e90:	77 1f       	adc	r23, r23
    4e92:	88 1f       	adc	r24, r24
    4e94:	da f7       	brpl	.-10     	; 0x4e8c <__floatsisf+0x62>
    4e96:	88 0f       	add	r24, r24
    4e98:	96 95       	lsr	r25
    4e9a:	87 95       	ror	r24
    4e9c:	97 f9       	bld	r25, 7
    4e9e:	08 95       	ret

00004ea0 <__fp_inf>:
    4ea0:	97 f9       	bld	r25, 7
    4ea2:	9f 67       	ori	r25, 0x7F	; 127
    4ea4:	80 e8       	ldi	r24, 0x80	; 128
    4ea6:	70 e0       	ldi	r23, 0x00	; 0
    4ea8:	60 e0       	ldi	r22, 0x00	; 0
    4eaa:	08 95       	ret

00004eac <__fp_nan>:
    4eac:	9f ef       	ldi	r25, 0xFF	; 255
    4eae:	80 ec       	ldi	r24, 0xC0	; 192
    4eb0:	08 95       	ret

00004eb2 <__fp_pscA>:
    4eb2:	00 24       	eor	r0, r0
    4eb4:	0a 94       	dec	r0
    4eb6:	16 16       	cp	r1, r22
    4eb8:	17 06       	cpc	r1, r23
    4eba:	18 06       	cpc	r1, r24
    4ebc:	09 06       	cpc	r0, r25
    4ebe:	08 95       	ret

00004ec0 <__fp_pscB>:
    4ec0:	00 24       	eor	r0, r0
    4ec2:	0a 94       	dec	r0
    4ec4:	12 16       	cp	r1, r18
    4ec6:	13 06       	cpc	r1, r19
    4ec8:	14 06       	cpc	r1, r20
    4eca:	05 06       	cpc	r0, r21
    4ecc:	08 95       	ret

00004ece <__fp_round>:
    4ece:	09 2e       	mov	r0, r25
    4ed0:	03 94       	inc	r0
    4ed2:	00 0c       	add	r0, r0
    4ed4:	11 f4       	brne	.+4      	; 0x4eda <__fp_round+0xc>
    4ed6:	88 23       	and	r24, r24
    4ed8:	52 f0       	brmi	.+20     	; 0x4eee <__fp_round+0x20>
    4eda:	bb 0f       	add	r27, r27
    4edc:	40 f4       	brcc	.+16     	; 0x4eee <__fp_round+0x20>
    4ede:	bf 2b       	or	r27, r31
    4ee0:	11 f4       	brne	.+4      	; 0x4ee6 <__fp_round+0x18>
    4ee2:	60 ff       	sbrs	r22, 0
    4ee4:	04 c0       	rjmp	.+8      	; 0x4eee <__fp_round+0x20>
    4ee6:	6f 5f       	subi	r22, 0xFF	; 255
    4ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eea:	8f 4f       	sbci	r24, 0xFF	; 255
    4eec:	9f 4f       	sbci	r25, 0xFF	; 255
    4eee:	08 95       	ret

00004ef0 <__mulsf3>:
    4ef0:	0c d0       	rcall	.+24     	; 0x4f0a <__mulsf3x>
    4ef2:	ed cf       	rjmp	.-38     	; 0x4ece <__fp_round>
    4ef4:	de df       	rcall	.-68     	; 0x4eb2 <__fp_pscA>
    4ef6:	28 f0       	brcs	.+10     	; 0x4f02 <__mulsf3+0x12>
    4ef8:	e3 df       	rcall	.-58     	; 0x4ec0 <__fp_pscB>
    4efa:	18 f0       	brcs	.+6      	; 0x4f02 <__mulsf3+0x12>
    4efc:	95 23       	and	r25, r21
    4efe:	09 f0       	breq	.+2      	; 0x4f02 <__mulsf3+0x12>
    4f00:	cf cf       	rjmp	.-98     	; 0x4ea0 <__fp_inf>
    4f02:	d4 cf       	rjmp	.-88     	; 0x4eac <__fp_nan>
    4f04:	11 24       	eor	r1, r1
    4f06:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__fp_szero>

00004f0a <__mulsf3x>:
    4f0a:	0e 94 c4 19 	call	0x3388	; 0x3388 <__fp_split3>
    4f0e:	90 f3       	brcs	.-28     	; 0x4ef4 <__mulsf3+0x4>

00004f10 <__mulsf3_pse>:
    4f10:	95 9f       	mul	r25, r21
    4f12:	c1 f3       	breq	.-16     	; 0x4f04 <__mulsf3+0x14>
    4f14:	95 0f       	add	r25, r21
    4f16:	50 e0       	ldi	r21, 0x00	; 0
    4f18:	55 1f       	adc	r21, r21
    4f1a:	62 9f       	mul	r22, r18
    4f1c:	f0 01       	movw	r30, r0
    4f1e:	72 9f       	mul	r23, r18
    4f20:	bb 27       	eor	r27, r27
    4f22:	f0 0d       	add	r31, r0
    4f24:	b1 1d       	adc	r27, r1
    4f26:	63 9f       	mul	r22, r19
    4f28:	aa 27       	eor	r26, r26
    4f2a:	f0 0d       	add	r31, r0
    4f2c:	b1 1d       	adc	r27, r1
    4f2e:	aa 1f       	adc	r26, r26
    4f30:	64 9f       	mul	r22, r20
    4f32:	66 27       	eor	r22, r22
    4f34:	b0 0d       	add	r27, r0
    4f36:	a1 1d       	adc	r26, r1
    4f38:	66 1f       	adc	r22, r22
    4f3a:	82 9f       	mul	r24, r18
    4f3c:	22 27       	eor	r18, r18
    4f3e:	b0 0d       	add	r27, r0
    4f40:	a1 1d       	adc	r26, r1
    4f42:	62 1f       	adc	r22, r18
    4f44:	73 9f       	mul	r23, r19
    4f46:	b0 0d       	add	r27, r0
    4f48:	a1 1d       	adc	r26, r1
    4f4a:	62 1f       	adc	r22, r18
    4f4c:	83 9f       	mul	r24, r19
    4f4e:	a0 0d       	add	r26, r0
    4f50:	61 1d       	adc	r22, r1
    4f52:	22 1f       	adc	r18, r18
    4f54:	74 9f       	mul	r23, r20
    4f56:	33 27       	eor	r19, r19
    4f58:	a0 0d       	add	r26, r0
    4f5a:	61 1d       	adc	r22, r1
    4f5c:	23 1f       	adc	r18, r19
    4f5e:	84 9f       	mul	r24, r20
    4f60:	60 0d       	add	r22, r0
    4f62:	21 1d       	adc	r18, r1
    4f64:	82 2f       	mov	r24, r18
    4f66:	76 2f       	mov	r23, r22
    4f68:	6a 2f       	mov	r22, r26
    4f6a:	11 24       	eor	r1, r1
    4f6c:	9f 57       	subi	r25, 0x7F	; 127
    4f6e:	50 40       	sbci	r21, 0x00	; 0
    4f70:	92 f0       	brmi	.+36     	; 0x4f96 <__mulsf3_pse+0x86>
    4f72:	e9 f0       	breq	.+58     	; 0x4fae <__mulsf3_pse+0x9e>
    4f74:	88 23       	and	r24, r24
    4f76:	4a f0       	brmi	.+18     	; 0x4f8a <__mulsf3_pse+0x7a>
    4f78:	ee 0f       	add	r30, r30
    4f7a:	ff 1f       	adc	r31, r31
    4f7c:	bb 1f       	adc	r27, r27
    4f7e:	66 1f       	adc	r22, r22
    4f80:	77 1f       	adc	r23, r23
    4f82:	88 1f       	adc	r24, r24
    4f84:	91 50       	subi	r25, 0x01	; 1
    4f86:	50 40       	sbci	r21, 0x00	; 0
    4f88:	a9 f7       	brne	.-22     	; 0x4f74 <__mulsf3_pse+0x64>
    4f8a:	9e 3f       	cpi	r25, 0xFE	; 254
    4f8c:	51 05       	cpc	r21, r1
    4f8e:	78 f0       	brcs	.+30     	; 0x4fae <__mulsf3_pse+0x9e>
    4f90:	87 cf       	rjmp	.-242    	; 0x4ea0 <__fp_inf>
    4f92:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__fp_szero>
    4f96:	5f 3f       	cpi	r21, 0xFF	; 255
    4f98:	e4 f3       	brlt	.-8      	; 0x4f92 <__mulsf3_pse+0x82>
    4f9a:	98 3e       	cpi	r25, 0xE8	; 232
    4f9c:	d4 f3       	brlt	.-12     	; 0x4f92 <__mulsf3_pse+0x82>
    4f9e:	86 95       	lsr	r24
    4fa0:	77 95       	ror	r23
    4fa2:	67 95       	ror	r22
    4fa4:	b7 95       	ror	r27
    4fa6:	f7 95       	ror	r31
    4fa8:	e7 95       	ror	r30
    4faa:	9f 5f       	subi	r25, 0xFF	; 255
    4fac:	c1 f7       	brne	.-16     	; 0x4f9e <__mulsf3_pse+0x8e>
    4fae:	fe 2b       	or	r31, r30
    4fb0:	88 0f       	add	r24, r24
    4fb2:	91 1d       	adc	r25, r1
    4fb4:	96 95       	lsr	r25
    4fb6:	87 95       	ror	r24
    4fb8:	97 f9       	bld	r25, 7
    4fba:	08 95       	ret

00004fbc <__udivmodsi4>:
    4fbc:	a1 e2       	ldi	r26, 0x21	; 33
    4fbe:	1a 2e       	mov	r1, r26
    4fc0:	aa 1b       	sub	r26, r26
    4fc2:	bb 1b       	sub	r27, r27
    4fc4:	fd 01       	movw	r30, r26
    4fc6:	0d c0       	rjmp	.+26     	; 0x4fe2 <__udivmodsi4_ep>

00004fc8 <__udivmodsi4_loop>:
    4fc8:	aa 1f       	adc	r26, r26
    4fca:	bb 1f       	adc	r27, r27
    4fcc:	ee 1f       	adc	r30, r30
    4fce:	ff 1f       	adc	r31, r31
    4fd0:	a2 17       	cp	r26, r18
    4fd2:	b3 07       	cpc	r27, r19
    4fd4:	e4 07       	cpc	r30, r20
    4fd6:	f5 07       	cpc	r31, r21
    4fd8:	20 f0       	brcs	.+8      	; 0x4fe2 <__udivmodsi4_ep>
    4fda:	a2 1b       	sub	r26, r18
    4fdc:	b3 0b       	sbc	r27, r19
    4fde:	e4 0b       	sbc	r30, r20
    4fe0:	f5 0b       	sbc	r31, r21

00004fe2 <__udivmodsi4_ep>:
    4fe2:	66 1f       	adc	r22, r22
    4fe4:	77 1f       	adc	r23, r23
    4fe6:	88 1f       	adc	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	1a 94       	dec	r1
    4fec:	69 f7       	brne	.-38     	; 0x4fc8 <__udivmodsi4_loop>
    4fee:	60 95       	com	r22
    4ff0:	70 95       	com	r23
    4ff2:	80 95       	com	r24
    4ff4:	90 95       	com	r25
    4ff6:	9b 01       	movw	r18, r22
    4ff8:	ac 01       	movw	r20, r24
    4ffa:	bd 01       	movw	r22, r26
    4ffc:	cf 01       	movw	r24, r30
    4ffe:	08 95       	ret

00005000 <__tablejump2__>:
    5000:	ee 0f       	add	r30, r30
    5002:	ff 1f       	adc	r31, r31
    5004:	88 1f       	adc	r24, r24
    5006:	8b bf       	out	0x3b, r24	; 59
    5008:	07 90       	elpm	r0, Z+
    500a:	f6 91       	elpm	r31, Z
    500c:	e0 2d       	mov	r30, r0
    500e:	19 94       	eijmp

00005010 <malloc>:
    5010:	0f 93       	push	r16
    5012:	1f 93       	push	r17
    5014:	cf 93       	push	r28
    5016:	df 93       	push	r29
    5018:	82 30       	cpi	r24, 0x02	; 2
    501a:	91 05       	cpc	r25, r1
    501c:	10 f4       	brcc	.+4      	; 0x5022 <malloc+0x12>
    501e:	82 e0       	ldi	r24, 0x02	; 2
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <__flp>
    5026:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <__flp+0x1>
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	a0 e0       	ldi	r26, 0x00	; 0
    5030:	b0 e0       	ldi	r27, 0x00	; 0
    5032:	30 97       	sbiw	r30, 0x00	; 0
    5034:	19 f1       	breq	.+70     	; 0x507c <malloc+0x6c>
    5036:	40 81       	ld	r20, Z
    5038:	51 81       	ldd	r21, Z+1	; 0x01
    503a:	02 81       	ldd	r16, Z+2	; 0x02
    503c:	13 81       	ldd	r17, Z+3	; 0x03
    503e:	48 17       	cp	r20, r24
    5040:	59 07       	cpc	r21, r25
    5042:	c8 f0       	brcs	.+50     	; 0x5076 <malloc+0x66>
    5044:	84 17       	cp	r24, r20
    5046:	95 07       	cpc	r25, r21
    5048:	69 f4       	brne	.+26     	; 0x5064 <malloc+0x54>
    504a:	10 97       	sbiw	r26, 0x00	; 0
    504c:	31 f0       	breq	.+12     	; 0x505a <malloc+0x4a>
    504e:	12 96       	adiw	r26, 0x02	; 2
    5050:	0c 93       	st	X, r16
    5052:	12 97       	sbiw	r26, 0x02	; 2
    5054:	13 96       	adiw	r26, 0x03	; 3
    5056:	1c 93       	st	X, r17
    5058:	27 c0       	rjmp	.+78     	; 0x50a8 <malloc+0x98>
    505a:	00 93 bf 16 	sts	0x16BF, r16	; 0x8016bf <__flp>
    505e:	10 93 c0 16 	sts	0x16C0, r17	; 0x8016c0 <__flp+0x1>
    5062:	22 c0       	rjmp	.+68     	; 0x50a8 <malloc+0x98>
    5064:	21 15       	cp	r18, r1
    5066:	31 05       	cpc	r19, r1
    5068:	19 f0       	breq	.+6      	; 0x5070 <malloc+0x60>
    506a:	42 17       	cp	r20, r18
    506c:	53 07       	cpc	r21, r19
    506e:	18 f4       	brcc	.+6      	; 0x5076 <malloc+0x66>
    5070:	9a 01       	movw	r18, r20
    5072:	bd 01       	movw	r22, r26
    5074:	ef 01       	movw	r28, r30
    5076:	df 01       	movw	r26, r30
    5078:	f8 01       	movw	r30, r16
    507a:	db cf       	rjmp	.-74     	; 0x5032 <malloc+0x22>
    507c:	21 15       	cp	r18, r1
    507e:	31 05       	cpc	r19, r1
    5080:	f9 f0       	breq	.+62     	; 0x50c0 <malloc+0xb0>
    5082:	28 1b       	sub	r18, r24
    5084:	39 0b       	sbc	r19, r25
    5086:	24 30       	cpi	r18, 0x04	; 4
    5088:	31 05       	cpc	r19, r1
    508a:	80 f4       	brcc	.+32     	; 0x50ac <malloc+0x9c>
    508c:	8a 81       	ldd	r24, Y+2	; 0x02
    508e:	9b 81       	ldd	r25, Y+3	; 0x03
    5090:	61 15       	cp	r22, r1
    5092:	71 05       	cpc	r23, r1
    5094:	21 f0       	breq	.+8      	; 0x509e <malloc+0x8e>
    5096:	fb 01       	movw	r30, r22
    5098:	93 83       	std	Z+3, r25	; 0x03
    509a:	82 83       	std	Z+2, r24	; 0x02
    509c:	04 c0       	rjmp	.+8      	; 0x50a6 <malloc+0x96>
    509e:	90 93 c0 16 	sts	0x16C0, r25	; 0x8016c0 <__flp+0x1>
    50a2:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <__flp>
    50a6:	fe 01       	movw	r30, r28
    50a8:	32 96       	adiw	r30, 0x02	; 2
    50aa:	44 c0       	rjmp	.+136    	; 0x5134 <malloc+0x124>
    50ac:	fe 01       	movw	r30, r28
    50ae:	e2 0f       	add	r30, r18
    50b0:	f3 1f       	adc	r31, r19
    50b2:	81 93       	st	Z+, r24
    50b4:	91 93       	st	Z+, r25
    50b6:	22 50       	subi	r18, 0x02	; 2
    50b8:	31 09       	sbc	r19, r1
    50ba:	39 83       	std	Y+1, r19	; 0x01
    50bc:	28 83       	st	Y, r18
    50be:	3a c0       	rjmp	.+116    	; 0x5134 <malloc+0x124>
    50c0:	20 91 bd 16 	lds	r18, 0x16BD	; 0x8016bd <__brkval>
    50c4:	30 91 be 16 	lds	r19, 0x16BE	; 0x8016be <__brkval+0x1>
    50c8:	23 2b       	or	r18, r19
    50ca:	41 f4       	brne	.+16     	; 0x50dc <malloc+0xcc>
    50cc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    50d0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    50d4:	30 93 be 16 	sts	0x16BE, r19	; 0x8016be <__brkval+0x1>
    50d8:	20 93 bd 16 	sts	0x16BD, r18	; 0x8016bd <__brkval>
    50dc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    50e0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    50e4:	21 15       	cp	r18, r1
    50e6:	31 05       	cpc	r19, r1
    50e8:	41 f4       	brne	.+16     	; 0x50fa <malloc+0xea>
    50ea:	2d b7       	in	r18, 0x3d	; 61
    50ec:	3e b7       	in	r19, 0x3e	; 62
    50ee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    50f2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    50f6:	24 1b       	sub	r18, r20
    50f8:	35 0b       	sbc	r19, r21
    50fa:	e0 91 bd 16 	lds	r30, 0x16BD	; 0x8016bd <__brkval>
    50fe:	f0 91 be 16 	lds	r31, 0x16BE	; 0x8016be <__brkval+0x1>
    5102:	e2 17       	cp	r30, r18
    5104:	f3 07       	cpc	r31, r19
    5106:	a0 f4       	brcc	.+40     	; 0x5130 <malloc+0x120>
    5108:	2e 1b       	sub	r18, r30
    510a:	3f 0b       	sbc	r19, r31
    510c:	28 17       	cp	r18, r24
    510e:	39 07       	cpc	r19, r25
    5110:	78 f0       	brcs	.+30     	; 0x5130 <malloc+0x120>
    5112:	ac 01       	movw	r20, r24
    5114:	4e 5f       	subi	r20, 0xFE	; 254
    5116:	5f 4f       	sbci	r21, 0xFF	; 255
    5118:	24 17       	cp	r18, r20
    511a:	35 07       	cpc	r19, r21
    511c:	48 f0       	brcs	.+18     	; 0x5130 <malloc+0x120>
    511e:	4e 0f       	add	r20, r30
    5120:	5f 1f       	adc	r21, r31
    5122:	50 93 be 16 	sts	0x16BE, r21	; 0x8016be <__brkval+0x1>
    5126:	40 93 bd 16 	sts	0x16BD, r20	; 0x8016bd <__brkval>
    512a:	81 93       	st	Z+, r24
    512c:	91 93       	st	Z+, r25
    512e:	02 c0       	rjmp	.+4      	; 0x5134 <malloc+0x124>
    5130:	e0 e0       	ldi	r30, 0x00	; 0
    5132:	f0 e0       	ldi	r31, 0x00	; 0
    5134:	cf 01       	movw	r24, r30
    5136:	df 91       	pop	r29
    5138:	cf 91       	pop	r28
    513a:	1f 91       	pop	r17
    513c:	0f 91       	pop	r16
    513e:	08 95       	ret

00005140 <free>:
    5140:	cf 93       	push	r28
    5142:	df 93       	push	r29
    5144:	00 97       	sbiw	r24, 0x00	; 0
    5146:	09 f4       	brne	.+2      	; 0x514a <free+0xa>
    5148:	81 c0       	rjmp	.+258    	; 0x524c <free+0x10c>
    514a:	fc 01       	movw	r30, r24
    514c:	32 97       	sbiw	r30, 0x02	; 2
    514e:	13 82       	std	Z+3, r1	; 0x03
    5150:	12 82       	std	Z+2, r1	; 0x02
    5152:	a0 91 bf 16 	lds	r26, 0x16BF	; 0x8016bf <__flp>
    5156:	b0 91 c0 16 	lds	r27, 0x16C0	; 0x8016c0 <__flp+0x1>
    515a:	10 97       	sbiw	r26, 0x00	; 0
    515c:	81 f4       	brne	.+32     	; 0x517e <free+0x3e>
    515e:	20 81       	ld	r18, Z
    5160:	31 81       	ldd	r19, Z+1	; 0x01
    5162:	82 0f       	add	r24, r18
    5164:	93 1f       	adc	r25, r19
    5166:	20 91 bd 16 	lds	r18, 0x16BD	; 0x8016bd <__brkval>
    516a:	30 91 be 16 	lds	r19, 0x16BE	; 0x8016be <__brkval+0x1>
    516e:	28 17       	cp	r18, r24
    5170:	39 07       	cpc	r19, r25
    5172:	51 f5       	brne	.+84     	; 0x51c8 <free+0x88>
    5174:	f0 93 be 16 	sts	0x16BE, r31	; 0x8016be <__brkval+0x1>
    5178:	e0 93 bd 16 	sts	0x16BD, r30	; 0x8016bd <__brkval>
    517c:	67 c0       	rjmp	.+206    	; 0x524c <free+0x10c>
    517e:	ed 01       	movw	r28, r26
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	ce 17       	cp	r28, r30
    5186:	df 07       	cpc	r29, r31
    5188:	40 f4       	brcc	.+16     	; 0x519a <free+0x5a>
    518a:	4a 81       	ldd	r20, Y+2	; 0x02
    518c:	5b 81       	ldd	r21, Y+3	; 0x03
    518e:	9e 01       	movw	r18, r28
    5190:	41 15       	cp	r20, r1
    5192:	51 05       	cpc	r21, r1
    5194:	f1 f0       	breq	.+60     	; 0x51d2 <free+0x92>
    5196:	ea 01       	movw	r28, r20
    5198:	f5 cf       	rjmp	.-22     	; 0x5184 <free+0x44>
    519a:	d3 83       	std	Z+3, r29	; 0x03
    519c:	c2 83       	std	Z+2, r28	; 0x02
    519e:	40 81       	ld	r20, Z
    51a0:	51 81       	ldd	r21, Z+1	; 0x01
    51a2:	84 0f       	add	r24, r20
    51a4:	95 1f       	adc	r25, r21
    51a6:	c8 17       	cp	r28, r24
    51a8:	d9 07       	cpc	r29, r25
    51aa:	59 f4       	brne	.+22     	; 0x51c2 <free+0x82>
    51ac:	88 81       	ld	r24, Y
    51ae:	99 81       	ldd	r25, Y+1	; 0x01
    51b0:	84 0f       	add	r24, r20
    51b2:	95 1f       	adc	r25, r21
    51b4:	02 96       	adiw	r24, 0x02	; 2
    51b6:	91 83       	std	Z+1, r25	; 0x01
    51b8:	80 83       	st	Z, r24
    51ba:	8a 81       	ldd	r24, Y+2	; 0x02
    51bc:	9b 81       	ldd	r25, Y+3	; 0x03
    51be:	93 83       	std	Z+3, r25	; 0x03
    51c0:	82 83       	std	Z+2, r24	; 0x02
    51c2:	21 15       	cp	r18, r1
    51c4:	31 05       	cpc	r19, r1
    51c6:	29 f4       	brne	.+10     	; 0x51d2 <free+0x92>
    51c8:	f0 93 c0 16 	sts	0x16C0, r31	; 0x8016c0 <__flp+0x1>
    51cc:	e0 93 bf 16 	sts	0x16BF, r30	; 0x8016bf <__flp>
    51d0:	3d c0       	rjmp	.+122    	; 0x524c <free+0x10c>
    51d2:	e9 01       	movw	r28, r18
    51d4:	fb 83       	std	Y+3, r31	; 0x03
    51d6:	ea 83       	std	Y+2, r30	; 0x02
    51d8:	49 91       	ld	r20, Y+
    51da:	59 91       	ld	r21, Y+
    51dc:	c4 0f       	add	r28, r20
    51de:	d5 1f       	adc	r29, r21
    51e0:	ec 17       	cp	r30, r28
    51e2:	fd 07       	cpc	r31, r29
    51e4:	61 f4       	brne	.+24     	; 0x51fe <free+0xbe>
    51e6:	80 81       	ld	r24, Z
    51e8:	91 81       	ldd	r25, Z+1	; 0x01
    51ea:	84 0f       	add	r24, r20
    51ec:	95 1f       	adc	r25, r21
    51ee:	02 96       	adiw	r24, 0x02	; 2
    51f0:	e9 01       	movw	r28, r18
    51f2:	99 83       	std	Y+1, r25	; 0x01
    51f4:	88 83       	st	Y, r24
    51f6:	82 81       	ldd	r24, Z+2	; 0x02
    51f8:	93 81       	ldd	r25, Z+3	; 0x03
    51fa:	9b 83       	std	Y+3, r25	; 0x03
    51fc:	8a 83       	std	Y+2, r24	; 0x02
    51fe:	e0 e0       	ldi	r30, 0x00	; 0
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	12 96       	adiw	r26, 0x02	; 2
    5204:	8d 91       	ld	r24, X+
    5206:	9c 91       	ld	r25, X
    5208:	13 97       	sbiw	r26, 0x03	; 3
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	19 f0       	breq	.+6      	; 0x5214 <free+0xd4>
    520e:	fd 01       	movw	r30, r26
    5210:	dc 01       	movw	r26, r24
    5212:	f7 cf       	rjmp	.-18     	; 0x5202 <free+0xc2>
    5214:	8d 91       	ld	r24, X+
    5216:	9c 91       	ld	r25, X
    5218:	11 97       	sbiw	r26, 0x01	; 1
    521a:	9d 01       	movw	r18, r26
    521c:	2e 5f       	subi	r18, 0xFE	; 254
    521e:	3f 4f       	sbci	r19, 0xFF	; 255
    5220:	82 0f       	add	r24, r18
    5222:	93 1f       	adc	r25, r19
    5224:	20 91 bd 16 	lds	r18, 0x16BD	; 0x8016bd <__brkval>
    5228:	30 91 be 16 	lds	r19, 0x16BE	; 0x8016be <__brkval+0x1>
    522c:	28 17       	cp	r18, r24
    522e:	39 07       	cpc	r19, r25
    5230:	69 f4       	brne	.+26     	; 0x524c <free+0x10c>
    5232:	30 97       	sbiw	r30, 0x00	; 0
    5234:	29 f4       	brne	.+10     	; 0x5240 <free+0x100>
    5236:	10 92 c0 16 	sts	0x16C0, r1	; 0x8016c0 <__flp+0x1>
    523a:	10 92 bf 16 	sts	0x16BF, r1	; 0x8016bf <__flp>
    523e:	02 c0       	rjmp	.+4      	; 0x5244 <free+0x104>
    5240:	13 82       	std	Z+3, r1	; 0x03
    5242:	12 82       	std	Z+2, r1	; 0x02
    5244:	b0 93 be 16 	sts	0x16BE, r27	; 0x8016be <__brkval+0x1>
    5248:	a0 93 bd 16 	sts	0x16BD, r26	; 0x8016bd <__brkval>
    524c:	df 91       	pop	r29
    524e:	cf 91       	pop	r28
    5250:	08 95       	ret

00005252 <abort>:
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	f8 94       	cli
    5258:	7d c3       	rjmp	.+1786   	; 0x5954 <_exit>

0000525a <memcpy>:
    525a:	fb 01       	movw	r30, r22
    525c:	dc 01       	movw	r26, r24
    525e:	02 c0       	rjmp	.+4      	; 0x5264 <memcpy+0xa>
    5260:	01 90       	ld	r0, Z+
    5262:	0d 92       	st	X+, r0
    5264:	41 50       	subi	r20, 0x01	; 1
    5266:	50 40       	sbci	r21, 0x00	; 0
    5268:	d8 f7       	brcc	.-10     	; 0x5260 <memcpy+0x6>
    526a:	08 95       	ret

0000526c <memset>:
    526c:	dc 01       	movw	r26, r24
    526e:	01 c0       	rjmp	.+2      	; 0x5272 <memset+0x6>
    5270:	6d 93       	st	X+, r22
    5272:	41 50       	subi	r20, 0x01	; 1
    5274:	50 40       	sbci	r21, 0x00	; 0
    5276:	e0 f7       	brcc	.-8      	; 0x5270 <memset+0x4>
    5278:	08 95       	ret

0000527a <strcasestr>:
    527a:	fb 01       	movw	r30, r22
    527c:	51 91       	ld	r21, Z+
    527e:	55 23       	and	r21, r21
    5280:	b1 f0       	breq	.+44     	; 0x52ae <strcasestr+0x34>
    5282:	bf 01       	movw	r22, r30
    5284:	dc 01       	movw	r26, r24
    5286:	05 2e       	mov	r0, r21
    5288:	4d 91       	ld	r20, X+
    528a:	44 23       	and	r20, r20
    528c:	69 f0       	breq	.+26     	; 0x52a8 <strcasestr+0x2e>
    528e:	10 d0       	rcall	.+32     	; 0x52b0 <strcasestr+0x36>
    5290:	d9 f7       	brne	.-10     	; 0x5288 <strcasestr+0xe>
    5292:	cd 01       	movw	r24, r26
    5294:	01 90       	ld	r0, Z+
    5296:	00 20       	and	r0, r0
    5298:	49 f0       	breq	.+18     	; 0x52ac <strcasestr+0x32>
    529a:	4d 91       	ld	r20, X+
    529c:	41 11       	cpse	r20, r1
    529e:	08 d0       	rcall	.+16     	; 0x52b0 <strcasestr+0x36>
    52a0:	c9 f3       	breq	.-14     	; 0x5294 <strcasestr+0x1a>
    52a2:	fb 01       	movw	r30, r22
    52a4:	41 11       	cpse	r20, r1
    52a6:	ee cf       	rjmp	.-36     	; 0x5284 <strcasestr+0xa>
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	01 97       	sbiw	r24, 0x01	; 1
    52ae:	08 95       	ret
    52b0:	40 25       	eor	r20, r0
    52b2:	39 f0       	breq	.+14     	; 0x52c2 <strcasestr+0x48>
    52b4:	40 32       	cpi	r20, 0x20	; 32
    52b6:	29 f4       	brne	.+10     	; 0x52c2 <strcasestr+0x48>
    52b8:	40 29       	or	r20, r0
    52ba:	4b 57       	subi	r20, 0x7B	; 123
    52bc:	46 5e       	subi	r20, 0xE6	; 230
    52be:	08 f0       	brcs	.+2      	; 0x52c2 <strcasestr+0x48>
    52c0:	18 94       	sez
    52c2:	08 95       	ret

000052c4 <strcat>:
    52c4:	fb 01       	movw	r30, r22
    52c6:	dc 01       	movw	r26, r24
    52c8:	0d 90       	ld	r0, X+
    52ca:	00 20       	and	r0, r0
    52cc:	e9 f7       	brne	.-6      	; 0x52c8 <strcat+0x4>
    52ce:	11 97       	sbiw	r26, 0x01	; 1
    52d0:	01 90       	ld	r0, Z+
    52d2:	0d 92       	st	X+, r0
    52d4:	00 20       	and	r0, r0
    52d6:	e1 f7       	brne	.-8      	; 0x52d0 <strcat+0xc>
    52d8:	08 95       	ret

000052da <strcpy>:
    52da:	fb 01       	movw	r30, r22
    52dc:	dc 01       	movw	r26, r24
    52de:	01 90       	ld	r0, Z+
    52e0:	0d 92       	st	X+, r0
    52e2:	00 20       	and	r0, r0
    52e4:	e1 f7       	brne	.-8      	; 0x52de <strcpy+0x4>
    52e6:	08 95       	ret

000052e8 <strncasecmp>:
    52e8:	fb 01       	movw	r30, r22
    52ea:	dc 01       	movw	r26, r24
    52ec:	41 50       	subi	r20, 0x01	; 1
    52ee:	50 40       	sbci	r21, 0x00	; 0
    52f0:	88 f0       	brcs	.+34     	; 0x5314 <strncasecmp+0x2c>
    52f2:	8d 91       	ld	r24, X+
    52f4:	81 34       	cpi	r24, 0x41	; 65
    52f6:	1c f0       	brlt	.+6      	; 0x52fe <strncasecmp+0x16>
    52f8:	8b 35       	cpi	r24, 0x5B	; 91
    52fa:	0c f4       	brge	.+2      	; 0x52fe <strncasecmp+0x16>
    52fc:	80 5e       	subi	r24, 0xE0	; 224
    52fe:	61 91       	ld	r22, Z+
    5300:	61 34       	cpi	r22, 0x41	; 65
    5302:	1c f0       	brlt	.+6      	; 0x530a <strncasecmp+0x22>
    5304:	6b 35       	cpi	r22, 0x5B	; 91
    5306:	0c f4       	brge	.+2      	; 0x530a <strncasecmp+0x22>
    5308:	60 5e       	subi	r22, 0xE0	; 224
    530a:	86 1b       	sub	r24, r22
    530c:	61 11       	cpse	r22, r1
    530e:	71 f3       	breq	.-36     	; 0x52ec <strncasecmp+0x4>
    5310:	99 0b       	sbc	r25, r25
    5312:	08 95       	ret
    5314:	88 1b       	sub	r24, r24
    5316:	fc cf       	rjmp	.-8      	; 0x5310 <strncasecmp+0x28>

00005318 <printf>:
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	cd b7       	in	r28, 0x3d	; 61
    531e:	de b7       	in	r29, 0x3e	; 62
    5320:	ae 01       	movw	r20, r28
    5322:	4a 5f       	subi	r20, 0xFA	; 250
    5324:	5f 4f       	sbci	r21, 0xFF	; 255
    5326:	fa 01       	movw	r30, r20
    5328:	61 91       	ld	r22, Z+
    532a:	71 91       	ld	r23, Z+
    532c:	af 01       	movw	r20, r30
    532e:	80 91 c3 16 	lds	r24, 0x16C3	; 0x8016c3 <__iob+0x2>
    5332:	90 91 c4 16 	lds	r25, 0x16C4	; 0x8016c4 <__iob+0x3>
    5336:	61 d0       	rcall	.+194    	; 0x53fa <vfprintf>
    5338:	df 91       	pop	r29
    533a:	cf 91       	pop	r28
    533c:	08 95       	ret

0000533e <puts>:
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	e0 91 c3 16 	lds	r30, 0x16C3	; 0x8016c3 <__iob+0x2>
    534a:	f0 91 c4 16 	lds	r31, 0x16C4	; 0x8016c4 <__iob+0x3>
    534e:	23 81       	ldd	r18, Z+3	; 0x03
    5350:	21 ff       	sbrs	r18, 1
    5352:	1b c0       	rjmp	.+54     	; 0x538a <puts+0x4c>
    5354:	8c 01       	movw	r16, r24
    5356:	d0 e0       	ldi	r29, 0x00	; 0
    5358:	c0 e0       	ldi	r28, 0x00	; 0
    535a:	f8 01       	movw	r30, r16
    535c:	81 91       	ld	r24, Z+
    535e:	8f 01       	movw	r16, r30
    5360:	60 91 c3 16 	lds	r22, 0x16C3	; 0x8016c3 <__iob+0x2>
    5364:	70 91 c4 16 	lds	r23, 0x16C4	; 0x8016c4 <__iob+0x3>
    5368:	db 01       	movw	r26, r22
    536a:	18 96       	adiw	r26, 0x08	; 8
    536c:	ed 91       	ld	r30, X+
    536e:	fc 91       	ld	r31, X
    5370:	19 97       	sbiw	r26, 0x09	; 9
    5372:	88 23       	and	r24, r24
    5374:	31 f0       	breq	.+12     	; 0x5382 <puts+0x44>
    5376:	19 95       	eicall
    5378:	89 2b       	or	r24, r25
    537a:	79 f3       	breq	.-34     	; 0x535a <puts+0x1c>
    537c:	df ef       	ldi	r29, 0xFF	; 255
    537e:	cf ef       	ldi	r28, 0xFF	; 255
    5380:	ec cf       	rjmp	.-40     	; 0x535a <puts+0x1c>
    5382:	8a e0       	ldi	r24, 0x0A	; 10
    5384:	19 95       	eicall
    5386:	89 2b       	or	r24, r25
    5388:	19 f0       	breq	.+6      	; 0x5390 <puts+0x52>
    538a:	8f ef       	ldi	r24, 0xFF	; 255
    538c:	9f ef       	ldi	r25, 0xFF	; 255
    538e:	02 c0       	rjmp	.+4      	; 0x5394 <puts+0x56>
    5390:	8d 2f       	mov	r24, r29
    5392:	9c 2f       	mov	r25, r28
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	1f 91       	pop	r17
    539a:	0f 91       	pop	r16
    539c:	08 95       	ret

0000539e <sprintf>:
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	cf 93       	push	r28
    53a4:	df 93       	push	r29
    53a6:	cd b7       	in	r28, 0x3d	; 61
    53a8:	de b7       	in	r29, 0x3e	; 62
    53aa:	2e 97       	sbiw	r28, 0x0e	; 14
    53ac:	0f b6       	in	r0, 0x3f	; 63
    53ae:	f8 94       	cli
    53b0:	de bf       	out	0x3e, r29	; 62
    53b2:	0f be       	out	0x3f, r0	; 63
    53b4:	cd bf       	out	0x3d, r28	; 61
    53b6:	0e 89       	ldd	r16, Y+22	; 0x16
    53b8:	1f 89       	ldd	r17, Y+23	; 0x17
    53ba:	86 e0       	ldi	r24, 0x06	; 6
    53bc:	8c 83       	std	Y+4, r24	; 0x04
    53be:	1a 83       	std	Y+2, r17	; 0x02
    53c0:	09 83       	std	Y+1, r16	; 0x01
    53c2:	8f ef       	ldi	r24, 0xFF	; 255
    53c4:	9f e7       	ldi	r25, 0x7F	; 127
    53c6:	9e 83       	std	Y+6, r25	; 0x06
    53c8:	8d 83       	std	Y+5, r24	; 0x05
    53ca:	ae 01       	movw	r20, r28
    53cc:	46 5e       	subi	r20, 0xE6	; 230
    53ce:	5f 4f       	sbci	r21, 0xFF	; 255
    53d0:	68 8d       	ldd	r22, Y+24	; 0x18
    53d2:	79 8d       	ldd	r23, Y+25	; 0x19
    53d4:	ce 01       	movw	r24, r28
    53d6:	01 96       	adiw	r24, 0x01	; 1
    53d8:	10 d0       	rcall	.+32     	; 0x53fa <vfprintf>
    53da:	ef 81       	ldd	r30, Y+7	; 0x07
    53dc:	f8 85       	ldd	r31, Y+8	; 0x08
    53de:	e0 0f       	add	r30, r16
    53e0:	f1 1f       	adc	r31, r17
    53e2:	10 82       	st	Z, r1
    53e4:	2e 96       	adiw	r28, 0x0e	; 14
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	cd bf       	out	0x3d, r28	; 61
    53f0:	df 91       	pop	r29
    53f2:	cf 91       	pop	r28
    53f4:	1f 91       	pop	r17
    53f6:	0f 91       	pop	r16
    53f8:	08 95       	ret

000053fa <vfprintf>:
    53fa:	2f 92       	push	r2
    53fc:	3f 92       	push	r3
    53fe:	4f 92       	push	r4
    5400:	5f 92       	push	r5
    5402:	6f 92       	push	r6
    5404:	7f 92       	push	r7
    5406:	8f 92       	push	r8
    5408:	9f 92       	push	r9
    540a:	af 92       	push	r10
    540c:	bf 92       	push	r11
    540e:	cf 92       	push	r12
    5410:	df 92       	push	r13
    5412:	ef 92       	push	r14
    5414:	ff 92       	push	r15
    5416:	0f 93       	push	r16
    5418:	1f 93       	push	r17
    541a:	cf 93       	push	r28
    541c:	df 93       	push	r29
    541e:	cd b7       	in	r28, 0x3d	; 61
    5420:	de b7       	in	r29, 0x3e	; 62
    5422:	2b 97       	sbiw	r28, 0x0b	; 11
    5424:	0f b6       	in	r0, 0x3f	; 63
    5426:	f8 94       	cli
    5428:	de bf       	out	0x3e, r29	; 62
    542a:	0f be       	out	0x3f, r0	; 63
    542c:	cd bf       	out	0x3d, r28	; 61
    542e:	6c 01       	movw	r12, r24
    5430:	7b 01       	movw	r14, r22
    5432:	8a 01       	movw	r16, r20
    5434:	fc 01       	movw	r30, r24
    5436:	17 82       	std	Z+7, r1	; 0x07
    5438:	16 82       	std	Z+6, r1	; 0x06
    543a:	83 81       	ldd	r24, Z+3	; 0x03
    543c:	81 ff       	sbrs	r24, 1
    543e:	bf c1       	rjmp	.+894    	; 0x57be <vfprintf+0x3c4>
    5440:	ce 01       	movw	r24, r28
    5442:	01 96       	adiw	r24, 0x01	; 1
    5444:	3c 01       	movw	r6, r24
    5446:	f6 01       	movw	r30, r12
    5448:	93 81       	ldd	r25, Z+3	; 0x03
    544a:	f7 01       	movw	r30, r14
    544c:	93 fd       	sbrc	r25, 3
    544e:	85 91       	lpm	r24, Z+
    5450:	93 ff       	sbrs	r25, 3
    5452:	81 91       	ld	r24, Z+
    5454:	7f 01       	movw	r14, r30
    5456:	88 23       	and	r24, r24
    5458:	09 f4       	brne	.+2      	; 0x545c <vfprintf+0x62>
    545a:	ad c1       	rjmp	.+858    	; 0x57b6 <vfprintf+0x3bc>
    545c:	85 32       	cpi	r24, 0x25	; 37
    545e:	39 f4       	brne	.+14     	; 0x546e <vfprintf+0x74>
    5460:	93 fd       	sbrc	r25, 3
    5462:	85 91       	lpm	r24, Z+
    5464:	93 ff       	sbrs	r25, 3
    5466:	81 91       	ld	r24, Z+
    5468:	7f 01       	movw	r14, r30
    546a:	85 32       	cpi	r24, 0x25	; 37
    546c:	21 f4       	brne	.+8      	; 0x5476 <vfprintf+0x7c>
    546e:	b6 01       	movw	r22, r12
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	d6 d1       	rcall	.+940    	; 0x5820 <fputc>
    5474:	e8 cf       	rjmp	.-48     	; 0x5446 <vfprintf+0x4c>
    5476:	91 2c       	mov	r9, r1
    5478:	21 2c       	mov	r2, r1
    547a:	31 2c       	mov	r3, r1
    547c:	ff e1       	ldi	r31, 0x1F	; 31
    547e:	f3 15       	cp	r31, r3
    5480:	d8 f0       	brcs	.+54     	; 0x54b8 <vfprintf+0xbe>
    5482:	8b 32       	cpi	r24, 0x2B	; 43
    5484:	79 f0       	breq	.+30     	; 0x54a4 <vfprintf+0xaa>
    5486:	38 f4       	brcc	.+14     	; 0x5496 <vfprintf+0x9c>
    5488:	80 32       	cpi	r24, 0x20	; 32
    548a:	79 f0       	breq	.+30     	; 0x54aa <vfprintf+0xb0>
    548c:	83 32       	cpi	r24, 0x23	; 35
    548e:	a1 f4       	brne	.+40     	; 0x54b8 <vfprintf+0xbe>
    5490:	23 2d       	mov	r18, r3
    5492:	20 61       	ori	r18, 0x10	; 16
    5494:	1d c0       	rjmp	.+58     	; 0x54d0 <vfprintf+0xd6>
    5496:	8d 32       	cpi	r24, 0x2D	; 45
    5498:	61 f0       	breq	.+24     	; 0x54b2 <vfprintf+0xb8>
    549a:	80 33       	cpi	r24, 0x30	; 48
    549c:	69 f4       	brne	.+26     	; 0x54b8 <vfprintf+0xbe>
    549e:	23 2d       	mov	r18, r3
    54a0:	21 60       	ori	r18, 0x01	; 1
    54a2:	16 c0       	rjmp	.+44     	; 0x54d0 <vfprintf+0xd6>
    54a4:	83 2d       	mov	r24, r3
    54a6:	82 60       	ori	r24, 0x02	; 2
    54a8:	38 2e       	mov	r3, r24
    54aa:	e3 2d       	mov	r30, r3
    54ac:	e4 60       	ori	r30, 0x04	; 4
    54ae:	3e 2e       	mov	r3, r30
    54b0:	2a c0       	rjmp	.+84     	; 0x5506 <vfprintf+0x10c>
    54b2:	f3 2d       	mov	r31, r3
    54b4:	f8 60       	ori	r31, 0x08	; 8
    54b6:	1d c0       	rjmp	.+58     	; 0x54f2 <vfprintf+0xf8>
    54b8:	37 fc       	sbrc	r3, 7
    54ba:	2d c0       	rjmp	.+90     	; 0x5516 <vfprintf+0x11c>
    54bc:	20 ed       	ldi	r18, 0xD0	; 208
    54be:	28 0f       	add	r18, r24
    54c0:	2a 30       	cpi	r18, 0x0A	; 10
    54c2:	40 f0       	brcs	.+16     	; 0x54d4 <vfprintf+0xda>
    54c4:	8e 32       	cpi	r24, 0x2E	; 46
    54c6:	b9 f4       	brne	.+46     	; 0x54f6 <vfprintf+0xfc>
    54c8:	36 fc       	sbrc	r3, 6
    54ca:	75 c1       	rjmp	.+746    	; 0x57b6 <vfprintf+0x3bc>
    54cc:	23 2d       	mov	r18, r3
    54ce:	20 64       	ori	r18, 0x40	; 64
    54d0:	32 2e       	mov	r3, r18
    54d2:	19 c0       	rjmp	.+50     	; 0x5506 <vfprintf+0x10c>
    54d4:	36 fe       	sbrs	r3, 6
    54d6:	06 c0       	rjmp	.+12     	; 0x54e4 <vfprintf+0xea>
    54d8:	8a e0       	ldi	r24, 0x0A	; 10
    54da:	98 9e       	mul	r9, r24
    54dc:	20 0d       	add	r18, r0
    54de:	11 24       	eor	r1, r1
    54e0:	92 2e       	mov	r9, r18
    54e2:	11 c0       	rjmp	.+34     	; 0x5506 <vfprintf+0x10c>
    54e4:	ea e0       	ldi	r30, 0x0A	; 10
    54e6:	2e 9e       	mul	r2, r30
    54e8:	20 0d       	add	r18, r0
    54ea:	11 24       	eor	r1, r1
    54ec:	22 2e       	mov	r2, r18
    54ee:	f3 2d       	mov	r31, r3
    54f0:	f0 62       	ori	r31, 0x20	; 32
    54f2:	3f 2e       	mov	r3, r31
    54f4:	08 c0       	rjmp	.+16     	; 0x5506 <vfprintf+0x10c>
    54f6:	8c 36       	cpi	r24, 0x6C	; 108
    54f8:	21 f4       	brne	.+8      	; 0x5502 <vfprintf+0x108>
    54fa:	83 2d       	mov	r24, r3
    54fc:	80 68       	ori	r24, 0x80	; 128
    54fe:	38 2e       	mov	r3, r24
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <vfprintf+0x10c>
    5502:	88 36       	cpi	r24, 0x68	; 104
    5504:	41 f4       	brne	.+16     	; 0x5516 <vfprintf+0x11c>
    5506:	f7 01       	movw	r30, r14
    5508:	93 fd       	sbrc	r25, 3
    550a:	85 91       	lpm	r24, Z+
    550c:	93 ff       	sbrs	r25, 3
    550e:	81 91       	ld	r24, Z+
    5510:	7f 01       	movw	r14, r30
    5512:	81 11       	cpse	r24, r1
    5514:	b3 cf       	rjmp	.-154    	; 0x547c <vfprintf+0x82>
    5516:	98 2f       	mov	r25, r24
    5518:	9f 7d       	andi	r25, 0xDF	; 223
    551a:	95 54       	subi	r25, 0x45	; 69
    551c:	93 30       	cpi	r25, 0x03	; 3
    551e:	28 f4       	brcc	.+10     	; 0x552a <vfprintf+0x130>
    5520:	0c 5f       	subi	r16, 0xFC	; 252
    5522:	1f 4f       	sbci	r17, 0xFF	; 255
    5524:	9f e3       	ldi	r25, 0x3F	; 63
    5526:	99 83       	std	Y+1, r25	; 0x01
    5528:	0d c0       	rjmp	.+26     	; 0x5544 <vfprintf+0x14a>
    552a:	83 36       	cpi	r24, 0x63	; 99
    552c:	31 f0       	breq	.+12     	; 0x553a <vfprintf+0x140>
    552e:	83 37       	cpi	r24, 0x73	; 115
    5530:	71 f0       	breq	.+28     	; 0x554e <vfprintf+0x154>
    5532:	83 35       	cpi	r24, 0x53	; 83
    5534:	09 f0       	breq	.+2      	; 0x5538 <vfprintf+0x13e>
    5536:	55 c0       	rjmp	.+170    	; 0x55e2 <vfprintf+0x1e8>
    5538:	20 c0       	rjmp	.+64     	; 0x557a <vfprintf+0x180>
    553a:	f8 01       	movw	r30, r16
    553c:	80 81       	ld	r24, Z
    553e:	89 83       	std	Y+1, r24	; 0x01
    5540:	0e 5f       	subi	r16, 0xFE	; 254
    5542:	1f 4f       	sbci	r17, 0xFF	; 255
    5544:	88 24       	eor	r8, r8
    5546:	83 94       	inc	r8
    5548:	91 2c       	mov	r9, r1
    554a:	53 01       	movw	r10, r6
    554c:	12 c0       	rjmp	.+36     	; 0x5572 <vfprintf+0x178>
    554e:	28 01       	movw	r4, r16
    5550:	f2 e0       	ldi	r31, 0x02	; 2
    5552:	4f 0e       	add	r4, r31
    5554:	51 1c       	adc	r5, r1
    5556:	f8 01       	movw	r30, r16
    5558:	a0 80       	ld	r10, Z
    555a:	b1 80       	ldd	r11, Z+1	; 0x01
    555c:	36 fe       	sbrs	r3, 6
    555e:	03 c0       	rjmp	.+6      	; 0x5566 <vfprintf+0x16c>
    5560:	69 2d       	mov	r22, r9
    5562:	70 e0       	ldi	r23, 0x00	; 0
    5564:	02 c0       	rjmp	.+4      	; 0x556a <vfprintf+0x170>
    5566:	6f ef       	ldi	r22, 0xFF	; 255
    5568:	7f ef       	ldi	r23, 0xFF	; 255
    556a:	c5 01       	movw	r24, r10
    556c:	4e d1       	rcall	.+668    	; 0x580a <strnlen>
    556e:	4c 01       	movw	r8, r24
    5570:	82 01       	movw	r16, r4
    5572:	f3 2d       	mov	r31, r3
    5574:	ff 77       	andi	r31, 0x7F	; 127
    5576:	3f 2e       	mov	r3, r31
    5578:	15 c0       	rjmp	.+42     	; 0x55a4 <vfprintf+0x1aa>
    557a:	28 01       	movw	r4, r16
    557c:	22 e0       	ldi	r18, 0x02	; 2
    557e:	42 0e       	add	r4, r18
    5580:	51 1c       	adc	r5, r1
    5582:	f8 01       	movw	r30, r16
    5584:	a0 80       	ld	r10, Z
    5586:	b1 80       	ldd	r11, Z+1	; 0x01
    5588:	36 fe       	sbrs	r3, 6
    558a:	03 c0       	rjmp	.+6      	; 0x5592 <vfprintf+0x198>
    558c:	69 2d       	mov	r22, r9
    558e:	70 e0       	ldi	r23, 0x00	; 0
    5590:	02 c0       	rjmp	.+4      	; 0x5596 <vfprintf+0x19c>
    5592:	6f ef       	ldi	r22, 0xFF	; 255
    5594:	7f ef       	ldi	r23, 0xFF	; 255
    5596:	c5 01       	movw	r24, r10
    5598:	2d d1       	rcall	.+602    	; 0x57f4 <strnlen_P>
    559a:	4c 01       	movw	r8, r24
    559c:	f3 2d       	mov	r31, r3
    559e:	f0 68       	ori	r31, 0x80	; 128
    55a0:	3f 2e       	mov	r3, r31
    55a2:	82 01       	movw	r16, r4
    55a4:	33 fc       	sbrc	r3, 3
    55a6:	19 c0       	rjmp	.+50     	; 0x55da <vfprintf+0x1e0>
    55a8:	82 2d       	mov	r24, r2
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	88 16       	cp	r8, r24
    55ae:	99 06       	cpc	r9, r25
    55b0:	a0 f4       	brcc	.+40     	; 0x55da <vfprintf+0x1e0>
    55b2:	b6 01       	movw	r22, r12
    55b4:	80 e2       	ldi	r24, 0x20	; 32
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	33 d1       	rcall	.+614    	; 0x5820 <fputc>
    55ba:	2a 94       	dec	r2
    55bc:	f5 cf       	rjmp	.-22     	; 0x55a8 <vfprintf+0x1ae>
    55be:	f5 01       	movw	r30, r10
    55c0:	37 fc       	sbrc	r3, 7
    55c2:	85 91       	lpm	r24, Z+
    55c4:	37 fe       	sbrs	r3, 7
    55c6:	81 91       	ld	r24, Z+
    55c8:	5f 01       	movw	r10, r30
    55ca:	b6 01       	movw	r22, r12
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	28 d1       	rcall	.+592    	; 0x5820 <fputc>
    55d0:	21 10       	cpse	r2, r1
    55d2:	2a 94       	dec	r2
    55d4:	21 e0       	ldi	r18, 0x01	; 1
    55d6:	82 1a       	sub	r8, r18
    55d8:	91 08       	sbc	r9, r1
    55da:	81 14       	cp	r8, r1
    55dc:	91 04       	cpc	r9, r1
    55de:	79 f7       	brne	.-34     	; 0x55be <vfprintf+0x1c4>
    55e0:	e1 c0       	rjmp	.+450    	; 0x57a4 <vfprintf+0x3aa>
    55e2:	84 36       	cpi	r24, 0x64	; 100
    55e4:	11 f0       	breq	.+4      	; 0x55ea <vfprintf+0x1f0>
    55e6:	89 36       	cpi	r24, 0x69	; 105
    55e8:	39 f5       	brne	.+78     	; 0x5638 <vfprintf+0x23e>
    55ea:	f8 01       	movw	r30, r16
    55ec:	37 fe       	sbrs	r3, 7
    55ee:	07 c0       	rjmp	.+14     	; 0x55fe <vfprintf+0x204>
    55f0:	60 81       	ld	r22, Z
    55f2:	71 81       	ldd	r23, Z+1	; 0x01
    55f4:	82 81       	ldd	r24, Z+2	; 0x02
    55f6:	93 81       	ldd	r25, Z+3	; 0x03
    55f8:	0c 5f       	subi	r16, 0xFC	; 252
    55fa:	1f 4f       	sbci	r17, 0xFF	; 255
    55fc:	08 c0       	rjmp	.+16     	; 0x560e <vfprintf+0x214>
    55fe:	60 81       	ld	r22, Z
    5600:	71 81       	ldd	r23, Z+1	; 0x01
    5602:	07 2e       	mov	r0, r23
    5604:	00 0c       	add	r0, r0
    5606:	88 0b       	sbc	r24, r24
    5608:	99 0b       	sbc	r25, r25
    560a:	0e 5f       	subi	r16, 0xFE	; 254
    560c:	1f 4f       	sbci	r17, 0xFF	; 255
    560e:	f3 2d       	mov	r31, r3
    5610:	ff 76       	andi	r31, 0x6F	; 111
    5612:	3f 2e       	mov	r3, r31
    5614:	97 ff       	sbrs	r25, 7
    5616:	09 c0       	rjmp	.+18     	; 0x562a <vfprintf+0x230>
    5618:	90 95       	com	r25
    561a:	80 95       	com	r24
    561c:	70 95       	com	r23
    561e:	61 95       	neg	r22
    5620:	7f 4f       	sbci	r23, 0xFF	; 255
    5622:	8f 4f       	sbci	r24, 0xFF	; 255
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	f0 68       	ori	r31, 0x80	; 128
    5628:	3f 2e       	mov	r3, r31
    562a:	2a e0       	ldi	r18, 0x0A	; 10
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	a3 01       	movw	r20, r6
    5630:	33 d1       	rcall	.+614    	; 0x5898 <__ultoa_invert>
    5632:	88 2e       	mov	r8, r24
    5634:	86 18       	sub	r8, r6
    5636:	44 c0       	rjmp	.+136    	; 0x56c0 <vfprintf+0x2c6>
    5638:	85 37       	cpi	r24, 0x75	; 117
    563a:	31 f4       	brne	.+12     	; 0x5648 <vfprintf+0x24e>
    563c:	23 2d       	mov	r18, r3
    563e:	2f 7e       	andi	r18, 0xEF	; 239
    5640:	b2 2e       	mov	r11, r18
    5642:	2a e0       	ldi	r18, 0x0A	; 10
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	25 c0       	rjmp	.+74     	; 0x5692 <vfprintf+0x298>
    5648:	93 2d       	mov	r25, r3
    564a:	99 7f       	andi	r25, 0xF9	; 249
    564c:	b9 2e       	mov	r11, r25
    564e:	8f 36       	cpi	r24, 0x6F	; 111
    5650:	c1 f0       	breq	.+48     	; 0x5682 <vfprintf+0x288>
    5652:	18 f4       	brcc	.+6      	; 0x565a <vfprintf+0x260>
    5654:	88 35       	cpi	r24, 0x58	; 88
    5656:	79 f0       	breq	.+30     	; 0x5676 <vfprintf+0x27c>
    5658:	ae c0       	rjmp	.+348    	; 0x57b6 <vfprintf+0x3bc>
    565a:	80 37       	cpi	r24, 0x70	; 112
    565c:	19 f0       	breq	.+6      	; 0x5664 <vfprintf+0x26a>
    565e:	88 37       	cpi	r24, 0x78	; 120
    5660:	21 f0       	breq	.+8      	; 0x566a <vfprintf+0x270>
    5662:	a9 c0       	rjmp	.+338    	; 0x57b6 <vfprintf+0x3bc>
    5664:	e9 2f       	mov	r30, r25
    5666:	e0 61       	ori	r30, 0x10	; 16
    5668:	be 2e       	mov	r11, r30
    566a:	b4 fe       	sbrs	r11, 4
    566c:	0d c0       	rjmp	.+26     	; 0x5688 <vfprintf+0x28e>
    566e:	fb 2d       	mov	r31, r11
    5670:	f4 60       	ori	r31, 0x04	; 4
    5672:	bf 2e       	mov	r11, r31
    5674:	09 c0       	rjmp	.+18     	; 0x5688 <vfprintf+0x28e>
    5676:	34 fe       	sbrs	r3, 4
    5678:	0a c0       	rjmp	.+20     	; 0x568e <vfprintf+0x294>
    567a:	29 2f       	mov	r18, r25
    567c:	26 60       	ori	r18, 0x06	; 6
    567e:	b2 2e       	mov	r11, r18
    5680:	06 c0       	rjmp	.+12     	; 0x568e <vfprintf+0x294>
    5682:	28 e0       	ldi	r18, 0x08	; 8
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	05 c0       	rjmp	.+10     	; 0x5692 <vfprintf+0x298>
    5688:	20 e1       	ldi	r18, 0x10	; 16
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	02 c0       	rjmp	.+4      	; 0x5692 <vfprintf+0x298>
    568e:	20 e1       	ldi	r18, 0x10	; 16
    5690:	32 e0       	ldi	r19, 0x02	; 2
    5692:	f8 01       	movw	r30, r16
    5694:	b7 fe       	sbrs	r11, 7
    5696:	07 c0       	rjmp	.+14     	; 0x56a6 <vfprintf+0x2ac>
    5698:	60 81       	ld	r22, Z
    569a:	71 81       	ldd	r23, Z+1	; 0x01
    569c:	82 81       	ldd	r24, Z+2	; 0x02
    569e:	93 81       	ldd	r25, Z+3	; 0x03
    56a0:	0c 5f       	subi	r16, 0xFC	; 252
    56a2:	1f 4f       	sbci	r17, 0xFF	; 255
    56a4:	06 c0       	rjmp	.+12     	; 0x56b2 <vfprintf+0x2b8>
    56a6:	60 81       	ld	r22, Z
    56a8:	71 81       	ldd	r23, Z+1	; 0x01
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	0e 5f       	subi	r16, 0xFE	; 254
    56b0:	1f 4f       	sbci	r17, 0xFF	; 255
    56b2:	a3 01       	movw	r20, r6
    56b4:	f1 d0       	rcall	.+482    	; 0x5898 <__ultoa_invert>
    56b6:	88 2e       	mov	r8, r24
    56b8:	86 18       	sub	r8, r6
    56ba:	fb 2d       	mov	r31, r11
    56bc:	ff 77       	andi	r31, 0x7F	; 127
    56be:	3f 2e       	mov	r3, r31
    56c0:	36 fe       	sbrs	r3, 6
    56c2:	0d c0       	rjmp	.+26     	; 0x56de <vfprintf+0x2e4>
    56c4:	23 2d       	mov	r18, r3
    56c6:	2e 7f       	andi	r18, 0xFE	; 254
    56c8:	a2 2e       	mov	r10, r18
    56ca:	89 14       	cp	r8, r9
    56cc:	58 f4       	brcc	.+22     	; 0x56e4 <vfprintf+0x2ea>
    56ce:	34 fe       	sbrs	r3, 4
    56d0:	0b c0       	rjmp	.+22     	; 0x56e8 <vfprintf+0x2ee>
    56d2:	32 fc       	sbrc	r3, 2
    56d4:	09 c0       	rjmp	.+18     	; 0x56e8 <vfprintf+0x2ee>
    56d6:	83 2d       	mov	r24, r3
    56d8:	8e 7e       	andi	r24, 0xEE	; 238
    56da:	a8 2e       	mov	r10, r24
    56dc:	05 c0       	rjmp	.+10     	; 0x56e8 <vfprintf+0x2ee>
    56de:	b8 2c       	mov	r11, r8
    56e0:	a3 2c       	mov	r10, r3
    56e2:	03 c0       	rjmp	.+6      	; 0x56ea <vfprintf+0x2f0>
    56e4:	b8 2c       	mov	r11, r8
    56e6:	01 c0       	rjmp	.+2      	; 0x56ea <vfprintf+0x2f0>
    56e8:	b9 2c       	mov	r11, r9
    56ea:	a4 fe       	sbrs	r10, 4
    56ec:	0f c0       	rjmp	.+30     	; 0x570c <vfprintf+0x312>
    56ee:	fe 01       	movw	r30, r28
    56f0:	e8 0d       	add	r30, r8
    56f2:	f1 1d       	adc	r31, r1
    56f4:	80 81       	ld	r24, Z
    56f6:	80 33       	cpi	r24, 0x30	; 48
    56f8:	21 f4       	brne	.+8      	; 0x5702 <vfprintf+0x308>
    56fa:	9a 2d       	mov	r25, r10
    56fc:	99 7e       	andi	r25, 0xE9	; 233
    56fe:	a9 2e       	mov	r10, r25
    5700:	09 c0       	rjmp	.+18     	; 0x5714 <vfprintf+0x31a>
    5702:	a2 fe       	sbrs	r10, 2
    5704:	06 c0       	rjmp	.+12     	; 0x5712 <vfprintf+0x318>
    5706:	b3 94       	inc	r11
    5708:	b3 94       	inc	r11
    570a:	04 c0       	rjmp	.+8      	; 0x5714 <vfprintf+0x31a>
    570c:	8a 2d       	mov	r24, r10
    570e:	86 78       	andi	r24, 0x86	; 134
    5710:	09 f0       	breq	.+2      	; 0x5714 <vfprintf+0x31a>
    5712:	b3 94       	inc	r11
    5714:	a3 fc       	sbrc	r10, 3
    5716:	10 c0       	rjmp	.+32     	; 0x5738 <vfprintf+0x33e>
    5718:	a0 fe       	sbrs	r10, 0
    571a:	06 c0       	rjmp	.+12     	; 0x5728 <vfprintf+0x32e>
    571c:	b2 14       	cp	r11, r2
    571e:	80 f4       	brcc	.+32     	; 0x5740 <vfprintf+0x346>
    5720:	28 0c       	add	r2, r8
    5722:	92 2c       	mov	r9, r2
    5724:	9b 18       	sub	r9, r11
    5726:	0d c0       	rjmp	.+26     	; 0x5742 <vfprintf+0x348>
    5728:	b2 14       	cp	r11, r2
    572a:	58 f4       	brcc	.+22     	; 0x5742 <vfprintf+0x348>
    572c:	b6 01       	movw	r22, r12
    572e:	80 e2       	ldi	r24, 0x20	; 32
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	76 d0       	rcall	.+236    	; 0x5820 <fputc>
    5734:	b3 94       	inc	r11
    5736:	f8 cf       	rjmp	.-16     	; 0x5728 <vfprintf+0x32e>
    5738:	b2 14       	cp	r11, r2
    573a:	18 f4       	brcc	.+6      	; 0x5742 <vfprintf+0x348>
    573c:	2b 18       	sub	r2, r11
    573e:	02 c0       	rjmp	.+4      	; 0x5744 <vfprintf+0x34a>
    5740:	98 2c       	mov	r9, r8
    5742:	21 2c       	mov	r2, r1
    5744:	a4 fe       	sbrs	r10, 4
    5746:	0f c0       	rjmp	.+30     	; 0x5766 <vfprintf+0x36c>
    5748:	b6 01       	movw	r22, r12
    574a:	80 e3       	ldi	r24, 0x30	; 48
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	68 d0       	rcall	.+208    	; 0x5820 <fputc>
    5750:	a2 fe       	sbrs	r10, 2
    5752:	16 c0       	rjmp	.+44     	; 0x5780 <vfprintf+0x386>
    5754:	a1 fc       	sbrc	r10, 1
    5756:	03 c0       	rjmp	.+6      	; 0x575e <vfprintf+0x364>
    5758:	88 e7       	ldi	r24, 0x78	; 120
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	02 c0       	rjmp	.+4      	; 0x5762 <vfprintf+0x368>
    575e:	88 e5       	ldi	r24, 0x58	; 88
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	b6 01       	movw	r22, r12
    5764:	0c c0       	rjmp	.+24     	; 0x577e <vfprintf+0x384>
    5766:	8a 2d       	mov	r24, r10
    5768:	86 78       	andi	r24, 0x86	; 134
    576a:	51 f0       	breq	.+20     	; 0x5780 <vfprintf+0x386>
    576c:	a1 fe       	sbrs	r10, 1
    576e:	02 c0       	rjmp	.+4      	; 0x5774 <vfprintf+0x37a>
    5770:	8b e2       	ldi	r24, 0x2B	; 43
    5772:	01 c0       	rjmp	.+2      	; 0x5776 <vfprintf+0x37c>
    5774:	80 e2       	ldi	r24, 0x20	; 32
    5776:	a7 fc       	sbrc	r10, 7
    5778:	8d e2       	ldi	r24, 0x2D	; 45
    577a:	b6 01       	movw	r22, r12
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	50 d0       	rcall	.+160    	; 0x5820 <fputc>
    5780:	89 14       	cp	r8, r9
    5782:	30 f4       	brcc	.+12     	; 0x5790 <vfprintf+0x396>
    5784:	b6 01       	movw	r22, r12
    5786:	80 e3       	ldi	r24, 0x30	; 48
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	4a d0       	rcall	.+148    	; 0x5820 <fputc>
    578c:	9a 94       	dec	r9
    578e:	f8 cf       	rjmp	.-16     	; 0x5780 <vfprintf+0x386>
    5790:	8a 94       	dec	r8
    5792:	f3 01       	movw	r30, r6
    5794:	e8 0d       	add	r30, r8
    5796:	f1 1d       	adc	r31, r1
    5798:	80 81       	ld	r24, Z
    579a:	b6 01       	movw	r22, r12
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	40 d0       	rcall	.+128    	; 0x5820 <fputc>
    57a0:	81 10       	cpse	r8, r1
    57a2:	f6 cf       	rjmp	.-20     	; 0x5790 <vfprintf+0x396>
    57a4:	22 20       	and	r2, r2
    57a6:	09 f4       	brne	.+2      	; 0x57aa <vfprintf+0x3b0>
    57a8:	4e ce       	rjmp	.-868    	; 0x5446 <vfprintf+0x4c>
    57aa:	b6 01       	movw	r22, r12
    57ac:	80 e2       	ldi	r24, 0x20	; 32
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	37 d0       	rcall	.+110    	; 0x5820 <fputc>
    57b2:	2a 94       	dec	r2
    57b4:	f7 cf       	rjmp	.-18     	; 0x57a4 <vfprintf+0x3aa>
    57b6:	f6 01       	movw	r30, r12
    57b8:	86 81       	ldd	r24, Z+6	; 0x06
    57ba:	97 81       	ldd	r25, Z+7	; 0x07
    57bc:	02 c0       	rjmp	.+4      	; 0x57c2 <vfprintf+0x3c8>
    57be:	8f ef       	ldi	r24, 0xFF	; 255
    57c0:	9f ef       	ldi	r25, 0xFF	; 255
    57c2:	2b 96       	adiw	r28, 0x0b	; 11
    57c4:	0f b6       	in	r0, 0x3f	; 63
    57c6:	f8 94       	cli
    57c8:	de bf       	out	0x3e, r29	; 62
    57ca:	0f be       	out	0x3f, r0	; 63
    57cc:	cd bf       	out	0x3d, r28	; 61
    57ce:	df 91       	pop	r29
    57d0:	cf 91       	pop	r28
    57d2:	1f 91       	pop	r17
    57d4:	0f 91       	pop	r16
    57d6:	ff 90       	pop	r15
    57d8:	ef 90       	pop	r14
    57da:	df 90       	pop	r13
    57dc:	cf 90       	pop	r12
    57de:	bf 90       	pop	r11
    57e0:	af 90       	pop	r10
    57e2:	9f 90       	pop	r9
    57e4:	8f 90       	pop	r8
    57e6:	7f 90       	pop	r7
    57e8:	6f 90       	pop	r6
    57ea:	5f 90       	pop	r5
    57ec:	4f 90       	pop	r4
    57ee:	3f 90       	pop	r3
    57f0:	2f 90       	pop	r2
    57f2:	08 95       	ret

000057f4 <strnlen_P>:
    57f4:	fc 01       	movw	r30, r24
    57f6:	05 90       	lpm	r0, Z+
    57f8:	61 50       	subi	r22, 0x01	; 1
    57fa:	70 40       	sbci	r23, 0x00	; 0
    57fc:	01 10       	cpse	r0, r1
    57fe:	d8 f7       	brcc	.-10     	; 0x57f6 <strnlen_P+0x2>
    5800:	80 95       	com	r24
    5802:	90 95       	com	r25
    5804:	8e 0f       	add	r24, r30
    5806:	9f 1f       	adc	r25, r31
    5808:	08 95       	ret

0000580a <strnlen>:
    580a:	fc 01       	movw	r30, r24
    580c:	61 50       	subi	r22, 0x01	; 1
    580e:	70 40       	sbci	r23, 0x00	; 0
    5810:	01 90       	ld	r0, Z+
    5812:	01 10       	cpse	r0, r1
    5814:	d8 f7       	brcc	.-10     	; 0x580c <strnlen+0x2>
    5816:	80 95       	com	r24
    5818:	90 95       	com	r25
    581a:	8e 0f       	add	r24, r30
    581c:	9f 1f       	adc	r25, r31
    581e:	08 95       	ret

00005820 <fputc>:
    5820:	0f 93       	push	r16
    5822:	1f 93       	push	r17
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	fb 01       	movw	r30, r22
    582a:	23 81       	ldd	r18, Z+3	; 0x03
    582c:	21 fd       	sbrc	r18, 1
    582e:	03 c0       	rjmp	.+6      	; 0x5836 <fputc+0x16>
    5830:	8f ef       	ldi	r24, 0xFF	; 255
    5832:	9f ef       	ldi	r25, 0xFF	; 255
    5834:	2c c0       	rjmp	.+88     	; 0x588e <fputc+0x6e>
    5836:	22 ff       	sbrs	r18, 2
    5838:	16 c0       	rjmp	.+44     	; 0x5866 <fputc+0x46>
    583a:	46 81       	ldd	r20, Z+6	; 0x06
    583c:	57 81       	ldd	r21, Z+7	; 0x07
    583e:	24 81       	ldd	r18, Z+4	; 0x04
    5840:	35 81       	ldd	r19, Z+5	; 0x05
    5842:	42 17       	cp	r20, r18
    5844:	53 07       	cpc	r21, r19
    5846:	44 f4       	brge	.+16     	; 0x5858 <fputc+0x38>
    5848:	a0 81       	ld	r26, Z
    584a:	b1 81       	ldd	r27, Z+1	; 0x01
    584c:	9d 01       	movw	r18, r26
    584e:	2f 5f       	subi	r18, 0xFF	; 255
    5850:	3f 4f       	sbci	r19, 0xFF	; 255
    5852:	31 83       	std	Z+1, r19	; 0x01
    5854:	20 83       	st	Z, r18
    5856:	8c 93       	st	X, r24
    5858:	26 81       	ldd	r18, Z+6	; 0x06
    585a:	37 81       	ldd	r19, Z+7	; 0x07
    585c:	2f 5f       	subi	r18, 0xFF	; 255
    585e:	3f 4f       	sbci	r19, 0xFF	; 255
    5860:	37 83       	std	Z+7, r19	; 0x07
    5862:	26 83       	std	Z+6, r18	; 0x06
    5864:	14 c0       	rjmp	.+40     	; 0x588e <fputc+0x6e>
    5866:	8b 01       	movw	r16, r22
    5868:	ec 01       	movw	r28, r24
    586a:	fb 01       	movw	r30, r22
    586c:	00 84       	ldd	r0, Z+8	; 0x08
    586e:	f1 85       	ldd	r31, Z+9	; 0x09
    5870:	e0 2d       	mov	r30, r0
    5872:	19 95       	eicall
    5874:	89 2b       	or	r24, r25
    5876:	e1 f6       	brne	.-72     	; 0x5830 <fputc+0x10>
    5878:	d8 01       	movw	r26, r16
    587a:	16 96       	adiw	r26, 0x06	; 6
    587c:	8d 91       	ld	r24, X+
    587e:	9c 91       	ld	r25, X
    5880:	17 97       	sbiw	r26, 0x07	; 7
    5882:	01 96       	adiw	r24, 0x01	; 1
    5884:	17 96       	adiw	r26, 0x07	; 7
    5886:	9c 93       	st	X, r25
    5888:	8e 93       	st	-X, r24
    588a:	16 97       	sbiw	r26, 0x06	; 6
    588c:	ce 01       	movw	r24, r28
    588e:	df 91       	pop	r29
    5890:	cf 91       	pop	r28
    5892:	1f 91       	pop	r17
    5894:	0f 91       	pop	r16
    5896:	08 95       	ret

00005898 <__ultoa_invert>:
    5898:	fa 01       	movw	r30, r20
    589a:	aa 27       	eor	r26, r26
    589c:	28 30       	cpi	r18, 0x08	; 8
    589e:	51 f1       	breq	.+84     	; 0x58f4 <__ultoa_invert+0x5c>
    58a0:	20 31       	cpi	r18, 0x10	; 16
    58a2:	81 f1       	breq	.+96     	; 0x5904 <__ultoa_invert+0x6c>
    58a4:	e8 94       	clt
    58a6:	6f 93       	push	r22
    58a8:	6e 7f       	andi	r22, 0xFE	; 254
    58aa:	6e 5f       	subi	r22, 0xFE	; 254
    58ac:	7f 4f       	sbci	r23, 0xFF	; 255
    58ae:	8f 4f       	sbci	r24, 0xFF	; 255
    58b0:	9f 4f       	sbci	r25, 0xFF	; 255
    58b2:	af 4f       	sbci	r26, 0xFF	; 255
    58b4:	b1 e0       	ldi	r27, 0x01	; 1
    58b6:	3e d0       	rcall	.+124    	; 0x5934 <__ultoa_invert+0x9c>
    58b8:	b4 e0       	ldi	r27, 0x04	; 4
    58ba:	3c d0       	rcall	.+120    	; 0x5934 <__ultoa_invert+0x9c>
    58bc:	67 0f       	add	r22, r23
    58be:	78 1f       	adc	r23, r24
    58c0:	89 1f       	adc	r24, r25
    58c2:	9a 1f       	adc	r25, r26
    58c4:	a1 1d       	adc	r26, r1
    58c6:	68 0f       	add	r22, r24
    58c8:	79 1f       	adc	r23, r25
    58ca:	8a 1f       	adc	r24, r26
    58cc:	91 1d       	adc	r25, r1
    58ce:	a1 1d       	adc	r26, r1
    58d0:	6a 0f       	add	r22, r26
    58d2:	71 1d       	adc	r23, r1
    58d4:	81 1d       	adc	r24, r1
    58d6:	91 1d       	adc	r25, r1
    58d8:	a1 1d       	adc	r26, r1
    58da:	20 d0       	rcall	.+64     	; 0x591c <__ultoa_invert+0x84>
    58dc:	09 f4       	brne	.+2      	; 0x58e0 <__ultoa_invert+0x48>
    58de:	68 94       	set
    58e0:	3f 91       	pop	r19
    58e2:	2a e0       	ldi	r18, 0x0A	; 10
    58e4:	26 9f       	mul	r18, r22
    58e6:	11 24       	eor	r1, r1
    58e8:	30 19       	sub	r19, r0
    58ea:	30 5d       	subi	r19, 0xD0	; 208
    58ec:	31 93       	st	Z+, r19
    58ee:	de f6       	brtc	.-74     	; 0x58a6 <__ultoa_invert+0xe>
    58f0:	cf 01       	movw	r24, r30
    58f2:	08 95       	ret
    58f4:	46 2f       	mov	r20, r22
    58f6:	47 70       	andi	r20, 0x07	; 7
    58f8:	40 5d       	subi	r20, 0xD0	; 208
    58fa:	41 93       	st	Z+, r20
    58fc:	b3 e0       	ldi	r27, 0x03	; 3
    58fe:	0f d0       	rcall	.+30     	; 0x591e <__ultoa_invert+0x86>
    5900:	c9 f7       	brne	.-14     	; 0x58f4 <__ultoa_invert+0x5c>
    5902:	f6 cf       	rjmp	.-20     	; 0x58f0 <__ultoa_invert+0x58>
    5904:	46 2f       	mov	r20, r22
    5906:	4f 70       	andi	r20, 0x0F	; 15
    5908:	40 5d       	subi	r20, 0xD0	; 208
    590a:	4a 33       	cpi	r20, 0x3A	; 58
    590c:	18 f0       	brcs	.+6      	; 0x5914 <__ultoa_invert+0x7c>
    590e:	49 5d       	subi	r20, 0xD9	; 217
    5910:	31 fd       	sbrc	r19, 1
    5912:	40 52       	subi	r20, 0x20	; 32
    5914:	41 93       	st	Z+, r20
    5916:	02 d0       	rcall	.+4      	; 0x591c <__ultoa_invert+0x84>
    5918:	a9 f7       	brne	.-22     	; 0x5904 <__ultoa_invert+0x6c>
    591a:	ea cf       	rjmp	.-44     	; 0x58f0 <__ultoa_invert+0x58>
    591c:	b4 e0       	ldi	r27, 0x04	; 4
    591e:	a6 95       	lsr	r26
    5920:	97 95       	ror	r25
    5922:	87 95       	ror	r24
    5924:	77 95       	ror	r23
    5926:	67 95       	ror	r22
    5928:	ba 95       	dec	r27
    592a:	c9 f7       	brne	.-14     	; 0x591e <__ultoa_invert+0x86>
    592c:	00 97       	sbiw	r24, 0x00	; 0
    592e:	61 05       	cpc	r22, r1
    5930:	71 05       	cpc	r23, r1
    5932:	08 95       	ret
    5934:	9b 01       	movw	r18, r22
    5936:	ac 01       	movw	r20, r24
    5938:	0a 2e       	mov	r0, r26
    593a:	06 94       	lsr	r0
    593c:	57 95       	ror	r21
    593e:	47 95       	ror	r20
    5940:	37 95       	ror	r19
    5942:	27 95       	ror	r18
    5944:	ba 95       	dec	r27
    5946:	c9 f7       	brne	.-14     	; 0x593a <__ultoa_invert+0xa2>
    5948:	62 0f       	add	r22, r18
    594a:	73 1f       	adc	r23, r19
    594c:	84 1f       	adc	r24, r20
    594e:	95 1f       	adc	r25, r21
    5950:	a0 1d       	adc	r26, r0
    5952:	08 95       	ret

00005954 <_exit>:
    5954:	f8 94       	cli

00005956 <__stop_program>:
    5956:	ff cf       	rjmp	.-2      	; 0x5956 <__stop_program>
